
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 be f7 00 00       	call   c000f7de <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 33 6f 02 00       	call   c0026f58 <_init>
c0000025:	c3                   	ret    
c0000026:	bb b4 7a 02 c0       	mov    ebx,0xc0027ab4
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb c0 7a 02 c0    	cmp    ebx,0xc0027ac0
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 d8 bd 02 c0       	mov    eax,0xc002bdd8
c0000049:	3d d8 bd 02 c0       	cmp    eax,0xc002bdd8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 d8 bd 02 c0       	push   0xc002bdd8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 d8 bd 02 c0       	mov    eax,0xc002bdd8
c0000075:	2d d8 bd 02 c0       	sub    eax,0xc002bdd8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 d8 bd 02 c0       	push   0xc002bdd8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 08 c4 02 c0 00 	cmp    BYTE PTR ds:0xc002c408,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb c8 7a 02 c0       	mov    ebx,0xc0027ac8
c00000bb:	81 eb c4 7a 02 c0    	sub    ebx,0xc0027ac4
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be c4 7a 02 c0       	mov    esi,0xc0027ac4
c00000ca:	a1 0c c4 02 c0       	mov    eax,ds:0xc002c40c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 0c c4 02 c0       	mov    ds:0xc002c40c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 0c c4 02 c0       	mov    eax,ds:0xc002c40c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 d8 bd 02 c0       	push   0xc002bdd8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 08 c4 02 c0 01 	mov    BYTE PTR ds:0xc002c408,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 10 c4 02 c0       	push   0xc002c410
c000012c:	68 d8 bd 02 c0       	push   0xc002bdd8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <prepareTramp>:
c0000150:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000157:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c000015e:	50                   	push   eax
c000015f:	0f 20 d8             	mov    eax,cr3
c0000162:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000167:	58                   	pop    eax
c0000168:	c3                   	ret    

c0000169 <voodooXADD>:
c0000169:	55                   	push   ebp
c000016a:	89 e5                	mov    ebp,esp
c000016c:	60                   	pusha  
c000016d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000170:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0000173:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0000176:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c0000179:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000017c:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c000017f:	0f 02 ff             	lar    edi,di
c0000182:	c1 ef 0d             	shr    edi,0xd
c0000185:	66 81 e7 03 00       	and    di,0x3
c000018a:	75 09                	jne    c0000195 <voodooXADD.usermode>
c000018c:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c000018f:	81 c4 14 00 00 00    	add    esp,0x14

c0000195 <voodooXADD.usermode>:
c0000195:	89 35 30 02 00 c0    	mov    DWORD PTR ds:0xc0000230,esi
c000019b:	89 25 2c 02 00 c0    	mov    DWORD PTR ds:0xc000022c,esp
c00001a1:	60                   	pusha  
c00001a2:	b0 90                	mov    al,0x90
c00001a4:	b9 20 00 00 00       	mov    ecx,0x20
c00001a9:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001ae:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001b0:	61                   	popa   
c00001b1:	60                   	pusha  
c00001b2:	89 d6                	mov    esi,edx
c00001b4:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001bb:	61                   	popa   
c00001bc:	60                   	pusha  
c00001bd:	89 d6                	mov    esi,edx
c00001bf:	bf 13 02 00 c0       	mov    edi,0xc0000213
c00001c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001c6:	61                   	popa   
c00001c7:	b1 90                	mov    cl,0x90
c00001c9:	85 db                	test   ebx,ebx
c00001cb:	74 06                	je     c00001d3 <voodooXADD.skipChange>
c00001cd:	8a 8b 02 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdfe]

c00001d3 <voodooXADD.skipChange>:
c00001d3:	88 8b 03 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdfd],cl
c00001d9:	80 ab 04 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdfc],0x3a
c00001e0:	88 8b 13 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffded],cl
c00001e6:	80 ab 14 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffdec],0xbe
c00001ed:	89 c4                	mov    esp,eax
c00001ef:	81 c4 10 00 00 00    	add    esp,0x10
c00001f5:	5f                   	pop    edi
c00001f6:	5e                   	pop    esi
c00001f7:	5d                   	pop    ebp
c00001f8:	5b                   	pop    ebx
c00001f9:	5b                   	pop    ebx
c00001fa:	5a                   	pop    edx
c00001fb:	59                   	pop    ecx
c00001fc:	58                   	pop    eax
c00001fd:	8b 25 30 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000230

c0000203 <voodooXADD.helper>:
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	90                   	nop
c0000217:	90                   	nop
c0000218:	90                   	nop
c0000219:	90                   	nop
c000021a:	90                   	nop
c000021b:	90                   	nop
c000021c:	90                   	nop
c000021d:	90                   	nop
c000021e:	90                   	nop
c000021f:	90                   	nop
c0000220:	90                   	nop
c0000221:	90                   	nop
c0000222:	90                   	nop
c0000223:	8b 25 2c 02 00 c0    	mov    esp,DWORD PTR ds:0xc000022c
c0000229:	61                   	popa   
c000022a:	c9                   	leave  
c000022b:	c3                   	ret    

c000022c <voodooXADD.oldStack>:
c000022c:	00 00                	add    BYTE PTR [eax],al
	...

c0000230 <voodooXADD.newStack>:
c0000230:	00 00                	add    BYTE PTR [eax],al
	...

c0000234 <doTPAUSE>:
c0000234:	fb                   	sti    
c0000235:	31 c0                	xor    eax,eax
c0000237:	31 d2                	xor    edx,edx
c0000239:	66 0f ae f0          	tpause eax
c000023d:	c3                   	ret    

c000023e <hasLegacyFPU>:
c000023e:	0f 20 c2             	mov    edx,cr0
c0000241:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000247:	0f 22 c2             	mov    cr0,edx
c000024a:	db e3                	fninit 
c000024c:	dd 3d 61 02 00 c0    	fnstsw WORD PTR ds:0xc0000261
c0000252:	31 c0                	xor    eax,eax
c0000254:	66 81 3d 61 02 00 c0 00 00 	cmp    WORD PTR ds:0xc0000261,0x0
c000025d:	75 01                	jne    c0000260 <hasLegacyFPU.nofpu>

c000025f <hasLegacyFPU.hasfpu>:
c000025f:	40                   	inc    eax

c0000260 <hasLegacyFPU.nofpu>:
c0000260:	c3                   	ret    

c0000261 <testword>:
c0000261:	aa                   	stos   BYTE PTR es:[edi],al
c0000262:	55                   	push   ebp

c0000263 <is486>:
c0000263:	0f 09                	wbinvd 
c0000265:	31 c0                	xor    eax,eax
c0000267:	40                   	inc    eax
c0000268:	c3                   	ret    
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	90                   	nop
c000026f:	90                   	nop
c0000270:	90                   	nop
c0000271:	90                   	nop
c0000272:	90                   	nop
c0000273:	90                   	nop
c0000274:	90                   	nop
c0000275:	90                   	nop
c0000276:	90                   	nop
c0000277:	90                   	nop
c0000278:	90                   	nop
c0000279:	90                   	nop
c000027a:	90                   	nop
c000027b:	90                   	nop
c000027c:	90                   	nop
c000027d:	90                   	nop
c000027e:	90                   	nop
c000027f:	90                   	nop
c0000280:	90                   	nop
c0000281:	90                   	nop
c0000282:	90                   	nop
c0000283:	90                   	nop
c0000284:	90                   	nop
c0000285:	90                   	nop
c0000286:	90                   	nop
c0000287:	90                   	nop
c0000288:	90                   	nop
c0000289:	90                   	nop
c000028a:	90                   	nop
c000028b:	90                   	nop
c000028c:	90                   	nop
c000028d:	90                   	nop
c000028e:	90                   	nop
c000028f:	90                   	nop
c0000290:	90                   	nop
c0000291:	90                   	nop
c0000292:	90                   	nop
c0000293:	90                   	nop
c0000294:	90                   	nop
c0000295:	90                   	nop
c0000296:	31 c0                	xor    eax,eax
c0000298:	c3                   	ret    

c0000299 <detectCPUID>:
c0000299:	9c                   	pushf  
c000029a:	9c                   	pushf  
c000029b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002a2:	9d                   	popf   
c00002a3:	9c                   	pushf  
c00002a4:	58                   	pop    eax
c00002a5:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002a8:	9d                   	popf   
c00002a9:	25 00 00 20 00       	and    eax,0x200000
c00002ae:	c3                   	ret    

c00002af <goToVM86>:
c00002af:	55                   	push   ebp
c00002b0:	89 e5                	mov    ebp,esp
c00002b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00002b5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00002b8:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00002bb:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00002be:	25 ff ff 00 00       	and    eax,0xffff
c00002c3:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00002c9:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00002cf:	81 e2 ff ff 00 00    	and    edx,0xffff
c00002d5:	52                   	push   edx
c00002d6:	51                   	push   ecx
c00002d7:	68 02 02 02 00       	push   0x20202
c00002dc:	53                   	push   ebx
c00002dd:	50                   	push   eax
c00002de:	cf                   	iret   

c00002df <goToUsermode>:
c00002df:	55                   	push   ebp
c00002e0:	89 e5                	mov    ebp,esp
c00002e2:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00002e5:	66 b8 23 00          	mov    ax,0x23
c00002e9:	66 8e d8             	mov    ds,ax
c00002ec:	66 8e c0             	mov    es,ax
c00002ef:	66 8e e0             	mov    fs,ax
c00002f2:	66 8e e8             	mov    gs,ax
c00002f5:	89 e0                	mov    eax,esp
c00002f7:	68 23 00 00 00       	push   0x23
c00002fc:	50                   	push   eax
c00002fd:	68 02 02 00 00       	push   0x202
c0000302:	68 1b 00 00 00       	push   0x1b
c0000307:	53                   	push   ebx
c0000308:	cf                   	iret   

c0000309 <switchToThreadASMFirstTime>:
c0000309:	9c                   	pushf  
c000030a:	fa                   	cli    
c000030b:	50                   	push   eax
c000030c:	53                   	push   ebx
c000030d:	51                   	push   ecx
c000030e:	52                   	push   edx
c000030f:	56                   	push   esi
c0000310:	57                   	push   edi
c0000311:	55                   	push   ebp
c0000312:	e9 11 00 00 00       	jmp    c0000328 <commonThreadSwitch>

c0000317 <switchToThreadASM>:
c0000317:	9c                   	pushf  
c0000318:	50                   	push   eax
c0000319:	53                   	push   ebx
c000031a:	51                   	push   ecx
c000031b:	52                   	push   edx
c000031c:	56                   	push   esi
c000031d:	57                   	push   edi
c000031e:	55                   	push   ebp
c000031f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000325:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000328 <commonThreadSwitch>:
c0000328:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000032c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000332:	8b 06                	mov    eax,DWORD PTR [esi]
c0000334:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000337:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000033a:	0f 20 d9             	mov    ecx,cr3
c000033d:	39 c8                	cmp    eax,ecx
c000033f:	74 03                	je     c0000344 <commonThreadSwitch.doneVAS>
c0000341:	0f 22 d8             	mov    cr3,eax

c0000344 <commonThreadSwitch.doneVAS>:
c0000344:	85 d2                	test   edx,edx
c0000346:	75 11                	jne    c0000359 <commonThreadSwitch.firstTime>
c0000348:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000034b:	e8 a6 c4 01 00       	call   c001c7f6 <changeTSS>
c0000350:	5d                   	pop    ebp
c0000351:	5f                   	pop    edi
c0000352:	5e                   	pop    esi
c0000353:	5a                   	pop    edx
c0000354:	59                   	pop    ecx
c0000355:	5b                   	pop    ebx
c0000356:	58                   	pop    eax
c0000357:	9d                   	popf   
c0000358:	c3                   	ret    

c0000359 <commonThreadSwitch.firstTime>:
c0000359:	fa                   	cli    
c000035a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000035d:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000362:	60                   	pusha  
c0000363:	e8 fd 20 01 00       	call   c0012465 <mapVASFirstTime>
c0000368:	61                   	popa   
c0000369:	89 c4                	mov    esp,eax
c000036b:	56                   	push   esi
c000036c:	52                   	push   edx
c000036d:	e8 84 c4 01 00       	call   c001c7f6 <changeTSS>
c0000372:	5a                   	pop    edx
c0000373:	5e                   	pop    esi
c0000374:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c000037b:	5d                   	pop    ebp
c000037c:	5f                   	pop    edi
c000037d:	5e                   	pop    esi
c000037e:	59                   	pop    ecx
c000037f:	59                   	pop    ecx
c0000380:	5b                   	pop    ebx
c0000381:	58                   	pop    eax
c0000382:	81 c4 04 00 00 00    	add    esp,0x4
c0000388:	6a 02                	push   0x2
c000038a:	9d                   	popf   
c000038b:	52                   	push   edx
c000038c:	e8 d2 c8 01 00       	call   c001cc63 <taskStartupFunction>
c0000391:	5a                   	pop    edx
c0000392:	50                   	push   eax
c0000393:	ff d2                	call   edx
c0000395:	e8 80 ce 01 00       	call   c001d21a <taskReturned>
c000039a:	e9 fb ff ff ff       	jmp    c000039a <commonThreadSwitch.firstTime+0x41>

c000039f <asmQuickAcquireLock>:
c000039f:	55                   	push   ebp
c00003a0:	89 e5                	mov    ebp,esp
c00003a2:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003a5 <asmQuickAcquireLock.retry>:
c00003a5:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003aa:	72 02                	jb     c00003ae <asmQuickAcquireLock.spin_with_pause>
c00003ac:	fa                   	cli    
c00003ad:	c3                   	ret    

c00003ae <asmQuickAcquireLock.spin_with_pause>:
c00003ae:	f3 90                	pause  
c00003b0:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003b6:	75 f6                	jne    c00003ae <asmQuickAcquireLock.spin_with_pause>
c00003b8:	e9 e8 ff ff ff       	jmp    c00003a5 <asmQuickAcquireLock.retry>

c00003bd <asmQuickReleaseLock>:
c00003bd:	55                   	push   ebp
c00003be:	89 e5                	mov    ebp,esp
c00003c0:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00003c7:	5d                   	pop    ebp
c00003c8:	c3                   	ret    

c00003c9 <asmAcquireLock>:
c00003c9:	55                   	push   ebp
c00003ca:	89 e5                	mov    ebp,esp
c00003cc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003cf <asmAcquireLock.retry>:
c00003cf:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003d4:	72 05                	jb     c00003db <asmAcquireLock.spin_with_pause>
c00003d6:	9c                   	pushf  
c00003d7:	58                   	pop    eax
c00003d8:	fa                   	cli    
c00003d9:	5d                   	pop    ebp
c00003da:	c3                   	ret    

c00003db <asmAcquireLock.spin_with_pause>:
c00003db:	f3 90                	pause  
c00003dd:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003e3:	75 f6                	jne    c00003db <asmAcquireLock.spin_with_pause>
c00003e5:	e9 e5 ff ff ff       	jmp    c00003cf <asmAcquireLock.retry>

c00003ea <asmReleaseLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00003f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00003f3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00003f9:	52                   	push   edx
c00003fa:	9d                   	popf   
c00003fb:	5d                   	pop    ebp
c00003fc:	c3                   	ret    

c00003fd <loadGDT>:
c00003fd:	0f 01 15 50 c8 02 c0 	lgdtd  ds:0xc002c850
c0000404:	66 b8 10 00          	mov    ax,0x10
c0000408:	66 8e d8             	mov    ds,ax
c000040b:	66 8e c0             	mov    es,ax
c000040e:	66 8e e0             	mov    fs,ax
c0000411:	66 8e e8             	mov    gs,ax
c0000414:	66 8e d0             	mov    ss,ax
c0000417:	e9 00 00 00 00       	jmp    c000041c <flush2>

c000041c <flush2>:
c000041c:	c3                   	ret    

c000041d <isr0>:
c000041d:	fa                   	cli    
c000041e:	68 00 00 00 00       	push   0x0
c0000423:	68 00 00 00 00       	push   0x0
c0000428:	e9 44 01 00 00       	jmp    c0000571 <int_common_stub>

c000042d <isr1>:
c000042d:	fa                   	cli    
c000042e:	6a 00                	push   0x0
c0000430:	6a 01                	push   0x1
c0000432:	e9 3a 01 00 00       	jmp    c0000571 <int_common_stub>

c0000437 <isr2>:
c0000437:	fa                   	cli    
c0000438:	6a 00                	push   0x0
c000043a:	6a 02                	push   0x2
c000043c:	e9 30 01 00 00       	jmp    c0000571 <int_common_stub>

c0000441 <isr3>:
c0000441:	fa                   	cli    
c0000442:	6a 00                	push   0x0
c0000444:	6a 03                	push   0x3
c0000446:	e9 26 01 00 00       	jmp    c0000571 <int_common_stub>

c000044b <isr4>:
c000044b:	fa                   	cli    
c000044c:	6a 00                	push   0x0
c000044e:	6a 04                	push   0x4
c0000450:	e9 1c 01 00 00       	jmp    c0000571 <int_common_stub>

c0000455 <isr5>:
c0000455:	fa                   	cli    
c0000456:	6a 00                	push   0x0
c0000458:	6a 05                	push   0x5
c000045a:	e9 12 01 00 00       	jmp    c0000571 <int_common_stub>

c000045f <isr6>:
c000045f:	fa                   	cli    
c0000460:	6a 00                	push   0x0
c0000462:	6a 06                	push   0x6
c0000464:	e9 08 01 00 00       	jmp    c0000571 <int_common_stub>

c0000469 <isr7>:
c0000469:	fa                   	cli    
c000046a:	6a 00                	push   0x0
c000046c:	6a 07                	push   0x7
c000046e:	e9 fe 00 00 00       	jmp    c0000571 <int_common_stub>

c0000473 <isr8>:
c0000473:	fa                   	cli    
c0000474:	6a 08                	push   0x8
c0000476:	e9 f6 00 00 00       	jmp    c0000571 <int_common_stub>

c000047b <isr9>:
c000047b:	fa                   	cli    
c000047c:	6a 00                	push   0x0
c000047e:	6a 09                	push   0x9
c0000480:	e9 ec 00 00 00       	jmp    c0000571 <int_common_stub>

c0000485 <isr10>:
c0000485:	fa                   	cli    
c0000486:	6a 0a                	push   0xa
c0000488:	e9 e4 00 00 00       	jmp    c0000571 <int_common_stub>

c000048d <isr11>:
c000048d:	fa                   	cli    
c000048e:	6a 0b                	push   0xb
c0000490:	e9 dc 00 00 00       	jmp    c0000571 <int_common_stub>

c0000495 <isr12>:
c0000495:	fa                   	cli    
c0000496:	6a 0c                	push   0xc
c0000498:	e9 d4 00 00 00       	jmp    c0000571 <int_common_stub>

c000049d <isr13>:
c000049d:	fa                   	cli    
c000049e:	6a 0d                	push   0xd
c00004a0:	e9 cc 00 00 00       	jmp    c0000571 <int_common_stub>

c00004a5 <isr14>:
c00004a5:	fa                   	cli    
c00004a6:	6a 0e                	push   0xe
c00004a8:	e9 c4 00 00 00       	jmp    c0000571 <int_common_stub>

c00004ad <isr15>:
c00004ad:	fa                   	cli    
c00004ae:	6a 00                	push   0x0
c00004b0:	6a 0f                	push   0xf
c00004b2:	e9 ba 00 00 00       	jmp    c0000571 <int_common_stub>

c00004b7 <isr16>:
c00004b7:	fa                   	cli    
c00004b8:	6a 00                	push   0x0
c00004ba:	6a 10                	push   0x10
c00004bc:	e9 b0 00 00 00       	jmp    c0000571 <int_common_stub>

c00004c1 <isr17>:
c00004c1:	fa                   	cli    
c00004c2:	6a 00                	push   0x0
c00004c4:	6a 11                	push   0x11
c00004c6:	e9 a6 00 00 00       	jmp    c0000571 <int_common_stub>

c00004cb <isr18>:
c00004cb:	fa                   	cli    
c00004cc:	6a 00                	push   0x0
c00004ce:	6a 12                	push   0x12
c00004d0:	e9 9c 00 00 00       	jmp    c0000571 <int_common_stub>

c00004d5 <irq3>:
c00004d5:	fa                   	cli    
c00004d6:	6a 00                	push   0x0
c00004d8:	6a 23                	push   0x23
c00004da:	e9 92 00 00 00       	jmp    c0000571 <int_common_stub>

c00004df <irq4>:
c00004df:	fa                   	cli    
c00004e0:	6a 00                	push   0x0
c00004e2:	6a 24                	push   0x24
c00004e4:	e9 88 00 00 00       	jmp    c0000571 <int_common_stub>

c00004e9 <irq5>:
c00004e9:	fa                   	cli    
c00004ea:	6a 00                	push   0x0
c00004ec:	6a 25                	push   0x25
c00004ee:	e9 7e 00 00 00       	jmp    c0000571 <int_common_stub>

c00004f3 <irq6>:
c00004f3:	fa                   	cli    
c00004f4:	6a 00                	push   0x0
c00004f6:	6a 26                	push   0x26
c00004f8:	e9 74 00 00 00       	jmp    c0000571 <int_common_stub>

c00004fd <irq7>:
c00004fd:	fa                   	cli    
c00004fe:	6a 00                	push   0x0
c0000500:	6a 27                	push   0x27
c0000502:	e9 6a 00 00 00       	jmp    c0000571 <int_common_stub>

c0000507 <irq8>:
c0000507:	fa                   	cli    
c0000508:	6a 00                	push   0x0
c000050a:	6a 28                	push   0x28
c000050c:	e9 60 00 00 00       	jmp    c0000571 <int_common_stub>

c0000511 <irq9>:
c0000511:	fa                   	cli    
c0000512:	6a 00                	push   0x0
c0000514:	6a 29                	push   0x29
c0000516:	e9 56 00 00 00       	jmp    c0000571 <int_common_stub>

c000051b <irq10>:
c000051b:	fa                   	cli    
c000051c:	6a 00                	push   0x0
c000051e:	6a 2a                	push   0x2a
c0000520:	e9 4c 00 00 00       	jmp    c0000571 <int_common_stub>

c0000525 <irq11>:
c0000525:	fa                   	cli    
c0000526:	6a 00                	push   0x0
c0000528:	6a 2b                	push   0x2b
c000052a:	e9 42 00 00 00       	jmp    c0000571 <int_common_stub>

c000052f <irq12>:
c000052f:	fa                   	cli    
c0000530:	6a 00                	push   0x0
c0000532:	6a 2c                	push   0x2c
c0000534:	e9 38 00 00 00       	jmp    c0000571 <int_common_stub>

c0000539 <irq13>:
c0000539:	fa                   	cli    
c000053a:	6a 00                	push   0x0
c000053c:	6a 2d                	push   0x2d
c000053e:	e9 2e 00 00 00       	jmp    c0000571 <int_common_stub>

c0000543 <irq14>:
c0000543:	fa                   	cli    
c0000544:	6a 00                	push   0x0
c0000546:	6a 2e                	push   0x2e
c0000548:	e9 24 00 00 00       	jmp    c0000571 <int_common_stub>

c000054d <irq15>:
c000054d:	fa                   	cli    
c000054e:	6a 00                	push   0x0
c0000550:	6a 2f                	push   0x2f
c0000552:	e9 1a 00 00 00       	jmp    c0000571 <int_common_stub>

c0000557 <irq1>:
c0000557:	fa                   	cli    
c0000558:	6a 00                	push   0x0
c000055a:	6a 21                	push   0x21
c000055c:	eb 13                	jmp    c0000571 <int_common_stub>

c000055e <irq2>:
c000055e:	fa                   	cli    
c000055f:	6a 00                	push   0x0
c0000561:	6a 22                	push   0x22
c0000563:	eb 0c                	jmp    c0000571 <int_common_stub>

c0000565 <isr96>:
c0000565:	6a 00                	push   0x0
c0000567:	6a 60                	push   0x60
c0000569:	fb                   	sti    
c000056a:	eb 05                	jmp    c0000571 <int_common_stub>

c000056c <irq0>:
c000056c:	fa                   	cli    
c000056d:	6a 00                	push   0x0
c000056f:	6a 20                	push   0x20

c0000571 <int_common_stub>:
c0000571:	60                   	pusha  
c0000572:	1e                   	push   ds
c0000573:	06                   	push   es
c0000574:	0f a0                	push   fs
c0000576:	0f a8                	push   gs
c0000578:	66 b8 10 00          	mov    ax,0x10
c000057c:	66 8e d8             	mov    ds,ax
c000057f:	66 8e c0             	mov    es,ax
c0000582:	66 8e e0             	mov    fs,ax
c0000585:	66 8e e8             	mov    gs,ax
c0000588:	54                   	push   esp
c0000589:	e8 8f 3d 01 00       	call   c001431d <int_handler>
c000058e:	81 c4 04 00 00 00    	add    esp,0x4
c0000594:	0f a9                	pop    gs
c0000596:	0f a1                	pop    fs
c0000598:	07                   	pop    es
c0000599:	1f                   	pop    ds
c000059a:	61                   	popa   
c000059b:	81 c4 08 00 00 00    	add    esp,0x8
c00005a1:	cf                   	iret   

c00005a2 <irq16>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 30                	push   0x30
c00005a7:	e9 c5 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005ac <irq17>:
c00005ac:	fa                   	cli    
c00005ad:	6a 00                	push   0x0
c00005af:	6a 31                	push   0x31
c00005b1:	e9 bb ff ff ff       	jmp    c0000571 <int_common_stub>

c00005b6 <irq18>:
c00005b6:	fa                   	cli    
c00005b7:	6a 00                	push   0x0
c00005b9:	6a 32                	push   0x32
c00005bb:	e9 b1 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005c0 <irq19>:
c00005c0:	fa                   	cli    
c00005c1:	6a 00                	push   0x0
c00005c3:	6a 33                	push   0x33
c00005c5:	e9 a7 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005ca <irq20>:
c00005ca:	fa                   	cli    
c00005cb:	6a 00                	push   0x0
c00005cd:	6a 34                	push   0x34
c00005cf:	e9 9d ff ff ff       	jmp    c0000571 <int_common_stub>

c00005d4 <irq21>:
c00005d4:	fa                   	cli    
c00005d5:	6a 00                	push   0x0
c00005d7:	6a 35                	push   0x35
c00005d9:	e9 93 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005de <irq22>:
c00005de:	fa                   	cli    
c00005df:	6a 00                	push   0x0
c00005e1:	6a 36                	push   0x36
c00005e3:	e9 89 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005e8 <irq23>:
c00005e8:	fa                   	cli    
c00005e9:	6a 00                	push   0x0
c00005eb:	6a 37                	push   0x37
c00005ed:	e9 7f ff ff ff       	jmp    c0000571 <int_common_stub>

c00005f2 <memcmp>:
c00005f2:	56                   	push   esi
c00005f3:	53                   	push   ebx
c00005f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00005f8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00005fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000600:	01 d6                	add    esi,edx
c0000602:	39 f2                	cmp    edx,esi
c0000604:	74 0e                	je     c0000614 <memcmp+0x22>
c0000606:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000609:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000060c:	38 c8                	cmp    al,cl
c000060e:	75 08                	jne    c0000618 <memcmp+0x26>
c0000610:	42                   	inc    edx
c0000611:	43                   	inc    ebx
c0000612:	eb ee                	jmp    c0000602 <memcmp+0x10>
c0000614:	31 c0                	xor    eax,eax
c0000616:	eb 02                	jmp    c000061a <memcmp+0x28>
c0000618:	29 c8                	sub    eax,ecx
c000061a:	5b                   	pop    ebx
c000061b:	5e                   	pop    esi
c000061c:	c3                   	ret    

c000061d <memmove>:
c000061d:	56                   	push   esi
c000061e:	53                   	push   ebx
c000061f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000623:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000062b:	39 c8                	cmp    eax,ecx
c000062d:	73 12                	jae    c0000641 <memmove+0x24>
c000062f:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000632:	89 c3                	mov    ebx,eax
c0000634:	39 f1                	cmp    ecx,esi
c0000636:	74 1a                	je     c0000652 <memmove+0x35>
c0000638:	8a 11                	mov    dl,BYTE PTR [ecx]
c000063a:	43                   	inc    ebx
c000063b:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c000063e:	41                   	inc    ecx
c000063f:	eb f3                	jmp    c0000634 <memmove+0x17>
c0000641:	76 0f                	jbe    c0000652 <memmove+0x35>
c0000643:	85 d2                	test   edx,edx
c0000645:	74 0b                	je     c0000652 <memmove+0x35>
c0000647:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c000064b:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c000064f:	4a                   	dec    edx
c0000650:	eb f1                	jmp    c0000643 <memmove+0x26>
c0000652:	5b                   	pop    ebx
c0000653:	5e                   	pop    esi
c0000654:	c3                   	ret    

c0000655 <memcpy>:
c0000655:	57                   	push   edi
c0000656:	56                   	push   esi
c0000657:	53                   	push   ebx
c0000658:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000065c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000660:	89 da                	mov    edx,ebx
c0000662:	89 d9                	mov    ecx,ebx
c0000664:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000668:	83 e2 fc             	and    edx,0xfffffffc
c000066b:	c1 e9 02             	shr    ecx,0x2
c000066e:	89 c7                	mov    edi,eax
c0000670:	fc                   	cld    
c0000671:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000673:	8d 0c 16             	lea    ecx,[esi+edx*1]
c0000676:	01 c2                	add    edx,eax
c0000678:	01 de                	add    esi,ebx
c000067a:	39 f1                	cmp    ecx,esi
c000067c:	74 09                	je     c0000687 <memcpy+0x32>
c000067e:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000680:	42                   	inc    edx
c0000681:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000684:	41                   	inc    ecx
c0000685:	eb f3                	jmp    c000067a <memcpy+0x25>
c0000687:	5b                   	pop    ebx
c0000688:	5e                   	pop    esi
c0000689:	5f                   	pop    edi
c000068a:	c3                   	ret    

c000068b <memset>:
c000068b:	53                   	push   ebx
c000068c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000690:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000694:	89 c2                	mov    edx,eax
c0000696:	01 c1                	add    ecx,eax
c0000698:	39 ca                	cmp    edx,ecx
c000069a:	74 0a                	je     c00006a6 <memset+0x1b>
c000069c:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00006a0:	42                   	inc    edx
c00006a1:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006a4:	eb f2                	jmp    c0000698 <memset+0xd>
c00006a6:	5b                   	pop    ebx
c00006a7:	c3                   	ret    

c00006a8 <strlen>:
c00006a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006ac:	31 c0                	xor    eax,eax
c00006ae:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006b2:	74 03                	je     c00006b7 <strlen+0xf>
c00006b4:	40                   	inc    eax
c00006b5:	eb f7                	jmp    c00006ae <strlen+0x6>
c00006b7:	c3                   	ret    

c00006b8 <strpbrk>:
c00006b8:	53                   	push   ebx
c00006b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006bd:	8a 08                	mov    cl,BYTE PTR [eax]
c00006bf:	84 c9                	test   cl,cl
c00006c1:	74 14                	je     c00006d7 <strpbrk+0x1f>
c00006c3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00006c7:	8a 1a                	mov    bl,BYTE PTR [edx]
c00006c9:	84 db                	test   bl,bl
c00006cb:	74 07                	je     c00006d4 <strpbrk+0x1c>
c00006cd:	38 cb                	cmp    bl,cl
c00006cf:	74 08                	je     c00006d9 <strpbrk+0x21>
c00006d1:	42                   	inc    edx
c00006d2:	eb f3                	jmp    c00006c7 <strpbrk+0xf>
c00006d4:	40                   	inc    eax
c00006d5:	eb e6                	jmp    c00006bd <strpbrk+0x5>
c00006d7:	31 c0                	xor    eax,eax
c00006d9:	5b                   	pop    ebx
c00006da:	c3                   	ret    

c00006db <strtok>:
c00006db:	56                   	push   esi
c00006dc:	53                   	push   ebx
c00006dd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006e5:	85 db                	test   ebx,ebx
c00006e7:	75 0e                	jne    c00006f7 <strtok+0x1c>
c00006e9:	8b 1d 28 c4 02 c0    	mov    ebx,DWORD PTR ds:0xc002c428
c00006ef:	85 db                	test   ebx,ebx
c00006f1:	75 04                	jne    c00006f7 <strtok+0x1c>
c00006f3:	31 db                	xor    ebx,ebx
c00006f5:	eb 2e                	jmp    c0000725 <strtok+0x4a>
c00006f7:	56                   	push   esi
c00006f8:	53                   	push   ebx
c00006f9:	e8 ba ff ff ff       	call   c00006b8 <strpbrk>
c00006fe:	5a                   	pop    edx
c00006ff:	a3 28 c4 02 c0       	mov    ds:0xc002c428,eax
c0000704:	59                   	pop    ecx
c0000705:	a1 28 c4 02 c0       	mov    eax,ds:0xc002c428
c000070a:	39 d8                	cmp    eax,ebx
c000070c:	75 07                	jne    c0000715 <strtok+0x3a>
c000070e:	43                   	inc    ebx
c000070f:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000713:	eb e2                	jmp    c00006f7 <strtok+0x1c>
c0000715:	85 c0                	test   eax,eax
c0000717:	74 da                	je     c00006f3 <strtok+0x18>
c0000719:	8d 50 01             	lea    edx,[eax+0x1]
c000071c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000071f:	89 15 28 c4 02 c0    	mov    DWORD PTR ds:0xc002c428,edx
c0000725:	89 d8                	mov    eax,ebx
c0000727:	5b                   	pop    ebx
c0000728:	5e                   	pop    esi
c0000729:	c3                   	ret    

c000072a <strcpy>:
c000072a:	53                   	push   ebx
c000072b:	31 d2                	xor    edx,edx
c000072d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000731:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000735:	8d 1c 10             	lea    ebx,[eax+edx*1]
c0000738:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c000073b:	84 c9                	test   cl,cl
c000073d:	74 06                	je     c0000745 <strcpy+0x1b>
c000073f:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0000742:	42                   	inc    edx
c0000743:	eb ec                	jmp    c0000731 <strcpy+0x7>
c0000745:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000748:	5b                   	pop    ebx
c0000749:	c3                   	ret    

c000074a <strncpy>:
c000074a:	56                   	push   esi
c000074b:	53                   	push   ebx
c000074c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000750:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000754:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0000758:	89 c3                	mov    ebx,eax
c000075a:	85 c9                	test   ecx,ecx
c000075c:	74 1a                	je     c0000778 <strncpy+0x2e>
c000075e:	46                   	inc    esi
c000075f:	43                   	inc    ebx
c0000760:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c0000763:	49                   	dec    ecx
c0000764:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000767:	84 d2                	test   dl,dl
c0000769:	75 ef                	jne    c000075a <strncpy+0x10>
c000076b:	31 d2                	xor    edx,edx
c000076d:	39 d1                	cmp    ecx,edx
c000076f:	74 07                	je     c0000778 <strncpy+0x2e>
c0000771:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c0000775:	42                   	inc    edx
c0000776:	eb f5                	jmp    c000076d <strncpy+0x23>
c0000778:	5b                   	pop    ebx
c0000779:	5e                   	pop    esi
c000077a:	c3                   	ret    

c000077b <strcmp>:
c000077b:	31 c9                	xor    ecx,ecx
c000077d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000781:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000785:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0000789:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c000078d:	38 d0                	cmp    al,dl
c000078f:	75 08                	jne    c0000799 <strcmp+0x1e>
c0000791:	41                   	inc    ecx
c0000792:	84 c0                	test   al,al
c0000794:	75 e7                	jne    c000077d <strcmp+0x2>
c0000796:	31 c0                	xor    eax,eax
c0000798:	c3                   	ret    
c0000799:	29 d0                	sub    eax,edx
c000079b:	c3                   	ret    

c000079c <strchr>:
c000079c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007a0:	8a 10                	mov    dl,BYTE PTR [eax]
c00007a2:	84 d2                	test   dl,dl
c00007a4:	74 09                	je     c00007af <strchr+0x13>
c00007a6:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c00007aa:	74 05                	je     c00007b1 <strchr+0x15>
c00007ac:	40                   	inc    eax
c00007ad:	eb f1                	jmp    c00007a0 <strchr+0x4>
c00007af:	31 c0                	xor    eax,eax
c00007b1:	c3                   	ret    

c00007b2 <strncmp>:
c00007b2:	56                   	push   esi
c00007b3:	53                   	push   ebx
c00007b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00007b8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007bc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007c0:	01 d6                	add    esi,edx
c00007c2:	39 f2                	cmp    edx,esi
c00007c4:	74 12                	je     c00007d8 <strncmp+0x26>
c00007c6:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c00007c9:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007cc:	38 c8                	cmp    al,cl
c00007ce:	75 0c                	jne    c00007dc <strncmp+0x2a>
c00007d0:	42                   	inc    edx
c00007d1:	84 c0                	test   al,al
c00007d3:	74 03                	je     c00007d8 <strncmp+0x26>
c00007d5:	43                   	inc    ebx
c00007d6:	eb ea                	jmp    c00007c2 <strncmp+0x10>
c00007d8:	31 c0                	xor    eax,eax
c00007da:	eb 02                	jmp    c00007de <strncmp+0x2c>
c00007dc:	29 c8                	sub    eax,ecx
c00007de:	5b                   	pop    ebx
c00007df:	5e                   	pop    esi
c00007e0:	c3                   	ret    

c00007e1 <strcat>:
c00007e1:	53                   	push   ebx
c00007e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007e6:	89 c1                	mov    ecx,eax
c00007e8:	8d 51 01             	lea    edx,[ecx+0x1]
c00007eb:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007ef:	74 04                	je     c00007f5 <strcat+0x14>
c00007f1:	89 d1                	mov    ecx,edx
c00007f3:	eb f3                	jmp    c00007e8 <strcat+0x7>
c00007f5:	31 d2                	xor    edx,edx
c00007f7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007fb:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c00007fe:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c0000801:	42                   	inc    edx
c0000802:	84 db                	test   bl,bl
c0000804:	75 f1                	jne    c00007f7 <strcat+0x16>
c0000806:	5b                   	pop    ebx
c0000807:	c3                   	ret    

c0000808 <strncat>:
c0000808:	56                   	push   esi
c0000809:	53                   	push   ebx
c000080a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000080e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000812:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000816:	89 c2                	mov    edx,eax
c0000818:	85 db                	test   ebx,ebx
c000081a:	74 23                	je     c000083f <strncat+0x37>
c000081c:	8d 72 01             	lea    esi,[edx+0x1]
c000081f:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c0000823:	74 04                	je     c0000829 <strncat+0x21>
c0000825:	89 f2                	mov    edx,esi
c0000827:	eb f3                	jmp    c000081c <strncat+0x14>
c0000829:	8d 34 19             	lea    esi,[ecx+ebx*1]
c000082c:	41                   	inc    ecx
c000082d:	42                   	inc    edx
c000082e:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000831:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000834:	84 db                	test   bl,bl
c0000836:	74 07                	je     c000083f <strncat+0x37>
c0000838:	39 f1                	cmp    ecx,esi
c000083a:	75 f0                	jne    c000082c <strncat+0x24>
c000083c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000083f:	5b                   	pop    ebx
c0000840:	5e                   	pop    esi
c0000841:	c3                   	ret    

c0000842 <strstr>:
c0000842:	57                   	push   edi
c0000843:	56                   	push   esi
c0000844:	53                   	push   ebx
c0000845:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000849:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000084d:	57                   	push   edi
c000084e:	e8 55 fe ff ff       	call   c00006a8 <strlen>
c0000853:	59                   	pop    ecx
c0000854:	89 c6                	mov    esi,eax
c0000856:	85 c0                	test   eax,eax
c0000858:	74 1f                	je     c0000879 <strstr+0x37>
c000085a:	53                   	push   ebx
c000085b:	e8 48 fe ff ff       	call   c00006a8 <strlen>
c0000860:	5a                   	pop    edx
c0000861:	39 f0                	cmp    eax,esi
c0000863:	72 12                	jb     c0000877 <strstr+0x35>
c0000865:	56                   	push   esi
c0000866:	57                   	push   edi
c0000867:	53                   	push   ebx
c0000868:	e8 85 fd ff ff       	call   c00005f2 <memcmp>
c000086d:	83 c4 0c             	add    esp,0xc
c0000870:	85 c0                	test   eax,eax
c0000872:	74 05                	je     c0000879 <strstr+0x37>
c0000874:	43                   	inc    ebx
c0000875:	eb e3                	jmp    c000085a <strstr+0x18>
c0000877:	31 db                	xor    ebx,ebx
c0000879:	89 d8                	mov    eax,ebx
c000087b:	5b                   	pop    ebx
c000087c:	5e                   	pop    esi
c000087d:	5f                   	pop    edi
c000087e:	c3                   	ret    

c000087f <toupper>:
c000087f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000883:	0f b6 d0             	movzx  edx,al
c0000886:	f6 82 e0 7a 02 c0 02 	test   BYTE PTR [edx-0x3ffd8520],0x2
c000088d:	74 03                	je     c0000892 <toupper+0x13>
c000088f:	83 e8 20             	sub    eax,0x20
c0000892:	c3                   	ret    

c0000893 <tolower>:
c0000893:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000897:	0f b6 d0             	movzx  edx,al
c000089a:	f6 82 e0 7a 02 c0 01 	test   BYTE PTR [edx-0x3ffd8520],0x1
c00008a1:	74 03                	je     c00008a6 <tolower+0x13>
c00008a3:	83 c0 20             	add    eax,0x20
c00008a6:	c3                   	ret    

c00008a7 <simple_strtoul>:
c00008a7:	55                   	push   ebp
c00008a8:	57                   	push   edi
c00008a9:	56                   	push   esi
c00008aa:	53                   	push   ebx
c00008ab:	83 ec 08             	sub    esp,0x8
c00008ae:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008b2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008b6:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00008b9:	f6 82 e0 7a 02 c0 08 	test   BYTE PTR [edx-0x3ffd8520],0x8
c00008c0:	74 03                	je     c00008c5 <simple_strtoul+0x1e>
c00008c2:	41                   	inc    ecx
c00008c3:	eb f1                	jmp    c00008b6 <simple_strtoul+0xf>
c00008c5:	80 fa 09             	cmp    dl,0x9
c00008c8:	74 f8                	je     c00008c2 <simple_strtoul+0x1b>
c00008ca:	80 fa 2d             	cmp    dl,0x2d
c00008cd:	75 0b                	jne    c00008da <simple_strtoul+0x33>
c00008cf:	41                   	inc    ecx
c00008d0:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00008d8:	eb 0e                	jmp    c00008e8 <simple_strtoul+0x41>
c00008da:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00008e2:	80 fa 2b             	cmp    dl,0x2b
c00008e5:	75 01                	jne    c00008e8 <simple_strtoul+0x41>
c00008e7:	41                   	inc    ecx
c00008e8:	85 f6                	test   esi,esi
c00008ea:	75 22                	jne    c000090e <simple_strtoul+0x67>
c00008ec:	be 0a 00 00 00       	mov    esi,0xa
c00008f1:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008f4:	75 5a                	jne    c0000950 <simple_strtoul+0xa9>
c00008f6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c00008fa:	50                   	push   eax
c00008fb:	e8 93 ff ff ff       	call   c0000893 <tolower>
c0000900:	5a                   	pop    edx
c0000901:	83 f8 78             	cmp    eax,0x78
c0000904:	74 03                	je     c0000909 <simple_strtoul+0x62>
c0000906:	41                   	inc    ecx
c0000907:	eb 16                	jmp    c000091f <simple_strtoul+0x78>
c0000909:	83 c1 02             	add    ecx,0x2
c000090c:	eb 22                	jmp    c0000930 <simple_strtoul+0x89>
c000090e:	8d 46 fe             	lea    eax,[esi-0x2]
c0000911:	83 f8 22             	cmp    eax,0x22
c0000914:	0f 87 b7 00 00 00    	ja     c00009d1 <simple_strtoul+0x12a>
c000091a:	83 fe 08             	cmp    esi,0x8
c000091d:	75 0c                	jne    c000092b <simple_strtoul+0x84>
c000091f:	be 08 00 00 00       	mov    esi,0x8
c0000924:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000927:	75 27                	jne    c0000950 <simple_strtoul+0xa9>
c0000929:	eb 1f                	jmp    c000094a <simple_strtoul+0xa3>
c000092b:	83 fe 10             	cmp    esi,0x10
c000092e:	75 20                	jne    c0000950 <simple_strtoul+0xa9>
c0000930:	be 10 00 00 00       	mov    esi,0x10
c0000935:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000938:	75 16                	jne    c0000950 <simple_strtoul+0xa9>
c000093a:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c000093e:	50                   	push   eax
c000093f:	e8 4f ff ff ff       	call   c0000893 <tolower>
c0000944:	5d                   	pop    ebp
c0000945:	83 f8 78             	cmp    eax,0x78
c0000948:	74 03                	je     c000094d <simple_strtoul+0xa6>
c000094a:	41                   	inc    ecx
c000094b:	eb 03                	jmp    c0000950 <simple_strtoul+0xa9>
c000094d:	83 c1 02             	add    ecx,0x2
c0000950:	31 ed                	xor    ebp,ebp
c0000952:	31 db                	xor    ebx,ebx
c0000954:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000095b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000095d:	84 d2                	test   dl,dl
c000095f:	74 27                	je     c0000988 <simple_strtoul+0xe1>
c0000961:	0f b6 fa             	movzx  edi,dl
c0000964:	f6 87 e0 7a 02 c0 04 	test   BYTE PTR [edi-0x3ffd8520],0x4
c000096b:	74 05                	je     c0000972 <simple_strtoul+0xcb>
c000096d:	83 ef 30             	sub    edi,0x30
c0000970:	eb 22                	jmp    c0000994 <simple_strtoul+0xed>
c0000972:	0f be d2             	movsx  edx,dl
c0000975:	52                   	push   edx
c0000976:	e8 04 ff ff ff       	call   c000087f <toupper>
c000097b:	5f                   	pop    edi
c000097c:	0f b6 d0             	movzx  edx,al
c000097f:	f6 82 e0 7a 02 c0 01 	test   BYTE PTR [edx-0x3ffd8520],0x1
c0000986:	75 09                	jne    c0000991 <simple_strtoul+0xea>
c0000988:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000098d:	75 2d                	jne    c00009bc <simple_strtoul+0x115>
c000098f:	eb 57                	jmp    c00009e8 <simple_strtoul+0x141>
c0000991:	8d 78 c9             	lea    edi,[eax-0x37]
c0000994:	39 f7                	cmp    edi,esi
c0000996:	73 f0                	jae    c0000988 <simple_strtoul+0xe1>
c0000998:	31 d2                	xor    edx,edx
c000099a:	89 f8                	mov    eax,edi
c000099c:	f7 d0                	not    eax
c000099e:	f7 f6                	div    esi
c00009a0:	39 d8                	cmp    eax,ebx
c00009a2:	72 0e                	jb     c00009b2 <simple_strtoul+0x10b>
c00009a4:	0f af de             	imul   ebx,esi
c00009a7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009ae:	01 fb                	add    ebx,edi
c00009b0:	eb 07                	jmp    c00009b9 <simple_strtoul+0x112>
c00009b2:	bd 01 00 00 00       	mov    ebp,0x1
c00009b7:	31 db                	xor    ebx,ebx
c00009b9:	41                   	inc    ecx
c00009ba:	eb 9f                	jmp    c000095b <simple_strtoul+0xb4>
c00009bc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009bf:	09 d8                	or     eax,ebx
c00009c1:	75 1f                	jne    c00009e2 <simple_strtoul+0x13b>
c00009c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009c7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00009cb:	31 db                	xor    ebx,ebx
c00009cd:	89 38                	mov    DWORD PTR [eax],edi
c00009cf:	eb 17                	jmp    c00009e8 <simple_strtoul+0x141>
c00009d1:	31 db                	xor    ebx,ebx
c00009d3:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009d8:	74 14                	je     c00009ee <simple_strtoul+0x147>
c00009da:	31 ed                	xor    ebp,ebp
c00009dc:	85 c9                	test   ecx,ecx
c00009de:	75 e3                	jne    c00009c3 <simple_strtoul+0x11c>
c00009e0:	31 db                	xor    ebx,ebx
c00009e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009e6:	89 08                	mov    DWORD PTR [eax],ecx
c00009e8:	4d                   	dec    ebp
c00009e9:	75 03                	jne    c00009ee <simple_strtoul+0x147>
c00009eb:	83 cb ff             	or     ebx,0xffffffff
c00009ee:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009f3:	75 02                	jne    c00009f7 <simple_strtoul+0x150>
c00009f5:	f7 db                	neg    ebx
c00009f7:	83 c4 08             	add    esp,0x8
c00009fa:	89 d8                	mov    eax,ebx
c00009fc:	5b                   	pop    ebx
c00009fd:	5e                   	pop    esi
c00009fe:	5f                   	pop    edi
c00009ff:	5d                   	pop    ebp
c0000a00:	c3                   	ret    

c0000a01 <largebin_index>:
c0000a01:	89 c2                	mov    edx,eax
c0000a03:	c1 ea 08             	shr    edx,0x8
c0000a06:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000a0c:	77 10                	ja     c0000a1e <largebin_index+0x1d>
c0000a0e:	0f bd d2             	bsr    edx,edx
c0000a11:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a14:	d3 e8                	shr    eax,cl
c0000a16:	83 e0 03             	and    eax,0x3
c0000a19:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a1d:	c3                   	ret    
c0000a1e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a23:	c3                   	ret    

c0000a24 <malloc_init_state>:
c0000a24:	53                   	push   ebx
c0000a25:	8d 50 34             	lea    edx,[eax+0x34]
c0000a28:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a2e:	89 d1                	mov    ecx,edx
c0000a30:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a33:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a36:	83 c2 08             	add    edx,0x8
c0000a39:	39 da                	cmp    edx,ebx
c0000a3b:	75 f3                	jne    c0000a30 <malloc_init_state+0xc>
c0000a3d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a3f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a49:	83 e2 03             	and    edx,0x3
c0000a4c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000a56:	83 ca 48             	or     edx,0x48
c0000a59:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000a63:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000a6d:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000a74:	89 10                	mov    DWORD PTR [eax],edx
c0000a76:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000a79:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000a83:	5b                   	pop    ebx
c0000a84:	c3                   	ret    

c0000a85 <malloc_consolidate>:
c0000a85:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a87:	85 d2                	test   edx,edx
c0000a89:	0f 84 d8 00 00 00    	je     c0000b67 <malloc_consolidate+0xe2>
c0000a8f:	55                   	push   ebp
c0000a90:	83 e2 fd             	and    edx,0xfffffffd
c0000a93:	57                   	push   edi
c0000a94:	89 c5                	mov    ebp,eax
c0000a96:	56                   	push   esi
c0000a97:	8d 78 34             	lea    edi,[eax+0x34]
c0000a9a:	53                   	push   ebx
c0000a9b:	83 ec 10             	sub    esp,0x10
c0000a9e:	89 10                	mov    DWORD PTR [eax],edx
c0000aa0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000aa4:	c1 ea 03             	shr    edx,0x3
c0000aa7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000aab:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000aaf:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ab2:	85 d2                	test   edx,edx
c0000ab4:	0f 84 98 00 00 00    	je     c0000b52 <malloc_consolidate+0xcd>
c0000aba:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ac1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000ac4:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ac7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000acb:	89 f9                	mov    ecx,edi
c0000acd:	83 e1 fe             	and    ecx,0xfffffffe
c0000ad0:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ad3:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000ad6:	83 e3 fc             	and    ebx,0xfffffffc
c0000ad9:	83 e7 01             	and    edi,0x1
c0000adc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000adf:	75 14                	jne    c0000af5 <malloc_consolidate+0x70>
c0000ae1:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000ae3:	29 fa                	sub    edx,edi
c0000ae5:	01 f9                	add    ecx,edi
c0000ae7:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000aea:	89 fb                	mov    ebx,edi
c0000aec:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000aef:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000af2:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000af5:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000af8:	74 40                	je     c0000b3a <malloc_consolidate+0xb5>
c0000afa:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000afd:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000b00:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000b04:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000b07:	83 e7 01             	and    edi,0x1
c0000b0a:	75 0e                	jne    c0000b1a <malloc_consolidate+0x95>
c0000b0c:	01 d9                	add    ecx,ebx
c0000b0e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b11:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b14:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b17:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b1a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b1d:	89 ce                	mov    esi,ecx
c0000b1f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b22:	83 ce 01             	or     esi,0x1
c0000b25:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b28:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b2b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b2e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b32:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b35:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b38:	eb 0c                	jmp    c0000b46 <malloc_consolidate+0xc1>
c0000b3a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b3d:	83 c9 01             	or     ecx,0x1
c0000b40:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b43:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b46:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b4a:	85 d2                	test   edx,edx
c0000b4c:	0f 85 6f ff ff ff    	jne    c0000ac1 <malloc_consolidate+0x3c>
c0000b52:	83 c5 04             	add    ebp,0x4
c0000b55:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000b59:	0f 85 50 ff ff ff    	jne    c0000aaf <malloc_consolidate+0x2a>
c0000b5f:	83 c4 10             	add    esp,0x10
c0000b62:	5b                   	pop    ebx
c0000b63:	5e                   	pop    esi
c0000b64:	5f                   	pop    edi
c0000b65:	5d                   	pop    ebp
c0000b66:	c3                   	ret    
c0000b67:	e9 b8 fe ff ff       	jmp    c0000a24 <malloc_init_state>

c0000b6c <dlfree>:
c0000b6c:	57                   	push   edi
c0000b6d:	56                   	push   esi
c0000b6e:	53                   	push   ebx
c0000b6f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000b73:	85 db                	test   ebx,ebx
c0000b75:	0f 84 e2 00 00 00    	je     c0000c5d <dlfree+0xf1>
c0000b7b:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000b7e:	8b 0d 40 c4 02 c0    	mov    ecx,DWORD PTR ds:0xc002c440
c0000b84:	89 f0                	mov    eax,esi
c0000b86:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000b89:	83 e0 fc             	and    eax,0xfffffffc
c0000b8c:	39 c1                	cmp    ecx,eax
c0000b8e:	72 24                	jb     c0000bb4 <dlfree+0x48>
c0000b90:	83 c9 03             	or     ecx,0x3
c0000b93:	c1 e8 03             	shr    eax,0x3
c0000b96:	89 0d 40 c4 02 c0    	mov    DWORD PTR ds:0xc002c440,ecx
c0000b9c:	83 e8 02             	sub    eax,0x2
c0000b9f:	8b 0c 85 44 c4 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd3bbc]
c0000ba6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000ba8:	89 14 85 44 c4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3bbc],edx
c0000baf:	e9 a9 00 00 00       	jmp    c0000c5d <dlfree+0xf1>
c0000bb4:	83 e6 02             	and    esi,0x2
c0000bb7:	0f 85 a0 00 00 00    	jne    c0000c5d <dlfree+0xf1>
c0000bbd:	83 c9 01             	or     ecx,0x1
c0000bc0:	8d 34 02             	lea    esi,[edx+eax*1]
c0000bc3:	89 0d 40 c4 02 c0    	mov    DWORD PTR ds:0xc002c440,ecx
c0000bc9:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000bcc:	83 e1 fc             	and    ecx,0xfffffffc
c0000bcf:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000bd3:	75 13                	jne    c0000be8 <dlfree+0x7c>
c0000bd5:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000bd8:	29 da                	sub    edx,ebx
c0000bda:	01 d8                	add    eax,ebx
c0000bdc:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000bdf:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000be2:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000be5:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000be8:	39 35 6c c4 02 c0    	cmp    DWORD PTR ds:0xc002c46c,esi
c0000bee:	74 40                	je     c0000c30 <dlfree+0xc4>
c0000bf0:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000bf4:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000bf7:	80 e3 01             	and    bl,0x1
c0000bfa:	75 0e                	jne    c0000c0a <dlfree+0x9e>
c0000bfc:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000bff:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000c02:	01 c8                	add    eax,ecx
c0000c04:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c07:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c0a:	8b 0d 7c c4 02 c0    	mov    ecx,DWORD PTR ds:0xc002c47c
c0000c10:	c7 42 0c 74 c4 02 c0 	mov    DWORD PTR [edx+0xc],0xc002c474
c0000c17:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c1a:	89 15 7c c4 02 c0    	mov    DWORD PTR ds:0xc002c47c,edx
c0000c20:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c23:	89 c1                	mov    ecx,eax
c0000c25:	83 c9 01             	or     ecx,0x1
c0000c28:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c2b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c2e:	eb 10                	jmp    c0000c40 <dlfree+0xd4>
c0000c30:	01 c8                	add    eax,ecx
c0000c32:	89 c1                	mov    ecx,eax
c0000c34:	83 c9 01             	or     ecx,0x1
c0000c37:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c3a:	89 15 6c c4 02 c0    	mov    DWORD PTR ds:0xc002c46c,edx
c0000c40:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c45:	76 16                	jbe    c0000c5d <dlfree+0xf1>
c0000c47:	f6 05 40 c4 02 c0 02 	test   BYTE PTR ds:0xc002c440,0x2
c0000c4e:	74 0d                	je     c0000c5d <dlfree+0xf1>
c0000c50:	5b                   	pop    ebx
c0000c51:	b8 40 c4 02 c0       	mov    eax,0xc002c440
c0000c56:	5e                   	pop    esi
c0000c57:	5f                   	pop    edi
c0000c58:	e9 28 fe ff ff       	jmp    c0000a85 <malloc_consolidate>
c0000c5d:	5b                   	pop    ebx
c0000c5e:	5e                   	pop    esi
c0000c5f:	5f                   	pop    edi
c0000c60:	c3                   	ret    

c0000c61 <sYSMALLOc>:
c0000c61:	55                   	push   ebp
c0000c62:	57                   	push   edi
c0000c63:	56                   	push   esi
c0000c64:	53                   	push   ebx
c0000c65:	89 d3                	mov    ebx,edx
c0000c67:	83 ec 2c             	sub    esp,0x2c
c0000c6a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000c6e:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000c74:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000c77:	8d 42 ff             	lea    eax,[edx-0x1]
c0000c7a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000c7e:	74 1f                	je     c0000c9f <sYSMALLOc+0x3e>
c0000c80:	89 d8                	mov    eax,ebx
c0000c82:	e8 fe fd ff ff       	call   c0000a85 <malloc_consolidate>
c0000c87:	83 ec 0c             	sub    esp,0xc
c0000c8a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000c8e:	83 e8 07             	sub    eax,0x7
c0000c91:	50                   	push   eax
c0000c92:	e8 30 02 00 00       	call   c0000ec7 <dlmalloc>
c0000c97:	83 c4 10             	add    esp,0x10
c0000c9a:	e9 20 02 00 00       	jmp    c0000ebf <sYSMALLOc+0x25e>
c0000c9f:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ca2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ca8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000cab:	83 e0 fc             	and    eax,0xfffffffc
c0000cae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000cb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000cb6:	83 c0 10             	add    eax,0x10
c0000cb9:	01 c1                	add    ecx,eax
c0000cbb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000cbf:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000cc6:	74 04                	je     c0000ccc <sYSMALLOc+0x6b>
c0000cc8:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ccc:	f7 da                	neg    edx
c0000cce:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000cd2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000cd6:	21 d1                	and    ecx,edx
c0000cd8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000cdc:	7f 07                	jg     c0000ce5 <sYSMALLOc+0x84>
c0000cde:	31 c0                	xor    eax,eax
c0000ce0:	e9 da 01 00 00       	jmp    c0000ebf <sYSMALLOc+0x25e>
c0000ce5:	83 ec 0c             	sub    esp,0xc
c0000ce8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000cec:	e8 3a e6 00 00       	call   c000f32b <sbrk>
c0000cf1:	83 c4 10             	add    esp,0x10
c0000cf4:	89 c6                	mov    esi,eax
c0000cf6:	83 f8 ff             	cmp    eax,0xffffffff
c0000cf9:	74 e3                	je     c0000cde <sYSMALLOc+0x7d>
c0000cfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000cff:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000d03:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000d06:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000d0c:	39 f1                	cmp    ecx,esi
c0000d0e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000d14:	75 13                	jne    c0000d29 <sYSMALLOc+0xc8>
c0000d16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d1a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d1e:	83 c8 01             	or     eax,0x1
c0000d21:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d24:	e9 3e 01 00 00       	jmp    c0000e67 <sYSMALLOc+0x206>
c0000d29:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000d2f:	88 d0                	mov    al,dl
c0000d31:	83 e0 01             	and    eax,0x1
c0000d34:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d39:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000d3d:	0f 95 c0             	setne  al
c0000d40:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000d44:	39 f1                	cmp    ecx,esi
c0000d46:	76 12                	jbe    c0000d5a <sYSMALLOc+0xf9>
c0000d48:	84 c0                	test   al,al
c0000d4a:	74 0e                	je     c0000d5a <sYSMALLOc+0xf9>
c0000d4c:	83 e2 fe             	and    edx,0xfffffffe
c0000d4f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000d55:	e9 83 00 00 00       	jmp    c0000ddd <sYSMALLOc+0x17c>
c0000d5a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000d5f:	74 7c                	je     c0000ddd <sYSMALLOc+0x17c>
c0000d61:	84 c0                	test   al,al
c0000d63:	74 0c                	je     c0000d71 <sYSMALLOc+0x110>
c0000d65:	89 f0                	mov    eax,esi
c0000d67:	29 c8                	sub    eax,ecx
c0000d69:	01 e8                	add    eax,ebp
c0000d6b:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000d71:	89 f2                	mov    edx,esi
c0000d73:	83 e2 07             	and    edx,0x7
c0000d76:	74 0c                	je     c0000d84 <sYSMALLOc+0x123>
c0000d78:	b8 08 00 00 00       	mov    eax,0x8
c0000d7d:	29 d0                	sub    eax,edx
c0000d7f:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000d82:	eb 04                	jmp    c0000d88 <sYSMALLOc+0x127>
c0000d84:	89 f5                	mov    ebp,esi
c0000d86:	31 c0                	xor    eax,eax
c0000d88:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d8c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d90:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d94:	01 c1                	add    ecx,eax
c0000d96:	83 ec 0c             	sub    esp,0xc
c0000d99:	01 f1                	add    ecx,esi
c0000d9b:	01 ca                	add    edx,ecx
c0000d9d:	29 c8                	sub    eax,ecx
c0000d9f:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000da3:	01 c2                	add    edx,eax
c0000da5:	52                   	push   edx
c0000da6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000daa:	e8 7c e5 00 00       	call   c000f32b <sbrk>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	83 f8 ff             	cmp    eax,0xffffffff
c0000db5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000db9:	75 0f                	jne    c0000dca <sYSMALLOc+0x169>
c0000dbb:	83 ec 0c             	sub    esp,0xc
c0000dbe:	6a 00                	push   0x0
c0000dc0:	e8 66 e5 00 00       	call   c000f32b <sbrk>
c0000dc5:	83 c4 10             	add    esp,0x10
c0000dc8:	eb 30                	jmp    c0000dfa <sYSMALLOc+0x199>
c0000dca:	39 c6                	cmp    esi,eax
c0000dcc:	76 33                	jbe    c0000e01 <sYSMALLOc+0x1a0>
c0000dce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000dd2:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000dd9:	01 f0                	add    eax,esi
c0000ddb:	eb 1d                	jmp    c0000dfa <sYSMALLOc+0x199>
c0000ddd:	83 ec 0c             	sub    esp,0xc
c0000de0:	89 f5                	mov    ebp,esi
c0000de2:	6a 00                	push   0x0
c0000de4:	e8 42 e5 00 00       	call   c000f32b <sbrk>
c0000de9:	89 c2                	mov    edx,eax
c0000deb:	29 f2                	sub    edx,esi
c0000ded:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000df1:	83 c4 10             	add    esp,0x10
c0000df4:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000dfa:	31 d2                	xor    edx,edx
c0000dfc:	83 f8 ff             	cmp    eax,0xffffffff
c0000dff:	74 66                	je     c0000e67 <sYSMALLOc+0x206>
c0000e01:	29 e8                	sub    eax,ebp
c0000e03:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000e06:	01 d0                	add    eax,edx
c0000e08:	83 c8 01             	or     eax,0x1
c0000e0b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000e0e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e14:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e19:	74 4c                	je     c0000e67 <sYSMALLOc+0x206>
c0000e1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e1f:	83 e8 0c             	sub    eax,0xc
c0000e22:	83 e0 f8             	and    eax,0xfffffff8
c0000e25:	89 c2                	mov    edx,eax
c0000e27:	83 ca 01             	or     edx,0x1
c0000e2a:	83 f8 0f             	cmp    eax,0xf
c0000e2d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e30:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e38:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000e40:	76 25                	jbe    c0000e67 <sYSMALLOc+0x206>
c0000e42:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000e48:	83 ec 0c             	sub    esp,0xc
c0000e4b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000e55:	83 c7 08             	add    edi,0x8
c0000e58:	57                   	push   edi
c0000e59:	e8 0e fd ff ff       	call   c0000b6c <dlfree>
c0000e5e:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000e64:	83 c4 10             	add    esp,0x10
c0000e67:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000e6d:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000e73:	73 06                	jae    c0000e7b <sYSMALLOc+0x21a>
c0000e75:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000e7b:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000e81:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e87:	73 06                	jae    c0000e8f <sYSMALLOc+0x22e>
c0000e89:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e8f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e92:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e95:	83 e2 fc             	and    edx,0xfffffffc
c0000e98:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000e9c:	0f 82 3c fe ff ff    	jb     c0000cde <sYSMALLOc+0x7d>
c0000ea2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ea6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ea9:	29 fa                	sub    edx,edi
c0000eab:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000eae:	83 ca 01             	or     edx,0x1
c0000eb1:	89 fb                	mov    ebx,edi
c0000eb3:	83 c0 08             	add    eax,0x8
c0000eb6:	83 cb 01             	or     ebx,0x1
c0000eb9:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000ebc:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000ebf:	83 c4 2c             	add    esp,0x2c
c0000ec2:	5b                   	pop    ebx
c0000ec3:	5e                   	pop    esi
c0000ec4:	5f                   	pop    edi
c0000ec5:	5d                   	pop    ebp
c0000ec6:	c3                   	ret    

c0000ec7 <dlmalloc>:
c0000ec7:	55                   	push   ebp
c0000ec8:	57                   	push   edi
c0000ec9:	56                   	push   esi
c0000eca:	53                   	push   ebx
c0000ecb:	83 ec 1c             	sub    esp,0x1c
c0000ece:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000ed2:	83 f8 df             	cmp    eax,0xffffffdf
c0000ed5:	0f 87 70 03 00 00    	ja     c000124b <dlmalloc+0x384>
c0000edb:	83 c0 0b             	add    eax,0xb
c0000ede:	be 10 00 00 00       	mov    esi,0x10
c0000ee3:	83 f8 0f             	cmp    eax,0xf
c0000ee6:	76 05                	jbe    c0000eed <dlmalloc+0x26>
c0000ee8:	83 e0 f8             	and    eax,0xfffffff8
c0000eeb:	89 c6                	mov    esi,eax
c0000eed:	8b 3d 40 c4 02 c0    	mov    edi,DWORD PTR ds:0xc002c440
c0000ef3:	f7 c7 01 00 00 00    	test   edi,0x1
c0000ef9:	75 17                	jne    c0000f12 <dlmalloc+0x4b>
c0000efb:	85 ff                	test   edi,edi
c0000efd:	0f 85 05 03 00 00    	jne    c0001208 <dlmalloc+0x341>
c0000f03:	b8 40 c4 02 c0       	mov    eax,0xc002c440
c0000f08:	e8 78 fb ff ff       	call   c0000a85 <malloc_consolidate>
c0000f0d:	e9 f6 02 00 00       	jmp    c0001208 <dlmalloc+0x341>
c0000f12:	39 f7                	cmp    edi,esi
c0000f14:	72 1f                	jb     c0000f35 <dlmalloc+0x6e>
c0000f16:	89 f2                	mov    edx,esi
c0000f18:	c1 ea 03             	shr    edx,0x3
c0000f1b:	83 ea 02             	sub    edx,0x2
c0000f1e:	8b 04 95 44 c4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3bbc]
c0000f25:	85 c0                	test   eax,eax
c0000f27:	74 0c                	je     c0000f35 <dlmalloc+0x6e>
c0000f29:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f2c:	89 0c 95 44 c4 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3bbc],ecx
c0000f33:	eb 30                	jmp    c0000f65 <dlmalloc+0x9e>
c0000f35:	89 f0                	mov    eax,esi
c0000f37:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f3d:	77 2e                	ja     c0000f6d <dlmalloc+0xa6>
c0000f3f:	c1 e8 03             	shr    eax,0x3
c0000f42:	8d 14 c5 74 c4 02 c0 	lea    edx,[eax*8-0x3ffd3b8c]
c0000f49:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f4d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f50:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f53:	39 c3                	cmp    ebx,eax
c0000f55:	74 2e                	je     c0000f85 <dlmalloc+0xbe>
c0000f57:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000f5a:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000f5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f62:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000f65:	83 c0 08             	add    eax,0x8
c0000f68:	e9 e0 02 00 00       	jmp    c000124d <dlmalloc+0x386>
c0000f6d:	e8 8f fa ff ff       	call   c0000a01 <largebin_index>
c0000f72:	83 e7 02             	and    edi,0x2
c0000f75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f79:	74 0a                	je     c0000f85 <dlmalloc+0xbe>
c0000f7b:	b8 40 c4 02 c0       	mov    eax,0xc002c440
c0000f80:	e8 00 fb ff ff       	call   c0000a85 <malloc_consolidate>
c0000f85:	8d 46 10             	lea    eax,[esi+0x10]
c0000f88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f8c:	8b 1d 80 c4 02 c0    	mov    ebx,DWORD PTR ds:0xc002c480
c0000f92:	81 fb 74 c4 02 c0    	cmp    ebx,0xc002c474
c0000f98:	0f 84 13 01 00 00    	je     c00010b1 <dlmalloc+0x1ea>
c0000f9e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000fa1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000fa4:	83 e7 fc             	and    edi,0xfffffffc
c0000fa7:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000fad:	77 4c                	ja     c0000ffb <dlmalloc+0x134>
c0000faf:	3d 74 c4 02 c0       	cmp    eax,0xc002c474
c0000fb4:	75 45                	jne    c0000ffb <dlmalloc+0x134>
c0000fb6:	39 1d 70 c4 02 c0    	cmp    DWORD PTR ds:0xc002c470,ebx
c0000fbc:	75 3d                	jne    c0000ffb <dlmalloc+0x134>
c0000fbe:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000fc2:	73 37                	jae    c0000ffb <dlmalloc+0x134>
c0000fc4:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000fc7:	89 fa                	mov    edx,edi
c0000fc9:	a3 7c c4 02 c0       	mov    ds:0xc002c47c,eax
c0000fce:	a3 80 c4 02 c0       	mov    ds:0xc002c480,eax
c0000fd3:	a3 70 c4 02 c0       	mov    ds:0xc002c470,eax
c0000fd8:	29 f2                	sub    edx,esi
c0000fda:	c7 40 08 74 c4 02 c0 	mov    DWORD PTR [eax+0x8],0xc002c474
c0000fe1:	c7 40 0c 74 c4 02 c0 	mov    DWORD PTR [eax+0xc],0xc002c474
c0000fe8:	83 ce 01             	or     esi,0x1
c0000feb:	89 d1                	mov    ecx,edx
c0000fed:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0000ff0:	83 c9 01             	or     ecx,0x1
c0000ff3:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0000ff6:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0000ff9:	eb 15                	jmp    c0001010 <dlmalloc+0x149>
c0000ffb:	a3 80 c4 02 c0       	mov    ds:0xc002c480,eax
c0001000:	39 fe                	cmp    esi,edi
c0001002:	c7 40 08 74 c4 02 c0 	mov    DWORD PTR [eax+0x8],0xc002c474
c0001009:	75 0d                	jne    c0001018 <dlmalloc+0x151>
c000100b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001010:	8d 43 08             	lea    eax,[ebx+0x8]
c0001013:	e9 35 02 00 00       	jmp    c000124d <dlmalloc+0x386>
c0001018:	89 f8                	mov    eax,edi
c000101a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001020:	77 19                	ja     c000103b <dlmalloc+0x174>
c0001022:	c1 e8 03             	shr    eax,0x3
c0001025:	8d 14 00             	lea    edx,[eax+eax*1]
c0001028:	83 c2 0d             	add    edx,0xd
c000102b:	8d 2c 95 38 c4 02 c0 	lea    ebp,[edx*4-0x3ffd3bc8]
c0001032:	8b 14 95 40 c4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3bc0]
c0001039:	eb 46                	jmp    c0001081 <dlmalloc+0x1ba>
c000103b:	e8 c1 f9 ff ff       	call   c0000a01 <largebin_index>
c0001040:	8d 14 00             	lea    edx,[eax+eax*1]
c0001043:	83 c2 0d             	add    edx,0xd
c0001046:	8d 0c 95 40 c4 02 c0 	lea    ecx,[edx*4-0x3ffd3bc0]
c000104d:	8b 14 95 40 c4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3bc0]
c0001054:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001057:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000105b:	89 d5                	mov    ebp,edx
c000105d:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001061:	74 1e                	je     c0001081 <dlmalloc+0x1ba>
c0001063:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001066:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001069:	77 12                	ja     c000107d <dlmalloc+0x1b6>
c000106b:	83 cf 01             	or     edi,0x1
c000106e:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001071:	76 05                	jbe    c0001078 <dlmalloc+0x1b1>
c0001073:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001076:	eb f6                	jmp    c000106e <dlmalloc+0x1a7>
c0001078:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000107b:	eb 04                	jmp    c0001081 <dlmalloc+0x1ba>
c000107d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001081:	89 c7                	mov    edi,eax
c0001083:	88 c1                	mov    cl,al
c0001085:	c1 ff 05             	sar    edi,0x5
c0001088:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000108c:	bf 01 00 00 00       	mov    edi,0x1
c0001091:	d3 e7                	shl    edi,cl
c0001093:	89 f8                	mov    eax,edi
c0001095:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001099:	09 04 bd 74 c7 02 c0 	or     DWORD PTR [edi*4-0x3ffd388c],eax
c00010a0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00010a3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00010a6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00010a9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00010ac:	e9 db fe ff ff       	jmp    c0000f8c <dlmalloc+0xc5>
c00010b1:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010b7:	76 78                	jbe    c0001131 <dlmalloc+0x26a>
c00010b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010bd:	8d 04 c5 74 c4 02 c0 	lea    eax,[eax*8-0x3ffd3b8c]
c00010c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00010c7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010ca:	39 ca                	cmp    edx,ecx
c00010cc:	74 63                	je     c0001131 <dlmalloc+0x26a>
c00010ce:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00010d1:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00010d4:	83 e3 fc             	and    ebx,0xfffffffc
c00010d7:	39 de                	cmp    esi,ebx
c00010d9:	77 52                	ja     c000112d <dlmalloc+0x266>
c00010db:	89 df                	mov    edi,ebx
c00010dd:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00010e0:	29 f7                	sub    edi,esi
c00010e2:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00010e5:	01 d3                	add    ebx,edx
c00010e7:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00010ea:	83 ff 0f             	cmp    edi,0xf
c00010ed:	8d 42 08             	lea    eax,[edx+0x8]
c00010f0:	77 09                	ja     c00010fb <dlmalloc+0x234>
c00010f2:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00010f6:	e9 52 01 00 00       	jmp    c000124d <dlmalloc+0x386>
c00010fb:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00010fe:	83 ce 01             	or     esi,0x1
c0001101:	89 0d 7c c4 02 c0    	mov    DWORD PTR ds:0xc002c47c,ecx
c0001107:	89 0d 80 c4 02 c0    	mov    DWORD PTR ds:0xc002c480,ecx
c000110d:	c7 41 08 74 c4 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002c474
c0001114:	c7 41 0c 74 c4 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002c474
c000111b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000111e:	89 fa                	mov    edx,edi
c0001120:	83 ca 01             	or     edx,0x1
c0001123:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001126:	89 3b                	mov    DWORD PTR [ebx],edi
c0001128:	e9 20 01 00 00       	jmp    c000124d <dlmalloc+0x386>
c000112d:	89 c2                	mov    edx,eax
c000112f:	eb 99                	jmp    c00010ca <dlmalloc+0x203>
c0001131:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001135:	b8 01 00 00 00       	mov    eax,0x1
c000113a:	41                   	inc    ecx
c000113b:	89 cb                	mov    ebx,ecx
c000113d:	8d 14 cd 6c c4 02 c0 	lea    edx,[ecx*8-0x3ffd3b94]
c0001144:	c1 eb 05             	shr    ebx,0x5
c0001147:	d3 e0                	shl    eax,cl
c0001149:	8b 3c 9d 74 c7 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd388c]
c0001150:	39 f8                	cmp    eax,edi
c0001152:	77 04                	ja     c0001158 <dlmalloc+0x291>
c0001154:	85 c0                	test   eax,eax
c0001156:	75 26                	jne    c000117e <dlmalloc+0x2b7>
c0001158:	43                   	inc    ebx
c0001159:	83 fb 02             	cmp    ebx,0x2
c000115c:	0f 87 a6 00 00 00    	ja     c0001208 <dlmalloc+0x341>
c0001162:	8b 3c 9d 74 c7 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd388c]
c0001169:	85 ff                	test   edi,edi
c000116b:	74 eb                	je     c0001158 <dlmalloc+0x291>
c000116d:	89 d8                	mov    eax,ebx
c000116f:	c1 e0 06             	shl    eax,0x6
c0001172:	8d 14 85 6c c4 02 c0 	lea    edx,[eax*4-0x3ffd3b94]
c0001179:	b8 01 00 00 00       	mov    eax,0x1
c000117e:	85 f8                	test   eax,edi
c0001180:	75 07                	jne    c0001189 <dlmalloc+0x2c2>
c0001182:	83 c2 08             	add    edx,0x8
c0001185:	01 c0                	add    eax,eax
c0001187:	eb f5                	jmp    c000117e <dlmalloc+0x2b7>
c0001189:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000118c:	39 ca                	cmp    edx,ecx
c000118e:	75 14                	jne    c00011a4 <dlmalloc+0x2dd>
c0001190:	89 c1                	mov    ecx,eax
c0001192:	83 c2 08             	add    edx,0x8
c0001195:	f7 d1                	not    ecx
c0001197:	01 c0                	add    eax,eax
c0001199:	21 cf                	and    edi,ecx
c000119b:	89 3c 9d 74 c7 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd388c],edi
c00011a2:	eb ac                	jmp    c0001150 <dlmalloc+0x289>
c00011a4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00011a7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00011aa:	83 e0 fc             	and    eax,0xfffffffc
c00011ad:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011b0:	89 c3                	mov    ebx,eax
c00011b2:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00011b5:	29 f3                	sub    ebx,esi
c00011b7:	8d 14 01             	lea    edx,[ecx+eax*1]
c00011ba:	83 fb 0f             	cmp    ebx,0xf
c00011bd:	8d 41 08             	lea    eax,[ecx+0x8]
c00011c0:	77 09                	ja     c00011cb <dlmalloc+0x304>
c00011c2:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00011c6:	e9 82 00 00 00       	jmp    c000124d <dlmalloc+0x386>
c00011cb:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00011ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d4:	89 3d 7c c4 02 c0    	mov    DWORD PTR ds:0xc002c47c,edi
c00011da:	89 3d 80 c4 02 c0    	mov    DWORD PTR ds:0xc002c480,edi
c00011e0:	c7 47 08 74 c4 02 c0 	mov    DWORD PTR [edi+0x8],0xc002c474
c00011e7:	c7 47 0c 74 c4 02 c0 	mov    DWORD PTR [edi+0xc],0xc002c474
c00011ee:	77 06                	ja     c00011f6 <dlmalloc+0x32f>
c00011f0:	89 3d 70 c4 02 c0    	mov    DWORD PTR ds:0xc002c470,edi
c00011f6:	83 ce 01             	or     esi,0x1
c00011f9:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00011fc:	89 d9                	mov    ecx,ebx
c00011fe:	83 c9 01             	or     ecx,0x1
c0001201:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001204:	89 1a                	mov    DWORD PTR [edx],ebx
c0001206:	eb 45                	jmp    c000124d <dlmalloc+0x386>
c0001208:	a1 6c c4 02 c0       	mov    eax,ds:0xc002c46c
c000120d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001210:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001213:	83 e2 fc             	and    edx,0xfffffffc
c0001216:	39 d1                	cmp    ecx,edx
c0001218:	77 1e                	ja     c0001238 <dlmalloc+0x371>
c000121a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000121d:	89 f3                	mov    ebx,esi
c000121f:	89 0d 6c c4 02 c0    	mov    DWORD PTR ds:0xc002c46c,ecx
c0001225:	83 cb 01             	or     ebx,0x1
c0001228:	29 f2                	sub    edx,esi
c000122a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000122d:	83 ca 01             	or     edx,0x1
c0001230:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001233:	e9 2d fd ff ff       	jmp    c0000f65 <dlmalloc+0x9e>
c0001238:	83 c4 1c             	add    esp,0x1c
c000123b:	89 f0                	mov    eax,esi
c000123d:	5b                   	pop    ebx
c000123e:	ba 40 c4 02 c0       	mov    edx,0xc002c440
c0001243:	5e                   	pop    esi
c0001244:	5f                   	pop    edi
c0001245:	5d                   	pop    ebp
c0001246:	e9 16 fa ff ff       	jmp    c0000c61 <sYSMALLOc>
c000124b:	31 c0                	xor    eax,eax
c000124d:	83 c4 1c             	add    esp,0x1c
c0001250:	5b                   	pop    ebx
c0001251:	5e                   	pop    esi
c0001252:	5f                   	pop    edi
c0001253:	5d                   	pop    ebp
c0001254:	c3                   	ret    

c0001255 <iALLOc>:
c0001255:	55                   	push   ebp
c0001256:	89 c5                	mov    ebp,eax
c0001258:	57                   	push   edi
c0001259:	56                   	push   esi
c000125a:	53                   	push   ebx
c000125b:	83 ec 2c             	sub    esp,0x2c
c000125e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001262:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001266:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000126a:	83 3d 40 c4 02 c0 00 	cmp    DWORD PTR ds:0xc002c440,0x0
c0001271:	75 12                	jne    c0001285 <iALLOc+0x30>
c0001273:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001277:	b8 40 c4 02 c0       	mov    eax,0xc002c440
c000127c:	e8 04 f8 ff ff       	call   c0000a85 <malloc_consolidate>
c0001281:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001285:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000128a:	74 12                	je     c000129e <iALLOc+0x49>
c000128c:	85 ed                	test   ebp,ebp
c000128e:	0f 84 64 01 00 00    	je     c00013f8 <iALLOc+0x1a3>
c0001294:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000129c:	eb 33                	jmp    c00012d1 <iALLOc+0x7c>
c000129e:	85 ed                	test   ebp,ebp
c00012a0:	75 14                	jne    c00012b6 <iALLOc+0x61>
c00012a2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00012aa:	83 c4 2c             	add    esp,0x2c
c00012ad:	5b                   	pop    ebx
c00012ae:	5e                   	pop    esi
c00012af:	5f                   	pop    edi
c00012b0:	5d                   	pop    ebp
c00012b1:	e9 11 fc ff ff       	jmp    c0000ec7 <dlmalloc>
c00012b6:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00012bd:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00012c5:	83 f8 0f             	cmp    eax,0xf
c00012c8:	76 07                	jbe    c00012d1 <iALLOc+0x7c>
c00012ca:	83 e0 f8             	and    eax,0xfffffff8
c00012cd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00012d1:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00012d6:	75 09                	jne    c00012e1 <iALLOc+0x8c>
c00012d8:	89 d0                	mov    eax,edx
c00012da:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00012dd:	31 f6                	xor    esi,esi
c00012df:	eb 3b                	jmp    c000131c <iALLOc+0xc7>
c00012e1:	8b 02                	mov    eax,DWORD PTR [edx]
c00012e3:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00012eb:	83 c0 0b             	add    eax,0xb
c00012ee:	83 f8 0f             	cmp    eax,0xf
c00012f1:	76 07                	jbe    c00012fa <iALLOc+0xa5>
c00012f3:	83 e0 f8             	and    eax,0xfffffff8
c00012f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00012fa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00012fe:	0f af f5             	imul   esi,ebp
c0001301:	eb 25                	jmp    c0001328 <iALLOc+0xd3>
c0001303:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001305:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001308:	bb 10 00 00 00       	mov    ebx,0x10
c000130d:	83 f9 0f             	cmp    ecx,0xf
c0001310:	76 05                	jbe    c0001317 <iALLOc+0xc2>
c0001312:	83 e1 f8             	and    ecx,0xfffffff8
c0001315:	89 cb                	mov    ebx,ecx
c0001317:	01 de                	add    esi,ebx
c0001319:	83 c0 04             	add    eax,0x4
c000131c:	39 c7                	cmp    edi,eax
c000131e:	75 e3                	jne    c0001303 <iALLOc+0xae>
c0001320:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001328:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000132c:	8b 1d 94 c7 02 c0    	mov    ebx,DWORD PTR ds:0xc002c794
c0001332:	83 ec 0c             	sub    esp,0xc
c0001335:	c7 05 94 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c794,0x0
c000133f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001343:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001347:	50                   	push   eax
c0001348:	e8 7a fb ff ff       	call   c0000ec7 <dlmalloc>
c000134d:	83 c4 10             	add    esp,0x10
c0001350:	89 1d 94 c7 02 c0    	mov    DWORD PTR ds:0xc002c794,ebx
c0001356:	85 c0                	test   eax,eax
c0001358:	0f 84 92 00 00 00    	je     c00013f0 <iALLOc+0x19b>
c000135e:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001361:	8d 78 f8             	lea    edi,[eax-0x8]
c0001364:	83 e3 fc             	and    ebx,0xfffffffc
c0001367:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000136b:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001370:	74 1e                	je     c0001390 <iALLOc+0x13b>
c0001372:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001376:	89 d9                	mov    ecx,ebx
c0001378:	52                   	push   edx
c0001379:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000137d:	83 e9 04             	sub    ecx,0x4
c0001380:	51                   	push   ecx
c0001381:	6a 00                	push   0x0
c0001383:	50                   	push   eax
c0001384:	e8 02 f3 ff ff       	call   c000068b <memset>
c0001389:	83 c4 10             	add    esp,0x10
c000138c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001390:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001395:	75 14                	jne    c00013ab <iALLOc+0x156>
c0001397:	8d 04 37             	lea    eax,[edi+esi*1]
c000139a:	29 f3                	sub    ebx,esi
c000139c:	8d 48 08             	lea    ecx,[eax+0x8]
c000139f:	83 cb 01             	or     ebx,0x1
c00013a2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013a6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00013a9:	89 f3                	mov    ebx,esi
c00013ab:	31 c0                	xor    eax,eax
c00013ad:	4d                   	dec    ebp
c00013ae:	8d 4f 08             	lea    ecx,[edi+0x8]
c00013b1:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00013b5:	39 c5                	cmp    ebp,eax
c00013b7:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00013ba:	74 2c                	je     c00013e8 <iALLOc+0x193>
c00013bc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00013c0:	85 c9                	test   ecx,ecx
c00013c2:	75 15                	jne    c00013d9 <iALLOc+0x184>
c00013c4:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00013c7:	8d 71 0b             	lea    esi,[ecx+0xb]
c00013ca:	b9 10 00 00 00       	mov    ecx,0x10
c00013cf:	83 fe 0f             	cmp    esi,0xf
c00013d2:	76 05                	jbe    c00013d9 <iALLOc+0x184>
c00013d4:	83 e6 f8             	and    esi,0xfffffff8
c00013d7:	89 f1                	mov    ecx,esi
c00013d9:	89 ce                	mov    esi,ecx
c00013db:	29 cb                	sub    ebx,ecx
c00013dd:	83 ce 01             	or     esi,0x1
c00013e0:	40                   	inc    eax
c00013e1:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00013e4:	01 cf                	add    edi,ecx
c00013e6:	eb c6                	jmp    c00013ae <iALLOc+0x159>
c00013e8:	83 cb 01             	or     ebx,0x1
c00013eb:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00013ee:	eb 08                	jmp    c00013f8 <iALLOc+0x1a3>
c00013f0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00013f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00013fc:	83 c4 2c             	add    esp,0x2c
c00013ff:	5b                   	pop    ebx
c0001400:	5e                   	pop    esi
c0001401:	5f                   	pop    edi
c0001402:	5d                   	pop    ebp
c0001403:	c3                   	ret    

c0001404 <dlrealloc>:
c0001404:	55                   	push   ebp
c0001405:	57                   	push   edi
c0001406:	56                   	push   esi
c0001407:	53                   	push   ebx
c0001408:	83 ec 1c             	sub    esp,0x1c
c000140b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000140f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001413:	85 db                	test   ebx,ebx
c0001415:	75 10                	jne    c0001427 <dlrealloc+0x23>
c0001417:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000141b:	83 c4 1c             	add    esp,0x1c
c000141e:	5b                   	pop    ebx
c000141f:	5e                   	pop    esi
c0001420:	5f                   	pop    edi
c0001421:	5d                   	pop    ebp
c0001422:	e9 a0 fa ff ff       	jmp    c0000ec7 <dlmalloc>
c0001427:	83 f8 df             	cmp    eax,0xffffffdf
c000142a:	76 07                	jbe    c0001433 <dlrealloc+0x2f>
c000142c:	31 db                	xor    ebx,ebx
c000142e:	e9 7c 01 00 00       	jmp    c00015af <dlrealloc+0x1ab>
c0001433:	83 c0 0b             	add    eax,0xb
c0001436:	bf 10 00 00 00       	mov    edi,0x10
c000143b:	83 f8 0f             	cmp    eax,0xf
c000143e:	76 05                	jbe    c0001445 <dlrealloc+0x41>
c0001440:	83 e0 f8             	and    eax,0xfffffff8
c0001443:	89 c7                	mov    edi,eax
c0001445:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001448:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000144b:	89 c6                	mov    esi,eax
c000144d:	83 e6 fc             	and    esi,0xfffffffc
c0001450:	a8 02                	test   al,0x2
c0001452:	75 d8                	jne    c000142c <dlrealloc+0x28>
c0001454:	39 f7                	cmp    edi,esi
c0001456:	0f 86 15 01 00 00    	jbe    c0001571 <dlrealloc+0x16d>
c000145c:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0001460:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001463:	39 15 6c c4 02 c0    	cmp    DWORD PTR ds:0xc002c46c,edx
c0001469:	75 33                	jne    c000149e <dlrealloc+0x9a>
c000146b:	83 e1 fc             	and    ecx,0xfffffffc
c000146e:	01 f1                	add    ecx,esi
c0001470:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001474:	8d 4f 10             	lea    ecx,[edi+0x10]
c0001477:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000147b:	77 49                	ja     c00014c6 <dlrealloc+0xc2>
c000147d:	01 fd                	add    ebp,edi
c000147f:	83 e0 01             	and    eax,0x1
c0001482:	09 f8                	or     eax,edi
c0001484:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001487:	89 2d 6c c4 02 c0    	mov    DWORD PTR ds:0xc002c46c,ebp
c000148d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001491:	29 f8                	sub    eax,edi
c0001493:	83 c8 01             	or     eax,0x1
c0001496:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001499:	e9 11 01 00 00       	jmp    c00015af <dlrealloc+0x1ab>
c000149e:	89 c8                	mov    eax,ecx
c00014a0:	83 e0 fe             	and    eax,0xfffffffe
c00014a3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00014a8:	75 1c                	jne    c00014c6 <dlrealloc+0xc2>
c00014aa:	83 e1 fc             	and    ecx,0xfffffffc
c00014ad:	01 f1                	add    ecx,esi
c00014af:	39 cf                	cmp    edi,ecx
c00014b1:	77 13                	ja     c00014c6 <dlrealloc+0xc2>
c00014b3:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00014b6:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00014b9:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00014bc:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00014bf:	89 ce                	mov    esi,ecx
c00014c1:	e9 ab 00 00 00       	jmp    c0001571 <dlrealloc+0x16d>
c00014c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00014ca:	8d 47 f9             	lea    eax,[edi-0x7]
c00014cd:	83 ec 0c             	sub    esp,0xc
c00014d0:	50                   	push   eax
c00014d1:	e8 f1 f9 ff ff       	call   c0000ec7 <dlmalloc>
c00014d6:	83 c4 10             	add    esp,0x10
c00014d9:	89 c1                	mov    ecx,eax
c00014db:	85 c0                	test   eax,eax
c00014dd:	0f 84 49 ff ff ff    	je     c000142c <dlrealloc+0x28>
c00014e3:	8d 40 f8             	lea    eax,[eax-0x8]
c00014e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00014ea:	39 c2                	cmp    edx,eax
c00014ec:	75 0a                	jne    c00014f8 <dlrealloc+0xf4>
c00014ee:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00014f1:	83 e0 fc             	and    eax,0xfffffffc
c00014f4:	01 c6                	add    esi,eax
c00014f6:	eb 79                	jmp    c0001571 <dlrealloc+0x16d>
c00014f8:	83 ee 04             	sub    esi,0x4
c00014fb:	83 fe 27             	cmp    esi,0x27
c00014fe:	76 16                	jbe    c0001516 <dlrealloc+0x112>
c0001500:	50                   	push   eax
c0001501:	56                   	push   esi
c0001502:	53                   	push   ebx
c0001503:	51                   	push   ecx
c0001504:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001508:	e8 48 f1 ff ff       	call   c0000655 <memcpy>
c000150d:	83 c4 10             	add    esp,0x10
c0001510:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001514:	eb 43                	jmp    c0001559 <dlrealloc+0x155>
c0001516:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001518:	83 fe 13             	cmp    esi,0x13
c000151b:	89 01                	mov    DWORD PTR [ecx],eax
c000151d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001520:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001523:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001526:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001529:	76 2e                	jbe    c0001559 <dlrealloc+0x155>
c000152b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000152e:	83 fe 1b             	cmp    esi,0x1b
c0001531:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001534:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001537:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000153a:	76 1d                	jbe    c0001559 <dlrealloc+0x155>
c000153c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000153f:	83 fe 23             	cmp    esi,0x23
c0001542:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001545:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001548:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000154b:	76 0c                	jbe    c0001559 <dlrealloc+0x155>
c000154d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0001550:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c0001553:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0001556:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c0001559:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000155d:	83 ec 0c             	sub    esp,0xc
c0001560:	53                   	push   ebx
c0001561:	e8 06 f6 ff ff       	call   c0000b6c <dlfree>
c0001566:	83 c4 10             	add    esp,0x10
c0001569:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000156d:	89 cb                	mov    ebx,ecx
c000156f:	eb 3e                	jmp    c00015af <dlrealloc+0x1ab>
c0001571:	89 f2                	mov    edx,esi
c0001573:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001576:	29 fa                	sub    edx,edi
c0001578:	83 e1 01             	and    ecx,0x1
c000157b:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c000157f:	83 fa 0f             	cmp    edx,0xf
c0001582:	77 0b                	ja     c000158f <dlrealloc+0x18b>
c0001584:	09 ce                	or     esi,ecx
c0001586:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001589:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000158d:	eb 20                	jmp    c00015af <dlrealloc+0x1ab>
c000158f:	01 fd                	add    ebp,edi
c0001591:	83 ec 0c             	sub    esp,0xc
c0001594:	09 cf                	or     edi,ecx
c0001596:	83 ca 01             	or     edx,0x1
c0001599:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c000159c:	83 c5 08             	add    ebp,0x8
c000159f:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00015a2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015a6:	55                   	push   ebp
c00015a7:	e8 c0 f5 ff ff       	call   c0000b6c <dlfree>
c00015ac:	83 c4 10             	add    esp,0x10
c00015af:	83 c4 1c             	add    esp,0x1c
c00015b2:	89 d8                	mov    eax,ebx
c00015b4:	5b                   	pop    ebx
c00015b5:	5e                   	pop    esi
c00015b6:	5f                   	pop    edi
c00015b7:	5d                   	pop    ebp
c00015b8:	c3                   	ret    

c00015b9 <dlmemalign>:
c00015b9:	55                   	push   ebp
c00015ba:	57                   	push   edi
c00015bb:	56                   	push   esi
c00015bc:	53                   	push   ebx
c00015bd:	83 ec 0c             	sub    esp,0xc
c00015c0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00015c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00015c8:	83 fa 08             	cmp    edx,0x8
c00015cb:	77 10                	ja     c00015dd <dlmemalign+0x24>
c00015cd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00015d1:	83 c4 0c             	add    esp,0xc
c00015d4:	5b                   	pop    ebx
c00015d5:	5e                   	pop    esi
c00015d6:	5f                   	pop    edi
c00015d7:	5d                   	pop    ebp
c00015d8:	e9 ea f8 ff ff       	jmp    c0000ec7 <dlmalloc>
c00015dd:	bf 10 00 00 00       	mov    edi,0x10
c00015e2:	83 fa 0f             	cmp    edx,0xf
c00015e5:	76 13                	jbe    c00015fa <dlmemalign+0x41>
c00015e7:	8d 4a ff             	lea    ecx,[edx-0x1]
c00015ea:	85 d1                	test   ecx,edx
c00015ec:	75 04                	jne    c00015f2 <dlmemalign+0x39>
c00015ee:	89 d7                	mov    edi,edx
c00015f0:	eb 08                	jmp    c00015fa <dlmemalign+0x41>
c00015f2:	39 d7                	cmp    edi,edx
c00015f4:	73 04                	jae    c00015fa <dlmemalign+0x41>
c00015f6:	01 ff                	add    edi,edi
c00015f8:	eb f8                	jmp    c00015f2 <dlmemalign+0x39>
c00015fa:	83 f8 df             	cmp    eax,0xffffffdf
c00015fd:	76 07                	jbe    c0001606 <dlmemalign+0x4d>
c00015ff:	31 c0                	xor    eax,eax
c0001601:	e9 ce 00 00 00       	jmp    c00016d4 <dlmemalign+0x11b>
c0001606:	83 c0 0b             	add    eax,0xb
c0001609:	bd 10 00 00 00       	mov    ebp,0x10
c000160e:	83 f8 0f             	cmp    eax,0xf
c0001611:	76 05                	jbe    c0001618 <dlmemalign+0x5f>
c0001613:	83 e0 f8             	and    eax,0xfffffff8
c0001616:	89 c5                	mov    ebp,eax
c0001618:	83 ec 0c             	sub    esp,0xc
c000161b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000161f:	50                   	push   eax
c0001620:	e8 a2 f8 ff ff       	call   c0000ec7 <dlmalloc>
c0001625:	83 c4 10             	add    esp,0x10
c0001628:	89 c1                	mov    ecx,eax
c000162a:	85 c0                	test   eax,eax
c000162c:	74 d1                	je     c00015ff <dlmemalign+0x46>
c000162e:	31 d2                	xor    edx,edx
c0001630:	8d 70 f8             	lea    esi,[eax-0x8]
c0001633:	f7 f7                	div    edi
c0001635:	85 d2                	test   edx,edx
c0001637:	74 62                	je     c000169b <dlmemalign+0xe2>
c0001639:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000163d:	89 f8                	mov    eax,edi
c000163f:	f7 d8                	neg    eax
c0001641:	21 c3                	and    ebx,eax
c0001643:	83 eb 08             	sub    ebx,0x8
c0001646:	89 d8                	mov    eax,ebx
c0001648:	29 f0                	sub    eax,esi
c000164a:	83 f8 0f             	cmp    eax,0xf
c000164d:	77 02                	ja     c0001651 <dlmemalign+0x98>
c000164f:	01 fb                	add    ebx,edi
c0001651:	89 d8                	mov    eax,ebx
c0001653:	29 f0                	sub    eax,esi
c0001655:	89 c6                	mov    esi,eax
c0001657:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000165a:	89 c2                	mov    edx,eax
c000165c:	83 e2 fc             	and    edx,0xfffffffc
c000165f:	29 f2                	sub    edx,esi
c0001661:	a8 02                	test   al,0x2
c0001663:	74 10                	je     c0001675 <dlmemalign+0xbc>
c0001665:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001668:	83 ca 02             	or     edx,0x2
c000166b:	8d 43 08             	lea    eax,[ebx+0x8]
c000166e:	89 33                	mov    DWORD PTR [ebx],esi
c0001670:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001673:	eb 5f                	jmp    c00016d4 <dlmemalign+0x11b>
c0001675:	83 ec 0c             	sub    esp,0xc
c0001678:	89 d0                	mov    eax,edx
c000167a:	83 c8 01             	or     eax,0x1
c000167d:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001680:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001685:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001688:	83 e0 01             	and    eax,0x1
c000168b:	09 f0                	or     eax,esi
c000168d:	89 de                	mov    esi,ebx
c000168f:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001692:	51                   	push   ecx
c0001693:	e8 d4 f4 ff ff       	call   c0000b6c <dlfree>
c0001698:	83 c4 10             	add    esp,0x10
c000169b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000169e:	a8 02                	test   al,0x2
c00016a0:	75 2f                	jne    c00016d1 <dlmemalign+0x118>
c00016a2:	83 e0 fc             	and    eax,0xfffffffc
c00016a5:	8d 55 10             	lea    edx,[ebp+0x10]
c00016a8:	39 c2                	cmp    edx,eax
c00016aa:	73 25                	jae    c00016d1 <dlmemalign+0x118>
c00016ac:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00016af:	83 ec 0c             	sub    esp,0xc
c00016b2:	29 e8                	sub    eax,ebp
c00016b4:	83 c2 08             	add    edx,0x8
c00016b7:	83 c8 01             	or     eax,0x1
c00016ba:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00016bd:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016c0:	83 e0 01             	and    eax,0x1
c00016c3:	09 c5                	or     ebp,eax
c00016c5:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00016c8:	52                   	push   edx
c00016c9:	e8 9e f4 ff ff       	call   c0000b6c <dlfree>
c00016ce:	83 c4 10             	add    esp,0x10
c00016d1:	8d 46 08             	lea    eax,[esi+0x8]
c00016d4:	83 c4 0c             	add    esp,0xc
c00016d7:	5b                   	pop    ebx
c00016d8:	5e                   	pop    esi
c00016d9:	5f                   	pop    edi
c00016da:	5d                   	pop    ebp
c00016db:	c3                   	ret    

c00016dc <dlcalloc>:
c00016dc:	53                   	push   ebx
c00016dd:	83 ec 14             	sub    esp,0x14
c00016e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00016e4:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00016e9:	50                   	push   eax
c00016ea:	e8 d8 f7 ff ff       	call   c0000ec7 <dlmalloc>
c00016ef:	83 c4 10             	add    esp,0x10
c00016f2:	89 c3                	mov    ebx,eax
c00016f4:	85 c0                	test   eax,eax
c00016f6:	74 77                	je     c000176f <dlcalloc+0x93>
c00016f8:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00016fb:	89 d0                	mov    eax,edx
c00016fd:	83 e0 fc             	and    eax,0xfffffffc
c0001700:	80 e2 02             	and    dl,0x2
c0001703:	75 5a                	jne    c000175f <dlcalloc+0x83>
c0001705:	83 e8 04             	sub    eax,0x4
c0001708:	83 f8 27             	cmp    eax,0x27
c000170b:	76 03                	jbe    c0001710 <dlcalloc+0x34>
c000170d:	51                   	push   ecx
c000170e:	eb 53                	jmp    c0001763 <dlcalloc+0x87>
c0001710:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001716:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000171d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001724:	83 f8 13             	cmp    eax,0x13
c0001727:	76 46                	jbe    c000176f <dlcalloc+0x93>
c0001729:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001730:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001737:	83 f8 1b             	cmp    eax,0x1b
c000173a:	76 33                	jbe    c000176f <dlcalloc+0x93>
c000173c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001743:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000174a:	83 f8 23             	cmp    eax,0x23
c000174d:	76 20                	jbe    c000176f <dlcalloc+0x93>
c000174f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001756:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000175d:	eb 10                	jmp    c000176f <dlcalloc+0x93>
c000175f:	83 e8 08             	sub    eax,0x8
c0001762:	52                   	push   edx
c0001763:	50                   	push   eax
c0001764:	6a 00                	push   0x0
c0001766:	53                   	push   ebx
c0001767:	e8 1f ef ff ff       	call   c000068b <memset>
c000176c:	83 c4 10             	add    esp,0x10
c000176f:	89 d8                	mov    eax,ebx
c0001771:	83 c4 08             	add    esp,0x8
c0001774:	5b                   	pop    ebx
c0001775:	c3                   	ret    

c0001776 <dlcfree>:
c0001776:	e9 f1 f3 ff ff       	jmp    c0000b6c <dlfree>

c000177b <dlindependent_calloc>:
c000177b:	83 ec 28             	sub    esp,0x28
c000177e:	b9 03 00 00 00       	mov    ecx,0x3
c0001783:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001787:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000178b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000178f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001793:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001797:	e8 b9 fa ff ff       	call   c0001255 <iALLOc>
c000179c:	83 c4 2c             	add    esp,0x2c
c000179f:	c3                   	ret    

c00017a0 <dlindependent_comalloc>:
c00017a0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00017a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00017a8:	31 c9                	xor    ecx,ecx
c00017aa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00017ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017b2:	e9 9e fa ff ff       	jmp    c0001255 <iALLOc>

c00017b7 <dlvalloc>:
c00017b7:	83 ec 0c             	sub    esp,0xc
c00017ba:	83 3d 40 c4 02 c0 00 	cmp    DWORD PTR ds:0xc002c440,0x0
c00017c1:	75 0a                	jne    c00017cd <dlvalloc+0x16>
c00017c3:	b8 40 c4 02 c0       	mov    eax,0xc002c440
c00017c8:	e8 b8 f2 ff ff       	call   c0000a85 <malloc_consolidate>
c00017cd:	50                   	push   eax
c00017ce:	50                   	push   eax
c00017cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00017d3:	ff 35 9c c7 02 c0    	push   DWORD PTR ds:0xc002c79c
c00017d9:	e8 db fd ff ff       	call   c00015b9 <dlmemalign>
c00017de:	83 c4 1c             	add    esp,0x1c
c00017e1:	c3                   	ret    

c00017e2 <dlpvalloc>:
c00017e2:	83 ec 0c             	sub    esp,0xc
c00017e5:	83 3d 40 c4 02 c0 00 	cmp    DWORD PTR ds:0xc002c440,0x0
c00017ec:	75 0a                	jne    c00017f8 <dlpvalloc+0x16>
c00017ee:	b8 40 c4 02 c0       	mov    eax,0xc002c440
c00017f3:	e8 8d f2 ff ff       	call   c0000a85 <malloc_consolidate>
c00017f8:	a1 9c c7 02 c0       	mov    eax,ds:0xc002c79c
c00017fd:	89 c1                	mov    ecx,eax
c00017ff:	52                   	push   edx
c0001800:	f7 d9                	neg    ecx
c0001802:	52                   	push   edx
c0001803:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001807:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c000180b:	21 ca                	and    edx,ecx
c000180d:	52                   	push   edx
c000180e:	50                   	push   eax
c000180f:	e8 a5 fd ff ff       	call   c00015b9 <dlmemalign>
c0001814:	83 c4 1c             	add    esp,0x1c
c0001817:	c3                   	ret    

c0001818 <dlmalloc_trim>:
c0001818:	b8 40 c4 02 c0       	mov    eax,0xc002c440
c000181d:	e8 63 f2 ff ff       	call   c0000a85 <malloc_consolidate>
c0001822:	31 c0                	xor    eax,eax
c0001824:	c3                   	ret    

c0001825 <dlmalloc_usable_size>:
c0001825:	53                   	push   ebx
c0001826:	31 c0                	xor    eax,eax
c0001828:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000182c:	85 c9                	test   ecx,ecx
c000182e:	74 24                	je     c0001854 <dlmalloc_usable_size+0x2f>
c0001830:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001833:	f6 c2 02             	test   dl,0x2
c0001836:	74 08                	je     c0001840 <dlmalloc_usable_size+0x1b>
c0001838:	83 e2 fc             	and    edx,0xfffffffc
c000183b:	8d 42 f8             	lea    eax,[edx-0x8]
c000183e:	eb 14                	jmp    c0001854 <dlmalloc_usable_size+0x2f>
c0001840:	89 d3                	mov    ebx,edx
c0001842:	31 c0                	xor    eax,eax
c0001844:	83 e3 fe             	and    ebx,0xfffffffe
c0001847:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c000184c:	74 06                	je     c0001854 <dlmalloc_usable_size+0x2f>
c000184e:	83 e2 fc             	and    edx,0xfffffffc
c0001851:	8d 42 fc             	lea    eax,[edx-0x4]
c0001854:	5b                   	pop    ebx
c0001855:	c3                   	ret    

c0001856 <dlmallinfo>:
c0001856:	55                   	push   ebp
c0001857:	57                   	push   edi
c0001858:	56                   	push   esi
c0001859:	53                   	push   ebx
c000185a:	83 ec 08             	sub    esp,0x8
c000185d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001861:	83 3d 6c c4 02 c0 00 	cmp    DWORD PTR ds:0xc002c46c,0x0
c0001868:	75 0a                	jne    c0001874 <dlmallinfo+0x1e>
c000186a:	b8 40 c4 02 c0       	mov    eax,0xc002c440
c000186f:	e8 11 f2 ff ff       	call   c0000a85 <malloc_consolidate>
c0001874:	a1 6c c4 02 c0       	mov    eax,ds:0xc002c46c
c0001879:	31 ed                	xor    ebp,ebp
c000187b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000187e:	31 c9                	xor    ecx,ecx
c0001880:	83 e0 fc             	and    eax,0xfffffffc
c0001883:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001887:	31 c0                	xor    eax,eax
c0001889:	8b 14 85 44 c4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3bbc]
c0001890:	85 d2                	test   edx,edx
c0001892:	74 0e                	je     c00018a2 <dlmallinfo+0x4c>
c0001894:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001897:	45                   	inc    ebp
c0001898:	83 e6 fc             	and    esi,0xfffffffc
c000189b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000189e:	01 f1                	add    ecx,esi
c00018a0:	eb ee                	jmp    c0001890 <dlmallinfo+0x3a>
c00018a2:	40                   	inc    eax
c00018a3:	83 f8 0a             	cmp    eax,0xa
c00018a6:	75 e1                	jne    c0001889 <dlmallinfo+0x33>
c00018a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018ac:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018b3:	8d 14 01             	lea    edx,[ecx+eax*1]
c00018b6:	b8 74 c4 02 c0       	mov    eax,0xc002c474
c00018bb:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00018be:	39 f0                	cmp    eax,esi
c00018c0:	74 10                	je     c00018d2 <dlmallinfo+0x7c>
c00018c2:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00018c5:	ff 04 24             	inc    DWORD PTR [esp]
c00018c8:	83 e7 fc             	and    edi,0xfffffffc
c00018cb:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00018ce:	01 fa                	add    edx,edi
c00018d0:	eb ec                	jmp    c00018be <dlmallinfo+0x68>
c00018d2:	83 c0 08             	add    eax,0x8
c00018d5:	3d 6c c7 02 c0       	cmp    eax,0xc002c76c
c00018da:	75 df                	jne    c00018bb <dlmallinfo+0x65>
c00018dc:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00018df:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00018e2:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c00018e5:	a1 a8 c7 02 c0       	mov    eax,ds:0xc002c7a8
c00018ea:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00018ed:	89 03                	mov    DWORD PTR [ebx],eax
c00018ef:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00018f2:	8b 35 90 c7 02 c0    	mov    esi,DWORD PTR ds:0xc002c790
c00018f8:	29 d0                	sub    eax,edx
c00018fa:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c00018fd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001900:	8b 35 a4 c7 02 c0    	mov    esi,DWORD PTR ds:0xc002c7a4
c0001906:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000190a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000190d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001910:	8b 35 b4 c7 02 c0    	mov    esi,DWORD PTR ds:0xc002c7b4
c0001916:	89 d8                	mov    eax,ebx
c0001918:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000191b:	83 c4 08             	add    esp,0x8
c000191e:	5b                   	pop    ebx
c000191f:	5e                   	pop    esi
c0001920:	5f                   	pop    edi
c0001921:	5d                   	pop    ebp
c0001922:	c2 04 00             	ret    0x4

c0001925 <dlmalloc_stats>:
c0001925:	83 ec 30             	sub    esp,0x30
c0001928:	8d 44 24 08          	lea    eax,[esp+0x8]
c000192c:	50                   	push   eax
c000192d:	e8 24 ff ff ff       	call   c0001856 <dlmallinfo>
c0001932:	83 c4 30             	add    esp,0x30
c0001935:	c3                   	ret    

c0001936 <dlmallopt>:
c0001936:	56                   	push   esi
c0001937:	b8 40 c4 02 c0       	mov    eax,0xc002c440
c000193c:	53                   	push   ebx
c000193d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001941:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001945:	e8 3b f1 ff ff       	call   c0000a85 <malloc_consolidate>
c000194a:	8d 46 04             	lea    eax,[esi+0x4]
c000194d:	83 f8 05             	cmp    eax,0x5
c0001950:	77 67                	ja     c00019b9 <dlmallopt+0x83>
c0001952:	ff 24 85 e4 7b 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd841c]
c0001959:	83 fb 50             	cmp    ebx,0x50
c000195c:	77 5b                	ja     c00019b9 <dlmallopt+0x83>
c000195e:	ba 08 00 00 00       	mov    edx,0x8
c0001963:	85 db                	test   ebx,ebx
c0001965:	74 12                	je     c0001979 <dlmallopt+0x43>
c0001967:	83 c3 0b             	add    ebx,0xb
c000196a:	ba 10 00 00 00       	mov    edx,0x10
c000196f:	83 fb 0f             	cmp    ebx,0xf
c0001972:	76 05                	jbe    c0001979 <dlmallopt+0x43>
c0001974:	89 da                	mov    edx,ebx
c0001976:	83 e2 f8             	and    edx,0xfffffff8
c0001979:	a1 40 c4 02 c0       	mov    eax,ds:0xc002c440
c000197e:	83 e0 03             	and    eax,0x3
c0001981:	09 d0                	or     eax,edx
c0001983:	a3 40 c4 02 c0       	mov    ds:0xc002c440,eax
c0001988:	eb 31                	jmp    c00019bb <dlmallopt+0x85>
c000198a:	89 1d 84 c7 02 c0    	mov    DWORD PTR ds:0xc002c784,ebx
c0001990:	eb 06                	jmp    c0001998 <dlmallopt+0x62>
c0001992:	89 1d 88 c7 02 c0    	mov    DWORD PTR ds:0xc002c788,ebx
c0001998:	be 01 00 00 00       	mov    esi,0x1
c000199d:	eb 1c                	jmp    c00019bb <dlmallopt+0x85>
c000199f:	89 1d 8c c7 02 c0    	mov    DWORD PTR ds:0xc002c78c,ebx
c00019a5:	eb f1                	jmp    c0001998 <dlmallopt+0x62>
c00019a7:	31 f6                	xor    esi,esi
c00019a9:	85 db                	test   ebx,ebx
c00019ab:	75 0e                	jne    c00019bb <dlmallopt+0x85>
c00019ad:	c7 05 94 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c794,0x0
c00019b7:	eb df                	jmp    c0001998 <dlmallopt+0x62>
c00019b9:	31 f6                	xor    esi,esi
c00019bb:	89 f0                	mov    eax,esi
c00019bd:	5b                   	pop    ebx
c00019be:	5e                   	pop    esi
c00019bf:	c3                   	ret    

c00019c0 <disk_status>:
c00019c0:	31 c0                	xor    eax,eax
c00019c2:	c3                   	ret    

c00019c3 <disk_initialize>:
c00019c3:	31 c0                	xor    eax,eax
c00019c5:	c3                   	ret    

c00019c6 <disk_read>:
c00019c6:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019cb:	0f b6 04 85 00 df 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd2100]
c00019d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019d7:	e9 36 e2 01 00       	jmp    c001fc12 <fatWrapperReadDisk>

c00019dc <disk_write>:
c00019dc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019e1:	0f b6 04 85 00 df 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd2100]
c00019e9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019ed:	e9 67 e2 01 00       	jmp    c001fc59 <fatWrapperWriteDisk>

c00019f2 <disk_ioctl>:
c00019f2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00019f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00019fb:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a00:	0f b6 04 85 00 df 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd2100]
c0001a08:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a0c:	e9 8f e2 01 00       	jmp    c001fca0 <fatWrapperIoctl>

c0001a11 <ld_word>:
c0001a11:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a15:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a18:	c1 e2 08             	shl    edx,0x8
c0001a1b:	09 d0                	or     eax,edx
c0001a1d:	c3                   	ret    

c0001a1e <ld_dword>:
c0001a1e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a22:	89 d1                	mov    ecx,edx
c0001a24:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a28:	c1 e1 08             	shl    ecx,0x8
c0001a2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a2e:	09 ca                	or     edx,ecx
c0001a30:	c1 e2 08             	shl    edx,0x8
c0001a33:	09 d0                	or     eax,edx
c0001a35:	c3                   	ret    

c0001a36 <ld_qword>:
c0001a36:	57                   	push   edi
c0001a37:	56                   	push   esi
c0001a38:	53                   	push   ebx
c0001a39:	31 db                	xor    ebx,ebx
c0001a3b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a3e:	89 df                	mov    edi,ebx
c0001a40:	89 ce                	mov    esi,ecx
c0001a42:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a46:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a4a:	c1 e6 08             	shl    esi,0x8
c0001a4d:	09 f2                	or     edx,esi
c0001a4f:	89 d6                	mov    esi,edx
c0001a51:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001a55:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a59:	c1 e6 08             	shl    esi,0x8
c0001a5c:	09 f2                	or     edx,esi
c0001a5e:	89 d6                	mov    esi,edx
c0001a60:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a64:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a68:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a6b:	c1 e6 08             	shl    esi,0x8
c0001a6e:	89 fb                	mov    ebx,edi
c0001a70:	09 f2                	or     edx,esi
c0001a72:	89 d1                	mov    ecx,edx
c0001a74:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001a78:	c1 e1 08             	shl    ecx,0x8
c0001a7b:	89 da                	mov    edx,ebx
c0001a7d:	09 c8                	or     eax,ecx
c0001a7f:	5b                   	pop    ebx
c0001a80:	5e                   	pop    esi
c0001a81:	5f                   	pop    edi
c0001a82:	c3                   	ret    

c0001a83 <st_word>:
c0001a83:	66 89 10             	mov    WORD PTR [eax],dx
c0001a86:	c3                   	ret    

c0001a87 <st_dword>:
c0001a87:	89 10                	mov    DWORD PTR [eax],edx
c0001a89:	c3                   	ret    

c0001a8a <st_qword>:
c0001a8a:	89 10                	mov    DWORD PTR [eax],edx
c0001a8c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001a8f:	c3                   	ret    

c0001a90 <mem_cpy>:
c0001a90:	85 c9                	test   ecx,ecx
c0001a92:	74 10                	je     c0001aa4 <mem_cpy+0x14>
c0001a94:	57                   	push   edi
c0001a95:	01 c1                	add    ecx,eax
c0001a97:	56                   	push   esi
c0001a98:	89 c7                	mov    edi,eax
c0001a9a:	89 d6                	mov    esi,edx
c0001a9c:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a9d:	39 f9                	cmp    ecx,edi
c0001a9f:	75 fb                	jne    c0001a9c <mem_cpy+0xc>
c0001aa1:	5e                   	pop    esi
c0001aa2:	5f                   	pop    edi
c0001aa3:	c3                   	ret    
c0001aa4:	c3                   	ret    

c0001aa5 <mem_set>:
c0001aa5:	01 c1                	add    ecx,eax
c0001aa7:	40                   	inc    eax
c0001aa8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001aab:	39 c8                	cmp    eax,ecx
c0001aad:	75 f8                	jne    c0001aa7 <mem_set+0x2>
c0001aaf:	c3                   	ret    

c0001ab0 <mem_cmp>:
c0001ab0:	57                   	push   edi
c0001ab1:	56                   	push   esi
c0001ab2:	89 c6                	mov    esi,eax
c0001ab4:	53                   	push   ebx
c0001ab5:	46                   	inc    esi
c0001ab6:	42                   	inc    edx
c0001ab7:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001abb:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001abf:	29 fb                	sub    ebx,edi
c0001ac1:	89 cf                	mov    edi,ecx
c0001ac3:	29 f7                	sub    edi,esi
c0001ac5:	01 c7                	add    edi,eax
c0001ac7:	74 04                	je     c0001acd <mem_cmp+0x1d>
c0001ac9:	85 db                	test   ebx,ebx
c0001acb:	74 e8                	je     c0001ab5 <mem_cmp+0x5>
c0001acd:	89 d8                	mov    eax,ebx
c0001acf:	5b                   	pop    ebx
c0001ad0:	5e                   	pop    esi
c0001ad1:	5f                   	pop    edi
c0001ad2:	c3                   	ret    

c0001ad3 <chk_chr>:
c0001ad3:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001ad6:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001ad9:	74 07                	je     c0001ae2 <chk_chr+0xf>
c0001adb:	39 d1                	cmp    ecx,edx
c0001add:	74 03                	je     c0001ae2 <chk_chr+0xf>
c0001adf:	40                   	inc    eax
c0001ae0:	eb f1                	jmp    c0001ad3 <chk_chr>
c0001ae2:	89 c8                	mov    eax,ecx
c0001ae4:	c3                   	ret    

c0001ae5 <dbc_1st>:
c0001ae5:	31 c0                	xor    eax,eax
c0001ae7:	c3                   	ret    

c0001ae8 <dbc_2nd>:
c0001ae8:	31 c0                	xor    eax,eax
c0001aea:	c3                   	ret    

c0001aeb <tchar2uni>:
c0001aeb:	57                   	push   edi
c0001aec:	89 c7                	mov    edi,eax
c0001aee:	56                   	push   esi
c0001aef:	53                   	push   ebx
c0001af0:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001af2:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001af4:	8d 73 01             	lea    esi,[ebx+0x1]
c0001af7:	84 c9                	test   cl,cl
c0001af9:	78 0a                	js     c0001b05 <tchar2uni+0x1a>
c0001afb:	0f b6 d1             	movzx  edx,cl
c0001afe:	89 f3                	mov    ebx,esi
c0001b00:	e9 9f 00 00 00       	jmp    c0001ba4 <tchar2uni+0xb9>
c0001b05:	88 ca                	mov    dl,cl
c0001b07:	83 e2 e0             	and    edx,0xffffffe0
c0001b0a:	80 fa c0             	cmp    dl,0xc0
c0001b0d:	75 0c                	jne    c0001b1b <tchar2uni+0x30>
c0001b0f:	89 ca                	mov    edx,ecx
c0001b11:	b9 01 00 00 00       	mov    ecx,0x1
c0001b16:	83 e2 1f             	and    edx,0x1f
c0001b19:	eb 2e                	jmp    c0001b49 <tchar2uni+0x5e>
c0001b1b:	88 ca                	mov    dl,cl
c0001b1d:	83 e2 f0             	and    edx,0xfffffff0
c0001b20:	80 fa e0             	cmp    dl,0xe0
c0001b23:	75 0c                	jne    c0001b31 <tchar2uni+0x46>
c0001b25:	89 ca                	mov    edx,ecx
c0001b27:	b9 02 00 00 00       	mov    ecx,0x2
c0001b2c:	83 e2 0f             	and    edx,0xf
c0001b2f:	eb 18                	jmp    c0001b49 <tchar2uni+0x5e>
c0001b31:	88 ca                	mov    dl,cl
c0001b33:	83 e2 f8             	and    edx,0xfffffff8
c0001b36:	88 d0                	mov    al,dl
c0001b38:	83 ca ff             	or     edx,0xffffffff
c0001b3b:	3c f0                	cmp    al,0xf0
c0001b3d:	75 6c                	jne    c0001bab <tchar2uni+0xc0>
c0001b3f:	89 ca                	mov    edx,ecx
c0001b41:	b9 03 00 00 00       	mov    ecx,0x3
c0001b46:	83 e2 07             	and    edx,0x7
c0001b49:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b4d:	46                   	inc    esi
c0001b4e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b51:	88 c8                	mov    al,cl
c0001b53:	83 e0 c0             	and    eax,0xffffffc0
c0001b56:	3c 80                	cmp    al,0x80
c0001b58:	75 4e                	jne    c0001ba8 <tchar2uni+0xbd>
c0001b5a:	c1 e2 06             	shl    edx,0x6
c0001b5d:	83 e1 3f             	and    ecx,0x3f
c0001b60:	09 ca                	or     edx,ecx
c0001b62:	39 de                	cmp    esi,ebx
c0001b64:	75 e7                	jne    c0001b4d <tchar2uni+0x62>
c0001b66:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001b69:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001b6f:	77 37                	ja     c0001ba8 <tchar2uni+0xbd>
c0001b71:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001b77:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001b7d:	76 29                	jbe    c0001ba8 <tchar2uni+0xbd>
c0001b7f:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001b85:	76 1d                	jbe    c0001ba4 <tchar2uni+0xb9>
c0001b87:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001b8d:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001b93:	c1 e1 06             	shl    ecx,0x6
c0001b96:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001b9c:	09 ca                	or     edx,ecx
c0001b9e:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001ba4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001ba6:	eb 03                	jmp    c0001bab <tchar2uni+0xc0>
c0001ba8:	83 ca ff             	or     edx,0xffffffff
c0001bab:	5b                   	pop    ebx
c0001bac:	89 d0                	mov    eax,edx
c0001bae:	5e                   	pop    esi
c0001baf:	5f                   	pop    edi
c0001bb0:	c3                   	ret    

c0001bb1 <put_utf>:
c0001bb1:	53                   	push   ebx
c0001bb2:	83 f8 7f             	cmp    eax,0x7f
c0001bb5:	89 c3                	mov    ebx,eax
c0001bb7:	b0 00                	mov    al,0x0
c0001bb9:	77 11                	ja     c0001bcc <put_utf+0x1b>
c0001bbb:	85 c9                	test   ecx,ecx
c0001bbd:	0f 84 e5 00 00 00    	je     c0001ca8 <put_utf+0xf7>
c0001bc3:	88 1a                	mov    BYTE PTR [edx],bl
c0001bc5:	b0 01                	mov    al,0x1
c0001bc7:	e9 dc 00 00 00       	jmp    c0001ca8 <put_utf+0xf7>
c0001bcc:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001bd2:	77 23                	ja     c0001bf7 <put_utf+0x46>
c0001bd4:	83 f9 01             	cmp    ecx,0x1
c0001bd7:	0f 86 cb 00 00 00    	jbe    c0001ca8 <put_utf+0xf7>
c0001bdd:	89 d8                	mov    eax,ebx
c0001bdf:	83 e3 3f             	and    ebx,0x3f
c0001be2:	c1 e8 06             	shr    eax,0x6
c0001be5:	83 cb 80             	or     ebx,0xffffff80
c0001be8:	83 c8 c0             	or     eax,0xffffffc0
c0001beb:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001bee:	88 02                	mov    BYTE PTR [edx],al
c0001bf0:	b0 02                	mov    al,0x2
c0001bf2:	e9 b1 00 00 00       	jmp    c0001ca8 <put_utf+0xf7>
c0001bf7:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001bfd:	77 40                	ja     c0001c3f <put_utf+0x8e>
c0001bff:	83 f9 02             	cmp    ecx,0x2
c0001c02:	0f 86 a0 00 00 00    	jbe    c0001ca8 <put_utf+0xf7>
c0001c08:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c0e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c14:	0f 86 8e 00 00 00    	jbe    c0001ca8 <put_utf+0xf7>
c0001c1a:	89 d8                	mov    eax,ebx
c0001c1c:	c1 e8 0c             	shr    eax,0xc
c0001c1f:	83 c8 e0             	or     eax,0xffffffe0
c0001c22:	88 02                	mov    BYTE PTR [edx],al
c0001c24:	89 d8                	mov    eax,ebx
c0001c26:	83 e3 3f             	and    ebx,0x3f
c0001c29:	c1 e8 06             	shr    eax,0x6
c0001c2c:	83 cb 80             	or     ebx,0xffffff80
c0001c2f:	83 e0 3f             	and    eax,0x3f
c0001c32:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c35:	83 c8 80             	or     eax,0xffffff80
c0001c38:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c3b:	b0 03                	mov    al,0x3
c0001c3d:	eb 69                	jmp    c0001ca8 <put_utf+0xf7>
c0001c3f:	83 f9 03             	cmp    ecx,0x3
c0001c42:	76 64                	jbe    c0001ca8 <put_utf+0xf7>
c0001c44:	89 d9                	mov    ecx,ebx
c0001c46:	0f b7 c3             	movzx  eax,bx
c0001c49:	66 31 c9             	xor    cx,cx
c0001c4c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001c52:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001c58:	c1 e9 06             	shr    ecx,0x6
c0001c5b:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001c61:	77 43                	ja     c0001ca6 <put_utf+0xf5>
c0001c63:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001c69:	77 3b                	ja     c0001ca6 <put_utf+0xf5>
c0001c6b:	09 cb                	or     ebx,ecx
c0001c6d:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001c73:	89 d8                	mov    eax,ebx
c0001c75:	c1 e8 12             	shr    eax,0x12
c0001c78:	83 c8 f0             	or     eax,0xfffffff0
c0001c7b:	88 02                	mov    BYTE PTR [edx],al
c0001c7d:	89 d8                	mov    eax,ebx
c0001c7f:	c1 e8 0c             	shr    eax,0xc
c0001c82:	83 e0 3f             	and    eax,0x3f
c0001c85:	83 c8 80             	or     eax,0xffffff80
c0001c88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c8b:	89 d8                	mov    eax,ebx
c0001c8d:	83 e3 3f             	and    ebx,0x3f
c0001c90:	c1 e8 06             	shr    eax,0x6
c0001c93:	83 cb 80             	or     ebx,0xffffff80
c0001c96:	83 e0 3f             	and    eax,0x3f
c0001c99:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001c9c:	83 c8 80             	or     eax,0xffffff80
c0001c9f:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ca2:	b0 04                	mov    al,0x4
c0001ca4:	eb 02                	jmp    c0001ca8 <put_utf+0xf7>
c0001ca6:	31 c0                	xor    eax,eax
c0001ca8:	5b                   	pop    ebx
c0001ca9:	c3                   	ret    

c0001caa <clst2sect>:
c0001caa:	89 c1                	mov    ecx,eax
c0001cac:	83 ea 02             	sub    edx,0x2
c0001caf:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001cb2:	83 e8 02             	sub    eax,0x2
c0001cb5:	39 d0                	cmp    eax,edx
c0001cb7:	76 0d                	jbe    c0001cc6 <clst2sect+0x1c>
c0001cb9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001cbd:	f7 e2                	mul    edx
c0001cbf:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001cc2:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001cc5:	c3                   	ret    
c0001cc6:	31 c0                	xor    eax,eax
c0001cc8:	31 d2                	xor    edx,edx
c0001cca:	c3                   	ret    

c0001ccb <clmt_clust>:
c0001ccb:	57                   	push   edi
c0001ccc:	89 cf                	mov    edi,ecx
c0001cce:	56                   	push   esi
c0001ccf:	89 d6                	mov    esi,edx
c0001cd1:	53                   	push   ebx
c0001cd2:	0f ac fe 09          	shrd   esi,edi,0x9
c0001cd6:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001cd9:	89 f2                	mov    edx,esi
c0001cdb:	8b 00                	mov    eax,DWORD PTR [eax]
c0001cdd:	c1 ef 09             	shr    edi,0x9
c0001ce0:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001ce4:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001ce7:	89 f9                	mov    ecx,edi
c0001ce9:	31 ff                	xor    edi,edi
c0001ceb:	57                   	push   edi
c0001cec:	56                   	push   esi
c0001ced:	51                   	push   ecx
c0001cee:	52                   	push   edx
c0001cef:	e8 c8 35 02 00       	call   c00252bc <__udivdi3>
c0001cf4:	83 c4 10             	add    esp,0x10
c0001cf7:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001cf9:	85 d2                	test   edx,edx
c0001cfb:	74 10                	je     c0001d0d <clmt_clust+0x42>
c0001cfd:	39 d0                	cmp    eax,edx
c0001cff:	72 07                	jb     c0001d08 <clmt_clust+0x3d>
c0001d01:	29 d0                	sub    eax,edx
c0001d03:	83 c3 08             	add    ebx,0x8
c0001d06:	eb ef                	jmp    c0001cf7 <clmt_clust+0x2c>
c0001d08:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001d0b:	89 c2                	mov    edx,eax
c0001d0d:	5b                   	pop    ebx
c0001d0e:	89 d0                	mov    eax,edx
c0001d10:	5e                   	pop    esi
c0001d11:	5f                   	pop    edi
c0001d12:	c3                   	ret    

c0001d13 <pick_lfn>:
c0001d13:	55                   	push   ebp
c0001d14:	57                   	push   edi
c0001d15:	56                   	push   esi
c0001d16:	89 d6                	mov    esi,edx
c0001d18:	53                   	push   ebx
c0001d19:	89 c3                	mov    ebx,eax
c0001d1b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d1e:	e8 ee fc ff ff       	call   c0001a11 <ld_word>
c0001d23:	66 85 c0             	test   ax,ax
c0001d26:	74 04                	je     c0001d2c <pick_lfn+0x19>
c0001d28:	31 c0                	xor    eax,eax
c0001d2a:	eb 5c                	jmp    c0001d88 <pick_lfn+0x75>
c0001d2c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d2f:	bd 01 00 00 00       	mov    ebp,0x1
c0001d34:	83 e1 bf             	and    ecx,0xffffffbf
c0001d37:	31 ff                	xor    edi,edi
c0001d39:	49                   	dec    ecx
c0001d3a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d3d:	0f b6 87 00 7d 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd8300]
c0001d44:	01 f0                	add    eax,esi
c0001d46:	e8 c6 fc ff ff       	call   c0001a11 <ld_word>
c0001d4b:	66 85 ed             	test   bp,bp
c0001d4e:	74 11                	je     c0001d61 <pick_lfn+0x4e>
c0001d50:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d56:	77 d0                	ja     c0001d28 <pick_lfn+0x15>
c0001d58:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001d5c:	89 c5                	mov    ebp,eax
c0001d5e:	41                   	inc    ecx
c0001d5f:	eb 04                	jmp    c0001d65 <pick_lfn+0x52>
c0001d61:	66 40                	inc    ax
c0001d63:	75 c3                	jne    c0001d28 <pick_lfn+0x15>
c0001d65:	47                   	inc    edi
c0001d66:	83 ff 0d             	cmp    edi,0xd
c0001d69:	75 d2                	jne    c0001d3d <pick_lfn+0x2a>
c0001d6b:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001d6e:	74 13                	je     c0001d83 <pick_lfn+0x70>
c0001d70:	66 85 ed             	test   bp,bp
c0001d73:	74 0e                	je     c0001d83 <pick_lfn+0x70>
c0001d75:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d7b:	77 ab                	ja     c0001d28 <pick_lfn+0x15>
c0001d7d:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001d83:	b8 01 00 00 00       	mov    eax,0x1
c0001d88:	5b                   	pop    ebx
c0001d89:	5e                   	pop    esi
c0001d8a:	5f                   	pop    edi
c0001d8b:	5d                   	pop    ebp
c0001d8c:	c3                   	ret    

c0001d8d <put_lfn>:
c0001d8d:	55                   	push   ebp
c0001d8e:	31 ed                	xor    ebp,ebp
c0001d90:	57                   	push   edi
c0001d91:	89 d7                	mov    edi,edx
c0001d93:	56                   	push   esi
c0001d94:	31 f6                	xor    esi,esi
c0001d96:	53                   	push   ebx
c0001d97:	83 ec 08             	sub    esp,0x8
c0001d9a:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d9d:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001da1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001da5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001dab:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001dae:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001db1:	31 d2                	xor    edx,edx
c0001db3:	e8 cb fc ff ff       	call   c0001a83 <st_word>
c0001db8:	0f b6 d9             	movzx  ebx,cl
c0001dbb:	4b                   	dec    ebx
c0001dbc:	6b db 0d             	imul   ebx,ebx,0xd
c0001dbf:	66 83 fe ff          	cmp    si,0xffff
c0001dc3:	74 08                	je     c0001dcd <put_lfn+0x40>
c0001dc5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001dc8:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001dcc:	43                   	inc    ebx
c0001dcd:	0f b6 85 00 7d 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd8300]
c0001dd4:	0f b7 d6             	movzx  edx,si
c0001dd7:	01 f8                	add    eax,edi
c0001dd9:	e8 a5 fc ff ff       	call   c0001a83 <st_word>
c0001dde:	66 85 f6             	test   si,si
c0001de1:	75 03                	jne    c0001de6 <put_lfn+0x59>
c0001de3:	83 ce ff             	or     esi,0xffffffff
c0001de6:	45                   	inc    ebp
c0001de7:	83 fd 0d             	cmp    ebp,0xd
c0001dea:	75 d3                	jne    c0001dbf <put_lfn+0x32>
c0001dec:	66 46                	inc    si
c0001dee:	74 0a                	je     c0001dfa <put_lfn+0x6d>
c0001df0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001df3:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001df8:	75 09                	jne    c0001e03 <put_lfn+0x76>
c0001dfa:	88 c8                	mov    al,cl
c0001dfc:	83 c8 40             	or     eax,0x40
c0001dff:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e03:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001e07:	88 07                	mov    BYTE PTR [edi],al
c0001e09:	83 c4 08             	add    esp,0x8
c0001e0c:	5b                   	pop    ebx
c0001e0d:	5e                   	pop    esi
c0001e0e:	5f                   	pop    edi
c0001e0f:	5d                   	pop    ebp
c0001e10:	c3                   	ret    

c0001e11 <gen_numname>:
c0001e11:	57                   	push   edi
c0001e12:	89 cf                	mov    edi,ecx
c0001e14:	56                   	push   esi
c0001e15:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e1a:	53                   	push   ebx
c0001e1b:	89 c6                	mov    esi,eax
c0001e1d:	83 ec 10             	sub    esp,0x10
c0001e20:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e24:	e8 67 fc ff ff       	call   c0001a90 <mem_cpy>
c0001e29:	83 fb 05             	cmp    ebx,0x5
c0001e2c:	76 2d                	jbe    c0001e5b <gen_numname+0x4a>
c0001e2e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e31:	66 85 c0             	test   ax,ax
c0001e34:	74 25                	je     c0001e5b <gen_numname+0x4a>
c0001e36:	83 c7 02             	add    edi,0x2
c0001e39:	ba 10 00 00 00       	mov    edx,0x10
c0001e3e:	01 db                	add    ebx,ebx
c0001e40:	89 c1                	mov    ecx,eax
c0001e42:	66 d1 e8             	shr    ax,1
c0001e45:	83 e1 01             	and    ecx,0x1
c0001e48:	01 cb                	add    ebx,ecx
c0001e4a:	0f ba e3 10          	bt     ebx,0x10
c0001e4e:	73 06                	jae    c0001e56 <gen_numname+0x45>
c0001e50:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001e56:	4a                   	dec    edx
c0001e57:	75 e5                	jne    c0001e3e <gen_numname+0x2d>
c0001e59:	eb d3                	jmp    c0001e2e <gen_numname+0x1d>
c0001e5b:	b8 07 00 00 00       	mov    eax,0x7
c0001e60:	88 d9                	mov    cl,bl
c0001e62:	83 e1 0f             	and    ecx,0xf
c0001e65:	8d 51 30             	lea    edx,[ecx+0x30]
c0001e68:	80 fa 39             	cmp    dl,0x39
c0001e6b:	76 03                	jbe    c0001e70 <gen_numname+0x5f>
c0001e6d:	8d 51 37             	lea    edx,[ecx+0x37]
c0001e70:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001e73:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001e77:	89 da                	mov    edx,ebx
c0001e79:	c1 ea 04             	shr    edx,0x4
c0001e7c:	83 fb 0f             	cmp    ebx,0xf
c0001e7f:	76 06                	jbe    c0001e87 <gen_numname+0x76>
c0001e81:	89 c8                	mov    eax,ecx
c0001e83:	89 d3                	mov    ebx,edx
c0001e85:	eb d9                	jmp    c0001e60 <gen_numname+0x4f>
c0001e87:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001e8c:	31 d2                	xor    edx,edx
c0001e8e:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001e91:	8d 04 16             	lea    eax,[esi+edx*1]
c0001e94:	39 ca                	cmp    edx,ecx
c0001e96:	73 18                	jae    c0001eb0 <gen_numname+0x9f>
c0001e98:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e9b:	3c 20                	cmp    al,0x20
c0001e9d:	74 11                	je     c0001eb0 <gen_numname+0x9f>
c0001e9f:	e8 41 fc ff ff       	call   c0001ae5 <dbc_1st>
c0001ea4:	85 c0                	test   eax,eax
c0001ea6:	74 05                	je     c0001ead <gen_numname+0x9c>
c0001ea8:	39 d3                	cmp    ebx,edx
c0001eaa:	74 04                	je     c0001eb0 <gen_numname+0x9f>
c0001eac:	42                   	inc    edx
c0001ead:	42                   	inc    edx
c0001eae:	eb e1                	jmp    c0001e91 <gen_numname+0x80>
c0001eb0:	b0 20                	mov    al,0x20
c0001eb2:	83 f9 07             	cmp    ecx,0x7
c0001eb5:	77 05                	ja     c0001ebc <gen_numname+0xab>
c0001eb7:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001ebb:	41                   	inc    ecx
c0001ebc:	42                   	inc    edx
c0001ebd:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001ec1:	83 fa 07             	cmp    edx,0x7
c0001ec4:	76 ea                	jbe    c0001eb0 <gen_numname+0x9f>
c0001ec6:	83 c4 10             	add    esp,0x10
c0001ec9:	5b                   	pop    ebx
c0001eca:	5e                   	pop    esi
c0001ecb:	5f                   	pop    edi
c0001ecc:	c3                   	ret    

c0001ecd <sum_sfn>:
c0001ecd:	31 c9                	xor    ecx,ecx
c0001ecf:	31 d2                	xor    edx,edx
c0001ed1:	d0 ca                	ror    dl,1
c0001ed3:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001ed6:	41                   	inc    ecx
c0001ed7:	83 f9 0b             	cmp    ecx,0xb
c0001eda:	75 f5                	jne    c0001ed1 <sum_sfn+0x4>
c0001edc:	88 d0                	mov    al,dl
c0001ede:	c3                   	ret    

c0001edf <xdir_sum>:
c0001edf:	56                   	push   esi
c0001ee0:	31 c9                	xor    ecx,ecx
c0001ee2:	53                   	push   ebx
c0001ee3:	31 d2                	xor    edx,edx
c0001ee5:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001ee9:	43                   	inc    ebx
c0001eea:	c1 e3 05             	shl    ebx,0x5
c0001eed:	83 fa 02             	cmp    edx,0x2
c0001ef0:	74 0b                	je     c0001efd <xdir_sum+0x1e>
c0001ef2:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001ef6:	66 d1 c9             	ror    cx,1
c0001ef9:	01 f1                	add    ecx,esi
c0001efb:	eb 05                	jmp    c0001f02 <xdir_sum+0x23>
c0001efd:	ba 03 00 00 00       	mov    edx,0x3
c0001f02:	42                   	inc    edx
c0001f03:	39 d3                	cmp    ebx,edx
c0001f05:	77 e6                	ja     c0001eed <xdir_sum+0xe>
c0001f07:	89 c8                	mov    eax,ecx
c0001f09:	5b                   	pop    ebx
c0001f0a:	5e                   	pop    esi
c0001f0b:	c3                   	ret    

c0001f0c <xsum32>:
c0001f0c:	d1 ca                	ror    edx,1
c0001f0e:	0f b6 c0             	movzx  eax,al
c0001f11:	01 d0                	add    eax,edx
c0001f13:	c3                   	ret    

c0001f14 <get_xfileinfo>:
c0001f14:	55                   	push   ebp
c0001f15:	31 c9                	xor    ecx,ecx
c0001f17:	57                   	push   edi
c0001f18:	bd 40 00 00 00       	mov    ebp,0x40
c0001f1d:	56                   	push   esi
c0001f1e:	31 ff                	xor    edi,edi
c0001f20:	53                   	push   ebx
c0001f21:	89 c6                	mov    esi,eax
c0001f23:	83 ec 0c             	sub    esp,0xc
c0001f26:	89 d3                	mov    ebx,edx
c0001f28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f2f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f33:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f36:	76 6d                	jbe    c0001fa5 <get_xfileinfo+0x91>
c0001f38:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f3e:	76 0b                	jbe    c0001f4b <get_xfileinfo+0x37>
c0001f40:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f44:	bf 01 00 00 00       	mov    edi,0x1
c0001f49:	eb 63                	jmp    c0001fae <get_xfileinfo+0x9a>
c0001f4b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f51:	75 03                	jne    c0001f56 <get_xfileinfo+0x42>
c0001f53:	83 c5 02             	add    ebp,0x2
c0001f56:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001f59:	83 c5 02             	add    ebp,0x2
c0001f5c:	e8 b0 fa ff ff       	call   c0001a11 <ld_word>
c0001f61:	ff 04 24             	inc    DWORD PTR [esp]
c0001f64:	66 85 c9             	test   cx,cx
c0001f67:	75 0d                	jne    c0001f76 <get_xfileinfo+0x62>
c0001f69:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001f6f:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001f74:	76 2b                	jbe    c0001fa1 <get_xfileinfo+0x8d>
c0001f76:	c1 e1 10             	shl    ecx,0x10
c0001f79:	ba ff 00 00 00       	mov    edx,0xff
c0001f7e:	0f b7 c0             	movzx  eax,ax
c0001f81:	29 fa                	sub    edx,edi
c0001f83:	09 c8                	or     eax,ecx
c0001f85:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001f89:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001f8d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001f91:	e8 1b fc ff ff       	call   c0001bb1 <put_utf>
c0001f96:	84 c0                	test   al,al
c0001f98:	74 a6                	je     c0001f40 <get_xfileinfo+0x2c>
c0001f9a:	0f b6 c0             	movzx  eax,al
c0001f9d:	01 c7                	add    edi,eax
c0001f9f:	31 c0                	xor    eax,eax
c0001fa1:	89 c1                	mov    ecx,eax
c0001fa3:	eb 8a                	jmp    c0001f2f <get_xfileinfo+0x1b>
c0001fa5:	85 ff                	test   edi,edi
c0001fa7:	74 97                	je     c0001f40 <get_xfileinfo+0x2c>
c0001fa9:	66 85 c9             	test   cx,cx
c0001fac:	75 92                	jne    c0001f40 <get_xfileinfo+0x2c>
c0001fae:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001fb3:	31 c0                	xor    eax,eax
c0001fb5:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001fb9:	31 d2                	xor    edx,edx
c0001fbb:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001fbe:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001fc1:	80 e1 10             	and    cl,0x10
c0001fc4:	75 08                	jne    c0001fce <get_xfileinfo+0xba>
c0001fc6:	8d 46 38             	lea    eax,[esi+0x38]
c0001fc9:	e8 68 fa ff ff       	call   c0001a36 <ld_qword>
c0001fce:	89 03                	mov    DWORD PTR [ebx],eax
c0001fd0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001fd3:	8d 46 0c             	lea    eax,[esi+0xc]
c0001fd6:	e8 36 fa ff ff       	call   c0001a11 <ld_word>
c0001fdb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0001fdf:	8d 46 0e             	lea    eax,[esi+0xe]
c0001fe2:	e8 2a fa ff ff       	call   c0001a11 <ld_word>
c0001fe7:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0001feb:	83 c4 0c             	add    esp,0xc
c0001fee:	5b                   	pop    ebx
c0001fef:	5e                   	pop    esi
c0001ff0:	5f                   	pop    edi
c0001ff1:	5d                   	pop    ebp
c0001ff2:	c3                   	ret    

c0001ff3 <get_ldnumber>:
c0001ff3:	8b 10                	mov    edx,DWORD PTR [eax]
c0001ff5:	85 d2                	test   edx,edx
c0001ff7:	74 14                	je     c000200d <get_ldnumber+0x1a>
c0001ff9:	56                   	push   esi
c0001ffa:	53                   	push   ebx
c0001ffb:	89 d3                	mov    ebx,edx
c0001ffd:	43                   	inc    ebx
c0001ffe:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002001:	80 f9 1f             	cmp    cl,0x1f
c0002004:	76 0d                	jbe    c0002013 <get_ldnumber+0x20>
c0002006:	80 f9 3a             	cmp    cl,0x3a
c0002009:	75 f2                	jne    c0001ffd <get_ldnumber+0xa>
c000200b:	eb 0a                	jmp    c0002017 <get_ldnumber+0x24>
c000200d:	83 c9 ff             	or     ecx,0xffffffff
c0002010:	89 c8                	mov    eax,ecx
c0002012:	c3                   	ret    
c0002013:	31 c9                	xor    ecx,ecx
c0002015:	eb 24                	jmp    c000203b <get_ldnumber+0x48>
c0002017:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000201a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000201d:	80 f9 09             	cmp    cl,0x9
c0002020:	77 16                	ja     c0002038 <get_ldnumber+0x45>
c0002022:	83 c2 02             	add    edx,0x2
c0002025:	83 c9 ff             	or     ecx,0xffffffff
c0002028:	39 d3                	cmp    ebx,edx
c000202a:	75 0f                	jne    c000203b <get_ldnumber+0x48>
c000202c:	89 f2                	mov    edx,esi
c000202e:	89 18                	mov    DWORD PTR [eax],ebx
c0002030:	0f be ca             	movsx  ecx,dl
c0002033:	83 e9 30             	sub    ecx,0x30
c0002036:	eb 03                	jmp    c000203b <get_ldnumber+0x48>
c0002038:	83 c9 ff             	or     ecx,0xffffffff
c000203b:	89 c8                	mov    eax,ecx
c000203d:	5b                   	pop    ebx
c000203e:	5e                   	pop    esi
c000203f:	c3                   	ret    

c0002040 <crc32>:
c0002040:	56                   	push   esi
c0002041:	89 d6                	mov    esi,edx
c0002043:	53                   	push   ebx
c0002044:	b2 01                	mov    dl,0x1
c0002046:	bb 08 00 00 00       	mov    ebx,0x8
c000204b:	89 f1                	mov    ecx,esi
c000204d:	84 d1                	test   cl,dl
c000204f:	0f 95 c1             	setne  cl
c0002052:	0f b6 c9             	movzx  ecx,cl
c0002055:	31 c1                	xor    ecx,eax
c0002057:	89 c8                	mov    eax,ecx
c0002059:	d1 e8                	shr    eax,1
c000205b:	80 e1 01             	and    cl,0x1
c000205e:	74 05                	je     c0002065 <crc32+0x25>
c0002060:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0002065:	d1 e2                	shl    edx,1
c0002067:	4b                   	dec    ebx
c0002068:	75 e1                	jne    c000204b <crc32+0xb>
c000206a:	5b                   	pop    ebx
c000206b:	5e                   	pop    esi
c000206c:	c3                   	ret    

c000206d <test_gpt_header>:
c000206d:	55                   	push   ebp
c000206e:	b9 10 00 00 00       	mov    ecx,0x10
c0002073:	57                   	push   edi
c0002074:	ba 00 7c 02 c0       	mov    edx,0xc0027c00
c0002079:	56                   	push   esi
c000207a:	31 ff                	xor    edi,edi
c000207c:	53                   	push   ebx
c000207d:	89 c3                	mov    ebx,eax
c000207f:	e8 2c fa ff ff       	call   c0001ab0 <mem_cmp>
c0002084:	85 c0                	test   eax,eax
c0002086:	75 55                	jne    c00020dd <test_gpt_header+0x70>
c0002088:	89 c7                	mov    edi,eax
c000208a:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c000208f:	83 ce ff             	or     esi,0xffffffff
c0002092:	31 d2                	xor    edx,edx
c0002094:	83 fd 03             	cmp    ebp,0x3
c0002097:	76 05                	jbe    c000209e <test_gpt_header+0x31>
c0002099:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c000209e:	89 f0                	mov    eax,esi
c00020a0:	45                   	inc    ebp
c00020a1:	e8 9a ff ff ff       	call   c0002040 <crc32>
c00020a6:	83 fd 4c             	cmp    ebp,0x4c
c00020a9:	89 c6                	mov    esi,eax
c00020ab:	75 e5                	jne    c0002092 <test_gpt_header+0x25>
c00020ad:	8d 43 10             	lea    eax,[ebx+0x10]
c00020b0:	f7 d6                	not    esi
c00020b2:	e8 67 f9 ff ff       	call   c0001a1e <ld_dword>
c00020b7:	39 c6                	cmp    esi,eax
c00020b9:	75 22                	jne    c00020dd <test_gpt_header+0x70>
c00020bb:	8d 43 54             	lea    eax,[ebx+0x54]
c00020be:	e8 5b f9 ff ff       	call   c0001a1e <ld_dword>
c00020c3:	83 c0 80             	add    eax,0xffffff80
c00020c6:	75 15                	jne    c00020dd <test_gpt_header+0x70>
c00020c8:	8d 43 50             	lea    eax,[ebx+0x50]
c00020cb:	e8 4e f9 ff ff       	call   c0001a1e <ld_dword>
c00020d0:	3d 80 00 00 00       	cmp    eax,0x80
c00020d5:	0f 96 c0             	setbe  al
c00020d8:	0f b6 c0             	movzx  eax,al
c00020db:	89 c7                	mov    edi,eax
c00020dd:	5b                   	pop    ebx
c00020de:	89 f8                	mov    eax,edi
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	5d                   	pop    ebp
c00020e3:	c3                   	ret    

c00020e4 <make_rand>:
c00020e4:	56                   	push   esi
c00020e5:	85 c0                	test   eax,eax
c00020e7:	53                   	push   ebx
c00020e8:	75 05                	jne    c00020ef <make_rand+0xb>
c00020ea:	b8 01 00 00 00       	mov    eax,0x1
c00020ef:	01 d1                	add    ecx,edx
c00020f1:	bb 08 00 00 00       	mov    ebx,0x8
c00020f6:	89 c6                	mov    esi,eax
c00020f8:	d1 e8                	shr    eax,1
c00020fa:	83 e6 01             	and    esi,0x1
c00020fd:	85 f6                	test   esi,esi
c00020ff:	74 05                	je     c0002106 <make_rand+0x22>
c0002101:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002106:	4b                   	dec    ebx
c0002107:	75 ed                	jne    c00020f6 <make_rand+0x12>
c0002109:	42                   	inc    edx
c000210a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000210d:	39 ca                	cmp    edx,ecx
c000210f:	75 e0                	jne    c00020f1 <make_rand+0xd>
c0002111:	5b                   	pop    ebx
c0002112:	5e                   	pop    esi
c0002113:	c3                   	ret    

c0002114 <validate>:
c0002114:	56                   	push   esi
c0002115:	53                   	push   ebx
c0002116:	89 d6                	mov    esi,edx
c0002118:	51                   	push   ecx
c0002119:	85 c0                	test   eax,eax
c000211b:	75 09                	jne    c0002126 <validate+0x12>
c000211d:	b8 09 00 00 00       	mov    eax,0x9
c0002122:	31 c9                	xor    ecx,ecx
c0002124:	eb 2f                	jmp    c0002155 <validate+0x41>
c0002126:	89 c3                	mov    ebx,eax
c0002128:	8b 00                	mov    eax,DWORD PTR [eax]
c000212a:	85 c0                	test   eax,eax
c000212c:	74 ef                	je     c000211d <validate+0x9>
c000212e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002131:	74 ea                	je     c000211d <validate+0x9>
c0002133:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002137:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000213b:	75 e0                	jne    c000211d <validate+0x9>
c000213d:	83 ec 0c             	sub    esp,0xc
c0002140:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002144:	50                   	push   eax
c0002145:	e8 76 f8 ff ff       	call   c00019c0 <disk_status>
c000214a:	83 c4 10             	add    esp,0x10
c000214d:	a8 01                	test   al,0x1
c000214f:	75 cc                	jne    c000211d <validate+0x9>
c0002151:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002153:	31 c0                	xor    eax,eax
c0002155:	89 0e                	mov    DWORD PTR [esi],ecx
c0002157:	5a                   	pop    edx
c0002158:	5b                   	pop    ebx
c0002159:	5e                   	pop    esi
c000215a:	c3                   	ret    

c000215b <sync_window>:
c000215b:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c000215f:	0f 84 85 00 00 00    	je     c00021ea <sync_window+0x8f>
c0002165:	55                   	push   ebp
c0002166:	8d 68 54             	lea    ebp,[eax+0x54]
c0002169:	57                   	push   edi
c000216a:	56                   	push   esi
c000216b:	53                   	push   ebx
c000216c:	89 c3                	mov    ebx,eax
c000216e:	83 ec 28             	sub    esp,0x28
c0002171:	6a 01                	push   0x1
c0002173:	ff 70 50             	push   DWORD PTR [eax+0x50]
c0002176:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c0002179:	55                   	push   ebp
c000217a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000217e:	50                   	push   eax
c000217f:	e8 58 f8 ff ff       	call   c00019dc <disk_write>
c0002184:	83 c4 20             	add    esp,0x20
c0002187:	ba 01 00 00 00       	mov    edx,0x1
c000218c:	85 c0                	test   eax,eax
c000218e:	75 50                	jne    c00021e0 <sync_window+0x85>
c0002190:	31 ff                	xor    edi,edi
c0002192:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0002195:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0002199:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000219d:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00021a0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00021a3:	89 c6                	mov    esi,eax
c00021a5:	89 d7                	mov    edi,edx
c00021a7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00021aa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00021ae:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021b1:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00021b5:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00021b9:	73 23                	jae    c00021de <sync_window+0x83>
c00021bb:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00021bf:	75 1d                	jne    c00021de <sync_window+0x83>
c00021c1:	83 ec 0c             	sub    esp,0xc
c00021c4:	6a 01                	push   0x1
c00021c6:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00021ca:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00021ce:	52                   	push   edx
c00021cf:	50                   	push   eax
c00021d0:	55                   	push   ebp
c00021d1:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00021d5:	50                   	push   eax
c00021d6:	e8 01 f8 ff ff       	call   c00019dc <disk_write>
c00021db:	83 c4 20             	add    esp,0x20
c00021de:	31 d2                	xor    edx,edx
c00021e0:	83 c4 1c             	add    esp,0x1c
c00021e3:	89 d0                	mov    eax,edx
c00021e5:	5b                   	pop    ebx
c00021e6:	5e                   	pop    esi
c00021e7:	5f                   	pop    edi
c00021e8:	5d                   	pop    ebp
c00021e9:	c3                   	ret    
c00021ea:	31 d2                	xor    edx,edx
c00021ec:	89 d0                	mov    eax,edx
c00021ee:	c3                   	ret    

c00021ef <move_window>:
c00021ef:	56                   	push   esi
c00021f0:	53                   	push   ebx
c00021f1:	89 c3                	mov    ebx,eax
c00021f3:	83 ec 14             	sub    esp,0x14
c00021f6:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c00021f9:	75 07                	jne    c0002202 <move_window+0x13>
c00021fb:	31 f6                	xor    esi,esi
c00021fd:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002200:	74 59                	je     c000225b <move_window+0x6c>
c0002202:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002206:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000220a:	89 d8                	mov    eax,ebx
c000220c:	e8 4a ff ff ff       	call   c000215b <sync_window>
c0002211:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002215:	89 c6                	mov    esi,eax
c0002217:	85 c0                	test   eax,eax
c0002219:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000221d:	75 3c                	jne    c000225b <move_window+0x6c>
c000221f:	83 ec 0c             	sub    esp,0xc
c0002222:	8d 43 54             	lea    eax,[ebx+0x54]
c0002225:	6a 01                	push   0x1
c0002227:	51                   	push   ecx
c0002228:	52                   	push   edx
c0002229:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000222d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002231:	50                   	push   eax
c0002232:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002236:	50                   	push   eax
c0002237:	e8 8a f7 ff ff       	call   c00019c6 <disk_read>
c000223c:	83 c4 20             	add    esp,0x20
c000223f:	85 c0                	test   eax,eax
c0002241:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002245:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002249:	74 0a                	je     c0002255 <move_window+0x66>
c000224b:	83 ca ff             	or     edx,0xffffffff
c000224e:	be 01 00 00 00       	mov    esi,0x1
c0002253:	89 d1                	mov    ecx,edx
c0002255:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c0002258:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c000225b:	89 f0                	mov    eax,esi
c000225d:	83 c4 14             	add    esp,0x14
c0002260:	5b                   	pop    ebx
c0002261:	5e                   	pop    esi
c0002262:	c3                   	ret    

c0002263 <check_fs>:
c0002263:	53                   	push   ebx
c0002264:	89 c3                	mov    ebx,eax
c0002266:	83 ec 08             	sub    esp,0x8
c0002269:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000226d:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c0002274:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c000227b:	e8 6f ff ff ff       	call   c00021ef <move_window>
c0002280:	ba 04 00 00 00       	mov    edx,0x4
c0002285:	85 c0                	test   eax,eax
c0002287:	0f 85 89 00 00 00    	jne    c0002316 <check_fs+0xb3>
c000228d:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0002293:	e8 79 f7 ff ff       	call   c0001a11 <ld_word>
c0002298:	ba 03 00 00 00       	mov    edx,0x3
c000229d:	66 3d 55 aa          	cmp    ax,0xaa55
c00022a1:	75 73                	jne    c0002316 <check_fs+0xb3>
c00022a3:	ba 20 7d 02 c0       	mov    edx,0xc0027d20
c00022a8:	8d 43 54             	lea    eax,[ebx+0x54]
c00022ab:	b9 0b 00 00 00       	mov    ecx,0xb
c00022b0:	e8 fb f7 ff ff       	call   c0001ab0 <mem_cmp>
c00022b5:	ba 01 00 00 00       	mov    edx,0x1
c00022ba:	85 c0                	test   eax,eax
c00022bc:	74 58                	je     c0002316 <check_fs+0xb3>
c00022be:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00022c1:	8d 50 18             	lea    edx,[eax+0x18]
c00022c4:	80 fa 01             	cmp    dl,0x1
c00022c7:	76 09                	jbe    c00022d2 <check_fs+0x6f>
c00022c9:	ba 02 00 00 00       	mov    edx,0x2
c00022ce:	3c eb                	cmp    al,0xeb
c00022d0:	75 44                	jne    c0002316 <check_fs+0xb3>
c00022d2:	ba b0 ac 02 c0       	mov    edx,0xc002acb0
c00022d7:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00022dd:	b9 03 00 00 00       	mov    ecx,0x3
c00022e2:	e8 c9 f7 ff ff       	call   c0001ab0 <mem_cmp>
c00022e7:	31 d2                	xor    edx,edx
c00022e9:	85 c0                	test   eax,eax
c00022eb:	74 29                	je     c0002316 <check_fs+0xb3>
c00022ed:	ba 2c 7d 02 c0       	mov    edx,0xc0027d2c
c00022f2:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c00022f8:	b9 05 00 00 00       	mov    ecx,0x5
c00022fd:	e8 ae f7 ff ff       	call   c0001ab0 <mem_cmp>
c0002302:	31 d2                	xor    edx,edx
c0002304:	85 c0                	test   eax,eax
c0002306:	74 0e                	je     c0002316 <check_fs+0xb3>
c0002308:	31 d2                	xor    edx,edx
c000230a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002311:	0f 95 c2             	setne  dl
c0002314:	01 d2                	add    edx,edx
c0002316:	89 d0                	mov    eax,edx
c0002318:	83 c4 08             	add    esp,0x8
c000231b:	5b                   	pop    ebx
c000231c:	c3                   	ret    

c000231d <find_volume>:
c000231d:	55                   	push   ebp
c000231e:	31 c9                	xor    ecx,ecx
c0002320:	57                   	push   edi
c0002321:	56                   	push   esi
c0002322:	89 d6                	mov    esi,edx
c0002324:	53                   	push   ebx
c0002325:	31 d2                	xor    edx,edx
c0002327:	83 ec 3c             	sub    esp,0x3c
c000232a:	89 c3                	mov    ebx,eax
c000232c:	e8 32 ff ff ff       	call   c0002263 <check_fs>
c0002331:	83 f8 02             	cmp    eax,0x2
c0002334:	74 0e                	je     c0002344 <find_volume+0x27>
c0002336:	0f 87 5d 01 00 00    	ja     c0002499 <find_volume+0x17c>
c000233c:	85 f6                	test   esi,esi
c000233e:	0f 84 55 01 00 00    	je     c0002499 <find_volume+0x17c>
c0002344:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000234b:	0f 85 dd 00 00 00    	jne    c000242e <find_volume+0x111>
c0002351:	31 c9                	xor    ecx,ecx
c0002353:	ba 01 00 00 00       	mov    edx,0x1
c0002358:	89 d8                	mov    eax,ebx
c000235a:	e8 90 fe ff ff       	call   c00021ef <move_window>
c000235f:	85 c0                	test   eax,eax
c0002361:	74 0a                	je     c000236d <find_volume+0x50>
c0002363:	b8 04 00 00 00       	mov    eax,0x4
c0002368:	e9 2c 01 00 00       	jmp    c0002499 <find_volume+0x17c>
c000236d:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002370:	89 e8                	mov    eax,ebp
c0002372:	e8 f6 fc ff ff       	call   c000206d <test_gpt_header>
c0002377:	85 c0                	test   eax,eax
c0002379:	75 0a                	jne    c0002385 <find_volume+0x68>
c000237b:	b8 03 00 00 00       	mov    eax,0x3
c0002380:	e9 14 01 00 00       	jmp    c0002499 <find_volume+0x17c>
c0002385:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c000238b:	e8 8e f6 ff ff       	call   c0001a1e <ld_dword>
c0002390:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002394:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c000239a:	e8 97 f6 ff ff       	call   c0001a36 <ld_qword>
c000239f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00023a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00023ab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00023af:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00023b7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00023bb:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00023bf:	74 ba                	je     c000237b <find_volume+0x5e>
c00023c1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00023c5:	31 c9                	xor    ecx,ecx
c00023c7:	c1 e7 07             	shl    edi,0x7
c00023ca:	89 d8                	mov    eax,ebx
c00023cc:	89 fa                	mov    edx,edi
c00023ce:	c1 ea 09             	shr    edx,0x9
c00023d1:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00023d5:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00023d9:	e8 11 fe ff ff       	call   c00021ef <move_window>
c00023de:	85 c0                	test   eax,eax
c00023e0:	75 81                	jne    c0002363 <find_volume+0x46>
c00023e2:	81 e7 80 01 00 00    	and    edi,0x180
c00023e8:	b9 10 00 00 00       	mov    ecx,0x10
c00023ed:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c00023f1:	ba 10 7d 02 c0       	mov    edx,0xc0027d10
c00023f6:	e8 b5 f6 ff ff       	call   c0001ab0 <mem_cmp>
c00023fb:	85 c0                	test   eax,eax
c00023fd:	75 29                	jne    c0002428 <find_volume+0x10b>
c00023ff:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002403:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002407:	e8 2a f6 ff ff       	call   c0001a36 <ld_qword>
c000240c:	89 d1                	mov    ecx,edx
c000240e:	89 c2                	mov    edx,eax
c0002410:	89 d8                	mov    eax,ebx
c0002412:	e8 4c fe ff ff       	call   c0002263 <check_fs>
c0002417:	85 f6                	test   esi,esi
c0002419:	75 07                	jne    c0002422 <find_volume+0x105>
c000241b:	83 f8 01             	cmp    eax,0x1
c000241e:	77 08                	ja     c0002428 <find_volume+0x10b>
c0002420:	eb 77                	jmp    c0002499 <find_volume+0x17c>
c0002422:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002426:	74 71                	je     c0002499 <find_volume+0x17c>
c0002428:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000242c:	eb 89                	jmp    c00023b7 <find_volume+0x9a>
c000242e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002432:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002438:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000243e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002442:	89 cd                	mov    ebp,ecx
c0002444:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002448:	89 f8                	mov    eax,edi
c000244a:	83 c7 10             	add    edi,0x10
c000244d:	e8 cc f5 ff ff       	call   c0001a1e <ld_dword>
c0002452:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002456:	89 01                	mov    DWORD PTR [ecx],eax
c0002458:	83 c1 04             	add    ecx,0x4
c000245b:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000245f:	75 e3                	jne    c0002444 <find_volume+0x127>
c0002461:	31 ff                	xor    edi,edi
c0002463:	85 f6                	test   esi,esi
c0002465:	74 03                	je     c000246a <find_volume+0x14d>
c0002467:	8d 7e ff             	lea    edi,[esi-0x1]
c000246a:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c000246e:	85 d2                	test   edx,edx
c0002470:	74 14                	je     c0002486 <find_volume+0x169>
c0002472:	31 c9                	xor    ecx,ecx
c0002474:	89 d8                	mov    eax,ebx
c0002476:	e8 e8 fd ff ff       	call   c0002263 <check_fs>
c000247b:	83 f8 01             	cmp    eax,0x1
c000247e:	76 19                	jbe    c0002499 <find_volume+0x17c>
c0002480:	85 f6                	test   esi,esi
c0002482:	74 0f                	je     c0002493 <find_volume+0x176>
c0002484:	eb 13                	jmp    c0002499 <find_volume+0x17c>
c0002486:	85 f6                	test   esi,esi
c0002488:	0f 85 ed fe ff ff    	jne    c000237b <find_volume+0x5e>
c000248e:	b8 03 00 00 00       	mov    eax,0x3
c0002493:	47                   	inc    edi
c0002494:	83 ff 03             	cmp    edi,0x3
c0002497:	76 d1                	jbe    c000246a <find_volume+0x14d>
c0002499:	83 c4 3c             	add    esp,0x3c
c000249c:	5b                   	pop    ebx
c000249d:	5e                   	pop    esi
c000249e:	5f                   	pop    edi
c000249f:	5d                   	pop    ebp
c00024a0:	c3                   	ret    

c00024a1 <mount_volume>:
c00024a1:	55                   	push   ebp
c00024a2:	57                   	push   edi
c00024a3:	89 cf                	mov    edi,ecx
c00024a5:	56                   	push   esi
c00024a6:	53                   	push   ebx
c00024a7:	bb 0b 00 00 00       	mov    ebx,0xb
c00024ac:	83 ec 3c             	sub    esp,0x3c
c00024af:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024b5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024b9:	e8 35 fb ff ff       	call   c0001ff3 <get_ldnumber>
c00024be:	85 c0                	test   eax,eax
c00024c0:	0f 88 3a 05 00 00    	js     c0002a00 <mount_volume+0x55f>
c00024c6:	8b 2c 85 e0 c7 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd3820]
c00024cd:	89 c6                	mov    esi,eax
c00024cf:	bb 0c 00 00 00       	mov    ebx,0xc
c00024d4:	85 ed                	test   ebp,ebp
c00024d6:	0f 84 24 05 00 00    	je     c0002a00 <mount_volume+0x55f>
c00024dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00024e0:	83 e7 fe             	and    edi,0xfffffffe
c00024e3:	89 2a                	mov    DWORD PTR [edx],ebp
c00024e5:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00024e9:	74 32                	je     c000251d <mount_volume+0x7c>
c00024eb:	83 ec 0c             	sub    esp,0xc
c00024ee:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00024f2:	50                   	push   eax
c00024f3:	e8 c8 f4 ff ff       	call   c00019c0 <disk_status>
c00024f8:	83 c4 10             	add    esp,0x10
c00024fb:	a8 01                	test   al,0x1
c00024fd:	75 1e                	jne    c000251d <mount_volume+0x7c>
c00024ff:	31 db                	xor    ebx,ebx
c0002501:	89 f9                	mov    ecx,edi
c0002503:	84 c9                	test   cl,cl
c0002505:	0f 84 f5 04 00 00    	je     c0002a00 <mount_volume+0x55f>
c000250b:	a8 04                	test   al,0x4
c000250d:	0f 84 ed 04 00 00    	je     c0002a00 <mount_volume+0x55f>
c0002513:	bb 0a 00 00 00       	mov    ebx,0xa
c0002518:	e9 e3 04 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c000251d:	83 ec 0c             	sub    esp,0xc
c0002520:	89 f0                	mov    eax,esi
c0002522:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002526:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002529:	0f b6 f0             	movzx  esi,al
c000252c:	bb 03 00 00 00       	mov    ebx,0x3
c0002531:	56                   	push   esi
c0002532:	e8 8c f4 ff ff       	call   c00019c3 <disk_initialize>
c0002537:	83 c4 10             	add    esp,0x10
c000253a:	a8 01                	test   al,0x1
c000253c:	0f 85 be 04 00 00    	jne    c0002a00 <mount_volume+0x55f>
c0002542:	89 f9                	mov    ecx,edi
c0002544:	84 c9                	test   cl,cl
c0002546:	74 04                	je     c000254c <mount_volume+0xab>
c0002548:	a8 04                	test   al,0x4
c000254a:	75 c7                	jne    c0002513 <mount_volume+0x72>
c000254c:	31 d2                	xor    edx,edx
c000254e:	89 e8                	mov    eax,ebp
c0002550:	e8 c8 fd ff ff       	call   c000231d <find_volume>
c0002555:	83 f8 04             	cmp    eax,0x4
c0002558:	75 0a                	jne    c0002564 <mount_volume+0xc3>
c000255a:	bb 01 00 00 00       	mov    ebx,0x1
c000255f:	e9 9c 04 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c0002564:	83 f8 01             	cmp    eax,0x1
c0002567:	76 0a                	jbe    c0002573 <mount_volume+0xd2>
c0002569:	bb 0d 00 00 00       	mov    ebx,0xd
c000256e:	e9 8d 04 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c0002573:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c0002576:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c0002579:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000257d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002581:	75 17                	jne    c000259a <mount_volume+0xf9>
c0002583:	b8 0b 00 00 00       	mov    eax,0xb
c0002588:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c000258d:	75 da                	jne    c0002569 <mount_volume+0xc8>
c000258f:	40                   	inc    eax
c0002590:	83 f8 40             	cmp    eax,0x40
c0002593:	75 f3                	jne    c0002588 <mount_volume+0xe7>
c0002595:	e9 5a 02 00 00       	jmp    c00027f4 <mount_volume+0x353>
c000259a:	8d 45 5f             	lea    eax,[ebp+0x5f]
c000259d:	e8 6f f4 ff ff       	call   c0001a11 <ld_word>
c00025a2:	66 3d 00 02          	cmp    ax,0x200
c00025a6:	75 c1                	jne    c0002569 <mount_volume+0xc8>
c00025a8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00025ab:	e8 61 f4 ff ff       	call   c0001a11 <ld_word>
c00025b0:	0f b7 c0             	movzx  eax,ax
c00025b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025b7:	85 c0                	test   eax,eax
c00025b9:	75 0c                	jne    c00025c7 <mount_volume+0x126>
c00025bb:	8d 45 78             	lea    eax,[ebp+0x78]
c00025be:	e8 5b f4 ff ff       	call   c0001a1e <ld_dword>
c00025c3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00025cb:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00025ce:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00025d1:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00025d5:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00025d8:	48                   	dec    eax
c00025d9:	3c 01                	cmp    al,0x1
c00025db:	77 8c                	ja     c0002569 <mount_volume+0xc8>
c00025dd:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00025e1:	89 c3                	mov    ebx,eax
c00025e3:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00025e7:	66 85 c0             	test   ax,ax
c00025ea:	0f 84 79 ff ff ff    	je     c0002569 <mount_volume+0xc8>
c00025f0:	8d 40 ff             	lea    eax,[eax-0x1]
c00025f3:	85 d8                	test   eax,ebx
c00025f5:	0f 85 6e ff ff ff    	jne    c0002569 <mount_volume+0xc8>
c00025fb:	8d 45 65             	lea    eax,[ebp+0x65]
c00025fe:	e8 0e f4 ff ff       	call   c0001a11 <ld_word>
c0002603:	89 c7                	mov    edi,eax
c0002605:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002609:	a8 0f                	test   al,0xf
c000260b:	0f 85 58 ff ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002611:	8d 45 67             	lea    eax,[ebp+0x67]
c0002614:	e8 f8 f3 ff ff       	call   c0001a11 <ld_word>
c0002619:	0f b7 f0             	movzx  esi,ax
c000261c:	85 f6                	test   esi,esi
c000261e:	75 0a                	jne    c000262a <mount_volume+0x189>
c0002620:	8d 45 74             	lea    eax,[ebp+0x74]
c0002623:	e8 f6 f3 ff ff       	call   c0001a1e <ld_dword>
c0002628:	89 c6                	mov    esi,eax
c000262a:	8d 45 62             	lea    eax,[ebp+0x62]
c000262d:	e8 df f3 ff ff       	call   c0001a11 <ld_word>
c0002632:	66 85 c0             	test   ax,ax
c0002635:	0f 84 2e ff ff ff    	je     c0002569 <mount_volume+0xc8>
c000263b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002640:	0f b7 c8             	movzx  ecx,ax
c0002643:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002648:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000264c:	89 fa                	mov    edx,edi
c000264e:	66 c1 ea 04          	shr    dx,0x4
c0002652:	0f b7 d2             	movzx  edx,dx
c0002655:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c0002659:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000265c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002660:	39 c6                	cmp    esi,eax
c0002662:	0f 82 01 ff ff ff    	jb     c0002569 <mount_volume+0xc8>
c0002668:	29 c6                	sub    esi,eax
c000266a:	31 d2                	xor    edx,edx
c000266c:	89 f0                	mov    eax,esi
c000266e:	f7 f3                	div    ebx
c0002670:	39 de                	cmp    esi,ebx
c0002672:	0f 82 f1 fe ff ff    	jb     c0002569 <mount_volume+0xc8>
c0002678:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000267d:	0f 87 e6 fe ff ff    	ja     c0002569 <mount_volume+0xc8>
c0002683:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002688:	0f 86 63 03 00 00    	jbe    c00029f1 <mount_volume+0x550>
c000268e:	bb 03 00 00 00       	mov    ebx,0x3
c0002693:	8d 70 02             	lea    esi,[eax+0x2]
c0002696:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000269a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000269e:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00026a1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00026a4:	31 d2                	xor    edx,edx
c00026a6:	89 c8                	mov    eax,ecx
c00026a8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00026ab:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026af:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026b3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026b7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00026bb:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00026be:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00026c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00026c5:	31 d2                	xor    edx,edx
c00026c7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026cb:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026cf:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00026d2:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00026d5:	83 fb 03             	cmp    ebx,0x3
c00026d8:	75 2b                	jne    c0002705 <mount_volume+0x264>
c00026da:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00026dd:	e8 2f f3 ff ff       	call   c0001a11 <ld_word>
c00026e2:	66 09 c7             	or     di,ax
c00026e5:	0f 85 7e fe ff ff    	jne    c0002569 <mount_volume+0xc8>
c00026eb:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c00026f1:	c1 e6 02             	shl    esi,0x2
c00026f4:	e8 25 f3 ff ff       	call   c0001a1e <ld_dword>
c00026f9:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002700:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002703:	eb 30                	jmp    c0002735 <mount_volume+0x294>
c0002705:	66 85 ff             	test   di,di
c0002708:	0f 84 5b fe ff ff    	je     c0002569 <mount_volume+0xc8>
c000270e:	31 d2                	xor    edx,edx
c0002710:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002714:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002718:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000271c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000271f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002722:	83 fb 02             	cmp    ebx,0x2
c0002725:	75 04                	jne    c000272b <mount_volume+0x28a>
c0002727:	01 f6                	add    esi,esi
c0002729:	eb 0a                	jmp    c0002735 <mount_volume+0x294>
c000272b:	8d 04 76             	lea    eax,[esi+esi*2]
c000272e:	83 e6 01             	and    esi,0x1
c0002731:	d1 e8                	shr    eax,1
c0002733:	01 c6                	add    esi,eax
c0002735:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000273b:	c1 ee 09             	shr    esi,0x9
c000273e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002742:	0f 87 21 fe ff ff    	ja     c0002569 <mount_volume+0xc8>
c0002748:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000274f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002756:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c000275a:	83 fb 03             	cmp    ebx,0x3
c000275d:	75 7a                	jne    c00027d9 <mount_volume+0x338>
c000275f:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c0002765:	e8 a7 f2 ff ff       	call   c0001a11 <ld_word>
c000276a:	66 48                	dec    ax
c000276c:	75 6b                	jne    c00027d9 <mount_volume+0x338>
c000276e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002772:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002776:	83 c2 01             	add    edx,0x1
c0002779:	89 e8                	mov    eax,ebp
c000277b:	83 d1 00             	adc    ecx,0x0
c000277e:	e8 6c fa ff ff       	call   c00021ef <move_window>
c0002783:	85 c0                	test   eax,eax
c0002785:	75 52                	jne    c00027d9 <mount_volume+0x338>
c0002787:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c000278b:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c0002791:	e8 7b f2 ff ff       	call   c0001a11 <ld_word>
c0002796:	66 3d 55 aa          	cmp    ax,0xaa55
c000279a:	75 3d                	jne    c00027d9 <mount_volume+0x338>
c000279c:	8d 45 54             	lea    eax,[ebp+0x54]
c000279f:	e8 7a f2 ff ff       	call   c0001a1e <ld_dword>
c00027a4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00027a9:	75 2e                	jne    c00027d9 <mount_volume+0x338>
c00027ab:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027b1:	e8 68 f2 ff ff       	call   c0001a1e <ld_dword>
c00027b6:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027bb:	75 1c                	jne    c00027d9 <mount_volume+0x338>
c00027bd:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00027c3:	e8 56 f2 ff ff       	call   c0001a1e <ld_dword>
c00027c8:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00027cb:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00027d1:	e8 48 f2 ff ff       	call   c0001a1e <ld_dword>
c00027d6:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00027d9:	66 a1 c0 c7 02 c0    	mov    ax,ds:0xc002c7c0
c00027df:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00027e2:	40                   	inc    eax
c00027e3:	31 db                	xor    ebx,ebx
c00027e5:	66 a3 c0 c7 02 c0    	mov    ds:0xc002c7c0,ax
c00027eb:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c00027ef:	e9 0c 02 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c00027f4:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c00027fa:	e8 12 f2 ff ff       	call   c0001a11 <ld_word>
c00027ff:	66 3d 00 01          	cmp    ax,0x100
c0002803:	0f 85 60 fd ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002809:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002810:	0f 85 53 fd ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002816:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c000281c:	e8 15 f2 ff ff       	call   c0001a36 <ld_qword>
c0002821:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002825:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002829:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c000282f:	e8 ea f1 ff ff       	call   c0001a1e <ld_dword>
c0002834:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002837:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c000283d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002840:	fe c8                	dec    al
c0002842:	0f 85 21 fd ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002848:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c000284f:	bb 01 00 00 00       	mov    ebx,0x1
c0002854:	d3 e3                	shl    ebx,cl
c0002856:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c000285a:	66 85 db             	test   bx,bx
c000285d:	0f 84 06 fd ff ff    	je     c0002569 <mount_volume+0xc8>
c0002863:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002869:	e8 b0 f1 ff ff       	call   c0001a1e <ld_dword>
c000286e:	89 c6                	mov    esi,eax
c0002870:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002875:	0f 87 ee fc ff ff    	ja     c0002569 <mount_volume+0xc8>
c000287b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000287f:	8d 40 02             	lea    eax,[eax+0x2]
c0002882:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002885:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002888:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000288c:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000288f:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002895:	e8 84 f1 ff ff       	call   c0001a1e <ld_dword>
c000289a:	31 d2                	xor    edx,edx
c000289c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028a0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00028a8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00028ac:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028af:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028b2:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00028b8:	e8 61 f1 ff ff       	call   c0001a1e <ld_dword>
c00028bd:	31 d2                	xor    edx,edx
c00028bf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00028c3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028cb:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028ce:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d1:	0f b7 c3             	movzx  eax,bx
c00028d4:	31 d2                	xor    edx,edx
c00028d6:	0f af f0             	imul   esi,eax
c00028d9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00028dd:	89 f0                	mov    eax,esi
c00028df:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00028e3:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c00028e7:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00028eb:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c00028ef:	39 c1                	cmp    ecx,eax
c00028f1:	89 df                	mov    edi,ebx
c00028f3:	19 d7                	sbb    edi,edx
c00028f5:	0f 82 6e fc ff ff    	jb     c0002569 <mount_volume+0xc8>
c00028fb:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002901:	31 db                	xor    ebx,ebx
c0002903:	e8 16 f1 ff ff       	call   c0001a1e <ld_dword>
c0002908:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000290f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002912:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000291a:	85 db                	test   ebx,ebx
c000291c:	75 39                	jne    c0002957 <mount_volume+0x4b6>
c000291e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002922:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002926:	0f 86 3d fc ff ff    	jbe    c0002569 <mount_volume+0xc8>
c000292c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c000292f:	31 ff                	xor    edi,edi
c0002931:	89 e8                	mov    eax,ebp
c0002933:	e8 72 f3 ff ff       	call   c0001caa <clst2sect>
c0002938:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000293c:	01 c6                	add    esi,eax
c000293e:	89 e8                	mov    eax,ebp
c0002940:	11 d7                	adc    edi,edx
c0002942:	89 f2                	mov    edx,esi
c0002944:	89 f9                	mov    ecx,edi
c0002946:	e8 a4 f8 ff ff       	call   c00021ef <move_window>
c000294b:	85 c0                	test   eax,eax
c000294d:	0f 85 07 fc ff ff    	jne    c000255a <mount_volume+0xb9>
c0002953:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002957:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c000295c:	74 0b                	je     c0002969 <mount_volume+0x4c8>
c000295e:	83 c3 20             	add    ebx,0x20
c0002961:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002967:	eb b1                	jmp    c000291a <mount_volume+0x479>
c0002969:	8d 75 54             	lea    esi,[ebp+0x54]
c000296c:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002970:	e8 a9 f0 ff ff       	call   c0001a1e <ld_dword>
c0002975:	89 c3                	mov    ebx,eax
c0002977:	83 f8 01             	cmp    eax,0x1
c000297a:	0f 86 e9 fb ff ff    	jbe    c0002569 <mount_volume+0xc8>
c0002980:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002983:	0f 86 e0 fb ff ff    	jbe    c0002569 <mount_volume+0xc8>
c0002989:	8d 53 fe             	lea    edx,[ebx-0x2]
c000298c:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002990:	0f af c2             	imul   eax,edx
c0002993:	31 d2                	xor    edx,edx
c0002995:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002998:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c000299b:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c000299e:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c00029a1:	31 c9                	xor    ecx,ecx
c00029a3:	89 da                	mov    edx,ebx
c00029a5:	89 e8                	mov    eax,ebp
c00029a7:	c1 ea 07             	shr    edx,0x7
c00029aa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c00029ad:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029b0:	e8 3a f8 ff ff       	call   c00021ef <move_window>
c00029b5:	85 c0                	test   eax,eax
c00029b7:	0f 85 9d fb ff ff    	jne    c000255a <mount_volume+0xb9>
c00029bd:	89 d8                	mov    eax,ebx
c00029bf:	83 e0 7f             	and    eax,0x7f
c00029c2:	8d 04 86             	lea    eax,[esi+eax*4]
c00029c5:	e8 54 f0 ff ff       	call   c0001a1e <ld_dword>
c00029ca:	83 f8 ff             	cmp    eax,0xffffffff
c00029cd:	74 0a                	je     c00029d9 <mount_volume+0x538>
c00029cf:	43                   	inc    ebx
c00029d0:	39 d8                	cmp    eax,ebx
c00029d2:	74 cd                	je     c00029a1 <mount_volume+0x500>
c00029d4:	e9 90 fb ff ff       	jmp    c0002569 <mount_volume+0xc8>
c00029d9:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00029e0:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029e7:	bb 04 00 00 00       	mov    ebx,0x4
c00029ec:	e9 e8 fd ff ff       	jmp    c00027d9 <mount_volume+0x338>
c00029f1:	3d f6 0f 00 00       	cmp    eax,0xff6
c00029f6:	19 db                	sbb    ebx,ebx
c00029f8:	83 c3 02             	add    ebx,0x2
c00029fb:	e9 93 fc ff ff       	jmp    c0002693 <mount_volume+0x1f2>
c0002a00:	83 c4 3c             	add    esp,0x3c
c0002a03:	89 d8                	mov    eax,ebx
c0002a05:	5b                   	pop    ebx
c0002a06:	5e                   	pop    esi
c0002a07:	5f                   	pop    edi
c0002a08:	5d                   	pop    ebp
c0002a09:	c3                   	ret    

c0002a0a <find_bitmap>:
c0002a0a:	55                   	push   ebp
c0002a0b:	57                   	push   edi
c0002a0c:	89 c7                	mov    edi,eax
c0002a0e:	56                   	push   esi
c0002a0f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a12:	53                   	push   ebx
c0002a13:	83 ec 1c             	sub    esp,0x1c
c0002a16:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a19:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a1d:	83 e8 02             	sub    eax,0x2
c0002a20:	39 f0                	cmp    eax,esi
c0002a22:	77 02                	ja     c0002a26 <find_bitmap+0x1c>
c0002a24:	31 f6                	xor    esi,esi
c0002a26:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a2a:	89 f3                	mov    ebx,esi
c0002a2c:	31 ed                	xor    ebp,ebp
c0002a2e:	31 c9                	xor    ecx,ecx
c0002a30:	89 da                	mov    edx,ebx
c0002a32:	89 f8                	mov    eax,edi
c0002a34:	c1 ea 0c             	shr    edx,0xc
c0002a37:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a3a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a3d:	e8 ad f7 ff ff       	call   c00021ef <move_window>
c0002a42:	85 c0                	test   eax,eax
c0002a44:	75 68                	jne    c0002aae <find_bitmap+0xa4>
c0002a46:	89 da                	mov    edx,ebx
c0002a48:	89 d9                	mov    ecx,ebx
c0002a4a:	c1 ea 03             	shr    edx,0x3
c0002a4d:	83 e1 07             	and    ecx,0x7
c0002a50:	b8 01 00 00 00       	mov    eax,0x1
c0002a55:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002a5b:	d3 e0                	shl    eax,cl
c0002a5d:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002a60:	83 e9 02             	sub    ecx,0x2
c0002a63:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a67:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002a6b:	43                   	inc    ebx
c0002a6c:	21 c1                	and    ecx,eax
c0002a6e:	d1 e0                	shl    eax,1
c0002a70:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002a74:	77 09                	ja     c0002a7f <find_bitmap+0x75>
c0002a76:	31 db                	xor    ebx,ebx
c0002a78:	ba 00 02 00 00       	mov    edx,0x200
c0002a7d:	31 c0                	xor    eax,eax
c0002a7f:	84 c9                	test   cl,cl
c0002a81:	75 10                	jne    c0002a93 <find_bitmap+0x89>
c0002a83:	45                   	inc    ebp
c0002a84:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002a88:	75 0f                	jne    c0002a99 <find_bitmap+0x8f>
c0002a8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a8e:	83 c0 02             	add    eax,0x2
c0002a91:	eb 22                	jmp    c0002ab5 <find_bitmap+0xab>
c0002a93:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002a97:	31 ed                	xor    ebp,ebp
c0002a99:	39 de                	cmp    esi,ebx
c0002a9b:	74 16                	je     c0002ab3 <find_bitmap+0xa9>
c0002a9d:	84 c0                	test   al,al
c0002a9f:	75 c6                	jne    c0002a67 <find_bitmap+0x5d>
c0002aa1:	42                   	inc    edx
c0002aa2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002aa8:	77 84                	ja     c0002a2e <find_bitmap+0x24>
c0002aaa:	b0 01                	mov    al,0x1
c0002aac:	eb b9                	jmp    c0002a67 <find_bitmap+0x5d>
c0002aae:	83 c8 ff             	or     eax,0xffffffff
c0002ab1:	eb 02                	jmp    c0002ab5 <find_bitmap+0xab>
c0002ab3:	31 c0                	xor    eax,eax
c0002ab5:	83 c4 1c             	add    esp,0x1c
c0002ab8:	5b                   	pop    ebx
c0002ab9:	5e                   	pop    esi
c0002aba:	5f                   	pop    edi
c0002abb:	5d                   	pop    ebp
c0002abc:	c3                   	ret    

c0002abd <change_bitmap>:
c0002abd:	55                   	push   ebp
c0002abe:	89 cd                	mov    ebp,ecx
c0002ac0:	57                   	push   edi
c0002ac1:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002ac4:	56                   	push   esi
c0002ac5:	89 c7                	mov    edi,eax
c0002ac7:	53                   	push   ebx
c0002ac8:	89 c8                	mov    eax,ecx
c0002aca:	83 ec 1c             	sub    esp,0x1c
c0002acd:	31 d2                	xor    edx,edx
c0002acf:	89 ce                	mov    esi,ecx
c0002ad1:	c1 e8 0c             	shr    eax,0xc
c0002ad4:	bb 01 00 00 00       	mov    ebx,0x1
c0002ad9:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002adc:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002adf:	c1 ee 03             	shr    esi,0x3
c0002ae2:	83 e1 07             	and    ecx,0x7
c0002ae5:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002aeb:	d3 e3                	shl    ebx,cl
c0002aed:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002af1:	89 c1                	mov    ecx,eax
c0002af3:	89 d3                	mov    ebx,edx
c0002af5:	83 c1 01             	add    ecx,0x1
c0002af8:	83 d3 00             	adc    ebx,0x0
c0002afb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002aff:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002b03:	89 d1                	mov    ecx,edx
c0002b05:	89 c2                	mov    edx,eax
c0002b07:	89 f8                	mov    eax,edi
c0002b09:	e8 e1 f6 ff ff       	call   c00021ef <move_window>
c0002b0e:	89 c1                	mov    ecx,eax
c0002b10:	85 c0                	test   eax,eax
c0002b12:	75 48                	jne    c0002b5c <change_bitmap+0x9f>
c0002b14:	31 d2                	xor    edx,edx
c0002b16:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b1a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b1e:	0f 95 c2             	setne  dl
c0002b21:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b25:	74 3c                	je     c0002b63 <change_bitmap+0xa6>
c0002b27:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b2b:	4d                   	dec    ebp
c0002b2c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b30:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b34:	74 32                	je     c0002b68 <change_bitmap+0xab>
c0002b36:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b3a:	75 d8                	jne    c0002b14 <change_bitmap+0x57>
c0002b3c:	8d 46 01             	lea    eax,[esi+0x1]
c0002b3f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b44:	89 c3                	mov    ebx,eax
c0002b46:	31 f6                	xor    esi,esi
c0002b48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b4c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b50:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b56:	74 99                	je     c0002af1 <change_bitmap+0x34>
c0002b58:	89 de                	mov    esi,ebx
c0002b5a:	eb b8                	jmp    c0002b14 <change_bitmap+0x57>
c0002b5c:	b9 01 00 00 00       	mov    ecx,0x1
c0002b61:	eb 05                	jmp    c0002b68 <change_bitmap+0xab>
c0002b63:	b9 02 00 00 00       	mov    ecx,0x2
c0002b68:	83 c4 1c             	add    esp,0x1c
c0002b6b:	89 c8                	mov    eax,ecx
c0002b6d:	5b                   	pop    ebx
c0002b6e:	5e                   	pop    esi
c0002b6f:	5f                   	pop    edi
c0002b70:	5d                   	pop    ebp
c0002b71:	c3                   	ret    

c0002b72 <put_fat>:
c0002b72:	83 fa 01             	cmp    edx,0x1
c0002b75:	0f 86 7b 01 00 00    	jbe    c0002cf6 <put_fat+0x184>
c0002b7b:	55                   	push   ebp
c0002b7c:	57                   	push   edi
c0002b7d:	89 cf                	mov    edi,ecx
c0002b7f:	56                   	push   esi
c0002b80:	b9 02 00 00 00       	mov    ecx,0x2
c0002b85:	53                   	push   ebx
c0002b86:	89 c6                	mov    esi,eax
c0002b88:	83 ec 1c             	sub    esp,0x1c
c0002b8b:	89 d3                	mov    ebx,edx
c0002b8d:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002b90:	0f 86 68 01 00 00    	jbe    c0002cfe <put_fat+0x18c>
c0002b96:	8a 00                	mov    al,BYTE PTR [eax]
c0002b98:	3c 02                	cmp    al,0x2
c0002b9a:	0f 84 c7 00 00 00    	je     c0002c67 <put_fat+0xf5>
c0002ba0:	77 09                	ja     c0002bab <put_fat+0x39>
c0002ba2:	fe c8                	dec    al
c0002ba4:	74 17                	je     c0002bbd <put_fat+0x4b>
c0002ba6:	e9 53 01 00 00       	jmp    c0002cfe <put_fat+0x18c>
c0002bab:	b9 02 00 00 00       	mov    ecx,0x2
c0002bb0:	3c 04                	cmp    al,0x4
c0002bb2:	0f 86 e1 00 00 00    	jbe    c0002c99 <put_fat+0x127>
c0002bb8:	e9 41 01 00 00       	jmp    c0002cfe <put_fat+0x18c>
c0002bbd:	89 d5                	mov    ebp,edx
c0002bbf:	31 c9                	xor    ecx,ecx
c0002bc1:	d1 ed                	shr    ebp,1
c0002bc3:	89 f0                	mov    eax,esi
c0002bc5:	01 d5                	add    ebp,edx
c0002bc7:	89 ea                	mov    edx,ebp
c0002bc9:	c1 ea 09             	shr    edx,0x9
c0002bcc:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bcf:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002bd2:	e8 18 f6 ff ff       	call   c00021ef <move_window>
c0002bd7:	89 c1                	mov    ecx,eax
c0002bd9:	85 c0                	test   eax,eax
c0002bdb:	0f 85 1d 01 00 00    	jne    c0002cfe <put_fat+0x18c>
c0002be1:	8d 46 54             	lea    eax,[esi+0x54]
c0002be4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002be8:	8d 45 01             	lea    eax,[ebp+0x1]
c0002beb:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002bf1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002bf5:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002bf9:	89 f8                	mov    eax,edi
c0002bfb:	83 e3 01             	and    ebx,0x1
c0002bfe:	74 0d                	je     c0002c0d <put_fat+0x9b>
c0002c00:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002c03:	89 fa                	mov    edx,edi
c0002c05:	83 e0 0f             	and    eax,0xf
c0002c08:	c1 e2 04             	shl    edx,0x4
c0002c0b:	09 d0                	or     eax,edx
c0002c0d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c10:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c14:	31 c9                	xor    ecx,ecx
c0002c16:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c1a:	c1 ea 09             	shr    edx,0x9
c0002c1d:	89 f0                	mov    eax,esi
c0002c1f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c22:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c25:	e8 c5 f5 ff ff       	call   c00021ef <move_window>
c0002c2a:	89 c1                	mov    ecx,eax
c0002c2c:	85 c0                	test   eax,eax
c0002c2e:	0f 85 ca 00 00 00    	jne    c0002cfe <put_fat+0x18c>
c0002c34:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c38:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c3e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c42:	85 db                	test   ebx,ebx
c0002c44:	74 07                	je     c0002c4d <put_fat+0xdb>
c0002c46:	c1 ef 04             	shr    edi,0x4
c0002c49:	89 fa                	mov    edx,edi
c0002c4b:	eb 0e                	jmp    c0002c5b <put_fat+0xe9>
c0002c4d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c50:	c1 ef 08             	shr    edi,0x8
c0002c53:	83 e2 f0             	and    edx,0xfffffff0
c0002c56:	83 e7 0f             	and    edi,0xf
c0002c59:	09 fa                	or     edx,edi
c0002c5b:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002c5e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c62:	e9 97 00 00 00       	jmp    c0002cfe <put_fat+0x18c>
c0002c67:	31 c9                	xor    ecx,ecx
c0002c69:	c1 ea 08             	shr    edx,0x8
c0002c6c:	89 f0                	mov    eax,esi
c0002c6e:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c71:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c74:	e8 76 f5 ff ff       	call   c00021ef <move_window>
c0002c79:	89 c1                	mov    ecx,eax
c0002c7b:	85 c0                	test   eax,eax
c0002c7d:	75 7f                	jne    c0002cfe <put_fat+0x18c>
c0002c7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c83:	01 db                	add    ebx,ebx
c0002c85:	0f b7 d7             	movzx  edx,di
c0002c88:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002c8e:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002c92:	e8 ec ed ff ff       	call   c0001a83 <st_word>
c0002c97:	eb 53                	jmp    c0002cec <put_fat+0x17a>
c0002c99:	31 c9                	xor    ecx,ecx
c0002c9b:	c1 ea 07             	shr    edx,0x7
c0002c9e:	89 f0                	mov    eax,esi
c0002ca0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ca3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ca6:	e8 44 f5 ff ff       	call   c00021ef <move_window>
c0002cab:	89 c1                	mov    ecx,eax
c0002cad:	85 c0                	test   eax,eax
c0002caf:	75 4d                	jne    c0002cfe <put_fat+0x18c>
c0002cb1:	c1 e3 02             	shl    ebx,0x2
c0002cb4:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002cba:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002cbd:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002cc1:	74 1c                	je     c0002cdf <put_fat+0x16d>
c0002cc3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cc7:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ccd:	89 d8                	mov    eax,ebx
c0002ccf:	e8 4a ed ff ff       	call   c0001a1e <ld_dword>
c0002cd4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002cd8:	25 00 00 00 f0       	and    eax,0xf0000000
c0002cdd:	09 c7                	or     edi,eax
c0002cdf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ce3:	89 fa                	mov    edx,edi
c0002ce5:	89 d8                	mov    eax,ebx
c0002ce7:	e8 9b ed ff ff       	call   c0001a87 <st_dword>
c0002cec:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002cf0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002cf4:	eb 08                	jmp    c0002cfe <put_fat+0x18c>
c0002cf6:	b9 02 00 00 00       	mov    ecx,0x2
c0002cfb:	89 c8                	mov    eax,ecx
c0002cfd:	c3                   	ret    
c0002cfe:	83 c4 1c             	add    esp,0x1c
c0002d01:	89 c8                	mov    eax,ecx
c0002d03:	5b                   	pop    ebx
c0002d04:	5e                   	pop    esi
c0002d05:	5f                   	pop    edi
c0002d06:	5d                   	pop    ebp
c0002d07:	c3                   	ret    

c0002d08 <fill_last_frag>:
c0002d08:	57                   	push   edi
c0002d09:	89 cf                	mov    edi,ecx
c0002d0b:	56                   	push   esi
c0002d0c:	89 d6                	mov    esi,edx
c0002d0e:	53                   	push   ebx
c0002d0f:	89 c3                	mov    ebx,eax
c0002d11:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d14:	85 c0                	test   eax,eax
c0002d16:	74 21                	je     c0002d39 <fill_last_frag+0x31>
c0002d18:	89 f9                	mov    ecx,edi
c0002d1a:	83 f8 01             	cmp    eax,0x1
c0002d1d:	76 05                	jbe    c0002d24 <fill_last_frag+0x1c>
c0002d1f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d22:	29 c1                	sub    ecx,eax
c0002d24:	8d 56 01             	lea    edx,[esi+0x1]
c0002d27:	29 c2                	sub    edx,eax
c0002d29:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d2b:	e8 42 fe ff ff       	call   c0002b72 <put_fat>
c0002d30:	85 c0                	test   eax,eax
c0002d32:	75 05                	jne    c0002d39 <fill_last_frag+0x31>
c0002d34:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d37:	eb d8                	jmp    c0002d11 <fill_last_frag+0x9>
c0002d39:	5b                   	pop    ebx
c0002d3a:	5e                   	pop    esi
c0002d3b:	5f                   	pop    edi
c0002d3c:	c3                   	ret    

c0002d3d <fill_first_frag>:
c0002d3d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d41:	75 2d                	jne    c0002d70 <fill_first_frag+0x33>
c0002d43:	57                   	push   edi
c0002d44:	56                   	push   esi
c0002d45:	53                   	push   ebx
c0002d46:	89 c3                	mov    ebx,eax
c0002d48:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d4b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d4e:	01 d7                	add    edi,edx
c0002d50:	39 fa                	cmp    edx,edi
c0002d52:	74 14                	je     c0002d68 <fill_first_frag+0x2b>
c0002d54:	8d 72 01             	lea    esi,[edx+0x1]
c0002d57:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d59:	89 f1                	mov    ecx,esi
c0002d5b:	e8 12 fe ff ff       	call   c0002b72 <put_fat>
c0002d60:	89 f2                	mov    edx,esi
c0002d62:	85 c0                	test   eax,eax
c0002d64:	74 ea                	je     c0002d50 <fill_first_frag+0x13>
c0002d66:	eb 0b                	jmp    c0002d73 <fill_first_frag+0x36>
c0002d68:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002d6c:	31 c0                	xor    eax,eax
c0002d6e:	eb 03                	jmp    c0002d73 <fill_first_frag+0x36>
c0002d70:	31 c0                	xor    eax,eax
c0002d72:	c3                   	ret    
c0002d73:	5b                   	pop    ebx
c0002d74:	5e                   	pop    esi
c0002d75:	5f                   	pop    edi
c0002d76:	c3                   	ret    

c0002d77 <get_fat>:
c0002d77:	83 fa 01             	cmp    edx,0x1
c0002d7a:	0f 86 db 01 00 00    	jbe    c0002f5b <get_fat+0x1e4>
c0002d80:	55                   	push   ebp
c0002d81:	b9 01 00 00 00       	mov    ecx,0x1
c0002d86:	57                   	push   edi
c0002d87:	56                   	push   esi
c0002d88:	53                   	push   ebx
c0002d89:	83 ec 1c             	sub    esp,0x1c
c0002d8c:	8b 38                	mov    edi,DWORD PTR [eax]
c0002d8e:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002d91:	0f 86 cc 01 00 00    	jbe    c0002f63 <get_fat+0x1ec>
c0002d97:	89 c3                	mov    ebx,eax
c0002d99:	89 d6                	mov    esi,edx
c0002d9b:	8a 07                	mov    al,BYTE PTR [edi]
c0002d9d:	3c 02                	cmp    al,0x2
c0002d9f:	0f 84 99 00 00 00    	je     c0002e3e <get_fat+0xc7>
c0002da5:	77 09                	ja     c0002db0 <get_fat+0x39>
c0002da7:	fe c8                	dec    al
c0002da9:	74 1a                	je     c0002dc5 <get_fat+0x4e>
c0002dab:	e9 b3 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002db0:	3c 03                	cmp    al,0x3
c0002db2:	0f 84 b5 00 00 00    	je     c0002e6d <get_fat+0xf6>
c0002db8:	3c 04                	cmp    al,0x4
c0002dba:	0f 84 e3 00 00 00    	je     c0002ea3 <get_fat+0x12c>
c0002dc0:	e9 9e 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002dc5:	89 d3                	mov    ebx,edx
c0002dc7:	31 c9                	xor    ecx,ecx
c0002dc9:	d1 eb                	shr    ebx,1
c0002dcb:	89 f8                	mov    eax,edi
c0002dcd:	01 d3                	add    ebx,edx
c0002dcf:	89 da                	mov    edx,ebx
c0002dd1:	c1 ea 09             	shr    edx,0x9
c0002dd4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002dd7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002dda:	e8 10 f4 ff ff       	call   c00021ef <move_window>
c0002ddf:	85 c0                	test   eax,eax
c0002de1:	74 08                	je     c0002deb <get_fat+0x74>
c0002de3:	83 c9 ff             	or     ecx,0xffffffff
c0002de6:	e9 78 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002deb:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002dee:	31 c9                	xor    ecx,ecx
c0002df0:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002df6:	89 ea                	mov    edx,ebp
c0002df8:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002dfc:	c1 ea 09             	shr    edx,0x9
c0002dff:	89 f8                	mov    eax,edi
c0002e01:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e04:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e07:	e8 e3 f3 ff ff       	call   c00021ef <move_window>
c0002e0c:	85 c0                	test   eax,eax
c0002e0e:	75 d3                	jne    c0002de3 <get_fat+0x6c>
c0002e10:	0f b6 c3             	movzx  eax,bl
c0002e13:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e19:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e1e:	c1 e3 08             	shl    ebx,0x8
c0002e21:	09 c3                	or     ebx,eax
c0002e23:	89 d9                	mov    ecx,ebx
c0002e25:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e2b:	83 e6 01             	and    esi,0x1
c0002e2e:	0f 84 2f 01 00 00    	je     c0002f63 <get_fat+0x1ec>
c0002e34:	89 d9                	mov    ecx,ebx
c0002e36:	c1 e9 04             	shr    ecx,0x4
c0002e39:	e9 25 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002e3e:	31 c9                	xor    ecx,ecx
c0002e40:	c1 ea 08             	shr    edx,0x8
c0002e43:	89 f8                	mov    eax,edi
c0002e45:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e48:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e4b:	e8 9f f3 ff ff       	call   c00021ef <move_window>
c0002e50:	85 c0                	test   eax,eax
c0002e52:	75 8f                	jne    c0002de3 <get_fat+0x6c>
c0002e54:	01 f6                	add    esi,esi
c0002e56:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e5c:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e60:	e8 ac eb ff ff       	call   c0001a11 <ld_word>
c0002e65:	0f b7 c8             	movzx  ecx,ax
c0002e68:	e9 f6 00 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002e6d:	31 c9                	xor    ecx,ecx
c0002e6f:	c1 ea 07             	shr    edx,0x7
c0002e72:	89 f8                	mov    eax,edi
c0002e74:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e77:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e7a:	e8 70 f3 ff ff       	call   c00021ef <move_window>
c0002e7f:	85 c0                	test   eax,eax
c0002e81:	0f 85 5c ff ff ff    	jne    c0002de3 <get_fat+0x6c>
c0002e87:	c1 e6 02             	shl    esi,0x2
c0002e8a:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002e90:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e94:	e8 85 eb ff ff       	call   c0001a1e <ld_dword>
c0002e99:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002e9e:	e9 b4 00 00 00       	jmp    c0002f57 <get_fat+0x1e0>
c0002ea3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ea6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ea9:	89 d1                	mov    ecx,edx
c0002eab:	09 c1                	or     ecx,eax
c0002ead:	74 06                	je     c0002eb5 <get_fat+0x13e>
c0002eaf:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002eb3:	75 0f                	jne    c0002ec4 <get_fat+0x14d>
c0002eb5:	b9 01 00 00 00       	mov    ecx,0x1
c0002eba:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002ebe:	0f 85 9f 00 00 00    	jne    c0002f63 <get_fat+0x1ec>
c0002ec4:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002ec8:	89 f5                	mov    ebp,esi
c0002eca:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002ecf:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002ed2:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002ed5:	80 f9 02             	cmp    cl,0x2
c0002ed8:	75 35                	jne    c0002f0f <get_fat+0x198>
c0002eda:	83 c0 ff             	add    eax,0xffffffff
c0002edd:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002ee2:	83 d2 ff             	adc    edx,0xffffffff
c0002ee5:	31 db                	xor    ebx,ebx
c0002ee7:	0f ac d0 09          	shrd   eax,edx,0x9
c0002eeb:	53                   	push   ebx
c0002eec:	c1 ea 09             	shr    edx,0x9
c0002eef:	51                   	push   ecx
c0002ef0:	52                   	push   edx
c0002ef1:	50                   	push   eax
c0002ef2:	e8 c5 23 02 00       	call   c00252bc <__udivdi3>
c0002ef7:	83 c4 10             	add    esp,0x10
c0002efa:	b9 01 00 00 00       	mov    ecx,0x1
c0002eff:	39 c5                	cmp    ebp,eax
c0002f01:	77 60                	ja     c0002f63 <get_fat+0x1ec>
c0002f03:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f08:	74 59                	je     c0002f63 <get_fat+0x1ec>
c0002f0a:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002f0d:	eb 54                	jmp    c0002f63 <get_fat+0x1ec>
c0002f0f:	80 f9 03             	cmp    cl,0x3
c0002f12:	75 05                	jne    c0002f19 <get_fat+0x1a2>
c0002f14:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f17:	77 f1                	ja     c0002f0a <get_fat+0x193>
c0002f19:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f1e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f22:	75 3f                	jne    c0002f63 <get_fat+0x1ec>
c0002f24:	31 c9                	xor    ecx,ecx
c0002f26:	89 f2                	mov    edx,esi
c0002f28:	89 f8                	mov    eax,edi
c0002f2a:	c1 ea 07             	shr    edx,0x7
c0002f2d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f30:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f33:	e8 b7 f2 ff ff       	call   c00021ef <move_window>
c0002f38:	85 c0                	test   eax,eax
c0002f3a:	0f 85 a3 fe ff ff    	jne    c0002de3 <get_fat+0x6c>
c0002f40:	c1 e6 02             	shl    esi,0x2
c0002f43:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f49:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f4d:	e8 cc ea ff ff       	call   c0001a1e <ld_dword>
c0002f52:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f57:	89 c1                	mov    ecx,eax
c0002f59:	eb 08                	jmp    c0002f63 <get_fat+0x1ec>
c0002f5b:	b9 01 00 00 00       	mov    ecx,0x1
c0002f60:	89 c8                	mov    eax,ecx
c0002f62:	c3                   	ret    
c0002f63:	83 c4 1c             	add    esp,0x1c
c0002f66:	89 c8                	mov    eax,ecx
c0002f68:	5b                   	pop    ebx
c0002f69:	5e                   	pop    esi
c0002f6a:	5f                   	pop    edi
c0002f6b:	5d                   	pop    ebp
c0002f6c:	c3                   	ret    

c0002f6d <dir_sdi>:
c0002f6d:	55                   	push   ebp
c0002f6e:	57                   	push   edi
c0002f6f:	56                   	push   esi
c0002f70:	53                   	push   ebx
c0002f71:	89 c3                	mov    ebx,eax
c0002f73:	83 ec 1c             	sub    esp,0x1c
c0002f76:	8b 38                	mov    edi,DWORD PTR [eax]
c0002f78:	31 c0                	xor    eax,eax
c0002f7a:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002f7d:	0f 94 c0             	sete   al
c0002f80:	48                   	dec    eax
c0002f81:	25 00 00 20 f0       	and    eax,0xf0200000
c0002f86:	05 00 00 00 10       	add    eax,0x10000000
c0002f8b:	39 d0                	cmp    eax,edx
c0002f8d:	77 0a                	ja     c0002f99 <dir_sdi+0x2c>
c0002f8f:	b8 02 00 00 00       	mov    eax,0x2
c0002f94:	e9 c4 00 00 00       	jmp    c000305d <dir_sdi+0xf0>
c0002f99:	89 d6                	mov    esi,edx
c0002f9b:	f6 c2 1f             	test   dl,0x1f
c0002f9e:	75 ef                	jne    c0002f8f <dir_sdi+0x22>
c0002fa0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002fa3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002fa6:	85 c9                	test   ecx,ecx
c0002fa8:	75 2d                	jne    c0002fd7 <dir_sdi+0x6a>
c0002faa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002fad:	77 1b                	ja     c0002fca <dir_sdi+0x5d>
c0002faf:	89 f2                	mov    edx,esi
c0002fb1:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002fb5:	c1 ea 05             	shr    edx,0x5
c0002fb8:	39 c2                	cmp    edx,eax
c0002fba:	73 d3                	jae    c0002f8f <dir_sdi+0x22>
c0002fbc:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fbf:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002fc2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fc5:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fc8:	eb 4b                	jmp    c0003015 <dir_sdi+0xa8>
c0002fca:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fcd:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fd1:	85 c0                	test   eax,eax
c0002fd3:	74 da                	je     c0002faf <dir_sdi+0x42>
c0002fd5:	89 c1                	mov    ecx,eax
c0002fd7:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002fdb:	c1 e5 09             	shl    ebp,0x9
c0002fde:	89 ca                	mov    edx,ecx
c0002fe0:	39 ee                	cmp    esi,ebp
c0002fe2:	72 1c                	jb     c0003000 <dir_sdi+0x93>
c0002fe4:	89 d8                	mov    eax,ebx
c0002fe6:	e8 8c fd ff ff       	call   c0002d77 <get_fat>
c0002feb:	89 c1                	mov    ecx,eax
c0002fed:	83 f8 ff             	cmp    eax,0xffffffff
c0002ff0:	74 66                	je     c0003058 <dir_sdi+0xeb>
c0002ff2:	83 f8 01             	cmp    eax,0x1
c0002ff5:	76 98                	jbe    c0002f8f <dir_sdi+0x22>
c0002ff7:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0002ffa:	76 93                	jbe    c0002f8f <dir_sdi+0x22>
c0002ffc:	29 ee                	sub    esi,ebp
c0002ffe:	eb de                	jmp    c0002fde <dir_sdi+0x71>
c0003000:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003004:	89 f8                	mov    eax,edi
c0003006:	e8 9f ec ff ff       	call   c0001caa <clst2sect>
c000300b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000300f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003012:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003015:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003018:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000301b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000301e:	89 d1                	mov    ecx,edx
c0003020:	09 c1                	or     ecx,eax
c0003022:	0f 84 67 ff ff ff    	je     c0002f8f <dir_sdi+0x22>
c0003028:	89 f1                	mov    ecx,esi
c000302a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003032:	c1 e9 09             	shr    ecx,0x9
c0003035:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003039:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000303d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003041:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003044:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000304a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000304d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003051:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003054:	31 c0                	xor    eax,eax
c0003056:	eb 05                	jmp    c000305d <dir_sdi+0xf0>
c0003058:	b8 01 00 00 00       	mov    eax,0x1
c000305d:	83 c4 1c             	add    esp,0x1c
c0003060:	5b                   	pop    ebx
c0003061:	5e                   	pop    esi
c0003062:	5f                   	pop    edi
c0003063:	5d                   	pop    ebp
c0003064:	c3                   	ret    

c0003065 <create_chain>:
c0003065:	55                   	push   ebp
c0003066:	89 c5                	mov    ebp,eax
c0003068:	57                   	push   edi
c0003069:	56                   	push   esi
c000306a:	53                   	push   ebx
c000306b:	83 ec 1c             	sub    esp,0x1c
c000306e:	85 d2                	test   edx,edx
c0003070:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003074:	8b 30                	mov    esi,DWORD PTR [eax]
c0003076:	75 0e                	jne    c0003086 <create_chain+0x21>
c0003078:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000307b:	85 ff                	test   edi,edi
c000307d:	74 39                	je     c00030b8 <create_chain+0x53>
c000307f:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003082:	77 39                	ja     c00030bd <create_chain+0x58>
c0003084:	eb 32                	jmp    c00030b8 <create_chain+0x53>
c0003086:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000308a:	e8 e8 fc ff ff       	call   c0002d77 <get_fat>
c000308f:	89 c3                	mov    ebx,eax
c0003091:	83 f8 01             	cmp    eax,0x1
c0003094:	77 0a                	ja     c00030a0 <create_chain+0x3b>
c0003096:	bb 01 00 00 00       	mov    ebx,0x1
c000309b:	e9 ba 01 00 00       	jmp    c000325a <create_chain+0x1f5>
c00030a0:	83 f8 ff             	cmp    eax,0xffffffff
c00030a3:	0f 84 62 01 00 00    	je     c000320b <create_chain+0x1a6>
c00030a9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030ac:	0f 87 a8 01 00 00    	ja     c000325a <create_chain+0x1f5>
c00030b2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030b6:	eb 05                	jmp    c00030bd <create_chain+0x58>
c00030b8:	bf 01 00 00 00       	mov    edi,0x1
c00030bd:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00030c1:	75 07                	jne    c00030ca <create_chain+0x65>
c00030c3:	31 db                	xor    ebx,ebx
c00030c5:	e9 90 01 00 00       	jmp    c000325a <create_chain+0x1f5>
c00030ca:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00030cd:	75 74                	jne    c0003143 <create_chain+0xde>
c00030cf:	b9 01 00 00 00       	mov    ecx,0x1
c00030d4:	89 fa                	mov    edx,edi
c00030d6:	89 f0                	mov    eax,esi
c00030d8:	e8 2d f9 ff ff       	call   c0002a0a <find_bitmap>
c00030dd:	89 c3                	mov    ebx,eax
c00030df:	8d 40 ff             	lea    eax,[eax-0x1]
c00030e2:	83 f8 fd             	cmp    eax,0xfffffffd
c00030e5:	0f 87 6f 01 00 00    	ja     c000325a <create_chain+0x1f5>
c00030eb:	83 ec 0c             	sub    esp,0xc
c00030ee:	b9 01 00 00 00       	mov    ecx,0x1
c00030f3:	6a 01                	push   0x1
c00030f5:	89 da                	mov    edx,ebx
c00030f7:	89 f0                	mov    eax,esi
c00030f9:	e8 bf f9 ff ff       	call   c0002abd <change_bitmap>
c00030fe:	83 c4 10             	add    esp,0x10
c0003101:	83 f8 02             	cmp    eax,0x2
c0003104:	74 90                	je     c0003096 <create_chain+0x31>
c0003106:	83 f8 01             	cmp    eax,0x1
c0003109:	0f 84 fc 00 00 00    	je     c000320b <create_chain+0x1a6>
c000310f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003114:	75 09                	jne    c000311f <create_chain+0xba>
c0003116:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000311a:	e9 0c 01 00 00       	jmp    c000322b <create_chain+0x1c6>
c000311f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003123:	0f 85 e7 00 00 00    	jne    c0003210 <create_chain+0x1ab>
c0003129:	8d 57 01             	lea    edx,[edi+0x1]
c000312c:	39 da                	cmp    edx,ebx
c000312e:	0f 84 f7 00 00 00    	je     c000322b <create_chain+0x1c6>
c0003134:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003137:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000313b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000313e:	e9 cd 00 00 00       	jmp    c0003210 <create_chain+0x1ab>
c0003143:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003147:	75 41                	jne    c000318a <create_chain+0x125>
c0003149:	8d 5f 01             	lea    ebx,[edi+0x1]
c000314c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000314f:	77 05                	ja     c0003156 <create_chain+0xf1>
c0003151:	bb 02 00 00 00       	mov    ebx,0x2
c0003156:	89 da                	mov    edx,ebx
c0003158:	89 e8                	mov    eax,ebp
c000315a:	e8 18 fc ff ff       	call   c0002d77 <get_fat>
c000315f:	83 f8 01             	cmp    eax,0x1
c0003162:	0f 84 2e ff ff ff    	je     c0003096 <create_chain+0x31>
c0003168:	83 f8 ff             	cmp    eax,0xffffffff
c000316b:	0f 84 9a 00 00 00    	je     c000320b <create_chain+0x1a6>
c0003171:	85 c0                	test   eax,eax
c0003173:	74 11                	je     c0003186 <create_chain+0x121>
c0003175:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0003178:	83 f8 01             	cmp    eax,0x1
c000317b:	76 0d                	jbe    c000318a <create_chain+0x125>
c000317d:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003180:	76 08                	jbe    c000318a <create_chain+0x125>
c0003182:	89 c7                	mov    edi,eax
c0003184:	eb 04                	jmp    c000318a <create_chain+0x125>
c0003186:	85 db                	test   ebx,ebx
c0003188:	75 38                	jne    c00031c2 <create_chain+0x15d>
c000318a:	89 fb                	mov    ebx,edi
c000318c:	43                   	inc    ebx
c000318d:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003190:	77 0e                	ja     c00031a0 <create_chain+0x13b>
c0003192:	83 ff 01             	cmp    edi,0x1
c0003195:	0f 86 28 ff ff ff    	jbe    c00030c3 <create_chain+0x5e>
c000319b:	bb 02 00 00 00       	mov    ebx,0x2
c00031a0:	89 da                	mov    edx,ebx
c00031a2:	89 e8                	mov    eax,ebp
c00031a4:	e8 ce fb ff ff       	call   c0002d77 <get_fat>
c00031a9:	85 c0                	test   eax,eax
c00031ab:	74 15                	je     c00031c2 <create_chain+0x15d>
c00031ad:	83 f8 01             	cmp    eax,0x1
c00031b0:	0f 84 e0 fe ff ff    	je     c0003096 <create_chain+0x31>
c00031b6:	40                   	inc    eax
c00031b7:	74 52                	je     c000320b <create_chain+0x1a6>
c00031b9:	39 fb                	cmp    ebx,edi
c00031bb:	75 cf                	jne    c000318c <create_chain+0x127>
c00031bd:	e9 01 ff ff ff       	jmp    c00030c3 <create_chain+0x5e>
c00031c2:	83 c9 ff             	or     ecx,0xffffffff
c00031c5:	89 da                	mov    edx,ebx
c00031c7:	89 f0                	mov    eax,esi
c00031c9:	e8 a4 f9 ff ff       	call   c0002b72 <put_fat>
c00031ce:	85 c0                	test   eax,eax
c00031d0:	75 32                	jne    c0003204 <create_chain+0x19f>
c00031d2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00031d7:	74 11                	je     c00031ea <create_chain+0x185>
c00031d9:	89 d9                	mov    ecx,ebx
c00031db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031df:	89 f0                	mov    eax,esi
c00031e1:	e8 8c f9 ff ff       	call   c0002b72 <put_fat>
c00031e6:	85 c0                	test   eax,eax
c00031e8:	75 1a                	jne    c0003204 <create_chain+0x19f>
c00031ea:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00031ed:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c00031f0:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c00031f3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00031f6:	39 d0                	cmp    eax,edx
c00031f8:	77 04                	ja     c00031fe <create_chain+0x199>
c00031fa:	48                   	dec    eax
c00031fb:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00031fe:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003202:	eb 56                	jmp    c000325a <create_chain+0x1f5>
c0003204:	48                   	dec    eax
c0003205:	0f 85 8b fe ff ff    	jne    c0003096 <create_chain+0x31>
c000320b:	83 cb ff             	or     ebx,0xffffffff
c000320e:	eb 4a                	jmp    c000325a <create_chain+0x1f5>
c0003210:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003214:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003217:	41                   	inc    ecx
c0003218:	39 d9                	cmp    ecx,ebx
c000321a:	75 19                	jne    c0003235 <create_chain+0x1d0>
c000321c:	b9 02 00 00 00       	mov    ecx,0x2
c0003221:	85 d2                	test   edx,edx
c0003223:	74 03                	je     c0003228 <create_chain+0x1c3>
c0003225:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003228:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000322b:	85 c0                	test   eax,eax
c000322d:	0f 85 63 fe ff ff    	jne    c0003096 <create_chain+0x31>
c0003233:	eb b5                	jmp    c00031ea <create_chain+0x185>
c0003235:	85 d2                	test   edx,edx
c0003237:	75 07                	jne    c0003240 <create_chain+0x1db>
c0003239:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003240:	89 d9                	mov    ecx,ebx
c0003242:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003246:	89 e8                	mov    eax,ebp
c0003248:	e8 bb fa ff ff       	call   c0002d08 <fill_last_frag>
c000324d:	85 c0                	test   eax,eax
c000324f:	75 b3                	jne    c0003204 <create_chain+0x19f>
c0003251:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003258:	eb 90                	jmp    c00031ea <create_chain+0x185>
c000325a:	83 c4 1c             	add    esp,0x1c
c000325d:	89 d8                	mov    eax,ebx
c000325f:	5b                   	pop    ebx
c0003260:	5e                   	pop    esi
c0003261:	5f                   	pop    edi
c0003262:	5d                   	pop    ebp
c0003263:	c3                   	ret    

c0003264 <remove_chain>:
c0003264:	55                   	push   ebp
c0003265:	57                   	push   edi
c0003266:	56                   	push   esi
c0003267:	53                   	push   ebx
c0003268:	83 ec 1c             	sub    esp,0x1c
c000326b:	83 fa 01             	cmp    edx,0x1
c000326e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003272:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003274:	77 0a                	ja     c0003280 <remove_chain+0x1c>
c0003276:	b8 02 00 00 00       	mov    eax,0x2
c000327b:	e9 24 01 00 00       	jmp    c00033a4 <remove_chain+0x140>
c0003280:	89 d6                	mov    esi,edx
c0003282:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c0003285:	76 ef                	jbe    c0003276 <remove_chain+0x12>
c0003287:	89 c7                	mov    edi,eax
c0003289:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000328e:	75 06                	jne    c0003296 <remove_chain+0x32>
c0003290:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003294:	eb 54                	jmp    c00032ea <remove_chain+0x86>
c0003296:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003299:	75 06                	jne    c00032a1 <remove_chain+0x3d>
c000329b:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c000329f:	74 ef                	je     c0003290 <remove_chain+0x2c>
c00032a1:	83 c9 ff             	or     ecx,0xffffffff
c00032a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00032a8:	89 d8                	mov    eax,ebx
c00032aa:	e8 c3 f8 ff ff       	call   c0002b72 <put_fat>
c00032af:	85 c0                	test   eax,eax
c00032b1:	74 dd                	je     c0003290 <remove_chain+0x2c>
c00032b3:	e9 ec 00 00 00       	jmp    c00033a4 <remove_chain+0x140>
c00032b8:	83 f8 01             	cmp    eax,0x1
c00032bb:	74 b9                	je     c0003276 <remove_chain+0x12>
c00032bd:	83 f8 ff             	cmp    eax,0xffffffff
c00032c0:	74 6d                	je     c000332f <remove_chain+0xcb>
c00032c2:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032c5:	75 6f                	jne    c0003336 <remove_chain+0xd2>
c00032c7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00032ca:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00032cd:	8d 51 fe             	lea    edx,[ecx-0x2]
c00032d0:	39 d0                	cmp    eax,edx
c00032d2:	73 08                	jae    c00032dc <remove_chain+0x78>
c00032d4:	40                   	inc    eax
c00032d5:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00032d9:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00032dc:	8d 4e 01             	lea    ecx,[esi+0x1]
c00032df:	39 e9                	cmp    ecx,ebp
c00032e1:	75 64                	jne    c0003347 <remove_chain+0xe3>
c00032e3:	89 ee                	mov    esi,ebp
c00032e5:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00032e8:	76 0f                	jbe    c00032f9 <remove_chain+0x95>
c00032ea:	89 f2                	mov    edx,esi
c00032ec:	89 f8                	mov    eax,edi
c00032ee:	e8 84 fa ff ff       	call   c0002d77 <get_fat>
c00032f3:	89 c5                	mov    ebp,eax
c00032f5:	85 c0                	test   eax,eax
c00032f7:	75 bf                	jne    c00032b8 <remove_chain+0x54>
c00032f9:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032fc:	0f 85 a0 00 00 00    	jne    c00033a2 <remove_chain+0x13e>
c0003302:	eb 6c                	jmp    c0003370 <remove_chain+0x10c>
c0003304:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003307:	84 c0                	test   al,al
c0003309:	75 7d                	jne    c0003388 <remove_chain+0x124>
c000330b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000330e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003312:	0f 84 86 00 00 00    	je     c000339e <remove_chain+0x13a>
c0003318:	89 da                	mov    edx,ebx
c000331a:	89 f8                	mov    eax,edi
c000331c:	e8 56 fa ff ff       	call   c0002d77 <get_fat>
c0003321:	83 f8 01             	cmp    eax,0x1
c0003324:	0f 86 4c ff ff ff    	jbe    c0003276 <remove_chain+0x12>
c000332a:	83 f8 ff             	cmp    eax,0xffffffff
c000332d:	75 4e                	jne    c000337d <remove_chain+0x119>
c000332f:	b8 01 00 00 00       	mov    eax,0x1
c0003334:	eb 6e                	jmp    c00033a4 <remove_chain+0x140>
c0003336:	31 c9                	xor    ecx,ecx
c0003338:	89 f2                	mov    edx,esi
c000333a:	89 d8                	mov    eax,ebx
c000333c:	e8 31 f8 ff ff       	call   c0002b72 <put_fat>
c0003341:	85 c0                	test   eax,eax
c0003343:	74 82                	je     c00032c7 <remove_chain+0x63>
c0003345:	eb 5d                	jmp    c00033a4 <remove_chain+0x140>
c0003347:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000334a:	75 1b                	jne    c0003367 <remove_chain+0x103>
c000334c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003350:	89 d8                	mov    eax,ebx
c0003352:	83 ec 0c             	sub    esp,0xc
c0003355:	6a 00                	push   0x0
c0003357:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000335b:	e8 5d f7 ff ff       	call   c0002abd <change_bitmap>
c0003360:	83 c4 10             	add    esp,0x10
c0003363:	85 c0                	test   eax,eax
c0003365:	75 3d                	jne    c00033a4 <remove_chain+0x140>
c0003367:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000336b:	e9 73 ff ff ff       	jmp    c00032e3 <remove_chain+0x7f>
c0003370:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003375:	75 8d                	jne    c0003304 <remove_chain+0xa0>
c0003377:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c000337b:	eb 25                	jmp    c00033a2 <remove_chain+0x13e>
c000337d:	8d 53 01             	lea    edx,[ebx+0x1]
c0003380:	89 c3                	mov    ebx,eax
c0003382:	39 c2                	cmp    edx,eax
c0003384:	74 88                	je     c000330e <remove_chain+0xaa>
c0003386:	eb 1a                	jmp    c00033a2 <remove_chain+0x13e>
c0003388:	3c 03                	cmp    al,0x3
c000338a:	75 16                	jne    c00033a2 <remove_chain+0x13e>
c000338c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000338f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003393:	77 0d                	ja     c00033a2 <remove_chain+0x13e>
c0003395:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c0003398:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000339c:	72 04                	jb     c00033a2 <remove_chain+0x13e>
c000339e:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00033a2:	31 c0                	xor    eax,eax
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	5b                   	pop    ebx
c00033a8:	5e                   	pop    esi
c00033a9:	5f                   	pop    edi
c00033aa:	5d                   	pop    ebp
c00033ab:	c3                   	ret    

c00033ac <dir_clear>:
c00033ac:	55                   	push   ebp
c00033ad:	57                   	push   edi
c00033ae:	56                   	push   esi
c00033af:	89 c6                	mov    esi,eax
c00033b1:	53                   	push   ebx
c00033b2:	83 ec 1c             	sub    esp,0x1c
c00033b5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00033b9:	e8 9d ed ff ff       	call   c000215b <sync_window>
c00033be:	85 c0                	test   eax,eax
c00033c0:	0f 85 de 00 00 00    	jne    c00034a4 <dir_clear+0xf8>
c00033c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033ca:	89 f0                	mov    eax,esi
c00033cc:	8d 6e 54             	lea    ebp,[esi+0x54]
c00033cf:	e8 d6 e8 ff ff       	call   c0001caa <clst2sect>
c00033d4:	b9 00 02 00 00       	mov    ecx,0x200
c00033d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00033dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00033e1:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00033e4:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00033e7:	89 e8                	mov    eax,ebp
c00033e9:	31 d2                	xor    edx,edx
c00033eb:	e8 b5 e6 ff ff       	call   c0001aa5 <mem_set>
c00033f0:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c00033f4:	c1 e3 09             	shl    ebx,0x9
c00033f7:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c00033fd:	76 1f                	jbe    c000341e <dir_clear+0x72>
c00033ff:	bb 00 80 00 00       	mov    ebx,0x8000
c0003404:	eb 18                	jmp    c000341e <dir_clear+0x72>
c0003406:	83 ec 0c             	sub    esp,0xc
c0003409:	53                   	push   ebx
c000340a:	e8 35 4e 00 00       	call   c0008244 <ff_memalloc>
c000340f:	83 c4 10             	add    esp,0x10
c0003412:	89 c7                	mov    edi,eax
c0003414:	85 c0                	test   eax,eax
c0003416:	0f 85 8f 00 00 00    	jne    c00034ab <dir_clear+0xff>
c000341c:	d1 eb                	shr    ebx,1
c000341e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003424:	77 e0                	ja     c0003406 <dir_clear+0x5a>
c0003426:	31 db                	xor    ebx,ebx
c0003428:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000342c:	39 d8                	cmp    eax,ebx
c000342e:	76 66                	jbe    c0003496 <dir_clear+0xea>
c0003430:	83 ec 0c             	sub    esp,0xc
c0003433:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003437:	6a 01                	push   0x1
c0003439:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000343d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003441:	55                   	push   ebp
c0003442:	50                   	push   eax
c0003443:	e8 94 e5 ff ff       	call   c00019dc <disk_write>
c0003448:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000344d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003452:	83 c4 20             	add    esp,0x20
c0003455:	85 c0                	test   eax,eax
c0003457:	75 3d                	jne    c0003496 <dir_clear+0xea>
c0003459:	43                   	inc    ebx
c000345a:	eb cc                	jmp    c0003428 <dir_clear+0x7c>
c000345c:	83 ec 0c             	sub    esp,0xc
c000345f:	31 d2                	xor    edx,edx
c0003461:	55                   	push   ebp
c0003462:	89 d8                	mov    eax,ebx
c0003464:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0003468:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000346c:	52                   	push   edx
c000346d:	50                   	push   eax
c000346e:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003472:	57                   	push   edi
c0003473:	50                   	push   eax
c0003474:	e8 63 e5 ff ff       	call   c00019dc <disk_write>
c0003479:	83 c4 20             	add    esp,0x20
c000347c:	85 c0                	test   eax,eax
c000347e:	75 0a                	jne    c000348a <dir_clear+0xde>
c0003480:	01 eb                	add    ebx,ebp
c0003482:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003486:	39 d8                	cmp    eax,ebx
c0003488:	77 d2                	ja     c000345c <dir_clear+0xb0>
c000348a:	83 ec 0c             	sub    esp,0xc
c000348d:	57                   	push   edi
c000348e:	e8 c7 4d 00 00       	call   c000825a <ff_memfree>
c0003493:	83 c4 10             	add    esp,0x10
c0003496:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000349a:	39 d8                	cmp    eax,ebx
c000349c:	0f 95 c0             	setne  al
c000349f:	0f b6 c0             	movzx  eax,al
c00034a2:	eb 19                	jmp    c00034bd <dir_clear+0x111>
c00034a4:	b8 01 00 00 00       	mov    eax,0x1
c00034a9:	eb 12                	jmp    c00034bd <dir_clear+0x111>
c00034ab:	89 d9                	mov    ecx,ebx
c00034ad:	31 d2                	xor    edx,edx
c00034af:	c1 eb 09             	shr    ebx,0x9
c00034b2:	e8 ee e5 ff ff       	call   c0001aa5 <mem_set>
c00034b7:	89 dd                	mov    ebp,ebx
c00034b9:	31 db                	xor    ebx,ebx
c00034bb:	eb c5                	jmp    c0003482 <dir_clear+0xd6>
c00034bd:	83 c4 1c             	add    esp,0x1c
c00034c0:	5b                   	pop    ebx
c00034c1:	5e                   	pop    esi
c00034c2:	5f                   	pop    edi
c00034c3:	5d                   	pop    ebp
c00034c4:	c3                   	ret    

c00034c5 <dir_next>:
c00034c5:	55                   	push   ebp
c00034c6:	57                   	push   edi
c00034c7:	56                   	push   esi
c00034c8:	53                   	push   ebx
c00034c9:	89 c3                	mov    ebx,eax
c00034cb:	83 ec 1c             	sub    esp,0x1c
c00034ce:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034d0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00034d4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00034d7:	8d 78 20             	lea    edi,[eax+0x20]
c00034da:	31 c0                	xor    eax,eax
c00034dc:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00034e0:	0f 94 c0             	sete   al
c00034e3:	48                   	dec    eax
c00034e4:	25 00 00 20 f0       	and    eax,0xf0200000
c00034e9:	05 00 00 00 10       	add    eax,0x10000000
c00034ee:	39 f8                	cmp    eax,edi
c00034f0:	77 0e                	ja     c0003500 <dir_next+0x3b>
c00034f2:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00034f9:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003500:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003503:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003506:	b8 04 00 00 00       	mov    eax,0x4
c000350b:	89 ce                	mov    esi,ecx
c000350d:	09 d6                	or     esi,edx
c000350f:	0f 84 da 00 00 00    	je     c00035ef <dir_next+0x12a>
c0003515:	89 f8                	mov    eax,edi
c0003517:	25 ff 01 00 00       	and    eax,0x1ff
c000351c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003520:	0f 85 b9 00 00 00    	jne    c00035df <dir_next+0x11a>
c0003526:	83 c2 01             	add    edx,0x1
c0003529:	83 d1 00             	adc    ecx,0x0
c000352c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000352f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003532:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003535:	85 d2                	test   edx,edx
c0003537:	75 29                	jne    c0003562 <dir_next+0x9d>
c0003539:	89 fa                	mov    edx,edi
c000353b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000353f:	c1 ea 05             	shr    edx,0x5
c0003542:	39 c2                	cmp    edx,eax
c0003544:	0f 82 95 00 00 00    	jb     c00035df <dir_next+0x11a>
c000354a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003551:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003558:	b8 04 00 00 00       	mov    eax,0x4
c000355d:	e9 8d 00 00 00       	jmp    c00035ef <dir_next+0x12a>
c0003562:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003566:	89 f9                	mov    ecx,edi
c0003568:	48                   	dec    eax
c0003569:	c1 e9 09             	shr    ecx,0x9
c000356c:	85 c8                	test   eax,ecx
c000356e:	75 6f                	jne    c00035df <dir_next+0x11a>
c0003570:	89 d8                	mov    eax,ebx
c0003572:	e8 00 f8 ff ff       	call   c0002d77 <get_fat>
c0003577:	89 c6                	mov    esi,eax
c0003579:	83 f8 01             	cmp    eax,0x1
c000357c:	77 07                	ja     c0003585 <dir_next+0xc0>
c000357e:	b8 02 00 00 00       	mov    eax,0x2
c0003583:	eb 6a                	jmp    c00035ef <dir_next+0x12a>
c0003585:	83 f8 ff             	cmp    eax,0xffffffff
c0003588:	75 07                	jne    c0003591 <dir_next+0xcc>
c000358a:	b8 01 00 00 00       	mov    eax,0x1
c000358f:	eb 5e                	jmp    c00035ef <dir_next+0x12a>
c0003591:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0003594:	77 37                	ja     c00035cd <dir_next+0x108>
c0003596:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000359b:	74 ad                	je     c000354a <dir_next+0x85>
c000359d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	e8 be fa ff ff       	call   c0003065 <create_chain>
c00035a7:	89 c6                	mov    esi,eax
c00035a9:	b8 07 00 00 00       	mov    eax,0x7
c00035ae:	85 f6                	test   esi,esi
c00035b0:	74 3d                	je     c00035ef <dir_next+0x12a>
c00035b2:	83 fe 01             	cmp    esi,0x1
c00035b5:	74 c7                	je     c000357e <dir_next+0xb9>
c00035b7:	83 fe ff             	cmp    esi,0xffffffff
c00035ba:	74 ce                	je     c000358a <dir_next+0xc5>
c00035bc:	89 f2                	mov    edx,esi
c00035be:	89 e8                	mov    eax,ebp
c00035c0:	e8 e7 fd ff ff       	call   c00033ac <dir_clear>
c00035c5:	85 c0                	test   eax,eax
c00035c7:	75 c1                	jne    c000358a <dir_next+0xc5>
c00035c9:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00035cd:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00035d0:	89 f2                	mov    edx,esi
c00035d2:	89 e8                	mov    eax,ebp
c00035d4:	e8 d1 e6 ff ff       	call   c0001caa <clst2sect>
c00035d9:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00035dc:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00035df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00035e3:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00035e6:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c00035ea:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00035ed:	31 c0                	xor    eax,eax
c00035ef:	83 c4 1c             	add    esp,0x1c
c00035f2:	5b                   	pop    ebx
c00035f3:	5e                   	pop    esi
c00035f4:	5f                   	pop    edi
c00035f5:	5d                   	pop    ebp
c00035f6:	c3                   	ret    

c00035f7 <load_xdir>:
c00035f7:	55                   	push   ebp
c00035f8:	57                   	push   edi
c00035f9:	56                   	push   esi
c00035fa:	89 c6                	mov    esi,eax
c00035fc:	53                   	push   ebx
c00035fd:	83 ec 1c             	sub    esp,0x1c
c0003600:	8b 00                	mov    eax,DWORD PTR [eax]
c0003602:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003605:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003608:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000360b:	e8 df eb ff ff       	call   c00021ef <move_window>
c0003610:	89 c3                	mov    ebx,eax
c0003612:	85 c0                	test   eax,eax
c0003614:	0f 85 0c 01 00 00    	jne    c0003726 <load_xdir+0x12f>
c000361a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000361d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003620:	0f 85 fb 00 00 00    	jne    c0003721 <load_xdir+0x12a>
c0003626:	89 f8                	mov    eax,edi
c0003628:	b9 20 00 00 00       	mov    ecx,0x20
c000362d:	e8 5e e4 ff ff       	call   c0001a90 <mem_cpy>
c0003632:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003636:	40                   	inc    eax
c0003637:	c1 e0 05             	shl    eax,0x5
c000363a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000363e:	83 e8 60             	sub    eax,0x60
c0003641:	3d 00 02 00 00       	cmp    eax,0x200
c0003646:	0f 87 d5 00 00 00    	ja     c0003721 <load_xdir+0x12a>
c000364c:	31 d2                	xor    edx,edx
c000364e:	89 f0                	mov    eax,esi
c0003650:	e8 70 fe ff ff       	call   c00034c5 <dir_next>
c0003655:	89 c3                	mov    ebx,eax
c0003657:	83 f8 04             	cmp    eax,0x4
c000365a:	0f 84 c1 00 00 00    	je     c0003721 <load_xdir+0x12a>
c0003660:	85 c0                	test   eax,eax
c0003662:	0f 85 be 00 00 00    	jne    c0003726 <load_xdir+0x12f>
c0003668:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000366b:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000366e:	8b 06                	mov    eax,DWORD PTR [esi]
c0003670:	e8 7a eb ff ff       	call   c00021ef <move_window>
c0003675:	89 c3                	mov    ebx,eax
c0003677:	85 c0                	test   eax,eax
c0003679:	0f 85 a7 00 00 00    	jne    c0003726 <load_xdir+0x12f>
c000367f:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003682:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c0003685:	0f 85 96 00 00 00    	jne    c0003721 <load_xdir+0x12a>
c000368b:	8d 47 20             	lea    eax,[edi+0x20]
c000368e:	b9 20 00 00 00       	mov    ecx,0x20
c0003693:	e8 f8 e3 ff ff       	call   c0001a90 <mem_cpy>
c0003698:	31 d2                	xor    edx,edx
c000369a:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c000369e:	b9 0f 00 00 00       	mov    ecx,0xf
c00036a3:	83 c0 2c             	add    eax,0x2c
c00036a6:	f7 f1                	div    ecx
c00036a8:	c1 e0 05             	shl    eax,0x5
c00036ab:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00036af:	77 70                	ja     c0003721 <load_xdir+0x12a>
c00036b1:	bd 40 00 00 00       	mov    ebp,0x40
c00036b6:	31 d2                	xor    edx,edx
c00036b8:	89 f0                	mov    eax,esi
c00036ba:	e8 06 fe ff ff       	call   c00034c5 <dir_next>
c00036bf:	89 c3                	mov    ebx,eax
c00036c1:	83 f8 04             	cmp    eax,0x4
c00036c4:	74 5b                	je     c0003721 <load_xdir+0x12a>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 5c                	jne    c0003726 <load_xdir+0x12f>
c00036ca:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036cd:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036d0:	8b 06                	mov    eax,DWORD PTR [esi]
c00036d2:	e8 18 eb ff ff       	call   c00021ef <move_window>
c00036d7:	89 c3                	mov    ebx,eax
c00036d9:	85 c0                	test   eax,eax
c00036db:	75 49                	jne    c0003726 <load_xdir+0x12f>
c00036dd:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036e0:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00036e3:	75 3c                	jne    c0003721 <load_xdir+0x12a>
c00036e5:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c00036eb:	77 0d                	ja     c00036fa <load_xdir+0x103>
c00036ed:	8d 04 2f             	lea    eax,[edi+ebp*1]
c00036f0:	b9 20 00 00 00       	mov    ecx,0x20
c00036f5:	e8 96 e3 ff ff       	call   c0001a90 <mem_cpy>
c00036fa:	83 c5 20             	add    ebp,0x20
c00036fd:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003701:	77 b3                	ja     c00036b6 <load_xdir+0xbf>
c0003703:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003709:	77 1b                	ja     c0003726 <load_xdir+0x12f>
c000370b:	89 f8                	mov    eax,edi
c000370d:	e8 cd e7 ff ff       	call   c0001edf <xdir_sum>
c0003712:	89 c1                	mov    ecx,eax
c0003714:	8d 47 02             	lea    eax,[edi+0x2]
c0003717:	e8 f5 e2 ff ff       	call   c0001a11 <ld_word>
c000371c:	66 39 c1             	cmp    cx,ax
c000371f:	74 05                	je     c0003726 <load_xdir+0x12f>
c0003721:	bb 02 00 00 00       	mov    ebx,0x2
c0003726:	83 c4 1c             	add    esp,0x1c
c0003729:	89 d8                	mov    eax,ebx
c000372b:	5b                   	pop    ebx
c000372c:	5e                   	pop    esi
c000372d:	5f                   	pop    edi
c000372e:	5d                   	pop    ebp
c000372f:	c3                   	ret    

c0003730 <load_obj_xdir>:
c0003730:	53                   	push   ebx
c0003731:	89 c3                	mov    ebx,eax
c0003733:	83 ec 08             	sub    esp,0x8
c0003736:	8b 02                	mov    eax,DWORD PTR [edx]
c0003738:	89 03                	mov    DWORD PTR [ebx],eax
c000373a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000373d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003740:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003743:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003746:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003749:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003750:	30 c0                	xor    al,al
c0003752:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003759:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000375c:	89 d8                	mov    eax,ebx
c000375e:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003761:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c0003764:	e8 04 f8 ff ff       	call   c0002f6d <dir_sdi>
c0003769:	85 c0                	test   eax,eax
c000376b:	75 0b                	jne    c0003778 <load_obj_xdir+0x48>
c000376d:	89 d8                	mov    eax,ebx
c000376f:	83 c4 08             	add    esp,0x8
c0003772:	5b                   	pop    ebx
c0003773:	e9 7f fe ff ff       	jmp    c00035f7 <load_xdir>
c0003778:	83 c4 08             	add    esp,0x8
c000377b:	5b                   	pop    ebx
c000377c:	c3                   	ret    

c000377d <dir_read>:
c000377d:	55                   	push   ebp
c000377e:	bd 04 00 00 00       	mov    ebp,0x4
c0003783:	57                   	push   edi
c0003784:	56                   	push   esi
c0003785:	be ff ff ff ff       	mov    esi,0xffffffff
c000378a:	53                   	push   ebx
c000378b:	89 c3                	mov    ebx,eax
c000378d:	83 ec 1c             	sub    esp,0x1c
c0003790:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003794:	8b 38                	mov    edi,DWORD PTR [eax]
c0003796:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000379b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000379e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037a1:	89 c8                	mov    eax,ecx
c00037a3:	09 d0                	or     eax,edx
c00037a5:	0f 84 25 01 00 00    	je     c00038d0 <dir_read+0x153>
c00037ab:	89 f8                	mov    eax,edi
c00037ad:	e8 3d ea ff ff       	call   c00021ef <move_window>
c00037b2:	89 c5                	mov    ebp,eax
c00037b4:	85 c0                	test   eax,eax
c00037b6:	0f 85 23 01 00 00    	jne    c00038df <dir_read+0x162>
c00037bc:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00037bf:	8a 0a                	mov    cl,BYTE PTR [edx]
c00037c1:	84 c9                	test   cl,cl
c00037c3:	0f 84 11 01 00 00    	je     c00038da <dir_read+0x15d>
c00037c9:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00037cc:	75 48                	jne    c0003816 <dir_read+0x99>
c00037ce:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037d3:	74 10                	je     c00037e5 <dir_read+0x68>
c00037d5:	80 f9 83             	cmp    cl,0x83
c00037d8:	0f 85 dd 00 00 00    	jne    c00038bb <dir_read+0x13e>
c00037de:	31 ed                	xor    ebp,ebp
c00037e0:	e9 08 01 00 00       	jmp    c00038ed <dir_read+0x170>
c00037e5:	80 f9 85             	cmp    cl,0x85
c00037e8:	0f 85 cd 00 00 00    	jne    c00038bb <dir_read+0x13e>
c00037ee:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00037f1:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00037f4:	89 d8                	mov    eax,ebx
c00037f6:	e8 fc fd ff ff       	call   c00035f7 <load_xdir>
c00037fb:	89 c5                	mov    ebp,eax
c00037fd:	85 c0                	test   eax,eax
c00037ff:	0f 85 da 00 00 00    	jne    c00038df <dir_read+0x162>
c0003805:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003808:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000380b:	83 e0 3f             	and    eax,0x3f
c000380e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003811:	e9 d7 00 00 00       	jmp    c00038ed <dir_read+0x170>
c0003816:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003819:	83 e0 3f             	and    eax,0x3f
c000381c:	80 f9 2e             	cmp    cl,0x2e
c000381f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003823:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003826:	0f 84 8a 00 00 00    	je     c00038b6 <dir_read+0x139>
c000382c:	80 f9 e5             	cmp    cl,0xe5
c000382f:	0f 84 81 00 00 00    	je     c00038b6 <dir_read+0x139>
c0003835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003839:	83 e0 1f             	and    eax,0x1f
c000383c:	83 f8 08             	cmp    eax,0x8
c000383f:	0f 94 c0             	sete   al
c0003842:	0f b6 c0             	movzx  eax,al
c0003845:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003849:	75 6b                	jne    c00038b6 <dir_read+0x139>
c000384b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003850:	75 44                	jne    c0003896 <dir_read+0x119>
c0003852:	f6 c1 40             	test   cl,0x40
c0003855:	74 12                	je     c0003869 <dir_read+0xec>
c0003857:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000385a:	83 e1 bf             	and    ecx,0xffffffbf
c000385d:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003861:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003864:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003867:	eb 06                	jmp    c000386f <dir_read+0xf2>
c0003869:	89 f0                	mov    eax,esi
c000386b:	38 c8                	cmp    al,cl
c000386d:	75 47                	jne    c00038b6 <dir_read+0x139>
c000386f:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003873:	be ff ff ff ff       	mov    esi,0xffffffff
c0003878:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c000387b:	75 3e                	jne    c00038bb <dir_read+0x13e>
c000387d:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003881:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003884:	e8 8a e4 ff ff       	call   c0001d13 <pick_lfn>
c0003889:	85 c0                	test   eax,eax
c000388b:	74 2e                	je     c00038bb <dir_read+0x13e>
c000388d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003891:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003894:	eb 25                	jmp    c00038bb <dir_read+0x13e>
c0003896:	89 f0                	mov    eax,esi
c0003898:	84 c0                	test   al,al
c000389a:	75 11                	jne    c00038ad <dir_read+0x130>
c000389c:	89 d0                	mov    eax,edx
c000389e:	e8 2a e6 ff ff       	call   c0001ecd <sum_sfn>
c00038a3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00038a7:	0f 84 31 ff ff ff    	je     c00037de <dir_read+0x61>
c00038ad:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038b4:	eb 37                	jmp    c00038ed <dir_read+0x170>
c00038b6:	be ff ff ff ff       	mov    esi,0xffffffff
c00038bb:	31 d2                	xor    edx,edx
c00038bd:	89 d8                	mov    eax,ebx
c00038bf:	e8 01 fc ff ff       	call   c00034c5 <dir_next>
c00038c4:	89 c5                	mov    ebp,eax
c00038c6:	85 c0                	test   eax,eax
c00038c8:	0f 84 cd fe ff ff    	je     c000379b <dir_read+0x1e>
c00038ce:	eb 0f                	jmp    c00038df <dir_read+0x162>
c00038d0:	85 ed                	test   ebp,ebp
c00038d2:	0f 84 06 ff ff ff    	je     c00037de <dir_read+0x61>
c00038d8:	eb 05                	jmp    c00038df <dir_read+0x162>
c00038da:	bd 04 00 00 00       	mov    ebp,0x4
c00038df:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00038e6:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00038ed:	83 c4 1c             	add    esp,0x1c
c00038f0:	89 e8                	mov    eax,ebp
c00038f2:	5b                   	pop    ebx
c00038f3:	5e                   	pop    esi
c00038f4:	5f                   	pop    edi
c00038f5:	5d                   	pop    ebp
c00038f6:	c3                   	ret    

c00038f7 <dir_alloc>:
c00038f7:	55                   	push   ebp
c00038f8:	89 d5                	mov    ebp,edx
c00038fa:	57                   	push   edi
c00038fb:	31 d2                	xor    edx,edx
c00038fd:	56                   	push   esi
c00038fe:	53                   	push   ebx
c00038ff:	89 c3                	mov    ebx,eax
c0003901:	83 ec 0c             	sub    esp,0xc
c0003904:	8b 38                	mov    edi,DWORD PTR [eax]
c0003906:	e8 62 f6 ff ff       	call   c0002f6d <dir_sdi>
c000390b:	85 c0                	test   eax,eax
c000390d:	75 4e                	jne    c000395d <dir_alloc+0x66>
c000390f:	31 f6                	xor    esi,esi
c0003911:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003914:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003917:	89 f8                	mov    eax,edi
c0003919:	e8 d1 e8 ff ff       	call   c00021ef <move_window>
c000391e:	85 c0                	test   eax,eax
c0003920:	75 3b                	jne    c000395d <dir_alloc+0x66>
c0003922:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003925:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003928:	8a 12                	mov    dl,BYTE PTR [edx]
c000392a:	75 07                	jne    c0003933 <dir_alloc+0x3c>
c000392c:	f7 d2                	not    edx
c000392e:	c0 ea 07             	shr    dl,0x7
c0003931:	eb 0d                	jmp    c0003940 <dir_alloc+0x49>
c0003933:	84 d2                	test   dl,dl
c0003935:	0f 94 c1             	sete   cl
c0003938:	80 fa e5             	cmp    dl,0xe5
c000393b:	0f 94 c2             	sete   dl
c000393e:	09 ca                	or     edx,ecx
c0003940:	84 d2                	test   dl,dl
c0003942:	74 07                	je     c000394b <dir_alloc+0x54>
c0003944:	46                   	inc    esi
c0003945:	39 ee                	cmp    esi,ebp
c0003947:	75 04                	jne    c000394d <dir_alloc+0x56>
c0003949:	eb 1c                	jmp    c0003967 <dir_alloc+0x70>
c000394b:	31 f6                	xor    esi,esi
c000394d:	ba 01 00 00 00       	mov    edx,0x1
c0003952:	89 d8                	mov    eax,ebx
c0003954:	e8 6c fb ff ff       	call   c00034c5 <dir_next>
c0003959:	85 c0                	test   eax,eax
c000395b:	74 b4                	je     c0003911 <dir_alloc+0x1a>
c000395d:	83 f8 04             	cmp    eax,0x4
c0003960:	75 05                	jne    c0003967 <dir_alloc+0x70>
c0003962:	b8 07 00 00 00       	mov    eax,0x7
c0003967:	83 c4 0c             	add    esp,0xc
c000396a:	5b                   	pop    ebx
c000396b:	5e                   	pop    esi
c000396c:	5f                   	pop    edi
c000396d:	5d                   	pop    ebp
c000396e:	c3                   	ret    

c000396f <store_xdir>:
c000396f:	55                   	push   ebp
c0003970:	57                   	push   edi
c0003971:	89 c7                	mov    edi,eax
c0003973:	56                   	push   esi
c0003974:	53                   	push   ebx
c0003975:	83 ec 0c             	sub    esp,0xc
c0003978:	8b 00                	mov    eax,DWORD PTR [eax]
c000397a:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c000397d:	89 e8                	mov    eax,ebp
c000397f:	e8 5b e5 ff ff       	call   c0001edf <xdir_sum>
c0003984:	0f b7 d0             	movzx  edx,ax
c0003987:	8d 45 02             	lea    eax,[ebp+0x2]
c000398a:	e8 f4 e0 ff ff       	call   c0001a83 <st_word>
c000398f:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003993:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003996:	89 f8                	mov    eax,edi
c0003998:	e8 d0 f5 ff ff       	call   c0002f6d <dir_sdi>
c000399d:	89 c6                	mov    esi,eax
c000399f:	85 f6                	test   esi,esi
c00039a1:	75 3d                	jne    c00039e0 <store_xdir+0x71>
c00039a3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c00039a6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c00039a9:	8b 07                	mov    eax,DWORD PTR [edi]
c00039ab:	e8 3f e8 ff ff       	call   c00021ef <move_window>
c00039b0:	89 c6                	mov    esi,eax
c00039b2:	85 c0                	test   eax,eax
c00039b4:	75 2a                	jne    c00039e0 <store_xdir+0x71>
c00039b6:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c00039b9:	b9 20 00 00 00       	mov    ecx,0x20
c00039be:	89 ea                	mov    edx,ebp
c00039c0:	e8 cb e0 ff ff       	call   c0001a90 <mem_cpy>
c00039c5:	8b 07                	mov    eax,DWORD PTR [edi]
c00039c7:	85 db                	test   ebx,ebx
c00039c9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00039cd:	74 11                	je     c00039e0 <store_xdir+0x71>
c00039cf:	31 d2                	xor    edx,edx
c00039d1:	89 f8                	mov    eax,edi
c00039d3:	83 c5 20             	add    ebp,0x20
c00039d6:	e8 ea fa ff ff       	call   c00034c5 <dir_next>
c00039db:	4b                   	dec    ebx
c00039dc:	89 c6                	mov    esi,eax
c00039de:	eb bf                	jmp    c000399f <store_xdir+0x30>
c00039e0:	89 f0                	mov    eax,esi
c00039e2:	83 fe 02             	cmp    esi,0x2
c00039e5:	76 05                	jbe    c00039ec <store_xdir+0x7d>
c00039e7:	b8 02 00 00 00       	mov    eax,0x2
c00039ec:	83 c4 0c             	add    esp,0xc
c00039ef:	5b                   	pop    ebx
c00039f0:	5e                   	pop    esi
c00039f1:	5f                   	pop    edi
c00039f2:	5d                   	pop    ebp
c00039f3:	c3                   	ret    

c00039f4 <dir_remove>:
c00039f4:	57                   	push   edi
c00039f5:	56                   	push   esi
c00039f6:	53                   	push   ebx
c00039f7:	89 c3                	mov    ebx,eax
c00039f9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00039fc:	8b 30                	mov    esi,DWORD PTR [eax]
c00039fe:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003a01:	83 fa ff             	cmp    edx,0xffffffff
c0003a04:	74 09                	je     c0003a0f <dir_remove+0x1b>
c0003a06:	e8 62 f5 ff ff       	call   c0002f6d <dir_sdi>
c0003a0b:	85 c0                	test   eax,eax
c0003a0d:	75 41                	jne    c0003a50 <dir_remove+0x5c>
c0003a0f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a12:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a15:	89 f0                	mov    eax,esi
c0003a17:	e8 d3 e7 ff ff       	call   c00021ef <move_window>
c0003a1c:	85 c0                	test   eax,eax
c0003a1e:	75 26                	jne    c0003a46 <dir_remove+0x52>
c0003a20:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a23:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a26:	75 05                	jne    c0003a2d <dir_remove+0x39>
c0003a28:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a2b:	eb 03                	jmp    c0003a30 <dir_remove+0x3c>
c0003a2d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a30:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a34:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a37:	73 17                	jae    c0003a50 <dir_remove+0x5c>
c0003a39:	31 d2                	xor    edx,edx
c0003a3b:	89 d8                	mov    eax,ebx
c0003a3d:	e8 83 fa ff ff       	call   c00034c5 <dir_next>
c0003a42:	85 c0                	test   eax,eax
c0003a44:	74 c9                	je     c0003a0f <dir_remove+0x1b>
c0003a46:	83 f8 04             	cmp    eax,0x4
c0003a49:	75 05                	jne    c0003a50 <dir_remove+0x5c>
c0003a4b:	b8 02 00 00 00       	mov    eax,0x2
c0003a50:	5b                   	pop    ebx
c0003a51:	5e                   	pop    esi
c0003a52:	5f                   	pop    edi
c0003a53:	c3                   	ret    

c0003a54 <create_name>:
c0003a54:	55                   	push   ebp
c0003a55:	89 d5                	mov    ebp,edx
c0003a57:	57                   	push   edi
c0003a58:	89 c7                	mov    edi,eax
c0003a5a:	56                   	push   esi
c0003a5b:	31 f6                	xor    esi,esi
c0003a5d:	53                   	push   ebx
c0003a5e:	83 ec 3c             	sub    esp,0x3c
c0003a61:	8b 02                	mov    eax,DWORD PTR [edx]
c0003a63:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a67:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a69:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003a6c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003a70:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003a74:	e8 72 e0 ff ff       	call   c0001aeb <tchar2uni>
c0003a79:	89 c3                	mov    ebx,eax
c0003a7b:	83 f8 ff             	cmp    eax,0xffffffff
c0003a7e:	75 0a                	jne    c0003a8a <create_name+0x36>
c0003a80:	b8 06 00 00 00       	mov    eax,0x6
c0003a85:	e9 9e 02 00 00       	jmp    c0003d28 <create_name+0x2d4>
c0003a8a:	3d ff ff 00 00       	cmp    eax,0xffff
c0003a8f:	76 0c                	jbe    c0003a9d <create_name+0x49>
c0003a91:	c1 e8 10             	shr    eax,0x10
c0003a94:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003a98:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003a9c:	46                   	inc    esi
c0003a9d:	66 83 fb 1f          	cmp    bx,0x1f
c0003aa1:	76 4f                	jbe    c0003af2 <create_name+0x9e>
c0003aa3:	66 83 fb 5c          	cmp    bx,0x5c
c0003aa7:	74 35                	je     c0003ade <create_name+0x8a>
c0003aa9:	66 83 fb 2f          	cmp    bx,0x2f
c0003aad:	74 2f                	je     c0003ade <create_name+0x8a>
c0003aaf:	66 83 fb 7f          	cmp    bx,0x7f
c0003ab3:	77 11                	ja     c0003ac6 <create_name+0x72>
c0003ab5:	0f b7 d3             	movzx  edx,bx
c0003ab8:	b8 32 7d 02 c0       	mov    eax,0xc0027d32
c0003abd:	e8 11 e0 ff ff       	call   c0001ad3 <chk_chr>
c0003ac2:	85 c0                	test   eax,eax
c0003ac4:	75 ba                	jne    c0003a80 <create_name+0x2c>
c0003ac6:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003acc:	77 b2                	ja     c0003a80 <create_name+0x2c>
c0003ace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ad2:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003ad6:	46                   	inc    esi
c0003ad7:	eb 97                	jmp    c0003a70 <create_name+0x1c>
c0003ad9:	40                   	inc    eax
c0003ada:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ade:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003ae2:	8a 10                	mov    dl,BYTE PTR [eax]
c0003ae4:	80 fa 2f             	cmp    dl,0x2f
c0003ae7:	74 f0                	je     c0003ad9 <create_name+0x85>
c0003ae9:	80 fa 5c             	cmp    dl,0x5c
c0003aec:	74 eb                	je     c0003ad9 <create_name+0x85>
c0003aee:	31 db                	xor    ebx,ebx
c0003af0:	eb 02                	jmp    c0003af4 <create_name+0xa0>
c0003af2:	b3 04                	mov    bl,0x4
c0003af4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003af8:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003afb:	85 f6                	test   esi,esi
c0003afd:	74 18                	je     c0003b17 <create_name+0xc3>
c0003aff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b03:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003b08:	66 83 f8 20          	cmp    ax,0x20
c0003b0c:	74 06                	je     c0003b14 <create_name+0xc0>
c0003b0e:	66 83 f8 2e          	cmp    ax,0x2e
c0003b12:	75 03                	jne    c0003b17 <create_name+0xc3>
c0003b14:	4e                   	dec    esi
c0003b15:	eb e4                	jmp    c0003afb <create_name+0xa7>
c0003b17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b1b:	31 ed                	xor    ebp,ebp
c0003b1d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b23:	85 f6                	test   esi,esi
c0003b25:	0f 84 55 ff ff ff    	je     c0003a80 <create_name+0x2c>
c0003b2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b2f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b32:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b36:	66 83 f8 20          	cmp    ax,0x20
c0003b3a:	75 04                	jne    c0003b40 <create_name+0xec>
c0003b3c:	89 d5                	mov    ebp,edx
c0003b3e:	eb eb                	jmp    c0003b2b <create_name+0xd7>
c0003b40:	85 ed                	test   ebp,ebp
c0003b42:	75 06                	jne    c0003b4a <create_name+0xf6>
c0003b44:	66 83 f8 2e          	cmp    ax,0x2e
c0003b48:	75 08                	jne    c0003b52 <create_name+0xfe>
c0003b4a:	83 cb 03             	or     ebx,0x3
c0003b4d:	eb 03                	jmp    c0003b52 <create_name+0xfe>
c0003b4f:	4e                   	dec    esi
c0003b50:	74 0c                	je     c0003b5e <create_name+0x10a>
c0003b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b56:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003b5c:	75 f1                	jne    c0003b4f <create_name+0xfb>
c0003b5e:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b63:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003b66:	ba 20 00 00 00       	mov    edx,0x20
c0003b6b:	e8 35 df ff ff       	call   c0001aa5 <mem_set>
c0003b70:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003b78:	31 c9                	xor    ecx,ecx
c0003b7a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003b7f:	8d 45 01             	lea    eax,[ebp+0x1]
c0003b82:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003b86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b8a:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003b8e:	66 85 ed             	test   bp,bp
c0003b91:	0f 84 30 01 00 00    	je     c0003cc7 <create_name+0x273>
c0003b97:	66 83 fd 20          	cmp    bp,0x20
c0003b9b:	74 10                	je     c0003bad <create_name+0x159>
c0003b9d:	66 83 fd 2e          	cmp    bp,0x2e
c0003ba1:	75 13                	jne    c0003bb6 <create_name+0x162>
c0003ba3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003ba7:	0f 84 6b 01 00 00    	je     c0003d18 <create_name+0x2c4>
c0003bad:	83 cb 03             	or     ebx,0x3
c0003bb0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003bb4:	eb c9                	jmp    c0003b7f <create_name+0x12b>
c0003bb6:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003bba:	73 0b                	jae    c0003bc7 <create_name+0x173>
c0003bbc:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bc0:	75 47                	jne    c0003c09 <create_name+0x1b5>
c0003bc2:	e9 51 01 00 00       	jmp    c0003d18 <create_name+0x2c4>
c0003bc7:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003bcc:	75 10                	jne    c0003bde <create_name+0x18a>
c0003bce:	83 cb 03             	or     ebx,0x3
c0003bd1:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003bd9:	e9 e9 00 00 00       	jmp    c0003cc7 <create_name+0x273>
c0003bde:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003be2:	74 0d                	je     c0003bf1 <create_name+0x19d>
c0003be4:	83 cb 03             	or     ebx,0x3
c0003be7:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003beb:	0f 87 d6 00 00 00    	ja     c0003cc7 <create_name+0x273>
c0003bf1:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003bf6:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003bfa:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c02:	b9 08 00 00 00       	mov    ecx,0x8
c0003c07:	eb a7                	jmp    c0003bb0 <create_name+0x15c>
c0003c09:	66 83 fd 7f          	cmp    bp,0x7f
c0003c0d:	76 68                	jbe    c0003c77 <create_name+0x223>
c0003c0f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c13:	88 da                	mov    dl,bl
c0003c15:	83 ca 02             	or     edx,0x2
c0003c18:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c1c:	50                   	push   eax
c0003c1d:	50                   	push   eax
c0003c1e:	68 b5 01 00 00       	push   0x1b5
c0003c23:	55                   	push   ebp
c0003c24:	e8 48 46 00 00       	call   c0008271 <ff_uni2oem>
c0003c29:	83 c4 10             	add    esp,0x10
c0003c2c:	89 c5                	mov    ebp,eax
c0003c2e:	a8 80                	test   al,0x80
c0003c30:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c34:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c38:	74 0c                	je     c0003c46 <create_name+0x1f2>
c0003c3a:	83 e5 7f             	and    ebp,0x7f
c0003c3d:	0f b6 ad 80 7c 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd8380]
c0003c44:	eb 2a                	jmp    c0003c70 <create_name+0x21c>
c0003c46:	66 3d ff 00          	cmp    ax,0xff
c0003c4a:	76 24                	jbe    c0003c70 <create_name+0x21c>
c0003c4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003c50:	48                   	dec    eax
c0003c51:	39 c8                	cmp    eax,ecx
c0003c53:	77 0c                	ja     c0003c61 <create_name+0x20d>
c0003c55:	83 cb 03             	or     ebx,0x3
c0003c58:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003c5c:	e9 4f ff ff ff       	jmp    c0003bb0 <create_name+0x15c>
c0003c61:	89 e8                	mov    eax,ebp
c0003c63:	88 d3                	mov    bl,dl
c0003c65:	66 c1 e8 08          	shr    ax,0x8
c0003c69:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c6d:	41                   	inc    ecx
c0003c6e:	eb 4b                	jmp    c0003cbb <create_name+0x267>
c0003c70:	88 d3                	mov    bl,dl
c0003c72:	66 85 ed             	test   bp,bp
c0003c75:	74 19                	je     c0003c90 <create_name+0x23c>
c0003c77:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003c7b:	0f b7 d5             	movzx  edx,bp
c0003c7e:	b8 3b 7d 02 c0       	mov    eax,0xc0027d3b
c0003c83:	e8 4b de ff ff       	call   c0001ad3 <chk_chr>
c0003c88:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003c8c:	85 c0                	test   eax,eax
c0003c8e:	74 0a                	je     c0003c9a <create_name+0x246>
c0003c90:	83 cb 03             	or     ebx,0x3
c0003c93:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003c98:	eb 21                	jmp    c0003cbb <create_name+0x267>
c0003c9a:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003c9d:	66 83 f8 19          	cmp    ax,0x19
c0003ca1:	77 07                	ja     c0003caa <create_name+0x256>
c0003ca3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ca8:	eb 11                	jmp    c0003cbb <create_name+0x267>
c0003caa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003cad:	66 83 f8 19          	cmp    ax,0x19
c0003cb1:	77 08                	ja     c0003cbb <create_name+0x267>
c0003cb3:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003cb8:	83 ed 20             	sub    ebp,0x20
c0003cbb:	89 e8                	mov    eax,ebp
c0003cbd:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003cc1:	41                   	inc    ecx
c0003cc2:	e9 e9 fe ff ff       	jmp    c0003bb0 <create_name+0x15c>
c0003cc7:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ccb:	75 04                	jne    c0003cd1 <create_name+0x27d>
c0003ccd:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003cd1:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003cd6:	75 05                	jne    c0003cdd <create_name+0x289>
c0003cd8:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003cdd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ce1:	83 e0 0c             	and    eax,0xc
c0003ce4:	3c 0c                	cmp    al,0xc
c0003ce6:	74 0b                	je     c0003cf3 <create_name+0x29f>
c0003ce8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003cec:	83 e0 03             	and    eax,0x3
c0003cef:	3c 03                	cmp    al,0x3
c0003cf1:	75 05                	jne    c0003cf8 <create_name+0x2a4>
c0003cf3:	83 cb 02             	or     ebx,0x2
c0003cf6:	eb 19                	jmp    c0003d11 <create_name+0x2bd>
c0003cf8:	f6 c3 02             	test   bl,0x2
c0003cfb:	75 14                	jne    c0003d11 <create_name+0x2bd>
c0003cfd:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003d02:	74 03                	je     c0003d07 <create_name+0x2b3>
c0003d04:	83 cb 10             	or     ebx,0x10
c0003d07:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003d0c:	74 03                	je     c0003d11 <create_name+0x2bd>
c0003d0e:	83 cb 08             	or     ebx,0x8
c0003d11:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d14:	31 c0                	xor    eax,eax
c0003d16:	eb 10                	jmp    c0003d28 <create_name+0x2d4>
c0003d18:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d1d:	0f 85 ce fe ff ff    	jne    c0003bf1 <create_name+0x19d>
c0003d23:	e9 a6 fe ff ff       	jmp    c0003bce <create_name+0x17a>
c0003d28:	83 c4 3c             	add    esp,0x3c
c0003d2b:	5b                   	pop    ebx
c0003d2c:	5e                   	pop    esi
c0003d2d:	5f                   	pop    edi
c0003d2e:	5d                   	pop    ebp
c0003d2f:	c3                   	ret    

c0003d30 <xname_sum>:
c0003d30:	56                   	push   esi
c0003d31:	53                   	push   ebx
c0003d32:	89 c6                	mov    esi,eax
c0003d34:	51                   	push   ecx
c0003d35:	31 db                	xor    ebx,ebx
c0003d37:	83 c6 02             	add    esi,0x2
c0003d3a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d3e:	66 85 c0             	test   ax,ax
c0003d41:	74 1f                	je     c0003d62 <xname_sum+0x32>
c0003d43:	83 ec 0c             	sub    esp,0xc
c0003d46:	66 d1 cb             	ror    bx,1
c0003d49:	50                   	push   eax
c0003d4a:	e8 1e 46 00 00       	call   c000836d <ff_wtoupper>
c0003d4f:	83 c4 10             	add    esp,0x10
c0003d52:	0f b6 d0             	movzx  edx,al
c0003d55:	66 c1 e8 08          	shr    ax,0x8
c0003d59:	01 d3                	add    ebx,edx
c0003d5b:	66 d1 cb             	ror    bx,1
c0003d5e:	01 c3                	add    ebx,eax
c0003d60:	eb d5                	jmp    c0003d37 <xname_sum+0x7>
c0003d62:	89 d8                	mov    eax,ebx
c0003d64:	5a                   	pop    edx
c0003d65:	5b                   	pop    ebx
c0003d66:	5e                   	pop    esi
c0003d67:	c3                   	ret    

c0003d68 <create_xdir>:
c0003d68:	55                   	push   ebp
c0003d69:	b9 40 00 00 00       	mov    ecx,0x40
c0003d6e:	57                   	push   edi
c0003d6f:	bd 01 00 00 00       	mov    ebp,0x1
c0003d74:	56                   	push   esi
c0003d75:	31 ff                	xor    edi,edi
c0003d77:	53                   	push   ebx
c0003d78:	be 40 00 00 00       	mov    esi,0x40
c0003d7d:	89 c3                	mov    ebx,eax
c0003d7f:	83 ec 1c             	sub    esp,0x1c
c0003d82:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003d86:	31 d2                	xor    edx,edx
c0003d88:	e8 18 dd ff ff       	call   c0001aa5 <mem_set>
c0003d8d:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003d90:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003d94:	31 c9                	xor    ecx,ecx
c0003d96:	8d 46 01             	lea    eax,[esi+0x1]
c0003d99:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003d9d:	83 c6 02             	add    esi,0x2
c0003da0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	74 12                	je     c0003dbb <create_xdir+0x53>
c0003da9:	0f b6 c1             	movzx  eax,cl
c0003dac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003db0:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003db4:	66 83 fd 01          	cmp    bp,0x1
c0003db8:	80 d9 ff             	sbb    cl,0xff
c0003dbb:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003dbe:	0f b7 d5             	movzx  edx,bp
c0003dc1:	83 c6 02             	add    esi,0x2
c0003dc4:	e8 ba dc ff ff       	call   c0001a83 <st_word>
c0003dc9:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003dcf:	75 d3                	jne    c0003da4 <create_xdir+0x3c>
c0003dd1:	8d 47 01             	lea    eax,[edi+0x1]
c0003dd4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dd8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ddc:	0f b6 c1             	movzx  eax,cl
c0003ddf:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003de4:	74 07                	je     c0003ded <create_xdir+0x85>
c0003de6:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003deb:	eb a9                	jmp    c0003d96 <create_xdir+0x2e>
c0003ded:	8d 47 02             	lea    eax,[edi+0x2]
c0003df0:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003df3:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003df6:	89 d0                	mov    eax,edx
c0003df8:	e8 33 ff ff ff       	call   c0003d30 <xname_sum>
c0003dfd:	83 c4 1c             	add    esp,0x1c
c0003e00:	0f b7 d0             	movzx  edx,ax
c0003e03:	8d 43 24             	lea    eax,[ebx+0x24]
c0003e06:	5b                   	pop    ebx
c0003e07:	5e                   	pop    esi
c0003e08:	5f                   	pop    edi
c0003e09:	5d                   	pop    ebp
c0003e0a:	e9 74 dc ff ff       	jmp    c0001a83 <st_word>

c0003e0f <cmp_lfn>:
c0003e0f:	55                   	push   ebp
c0003e10:	57                   	push   edi
c0003e11:	89 d7                	mov    edi,edx
c0003e13:	56                   	push   esi
c0003e14:	53                   	push   ebx
c0003e15:	83 ec 1c             	sub    esp,0x1c
c0003e18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e1c:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e1f:	e8 ed db ff ff       	call   c0001a11 <ld_word>
c0003e24:	66 85 c0             	test   ax,ax
c0003e27:	74 07                	je     c0003e30 <cmp_lfn+0x21>
c0003e29:	31 c0                	xor    eax,eax
c0003e2b:	e9 9a 00 00 00       	jmp    c0003eca <cmp_lfn+0xbb>
c0003e30:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e32:	bd 01 00 00 00       	mov    ebp,0x1
c0003e37:	83 e3 3f             	and    ebx,0x3f
c0003e3a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e42:	4b                   	dec    ebx
c0003e43:	6b db 0d             	imul   ebx,ebx,0xd
c0003e46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e4a:	0f b6 80 00 7d 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd8300]
c0003e51:	01 f8                	add    eax,edi
c0003e53:	e8 b9 db ff ff       	call   c0001a11 <ld_word>
c0003e58:	66 85 ed             	test   bp,bp
c0003e5b:	89 c6                	mov    esi,eax
c0003e5d:	74 3c                	je     c0003e9b <cmp_lfn+0x8c>
c0003e5f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003e65:	77 c2                	ja     c0003e29 <cmp_lfn+0x1a>
c0003e67:	83 ec 0c             	sub    esp,0xc
c0003e6a:	0f b7 c0             	movzx  eax,ax
c0003e6d:	50                   	push   eax
c0003e6e:	e8 fa 44 00 00       	call   c000836d <ff_wtoupper>
c0003e73:	89 c5                	mov    ebp,eax
c0003e75:	8d 43 01             	lea    eax,[ebx+0x1]
c0003e78:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003e7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003e80:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003e84:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e87:	e8 e1 44 00 00       	call   c000836d <ff_wtoupper>
c0003e8c:	83 c4 10             	add    esp,0x10
c0003e8f:	39 c5                	cmp    ebp,eax
c0003e91:	75 96                	jne    c0003e29 <cmp_lfn+0x1a>
c0003e93:	89 f5                	mov    ebp,esi
c0003e95:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003e99:	eb 04                	jmp    c0003e9f <cmp_lfn+0x90>
c0003e9b:	66 46                	inc    si
c0003e9d:	75 8a                	jne    c0003e29 <cmp_lfn+0x1a>
c0003e9f:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003ea3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ea8:	75 9c                	jne    c0003e46 <cmp_lfn+0x37>
c0003eaa:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ead:	74 16                	je     c0003ec5 <cmp_lfn+0xb6>
c0003eaf:	66 85 ed             	test   bp,bp
c0003eb2:	74 11                	je     c0003ec5 <cmp_lfn+0xb6>
c0003eb4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003eb8:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003ebd:	0f 94 c0             	sete   al
c0003ec0:	0f b6 c0             	movzx  eax,al
c0003ec3:	eb 05                	jmp    c0003eca <cmp_lfn+0xbb>
c0003ec5:	b8 01 00 00 00       	mov    eax,0x1
c0003eca:	83 c4 1c             	add    esp,0x1c
c0003ecd:	5b                   	pop    ebx
c0003ece:	5e                   	pop    esi
c0003ecf:	5f                   	pop    edi
c0003ed0:	5d                   	pop    ebp
c0003ed1:	c3                   	ret    

c0003ed2 <dir_find>:
c0003ed2:	55                   	push   ebp
c0003ed3:	31 d2                	xor    edx,edx
c0003ed5:	57                   	push   edi
c0003ed6:	56                   	push   esi
c0003ed7:	53                   	push   ebx
c0003ed8:	89 c3                	mov    ebx,eax
c0003eda:	83 ec 1c             	sub    esp,0x1c
c0003edd:	8b 30                	mov    esi,DWORD PTR [eax]
c0003edf:	e8 89 f0 ff ff       	call   c0002f6d <dir_sdi>
c0003ee4:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ee7:	85 c0                	test   eax,eax
c0003ee9:	0f 85 9e 01 00 00    	jne    c000408d <dir_find+0x1bb>
c0003eef:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003ef2:	0f 85 8d 00 00 00    	jne    c0003f85 <dir_find+0xb3>
c0003ef8:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003efb:	e8 30 fe ff ff       	call   c0003d30 <xname_sum>
c0003f00:	89 c7                	mov    edi,eax
c0003f02:	31 d2                	xor    edx,edx
c0003f04:	89 d8                	mov    eax,ebx
c0003f06:	e8 72 f8 ff ff       	call   c000377d <dir_read>
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	0f 85 5e 01 00 00    	jne    c0004071 <dir_find+0x19f>
c0003f13:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f16:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f19:	e8 f3 da ff ff       	call   c0001a11 <ld_word>
c0003f1e:	66 39 f8             	cmp    ax,di
c0003f21:	75 df                	jne    c0003f02 <dir_find+0x30>
c0003f23:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003f26:	31 ed                	xor    ebp,ebp
c0003f28:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003f2c:	ba 40 00 00 00       	mov    edx,0x40
c0003f31:	89 e9                	mov    ecx,ebp
c0003f33:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003f37:	0f 84 42 01 00 00    	je     c000407f <dir_find+0x1ad>
c0003f3d:	f6 c2 1f             	test   dl,0x1f
c0003f40:	75 03                	jne    c0003f45 <dir_find+0x73>
c0003f42:	83 c2 02             	add    edx,0x2
c0003f45:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003f49:	89 d0                	mov    eax,edx
c0003f4b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f4e:	e8 be da ff ff       	call   c0001a11 <ld_word>
c0003f53:	83 ec 0c             	sub    esp,0xc
c0003f56:	0f b7 c0             	movzx  eax,ax
c0003f59:	50                   	push   eax
c0003f5a:	e8 0e 44 00 00       	call   c000836d <ff_wtoupper>
c0003f5f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003f63:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f66:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003f6a:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f6d:	e8 fb 43 00 00       	call   c000836d <ff_wtoupper>
c0003f72:	83 c4 10             	add    esp,0x10
c0003f75:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003f79:	75 87                	jne    c0003f02 <dir_find+0x30>
c0003f7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003f7f:	45                   	inc    ebp
c0003f80:	83 c2 02             	add    edx,0x2
c0003f83:	eb ac                	jmp    c0003f31 <dir_find+0x5f>
c0003f85:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003f8c:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003f91:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f96:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003f99:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003f9c:	89 f0                	mov    eax,esi
c0003f9e:	e8 4c e2 ff ff       	call   c00021ef <move_window>
c0003fa3:	85 c0                	test   eax,eax
c0003fa5:	0f 85 c6 00 00 00    	jne    c0004071 <dir_find+0x19f>
c0003fab:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003fae:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003fb1:	84 c9                	test   cl,cl
c0003fb3:	0f 84 bd 00 00 00    	je     c0004076 <dir_find+0x1a4>
c0003fb9:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003fbc:	88 d0                	mov    al,dl
c0003fbe:	83 e0 3f             	and    eax,0x3f
c0003fc1:	80 f9 e5             	cmp    cl,0xe5
c0003fc4:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003fc7:	0f 84 87 00 00 00    	je     c0004054 <dir_find+0x182>
c0003fcd:	80 e2 08             	and    dl,0x8
c0003fd0:	74 06                	je     c0003fd8 <dir_find+0x106>
c0003fd2:	3c 0f                	cmp    al,0xf
c0003fd4:	75 7e                	jne    c0004054 <dir_find+0x182>
c0003fd6:	eb 04                	jmp    c0003fdc <dir_find+0x10a>
c0003fd8:	3c 0f                	cmp    al,0xf
c0003fda:	75 4c                	jne    c0004028 <dir_find+0x156>
c0003fdc:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003fe0:	75 7e                	jne    c0004060 <dir_find+0x18e>
c0003fe2:	f6 c1 40             	test   cl,0x40
c0003fe5:	74 12                	je     c0003ff9 <dir_find+0x127>
c0003fe7:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003fea:	83 e1 bf             	and    ecx,0xffffffbf
c0003fed:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003ff1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ff4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ff7:	eb 06                	jmp    c0003fff <dir_find+0x12d>
c0003ff9:	89 f8                	mov    eax,edi
c0003ffb:	38 c8                	cmp    al,cl
c0003ffd:	75 5c                	jne    c000405b <dir_find+0x189>
c0003fff:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004003:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004008:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000400b:	75 53                	jne    c0004060 <dir_find+0x18e>
c000400d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004011:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004014:	89 ea                	mov    edx,ebp
c0004016:	e8 f4 fd ff ff       	call   c0003e0f <cmp_lfn>
c000401b:	85 c0                	test   eax,eax
c000401d:	74 41                	je     c0004060 <dir_find+0x18e>
c000401f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004023:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004026:	eb 38                	jmp    c0004060 <dir_find+0x18e>
c0004028:	89 f8                	mov    eax,edi
c000402a:	84 c0                	test   al,al
c000402c:	75 0d                	jne    c000403b <dir_find+0x169>
c000402e:	89 e8                	mov    eax,ebp
c0004030:	e8 98 de ff ff       	call   c0001ecd <sum_sfn>
c0004035:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004039:	74 52                	je     c000408d <dir_find+0x1bb>
c000403b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000403f:	75 13                	jne    c0004054 <dir_find+0x182>
c0004041:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004044:	b9 0b 00 00 00       	mov    ecx,0xb
c0004049:	89 e8                	mov    eax,ebp
c000404b:	e8 60 da ff ff       	call   c0001ab0 <mem_cmp>
c0004050:	85 c0                	test   eax,eax
c0004052:	74 39                	je     c000408d <dir_find+0x1bb>
c0004054:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000405b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004060:	31 d2                	xor    edx,edx
c0004062:	89 d8                	mov    eax,ebx
c0004064:	e8 5c f4 ff ff       	call   c00034c5 <dir_next>
c0004069:	85 c0                	test   eax,eax
c000406b:	0f 84 25 ff ff ff    	je     c0003f96 <dir_find+0xc4>
c0004071:	89 04 24             	mov    DWORD PTR [esp],eax
c0004074:	eb 17                	jmp    c000408d <dir_find+0x1bb>
c0004076:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000407d:	eb 0e                	jmp    c000408d <dir_find+0x1bb>
c000407f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004082:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c0004087:	0f 85 75 fe ff ff    	jne    c0003f02 <dir_find+0x30>
c000408d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004090:	83 c4 1c             	add    esp,0x1c
c0004093:	5b                   	pop    ebx
c0004094:	5e                   	pop    esi
c0004095:	5f                   	pop    edi
c0004096:	5d                   	pop    ebp
c0004097:	c3                   	ret    

c0004098 <dir_register>:
c0004098:	55                   	push   ebp
c0004099:	57                   	push   edi
c000409a:	56                   	push   esi
c000409b:	be 06 00 00 00       	mov    esi,0x6
c00040a0:	53                   	push   ebx
c00040a1:	83 ec 6c             	sub    esp,0x6c
c00040a4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00040a8:	0f 85 62 02 00 00    	jne    c0004310 <dir_register+0x278>
c00040ae:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040b0:	31 ff                	xor    edi,edi
c00040b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040b5:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00040ba:	74 03                	je     c00040bf <dir_register+0x27>
c00040bc:	47                   	inc    edi
c00040bd:	eb f6                	jmp    c00040b5 <dir_register+0x1d>
c00040bf:	89 c3                	mov    ebx,eax
c00040c1:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00040c5:	0f 85 e1 00 00 00    	jne    c00041ac <dir_register+0x114>
c00040cb:	83 c7 0e             	add    edi,0xe
c00040ce:	b9 0f 00 00 00       	mov    ecx,0xf
c00040d3:	89 f8                	mov    eax,edi
c00040d5:	31 d2                	xor    edx,edx
c00040d7:	f7 f1                	div    ecx
c00040d9:	8d 50 02             	lea    edx,[eax+0x2]
c00040dc:	89 c7                	mov    edi,eax
c00040de:	89 d8                	mov    eax,ebx
c00040e0:	e8 12 f8 ff ff       	call   c00038f7 <dir_alloc>
c00040e5:	89 c6                	mov    esi,eax
c00040e7:	85 c0                	test   eax,eax
c00040e9:	0f 85 21 02 00 00    	jne    c0004310 <dir_register+0x278>
c00040ef:	81 c7 01 00 00 08    	add    edi,0x8000001
c00040f5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00040f8:	c1 e7 05             	shl    edi,0x5
c00040fb:	29 f8                	sub    eax,edi
c00040fd:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004100:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004103:	a8 04                	test   al,0x4
c0004105:	0f 84 91 00 00 00    	je     c000419c <dir_register+0x104>
c000410b:	83 e0 fb             	and    eax,0xfffffffb
c000410e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004111:	89 d8                	mov    eax,ebx
c0004113:	e8 25 ec ff ff       	call   c0002d3d <fill_first_frag>
c0004118:	85 c0                	test   eax,eax
c000411a:	0f 85 ee 01 00 00    	jne    c000430e <dir_register+0x276>
c0004120:	83 c9 ff             	or     ecx,0xffffffff
c0004123:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004126:	89 d8                	mov    eax,ebx
c0004128:	e8 db eb ff ff       	call   c0002d08 <fill_last_frag>
c000412d:	85 c0                	test   eax,eax
c000412f:	0f 85 d9 01 00 00    	jne    c000430e <dir_register+0x276>
c0004135:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004139:	74 61                	je     c000419c <dir_register+0x104>
c000413b:	89 da                	mov    edx,ebx
c000413d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004141:	e8 ea f5 ff ff       	call   c0003730 <load_obj_xdir>
c0004146:	85 c0                	test   eax,eax
c0004148:	0f 85 c0 01 00 00    	jne    c000430e <dir_register+0x276>
c000414e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004152:	31 c9                	xor    ecx,ecx
c0004154:	c1 e2 09             	shl    edx,0x9
c0004157:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c000415a:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c000415d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004160:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004163:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004166:	83 c0 38             	add    eax,0x38
c0004169:	e8 1c d9 ff ff       	call   c0001a8a <st_qword>
c000416e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004171:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004174:	83 c0 28             	add    eax,0x28
c0004177:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000417a:	e8 0b d9 ff ff       	call   c0001a8a <st_qword>
c000417f:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004182:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0004185:	83 c8 01             	or     eax,0x1
c0004188:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c000418b:	8d 44 24 14          	lea    eax,[esp+0x14]
c000418f:	e8 db f7 ff ff       	call   c000396f <store_xdir>
c0004194:	85 c0                	test   eax,eax
c0004196:	0f 85 72 01 00 00    	jne    c000430e <dir_register+0x276>
c000419c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000419f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041a2:	e8 c1 fb ff ff       	call   c0003d68 <create_xdir>
c00041a7:	e9 64 01 00 00       	jmp    c0004310 <dir_register+0x278>
c00041ac:	8d 40 3c             	lea    eax,[eax+0x3c]
c00041af:	b9 0c 00 00 00       	mov    ecx,0xc
c00041b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041b8:	89 c2                	mov    edx,eax
c00041ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041be:	e8 cd d8 ff ff       	call   c0001a90 <mem_cpy>
c00041c3:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00041c8:	74 58                	je     c0004222 <dir_register+0x18a>
c00041ca:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00041ce:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00041d6:	83 ec 0c             	sub    esp,0xc
c00041d9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00041dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00041e0:	8d 54 24 24          	lea    edx,[esp+0x24]
c00041e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00041e8:	e8 24 dc ff ff       	call   c0001e11 <gen_numname>
c00041ed:	89 d8                	mov    eax,ebx
c00041ef:	e8 de fc ff ff       	call   c0003ed2 <dir_find>
c00041f4:	83 c4 10             	add    esp,0x10
c00041f7:	89 c6                	mov    esi,eax
c00041f9:	85 c0                	test   eax,eax
c00041fb:	75 15                	jne    c0004212 <dir_register+0x17a>
c00041fd:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004201:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004206:	75 ce                	jne    c00041d6 <dir_register+0x13e>
c0004208:	be 07 00 00 00       	mov    esi,0x7
c000420d:	e9 fe 00 00 00       	jmp    c0004310 <dir_register+0x278>
c0004212:	83 f8 04             	cmp    eax,0x4
c0004215:	0f 85 f5 00 00 00    	jne    c0004310 <dir_register+0x278>
c000421b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000421f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004222:	b9 01 00 00 00       	mov    ecx,0x1
c0004227:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000422c:	74 0f                	je     c000423d <dir_register+0x1a5>
c000422e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004233:	8d 47 0c             	lea    eax,[edi+0xc]
c0004236:	31 d2                	xor    edx,edx
c0004238:	f7 f1                	div    ecx
c000423a:	8d 48 01             	lea    ecx,[eax+0x1]
c000423d:	89 ca                	mov    edx,ecx
c000423f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004243:	89 d8                	mov    eax,ebx
c0004245:	e8 ad f6 ff ff       	call   c00038f7 <dir_alloc>
c000424a:	89 c6                	mov    esi,eax
c000424c:	85 c0                	test   eax,eax
c000424e:	0f 85 bc 00 00 00    	jne    c0004310 <dir_register+0x278>
c0004254:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004258:	49                   	dec    ecx
c0004259:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000425d:	74 6a                	je     c00042c9 <dir_register+0x231>
c000425f:	89 c8                	mov    eax,ecx
c0004261:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004264:	c1 e0 05             	shl    eax,0x5
c0004267:	29 c2                	sub    edx,eax
c0004269:	89 d8                	mov    eax,ebx
c000426b:	e8 fd ec ff ff       	call   c0002f6d <dir_sdi>
c0004270:	89 c6                	mov    esi,eax
c0004272:	85 c0                	test   eax,eax
c0004274:	0f 85 96 00 00 00    	jne    c0004310 <dir_register+0x278>
c000427a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000427e:	e8 4a dc ff ff       	call   c0001ecd <sum_sfn>
c0004283:	0f b6 f8             	movzx  edi,al
c0004286:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004289:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000428c:	89 e8                	mov    eax,ebp
c000428e:	e8 5c df ff ff       	call   c00021ef <move_window>
c0004293:	89 c6                	mov    esi,eax
c0004295:	85 c0                	test   eax,eax
c0004297:	75 77                	jne    c0004310 <dir_register+0x278>
c0004299:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c000429e:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042a1:	83 ec 0c             	sub    esp,0xc
c00042a4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00042a7:	57                   	push   edi
c00042a8:	e8 e0 da ff ff       	call   c0001d8d <put_lfn>
c00042ad:	31 d2                	xor    edx,edx
c00042af:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042b3:	89 d8                	mov    eax,ebx
c00042b5:	e8 0b f2 ff ff       	call   c00034c5 <dir_next>
c00042ba:	83 c4 10             	add    esp,0x10
c00042bd:	89 c6                	mov    esi,eax
c00042bf:	85 c0                	test   eax,eax
c00042c1:	75 4d                	jne    c0004310 <dir_register+0x278>
c00042c3:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00042c7:	75 bd                	jne    c0004286 <dir_register+0x1ee>
c00042c9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042cc:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042cf:	89 e8                	mov    eax,ebp
c00042d1:	e8 19 df ff ff       	call   c00021ef <move_window>
c00042d6:	89 c6                	mov    esi,eax
c00042d8:	85 c0                	test   eax,eax
c00042da:	75 34                	jne    c0004310 <dir_register+0x278>
c00042dc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042df:	b9 20 00 00 00       	mov    ecx,0x20
c00042e4:	31 d2                	xor    edx,edx
c00042e6:	e8 ba d7 ff ff       	call   c0001aa5 <mem_set>
c00042eb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00042f2:	b9 0b 00 00 00       	mov    ecx,0xb
c00042f7:	e8 94 d7 ff ff       	call   c0001a90 <mem_cpy>
c00042fc:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c00042ff:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004302:	83 e0 18             	and    eax,0x18
c0004305:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004308:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000430c:	eb 02                	jmp    c0004310 <dir_register+0x278>
c000430e:	89 c6                	mov    esi,eax
c0004310:	83 c4 6c             	add    esp,0x6c
c0004313:	89 f0                	mov    eax,esi
c0004315:	5b                   	pop    ebx
c0004316:	5e                   	pop    esi
c0004317:	5f                   	pop    edi
c0004318:	5d                   	pop    ebp
c0004319:	c3                   	ret    

c000431a <sync_fs>:
c000431a:	56                   	push   esi
c000431b:	53                   	push   ebx
c000431c:	53                   	push   ebx
c000431d:	89 c3                	mov    ebx,eax
c000431f:	e8 37 de ff ff       	call   c000215b <sync_window>
c0004324:	85 c0                	test   eax,eax
c0004326:	0f 85 b1 00 00 00    	jne    c00043dd <sync_fs+0xc3>
c000432c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000432f:	0f 85 8e 00 00 00    	jne    c00043c3 <sync_fs+0xa9>
c0004335:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004339:	0f 85 84 00 00 00    	jne    c00043c3 <sync_fs+0xa9>
c000433f:	b9 00 02 00 00       	mov    ecx,0x200
c0004344:	8d 73 54             	lea    esi,[ebx+0x54]
c0004347:	31 d2                	xor    edx,edx
c0004349:	89 f0                	mov    eax,esi
c000434b:	e8 55 d7 ff ff       	call   c0001aa5 <mem_set>
c0004350:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004356:	ba 55 aa 00 00       	mov    edx,0xaa55
c000435b:	e8 23 d7 ff ff       	call   c0001a83 <st_word>
c0004360:	ba 52 52 61 41       	mov    edx,0x41615252
c0004365:	89 f0                	mov    eax,esi
c0004367:	e8 1b d7 ff ff       	call   c0001a87 <st_dword>
c000436c:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004372:	ba 72 72 41 61       	mov    edx,0x61417272
c0004377:	e8 0b d7 ff ff       	call   c0001a87 <st_dword>
c000437c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000437f:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c0004385:	e8 fd d6 ff ff       	call   c0001a87 <st_dword>
c000438a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000438d:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c0004393:	e8 ef d6 ff ff       	call   c0001a87 <st_dword>
c0004398:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000439b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000439e:	83 c0 01             	add    eax,0x1
c00043a1:	83 d2 00             	adc    edx,0x0
c00043a4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00043a7:	83 ec 0c             	sub    esp,0xc
c00043aa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00043ad:	6a 01                	push   0x1
c00043af:	52                   	push   edx
c00043b0:	50                   	push   eax
c00043b1:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043b5:	56                   	push   esi
c00043b6:	50                   	push   eax
c00043b7:	e8 20 d6 ff ff       	call   c00019dc <disk_write>
c00043bc:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00043c0:	83 c4 20             	add    esp,0x20
c00043c3:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043c7:	51                   	push   ecx
c00043c8:	6a 00                	push   0x0
c00043ca:	6a 00                	push   0x0
c00043cc:	50                   	push   eax
c00043cd:	e8 20 d6 ff ff       	call   c00019f2 <disk_ioctl>
c00043d2:	83 c4 10             	add    esp,0x10
c00043d5:	85 c0                	test   eax,eax
c00043d7:	0f 95 c0             	setne  al
c00043da:	0f b6 c0             	movzx  eax,al
c00043dd:	5a                   	pop    edx
c00043de:	5b                   	pop    ebx
c00043df:	5e                   	pop    esi
c00043e0:	c3                   	ret    

c00043e1 <create_partition>:
c00043e1:	55                   	push   ebp
c00043e2:	0f b6 c0             	movzx  eax,al
c00043e5:	57                   	push   edi
c00043e6:	56                   	push   esi
c00043e7:	53                   	push   ebx
c00043e8:	83 ec 60             	sub    esp,0x60
c00043eb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043ef:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c00043f3:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00043f7:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00043fb:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c00043ff:	50                   	push   eax
c0004400:	6a 01                	push   0x1
c0004402:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004406:	e8 e7 d5 ff ff       	call   c00019f2 <disk_ioctl>
c000440b:	83 c4 10             	add    esp,0x10
c000440e:	85 c0                	test   eax,eax
c0004410:	74 0a                	je     c000441c <create_partition+0x3b>
c0004412:	b8 01 00 00 00       	mov    eax,0x1
c0004417:	e9 67 05 00 00       	jmp    c0004983 <create_partition+0x5a2>
c000441c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004420:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004424:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004428:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000442c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004431:	0f 86 ed 03 00 00    	jbe    c0004824 <create_partition+0x443>
c0004437:	83 c0 df             	add    eax,0xffffffdf
c000443a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004442:	83 d2 ff             	adc    edx,0xffffffff
c0004445:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004449:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000444d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004451:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004455:	83 c0 bd             	add    eax,0xffffffbd
c0004458:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000445f:	83 d2 ff             	adc    edx,0xffffffff
c0004462:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004466:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000446a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004472:	be 22 00 00 00       	mov    esi,0x22
c0004477:	31 ff                	xor    edi,edi
c0004479:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004481:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c0004489:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0004491:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004495:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000449b:	75 0e                	jne    c00044ab <create_partition+0xca>
c000449d:	b9 00 02 00 00       	mov    ecx,0x200
c00044a2:	31 d2                	xor    edx,edx
c00044a4:	89 d8                	mov    eax,ebx
c00044a6:	e8 fa d5 ff ff       	call   c0001aa5 <mem_set>
c00044ab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00044af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044b7:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044ba:	0f 84 23 01 00 00    	je     c00045e3 <create_partition+0x202>
c00044c0:	89 f0                	mov    eax,esi
c00044c2:	89 fa                	mov    edx,edi
c00044c4:	05 ff 07 00 00       	add    eax,0x7ff
c00044c9:	83 d2 00             	adc    edx,0x0
c00044cc:	89 c1                	mov    ecx,eax
c00044ce:	89 d7                	mov    edi,edx
c00044d0:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044d6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00044da:	89 ce                	mov    esi,ecx
c00044dc:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00044e0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00044e4:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00044e8:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c00044eb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00044f2:	b8 64 00 00 00       	mov    eax,0x64
c00044f7:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00044fa:	b8 00 00 00 00       	mov    eax,0x0
c00044ff:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004503:	72 41                	jb     c0004546 <create_partition+0x165>
c0004505:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004509:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000450d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004511:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004516:	01 c1                	add    ecx,eax
c0004518:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000451c:	f7 24 24             	mul    DWORD PTR [esp]
c000451f:	6a 00                	push   0x0
c0004521:	01 ca                	add    edx,ecx
c0004523:	6a 64                	push   0x64
c0004525:	52                   	push   edx
c0004526:	50                   	push   eax
c0004527:	e8 90 0d 02 00       	call   c00252bc <__udivdi3>
c000452c:	83 c4 10             	add    esp,0x10
c000452f:	05 ff 07 00 00       	add    eax,0x7ff
c0004534:	83 d2 00             	adc    edx,0x0
c0004537:	89 c1                	mov    ecx,eax
c0004539:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000453d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004543:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004546:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004549:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000454d:	01 f0                	add    eax,esi
c000454f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004553:	11 fa                	adc    edx,edi
c0004555:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0004559:	19 d1                	sbb    ecx,edx
c000455b:	73 2e                	jae    c000458b <create_partition+0x1aa>
c000455d:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004561:	89 f8                	mov    eax,edi
c0004563:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000456a:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c000456e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004576:	73 6b                	jae    c00045e3 <create_partition+0x202>
c0004578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000457c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004580:	29 f0                	sub    eax,esi
c0004582:	19 fa                	sbb    edx,edi
c0004584:	89 04 24             	mov    DWORD PTR [esp],eax
c0004587:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000458b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000458f:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004592:	74 4f                	je     c00045e3 <create_partition+0x202>
c0004594:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0004597:	b9 10 00 00 00       	mov    ecx,0x10
c000459c:	ba 10 7d 02 c0       	mov    edx,0xc0027d10
c00045a1:	e8 ea d4 ff ff       	call   c0001a90 <mem_cpy>
c00045a6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00045aa:	b9 10 00 00 00       	mov    ecx,0x10
c00045af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045b3:	e8 2c db ff ff       	call   c00020e4 <make_rand>
c00045b8:	89 f2                	mov    edx,esi
c00045ba:	89 f9                	mov    ecx,edi
c00045bc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00045c0:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00045c4:	e8 c1 d4 ff ff       	call   c0001a8a <st_qword>
c00045c9:	03 34 24             	add    esi,DWORD PTR [esp]
c00045cc:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00045d0:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00045d4:	89 f2                	mov    edx,esi
c00045d6:	89 f9                	mov    ecx,edi
c00045d8:	83 c2 ff             	add    edx,0xffffffff
c00045db:	83 d1 ff             	adc    ecx,0xffffffff
c00045de:	e8 a7 d4 ff ff       	call   c0001a8a <st_qword>
c00045e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00045e7:	83 e8 80             	sub    eax,0xffffff80
c00045ea:	89 c5                	mov    ebp,eax
c00045ec:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00045f0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045f6:	75 6b                	jne    c0004663 <create_partition+0x282>
c00045f8:	45                   	inc    ebp
c00045f9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045fd:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004602:	e8 39 da ff ff       	call   c0002040 <crc32>
c0004607:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000460d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004611:	75 e5                	jne    c00045f8 <create_partition+0x217>
c0004613:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004617:	31 d2                	xor    edx,edx
c0004619:	83 ec 0c             	sub    esp,0xc
c000461c:	c1 ed 09             	shr    ebp,0x9
c000461f:	6a 01                	push   0x1
c0004621:	8d 45 02             	lea    eax,[ebp+0x2]
c0004624:	52                   	push   edx
c0004625:	50                   	push   eax
c0004626:	53                   	push   ebx
c0004627:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000462b:	e8 ac d3 ff ff       	call   c00019dc <disk_write>
c0004630:	83 c4 20             	add    esp,0x20
c0004633:	85 c0                	test   eax,eax
c0004635:	0f 85 d7 fd ff ff    	jne    c0004412 <create_partition+0x31>
c000463b:	83 ec 0c             	sub    esp,0xc
c000463e:	31 d2                	xor    edx,edx
c0004640:	6a 01                	push   0x1
c0004642:	89 e8                	mov    eax,ebp
c0004644:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004648:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000464c:	52                   	push   edx
c000464d:	50                   	push   eax
c000464e:	53                   	push   ebx
c000464f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004653:	e8 84 d3 ff ff       	call   c00019dc <disk_write>
c0004658:	83 c4 20             	add    esp,0x20
c000465b:	85 c0                	test   eax,eax
c000465d:	0f 85 af fd ff ff    	jne    c0004412 <create_partition+0x31>
c0004663:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004667:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000466b:	3d 00 40 00 00       	cmp    eax,0x4000
c0004670:	74 0d                	je     c000467f <create_partition+0x29e>
c0004672:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0004676:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000467a:	e9 12 fe ff ff       	jmp    c0004491 <create_partition+0xb0>
c000467f:	31 d2                	xor    edx,edx
c0004681:	b9 00 02 00 00       	mov    ecx,0x200
c0004686:	89 d8                	mov    eax,ebx
c0004688:	8d 6b 20             	lea    ebp,[ebx+0x20]
c000468b:	e8 15 d4 ff ff       	call   c0001aa5 <mem_set>
c0004690:	8d 7b 48             	lea    edi,[ebx+0x48]
c0004693:	b9 10 00 00 00       	mov    ecx,0x10
c0004698:	ba 00 7c 02 c0       	mov    edx,0xc0027c00
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 ec d3 ff ff       	call   c0001a90 <mem_cpy>
c00046a4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00046a8:	8d 43 58             	lea    eax,[ebx+0x58]
c00046ab:	f7 d2                	not    edx
c00046ad:	e8 d5 d3 ff ff       	call   c0001a87 <st_dword>
c00046b2:	8d 43 18             	lea    eax,[ebx+0x18]
c00046b5:	31 c9                	xor    ecx,ecx
c00046b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00046ba:	ba 01 00 00 00       	mov    edx,0x1
c00046bf:	e8 c6 d3 ff ff       	call   c0001a8a <st_qword>
c00046c4:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046c8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046cc:	83 c2 ff             	add    edx,0xffffffff
c00046cf:	89 e8                	mov    eax,ebp
c00046d1:	83 d1 ff             	adc    ecx,0xffffffff
c00046d4:	e8 b1 d3 ff ff       	call   c0001a8a <st_qword>
c00046d9:	31 c9                	xor    ecx,ecx
c00046db:	8d 43 28             	lea    eax,[ebx+0x28]
c00046de:	ba 22 00 00 00       	mov    edx,0x22
c00046e3:	e8 a2 d3 ff ff       	call   c0001a8a <st_qword>
c00046e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00046ec:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00046f0:	83 c2 de             	add    edx,0xffffffde
c00046f3:	8d 43 30             	lea    eax,[ebx+0x30]
c00046f6:	83 d1 ff             	adc    ecx,0xffffffff
c00046f9:	31 f6                	xor    esi,esi
c00046fb:	e8 8a d3 ff ff       	call   c0001a8a <st_qword>
c0004700:	8d 43 54             	lea    eax,[ebx+0x54]
c0004703:	ba 80 00 00 00       	mov    edx,0x80
c0004708:	e8 7a d3 ff ff       	call   c0001a87 <st_dword>
c000470d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004710:	ba 80 00 00 00       	mov    edx,0x80
c0004715:	e8 6d d3 ff ff       	call   c0001a87 <st_dword>
c000471a:	ba 02 00 00 00       	mov    edx,0x2
c000471f:	89 f8                	mov    eax,edi
c0004721:	e8 61 d3 ff ff       	call   c0001a87 <st_dword>
c0004726:	8d 53 38             	lea    edx,[ebx+0x38]
c0004729:	b9 10 00 00 00       	mov    ecx,0x10
c000472e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004732:	e8 ad d9 ff ff       	call   c00020e4 <make_rand>
c0004737:	83 c8 ff             	or     eax,0xffffffff
c000473a:	46                   	inc    esi
c000473b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004740:	e8 fb d8 ff ff       	call   c0002040 <crc32>
c0004745:	83 fe 5c             	cmp    esi,0x5c
c0004748:	75 f0                	jne    c000473a <create_partition+0x359>
c000474a:	f7 d0                	not    eax
c000474c:	8d 73 10             	lea    esi,[ebx+0x10]
c000474f:	89 c2                	mov    edx,eax
c0004751:	89 f0                	mov    eax,esi
c0004753:	e8 2f d3 ff ff       	call   c0001a87 <st_dword>
c0004758:	83 ec 0c             	sub    esp,0xc
c000475b:	6a 01                	push   0x1
c000475d:	6a 00                	push   0x0
c000475f:	6a 01                	push   0x1
c0004761:	53                   	push   ebx
c0004762:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004766:	e8 71 d2 ff ff       	call   c00019dc <disk_write>
c000476b:	83 c4 20             	add    esp,0x20
c000476e:	85 c0                	test   eax,eax
c0004770:	0f 85 9c fc ff ff    	jne    c0004412 <create_partition+0x31>
c0004776:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000477a:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000477e:	83 c2 ff             	add    edx,0xffffffff
c0004781:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004784:	83 d1 ff             	adc    ecx,0xffffffff
c0004787:	e8 fe d2 ff ff       	call   c0001a8a <st_qword>
c000478c:	ba 01 00 00 00       	mov    edx,0x1
c0004791:	31 c9                	xor    ecx,ecx
c0004793:	89 e8                	mov    eax,ebp
c0004795:	e8 f0 d2 ff ff       	call   c0001a8a <st_qword>
c000479a:	89 f8                	mov    eax,edi
c000479c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00047a0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a4:	31 ff                	xor    edi,edi
c00047a6:	e8 df d2 ff ff       	call   c0001a8a <st_qword>
c00047ab:	89 f0                	mov    eax,esi
c00047ad:	31 d2                	xor    edx,edx
c00047af:	e8 d3 d2 ff ff       	call   c0001a87 <st_dword>
c00047b4:	83 c8 ff             	or     eax,0xffffffff
c00047b7:	47                   	inc    edi
c00047b8:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00047bd:	e8 7e d8 ff ff       	call   c0002040 <crc32>
c00047c2:	83 ff 5c             	cmp    edi,0x5c
c00047c5:	75 f0                	jne    c00047b7 <create_partition+0x3d6>
c00047c7:	f7 d0                	not    eax
c00047c9:	89 c2                	mov    edx,eax
c00047cb:	89 f0                	mov    eax,esi
c00047cd:	e8 b5 d2 ff ff       	call   c0001a87 <st_dword>
c00047d2:	83 ec 0c             	sub    esp,0xc
c00047d5:	6a 01                	push   0x1
c00047d7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00047db:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00047df:	83 c0 ff             	add    eax,0xffffffff
c00047e2:	83 d2 ff             	adc    edx,0xffffffff
c00047e5:	52                   	push   edx
c00047e6:	50                   	push   eax
c00047e7:	53                   	push   ebx
c00047e8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00047ec:	e8 eb d1 ff ff       	call   c00019dc <disk_write>
c00047f1:	83 c4 20             	add    esp,0x20
c00047f4:	85 c0                	test   eax,eax
c00047f6:	0f 85 16 fc ff ff    	jne    c0004412 <create_partition+0x31>
c00047fc:	31 d2                	xor    edx,edx
c00047fe:	89 d8                	mov    eax,ebx
c0004800:	b9 00 02 00 00       	mov    ecx,0x200
c0004805:	e8 9b d2 ff ff       	call   c0001aa5 <mem_set>
c000480a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004810:	b9 10 00 00 00       	mov    ecx,0x10
c0004815:	ba 10 7c 02 c0       	mov    edx,0xc0027c10
c000481a:	e8 71 d2 ff ff       	call   c0001a90 <mem_cpy>
c000481f:	e9 21 01 00 00       	jmp    c0004945 <create_partition+0x564>
c0004824:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004828:	b9 05 00 00 00       	mov    ecx,0x5
c000482d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004830:	bf 08 00 00 00       	mov    edi,0x8
c0004835:	89 f8                	mov    eax,edi
c0004837:	31 d2                	xor    edx,edx
c0004839:	0f b6 f0             	movzx  esi,al
c000483c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000483f:	f7 f6                	div    esi
c0004841:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004846:	76 0a                	jbe    c0004852 <create_partition+0x471>
c0004848:	d1 e7                	shl    edi,1
c000484a:	49                   	dec    ecx
c000484b:	75 e8                	jne    c0004835 <create_partition+0x454>
c000484d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004852:	b9 00 02 00 00       	mov    ecx,0x200
c0004857:	31 d2                	xor    edx,edx
c0004859:	89 d8                	mov    eax,ebx
c000485b:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004861:	e8 3f d2 ff ff       	call   c0001aa5 <mem_set>
c0004866:	b9 64 00 00 00       	mov    ecx,0x64
c000486b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000486e:	31 d2                	xor    edx,edx
c0004870:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004878:	f7 f1                	div    ecx
c000487a:	b9 3f 00 00 00       	mov    ecx,0x3f
c000487f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004883:	89 f8                	mov    eax,edi
c0004885:	0f b6 c0             	movzx  eax,al
c0004888:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000488c:	e9 80 00 00 00       	jmp    c0004911 <create_partition+0x530>
c0004891:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004894:	29 cf                	sub    edi,ecx
c0004896:	89 ca                	mov    edx,ecx
c0004898:	89 f0                	mov    eax,esi
c000489a:	bd 3f 00 00 00       	mov    ebp,0x3f
c000489f:	e8 e3 d1 ff ff       	call   c0001a87 <st_dword>
c00048a4:	8d 46 04             	lea    eax,[esi+0x4]
c00048a7:	89 fa                	mov    edx,edi
c00048a9:	83 c6 10             	add    esi,0x10
c00048ac:	e8 d6 d1 ff ff       	call   c0001a87 <st_dword>
c00048b1:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00048b5:	31 d2                	xor    edx,edx
c00048b7:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c00048ba:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c00048be:	89 c8                	mov    eax,ecx
c00048c0:	01 f9                	add    ecx,edi
c00048c2:	f7 f5                	div    ebp
c00048c4:	89 d5                	mov    ebp,edx
c00048c6:	31 d2                	xor    edx,edx
c00048c8:	45                   	inc    ebp
c00048c9:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c00048cd:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c00048d0:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c00048d3:	89 c2                	mov    edx,eax
c00048d5:	8d 41 ff             	lea    eax,[ecx-0x1]
c00048d8:	c1 ea 02             	shr    edx,0x2
c00048db:	83 e2 c0             	and    edx,0xffffffc0
c00048de:	09 ea                	or     edx,ebp
c00048e0:	bd 3f 00 00 00       	mov    ebp,0x3f
c00048e5:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c00048e8:	31 d2                	xor    edx,edx
c00048ea:	f7 f5                	div    ebp
c00048ec:	89 d7                	mov    edi,edx
c00048ee:	31 d2                	xor    edx,edx
c00048f0:	47                   	inc    edi
c00048f1:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c00048f5:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c00048f8:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c00048fb:	89 c5                	mov    ebp,eax
c00048fd:	c1 ed 02             	shr    ebp,0x2
c0004900:	83 e5 c0             	and    ebp,0xffffffc0
c0004903:	09 ef                	or     edi,ebp
c0004905:	89 fa                	mov    edx,edi
c0004907:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c000490a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c000490f:	74 34                	je     c0004945 <create_partition+0x564>
c0004911:	85 c9                	test   ecx,ecx
c0004913:	74 30                	je     c0004945 <create_partition+0x564>
c0004915:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004918:	76 2b                	jbe    c0004945 <create_partition+0x564>
c000491a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000491e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004922:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004925:	83 ff 64             	cmp    edi,0x64
c0004928:	76 4b                	jbe    c0004975 <create_partition+0x594>
c000492a:	89 f8                	mov    eax,edi
c000492c:	01 c8                	add    eax,ecx
c000492e:	0f 82 5d ff ff ff    	jb     c0004891 <create_partition+0x4b0>
c0004934:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004937:	0f 87 54 ff ff ff    	ja     c0004891 <create_partition+0x4b0>
c000493d:	85 ff                	test   edi,edi
c000493f:	0f 85 51 ff ff ff    	jne    c0004896 <create_partition+0x4b5>
c0004945:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000494b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004950:	e8 2e d1 ff ff       	call   c0001a83 <st_word>
c0004955:	83 ec 0c             	sub    esp,0xc
c0004958:	6a 01                	push   0x1
c000495a:	6a 00                	push   0x0
c000495c:	6a 00                	push   0x0
c000495e:	53                   	push   ebx
c000495f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004963:	e8 74 d0 ff ff       	call   c00019dc <disk_write>
c0004968:	83 c4 20             	add    esp,0x20
c000496b:	85 c0                	test   eax,eax
c000496d:	0f 95 c0             	setne  al
c0004970:	0f b6 c0             	movzx  eax,al
c0004973:	eb 0e                	jmp    c0004983 <create_partition+0x5a2>
c0004975:	74 07                	je     c000497e <create_partition+0x59d>
c0004977:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c000497c:	eb ac                	jmp    c000492a <create_partition+0x549>
c000497e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004981:	eb a7                	jmp    c000492a <create_partition+0x549>
c0004983:	83 c4 5c             	add    esp,0x5c
c0004986:	5b                   	pop    ebx
c0004987:	5e                   	pop    esi
c0004988:	5f                   	pop    edi
c0004989:	5d                   	pop    ebp
c000498a:	c3                   	ret    

c000498b <get_fileinfo>:
c000498b:	55                   	push   ebp
c000498c:	57                   	push   edi
c000498d:	56                   	push   esi
c000498e:	53                   	push   ebx
c000498f:	83 ec 1c             	sub    esp,0x1c
c0004992:	8b 30                	mov    esi,DWORD PTR [eax]
c0004994:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004998:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000499c:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c000499f:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c00049a2:	0f 84 dc 01 00 00    	je     c0004b84 <get_fileinfo+0x1f9>
c00049a8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00049ab:	75 0f                	jne    c00049bc <get_fileinfo+0x31>
c00049ad:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049b0:	83 c4 1c             	add    esp,0x1c
c00049b3:	5b                   	pop    ebx
c00049b4:	5e                   	pop    esi
c00049b5:	5f                   	pop    edi
c00049b6:	5d                   	pop    ebp
c00049b7:	e9 58 d5 ff ff       	jmp    c0001f14 <get_xfileinfo>
c00049bc:	89 d3                	mov    ebx,edx
c00049be:	89 c6                	mov    esi,eax
c00049c0:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c00049c4:	74 6a                	je     c0004a30 <get_fileinfo+0xa5>
c00049c6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00049ce:	31 ed                	xor    ebp,ebp
c00049d0:	31 ff                	xor    edi,edi
c00049d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00049d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00049dd:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c00049e1:	66 85 d2             	test   dx,dx
c00049e4:	74 3e                	je     c0004a24 <get_fileinfo+0x99>
c00049e6:	66 85 ed             	test   bp,bp
c00049e9:	75 0c                	jne    c00049f7 <get_fileinfo+0x6c>
c00049eb:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c00049f1:	66 3d ff 07          	cmp    ax,0x7ff
c00049f5:	76 22                	jbe    c0004a19 <get_fileinfo+0x8e>
c00049f7:	b9 ff 00 00 00       	mov    ecx,0xff
c00049fc:	89 e8                	mov    eax,ebp
c00049fe:	29 f9                	sub    ecx,edi
c0004a00:	c1 e0 10             	shl    eax,0x10
c0004a03:	09 d0                	or     eax,edx
c0004a05:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004a09:	e8 a3 d1 ff ff       	call   c0001bb1 <put_utf>
c0004a0e:	84 c0                	test   al,al
c0004a10:	74 10                	je     c0004a22 <get_fileinfo+0x97>
c0004a12:	0f b6 c0             	movzx  eax,al
c0004a15:	31 d2                	xor    edx,edx
c0004a17:	01 c7                	add    edi,eax
c0004a19:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a1e:	89 d5                	mov    ebp,edx
c0004a20:	eb b0                	jmp    c00049d2 <get_fileinfo+0x47>
c0004a22:	31 ff                	xor    edi,edi
c0004a24:	66 85 ed             	test   bp,bp
c0004a27:	74 02                	je     c0004a2b <get_fileinfo+0xa0>
c0004a29:	31 ff                	xor    edi,edi
c0004a2b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a30:	31 ff                	xor    edi,edi
c0004a32:	31 c9                	xor    ecx,ecx
c0004a34:	83 f9 0a             	cmp    ecx,0xa
c0004a37:	0f 87 ad 00 00 00    	ja     c0004aea <get_fileinfo+0x15f>
c0004a3d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a40:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a43:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a47:	66 83 fa 20          	cmp    dx,0x20
c0004a4b:	0f 84 92 00 00 00    	je     c0004ae3 <get_fileinfo+0x158>
c0004a51:	66 83 fa 05          	cmp    dx,0x5
c0004a55:	75 05                	jne    c0004a5c <get_fileinfo+0xd1>
c0004a57:	ba e5 00 00 00       	mov    edx,0xe5
c0004a5c:	83 ff 0b             	cmp    edi,0xb
c0004a5f:	77 0b                	ja     c0004a6c <get_fileinfo+0xe1>
c0004a61:	83 fd 09             	cmp    ebp,0x9
c0004a64:	75 06                	jne    c0004a6c <get_fileinfo+0xe1>
c0004a66:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004a6b:	47                   	inc    edi
c0004a6c:	0f b7 c2             	movzx  eax,dx
c0004a6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a73:	e8 6d d0 ff ff       	call   c0001ae5 <dbc_1st>
c0004a78:	85 c0                	test   eax,eax
c0004a7a:	74 2f                	je     c0004aab <get_fileinfo+0x120>
c0004a7c:	83 fd 08             	cmp    ebp,0x8
c0004a7f:	74 2a                	je     c0004aab <get_fileinfo+0x120>
c0004a81:	83 fd 0b             	cmp    ebp,0xb
c0004a84:	74 25                	je     c0004aab <get_fileinfo+0x120>
c0004a86:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a89:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004a8d:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004a91:	e8 52 d0 ff ff       	call   c0001ae8 <dbc_2nd>
c0004a96:	85 c0                	test   eax,eax
c0004a98:	74 11                	je     c0004aab <get_fileinfo+0x120>
c0004a9a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a9e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004aa3:	c1 e2 08             	shl    edx,0x8
c0004aa6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004aa9:	09 c2                	or     edx,eax
c0004aab:	0f b7 d2             	movzx  edx,dx
c0004aae:	50                   	push   eax
c0004aaf:	50                   	push   eax
c0004ab0:	68 b5 01 00 00       	push   0x1b5
c0004ab5:	52                   	push   edx
c0004ab6:	e8 46 38 00 00       	call   c0008301 <ff_oem2uni>
c0004abb:	83 c4 10             	add    esp,0x10
c0004abe:	66 85 c0             	test   ax,ax
c0004ac1:	75 04                	jne    c0004ac7 <get_fileinfo+0x13c>
c0004ac3:	31 ff                	xor    edi,edi
c0004ac5:	eb 23                	jmp    c0004aea <get_fileinfo+0x15f>
c0004ac7:	b9 0c 00 00 00       	mov    ecx,0xc
c0004acc:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ad0:	29 f9                	sub    ecx,edi
c0004ad2:	0f b7 c0             	movzx  eax,ax
c0004ad5:	e8 d7 d0 ff ff       	call   c0001bb1 <put_utf>
c0004ada:	84 c0                	test   al,al
c0004adc:	74 e5                	je     c0004ac3 <get_fileinfo+0x138>
c0004ade:	0f b6 c0             	movzx  eax,al
c0004ae1:	01 c7                	add    edi,eax
c0004ae3:	89 e9                	mov    ecx,ebp
c0004ae5:	e9 4a ff ff ff       	jmp    c0004a34 <get_fileinfo+0xa9>
c0004aea:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004aef:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004af3:	75 54                	jne    c0004b49 <get_fileinfo+0x1be>
c0004af5:	85 ff                	test   edi,edi
c0004af7:	75 0b                	jne    c0004b04 <get_fileinfo+0x179>
c0004af9:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004afd:	ba 01 00 00 00       	mov    edx,0x1
c0004b02:	eb 33                	jmp    c0004b37 <get_fileinfo+0x1ac>
c0004b04:	b1 08                	mov    cl,0x8
c0004b06:	31 d2                	xor    edx,edx
c0004b08:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b0e:	84 c0                	test   al,al
c0004b10:	74 25                	je     c0004b37 <get_fileinfo+0x1ac>
c0004b12:	66 83 f8 2e          	cmp    ax,0x2e
c0004b16:	74 16                	je     c0004b2e <get_fileinfo+0x1a3>
c0004b18:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b1b:	66 83 ff 19          	cmp    di,0x19
c0004b1f:	77 0f                	ja     c0004b30 <get_fileinfo+0x1a5>
c0004b21:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b24:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b27:	74 07                	je     c0004b30 <get_fileinfo+0x1a5>
c0004b29:	83 c0 20             	add    eax,0x20
c0004b2c:	eb 02                	jmp    c0004b30 <get_fileinfo+0x1a5>
c0004b2e:	b1 10                	mov    cl,0x10
c0004b30:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b34:	42                   	inc    edx
c0004b35:	eb d1                	jmp    c0004b08 <get_fileinfo+0x17d>
c0004b37:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b3c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b3f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b43:	75 04                	jne    c0004b49 <get_fileinfo+0x1be>
c0004b45:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b49:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b4c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b4f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b55:	83 c0 1c             	add    eax,0x1c
c0004b58:	e8 c1 ce ff ff       	call   c0001a1e <ld_dword>
c0004b5d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004b64:	89 03                	mov    DWORD PTR [ebx],eax
c0004b66:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b69:	83 c0 16             	add    eax,0x16
c0004b6c:	e8 a0 ce ff ff       	call   c0001a11 <ld_word>
c0004b71:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004b75:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b78:	83 c0 18             	add    eax,0x18
c0004b7b:	e8 91 ce ff ff       	call   c0001a11 <ld_word>
c0004b80:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004b84:	83 c4 1c             	add    esp,0x1c
c0004b87:	5b                   	pop    ebx
c0004b88:	5e                   	pop    esi
c0004b89:	5f                   	pop    edi
c0004b8a:	5d                   	pop    ebp
c0004b8b:	c3                   	ret    

c0004b8c <ld_clust.isra.0>:
c0004b8c:	56                   	push   esi
c0004b8d:	89 c6                	mov    esi,eax
c0004b8f:	53                   	push   ebx
c0004b90:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004b93:	89 d3                	mov    ebx,edx
c0004b95:	e8 77 ce ff ff       	call   c0001a11 <ld_word>
c0004b9a:	0f b7 c8             	movzx  ecx,ax
c0004b9d:	89 f0                	mov    eax,esi
c0004b9f:	3c 03                	cmp    al,0x3
c0004ba1:	75 0d                	jne    c0004bb0 <ld_clust.isra.0+0x24>
c0004ba3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004ba6:	e8 66 ce ff ff       	call   c0001a11 <ld_word>
c0004bab:	c1 e0 10             	shl    eax,0x10
c0004bae:	09 c1                	or     ecx,eax
c0004bb0:	89 c8                	mov    eax,ecx
c0004bb2:	5b                   	pop    ebx
c0004bb3:	5e                   	pop    esi
c0004bb4:	c3                   	ret    

c0004bb5 <st_clust.isra.1>:
c0004bb5:	56                   	push   esi
c0004bb6:	89 c6                	mov    esi,eax
c0004bb8:	53                   	push   ebx
c0004bb9:	89 d3                	mov    ebx,edx
c0004bbb:	0f b7 d1             	movzx  edx,cx
c0004bbe:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004bc1:	e8 bd ce ff ff       	call   c0001a83 <st_word>
c0004bc6:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004bc9:	75 0f                	jne    c0004bda <st_clust.isra.1+0x25>
c0004bcb:	c1 e9 10             	shr    ecx,0x10
c0004bce:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bd1:	89 ca                	mov    edx,ecx
c0004bd3:	5b                   	pop    ebx
c0004bd4:	5e                   	pop    esi
c0004bd5:	e9 a9 ce ff ff       	jmp    c0001a83 <st_word>
c0004bda:	5b                   	pop    ebx
c0004bdb:	5e                   	pop    esi
c0004bdc:	c3                   	ret    

c0004bdd <init_alloc_info.isra.2>:
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	89 c6                	mov    esi,eax
c0004be1:	89 d3                	mov    ebx,edx
c0004be3:	51                   	push   ecx
c0004be4:	8b 00                	mov    eax,DWORD PTR [eax]
c0004be6:	83 c0 34             	add    eax,0x34
c0004be9:	e8 30 ce ff ff       	call   c0001a1e <ld_dword>
c0004bee:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004bf1:	8b 06                	mov    eax,DWORD PTR [esi]
c0004bf3:	83 c0 38             	add    eax,0x38
c0004bf6:	e8 3b ce ff ff       	call   c0001a36 <ld_qword>
c0004bfb:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004bfe:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004c01:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c03:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004c06:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c0d:	83 e0 02             	and    eax,0x2
c0004c10:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c13:	5b                   	pop    ebx
c0004c14:	5b                   	pop    ebx
c0004c15:	5e                   	pop    esi
c0004c16:	c3                   	ret    

c0004c17 <follow_path>:
c0004c17:	56                   	push   esi
c0004c18:	53                   	push   ebx
c0004c19:	89 c3                	mov    ebx,eax
c0004c1b:	83 ec 14             	sub    esp,0x14
c0004c1e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c22:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c28:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c2a:	80 fa 5c             	cmp    dl,0x5c
c0004c2d:	75 07                	jne    c0004c36 <follow_path+0x1f>
c0004c2f:	40                   	inc    eax
c0004c30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c34:	eb ee                	jmp    c0004c24 <follow_path+0xd>
c0004c36:	80 fa 2f             	cmp    dl,0x2f
c0004c39:	74 f4                	je     c0004c2f <follow_path+0x18>
c0004c3b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c42:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c49:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c4c:	77 52                	ja     c0004ca0 <follow_path+0x89>
c0004c4e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c52:	31 d2                	xor    edx,edx
c0004c54:	89 d8                	mov    eax,ebx
c0004c56:	e8 12 e3 ff ff       	call   c0002f6d <dir_sdi>
c0004c5b:	eb 7c                	jmp    c0004cd9 <follow_path+0xc2>
c0004c5d:	89 d8                	mov    eax,ebx
c0004c5f:	e8 6e f2 ff ff       	call   c0003ed2 <dir_find>
c0004c64:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004c67:	85 c0                	test   eax,eax
c0004c69:	75 46                	jne    c0004cb1 <follow_path+0x9a>
c0004c6b:	80 e2 04             	and    dl,0x4
c0004c6e:	75 69                	jne    c0004cd9 <follow_path+0xc2>
c0004c70:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004c74:	74 5e                	je     c0004cd4 <follow_path+0xbd>
c0004c76:	8a 06                	mov    al,BYTE PTR [esi]
c0004c78:	3c 04                	cmp    al,0x4
c0004c7a:	75 41                	jne    c0004cbd <follow_path+0xa6>
c0004c7c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004c7f:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004c83:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004c86:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004c89:	30 c0                	xor    al,al
c0004c8b:	09 d0                	or     eax,edx
c0004c8d:	89 da                	mov    edx,ebx
c0004c8f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004c92:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004c95:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004c98:	8d 46 10             	lea    eax,[esi+0x10]
c0004c9b:	e8 3d ff ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0004ca0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ca4:	89 d8                	mov    eax,ebx
c0004ca6:	e8 a9 ed ff ff       	call   c0003a54 <create_name>
c0004cab:	85 c0                	test   eax,eax
c0004cad:	74 ae                	je     c0004c5d <follow_path+0x46>
c0004caf:	eb 28                	jmp    c0004cd9 <follow_path+0xc2>
c0004cb1:	83 f8 04             	cmp    eax,0x4
c0004cb4:	75 23                	jne    c0004cd9 <follow_path+0xc2>
c0004cb6:	80 e2 04             	and    dl,0x4
c0004cb9:	74 19                	je     c0004cd4 <follow_path+0xbd>
c0004cbb:	eb 1c                	jmp    c0004cd9 <follow_path+0xc2>
c0004cbd:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004cc0:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004cc6:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004cca:	e8 bd fe ff ff       	call   c0004b8c <ld_clust.isra.0>
c0004ccf:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004cd2:	eb cc                	jmp    c0004ca0 <follow_path+0x89>
c0004cd4:	b8 05 00 00 00       	mov    eax,0x5
c0004cd9:	83 c4 14             	add    esp,0x14
c0004cdc:	5b                   	pop    ebx
c0004cdd:	5e                   	pop    esi
c0004cde:	c3                   	ret    

c0004cdf <f_mount>:
c0004cdf:	53                   	push   ebx
c0004ce0:	83 ec 18             	sub    esp,0x18
c0004ce3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004ce7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004ceb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cef:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004cf3:	e8 fb d2 ff ff       	call   c0001ff3 <get_ldnumber>
c0004cf8:	89 c2                	mov    edx,eax
c0004cfa:	b8 0b 00 00 00       	mov    eax,0xb
c0004cff:	85 d2                	test   edx,edx
c0004d01:	78 39                	js     c0004d3c <f_mount+0x5d>
c0004d03:	8b 04 95 e0 c7 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3820]
c0004d0a:	85 c0                	test   eax,eax
c0004d0c:	74 03                	je     c0004d11 <f_mount+0x32>
c0004d0e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d15:	85 c0                	test   eax,eax
c0004d17:	74 03                	je     c0004d1c <f_mount+0x3d>
c0004d19:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d20:	89 04 95 e0 c7 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3820],eax
c0004d27:	31 c0                	xor    eax,eax
c0004d29:	84 db                	test   bl,bl
c0004d2b:	74 0f                	je     c0004d3c <f_mount+0x5d>
c0004d2d:	31 c9                	xor    ecx,ecx
c0004d2f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d33:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d37:	e8 65 d7 ff ff       	call   c00024a1 <mount_volume>
c0004d3c:	83 c4 18             	add    esp,0x18
c0004d3f:	5b                   	pop    ebx
c0004d40:	c3                   	ret    

c0004d41 <f_open>:
c0004d41:	55                   	push   ebp
c0004d42:	bd 09 00 00 00       	mov    ebp,0x9
c0004d47:	57                   	push   edi
c0004d48:	56                   	push   esi
c0004d49:	53                   	push   ebx
c0004d4a:	83 ec 7c             	sub    esp,0x7c
c0004d4d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d54:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004d5b:	85 db                	test   ebx,ebx
c0004d5d:	0f 84 10 04 00 00    	je     c0005173 <f_open+0x432>
c0004d63:	89 fe                	mov    esi,edi
c0004d65:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d69:	83 e6 3f             	and    esi,0x3f
c0004d6c:	89 f0                	mov    eax,esi
c0004d6e:	0f b6 c8             	movzx  ecx,al
c0004d71:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004d78:	e8 24 d7 ff ff       	call   c00024a1 <mount_volume>
c0004d7d:	89 c5                	mov    ebp,eax
c0004d7f:	85 c0                	test   eax,eax
c0004d81:	0f 85 e6 03 00 00    	jne    c000516d <f_open+0x42c>
c0004d87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d8b:	bd 11 00 00 00       	mov    ebp,0x11
c0004d90:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d94:	83 ec 0c             	sub    esp,0xc
c0004d97:	68 60 04 00 00       	push   0x460
c0004d9c:	e8 a3 34 00 00       	call   c0008244 <ff_memalloc>
c0004da1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004da5:	83 c4 10             	add    esp,0x10
c0004da8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004dad:	0f 84 c0 03 00 00    	je     c0005173 <f_open+0x432>
c0004db3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004db7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004dbb:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004dc1:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004dc4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004dc7:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004dce:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004dd2:	e8 40 fe ff ff       	call   c0004c17 <follow_path>
c0004dd7:	89 c5                	mov    ebp,eax
c0004dd9:	85 c0                	test   eax,eax
c0004ddb:	75 0c                	jne    c0004de9 <f_open+0xa8>
c0004ddd:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004de2:	79 05                	jns    c0004de9 <f_open+0xa8>
c0004de4:	bd 06 00 00 00       	mov    ebp,0x6
c0004de9:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004def:	0f 84 84 01 00 00    	je     c0004f79 <f_open+0x238>
c0004df5:	85 ed                	test   ebp,ebp
c0004df7:	74 20                	je     c0004e19 <f_open+0xd8>
c0004df9:	83 fd 04             	cmp    ebp,0x4
c0004dfc:	0f 85 58 03 00 00    	jne    c000515a <f_open+0x419>
c0004e02:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e06:	83 ce 08             	or     esi,0x8
c0004e09:	e8 8a f2 ff ff       	call   c0004098 <dir_register>
c0004e0e:	89 c5                	mov    ebp,eax
c0004e10:	85 c0                	test   eax,eax
c0004e12:	74 2f                	je     c0004e43 <f_open+0x102>
c0004e14:	e9 41 03 00 00       	jmp    c000515a <f_open+0x419>
c0004e19:	bd 07 00 00 00       	mov    ebp,0x7
c0004e1e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e23:	0f 85 31 03 00 00    	jne    c000515a <f_open+0x419>
c0004e29:	bd 08 00 00 00       	mov    ebp,0x8
c0004e2e:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e34:	0f 85 20 03 00 00    	jne    c000515a <f_open+0x419>
c0004e3a:	83 e7 08             	and    edi,0x8
c0004e3d:	0f 84 65 01 00 00    	je     c0004fa8 <f_open+0x267>
c0004e43:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e47:	8a 02                	mov    al,BYTE PTR [edx]
c0004e49:	3c 04                	cmp    al,0x4
c0004e4b:	0f 85 97 00 00 00    	jne    c0004ee8 <f_open+0x1a7>
c0004e51:	8d 42 10             	lea    eax,[edx+0x10]
c0004e54:	89 13                	mov    DWORD PTR [ebx],edx
c0004e56:	89 da                	mov    edx,ebx
c0004e58:	e8 80 fd ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0004e5d:	31 d2                	xor    edx,edx
c0004e5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e63:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004e68:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e6b:	83 c0 02             	add    eax,0x2
c0004e6e:	e8 32 cc ff ff       	call   c0001aa5 <mem_set>
c0004e73:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004e78:	31 d2                	xor    edx,edx
c0004e7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e7e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e81:	83 c0 26             	add    eax,0x26
c0004e84:	e8 1c cc ff ff       	call   c0001aa5 <mem_set>
c0004e89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e8d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004e90:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004e94:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e99:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e9c:	83 c0 08             	add    eax,0x8
c0004e9f:	e8 e3 cb ff ff       	call   c0001a87 <st_dword>
c0004ea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ea8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004eab:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004eaf:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004eb3:	e8 b7 ea ff ff       	call   c000396f <store_xdir>
c0004eb8:	89 c5                	mov    ebp,eax
c0004eba:	85 c0                	test   eax,eax
c0004ebc:	0f 85 98 02 00 00    	jne    c000515a <f_open+0x419>
c0004ec2:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004ec5:	85 d2                	test   edx,edx
c0004ec7:	0f 84 db 00 00 00    	je     c0004fa8 <f_open+0x267>
c0004ecd:	31 c9                	xor    ecx,ecx
c0004ecf:	89 d8                	mov    eax,ebx
c0004ed1:	e8 8e e3 ff ff       	call   c0003264 <remove_chain>
c0004ed6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004eda:	89 c5                	mov    ebp,eax
c0004edc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004edf:	48                   	dec    eax
c0004ee0:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004ee3:	e9 b8 00 00 00       	jmp    c0004fa0 <f_open+0x25f>
c0004ee8:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004eec:	89 ea                	mov    edx,ebp
c0004eee:	e8 99 fc ff ff       	call   c0004b8c <ld_clust.isra.0>
c0004ef3:	ba 00 00 21 50       	mov    edx,0x50210000
c0004ef8:	89 c7                	mov    edi,eax
c0004efa:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004efd:	e8 85 cb ff ff       	call   c0001a87 <st_dword>
c0004f02:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f06:	31 c9                	xor    ecx,ecx
c0004f08:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004f0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f10:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f14:	e8 9c fc ff ff       	call   c0004bb5 <st_clust.isra.1>
c0004f19:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f1d:	31 d2                	xor    edx,edx
c0004f1f:	83 c0 1c             	add    eax,0x1c
c0004f22:	e8 60 cb ff ff       	call   c0001a87 <st_dword>
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 ff                	test   edi,edi
c0004f2d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f31:	74 75                	je     c0004fa8 <f_open+0x267>
c0004f33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f37:	31 c9                	xor    ecx,ecx
c0004f39:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f3c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f3f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f43:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f47:	89 fa                	mov    edx,edi
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 12 e3 ff ff       	call   c0003264 <remove_chain>
c0004f52:	89 c5                	mov    ebp,eax
c0004f54:	85 c0                	test   eax,eax
c0004f56:	0f 85 fe 01 00 00    	jne    c000515a <f_open+0x419>
c0004f5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004f60:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004f64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f68:	4f                   	dec    edi
c0004f69:	e8 81 d2 ff ff       	call   c00021ef <move_window>
c0004f6e:	89 c5                	mov    ebp,eax
c0004f70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f74:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004f77:	eb 27                	jmp    c0004fa0 <f_open+0x25f>
c0004f79:	85 ed                	test   ebp,ebp
c0004f7b:	0f 85 d9 01 00 00    	jne    c000515a <f_open+0x419>
c0004f81:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004f85:	bd 04 00 00 00       	mov    ebp,0x4
c0004f8a:	a8 10                	test   al,0x10
c0004f8c:	0f 85 c8 01 00 00    	jne    c000515a <f_open+0x419>
c0004f92:	83 e7 02             	and    edi,0x2
c0004f95:	74 11                	je     c0004fa8 <f_open+0x267>
c0004f97:	bd 07 00 00 00       	mov    ebp,0x7
c0004f9c:	a8 01                	test   al,0x1
c0004f9e:	eb 02                	jmp    c0004fa2 <f_open+0x261>
c0004fa0:	85 ed                	test   ebp,ebp
c0004fa2:	0f 85 b2 01 00 00    	jne    c000515a <f_open+0x419>
c0004fa8:	f7 c6 08 00 00 00    	test   esi,0x8
c0004fae:	74 03                	je     c0004fb3 <f_open+0x272>
c0004fb0:	83 ce 40             	or     esi,0x40
c0004fb3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004fb7:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004fba:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004fbd:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004fc0:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004fc3:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004fc7:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004fca:	8a 02                	mov    al,BYTE PTR [edx]
c0004fcc:	3c 04                	cmp    al,0x4
c0004fce:	75 2a                	jne    c0004ffa <f_open+0x2b9>
c0004fd0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004fd4:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004fd9:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004fdc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004fe0:	30 c0                	xor    al,al
c0004fe2:	09 c8                	or     eax,ecx
c0004fe4:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004fe7:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0004feb:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004fee:	8d 42 10             	lea    eax,[edx+0x10]
c0004ff1:	89 da                	mov    edx,ebx
c0004ff3:	e8 e5 fb ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0004ff8:	eb 1c                	jmp    c0005016 <f_open+0x2d5>
c0004ffa:	89 fa                	mov    edx,edi
c0004ffc:	e8 8b fb ff ff       	call   c0004b8c <ld_clust.isra.0>
c0005001:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005004:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005007:	e8 12 ca ff ff       	call   c0001a1e <ld_dword>
c000500c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005013:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005016:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000501a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005021:	89 03                	mov    DWORD PTR [ebx],eax
c0005023:	31 d2                	xor    edx,edx
c0005025:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005029:	b9 00 02 00 00       	mov    ecx,0x200
c000502e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005032:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005036:	89 f0                	mov    eax,esi
c0005038:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000503f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005042:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005049:	8d 43 50             	lea    eax,[ebx+0x50]
c000504c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005053:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000505a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000505e:	e8 42 ca ff ff       	call   c0001aa5 <mem_set>
c0005063:	83 e6 20             	and    esi,0x20
c0005066:	75 07                	jne    c000506f <f_open+0x32e>
c0005068:	31 ed                	xor    ebp,ebp
c000506a:	e9 eb 00 00 00       	jmp    c000515a <f_open+0x419>
c000506f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005072:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005075:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005079:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000507d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005081:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005085:	74 e1                	je     c0005068 <f_open+0x327>
c0005087:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000508b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000508f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005092:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005095:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005099:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000509c:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00050a0:	31 ff                	xor    edi,edi
c00050a2:	c1 e5 09             	shl    ebp,0x9
c00050a5:	89 ee                	mov    esi,ebp
c00050a7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00050ab:	89 f8                	mov    eax,edi
c00050ad:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050b1:	73 22                	jae    c00050d5 <f_open+0x394>
c00050b3:	89 d8                	mov    eax,ebx
c00050b5:	e8 bd dc ff ff       	call   c0002d77 <get_fat>
c00050ba:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00050be:	89 c2                	mov    edx,eax
c00050c0:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00050c4:	83 f8 01             	cmp    eax,0x1
c00050c7:	76 10                	jbe    c00050d9 <f_open+0x398>
c00050c9:	83 f8 ff             	cmp    eax,0xffffffff
c00050cc:	75 d9                	jne    c00050a7 <f_open+0x366>
c00050ce:	bd 01 00 00 00       	mov    ebp,0x1
c00050d3:	eb 09                	jmp    c00050de <f_open+0x39d>
c00050d5:	31 ed                	xor    ebp,ebp
c00050d7:	eb 05                	jmp    c00050de <f_open+0x39d>
c00050d9:	bd 02 00 00 00       	mov    ebp,0x2
c00050de:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00050e1:	85 ed                	test   ebp,ebp
c00050e3:	75 75                	jne    c000515a <f_open+0x419>
c00050e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050e9:	25 ff 01 00 00       	and    eax,0x1ff
c00050ee:	0f 84 74 ff ff ff    	je     c0005068 <f_open+0x327>
c00050f4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00050f8:	bd 02 00 00 00       	mov    ebp,0x2
c00050fd:	89 c8                	mov    eax,ecx
c00050ff:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005103:	e8 a2 cb ff ff       	call   c0001caa <clst2sect>
c0005108:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000510c:	89 d7                	mov    edi,edx
c000510e:	09 c7                	or     edi,eax
c0005110:	74 48                	je     c000515a <f_open+0x419>
c0005112:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005116:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000511a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005122:	0f ac fe 09          	shrd   esi,edi,0x9
c0005126:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000512a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000512e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005131:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005135:	83 ec 0c             	sub    esp,0xc
c0005138:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000513b:	6a 01                	push   0x1
c000513d:	52                   	push   edx
c000513e:	50                   	push   eax
c000513f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005143:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005147:	50                   	push   eax
c0005148:	e8 79 c8 ff ff       	call   c00019c6 <disk_read>
c000514d:	83 c4 20             	add    esp,0x20
c0005150:	85 c0                	test   eax,eax
c0005152:	0f 95 c0             	setne  al
c0005155:	0f b6 c0             	movzx  eax,al
c0005158:	89 c5                	mov    ebp,eax
c000515a:	83 ec 0c             	sub    esp,0xc
c000515d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005161:	e8 f4 30 00 00       	call   c000825a <ff_memfree>
c0005166:	83 c4 10             	add    esp,0x10
c0005169:	85 ed                	test   ebp,ebp
c000516b:	74 06                	je     c0005173 <f_open+0x432>
c000516d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005173:	83 c4 7c             	add    esp,0x7c
c0005176:	89 e8                	mov    eax,ebp
c0005178:	5b                   	pop    ebx
c0005179:	5e                   	pop    esi
c000517a:	5f                   	pop    edi
c000517b:	5d                   	pop    ebp
c000517c:	c3                   	ret    

c000517d <f_read>:
c000517d:	55                   	push   ebp
c000517e:	57                   	push   edi
c000517f:	56                   	push   esi
c0005180:	53                   	push   ebx
c0005181:	83 ec 2c             	sub    esp,0x2c
c0005184:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005188:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000518c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005192:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005196:	89 d8                	mov    eax,ebx
c0005198:	e8 77 cf ff ff       	call   c0002114 <validate>
c000519d:	89 c5                	mov    ebp,eax
c000519f:	85 c0                	test   eax,eax
c00051a1:	0f 85 4c 02 00 00    	jne    c00053f3 <f_read+0x276>
c00051a7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00051ab:	85 ed                	test   ebp,ebp
c00051ad:	0f 85 40 02 00 00    	jne    c00053f3 <f_read+0x276>
c00051b3:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051b7:	0f 84 31 02 00 00    	je     c00053ee <f_read+0x271>
c00051bd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051c0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051c3:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00051c6:	bf 00 00 00 00       	mov    edi,0x0
c00051cb:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00051ce:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00051d2:	89 d1                	mov    ecx,edx
c00051d4:	19 f9                	sbb    ecx,edi
c00051d6:	0f 83 cf 00 00 00    	jae    c00052ab <f_read+0x12e>
c00051dc:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00051e0:	e9 c6 00 00 00       	jmp    c00052ab <f_read+0x12e>
c00051e5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00051e8:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00051eb:	89 d0                	mov    eax,edx
c00051ed:	25 ff 01 00 00       	and    eax,0x1ff
c00051f2:	0f 85 c9 01 00 00    	jne    c00053c1 <f_read+0x244>
c00051f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051fc:	89 d6                	mov    esi,edx
c00051fe:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005202:	89 cf                	mov    edi,ecx
c0005204:	48                   	dec    eax
c0005205:	0f ac fe 09          	shrd   esi,edi,0x9
c0005209:	21 f0                	and    eax,esi
c000520b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000520f:	0f 84 a6 00 00 00    	je     c00052bb <f_read+0x13e>
c0005215:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005219:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000521c:	89 c8                	mov    eax,ecx
c000521e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005221:	e8 84 ca ff ff       	call   c0001caa <clst2sect>
c0005226:	89 d7                	mov    edi,edx
c0005228:	09 c7                	or     edi,eax
c000522a:	0f 84 b4 00 00 00    	je     c00052e4 <f_read+0x167>
c0005230:	31 ff                	xor    edi,edi
c0005232:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005236:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005239:	01 c6                	add    esi,eax
c000523b:	11 d7                	adc    edi,edx
c000523d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005245:	0f 86 fd 00 00 00    	jbe    c0005348 <f_read+0x1cb>
c000524b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000524f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005253:	c1 e8 09             	shr    eax,0x9
c0005256:	89 04 24             	mov    DWORD PTR [esp],eax
c0005259:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000525d:	03 14 24             	add    edx,DWORD PTR [esp]
c0005260:	39 c2                	cmp    edx,eax
c0005262:	76 07                	jbe    c000526b <f_read+0xee>
c0005264:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005268:	89 04 24             	mov    DWORD PTR [esp],eax
c000526b:	83 ec 0c             	sub    esp,0xc
c000526e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005272:	57                   	push   edi
c0005273:	56                   	push   esi
c0005274:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005278:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000527c:	50                   	push   eax
c000527d:	e8 44 c7 ff ff       	call   c00019c6 <disk_read>
c0005282:	83 c4 20             	add    esp,0x20
c0005285:	85 c0                	test   eax,eax
c0005287:	75 6e                	jne    c00052f7 <f_read+0x17a>
c0005289:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000528d:	78 7e                	js     c000530d <f_read+0x190>
c000528f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005292:	c1 e6 09             	shl    esi,0x9
c0005295:	31 ff                	xor    edi,edi
c0005297:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000529b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000529f:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00052a3:	01 30                	add    DWORD PTR [eax],esi
c00052a5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00052a8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00052ab:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052b0:	0f 85 2f ff ff ff    	jne    c00051e5 <f_read+0x68>
c00052b6:	e9 38 01 00 00       	jmp    c00053f3 <f_read+0x276>
c00052bb:	89 c8                	mov    eax,ecx
c00052bd:	09 d0                	or     eax,edx
c00052bf:	75 05                	jne    c00052c6 <f_read+0x149>
c00052c1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00052c4:	eb 19                	jmp    c00052df <f_read+0x162>
c00052c6:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00052ca:	74 09                	je     c00052d5 <f_read+0x158>
c00052cc:	89 d8                	mov    eax,ebx
c00052ce:	e8 f8 c9 ff ff       	call   c0001ccb <clmt_clust>
c00052d3:	eb 0a                	jmp    c00052df <f_read+0x162>
c00052d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00052d8:	89 d8                	mov    eax,ebx
c00052da:	e8 98 da ff ff       	call   c0002d77 <get_fat>
c00052df:	83 f8 01             	cmp    eax,0x1
c00052e2:	77 0e                	ja     c00052f2 <f_read+0x175>
c00052e4:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00052e8:	bd 02 00 00 00       	mov    ebp,0x2
c00052ed:	e9 01 01 00 00       	jmp    c00053f3 <f_read+0x276>
c00052f2:	83 f8 ff             	cmp    eax,0xffffffff
c00052f5:	75 0e                	jne    c0005305 <f_read+0x188>
c00052f7:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00052fb:	bd 01 00 00 00       	mov    ebp,0x1
c0005300:	e9 ee 00 00 00       	jmp    c00053f3 <f_read+0x276>
c0005305:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005308:	e9 08 ff ff ff       	jmp    c0005215 <f_read+0x98>
c000530d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005310:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005313:	29 f0                	sub    eax,esi
c0005315:	19 fa                	sbb    edx,edi
c0005317:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000531a:	89 d7                	mov    edi,edx
c000531c:	ba 00 00 00 00       	mov    edx,0x0
c0005321:	89 f9                	mov    ecx,edi
c0005323:	19 d1                	sbb    ecx,edx
c0005325:	0f 83 64 ff ff ff    	jae    c000528f <f_read+0x112>
c000532b:	89 c7                	mov    edi,eax
c000532d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005330:	c1 e7 09             	shl    edi,0x9
c0005333:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005337:	b9 00 02 00 00       	mov    ecx,0x200
c000533c:	01 f8                	add    eax,edi
c000533e:	e8 4d c7 ff ff       	call   c0001a90 <mem_cpy>
c0005343:	e9 47 ff ff ff       	jmp    c000528f <f_read+0x112>
c0005348:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000534b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000534e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005351:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005355:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c0005359:	75 05                	jne    c0005360 <f_read+0x1e3>
c000535b:	39 34 24             	cmp    DWORD PTR [esp],esi
c000535e:	74 5b                	je     c00053bb <f_read+0x23e>
c0005360:	8d 43 50             	lea    eax,[ebx+0x50]
c0005363:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005367:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000536b:	79 2a                	jns    c0005397 <f_read+0x21a>
c000536d:	83 ec 0c             	sub    esp,0xc
c0005370:	6a 01                	push   0x1
c0005372:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005376:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000537a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000537e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005382:	50                   	push   eax
c0005383:	e8 54 c6 ff ff       	call   c00019dc <disk_write>
c0005388:	83 c4 20             	add    esp,0x20
c000538b:	85 c0                	test   eax,eax
c000538d:	0f 85 64 ff ff ff    	jne    c00052f7 <f_read+0x17a>
c0005393:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005397:	83 ec 0c             	sub    esp,0xc
c000539a:	6a 01                	push   0x1
c000539c:	57                   	push   edi
c000539d:	56                   	push   esi
c000539e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053a2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00053a6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00053aa:	50                   	push   eax
c00053ab:	e8 16 c6 ff ff       	call   c00019c6 <disk_read>
c00053b0:	83 c4 20             	add    esp,0x20
c00053b3:	85 c0                	test   eax,eax
c00053b5:	0f 85 3c ff ff ff    	jne    c00052f7 <f_read+0x17a>
c00053bb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00053be:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00053c1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053c4:	ba 00 02 00 00       	mov    edx,0x200
c00053c9:	25 ff 01 00 00       	and    eax,0x1ff
c00053ce:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00053d2:	29 c2                	sub    edx,eax
c00053d4:	39 d6                	cmp    esi,edx
c00053d6:	76 02                	jbe    c00053da <f_read+0x25d>
c00053d8:	89 d6                	mov    esi,edx
c00053da:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00053de:	89 f1                	mov    ecx,esi
c00053e0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e4:	e8 a7 c6 ff ff       	call   c0001a90 <mem_cpy>
c00053e9:	e9 a7 fe ff ff       	jmp    c0005295 <f_read+0x118>
c00053ee:	bd 07 00 00 00       	mov    ebp,0x7
c00053f3:	83 c4 2c             	add    esp,0x2c
c00053f6:	89 e8                	mov    eax,ebp
c00053f8:	5b                   	pop    ebx
c00053f9:	5e                   	pop    esi
c00053fa:	5f                   	pop    edi
c00053fb:	5d                   	pop    ebp
c00053fc:	c3                   	ret    

c00053fd <f_write>:
c00053fd:	55                   	push   ebp
c00053fe:	57                   	push   edi
c00053ff:	56                   	push   esi
c0005400:	53                   	push   ebx
c0005401:	83 ec 2c             	sub    esp,0x2c
c0005404:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005408:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000540c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005412:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005416:	89 d8                	mov    eax,ebx
c0005418:	e8 f7 cc ff ff       	call   c0002114 <validate>
c000541d:	89 c5                	mov    ebp,eax
c000541f:	85 c0                	test   eax,eax
c0005421:	0f 85 86 02 00 00    	jne    c00056ad <f_write+0x2b0>
c0005427:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000542b:	85 ed                	test   ebp,ebp
c000542d:	0f 85 7a 02 00 00    	jne    c00056ad <f_write+0x2b0>
c0005433:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005437:	0f 84 6b 02 00 00    	je     c00056a8 <f_write+0x2ab>
c000543d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005441:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005444:	0f 84 43 01 00 00    	je     c000558d <f_write+0x190>
c000544a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000544d:	89 c1                	mov    ecx,eax
c000544f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005453:	0f 83 34 01 00 00    	jae    c000558d <f_write+0x190>
c0005459:	f7 d0                	not    eax
c000545b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000545f:	e9 29 01 00 00       	jmp    c000558d <f_write+0x190>
c0005464:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005467:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000546a:	89 d0                	mov    eax,edx
c000546c:	25 ff 01 00 00       	and    eax,0x1ff
c0005471:	0f 85 00 02 00 00    	jne    c0005677 <f_write+0x27a>
c0005477:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000547b:	89 d6                	mov    esi,edx
c000547d:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005481:	89 cf                	mov    edi,ecx
c0005483:	48                   	dec    eax
c0005484:	0f ac fe 09          	shrd   esi,edi,0x9
c0005488:	21 f0                	and    eax,esi
c000548a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000548e:	0f 84 06 01 00 00    	je     c000559a <f_write+0x19d>
c0005494:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005498:	0f 88 6e 01 00 00    	js     c000560c <f_write+0x20f>
c000549e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054a2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054a5:	89 c8                	mov    eax,ecx
c00054a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00054ab:	e8 fa c7 ff ff       	call   c0001caa <clst2sect>
c00054b0:	89 d1                	mov    ecx,edx
c00054b2:	09 c1                	or     ecx,eax
c00054b4:	0f 84 1c 01 00 00    	je     c00055d6 <f_write+0x1d9>
c00054ba:	31 ff                	xor    edi,edi
c00054bc:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054c0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00054c4:	01 c6                	add    esi,eax
c00054c6:	11 d7                	adc    edi,edx
c00054c8:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00054d0:	0f 86 63 01 00 00    	jbe    c0005639 <f_write+0x23c>
c00054d6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054de:	c1 e8 09             	shr    eax,0x9
c00054e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054e5:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054e9:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c00054ed:	39 c2                	cmp    edx,eax
c00054ef:	76 08                	jbe    c00054f9 <f_write+0xfc>
c00054f1:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054f9:	83 ec 0c             	sub    esp,0xc
c00054fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005500:	57                   	push   edi
c0005501:	56                   	push   esi
c0005502:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005506:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000550a:	50                   	push   eax
c000550b:	e8 cc c4 ff ff       	call   c00019dc <disk_write>
c0005510:	83 c4 20             	add    esp,0x20
c0005513:	85 c0                	test   eax,eax
c0005515:	0f 85 ce 00 00 00    	jne    c00055e9 <f_write+0x1ec>
c000551b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000551e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005521:	29 f0                	sub    eax,esi
c0005523:	19 fa                	sbb    edx,edi
c0005525:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005529:	89 d7                	mov    edi,edx
c000552b:	ba 00 00 00 00       	mov    edx,0x0
c0005530:	89 f9                	mov    ecx,edi
c0005532:	19 d1                	sbb    ecx,edx
c0005534:	73 1c                	jae    c0005552 <f_write+0x155>
c0005536:	89 c7                	mov    edi,eax
c0005538:	b9 00 02 00 00       	mov    ecx,0x200
c000553d:	c1 e7 09             	shl    edi,0x9
c0005540:	8d 43 50             	lea    eax,[ebx+0x50]
c0005543:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005547:	89 fa                	mov    edx,edi
c0005549:	e8 42 c5 ff ff       	call   c0001a90 <mem_cpy>
c000554e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005552:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005556:	c1 e6 09             	shl    esi,0x9
c0005559:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000555d:	31 ff                	xor    edi,edi
c000555f:	01 30                	add    DWORD PTR [eax],esi
c0005561:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005565:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005569:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000556c:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c000556f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005572:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c0005575:	89 c1                	mov    ecx,eax
c0005577:	39 f2                	cmp    edx,esi
c0005579:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000557c:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000557f:	19 f9                	sbb    ecx,edi
c0005581:	73 04                	jae    c0005587 <f_write+0x18a>
c0005583:	89 f2                	mov    edx,esi
c0005585:	89 f8                	mov    eax,edi
c0005587:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000558a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000558d:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005592:	0f 85 cc fe ff ff    	jne    c0005464 <f_write+0x67>
c0005598:	eb 2e                	jmp    c00055c8 <f_write+0x1cb>
c000559a:	89 c8                	mov    eax,ecx
c000559c:	09 d0                	or     eax,edx
c000559e:	75 0b                	jne    c00055ab <f_write+0x1ae>
c00055a0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00055a3:	31 d2                	xor    edx,edx
c00055a5:	85 c0                	test   eax,eax
c00055a7:	75 28                	jne    c00055d1 <f_write+0x1d4>
c00055a9:	eb 12                	jmp    c00055bd <f_write+0x1c0>
c00055ab:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055af:	74 09                	je     c00055ba <f_write+0x1bd>
c00055b1:	89 d8                	mov    eax,ebx
c00055b3:	e8 13 c7 ff ff       	call   c0001ccb <clmt_clust>
c00055b8:	eb 0a                	jmp    c00055c4 <f_write+0x1c7>
c00055ba:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055bd:	89 d8                	mov    eax,ebx
c00055bf:	e8 a1 da ff ff       	call   c0003065 <create_chain>
c00055c4:	85 c0                	test   eax,eax
c00055c6:	75 09                	jne    c00055d1 <f_write+0x1d4>
c00055c8:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00055cc:	e9 dc 00 00 00       	jmp    c00056ad <f_write+0x2b0>
c00055d1:	83 f8 01             	cmp    eax,0x1
c00055d4:	75 0e                	jne    c00055e4 <f_write+0x1e7>
c00055d6:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00055da:	bd 02 00 00 00       	mov    ebp,0x2
c00055df:	e9 c9 00 00 00       	jmp    c00056ad <f_write+0x2b0>
c00055e4:	83 f8 ff             	cmp    eax,0xffffffff
c00055e7:	75 0e                	jne    c00055f7 <f_write+0x1fa>
c00055e9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00055ed:	bd 01 00 00 00       	mov    ebp,0x1
c00055f2:	e9 b6 00 00 00       	jmp    c00056ad <f_write+0x2b0>
c00055f7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00055fa:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00055fe:	0f 85 90 fe ff ff    	jne    c0005494 <f_write+0x97>
c0005604:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005607:	e9 88 fe ff ff       	jmp    c0005494 <f_write+0x97>
c000560c:	83 ec 0c             	sub    esp,0xc
c000560f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005612:	6a 01                	push   0x1
c0005614:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005617:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000561a:	50                   	push   eax
c000561b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000561f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005623:	50                   	push   eax
c0005624:	e8 b3 c3 ff ff       	call   c00019dc <disk_write>
c0005629:	83 c4 20             	add    esp,0x20
c000562c:	85 c0                	test   eax,eax
c000562e:	75 b9                	jne    c00055e9 <f_write+0x1ec>
c0005630:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005634:	e9 65 fe ff ff       	jmp    c000549e <f_write+0xa1>
c0005639:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000563c:	75 05                	jne    c0005643 <f_write+0x246>
c000563e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005641:	74 2e                	je     c0005671 <f_write+0x274>
c0005643:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005646:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005649:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000564c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000564f:	73 20                	jae    c0005671 <f_write+0x274>
c0005651:	83 ec 0c             	sub    esp,0xc
c0005654:	8d 43 50             	lea    eax,[ebx+0x50]
c0005657:	6a 01                	push   0x1
c0005659:	57                   	push   edi
c000565a:	56                   	push   esi
c000565b:	50                   	push   eax
c000565c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005660:	50                   	push   eax
c0005661:	e8 60 c3 ff ff       	call   c00019c6 <disk_read>
c0005666:	83 c4 20             	add    esp,0x20
c0005669:	85 c0                	test   eax,eax
c000566b:	0f 85 78 ff ff ff    	jne    c00055e9 <f_write+0x1ec>
c0005671:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005674:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005677:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000567a:	ba 00 02 00 00       	mov    edx,0x200
c000567f:	25 ff 01 00 00       	and    eax,0x1ff
c0005684:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005688:	29 c2                	sub    edx,eax
c000568a:	39 d6                	cmp    esi,edx
c000568c:	76 02                	jbe    c0005690 <f_write+0x293>
c000568e:	89 d6                	mov    esi,edx
c0005690:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c0005694:	89 f1                	mov    ecx,esi
c0005696:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000569a:	e8 f1 c3 ff ff       	call   c0001a90 <mem_cpy>
c000569f:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00056a3:	e9 b1 fe ff ff       	jmp    c0005559 <f_write+0x15c>
c00056a8:	bd 07 00 00 00       	mov    ebp,0x7
c00056ad:	83 c4 2c             	add    esp,0x2c
c00056b0:	89 e8                	mov    eax,ebp
c00056b2:	5b                   	pop    ebx
c00056b3:	5e                   	pop    esi
c00056b4:	5f                   	pop    edi
c00056b5:	5d                   	pop    ebp
c00056b6:	c3                   	ret    

c00056b7 <f_sync>:
c00056b7:	56                   	push   esi
c00056b8:	53                   	push   ebx
c00056b9:	83 ec 64             	sub    esp,0x64
c00056bc:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00056c0:	8d 54 24 10          	lea    edx,[esp+0x10]
c00056c4:	89 d8                	mov    eax,ebx
c00056c6:	e8 49 ca ff ff       	call   c0002114 <validate>
c00056cb:	85 c0                	test   eax,eax
c00056cd:	0f 85 ba 01 00 00    	jne    c000588d <f_sync+0x1d6>
c00056d3:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00056d6:	f6 c2 40             	test   dl,0x40
c00056d9:	0f 84 ae 01 00 00    	je     c000588d <f_sync+0x1d6>
c00056df:	84 d2                	test   dl,dl
c00056e1:	79 33                	jns    c0005716 <f_sync+0x5f>
c00056e3:	83 ec 0c             	sub    esp,0xc
c00056e6:	8d 43 50             	lea    eax,[ebx+0x50]
c00056e9:	6a 01                	push   0x1
c00056eb:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00056ee:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00056f1:	50                   	push   eax
c00056f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00056fa:	50                   	push   eax
c00056fb:	e8 dc c2 ff ff       	call   c00019dc <disk_write>
c0005700:	83 c4 20             	add    esp,0x20
c0005703:	89 c2                	mov    edx,eax
c0005705:	b8 01 00 00 00       	mov    eax,0x1
c000570a:	85 d2                	test   edx,edx
c000570c:	0f 85 7b 01 00 00    	jne    c000588d <f_sync+0x1d6>
c0005712:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000571a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000571d:	0f 85 11 01 00 00    	jne    c0005834 <f_sync+0x17d>
c0005723:	89 d8                	mov    eax,ebx
c0005725:	e8 13 d6 ff ff       	call   c0002d3d <fill_first_frag>
c000572a:	85 c0                	test   eax,eax
c000572c:	0f 85 5b 01 00 00    	jne    c000588d <f_sync+0x1d6>
c0005732:	83 c9 ff             	or     ecx,0xffffffff
c0005735:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005738:	89 d8                	mov    eax,ebx
c000573a:	e8 c9 d5 ff ff       	call   c0002d08 <fill_last_frag>
c000573f:	85 c0                	test   eax,eax
c0005741:	0f 85 46 01 00 00    	jne    c000588d <f_sync+0x1d6>
c0005747:	83 ec 0c             	sub    esp,0xc
c000574a:	68 60 04 00 00       	push   0x460
c000574f:	e8 f0 2a 00 00       	call   c0008244 <ff_memalloc>
c0005754:	83 c4 10             	add    esp,0x10
c0005757:	89 c6                	mov    esi,eax
c0005759:	b8 11 00 00 00       	mov    eax,0x11
c000575e:	85 f6                	test   esi,esi
c0005760:	0f 84 27 01 00 00    	je     c000588d <f_sync+0x1d6>
c0005766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000576a:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005770:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005773:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005776:	89 da                	mov    edx,ebx
c0005778:	8d 44 24 14          	lea    eax,[esp+0x14]
c000577c:	e8 af df ff ff       	call   c0003730 <load_obj_xdir>
c0005781:	85 c0                	test   eax,eax
c0005783:	0f 85 95 00 00 00    	jne    c000581e <f_sync+0x167>
c0005789:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000578d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005790:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c0005794:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005797:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c000579a:	83 ca 01             	or     edx,0x1
c000579d:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00057a0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00057a3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057a6:	83 c0 34             	add    eax,0x34
c00057a9:	e8 d9 c2 ff ff       	call   c0001a87 <st_dword>
c00057ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057b2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057b5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057b8:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057bb:	83 c0 38             	add    eax,0x38
c00057be:	e8 c7 c2 ff ff       	call   c0001a8a <st_qword>
c00057c3:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057ca:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057cd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057d0:	83 c0 28             	add    eax,0x28
c00057d3:	e8 b2 c2 ff ff       	call   c0001a8a <st_qword>
c00057d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057dc:	ba 00 00 21 50       	mov    edx,0x50210000
c00057e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057e4:	83 c0 0c             	add    eax,0xc
c00057e7:	e8 9b c2 ff ff       	call   c0001a87 <st_dword>
c00057ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057f0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057f3:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c00057f7:	31 d2                	xor    edx,edx
c00057f9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057fc:	83 c0 10             	add    eax,0x10
c00057ff:	e8 83 c2 ff ff       	call   c0001a87 <st_dword>
c0005804:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005808:	e8 62 e1 ff ff       	call   c000396f <store_xdir>
c000580d:	85 c0                	test   eax,eax
c000580f:	75 0d                	jne    c000581e <f_sync+0x167>
c0005811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005815:	e8 00 eb ff ff       	call   c000431a <sync_fs>
c000581a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000581e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	56                   	push   esi
c0005826:	e8 2f 2a 00 00       	call   c000825a <ff_memfree>
c000582b:	83 c4 10             	add    esp,0x10
c000582e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005832:	eb 59                	jmp    c000588d <f_sync+0x1d6>
c0005834:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005837:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c000583a:	e8 b0 c9 ff ff       	call   c00021ef <move_window>
c000583f:	85 c0                	test   eax,eax
c0005841:	75 4a                	jne    c000588d <f_sync+0x1d6>
c0005843:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005846:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c000584a:	89 f2                	mov    edx,esi
c000584c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000584f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005851:	e8 5f f3 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0005856:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005859:	8d 46 1c             	lea    eax,[esi+0x1c]
c000585c:	e8 26 c2 ff ff       	call   c0001a87 <st_dword>
c0005861:	8d 46 16             	lea    eax,[esi+0x16]
c0005864:	ba 00 00 21 50       	mov    edx,0x50210000
c0005869:	e8 19 c2 ff ff       	call   c0001a87 <st_dword>
c000586e:	8d 46 12             	lea    eax,[esi+0x12]
c0005871:	31 d2                	xor    edx,edx
c0005873:	e8 0b c2 ff ff       	call   c0001a83 <st_word>
c0005878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000587c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005884:	e8 91 ea ff ff       	call   c000431a <sync_fs>
c0005889:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000588d:	83 c4 64             	add    esp,0x64
c0005890:	5b                   	pop    ebx
c0005891:	5e                   	pop    esi
c0005892:	c3                   	ret    

c0005893 <f_close>:
c0005893:	53                   	push   ebx
c0005894:	83 ec 24             	sub    esp,0x24
c0005897:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000589b:	53                   	push   ebx
c000589c:	e8 16 fe ff ff       	call   c00056b7 <f_sync>
c00058a1:	83 c4 10             	add    esp,0x10
c00058a4:	85 c0                	test   eax,eax
c00058a6:	75 15                	jne    c00058bd <f_close+0x2a>
c00058a8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00058ac:	89 d8                	mov    eax,ebx
c00058ae:	e8 61 c8 ff ff       	call   c0002114 <validate>
c00058b3:	85 c0                	test   eax,eax
c00058b5:	75 06                	jne    c00058bd <f_close+0x2a>
c00058b7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00058bd:	83 c4 18             	add    esp,0x18
c00058c0:	5b                   	pop    ebx
c00058c1:	c3                   	ret    

c00058c2 <f_lseek>:
c00058c2:	55                   	push   ebp
c00058c3:	57                   	push   edi
c00058c4:	56                   	push   esi
c00058c5:	53                   	push   ebx
c00058c6:	83 ec 3c             	sub    esp,0x3c
c00058c9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00058cd:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00058d1:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00058d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00058d8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00058dc:	89 d8                	mov    eax,ebx
c00058de:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00058e2:	e8 2d c8 ff ff       	call   c0002114 <validate>
c00058e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058eb:	85 c0                	test   eax,eax
c00058ed:	0f 85 7a 04 00 00    	jne    c0005d6d <f_lseek+0x4ab>
c00058f3:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c00058f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058fb:	85 c0                	test   eax,eax
c00058fd:	0f 85 6a 04 00 00    	jne    c0005d6d <f_lseek+0x4ab>
c0005903:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005907:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000590a:	74 0c                	je     c0005918 <f_lseek+0x56>
c000590c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000590f:	85 c0                	test   eax,eax
c0005911:	75 1f                	jne    c0005932 <f_lseek+0x70>
c0005913:	e9 b5 01 00 00       	jmp    c0005acd <f_lseek+0x20b>
c0005918:	83 c9 ff             	or     ecx,0xffffffff
c000591b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000591e:	89 d8                	mov    eax,ebx
c0005920:	e8 e3 d3 ff ff       	call   c0002d08 <fill_last_frag>
c0005925:	85 c0                	test   eax,eax
c0005927:	74 e3                	je     c000590c <f_lseek+0x4a>
c0005929:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000592d:	e9 3b 04 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c0005932:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005937:	0f 85 ac 00 00 00    	jne    c00059e9 <f_lseek+0x127>
c000593d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005941:	0f 85 a2 00 00 00    	jne    c00059e9 <f_lseek+0x127>
c0005947:	8d 78 04             	lea    edi,[eax+0x4]
c000594a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c000594d:	8b 00                	mov    eax,DWORD PTR [eax]
c000594f:	be 02 00 00 00       	mov    esi,0x2
c0005954:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005958:	85 ed                	test   ebp,ebp
c000595a:	74 73                	je     c00059cf <f_lseek+0x10d>
c000595c:	89 e9                	mov    ecx,ebp
c000595e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005965:	ff 04 24             	inc    DWORD PTR [esp]
c0005968:	89 ca                	mov    edx,ecx
c000596a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000596e:	89 d8                	mov    eax,ebx
c0005970:	e8 02 d4 ff ff       	call   c0002d77 <get_fat>
c0005975:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005979:	83 f8 01             	cmp    eax,0x1
c000597c:	77 11                	ja     c000598f <f_lseek+0xcd>
c000597e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005982:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c000598a:	e9 de 03 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c000598f:	83 f8 ff             	cmp    eax,0xffffffff
c0005992:	75 11                	jne    c00059a5 <f_lseek+0xe3>
c0005994:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005998:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c00059a0:	e9 c8 03 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c00059a5:	8d 51 01             	lea    edx,[ecx+0x1]
c00059a8:	89 c1                	mov    ecx,eax
c00059aa:	39 c2                	cmp    edx,eax
c00059ac:	74 b7                	je     c0005965 <f_lseek+0xa3>
c00059ae:	83 c6 02             	add    esi,0x2
c00059b1:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00059b5:	72 0b                	jb     c00059c2 <f_lseek+0x100>
c00059b7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00059ba:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c00059bd:	89 0f                	mov    DWORD PTR [edi],ecx
c00059bf:	83 c7 08             	add    edi,0x8
c00059c2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00059c6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c00059c9:	76 04                	jbe    c00059cf <f_lseek+0x10d>
c00059cb:	89 c5                	mov    ebp,eax
c00059cd:	eb 8d                	jmp    c000595c <f_lseek+0x9a>
c00059cf:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00059d2:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00059d6:	89 30                	mov    DWORD PTR [eax],esi
c00059d8:	0f 87 87 03 00 00    	ja     c0005d65 <f_lseek+0x4a3>
c00059de:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c00059e4:	e9 84 03 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c00059e9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00059ec:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00059ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00059f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00059f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00059fb:	39 04 24             	cmp    DWORD PTR [esp],eax
c00059fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a02:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005a06:	73 0f                	jae    c0005a17 <f_lseek+0x155>
c0005a08:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005a0b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005a0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a13:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a17:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a1b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005a1f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005a22:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005a25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a29:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005a2d:	0f 84 3a 03 00 00    	je     c0005d6d <f_lseek+0x4ab>
c0005a33:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005a37:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005a3b:	83 c6 ff             	add    esi,0xffffffff
c0005a3e:	89 d8                	mov    eax,ebx
c0005a40:	83 d7 ff             	adc    edi,0xffffffff
c0005a43:	89 f2                	mov    edx,esi
c0005a45:	89 f9                	mov    ecx,edi
c0005a47:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005a4b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005a4e:	e8 78 c2 ff ff       	call   c0001ccb <clmt_clust>
c0005a53:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a57:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005a5a:	89 c2                	mov    edx,eax
c0005a5c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005a60:	89 c8                	mov    eax,ecx
c0005a62:	e8 43 c2 ff ff       	call   c0001caa <clst2sect>
c0005a67:	89 d7                	mov    edi,edx
c0005a69:	09 c7                	or     edi,eax
c0005a6b:	0f 84 0d ff ff ff    	je     c000597e <f_lseek+0xbc>
c0005a71:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005a75:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005a7b:	0f 84 ec 02 00 00    	je     c0005d6d <f_lseek+0x4ab>
c0005a81:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a85:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005a89:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a8c:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a90:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a94:	4d                   	dec    ebp
c0005a95:	31 ff                	xor    edi,edi
c0005a97:	21 ee                	and    esi,ebp
c0005a99:	01 c6                	add    esi,eax
c0005a9b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a9e:	11 d7                	adc    edi,edx
c0005aa0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005aa3:	39 fa                	cmp    edx,edi
c0005aa5:	75 08                	jne    c0005aaf <f_lseek+0x1ed>
c0005aa7:	39 f0                	cmp    eax,esi
c0005aa9:	0f 84 be 02 00 00    	je     c0005d6d <f_lseek+0x4ab>
c0005aaf:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005ab2:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ab6:	0f 89 80 02 00 00    	jns    c0005d3c <f_lseek+0x47a>
c0005abc:	83 ec 0c             	sub    esp,0xc
c0005abf:	6a 01                	push   0x1
c0005ac1:	52                   	push   edx
c0005ac2:	50                   	push   eax
c0005ac3:	55                   	push   ebp
c0005ac4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005ac8:	e9 5a 02 00 00       	jmp    c0005d27 <f_lseek+0x465>
c0005acd:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ad1:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005ad4:	74 16                	je     c0005aec <f_lseek+0x22a>
c0005ad6:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005adb:	76 0f                	jbe    c0005aec <f_lseek+0x22a>
c0005add:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005ae4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005aec:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aef:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005af2:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005af5:	89 c7                	mov    edi,eax
c0005af7:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005afb:	73 0d                	jae    c0005b0a <f_lseek+0x248>
c0005afd:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005b01:	75 07                	jne    c0005b0a <f_lseek+0x248>
c0005b03:	89 14 24             	mov    DWORD PTR [esp],edx
c0005b06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005b0a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005b0d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b10:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b14:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b1b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b22:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b25:	75 09                	jne    c0005b30 <f_lseek+0x26e>
c0005b27:	31 f6                	xor    esi,esi
c0005b29:	31 ff                	xor    edi,edi
c0005b2b:	e9 af 01 00 00       	jmp    c0005cdf <f_lseek+0x41d>
c0005b30:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b34:	89 d7                	mov    edi,edx
c0005b36:	c1 e1 09             	shl    ecx,0x9
c0005b39:	09 c7                	or     edi,eax
c0005b3b:	89 cd                	mov    ebp,ecx
c0005b3d:	74 6d                	je     c0005bac <f_lseek+0x2ea>
c0005b3f:	83 c0 ff             	add    eax,0xffffffff
c0005b42:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b46:	83 d2 ff             	adc    edx,0xffffffff
c0005b49:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b4c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b50:	83 c0 ff             	add    eax,0xffffffff
c0005b53:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b57:	83 d2 ff             	adc    edx,0xffffffff
c0005b5a:	31 ff                	xor    edi,edi
c0005b5c:	57                   	push   edi
c0005b5d:	51                   	push   ecx
c0005b5e:	52                   	push   edx
c0005b5f:	50                   	push   eax
c0005b60:	e8 57 f7 01 00       	call   c00252bc <__udivdi3>
c0005b65:	83 c4 10             	add    esp,0x10
c0005b68:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b6c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005b70:	57                   	push   edi
c0005b71:	55                   	push   ebp
c0005b72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b7a:	e8 3d f7 01 00       	call   c00252bc <__udivdi3>
c0005b7f:	83 c4 10             	add    esp,0x10
c0005b82:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005b86:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005b8a:	19 d1                	sbb    ecx,edx
c0005b8c:	72 1e                	jb     c0005bac <f_lseek+0x2ea>
c0005b8e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b92:	89 e9                	mov    ecx,ebp
c0005b94:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b97:	f7 d9                	neg    ecx
c0005b99:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005b9c:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005ba0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ba3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005ba6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005baa:	eb 28                	jmp    c0005bd4 <f_lseek+0x312>
c0005bac:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005baf:	85 c0                	test   eax,eax
c0005bb1:	75 1e                	jne    c0005bd1 <f_lseek+0x30f>
c0005bb3:	31 d2                	xor    edx,edx
c0005bb5:	89 d8                	mov    eax,ebx
c0005bb7:	e8 a9 d4 ff ff       	call   c0003065 <create_chain>
c0005bbc:	83 f8 01             	cmp    eax,0x1
c0005bbf:	0f 84 b9 fd ff ff    	je     c000597e <f_lseek+0xbc>
c0005bc5:	83 f8 ff             	cmp    eax,0xffffffff
c0005bc8:	0f 84 c6 fd ff ff    	je     c0005994 <f_lseek+0xd2>
c0005bce:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005bd1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005bd4:	85 c0                	test   eax,eax
c0005bd6:	0f 84 4b ff ff ff    	je     c0005b27 <f_lseek+0x265>
c0005bdc:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005be0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005be8:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005beb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005bef:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005bf2:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005bf5:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005bf9:	0f 83 9d 00 00 00    	jae    c0005c9c <f_lseek+0x3da>
c0005bff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005c03:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c07:	29 34 24             	sub    DWORD PTR [esp],esi
c0005c0a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005c0e:	01 f2                	add    edx,esi
c0005c10:	11 f9                	adc    ecx,edi
c0005c12:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005c16:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005c1a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005c1d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005c20:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005c23:	f6 c1 02             	test   cl,0x2
c0005c26:	74 35                	je     c0005c5d <f_lseek+0x39b>
c0005c28:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005c2c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005c2f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005c32:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005c36:	73 16                	jae    c0005c4e <f_lseek+0x38c>
c0005c38:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c3c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c40:	88 ca                	mov    dl,cl
c0005c42:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c45:	83 ca 40             	or     edx,0x40
c0005c48:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c4b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c4e:	89 c2                	mov    edx,eax
c0005c50:	89 d8                	mov    eax,ebx
c0005c52:	e8 0e d4 ff ff       	call   c0003065 <create_chain>
c0005c57:	85 c0                	test   eax,eax
c0005c59:	75 0b                	jne    c0005c66 <f_lseek+0x3a4>
c0005c5b:	eb 30                	jmp    c0005c8d <f_lseek+0x3cb>
c0005c5d:	89 c2                	mov    edx,eax
c0005c5f:	89 d8                	mov    eax,ebx
c0005c61:	e8 11 d1 ff ff       	call   c0002d77 <get_fat>
c0005c66:	83 f8 ff             	cmp    eax,0xffffffff
c0005c69:	0f 84 25 fd ff ff    	je     c0005994 <f_lseek+0xd2>
c0005c6f:	83 f8 01             	cmp    eax,0x1
c0005c72:	0f 86 06 fd ff ff    	jbe    c000597e <f_lseek+0xbc>
c0005c78:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c7c:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c7f:	0f 86 f9 fc ff ff    	jbe    c000597e <f_lseek+0xbc>
c0005c85:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c88:	e9 5b ff ff ff       	jmp    c0005be8 <f_lseek+0x326>
c0005c8d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c94:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c9c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c9f:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ca3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ca6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ca9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005cac:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005cb2:	0f 84 6f fe ff ff    	je     c0005b27 <f_lseek+0x265>
c0005cb8:	89 c2                	mov    edx,eax
c0005cba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005cbe:	e8 e7 bf ff ff       	call   c0001caa <clst2sect>
c0005cc3:	89 d7                	mov    edi,edx
c0005cc5:	09 c7                	or     edi,eax
c0005cc7:	0f 84 b1 fc ff ff    	je     c000597e <f_lseek+0xbc>
c0005ccd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cd4:	0f ac fe 09          	shrd   esi,edi,0x9
c0005cd8:	c1 ef 09             	shr    edi,0x9
c0005cdb:	01 c6                	add    esi,eax
c0005cdd:	11 d7                	adc    edi,edx
c0005cdf:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ce2:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005ce5:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005ce8:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005ceb:	19 d1                	sbb    ecx,edx
c0005ced:	73 0a                	jae    c0005cf9 <f_lseek+0x437>
c0005cef:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005cf2:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005cf5:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005cf9:	a9 ff 01 00 00       	test   eax,0x1ff
c0005cfe:	74 6d                	je     c0005d6d <f_lseek+0x4ab>
c0005d00:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005d03:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005d06:	39 fa                	cmp    edx,edi
c0005d08:	75 04                	jne    c0005d0e <f_lseek+0x44c>
c0005d0a:	39 f0                	cmp    eax,esi
c0005d0c:	74 5f                	je     c0005d6d <f_lseek+0x4ab>
c0005d0e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d11:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d15:	79 25                	jns    c0005d3c <f_lseek+0x47a>
c0005d17:	83 ec 0c             	sub    esp,0xc
c0005d1a:	6a 01                	push   0x1
c0005d1c:	52                   	push   edx
c0005d1d:	50                   	push   eax
c0005d1e:	55                   	push   ebp
c0005d1f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d23:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d27:	50                   	push   eax
c0005d28:	e8 af bc ff ff       	call   c00019dc <disk_write>
c0005d2d:	83 c4 20             	add    esp,0x20
c0005d30:	85 c0                	test   eax,eax
c0005d32:	0f 85 5c fc ff ff    	jne    c0005994 <f_lseek+0xd2>
c0005d38:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d3c:	83 ec 0c             	sub    esp,0xc
c0005d3f:	6a 01                	push   0x1
c0005d41:	57                   	push   edi
c0005d42:	56                   	push   esi
c0005d43:	55                   	push   ebp
c0005d44:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d48:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d4c:	50                   	push   eax
c0005d4d:	e8 74 bc ff ff       	call   c00019c6 <disk_read>
c0005d52:	83 c4 20             	add    esp,0x20
c0005d55:	85 c0                	test   eax,eax
c0005d57:	0f 85 37 fc ff ff    	jne    c0005994 <f_lseek+0xd2>
c0005d5d:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005d60:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005d63:	eb 08                	jmp    c0005d6d <f_lseek+0x4ab>
c0005d65:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005d6d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005d71:	83 c4 3c             	add    esp,0x3c
c0005d74:	5b                   	pop    ebx
c0005d75:	5e                   	pop    esi
c0005d76:	5f                   	pop    edi
c0005d77:	5d                   	pop    ebp
c0005d78:	c3                   	ret    

c0005d79 <f_opendir>:
c0005d79:	56                   	push   esi
c0005d7a:	b8 09 00 00 00       	mov    eax,0x9
c0005d7f:	53                   	push   ebx
c0005d80:	83 ec 24             	sub    esp,0x24
c0005d83:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d87:	85 db                	test   ebx,ebx
c0005d89:	0f 84 e6 00 00 00    	je     c0005e75 <f_opendir+0xfc>
c0005d8f:	31 c9                	xor    ecx,ecx
c0005d91:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d95:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d99:	e8 03 c7 ff ff       	call   c00024a1 <mount_volume>
c0005d9e:	85 c0                	test   eax,eax
c0005da0:	0f 85 c9 00 00 00    	jne    c0005e6f <f_opendir+0xf6>
c0005da6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005daa:	83 ec 0c             	sub    esp,0xc
c0005dad:	89 03                	mov    DWORD PTR [ebx],eax
c0005daf:	68 60 04 00 00       	push   0x460
c0005db4:	e8 8b 24 00 00       	call   c0008244 <ff_memalloc>
c0005db9:	83 c4 10             	add    esp,0x10
c0005dbc:	89 c6                	mov    esi,eax
c0005dbe:	b8 11 00 00 00       	mov    eax,0x11
c0005dc3:	85 f6                	test   esi,esi
c0005dc5:	0f 84 aa 00 00 00    	je     c0005e75 <f_opendir+0xfc>
c0005dcb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005dcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005dd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005dd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ddb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ddf:	89 d8                	mov    eax,ebx
c0005de1:	e8 31 ee ff ff       	call   c0004c17 <follow_path>
c0005de6:	85 c0                	test   eax,eax
c0005de8:	75 61                	jne    c0005e4b <f_opendir+0xd2>
c0005dea:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005dee:	78 46                	js     c0005e36 <f_opendir+0xbd>
c0005df0:	b8 05 00 00 00       	mov    eax,0x5
c0005df5:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005df9:	74 50                	je     c0005e4b <f_opendir+0xd2>
c0005dfb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dff:	8a 01                	mov    al,BYTE PTR [ecx]
c0005e01:	3c 04                	cmp    al,0x4
c0005e03:	75 26                	jne    c0005e2b <f_opendir+0xb2>
c0005e05:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e08:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005e0b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005e0e:	30 d2                	xor    dl,dl
c0005e10:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005e14:	09 c2                	or     edx,eax
c0005e16:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005e19:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005e1c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005e1f:	89 da                	mov    edx,ebx
c0005e21:	8d 41 10             	lea    eax,[ecx+0x10]
c0005e24:	e8 b4 ed ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0005e29:	eb 0b                	jmp    c0005e36 <f_opendir+0xbd>
c0005e2b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005e2e:	e8 59 ed ff ff       	call   c0004b8c <ld_clust.isra.0>
c0005e33:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e36:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e3a:	31 d2                	xor    edx,edx
c0005e3c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e40:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e44:	89 d8                	mov    eax,ebx
c0005e46:	e8 22 d1 ff ff       	call   c0002f6d <dir_sdi>
c0005e4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e4f:	83 ec 0c             	sub    esp,0xc
c0005e52:	56                   	push   esi
c0005e53:	e8 02 24 00 00       	call   c000825a <ff_memfree>
c0005e58:	83 c4 10             	add    esp,0x10
c0005e5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e5f:	83 f8 04             	cmp    eax,0x4
c0005e62:	74 06                	je     c0005e6a <f_opendir+0xf1>
c0005e64:	85 c0                	test   eax,eax
c0005e66:	74 0d                	je     c0005e75 <f_opendir+0xfc>
c0005e68:	eb 05                	jmp    c0005e6f <f_opendir+0xf6>
c0005e6a:	b8 05 00 00 00       	mov    eax,0x5
c0005e6f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e75:	83 c4 24             	add    esp,0x24
c0005e78:	5b                   	pop    ebx
c0005e79:	5e                   	pop    esi
c0005e7a:	c3                   	ret    

c0005e7b <f_closedir>:
c0005e7b:	53                   	push   ebx
c0005e7c:	83 ec 18             	sub    esp,0x18
c0005e7f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e83:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e87:	89 d8                	mov    eax,ebx
c0005e89:	e8 86 c2 ff ff       	call   c0002114 <validate>
c0005e8e:	85 c0                	test   eax,eax
c0005e90:	75 06                	jne    c0005e98 <f_closedir+0x1d>
c0005e92:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e98:	83 c4 18             	add    esp,0x18
c0005e9b:	5b                   	pop    ebx
c0005e9c:	c3                   	ret    

c0005e9d <f_readdir>:
c0005e9d:	57                   	push   edi
c0005e9e:	56                   	push   esi
c0005e9f:	53                   	push   ebx
c0005ea0:	83 ec 20             	sub    esp,0x20
c0005ea3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ea7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005eab:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 5e c2 ff ff       	call   c0002114 <validate>
c0005eb6:	85 c0                	test   eax,eax
c0005eb8:	75 77                	jne    c0005f31 <f_readdir+0x94>
c0005eba:	85 ff                	test   edi,edi
c0005ebc:	75 0b                	jne    c0005ec9 <f_readdir+0x2c>
c0005ebe:	31 d2                	xor    edx,edx
c0005ec0:	89 d8                	mov    eax,ebx
c0005ec2:	e8 a6 d0 ff ff       	call   c0002f6d <dir_sdi>
c0005ec7:	eb 68                	jmp    c0005f31 <f_readdir+0x94>
c0005ec9:	83 ec 0c             	sub    esp,0xc
c0005ecc:	68 60 04 00 00       	push   0x460
c0005ed1:	e8 6e 23 00 00       	call   c0008244 <ff_memalloc>
c0005ed6:	83 c4 10             	add    esp,0x10
c0005ed9:	89 c6                	mov    esi,eax
c0005edb:	b8 11 00 00 00       	mov    eax,0x11
c0005ee0:	85 f6                	test   esi,esi
c0005ee2:	74 4d                	je     c0005f31 <f_readdir+0x94>
c0005ee4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ee8:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005eee:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005ef1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ef4:	31 d2                	xor    edx,edx
c0005ef6:	89 d8                	mov    eax,ebx
c0005ef8:	e8 80 d8 ff ff       	call   c000377d <dir_read>
c0005efd:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005f02:	75 19                	jne    c0005f1d <f_readdir+0x80>
c0005f04:	89 fa                	mov    edx,edi
c0005f06:	89 d8                	mov    eax,ebx
c0005f08:	e8 7e ea ff ff       	call   c000498b <get_fileinfo>
c0005f0d:	31 d2                	xor    edx,edx
c0005f0f:	89 d8                	mov    eax,ebx
c0005f11:	e8 af d5 ff ff       	call   c00034c5 <dir_next>
c0005f16:	83 f8 04             	cmp    eax,0x4
c0005f19:	75 02                	jne    c0005f1d <f_readdir+0x80>
c0005f1b:	31 c0                	xor    eax,eax
c0005f1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f21:	83 ec 0c             	sub    esp,0xc
c0005f24:	56                   	push   esi
c0005f25:	e8 30 23 00 00       	call   c000825a <ff_memfree>
c0005f2a:	83 c4 10             	add    esp,0x10
c0005f2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f31:	83 c4 20             	add    esp,0x20
c0005f34:	5b                   	pop    ebx
c0005f35:	5e                   	pop    esi
c0005f36:	5f                   	pop    edi
c0005f37:	c3                   	ret    

c0005f38 <f_stat>:
c0005f38:	57                   	push   edi
c0005f39:	31 c9                	xor    ecx,ecx
c0005f3b:	56                   	push   esi
c0005f3c:	53                   	push   ebx
c0005f3d:	83 ec 50             	sub    esp,0x50
c0005f40:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f44:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f48:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f4c:	e8 50 c5 ff ff       	call   c00024a1 <mount_volume>
c0005f51:	89 c3                	mov    ebx,eax
c0005f53:	85 c0                	test   eax,eax
c0005f55:	75 67                	jne    c0005fbe <f_stat+0x86>
c0005f57:	83 ec 0c             	sub    esp,0xc
c0005f5a:	bb 11 00 00 00       	mov    ebx,0x11
c0005f5f:	68 60 04 00 00       	push   0x460
c0005f64:	e8 db 22 00 00       	call   c0008244 <ff_memalloc>
c0005f69:	83 c4 10             	add    esp,0x10
c0005f6c:	89 c6                	mov    esi,eax
c0005f6e:	85 c0                	test   eax,eax
c0005f70:	74 4c                	je     c0005fbe <f_stat+0x86>
c0005f72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f76:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f7c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f7f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f82:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f86:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f8a:	e8 88 ec ff ff       	call   c0004c17 <follow_path>
c0005f8f:	89 c3                	mov    ebx,eax
c0005f91:	85 c0                	test   eax,eax
c0005f93:	75 1d                	jne    c0005fb2 <f_stat+0x7a>
c0005f95:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f9a:	78 11                	js     c0005fad <f_stat+0x75>
c0005f9c:	85 ff                	test   edi,edi
c0005f9e:	74 12                	je     c0005fb2 <f_stat+0x7a>
c0005fa0:	89 fa                	mov    edx,edi
c0005fa2:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005fa6:	e8 e0 e9 ff ff       	call   c000498b <get_fileinfo>
c0005fab:	eb 05                	jmp    c0005fb2 <f_stat+0x7a>
c0005fad:	bb 06 00 00 00       	mov    ebx,0x6
c0005fb2:	83 ec 0c             	sub    esp,0xc
c0005fb5:	56                   	push   esi
c0005fb6:	e8 9f 22 00 00       	call   c000825a <ff_memfree>
c0005fbb:	83 c4 10             	add    esp,0x10
c0005fbe:	83 c4 50             	add    esp,0x50
c0005fc1:	89 d8                	mov    eax,ebx
c0005fc3:	5b                   	pop    ebx
c0005fc4:	5e                   	pop    esi
c0005fc5:	5f                   	pop    edi
c0005fc6:	c3                   	ret    

c0005fc7 <f_getfree>:
c0005fc7:	55                   	push   ebp
c0005fc8:	31 c9                	xor    ecx,ecx
c0005fca:	57                   	push   edi
c0005fcb:	56                   	push   esi
c0005fcc:	53                   	push   ebx
c0005fcd:	83 ec 5c             	sub    esp,0x5c
c0005fd0:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005fd4:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005fd8:	e8 c4 c4 ff ff       	call   c00024a1 <mount_volume>
c0005fdd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fe1:	85 c0                	test   eax,eax
c0005fe3:	0f 85 9d 01 00 00    	jne    c0006186 <f_getfree+0x1bf>
c0005fe9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fed:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005ff1:	89 02                	mov    DWORD PTR [edx],eax
c0005ff3:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0005ff6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005ff9:	8d 71 fe             	lea    esi,[ecx-0x2]
c0005ffc:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006000:	39 f2                	cmp    edx,esi
c0006002:	77 0b                	ja     c000600f <f_getfree+0x48>
c0006004:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006008:	89 10                	mov    DWORD PTR [eax],edx
c000600a:	e9 77 01 00 00       	jmp    c0006186 <f_getfree+0x1bf>
c000600f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006011:	80 fa 01             	cmp    dl,0x1
c0006014:	75 3a                	jne    c0006050 <f_getfree+0x89>
c0006016:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000601a:	be 02 00 00 00       	mov    esi,0x2
c000601f:	31 db                	xor    ebx,ebx
c0006021:	89 f2                	mov    edx,esi
c0006023:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006027:	e8 4b cd ff ff       	call   c0002d77 <get_fat>
c000602c:	83 f8 ff             	cmp    eax,0xffffffff
c000602f:	0f 84 28 01 00 00    	je     c000615d <f_getfree+0x196>
c0006035:	83 f8 01             	cmp    eax,0x1
c0006038:	0f 84 29 01 00 00    	je     c0006167 <f_getfree+0x1a0>
c000603e:	83 d3 00             	adc    ebx,0x0
c0006041:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006045:	46                   	inc    esi
c0006046:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006049:	77 d6                	ja     c0006021 <f_getfree+0x5a>
c000604b:	e9 25 01 00 00       	jmp    c0006175 <f_getfree+0x1ae>
c0006050:	80 fa 04             	cmp    dl,0x4
c0006053:	0f 85 88 00 00 00    	jne    c00060e1 <f_getfree+0x11a>
c0006059:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000605c:	31 ed                	xor    ebp,ebp
c000605e:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006061:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006065:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006069:	31 db                	xor    ebx,ebx
c000606b:	85 ed                	test   ebp,ebp
c000606d:	75 3f                	jne    c00060ae <f_getfree+0xe7>
c000606f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006073:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0006077:	83 c0 01             	add    eax,0x1
c000607a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000607e:	83 d2 00             	adc    edx,0x0
c0006081:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006085:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006089:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000608d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006091:	e8 59 c1 ff ff       	call   c00021ef <move_window>
c0006096:	85 c0                	test   eax,eax
c0006098:	0f 85 d3 00 00 00    	jne    c0006171 <f_getfree+0x1aa>
c000609e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060a2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00060a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060aa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00060ae:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060b2:	8d 4e f8             	lea    ecx,[esi-0x8]
c00060b5:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00060b9:	89 cf                	mov    edi,ecx
c00060bb:	85 f6                	test   esi,esi
c00060bd:	74 12                	je     c00060d1 <f_getfree+0x10a>
c00060bf:	88 c1                	mov    cl,al
c00060c1:	83 e1 01             	and    ecx,0x1
c00060c4:	80 f9 01             	cmp    cl,0x1
c00060c7:	83 d3 00             	adc    ebx,0x0
c00060ca:	d0 e8                	shr    al,1
c00060cc:	4e                   	dec    esi
c00060cd:	39 fe                	cmp    esi,edi
c00060cf:	75 ea                	jne    c00060bb <f_getfree+0xf4>
c00060d1:	45                   	inc    ebp
c00060d2:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00060d8:	85 f6                	test   esi,esi
c00060da:	75 8f                	jne    c000606b <f_getfree+0xa4>
c00060dc:	e9 94 00 00 00       	jmp    c0006175 <f_getfree+0x1ae>
c00060e1:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00060e4:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00060e7:	31 f6                	xor    esi,esi
c00060e9:	31 db                	xor    ebx,ebx
c00060eb:	85 f6                	test   esi,esi
c00060ed:	75 1b                	jne    c000610a <f_getfree+0x143>
c00060ef:	89 d7                	mov    edi,edx
c00060f1:	89 cd                	mov    ebp,ecx
c00060f3:	83 c7 01             	add    edi,0x1
c00060f6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060fa:	83 d5 00             	adc    ebp,0x0
c00060fd:	e8 ed c0 ff ff       	call   c00021ef <move_window>
c0006102:	85 c0                	test   eax,eax
c0006104:	75 6b                	jne    c0006171 <f_getfree+0x1aa>
c0006106:	89 fa                	mov    edx,edi
c0006108:	89 e9                	mov    ecx,ebp
c000610a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000610e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006112:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006116:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006119:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000611d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006121:	75 11                	jne    c0006134 <f_getfree+0x16d>
c0006123:	e8 e9 b8 ff ff       	call   c0001a11 <ld_word>
c0006128:	66 83 f8 01          	cmp    ax,0x1
c000612c:	83 d3 00             	adc    ebx,0x0
c000612f:	83 c6 02             	add    esi,0x2
c0006132:	eb 13                	jmp    c0006147 <f_getfree+0x180>
c0006134:	e8 e5 b8 ff ff       	call   c0001a1e <ld_dword>
c0006139:	25 ff ff ff 0f       	and    eax,0xfffffff
c000613e:	83 f8 01             	cmp    eax,0x1
c0006141:	83 d3 00             	adc    ebx,0x0
c0006144:	83 c6 04             	add    esi,0x4
c0006147:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000614d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006151:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006155:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c0006159:	75 90                	jne    c00060eb <f_getfree+0x124>
c000615b:	eb 18                	jmp    c0006175 <f_getfree+0x1ae>
c000615d:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0006165:	eb 0e                	jmp    c0006175 <f_getfree+0x1ae>
c0006167:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c000616f:	eb 04                	jmp    c0006175 <f_getfree+0x1ae>
c0006171:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006175:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006179:	89 18                	mov    DWORD PTR [eax],ebx
c000617b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000617f:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006182:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0006186:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000618a:	83 c4 5c             	add    esp,0x5c
c000618d:	5b                   	pop    ebx
c000618e:	5e                   	pop    esi
c000618f:	5f                   	pop    edi
c0006190:	5d                   	pop    ebp
c0006191:	c3                   	ret    

c0006192 <f_truncate>:
c0006192:	56                   	push   esi
c0006193:	53                   	push   ebx
c0006194:	83 ec 14             	sub    esp,0x14
c0006197:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000619b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000619f:	89 d8                	mov    eax,ebx
c00061a1:	e8 6e bf ff ff       	call   c0002114 <validate>
c00061a6:	89 c6                	mov    esi,eax
c00061a8:	85 c0                	test   eax,eax
c00061aa:	0f 85 d2 00 00 00    	jne    c0006282 <f_truncate+0xf0>
c00061b0:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00061b4:	85 f6                	test   esi,esi
c00061b6:	0f 85 c6 00 00 00    	jne    c0006282 <f_truncate+0xf0>
c00061bc:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00061c0:	0f 84 b7 00 00 00    	je     c000627d <f_truncate+0xeb>
c00061c6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00061c9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00061cc:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00061cf:	89 d1                	mov    ecx,edx
c00061d1:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00061d4:	0f 83 a8 00 00 00    	jae    c0006282 <f_truncate+0xf0>
c00061da:	09 c2                	or     edx,eax
c00061dc:	75 15                	jne    c00061f3 <f_truncate+0x61>
c00061de:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00061e1:	31 c9                	xor    ecx,ecx
c00061e3:	89 d8                	mov    eax,ebx
c00061e5:	e8 7a d0 ff ff       	call   c0003264 <remove_chain>
c00061ea:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00061f1:	eb 35                	jmp    c0006228 <f_truncate+0x96>
c00061f3:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00061f6:	89 d8                	mov    eax,ebx
c00061f8:	e8 7a cb ff ff       	call   c0002d77 <get_fat>
c00061fd:	89 c2                	mov    edx,eax
c00061ff:	b8 01 00 00 00       	mov    eax,0x1
c0006204:	83 fa ff             	cmp    edx,0xffffffff
c0006207:	74 1f                	je     c0006228 <f_truncate+0x96>
c0006209:	b8 02 00 00 00       	mov    eax,0x2
c000620e:	83 fa 01             	cmp    edx,0x1
c0006211:	74 15                	je     c0006228 <f_truncate+0x96>
c0006213:	31 c0                	xor    eax,eax
c0006215:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006219:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000621c:	76 0a                	jbe    c0006228 <f_truncate+0x96>
c000621e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006221:	89 d8                	mov    eax,ebx
c0006223:	e8 3c d0 ff ff       	call   c0003264 <remove_chain>
c0006228:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000622b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000622e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006231:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006234:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006237:	83 ca 40             	or     edx,0x40
c000623a:	85 c0                	test   eax,eax
c000623c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000623f:	75 35                	jne    c0006276 <f_truncate+0xe4>
c0006241:	84 d2                	test   dl,dl
c0006243:	79 3d                	jns    c0006282 <f_truncate+0xf0>
c0006245:	83 ec 0c             	sub    esp,0xc
c0006248:	8d 43 50             	lea    eax,[ebx+0x50]
c000624b:	6a 01                	push   0x1
c000624d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006250:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006253:	50                   	push   eax
c0006254:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006258:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000625c:	50                   	push   eax
c000625d:	e8 7a b7 ff ff       	call   c00019dc <disk_write>
c0006262:	83 c4 20             	add    esp,0x20
c0006265:	85 c0                	test   eax,eax
c0006267:	75 08                	jne    c0006271 <f_truncate+0xdf>
c0006269:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000626d:	31 f6                	xor    esi,esi
c000626f:	eb 11                	jmp    c0006282 <f_truncate+0xf0>
c0006271:	b8 01 00 00 00       	mov    eax,0x1
c0006276:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c0006279:	89 c6                	mov    esi,eax
c000627b:	eb 05                	jmp    c0006282 <f_truncate+0xf0>
c000627d:	be 07 00 00 00       	mov    esi,0x7
c0006282:	89 f0                	mov    eax,esi
c0006284:	83 c4 14             	add    esp,0x14
c0006287:	5b                   	pop    ebx
c0006288:	5e                   	pop    esi
c0006289:	c3                   	ret    

c000628a <f_unlink>:
c000628a:	56                   	push   esi
c000628b:	b9 02 00 00 00       	mov    ecx,0x2
c0006290:	53                   	push   ebx
c0006291:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006297:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000629b:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00062a2:	e8 fa c1 ff ff       	call   c00024a1 <mount_volume>
c00062a7:	85 c0                	test   eax,eax
c00062a9:	0f 85 55 01 00 00    	jne    c0006404 <f_unlink+0x17a>
c00062af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062b3:	83 ec 0c             	sub    esp,0xc
c00062b6:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00062ba:	68 60 04 00 00       	push   0x460
c00062bf:	e8 80 1f 00 00       	call   c0008244 <ff_memalloc>
c00062c4:	83 c4 10             	add    esp,0x10
c00062c7:	89 c3                	mov    ebx,eax
c00062c9:	b8 11 00 00 00       	mov    eax,0x11
c00062ce:	85 db                	test   ebx,ebx
c00062d0:	0f 84 2e 01 00 00    	je     c0006404 <f_unlink+0x17a>
c00062d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062da:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00062e0:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00062e3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00062e6:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c00062ed:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062f1:	e8 21 e9 ff ff       	call   c0004c17 <follow_path>
c00062f6:	85 c0                	test   eax,eax
c00062f8:	0f 85 f2 00 00 00    	jne    c00063f0 <f_unlink+0x166>
c00062fe:	b8 06 00 00 00       	mov    eax,0x6
c0006303:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000630b:	0f 88 df 00 00 00    	js     c00063f0 <f_unlink+0x166>
c0006311:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006316:	74 0a                	je     c0006322 <f_unlink+0x98>
c0006318:	b8 07 00 00 00       	mov    eax,0x7
c000631d:	e9 ce 00 00 00       	jmp    c00063f0 <f_unlink+0x166>
c0006322:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006326:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000632a:	8a 02                	mov    al,BYTE PTR [edx]
c000632c:	3c 04                	cmp    al,0x4
c000632e:	75 12                	jne    c0006342 <f_unlink+0xb8>
c0006330:	8d 42 10             	lea    eax,[edx+0x10]
c0006333:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006337:	e8 a1 e8 ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c000633c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006340:	eb 0e                	jmp    c0006350 <f_unlink+0xc6>
c0006342:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006349:	e8 3e e8 ff ff       	call   c0004b8c <ld_clust.isra.0>
c000634e:	89 c6                	mov    esi,eax
c0006350:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c0006355:	75 12                	jne    c0006369 <f_unlink+0xdf>
c0006357:	8d 44 24 48          	lea    eax,[esp+0x48]
c000635b:	e8 94 d6 ff ff       	call   c00039f4 <dir_remove>
c0006360:	85 c0                	test   eax,eax
c0006362:	74 6c                	je     c00063d0 <f_unlink+0x146>
c0006364:	e9 87 00 00 00       	jmp    c00063f0 <f_unlink+0x166>
c0006369:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000636d:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c0006374:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c000637b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000637e:	75 21                	jne    c00063a1 <f_unlink+0x117>
c0006380:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006384:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0006388:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c000638f:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006396:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c000639a:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00063a1:	31 d2                	xor    edx,edx
c00063a3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063aa:	e8 be cb ff ff       	call   c0002f6d <dir_sdi>
c00063af:	85 c0                	test   eax,eax
c00063b1:	75 3d                	jne    c00063f0 <f_unlink+0x166>
c00063b3:	31 d2                	xor    edx,edx
c00063b5:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063bc:	e8 bc d3 ff ff       	call   c000377d <dir_read>
c00063c1:	85 c0                	test   eax,eax
c00063c3:	0f 84 4f ff ff ff    	je     c0006318 <f_unlink+0x8e>
c00063c9:	83 f8 04             	cmp    eax,0x4
c00063cc:	75 22                	jne    c00063f0 <f_unlink+0x166>
c00063ce:	eb 87                	jmp    c0006357 <f_unlink+0xcd>
c00063d0:	85 f6                	test   esi,esi
c00063d2:	75 0b                	jne    c00063df <f_unlink+0x155>
c00063d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063d8:	e8 3d df ff ff       	call   c000431a <sync_fs>
c00063dd:	eb 11                	jmp    c00063f0 <f_unlink+0x166>
c00063df:	31 c9                	xor    ecx,ecx
c00063e1:	89 f2                	mov    edx,esi
c00063e3:	8d 44 24 20          	lea    eax,[esp+0x20]
c00063e7:	e8 78 ce ff ff       	call   c0003264 <remove_chain>
c00063ec:	85 c0                	test   eax,eax
c00063ee:	74 e4                	je     c00063d4 <f_unlink+0x14a>
c00063f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063f4:	83 ec 0c             	sub    esp,0xc
c00063f7:	53                   	push   ebx
c00063f8:	e8 5d 1e 00 00       	call   c000825a <ff_memfree>
c00063fd:	83 c4 10             	add    esp,0x10
c0006400:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006404:	81 c4 e4 00 00 00    	add    esp,0xe4
c000640a:	5b                   	pop    ebx
c000640b:	5e                   	pop    esi
c000640c:	c3                   	ret    

c000640d <f_mkdir>:
c000640d:	57                   	push   edi
c000640e:	b9 02 00 00 00       	mov    ecx,0x2
c0006413:	56                   	push   esi
c0006414:	53                   	push   ebx
c0006415:	83 c4 80             	add    esp,0xffffff80
c0006418:	8d 54 24 08          	lea    edx,[esp+0x8]
c000641c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006423:	e8 79 c0 ff ff       	call   c00024a1 <mount_volume>
c0006428:	89 c3                	mov    ebx,eax
c000642a:	85 c0                	test   eax,eax
c000642c:	0f 85 fe 01 00 00    	jne    c0006630 <f_mkdir+0x223>
c0006432:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006436:	bb 11 00 00 00       	mov    ebx,0x11
c000643b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000643f:	83 ec 0c             	sub    esp,0xc
c0006442:	68 60 04 00 00       	push   0x460
c0006447:	e8 f8 1d 00 00       	call   c0008244 <ff_memalloc>
c000644c:	83 c4 10             	add    esp,0x10
c000644f:	89 c7                	mov    edi,eax
c0006451:	85 c0                	test   eax,eax
c0006453:	0f 84 d7 01 00 00    	je     c0006630 <f_mkdir+0x223>
c0006459:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000645d:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006463:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0006466:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006469:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006470:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006474:	e8 9e e7 ff ff       	call   c0004c17 <follow_path>
c0006479:	89 c3                	mov    ebx,eax
c000647b:	85 c0                	test   eax,eax
c000647d:	74 3e                	je     c00064bd <f_mkdir+0xb0>
c000647f:	83 f8 04             	cmp    eax,0x4
c0006482:	75 3e                	jne    c00064c2 <f_mkdir+0xb5>
c0006484:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006488:	31 d2                	xor    edx,edx
c000648a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000648e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006492:	e8 ce cb ff ff       	call   c0003065 <create_chain>
c0006497:	89 c6                	mov    esi,eax
c0006499:	85 c0                	test   eax,eax
c000649b:	74 0c                	je     c00064a9 <f_mkdir+0x9c>
c000649d:	bb 02 00 00 00       	mov    ebx,0x2
c00064a2:	83 f8 01             	cmp    eax,0x1
c00064a5:	74 07                	je     c00064ae <f_mkdir+0xa1>
c00064a7:	eb 2a                	jmp    c00064d3 <f_mkdir+0xc6>
c00064a9:	bb 07 00 00 00       	mov    ebx,0x7
c00064ae:	31 c9                	xor    ecx,ecx
c00064b0:	89 f2                	mov    edx,esi
c00064b2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064b6:	e8 a9 cd ff ff       	call   c0003264 <remove_chain>
c00064bb:	eb 05                	jmp    c00064c2 <f_mkdir+0xb5>
c00064bd:	bb 08 00 00 00       	mov    ebx,0x8
c00064c2:	83 ec 0c             	sub    esp,0xc
c00064c5:	57                   	push   edi
c00064c6:	e8 8f 1d 00 00       	call   c000825a <ff_memfree>
c00064cb:	83 c4 10             	add    esp,0x10
c00064ce:	e9 5d 01 00 00       	jmp    c0006630 <f_mkdir+0x223>
c00064d3:	bb 01 00 00 00       	mov    ebx,0x1
c00064d8:	83 f8 ff             	cmp    eax,0xffffffff
c00064db:	74 d1                	je     c00064ae <f_mkdir+0xa1>
c00064dd:	89 f2                	mov    edx,esi
c00064df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064e3:	e8 c4 ce ff ff       	call   c00033ac <dir_clear>
c00064e8:	89 c3                	mov    ebx,eax
c00064ea:	85 c0                	test   eax,eax
c00064ec:	75 c0                	jne    c00064ae <f_mkdir+0xa1>
c00064ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064f2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064f5:	74 69                	je     c0006560 <f_mkdir+0x153>
c00064f7:	b9 0b 00 00 00       	mov    ecx,0xb
c00064fc:	83 c0 54             	add    eax,0x54
c00064ff:	ba 20 00 00 00       	mov    edx,0x20
c0006504:	e8 9c b5 ff ff       	call   c0001aa5 <mem_set>
c0006509:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000650d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006512:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006516:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000651a:	83 c0 6a             	add    eax,0x6a
c000651d:	e8 65 b5 ff ff       	call   c0001a87 <st_dword>
c0006522:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006526:	89 f1                	mov    ecx,esi
c0006528:	8d 50 54             	lea    edx,[eax+0x54]
c000652b:	e8 85 e6 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0006530:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006534:	b9 20 00 00 00       	mov    ecx,0x20
c0006539:	8d 50 54             	lea    edx,[eax+0x54]
c000653c:	83 c0 74             	add    eax,0x74
c000653f:	e8 4c b5 ff ff       	call   c0001a90 <mem_cpy>
c0006544:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006548:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000654c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006550:	8d 50 74             	lea    edx,[eax+0x74]
c0006553:	e8 5d e6 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0006558:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000655c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006560:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006564:	e8 2f db ff ff       	call   c0004098 <dir_register>
c0006569:	89 c3                	mov    ebx,eax
c000656b:	85 c0                	test   eax,eax
c000656d:	0f 85 3b ff ff ff    	jne    c00064ae <f_mkdir+0xa1>
c0006573:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006577:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000657a:	75 74                	jne    c00065f0 <f_mkdir+0x1e3>
c000657c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000657f:	ba 00 00 21 50       	mov    edx,0x50210000
c0006584:	83 c0 0c             	add    eax,0xc
c0006587:	e8 fb b4 ff ff       	call   c0001a87 <st_dword>
c000658c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006590:	89 f2                	mov    edx,esi
c0006592:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006595:	83 c0 34             	add    eax,0x34
c0006598:	e8 ea b4 ff ff       	call   c0001a87 <st_dword>
c000659d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065a5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065a8:	c1 e2 09             	shl    edx,0x9
c00065ab:	83 c0 38             	add    eax,0x38
c00065ae:	e8 d4 b4 ff ff       	call   c0001a87 <st_dword>
c00065b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065be:	c1 e2 09             	shl    edx,0x9
c00065c1:	83 c0 28             	add    eax,0x28
c00065c4:	e8 be b4 ff ff       	call   c0001a87 <st_dword>
c00065c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00065d0:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00065d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065d7:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00065db:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065df:	e8 8b d3 ff ff       	call   c000396f <store_xdir>
c00065e4:	89 c3                	mov    ebx,eax
c00065e6:	85 c0                	test   eax,eax
c00065e8:	0f 85 d4 fe ff ff    	jne    c00064c2 <f_mkdir+0xb5>
c00065ee:	eb 30                	jmp    c0006620 <f_mkdir+0x213>
c00065f0:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00065f4:	ba 00 00 21 50       	mov    edx,0x50210000
c00065f9:	83 c0 16             	add    eax,0x16
c00065fc:	e8 86 b4 ff ff       	call   c0001a87 <st_dword>
c0006601:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006605:	89 f1                	mov    ecx,esi
c0006607:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000660b:	e8 a5 e5 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0006610:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006614:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006618:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000661c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006620:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006624:	e8 f1 dc ff ff       	call   c000431a <sync_fs>
c0006629:	89 c3                	mov    ebx,eax
c000662b:	e9 92 fe ff ff       	jmp    c00064c2 <f_mkdir+0xb5>
c0006630:	83 ec 80             	sub    esp,0xffffff80
c0006633:	89 d8                	mov    eax,ebx
c0006635:	5b                   	pop    ebx
c0006636:	5e                   	pop    esi
c0006637:	5f                   	pop    edi
c0006638:	c3                   	ret    

c0006639 <f_rename>:
c0006639:	55                   	push   ebp
c000663a:	57                   	push   edi
c000663b:	56                   	push   esi
c000663c:	53                   	push   ebx
c000663d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006643:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000664a:	e8 a4 b9 ff ff       	call   c0001ff3 <get_ldnumber>
c000664f:	b9 02 00 00 00       	mov    ecx,0x2
c0006654:	8d 54 24 14          	lea    edx,[esp+0x14]
c0006658:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c000665f:	e8 3d be ff ff       	call   c00024a1 <mount_volume>
c0006664:	85 c0                	test   eax,eax
c0006666:	0f 85 b5 02 00 00    	jne    c0006921 <f_rename+0x2e8>
c000666c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006670:	83 ec 0c             	sub    esp,0xc
c0006673:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0006677:	68 60 04 00 00       	push   0x460
c000667c:	e8 c3 1b 00 00       	call   c0008244 <ff_memalloc>
c0006681:	83 c4 10             	add    esp,0x10
c0006684:	89 c3                	mov    ebx,eax
c0006686:	b8 11 00 00 00       	mov    eax,0x11
c000668b:	85 db                	test   ebx,ebx
c000668d:	0f 84 8e 02 00 00    	je     c0006921 <f_rename+0x2e8>
c0006693:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006697:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000669d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00066a0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066a3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00066aa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00066ae:	e8 64 e5 ff ff       	call   c0004c17 <follow_path>
c00066b3:	85 c0                	test   eax,eax
c00066b5:	0f 85 52 02 00 00    	jne    c000690d <f_rename+0x2d4>
c00066bb:	b8 06 00 00 00       	mov    eax,0x6
c00066c0:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00066c8:	0f 85 3f 02 00 00    	jne    c000690d <f_rename+0x2d4>
c00066ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066d2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066d5:	0f 85 05 01 00 00    	jne    c00067e0 <f_rename+0x1a7>
c00066db:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00066de:	b9 40 00 00 00       	mov    ecx,0x40
c00066e3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00066e7:	e8 a4 b3 ff ff       	call   c0001a90 <mem_cpy>
c00066ec:	b9 4c 00 00 00       	mov    ecx,0x4c
c00066f1:	8d 54 24 58          	lea    edx,[esp+0x58]
c00066f5:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066fc:	e8 8f b3 ff ff       	call   c0001a90 <mem_cpy>
c0006701:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006708:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000670f:	e8 03 e5 ff ff       	call   c0004c17 <follow_path>
c0006714:	85 c0                	test   eax,eax
c0006716:	75 29                	jne    c0006741 <f_rename+0x108>
c0006718:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000671c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006723:	74 0a                	je     c000672f <f_rename+0xf6>
c0006725:	b8 08 00 00 00       	mov    eax,0x8
c000672a:	e9 de 01 00 00       	jmp    c000690d <f_rename+0x2d4>
c000672f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006736:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000673d:	75 e6                	jne    c0006725 <f_rename+0xec>
c000673f:	eb 09                	jmp    c000674a <f_rename+0x111>
c0006741:	83 f8 04             	cmp    eax,0x4
c0006744:	0f 85 c3 01 00 00    	jne    c000690d <f_rename+0x2d4>
c000674a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006751:	e8 42 d9 ff ff       	call   c0004098 <dir_register>
c0006756:	85 c0                	test   eax,eax
c0006758:	0f 85 af 01 00 00    	jne    c000690d <f_rename+0x2d4>
c000675e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006762:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0006765:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0006768:	89 c5                	mov    ebp,eax
c000676a:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c000676d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006771:	8d 46 24             	lea    eax,[esi+0x24]
c0006774:	e8 98 b2 ff ff       	call   c0001a11 <ld_word>
c0006779:	b9 40 00 00 00       	mov    ecx,0x40
c000677e:	89 c7                	mov    edi,eax
c0006780:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006784:	89 f0                	mov    eax,esi
c0006786:	e8 05 b3 ff ff       	call   c0001a90 <mem_cpy>
c000678b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000678f:	89 e9                	mov    ecx,ebp
c0006791:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006794:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006797:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c000679b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000679f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067a2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00067a5:	0f b7 d7             	movzx  edx,di
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 24             	add    eax,0x24
c00067ae:	e8 d0 b2 ff ff       	call   c0001a83 <st_word>
c00067b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067b7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067ba:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00067bd:	a8 10                	test   al,0x10
c00067bf:	75 06                	jne    c00067c7 <f_rename+0x18e>
c00067c1:	83 c8 20             	or     eax,0x20
c00067c4:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00067c7:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067ce:	e8 9c d1 ff ff       	call   c000396f <store_xdir>
c00067d3:	85 c0                	test   eax,eax
c00067d5:	0f 84 1c 01 00 00    	je     c00068f7 <f_rename+0x2be>
c00067db:	e9 2d 01 00 00       	jmp    c000690d <f_rename+0x2d4>
c00067e0:	b9 20 00 00 00       	mov    ecx,0x20
c00067e5:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00067ec:	8d 44 24 18          	lea    eax,[esp+0x18]
c00067f0:	e8 9b b2 ff ff       	call   c0001a90 <mem_cpy>
c00067f5:	b9 4c 00 00 00       	mov    ecx,0x4c
c00067fa:	8d 54 24 58          	lea    edx,[esp+0x58]
c00067fe:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006805:	e8 86 b2 ff ff       	call   c0001a90 <mem_cpy>
c000680a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006811:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006818:	e8 fa e3 ff ff       	call   c0004c17 <follow_path>
c000681d:	85 c0                	test   eax,eax
c000681f:	75 27                	jne    c0006848 <f_rename+0x20f>
c0006821:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006825:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000682c:	0f 85 f3 fe ff ff    	jne    c0006725 <f_rename+0xec>
c0006832:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006839:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006840:	0f 85 df fe ff ff    	jne    c0006725 <f_rename+0xec>
c0006846:	eb 09                	jmp    c0006851 <f_rename+0x218>
c0006848:	83 f8 04             	cmp    eax,0x4
c000684b:	0f 85 bc 00 00 00    	jne    c000690d <f_rename+0x2d4>
c0006851:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006858:	e8 3b d8 ff ff       	call   c0004098 <dir_register>
c000685d:	85 c0                	test   eax,eax
c000685f:	0f 85 a8 00 00 00    	jne    c000690d <f_rename+0x2d4>
c0006865:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c000686c:	b9 13 00 00 00       	mov    ecx,0x13
c0006871:	8d 46 0d             	lea    eax,[esi+0xd]
c0006874:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006878:	e8 13 b2 ff ff       	call   c0001a90 <mem_cpy>
c000687d:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006881:	a8 10                	test   al,0x10
c0006883:	75 03                	jne    c0006888 <f_rename+0x24f>
c0006885:	83 c8 20             	or     eax,0x20
c0006888:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c000688b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000688f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006893:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006897:	74 5e                	je     c00068f7 <f_rename+0x2be>
c0006899:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00068a0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00068a4:	74 51                	je     c00068f7 <f_rename+0x2be>
c00068a6:	89 f2                	mov    edx,esi
c00068a8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00068ac:	8a 07                	mov    al,BYTE PTR [edi]
c00068ae:	e8 d9 e2 ff ff       	call   c0004b8c <ld_clust.isra.0>
c00068b3:	89 c2                	mov    edx,eax
c00068b5:	89 f8                	mov    eax,edi
c00068b7:	e8 ee b3 ff ff       	call   c0001caa <clst2sect>
c00068bc:	89 c6                	mov    esi,eax
c00068be:	89 d1                	mov    ecx,edx
c00068c0:	b8 02 00 00 00       	mov    eax,0x2
c00068c5:	09 f2                	or     edx,esi
c00068c7:	74 44                	je     c000690d <f_rename+0x2d4>
c00068c9:	89 f2                	mov    edx,esi
c00068cb:	89 f8                	mov    eax,edi
c00068cd:	e8 1d b9 ff ff       	call   c00021ef <move_window>
c00068d2:	85 c0                	test   eax,eax
c00068d4:	75 37                	jne    c000690d <f_rename+0x2d4>
c00068d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068da:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c00068de:	75 17                	jne    c00068f7 <f_rename+0x2be>
c00068e0:	8d 50 74             	lea    edx,[eax+0x74]
c00068e3:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c00068ea:	e8 c6 e2 ff ff       	call   c0004bb5 <st_clust.isra.1>
c00068ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068f3:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068f7:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fb:	e8 f4 d0 ff ff       	call   c00039f4 <dir_remove>
c0006900:	85 c0                	test   eax,eax
c0006902:	75 09                	jne    c000690d <f_rename+0x2d4>
c0006904:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006908:	e8 0d da ff ff       	call   c000431a <sync_fs>
c000690d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006911:	83 ec 0c             	sub    esp,0xc
c0006914:	53                   	push   ebx
c0006915:	e8 40 19 00 00       	call   c000825a <ff_memfree>
c000691a:	83 c4 10             	add    esp,0x10
c000691d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006921:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006927:	5b                   	pop    ebx
c0006928:	5e                   	pop    esi
c0006929:	5f                   	pop    edi
c000692a:	5d                   	pop    ebp
c000692b:	c3                   	ret    

c000692c <f_chmod>:
c000692c:	57                   	push   edi
c000692d:	b9 02 00 00 00       	mov    ecx,0x2
c0006932:	56                   	push   esi
c0006933:	53                   	push   ebx
c0006934:	83 ec 60             	sub    esp,0x60
c0006937:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000693b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000693f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006943:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006947:	e8 55 bb ff ff       	call   c00024a1 <mount_volume>
c000694c:	85 c0                	test   eax,eax
c000694e:	0f 85 af 00 00 00    	jne    c0006a03 <f_chmod+0xd7>
c0006954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006958:	83 ec 0c             	sub    esp,0xc
c000695b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000695f:	68 60 04 00 00       	push   0x460
c0006964:	e8 db 18 00 00       	call   c0008244 <ff_memalloc>
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	89 c6                	mov    esi,eax
c000696e:	b8 11 00 00 00       	mov    eax,0x11
c0006973:	85 f6                	test   esi,esi
c0006975:	0f 84 88 00 00 00    	je     c0006a03 <f_chmod+0xd7>
c000697b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000697f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006985:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006988:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000698b:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c000698f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006993:	e8 7f e2 ff ff       	call   c0004c17 <follow_path>
c0006998:	85 c0                	test   eax,eax
c000699a:	75 53                	jne    c00069ef <f_chmod+0xc3>
c000699c:	b8 06 00 00 00       	mov    eax,0x6
c00069a1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069a6:	75 47                	jne    c00069ef <f_chmod+0xc3>
c00069a8:	89 f9                	mov    ecx,edi
c00069aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069ae:	83 e1 27             	and    ecx,0x27
c00069b1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00069b4:	75 1d                	jne    c00069d3 <f_chmod+0xa7>
c00069b6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069b9:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069bc:	21 cb                	and    ebx,ecx
c00069be:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069c1:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00069c4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069c8:	e8 a2 cf ff ff       	call   c000396f <store_xdir>
c00069cd:	85 c0                	test   eax,eax
c00069cf:	75 1e                	jne    c00069ef <f_chmod+0xc3>
c00069d1:	eb 13                	jmp    c00069e6 <f_chmod+0xba>
c00069d3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00069d7:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069da:	21 cb                	and    ebx,ecx
c00069dc:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069df:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c00069e2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069ea:	e8 2b d9 ff ff       	call   c000431a <sync_fs>
c00069ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00069f3:	83 ec 0c             	sub    esp,0xc
c00069f6:	56                   	push   esi
c00069f7:	e8 5e 18 00 00       	call   c000825a <ff_memfree>
c00069fc:	83 c4 10             	add    esp,0x10
c00069ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a03:	83 c4 60             	add    esp,0x60
c0006a06:	5b                   	pop    ebx
c0006a07:	5e                   	pop    esi
c0006a08:	5f                   	pop    edi
c0006a09:	c3                   	ret    

c0006a0a <f_utime>:
c0006a0a:	56                   	push   esi
c0006a0b:	b9 02 00 00 00       	mov    ecx,0x2
c0006a10:	53                   	push   ebx
c0006a11:	83 ec 64             	sub    esp,0x64
c0006a14:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a18:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a1c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a20:	e8 7c ba ff ff       	call   c00024a1 <mount_volume>
c0006a25:	85 c0                	test   eax,eax
c0006a27:	0f 85 b5 00 00 00    	jne    c0006ae2 <f_utime+0xd8>
c0006a2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a31:	83 ec 0c             	sub    esp,0xc
c0006a34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a38:	68 60 04 00 00       	push   0x460
c0006a3d:	e8 02 18 00 00       	call   c0008244 <ff_memalloc>
c0006a42:	83 c4 10             	add    esp,0x10
c0006a45:	89 c3                	mov    ebx,eax
c0006a47:	b8 11 00 00 00       	mov    eax,0x11
c0006a4c:	85 db                	test   ebx,ebx
c0006a4e:	0f 84 8e 00 00 00    	je     c0006ae2 <f_utime+0xd8>
c0006a54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a58:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006a5e:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006a61:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006a64:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006a68:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a6c:	e8 a6 e1 ff ff       	call   c0004c17 <follow_path>
c0006a71:	85 c0                	test   eax,eax
c0006a73:	75 59                	jne    c0006ace <f_utime+0xc4>
c0006a75:	b8 06 00 00 00       	mov    eax,0x6
c0006a7a:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006a7f:	75 4d                	jne    c0006ace <f_utime+0xc4>
c0006a81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a85:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a89:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a8d:	c1 e2 10             	shl    edx,0x10
c0006a90:	09 ca                	or     edx,ecx
c0006a92:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a95:	75 1a                	jne    c0006ab1 <f_utime+0xa7>
c0006a97:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a9a:	83 c0 0c             	add    eax,0xc
c0006a9d:	e8 e5 af ff ff       	call   c0001a87 <st_dword>
c0006aa2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006aa6:	e8 c4 ce ff ff       	call   c000396f <store_xdir>
c0006aab:	85 c0                	test   eax,eax
c0006aad:	75 1f                	jne    c0006ace <f_utime+0xc4>
c0006aaf:	eb 14                	jmp    c0006ac5 <f_utime+0xbb>
c0006ab1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ab5:	83 c0 16             	add    eax,0x16
c0006ab8:	e8 ca af ff ff       	call   c0001a87 <st_dword>
c0006abd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac9:	e8 4c d8 ff ff       	call   c000431a <sync_fs>
c0006ace:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ad2:	83 ec 0c             	sub    esp,0xc
c0006ad5:	53                   	push   ebx
c0006ad6:	e8 7f 17 00 00       	call   c000825a <ff_memfree>
c0006adb:	83 c4 10             	add    esp,0x10
c0006ade:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ae2:	83 c4 64             	add    esp,0x64
c0006ae5:	5b                   	pop    ebx
c0006ae6:	5e                   	pop    esi
c0006ae7:	c3                   	ret    

c0006ae8 <f_getlabel>:
c0006ae8:	55                   	push   ebp
c0006ae9:	31 c9                	xor    ecx,ecx
c0006aeb:	57                   	push   edi
c0006aec:	56                   	push   esi
c0006aed:	53                   	push   ebx
c0006aee:	83 ec 6c             	sub    esp,0x6c
c0006af1:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006af5:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006afc:	e8 a0 b9 ff ff       	call   c00024a1 <mount_volume>
c0006b01:	89 c6                	mov    esi,eax
c0006b03:	85 c0                	test   eax,eax
c0006b05:	0f 85 c1 01 00 00    	jne    c0006ccc <f_getlabel+0x1e4>
c0006b0b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006b13:	0f 84 5f 01 00 00    	je     c0006c78 <f_getlabel+0x190>
c0006b19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b1d:	31 d2                	xor    edx,edx
c0006b1f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b23:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b2b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b2f:	e8 39 c4 ff ff       	call   c0002f6d <dir_sdi>
c0006b34:	85 c0                	test   eax,eax
c0006b36:	0f 85 2d 01 00 00    	jne    c0006c69 <f_getlabel+0x181>
c0006b3c:	ba 01 00 00 00       	mov    edx,0x1
c0006b41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b45:	e8 33 cc ff ff       	call   c000377d <dir_read>
c0006b4a:	85 c0                	test   eax,eax
c0006b4c:	0f 85 17 01 00 00    	jne    c0006c69 <f_getlabel+0x181>
c0006b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b56:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b59:	74 09                	je     c0006b64 <f_getlabel+0x7c>
c0006b5b:	31 db                	xor    ebx,ebx
c0006b5d:	31 c9                	xor    ecx,ecx
c0006b5f:	e9 c8 00 00 00       	jmp    c0006c2c <f_getlabel+0x144>
c0006b64:	31 ed                	xor    ebp,ebp
c0006b66:	31 db                	xor    ebx,ebx
c0006b68:	31 ff                	xor    edi,edi
c0006b6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006b6e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006b72:	39 fa                	cmp    edx,edi
c0006b74:	76 4b                	jbe    c0006bc1 <f_getlabel+0xd9>
c0006b76:	47                   	inc    edi
c0006b77:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006b7a:	01 d0                	add    eax,edx
c0006b7c:	e8 90 ae ff ff       	call   c0001a11 <ld_word>
c0006b81:	66 85 ed             	test   bp,bp
c0006b84:	75 0d                	jne    c0006b93 <f_getlabel+0xab>
c0006b86:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b8c:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b91:	76 28                	jbe    c0006bbb <f_getlabel+0xd3>
c0006b93:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b9a:	89 e9                	mov    ecx,ebp
c0006b9c:	01 da                	add    edx,ebx
c0006b9e:	c1 e1 10             	shl    ecx,0x10
c0006ba1:	0f b7 c0             	movzx  eax,ax
c0006ba4:	09 c8                	or     eax,ecx
c0006ba6:	b9 04 00 00 00       	mov    ecx,0x4
c0006bab:	e8 01 b0 ff ff       	call   c0001bb1 <put_utf>
c0006bb0:	84 c0                	test   al,al
c0006bb2:	74 0b                	je     c0006bbf <f_getlabel+0xd7>
c0006bb4:	0f b6 c0             	movzx  eax,al
c0006bb7:	01 c3                	add    ebx,eax
c0006bb9:	31 c0                	xor    eax,eax
c0006bbb:	89 c5                	mov    ebp,eax
c0006bbd:	eb ab                	jmp    c0006b6a <f_getlabel+0x82>
c0006bbf:	31 db                	xor    ebx,ebx
c0006bc1:	66 85 ed             	test   bp,bp
c0006bc4:	74 02                	je     c0006bc8 <f_getlabel+0xe0>
c0006bc6:	31 db                	xor    ebx,ebx
c0006bc8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bcf:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006bd3:	e9 a0 00 00 00       	jmp    c0006c78 <f_getlabel+0x190>
c0006bd8:	83 ff 0b             	cmp    edi,0xb
c0006bdb:	74 11                	je     c0006bee <f_getlabel+0x106>
c0006bdd:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006be2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006be6:	8d 79 02             	lea    edi,[ecx+0x2]
c0006be9:	c1 e0 08             	shl    eax,0x8
c0006bec:	09 c2                	or     edx,eax
c0006bee:	0f b7 d2             	movzx  edx,dx
c0006bf1:	50                   	push   eax
c0006bf2:	50                   	push   eax
c0006bf3:	68 b5 01 00 00       	push   0x1b5
c0006bf8:	52                   	push   edx
c0006bf9:	e8 03 17 00 00       	call   c0008301 <ff_oem2uni>
c0006bfe:	83 c4 10             	add    esp,0x10
c0006c01:	66 85 c0             	test   ax,ax
c0006c04:	74 46                	je     c0006c4c <f_getlabel+0x164>
c0006c06:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006c0d:	0f b7 c0             	movzx  eax,ax
c0006c10:	01 da                	add    edx,ebx
c0006c12:	b9 04 00 00 00       	mov    ecx,0x4
c0006c17:	e8 95 af ff ff       	call   c0001bb1 <put_utf>
c0006c1c:	84 c0                	test   al,al
c0006c1e:	74 2c                	je     c0006c4c <f_getlabel+0x164>
c0006c20:	0f b6 c0             	movzx  eax,al
c0006c23:	01 c3                	add    ebx,eax
c0006c25:	83 ff 0b             	cmp    edi,0xb
c0006c28:	74 24                	je     c0006c4e <f_getlabel+0x166>
c0006c2a:	89 f9                	mov    ecx,edi
c0006c2c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c30:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c33:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c38:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c41:	e8 9f ae ff ff       	call   c0001ae5 <dbc_1st>
c0006c46:	85 c0                	test   eax,eax
c0006c48:	74 a4                	je     c0006bee <f_getlabel+0x106>
c0006c4a:	eb 8c                	jmp    c0006bd8 <f_getlabel+0xf0>
c0006c4c:	31 db                	xor    ebx,ebx
c0006c4e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006c55:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006c58:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006c5f:	74 17                	je     c0006c78 <f_getlabel+0x190>
c0006c61:	4b                   	dec    ebx
c0006c62:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006c65:	74 ee                	je     c0006c55 <f_getlabel+0x16d>
c0006c67:	eb 0f                	jmp    c0006c78 <f_getlabel+0x190>
c0006c69:	83 f8 04             	cmp    eax,0x4
c0006c6c:	75 5c                	jne    c0006cca <f_getlabel+0x1e2>
c0006c6e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c75:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006c78:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006c80:	74 4a                	je     c0006ccc <f_getlabel+0x1e4>
c0006c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c86:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c89:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c8c:	e8 5e b5 ff ff       	call   c00021ef <move_window>
c0006c91:	89 c6                	mov    esi,eax
c0006c93:	85 c0                	test   eax,eax
c0006c95:	75 35                	jne    c0006ccc <f_getlabel+0x1e4>
c0006c97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c9b:	b8 43 00 00 00       	mov    eax,0x43
c0006ca0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ca2:	80 f9 03             	cmp    cl,0x3
c0006ca5:	74 0f                	je     c0006cb6 <f_getlabel+0x1ce>
c0006ca7:	31 c0                	xor    eax,eax
c0006ca9:	80 f9 04             	cmp    cl,0x4
c0006cac:	0f 94 c0             	sete   al
c0006caf:	48                   	dec    eax
c0006cb0:	83 e0 c3             	and    eax,0xffffffc3
c0006cb3:	83 c0 64             	add    eax,0x64
c0006cb6:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006cba:	e8 5f ad ff ff       	call   c0001a1e <ld_dword>
c0006cbf:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006cc6:	89 07                	mov    DWORD PTR [edi],eax
c0006cc8:	eb 02                	jmp    c0006ccc <f_getlabel+0x1e4>
c0006cca:	89 c6                	mov    esi,eax
c0006ccc:	83 c4 6c             	add    esp,0x6c
c0006ccf:	89 f0                	mov    eax,esi
c0006cd1:	5b                   	pop    ebx
c0006cd2:	5e                   	pop    esi
c0006cd3:	5f                   	pop    edi
c0006cd4:	5d                   	pop    ebp
c0006cd5:	c3                   	ret    

c0006cd6 <f_setlabel>:
c0006cd6:	56                   	push   esi
c0006cd7:	b9 02 00 00 00       	mov    ecx,0x2
c0006cdc:	53                   	push   ebx
c0006cdd:	83 ec 74             	sub    esp,0x74
c0006ce0:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006ce4:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006ceb:	e8 b1 b7 ff ff       	call   c00024a1 <mount_volume>
c0006cf0:	89 c6                	mov    esi,eax
c0006cf2:	85 c0                	test   eax,eax
c0006cf4:	0f 85 41 02 00 00    	jne    c0006f3b <f_setlabel+0x265>
c0006cfa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006cfe:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d01:	0f 85 8e 00 00 00    	jne    c0006d95 <f_setlabel+0xbf>
c0006d07:	b9 16 00 00 00       	mov    ecx,0x16
c0006d0c:	31 d2                	xor    edx,edx
c0006d0e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d12:	31 db                	xor    ebx,ebx
c0006d14:	e8 8c ad ff ff       	call   c0001aa5 <mem_set>
c0006d19:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d20:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d23:	0f 86 0a 01 00 00    	jbe    c0006e33 <f_setlabel+0x15d>
c0006d29:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d30:	e8 b6 ad ff ff       	call   c0001aeb <tchar2uni>
c0006d35:	89 c6                	mov    esi,eax
c0006d37:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d3c:	76 2a                	jbe    c0006d68 <f_setlabel+0x92>
c0006d3e:	83 f8 ff             	cmp    eax,0xffffffff
c0006d41:	74 05                	je     c0006d48 <f_setlabel+0x72>
c0006d43:	83 fb 09             	cmp    ebx,0x9
c0006d46:	76 0a                	jbe    c0006d52 <f_setlabel+0x7c>
c0006d48:	be 06 00 00 00       	mov    esi,0x6
c0006d4d:	e9 e9 01 00 00       	jmp    c0006f3b <f_setlabel+0x265>
c0006d52:	89 c2                	mov    edx,eax
c0006d54:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d58:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d5b:	c1 ea 10             	shr    edx,0x10
c0006d5e:	01 c8                	add    eax,ecx
c0006d60:	43                   	inc    ebx
c0006d61:	e8 1d ad ff ff       	call   c0001a83 <st_word>
c0006d66:	eb 04                	jmp    c0006d6c <f_setlabel+0x96>
c0006d68:	85 c0                	test   eax,eax
c0006d6a:	74 dc                	je     c0006d48 <f_setlabel+0x72>
c0006d6c:	89 f2                	mov    edx,esi
c0006d6e:	b8 57 7c 02 c0       	mov    eax,0xc0027c57
c0006d73:	e8 5b ad ff ff       	call   c0001ad3 <chk_chr>
c0006d78:	85 c0                	test   eax,eax
c0006d7a:	75 cc                	jne    c0006d48 <f_setlabel+0x72>
c0006d7c:	83 fb 0a             	cmp    ebx,0xa
c0006d7f:	77 c7                	ja     c0006d48 <f_setlabel+0x72>
c0006d81:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d84:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d88:	0f b7 d6             	movzx  edx,si
c0006d8b:	01 c8                	add    eax,ecx
c0006d8d:	43                   	inc    ebx
c0006d8e:	e8 f0 ac ff ff       	call   c0001a83 <st_word>
c0006d93:	eb 84                	jmp    c0006d19 <f_setlabel+0x43>
c0006d95:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d9a:	ba 20 00 00 00       	mov    edx,0x20
c0006d9f:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006da3:	31 db                	xor    ebx,ebx
c0006da5:	e8 fb ac ff ff       	call   c0001aa5 <mem_set>
c0006daa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006db1:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006db4:	76 60                	jbe    c0006e16 <f_setlabel+0x140>
c0006db6:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006dbd:	e8 29 ad ff ff       	call   c0001aeb <tchar2uni>
c0006dc2:	3d ff ff 00 00       	cmp    eax,0xffff
c0006dc7:	0f 87 7b ff ff ff    	ja     c0006d48 <f_setlabel+0x72>
c0006dcd:	83 ec 0c             	sub    esp,0xc
c0006dd0:	50                   	push   eax
c0006dd1:	e8 97 15 00 00       	call   c000836d <ff_wtoupper>
c0006dd6:	5a                   	pop    edx
c0006dd7:	59                   	pop    ecx
c0006dd8:	68 b5 01 00 00       	push   0x1b5
c0006ddd:	50                   	push   eax
c0006dde:	e8 8e 14 00 00       	call   c0008271 <ff_uni2oem>
c0006de3:	83 c4 10             	add    esp,0x10
c0006de6:	89 c6                	mov    esi,eax
c0006de8:	66 85 c0             	test   ax,ax
c0006deb:	0f 84 57 ff ff ff    	je     c0006d48 <f_setlabel+0x72>
c0006df1:	0f b7 d0             	movzx  edx,ax
c0006df4:	b8 50 7c 02 c0       	mov    eax,0xc0027c50
c0006df9:	e8 d5 ac ff ff       	call   c0001ad3 <chk_chr>
c0006dfe:	85 c0                	test   eax,eax
c0006e00:	0f 85 42 ff ff ff    	jne    c0006d48 <f_setlabel+0x72>
c0006e06:	66 81 fe ff 00       	cmp    si,0xff
c0006e0b:	0f 87 14 01 00 00    	ja     c0006f25 <f_setlabel+0x24f>
c0006e11:	e9 fa 00 00 00       	jmp    c0006f10 <f_setlabel+0x23a>
c0006e16:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e1b:	0f 84 27 ff ff ff    	je     c0006d48 <f_setlabel+0x72>
c0006e21:	85 db                	test   ebx,ebx
c0006e23:	74 0e                	je     c0006e33 <f_setlabel+0x15d>
c0006e25:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e28:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e2d:	75 04                	jne    c0006e33 <f_setlabel+0x15d>
c0006e2f:	89 c3                	mov    ebx,eax
c0006e31:	eb ee                	jmp    c0006e21 <f_setlabel+0x14b>
c0006e33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e37:	31 d2                	xor    edx,edx
c0006e39:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e3d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e45:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e49:	e8 1f c1 ff ff       	call   c0002f6d <dir_sdi>
c0006e4e:	89 c6                	mov    esi,eax
c0006e50:	85 c0                	test   eax,eax
c0006e52:	0f 85 e3 00 00 00    	jne    c0006f3b <f_setlabel+0x265>
c0006e58:	ba 01 00 00 00       	mov    edx,0x1
c0006e5d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e61:	e8 17 c9 ff ff       	call   c000377d <dir_read>
c0006e66:	85 c0                	test   eax,eax
c0006e68:	75 21                	jne    c0006e8b <f_setlabel+0x1b5>
c0006e6a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006e6e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e72:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006e75:	74 5d                	je     c0006ed4 <f_setlabel+0x1fe>
c0006e77:	85 db                	test   ebx,ebx
c0006e79:	74 0b                	je     c0006e86 <f_setlabel+0x1b0>
c0006e7b:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e80:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e84:	eb 70                	jmp    c0006ef6 <f_setlabel+0x220>
c0006e86:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e89:	eb 70                	jmp    c0006efb <f_setlabel+0x225>
c0006e8b:	83 f8 04             	cmp    eax,0x4
c0006e8e:	75 7c                	jne    c0006f0c <f_setlabel+0x236>
c0006e90:	85 db                	test   ebx,ebx
c0006e92:	0f 84 a3 00 00 00    	je     c0006f3b <f_setlabel+0x265>
c0006e98:	ba 01 00 00 00       	mov    edx,0x1
c0006e9d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006ea1:	e8 51 ca ff ff       	call   c00038f7 <dir_alloc>
c0006ea6:	89 c6                	mov    esi,eax
c0006ea8:	85 c0                	test   eax,eax
c0006eaa:	0f 85 8b 00 00 00    	jne    c0006f3b <f_setlabel+0x265>
c0006eb0:	31 d2                	xor    edx,edx
c0006eb2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006eb6:	b9 20 00 00 00       	mov    ecx,0x20
c0006ebb:	e8 e5 ab ff ff       	call   c0001aa5 <mem_set>
c0006ec0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ec4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ec7:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ecb:	75 18                	jne    c0006ee5 <f_setlabel+0x20f>
c0006ecd:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006ed0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ed4:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006ed7:	b9 16 00 00 00       	mov    ecx,0x16
c0006edc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ee0:	83 c0 02             	add    eax,0x2
c0006ee3:	eb 9b                	jmp    c0006e80 <f_setlabel+0x1aa>
c0006ee5:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006ee9:	b9 0b 00 00 00       	mov    ecx,0xb
c0006eee:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006ef2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ef6:	e8 95 ab ff ff       	call   c0001a90 <mem_cpy>
c0006efb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006eff:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006f03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f07:	e8 0e d4 ff ff       	call   c000431a <sync_fs>
c0006f0c:	89 c6                	mov    esi,eax
c0006f0e:	eb 2b                	jmp    c0006f3b <f_setlabel+0x265>
c0006f10:	83 fb 0a             	cmp    ebx,0xa
c0006f13:	0f 87 2f fe ff ff    	ja     c0006d48 <f_setlabel+0x72>
c0006f19:	89 f0                	mov    eax,esi
c0006f1b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f1f:	43                   	inc    ebx
c0006f20:	e9 85 fe ff ff       	jmp    c0006daa <f_setlabel+0xd4>
c0006f25:	83 fb 09             	cmp    ebx,0x9
c0006f28:	0f 87 1a fe ff ff    	ja     c0006d48 <f_setlabel+0x72>
c0006f2e:	89 f0                	mov    eax,esi
c0006f30:	66 c1 e8 08          	shr    ax,0x8
c0006f34:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f38:	43                   	inc    ebx
c0006f39:	eb de                	jmp    c0006f19 <f_setlabel+0x243>
c0006f3b:	89 f0                	mov    eax,esi
c0006f3d:	83 c4 74             	add    esp,0x74
c0006f40:	5b                   	pop    ebx
c0006f41:	5e                   	pop    esi
c0006f42:	c3                   	ret    

c0006f43 <f_forward>:
c0006f43:	55                   	push   ebp
c0006f44:	57                   	push   edi
c0006f45:	56                   	push   esi
c0006f46:	53                   	push   ebx
c0006f47:	83 ec 2c             	sub    esp,0x2c
c0006f4a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f4e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f52:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006f58:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006f5c:	89 d8                	mov    eax,ebx
c0006f5e:	e8 b1 b1 ff ff       	call   c0002114 <validate>
c0006f63:	89 c5                	mov    ebp,eax
c0006f65:	85 c0                	test   eax,eax
c0006f67:	0f 85 aa 01 00 00    	jne    c0007117 <f_forward+0x1d4>
c0006f6d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006f71:	85 ed                	test   ebp,ebp
c0006f73:	0f 85 9e 01 00 00    	jne    c0007117 <f_forward+0x1d4>
c0006f79:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006f7d:	0f 84 8f 01 00 00    	je     c0007112 <f_forward+0x1cf>
c0006f83:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f86:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f89:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f8c:	bf 00 00 00 00       	mov    edi,0x0
c0006f91:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f94:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f98:	89 d1                	mov    ecx,edx
c0006f9a:	19 f9                	sbb    ecx,edi
c0006f9c:	0f 83 cf 00 00 00    	jae    c0007071 <f_forward+0x12e>
c0006fa2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006fa6:	e9 c6 00 00 00       	jmp    c0007071 <f_forward+0x12e>
c0006fab:	50                   	push   eax
c0006fac:	50                   	push   eax
c0006fad:	6a 00                	push   0x0
c0006faf:	6a 00                	push   0x0
c0006fb1:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fb5:	83 c4 10             	add    esp,0x10
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	0f 84 57 01 00 00    	je     c0007117 <f_forward+0x1d4>
c0006fc0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fc3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fc7:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006fca:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006fce:	89 d7                	mov    edi,edx
c0006fd0:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006fd3:	89 c6                	mov    esi,eax
c0006fd5:	0f ac fe 09          	shrd   esi,edi,0x9
c0006fd9:	21 ce                	and    esi,ecx
c0006fdb:	89 c1                	mov    ecx,eax
c0006fdd:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006fe3:	0f 84 98 00 00 00    	je     c0007081 <f_forward+0x13e>
c0006fe9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fed:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006ff0:	89 c8                	mov    eax,ecx
c0006ff2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006ff6:	e8 af ac ff ff       	call   c0001caa <clst2sect>
c0006ffb:	89 d7                	mov    edi,edx
c0006ffd:	09 c7                	or     edi,eax
c0006fff:	0f 84 9e 00 00 00    	je     c00070a3 <f_forward+0x160>
c0007005:	31 ff                	xor    edi,edi
c0007007:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000700a:	01 c6                	add    esi,eax
c000700c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007010:	11 d7                	adc    edi,edx
c0007012:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007015:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007018:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000701c:	39 fa                	cmp    edx,edi
c000701e:	0f 85 a2 00 00 00    	jne    c00070c6 <f_forward+0x183>
c0007024:	39 f0                	cmp    eax,esi
c0007026:	0f 85 9a 00 00 00    	jne    c00070c6 <f_forward+0x183>
c000702c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000702f:	ba 00 02 00 00       	mov    edx,0x200
c0007034:	25 ff 01 00 00       	and    eax,0x1ff
c0007039:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000703d:	29 c2                	sub    edx,eax
c000703f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007042:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007045:	39 d1                	cmp    ecx,edx
c0007047:	76 02                	jbe    c000704b <f_forward+0x108>
c0007049:	89 d1                	mov    ecx,edx
c000704b:	8d 73 50             	lea    esi,[ebx+0x50]
c000704e:	52                   	push   edx
c000704f:	01 c6                	add    esi,eax
c0007051:	52                   	push   edx
c0007052:	51                   	push   ecx
c0007053:	56                   	push   esi
c0007054:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007058:	83 c4 10             	add    esp,0x10
c000705b:	85 c0                	test   eax,eax
c000705d:	74 44                	je     c00070a3 <f_forward+0x160>
c000705f:	31 ff                	xor    edi,edi
c0007061:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0007064:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0007067:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c000706b:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c000706f:	01 07                	add    DWORD PTR [edi],eax
c0007071:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0007076:	0f 85 2f ff ff ff    	jne    c0006fab <f_forward+0x68>
c000707c:	e9 96 00 00 00       	jmp    c0007117 <f_forward+0x1d4>
c0007081:	85 f6                	test   esi,esi
c0007083:	0f 85 60 ff ff ff    	jne    c0006fe9 <f_forward+0xa6>
c0007089:	89 d7                	mov    edi,edx
c000708b:	09 c7                	or     edi,eax
c000708d:	75 05                	jne    c0007094 <f_forward+0x151>
c000708f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007092:	eb 0a                	jmp    c000709e <f_forward+0x15b>
c0007094:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007097:	89 d8                	mov    eax,ebx
c0007099:	e8 d9 bc ff ff       	call   c0002d77 <get_fat>
c000709e:	83 f8 01             	cmp    eax,0x1
c00070a1:	77 0b                	ja     c00070ae <f_forward+0x16b>
c00070a3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00070a7:	bd 02 00 00 00       	mov    ebp,0x2
c00070ac:	eb 69                	jmp    c0007117 <f_forward+0x1d4>
c00070ae:	83 f8 ff             	cmp    eax,0xffffffff
c00070b1:	75 0b                	jne    c00070be <f_forward+0x17b>
c00070b3:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00070b7:	bd 01 00 00 00       	mov    ebp,0x1
c00070bc:	eb 59                	jmp    c0007117 <f_forward+0x1d4>
c00070be:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00070c1:	e9 23 ff ff ff       	jmp    c0006fe9 <f_forward+0xa6>
c00070c6:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00070ca:	79 20                	jns    c00070ec <f_forward+0x1a9>
c00070cc:	83 ec 0c             	sub    esp,0xc
c00070cf:	6a 01                	push   0x1
c00070d1:	52                   	push   edx
c00070d2:	50                   	push   eax
c00070d3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070d7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00070db:	50                   	push   eax
c00070dc:	e8 fb a8 ff ff       	call   c00019dc <disk_write>
c00070e1:	83 c4 20             	add    esp,0x20
c00070e4:	85 c0                	test   eax,eax
c00070e6:	75 cb                	jne    c00070b3 <f_forward+0x170>
c00070e8:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00070ec:	83 ec 0c             	sub    esp,0xc
c00070ef:	6a 01                	push   0x1
c00070f1:	57                   	push   edi
c00070f2:	56                   	push   esi
c00070f3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070f7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00070fb:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00070ff:	50                   	push   eax
c0007100:	e8 c1 a8 ff ff       	call   c00019c6 <disk_read>
c0007105:	83 c4 20             	add    esp,0x20
c0007108:	85 c0                	test   eax,eax
c000710a:	0f 84 1c ff ff ff    	je     c000702c <f_forward+0xe9>
c0007110:	eb a1                	jmp    c00070b3 <f_forward+0x170>
c0007112:	bd 07 00 00 00       	mov    ebp,0x7
c0007117:	83 c4 2c             	add    esp,0x2c
c000711a:	89 e8                	mov    eax,ebp
c000711c:	5b                   	pop    ebx
c000711d:	5e                   	pop    esi
c000711e:	5f                   	pop    edi
c000711f:	5d                   	pop    ebp
c0007120:	c3                   	ret    

c0007121 <f_mkfs>:
c0007121:	55                   	push   ebp
c0007122:	57                   	push   edi
c0007123:	56                   	push   esi
c0007124:	53                   	push   ebx
c0007125:	bb 0b 00 00 00       	mov    ebx,0xb
c000712a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007130:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007137:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000713e:	e8 b0 ae ff ff       	call   c0001ff3 <get_ldnumber>
c0007143:	85 c0                	test   eax,eax
c0007145:	0f 88 ec 10 00 00    	js     c0008237 <f_mkfs+0x1116>
c000714b:	8b 14 85 e0 c7 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3820]
c0007152:	85 d2                	test   edx,edx
c0007154:	74 03                	je     c0007159 <f_mkfs+0x38>
c0007156:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0007159:	85 f6                	test   esi,esi
c000715b:	75 05                	jne    c0007162 <f_mkfs+0x41>
c000715d:	be 40 7c 02 c0       	mov    esi,0xc0027c40
c0007162:	83 ec 0c             	sub    esp,0xc
c0007165:	0f b6 c0             	movzx  eax,al
c0007168:	bb 03 00 00 00       	mov    ebx,0x3
c000716d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007171:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007175:	e8 49 a8 ff ff       	call   c00019c3 <disk_initialize>
c000717a:	83 c4 10             	add    esp,0x10
c000717d:	a8 01                	test   al,0x1
c000717f:	0f 85 b2 10 00 00    	jne    c0008237 <f_mkfs+0x1116>
c0007185:	bb 0a 00 00 00       	mov    ebx,0xa
c000718a:	a8 04                	test   al,0x4
c000718c:	0f 85 a5 10 00 00    	jne    c0008237 <f_mkfs+0x1116>
c0007192:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007195:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007199:	85 c0                	test   eax,eax
c000719b:	75 20                	jne    c00071bd <f_mkfs+0x9c>
c000719d:	51                   	push   ecx
c000719e:	8d 44 24 78          	lea    eax,[esp+0x78]
c00071a2:	50                   	push   eax
c00071a3:	6a 03                	push   0x3
c00071a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071a9:	e8 44 a8 ff ff       	call   c00019f2 <disk_ioctl>
c00071ae:	83 c4 10             	add    esp,0x10
c00071b1:	85 c0                	test   eax,eax
c00071b3:	74 08                	je     c00071bd <f_mkfs+0x9c>
c00071b5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071bd:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00071c1:	8d 42 ff             	lea    eax,[edx-0x1]
c00071c4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071c9:	77 04                	ja     c00071cf <f_mkfs+0xae>
c00071cb:	85 c2                	test   edx,eax
c00071cd:	74 08                	je     c00071d7 <f_mkfs+0xb6>
c00071cf:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071d7:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00071da:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00071de:	48                   	dec    eax
c00071df:	3c 01                	cmp    al,0x1
c00071e1:	76 05                	jbe    c00071e8 <f_mkfs+0xc7>
c00071e3:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00071e8:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00071eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00071ef:	48                   	dec    eax
c00071f0:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071f5:	77 07                	ja     c00071fe <f_mkfs+0xdd>
c00071f7:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c00071fc:	74 08                	je     c0007206 <f_mkfs+0xe5>
c00071fe:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007206:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007209:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000720f:	77 07                	ja     c0007218 <f_mkfs+0xf7>
c0007211:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007214:	85 d8                	test   eax,ebx
c0007216:	74 02                	je     c000721a <f_mkfs+0xf9>
c0007218:	31 db                	xor    ebx,ebx
c000721a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007225:	77 0a                	ja     c0007231 <f_mkfs+0x110>
c0007227:	bb 11 00 00 00       	mov    ebx,0x11
c000722c:	e9 06 10 00 00       	jmp    c0008237 <f_mkfs+0x1116>
c0007231:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007238:	8b 36                	mov    esi,DWORD PTR [esi]
c000723a:	85 ed                	test   ebp,ebp
c000723c:	75 1e                	jne    c000725c <f_mkfs+0x13b>
c000723e:	83 ec 0c             	sub    esp,0xc
c0007241:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007248:	25 00 fe ff ff       	and    eax,0xfffffe00
c000724d:	50                   	push   eax
c000724e:	e8 f1 0f 00 00       	call   c0008244 <ff_memalloc>
c0007253:	83 c4 10             	add    esp,0x10
c0007256:	89 c5                	mov    ebp,eax
c0007258:	85 c0                	test   eax,eax
c000725a:	74 cb                	je     c0007227 <f_mkfs+0x106>
c000725c:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c0007264:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c000726c:	52                   	push   edx
c000726d:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007271:	50                   	push   eax
c0007272:	6a 01                	push   0x1
c0007274:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007278:	e8 75 a7 ff ff       	call   c00019f2 <disk_ioctl>
c000727d:	83 c4 10             	add    esp,0x10
c0007280:	85 c0                	test   eax,eax
c0007282:	0f 85 4a 0f 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007288:	89 f1                	mov    ecx,esi
c000728a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007292:	83 e1 0f             	and    ecx,0xf
c0007295:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000729d:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00072a1:	83 e6 08             	and    esi,0x8
c00072a4:	75 56                	jne    c00072fc <f_mkfs+0x1db>
c00072a6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00072aa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00072ae:	83 ff 00             	cmp    edi,0x0
c00072b1:	76 20                	jbe    c00072d3 <f_mkfs+0x1b2>
c00072b3:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00072b8:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00072c0:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00072c6:	83 d7 ff             	adc    edi,0xffffffff
c00072c9:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072cd:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072d1:	eb 21                	jmp    c00072f4 <f_mkfs+0x1d3>
c00072d3:	ba 3f 00 00 00       	mov    edx,0x3f
c00072d8:	39 f2                	cmp    edx,esi
c00072da:	19 f8                	sbb    eax,edi
c00072dc:	73 1e                	jae    c00072fc <f_mkfs+0x1db>
c00072de:	83 c6 c1             	add    esi,0xffffffc1
c00072e1:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00072e9:	83 d7 ff             	adc    edi,0xffffffff
c00072ec:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072f0:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072f4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072fc:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007300:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007304:	89 04 24             	mov    DWORD PTR [esp],eax
c0007307:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000730b:	31 c0                	xor    eax,eax
c000730d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007312:	89 c7                	mov    edi,eax
c0007314:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007317:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000731b:	0f 83 c5 0a 00 00    	jae    c0007de6 <f_mkfs+0xcc5>
c0007321:	89 df                	mov    edi,ebx
c0007323:	c1 ef 09             	shr    edi,0x9
c0007326:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000732a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007331:	c1 ef 09             	shr    edi,0x9
c0007334:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007339:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000733d:	74 29                	je     c0007368 <f_mkfs+0x247>
c000733f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007345:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000734a:	0f 97 c2             	seta   dl
c000734d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007350:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007354:	0f 92 c0             	setb   al
c0007357:	08 c2                	or     dl,al
c0007359:	75 5b                	jne    c00073b6 <f_mkfs+0x295>
c000735b:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000735f:	83 e0 07             	and    eax,0x7
c0007362:	3c 04                	cmp    al,0x4
c0007364:	74 50                	je     c00073b6 <f_mkfs+0x295>
c0007366:	eb 1b                	jmp    c0007383 <f_mkfs+0x262>
c0007368:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000736d:	0f 87 73 0a 00 00    	ja     c0007de6 <f_mkfs+0xcc5>
c0007373:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007379:	76 08                	jbe    c0007383 <f_mkfs+0x262>
c000737b:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007383:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007387:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000738b:	83 e0 01             	and    eax,0x1
c000738e:	80 e1 02             	and    cl,0x2
c0007391:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007395:	74 0d                	je     c00073a4 <f_mkfs+0x283>
c0007397:	84 c0                	test   al,al
c0007399:	0f 84 53 09 00 00    	je     c0007cf2 <f_mkfs+0xbd1>
c000739f:	e9 12 08 00 00       	jmp    c0007bb6 <f_mkfs+0xa95>
c00073a4:	bb 13 00 00 00       	mov    ebx,0x13
c00073a9:	84 c0                	test   al,al
c00073ab:	0f 85 05 08 00 00    	jne    c0007bb6 <f_mkfs+0xa95>
c00073b1:	e9 39 0e 00 00       	jmp    c00081ef <f_mkfs+0x10ce>
c00073b6:	31 c0                	xor    eax,eax
c00073b8:	ba ff 0f 00 00       	mov    edx,0xfff
c00073bd:	89 c7                	mov    edi,eax
c00073bf:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073c2:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00073c6:	0f 83 1a 0a 00 00    	jae    c0007de6 <f_mkfs+0xcc5>
c00073cc:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00073d2:	77 39                	ja     c000740d <f_mkfs+0x2ec>
c00073d4:	ba ff ff 07 00       	mov    edx,0x7ffff
c00073d9:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00073e1:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073e4:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073e8:	73 08                	jae    c00073f2 <f_mkfs+0x2d1>
c00073ea:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c00073f2:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c00073f7:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00073fa:	b8 00 00 00 00       	mov    eax,0x0
c00073ff:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007403:	73 08                	jae    c000740d <f_mkfs+0x2ec>
c0007405:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000740d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007411:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007415:	83 c0 20             	add    eax,0x20
c0007418:	83 d2 00             	adc    edx,0x0
c000741b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000741f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007423:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007427:	31 d2                	xor    edx,edx
c0007429:	31 ff                	xor    edi,edi
c000742b:	52                   	push   edx
c000742c:	89 fb                	mov    ebx,edi
c000742e:	50                   	push   eax
c000742f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007433:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007437:	e8 80 de 01 00       	call   c00252bc <__udivdi3>
c000743c:	83 c4 10             	add    esp,0x10
c000743f:	c1 e0 02             	shl    eax,0x2
c0007442:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007446:	05 07 02 00 00       	add    eax,0x207
c000744b:	89 f1                	mov    ecx,esi
c000744d:	c1 e8 09             	shr    eax,0x9
c0007450:	83 c1 ff             	add    ecx,0xffffffff
c0007453:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007457:	83 d3 ff             	adc    ebx,0xffffffff
c000745a:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000745e:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007462:	31 d2                	xor    edx,edx
c0007464:	01 c8                	add    eax,ecx
c0007466:	11 da                	adc    edx,ebx
c0007468:	89 c1                	mov    ecx,eax
c000746a:	f7 de                	neg    esi
c000746c:	89 d0                	mov    eax,edx
c000746e:	83 d7 00             	adc    edi,0x0
c0007471:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007475:	f7 df                	neg    edi
c0007477:	21 f1                	and    ecx,esi
c0007479:	21 f8                	and    eax,edi
c000747b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000747f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007483:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007487:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000748b:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000748f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007492:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007496:	0f ac d0 01          	shrd   eax,edx,0x1
c000749a:	89 df                	mov    edi,ebx
c000749c:	d1 ea                	shr    edx,1
c000749e:	39 c1                	cmp    ecx,eax
c00074a0:	19 d7                	sbb    edi,edx
c00074a2:	0f 83 3e 09 00 00    	jae    c0007de6 <f_mkfs+0xcc5>
c00074a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074ac:	31 d2                	xor    edx,edx
c00074ae:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00074b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074b6:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00074ba:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074bd:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00074c1:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00074c5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00074c9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00074cd:	83 f8 0f             	cmp    eax,0xf
c00074d0:	0f 86 10 09 00 00    	jbe    c0007de6 <f_mkfs+0xcc5>
c00074d6:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00074de:	0f 87 02 09 00 00    	ja     c0007de6 <f_mkfs+0xcc5>
c00074e4:	31 d2                	xor    edx,edx
c00074e6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00074ea:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00074f2:	83 c0 07             	add    eax,0x7
c00074f5:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00074fd:	c1 e8 03             	shr    eax,0x3
c0007500:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007507:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000750b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000750f:	c1 e0 09             	shl    eax,0x9
c0007512:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007516:	48                   	dec    eax
c0007517:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000751b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000751f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007523:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007527:	31 d2                	xor    edx,edx
c0007529:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000752d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007534:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007538:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000753d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007541:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007545:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007549:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000754d:	31 ff                	xor    edi,edi
c000754f:	31 f6                	xor    esi,esi
c0007551:	31 db                	xor    ebx,ebx
c0007553:	85 ff                	test   edi,edi
c0007555:	74 05                	je     c000755c <f_mkfs+0x43b>
c0007557:	4f                   	dec    edi
c0007558:	74 44                	je     c000759e <f_mkfs+0x47d>
c000755a:	eb 4f                	jmp    c00075ab <f_mkfs+0x48a>
c000755c:	83 ec 0c             	sub    esp,0xc
c000755f:	0f b7 c3             	movzx  eax,bx
c0007562:	50                   	push   eax
c0007563:	e8 05 0e 00 00       	call   c000836d <ff_wtoupper>
c0007568:	83 c4 10             	add    esp,0x10
c000756b:	89 c1                	mov    ecx,eax
c000756d:	8d 53 01             	lea    edx,[ebx+0x1]
c0007570:	66 39 c3             	cmp    bx,ax
c0007573:	75 3e                	jne    c00075b3 <f_mkfs+0x492>
c0007575:	be 01 00 00 00       	mov    esi,0x1
c000757a:	89 df                	mov    edi,ebx
c000757c:	66 01 f7             	add    di,si
c000757f:	75 07                	jne    c0007588 <f_mkfs+0x467>
c0007581:	83 fe 7f             	cmp    esi,0x7f
c0007584:	77 31                	ja     c00075b7 <f_mkfs+0x496>
c0007586:	eb 16                	jmp    c000759e <f_mkfs+0x47d>
c0007588:	83 ec 0c             	sub    esp,0xc
c000758b:	0f b7 ff             	movzx  edi,di
c000758e:	57                   	push   edi
c000758f:	e8 d9 0d 00 00       	call   c000836d <ff_wtoupper>
c0007594:	83 c4 10             	add    esp,0x10
c0007597:	39 c7                	cmp    edi,eax
c0007599:	75 e6                	jne    c0007581 <f_mkfs+0x460>
c000759b:	46                   	inc    esi
c000759c:	eb dc                	jmp    c000757a <f_mkfs+0x459>
c000759e:	31 c0                	xor    eax,eax
c00075a0:	89 d9                	mov    ecx,ebx
c00075a2:	4e                   	dec    esi
c00075a3:	0f 95 c0             	setne  al
c00075a6:	43                   	inc    ebx
c00075a7:	89 c7                	mov    edi,eax
c00075a9:	eb 14                	jmp    c00075bf <f_mkfs+0x49e>
c00075ab:	89 f1                	mov    ecx,esi
c00075ad:	01 f3                	add    ebx,esi
c00075af:	31 ff                	xor    edi,edi
c00075b1:	eb 0c                	jmp    c00075bf <f_mkfs+0x49e>
c00075b3:	89 d3                	mov    ebx,edx
c00075b5:	eb 08                	jmp    c00075bf <f_mkfs+0x49e>
c00075b7:	bf 02 00 00 00       	mov    edi,0x2
c00075bc:	83 c9 ff             	or     ecx,0xffffffff
c00075bf:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00075c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075c6:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00075ca:	0f b6 c1             	movzx  eax,cl
c00075cd:	e8 3a a9 ff ff       	call   c0001f0c <xsum32>
c00075d2:	66 c1 e9 08          	shr    cx,0x8
c00075d6:	89 c2                	mov    edx,eax
c00075d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075db:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00075df:	0f b7 c1             	movzx  eax,cx
c00075e2:	e8 25 a9 ff ff       	call   c0001f0c <xsum32>
c00075e7:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c00075ec:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00075f0:	66 85 db             	test   bx,bx
c00075f3:	74 1f                	je     c0007614 <f_mkfs+0x4f3>
c00075f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075f8:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c00075ff:	83 c0 02             	add    eax,0x2
c0007602:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007608:	39 c2                	cmp    edx,eax
c000760a:	74 08                	je     c0007614 <f_mkfs+0x4f3>
c000760c:	89 04 24             	mov    DWORD PTR [esp],eax
c000760f:	e9 3f ff ff ff       	jmp    c0007553 <f_mkfs+0x432>
c0007614:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007617:	83 ec 0c             	sub    esp,0xc
c000761a:	05 01 02 00 00       	add    eax,0x201
c000761f:	c1 e8 09             	shr    eax,0x9
c0007622:	50                   	push   eax
c0007623:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007627:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000762b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000762f:	55                   	push   ebp
c0007630:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007634:	e8 a3 a3 ff ff       	call   c00019dc <disk_write>
c0007639:	83 c4 20             	add    esp,0x20
c000763c:	85 c0                	test   eax,eax
c000763e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007641:	0f 85 8b 0b 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007647:	89 d0                	mov    eax,edx
c0007649:	31 d2                	xor    edx,edx
c000764b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000764f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007653:	66 85 db             	test   bx,bx
c0007656:	74 04                	je     c000765c <f_mkfs+0x53b>
c0007658:	31 c0                	xor    eax,eax
c000765a:	eb b0                	jmp    c000760c <f_mkfs+0x4eb>
c000765c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007660:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007664:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c0007668:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c000766e:	31 d2                	xor    edx,edx
c0007670:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c000767b:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000767f:	c1 eb 09             	shr    ebx,0x9
c0007682:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007689:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000768d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007691:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007695:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007699:	8d 70 01             	lea    esi,[eax+0x1]
c000769c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00076a4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00076ab:	31 d2                	xor    edx,edx
c00076ad:	25 00 fe ff ff       	and    eax,0xfffffe00
c00076b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00076b5:	89 c1                	mov    ecx,eax
c00076b7:	89 e8                	mov    eax,ebp
c00076b9:	e8 e7 a3 ff ff       	call   c0001aa5 <mem_set>
c00076be:	31 c0                	xor    eax,eax
c00076c0:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076c3:	76 10                	jbe    c00076d5 <f_mkfs+0x5b4>
c00076c5:	83 fe 07             	cmp    esi,0x7
c00076c8:	76 0b                	jbe    c00076d5 <f_mkfs+0x5b4>
c00076ca:	40                   	inc    eax
c00076cb:	83 ee 08             	sub    esi,0x8
c00076ce:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00076d3:	eb eb                	jmp    c00076c0 <f_mkfs+0x59f>
c00076d5:	b2 01                	mov    dl,0x1
c00076d7:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00076db:	85 f6                	test   esi,esi
c00076dd:	74 0c                	je     c00076eb <f_mkfs+0x5ca>
c00076df:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076e2:	76 07                	jbe    c00076eb <f_mkfs+0x5ca>
c00076e4:	08 11                	or     BYTE PTR [ecx],dl
c00076e6:	4e                   	dec    esi
c00076e7:	d1 e2                	shl    edx,1
c00076e9:	eb f0                	jmp    c00076db <f_mkfs+0x5ba>
c00076eb:	89 df                	mov    edi,ebx
c00076ed:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00076f1:	76 04                	jbe    c00076f7 <f_mkfs+0x5d6>
c00076f3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00076f7:	83 ec 0c             	sub    esp,0xc
c00076fa:	57                   	push   edi
c00076fb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007703:	55                   	push   ebp
c0007704:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007708:	e8 cf a2 ff ff       	call   c00019dc <disk_write>
c000770d:	83 c4 20             	add    esp,0x20
c0007710:	85 c0                	test   eax,eax
c0007712:	0f 85 ba 0a 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007718:	31 d2                	xor    edx,edx
c000771a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000771e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007722:	29 fb                	sub    ebx,edi
c0007724:	0f 85 7a ff ff ff    	jne    c00076a4 <f_mkfs+0x583>
c000772a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000772e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007736:	31 f6                	xor    esi,esi
c0007738:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000773c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000773f:	31 d2                	xor    edx,edx
c0007741:	89 e8                	mov    eax,ebp
c0007743:	e8 5d a3 ff ff       	call   c0001aa5 <mem_set>
c0007748:	31 c9                	xor    ecx,ecx
c000774a:	85 db                	test   ebx,ebx
c000774c:	75 40                	jne    c000778e <f_mkfs+0x66d>
c000774e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007753:	89 e8                	mov    eax,ebp
c0007755:	bb 02 00 00 00       	mov    ebx,0x2
c000775a:	e8 28 a3 ff ff       	call   c0001a87 <st_dword>
c000775f:	8d 45 04             	lea    eax,[ebp+0x4]
c0007762:	83 ca ff             	or     edx,0xffffffff
c0007765:	e8 1d a3 ff ff       	call   c0001a87 <st_dword>
c000776a:	b9 08 00 00 00       	mov    ecx,0x8
c000776f:	eb 1d                	jmp    c000778e <f_mkfs+0x66d>
c0007771:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007774:	76 3b                	jbe    c00077b1 <f_mkfs+0x690>
c0007776:	43                   	inc    ebx
c0007777:	83 fe 01             	cmp    esi,0x1
c000777a:	89 da                	mov    edx,ebx
c000777c:	77 03                	ja     c0007781 <f_mkfs+0x660>
c000777e:	83 ca ff             	or     edx,0xffffffff
c0007781:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007785:	4e                   	dec    esi
c0007786:	e8 fc a2 ff ff       	call   c0001a87 <st_dword>
c000778b:	83 c1 04             	add    ecx,0x4
c000778e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007792:	85 f6                	test   esi,esi
c0007794:	75 db                	jne    c0007771 <f_mkfs+0x650>
c0007796:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c000779b:	77 14                	ja     c00077b1 <f_mkfs+0x690>
c000779d:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00077a1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00077a8:	85 f6                	test   esi,esi
c00077aa:	74 05                	je     c00077b1 <f_mkfs+0x690>
c00077ac:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077af:	77 dd                	ja     c000778e <f_mkfs+0x66d>
c00077b1:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00077b5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077b9:	39 cf                	cmp    edi,ecx
c00077bb:	76 02                	jbe    c00077bf <f_mkfs+0x69e>
c00077bd:	89 cf                	mov    edi,ecx
c00077bf:	83 ec 0c             	sub    esp,0xc
c00077c2:	57                   	push   edi
c00077c3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077c7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077cb:	55                   	push   ebp
c00077cc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00077d0:	e8 07 a2 ff ff       	call   c00019dc <disk_write>
c00077d5:	83 c4 20             	add    esp,0x20
c00077d8:	85 c0                	test   eax,eax
c00077da:	0f 85 f2 09 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c00077e0:	31 d2                	xor    edx,edx
c00077e2:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00077e6:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c00077ea:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c00077ee:	0f 85 48 ff ff ff    	jne    c000773c <f_mkfs+0x61b>
c00077f4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00077f7:	31 d2                	xor    edx,edx
c00077f9:	89 e8                	mov    eax,ebp
c00077fb:	31 ff                	xor    edi,edi
c00077fd:	e8 a3 a2 ff ff       	call   c0001aa5 <mem_set>
c0007802:	8d 45 34             	lea    eax,[ebp+0x34]
c0007805:	ba 02 00 00 00       	mov    edx,0x2
c000780a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c000780e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007812:	e8 70 a2 ff ff       	call   c0001a87 <st_dword>
c0007817:	8d 45 38             	lea    eax,[ebp+0x38]
c000781a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000781e:	e8 64 a2 ff ff       	call   c0001a87 <st_dword>
c0007823:	8d 45 44             	lea    eax,[ebp+0x44]
c0007826:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000782a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c000782e:	e8 54 a2 ff ff       	call   c0001a87 <st_dword>
c0007833:	8d 45 54             	lea    eax,[ebp+0x54]
c0007836:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000783a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000783e:	83 c2 02             	add    edx,0x2
c0007841:	e8 41 a2 ff ff       	call   c0001a87 <st_dword>
c0007846:	8d 45 58             	lea    eax,[ebp+0x58]
c0007849:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c000784d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007851:	e8 31 a2 ff ff       	call   c0001a87 <st_dword>
c0007856:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000785a:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000785f:	89 c6                	mov    esi,eax
c0007861:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007865:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007869:	89 04 24             	mov    DWORD PTR [esp],eax
c000786c:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007870:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007873:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007877:	39 cb                	cmp    ebx,ecx
c0007879:	76 02                	jbe    c000787d <f_mkfs+0x75c>
c000787b:	89 cb                	mov    ebx,ecx
c000787d:	83 ec 0c             	sub    esp,0xc
c0007880:	53                   	push   ebx
c0007881:	57                   	push   edi
c0007882:	56                   	push   esi
c0007883:	55                   	push   ebp
c0007884:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007888:	e8 4f a1 ff ff       	call   c00019dc <disk_write>
c000788d:	83 c4 20             	add    esp,0x20
c0007890:	85 c0                	test   eax,eax
c0007892:	0f 85 3a 09 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007898:	31 d2                	xor    edx,edx
c000789a:	b9 00 02 00 00       	mov    ecx,0x200
c000789f:	89 e8                	mov    eax,ebp
c00078a1:	e8 ff a1 ff ff       	call   c0001aa5 <mem_set>
c00078a6:	31 d2                	xor    edx,edx
c00078a8:	01 de                	add    esi,ebx
c00078aa:	11 d7                	adc    edi,edx
c00078ac:	29 1c 24             	sub    DWORD PTR [esp],ebx
c00078af:	75 bf                	jne    c0007870 <f_mkfs+0x74f>
c00078b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00078b5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00078b9:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00078c1:	b9 00 02 00 00       	mov    ecx,0x200
c00078c6:	31 d2                	xor    edx,edx
c00078c8:	89 e8                	mov    eax,ebp
c00078ca:	e8 d6 a1 ff ff       	call   c0001aa5 <mem_set>
c00078cf:	b9 0b 00 00 00       	mov    ecx,0xb
c00078d4:	ba 20 7d 02 c0       	mov    edx,0xc0027d20
c00078d9:	89 e8                	mov    eax,ebp
c00078db:	e8 b0 a1 ff ff       	call   c0001a90 <mem_cpy>
c00078e0:	8d 45 40             	lea    eax,[ebp+0x40]
c00078e3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00078e7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00078eb:	e8 9a a1 ff ff       	call   c0001a8a <st_qword>
c00078f0:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00078f4:	8d 45 48             	lea    eax,[ebp+0x48]
c00078f7:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00078fb:	e8 8a a1 ff ff       	call   c0001a8a <st_qword>
c0007900:	8d 45 50             	lea    eax,[ebp+0x50]
c0007903:	ba 20 00 00 00       	mov    edx,0x20
c0007908:	e8 7a a1 ff ff       	call   c0001a87 <st_dword>
c000790d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007911:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007915:	e8 6d a1 ff ff       	call   c0001a87 <st_dword>
c000791a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000791e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007922:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007926:	e8 5c a1 ff ff       	call   c0001a87 <st_dword>
c000792b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c000792e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007932:	e8 50 a1 ff ff       	call   c0001a87 <st_dword>
c0007937:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000793b:	8d 50 02             	lea    edx,[eax+0x2]
c000793e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007941:	e8 41 a1 ff ff       	call   c0001a87 <st_dword>
c0007946:	8d 45 64             	lea    eax,[ebp+0x64]
c0007949:	ba 00 00 21 50       	mov    edx,0x50210000
c000794e:	e8 34 a1 ff ff       	call   c0001a87 <st_dword>
c0007953:	8d 45 68             	lea    eax,[ebp+0x68]
c0007956:	ba 00 01 00 00       	mov    edx,0x100
c000795b:	e8 23 a1 ff ff       	call   c0001a83 <st_word>
c0007960:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007964:	b8 0a 00 00 00       	mov    eax,0xa
c0007969:	48                   	dec    eax
c000796a:	74 05                	je     c0007971 <f_mkfs+0x850>
c000796c:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c000796f:	eb f8                	jmp    c0007969 <f_mkfs+0x848>
c0007971:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007975:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007979:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000797d:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007981:	74 05                	je     c0007988 <f_mkfs+0x867>
c0007983:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007986:	eb f5                	jmp    c000797d <f_mkfs+0x85c>
c0007988:	8d 45 78             	lea    eax,[ebp+0x78]
c000798b:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007990:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007996:	31 db                	xor    ebx,ebx
c0007998:	e8 e6 a0 ff ff       	call   c0001a83 <st_word>
c000799d:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c00079a3:	ba 55 aa 00 00       	mov    edx,0xaa55
c00079a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00079ab:	e8 d3 a0 ff ff       	call   c0001a83 <st_word>
c00079b0:	31 c9                	xor    ecx,ecx
c00079b2:	8d 41 96             	lea    eax,[ecx-0x6a]
c00079b5:	83 f8 01             	cmp    eax,0x1
c00079b8:	76 13                	jbe    c00079cd <f_mkfs+0x8ac>
c00079ba:	83 f9 70             	cmp    ecx,0x70
c00079bd:	74 0e                	je     c00079cd <f_mkfs+0x8ac>
c00079bf:	89 da                	mov    edx,ebx
c00079c1:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00079c6:	e8 41 a5 ff ff       	call   c0001f0c <xsum32>
c00079cb:	89 c3                	mov    ebx,eax
c00079cd:	41                   	inc    ecx
c00079ce:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079d4:	75 dc                	jne    c00079b2 <f_mkfs+0x891>
c00079d6:	89 f0                	mov    eax,esi
c00079d8:	89 fa                	mov    edx,edi
c00079da:	83 c0 01             	add    eax,0x1
c00079dd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00079e1:	83 d2 00             	adc    edx,0x0
c00079e4:	83 ec 0c             	sub    esp,0xc
c00079e7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00079eb:	6a 01                	push   0x1
c00079ed:	57                   	push   edi
c00079ee:	56                   	push   esi
c00079ef:	55                   	push   ebp
c00079f0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079f4:	e8 e3 9f ff ff       	call   c00019dc <disk_write>
c00079f9:	83 c4 20             	add    esp,0x20
c00079fc:	85 c0                	test   eax,eax
c00079fe:	0f 85 ce 07 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007a04:	31 d2                	xor    edx,edx
c0007a06:	b9 00 02 00 00       	mov    ecx,0x200
c0007a0b:	89 e8                	mov    eax,ebp
c0007a0d:	e8 93 a0 ff ff       	call   c0001aa5 <mem_set>
c0007a12:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a17:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a1a:	e8 64 a0 ff ff       	call   c0001a83 <st_word>
c0007a1f:	89 f0                	mov    eax,esi
c0007a21:	89 fa                	mov    edx,edi
c0007a23:	83 c0 09             	add    eax,0x9
c0007a26:	83 d2 00             	adc    edx,0x0
c0007a29:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a2c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a30:	31 c9                	xor    ecx,ecx
c0007a32:	41                   	inc    ecx
c0007a33:	89 da                	mov    edx,ebx
c0007a35:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a3a:	e8 cd a4 ff ff       	call   c0001f0c <xsum32>
c0007a3f:	89 c3                	mov    ebx,eax
c0007a41:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a47:	75 e9                	jne    c0007a32 <f_mkfs+0x911>
c0007a49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a4d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a51:	83 c0 01             	add    eax,0x1
c0007a54:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007a58:	83 d2 00             	adc    edx,0x0
c0007a5b:	83 ec 0c             	sub    esp,0xc
c0007a5e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007a62:	6a 01                	push   0x1
c0007a64:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a68:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a6c:	55                   	push   ebp
c0007a6d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a71:	e8 66 9f ff ff       	call   c00019dc <disk_write>
c0007a76:	83 c4 20             	add    esp,0x20
c0007a79:	85 c0                	test   eax,eax
c0007a7b:	0f 85 51 07 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007a81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a85:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a89:	75 09                	jne    c0007a94 <f_mkfs+0x973>
c0007a8b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a8e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a92:	74 12                	je     c0007aa6 <f_mkfs+0x985>
c0007a94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a98:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a9c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007aa0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007aa4:	eb 8a                	jmp    c0007a30 <f_mkfs+0x90f>
c0007aa6:	31 d2                	xor    edx,edx
c0007aa8:	b9 00 02 00 00       	mov    ecx,0x200
c0007aad:	89 e8                	mov    eax,ebp
c0007aaf:	e8 f1 9f ff ff       	call   c0001aa5 <mem_set>
c0007ab4:	83 c6 0b             	add    esi,0xb
c0007ab7:	83 d7 00             	adc    edi,0x0
c0007aba:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007abe:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007ac2:	31 c9                	xor    ecx,ecx
c0007ac4:	41                   	inc    ecx
c0007ac5:	89 da                	mov    edx,ebx
c0007ac7:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007acc:	e8 3b a4 ff ff       	call   c0001f0c <xsum32>
c0007ad1:	89 c3                	mov    ebx,eax
c0007ad3:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007ad9:	75 e9                	jne    c0007ac4 <f_mkfs+0x9a3>
c0007adb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ade:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ae2:	83 c6 01             	add    esi,0x1
c0007ae5:	83 d7 00             	adc    edi,0x0
c0007ae8:	83 ec 0c             	sub    esp,0xc
c0007aeb:	6a 01                	push   0x1
c0007aed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007af1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007af5:	55                   	push   ebp
c0007af6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007afa:	e8 dd 9e ff ff       	call   c00019dc <disk_write>
c0007aff:	83 c4 20             	add    esp,0x20
c0007b02:	85 c0                	test   eax,eax
c0007b04:	0f 85 c8 06 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007b0a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007b0e:	75 06                	jne    c0007b16 <f_mkfs+0x9f5>
c0007b10:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007b14:	74 09                	je     c0007b1f <f_mkfs+0x9fe>
c0007b16:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b19:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b1d:	eb a3                	jmp    c0007ac2 <f_mkfs+0x9a1>
c0007b1f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b23:	89 da                	mov    edx,ebx
c0007b25:	01 e8                	add    eax,ebp
c0007b27:	e8 5b 9f ff ff       	call   c0001a87 <st_dword>
c0007b2c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b31:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b39:	75 e4                	jne    c0007b1f <f_mkfs+0x9fe>
c0007b3b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b3e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b42:	83 c6 02             	add    esi,0x2
c0007b45:	83 d7 00             	adc    edi,0x0
c0007b48:	83 ec 0c             	sub    esp,0xc
c0007b4b:	6a 01                	push   0x1
c0007b4d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b51:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b55:	55                   	push   ebp
c0007b56:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b5a:	e8 7d 9e ff ff       	call   c00019dc <disk_write>
c0007b5f:	83 c4 20             	add    esp,0x20
c0007b62:	85 c0                	test   eax,eax
c0007b64:	0f 85 68 06 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007b6a:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007b6f:	74 0d                	je     c0007b7e <f_mkfs+0xa5d>
c0007b71:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007b79:	e9 43 fd ff ff       	jmp    c00078c1 <f_mkfs+0x7a0>
c0007b7e:	b1 07                	mov    cl,0x7
c0007b80:	e9 e3 05 00 00       	jmp    c0008168 <f_mkfs+0x1047>
c0007b85:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b8a:	0f 85 4f 02 00 00    	jne    c0007ddf <f_mkfs+0xcbe>
c0007b90:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b95:	0f 86 22 02 00 00    	jbe    c0007dbd <f_mkfs+0xc9c>
c0007b9b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ba0:	0f 85 81 06 00 00    	jne    c0008227 <f_mkfs+0x1106>
c0007ba6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007ba9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007bad:	83 f8 40             	cmp    eax,0x40
c0007bb0:	0f 87 51 06 00 00    	ja     c0008207 <f_mkfs+0x10e6>
c0007bb6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007bba:	85 ff                	test   edi,edi
c0007bbc:	75 1c                	jne    c0007bda <f_mkfs+0xab9>
c0007bbe:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007bc1:	ba 20 7c 02 c0       	mov    edx,0xc0027c20
c0007bc6:	c1 e9 0c             	shr    ecx,0xc
c0007bc9:	bf 01 00 00 00       	mov    edi,0x1
c0007bce:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007bd1:	66 85 c0             	test   ax,ax
c0007bd4:	0f 85 95 01 00 00    	jne    c0007d6f <f_mkfs+0xc4e>
c0007bda:	31 d2                	xor    edx,edx
c0007bdc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007bdf:	f7 f7                	div    edi
c0007be1:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007be6:	0f 86 95 01 00 00    	jbe    c0007d81 <f_mkfs+0xc60>
c0007bec:	83 c0 02             	add    eax,0x2
c0007bef:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007bf4:	01 c0                	add    eax,eax
c0007bf6:	05 ff 01 00 00       	add    eax,0x1ff
c0007bfb:	be 01 00 00 00       	mov    esi,0x1
c0007c00:	c1 e8 09             	shr    eax,0x9
c0007c03:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007c07:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c0b:	c1 e0 05             	shl    eax,0x5
c0007c0e:	c1 e8 09             	shr    eax,0x9
c0007c11:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c15:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c20:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007c24:	89 f0                	mov    eax,esi
c0007c26:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c2a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c2e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c32:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c3a:	31 d2                	xor    edx,edx
c0007c3c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007c41:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c45:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c49:	31 db                	xor    ebx,ebx
c0007c4b:	01 c8                	add    eax,ecx
c0007c4d:	11 da                	adc    edx,ebx
c0007c4f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c53:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c57:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007c5b:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007c5f:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007c63:	f7 da                	neg    edx
c0007c65:	21 d1                	and    ecx,edx
c0007c67:	29 d9                	sub    ecx,ebx
c0007c69:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c6e:	0f 85 20 01 00 00    	jne    c0007d94 <f_mkfs+0xc73>
c0007c74:	31 db                	xor    ebx,ebx
c0007c76:	01 ce                	add    esi,ecx
c0007c78:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007c7c:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007c80:	31 d2                	xor    edx,edx
c0007c82:	89 f8                	mov    eax,edi
c0007c84:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c88:	c1 e0 04             	shl    eax,0x4
c0007c8b:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c8f:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c93:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c97:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c9b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c9e:	19 d3                	sbb    ebx,edx
c0007ca0:	0f 82 40 01 00 00    	jb     c0007de6 <f_mkfs+0xcc5>
c0007ca6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ca9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cad:	89 c8                	mov    eax,ecx
c0007caf:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007cb4:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007cb8:	29 f0                	sub    eax,esi
c0007cba:	29 d0                	sub    eax,edx
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	f7 f7                	div    edi
c0007cc0:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cc5:	89 c3                	mov    ebx,eax
c0007cc7:	0f 85 b8 fe ff ff    	jne    c0007b85 <f_mkfs+0xa64>
c0007ccd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007cd2:	0f 87 1d 01 00 00    	ja     c0007df5 <f_mkfs+0xcd4>
c0007cd8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007cdd:	0f 85 03 01 00 00    	jne    c0007de6 <f_mkfs+0xcc5>
c0007ce3:	83 ff 01             	cmp    edi,0x1
c0007ce6:	0f 86 fa 00 00 00    	jbe    c0007de6 <f_mkfs+0xcc5>
c0007cec:	d1 ef                	shr    edi,1
c0007cee:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007cf2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007cf6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007cf9:	85 db                	test   ebx,ebx
c0007cfb:	75 2d                	jne    c0007d2a <f_mkfs+0xc09>
c0007cfd:	89 cb                	mov    ebx,ecx
c0007cff:	ba 30 7c 02 c0       	mov    edx,0xc0027c30
c0007d04:	c1 eb 11             	shr    ebx,0x11
c0007d07:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007d0f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d12:	66 85 c0             	test   ax,ax
c0007d15:	74 11                	je     c0007d28 <f_mkfs+0xc07>
c0007d17:	83 c2 02             	add    edx,0x2
c0007d1a:	39 d8                	cmp    eax,ebx
c0007d1c:	77 0a                	ja     c0007d28 <f_mkfs+0xc07>
c0007d1e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d22:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d26:	eb e7                	jmp    c0007d0f <f_mkfs+0xbee>
c0007d28:	31 db                	xor    ebx,ebx
c0007d2a:	31 d2                	xor    edx,edx
c0007d2c:	89 c8                	mov    eax,ecx
c0007d2e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d32:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d39:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d3e:	c1 ea 09             	shr    edx,0x9
c0007d41:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d46:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d4a:	0f 87 96 00 00 00    	ja     c0007de6 <f_mkfs+0xcc5>
c0007d50:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d54:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007d5c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007d60:	be 20 00 00 00       	mov    esi,0x20
c0007d65:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007d6a:	e9 a6 fe ff ff       	jmp    c0007c15 <f_mkfs+0xaf4>
c0007d6f:	83 c2 02             	add    edx,0x2
c0007d72:	39 c8                	cmp    eax,ecx
c0007d74:	0f 87 60 fe ff ff    	ja     c0007bda <f_mkfs+0xab9>
c0007d7a:	01 ff                	add    edi,edi
c0007d7c:	e9 4d fe ff ff       	jmp    c0007bce <f_mkfs+0xaad>
c0007d81:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d84:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d89:	40                   	inc    eax
c0007d8a:	d1 e8                	shr    eax,1
c0007d8c:	83 c0 03             	add    eax,0x3
c0007d8f:	e9 62 fe ff ff       	jmp    c0007bf6 <f_mkfs+0xad5>
c0007d94:	31 d2                	xor    edx,edx
c0007d96:	89 c8                	mov    eax,ecx
c0007d98:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d9c:	85 d2                	test   edx,edx
c0007d9e:	74 0c                	je     c0007dac <f_mkfs+0xc8b>
c0007da0:	49                   	dec    ecx
c0007da1:	46                   	inc    esi
c0007da2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007da7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007dac:	89 c8                	mov    eax,ecx
c0007dae:	31 d2                	xor    edx,edx
c0007db0:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007db4:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007db8:	e9 c3 fe ff ff       	jmp    c0007c80 <f_mkfs+0xb5f>
c0007dbd:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dc2:	77 31                	ja     c0007df5 <f_mkfs+0xcd4>
c0007dc4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007dc9:	75 1b                	jne    c0007de6 <f_mkfs+0xcc5>
c0007dcb:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dd2:	3d 80 00 00 00       	cmp    eax,0x80
c0007dd7:	0f 86 d9 fd ff ff    	jbe    c0007bb6 <f_mkfs+0xa95>
c0007ddd:	eb 07                	jmp    c0007de6 <f_mkfs+0xcc5>
c0007ddf:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007de4:	76 0a                	jbe    c0007df0 <f_mkfs+0xccf>
c0007de6:	bb 0e 00 00 00       	mov    ebx,0xe
c0007deb:	e9 ff 03 00 00       	jmp    c00081ef <f_mkfs+0x10ce>
c0007df0:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007df5:	31 d2                	xor    edx,edx
c0007df7:	b9 00 02 00 00       	mov    ecx,0x200
c0007dfc:	89 e8                	mov    eax,ebp
c0007dfe:	e8 a2 9c ff ff       	call   c0001aa5 <mem_set>
c0007e03:	b9 0b 00 00 00       	mov    ecx,0xb
c0007e08:	ba 42 7d 02 c0       	mov    edx,0xc0027d42
c0007e0d:	89 e8                	mov    eax,ebp
c0007e0f:	e8 7c 9c ff ff       	call   c0001a90 <mem_cpy>
c0007e14:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007e17:	ba 00 02 00 00       	mov    edx,0x200
c0007e1c:	e8 62 9c ff ff       	call   c0001a83 <st_word>
c0007e21:	89 f8                	mov    eax,edi
c0007e23:	0f b7 d6             	movzx  edx,si
c0007e26:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e29:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e2c:	e8 52 9c ff ff       	call   c0001a83 <st_word>
c0007e31:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007e35:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e3a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e3d:	75 08                	jne    c0007e47 <f_mkfs+0xd26>
c0007e3f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e47:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e4a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e4e:	e8 30 9c ff ff       	call   c0001a83 <st_word>
c0007e53:	b8 ff ff 00 00       	mov    eax,0xffff
c0007e58:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007e5c:	39 d0                	cmp    eax,edx
c0007e5e:	b8 00 00 00 00       	mov    eax,0x0
c0007e63:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007e67:	72 0a                	jb     c0007e73 <f_mkfs+0xd52>
c0007e69:	8d 45 13             	lea    eax,[ebp+0x13]
c0007e6c:	e8 12 9c ff ff       	call   c0001a83 <st_word>
c0007e71:	eb 08                	jmp    c0007e7b <f_mkfs+0xd5a>
c0007e73:	8d 45 20             	lea    eax,[ebp+0x20]
c0007e76:	e8 0c 9c ff ff       	call   c0001a87 <st_dword>
c0007e7b:	8d 45 18             	lea    eax,[ebp+0x18]
c0007e7e:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e83:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e87:	e8 f7 9b ff ff       	call   c0001a83 <st_word>
c0007e8c:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e8f:	ba ff 00 00 00       	mov    edx,0xff
c0007e94:	e8 ea 9b ff ff       	call   c0001a83 <st_word>
c0007e99:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e9c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007ea0:	e8 e2 9b ff ff       	call   c0001a87 <st_dword>
c0007ea5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007eaa:	75 57                	jne    c0007f03 <f_mkfs+0xde2>
c0007eac:	8d 45 43             	lea    eax,[ebp+0x43]
c0007eaf:	ba 00 00 21 50       	mov    edx,0x50210000
c0007eb4:	e8 ce 9b ff ff       	call   c0001a87 <st_dword>
c0007eb9:	8d 45 24             	lea    eax,[ebp+0x24]
c0007ebc:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec0:	e8 c2 9b ff ff       	call   c0001a87 <st_dword>
c0007ec5:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007ec8:	ba 02 00 00 00       	mov    edx,0x2
c0007ecd:	e8 b5 9b ff ff       	call   c0001a87 <st_dword>
c0007ed2:	8d 45 30             	lea    eax,[ebp+0x30]
c0007ed5:	ba 01 00 00 00       	mov    edx,0x1
c0007eda:	e8 a4 9b ff ff       	call   c0001a83 <st_word>
c0007edf:	8d 45 32             	lea    eax,[ebp+0x32]
c0007ee2:	ba 06 00 00 00       	mov    edx,0x6
c0007ee7:	e8 97 9b ff ff       	call   c0001a83 <st_word>
c0007eec:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007ef0:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007ef4:	8d 45 47             	lea    eax,[ebp+0x47]
c0007ef7:	b9 13 00 00 00       	mov    ecx,0x13
c0007efc:	ba 4e 7d 02 c0       	mov    edx,0xc0027d4e
c0007f01:	eb 2f                	jmp    c0007f32 <f_mkfs+0xe11>
c0007f03:	8d 45 27             	lea    eax,[ebp+0x27]
c0007f06:	ba 00 00 21 50       	mov    edx,0x50210000
c0007f0b:	e8 77 9b ff ff       	call   c0001a87 <st_dword>
c0007f10:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007f15:	8d 45 16             	lea    eax,[ebp+0x16]
c0007f18:	e8 66 9b ff ff       	call   c0001a83 <st_word>
c0007f1d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f21:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f25:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f28:	b9 13 00 00 00       	mov    ecx,0x13
c0007f2d:	ba 62 7d 02 c0       	mov    edx,0xc0027d62
c0007f32:	e8 59 9b ff ff       	call   c0001a90 <mem_cpy>
c0007f37:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f42:	89 f0                	mov    eax,esi
c0007f44:	e8 3a 9b ff ff       	call   c0001a83 <st_word>
c0007f49:	83 ec 0c             	sub    esp,0xc
c0007f4c:	6a 01                	push   0x1
c0007f4e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f52:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f56:	55                   	push   ebp
c0007f57:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f5b:	e8 7c 9a ff ff       	call   c00019dc <disk_write>
c0007f60:	83 c4 20             	add    esp,0x20
c0007f63:	85 c0                	test   eax,eax
c0007f65:	0f 85 67 02 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007f6b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f70:	0f 85 b7 00 00 00    	jne    c000802d <f_mkfs+0xf0c>
c0007f76:	83 ec 0c             	sub    esp,0xc
c0007f79:	6a 01                	push   0x1
c0007f7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f7f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f83:	83 c0 06             	add    eax,0x6
c0007f86:	83 d2 00             	adc    edx,0x0
c0007f89:	52                   	push   edx
c0007f8a:	50                   	push   eax
c0007f8b:	55                   	push   ebp
c0007f8c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f90:	e8 47 9a ff ff       	call   c00019dc <disk_write>
c0007f95:	83 c4 20             	add    esp,0x20
c0007f98:	b9 00 02 00 00       	mov    ecx,0x200
c0007f9d:	31 d2                	xor    edx,edx
c0007f9f:	89 e8                	mov    eax,ebp
c0007fa1:	e8 ff 9a ff ff       	call   c0001aa5 <mem_set>
c0007fa6:	ba 52 52 61 41       	mov    edx,0x41615252
c0007fab:	89 e8                	mov    eax,ebp
c0007fad:	e8 d5 9a ff ff       	call   c0001a87 <st_dword>
c0007fb2:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007fb8:	ba 72 72 41 61       	mov    edx,0x61417272
c0007fbd:	e8 c5 9a ff ff       	call   c0001a87 <st_dword>
c0007fc2:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007fc5:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007fcb:	e8 b7 9a ff ff       	call   c0001a87 <st_dword>
c0007fd0:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007fd6:	ba 02 00 00 00       	mov    edx,0x2
c0007fdb:	e8 a7 9a ff ff       	call   c0001a87 <st_dword>
c0007fe0:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007fe5:	89 f0                	mov    eax,esi
c0007fe7:	e8 97 9a ff ff       	call   c0001a83 <st_word>
c0007fec:	83 ec 0c             	sub    esp,0xc
c0007fef:	6a 01                	push   0x1
c0007ff1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ff5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007ff9:	83 c0 07             	add    eax,0x7
c0007ffc:	83 d2 00             	adc    edx,0x0
c0007fff:	52                   	push   edx
c0008000:	50                   	push   eax
c0008001:	55                   	push   ebp
c0008002:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008006:	e8 d1 99 ff ff       	call   c00019dc <disk_write>
c000800b:	83 c4 14             	add    esp,0x14
c000800e:	6a 01                	push   0x1
c0008010:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008014:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008018:	83 c0 01             	add    eax,0x1
c000801b:	83 d2 00             	adc    edx,0x0
c000801e:	52                   	push   edx
c000801f:	50                   	push   eax
c0008020:	55                   	push   ebp
c0008021:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008025:	e8 b2 99 ff ff       	call   c00019dc <disk_write>
c000802a:	83 c4 20             	add    esp,0x20
c000802d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008034:	31 d2                	xor    edx,edx
c0008036:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000803c:	31 db                	xor    ebx,ebx
c000803e:	89 e8                	mov    eax,ebp
c0008040:	e8 60 9a ff ff       	call   c0001aa5 <mem_set>
c0008045:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000804a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008051:	0f 94 c3             	sete   bl
c0008054:	4b                   	dec    ebx
c0008055:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c000805b:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008061:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008066:	75 21                	jne    c0008089 <f_mkfs+0xf68>
c0008068:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000806d:	89 e8                	mov    eax,ebp
c000806f:	e8 13 9a ff ff       	call   c0001a87 <st_dword>
c0008074:	8d 45 04             	lea    eax,[ebp+0x4]
c0008077:	83 ca ff             	or     edx,0xffffffff
c000807a:	e8 08 9a ff ff       	call   c0001a87 <st_dword>
c000807f:	8d 45 08             	lea    eax,[ebp+0x8]
c0008082:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008087:	eb 04                	jmp    c000808d <f_mkfs+0xf6c>
c0008089:	89 da                	mov    edx,ebx
c000808b:	89 e8                	mov    eax,ebp
c000808d:	e8 f5 99 ff ff       	call   c0001a87 <st_dword>
c0008092:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008096:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000809a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000809e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00080a2:	39 ce                	cmp    esi,ecx
c00080a4:	76 02                	jbe    c00080a8 <f_mkfs+0xf87>
c00080a6:	89 ce                	mov    esi,ecx
c00080a8:	83 ec 0c             	sub    esp,0xc
c00080ab:	56                   	push   esi
c00080ac:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080b0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080b4:	55                   	push   ebp
c00080b5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080b9:	e8 1e 99 ff ff       	call   c00019dc <disk_write>
c00080be:	83 c4 20             	add    esp,0x20
c00080c1:	85 c0                	test   eax,eax
c00080c3:	0f 85 09 01 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c00080c9:	31 d2                	xor    edx,edx
c00080cb:	b9 00 02 00 00       	mov    ecx,0x200
c00080d0:	89 e8                	mov    eax,ebp
c00080d2:	e8 ce 99 ff ff       	call   c0001aa5 <mem_set>
c00080d7:	31 d2                	xor    edx,edx
c00080d9:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00080dd:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080e1:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00080e5:	75 b3                	jne    c000809a <f_mkfs+0xf79>
c00080e7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00080ea:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00080f1:	40                   	inc    eax
c00080f2:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c00080f6:	0f 87 65 ff ff ff    	ja     c0008061 <f_mkfs+0xf40>
c00080fc:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008101:	74 04                	je     c0008107 <f_mkfs+0xfe6>
c0008103:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008107:	89 fb                	mov    ebx,edi
c0008109:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000810d:	76 04                	jbe    c0008113 <f_mkfs+0xff2>
c000810f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008113:	83 ec 0c             	sub    esp,0xc
c0008116:	53                   	push   ebx
c0008117:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000811b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000811f:	55                   	push   ebp
c0008120:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008124:	e8 b3 98 ff ff       	call   c00019dc <disk_write>
c0008129:	83 c4 20             	add    esp,0x20
c000812c:	85 c0                	test   eax,eax
c000812e:	0f 85 9e 00 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0008134:	31 d2                	xor    edx,edx
c0008136:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000813a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000813e:	29 df                	sub    edi,ebx
c0008140:	75 c5                	jne    c0008107 <f_mkfs+0xfe6>
c0008142:	b1 0c                	mov    cl,0xc
c0008144:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008149:	74 1d                	je     c0008168 <f_mkfs+0x1047>
c000814b:	b8 ff ff 00 00       	mov    eax,0xffff
c0008150:	b1 06                	mov    cl,0x6
c0008152:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c0008156:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c000815a:	72 0c                	jb     c0008168 <f_mkfs+0x1047>
c000815c:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008161:	0f 94 c1             	sete   cl
c0008164:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c0008168:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c000816d:	75 4c                	jne    c00081bb <f_mkfs+0x109a>
c000816f:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008173:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0008177:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000817e:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008185:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008190:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000819b:	0f b6 c9             	movzx  ecx,cl
c000819e:	83 ec 0c             	sub    esp,0xc
c00081a1:	55                   	push   ebp
c00081a2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00081a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081ad:	e8 2f c2 ff ff       	call   c00043e1 <create_partition>
c00081b2:	83 c4 10             	add    esp,0x10
c00081b5:	89 c3                	mov    ebx,eax
c00081b7:	85 c0                	test   eax,eax
c00081b9:	75 34                	jne    c00081ef <f_mkfs+0x10ce>
c00081bb:	31 db                	xor    ebx,ebx
c00081bd:	50                   	push   eax
c00081be:	6a 00                	push   0x0
c00081c0:	6a 00                	push   0x0
c00081c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00081c6:	e8 27 98 ff ff       	call   c00019f2 <disk_ioctl>
c00081cb:	83 c4 10             	add    esp,0x10
c00081ce:	85 c0                	test   eax,eax
c00081d0:	74 1d                	je     c00081ef <f_mkfs+0x10ce>
c00081d2:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081da:	75 0c                	jne    c00081e8 <f_mkfs+0x10c7>
c00081dc:	83 ec 0c             	sub    esp,0xc
c00081df:	55                   	push   ebp
c00081e0:	e8 75 00 00 00       	call   c000825a <ff_memfree>
c00081e5:	83 c4 10             	add    esp,0x10
c00081e8:	bb 01 00 00 00       	mov    ebx,0x1
c00081ed:	eb 48                	jmp    c0008237 <f_mkfs+0x1116>
c00081ef:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081f7:	75 3e                	jne    c0008237 <f_mkfs+0x1116>
c00081f9:	83 ec 0c             	sub    esp,0xc
c00081fc:	55                   	push   ebp
c00081fd:	e8 58 00 00 00       	call   c000825a <ff_memfree>
c0008202:	83 c4 10             	add    esp,0x10
c0008205:	eb 30                	jmp    c0008237 <f_mkfs+0x1116>
c0008207:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000820c:	0f 85 eb fa ff ff    	jne    c0007cfd <f_mkfs+0xbdc>
c0008212:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008216:	81 ff 80 00 00 00    	cmp    edi,0x80
c000821c:	0f 86 b8 f9 ff ff    	jbe    c0007bda <f_mkfs+0xab9>
c0008222:	e9 bf fb ff ff       	jmp    c0007de6 <f_mkfs+0xcc5>
c0008227:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000822c:	0f 85 c0 fa ff ff    	jne    c0007cf2 <f_mkfs+0xbd1>
c0008232:	e9 af fb ff ff       	jmp    c0007de6 <f_mkfs+0xcc5>
c0008237:	81 c4 9c 00 00 00    	add    esp,0x9c
c000823d:	89 d8                	mov    eax,ebx
c000823f:	5b                   	pop    ebx
c0008240:	5e                   	pop    esi
c0008241:	5f                   	pop    edi
c0008242:	5d                   	pop    ebp
c0008243:	c3                   	ret    

c0008244 <ff_memalloc>:
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	83 ec 0c             	sub    esp,0xc
c000824a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000824e:	e8 81 72 00 00       	call   c000f4d4 <malloc>
c0008253:	83 c4 10             	add    esp,0x10
c0008256:	83 c4 0c             	add    esp,0xc
c0008259:	c3                   	ret    

c000825a <ff_memfree>:
c000825a:	83 ec 0c             	sub    esp,0xc
c000825d:	83 ec 0c             	sub    esp,0xc
c0008260:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008264:	e8 7b 72 00 00       	call   c000f4e4 <free>
c0008269:	83 c4 10             	add    esp,0x10
c000826c:	90                   	nop
c000826d:	83 c4 0c             	add    esp,0xc
c0008270:	c3                   	ret    

c0008271 <ff_uni2oem>:
c0008271:	83 ec 14             	sub    esp,0x14
c0008274:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008278:	66 89 04 24          	mov    WORD PTR [esp],ax
c000827c:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008283:	c7 44 24 0c 80 80 02 c0 	mov    DWORD PTR [esp+0xc],0xc0028080
c000828b:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008290:	77 0b                	ja     c000829d <ff_uni2oem+0x2c>
c0008292:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008296:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000829b:	eb 5b                	jmp    c00082f8 <ff_uni2oem+0x87>
c000829d:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00082a5:	77 51                	ja     c00082f8 <ff_uni2oem+0x87>
c00082a7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00082ad:	75 49                	jne    c00082f8 <ff_uni2oem+0x87>
c00082af:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082b6:	eb 0b                	jmp    c00082c3 <ff_uni2oem+0x52>
c00082b8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082bd:	40                   	inc    eax
c00082be:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082c3:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00082c9:	77 1b                	ja     c00082e6 <ff_uni2oem+0x75>
c00082cb:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00082d0:	01 c0                	add    eax,eax
c00082d2:	89 c2                	mov    edx,eax
c00082d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082d8:	01 d0                	add    eax,edx
c00082da:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082dd:	0f b7 c0             	movzx  eax,ax
c00082e0:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00082e4:	75 d2                	jne    c00082b8 <ff_uni2oem+0x47>
c00082e6:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082eb:	83 e8 80             	sub    eax,0xffffff80
c00082ee:	25 ff 00 00 00       	and    eax,0xff
c00082f3:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082f8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082fd:	83 c4 14             	add    esp,0x14
c0008300:	c3                   	ret    

c0008301 <ff_oem2uni>:
c0008301:	83 ec 18             	sub    esp,0x18
c0008304:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008308:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000830c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008311:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008315:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000831c:	c7 44 24 10 80 80 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028080
c0008324:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000832a:	77 0b                	ja     c0008337 <ff_oem2uni+0x36>
c000832c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008330:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008335:	eb 2d                	jmp    c0008364 <ff_oem2uni+0x63>
c0008337:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000833d:	75 25                	jne    c0008364 <ff_oem2uni+0x63>
c000833f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008346:	77 1c                	ja     c0008364 <ff_oem2uni+0x63>
c0008348:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000834d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008352:	01 c0                	add    eax,eax
c0008354:	89 c2                	mov    edx,eax
c0008356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000835a:	01 d0                	add    eax,edx
c000835c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000835f:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008364:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0008369:	83 c4 18             	add    esp,0x18
c000836c:	c3                   	ret    

c000836d <ff_wtoupper>:
c000836d:	83 ec 10             	sub    esp,0x10
c0008370:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0008378:	0f 87 3e 01 00 00    	ja     c00084bc <ff_wtoupper+0x14f>
c000837e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008382:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008387:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c000838e:	77 07                	ja     c0008397 <ff_wtoupper+0x2a>
c0008390:	b8 80 7e 02 c0       	mov    eax,0xc0027e80
c0008395:	eb 05                	jmp    c000839c <ff_wtoupper+0x2f>
c0008397:	b8 c0 7d 02 c0       	mov    eax,0xc0027dc0
c000839c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083a4:	8d 50 02             	lea    edx,[eax+0x2]
c00083a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083ab:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083ae:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083b3:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00083b9:	0f 84 f4 00 00 00    	je     c00084b3 <ff_wtoupper+0x146>
c00083bf:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083c4:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00083c9:	0f 82 e4 00 00 00    	jb     c00084b3 <ff_wtoupper+0x146>
c00083cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083d3:	8d 50 02             	lea    edx,[eax+0x2]
c00083d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083da:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083dd:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00083e2:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00083e7:	66 c1 e8 08          	shr    ax,0x8
c00083eb:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00083f0:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c00083f7:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00083fc:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008401:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008406:	01 ca                	add    edx,ecx
c0008408:	39 d0                	cmp    eax,edx
c000840a:	0f 8d 86 00 00 00    	jge    c0008496 <ff_wtoupper+0x129>
c0008410:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008415:	83 f8 08             	cmp    eax,0x8
c0008418:	0f 87 94 00 00 00    	ja     c00084b2 <ff_wtoupper+0x145>
c000841e:	8b 04 85 80 7d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8280]
c0008425:	ff e0                	jmp    eax
c0008427:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000842c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008431:	29 c2                	sub    edx,eax
c0008433:	89 d0                	mov    eax,edx
c0008435:	01 c0                	add    eax,eax
c0008437:	89 c2                	mov    edx,eax
c0008439:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000843d:	01 d0                	add    eax,edx
c000843f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008442:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008447:	eb 4b                	jmp    c0008494 <ff_wtoupper+0x127>
c0008449:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000844e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008452:	83 e0 01             	and    eax,0x1
c0008455:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c000845a:	eb 38                	jmp    c0008494 <ff_wtoupper+0x127>
c000845c:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008462:	eb 30                	jmp    c0008494 <ff_wtoupper+0x127>
c0008464:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c000846a:	eb 28                	jmp    c0008494 <ff_wtoupper+0x127>
c000846c:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008472:	eb 20                	jmp    c0008494 <ff_wtoupper+0x127>
c0008474:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c000847a:	eb 18                	jmp    c0008494 <ff_wtoupper+0x127>
c000847c:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008482:	eb 10                	jmp    c0008494 <ff_wtoupper+0x127>
c0008484:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c000848a:	eb 08                	jmp    c0008494 <ff_wtoupper+0x127>
c000848c:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008493:	90                   	nop
c0008494:	eb 1c                	jmp    c00084b2 <ff_wtoupper+0x145>
c0008496:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000849c:	0f 85 fe fe ff ff    	jne    c00083a0 <ff_wtoupper+0x33>
c00084a2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00084a7:	01 c0                	add    eax,eax
c00084a9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00084ad:	e9 ee fe ff ff       	jmp    c00083a0 <ff_wtoupper+0x33>
c00084b2:	90                   	nop
c00084b3:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00084b8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00084bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084c0:	83 c4 10             	add    esp,0x10
c00084c3:	c3                   	ret    

c00084c4 <psrc_set_converter>:
c00084c4:	56                   	push   esi
c00084c5:	89 d6                	mov    esi,edx
c00084c7:	53                   	push   ebx
c00084c8:	89 c3                	mov    ebx,eax
c00084ca:	83 ec 0c             	sub    esp,0xc
c00084cd:	52                   	push   edx
c00084ce:	50                   	push   eax
c00084cf:	e8 6f 55 00 00       	call   c000da43 <sinc_set_converter>
c00084d4:	83 c4 10             	add    esp,0x10
c00084d7:	85 c0                	test   eax,eax
c00084d9:	74 25                	je     c0008500 <psrc_set_converter+0x3c>
c00084db:	50                   	push   eax
c00084dc:	50                   	push   eax
c00084dd:	56                   	push   esi
c00084de:	53                   	push   ebx
c00084df:	e8 17 5d 00 00       	call   c000e1fb <zoh_set_converter>
c00084e4:	83 c4 10             	add    esp,0x10
c00084e7:	85 c0                	test   eax,eax
c00084e9:	74 15                	je     c0008500 <psrc_set_converter+0x3c>
c00084eb:	51                   	push   ecx
c00084ec:	51                   	push   ecx
c00084ed:	56                   	push   esi
c00084ee:	53                   	push   ebx
c00084ef:	e8 0f 11 00 00       	call   c0009603 <linear_set_converter>
c00084f4:	83 c4 10             	add    esp,0x10
c00084f7:	ba 0a 00 00 00       	mov    edx,0xa
c00084fc:	85 c0                	test   eax,eax
c00084fe:	75 02                	jne    c0008502 <psrc_set_converter+0x3e>
c0008500:	31 d2                	xor    edx,edx
c0008502:	89 d0                	mov    eax,edx
c0008504:	5a                   	pop    edx
c0008505:	5b                   	pop    ebx
c0008506:	5e                   	pop    esi
c0008507:	c3                   	ret    

c0008508 <src_delete>:
c0008508:	53                   	push   ebx
c0008509:	83 ec 08             	sub    esp,0x8
c000850c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008510:	85 db                	test   ebx,ebx
c0008512:	74 29                	je     c000853d <src_delete+0x35>
c0008514:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008517:	85 c0                	test   eax,eax
c0008519:	74 0c                	je     c0008527 <src_delete+0x1f>
c000851b:	83 ec 0c             	sub    esp,0xc
c000851e:	50                   	push   eax
c000851f:	e8 c0 6f 00 00       	call   c000f4e4 <free>
c0008524:	83 c4 10             	add    esp,0x10
c0008527:	50                   	push   eax
c0008528:	6a 3c                	push   0x3c
c000852a:	6a 00                	push   0x0
c000852c:	53                   	push   ebx
c000852d:	e8 59 81 ff ff       	call   c000068b <memset>
c0008532:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008535:	e8 aa 6f 00 00       	call   c000f4e4 <free>
c000853a:	83 c4 10             	add    esp,0x10
c000853d:	31 c0                	xor    eax,eax
c000853f:	83 c4 08             	add    esp,0x8
c0008542:	5b                   	pop    ebx
c0008543:	c3                   	ret    

c0008544 <src_process>:
c0008544:	55                   	push   ebp
c0008545:	57                   	push   edi
c0008546:	56                   	push   esi
c0008547:	53                   	push   ebx
c0008548:	83 ec 1c             	sub    esp,0x1c
c000854b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000854f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008553:	85 ed                	test   ebp,ebp
c0008555:	0f 84 6f 01 00 00    	je     c00086ca <src_process+0x186>
c000855b:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c000855f:	0f 84 6c 01 00 00    	je     c00086d1 <src_process+0x18d>
c0008565:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c0008569:	0f 84 62 01 00 00    	je     c00086d1 <src_process+0x18d>
c000856f:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c0008576:	0f 85 5c 01 00 00    	jne    c00086d8 <src_process+0x194>
c000857c:	85 db                	test   ebx,ebx
c000857e:	0f 84 5b 01 00 00    	je     c00086df <src_process+0x19b>
c0008584:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008586:	85 f6                	test   esi,esi
c0008588:	0f 84 58 01 00 00    	je     c00086e6 <src_process+0x1a2>
c000858e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008591:	85 ff                	test   edi,edi
c0008593:	0f 84 4d 01 00 00    	je     c00086e6 <src_process+0x1a2>
c0008599:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000859c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000859f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00085a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085a7:	68 00 00 70 3f       	push   0x3f700000
c00085ac:	6a 00                	push   0x0
c00085ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085b6:	e8 d4 e7 01 00       	call   c0026d8f <__ltdf2>
c00085bb:	83 c4 10             	add    esp,0x10
c00085be:	85 c0                	test   eax,eax
c00085c0:	0f 88 27 01 00 00    	js     c00086ed <src_process+0x1a9>
c00085c6:	68 00 00 70 40       	push   0x40700000
c00085cb:	6a 00                	push   0x0
c00085cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085d5:	e8 97 e7 01 00       	call   c0026d71 <__gtdf2>
c00085da:	83 c4 10             	add    esp,0x10
c00085dd:	85 c0                	test   eax,eax
c00085df:	0f 8f 08 01 00 00    	jg     c00086ed <src_process+0x1a9>
c00085e5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00085e9:	79 07                	jns    c00085f2 <src_process+0xae>
c00085eb:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00085f2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00085f5:	85 c0                	test   eax,eax
c00085f7:	79 50                	jns    c0008649 <src_process+0x105>
c00085f9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008600:	39 fe                	cmp    esi,edi
c0008602:	72 37                	jb     c000863b <src_process+0xf7>
c0008604:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000860b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008612:	68 00 00 70 3f       	push   0x3f700000
c0008617:	6a 00                	push   0x0
c0008619:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000861c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000861f:	e8 6b e7 01 00       	call   c0026d8f <__ltdf2>
c0008624:	83 c4 10             	add    esp,0x10
c0008627:	85 c0                	test   eax,eax
c0008629:	79 37                	jns    c0008662 <src_process+0x11e>
c000862b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000862f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008633:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008636:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008639:	eb 27                	jmp    c0008662 <src_process+0x11e>
c000863b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000863e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008642:	8d 04 86             	lea    eax,[esi+eax*4]
c0008645:	39 c7                	cmp    edi,eax
c0008647:	eb 0d                	jmp    c0008656 <src_process+0x112>
c0008649:	39 fe                	cmp    esi,edi
c000864b:	72 ee                	jb     c000863b <src_process+0xf7>
c000864d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008651:	8d 04 87             	lea    eax,[edi+eax*4]
c0008654:	39 c6                	cmp    esi,eax
c0008656:	73 ac                	jae    c0008604 <src_process+0xc0>
c0008658:	b8 10 00 00 00       	mov    eax,0x10
c000865d:	e9 90 00 00 00       	jmp    c00086f2 <src_process+0x1ae>
c0008662:	83 ec 10             	sub    esp,0x10
c0008665:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008668:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000866b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000866e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008671:	e8 1e de 01 00       	call   c0026494 <__subdf3>
c0008676:	83 c4 18             	add    esp,0x18
c0008679:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000867d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008681:	52                   	push   edx
c0008682:	50                   	push   eax
c0008683:	e8 98 e8 01 00       	call   c0026f20 <fabs>
c0008688:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000868c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008690:	83 c4 10             	add    esp,0x10
c0008693:	68 af 03 d2 3c       	push   0x3cd203af
c0008698:	68 16 56 e7 9e       	push   0x9ee75616
c000869d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086a5:	e8 e5 e6 01 00       	call   c0026d8f <__ltdf2>
c00086aa:	83 c4 10             	add    esp,0x10
c00086ad:	85 c0                	test   eax,eax
c00086af:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00086b3:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00086b7:	79 05                	jns    c00086be <src_process+0x17a>
c00086b9:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00086bc:	eb 03                	jmp    c00086c1 <src_process+0x17d>
c00086be:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00086c1:	83 c4 1c             	add    esp,0x1c
c00086c4:	5b                   	pop    ebx
c00086c5:	5e                   	pop    esi
c00086c6:	5f                   	pop    edi
c00086c7:	5d                   	pop    ebp
c00086c8:	ff e0                	jmp    eax
c00086ca:	b8 02 00 00 00       	mov    eax,0x2
c00086cf:	eb 21                	jmp    c00086f2 <src_process+0x1ae>
c00086d1:	b8 07 00 00 00       	mov    eax,0x7
c00086d6:	eb 1a                	jmp    c00086f2 <src_process+0x1ae>
c00086d8:	b8 12 00 00 00       	mov    eax,0x12
c00086dd:	eb 13                	jmp    c00086f2 <src_process+0x1ae>
c00086df:	b8 03 00 00 00       	mov    eax,0x3
c00086e4:	eb 0c                	jmp    c00086f2 <src_process+0x1ae>
c00086e6:	b8 04 00 00 00       	mov    eax,0x4
c00086eb:	eb 05                	jmp    c00086f2 <src_process+0x1ae>
c00086ed:	b8 06 00 00 00       	mov    eax,0x6
c00086f2:	83 c4 1c             	add    esp,0x1c
c00086f5:	5b                   	pop    ebx
c00086f6:	5e                   	pop    esi
c00086f7:	5f                   	pop    edi
c00086f8:	5d                   	pop    ebp
c00086f9:	c3                   	ret    

c00086fa <src_callback_read>:
c00086fa:	55                   	push   ebp
c00086fb:	57                   	push   edi
c00086fc:	56                   	push   esi
c00086fd:	53                   	push   ebx
c00086fe:	83 ec 3c             	sub    esp,0x3c
c0008701:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008705:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008709:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000870d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008711:	85 ed                	test   ebp,ebp
c0008713:	0f 8e 52 01 00 00    	jle    c000886b <src_callback_read+0x171>
c0008719:	85 db                	test   ebx,ebx
c000871b:	0f 84 4a 01 00 00    	je     c000886b <src_callback_read+0x171>
c0008721:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008728:	74 0c                	je     c0008736 <src_callback_read+0x3c>
c000872a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008731:	e9 35 01 00 00       	jmp    c000886b <src_callback_read+0x171>
c0008736:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000873a:	75 0c                	jne    c0008748 <src_callback_read+0x4e>
c000873c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008743:	e9 23 01 00 00       	jmp    c000886b <src_callback_read+0x171>
c0008748:	51                   	push   ecx
c0008749:	6a 24                	push   0x24
c000874b:	6a 00                	push   0x0
c000874d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008751:	50                   	push   eax
c0008752:	e8 34 7f ff ff       	call   c000068b <memset>
c0008757:	83 c4 10             	add    esp,0x10
c000875a:	68 00 00 70 3f       	push   0x3f700000
c000875f:	6a 00                	push   0x0
c0008761:	57                   	push   edi
c0008762:	56                   	push   esi
c0008763:	e8 27 e6 01 00       	call   c0026d8f <__ltdf2>
c0008768:	83 c4 10             	add    esp,0x10
c000876b:	85 c0                	test   eax,eax
c000876d:	78 3e                	js     c00087ad <src_callback_read+0xb3>
c000876f:	68 00 00 70 40       	push   0x40700000
c0008774:	6a 00                	push   0x0
c0008776:	57                   	push   edi
c0008777:	56                   	push   esi
c0008778:	e8 f4 e5 01 00       	call   c0026d71 <__gtdf2>
c000877d:	83 c4 10             	add    esp,0x10
c0008780:	85 c0                	test   eax,eax
c0008782:	7f 29                	jg     c00087ad <src_callback_read+0xb3>
c0008784:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0008788:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000878c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008790:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0008794:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0008797:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000879b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000879f:	31 f6                	xor    esi,esi
c00087a1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00087a4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00087a8:	e9 97 00 00 00       	jmp    c0008844 <src_callback_read+0x14a>
c00087ad:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00087b4:	e9 b2 00 00 00       	jmp    c000886b <src_callback_read+0x171>
c00087b9:	8d 44 24 04          	lea    eax,[esp+0x4]
c00087bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087c1:	52                   	push   edx
c00087c2:	52                   	push   edx
c00087c3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00087c7:	50                   	push   eax
c00087c8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087cb:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00087ce:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00087d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00087d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00087da:	83 c4 10             	add    esp,0x10
c00087dd:	85 c0                	test   eax,eax
c00087df:	75 08                	jne    c00087e9 <src_callback_read+0xef>
c00087e1:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00087e9:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c00087f0:	50                   	push   eax
c00087f1:	50                   	push   eax
c00087f2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00087f6:	50                   	push   eax
c00087f7:	53                   	push   ebx
c00087f8:	e8 47 fd ff ff       	call   c0008544 <src_process>
c00087fd:	83 c4 10             	add    esp,0x10
c0008800:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008807:	85 c0                	test   eax,eax
c0008809:	75 49                	jne    c0008854 <src_callback_read+0x15a>
c000880b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000880f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008812:	89 f9                	mov    ecx,edi
c0008814:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008818:	0f af ca             	imul   ecx,edx
c000881b:	c1 e1 02             	shl    ecx,0x2
c000881e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008822:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008826:	0f af d1             	imul   edx,ecx
c0008829:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c000882d:	c1 e2 02             	shl    edx,0x2
c0008830:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008834:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008837:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000883c:	74 12                	je     c0008850 <src_callback_read+0x156>
c000883e:	39 d5                	cmp    ebp,edx
c0008840:	7e 14                	jle    c0008856 <src_callback_read+0x15c>
c0008842:	89 d6                	mov    esi,edx
c0008844:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008849:	75 9e                	jne    c00087e9 <src_callback_read+0xef>
c000884b:	e9 69 ff ff ff       	jmp    c00087b9 <src_callback_read+0xbf>
c0008850:	85 c9                	test   ecx,ecx
c0008852:	75 ea                	jne    c000883e <src_callback_read+0x144>
c0008854:	89 f2                	mov    edx,esi
c0008856:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000885a:	85 c0                	test   eax,eax
c000885c:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c000885f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008863:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008866:	74 05                	je     c000886d <src_callback_read+0x173>
c0008868:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000886b:	31 d2                	xor    edx,edx
c000886d:	83 c4 3c             	add    esp,0x3c
c0008870:	89 d0                	mov    eax,edx
c0008872:	5b                   	pop    ebx
c0008873:	5e                   	pop    esi
c0008874:	5f                   	pop    edi
c0008875:	5d                   	pop    ebp
c0008876:	c3                   	ret    

c0008877 <src_set_ratio>:
c0008877:	57                   	push   edi
c0008878:	ba 02 00 00 00       	mov    edx,0x2
c000887d:	56                   	push   esi
c000887e:	53                   	push   ebx
c000887f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008883:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008887:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000888b:	85 db                	test   ebx,ebx
c000888d:	74 4c                	je     c00088db <src_set_ratio+0x64>
c000888f:	ba 07 00 00 00       	mov    edx,0x7
c0008894:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008898:	74 41                	je     c00088db <src_set_ratio+0x64>
c000889a:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c000889e:	74 3b                	je     c00088db <src_set_ratio+0x64>
c00088a0:	68 00 00 70 3f       	push   0x3f700000
c00088a5:	6a 00                	push   0x0
c00088a7:	57                   	push   edi
c00088a8:	56                   	push   esi
c00088a9:	e8 e1 e4 01 00       	call   c0026d8f <__ltdf2>
c00088ae:	83 c4 10             	add    esp,0x10
c00088b1:	ba 06 00 00 00       	mov    edx,0x6
c00088b6:	85 c0                	test   eax,eax
c00088b8:	78 21                	js     c00088db <src_set_ratio+0x64>
c00088ba:	68 00 00 70 40       	push   0x40700000
c00088bf:	6a 00                	push   0x0
c00088c1:	57                   	push   edi
c00088c2:	56                   	push   esi
c00088c3:	e8 a9 e4 01 00       	call   c0026d71 <__gtdf2>
c00088c8:	83 c4 10             	add    esp,0x10
c00088cb:	ba 06 00 00 00       	mov    edx,0x6
c00088d0:	85 c0                	test   eax,eax
c00088d2:	7f 07                	jg     c00088db <src_set_ratio+0x64>
c00088d4:	89 33                	mov    DWORD PTR [ebx],esi
c00088d6:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00088d9:	31 d2                	xor    edx,edx
c00088db:	5b                   	pop    ebx
c00088dc:	89 d0                	mov    eax,edx
c00088de:	5e                   	pop    esi
c00088df:	5f                   	pop    edi
c00088e0:	c3                   	ret    

c00088e1 <src_get_channels>:
c00088e1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00088e5:	b8 02 00 00 00       	mov    eax,0x2
c00088ea:	85 d2                	test   edx,edx
c00088ec:	74 14                	je     c0008902 <src_get_channels+0x21>
c00088ee:	b8 07 00 00 00       	mov    eax,0x7
c00088f3:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c00088f7:	74 09                	je     c0008902 <src_get_channels+0x21>
c00088f9:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c00088fd:	74 03                	je     c0008902 <src_get_channels+0x21>
c00088ff:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008902:	c3                   	ret    

c0008903 <src_reset>:
c0008903:	53                   	push   ebx
c0008904:	b8 02 00 00 00       	mov    eax,0x2
c0008909:	83 ec 08             	sub    esp,0x8
c000890c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008910:	85 db                	test   ebx,ebx
c0008912:	74 36                	je     c000894a <src_reset+0x47>
c0008914:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008917:	85 c0                	test   eax,eax
c0008919:	74 09                	je     c0008924 <src_reset+0x21>
c000891b:	83 ec 0c             	sub    esp,0xc
c000891e:	53                   	push   ebx
c000891f:	ff d0                	call   eax
c0008921:	83 c4 10             	add    esp,0x10
c0008924:	31 c0                	xor    eax,eax
c0008926:	31 d2                	xor    edx,edx
c0008928:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000892b:	89 03                	mov    DWORD PTR [ebx],eax
c000892d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008930:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008933:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000893a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008941:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008948:	31 c0                	xor    eax,eax
c000894a:	83 c4 08             	add    esp,0x8
c000894d:	5b                   	pop    ebx
c000894e:	c3                   	ret    

c000894f <src_new>:
c000894f:	57                   	push   edi
c0008950:	56                   	push   esi
c0008951:	53                   	push   ebx
c0008952:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008956:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000895a:	85 f6                	test   esi,esi
c000895c:	74 73                	je     c00089d1 <src_new+0x82>
c000895e:	85 ff                	test   edi,edi
c0008960:	7f 08                	jg     c000896a <src_new+0x1b>
c0008962:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008968:	eb 1e                	jmp    c0008988 <src_new+0x39>
c000896a:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008970:	50                   	push   eax
c0008971:	50                   	push   eax
c0008972:	6a 3c                	push   0x3c
c0008974:	6a 01                	push   0x1
c0008976:	e8 89 6b 00 00       	call   c000f504 <calloc>
c000897b:	83 c4 10             	add    esp,0x10
c000897e:	89 c3                	mov    ebx,eax
c0008980:	85 c0                	test   eax,eax
c0008982:	75 10                	jne    c0008994 <src_new+0x45>
c0008984:	85 f6                	test   esi,esi
c0008986:	75 04                	jne    c000898c <src_new+0x3d>
c0008988:	31 db                	xor    ebx,ebx
c000898a:	eb 4b                	jmp    c00089d7 <src_new+0x88>
c000898c:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008992:	eb 43                	jmp    c00089d7 <src_new+0x88>
c0008994:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008997:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c000899e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00089a2:	e8 1d fb ff ff       	call   c00084c4 <psrc_set_converter>
c00089a7:	85 c0                	test   eax,eax
c00089a9:	74 18                	je     c00089c3 <src_new+0x74>
c00089ab:	85 f6                	test   esi,esi
c00089ad:	74 06                	je     c00089b5 <src_new+0x66>
c00089af:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00089b5:	83 ec 0c             	sub    esp,0xc
c00089b8:	53                   	push   ebx
c00089b9:	31 db                	xor    ebx,ebx
c00089bb:	e8 24 6b 00 00       	call   c000f4e4 <free>
c00089c0:	83 c4 10             	add    esp,0x10
c00089c3:	83 ec 0c             	sub    esp,0xc
c00089c6:	53                   	push   ebx
c00089c7:	e8 37 ff ff ff       	call   c0008903 <src_reset>
c00089cc:	83 c4 10             	add    esp,0x10
c00089cf:	eb 06                	jmp    c00089d7 <src_new+0x88>
c00089d1:	85 ff                	test   edi,edi
c00089d3:	7f 9b                	jg     c0008970 <src_new+0x21>
c00089d5:	eb b1                	jmp    c0008988 <src_new+0x39>
c00089d7:	89 d8                	mov    eax,ebx
c00089d9:	5b                   	pop    ebx
c00089da:	5e                   	pop    esi
c00089db:	5f                   	pop    edi
c00089dc:	c3                   	ret    

c00089dd <src_callback_new>:
c00089dd:	56                   	push   esi
c00089de:	53                   	push   ebx
c00089df:	53                   	push   ebx
c00089e0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00089e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089e8:	85 f6                	test   esi,esi
c00089ea:	75 0e                	jne    c00089fa <src_callback_new+0x1d>
c00089ec:	31 db                	xor    ebx,ebx
c00089ee:	85 c0                	test   eax,eax
c00089f0:	74 47                	je     c0008a39 <src_callback_new+0x5c>
c00089f2:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c00089f8:	eb 3f                	jmp    c0008a39 <src_callback_new+0x5c>
c00089fa:	85 c0                	test   eax,eax
c00089fc:	74 06                	je     c0008a04 <src_callback_new+0x27>
c00089fe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008a04:	51                   	push   ecx
c0008a05:	50                   	push   eax
c0008a06:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a0a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a0e:	e8 3c ff ff ff       	call   c000894f <src_new>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	89 c3                	mov    ebx,eax
c0008a18:	85 c0                	test   eax,eax
c0008a1a:	74 1d                	je     c0008a39 <src_callback_new+0x5c>
c0008a1c:	83 ec 0c             	sub    esp,0xc
c0008a1f:	50                   	push   eax
c0008a20:	e8 de fe ff ff       	call   c0008903 <src_reset>
c0008a25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008a29:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a30:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008a33:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008a36:	83 c4 10             	add    esp,0x10
c0008a39:	89 d8                	mov    eax,ebx
c0008a3b:	5a                   	pop    edx
c0008a3c:	5b                   	pop    ebx
c0008a3d:	5e                   	pop    esi
c0008a3e:	c3                   	ret    

c0008a3f <src_get_name>:
c0008a3f:	53                   	push   ebx
c0008a40:	83 ec 14             	sub    esp,0x14
c0008a43:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a47:	53                   	push   ebx
c0008a48:	e8 d0 4f 00 00       	call   c000da1d <sinc_get_name>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	85 c0                	test   eax,eax
c0008a52:	75 1d                	jne    c0008a71 <src_get_name+0x32>
c0008a54:	83 ec 0c             	sub    esp,0xc
c0008a57:	53                   	push   ebx
c0008a58:	e8 80 57 00 00       	call   c000e1dd <zoh_get_name>
c0008a5d:	83 c4 10             	add    esp,0x10
c0008a60:	85 c0                	test   eax,eax
c0008a62:	75 0d                	jne    c0008a71 <src_get_name+0x32>
c0008a64:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a68:	83 c4 08             	add    esp,0x8
c0008a6b:	5b                   	pop    ebx
c0008a6c:	e9 74 0b 00 00       	jmp    c00095e5 <linear_get_name>
c0008a71:	83 c4 08             	add    esp,0x8
c0008a74:	5b                   	pop    ebx
c0008a75:	c3                   	ret    

c0008a76 <src_get_description>:
c0008a76:	53                   	push   ebx
c0008a77:	83 ec 14             	sub    esp,0x14
c0008a7a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a7e:	53                   	push   ebx
c0008a7f:	e8 ac 4f 00 00       	call   c000da30 <sinc_get_description>
c0008a84:	83 c4 10             	add    esp,0x10
c0008a87:	85 c0                	test   eax,eax
c0008a89:	75 1d                	jne    c0008aa8 <src_get_description+0x32>
c0008a8b:	83 ec 0c             	sub    esp,0xc
c0008a8e:	53                   	push   ebx
c0008a8f:	e8 58 57 00 00       	call   c000e1ec <zoh_get_description>
c0008a94:	83 c4 10             	add    esp,0x10
c0008a97:	85 c0                	test   eax,eax
c0008a99:	75 0d                	jne    c0008aa8 <src_get_description+0x32>
c0008a9b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a9f:	83 c4 08             	add    esp,0x8
c0008aa2:	5b                   	pop    ebx
c0008aa3:	e9 4c 0b 00 00       	jmp    c00095f4 <linear_get_description>
c0008aa8:	83 c4 08             	add    esp,0x8
c0008aab:	5b                   	pop    ebx
c0008aac:	c3                   	ret    

c0008aad <src_get_version>:
c0008aad:	b8 80 81 02 c0       	mov    eax,0xc0028180
c0008ab2:	c3                   	ret    

c0008ab3 <src_is_valid_ratio>:
c0008ab3:	83 ec 1c             	sub    esp,0x1c
c0008ab6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008aba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008abe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ac2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ac6:	68 00 00 70 3f       	push   0x3f700000
c0008acb:	6a 00                	push   0x0
c0008acd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ad1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ad5:	e8 b5 e2 01 00       	call   c0026d8f <__ltdf2>
c0008ada:	83 c4 10             	add    esp,0x10
c0008add:	31 d2                	xor    edx,edx
c0008adf:	85 c0                	test   eax,eax
c0008ae1:	78 1e                	js     c0008b01 <src_is_valid_ratio+0x4e>
c0008ae3:	68 00 00 70 40       	push   0x40700000
c0008ae8:	6a 00                	push   0x0
c0008aea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008aee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008af2:	e8 7a e2 01 00       	call   c0026d71 <__gtdf2>
c0008af7:	31 d2                	xor    edx,edx
c0008af9:	83 c4 10             	add    esp,0x10
c0008afc:	85 c0                	test   eax,eax
c0008afe:	0f 9e c2             	setle  dl
c0008b01:	89 d0                	mov    eax,edx
c0008b03:	83 c4 1c             	add    esp,0x1c
c0008b06:	c3                   	ret    

c0008b07 <src_error>:
c0008b07:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b0b:	31 c0                	xor    eax,eax
c0008b0d:	85 d2                	test   edx,edx
c0008b0f:	74 03                	je     c0008b14 <src_error+0xd>
c0008b11:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008b14:	c3                   	ret    

c0008b15 <src_strerror>:
c0008b15:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b19:	31 c0                	xor    eax,eax
c0008b1b:	83 fa 17             	cmp    edx,0x17
c0008b1e:	77 07                	ja     c0008b27 <src_strerror+0x12>
c0008b20:	8b 04 95 e0 85 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7a20]
c0008b27:	c3                   	ret    

c0008b28 <src_simple>:
c0008b28:	56                   	push   esi
c0008b29:	53                   	push   ebx
c0008b2a:	83 ec 18             	sub    esp,0x18
c0008b2d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b31:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008b35:	50                   	push   eax
c0008b36:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b3a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b3e:	e8 0c fe ff ff       	call   c000894f <src_new>
c0008b43:	83 c4 10             	add    esp,0x10
c0008b46:	85 c0                	test   eax,eax
c0008b48:	75 06                	jne    c0008b50 <src_simple+0x28>
c0008b4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b4e:	eb 25                	jmp    c0008b75 <src_simple+0x4d>
c0008b50:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008b57:	89 c3                	mov    ebx,eax
c0008b59:	50                   	push   eax
c0008b5a:	50                   	push   eax
c0008b5b:	56                   	push   esi
c0008b5c:	53                   	push   ebx
c0008b5d:	e8 e2 f9 ff ff       	call   c0008544 <src_process>
c0008b62:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008b65:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008b69:	e8 9a f9 ff ff       	call   c0008508 <src_delete>
c0008b6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b72:	83 c4 10             	add    esp,0x10
c0008b75:	83 c4 14             	add    esp,0x14
c0008b78:	5b                   	pop    ebx
c0008b79:	5e                   	pop    esi
c0008b7a:	c3                   	ret    

c0008b7b <src_short_to_float_array>:
c0008b7b:	53                   	push   ebx
c0008b7c:	83 ec 18             	sub    esp,0x18
c0008b7f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008b83:	85 db                	test   ebx,ebx
c0008b85:	74 54                	je     c0008bdb <src_short_to_float_array+0x60>
c0008b87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008b8b:	4b                   	dec    ebx
c0008b8c:	83 ec 0c             	sub    esp,0xc
c0008b8f:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008b93:	50                   	push   eax
c0008b94:	e8 8a df 01 00       	call   c0026b23 <__floatsidf>
c0008b99:	83 c4 10             	add    esp,0x10
c0008b9c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ba0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ba4:	68 00 00 00 3f       	push   0x3f000000
c0008ba9:	6a 00                	push   0x0
c0008bab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008baf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bb3:	e8 08 d9 01 00       	call   c00264c0 <__muldf3>
c0008bb8:	59                   	pop    ecx
c0008bb9:	59                   	pop    ecx
c0008bba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008bbe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008bc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bca:	e8 c4 e1 01 00       	call   c0026d93 <__truncdfsf2>
c0008bcf:	83 c4 10             	add    esp,0x10
c0008bd2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008bd6:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008bd9:	eb a8                	jmp    c0008b83 <src_short_to_float_array+0x8>
c0008bdb:	83 c4 18             	add    esp,0x18
c0008bde:	5b                   	pop    ebx
c0008bdf:	c3                   	ret    

c0008be0 <src_float_to_short_array>:
c0008be0:	56                   	push   esi
c0008be1:	53                   	push   ebx
c0008be2:	83 ec 14             	sub    esp,0x14
c0008be5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008be9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008bed:	85 db                	test   ebx,ebx
c0008bef:	0f 84 a4 00 00 00    	je     c0008c99 <src_float_to_short_array+0xb9>
c0008bf5:	83 ec 0c             	sub    esp,0xc
c0008bf8:	4b                   	dec    ebx
c0008bf9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008bfd:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008c00:	e8 b2 e2 01 00       	call   c0026eb7 <__extendsfdf2>
c0008c05:	83 c4 10             	add    esp,0x10
c0008c08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c0c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c10:	68 00 00 e0 41       	push   0x41e00000
c0008c15:	6a 00                	push   0x0
c0008c17:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c1f:	e8 9c d8 01 00       	call   c00264c0 <__muldf3>
c0008c24:	83 c4 10             	add    esp,0x10
c0008c27:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c2b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c2f:	68 ff ff df 41       	push   0x41dfffff
c0008c34:	68 00 00 c0 ff       	push   0xffc00000
c0008c39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c41:	e8 47 e1 01 00       	call   c0026d8d <__gedf2>
c0008c46:	83 c4 10             	add    esp,0x10
c0008c49:	85 c0                	test   eax,eax
c0008c4b:	78 08                	js     c0008c55 <src_float_to_short_array+0x75>
c0008c4d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008c53:	eb 98                	jmp    c0008bed <src_float_to_short_array+0xd>
c0008c55:	68 00 00 e0 c1       	push   0xc1e00000
c0008c5a:	6a 00                	push   0x0
c0008c5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c64:	e8 28 e1 01 00       	call   c0026d91 <__ledf2>
c0008c69:	83 c4 10             	add    esp,0x10
c0008c6c:	85 c0                	test   eax,eax
c0008c6e:	7f 0b                	jg     c0008c7b <src_float_to_short_array+0x9b>
c0008c70:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008c76:	e9 72 ff ff ff       	jmp    c0008bed <src_float_to_short_array+0xd>
c0008c7b:	50                   	push   eax
c0008c7c:	50                   	push   eax
c0008c7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c85:	e8 b6 e2 01 00       	call   c0026f40 <lrint>
c0008c8a:	83 c4 10             	add    esp,0x10
c0008c8d:	c1 f8 10             	sar    eax,0x10
c0008c90:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008c94:	e9 54 ff ff ff       	jmp    c0008bed <src_float_to_short_array+0xd>
c0008c99:	83 c4 14             	add    esp,0x14
c0008c9c:	5b                   	pop    ebx
c0008c9d:	5e                   	pop    esi
c0008c9e:	c3                   	ret    

c0008c9f <src_int_to_float_array>:
c0008c9f:	53                   	push   ebx
c0008ca0:	83 ec 18             	sub    esp,0x18
c0008ca3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ca7:	85 db                	test   ebx,ebx
c0008ca9:	74 52                	je     c0008cfd <src_int_to_float_array+0x5e>
c0008cab:	83 ec 0c             	sub    esp,0xc
c0008cae:	4b                   	dec    ebx
c0008caf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008cb3:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008cb6:	e8 68 de 01 00       	call   c0026b23 <__floatsidf>
c0008cbb:	83 c4 10             	add    esp,0x10
c0008cbe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cc2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cc6:	68 00 00 00 3e       	push   0x3e000000
c0008ccb:	6a 00                	push   0x0
c0008ccd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cd1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cd5:	e8 e6 d7 01 00       	call   c00264c0 <__muldf3>
c0008cda:	59                   	pop    ecx
c0008cdb:	59                   	pop    ecx
c0008cdc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ce0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008ce4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cec:	e8 a2 e0 01 00       	call   c0026d93 <__truncdfsf2>
c0008cf1:	83 c4 10             	add    esp,0x10
c0008cf4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cf8:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008cfb:	eb aa                	jmp    c0008ca7 <src_int_to_float_array+0x8>
c0008cfd:	83 c4 18             	add    esp,0x18
c0008d00:	5b                   	pop    ebx
c0008d01:	c3                   	ret    

c0008d02 <src_float_to_int_array>:
c0008d02:	56                   	push   esi
c0008d03:	53                   	push   ebx
c0008d04:	83 ec 14             	sub    esp,0x14
c0008d07:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d0b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d0f:	85 db                	test   ebx,ebx
c0008d11:	0f 84 a2 00 00 00    	je     c0008db9 <src_float_to_int_array+0xb7>
c0008d17:	83 ec 0c             	sub    esp,0xc
c0008d1a:	4b                   	dec    ebx
c0008d1b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008d1f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008d22:	e8 90 e1 01 00       	call   c0026eb7 <__extendsfdf2>
c0008d27:	83 c4 10             	add    esp,0x10
c0008d2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d32:	68 00 00 e0 41       	push   0x41e00000
c0008d37:	6a 00                	push   0x0
c0008d39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d41:	e8 7a d7 01 00       	call   c00264c0 <__muldf3>
c0008d46:	83 c4 10             	add    esp,0x10
c0008d49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d4d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d51:	68 ff ff df 41       	push   0x41dfffff
c0008d56:	68 00 00 c0 ff       	push   0xffc00000
c0008d5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d63:	e8 25 e0 01 00       	call   c0026d8d <__gedf2>
c0008d68:	83 c4 10             	add    esp,0x10
c0008d6b:	85 c0                	test   eax,eax
c0008d6d:	78 09                	js     c0008d78 <src_float_to_int_array+0x76>
c0008d6f:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008d76:	eb 97                	jmp    c0008d0f <src_float_to_int_array+0xd>
c0008d78:	68 00 00 e0 c1       	push   0xc1e00000
c0008d7d:	6a 00                	push   0x0
c0008d7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d87:	e8 05 e0 01 00       	call   c0026d91 <__ledf2>
c0008d8c:	83 c4 10             	add    esp,0x10
c0008d8f:	85 c0                	test   eax,eax
c0008d91:	7f 0c                	jg     c0008d9f <src_float_to_int_array+0x9d>
c0008d93:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008d9a:	e9 70 ff ff ff       	jmp    c0008d0f <src_float_to_int_array+0xd>
c0008d9f:	50                   	push   eax
c0008da0:	50                   	push   eax
c0008da1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008da5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008da9:	e8 92 e1 01 00       	call   c0026f40 <lrint>
c0008dae:	83 c4 10             	add    esp,0x10
c0008db1:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008db4:	e9 56 ff ff ff       	jmp    c0008d0f <src_float_to_int_array+0xd>
c0008db9:	83 c4 14             	add    esp,0x14
c0008dbc:	5b                   	pop    ebx
c0008dbd:	5e                   	pop    esi
c0008dbe:	c3                   	ret    

c0008dbf <linear_vari_process>:
c0008dbf:	55                   	push   ebp
c0008dc0:	31 d2                	xor    edx,edx
c0008dc2:	57                   	push   edi
c0008dc3:	56                   	push   esi
c0008dc4:	53                   	push   ebx
c0008dc5:	83 ec 3c             	sub    esp,0x3c
c0008dc8:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008dcc:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008dd0:	0f 8e d3 07 00 00    	jle    c00095a9 <linear_vari_process+0x7ea>
c0008dd6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008dda:	ba 05 00 00 00       	mov    edx,0x5
c0008ddf:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008de2:	85 db                	test   ebx,ebx
c0008de4:	0f 84 bf 07 00 00    	je     c00095a9 <linear_vari_process+0x7ea>
c0008dea:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008ded:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008df1:	74 19                	je     c0008e0c <linear_vari_process+0x4d>
c0008df3:	31 d2                	xor    edx,edx
c0008df5:	39 c2                	cmp    edx,eax
c0008df7:	7d 0c                	jge    c0008e05 <linear_vari_process+0x46>
c0008df9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008dfb:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0008dfe:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0008e02:	42                   	inc    edx
c0008e03:	eb f0                	jmp    c0008df5 <linear_vari_process+0x36>
c0008e05:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008e0c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008e0f:	0f af d0             	imul   edx,eax
c0008e12:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008e15:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008e19:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008e20:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008e23:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008e2a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e2e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008e31:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e37:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e3b:	68 00 00 70 3f       	push   0x3f700000
c0008e40:	6a 00                	push   0x0
c0008e42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e4a:	e8 40 df 01 00       	call   c0026d8f <__ltdf2>
c0008e4f:	83 c4 10             	add    esp,0x10
c0008e52:	ba 16 00 00 00       	mov    edx,0x16
c0008e57:	85 c0                	test   eax,eax
c0008e59:	0f 88 4a 07 00 00    	js     c00095a9 <linear_vari_process+0x7ea>
c0008e5f:	68 00 00 70 40       	push   0x40700000
c0008e64:	6a 00                	push   0x0
c0008e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e6e:	e8 fe de 01 00       	call   c0026d71 <__gtdf2>
c0008e73:	83 c4 10             	add    esp,0x10
c0008e76:	ba 16 00 00 00       	mov    edx,0x16
c0008e7b:	85 c0                	test   eax,eax
c0008e7d:	0f 8f 26 07 00 00    	jg     c00095a9 <linear_vari_process+0x7ea>
c0008e83:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e87:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0008e8a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008e8d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e95:	68 00 00 f0 3f       	push   0x3ff00000
c0008e9a:	6a 00                	push   0x0
c0008e9c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ea0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ea4:	e8 e6 de 01 00       	call   c0026d8f <__ltdf2>
c0008ea9:	83 c4 10             	add    esp,0x10
c0008eac:	85 c0                	test   eax,eax
c0008eae:	0f 89 89 02 00 00    	jns    c000913d <linear_vari_process+0x37e>
c0008eb4:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0008eb7:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0008eba:	0f 8d 7d 02 00 00    	jge    c000913d <linear_vari_process+0x37e>
c0008ec0:	83 ec 0c             	sub    esp,0xc
c0008ec3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0008ec6:	e8 58 dc 01 00       	call   c0026b23 <__floatsidf>
c0008ecb:	83 c4 10             	add    esp,0x10
c0008ece:	89 04 24             	mov    DWORD PTR [esp],eax
c0008ed1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008ed5:	68 00 00 f0 3f       	push   0x3ff00000
c0008eda:	6a 00                	push   0x0
c0008edc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee4:	e8 5a cf 01 00       	call   c0025e43 <__adddf3>
c0008ee9:	83 c4 10             	add    esp,0x10
c0008eec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008ef0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008ef4:	52                   	push   edx
c0008ef5:	50                   	push   eax
c0008ef6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008efa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008efe:	e8 bd d5 01 00       	call   c00264c0 <__muldf3>
c0008f03:	5d                   	pop    ebp
c0008f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f08:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f0c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0008f0f:	e8 0f dc 01 00       	call   c0026b23 <__floatsidf>
c0008f14:	83 c4 10             	add    esp,0x10
c0008f17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f1b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f1f:	52                   	push   edx
c0008f20:	50                   	push   eax
c0008f21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f25:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f29:	e8 15 cf 01 00       	call   c0025e43 <__adddf3>
c0008f2e:	59                   	pop    ecx
c0008f2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f33:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f37:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0008f3a:	e8 e4 db 01 00       	call   c0026b23 <__floatsidf>
c0008f3f:	83 c4 10             	add    esp,0x10
c0008f42:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f46:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f4a:	52                   	push   edx
c0008f4b:	50                   	push   eax
c0008f4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f54:	e8 34 de 01 00       	call   c0026d8d <__gedf2>
c0008f59:	83 c4 10             	add    esp,0x10
c0008f5c:	85 c0                	test   eax,eax
c0008f5e:	0f 89 d9 01 00 00    	jns    c000913d <linear_vari_process+0x37e>
c0008f64:	85 ff                	test   edi,edi
c0008f66:	0f 8e f4 00 00 00    	jle    c0009060 <linear_vari_process+0x2a1>
c0008f6c:	83 ec 10             	sub    esp,0x10
c0008f6f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008f72:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008f75:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0008f79:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0008f7c:	ff 30                	push   DWORD PTR [eax]
c0008f7e:	e8 11 d5 01 00       	call   c0026494 <__subdf3>
c0008f83:	83 c4 18             	add    esp,0x18
c0008f86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f8e:	52                   	push   edx
c0008f8f:	50                   	push   eax
c0008f90:	e8 8b df 01 00       	call   c0026f20 <fabs>
c0008f95:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f99:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f9d:	83 c4 10             	add    esp,0x10
c0008fa0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0008fa5:	68 23 42 92 0c       	push   0xc924223
c0008faa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fb2:	e8 ba dd 01 00       	call   c0026d71 <__gtdf2>
c0008fb7:	83 c4 10             	add    esp,0x10
c0008fba:	85 c0                	test   eax,eax
c0008fbc:	0f 8e 9e 00 00 00    	jle    c0009060 <linear_vari_process+0x2a1>
c0008fc2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008fc6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008fc9:	8b 00                	mov    eax,DWORD PTR [eax]
c0008fcb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008fcf:	89 04 24             	mov    DWORD PTR [esp],eax
c0008fd2:	52                   	push   edx
c0008fd3:	50                   	push   eax
c0008fd4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008fd7:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008fda:	e8 b5 d4 01 00       	call   c0026494 <__subdf3>
c0008fdf:	59                   	pop    ecx
c0008fe0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008fe4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0008fe8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008feb:	e8 33 db 01 00       	call   c0026b23 <__floatsidf>
c0008ff0:	83 c4 10             	add    esp,0x10
c0008ff3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008ff7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008ffb:	52                   	push   edx
c0008ffc:	50                   	push   eax
c0008ffd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009001:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009005:	e8 b6 d4 01 00       	call   c00264c0 <__muldf3>
c000900a:	5f                   	pop    edi
c000900b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000900f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009013:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009016:	e8 08 db 01 00       	call   c0026b23 <__floatsidf>
c000901b:	83 c4 10             	add    esp,0x10
c000901e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009022:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009026:	52                   	push   edx
c0009027:	50                   	push   eax
c0009028:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000902c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009030:	e8 6f d7 01 00       	call   c00267a4 <__divdf3>
c0009035:	83 c4 10             	add    esp,0x10
c0009038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000903c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009040:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009044:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000904c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009050:	e8 ee cd 01 00       	call   c0025e43 <__adddf3>
c0009055:	83 c4 10             	add    esp,0x10
c0009058:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000905c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009060:	31 ff                	xor    edi,edi
c0009062:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c0009065:	0f 8e 9d 00 00 00    	jle    c0009108 <linear_vari_process+0x349>
c000906b:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c000906e:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009072:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009075:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0009079:	89 04 24             	mov    DWORD PTR [esp],eax
c000907c:	8b 06                	mov    eax,DWORD PTR [esi]
c000907e:	52                   	push   edx
c000907f:	52                   	push   edx
c0009080:	55                   	push   ebp
c0009081:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c0009084:	47                   	inc    edi
c0009085:	e8 4e c7 01 00       	call   c00257d8 <__subsf3>
c000908a:	89 04 24             	mov    DWORD PTR [esp],eax
c000908d:	e8 25 de 01 00       	call   c0026eb7 <__extendsfdf2>
c0009092:	83 c4 10             	add    esp,0x10
c0009095:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009099:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000909d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00090a1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00090a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090ad:	e8 0e d4 01 00       	call   c00264c0 <__muldf3>
c00090b2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00090b5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00090b9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00090bd:	e8 f5 dd 01 00       	call   c0026eb7 <__extendsfdf2>
c00090c2:	83 c4 10             	add    esp,0x10
c00090c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00090c9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00090cd:	52                   	push   edx
c00090ce:	50                   	push   eax
c00090cf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090d3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090d7:	e8 67 cd 01 00       	call   c0025e43 <__adddf3>
c00090dc:	59                   	pop    ecx
c00090dd:	5d                   	pop    ebp
c00090de:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00090e2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00090e6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090ea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090ee:	e8 a0 dc 01 00       	call   c0026d93 <__truncdfsf2>
c00090f3:	83 c4 10             	add    esp,0x10
c00090f6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00090f9:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00090fd:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009100:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009103:	e9 5a ff ff ff       	jmp    c0009062 <linear_vari_process+0x2a3>
c0009108:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000910c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009110:	68 00 00 f0 3f       	push   0x3ff00000
c0009115:	6a 00                	push   0x0
c0009117:	e8 88 d6 01 00       	call   c00267a4 <__divdf3>
c000911c:	83 c4 10             	add    esp,0x10
c000911f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009122:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009126:	52                   	push   edx
c0009127:	50                   	push   eax
c0009128:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	e8 0e cd 01 00       	call   c0025e43 <__adddf3>
c0009135:	83 c4 10             	add    esp,0x10
c0009138:	e9 50 fd ff ff       	jmp    c0008e8d <linear_vari_process+0xce>
c000913d:	50                   	push   eax
c000913e:	50                   	push   eax
c000913f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009143:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009147:	e8 f4 dd 01 00       	call   c0026f40 <lrint>
c000914c:	83 ec 0c             	sub    esp,0xc
c000914f:	50                   	push   eax
c0009150:	e8 ce d9 01 00       	call   c0026b23 <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000915c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009166:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000916a:	e8 25 d3 01 00       	call   c0026494 <__subdf3>
c000916f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009173:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009177:	83 c4 20             	add    esp,0x20
c000917a:	6a 00                	push   0x0
c000917c:	6a 00                	push   0x0
c000917e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009182:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009186:	e8 04 dc 01 00       	call   c0026d8f <__ltdf2>
c000918b:	83 c4 10             	add    esp,0x10
c000918e:	85 c0                	test   eax,eax
c0009190:	79 1e                	jns    c00091b0 <linear_vari_process+0x3f1>
c0009192:	68 00 00 f0 3f       	push   0x3ff00000
c0009197:	6a 00                	push   0x0
c0009199:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000919d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a1:	e8 9d cc 01 00       	call   c0025e43 <__adddf3>
c00091a6:	83 c4 10             	add    esp,0x10
c00091a9:	89 04 24             	mov    DWORD PTR [esp],eax
c00091ac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00091b3:	83 ec 10             	sub    esp,0x10
c00091b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091c6:	e8 c9 d2 01 00       	call   c0026494 <__subdf3>
c00091cb:	83 c4 18             	add    esp,0x18
c00091ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091d6:	52                   	push   edx
c00091d7:	50                   	push   eax
c00091d8:	e8 63 dd 01 00       	call   c0026f40 <lrint>
c00091dd:	83 c4 10             	add    esp,0x10
c00091e0:	0f af f8             	imul   edi,eax
c00091e3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00091e6:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00091e9:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00091ec:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c00091ef:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c00091f2:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00091f6:	0f 8d 13 03 00 00    	jge    c000950f <linear_vari_process+0x750>
c00091fc:	83 ec 0c             	sub    esp,0xc
c00091ff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009202:	e8 1c d9 01 00       	call   c0026b23 <__floatsidf>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000920e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009212:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009216:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000921a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000921e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009222:	e8 99 d2 01 00       	call   c00264c0 <__muldf3>
c0009227:	89 3c 24             	mov    DWORD PTR [esp],edi
c000922a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000922e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009232:	e8 ec d8 01 00       	call   c0026b23 <__floatsidf>
c0009237:	83 c4 10             	add    esp,0x10
c000923a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000923e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009242:	52                   	push   edx
c0009243:	50                   	push   eax
c0009244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009248:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000924c:	e8 f2 cb 01 00       	call   c0025e43 <__adddf3>
c0009251:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009254:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009258:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000925c:	e8 c2 d8 01 00       	call   c0026b23 <__floatsidf>
c0009261:	83 c4 10             	add    esp,0x10
c0009264:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009268:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000926c:	52                   	push   edx
c000926d:	50                   	push   eax
c000926e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009272:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009276:	e8 14 db 01 00       	call   c0026d8f <__ltdf2>
c000927b:	83 c4 10             	add    esp,0x10
c000927e:	85 c0                	test   eax,eax
c0009280:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009284:	0f 89 85 02 00 00    	jns    c000950f <linear_vari_process+0x750>
c000928a:	85 c9                	test   ecx,ecx
c000928c:	0f 8e f5 00 00 00    	jle    c0009387 <linear_vari_process+0x5c8>
c0009292:	83 ec 10             	sub    esp,0x10
c0009295:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009298:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000929b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000929f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00092a2:	ff 30                	push   DWORD PTR [eax]
c00092a4:	e8 eb d1 01 00       	call   c0026494 <__subdf3>
c00092a9:	83 c4 18             	add    esp,0x18
c00092ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b4:	52                   	push   edx
c00092b5:	50                   	push   eax
c00092b6:	e8 65 dc 01 00       	call   c0026f20 <fabs>
c00092bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092bf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092c3:	83 c4 10             	add    esp,0x10
c00092c6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00092cb:	68 23 42 92 0c       	push   0xc924223
c00092d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092d8:	e8 94 da 01 00       	call   c0026d71 <__gtdf2>
c00092dd:	83 c4 10             	add    esp,0x10
c00092e0:	85 c0                	test   eax,eax
c00092e2:	0f 8e 9f 00 00 00    	jle    c0009387 <linear_vari_process+0x5c8>
c00092e8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00092ec:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00092ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00092f1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00092f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00092f9:	52                   	push   edx
c00092fa:	50                   	push   eax
c00092fb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00092fe:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009301:	e8 8e d1 01 00       	call   c0026494 <__subdf3>
c0009306:	5f                   	pop    edi
c0009307:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000930b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000930f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009312:	e8 0c d8 01 00       	call   c0026b23 <__floatsidf>
c0009317:	83 c4 10             	add    esp,0x10
c000931a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000931e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009322:	52                   	push   edx
c0009323:	50                   	push   eax
c0009324:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009328:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000932c:	e8 8f d1 01 00       	call   c00264c0 <__muldf3>
c0009331:	5d                   	pop    ebp
c0009332:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009336:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000933a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000933d:	e8 e1 d7 01 00       	call   c0026b23 <__floatsidf>
c0009342:	83 c4 10             	add    esp,0x10
c0009345:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009349:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000934d:	52                   	push   edx
c000934e:	50                   	push   eax
c000934f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009353:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009357:	e8 48 d4 01 00       	call   c00267a4 <__divdf3>
c000935c:	83 c4 10             	add    esp,0x10
c000935f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009363:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009367:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000936b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000936f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009373:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009377:	e8 c7 ca 01 00       	call   c0025e43 <__adddf3>
c000937c:	83 c4 10             	add    esp,0x10
c000937f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009383:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009387:	31 ff                	xor    edi,edi
c0009389:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000938c:	39 f8                	cmp    eax,edi
c000938e:	0f 8e ac 00 00 00    	jle    c0009440 <linear_vari_process+0x681>
c0009394:	8b 16                	mov    edx,DWORD PTR [esi]
c0009396:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0009399:	29 c1                	sub    ecx,eax
c000939b:	89 c8                	mov    eax,ecx
c000939d:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00093a0:	01 f8                	add    eax,edi
c00093a2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00093a6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00093a9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00093ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093b0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00093b3:	51                   	push   ecx
c00093b4:	01 f8                	add    eax,edi
c00093b6:	51                   	push   ecx
c00093b7:	47                   	inc    edi
c00093b8:	55                   	push   ebp
c00093b9:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00093bc:	e8 17 c4 01 00       	call   c00257d8 <__subsf3>
c00093c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c4:	e8 ee da 01 00       	call   c0026eb7 <__extendsfdf2>
c00093c9:	83 c4 10             	add    esp,0x10
c00093cc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00093d0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00093d4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00093d8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00093dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093e4:	e8 d7 d0 01 00       	call   c00264c0 <__muldf3>
c00093e9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00093ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00093f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00093f4:	e8 be da 01 00       	call   c0026eb7 <__extendsfdf2>
c00093f9:	83 c4 10             	add    esp,0x10
c00093fc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009400:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009404:	52                   	push   edx
c0009405:	50                   	push   eax
c0009406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000940a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000940e:	e8 30 ca 01 00       	call   c0025e43 <__adddf3>
c0009413:	5d                   	pop    ebp
c0009414:	59                   	pop    ecx
c0009415:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009419:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000941d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009421:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009425:	e8 69 d9 01 00       	call   c0026d93 <__truncdfsf2>
c000942a:	83 c4 10             	add    esp,0x10
c000942d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009431:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009435:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009438:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000943b:	e9 49 ff ff ff       	jmp    c0009389 <linear_vari_process+0x5ca>
c0009440:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009444:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009448:	68 00 00 f0 3f       	push   0x3ff00000
c000944d:	6a 00                	push   0x0
c000944f:	e8 50 d3 01 00       	call   c00267a4 <__divdf3>
c0009454:	83 c4 10             	add    esp,0x10
c0009457:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000945f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009463:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009467:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946f:	e8 cf c9 01 00       	call   c0025e43 <__adddf3>
c0009474:	59                   	pop    ecx
c0009475:	5f                   	pop    edi
c0009476:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000947a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000947e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009482:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009486:	e8 b5 da 01 00       	call   c0026f40 <lrint>
c000948b:	83 ec 0c             	sub    esp,0xc
c000948e:	50                   	push   eax
c000948f:	e8 8f d6 01 00       	call   c0026b23 <__floatsidf>
c0009494:	83 c4 10             	add    esp,0x10
c0009497:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000949b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000949f:	52                   	push   edx
c00094a0:	50                   	push   eax
c00094a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094a9:	e8 e6 cf 01 00       	call   c0026494 <__subdf3>
c00094ae:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00094b2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00094b6:	83 c4 20             	add    esp,0x20
c00094b9:	6a 00                	push   0x0
c00094bb:	6a 00                	push   0x0
c00094bd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094c1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094c5:	e8 c5 d8 01 00       	call   c0026d8f <__ltdf2>
c00094ca:	83 c4 10             	add    esp,0x10
c00094cd:	85 c0                	test   eax,eax
c00094cf:	79 1e                	jns    c00094ef <linear_vari_process+0x730>
c00094d1:	68 00 00 f0 3f       	push   0x3ff00000
c00094d6:	6a 00                	push   0x0
c00094d8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094dc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094e0:	e8 5e c9 01 00       	call   c0025e43 <__adddf3>
c00094e5:	83 c4 10             	add    esp,0x10
c00094e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00094eb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00094ef:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00094f2:	83 ec 10             	sub    esp,0x10
c00094f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009501:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009505:	e8 8a cf 01 00       	call   c0026494 <__subdf3>
c000950a:	e9 bc fc ff ff       	jmp    c00091cb <linear_vari_process+0x40c>
c000950f:	39 fd                	cmp    ebp,edi
c0009511:	7d 38                	jge    c000954b <linear_vari_process+0x78c>
c0009513:	83 ec 0c             	sub    esp,0xc
c0009516:	89 f8                	mov    eax,edi
c0009518:	29 e8                	sub    eax,ebp
c000951a:	99                   	cdq    
c000951b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000951e:	50                   	push   eax
c000951f:	e8 ff d5 01 00       	call   c0026b23 <__floatsidf>
c0009524:	83 c4 10             	add    esp,0x10
c0009527:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000952b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000952f:	52                   	push   edx
c0009530:	50                   	push   eax
c0009531:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009535:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009539:	e8 05 c9 01 00       	call   c0025e43 <__adddf3>
c000953e:	83 c4 10             	add    esp,0x10
c0009541:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009544:	89 04 24             	mov    DWORD PTR [esp],eax
c0009547:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000954b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000954f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009552:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009556:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0009559:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000955c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000955f:	85 c0                	test   eax,eax
c0009561:	7f 29                	jg     c000958c <linear_vari_process+0x7cd>
c0009563:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000956b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000956f:	89 01                	mov    DWORD PTR [ecx],eax
c0009571:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0009574:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009577:	99                   	cdq    
c0009578:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000957b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000957e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009581:	99                   	cdq    
c0009582:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009585:	31 d2                	xor    edx,edx
c0009587:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000958a:	eb 1d                	jmp    c00095a9 <linear_vari_process+0x7ea>
c000958c:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000958f:	31 d2                	xor    edx,edx
c0009591:	29 c8                	sub    eax,ecx
c0009593:	c1 e0 02             	shl    eax,0x2
c0009596:	39 d1                	cmp    ecx,edx
c0009598:	7e c9                	jle    c0009563 <linear_vari_process+0x7a4>
c000959a:	8b 3e                	mov    edi,DWORD PTR [esi]
c000959c:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c000959f:	83 c0 04             	add    eax,0x4
c00095a2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00095a6:	42                   	inc    edx
c00095a7:	eb ed                	jmp    c0009596 <linear_vari_process+0x7d7>
c00095a9:	83 c4 3c             	add    esp,0x3c
c00095ac:	89 d0                	mov    eax,edx
c00095ae:	5b                   	pop    ebx
c00095af:	5e                   	pop    esi
c00095b0:	5f                   	pop    edi
c00095b1:	5d                   	pop    ebp
c00095b2:	c3                   	ret    

c00095b3 <linear_reset>:
c00095b3:	83 ec 0c             	sub    esp,0xc
c00095b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00095ba:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00095bd:	85 c0                	test   eax,eax
c00095bf:	74 20                	je     c00095e1 <linear_reset+0x2e>
c00095c1:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00095c4:	83 c0 1c             	add    eax,0x1c
c00095c7:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00095ca:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00095d1:	c1 e2 02             	shl    edx,0x2
c00095d4:	51                   	push   ecx
c00095d5:	52                   	push   edx
c00095d6:	6a 00                	push   0x0
c00095d8:	50                   	push   eax
c00095d9:	e8 ad 70 ff ff       	call   c000068b <memset>
c00095de:	83 c4 10             	add    esp,0x10
c00095e1:	83 c4 0c             	add    esp,0xc
c00095e4:	c3                   	ret    

c00095e5 <linear_get_name>:
c00095e5:	31 c0                	xor    eax,eax
c00095e7:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00095ec:	75 05                	jne    c00095f3 <linear_get_name+0xe>
c00095ee:	b8 40 86 02 c0       	mov    eax,0xc0028640
c00095f3:	c3                   	ret    

c00095f4 <linear_get_description>:
c00095f4:	31 c0                	xor    eax,eax
c00095f6:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00095fb:	75 05                	jne    c0009602 <linear_get_description+0xe>
c00095fd:	b8 54 86 02 c0       	mov    eax,0xc0028654
c0009602:	c3                   	ret    

c0009603 <linear_set_converter>:
c0009603:	53                   	push   ebx
c0009604:	b8 0a 00 00 00       	mov    eax,0xa
c0009609:	83 ec 08             	sub    esp,0x8
c000960c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009610:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009615:	75 6e                	jne    c0009685 <linear_set_converter+0x82>
c0009617:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000961a:	85 c0                	test   eax,eax
c000961c:	74 13                	je     c0009631 <linear_set_converter+0x2e>
c000961e:	83 ec 0c             	sub    esp,0xc
c0009621:	50                   	push   eax
c0009622:	e8 bd 5e 00 00       	call   c000f4e4 <free>
c0009627:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000962e:	83 c4 10             	add    esp,0x10
c0009631:	50                   	push   eax
c0009632:	50                   	push   eax
c0009633:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009636:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000963d:	50                   	push   eax
c000963e:	6a 01                	push   0x1
c0009640:	e8 bf 5e 00 00       	call   c000f504 <calloc>
c0009645:	83 c4 10             	add    esp,0x10
c0009648:	89 c2                	mov    edx,eax
c000964a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000964d:	85 d2                	test   edx,edx
c000964f:	b8 01 00 00 00       	mov    eax,0x1
c0009654:	74 2f                	je     c0009685 <linear_set_converter+0x82>
c0009656:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009659:	83 ec 0c             	sub    esp,0xc
c000965c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000965f:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0009665:	c7 43 24 bf 8d 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008dbf
c000966c:	c7 43 20 bf 8d 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008dbf
c0009673:	c7 43 28 b3 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095b3
c000967a:	53                   	push   ebx
c000967b:	e8 33 ff ff ff       	call   c00095b3 <linear_reset>
c0009680:	83 c4 10             	add    esp,0x10
c0009683:	31 c0                	xor    eax,eax
c0009685:	83 c4 08             	add    esp,0x8
c0009688:	5b                   	pop    ebx
c0009689:	c3                   	ret    

c000968a <int_to_fp>:
c000968a:	c1 e0 0c             	shl    eax,0xc
c000968d:	c3                   	ret    

c000968e <fp_to_int>:
c000968e:	c1 f8 0c             	sar    eax,0xc
c0009691:	c3                   	ret    

c0009692 <fp_fraction_part>:
c0009692:	25 ff 0f 00 00       	and    eax,0xfff
c0009697:	c3                   	ret    

c0009698 <fp_to_double>:
c0009698:	83 ec 1c             	sub    esp,0x1c
c000969b:	e8 f2 ff ff ff       	call   c0009692 <fp_fraction_part>
c00096a0:	83 ec 0c             	sub    esp,0xc
c00096a3:	50                   	push   eax
c00096a4:	e8 7a d4 01 00       	call   c0026b23 <__floatsidf>
c00096a9:	83 c4 10             	add    esp,0x10
c00096ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096b4:	68 00 00 30 3f       	push   0x3f300000
c00096b9:	6a 00                	push   0x0
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096c3:	e8 f8 cd 01 00       	call   c00264c0 <__muldf3>
c00096c8:	83 c4 2c             	add    esp,0x2c
c00096cb:	c3                   	ret    

c00096cc <calc_output_single>:
c00096cc:	55                   	push   ebp
c00096cd:	57                   	push   edi
c00096ce:	56                   	push   esi
c00096cf:	89 c6                	mov    esi,eax
c00096d1:	53                   	push   ebx
c00096d2:	89 d3                	mov    ebx,edx
c00096d4:	83 ec 4c             	sub    esp,0x4c
c00096d7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00096db:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00096de:	e8 a7 ff ff ff       	call   c000968a <int_to_fp>
c00096e3:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00096e6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00096ea:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00096ee:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c00096f2:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c00096f5:	99                   	cdq    
c00096f6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00096fe:	f7 fb                	idiv   ebx
c0009700:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009708:	89 da                	mov    edx,ebx
c000970a:	0f af d0             	imul   edx,eax
c000970d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009711:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009715:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009719:	29 c2                	sub    edx,eax
c000971b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000971e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009722:	83 c5 04             	add    ebp,0x4
c0009725:	e8 6e ff ff ff       	call   c0009698 <fp_to_double>
c000972a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000972e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009736:	e8 53 ff ff ff       	call   c000968e <fp_to_int>
c000973b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000973e:	52                   	push   edx
c000973f:	52                   	push   edx
c0009740:	51                   	push   ecx
c0009741:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009745:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009749:	e8 8a c0 01 00       	call   c00257d8 <__subsf3>
c000974e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009751:	e8 61 d7 01 00       	call   c0026eb7 <__extendsfdf2>
c0009756:	83 c4 10             	add    esp,0x10
c0009759:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000975d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009761:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009765:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009769:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000976d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009771:	e8 4a cd 01 00       	call   c00264c0 <__muldf3>
c0009776:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000977a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000977e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009781:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009785:	e8 2d d7 01 00       	call   c0026eb7 <__extendsfdf2>
c000978a:	83 c4 10             	add    esp,0x10
c000978d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009791:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009795:	52                   	push   edx
c0009796:	50                   	push   eax
c0009797:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000979b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000979f:	e8 9f c6 01 00       	call   c0025e43 <__adddf3>
c00097a4:	59                   	pop    ecx
c00097a5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00097a9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00097ad:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00097b3:	e8 ff d6 01 00       	call   c0026eb7 <__extendsfdf2>
c00097b8:	83 c4 10             	add    esp,0x10
c00097bb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097bf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097c3:	52                   	push   edx
c00097c4:	50                   	push   eax
c00097c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097c9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097cd:	e8 ee cc 01 00       	call   c00264c0 <__muldf3>
c00097d2:	83 c4 10             	add    esp,0x10
c00097d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00097d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00097dd:	52                   	push   edx
c00097de:	50                   	push   eax
c00097df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00097e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00097e7:	e8 57 c6 01 00       	call   c0025e43 <__adddf3>
c00097ec:	83 c4 10             	add    esp,0x10
c00097ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00097f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00097f7:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c00097fb:	0f 89 1d ff ff ff    	jns    c000971e <calc_output_single+0x52>
c0009801:	89 d9                	mov    ecx,ebx
c0009803:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009807:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000980b:	89 dd                	mov    ebp,ebx
c000980d:	29 c8                	sub    eax,ecx
c000980f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009817:	99                   	cdq    
c0009818:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009820:	f7 fb                	idiv   ebx
c0009822:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009826:	0f af e8             	imul   ebp,eax
c0009829:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c000982d:	01 cd                	add    ebp,ecx
c000982f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009832:	89 e8                	mov    eax,ebp
c0009834:	83 ee 04             	sub    esi,0x4
c0009837:	e8 5c fe ff ff       	call   c0009698 <fp_to_double>
c000983c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009840:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009844:	89 e8                	mov    eax,ebp
c0009846:	29 dd                	sub    ebp,ebx
c0009848:	e8 41 fe ff ff       	call   c000968e <fp_to_int>
c000984d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009850:	52                   	push   edx
c0009851:	52                   	push   edx
c0009852:	51                   	push   ecx
c0009853:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009857:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000985b:	e8 78 bf 01 00       	call   c00257d8 <__subsf3>
c0009860:	89 04 24             	mov    DWORD PTR [esp],eax
c0009863:	e8 4f d6 01 00       	call   c0026eb7 <__extendsfdf2>
c0009868:	83 c4 10             	add    esp,0x10
c000986b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000986f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009873:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009877:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000987b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000987f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009883:	e8 38 cc 01 00       	call   c00264c0 <__muldf3>
c0009888:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000988c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009890:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009893:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009897:	e8 1b d6 01 00       	call   c0026eb7 <__extendsfdf2>
c000989c:	83 c4 10             	add    esp,0x10
c000989f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098a3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098a7:	52                   	push   edx
c00098a8:	50                   	push   eax
c00098a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098b1:	e8 8d c5 01 00       	call   c0025e43 <__adddf3>
c00098b6:	59                   	pop    ecx
c00098b7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00098bb:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00098bf:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c00098c5:	e8 ed d5 01 00       	call   c0026eb7 <__extendsfdf2>
c00098ca:	83 c4 10             	add    esp,0x10
c00098cd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098d1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098d5:	52                   	push   edx
c00098d6:	50                   	push   eax
c00098d7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098db:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098df:	e8 dc cb 01 00       	call   c00264c0 <__muldf3>
c00098e4:	83 c4 10             	add    esp,0x10
c00098e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00098eb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00098ef:	52                   	push   edx
c00098f0:	50                   	push   eax
c00098f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098f9:	e8 45 c5 01 00       	call   c0025e43 <__adddf3>
c00098fe:	83 c4 10             	add    esp,0x10
c0009901:	85 ed                	test   ebp,ebp
c0009903:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009907:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000990b:	0f 8f 21 ff ff ff    	jg     c0009832 <calc_output_single+0x166>
c0009911:	52                   	push   edx
c0009912:	50                   	push   eax
c0009913:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009917:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000991b:	e8 23 c5 01 00       	call   c0025e43 <__adddf3>
c0009920:	83 c4 5c             	add    esp,0x5c
c0009923:	5b                   	pop    ebx
c0009924:	5e                   	pop    esi
c0009925:	5f                   	pop    edi
c0009926:	5d                   	pop    ebp
c0009927:	c3                   	ret    

c0009928 <calc_output_stereo>:
c0009928:	55                   	push   ebp
c0009929:	89 cd                	mov    ebp,ecx
c000992b:	57                   	push   edi
c000992c:	56                   	push   esi
c000992d:	53                   	push   ebx
c000992e:	89 c3                	mov    ebx,eax
c0009930:	83 ec 6c             	sub    esp,0x6c
c0009933:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009937:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000993e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009945:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009949:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000994d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009950:	e8 35 fd ff ff       	call   c000968a <int_to_fp>
c0009955:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000995d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009961:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009969:	29 c8                	sub    eax,ecx
c000996b:	99                   	cdq    
c000996c:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009970:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009974:	0f af d0             	imul   edx,eax
c0009977:	8d 34 0a             	lea    esi,[edx+ecx*1]
c000997a:	31 d2                	xor    edx,edx
c000997c:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009980:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009984:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009987:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000998b:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c000998e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009992:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009996:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009999:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000999e:	29 c1                	sub    ecx,eax
c00099a0:	31 c0                	xor    eax,eax
c00099a2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c00099a5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00099a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099ad:	83 c7 08             	add    edi,0x8
c00099b0:	e8 e3 fc ff ff       	call   c0009698 <fp_to_double>
c00099b5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00099b9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00099bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099c1:	e8 c8 fc ff ff       	call   c000968e <fp_to_int>
c00099c6:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c00099c9:	52                   	push   edx
c00099ca:	52                   	push   edx
c00099cb:	51                   	push   ecx
c00099cc:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c00099d0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c00099d4:	e8 ff bd 01 00       	call   c00257d8 <__subsf3>
c00099d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00099dc:	e8 d6 d4 01 00       	call   c0026eb7 <__extendsfdf2>
c00099e1:	83 c4 10             	add    esp,0x10
c00099e4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00099e8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c00099ec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00099f0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00099f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00099f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00099fc:	e8 bf ca 01 00       	call   c00264c0 <__muldf3>
c0009a01:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009a05:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009a09:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009a0c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009a10:	e8 a2 d4 01 00       	call   c0026eb7 <__extendsfdf2>
c0009a15:	83 c4 10             	add    esp,0x10
c0009a18:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a1c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a20:	52                   	push   edx
c0009a21:	50                   	push   eax
c0009a22:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a26:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a2a:	e8 14 c4 01 00       	call   c0025e43 <__adddf3>
c0009a2f:	59                   	pop    ecx
c0009a30:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009a34:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009a38:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009a3e:	e8 74 d4 01 00       	call   c0026eb7 <__extendsfdf2>
c0009a43:	83 c4 10             	add    esp,0x10
c0009a46:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a4a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a4e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a52:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a56:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a5a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a5e:	e8 5d ca 01 00       	call   c00264c0 <__muldf3>
c0009a63:	83 c4 10             	add    esp,0x10
c0009a66:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a6a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a6e:	52                   	push   edx
c0009a6f:	50                   	push   eax
c0009a70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a78:	e8 c6 c3 01 00       	call   c0025e43 <__adddf3>
c0009a7d:	59                   	pop    ecx
c0009a7e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009a82:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009a86:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009a8c:	e8 26 d4 01 00       	call   c0026eb7 <__extendsfdf2>
c0009a91:	83 c4 10             	add    esp,0x10
c0009a94:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a98:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a9c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009aa0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009aa4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009aa8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009aac:	e8 0f ca 01 00       	call   c00264c0 <__muldf3>
c0009ab1:	83 c4 10             	add    esp,0x10
c0009ab4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009ab8:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009abc:	52                   	push   edx
c0009abd:	50                   	push   eax
c0009abe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ac2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ac6:	e8 78 c3 01 00       	call   c0025e43 <__adddf3>
c0009acb:	83 c4 10             	add    esp,0x10
c0009ace:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ad2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ad6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ada:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009ade:	0f 89 c5 fe ff ff    	jns    c00099a9 <calc_output_stereo+0x81>
c0009ae4:	29 e9                	sub    ecx,ebp
c0009ae6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009aea:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009aee:	29 c8                	sub    eax,ecx
c0009af0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009af8:	99                   	cdq    
c0009af9:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009afd:	31 d2                	xor    edx,edx
c0009aff:	0f af f8             	imul   edi,eax
c0009b02:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b06:	40                   	inc    eax
c0009b07:	01 cf                	add    edi,ecx
c0009b09:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009b0e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009b12:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009b1a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009b1d:	31 c0                	xor    eax,eax
c0009b1f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b23:	89 f8                	mov    eax,edi
c0009b25:	83 eb 08             	sub    ebx,0x8
c0009b28:	e8 6b fb ff ff       	call   c0009698 <fp_to_double>
c0009b2d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009b31:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009b35:	89 f8                	mov    eax,edi
c0009b37:	e8 52 fb ff ff       	call   c000968e <fp_to_int>
c0009b3c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009b3f:	52                   	push   edx
c0009b40:	52                   	push   edx
c0009b41:	55                   	push   ebp
c0009b42:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009b46:	e8 8d bc 01 00       	call   c00257d8 <__subsf3>
c0009b4b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b4e:	e8 64 d3 01 00       	call   c0026eb7 <__extendsfdf2>
c0009b53:	83 c4 10             	add    esp,0x10
c0009b56:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b5a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009b5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b62:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009b6a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009b6e:	e8 4d c9 01 00       	call   c00264c0 <__muldf3>
c0009b73:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009b76:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b7a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b7e:	e8 34 d3 01 00       	call   c0026eb7 <__extendsfdf2>
c0009b83:	83 c4 10             	add    esp,0x10
c0009b86:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b8a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009b8e:	52                   	push   edx
c0009b8f:	50                   	push   eax
c0009b90:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009b94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009b98:	e8 a6 c2 01 00       	call   c0025e43 <__adddf3>
c0009b9d:	59                   	pop    ecx
c0009b9e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009ba2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009ba6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009bac:	e8 06 d3 01 00       	call   c0026eb7 <__extendsfdf2>
c0009bb1:	83 c4 10             	add    esp,0x10
c0009bb4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bbc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bc0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bc4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bc8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bcc:	e8 ef c8 01 00       	call   c00264c0 <__muldf3>
c0009bd1:	83 c4 10             	add    esp,0x10
c0009bd4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bd8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bdc:	52                   	push   edx
c0009bdd:	50                   	push   eax
c0009bde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009be2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009be6:	e8 58 c2 01 00       	call   c0025e43 <__adddf3>
c0009beb:	5d                   	pop    ebp
c0009bec:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009bf0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009bf4:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009bfa:	e8 b8 d2 01 00       	call   c0026eb7 <__extendsfdf2>
c0009bff:	83 c4 10             	add    esp,0x10
c0009c02:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c06:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c0a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c0e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c12:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c16:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c1a:	e8 a1 c8 01 00       	call   c00264c0 <__muldf3>
c0009c1f:	83 c4 10             	add    esp,0x10
c0009c22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009c26:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009c2a:	52                   	push   edx
c0009c2b:	50                   	push   eax
c0009c2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c30:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c34:	e8 0a c2 01 00       	call   c0025e43 <__adddf3>
c0009c39:	83 c4 10             	add    esp,0x10
c0009c3c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009c40:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009c44:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009c48:	85 ff                	test   edi,edi
c0009c4a:	0f 8f d3 fe ff ff    	jg     c0009b23 <calc_output_stereo+0x1fb>
c0009c50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c60:	e8 de c1 01 00       	call   c0025e43 <__adddf3>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c6c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009c70:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c74:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c80:	e8 3b c8 01 00       	call   c00264c0 <__muldf3>
c0009c85:	59                   	pop    ecx
c0009c86:	5b                   	pop    ebx
c0009c87:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009c8b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c97:	e8 f7 d0 01 00       	call   c0026d93 <__truncdfsf2>
c0009c9c:	83 c4 10             	add    esp,0x10
c0009c9f:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ca6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ca8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cb0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cb8:	e8 86 c1 01 00       	call   c0025e43 <__adddf3>
c0009cbd:	83 c4 10             	add    esp,0x10
c0009cc0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009cc4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009cc8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ccc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cd4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cd8:	e8 e3 c7 01 00       	call   c00264c0 <__muldf3>
c0009cdd:	5e                   	pop    esi
c0009cde:	5f                   	pop    edi
c0009cdf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ce3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ceb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cef:	e8 9f d0 01 00       	call   c0026d93 <__truncdfsf2>
c0009cf4:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009cfb:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009cfe:	83 c4 7c             	add    esp,0x7c
c0009d01:	5b                   	pop    ebx
c0009d02:	5e                   	pop    esi
c0009d03:	5f                   	pop    edi
c0009d04:	5d                   	pop    ebp
c0009d05:	c3                   	ret    

c0009d06 <calc_output_quad>:
c0009d06:	55                   	push   ebp
c0009d07:	57                   	push   edi
c0009d08:	56                   	push   esi
c0009d09:	89 c6                	mov    esi,eax
c0009d0b:	53                   	push   ebx
c0009d0c:	83 ec 7c             	sub    esp,0x7c
c0009d0f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d13:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009d17:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009d1e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009d25:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d29:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d2d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009d30:	e8 55 f9 ff ff       	call   c000968a <int_to_fp>
c0009d35:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009d38:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009d3b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009d3f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009d43:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009d47:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009d4b:	99                   	cdq    
c0009d4c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009d50:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d54:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009d57:	31 d2                	xor    edx,edx
c0009d59:	0f af d8             	imul   ebx,eax
c0009d5c:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009d64:	0f af c7             	imul   eax,edi
c0009d67:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009d6b:	29 c1                	sub    ecx,eax
c0009d6d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009d75:	31 c0                	xor    eax,eax
c0009d77:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009d7a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d7e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d82:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d86:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d8a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d8e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d92:	89 d8                	mov    eax,ebx
c0009d94:	83 c7 10             	add    edi,0x10
c0009d97:	e8 fc f8 ff ff       	call   c0009698 <fp_to_double>
c0009d9c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009da0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009da4:	89 d8                	mov    eax,ebx
c0009da6:	e8 e3 f8 ff ff       	call   c000968e <fp_to_int>
c0009dab:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009daf:	52                   	push   edx
c0009db0:	52                   	push   edx
c0009db1:	51                   	push   ecx
c0009db2:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009db6:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009dba:	e8 19 ba 01 00       	call   c00257d8 <__subsf3>
c0009dbf:	89 04 24             	mov    DWORD PTR [esp],eax
c0009dc2:	e8 f0 d0 01 00       	call   c0026eb7 <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009dce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009dd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dda:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009dde:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009de2:	e8 d9 c6 01 00       	call   c00264c0 <__muldf3>
c0009de7:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0009deb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009def:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009df2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009df6:	e8 bc d0 01 00       	call   c0026eb7 <__extendsfdf2>
c0009dfb:	83 c4 10             	add    esp,0x10
c0009dfe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e02:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e06:	52                   	push   edx
c0009e07:	50                   	push   eax
c0009e08:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e0c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e10:	e8 2e c0 01 00       	call   c0025e43 <__adddf3>
c0009e15:	59                   	pop    ecx
c0009e16:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e1a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e1e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c0009e24:	e8 8e d0 01 00       	call   c0026eb7 <__extendsfdf2>
c0009e29:	83 c4 10             	add    esp,0x10
c0009e2c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e30:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e3c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e40:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e44:	e8 77 c6 01 00       	call   c00264c0 <__muldf3>
c0009e49:	83 c4 10             	add    esp,0x10
c0009e4c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e50:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e54:	52                   	push   edx
c0009e55:	50                   	push   eax
c0009e56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e5e:	e8 e0 bf 01 00       	call   c0025e43 <__adddf3>
c0009e63:	59                   	pop    ecx
c0009e64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009e68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009e6c:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c0009e72:	e8 40 d0 01 00       	call   c0026eb7 <__extendsfdf2>
c0009e77:	83 c4 10             	add    esp,0x10
c0009e7a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e7e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e8a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e8e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e92:	e8 29 c6 01 00       	call   c00264c0 <__muldf3>
c0009e97:	83 c4 10             	add    esp,0x10
c0009e9a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e9e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ea2:	52                   	push   edx
c0009ea3:	50                   	push   eax
c0009ea4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ea8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009eac:	e8 92 bf 01 00       	call   c0025e43 <__adddf3>
c0009eb1:	59                   	pop    ecx
c0009eb2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009eb6:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0009eba:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009ec0:	e8 f2 cf 01 00       	call   c0026eb7 <__extendsfdf2>
c0009ec5:	83 c4 10             	add    esp,0x10
c0009ec8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009ecc:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ed0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ed4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ed8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009edc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ee0:	e8 db c5 01 00       	call   c00264c0 <__muldf3>
c0009ee5:	83 c4 10             	add    esp,0x10
c0009ee8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009eec:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ef0:	52                   	push   edx
c0009ef1:	50                   	push   eax
c0009ef2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009ef6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009efa:	e8 44 bf 01 00       	call   c0025e43 <__adddf3>
c0009eff:	59                   	pop    ecx
c0009f00:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009f04:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009f08:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009f0e:	e8 a4 cf 01 00       	call   c0026eb7 <__extendsfdf2>
c0009f13:	83 c4 10             	add    esp,0x10
c0009f16:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f1a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f26:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f2a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f2e:	e8 8d c5 01 00       	call   c00264c0 <__muldf3>
c0009f33:	83 c4 10             	add    esp,0x10
c0009f36:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f3a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009f3e:	52                   	push   edx
c0009f3f:	50                   	push   eax
c0009f40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f44:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f48:	e8 f6 be 01 00       	call   c0025e43 <__adddf3>
c0009f4d:	83 c4 10             	add    esp,0x10
c0009f50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009f54:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009f58:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c0009f5c:	0f 89 30 fe ff ff    	jns    c0009d92 <calc_output_quad+0x8c>
c0009f62:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0009f66:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009f6a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f6e:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0009f72:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0009f7a:	29 c8                	sub    eax,ecx
c0009f7c:	99                   	cdq    
c0009f7d:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f81:	31 d2                	xor    edx,edx
c0009f83:	0f af d8             	imul   ebx,eax
c0009f86:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009f8a:	40                   	inc    eax
c0009f8b:	01 cb                	add    ebx,ecx
c0009f8d:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0009f92:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009f96:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c0009f9a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009f9e:	8d 34 86             	lea    esi,[esi+eax*4]
c0009fa1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0009fa9:	31 c0                	xor    eax,eax
c0009fab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009faf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009fb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009fb7:	89 d8                	mov    eax,ebx
c0009fb9:	83 ee 10             	sub    esi,0x10
c0009fbc:	e8 d7 f6 ff ff       	call   c0009698 <fp_to_double>
c0009fc1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fc5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fc9:	89 d8                	mov    eax,ebx
c0009fcb:	e8 be f6 ff ff       	call   c000968e <fp_to_int>
c0009fd0:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c0009fd4:	52                   	push   edx
c0009fd5:	52                   	push   edx
c0009fd6:	57                   	push   edi
c0009fd7:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fdb:	e8 f8 b7 01 00       	call   c00257d8 <__subsf3>
c0009fe0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fe3:	e8 cf ce 01 00       	call   c0026eb7 <__extendsfdf2>
c0009fe8:	83 c4 10             	add    esp,0x10
c0009feb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fef:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ff3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ffb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009fff:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a003:	e8 b8 c4 01 00       	call   c00264c0 <__muldf3>
c000a008:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a00b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a00f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a013:	e8 9f ce 01 00       	call   c0026eb7 <__extendsfdf2>
c000a018:	83 c4 10             	add    esp,0x10
c000a01b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a023:	52                   	push   edx
c000a024:	50                   	push   eax
c000a025:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a029:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a02d:	e8 11 be 01 00       	call   c0025e43 <__adddf3>
c000a032:	59                   	pop    ecx
c000a033:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a037:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a03b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a041:	e8 71 ce 01 00       	call   c0026eb7 <__extendsfdf2>
c000a046:	83 c4 10             	add    esp,0x10
c000a049:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a04d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a051:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a055:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a059:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a061:	e8 5a c4 01 00       	call   c00264c0 <__muldf3>
c000a066:	83 c4 10             	add    esp,0x10
c000a069:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a06d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a071:	52                   	push   edx
c000a072:	50                   	push   eax
c000a073:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a077:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a07b:	e8 c3 bd 01 00       	call   c0025e43 <__adddf3>
c000a080:	5f                   	pop    edi
c000a081:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a085:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a089:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a08f:	e8 23 ce 01 00       	call   c0026eb7 <__extendsfdf2>
c000a094:	83 c4 10             	add    esp,0x10
c000a097:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a09b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a09f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0ab:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0af:	e8 0c c4 01 00       	call   c00264c0 <__muldf3>
c000a0b4:	83 c4 10             	add    esp,0x10
c000a0b7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0bb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0bf:	52                   	push   edx
c000a0c0:	50                   	push   eax
c000a0c1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0c5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0c9:	e8 75 bd 01 00       	call   c0025e43 <__adddf3>
c000a0ce:	59                   	pop    ecx
c000a0cf:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a0d3:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a0d7:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a0dd:	e8 d5 cd 01 00       	call   c0026eb7 <__extendsfdf2>
c000a0e2:	83 c4 10             	add    esp,0x10
c000a0e5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0f5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0fd:	e8 be c3 01 00       	call   c00264c0 <__muldf3>
c000a102:	83 c4 10             	add    esp,0x10
c000a105:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a109:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a10d:	52                   	push   edx
c000a10e:	50                   	push   eax
c000a10f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a113:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a117:	e8 27 bd 01 00       	call   c0025e43 <__adddf3>
c000a11c:	5f                   	pop    edi
c000a11d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a121:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a125:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a12b:	e8 87 cd 01 00       	call   c0026eb7 <__extendsfdf2>
c000a130:	83 c4 10             	add    esp,0x10
c000a133:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a137:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a13b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a143:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a147:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a14b:	e8 70 c3 01 00       	call   c00264c0 <__muldf3>
c000a150:	83 c4 10             	add    esp,0x10
c000a153:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a157:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a15b:	52                   	push   edx
c000a15c:	50                   	push   eax
c000a15d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a161:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a165:	e8 d9 bc 01 00       	call   c0025e43 <__adddf3>
c000a16a:	83 c4 10             	add    esp,0x10
c000a16d:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a171:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a175:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a179:	85 db                	test   ebx,ebx
c000a17b:	0f 8f 36 fe ff ff    	jg     c0009fb7 <calc_output_quad+0x2b1>
c000a181:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a185:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a189:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a18d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a191:	e8 ad bc 01 00       	call   c0025e43 <__adddf3>
c000a196:	83 c4 10             	add    esp,0x10
c000a199:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a19d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a1a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1b1:	e8 0a c3 01 00       	call   c00264c0 <__muldf3>
c000a1b6:	59                   	pop    ecx
c000a1b7:	5b                   	pop    ebx
c000a1b8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a1bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a1c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1c8:	e8 c6 cb 01 00       	call   c0026d93 <__truncdfsf2>
c000a1cd:	83 c4 10             	add    esp,0x10
c000a1d0:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a1d7:	89 06                	mov    DWORD PTR [esi],eax
c000a1d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a1dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a1e1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a1e5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a1e9:	e8 55 bc 01 00       	call   c0025e43 <__adddf3>
c000a1ee:	83 c4 10             	add    esp,0x10
c000a1f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a1f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a1f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a201:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a205:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a209:	e8 b2 c2 01 00       	call   c00264c0 <__muldf3>
c000a20e:	5e                   	pop    esi
c000a20f:	5f                   	pop    edi
c000a210:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a214:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a21c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a220:	e8 6e cb 01 00       	call   c0026d93 <__truncdfsf2>
c000a225:	83 c4 10             	add    esp,0x10
c000a228:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a22f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a232:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a236:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a23a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a23e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a242:	e8 fc bb 01 00       	call   c0025e43 <__adddf3>
c000a247:	83 c4 10             	add    esp,0x10
c000a24a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a24e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a252:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a256:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a25a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a25e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a262:	e8 59 c2 01 00       	call   c00264c0 <__muldf3>
c000a267:	5d                   	pop    ebp
c000a268:	59                   	pop    ecx
c000a269:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a26d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a271:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a275:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a279:	e8 15 cb 01 00       	call   c0026d93 <__truncdfsf2>
c000a27e:	83 c4 10             	add    esp,0x10
c000a281:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a288:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a28b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a28f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a293:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a297:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a29b:	e8 a3 bb 01 00       	call   c0025e43 <__adddf3>
c000a2a0:	83 c4 10             	add    esp,0x10
c000a2a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a2a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a2ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2bb:	e8 00 c2 01 00       	call   c00264c0 <__muldf3>
c000a2c0:	5b                   	pop    ebx
c000a2c1:	5e                   	pop    esi
c000a2c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a2c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a2ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2d2:	e8 bc ca 01 00       	call   c0026d93 <__truncdfsf2>
c000a2d7:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a2de:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a2e1:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a2e7:	5b                   	pop    ebx
c000a2e8:	5e                   	pop    esi
c000a2e9:	5f                   	pop    edi
c000a2ea:	5d                   	pop    ebp
c000a2eb:	c3                   	ret    

c000a2ec <calc_output_hex>:
c000a2ec:	55                   	push   ebp
c000a2ed:	89 cd                	mov    ebp,ecx
c000a2ef:	57                   	push   edi
c000a2f0:	56                   	push   esi
c000a2f1:	53                   	push   ebx
c000a2f2:	89 c3                	mov    ebx,eax
c000a2f4:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a2fa:	89 14 24             	mov    DWORD PTR [esp],edx
c000a2fd:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a304:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a30b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a30f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a313:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a316:	e8 6f f3 ff ff       	call   c000968a <int_to_fp>
c000a31b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a31e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a322:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a325:	29 c8                	sub    eax,ecx
c000a327:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a32b:	99                   	cdq    
c000a32c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a334:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a337:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a33f:	0f af f8             	imul   edi,eax
c000a342:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a345:	01 cf                	add    edi,ecx
c000a347:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a34b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a34e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a352:	0f af c2             	imul   eax,edx
c000a355:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a359:	29 c1                	sub    ecx,eax
c000a35b:	31 d2                	xor    edx,edx
c000a35d:	31 c0                	xor    eax,eax
c000a35f:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a362:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a366:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a36a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a36e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a372:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a376:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a37a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a37e:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a382:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a386:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a38a:	89 f8                	mov    eax,edi
c000a38c:	e8 07 f3 ff ff       	call   c0009698 <fp_to_double>
c000a391:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a395:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a399:	89 f8                	mov    eax,edi
c000a39b:	e8 ee f2 ff ff       	call   c000968e <fp_to_int>
c000a3a0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a3a4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a3a7:	52                   	push   edx
c000a3a8:	52                   	push   edx
c000a3a9:	51                   	push   ecx
c000a3aa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a3ae:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a3b5:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a3b9:	e8 1a b4 01 00       	call   c00257d8 <__subsf3>
c000a3be:	89 04 24             	mov    DWORD PTR [esp],eax
c000a3c1:	e8 f1 ca 01 00       	call   c0026eb7 <__extendsfdf2>
c000a3c6:	83 c4 10             	add    esp,0x10
c000a3c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a3cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a3d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3e1:	e8 da c0 01 00       	call   c00264c0 <__muldf3>
c000a3e6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a3ea:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a3ee:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a3f1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a3f5:	e8 bd ca 01 00       	call   c0026eb7 <__extendsfdf2>
c000a3fa:	83 c4 10             	add    esp,0x10
c000a3fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a401:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a405:	52                   	push   edx
c000a406:	50                   	push   eax
c000a407:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a40b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a40f:	e8 2f ba 01 00       	call   c0025e43 <__adddf3>
c000a414:	59                   	pop    ecx
c000a415:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a419:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a41d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a423:	e8 8f ca 01 00       	call   c0026eb7 <__extendsfdf2>
c000a428:	83 c4 10             	add    esp,0x10
c000a42b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a42f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a433:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a437:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a43b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a43f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a443:	e8 78 c0 01 00       	call   c00264c0 <__muldf3>
c000a448:	83 c4 10             	add    esp,0x10
c000a44b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a44f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a453:	52                   	push   edx
c000a454:	50                   	push   eax
c000a455:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a459:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a45d:	e8 e1 b9 01 00       	call   c0025e43 <__adddf3>
c000a462:	59                   	pop    ecx
c000a463:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a467:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a46b:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a471:	e8 41 ca 01 00       	call   c0026eb7 <__extendsfdf2>
c000a476:	83 c4 10             	add    esp,0x10
c000a479:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a47d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a481:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a485:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a489:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a48d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a491:	e8 2a c0 01 00       	call   c00264c0 <__muldf3>
c000a496:	83 c4 10             	add    esp,0x10
c000a499:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a49d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4a1:	52                   	push   edx
c000a4a2:	50                   	push   eax
c000a4a3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ab:	e8 93 b9 01 00       	call   c0025e43 <__adddf3>
c000a4b0:	59                   	pop    ecx
c000a4b1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a4b5:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a4b9:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a4bf:	e8 f3 c9 01 00       	call   c0026eb7 <__extendsfdf2>
c000a4c4:	83 c4 10             	add    esp,0x10
c000a4c7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4cb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4db:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4df:	e8 dc bf 01 00       	call   c00264c0 <__muldf3>
c000a4e4:	83 c4 10             	add    esp,0x10
c000a4e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4ef:	52                   	push   edx
c000a4f0:	50                   	push   eax
c000a4f1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a4f5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a4f9:	e8 45 b9 01 00       	call   c0025e43 <__adddf3>
c000a4fe:	59                   	pop    ecx
c000a4ff:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a503:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a507:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a50d:	e8 a5 c9 01 00       	call   c0026eb7 <__extendsfdf2>
c000a512:	83 c4 10             	add    esp,0x10
c000a515:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a519:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a51d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a521:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a525:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a529:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a52d:	e8 8e bf 01 00       	call   c00264c0 <__muldf3>
c000a532:	83 c4 10             	add    esp,0x10
c000a535:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a539:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a53d:	52                   	push   edx
c000a53e:	50                   	push   eax
c000a53f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a543:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a547:	e8 f7 b8 01 00       	call   c0025e43 <__adddf3>
c000a54c:	59                   	pop    ecx
c000a54d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a551:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a555:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a55b:	e8 57 c9 01 00       	call   c0026eb7 <__extendsfdf2>
c000a560:	83 c4 10             	add    esp,0x10
c000a563:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a567:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a573:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a577:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a57b:	e8 40 bf 01 00       	call   c00264c0 <__muldf3>
c000a580:	83 c4 10             	add    esp,0x10
c000a583:	83 c6 18             	add    esi,0x18
c000a586:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a58a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a58e:	52                   	push   edx
c000a58f:	50                   	push   eax
c000a590:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a594:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a598:	e8 a6 b8 01 00       	call   c0025e43 <__adddf3>
c000a59d:	59                   	pop    ecx
c000a59e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a5a2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a5a6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a5ac:	e8 06 c9 01 00       	call   c0026eb7 <__extendsfdf2>
c000a5b1:	83 c4 10             	add    esp,0x10
c000a5b4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5b8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5c4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5c8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5cc:	e8 ef be 01 00       	call   c00264c0 <__muldf3>
c000a5d1:	83 c4 10             	add    esp,0x10
c000a5d4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5d8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5dc:	52                   	push   edx
c000a5dd:	50                   	push   eax
c000a5de:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a5e2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a5e6:	e8 58 b8 01 00       	call   c0025e43 <__adddf3>
c000a5eb:	83 c4 10             	add    esp,0x10
c000a5ee:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a5f2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a5f6:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a5f9:	0f 89 8b fd ff ff    	jns    c000a38a <calc_output_hex+0x9e>
c000a5ff:	31 f6                	xor    esi,esi
c000a601:	31 ff                	xor    edi,edi
c000a603:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a607:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a60a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a60e:	29 e9                	sub    ecx,ebp
c000a610:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a614:	29 c8                	sub    eax,ecx
c000a616:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a619:	99                   	cdq    
c000a61a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a61e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a621:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a625:	0f af e8             	imul   ebp,eax
c000a628:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a62c:	40                   	inc    eax
c000a62d:	01 cd                	add    ebp,ecx
c000a62f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a634:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a638:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a63c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a640:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a643:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a647:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a64b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a64f:	89 e8                	mov    eax,ebp
c000a651:	e8 42 f0 ff ff       	call   c0009698 <fp_to_double>
c000a656:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a65a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a65e:	89 e8                	mov    eax,ebp
c000a660:	e8 29 f0 ff ff       	call   c000968e <fp_to_int>
c000a665:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a669:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a66c:	52                   	push   edx
c000a66d:	52                   	push   edx
c000a66e:	51                   	push   ecx
c000a66f:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a676:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a67d:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a681:	e8 52 b1 01 00       	call   c00257d8 <__subsf3>
c000a686:	89 04 24             	mov    DWORD PTR [esp],eax
c000a689:	e8 29 c8 01 00       	call   c0026eb7 <__extendsfdf2>
c000a68e:	83 c4 10             	add    esp,0x10
c000a691:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a695:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a699:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6a1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6a5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6a9:	e8 12 be 01 00       	call   c00264c0 <__muldf3>
c000a6ae:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a6b5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a6b9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a6bc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a6c0:	e8 f2 c7 01 00       	call   c0026eb7 <__extendsfdf2>
c000a6c5:	83 c4 10             	add    esp,0x10
c000a6c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6d0:	52                   	push   edx
c000a6d1:	50                   	push   eax
c000a6d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6da:	e8 64 b7 01 00       	call   c0025e43 <__adddf3>
c000a6df:	59                   	pop    ecx
c000a6e0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a6e4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a6e8:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a6ee:	e8 c4 c7 01 00       	call   c0026eb7 <__extendsfdf2>
c000a6f3:	83 c4 10             	add    esp,0x10
c000a6f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a702:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a706:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a70a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a70e:	e8 ad bd 01 00       	call   c00264c0 <__muldf3>
c000a713:	83 c4 10             	add    esp,0x10
c000a716:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a71a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a71e:	52                   	push   edx
c000a71f:	50                   	push   eax
c000a720:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a724:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a728:	e8 16 b7 01 00       	call   c0025e43 <__adddf3>
c000a72d:	59                   	pop    ecx
c000a72e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a732:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a736:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a73c:	e8 76 c7 01 00       	call   c0026eb7 <__extendsfdf2>
c000a741:	83 c4 10             	add    esp,0x10
c000a744:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a748:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a74c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a750:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a754:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a758:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a75c:	e8 5f bd 01 00       	call   c00264c0 <__muldf3>
c000a761:	83 c4 10             	add    esp,0x10
c000a764:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a768:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a76c:	52                   	push   edx
c000a76d:	50                   	push   eax
c000a76e:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a772:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a776:	e8 c8 b6 01 00       	call   c0025e43 <__adddf3>
c000a77b:	59                   	pop    ecx
c000a77c:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a780:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a784:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a78a:	e8 28 c7 01 00       	call   c0026eb7 <__extendsfdf2>
c000a78f:	83 c4 10             	add    esp,0x10
c000a792:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a796:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a79a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a79e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7a2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7a6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7aa:	e8 11 bd 01 00       	call   c00264c0 <__muldf3>
c000a7af:	83 c4 10             	add    esp,0x10
c000a7b2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7b6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7ba:	52                   	push   edx
c000a7bb:	50                   	push   eax
c000a7bc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c4:	e8 7a b6 01 00       	call   c0025e43 <__adddf3>
c000a7c9:	59                   	pop    ecx
c000a7ca:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a7ce:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a7d2:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a7d8:	e8 da c6 01 00       	call   c0026eb7 <__extendsfdf2>
c000a7dd:	83 c4 10             	add    esp,0x10
c000a7e0:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7e4:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7f0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7f4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7f8:	e8 c3 bc 01 00       	call   c00264c0 <__muldf3>
c000a7fd:	83 c4 10             	add    esp,0x10
c000a800:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a804:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a808:	52                   	push   edx
c000a809:	50                   	push   eax
c000a80a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a80e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a812:	e8 2c b6 01 00       	call   c0025e43 <__adddf3>
c000a817:	59                   	pop    ecx
c000a818:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a81c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a820:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000a826:	e8 8c c6 01 00       	call   c0026eb7 <__extendsfdf2>
c000a82b:	83 c4 10             	add    esp,0x10
c000a82e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a832:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a836:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a83a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a83e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a842:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a846:	e8 75 bc 01 00       	call   c00264c0 <__muldf3>
c000a84b:	83 c4 10             	add    esp,0x10
c000a84e:	83 eb 18             	sub    ebx,0x18
c000a851:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a855:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a859:	52                   	push   edx
c000a85a:	50                   	push   eax
c000a85b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a85f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a863:	e8 db b5 01 00       	call   c0025e43 <__adddf3>
c000a868:	59                   	pop    ecx
c000a869:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a86d:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000a871:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000a877:	e8 3b c6 01 00       	call   c0026eb7 <__extendsfdf2>
c000a87c:	83 c4 10             	add    esp,0x10
c000a87f:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a883:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a887:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a88b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a88f:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a893:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a897:	e8 24 bc 01 00       	call   c00264c0 <__muldf3>
c000a89c:	83 c4 10             	add    esp,0x10
c000a89f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8a3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8a7:	52                   	push   edx
c000a8a8:	50                   	push   eax
c000a8a9:	57                   	push   edi
c000a8aa:	56                   	push   esi
c000a8ab:	e8 93 b5 01 00       	call   c0025e43 <__adddf3>
c000a8b0:	83 c4 10             	add    esp,0x10
c000a8b3:	89 c6                	mov    esi,eax
c000a8b5:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000a8b8:	89 d7                	mov    edi,edx
c000a8ba:	85 ed                	test   ebp,ebp
c000a8bc:	0f 8f 8d fd ff ff    	jg     c000a64f <calc_output_hex+0x363>
c000a8c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8d2:	e8 6c b5 01 00       	call   c0025e43 <__adddf3>
c000a8d7:	83 c4 10             	add    esp,0x10
c000a8da:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8f1:	e8 ca bb 01 00       	call   c00264c0 <__muldf3>
c000a8f6:	59                   	pop    ecx
c000a8f7:	5b                   	pop    ebx
c000a8f8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a8fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a900:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a904:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a908:	e8 86 c4 01 00       	call   c0026d93 <__truncdfsf2>
c000a90d:	83 c4 10             	add    esp,0x10
c000a910:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a917:	89 03                	mov    DWORD PTR [ebx],eax
c000a919:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a91d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a921:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a925:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a929:	e8 15 b5 01 00       	call   c0025e43 <__adddf3>
c000a92e:	83 c4 10             	add    esp,0x10
c000a931:	89 04 24             	mov    DWORD PTR [esp],eax
c000a934:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a938:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a93c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a940:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a944:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a948:	e8 73 bb 01 00       	call   c00264c0 <__muldf3>
c000a94d:	5d                   	pop    ebp
c000a94e:	59                   	pop    ecx
c000a94f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a953:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a957:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a95b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a95f:	e8 2f c4 01 00       	call   c0026d93 <__truncdfsf2>
c000a964:	83 c4 10             	add    esp,0x10
c000a967:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a96e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a971:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a975:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a979:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a97d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a981:	e8 bd b4 01 00       	call   c0025e43 <__adddf3>
c000a986:	83 c4 10             	add    esp,0x10
c000a989:	89 04 24             	mov    DWORD PTR [esp],eax
c000a98c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a990:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a994:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a998:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a99c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9a0:	e8 1b bb 01 00       	call   c00264c0 <__muldf3>
c000a9a5:	5b                   	pop    ebx
c000a9a6:	5d                   	pop    ebp
c000a9a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a9ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9b7:	e8 d7 c3 01 00       	call   c0026d93 <__truncdfsf2>
c000a9bc:	83 c4 10             	add    esp,0x10
c000a9bf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a9c6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000a9c9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a9cd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a9d1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a9d5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a9d9:	e8 65 b4 01 00       	call   c0025e43 <__adddf3>
c000a9de:	83 c4 10             	add    esp,0x10
c000a9e1:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9e4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9e8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9ec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9f8:	e8 c3 ba 01 00       	call   c00264c0 <__muldf3>
c000a9fd:	59                   	pop    ecx
c000a9fe:	5b                   	pop    ebx
c000a9ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa03:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa07:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa0b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa0f:	e8 7f c3 01 00       	call   c0026d93 <__truncdfsf2>
c000aa14:	83 c4 10             	add    esp,0x10
c000aa17:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa1e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000aa21:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa25:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa29:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa2d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa31:	e8 0d b4 01 00       	call   c0025e43 <__adddf3>
c000aa36:	83 c4 10             	add    esp,0x10
c000aa39:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa48:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa50:	e8 6b ba 01 00       	call   c00264c0 <__muldf3>
c000aa55:	5d                   	pop    ebp
c000aa56:	59                   	pop    ecx
c000aa57:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa5f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa63:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa67:	e8 27 c3 01 00       	call   c0026d93 <__truncdfsf2>
c000aa6c:	83 c4 10             	add    esp,0x10
c000aa6f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa76:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aa79:	57                   	push   edi
c000aa7a:	56                   	push   esi
c000aa7b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa7f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa83:	e8 bb b3 01 00       	call   c0025e43 <__adddf3>
c000aa88:	83 c4 10             	add    esp,0x10
c000aa8b:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa8e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa92:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa96:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa9a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa9e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaa2:	e8 19 ba 01 00       	call   c00264c0 <__muldf3>
c000aaa7:	5b                   	pop    ebx
c000aaa8:	5e                   	pop    esi
c000aaa9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aaad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aab1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aab5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aab9:	e8 d5 c2 01 00       	call   c0026d93 <__truncdfsf2>
c000aabe:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000aac5:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000aac8:	81 c4 9c 00 00 00    	add    esp,0x9c
c000aace:	5b                   	pop    ebx
c000aacf:	5e                   	pop    esi
c000aad0:	5f                   	pop    edi
c000aad1:	5d                   	pop    ebp
c000aad2:	c3                   	ret    

c000aad3 <sinc_reset>:
c000aad3:	56                   	push   esi
c000aad4:	53                   	push   ebx
c000aad5:	51                   	push   ecx
c000aad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aada:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000aadd:	85 db                	test   ebx,ebx
c000aadf:	74 59                	je     c000ab3a <sinc_reset+0x67>
c000aae1:	31 d2                	xor    edx,edx
c000aae3:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000aaea:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000aaed:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000aaf0:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000aaf7:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000aafe:	31 c0                	xor    eax,eax
c000ab00:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ab06:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ab09:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ab0c:	52                   	push   edx
c000ab0d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab10:	c1 e0 02             	shl    eax,0x2
c000ab13:	50                   	push   eax
c000ab14:	6a 00                	push   0x0
c000ab16:	56                   	push   esi
c000ab17:	e8 6f 5b ff ff       	call   c000068b <memset>
c000ab1c:	83 c4 0c             	add    esp,0xc
c000ab1f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ab22:	c1 e0 02             	shl    eax,0x2
c000ab25:	50                   	push   eax
c000ab26:	68 aa 00 00 00       	push   0xaa
c000ab2b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab2e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ab31:	50                   	push   eax
c000ab32:	e8 54 5b ff ff       	call   c000068b <memset>
c000ab37:	83 c4 10             	add    esp,0x10
c000ab3a:	58                   	pop    eax
c000ab3b:	5b                   	pop    ebx
c000ab3c:	5e                   	pop    esi
c000ab3d:	c3                   	ret    

c000ab3e <calc_output_multi>:
c000ab3e:	55                   	push   ebp
c000ab3f:	57                   	push   edi
c000ab40:	56                   	push   esi
c000ab41:	89 c6                	mov    esi,eax
c000ab43:	53                   	push   ebx
c000ab44:	83 ec 4c             	sub    esp,0x4c
c000ab47:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ab4b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ab4f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ab53:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ab57:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ab5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ab5f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ab63:	8d 46 44             	lea    eax,[esi+0x44]
c000ab66:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab69:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ab6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ab73:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ab76:	e8 0f eb ff ff       	call   c000968a <int_to_fp>
c000ab7b:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ab7e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ab82:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ab86:	99                   	cdq    
c000ab87:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ab8b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ab8f:	0f af d0             	imul   edx,eax
c000ab92:	0f af c3             	imul   eax,ebx
c000ab95:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ab99:	29 c1                	sub    ecx,eax
c000ab9b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ab9f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000aba3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000abaa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000abae:	57                   	push   edi
c000abaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000abb3:	6a 00                	push   0x0
c000abb5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb9:	e8 cd 5a ff ff       	call   c000068b <memset>
c000abbe:	83 c4 10             	add    esp,0x10
c000abc1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abc5:	89 df                	mov    edi,ebx
c000abc7:	e8 cc ea ff ff       	call   c0009698 <fp_to_double>
c000abcc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000abd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000abd4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abd8:	e8 b1 ea ff ff       	call   c000968e <fp_to_int>
c000abdd:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000abe0:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000abe3:	51                   	push   ecx
c000abe4:	51                   	push   ecx
c000abe5:	55                   	push   ebp
c000abe6:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000abea:	e8 e9 ab 01 00       	call   c00257d8 <__subsf3>
c000abef:	89 04 24             	mov    DWORD PTR [esp],eax
c000abf2:	e8 c0 c2 01 00       	call   c0026eb7 <__extendsfdf2>
c000abf7:	83 c4 10             	add    esp,0x10
c000abfa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000abfe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac0a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac0e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac12:	e8 a9 b8 01 00       	call   c00264c0 <__muldf3>
c000ac17:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ac1a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ac1e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ac22:	e8 90 c2 01 00       	call   c0026eb7 <__extendsfdf2>
c000ac27:	83 c4 10             	add    esp,0x10
c000ac2a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac2e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac32:	52                   	push   edx
c000ac33:	50                   	push   eax
c000ac34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac3c:	e8 02 b2 01 00       	call   c0025e43 <__adddf3>
c000ac41:	83 c4 10             	add    esp,0x10
c000ac44:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac48:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ac4c:	89 f8                	mov    eax,edi
c000ac4e:	b9 08 00 00 00       	mov    ecx,0x8
c000ac53:	99                   	cdq    
c000ac54:	f7 f9                	idiv   ecx
c000ac56:	4a                   	dec    edx
c000ac57:	83 fa 06             	cmp    edx,0x6
c000ac5a:	77 07                	ja     c000ac63 <calc_output_multi+0x125>
c000ac5c:	ff 24 95 84 86 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd797c]
c000ac63:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ac66:	4f                   	dec    edi
c000ac67:	83 ec 0c             	sub    esp,0xc
c000ac6a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ac6d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac71:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ac78:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ac7c:	e8 36 c2 01 00       	call   c0026eb7 <__extendsfdf2>
c000ac81:	83 c4 10             	add    esp,0x10
c000ac84:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac88:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac90:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac9c:	e8 1f b8 01 00       	call   c00264c0 <__muldf3>
c000aca1:	83 c4 10             	add    esp,0x10
c000aca4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aca8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000acac:	52                   	push   edx
c000acad:	50                   	push   eax
c000acae:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000acb1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000acb4:	e8 8a b1 01 00       	call   c0025e43 <__adddf3>
c000acb9:	83 c4 10             	add    esp,0x10
c000acbc:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000acbf:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000acc2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000acc5:	4f                   	dec    edi
c000acc6:	83 ec 0c             	sub    esp,0xc
c000acc9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000accc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000acd0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000acd7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000acdb:	e8 d7 c1 01 00       	call   c0026eb7 <__extendsfdf2>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ace7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aceb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acf3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acf7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acfb:	e8 c0 b7 01 00       	call   c00264c0 <__muldf3>
c000ad00:	83 c4 10             	add    esp,0x10
c000ad03:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad07:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad0b:	52                   	push   edx
c000ad0c:	50                   	push   eax
c000ad0d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad10:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad13:	e8 2b b1 01 00       	call   c0025e43 <__adddf3>
c000ad18:	83 c4 10             	add    esp,0x10
c000ad1b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad1e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad21:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad24:	4f                   	dec    edi
c000ad25:	83 ec 0c             	sub    esp,0xc
c000ad28:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad2f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad36:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad3a:	e8 78 c1 01 00       	call   c0026eb7 <__extendsfdf2>
c000ad3f:	83 c4 10             	add    esp,0x10
c000ad42:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad46:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad52:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad56:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad5a:	e8 61 b7 01 00       	call   c00264c0 <__muldf3>
c000ad5f:	83 c4 10             	add    esp,0x10
c000ad62:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad66:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad6a:	52                   	push   edx
c000ad6b:	50                   	push   eax
c000ad6c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad6f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad72:	e8 cc b0 01 00       	call   c0025e43 <__adddf3>
c000ad77:	83 c4 10             	add    esp,0x10
c000ad7a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad7d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad80:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad83:	4f                   	dec    edi
c000ad84:	83 ec 0c             	sub    esp,0xc
c000ad87:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad8a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad8e:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad95:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad99:	e8 19 c1 01 00       	call   c0026eb7 <__extendsfdf2>
c000ad9e:	83 c4 10             	add    esp,0x10
c000ada1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ada5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ada9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adb1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adb5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adb9:	e8 02 b7 01 00       	call   c00264c0 <__muldf3>
c000adbe:	83 c4 10             	add    esp,0x10
c000adc1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adc5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000adc9:	52                   	push   edx
c000adca:	50                   	push   eax
c000adcb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000adce:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000add1:	e8 6d b0 01 00       	call   c0025e43 <__adddf3>
c000add6:	83 c4 10             	add    esp,0x10
c000add9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000addc:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000addf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ade2:	4f                   	dec    edi
c000ade3:	83 ec 0c             	sub    esp,0xc
c000ade6:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ade9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aded:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000adf4:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000adf8:	e8 ba c0 01 00       	call   c0026eb7 <__extendsfdf2>
c000adfd:	83 c4 10             	add    esp,0x10
c000ae00:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae04:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae10:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae18:	e8 a3 b6 01 00       	call   c00264c0 <__muldf3>
c000ae1d:	83 c4 10             	add    esp,0x10
c000ae20:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae24:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae28:	52                   	push   edx
c000ae29:	50                   	push   eax
c000ae2a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae2d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae30:	e8 0e b0 01 00       	call   c0025e43 <__adddf3>
c000ae35:	83 c4 10             	add    esp,0x10
c000ae38:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae3b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae3e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae41:	4f                   	dec    edi
c000ae42:	83 ec 0c             	sub    esp,0xc
c000ae45:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae48:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae4c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae53:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae57:	e8 5b c0 01 00       	call   c0026eb7 <__extendsfdf2>
c000ae5c:	83 c4 10             	add    esp,0x10
c000ae5f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae63:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae6f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae73:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae77:	e8 44 b6 01 00       	call   c00264c0 <__muldf3>
c000ae7c:	83 c4 10             	add    esp,0x10
c000ae7f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae83:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae87:	52                   	push   edx
c000ae88:	50                   	push   eax
c000ae89:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae8c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae8f:	e8 af af 01 00       	call   c0025e43 <__adddf3>
c000ae94:	83 c4 10             	add    esp,0x10
c000ae97:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae9a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae9d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aea0:	4f                   	dec    edi
c000aea1:	83 ec 0c             	sub    esp,0xc
c000aea4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aea7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aeab:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeb2:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aeb6:	e8 fc bf 01 00       	call   c0026eb7 <__extendsfdf2>
c000aebb:	83 c4 10             	add    esp,0x10
c000aebe:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aec2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aece:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aed2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aed6:	e8 e5 b5 01 00       	call   c00264c0 <__muldf3>
c000aedb:	83 c4 10             	add    esp,0x10
c000aede:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aee2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aee6:	52                   	push   edx
c000aee7:	50                   	push   eax
c000aee8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aeeb:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeee:	e8 50 af 01 00       	call   c0025e43 <__adddf3>
c000aef3:	83 c4 10             	add    esp,0x10
c000aef6:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aef9:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aefc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeff:	4f                   	dec    edi
c000af00:	83 ec 0c             	sub    esp,0xc
c000af03:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af06:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af0a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af11:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af15:	e8 9d bf 01 00       	call   c0026eb7 <__extendsfdf2>
c000af1a:	83 c4 10             	add    esp,0x10
c000af1d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af21:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af2d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af31:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af35:	e8 86 b5 01 00       	call   c00264c0 <__muldf3>
c000af3a:	83 c4 10             	add    esp,0x10
c000af3d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af41:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af45:	52                   	push   edx
c000af46:	50                   	push   eax
c000af47:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af4a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af4d:	e8 f1 ae 01 00       	call   c0025e43 <__adddf3>
c000af52:	83 c4 10             	add    esp,0x10
c000af55:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af58:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af5b:	85 ff                	test   edi,edi
c000af5d:	0f 8f e9 fc ff ff    	jg     c000ac4c <calc_output_multi+0x10e>
c000af63:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000af67:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000af6b:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000af6f:	0f 89 4c fc ff ff    	jns    c000abc1 <calc_output_multi+0x83>
c000af75:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000af79:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000af7d:	29 c8                	sub    eax,ecx
c000af7f:	99                   	cdq    
c000af80:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000af84:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000af88:	0f af d0             	imul   edx,eax
c000af8b:	40                   	inc    eax
c000af8c:	01 d1                	add    ecx,edx
c000af8e:	0f af c3             	imul   eax,ebx
c000af91:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000af95:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000af98:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000af9c:	55                   	push   ebp
c000af9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000afa1:	6a 00                	push   0x0
c000afa3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000afa7:	e8 df 56 ff ff       	call   c000068b <memset>
c000afac:	83 c4 10             	add    esp,0x10
c000afaf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afb3:	e8 e0 e6 ff ff       	call   c0009698 <fp_to_double>
c000afb8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000afbc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000afc0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afc4:	e8 c5 e6 ff ff       	call   c000968e <fp_to_int>
c000afc9:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000afcc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000afcf:	57                   	push   edi
c000afd0:	57                   	push   edi
c000afd1:	89 df                	mov    edi,ebx
c000afd3:	55                   	push   ebp
c000afd4:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000afd8:	e8 fb a7 01 00       	call   c00257d8 <__subsf3>
c000afdd:	89 04 24             	mov    DWORD PTR [esp],eax
c000afe0:	e8 d2 be 01 00       	call   c0026eb7 <__extendsfdf2>
c000afe5:	83 c4 10             	add    esp,0x10
c000afe8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000afec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000aff0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aff4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aff8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000affc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b000:	e8 bb b4 01 00       	call   c00264c0 <__muldf3>
c000b005:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b008:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b00c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b010:	e8 a2 be 01 00       	call   c0026eb7 <__extendsfdf2>
c000b015:	83 c4 10             	add    esp,0x10
c000b018:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b01c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b020:	52                   	push   edx
c000b021:	50                   	push   eax
c000b022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b02a:	e8 14 ae 01 00       	call   c0025e43 <__adddf3>
c000b02f:	83 c4 10             	add    esp,0x10
c000b032:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b036:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b03a:	89 f8                	mov    eax,edi
c000b03c:	b9 08 00 00 00       	mov    ecx,0x8
c000b041:	99                   	cdq    
c000b042:	f7 f9                	idiv   ecx
c000b044:	4a                   	dec    edx
c000b045:	83 fa 06             	cmp    edx,0x6
c000b048:	77 07                	ja     c000b051 <calc_output_multi+0x513>
c000b04a:	ff 24 95 a0 86 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd7960]
c000b051:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b055:	4f                   	dec    edi
c000b056:	83 ec 0c             	sub    esp,0xc
c000b059:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b060:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b067:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06b:	e8 47 be 01 00       	call   c0026eb7 <__extendsfdf2>
c000b070:	83 c4 10             	add    esp,0x10
c000b073:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b077:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b07b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b07f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b083:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b087:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b08b:	e8 30 b4 01 00       	call   c00264c0 <__muldf3>
c000b090:	83 c4 10             	add    esp,0x10
c000b093:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b097:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b09b:	52                   	push   edx
c000b09c:	50                   	push   eax
c000b09d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a3:	e8 9b ad 01 00       	call   c0025e43 <__adddf3>
c000b0a8:	83 c4 10             	add    esp,0x10
c000b0ab:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ae:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0b5:	4f                   	dec    edi
c000b0b6:	83 ec 0c             	sub    esp,0xc
c000b0b9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cb:	e8 e7 bd 01 00       	call   c0026eb7 <__extendsfdf2>
c000b0d0:	83 c4 10             	add    esp,0x10
c000b0d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0eb:	e8 d0 b3 01 00       	call   c00264c0 <__muldf3>
c000b0f0:	83 c4 10             	add    esp,0x10
c000b0f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0fb:	52                   	push   edx
c000b0fc:	50                   	push   eax
c000b0fd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b100:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b103:	e8 3b ad 01 00       	call   c0025e43 <__adddf3>
c000b108:	83 c4 10             	add    esp,0x10
c000b10b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b111:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 87 bd 01 00       	call   c0026eb7 <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b137:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b147:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b14b:	e8 70 b3 01 00       	call   c00264c0 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b157:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 db ac 01 00       	call   c0025e43 <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b175:	4f                   	dec    edi
c000b176:	83 ec 0c             	sub    esp,0xc
c000b179:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b17c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b180:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b187:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b18b:	e8 27 bd 01 00       	call   c0026eb7 <__extendsfdf2>
c000b190:	83 c4 10             	add    esp,0x10
c000b193:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b197:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b19b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b19f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1a3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1a7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1ab:	e8 10 b3 01 00       	call   c00264c0 <__muldf3>
c000b1b0:	83 c4 10             	add    esp,0x10
c000b1b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1bb:	52                   	push   edx
c000b1bc:	50                   	push   eax
c000b1bd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1c0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1c3:	e8 7b ac 01 00       	call   c0025e43 <__adddf3>
c000b1c8:	83 c4 10             	add    esp,0x10
c000b1cb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1ce:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1d5:	4f                   	dec    edi
c000b1d6:	83 ec 0c             	sub    esp,0xc
c000b1d9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b1dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1e0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b1e7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b1eb:	e8 c7 bc 01 00       	call   c0026eb7 <__extendsfdf2>
c000b1f0:	83 c4 10             	add    esp,0x10
c000b1f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b203:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b207:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b20b:	e8 b0 b2 01 00       	call   c00264c0 <__muldf3>
c000b210:	83 c4 10             	add    esp,0x10
c000b213:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b217:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b21b:	52                   	push   edx
c000b21c:	50                   	push   eax
c000b21d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b220:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b223:	e8 1b ac 01 00       	call   c0025e43 <__adddf3>
c000b228:	83 c4 10             	add    esp,0x10
c000b22b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b22e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b231:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b235:	4f                   	dec    edi
c000b236:	83 ec 0c             	sub    esp,0xc
c000b239:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b23c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b240:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b247:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b24b:	e8 67 bc 01 00       	call   c0026eb7 <__extendsfdf2>
c000b250:	83 c4 10             	add    esp,0x10
c000b253:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b257:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b25b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b25f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b263:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b267:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b26b:	e8 50 b2 01 00       	call   c00264c0 <__muldf3>
c000b270:	83 c4 10             	add    esp,0x10
c000b273:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b277:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b27b:	52                   	push   edx
c000b27c:	50                   	push   eax
c000b27d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b280:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b283:	e8 bb ab 01 00       	call   c0025e43 <__adddf3>
c000b288:	83 c4 10             	add    esp,0x10
c000b28b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b28e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b291:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b295:	4f                   	dec    edi
c000b296:	83 ec 0c             	sub    esp,0xc
c000b299:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b29c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2a0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2a7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2ab:	e8 07 bc 01 00       	call   c0026eb7 <__extendsfdf2>
c000b2b0:	83 c4 10             	add    esp,0x10
c000b2b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2cb:	e8 f0 b1 01 00       	call   c00264c0 <__muldf3>
c000b2d0:	83 c4 10             	add    esp,0x10
c000b2d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2db:	52                   	push   edx
c000b2dc:	50                   	push   eax
c000b2dd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2e0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2e3:	e8 5b ab 01 00       	call   c0025e43 <__adddf3>
c000b2e8:	83 c4 10             	add    esp,0x10
c000b2eb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2ee:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2f5:	4f                   	dec    edi
c000b2f6:	83 ec 0c             	sub    esp,0xc
c000b2f9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2fc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b300:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b307:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b30b:	e8 a7 bb 01 00       	call   c0026eb7 <__extendsfdf2>
c000b310:	83 c4 10             	add    esp,0x10
c000b313:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b317:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b31b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b31f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b323:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b327:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b32b:	e8 90 b1 01 00       	call   c00264c0 <__muldf3>
c000b330:	83 c4 10             	add    esp,0x10
c000b333:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b337:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b33b:	52                   	push   edx
c000b33c:	50                   	push   eax
c000b33d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b340:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b343:	e8 fb aa 01 00       	call   c0025e43 <__adddf3>
c000b348:	83 c4 10             	add    esp,0x10
c000b34b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b34e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b351:	85 ff                	test   edi,edi
c000b353:	0f 8f e1 fc ff ff    	jg     c000b03a <calc_output_multi+0x4fc>
c000b359:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b35d:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b361:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b365:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b36a:	0f 8f 3f fc ff ff    	jg     c000afaf <calc_output_multi+0x471>
c000b370:	be 08 00 00 00       	mov    esi,0x8
c000b375:	89 d8                	mov    eax,ebx
c000b377:	99                   	cdq    
c000b378:	f7 fe                	idiv   esi
c000b37a:	4a                   	dec    edx
c000b37b:	83 fa 06             	cmp    edx,0x6
c000b37e:	77 07                	ja     c000b387 <calc_output_multi+0x849>
c000b380:	ff 24 95 bc 86 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd7944]
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4b                   	dec    ebx
c000b38c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b390:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b393:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b397:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b39b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b39e:	e8 a0 aa 01 00       	call   c0025e43 <__adddf3>
c000b3a3:	83 c4 10             	add    esp,0x10
c000b3a6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3aa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3be:	e8 fd b0 01 00       	call   c00264c0 <__muldf3>
c000b3c3:	5d                   	pop    ebp
c000b3c4:	59                   	pop    ecx
c000b3c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b3c9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b3cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3d5:	e8 b9 b9 01 00       	call   c0026d93 <__truncdfsf2>
c000b3da:	83 c4 10             	add    esp,0x10
c000b3dd:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b3e1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b3e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3e8:	4b                   	dec    ebx
c000b3e9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3ed:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b3f4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3f8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3fb:	e8 43 aa 01 00       	call   c0025e43 <__adddf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b407:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b40b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b40f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b41b:	e8 a0 b0 01 00       	call   c00264c0 <__muldf3>
c000b420:	59                   	pop    ecx
c000b421:	5f                   	pop    edi
c000b422:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b42a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b432:	e8 5c b9 01 00       	call   c0026d93 <__truncdfsf2>
c000b437:	83 c4 10             	add    esp,0x10
c000b43a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b43e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b441:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b445:	4b                   	dec    ebx
c000b446:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b44a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b44d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b451:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b455:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b458:	e8 e6 a9 01 00       	call   c0025e43 <__adddf3>
c000b45d:	83 c4 10             	add    esp,0x10
c000b460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b468:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b46c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b478:	e8 43 b0 01 00       	call   c00264c0 <__muldf3>
c000b47d:	5f                   	pop    edi
c000b47e:	5d                   	pop    ebp
c000b47f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b483:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b48f:	e8 ff b8 01 00       	call   c0026d93 <__truncdfsf2>
c000b494:	83 c4 10             	add    esp,0x10
c000b497:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b49b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b49e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4a2:	4b                   	dec    ebx
c000b4a3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4a7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b4ae:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4b2:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4b5:	e8 89 a9 01 00       	call   c0025e43 <__adddf3>
c000b4ba:	83 c4 10             	add    esp,0x10
c000b4bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b4c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	e8 e6 af 01 00       	call   c00264c0 <__muldf3>
c000b4da:	5d                   	pop    ebp
c000b4db:	59                   	pop    ecx
c000b4dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b4e0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4ec:	e8 a2 b8 01 00       	call   c0026d93 <__truncdfsf2>
c000b4f1:	83 c4 10             	add    esp,0x10
c000b4f4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b4f8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b4fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ff:	4b                   	dec    ebx
c000b500:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b504:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b507:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b50b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b50f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b512:	e8 2c a9 01 00       	call   c0025e43 <__adddf3>
c000b517:	83 c4 10             	add    esp,0x10
c000b51a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b51e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b522:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b52a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b52e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b532:	e8 89 af 01 00       	call   c00264c0 <__muldf3>
c000b537:	59                   	pop    ecx
c000b538:	5f                   	pop    edi
c000b539:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b53d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b541:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b545:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b549:	e8 45 b8 01 00       	call   c0026d93 <__truncdfsf2>
c000b54e:	83 c4 10             	add    esp,0x10
c000b551:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b555:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b558:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b55c:	4b                   	dec    ebx
c000b55d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b561:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b564:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b568:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b56c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b56f:	e8 cf a8 01 00       	call   c0025e43 <__adddf3>
c000b574:	83 c4 10             	add    esp,0x10
c000b577:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b57b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b57f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b583:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b587:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b58b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b58f:	e8 2c af 01 00       	call   c00264c0 <__muldf3>
c000b594:	5f                   	pop    edi
c000b595:	5d                   	pop    ebp
c000b596:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b59a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5a6:	e8 e8 b7 01 00       	call   c0026d93 <__truncdfsf2>
c000b5ab:	83 c4 10             	add    esp,0x10
c000b5ae:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5b2:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5b9:	4b                   	dec    ebx
c000b5ba:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5be:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5c5:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5c9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5cc:	e8 72 a8 01 00       	call   c0025e43 <__adddf3>
c000b5d1:	83 c4 10             	add    esp,0x10
c000b5d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5d8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ec:	e8 cf ae 01 00       	call   c00264c0 <__muldf3>
c000b5f1:	5d                   	pop    ebp
c000b5f2:	59                   	pop    ecx
c000b5f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5f7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b603:	e8 8b b7 01 00       	call   c0026d93 <__truncdfsf2>
c000b608:	83 c4 10             	add    esp,0x10
c000b60b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b60f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b612:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b616:	4b                   	dec    ebx
c000b617:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b61b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b61e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b622:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b626:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b629:	e8 15 a8 01 00       	call   c0025e43 <__adddf3>
c000b62e:	83 c4 10             	add    esp,0x10
c000b631:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b635:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b639:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b63d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b641:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b645:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b649:	e8 72 ae 01 00       	call   c00264c0 <__muldf3>
c000b64e:	59                   	pop    ecx
c000b64f:	5f                   	pop    edi
c000b650:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b654:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b658:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b65c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b660:	e8 2e b7 01 00       	call   c0026d93 <__truncdfsf2>
c000b665:	83 c4 10             	add    esp,0x10
c000b668:	85 db                	test   ebx,ebx
c000b66a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b66e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b671:	0f 8f fe fc ff ff    	jg     c000b375 <calc_output_multi+0x837>
c000b677:	83 c4 4c             	add    esp,0x4c
c000b67a:	5b                   	pop    ebx
c000b67b:	5e                   	pop    esi
c000b67c:	5f                   	pop    edi
c000b67d:	5d                   	pop    ebp
c000b67e:	c3                   	ret    

c000b67f <double_to_fp>:
c000b67f:	83 ec 0c             	sub    esp,0xc
c000b682:	68 00 00 b0 40       	push   0x40b00000
c000b687:	6a 00                	push   0x0
c000b689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b68d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b691:	e8 2a ae 01 00       	call   c00264c0 <__muldf3>
c000b696:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b69a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b69e:	83 c4 1c             	add    esp,0x1c
c000b6a1:	e9 9a b8 01 00       	jmp    c0026f40 <lrint>

c000b6a6 <prepare_data>:
c000b6a6:	55                   	push   ebp
c000b6a7:	57                   	push   edi
c000b6a8:	56                   	push   esi
c000b6a9:	53                   	push   ebx
c000b6aa:	83 ec 1c             	sub    esp,0x1c
c000b6ad:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b6b1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b6b5:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b6b9:	0f 89 57 01 00 00    	jns    c000b816 <prepare_data+0x170>
c000b6bf:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b6c2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b6c5:	85 d2                	test   edx,edx
c000b6c7:	75 0d                	jne    c000b6d6 <prepare_data+0x30>
c000b6c9:	8d 14 36             	lea    edx,[esi+esi*1]
c000b6cc:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b6cf:	29 d0                	sub    eax,edx
c000b6d1:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b6d4:	eb 44                	jmp    c000b71a <prepare_data+0x74>
c000b6d6:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b6d9:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b6dc:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b6df:	39 c1                	cmp    ecx,eax
c000b6e1:	7d 04                	jge    c000b6e7 <prepare_data+0x41>
c000b6e3:	29 d0                	sub    eax,edx
c000b6e5:	eb 2d                	jmp    c000b714 <prepare_data+0x6e>
c000b6e7:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b6ed:	29 d7                	sub    edi,edx
c000b6ef:	01 f7                	add    edi,esi
c000b6f1:	51                   	push   ecx
c000b6f2:	29 f2                	sub    edx,esi
c000b6f4:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b6fb:	8d 14 90             	lea    edx,[eax+edx*4]
c000b6fe:	51                   	push   ecx
c000b6ff:	52                   	push   edx
c000b700:	50                   	push   eax
c000b701:	e8 17 4f ff ff       	call   c000061d <memmove>
c000b706:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b709:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b70c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b70f:	29 f0                	sub    eax,esi
c000b711:	83 c4 10             	add    esp,0x10
c000b714:	29 f0                	sub    eax,esi
c000b716:	79 02                	jns    c000b71a <prepare_data+0x74>
c000b718:	31 c0                	xor    eax,eax
c000b71a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b71d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b720:	29 ef                	sub    edi,ebp
c000b722:	39 c7                	cmp    edi,eax
c000b724:	7e 02                	jle    c000b728 <prepare_data+0x82>
c000b726:	89 c7                	mov    edi,eax
c000b728:	89 f8                	mov    eax,edi
c000b72a:	99                   	cdq    
c000b72b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b72e:	b8 15 00 00 00       	mov    eax,0x15
c000b733:	29 d7                	sub    edi,edx
c000b735:	0f 88 dd 00 00 00    	js     c000b818 <prepare_data+0x172>
c000b73b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b73e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b741:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b744:	0f 8f ce 00 00 00    	jg     c000b818 <prepare_data+0x172>
c000b74a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b750:	50                   	push   eax
c000b751:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b758:	50                   	push   eax
c000b759:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b75d:	8b 00                	mov    eax,DWORD PTR [eax]
c000b75f:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b762:	50                   	push   eax
c000b763:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b766:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b76a:	50                   	push   eax
c000b76b:	e8 e5 4e ff ff       	call   c0000655 <memcpy>
c000b770:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b773:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b776:	01 fd                	add    ebp,edi
c000b778:	01 f9                	add    ecx,edi
c000b77a:	83 c4 10             	add    esp,0x10
c000b77d:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b780:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b783:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b786:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b78a:	0f 85 86 00 00 00    	jne    c000b816 <prepare_data+0x170>
c000b790:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b793:	89 e8                	mov    eax,ebp
c000b795:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b798:	29 c8                	sub    eax,ecx
c000b79a:	39 f8                	cmp    eax,edi
c000b79c:	7d 78                	jge    c000b816 <prepare_data+0x170>
c000b79e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b7a2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b7a6:	74 6e                	je     c000b816 <prepare_data+0x170>
c000b7a8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b7ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b7af:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b7b2:	29 ef                	sub    edi,ebp
c000b7b4:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b7b8:	7c 29                	jl     c000b7e3 <prepare_data+0x13d>
c000b7ba:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b7bd:	29 f1                	sub    ecx,esi
c000b7bf:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b7c6:	55                   	push   ebp
c000b7c7:	50                   	push   eax
c000b7c8:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b7cb:	50                   	push   eax
c000b7cc:	52                   	push   edx
c000b7cd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b7d1:	e8 47 4e ff ff       	call   c000061d <memmove>
c000b7d6:	83 c4 10             	add    esp,0x10
c000b7d9:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b7dc:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b7df:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b7e3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b7e6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b7e9:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000b7ec:	83 c6 05             	add    esi,0x5
c000b7ef:	78 07                	js     c000b7f8 <prepare_data+0x152>
c000b7f1:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b7f4:	39 cf                	cmp    edi,ecx
c000b7f6:	7e 04                	jle    c000b7fc <prepare_data+0x156>
c000b7f8:	89 ce                	mov    esi,ecx
c000b7fa:	29 c6                	sub    esi,eax
c000b7fc:	8d 04 82             	lea    eax,[edx+eax*4]
c000b7ff:	51                   	push   ecx
c000b800:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000b807:	51                   	push   ecx
c000b808:	6a 00                	push   0x0
c000b80a:	50                   	push   eax
c000b80b:	e8 7b 4e ff ff       	call   c000068b <memset>
c000b810:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000b813:	83 c4 10             	add    esp,0x10
c000b816:	31 c0                	xor    eax,eax
c000b818:	83 c4 1c             	add    esp,0x1c
c000b81b:	5b                   	pop    ebx
c000b81c:	5e                   	pop    esi
c000b81d:	5f                   	pop    edi
c000b81e:	5d                   	pop    ebp
c000b81f:	c3                   	ret    

c000b820 <sinc_multichan_vari_process>:
c000b820:	55                   	push   ebp
c000b821:	ba 05 00 00 00       	mov    edx,0x5
c000b826:	57                   	push   edi
c000b827:	56                   	push   esi
c000b828:	53                   	push   ebx
c000b829:	83 ec 4c             	sub    esp,0x4c
c000b82c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000b830:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000b834:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000b837:	85 db                	test   ebx,ebx
c000b839:	0f 84 9b 06 00 00    	je     c000beda <sinc_multichan_vari_process+0x6ba>
c000b83f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000b842:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000b845:	0f af c5             	imul   eax,ebp
c000b848:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000b84b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000b84e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b855:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000b85c:	0f af c5             	imul   eax,ebp
c000b85f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000b862:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000b865:	8b 06                	mov    eax,DWORD PTR [esi]
c000b867:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86f:	68 00 00 70 3f       	push   0x3f700000
c000b874:	6a 00                	push   0x0
c000b876:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b87a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b87e:	e8 0c b5 01 00       	call   c0026d8f <__ltdf2>
c000b883:	83 c4 10             	add    esp,0x10
c000b886:	ba 16 00 00 00       	mov    edx,0x16
c000b88b:	85 c0                	test   eax,eax
c000b88d:	0f 88 47 06 00 00    	js     c000beda <sinc_multichan_vari_process+0x6ba>
c000b893:	68 00 00 70 40       	push   0x40700000
c000b898:	6a 00                	push   0x0
c000b89a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b89e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a2:	e8 ca b4 01 00       	call   c0026d71 <__gtdf2>
c000b8a7:	83 c4 10             	add    esp,0x10
c000b8aa:	ba 16 00 00 00       	mov    edx,0x16
c000b8af:	85 c0                	test   eax,eax
c000b8b1:	0f 8f 23 06 00 00    	jg     c000beda <sinc_multichan_vari_process+0x6ba>
c000b8b7:	83 ec 0c             	sub    esp,0xc
c000b8ba:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b8bd:	e8 61 b2 01 00       	call   c0026b23 <__floatsidf>
c000b8c2:	83 c4 10             	add    esp,0x10
c000b8c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b8c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b8cd:	68 00 00 00 40       	push   0x40000000
c000b8d2:	6a 00                	push   0x0
c000b8d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8dc:	e8 62 a5 01 00       	call   c0025e43 <__adddf3>
c000b8e1:	59                   	pop    ecx
c000b8e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b8e6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b8ea:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b8ed:	e8 31 b2 01 00       	call   c0026b23 <__floatsidf>
c000b8f2:	83 c4 10             	add    esp,0x10
c000b8f5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b8f9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b8fd:	52                   	push   edx
c000b8fe:	50                   	push   eax
c000b8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b907:	e8 98 ae 01 00       	call   c00267a4 <__divdf3>
c000b90c:	83 c4 10             	add    esp,0x10
c000b90f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b913:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b917:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000b91a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000b91d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b921:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b925:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b929:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b92d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b931:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b935:	e8 37 b4 01 00       	call   c0026d71 <__gtdf2>
c000b93a:	83 c4 10             	add    esp,0x10
c000b93d:	85 c0                	test   eax,eax
c000b93f:	7e 2d                	jle    c000b96e <sinc_multichan_vari_process+0x14e>
c000b941:	68 00 00 f0 3f       	push   0x3ff00000
c000b946:	6a 00                	push   0x0
c000b948:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b94c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b950:	e8 3a b4 01 00       	call   c0026d8f <__ltdf2>
c000b955:	83 c4 10             	add    esp,0x10
c000b958:	85 c0                	test   eax,eax
c000b95a:	79 4d                	jns    c000b9a9 <sinc_multichan_vari_process+0x189>
c000b95c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b960:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b964:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b968:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b96c:	eb 1b                	jmp    c000b989 <sinc_multichan_vari_process+0x169>
c000b96e:	68 00 00 f0 3f       	push   0x3ff00000
c000b973:	6a 00                	push   0x0
c000b975:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b979:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b97d:	e8 0d b4 01 00       	call   c0026d8f <__ltdf2>
c000b982:	83 c4 10             	add    esp,0x10
c000b985:	85 c0                	test   eax,eax
c000b987:	79 20                	jns    c000b9a9 <sinc_multichan_vari_process+0x189>
c000b989:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b98d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b991:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b995:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b999:	e8 06 ae 01 00       	call   c00267a4 <__divdf3>
c000b99e:	83 c4 10             	add    esp,0x10
c000b9a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b9a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9a9:	50                   	push   eax
c000b9aa:	50                   	push   eax
c000b9ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9b3:	e8 88 b5 01 00       	call   c0026f40 <lrint>
c000b9b8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000b9bb:	40                   	inc    eax
c000b9bc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b9c0:	0f af c5             	imul   eax,ebp
c000b9c3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000b9c7:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000b9ca:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b9ce:	58                   	pop    eax
c000b9cf:	5a                   	pop    edx
c000b9d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9d8:	e8 63 b5 01 00       	call   c0026f40 <lrint>
c000b9dd:	83 ec 0c             	sub    esp,0xc
c000b9e0:	50                   	push   eax
c000b9e1:	e8 3d b1 01 00       	call   c0026b23 <__floatsidf>
c000b9e6:	83 c4 10             	add    esp,0x10
c000b9e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b9ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9f1:	52                   	push   edx
c000b9f2:	50                   	push   eax
c000b9f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b9fb:	e8 94 aa 01 00       	call   c0026494 <__subdf3>
c000ba00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ba04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ba08:	83 c4 20             	add    esp,0x20
c000ba0b:	6a 00                	push   0x0
c000ba0d:	6a 00                	push   0x0
c000ba0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba17:	e8 73 b3 01 00       	call   c0026d8f <__ltdf2>
c000ba1c:	83 c4 10             	add    esp,0x10
c000ba1f:	85 c0                	test   eax,eax
c000ba21:	79 1f                	jns    c000ba42 <sinc_multichan_vari_process+0x222>
c000ba23:	68 00 00 f0 3f       	push   0x3ff00000
c000ba28:	6a 00                	push   0x0
c000ba2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba32:	e8 0c a4 01 00       	call   c0025e43 <__adddf3>
c000ba37:	83 c4 10             	add    esp,0x10
c000ba3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba3e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba42:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ba45:	83 ec 10             	sub    esp,0x10
c000ba48:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ba4c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba57:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba5b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba5f:	e8 30 aa 01 00       	call   c0026494 <__subdf3>
c000ba64:	83 c4 18             	add    esp,0x18
c000ba67:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ba6b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ba6f:	52                   	push   edx
c000ba70:	50                   	push   eax
c000ba71:	e8 ca b4 01 00       	call   c0026f40 <lrint>
c000ba76:	0f af e8             	imul   ebp,eax
c000ba79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ba7d:	01 e8                	add    eax,ebp
c000ba7f:	99                   	cdq    
c000ba80:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ba83:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ba86:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba8a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba8e:	68 00 00 f0 3f       	push   0x3ff00000
c000ba93:	6a 00                	push   0x0
c000ba95:	e8 0a ad 01 00       	call   c00267a4 <__divdf3>
c000ba9a:	83 c4 10             	add    esp,0x10
c000ba9d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000baa1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000baa5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000baaa:	68 23 42 92 0c       	push   0xc924223
c000baaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bab3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bab7:	e8 87 a3 01 00       	call   c0025e43 <__adddf3>
c000babc:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bac0:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bac4:	83 c4 20             	add    esp,0x20
c000bac7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bacf:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bad7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bada:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000badd:	7d 50                	jge    c000bb2f <sinc_multichan_vari_process+0x30f>
c000badf:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bae2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bae5:	01 c8                	add    eax,ecx
c000bae7:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000baea:	99                   	cdq    
c000baeb:	f7 f9                	idiv   ecx
c000baed:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000baf1:	7d 0c                	jge    c000baff <sinc_multichan_vari_process+0x2df>
c000baf3:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000baf6:	85 ed                	test   ebp,ebp
c000baf8:	79 6b                	jns    c000bb65 <sinc_multichan_vari_process+0x345>
c000bafa:	e9 e6 00 00 00       	jmp    c000bbe5 <sinc_multichan_vari_process+0x3c5>
c000baff:	50                   	push   eax
c000bb00:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bb04:	57                   	push   edi
c000bb05:	53                   	push   ebx
c000bb06:	e8 9b fb ff ff       	call   c000b6a6 <prepare_data>
c000bb0b:	83 c4 10             	add    esp,0x10
c000bb0e:	89 c2                	mov    edx,eax
c000bb10:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bb13:	85 c0                	test   eax,eax
c000bb15:	0f 85 bf 03 00 00    	jne    c000beda <sinc_multichan_vari_process+0x6ba>
c000bb1b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb1e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb21:	01 c8                	add    eax,ecx
c000bb23:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb26:	99                   	cdq    
c000bb27:	f7 f9                	idiv   ecx
c000bb29:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bb2d:	7c c4                	jl     c000baf3 <sinc_multichan_vari_process+0x2d3>
c000bb2f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb33:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bb37:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bb3a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bb3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb41:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb45:	89 06                	mov    DWORD PTR [esi],eax
c000bb47:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bb4a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bb4d:	99                   	cdq    
c000bb4e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb51:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bb54:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bb57:	99                   	cdq    
c000bb58:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb5b:	31 d2                	xor    edx,edx
c000bb5d:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bb60:	e9 75 03 00 00       	jmp    c000beda <sinc_multichan_vari_process+0x6ba>
c000bb65:	83 ec 0c             	sub    esp,0xc
c000bb68:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bb6b:	e8 b3 af 01 00       	call   c0026b23 <__floatsidf>
c000bb70:	83 c4 10             	add    esp,0x10
c000bb73:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bb77:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bb7b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bb7f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bb83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb8b:	e8 b3 a2 01 00       	call   c0025e43 <__adddf3>
c000bb90:	83 c4 10             	add    esp,0x10
c000bb93:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bb97:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bb9b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bb9f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bba3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bba7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbab:	e8 93 a2 01 00       	call   c0025e43 <__adddf3>
c000bbb0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bbb3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bbb7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bbbb:	e8 63 af 01 00       	call   c0026b23 <__floatsidf>
c000bbc0:	83 c4 10             	add    esp,0x10
c000bbc3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbc7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbcb:	52                   	push   edx
c000bbcc:	50                   	push   eax
c000bbcd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbd1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbd5:	e8 b3 b1 01 00       	call   c0026d8d <__gedf2>
c000bbda:	83 c4 10             	add    esp,0x10
c000bbdd:	85 c0                	test   eax,eax
c000bbdf:	0f 89 4a ff ff ff    	jns    c000bb2f <sinc_multichan_vari_process+0x30f>
c000bbe5:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bbe9:	0f 8e ed 00 00 00    	jle    c000bcdc <sinc_multichan_vari_process+0x4bc>
c000bbef:	83 ec 10             	sub    esp,0x10
c000bbf2:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bbf5:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bbf8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000bbfb:	ff 36                	push   DWORD PTR [esi]
c000bbfd:	e8 92 a8 01 00       	call   c0026494 <__subdf3>
c000bc02:	83 c4 18             	add    esp,0x18
c000bc05:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc09:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc0d:	52                   	push   edx
c000bc0e:	50                   	push   eax
c000bc0f:	e8 0c b3 01 00       	call   c0026f20 <fabs>
c000bc14:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc18:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bc1c:	83 c4 10             	add    esp,0x10
c000bc1f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000bc24:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000bc29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc2d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc31:	e8 3b b1 01 00       	call   c0026d71 <__gtdf2>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	85 c0                	test   eax,eax
c000bc3b:	0f 8e 9b 00 00 00    	jle    c000bcdc <sinc_multichan_vari_process+0x4bc>
c000bc41:	8b 06                	mov    eax,DWORD PTR [esi]
c000bc43:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bc46:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bc4a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bc4e:	52                   	push   edx
c000bc4f:	50                   	push   eax
c000bc50:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bc53:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bc56:	e8 39 a8 01 00       	call   c0026494 <__subdf3>
c000bc5b:	59                   	pop    ecx
c000bc5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc60:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bc64:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bc67:	e8 b7 ae 01 00       	call   c0026b23 <__floatsidf>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc73:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc77:	52                   	push   edx
c000bc78:	50                   	push   eax
c000bc79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc81:	e8 3a a8 01 00       	call   c00264c0 <__muldf3>
c000bc86:	5d                   	pop    ebp
c000bc87:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc8b:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bc8f:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bc92:	e8 8c ae 01 00       	call   c0026b23 <__floatsidf>
c000bc97:	83 c4 10             	add    esp,0x10
c000bc9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bca2:	52                   	push   edx
c000bca3:	50                   	push   eax
c000bca4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bca8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcac:	e8 f3 aa 01 00       	call   c00267a4 <__divdf3>
c000bcb1:	83 c4 10             	add    esp,0x10
c000bcb4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcb8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcc4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcc8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bccc:	e8 72 a1 01 00       	call   c0025e43 <__adddf3>
c000bcd1:	83 c4 10             	add    esp,0x10
c000bcd4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bcd8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bcdc:	83 ec 0c             	sub    esp,0xc
c000bcdf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bce2:	e8 3c ae 01 00       	call   c0026b23 <__floatsidf>
c000bce7:	83 c4 10             	add    esp,0x10
c000bcea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd02:	e8 88 b0 01 00       	call   c0026d8f <__ltdf2>
c000bd07:	83 c4 10             	add    esp,0x10
c000bd0a:	85 c0                	test   eax,eax
c000bd0c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd10:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bd14:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bd18:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bd1c:	78 10                	js     c000bd2e <sinc_multichan_vari_process+0x50e>
c000bd1e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bd22:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bd26:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd2a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd3a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd3e:	e8 7d a7 01 00       	call   c00264c0 <__muldf3>
c000bd43:	59                   	pop    ecx
c000bd44:	5d                   	pop    ebp
c000bd45:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd49:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd4d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd55:	e8 25 f9 ff ff       	call   c000b67f <double_to_fp>
c000bd5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd5e:	89 c5                	mov    ebp,eax
c000bd60:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd68:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd6c:	e8 4f a7 01 00       	call   c00264c0 <__muldf3>
c000bd71:	83 c4 18             	add    esp,0x18
c000bd74:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bd78:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bd7c:	52                   	push   edx
c000bd7d:	50                   	push   eax
c000bd7e:	e8 fc f8 ff ff       	call   c000b67f <double_to_fp>
c000bd83:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bd86:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bd8a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bd8d:	8d 04 90             	lea    eax,[eax+edx*4]
c000bd90:	50                   	push   eax
c000bd91:	50                   	push   eax
c000bd92:	50                   	push   eax
c000bd93:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bd96:	e8 88 ad 01 00       	call   c0026b23 <__floatsidf>
c000bd9b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bd9f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bda3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bda7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdab:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdaf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdb3:	e8 ec a9 01 00       	call   c00267a4 <__divdf3>
c000bdb8:	83 c4 1c             	add    esp,0x1c
c000bdbb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bdbf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bdc3:	52                   	push   edx
c000bdc4:	89 ea                	mov    edx,ebp
c000bdc6:	50                   	push   eax
c000bdc7:	89 d8                	mov    eax,ebx
c000bdc9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bdcc:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bdd0:	e8 69 ed ff ff       	call   c000ab3e <calc_output_multi>
c000bdd5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bdd8:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bddb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bddf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bde3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bde7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bdeb:	e8 b4 a9 01 00       	call   c00267a4 <__divdf3>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000bdf7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000bdfb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be03:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be07:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be0b:	e8 33 a0 01 00       	call   c0025e43 <__adddf3>
c000be10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000be14:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000be18:	83 c4 28             	add    esp,0x28
c000be1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be1f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be23:	e8 18 b1 01 00       	call   c0026f40 <lrint>
c000be28:	83 ec 0c             	sub    esp,0xc
c000be2b:	50                   	push   eax
c000be2c:	e8 f2 ac 01 00       	call   c0026b23 <__floatsidf>
c000be31:	83 c4 10             	add    esp,0x10
c000be34:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000be38:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be3c:	52                   	push   edx
c000be3d:	50                   	push   eax
c000be3e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be42:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be46:	e8 49 a6 01 00       	call   c0026494 <__subdf3>
c000be4b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be4f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be53:	83 c4 20             	add    esp,0x20
c000be56:	6a 00                	push   0x0
c000be58:	6a 00                	push   0x0
c000be5a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be62:	e8 28 af 01 00       	call   c0026d8f <__ltdf2>
c000be67:	83 c4 10             	add    esp,0x10
c000be6a:	85 c0                	test   eax,eax
c000be6c:	79 20                	jns    c000be8e <sinc_multichan_vari_process+0x66e>
c000be6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be7e:	e8 c0 9f 01 00       	call   c0025e43 <__adddf3>
c000be83:	83 c4 10             	add    esp,0x10
c000be86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000be8e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000be91:	83 ec 10             	sub    esp,0x10
c000be94:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000be98:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000be9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bea3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bea7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000beab:	e8 e4 a5 01 00       	call   c0026494 <__subdf3>
c000beb0:	83 c4 18             	add    esp,0x18
c000beb3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bebb:	52                   	push   edx
c000bebc:	50                   	push   eax
c000bebd:	e8 7e b0 01 00       	call   c0026f40 <lrint>
c000bec2:	0f af e8             	imul   ebp,eax
c000bec5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bec9:	83 c4 10             	add    esp,0x10
c000becc:	01 e8                	add    eax,ebp
c000bece:	99                   	cdq    
c000becf:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bed2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bed5:	e9 fd fb ff ff       	jmp    c000bad7 <sinc_multichan_vari_process+0x2b7>
c000beda:	83 c4 4c             	add    esp,0x4c
c000bedd:	89 d0                	mov    eax,edx
c000bedf:	5b                   	pop    ebx
c000bee0:	5e                   	pop    esi
c000bee1:	5f                   	pop    edi
c000bee2:	5d                   	pop    ebp
c000bee3:	c3                   	ret    

c000bee4 <sinc_hex_vari_process>:
c000bee4:	55                   	push   ebp
c000bee5:	ba 05 00 00 00       	mov    edx,0x5
c000beea:	57                   	push   edi
c000beeb:	56                   	push   esi
c000beec:	53                   	push   ebx
c000beed:	83 ec 4c             	sub    esp,0x4c
c000bef0:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000bef4:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000bef8:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000befb:	85 db                	test   ebx,ebx
c000befd:	0f 84 9c 06 00 00    	je     c000c59f <sinc_hex_vari_process+0x6bb>
c000bf03:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bf06:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000bf09:	0f af c7             	imul   eax,edi
c000bf0c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000bf0f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000bf12:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bf19:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bf20:	0f af c7             	imul   eax,edi
c000bf23:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bf26:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bf29:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bf2c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf30:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf34:	68 00 00 70 3f       	push   0x3f700000
c000bf39:	6a 00                	push   0x0
c000bf3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf43:	e8 47 ae 01 00       	call   c0026d8f <__ltdf2>
c000bf48:	83 c4 10             	add    esp,0x10
c000bf4b:	ba 16 00 00 00       	mov    edx,0x16
c000bf50:	85 c0                	test   eax,eax
c000bf52:	0f 88 47 06 00 00    	js     c000c59f <sinc_hex_vari_process+0x6bb>
c000bf58:	68 00 00 70 40       	push   0x40700000
c000bf5d:	6a 00                	push   0x0
c000bf5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf67:	e8 05 ae 01 00       	call   c0026d71 <__gtdf2>
c000bf6c:	83 c4 10             	add    esp,0x10
c000bf6f:	ba 16 00 00 00       	mov    edx,0x16
c000bf74:	85 c0                	test   eax,eax
c000bf76:	0f 8f 23 06 00 00    	jg     c000c59f <sinc_hex_vari_process+0x6bb>
c000bf7c:	83 ec 0c             	sub    esp,0xc
c000bf7f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bf82:	e8 9c ab 01 00       	call   c0026b23 <__floatsidf>
c000bf87:	83 c4 10             	add    esp,0x10
c000bf8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bf8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bf92:	68 00 00 00 40       	push   0x40000000
c000bf97:	6a 00                	push   0x0
c000bf99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfa1:	e8 9d 9e 01 00       	call   c0025e43 <__adddf3>
c000bfa6:	59                   	pop    ecx
c000bfa7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bfab:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bfaf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfb2:	e8 6c ab 01 00       	call   c0026b23 <__floatsidf>
c000bfb7:	83 c4 10             	add    esp,0x10
c000bfba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bfbe:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bfc2:	52                   	push   edx
c000bfc3:	50                   	push   eax
c000bfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfcc:	e8 d3 a7 01 00       	call   c00267a4 <__divdf3>
c000bfd1:	83 c4 10             	add    esp,0x10
c000bfd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bfd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bfdc:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000bfdf:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000bfe2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bfe6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bfea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bff2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bff6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bffa:	e8 72 ad 01 00       	call   c0026d71 <__gtdf2>
c000bfff:	83 c4 10             	add    esp,0x10
c000c002:	85 c0                	test   eax,eax
c000c004:	7e 2d                	jle    c000c033 <sinc_hex_vari_process+0x14f>
c000c006:	68 00 00 f0 3f       	push   0x3ff00000
c000c00b:	6a 00                	push   0x0
c000c00d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c011:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c015:	e8 75 ad 01 00       	call   c0026d8f <__ltdf2>
c000c01a:	83 c4 10             	add    esp,0x10
c000c01d:	85 c0                	test   eax,eax
c000c01f:	79 4d                	jns    c000c06e <sinc_hex_vari_process+0x18a>
c000c021:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c025:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c029:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c02d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c031:	eb 1b                	jmp    c000c04e <sinc_hex_vari_process+0x16a>
c000c033:	68 00 00 f0 3f       	push   0x3ff00000
c000c038:	6a 00                	push   0x0
c000c03a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c03e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c042:	e8 48 ad 01 00       	call   c0026d8f <__ltdf2>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	85 c0                	test   eax,eax
c000c04c:	79 20                	jns    c000c06e <sinc_hex_vari_process+0x18a>
c000c04e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c052:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c056:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c05a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c05e:	e8 41 a7 01 00       	call   c00267a4 <__divdf3>
c000c063:	83 c4 10             	add    esp,0x10
c000c066:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c06a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c06e:	50                   	push   eax
c000c06f:	50                   	push   eax
c000c070:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c074:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c078:	e8 c3 ae 01 00       	call   c0026f40 <lrint>
c000c07d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c080:	40                   	inc    eax
c000c081:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c085:	0f af c7             	imul   eax,edi
c000c088:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c08c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c08f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c093:	58                   	pop    eax
c000c094:	5a                   	pop    edx
c000c095:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c099:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c09d:	e8 9e ae 01 00       	call   c0026f40 <lrint>
c000c0a2:	83 ec 0c             	sub    esp,0xc
c000c0a5:	50                   	push   eax
c000c0a6:	e8 78 aa 01 00       	call   c0026b23 <__floatsidf>
c000c0ab:	83 c4 10             	add    esp,0x10
c000c0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c0b6:	52                   	push   edx
c000c0b7:	50                   	push   eax
c000c0b8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0c0:	e8 cf a3 01 00       	call   c0026494 <__subdf3>
c000c0c5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	83 c4 20             	add    esp,0x20
c000c0d0:	6a 00                	push   0x0
c000c0d2:	6a 00                	push   0x0
c000c0d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0dc:	e8 ae ac 01 00       	call   c0026d8f <__ltdf2>
c000c0e1:	83 c4 10             	add    esp,0x10
c000c0e4:	85 c0                	test   eax,eax
c000c0e6:	79 1f                	jns    c000c107 <sinc_hex_vari_process+0x223>
c000c0e8:	68 00 00 f0 3f       	push   0x3ff00000
c000c0ed:	6a 00                	push   0x0
c000c0ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0f7:	e8 47 9d 01 00       	call   c0025e43 <__adddf3>
c000c0fc:	83 c4 10             	add    esp,0x10
c000c0ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c103:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c107:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c10a:	83 ec 10             	sub    esp,0x10
c000c10d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c111:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c118:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c11c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c120:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c124:	e8 6b a3 01 00       	call   c0026494 <__subdf3>
c000c129:	83 c4 18             	add    esp,0x18
c000c12c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c130:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c134:	52                   	push   edx
c000c135:	50                   	push   eax
c000c136:	e8 05 ae 01 00       	call   c0026f40 <lrint>
c000c13b:	0f af f8             	imul   edi,eax
c000c13e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c142:	01 f8                	add    eax,edi
c000c144:	99                   	cdq    
c000c145:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c148:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c14b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c14f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c153:	68 00 00 f0 3f       	push   0x3ff00000
c000c158:	6a 00                	push   0x0
c000c15a:	e8 45 a6 01 00       	call   c00267a4 <__divdf3>
c000c15f:	83 c4 10             	add    esp,0x10
c000c162:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c166:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c16a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c16f:	68 23 42 92 0c       	push   0xc924223
c000c174:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c178:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c17c:	e8 c2 9c 01 00       	call   c0025e43 <__adddf3>
c000c181:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c185:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c189:	83 c4 20             	add    esp,0x20
c000c18c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c194:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c19c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c19f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c1a2:	7d 50                	jge    c000c1f4 <sinc_hex_vari_process+0x310>
c000c1a4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c1a7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c1aa:	01 c8                	add    eax,ecx
c000c1ac:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c1af:	99                   	cdq    
c000c1b0:	f7 f9                	idiv   ecx
c000c1b2:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c1b6:	7d 0c                	jge    c000c1c4 <sinc_hex_vari_process+0x2e0>
c000c1b8:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c1bb:	85 ff                	test   edi,edi
c000c1bd:	79 6c                	jns    c000c22b <sinc_hex_vari_process+0x347>
c000c1bf:	e9 e7 00 00 00       	jmp    c000c2ab <sinc_hex_vari_process+0x3c7>
c000c1c4:	50                   	push   eax
c000c1c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c1c9:	56                   	push   esi
c000c1ca:	53                   	push   ebx
c000c1cb:	e8 d6 f4 ff ff       	call   c000b6a6 <prepare_data>
c000c1d0:	83 c4 10             	add    esp,0x10
c000c1d3:	89 c2                	mov    edx,eax
c000c1d5:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c1d8:	85 c0                	test   eax,eax
c000c1da:	0f 85 bf 03 00 00    	jne    c000c59f <sinc_hex_vari_process+0x6bb>
c000c1e0:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c1e3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c1e6:	01 c8                	add    eax,ecx
c000c1e8:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c1eb:	99                   	cdq    
c000c1ec:	f7 f9                	idiv   ecx
c000c1ee:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c1f2:	7c c4                	jl     c000c1b8 <sinc_hex_vari_process+0x2d4>
c000c1f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c1f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c1fc:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c1ff:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c206:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c20a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c20d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c210:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c213:	99                   	cdq    
c000c214:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c217:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c21a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c21d:	99                   	cdq    
c000c21e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c221:	31 d2                	xor    edx,edx
c000c223:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c226:	e9 74 03 00 00       	jmp    c000c59f <sinc_hex_vari_process+0x6bb>
c000c22b:	83 ec 0c             	sub    esp,0xc
c000c22e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c231:	e8 ed a8 01 00       	call   c0026b23 <__floatsidf>
c000c236:	83 c4 10             	add    esp,0x10
c000c239:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c23d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c241:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c249:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c24d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c251:	e8 ed 9b 01 00       	call   c0025e43 <__adddf3>
c000c256:	83 c4 10             	add    esp,0x10
c000c259:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c25d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c261:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c265:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c269:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c271:	e8 cd 9b 01 00       	call   c0025e43 <__adddf3>
c000c276:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c279:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c27d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c281:	e8 9d a8 01 00       	call   c0026b23 <__floatsidf>
c000c286:	83 c4 10             	add    esp,0x10
c000c289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c291:	52                   	push   edx
c000c292:	50                   	push   eax
c000c293:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c297:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c29b:	e8 ed aa 01 00       	call   c0026d8d <__gedf2>
c000c2a0:	83 c4 10             	add    esp,0x10
c000c2a3:	85 c0                	test   eax,eax
c000c2a5:	0f 89 49 ff ff ff    	jns    c000c1f4 <sinc_hex_vari_process+0x310>
c000c2ab:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c2af:	0f 8e ef 00 00 00    	jle    c000c3a4 <sinc_hex_vari_process+0x4c0>
c000c2b5:	83 ec 10             	sub    esp,0x10
c000c2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c2be:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c2c1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c2c4:	e8 cb a1 01 00       	call   c0026494 <__subdf3>
c000c2c9:	83 c4 18             	add    esp,0x18
c000c2cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d4:	52                   	push   edx
c000c2d5:	50                   	push   eax
c000c2d6:	e8 45 ac 01 00       	call   c0026f20 <fabs>
c000c2db:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c2df:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c2e3:	83 c4 10             	add    esp,0x10
c000c2e6:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c2eb:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2f8:	e8 74 aa 01 00       	call   c0026d71 <__gtdf2>
c000c2fd:	83 c4 10             	add    esp,0x10
c000c300:	85 c0                	test   eax,eax
c000c302:	0f 8e 9c 00 00 00    	jle    c000c3a4 <sinc_hex_vari_process+0x4c0>
c000c308:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c30b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c30e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c312:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c316:	52                   	push   edx
c000c317:	50                   	push   eax
c000c318:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c31b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c31e:	e8 71 a1 01 00       	call   c0026494 <__subdf3>
c000c323:	59                   	pop    ecx
c000c324:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c328:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c32c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c32f:	e8 ef a7 01 00       	call   c0026b23 <__floatsidf>
c000c334:	83 c4 10             	add    esp,0x10
c000c337:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c33b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c33f:	52                   	push   edx
c000c340:	50                   	push   eax
c000c341:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c345:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c349:	e8 72 a1 01 00       	call   c00264c0 <__muldf3>
c000c34e:	5f                   	pop    edi
c000c34f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c353:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c357:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c35a:	e8 c4 a7 01 00       	call   c0026b23 <__floatsidf>
c000c35f:	83 c4 10             	add    esp,0x10
c000c362:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c366:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c36a:	52                   	push   edx
c000c36b:	50                   	push   eax
c000c36c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c370:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c374:	e8 2b a4 01 00       	call   c00267a4 <__divdf3>
c000c379:	83 c4 10             	add    esp,0x10
c000c37c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c380:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c384:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c388:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c38c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c390:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c394:	e8 aa 9a 01 00       	call   c0025e43 <__adddf3>
c000c399:	83 c4 10             	add    esp,0x10
c000c39c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c3a0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c3a4:	83 ec 0c             	sub    esp,0xc
c000c3a7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c3aa:	e8 74 a7 01 00       	call   c0026b23 <__floatsidf>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3ca:	e8 c0 a9 01 00       	call   c0026d8f <__ltdf2>
c000c3cf:	83 c4 10             	add    esp,0x10
c000c3d2:	85 c0                	test   eax,eax
c000c3d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c3d8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c3dc:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c3e0:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c3e4:	78 10                	js     c000c3f6 <sinc_hex_vari_process+0x512>
c000c3e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c3ea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c3ee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c3f2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c3f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3fa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c406:	e8 b5 a0 01 00       	call   c00264c0 <__muldf3>
c000c40b:	59                   	pop    ecx
c000c40c:	5f                   	pop    edi
c000c40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c411:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c415:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c419:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c41d:	e8 5d f2 ff ff       	call   c000b67f <double_to_fp>
c000c422:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c426:	89 c7                	mov    edi,eax
c000c428:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c42c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c430:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c434:	e8 87 a0 01 00       	call   c00264c0 <__muldf3>
c000c439:	83 c4 18             	add    esp,0x18
c000c43c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c440:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c444:	52                   	push   edx
c000c445:	50                   	push   eax
c000c446:	e8 34 f2 ff ff       	call   c000b67f <double_to_fp>
c000c44b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c44e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c452:	83 c4 0c             	add    esp,0xc
c000c455:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c458:	8d 04 90             	lea    eax,[eax+edx*4]
c000c45b:	50                   	push   eax
c000c45c:	50                   	push   eax
c000c45d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c460:	e8 be a6 01 00       	call   c0026b23 <__floatsidf>
c000c465:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c469:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c46d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c471:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c475:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c479:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c47d:	e8 22 a3 01 00       	call   c00267a4 <__divdf3>
c000c482:	83 c4 18             	add    esp,0x18
c000c485:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c489:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c48d:	52                   	push   edx
c000c48e:	89 fa                	mov    edx,edi
c000c490:	50                   	push   eax
c000c491:	89 d8                	mov    eax,ebx
c000c493:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c497:	e8 50 de ff ff       	call   c000a2ec <calc_output_hex>
c000c49c:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c4a0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4a4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4a8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b0:	e8 ef a2 01 00       	call   c00267a4 <__divdf3>
c000c4b5:	83 c4 10             	add    esp,0x10
c000c4b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4bc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4c8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4cc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4d0:	e8 6e 99 01 00       	call   c0025e43 <__adddf3>
c000c4d5:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c4d9:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c4dd:	83 c4 18             	add    esp,0x18
c000c4e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e8:	e8 53 aa 01 00       	call   c0026f40 <lrint>
c000c4ed:	83 ec 0c             	sub    esp,0xc
c000c4f0:	50                   	push   eax
c000c4f1:	e8 2d a6 01 00       	call   c0026b23 <__floatsidf>
c000c4f6:	83 c4 10             	add    esp,0x10
c000c4f9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4fd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c501:	52                   	push   edx
c000c502:	50                   	push   eax
c000c503:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c507:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c50b:	e8 84 9f 01 00       	call   c0026494 <__subdf3>
c000c510:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c514:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c518:	83 c4 20             	add    esp,0x20
c000c51b:	6a 00                	push   0x0
c000c51d:	6a 00                	push   0x0
c000c51f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c523:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c527:	e8 63 a8 01 00       	call   c0026d8f <__ltdf2>
c000c52c:	83 c4 10             	add    esp,0x10
c000c52f:	85 c0                	test   eax,eax
c000c531:	79 20                	jns    c000c553 <sinc_hex_vari_process+0x66f>
c000c533:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c537:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c53b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c53f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c543:	e8 fb 98 01 00       	call   c0025e43 <__adddf3>
c000c548:	83 c4 10             	add    esp,0x10
c000c54b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c54f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c553:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c556:	83 ec 10             	sub    esp,0x10
c000c559:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c55d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c560:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c564:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c568:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c56c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c570:	e8 1f 9f 01 00       	call   c0026494 <__subdf3>
c000c575:	83 c4 18             	add    esp,0x18
c000c578:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c57c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	e8 b9 a9 01 00       	call   c0026f40 <lrint>
c000c587:	0f af f8             	imul   edi,eax
c000c58a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c58e:	83 c4 10             	add    esp,0x10
c000c591:	01 f8                	add    eax,edi
c000c593:	99                   	cdq    
c000c594:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c597:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c59a:	e9 fd fb ff ff       	jmp    c000c19c <sinc_hex_vari_process+0x2b8>
c000c59f:	83 c4 4c             	add    esp,0x4c
c000c5a2:	89 d0                	mov    eax,edx
c000c5a4:	5b                   	pop    ebx
c000c5a5:	5e                   	pop    esi
c000c5a6:	5f                   	pop    edi
c000c5a7:	5d                   	pop    ebp
c000c5a8:	c3                   	ret    

c000c5a9 <sinc_quad_vari_process>:
c000c5a9:	55                   	push   ebp
c000c5aa:	ba 05 00 00 00       	mov    edx,0x5
c000c5af:	57                   	push   edi
c000c5b0:	56                   	push   esi
c000c5b1:	53                   	push   ebx
c000c5b2:	83 ec 4c             	sub    esp,0x4c
c000c5b5:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c5b9:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c5bd:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c5c0:	85 db                	test   ebx,ebx
c000c5c2:	0f 84 9c 06 00 00    	je     c000cc64 <sinc_quad_vari_process+0x6bb>
c000c5c8:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c5cb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c5ce:	0f af c7             	imul   eax,edi
c000c5d1:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c5d4:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c5d7:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c5de:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c5e5:	0f af c7             	imul   eax,edi
c000c5e8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c5eb:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c5ee:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c5f1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f9:	68 00 00 70 3f       	push   0x3f700000
c000c5fe:	6a 00                	push   0x0
c000c600:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c604:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c608:	e8 82 a7 01 00       	call   c0026d8f <__ltdf2>
c000c60d:	83 c4 10             	add    esp,0x10
c000c610:	ba 16 00 00 00       	mov    edx,0x16
c000c615:	85 c0                	test   eax,eax
c000c617:	0f 88 47 06 00 00    	js     c000cc64 <sinc_quad_vari_process+0x6bb>
c000c61d:	68 00 00 70 40       	push   0x40700000
c000c622:	6a 00                	push   0x0
c000c624:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c628:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c62c:	e8 40 a7 01 00       	call   c0026d71 <__gtdf2>
c000c631:	83 c4 10             	add    esp,0x10
c000c634:	ba 16 00 00 00       	mov    edx,0x16
c000c639:	85 c0                	test   eax,eax
c000c63b:	0f 8f 23 06 00 00    	jg     c000cc64 <sinc_quad_vari_process+0x6bb>
c000c641:	83 ec 0c             	sub    esp,0xc
c000c644:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c647:	e8 d7 a4 01 00       	call   c0026b23 <__floatsidf>
c000c64c:	83 c4 10             	add    esp,0x10
c000c64f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c653:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c657:	68 00 00 00 40       	push   0x40000000
c000c65c:	6a 00                	push   0x0
c000c65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c662:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c666:	e8 d8 97 01 00       	call   c0025e43 <__adddf3>
c000c66b:	59                   	pop    ecx
c000c66c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c670:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c674:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c677:	e8 a7 a4 01 00       	call   c0026b23 <__floatsidf>
c000c67c:	83 c4 10             	add    esp,0x10
c000c67f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c683:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c687:	52                   	push   edx
c000c688:	50                   	push   eax
c000c689:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c68d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c691:	e8 0e a1 01 00       	call   c00267a4 <__divdf3>
c000c696:	83 c4 10             	add    esp,0x10
c000c699:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c69d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c6a1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c6a4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c6a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c6ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c6af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6bf:	e8 ad a6 01 00       	call   c0026d71 <__gtdf2>
c000c6c4:	83 c4 10             	add    esp,0x10
c000c6c7:	85 c0                	test   eax,eax
c000c6c9:	7e 2d                	jle    c000c6f8 <sinc_quad_vari_process+0x14f>
c000c6cb:	68 00 00 f0 3f       	push   0x3ff00000
c000c6d0:	6a 00                	push   0x0
c000c6d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	e8 b0 a6 01 00       	call   c0026d8f <__ltdf2>
c000c6df:	83 c4 10             	add    esp,0x10
c000c6e2:	85 c0                	test   eax,eax
c000c6e4:	79 4d                	jns    c000c733 <sinc_quad_vari_process+0x18a>
c000c6e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c6ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c6f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c6f6:	eb 1b                	jmp    c000c713 <sinc_quad_vari_process+0x16a>
c000c6f8:	68 00 00 f0 3f       	push   0x3ff00000
c000c6fd:	6a 00                	push   0x0
c000c6ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c703:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c707:	e8 83 a6 01 00       	call   c0026d8f <__ltdf2>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	85 c0                	test   eax,eax
c000c711:	79 20                	jns    c000c733 <sinc_quad_vari_process+0x18a>
c000c713:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c717:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c71b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c71f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c723:	e8 7c a0 01 00       	call   c00267a4 <__divdf3>
c000c728:	83 c4 10             	add    esp,0x10
c000c72b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c72f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c733:	50                   	push   eax
c000c734:	50                   	push   eax
c000c735:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c739:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c73d:	e8 fe a7 01 00       	call   c0026f40 <lrint>
c000c742:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c745:	40                   	inc    eax
c000c746:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c74a:	0f af c7             	imul   eax,edi
c000c74d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c751:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c754:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c758:	58                   	pop    eax
c000c759:	5a                   	pop    edx
c000c75a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c75e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c762:	e8 d9 a7 01 00       	call   c0026f40 <lrint>
c000c767:	83 ec 0c             	sub    esp,0xc
c000c76a:	50                   	push   eax
c000c76b:	e8 b3 a3 01 00       	call   c0026b23 <__floatsidf>
c000c770:	83 c4 10             	add    esp,0x10
c000c773:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c777:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c77b:	52                   	push   edx
c000c77c:	50                   	push   eax
c000c77d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c781:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c785:	e8 0a 9d 01 00       	call   c0026494 <__subdf3>
c000c78a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	83 c4 20             	add    esp,0x20
c000c795:	6a 00                	push   0x0
c000c797:	6a 00                	push   0x0
c000c799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7a1:	e8 e9 a5 01 00       	call   c0026d8f <__ltdf2>
c000c7a6:	83 c4 10             	add    esp,0x10
c000c7a9:	85 c0                	test   eax,eax
c000c7ab:	79 1f                	jns    c000c7cc <sinc_quad_vari_process+0x223>
c000c7ad:	68 00 00 f0 3f       	push   0x3ff00000
c000c7b2:	6a 00                	push   0x0
c000c7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7bc:	e8 82 96 01 00       	call   c0025e43 <__adddf3>
c000c7c1:	83 c4 10             	add    esp,0x10
c000c7c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7cc:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7cf:	83 ec 10             	sub    esp,0x10
c000c7d2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c7d6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7e1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7e5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7e9:	e8 a6 9c 01 00       	call   c0026494 <__subdf3>
c000c7ee:	83 c4 18             	add    esp,0x18
c000c7f1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c7f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c7f9:	52                   	push   edx
c000c7fa:	50                   	push   eax
c000c7fb:	e8 40 a7 01 00       	call   c0026f40 <lrint>
c000c800:	0f af f8             	imul   edi,eax
c000c803:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c807:	01 f8                	add    eax,edi
c000c809:	99                   	cdq    
c000c80a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c80d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c810:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c814:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c818:	68 00 00 f0 3f       	push   0x3ff00000
c000c81d:	6a 00                	push   0x0
c000c81f:	e8 80 9f 01 00       	call   c00267a4 <__divdf3>
c000c824:	83 c4 10             	add    esp,0x10
c000c827:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c82b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c82f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c834:	68 23 42 92 0c       	push   0xc924223
c000c839:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c83d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c841:	e8 fd 95 01 00       	call   c0025e43 <__adddf3>
c000c846:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c84a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c84e:	83 c4 20             	add    esp,0x20
c000c851:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c859:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c861:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c864:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c867:	7d 50                	jge    c000c8b9 <sinc_quad_vari_process+0x310>
c000c869:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c86c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c86f:	01 c8                	add    eax,ecx
c000c871:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c874:	99                   	cdq    
c000c875:	f7 f9                	idiv   ecx
c000c877:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c87b:	7d 0c                	jge    c000c889 <sinc_quad_vari_process+0x2e0>
c000c87d:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c880:	85 ff                	test   edi,edi
c000c882:	79 6c                	jns    c000c8f0 <sinc_quad_vari_process+0x347>
c000c884:	e9 e7 00 00 00       	jmp    c000c970 <sinc_quad_vari_process+0x3c7>
c000c889:	50                   	push   eax
c000c88a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c88e:	56                   	push   esi
c000c88f:	53                   	push   ebx
c000c890:	e8 11 ee ff ff       	call   c000b6a6 <prepare_data>
c000c895:	83 c4 10             	add    esp,0x10
c000c898:	89 c2                	mov    edx,eax
c000c89a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c89d:	85 c0                	test   eax,eax
c000c89f:	0f 85 bf 03 00 00    	jne    c000cc64 <sinc_quad_vari_process+0x6bb>
c000c8a5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c8a8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c8ab:	01 c8                	add    eax,ecx
c000c8ad:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c8b0:	99                   	cdq    
c000c8b1:	f7 f9                	idiv   ecx
c000c8b3:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c8b7:	7c c4                	jl     c000c87d <sinc_quad_vari_process+0x2d4>
c000c8b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c8bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c8c1:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c8c4:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c8cf:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c8d2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c8d5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c8d8:	99                   	cdq    
c000c8d9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c8dc:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c8df:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c8e2:	99                   	cdq    
c000c8e3:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c8e6:	31 d2                	xor    edx,edx
c000c8e8:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c8eb:	e9 74 03 00 00       	jmp    c000cc64 <sinc_quad_vari_process+0x6bb>
c000c8f0:	83 ec 0c             	sub    esp,0xc
c000c8f3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c8f6:	e8 28 a2 01 00       	call   c0026b23 <__floatsidf>
c000c8fb:	83 c4 10             	add    esp,0x10
c000c8fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c902:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c906:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c90a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c90e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c912:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c916:	e8 28 95 01 00       	call   c0025e43 <__adddf3>
c000c91b:	83 c4 10             	add    esp,0x10
c000c91e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c922:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c926:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c92a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c92e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c932:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c936:	e8 08 95 01 00       	call   c0025e43 <__adddf3>
c000c93b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c93e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c942:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c946:	e8 d8 a1 01 00       	call   c0026b23 <__floatsidf>
c000c94b:	83 c4 10             	add    esp,0x10
c000c94e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c952:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c956:	52                   	push   edx
c000c957:	50                   	push   eax
c000c958:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c95c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c960:	e8 28 a4 01 00       	call   c0026d8d <__gedf2>
c000c965:	83 c4 10             	add    esp,0x10
c000c968:	85 c0                	test   eax,eax
c000c96a:	0f 89 49 ff ff ff    	jns    c000c8b9 <sinc_quad_vari_process+0x310>
c000c970:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c974:	0f 8e ef 00 00 00    	jle    c000ca69 <sinc_quad_vari_process+0x4c0>
c000c97a:	83 ec 10             	sub    esp,0x10
c000c97d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c980:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c983:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c986:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c989:	e8 06 9b 01 00       	call   c0026494 <__subdf3>
c000c98e:	83 c4 18             	add    esp,0x18
c000c991:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c995:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c999:	52                   	push   edx
c000c99a:	50                   	push   eax
c000c99b:	e8 80 a5 01 00       	call   c0026f20 <fabs>
c000c9a0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9a4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c9a8:	83 c4 10             	add    esp,0x10
c000c9ab:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c9b0:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c9b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9bd:	e8 af a3 01 00       	call   c0026d71 <__gtdf2>
c000c9c2:	83 c4 10             	add    esp,0x10
c000c9c5:	85 c0                	test   eax,eax
c000c9c7:	0f 8e 9c 00 00 00    	jle    c000ca69 <sinc_quad_vari_process+0x4c0>
c000c9cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c9d0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c9d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c9d7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c9db:	52                   	push   edx
c000c9dc:	50                   	push   eax
c000c9dd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c9e0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c9e3:	e8 ac 9a 01 00       	call   c0026494 <__subdf3>
c000c9e8:	59                   	pop    ecx
c000c9e9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c9ed:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c9f1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c9f4:	e8 2a a1 01 00       	call   c0026b23 <__floatsidf>
c000c9f9:	83 c4 10             	add    esp,0x10
c000c9fc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca00:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca04:	52                   	push   edx
c000ca05:	50                   	push   eax
c000ca06:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca0e:	e8 ad 9a 01 00       	call   c00264c0 <__muldf3>
c000ca13:	5f                   	pop    edi
c000ca14:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ca18:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ca1c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ca1f:	e8 ff a0 01 00       	call   c0026b23 <__floatsidf>
c000ca24:	83 c4 10             	add    esp,0x10
c000ca27:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca2b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca2f:	52                   	push   edx
c000ca30:	50                   	push   eax
c000ca31:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca39:	e8 66 9d 01 00       	call   c00267a4 <__divdf3>
c000ca3e:	83 c4 10             	add    esp,0x10
c000ca41:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca45:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca59:	e8 e5 93 01 00       	call   c0025e43 <__adddf3>
c000ca5e:	83 c4 10             	add    esp,0x10
c000ca61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca65:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca69:	83 ec 0c             	sub    esp,0xc
c000ca6c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ca6f:	e8 af a0 01 00       	call   c0026b23 <__floatsidf>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca8f:	e8 fb a2 01 00       	call   c0026d8f <__ltdf2>
c000ca94:	83 c4 10             	add    esp,0x10
c000ca97:	85 c0                	test   eax,eax
c000ca99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ca9d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000caa1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000caa5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000caa9:	78 10                	js     c000cabb <sinc_quad_vari_process+0x512>
c000caab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000caaf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cab3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cab7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cabb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cabf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cac3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cac7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cacb:	e8 f0 99 01 00       	call   c00264c0 <__muldf3>
c000cad0:	59                   	pop    ecx
c000cad1:	5f                   	pop    edi
c000cad2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cad6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cada:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cade:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cae2:	e8 98 eb ff ff       	call   c000b67f <double_to_fp>
c000cae7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000caeb:	89 c7                	mov    edi,eax
c000caed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000caf1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000caf5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000caf9:	e8 c2 99 01 00       	call   c00264c0 <__muldf3>
c000cafe:	83 c4 18             	add    esp,0x18
c000cb01:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb05:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb09:	52                   	push   edx
c000cb0a:	50                   	push   eax
c000cb0b:	e8 6f eb ff ff       	call   c000b67f <double_to_fp>
c000cb10:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cb13:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cb17:	83 c4 0c             	add    esp,0xc
c000cb1a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cb1d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cb20:	50                   	push   eax
c000cb21:	50                   	push   eax
c000cb22:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cb25:	e8 f9 9f 01 00       	call   c0026b23 <__floatsidf>
c000cb2a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cb2e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cb32:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb36:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb3a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb3e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb42:	e8 5d 9c 01 00       	call   c00267a4 <__divdf3>
c000cb47:	83 c4 18             	add    esp,0x18
c000cb4a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb4e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb52:	52                   	push   edx
c000cb53:	89 fa                	mov    edx,edi
c000cb55:	50                   	push   eax
c000cb56:	89 d8                	mov    eax,ebx
c000cb58:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cb5c:	e8 a5 d1 ff ff       	call   c0009d06 <calc_output_quad>
c000cb61:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cb65:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb69:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb75:	e8 2a 9c 01 00       	call   c00267a4 <__divdf3>
c000cb7a:	83 c4 10             	add    esp,0x10
c000cb7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb81:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb8d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb91:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb95:	e8 a9 92 01 00       	call   c0025e43 <__adddf3>
c000cb9a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cb9e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cba2:	83 c4 18             	add    esp,0x18
c000cba5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cba9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbad:	e8 8e a3 01 00       	call   c0026f40 <lrint>
c000cbb2:	83 ec 0c             	sub    esp,0xc
c000cbb5:	50                   	push   eax
c000cbb6:	e8 68 9f 01 00       	call   c0026b23 <__floatsidf>
c000cbbb:	83 c4 10             	add    esp,0x10
c000cbbe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cbc2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cbc6:	52                   	push   edx
c000cbc7:	50                   	push   eax
c000cbc8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbcc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbd0:	e8 bf 98 01 00       	call   c0026494 <__subdf3>
c000cbd5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbd9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbdd:	83 c4 20             	add    esp,0x20
c000cbe0:	6a 00                	push   0x0
c000cbe2:	6a 00                	push   0x0
c000cbe4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbe8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbec:	e8 9e a1 01 00       	call   c0026d8f <__ltdf2>
c000cbf1:	83 c4 10             	add    esp,0x10
c000cbf4:	85 c0                	test   eax,eax
c000cbf6:	79 20                	jns    c000cc18 <sinc_quad_vari_process+0x66f>
c000cbf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc08:	e8 36 92 01 00       	call   c0025e43 <__adddf3>
c000cc0d:	83 c4 10             	add    esp,0x10
c000cc10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc18:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cc1b:	83 ec 10             	sub    esp,0x10
c000cc1e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cc22:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc2d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc31:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc35:	e8 5a 98 01 00       	call   c0026494 <__subdf3>
c000cc3a:	83 c4 18             	add    esp,0x18
c000cc3d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc41:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	e8 f4 a2 01 00       	call   c0026f40 <lrint>
c000cc4c:	0f af f8             	imul   edi,eax
c000cc4f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cc53:	83 c4 10             	add    esp,0x10
c000cc56:	01 f8                	add    eax,edi
c000cc58:	99                   	cdq    
c000cc59:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cc5c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cc5f:	e9 fd fb ff ff       	jmp    c000c861 <sinc_quad_vari_process+0x2b8>
c000cc64:	83 c4 4c             	add    esp,0x4c
c000cc67:	89 d0                	mov    eax,edx
c000cc69:	5b                   	pop    ebx
c000cc6a:	5e                   	pop    esi
c000cc6b:	5f                   	pop    edi
c000cc6c:	5d                   	pop    ebp
c000cc6d:	c3                   	ret    

c000cc6e <sinc_stereo_vari_process>:
c000cc6e:	55                   	push   ebp
c000cc6f:	ba 05 00 00 00       	mov    edx,0x5
c000cc74:	57                   	push   edi
c000cc75:	56                   	push   esi
c000cc76:	53                   	push   ebx
c000cc77:	83 ec 4c             	sub    esp,0x4c
c000cc7a:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cc7e:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000cc82:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000cc85:	85 db                	test   ebx,ebx
c000cc87:	0f 84 9c 06 00 00    	je     c000d329 <sinc_stereo_vari_process+0x6bb>
c000cc8d:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cc90:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc93:	0f af c7             	imul   eax,edi
c000cc96:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cc99:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cc9c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cca3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ccaa:	0f af c7             	imul   eax,edi
c000ccad:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ccb0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ccb3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ccb6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccbe:	68 00 00 70 3f       	push   0x3f700000
c000ccc3:	6a 00                	push   0x0
c000ccc5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cccd:	e8 bd a0 01 00       	call   c0026d8f <__ltdf2>
c000ccd2:	83 c4 10             	add    esp,0x10
c000ccd5:	ba 16 00 00 00       	mov    edx,0x16
c000ccda:	85 c0                	test   eax,eax
c000ccdc:	0f 88 47 06 00 00    	js     c000d329 <sinc_stereo_vari_process+0x6bb>
c000cce2:	68 00 00 70 40       	push   0x40700000
c000cce7:	6a 00                	push   0x0
c000cce9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cced:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccf1:	e8 7b a0 01 00       	call   c0026d71 <__gtdf2>
c000ccf6:	83 c4 10             	add    esp,0x10
c000ccf9:	ba 16 00 00 00       	mov    edx,0x16
c000ccfe:	85 c0                	test   eax,eax
c000cd00:	0f 8f 23 06 00 00    	jg     c000d329 <sinc_stereo_vari_process+0x6bb>
c000cd06:	83 ec 0c             	sub    esp,0xc
c000cd09:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cd0c:	e8 12 9e 01 00       	call   c0026b23 <__floatsidf>
c000cd11:	83 c4 10             	add    esp,0x10
c000cd14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cd1c:	68 00 00 00 40       	push   0x40000000
c000cd21:	6a 00                	push   0x0
c000cd23:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd27:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd2b:	e8 13 91 01 00       	call   c0025e43 <__adddf3>
c000cd30:	59                   	pop    ecx
c000cd31:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd35:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cd39:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3c:	e8 e2 9d 01 00       	call   c0026b23 <__floatsidf>
c000cd41:	83 c4 10             	add    esp,0x10
c000cd44:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd48:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd4c:	52                   	push   edx
c000cd4d:	50                   	push   eax
c000cd4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd56:	e8 49 9a 01 00       	call   c00267a4 <__divdf3>
c000cd5b:	83 c4 10             	add    esp,0x10
c000cd5e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd62:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd66:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cd69:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cd6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cd74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd84:	e8 e8 9f 01 00       	call   c0026d71 <__gtdf2>
c000cd89:	83 c4 10             	add    esp,0x10
c000cd8c:	85 c0                	test   eax,eax
c000cd8e:	7e 2d                	jle    c000cdbd <sinc_stereo_vari_process+0x14f>
c000cd90:	68 00 00 f0 3f       	push   0x3ff00000
c000cd95:	6a 00                	push   0x0
c000cd97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	e8 eb 9f 01 00       	call   c0026d8f <__ltdf2>
c000cda4:	83 c4 10             	add    esp,0x10
c000cda7:	85 c0                	test   eax,eax
c000cda9:	79 4d                	jns    c000cdf8 <sinc_stereo_vari_process+0x18a>
c000cdab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdaf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cdb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cdb7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cdbb:	eb 1b                	jmp    c000cdd8 <sinc_stereo_vari_process+0x16a>
c000cdbd:	68 00 00 f0 3f       	push   0x3ff00000
c000cdc2:	6a 00                	push   0x0
c000cdc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdcc:	e8 be 9f 01 00       	call   c0026d8f <__ltdf2>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	85 c0                	test   eax,eax
c000cdd6:	79 20                	jns    c000cdf8 <sinc_stereo_vari_process+0x18a>
c000cdd8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cddc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cde0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cde4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cde8:	e8 b7 99 01 00       	call   c00267a4 <__divdf3>
c000cded:	83 c4 10             	add    esp,0x10
c000cdf0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdf4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cdf8:	50                   	push   eax
c000cdf9:	50                   	push   eax
c000cdfa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdfe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce02:	e8 39 a1 01 00       	call   c0026f40 <lrint>
c000ce07:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000ce0a:	40                   	inc    eax
c000ce0b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce0f:	0f af c7             	imul   eax,edi
c000ce12:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ce16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce19:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce1d:	58                   	pop    eax
c000ce1e:	5a                   	pop    edx
c000ce1f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce23:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce27:	e8 14 a1 01 00       	call   c0026f40 <lrint>
c000ce2c:	83 ec 0c             	sub    esp,0xc
c000ce2f:	50                   	push   eax
c000ce30:	e8 ee 9c 01 00       	call   c0026b23 <__floatsidf>
c000ce35:	83 c4 10             	add    esp,0x10
c000ce38:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce3c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce40:	52                   	push   edx
c000ce41:	50                   	push   eax
c000ce42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce4a:	e8 45 96 01 00       	call   c0026494 <__subdf3>
c000ce4f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	83 c4 20             	add    esp,0x20
c000ce5a:	6a 00                	push   0x0
c000ce5c:	6a 00                	push   0x0
c000ce5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce62:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce66:	e8 24 9f 01 00       	call   c0026d8f <__ltdf2>
c000ce6b:	83 c4 10             	add    esp,0x10
c000ce6e:	85 c0                	test   eax,eax
c000ce70:	79 1f                	jns    c000ce91 <sinc_stereo_vari_process+0x223>
c000ce72:	68 00 00 f0 3f       	push   0x3ff00000
c000ce77:	6a 00                	push   0x0
c000ce79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce81:	e8 bd 8f 01 00       	call   c0025e43 <__adddf3>
c000ce86:	83 c4 10             	add    esp,0x10
c000ce89:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce8d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce91:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce94:	83 ec 10             	sub    esp,0x10
c000ce97:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ce9b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cea2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cea6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ceaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ceae:	e8 e1 95 01 00       	call   c0026494 <__subdf3>
c000ceb3:	83 c4 18             	add    esp,0x18
c000ceb6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ceba:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cebe:	52                   	push   edx
c000cebf:	50                   	push   eax
c000cec0:	e8 7b a0 01 00       	call   c0026f40 <lrint>
c000cec5:	0f af f8             	imul   edi,eax
c000cec8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cecc:	01 f8                	add    eax,edi
c000cece:	99                   	cdq    
c000cecf:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ced2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ced5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ced9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cedd:	68 00 00 f0 3f       	push   0x3ff00000
c000cee2:	6a 00                	push   0x0
c000cee4:	e8 bb 98 01 00       	call   c00267a4 <__divdf3>
c000cee9:	83 c4 10             	add    esp,0x10
c000ceec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cef0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cef4:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000cef9:	68 23 42 92 0c       	push   0xc924223
c000cefe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf02:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf06:	e8 38 8f 01 00       	call   c0025e43 <__adddf3>
c000cf0b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000cf0f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000cf13:	83 c4 20             	add    esp,0x20
c000cf16:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cf1e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cf26:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cf29:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cf2c:	7d 50                	jge    c000cf7e <sinc_stereo_vari_process+0x310>
c000cf2e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cf31:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cf34:	01 c8                	add    eax,ecx
c000cf36:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cf39:	99                   	cdq    
c000cf3a:	f7 f9                	idiv   ecx
c000cf3c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cf40:	7d 0c                	jge    c000cf4e <sinc_stereo_vari_process+0x2e0>
c000cf42:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cf45:	85 ff                	test   edi,edi
c000cf47:	79 6c                	jns    c000cfb5 <sinc_stereo_vari_process+0x347>
c000cf49:	e9 e7 00 00 00       	jmp    c000d035 <sinc_stereo_vari_process+0x3c7>
c000cf4e:	50                   	push   eax
c000cf4f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf53:	56                   	push   esi
c000cf54:	53                   	push   ebx
c000cf55:	e8 4c e7 ff ff       	call   c000b6a6 <prepare_data>
c000cf5a:	83 c4 10             	add    esp,0x10
c000cf5d:	89 c2                	mov    edx,eax
c000cf5f:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cf62:	85 c0                	test   eax,eax
c000cf64:	0f 85 bf 03 00 00    	jne    c000d329 <sinc_stereo_vari_process+0x6bb>
c000cf6a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cf6d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cf70:	01 c8                	add    eax,ecx
c000cf72:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cf75:	99                   	cdq    
c000cf76:	f7 f9                	idiv   ecx
c000cf78:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cf7c:	7c c4                	jl     c000cf42 <sinc_stereo_vari_process+0x2d4>
c000cf7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cf82:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cf86:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cf89:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cf8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf90:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cf94:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cf97:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cf9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cf9d:	99                   	cdq    
c000cf9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cfa1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cfa4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cfa7:	99                   	cdq    
c000cfa8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cfab:	31 d2                	xor    edx,edx
c000cfad:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cfb0:	e9 74 03 00 00       	jmp    c000d329 <sinc_stereo_vari_process+0x6bb>
c000cfb5:	83 ec 0c             	sub    esp,0xc
c000cfb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cfbb:	e8 63 9b 01 00       	call   c0026b23 <__floatsidf>
c000cfc0:	83 c4 10             	add    esp,0x10
c000cfc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cfc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cfcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cfcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cfd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfdb:	e8 63 8e 01 00       	call   c0025e43 <__adddf3>
c000cfe0:	83 c4 10             	add    esp,0x10
c000cfe3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cfe7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cfeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cff3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cff7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cffb:	e8 43 8e 01 00       	call   c0025e43 <__adddf3>
c000d000:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d003:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d007:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d00b:	e8 13 9b 01 00       	call   c0026b23 <__floatsidf>
c000d010:	83 c4 10             	add    esp,0x10
c000d013:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d017:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d01b:	52                   	push   edx
c000d01c:	50                   	push   eax
c000d01d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d021:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d025:	e8 63 9d 01 00       	call   c0026d8d <__gedf2>
c000d02a:	83 c4 10             	add    esp,0x10
c000d02d:	85 c0                	test   eax,eax
c000d02f:	0f 89 49 ff ff ff    	jns    c000cf7e <sinc_stereo_vari_process+0x310>
c000d035:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d039:	0f 8e ef 00 00 00    	jle    c000d12e <sinc_stereo_vari_process+0x4c0>
c000d03f:	83 ec 10             	sub    esp,0x10
c000d042:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d045:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d048:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d04b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d04e:	e8 41 94 01 00       	call   c0026494 <__subdf3>
c000d053:	83 c4 18             	add    esp,0x18
c000d056:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d05a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05e:	52                   	push   edx
c000d05f:	50                   	push   eax
c000d060:	e8 bb 9e 01 00       	call   c0026f20 <fabs>
c000d065:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d069:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d06d:	83 c4 10             	add    esp,0x10
c000d070:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d075:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d07a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d07e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d082:	e8 ea 9c 01 00       	call   c0026d71 <__gtdf2>
c000d087:	83 c4 10             	add    esp,0x10
c000d08a:	85 c0                	test   eax,eax
c000d08c:	0f 8e 9c 00 00 00    	jle    c000d12e <sinc_stereo_vari_process+0x4c0>
c000d092:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d095:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d098:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d09c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d0a0:	52                   	push   edx
c000d0a1:	50                   	push   eax
c000d0a2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d0a5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d0a8:	e8 e7 93 01 00       	call   c0026494 <__subdf3>
c000d0ad:	59                   	pop    ecx
c000d0ae:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d0b2:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d0b6:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d0b9:	e8 65 9a 01 00       	call   c0026b23 <__floatsidf>
c000d0be:	83 c4 10             	add    esp,0x10
c000d0c1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0c5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0c9:	52                   	push   edx
c000d0ca:	50                   	push   eax
c000d0cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0d3:	e8 e8 93 01 00       	call   c00264c0 <__muldf3>
c000d0d8:	5f                   	pop    edi
c000d0d9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d0dd:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d0e1:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d0e4:	e8 3a 9a 01 00       	call   c0026b23 <__floatsidf>
c000d0e9:	83 c4 10             	add    esp,0x10
c000d0ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0f4:	52                   	push   edx
c000d0f5:	50                   	push   eax
c000d0f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0fe:	e8 a1 96 01 00       	call   c00267a4 <__divdf3>
c000d103:	83 c4 10             	add    esp,0x10
c000d106:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d112:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d116:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d11a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d11e:	e8 20 8d 01 00       	call   c0025e43 <__adddf3>
c000d123:	83 c4 10             	add    esp,0x10
c000d126:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d12a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d12e:	83 ec 0c             	sub    esp,0xc
c000d131:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d134:	e8 ea 99 01 00       	call   c0026b23 <__floatsidf>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d148:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d14c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d150:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d154:	e8 36 9c 01 00       	call   c0026d8f <__ltdf2>
c000d159:	83 c4 10             	add    esp,0x10
c000d15c:	85 c0                	test   eax,eax
c000d15e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d162:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d166:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d16a:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d16e:	78 10                	js     c000d180 <sinc_stereo_vari_process+0x512>
c000d170:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d174:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d178:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d17c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d180:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d184:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d188:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d18c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d190:	e8 2b 93 01 00       	call   c00264c0 <__muldf3>
c000d195:	59                   	pop    ecx
c000d196:	5f                   	pop    edi
c000d197:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d19b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d19f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1a7:	e8 d3 e4 ff ff       	call   c000b67f <double_to_fp>
c000d1ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1b0:	89 c7                	mov    edi,eax
c000d1b2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1be:	e8 fd 92 01 00       	call   c00264c0 <__muldf3>
c000d1c3:	83 c4 18             	add    esp,0x18
c000d1c6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d1ca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d1ce:	52                   	push   edx
c000d1cf:	50                   	push   eax
c000d1d0:	e8 aa e4 ff ff       	call   c000b67f <double_to_fp>
c000d1d5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d1d8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d1dc:	83 c4 0c             	add    esp,0xc
c000d1df:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d1e2:	8d 04 90             	lea    eax,[eax+edx*4]
c000d1e5:	50                   	push   eax
c000d1e6:	50                   	push   eax
c000d1e7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d1ea:	e8 34 99 01 00       	call   c0026b23 <__floatsidf>
c000d1ef:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d1f3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d1f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1fb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d203:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d207:	e8 98 95 01 00       	call   c00267a4 <__divdf3>
c000d20c:	83 c4 18             	add    esp,0x18
c000d20f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d213:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d217:	52                   	push   edx
c000d218:	89 fa                	mov    edx,edi
c000d21a:	50                   	push   eax
c000d21b:	89 d8                	mov    eax,ebx
c000d21d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d221:	e8 02 c7 ff ff       	call   c0009928 <calc_output_stereo>
c000d226:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d22a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d22e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d232:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d236:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23a:	e8 65 95 01 00       	call   c00267a4 <__divdf3>
c000d23f:	83 c4 10             	add    esp,0x10
c000d242:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d246:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d24a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d24e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d252:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d256:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d25a:	e8 e4 8b 01 00       	call   c0025e43 <__adddf3>
c000d25f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d263:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d267:	83 c4 18             	add    esp,0x18
c000d26a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d26e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d272:	e8 c9 9c 01 00       	call   c0026f40 <lrint>
c000d277:	83 ec 0c             	sub    esp,0xc
c000d27a:	50                   	push   eax
c000d27b:	e8 a3 98 01 00       	call   c0026b23 <__floatsidf>
c000d280:	83 c4 10             	add    esp,0x10
c000d283:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d28b:	52                   	push   edx
c000d28c:	50                   	push   eax
c000d28d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d291:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d295:	e8 fa 91 01 00       	call   c0026494 <__subdf3>
c000d29a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d29e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2a2:	83 c4 20             	add    esp,0x20
c000d2a5:	6a 00                	push   0x0
c000d2a7:	6a 00                	push   0x0
c000d2a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2b1:	e8 d9 9a 01 00       	call   c0026d8f <__ltdf2>
c000d2b6:	83 c4 10             	add    esp,0x10
c000d2b9:	85 c0                	test   eax,eax
c000d2bb:	79 20                	jns    c000d2dd <sinc_stereo_vari_process+0x66f>
c000d2bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2cd:	e8 71 8b 01 00       	call   c0025e43 <__adddf3>
c000d2d2:	83 c4 10             	add    esp,0x10
c000d2d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d2d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d2dd:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d2e0:	83 ec 10             	sub    esp,0x10
c000d2e3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d2e7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d2ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2f2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2f6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2fa:	e8 95 91 01 00       	call   c0026494 <__subdf3>
c000d2ff:	83 c4 18             	add    esp,0x18
c000d302:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d306:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	e8 2f 9c 01 00       	call   c0026f40 <lrint>
c000d311:	0f af f8             	imul   edi,eax
c000d314:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d318:	83 c4 10             	add    esp,0x10
c000d31b:	01 f8                	add    eax,edi
c000d31d:	99                   	cdq    
c000d31e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d321:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d324:	e9 fd fb ff ff       	jmp    c000cf26 <sinc_stereo_vari_process+0x2b8>
c000d329:	83 c4 4c             	add    esp,0x4c
c000d32c:	89 d0                	mov    eax,edx
c000d32e:	5b                   	pop    ebx
c000d32f:	5e                   	pop    esi
c000d330:	5f                   	pop    edi
c000d331:	5d                   	pop    ebp
c000d332:	c3                   	ret    

c000d333 <sinc_mono_vari_process>:
c000d333:	55                   	push   ebp
c000d334:	ba 05 00 00 00       	mov    edx,0x5
c000d339:	57                   	push   edi
c000d33a:	56                   	push   esi
c000d33b:	53                   	push   ebx
c000d33c:	83 ec 4c             	sub    esp,0x4c
c000d33f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d343:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d347:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d34a:	85 db                	test   ebx,ebx
c000d34c:	0f 84 c1 06 00 00    	je     c000da13 <sinc_mono_vari_process+0x6e0>
c000d352:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d355:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d358:	0f af c7             	imul   eax,edi
c000d35b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d35e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d361:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d368:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d36f:	0f af c7             	imul   eax,edi
c000d372:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d375:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d379:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d37c:	8b 00                	mov    eax,DWORD PTR [eax]
c000d37e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d382:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d386:	68 00 00 70 3f       	push   0x3f700000
c000d38b:	6a 00                	push   0x0
c000d38d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d391:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d395:	e8 f5 99 01 00       	call   c0026d8f <__ltdf2>
c000d39a:	83 c4 10             	add    esp,0x10
c000d39d:	ba 16 00 00 00       	mov    edx,0x16
c000d3a2:	85 c0                	test   eax,eax
c000d3a4:	0f 88 69 06 00 00    	js     c000da13 <sinc_mono_vari_process+0x6e0>
c000d3aa:	68 00 00 70 40       	push   0x40700000
c000d3af:	6a 00                	push   0x0
c000d3b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3b9:	e8 b3 99 01 00       	call   c0026d71 <__gtdf2>
c000d3be:	83 c4 10             	add    esp,0x10
c000d3c1:	ba 16 00 00 00       	mov    edx,0x16
c000d3c6:	85 c0                	test   eax,eax
c000d3c8:	0f 8f 45 06 00 00    	jg     c000da13 <sinc_mono_vari_process+0x6e0>
c000d3ce:	83 ec 0c             	sub    esp,0xc
c000d3d1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d3d4:	e8 4a 97 01 00       	call   c0026b23 <__floatsidf>
c000d3d9:	83 c4 10             	add    esp,0x10
c000d3dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d3e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d3e4:	68 00 00 00 40       	push   0x40000000
c000d3e9:	6a 00                	push   0x0
c000d3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d3f3:	e8 4b 8a 01 00       	call   c0025e43 <__adddf3>
c000d3f8:	59                   	pop    ecx
c000d3f9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d3fd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d401:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d404:	e8 1a 97 01 00       	call   c0026b23 <__floatsidf>
c000d409:	83 c4 10             	add    esp,0x10
c000d40c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d410:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d414:	52                   	push   edx
c000d415:	50                   	push   eax
c000d416:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d41a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d41e:	e8 81 93 01 00       	call   c00267a4 <__divdf3>
c000d423:	83 c4 10             	add    esp,0x10
c000d426:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d42a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d42e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d431:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d434:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d438:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d43c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d440:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d444:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d448:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d44c:	e8 20 99 01 00       	call   c0026d71 <__gtdf2>
c000d451:	83 c4 10             	add    esp,0x10
c000d454:	85 c0                	test   eax,eax
c000d456:	7e 2d                	jle    c000d485 <sinc_mono_vari_process+0x152>
c000d458:	68 00 00 f0 3f       	push   0x3ff00000
c000d45d:	6a 00                	push   0x0
c000d45f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d463:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d467:	e8 23 99 01 00       	call   c0026d8f <__ltdf2>
c000d46c:	83 c4 10             	add    esp,0x10
c000d46f:	85 c0                	test   eax,eax
c000d471:	79 4d                	jns    c000d4c0 <sinc_mono_vari_process+0x18d>
c000d473:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d477:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d47b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d47f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d483:	eb 1b                	jmp    c000d4a0 <sinc_mono_vari_process+0x16d>
c000d485:	68 00 00 f0 3f       	push   0x3ff00000
c000d48a:	6a 00                	push   0x0
c000d48c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d490:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d494:	e8 f6 98 01 00       	call   c0026d8f <__ltdf2>
c000d499:	83 c4 10             	add    esp,0x10
c000d49c:	85 c0                	test   eax,eax
c000d49e:	79 20                	jns    c000d4c0 <sinc_mono_vari_process+0x18d>
c000d4a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4a4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4a8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4b0:	e8 ef 92 01 00       	call   c00267a4 <__divdf3>
c000d4b5:	83 c4 10             	add    esp,0x10
c000d4b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4bc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4c0:	50                   	push   eax
c000d4c1:	50                   	push   eax
c000d4c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ca:	e8 71 9a 01 00       	call   c0026f40 <lrint>
c000d4cf:	40                   	inc    eax
c000d4d0:	0f af c7             	imul   eax,edi
c000d4d3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d4d7:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d4db:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d4de:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d4e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4e9:	58                   	pop    eax
c000d4ea:	5a                   	pop    edx
c000d4eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4f3:	e8 48 9a 01 00       	call   c0026f40 <lrint>
c000d4f8:	83 ec 0c             	sub    esp,0xc
c000d4fb:	50                   	push   eax
c000d4fc:	e8 22 96 01 00       	call   c0026b23 <__floatsidf>
c000d501:	83 c4 10             	add    esp,0x10
c000d504:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d508:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d50c:	52                   	push   edx
c000d50d:	50                   	push   eax
c000d50e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d512:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d516:	e8 79 8f 01 00       	call   c0026494 <__subdf3>
c000d51b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d51f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d523:	83 c4 20             	add    esp,0x20
c000d526:	6a 00                	push   0x0
c000d528:	6a 00                	push   0x0
c000d52a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d52e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d532:	e8 58 98 01 00       	call   c0026d8f <__ltdf2>
c000d537:	83 c4 10             	add    esp,0x10
c000d53a:	85 c0                	test   eax,eax
c000d53c:	79 1f                	jns    c000d55d <sinc_mono_vari_process+0x22a>
c000d53e:	68 00 00 f0 3f       	push   0x3ff00000
c000d543:	6a 00                	push   0x0
c000d545:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d549:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d54d:	e8 f1 88 01 00       	call   c0025e43 <__adddf3>
c000d552:	83 c4 10             	add    esp,0x10
c000d555:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d559:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d55d:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d560:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d563:	83 ec 10             	sub    esp,0x10
c000d566:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d56a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d56e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d572:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d576:	e8 19 8f 01 00       	call   c0026494 <__subdf3>
c000d57b:	83 c4 18             	add    esp,0x18
c000d57e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d582:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d586:	52                   	push   edx
c000d587:	50                   	push   eax
c000d588:	e8 b3 99 01 00       	call   c0026f40 <lrint>
c000d58d:	0f af f8             	imul   edi,eax
c000d590:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d593:	31 ff                	xor    edi,edi
c000d595:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d59a:	99                   	cdq    
c000d59b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d59e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d5a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5a9:	55                   	push   ebp
c000d5aa:	57                   	push   edi
c000d5ab:	e8 f4 91 01 00       	call   c00267a4 <__divdf3>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d5b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5bb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d5c0:	68 23 42 92 0c       	push   0xc924223
c000d5c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5c9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5cd:	e8 71 88 01 00       	call   c0025e43 <__adddf3>
c000d5d2:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d5d6:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d5da:	83 c4 20             	add    esp,0x20
c000d5dd:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d5e1:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d5e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d5e8:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d5eb:	7d 54                	jge    c000d641 <sinc_mono_vari_process+0x30e>
c000d5ed:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d5f0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d5f3:	01 c8                	add    eax,ecx
c000d5f5:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d5f8:	99                   	cdq    
c000d5f9:	f7 f9                	idiv   ecx
c000d5fb:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d5ff:	7d 0c                	jge    c000d60d <sinc_mono_vari_process+0x2da>
c000d601:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d604:	85 ff                	test   edi,edi
c000d606:	79 73                	jns    c000d67b <sinc_mono_vari_process+0x348>
c000d608:	e9 ee 00 00 00       	jmp    c000d6fb <sinc_mono_vari_process+0x3c8>
c000d60d:	50                   	push   eax
c000d60e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d612:	56                   	push   esi
c000d613:	53                   	push   ebx
c000d614:	e8 8d e0 ff ff       	call   c000b6a6 <prepare_data>
c000d619:	89 c2                	mov    edx,eax
c000d61b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d625:	85 d2                	test   edx,edx
c000d627:	0f 85 e6 03 00 00    	jne    c000da13 <sinc_mono_vari_process+0x6e0>
c000d62d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d630:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d633:	01 c8                	add    eax,ecx
c000d635:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d638:	99                   	cdq    
c000d639:	f7 f9                	idiv   ecx
c000d63b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d63f:	7c c0                	jl     c000d601 <sinc_mono_vari_process+0x2ce>
c000d641:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d645:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d649:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d64d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d650:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d653:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d657:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d65b:	89 01                	mov    DWORD PTR [ecx],eax
c000d65d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d660:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d663:	99                   	cdq    
c000d664:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d667:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d66a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d66d:	99                   	cdq    
c000d66e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d671:	31 d2                	xor    edx,edx
c000d673:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d676:	e9 98 03 00 00       	jmp    c000da13 <sinc_mono_vari_process+0x6e0>
c000d67b:	83 ec 0c             	sub    esp,0xc
c000d67e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d681:	e8 9d 94 01 00       	call   c0026b23 <__floatsidf>
c000d686:	83 c4 10             	add    esp,0x10
c000d689:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d68d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d691:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d695:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d699:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d69d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6a1:	e8 9d 87 01 00       	call   c0025e43 <__adddf3>
c000d6a6:	83 c4 10             	add    esp,0x10
c000d6a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6b1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6b5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6c1:	e8 7d 87 01 00       	call   c0025e43 <__adddf3>
c000d6c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d6c9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d6cd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d6d1:	e8 4d 94 01 00       	call   c0026b23 <__floatsidf>
c000d6d6:	83 c4 10             	add    esp,0x10
c000d6d9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d6dd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d6e1:	52                   	push   edx
c000d6e2:	50                   	push   eax
c000d6e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6eb:	e8 81 96 01 00       	call   c0026d71 <__gtdf2>
c000d6f0:	83 c4 10             	add    esp,0x10
c000d6f3:	85 c0                	test   eax,eax
c000d6f5:	0f 8f 46 ff ff ff    	jg     c000d641 <sinc_mono_vari_process+0x30e>
c000d6fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d6ff:	0f 8e f5 00 00 00    	jle    c000d7fa <sinc_mono_vari_process+0x4c7>
c000d705:	83 ec 10             	sub    esp,0x10
c000d708:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d70b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d70e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d712:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d715:	ff 30                	push   DWORD PTR [eax]
c000d717:	e8 78 8d 01 00       	call   c0026494 <__subdf3>
c000d71c:	83 c4 18             	add    esp,0x18
c000d71f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d723:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d727:	52                   	push   edx
c000d728:	50                   	push   eax
c000d729:	e8 f2 97 01 00       	call   c0026f20 <fabs>
c000d72e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d732:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d736:	83 c4 10             	add    esp,0x10
c000d739:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d73e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d743:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d747:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d74b:	e8 21 96 01 00       	call   c0026d71 <__gtdf2>
c000d750:	83 c4 10             	add    esp,0x10
c000d753:	85 c0                	test   eax,eax
c000d755:	0f 8e 9f 00 00 00    	jle    c000d7fa <sinc_mono_vari_process+0x4c7>
c000d75b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d75f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d762:	8b 00                	mov    eax,DWORD PTR [eax]
c000d764:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d768:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d76c:	52                   	push   edx
c000d76d:	50                   	push   eax
c000d76e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d771:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d774:	e8 1b 8d 01 00       	call   c0026494 <__subdf3>
c000d779:	5f                   	pop    edi
c000d77a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d77e:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d782:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d785:	e8 99 93 01 00       	call   c0026b23 <__floatsidf>
c000d78a:	83 c4 10             	add    esp,0x10
c000d78d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d791:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d795:	52                   	push   edx
c000d796:	50                   	push   eax
c000d797:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d79b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d79f:	e8 1c 8d 01 00       	call   c00264c0 <__muldf3>
c000d7a4:	5d                   	pop    ebp
c000d7a5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d7a9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d7ad:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d7b0:	e8 6e 93 01 00       	call   c0026b23 <__floatsidf>
c000d7b5:	83 c4 10             	add    esp,0x10
c000d7b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d7bc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d7c0:	52                   	push   edx
c000d7c1:	50                   	push   eax
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ca:	e8 d5 8f 01 00       	call   c00267a4 <__divdf3>
c000d7cf:	83 c4 10             	add    esp,0x10
c000d7d2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7d6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7e2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ea:	e8 54 86 01 00       	call   c0025e43 <__adddf3>
c000d7ef:	83 c4 10             	add    esp,0x10
c000d7f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d7f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d7fa:	83 ec 0c             	sub    esp,0xc
c000d7fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d800:	e8 1e 93 01 00       	call   c0026b23 <__floatsidf>
c000d805:	83 c4 10             	add    esp,0x10
c000d808:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d80c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d810:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d814:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d818:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d81c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d820:	e8 6a 95 01 00       	call   c0026d8f <__ltdf2>
c000d825:	83 c4 10             	add    esp,0x10
c000d828:	85 c0                	test   eax,eax
c000d82a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d82e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000d832:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000d836:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000d83a:	78 10                	js     c000d84c <sinc_mono_vari_process+0x519>
c000d83c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d840:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d844:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d848:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d84c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d850:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d854:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d858:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d85c:	e8 5f 8c 01 00       	call   c00264c0 <__muldf3>
c000d861:	59                   	pop    ecx
c000d862:	5f                   	pop    edi
c000d863:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d867:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d86b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d86f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d873:	e8 07 de ff ff       	call   c000b67f <double_to_fp>
c000d878:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d87c:	89 c7                	mov    edi,eax
c000d87e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d882:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d886:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d88a:	e8 31 8c 01 00       	call   c00264c0 <__muldf3>
c000d88f:	83 c4 18             	add    esp,0x18
c000d892:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d896:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d89a:	52                   	push   edx
c000d89b:	50                   	push   eax
c000d89c:	e8 de dd ff ff       	call   c000b67f <double_to_fp>
c000d8a1:	83 ec 0c             	sub    esp,0xc
c000d8a4:	89 c5                	mov    ebp,eax
c000d8a6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d8a9:	e8 75 92 01 00       	call   c0026b23 <__floatsidf>
c000d8ae:	83 c4 10             	add    esp,0x10
c000d8b1:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8b5:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8b9:	52                   	push   edx
c000d8ba:	50                   	push   eax
c000d8bb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8c3:	e8 dc 8e 01 00       	call   c00267a4 <__divdf3>
c000d8c8:	83 c4 10             	add    esp,0x10
c000d8cb:	89 e9                	mov    ecx,ebp
c000d8cd:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8d1:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8d5:	89 d8                	mov    eax,ebx
c000d8d7:	89 fa                	mov    edx,edi
c000d8d9:	e8 ee bd ff ff       	call   c00096cc <calc_output_single>
c000d8de:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000d8e1:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000d8e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8ec:	52                   	push   edx
c000d8ed:	50                   	push   eax
c000d8ee:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d8f2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d8f6:	e8 c5 8b 01 00       	call   c00264c0 <__muldf3>
c000d8fb:	59                   	pop    ecx
c000d8fc:	59                   	pop    ecx
c000d8fd:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d901:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d905:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d909:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d90d:	e8 81 94 01 00       	call   c0026d93 <__truncdfsf2>
c000d912:	83 c4 10             	add    esp,0x10
c000d915:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000d918:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000d91b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d91f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d923:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d927:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d92b:	e8 74 8e 01 00       	call   c00267a4 <__divdf3>
c000d930:	83 c4 10             	add    esp,0x10
c000d933:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d937:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d93b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d93f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d943:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d947:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d94b:	e8 f3 84 01 00       	call   c0025e43 <__adddf3>
c000d950:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000d954:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d958:	83 c4 18             	add    esp,0x18
c000d95b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d963:	e8 d8 95 01 00       	call   c0026f40 <lrint>
c000d968:	83 ec 0c             	sub    esp,0xc
c000d96b:	50                   	push   eax
c000d96c:	e8 b2 91 01 00       	call   c0026b23 <__floatsidf>
c000d971:	83 c4 10             	add    esp,0x10
c000d974:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d978:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d97c:	52                   	push   edx
c000d97d:	50                   	push   eax
c000d97e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d982:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d986:	e8 09 8b 01 00       	call   c0026494 <__subdf3>
c000d98b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d98f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d993:	83 c4 20             	add    esp,0x20
c000d996:	6a 00                	push   0x0
c000d998:	6a 00                	push   0x0
c000d99a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d99e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9a2:	e8 e8 93 01 00       	call   c0026d8f <__ltdf2>
c000d9a7:	83 c4 10             	add    esp,0x10
c000d9aa:	85 c0                	test   eax,eax
c000d9ac:	79 20                	jns    c000d9ce <sinc_mono_vari_process+0x69b>
c000d9ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9be:	e8 80 84 01 00       	call   c0025e43 <__adddf3>
c000d9c3:	83 c4 10             	add    esp,0x10
c000d9c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d9ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d9ce:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d9d1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d9d4:	83 ec 10             	sub    esp,0x10
c000d9d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9df:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9e3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9e7:	e8 a8 8a 01 00       	call   c0026494 <__subdf3>
c000d9ec:	83 c4 18             	add    esp,0x18
c000d9ef:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9f3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9f7:	52                   	push   edx
c000d9f8:	50                   	push   eax
c000d9f9:	e8 42 95 01 00       	call   c0026f40 <lrint>
c000d9fe:	83 c4 10             	add    esp,0x10
c000da01:	0f af f8             	imul   edi,eax
c000da04:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000da07:	99                   	cdq    
c000da08:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000da0b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000da0e:	e9 d2 fb ff ff       	jmp    c000d5e5 <sinc_mono_vari_process+0x2b2>
c000da13:	83 c4 4c             	add    esp,0x4c
c000da16:	89 d0                	mov    eax,edx
c000da18:	5b                   	pop    ebx
c000da19:	5e                   	pop    esi
c000da1a:	5f                   	pop    edi
c000da1b:	5d                   	pop    ebp
c000da1c:	c3                   	ret    

c000da1d <sinc_get_name>:
c000da1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da21:	31 c0                	xor    eax,eax
c000da23:	83 fa 02             	cmp    edx,0x2
c000da26:	77 07                	ja     c000da2f <sinc_get_name+0x12>
c000da28:	8b 04 95 e4 86 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd791c]
c000da2f:	c3                   	ret    

c000da30 <sinc_get_description>:
c000da30:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da34:	31 c0                	xor    eax,eax
c000da36:	83 fa 02             	cmp    edx,0x2
c000da39:	77 07                	ja     c000da42 <sinc_get_description+0x12>
c000da3b:	8b 04 95 d8 86 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7928]
c000da42:	c3                   	ret    

c000da43 <sinc_set_converter>:
c000da43:	53                   	push   ebx
c000da44:	81 ec 58 08 00 00    	sub    esp,0x858
c000da4a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000da51:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000da54:	85 c0                	test   eax,eax
c000da56:	74 13                	je     c000da6b <sinc_set_converter+0x28>
c000da58:	83 ec 0c             	sub    esp,0xc
c000da5b:	50                   	push   eax
c000da5c:	e8 83 1a 00 00       	call   c000f4e4 <free>
c000da61:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000da68:	83 c4 10             	add    esp,0x10
c000da6b:	50                   	push   eax
c000da6c:	68 44 08 00 00       	push   0x844
c000da71:	6a 00                	push   0x0
c000da73:	8d 44 24 18          	lea    eax,[esp+0x18]
c000da77:	50                   	push   eax
c000da78:	e8 0e 2c ff ff       	call   c000068b <memset>
c000da7d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000da80:	83 c4 10             	add    esp,0x10
c000da83:	b8 0b 00 00 00       	mov    eax,0xb
c000da88:	81 fa 80 00 00 00    	cmp    edx,0x80
c000da8e:	7f 6e                	jg     c000dafe <sinc_set_converter+0xbb>
c000da90:	83 fa 01             	cmp    edx,0x1
c000da93:	75 10                	jne    c000daa5 <sinc_set_converter+0x62>
c000da95:	c7 43 24 33 d3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d333
c000da9c:	c7 43 20 33 d3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d333
c000daa3:	eb 4d                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000daa5:	83 fa 02             	cmp    edx,0x2
c000daa8:	75 10                	jne    c000daba <sinc_set_converter+0x77>
c000daaa:	c7 43 24 6e cc 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cc6e
c000dab1:	c7 43 20 6e cc 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cc6e
c000dab8:	eb 38                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000daba:	83 fa 04             	cmp    edx,0x4
c000dabd:	75 10                	jne    c000dacf <sinc_set_converter+0x8c>
c000dabf:	c7 43 24 a9 c5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c5a9
c000dac6:	c7 43 20 a9 c5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c5a9
c000dacd:	eb 23                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000dacf:	83 fa 06             	cmp    edx,0x6
c000dad2:	75 10                	jne    c000dae4 <sinc_set_converter+0xa1>
c000dad4:	c7 43 24 e4 be 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000bee4
c000dadb:	c7 43 20 e4 be 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000bee4
c000dae2:	eb 0e                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000dae4:	c7 43 24 20 b8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000b820
c000daeb:	c7 43 20 20 b8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000b820
c000daf2:	c7 43 28 d3 aa 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000aad3
c000daf9:	b8 0a 00 00 00       	mov    eax,0xa
c000dafe:	81 c4 58 08 00 00    	add    esp,0x858
c000db04:	5b                   	pop    ebx
c000db05:	c3                   	ret    

c000db06 <zoh_vari_process>:
c000db06:	55                   	push   ebp
c000db07:	31 d2                	xor    edx,edx
c000db09:	57                   	push   edi
c000db0a:	56                   	push   esi
c000db0b:	53                   	push   ebx
c000db0c:	83 ec 3c             	sub    esp,0x3c
c000db0f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000db13:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000db17:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000db1b:	0f 8e 80 06 00 00    	jle    c000e1a1 <zoh_vari_process+0x69b>
c000db21:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000db24:	ba 05 00 00 00       	mov    edx,0x5
c000db29:	85 db                	test   ebx,ebx
c000db2b:	0f 84 70 06 00 00    	je     c000e1a1 <zoh_vari_process+0x69b>
c000db31:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000db34:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000db38:	74 19                	je     c000db53 <zoh_vari_process+0x4d>
c000db3a:	31 d2                	xor    edx,edx
c000db3c:	39 c2                	cmp    edx,eax
c000db3e:	7d 0c                	jge    c000db4c <zoh_vari_process+0x46>
c000db40:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000db42:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000db45:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000db49:	42                   	inc    edx
c000db4a:	eb f0                	jmp    c000db3c <zoh_vari_process+0x36>
c000db4c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000db53:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000db56:	0f af d0             	imul   edx,eax
c000db59:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000db5c:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000db60:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000db67:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000db6a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000db71:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000db74:	8b 07                	mov    eax,DWORD PTR [edi]
c000db76:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000db7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db7e:	68 00 00 70 3f       	push   0x3f700000
c000db83:	6a 00                	push   0x0
c000db85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db8d:	e8 fd 91 01 00       	call   c0026d8f <__ltdf2>
c000db92:	83 c4 10             	add    esp,0x10
c000db95:	ba 16 00 00 00       	mov    edx,0x16
c000db9a:	85 c0                	test   eax,eax
c000db9c:	0f 88 ff 05 00 00    	js     c000e1a1 <zoh_vari_process+0x69b>
c000dba2:	68 00 00 70 40       	push   0x40700000
c000dba7:	6a 00                	push   0x0
c000dba9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb1:	e8 bb 91 01 00       	call   c0026d71 <__gtdf2>
c000dbb6:	83 c4 10             	add    esp,0x10
c000dbb9:	ba 16 00 00 00       	mov    edx,0x16
c000dbbe:	85 c0                	test   eax,eax
c000dbc0:	0f 8f db 05 00 00    	jg     c000e1a1 <zoh_vari_process+0x69b>
c000dbc6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dbc9:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dbcc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dbd4:	68 00 00 f0 3f       	push   0x3ff00000
c000dbd9:	6a 00                	push   0x0
c000dbdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbdf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbe3:	e8 a7 91 01 00       	call   c0026d8f <__ltdf2>
c000dbe8:	83 c4 10             	add    esp,0x10
c000dbeb:	85 c0                	test   eax,eax
c000dbed:	0f 89 da 01 00 00    	jns    c000ddcd <zoh_vari_process+0x2c7>
c000dbf3:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000dbf6:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000dbf9:	0f 8d ce 01 00 00    	jge    c000ddcd <zoh_vari_process+0x2c7>
c000dbff:	83 ec 0c             	sub    esp,0xc
c000dc02:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dc05:	e8 19 8f 01 00       	call   c0026b23 <__floatsidf>
c000dc0a:	83 c4 10             	add    esp,0x10
c000dc0d:	89 04 24             	mov    DWORD PTR [esp],eax
c000dc10:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dc14:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc24:	e8 97 88 01 00       	call   c00264c0 <__muldf3>
c000dc29:	59                   	pop    ecx
c000dc2a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc2e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000dc35:	e8 e9 8e 01 00       	call   c0026b23 <__floatsidf>
c000dc3a:	83 c4 10             	add    esp,0x10
c000dc3d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc41:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc45:	52                   	push   edx
c000dc46:	50                   	push   eax
c000dc47:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc4b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc4f:	e8 ef 81 01 00       	call   c0025e43 <__adddf3>
c000dc54:	59                   	pop    ecx
c000dc55:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc59:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc5d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000dc60:	e8 be 8e 01 00       	call   c0026b23 <__floatsidf>
c000dc65:	83 c4 10             	add    esp,0x10
c000dc68:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc6c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc70:	52                   	push   edx
c000dc71:	50                   	push   eax
c000dc72:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc76:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc7a:	e8 0e 91 01 00       	call   c0026d8d <__gedf2>
c000dc7f:	83 c4 10             	add    esp,0x10
c000dc82:	85 c0                	test   eax,eax
c000dc84:	0f 89 43 01 00 00    	jns    c000ddcd <zoh_vari_process+0x2c7>
c000dc8a:	85 ed                	test   ebp,ebp
c000dc8c:	0f 8e ec 00 00 00    	jle    c000dd7e <zoh_vari_process+0x278>
c000dc92:	83 ec 10             	sub    esp,0x10
c000dc95:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dc98:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dc9b:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000dc9e:	ff 37                	push   DWORD PTR [edi]
c000dca0:	e8 ef 87 01 00       	call   c0026494 <__subdf3>
c000dca5:	83 c4 18             	add    esp,0x18
c000dca8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dcac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dcb0:	52                   	push   edx
c000dcb1:	50                   	push   eax
c000dcb2:	e8 69 92 01 00       	call   c0026f20 <fabs>
c000dcb7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dcbb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dcbf:	83 c4 10             	add    esp,0x10
c000dcc2:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dcc7:	68 23 42 92 0c       	push   0xc924223
c000dccc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcd0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcd4:	e8 98 90 01 00       	call   c0026d71 <__gtdf2>
c000dcd9:	83 c4 10             	add    esp,0x10
c000dcdc:	85 c0                	test   eax,eax
c000dcde:	0f 8e 9a 00 00 00    	jle    c000dd7e <zoh_vari_process+0x278>
c000dce4:	8b 07                	mov    eax,DWORD PTR [edi]
c000dce6:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dce9:	89 04 24             	mov    DWORD PTR [esp],eax
c000dcec:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dcf0:	52                   	push   edx
c000dcf1:	50                   	push   eax
c000dcf2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dcf5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dcf8:	e8 97 87 01 00       	call   c0026494 <__subdf3>
c000dcfd:	59                   	pop    ecx
c000dcfe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd02:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd06:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dd09:	e8 15 8e 01 00       	call   c0026b23 <__floatsidf>
c000dd0e:	83 c4 10             	add    esp,0x10
c000dd11:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd15:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd19:	52                   	push   edx
c000dd1a:	50                   	push   eax
c000dd1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd23:	e8 98 87 01 00       	call   c00264c0 <__muldf3>
c000dd28:	5d                   	pop    ebp
c000dd29:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd2d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd31:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dd34:	e8 ea 8d 01 00       	call   c0026b23 <__floatsidf>
c000dd39:	83 c4 10             	add    esp,0x10
c000dd3c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd40:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd44:	52                   	push   edx
c000dd45:	50                   	push   eax
c000dd46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd4e:	e8 51 8a 01 00       	call   c00267a4 <__divdf3>
c000dd53:	83 c4 10             	add    esp,0x10
c000dd56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd5a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd5e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd62:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd66:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd6e:	e8 d0 80 01 00       	call   c0025e43 <__adddf3>
c000dd73:	83 c4 10             	add    esp,0x10
c000dd76:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd7a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd7e:	31 c0                	xor    eax,eax
c000dd80:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dd83:	7e 13                	jle    c000dd98 <zoh_vari_process+0x292>
c000dd85:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dd89:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dd8c:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dd8f:	40                   	inc    eax
c000dd90:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dd93:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dd96:	eb e8                	jmp    c000dd80 <zoh_vari_process+0x27a>
c000dd98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dda0:	68 00 00 f0 3f       	push   0x3ff00000
c000dda5:	6a 00                	push   0x0
c000dda7:	e8 f8 89 01 00       	call   c00267a4 <__divdf3>
c000ddac:	83 c4 10             	add    esp,0x10
c000ddaf:	89 04 24             	mov    DWORD PTR [esp],eax
c000ddb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ddb6:	52                   	push   edx
c000ddb7:	50                   	push   eax
c000ddb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddc0:	e8 7e 80 01 00       	call   c0025e43 <__adddf3>
c000ddc5:	83 c4 10             	add    esp,0x10
c000ddc8:	e9 ff fd ff ff       	jmp    c000dbcc <zoh_vari_process+0xc6>
c000ddcd:	55                   	push   ebp
c000ddce:	55                   	push   ebp
c000ddcf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddd7:	e8 64 91 01 00       	call   c0026f40 <lrint>
c000dddc:	83 ec 0c             	sub    esp,0xc
c000dddf:	50                   	push   eax
c000dde0:	e8 3e 8d 01 00       	call   c0026b23 <__floatsidf>
c000dde5:	83 c4 10             	add    esp,0x10
c000dde8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ddec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddf0:	52                   	push   edx
c000ddf1:	50                   	push   eax
c000ddf2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddf6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddfa:	e8 95 86 01 00       	call   c0026494 <__subdf3>
c000ddff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000de03:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000de07:	83 c4 20             	add    esp,0x20
c000de0a:	6a 00                	push   0x0
c000de0c:	6a 00                	push   0x0
c000de0e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de12:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de16:	e8 74 8f 01 00       	call   c0026d8f <__ltdf2>
c000de1b:	83 c4 10             	add    esp,0x10
c000de1e:	85 c0                	test   eax,eax
c000de20:	79 1e                	jns    c000de40 <zoh_vari_process+0x33a>
c000de22:	68 00 00 f0 3f       	push   0x3ff00000
c000de27:	6a 00                	push   0x0
c000de29:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de2d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de31:	e8 0d 80 01 00       	call   c0025e43 <__adddf3>
c000de36:	83 c4 10             	add    esp,0x10
c000de39:	89 04 24             	mov    DWORD PTR [esp],eax
c000de3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de40:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000de43:	83 ec 10             	sub    esp,0x10
c000de46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de4e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de52:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de56:	e8 39 86 01 00       	call   c0026494 <__subdf3>
c000de5b:	83 c4 18             	add    esp,0x18
c000de5e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de62:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de66:	52                   	push   edx
c000de67:	50                   	push   eax
c000de68:	e8 d3 90 01 00       	call   c0026f40 <lrint>
c000de6d:	83 c4 10             	add    esp,0x10
c000de70:	0f af e8             	imul   ebp,eax
c000de73:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000de76:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000de79:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000de7d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000de80:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000de83:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de87:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000de8a:	0f 8d 7a 02 00 00    	jge    c000e10a <zoh_vari_process+0x604>
c000de90:	83 ec 0c             	sub    esp,0xc
c000de93:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de96:	e8 88 8c 01 00       	call   c0026b23 <__floatsidf>
c000de9b:	83 c4 10             	add    esp,0x10
c000de9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dea2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dea6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000deaa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000deae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000deb2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000deb6:	e8 05 86 01 00       	call   c00264c0 <__muldf3>
c000debb:	59                   	pop    ecx
c000debc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000dec0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000dec4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dec8:	e8 56 8c 01 00       	call   c0026b23 <__floatsidf>
c000decd:	83 c4 10             	add    esp,0x10
c000ded0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ded4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ded8:	52                   	push   edx
c000ded9:	50                   	push   eax
c000deda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dede:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dee2:	e8 5c 7f 01 00       	call   c0025e43 <__adddf3>
c000dee7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000deea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000deee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000def2:	e8 2c 8c 01 00       	call   c0026b23 <__floatsidf>
c000def7:	83 c4 10             	add    esp,0x10
c000defa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000defe:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df02:	52                   	push   edx
c000df03:	50                   	push   eax
c000df04:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df08:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df0c:	e8 80 8e 01 00       	call   c0026d91 <__ledf2>
c000df11:	83 c4 10             	add    esp,0x10
c000df14:	85 c0                	test   eax,eax
c000df16:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000df1a:	0f 8f ea 01 00 00    	jg     c000e10a <zoh_vari_process+0x604>
c000df20:	85 c9                	test   ecx,ecx
c000df22:	0f 8e ed 00 00 00    	jle    c000e015 <zoh_vari_process+0x50f>
c000df28:	83 ec 10             	sub    esp,0x10
c000df2b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df2e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df31:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000df34:	ff 37                	push   DWORD PTR [edi]
c000df36:	e8 59 85 01 00       	call   c0026494 <__subdf3>
c000df3b:	83 c4 18             	add    esp,0x18
c000df3e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df42:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df46:	52                   	push   edx
c000df47:	50                   	push   eax
c000df48:	e8 d3 8f 01 00       	call   c0026f20 <fabs>
c000df4d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df51:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df55:	83 c4 10             	add    esp,0x10
c000df58:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df5d:	68 23 42 92 0c       	push   0xc924223
c000df62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df6a:	e8 02 8e 01 00       	call   c0026d71 <__gtdf2>
c000df6f:	83 c4 10             	add    esp,0x10
c000df72:	85 c0                	test   eax,eax
c000df74:	0f 8e 9b 00 00 00    	jle    c000e015 <zoh_vari_process+0x50f>
c000df7a:	8b 07                	mov    eax,DWORD PTR [edi]
c000df7c:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df83:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df87:	52                   	push   edx
c000df88:	50                   	push   eax
c000df89:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df8c:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df8f:	e8 00 85 01 00       	call   c0026494 <__subdf3>
c000df94:	5d                   	pop    ebp
c000df95:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000df99:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000df9d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dfa0:	e8 7e 8b 01 00       	call   c0026b23 <__floatsidf>
c000dfa5:	83 c4 10             	add    esp,0x10
c000dfa8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dfac:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfb0:	52                   	push   edx
c000dfb1:	50                   	push   eax
c000dfb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfba:	e8 01 85 01 00       	call   c00264c0 <__muldf3>
c000dfbf:	59                   	pop    ecx
c000dfc0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dfc4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dfc8:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dfcb:	e8 53 8b 01 00       	call   c0026b23 <__floatsidf>
c000dfd0:	83 c4 10             	add    esp,0x10
c000dfd3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dfd7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfdb:	52                   	push   edx
c000dfdc:	50                   	push   eax
c000dfdd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe5:	e8 ba 87 01 00       	call   c00267a4 <__divdf3>
c000dfea:	83 c4 10             	add    esp,0x10
c000dfed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dff1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dff5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dffd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e001:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e005:	e8 39 7e 01 00       	call   c0025e43 <__adddf3>
c000e00a:	83 c4 10             	add    esp,0x10
c000e00d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e011:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e015:	31 d2                	xor    edx,edx
c000e017:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e01a:	39 d0                	cmp    eax,edx
c000e01c:	7e 1d                	jle    c000e03b <zoh_vari_process+0x535>
c000e01e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e021:	29 c1                	sub    ecx,eax
c000e023:	89 c8                	mov    eax,ecx
c000e025:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e027:	01 d0                	add    eax,edx
c000e029:	42                   	inc    edx
c000e02a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e02d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e030:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e033:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e036:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e039:	eb dc                	jmp    c000e017 <zoh_vari_process+0x511>
c000e03b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	68 00 00 f0 3f       	push   0x3ff00000
c000e048:	6a 00                	push   0x0
c000e04a:	e8 55 87 01 00       	call   c00267a4 <__divdf3>
c000e04f:	83 c4 10             	add    esp,0x10
c000e052:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e056:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e05a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e05e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e062:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e06a:	e8 d4 7d 01 00       	call   c0025e43 <__adddf3>
c000e06f:	5d                   	pop    ebp
c000e070:	59                   	pop    ecx
c000e071:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e075:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e079:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e07d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e081:	e8 ba 8e 01 00       	call   c0026f40 <lrint>
c000e086:	83 ec 0c             	sub    esp,0xc
c000e089:	50                   	push   eax
c000e08a:	e8 94 8a 01 00       	call   c0026b23 <__floatsidf>
c000e08f:	83 c4 10             	add    esp,0x10
c000e092:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e096:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e09a:	52                   	push   edx
c000e09b:	50                   	push   eax
c000e09c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a4:	e8 eb 83 01 00       	call   c0026494 <__subdf3>
c000e0a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0b1:	83 c4 20             	add    esp,0x20
c000e0b4:	6a 00                	push   0x0
c000e0b6:	6a 00                	push   0x0
c000e0b8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0bc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0c0:	e8 ca 8c 01 00       	call   c0026d8f <__ltdf2>
c000e0c5:	83 c4 10             	add    esp,0x10
c000e0c8:	85 c0                	test   eax,eax
c000e0ca:	79 1e                	jns    c000e0ea <zoh_vari_process+0x5e4>
c000e0cc:	68 00 00 f0 3f       	push   0x3ff00000
c000e0d1:	6a 00                	push   0x0
c000e0d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0db:	e8 63 7d 01 00       	call   c0025e43 <__adddf3>
c000e0e0:	83 c4 10             	add    esp,0x10
c000e0e3:	89 04 24             	mov    DWORD PTR [esp],eax
c000e0e6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e0ea:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e0ed:	83 ec 10             	sub    esp,0x10
c000e0f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e100:	e8 8f 83 01 00       	call   c0026494 <__subdf3>
c000e105:	e9 51 fd ff ff       	jmp    c000de5b <zoh_vari_process+0x355>
c000e10a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e10e:	7d 3a                	jge    c000e14a <zoh_vari_process+0x644>
c000e110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e114:	83 ec 0c             	sub    esp,0xc
c000e117:	29 e8                	sub    eax,ebp
c000e119:	99                   	cdq    
c000e11a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e11d:	50                   	push   eax
c000e11e:	e8 00 8a 01 00       	call   c0026b23 <__floatsidf>
c000e123:	83 c4 10             	add    esp,0x10
c000e126:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e12a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e12e:	52                   	push   edx
c000e12f:	50                   	push   eax
c000e130:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e134:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e138:	e8 06 7d 01 00       	call   c0025e43 <__adddf3>
c000e13d:	83 c4 10             	add    esp,0x10
c000e140:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e143:	89 04 24             	mov    DWORD PTR [esp],eax
c000e146:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e14a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e14d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e151:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e154:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e157:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e15a:	85 c0                	test   eax,eax
c000e15c:	7f 25                	jg     c000e183 <zoh_vari_process+0x67d>
c000e15e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e162:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e166:	89 07                	mov    DWORD PTR [edi],eax
c000e168:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e16b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e16e:	99                   	cdq    
c000e16f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e172:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e175:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e178:	99                   	cdq    
c000e179:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e17c:	31 d2                	xor    edx,edx
c000e17e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e181:	eb 1e                	jmp    c000e1a1 <zoh_vari_process+0x69b>
c000e183:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e186:	31 d2                	xor    edx,edx
c000e188:	29 c8                	sub    eax,ecx
c000e18a:	c1 e0 02             	shl    eax,0x2
c000e18d:	39 d1                	cmp    ecx,edx
c000e18f:	7e cd                	jle    c000e15e <zoh_vari_process+0x658>
c000e191:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e193:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e197:	83 c0 04             	add    eax,0x4
c000e19a:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e19e:	42                   	inc    edx
c000e19f:	eb ec                	jmp    c000e18d <zoh_vari_process+0x687>
c000e1a1:	83 c4 3c             	add    esp,0x3c
c000e1a4:	89 d0                	mov    eax,edx
c000e1a6:	5b                   	pop    ebx
c000e1a7:	5e                   	pop    esi
c000e1a8:	5f                   	pop    edi
c000e1a9:	5d                   	pop    ebp
c000e1aa:	c3                   	ret    

c000e1ab <zoh_reset>:
c000e1ab:	83 ec 0c             	sub    esp,0xc
c000e1ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e1b2:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e1b5:	85 c0                	test   eax,eax
c000e1b7:	74 20                	je     c000e1d9 <zoh_reset+0x2e>
c000e1b9:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e1bc:	83 c0 1c             	add    eax,0x1c
c000e1bf:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e1c2:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e1c9:	c1 e2 02             	shl    edx,0x2
c000e1cc:	51                   	push   ecx
c000e1cd:	52                   	push   edx
c000e1ce:	6a 00                	push   0x0
c000e1d0:	50                   	push   eax
c000e1d1:	e8 b5 24 ff ff       	call   c000068b <memset>
c000e1d6:	83 c4 10             	add    esp,0x10
c000e1d9:	83 c4 0c             	add    esp,0xc
c000e1dc:	c3                   	ret    

c000e1dd <zoh_get_name>:
c000e1dd:	31 c0                	xor    eax,eax
c000e1df:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e1e4:	75 05                	jne    c000e1eb <zoh_get_name+0xe>
c000e1e6:	b8 fe 87 02 c0       	mov    eax,0xc00287fe
c000e1eb:	c3                   	ret    

c000e1ec <zoh_get_description>:
c000e1ec:	31 c0                	xor    eax,eax
c000e1ee:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e1f3:	75 05                	jne    c000e1fa <zoh_get_description+0xe>
c000e1f5:	b8 0f 88 02 c0       	mov    eax,0xc002880f
c000e1fa:	c3                   	ret    

c000e1fb <zoh_set_converter>:
c000e1fb:	53                   	push   ebx
c000e1fc:	b8 0a 00 00 00       	mov    eax,0xa
c000e201:	83 ec 08             	sub    esp,0x8
c000e204:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e208:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e20d:	75 6e                	jne    c000e27d <zoh_set_converter+0x82>
c000e20f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e212:	85 c0                	test   eax,eax
c000e214:	74 13                	je     c000e229 <zoh_set_converter+0x2e>
c000e216:	83 ec 0c             	sub    esp,0xc
c000e219:	50                   	push   eax
c000e21a:	e8 c5 12 00 00       	call   c000f4e4 <free>
c000e21f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e226:	83 c4 10             	add    esp,0x10
c000e229:	50                   	push   eax
c000e22a:	50                   	push   eax
c000e22b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e22e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e235:	50                   	push   eax
c000e236:	6a 01                	push   0x1
c000e238:	e8 c7 12 00 00       	call   c000f504 <calloc>
c000e23d:	83 c4 10             	add    esp,0x10
c000e240:	89 c2                	mov    edx,eax
c000e242:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e245:	85 d2                	test   edx,edx
c000e247:	b8 01 00 00 00       	mov    eax,0x1
c000e24c:	74 2f                	je     c000e27d <zoh_set_converter+0x82>
c000e24e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e251:	83 ec 0c             	sub    esp,0xc
c000e254:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e257:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e25d:	c7 43 24 06 db 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000db06
c000e264:	c7 43 20 06 db 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000db06
c000e26b:	c7 43 28 ab e1 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e1ab
c000e272:	53                   	push   ebx
c000e273:	e8 33 ff ff ff       	call   c000e1ab <zoh_reset>
c000e278:	83 c4 10             	add    esp,0x10
c000e27b:	31 c0                	xor    eax,eax
c000e27d:	83 c4 08             	add    esp,0x8
c000e280:	5b                   	pop    ebx
c000e281:	c3                   	ret    

c000e282 <CPU::current()>:
c000e282:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c000e287:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e28d:	90                   	nop
c000e28e:	c3                   	ret    

c000e28f <operator new(unsigned long)>:
c000e28f:	83 ec 0c             	sub    esp,0xc
c000e292:	83 ec 0c             	sub    esp,0xc
c000e295:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e299:	e8 36 12 00 00       	call   c000f4d4 <malloc>
c000e29e:	83 c4 10             	add    esp,0x10
c000e2a1:	83 c4 0c             	add    esp,0xc
c000e2a4:	c3                   	ret    
c000e2a5:	90                   	nop

c000e2a6 <Computer::close(int, int, void*)>:
c000e2a6:	57                   	push   edi
c000e2a7:	56                   	push   esi
c000e2a8:	53                   	push   ebx
c000e2a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e2ad:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e2b1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e2b5:	83 ec 0c             	sub    esp,0xc
c000e2b8:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e2be:	e8 29 59 00 00       	call   c0013bec <Device::closeAll()>
c000e2c3:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e2c9:	83 c4 10             	add    esp,0x10
c000e2cc:	8b 10                	mov    edx,DWORD PTR [eax]
c000e2ce:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e2d2:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e2da:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e2de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e2:	5b                   	pop    ebx
c000e2e3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e2e6:	5e                   	pop    esi
c000e2e7:	5f                   	pop    edi
c000e2e8:	ff e0                	jmp    eax

c000e2ea <Computer::Computer()>:
c000e2ea:	83 ec 0c             	sub    esp,0xc
c000e2ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2f1:	83 ec 08             	sub    esp,0x8
c000e2f4:	68 46 88 02 c0       	push   0xc0028846
c000e2f9:	50                   	push   eax
c000e2fa:	e8 67 59 00 00       	call   c0013c66 <Device::Device(char const*)>
c000e2ff:	83 c4 10             	add    esp,0x10
c000e302:	ba 10 8a 02 c0       	mov    edx,0xc0028a10
c000e307:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e30b:	89 10                	mov    DWORD PTR [eax],edx
c000e30d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e311:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e31b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e31f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e329:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e333:	83 ca 04             	or     edx,0x4
c000e336:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e33c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e340:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e346:	0f b6 d0             	movzx  edx,al
c000e349:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e34d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e354:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e358:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e35e:	0f b6 d0             	movzx  edx,al
c000e361:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e365:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e36a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e36e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e374:	8d 50 01             	lea    edx,[eax+0x1]
c000e377:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e37b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e381:	0f b6 d0             	movzx  edx,al
c000e384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e388:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e38c:	83 e1 3f             	and    ecx,0x3f
c000e38f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e397:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e39d:	0f b6 d0             	movzx  edx,al
c000e3a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3a4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e3ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3af:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3b5:	0f b6 d0             	movzx  edx,al
c000e3b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3bc:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e3c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3c5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3cb:	8d 50 01             	lea    edx,[eax+0x1]
c000e3ce:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e3d2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e3d8:	0f b6 d0             	movzx  edx,al
c000e3db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3df:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e3e3:	83 e1 3f             	and    ecx,0x3f
c000e3e6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e3ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3ee:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3f4:	0f b6 d0             	movzx  edx,al
c000e3f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3fb:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e406:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e40c:	0f b6 d0             	movzx  edx,al
c000e40f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e413:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e41c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e422:	8d 50 01             	lea    edx,[eax+0x1]
c000e425:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e429:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e42f:	0f b6 d0             	movzx  edx,al
c000e432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e436:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e43a:	83 e1 3f             	and    ecx,0x3f
c000e43d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e441:	90                   	nop
c000e442:	83 c4 0c             	add    esp,0xc
c000e445:	c3                   	ret    

c000e446 <Computer::setBootMessage(char const*)>:
c000e446:	c3                   	ret    
c000e447:	90                   	nop

c000e448 <Computer::start()>:
c000e448:	56                   	push   esi
c000e449:	53                   	push   ebx
c000e44a:	83 ec 10             	sub    esp,0x10
c000e44d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e451:	fb                   	sti    
c000e452:	68 3f 07 00 00       	push   0x73f
c000e457:	e8 78 10 00 00       	call   c000f4d4 <malloc>
c000e45c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e463:	89 c6                	mov    esi,eax
c000e465:	ff 35 94 dd 02 c0    	push   DWORD PTR ds:0xc002dd94
c000e46b:	68 4f 88 02 c0       	push   0xc002884f
c000e470:	6a 01                	push   0x1
c000e472:	50                   	push   eax
c000e473:	e8 ec e5 00 00       	call   c001ca64 <Process::Process(bool, char const*, Process*, char**)>
c000e478:	83 c4 20             	add    esp,0x20
c000e47b:	68 ff 00 00 00       	push   0xff
c000e480:	6a 00                	push   0x0
c000e482:	68 69 ee 00 c0       	push   0xc000ee69
c000e487:	56                   	push   esi
c000e488:	e8 d5 e8 00 00       	call   c001cd62 <Process::createThread(void (*)(void*), void*, int)>
c000e48d:	6a 7a                	push   0x7a
c000e48f:	6a 00                	push   0x0
c000e491:	68 c0 d5 01 c0       	push   0xc001d5c0
c000e496:	ff 35 94 dd 02 c0    	push   DWORD PTR ds:0xc002dd94
c000e49c:	e8 c1 e8 00 00       	call   c001cd62 <Process::createThread(void (*)(void*), void*, int)>
c000e4a1:	83 c4 20             	add    esp,0x20
c000e4a4:	a3 48 dd 02 c0       	mov    ds:0xc002dd48,eax
c000e4a9:	e8 93 f4 00 00       	call   c001d941 <Vm::initialise8086()>
c000e4ae:	c6 05 4d c8 02 c0 01 	mov    BYTE PTR ds:0xc002c84d,0x1
c000e4b5:	e8 28 45 00 00       	call   c00129e2 <initVFS()>
c000e4ba:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e4c0:	8b 10                	mov    edx,DWORD PTR [eax]
c000e4c2:	6a 00                	push   0x0
c000e4c4:	6a 00                	push   0x0
c000e4c6:	6a 00                	push   0x0
c000e4c8:	50                   	push   eax
c000e4c9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e4cc:	e8 97 b1 00 00       	call   c0019668 <Krnl::loadSystemEnv()>
c000e4d1:	e8 36 cf 00 00       	call   c001b40c <setupSystemCalls()>
c000e4d6:	e8 19 50 00 00       	call   c00134f4 <loadClockSettings()>
c000e4db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e4de:	e8 dd 56 00 00       	call   c0013bc0 <Device::loadDriversForAll()>
c000e4e3:	58                   	pop    eax
c000e4e4:	8b 1d 48 c8 02 c0    	mov    ebx,DWORD PTR ds:0xc002c848
c000e4ea:	5a                   	pop    edx
c000e4eb:	6a 01                	push   0x1
c000e4ed:	68 5c 88 02 c0       	push   0xc002885c
c000e4f2:	e8 c5 e0 00 00       	call   c001c5bc <Thr::loadDLL(char const*, bool)>
c000e4f7:	59                   	pop    ecx
c000e4f8:	5e                   	pop    esi
c000e4f9:	53                   	push   ebx
c000e4fa:	50                   	push   eax
c000e4fb:	e8 cb e2 00 00       	call   c001c7cb <Thr::executeDLL(unsigned long, void*)>
c000e500:	c7 04 24 b8 9a 02 c0 	mov    DWORD PTR [esp],0xc0029ab8
c000e507:	e8 7b 41 00 00       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c000e50c:	83 c4 10             	add    esp,0x10
c000e50f:	83 ec 0c             	sub    esp,0xc
c000e512:	6a 02                	push   0x2
c000e514:	e8 ad eb 00 00       	call   c001d0c6 <blockTask(TaskState)>
c000e519:	83 c4 10             	add    esp,0x10
c000e51c:	eb f1                	jmp    c000e50f <Computer::start()+0xc7>

c000e51e <firstTask()>:
c000e51e:	83 ec 18             	sub    esp,0x18
c000e521:	ff 35 48 c8 02 c0    	push   DWORD PTR ds:0xc002c848
c000e527:	e8 1c ff ff ff       	call   c000e448 <Computer::start()>

c000e52c <Computer::detectFeatures()>:
c000e52c:	55                   	push   ebp
c000e52d:	57                   	push   edi
c000e52e:	56                   	push   esi
c000e52f:	53                   	push   ebx
c000e530:	83 ec 1c             	sub    esp,0x1c
c000e533:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e537:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e541:	e8 53 1d ff ff       	call   c0000299 <detectCPUID>
c000e546:	85 c0                	test   eax,eax
c000e548:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e54e:	0f 95 c2             	setne  dl
c000e551:	83 e0 fd             	and    eax,0xfffffffd
c000e554:	d1 e2                	shl    edx,1
c000e556:	09 d0                	or     eax,edx
c000e558:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e55e:	a8 02                	test   al,0x2
c000e560:	75 46                	jne    c000e5a8 <Computer::detectFeatures()+0x7c>
c000e562:	f6 05 61 c8 02 c0 04 	test   BYTE PTR ds:0xc002c861,0x4
c000e569:	74 07                	je     c000e572 <Computer::detectFeatures()+0x46>
c000e56b:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e572:	e8 0f 6a 01 00       	call   c0024f86 <x87Detect>
c000e577:	83 e0 01             	and    eax,0x1
c000e57a:	c1 e0 04             	shl    eax,0x4
c000e57d:	88 c2                	mov    dl,al
c000e57f:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e585:	83 e0 ef             	and    eax,0xffffffef
c000e588:	09 d0                	or     eax,edx
c000e58a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e590:	a8 10                	test   al,0x10
c000e592:	0f 85 2a 01 00 00    	jne    c000e6c2 <Computer::detectFeatures()+0x196>
c000e598:	84 c0                	test   al,al
c000e59a:	0f 88 45 01 00 00    	js     c000e6e5 <Computer::detectFeatures()+0x1b9>
c000e5a0:	83 c4 1c             	add    esp,0x1c
c000e5a3:	5b                   	pop    ebx
c000e5a4:	5e                   	pop    esi
c000e5a5:	5f                   	pop    edi
c000e5a6:	5d                   	pop    ebp
c000e5a7:	c3                   	ret    
c000e5a8:	83 ec 0c             	sub    esp,0xc
c000e5ab:	6a 20                	push   0x20
c000e5ad:	e8 78 9a 00 00       	call   c001802a <CPU::cpuidCheckEDX(unsigned int)>
c000e5b2:	83 e0 01             	and    eax,0x1
c000e5b5:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e5bc:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e5c2:	83 e0 f7             	and    eax,0xfffffff7
c000e5c5:	09 d0                	or     eax,edx
c000e5c7:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e5cd:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e5d4:	e8 51 9a 00 00       	call   c001802a <CPU::cpuidCheckEDX(unsigned int)>
c000e5d9:	83 e0 01             	and    eax,0x1
c000e5dc:	88 c2                	mov    dl,al
c000e5de:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e5e4:	83 e0 fe             	and    eax,0xfffffffe
c000e5e7:	09 d0                	or     eax,edx
c000e5e9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e5ef:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e5f6:	e8 2f 9a 00 00       	call   c001802a <CPU::cpuidCheckEDX(unsigned int)>
c000e5fb:	c1 e0 07             	shl    eax,0x7
c000e5fe:	88 c2                	mov    dl,al
c000e600:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e606:	83 e0 7f             	and    eax,0x7f
c000e609:	09 d0                	or     eax,edx
c000e60b:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e611:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e618:	e8 0d 9a 00 00       	call   c001802a <CPU::cpuidCheckEDX(unsigned int)>
c000e61d:	83 c4 10             	add    esp,0x10
c000e620:	83 e0 01             	and    eax,0x1
c000e623:	c1 e0 05             	shl    eax,0x5
c000e626:	88 c2                	mov    dl,al
c000e628:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e62e:	83 e0 df             	and    eax,0xffffffdf
c000e631:	09 d0                	or     eax,edx
c000e633:	f7 05 60 c8 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002c860,0x401
c000e63d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e643:	0f 84 c2 00 00 00    	je     c000e70b <Computer::detectFeatures()+0x1df>
c000e649:	83 e0 fe             	and    eax,0xfffffffe
c000e64c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e652:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e658:	88 c2                	mov    dl,al
c000e65a:	83 e2 09             	and    edx,0x9
c000e65d:	fe ca                	dec    dl
c000e65f:	75 09                	jne    c000e66a <Computer::detectFeatures()+0x13e>
c000e661:	83 e0 fe             	and    eax,0xfffffffe
c000e664:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e66a:	83 ec 0c             	sub    esp,0xc
c000e66d:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e671:	50                   	push   eax
c000e672:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e676:	55                   	push   ebp
c000e677:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e67b:	57                   	push   edi
c000e67c:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e680:	56                   	push   esi
c000e681:	68 00 00 00 80       	push   0x80000000
c000e686:	e8 1b 99 00 00       	call   c0017fa6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e68b:	83 c4 20             	add    esp,0x20
c000e68e:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000e695:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e699:	0f 86 c3 fe ff ff    	jbe    c000e562 <Computer::detectFeatures()+0x36>
c000e69f:	83 ec 0c             	sub    esp,0xc
c000e6a2:	50                   	push   eax
c000e6a3:	55                   	push   ebp
c000e6a4:	57                   	push   edi
c000e6a5:	56                   	push   esi
c000e6a6:	68 01 00 00 80       	push   0x80000001
c000e6ab:	e8 f6 98 00 00       	call   c0017fa6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e6b0:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000e6ba:	83 c4 20             	add    esp,0x20
c000e6bd:	e9 a0 fe ff ff       	jmp    c000e562 <Computer::detectFeatures()+0x36>
c000e6c2:	e8 79 68 01 00       	call   c0024f40 <absolutelyNoChanceInHell>
c000e6c7:	88 c2                	mov    dl,al
c000e6c9:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e6cf:	c1 e2 07             	shl    edx,0x7
c000e6d2:	83 e0 7f             	and    eax,0x7f
c000e6d5:	09 d0                	or     eax,edx
c000e6d7:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e6dd:	84 c0                	test   al,al
c000e6df:	0f 89 bb fe ff ff    	jns    c000e5a0 <Computer::detectFeatures()+0x74>
c000e6e5:	e8 36 68 01 00       	call   c0024f20 <avxDetect>
c000e6ea:	83 e0 01             	and    eax,0x1
c000e6ed:	c1 e0 05             	shl    eax,0x5
c000e6f0:	88 c2                	mov    dl,al
c000e6f2:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e6f8:	83 e0 df             	and    eax,0xffffffdf
c000e6fb:	09 d0                	or     eax,edx
c000e6fd:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e703:	83 c4 1c             	add    esp,0x1c
c000e706:	5b                   	pop    ebx
c000e707:	5e                   	pop    esi
c000e708:	5f                   	pop    edi
c000e709:	5d                   	pop    ebp
c000e70a:	c3                   	ret    
c000e70b:	83 ec 0c             	sub    esp,0xc
c000e70e:	68 00 02 00 00       	push   0x200
c000e713:	e8 12 99 00 00       	call   c001802a <CPU::cpuidCheckEDX(unsigned int)>
c000e718:	83 c4 10             	add    esp,0x10
c000e71b:	83 e0 01             	and    eax,0x1
c000e71e:	88 c2                	mov    dl,al
c000e720:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e726:	83 e0 fe             	and    eax,0xfffffffe
c000e729:	09 d0                	or     eax,edx
c000e72b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e731:	e9 1c ff ff ff       	jmp    c000e652 <Computer::detectFeatures()+0x126>

c000e736 <Computer::displayFeatures()>:
c000e736:	53                   	push   ebx
c000e737:	83 ec 14             	sub    esp,0x14
c000e73a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e73e:	68 7f 88 02 c0       	push   0xc002887f
c000e743:	e8 3f 3f 00 00       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c000e748:	83 c4 10             	add    esp,0x10
c000e74b:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000e752:	0f 85 73 02 00 00    	jne    c000e9cb <Computer::displayFeatures()+0x295>
c000e758:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c000e75d:	83 ec 08             	sub    esp,0x8
c000e760:	50                   	push   eax
c000e761:	68 92 88 02 c0       	push   0xc0028892
c000e766:	e8 1c 3f 00 00       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c000e76b:	83 c4 10             	add    esp,0x10
c000e76e:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000e775:	0f 85 8c 02 00 00    	jne    c000ea07 <Computer::displayFeatures()+0x2d1>
c000e77b:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c000e780:	83 ec 08             	sub    esp,0x8
c000e783:	50                   	push   eax
c000e784:	68 a3 88 02 c0       	push   0xc00288a3
c000e789:	e8 f9 3e 00 00       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c000e78e:	83 c4 10             	add    esp,0x10
c000e791:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000e798:	0f 85 5f 02 00 00    	jne    c000e9fd <Computer::displayFeatures()+0x2c7>
c000e79e:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c000e7a3:	83 ec 08             	sub    esp,0x8
c000e7a6:	50                   	push   eax
c000e7a7:	68 b4 88 02 c0       	push   0xc00288b4
c000e7ac:	e8 d6 3e 00 00       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c000e7b1:	83 c4 10             	add    esp,0x10
c000e7b4:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000e7bb:	0f 85 32 02 00 00    	jne    c000e9f3 <Computer::displayFeatures()+0x2bd>
c000e7c1:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c000e7c6:	83 ec 08             	sub    esp,0x8
c000e7c9:	50                   	push   eax
c000e7ca:	68 c5 88 02 c0       	push   0xc00288c5
c000e7cf:	e8 b3 3e 00 00       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c000e7d4:	83 c4 10             	add    esp,0x10
c000e7d7:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000e7de:	0f 85 05 02 00 00    	jne    c000e9e9 <Computer::displayFeatures()+0x2b3>
c000e7e4:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c000e7e9:	83 ec 08             	sub    esp,0x8
c000e7ec:	50                   	push   eax
c000e7ed:	68 d6 88 02 c0       	push   0xc00288d6
c000e7f2:	e8 90 3e 00 00       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c000e7f7:	83 c4 10             	add    esp,0x10
c000e7fa:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000e801:	0f 85 d8 01 00 00    	jne    c000e9df <Computer::displayFeatures()+0x2a9>
c000e807:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c000e80c:	83 ec 08             	sub    esp,0x8
c000e80f:	50                   	push   eax
c000e810:	68 e7 88 02 c0       	push   0xc00288e7
c000e815:	e8 6d 3e 00 00       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c000e81a:	83 c4 10             	add    esp,0x10
c000e81d:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000e824:	0f 85 ab 01 00 00    	jne    c000e9d5 <Computer::displayFeatures()+0x29f>
c000e82a:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c000e82f:	83 ec 08             	sub    esp,0x8
c000e832:	50                   	push   eax
c000e833:	68 f8 88 02 c0       	push   0xc00288f8
c000e838:	e8 4a 3e 00 00       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c000e83d:	83 c4 10             	add    esp,0x10
c000e840:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000e847:	0f 88 1b 02 00 00    	js     c000ea68 <Computer::displayFeatures()+0x332>
c000e84d:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c000e852:	83 ec 08             	sub    esp,0x8
c000e855:	50                   	push   eax
c000e856:	68 09 89 02 c0       	push   0xc0028909
c000e85b:	e8 27 3e 00 00       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c000e860:	83 c4 10             	add    esp,0x10
c000e863:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000e86a:	0f 85 a1 01 00 00    	jne    c000ea11 <Computer::displayFeatures()+0x2db>
c000e870:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c000e875:	83 ec 08             	sub    esp,0x8
c000e878:	50                   	push   eax
c000e879:	68 1a 89 02 c0       	push   0xc002891a
c000e87e:	e8 04 3e 00 00       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c000e883:	83 c4 10             	add    esp,0x10
c000e886:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000e88d:	0f 85 cb 01 00 00    	jne    c000ea5e <Computer::displayFeatures()+0x328>
c000e893:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c000e898:	83 ec 08             	sub    esp,0x8
c000e89b:	50                   	push   eax
c000e89c:	68 2b 89 02 c0       	push   0xc002892b
c000e8a1:	e8 e1 3d 00 00       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c000e8a6:	83 c4 10             	add    esp,0x10
c000e8a9:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000e8b0:	0f 85 9e 01 00 00    	jne    c000ea54 <Computer::displayFeatures()+0x31e>
c000e8b6:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c000e8bb:	83 ec 08             	sub    esp,0x8
c000e8be:	50                   	push   eax
c000e8bf:	68 3c 89 02 c0       	push   0xc002893c
c000e8c4:	e8 be 3d 00 00       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c000e8c9:	83 c4 10             	add    esp,0x10
c000e8cc:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000e8d3:	0f 85 71 01 00 00    	jne    c000ea4a <Computer::displayFeatures()+0x314>
c000e8d9:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c000e8de:	83 ec 08             	sub    esp,0x8
c000e8e1:	50                   	push   eax
c000e8e2:	68 4d 89 02 c0       	push   0xc002894d
c000e8e7:	e8 9b 3d 00 00       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c000e8ec:	83 c4 10             	add    esp,0x10
c000e8ef:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000e8f6:	0f 85 44 01 00 00    	jne    c000ea40 <Computer::displayFeatures()+0x30a>
c000e8fc:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c000e901:	83 ec 08             	sub    esp,0x8
c000e904:	50                   	push   eax
c000e905:	68 5e 89 02 c0       	push   0xc002895e
c000e90a:	e8 78 3d 00 00       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c000e90f:	83 c4 10             	add    esp,0x10
c000e912:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000e919:	0f 85 17 01 00 00    	jne    c000ea36 <Computer::displayFeatures()+0x300>
c000e91f:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c000e924:	83 ec 08             	sub    esp,0x8
c000e927:	50                   	push   eax
c000e928:	68 6f 89 02 c0       	push   0xc002896f
c000e92d:	e8 55 3d 00 00       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c000e932:	83 c4 10             	add    esp,0x10
c000e935:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000e93c:	0f 85 ea 00 00 00    	jne    c000ea2c <Computer::displayFeatures()+0x2f6>
c000e942:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c000e947:	83 ec 08             	sub    esp,0x8
c000e94a:	50                   	push   eax
c000e94b:	68 80 89 02 c0       	push   0xc0028980
c000e950:	e8 32 3d 00 00       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c000e955:	83 c4 10             	add    esp,0x10
c000e958:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000e95f:	0f 88 0d 01 00 00    	js     c000ea72 <Computer::displayFeatures()+0x33c>
c000e965:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c000e96a:	83 ec 08             	sub    esp,0x8
c000e96d:	50                   	push   eax
c000e96e:	68 91 89 02 c0       	push   0xc0028991
c000e973:	e8 0f 3d 00 00       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c000e978:	83 c4 10             	add    esp,0x10
c000e97b:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000e982:	0f 85 9a 00 00 00    	jne    c000ea22 <Computer::displayFeatures()+0x2ec>
c000e988:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c000e98d:	83 ec 08             	sub    esp,0x8
c000e990:	50                   	push   eax
c000e991:	68 a2 89 02 c0       	push   0xc00289a2
c000e996:	e8 ec 3c 00 00       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c000e99b:	83 c4 10             	add    esp,0x10
c000e99e:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000e9a5:	75 74                	jne    c000ea1b <Computer::displayFeatures()+0x2e5>
c000e9a7:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c000e9ac:	83 ec 08             	sub    esp,0x8
c000e9af:	50                   	push   eax
c000e9b0:	68 b3 89 02 c0       	push   0xc00289b3
c000e9b5:	e8 cd 3c 00 00       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c000e9ba:	c7 44 24 20 5b a1 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a15b
c000e9c2:	83 c4 18             	add    esp,0x18
c000e9c5:	5b                   	pop    ebx
c000e9c6:	e9 bc 3c 00 00       	jmp    c0012687 <Dbg::kprintf(char const*, ...)>
c000e9cb:	b8 78 88 02 c0       	mov    eax,0xc0028878
c000e9d0:	e9 88 fd ff ff       	jmp    c000e75d <Computer::displayFeatures()+0x27>
c000e9d5:	b8 78 88 02 c0       	mov    eax,0xc0028878
c000e9da:	e9 50 fe ff ff       	jmp    c000e82f <Computer::displayFeatures()+0xf9>
c000e9df:	b8 78 88 02 c0       	mov    eax,0xc0028878
c000e9e4:	e9 23 fe ff ff       	jmp    c000e80c <Computer::displayFeatures()+0xd6>
c000e9e9:	b8 78 88 02 c0       	mov    eax,0xc0028878
c000e9ee:	e9 f6 fd ff ff       	jmp    c000e7e9 <Computer::displayFeatures()+0xb3>
c000e9f3:	b8 78 88 02 c0       	mov    eax,0xc0028878
c000e9f8:	e9 c9 fd ff ff       	jmp    c000e7c6 <Computer::displayFeatures()+0x90>
c000e9fd:	b8 78 88 02 c0       	mov    eax,0xc0028878
c000ea02:	e9 9c fd ff ff       	jmp    c000e7a3 <Computer::displayFeatures()+0x6d>
c000ea07:	b8 78 88 02 c0       	mov    eax,0xc0028878
c000ea0c:	e9 6f fd ff ff       	jmp    c000e780 <Computer::displayFeatures()+0x4a>
c000ea11:	b8 78 88 02 c0       	mov    eax,0xc0028878
c000ea16:	e9 5a fe ff ff       	jmp    c000e875 <Computer::displayFeatures()+0x13f>
c000ea1b:	b8 78 88 02 c0       	mov    eax,0xc0028878
c000ea20:	eb 8a                	jmp    c000e9ac <Computer::displayFeatures()+0x276>
c000ea22:	b8 78 88 02 c0       	mov    eax,0xc0028878
c000ea27:	e9 61 ff ff ff       	jmp    c000e98d <Computer::displayFeatures()+0x257>
c000ea2c:	b8 78 88 02 c0       	mov    eax,0xc0028878
c000ea31:	e9 11 ff ff ff       	jmp    c000e947 <Computer::displayFeatures()+0x211>
c000ea36:	b8 78 88 02 c0       	mov    eax,0xc0028878
c000ea3b:	e9 e4 fe ff ff       	jmp    c000e924 <Computer::displayFeatures()+0x1ee>
c000ea40:	b8 78 88 02 c0       	mov    eax,0xc0028878
c000ea45:	e9 b7 fe ff ff       	jmp    c000e901 <Computer::displayFeatures()+0x1cb>
c000ea4a:	b8 78 88 02 c0       	mov    eax,0xc0028878
c000ea4f:	e9 8a fe ff ff       	jmp    c000e8de <Computer::displayFeatures()+0x1a8>
c000ea54:	b8 78 88 02 c0       	mov    eax,0xc0028878
c000ea59:	e9 5d fe ff ff       	jmp    c000e8bb <Computer::displayFeatures()+0x185>
c000ea5e:	b8 78 88 02 c0       	mov    eax,0xc0028878
c000ea63:	e9 30 fe ff ff       	jmp    c000e898 <Computer::displayFeatures()+0x162>
c000ea68:	b8 78 88 02 c0       	mov    eax,0xc0028878
c000ea6d:	e9 e0 fd ff ff       	jmp    c000e852 <Computer::displayFeatures()+0x11c>
c000ea72:	b8 78 88 02 c0       	mov    eax,0xc0028878
c000ea77:	e9 ee fe ff ff       	jmp    c000e96a <Computer::displayFeatures()+0x234>

c000ea7c <Computer::rdmsr(unsigned int)>:
c000ea7c:	83 ec 0c             	sub    esp,0xc
c000ea7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea83:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ea8a:	74 0a                	je     c000ea96 <Computer::rdmsr(unsigned int)+0x1a>
c000ea8c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ea90:	0f 32                	rdmsr  
c000ea92:	83 c4 0c             	add    esp,0xc
c000ea95:	c3                   	ret    
c000ea96:	83 ec 0c             	sub    esp,0xc
c000ea99:	68 c4 89 02 c0       	push   0xc00289c4
c000ea9e:	e8 fe ac 00 00       	call   c00197a1 <Krnl::panic(char const*)>
c000eaa3:	83 c4 10             	add    esp,0x10
c000eaa6:	eb e4                	jmp    c000ea8c <Computer::rdmsr(unsigned int)+0x10>

c000eaa8 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eaa8:	57                   	push   edi
c000eaa9:	56                   	push   esi
c000eaaa:	52                   	push   edx
c000eaab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaaf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eab3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eab7:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eabe:	74 0e                	je     c000eace <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eac0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eac4:	89 f0                	mov    eax,esi
c000eac6:	89 fa                	mov    edx,edi
c000eac8:	0f 30                	wrmsr  
c000eaca:	58                   	pop    eax
c000eacb:	5e                   	pop    esi
c000eacc:	5f                   	pop    edi
c000eacd:	c3                   	ret    
c000eace:	83 ec 0c             	sub    esp,0xc
c000ead1:	68 ca 89 02 c0       	push   0xc00289ca
c000ead6:	e8 c6 ac 00 00       	call   c00197a1 <Krnl::panic(char const*)>
c000eadb:	83 c4 10             	add    esp,0x10
c000eade:	eb e0                	jmp    c000eac0 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eae0 <Computer::nmiEnabled()>:
c000eae0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eae4:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000eaea:	c3                   	ret    
c000eaeb:	90                   	nop

c000eaec <Computer::readCMOS(unsigned char)>:
c000eaec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eaf0:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eaf7:	19 c0                	sbb    eax,eax
c000eaf9:	83 e0 80             	and    eax,0xffffff80
c000eafc:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000eb00:	e6 70                	out    0x70,al
c000eb02:	e4 71                	in     al,0x71
c000eb04:	c3                   	ret    
c000eb05:	90                   	nop

c000eb06 <Computer::enableNMI(bool)>:
c000eb06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eb0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eb0e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000eb14:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000eb1c:	eb ce                	jmp    c000eaec <Computer::readCMOS(unsigned char)>

c000eb1e <Computer::open(int, int, void*)>:
c000eb1e:	56                   	push   esi
c000eb1f:	53                   	push   ebx
c000eb20:	83 ec 10             	sub    esp,0x10
c000eb23:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eb27:	f6 05 60 c8 02 c0 04 	test   BYTE PTR ds:0xc002c860,0x4
c000eb2e:	68 68 22 00 00       	push   0x2268
c000eb33:	0f 94 05 84 b7 02 c0 	sete   BYTE PTR ds:0xc002b784
c000eb3a:	e8 95 09 00 00       	call   c000f4d4 <malloc>
c000eb3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb42:	89 c6                	mov    esi,eax
c000eb44:	e8 ed 8a 00 00       	call   c0017636 <ACPI::ACPI()>
c000eb49:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eb4f:	58                   	pop    eax
c000eb50:	5a                   	pop    edx
c000eb51:	56                   	push   esi
c000eb52:	53                   	push   ebx
c000eb53:	e8 1e 4f 00 00       	call   c0013a76 <Device::addChild(Device*)>
c000eb58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eb5b:	e8 cc f9 ff ff       	call   c000e52c <Computer::detectFeatures()>
c000eb60:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eb63:	e8 ce fb ff ff       	call   c000e736 <Computer::displayFeatures()>
c000eb68:	59                   	pop    ecx
c000eb69:	5e                   	pop    esi
c000eb6a:	6a 01                	push   0x1
c000eb6c:	53                   	push   ebx
c000eb6d:	e8 94 ff ff ff       	call   c000eb06 <Computer::enableNMI(bool)>
c000eb72:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eb79:	e8 56 09 00 00       	call   c000f4d4 <malloc>
c000eb7e:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb81:	89 c6                	mov    esi,eax
c000eb83:	e8 5a 95 00 00       	call   c00180e2 <CPU::CPU()>
c000eb88:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eb8e:	58                   	pop    eax
c000eb8f:	5a                   	pop    edx
c000eb90:	56                   	push   esi
c000eb91:	53                   	push   ebx
c000eb92:	e8 df 4e 00 00       	call   c0013a76 <Device::addChild(Device*)>
c000eb97:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000eb9d:	8b 10                	mov    edx,DWORD PTR [eax]
c000eb9f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eba3:	6a 00                	push   0x0
c000eba5:	6a 00                	push   0x0
c000eba7:	50                   	push   eax
c000eba8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ebab:	83 c4 20             	add    esp,0x20
c000ebae:	e8 35 54 00 00       	call   c0013fe8 <setupFPU()>
c000ebb3:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ebb9:	85 c0                	test   eax,eax
c000ebbb:	74 1f                	je     c000ebdc <Computer::open(int, int, void*)+0xbe>
c000ebbd:	83 ec 08             	sub    esp,0x8
c000ebc0:	50                   	push   eax
c000ebc1:	53                   	push   ebx
c000ebc2:	e8 af 4e 00 00       	call   c0013a76 <Device::addChild(Device*)>
c000ebc7:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ebcd:	8b 10                	mov    edx,DWORD PTR [eax]
c000ebcf:	6a 00                	push   0x0
c000ebd1:	6a 00                	push   0x0
c000ebd3:	6a 00                	push   0x0
c000ebd5:	50                   	push   eax
c000ebd6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ebd9:	83 c4 20             	add    esp,0x20
c000ebdc:	83 ec 0c             	sub    esp,0xc
c000ebdf:	68 1e e5 00 c0       	push   0xc000e51e
c000ebe4:	e8 79 e2 00 00       	call   c001ce62 <setupMultitasking(void (*)())>
c000ebe9:	83 c4 14             	add    esp,0x14
c000ebec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ebf1:	5b                   	pop    ebx
c000ebf2:	5e                   	pop    esi
c000ebf3:	c3                   	ret    

c000ebf4 <Computer::disableNMI()>:
c000ebf4:	6a 00                	push   0x0
c000ebf6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ebfa:	e8 07 ff ff ff       	call   c000eb06 <Computer::enableNMI(bool)>
c000ebff:	58                   	pop    eax
c000ec00:	5a                   	pop    edx
c000ec01:	c3                   	ret    

c000ec02 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ec02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec06:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ec0d:	19 c0                	sbb    eax,eax
c000ec0f:	83 e0 80             	and    eax,0xffffff80
c000ec12:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ec16:	e6 70                	out    0x70,al
c000ec18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec1c:	e6 71                	out    0x71,al
c000ec1e:	c3                   	ret    
c000ec1f:	90                   	nop

c000ec20 <Computer::handleNMI()>:
c000ec20:	56                   	push   esi
c000ec21:	53                   	push   ebx
c000ec22:	83 ec 10             	sub    esp,0x10
c000ec25:	e4 92                	in     al,0x92
c000ec27:	89 c6                	mov    esi,eax
c000ec29:	e4 61                	in     al,0x61
c000ec2b:	68 d0 89 02 c0       	push   0xc00289d0
c000ec30:	88 c3                	mov    bl,al
c000ec32:	e8 50 3a 00 00       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c000ec37:	83 c4 10             	add    esp,0x10
c000ec3a:	83 e6 10             	and    esi,0x10
c000ec3d:	75 0d                	jne    c000ec4c <Computer::handleNMI()+0x2c>
c000ec3f:	f6 c3 40             	test   bl,0x40
c000ec42:	75 1d                	jne    c000ec61 <Computer::handleNMI()+0x41>
c000ec44:	84 db                	test   bl,bl
c000ec46:	78 2d                	js     c000ec75 <Computer::handleNMI()+0x55>
c000ec48:	58                   	pop    eax
c000ec49:	5b                   	pop    ebx
c000ec4a:	5e                   	pop    esi
c000ec4b:	c3                   	ret    
c000ec4c:	83 ec 0c             	sub    esp,0xc
c000ec4f:	68 e1 89 02 c0       	push   0xc00289e1
c000ec54:	e8 48 ab 00 00       	call   c00197a1 <Krnl::panic(char const*)>
c000ec59:	83 c4 10             	add    esp,0x10
c000ec5c:	f6 c3 40             	test   bl,0x40
c000ec5f:	74 e3                	je     c000ec44 <Computer::handleNMI()+0x24>
c000ec61:	83 ec 0c             	sub    esp,0xc
c000ec64:	68 ee 89 02 c0       	push   0xc00289ee
c000ec69:	e8 33 ab 00 00       	call   c00197a1 <Krnl::panic(char const*)>
c000ec6e:	83 c4 10             	add    esp,0x10
c000ec71:	84 db                	test   bl,bl
c000ec73:	79 d3                	jns    c000ec48 <Computer::handleNMI()+0x28>
c000ec75:	c7 44 24 10 f8 89 02 c0 	mov    DWORD PTR [esp+0x10],0xc00289f8
c000ec7d:	5a                   	pop    edx
c000ec7e:	5b                   	pop    ebx
c000ec7f:	5e                   	pop    esi
c000ec80:	e9 1c ab 00 00       	jmp    c00197a1 <Krnl::panic(char const*)>
c000ec85:	90                   	nop

c000ec86 <Computer::setDiskActivityLight(int, bool)>:
c000ec86:	56                   	push   esi
c000ec87:	53                   	push   ebx
c000ec88:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ec8c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ec91:	77 1b                	ja     c000ecae <Computer::setDiskActivityLight(int, bool)+0x28>
c000ec93:	e4 92                	in     al,0x92
c000ec95:	bb 40 00 00 00       	mov    ebx,0x40
c000ec9a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000ec9e:	89 da                	mov    edx,ebx
c000eca0:	d3 e2                	shl    edx,cl
c000eca2:	89 f1                	mov    ecx,esi
c000eca4:	f7 d2                	not    edx
c000eca6:	d3 e3                	shl    ebx,cl
c000eca8:	21 d0                	and    eax,edx
c000ecaa:	09 d8                	or     eax,ebx
c000ecac:	e6 92                	out    0x92,al
c000ecae:	5b                   	pop    ebx
c000ecaf:	5e                   	pop    esi
c000ecb0:	c3                   	ret    
c000ecb1:	90                   	nop

c000ecb2 <GDTEntry::setBase(unsigned int)>:
c000ecb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecb6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ecba:	89 c1                	mov    ecx,eax
c000ecbc:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000ecc0:	c1 e9 10             	shr    ecx,0x10
c000ecc3:	c1 e8 18             	shr    eax,0x18
c000ecc6:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000ecc9:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000eccc:	c3                   	ret    
c000eccd:	90                   	nop

c000ecce <GDTEntry::setLimit(unsigned int)>:
c000ecce:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ecd2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecd6:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000ecd9:	66 89 01             	mov    WORD PTR [ecx],ax
c000ecdc:	83 e2 f0             	and    edx,0xfffffff0
c000ecdf:	c1 e8 10             	shr    eax,0x10
c000ece2:	83 e0 0f             	and    eax,0xf
c000ece5:	09 d0                	or     eax,edx
c000ece7:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000ecea:	c3                   	ret    
c000eceb:	90                   	nop

c000ecec <GDT::GDT()>:
c000ecec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ecf0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ecf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ecfa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ed00:	90                   	nop
c000ed01:	c3                   	ret    

c000ed02 <GDT::addEntry(GDTEntry)>:
c000ed02:	53                   	push   ebx
c000ed03:	83 ec 0c             	sub    esp,0xc
c000ed06:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ed0a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ed0c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000ed13:	52                   	push   edx
c000ed14:	50                   	push   eax
c000ed15:	68 34 8a 02 c0       	push   0xc0028a34
c000ed1a:	e8 68 39 00 00       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c000ed1f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ed21:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ed25:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ed29:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000ed2d:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000ed31:	8d 50 01             	lea    edx,[eax+0x1]
c000ed34:	c1 e0 03             	shl    eax,0x3
c000ed37:	89 13                	mov    DWORD PTR [ebx],edx
c000ed39:	83 c4 18             	add    esp,0x18
c000ed3c:	5b                   	pop    ebx
c000ed3d:	c3                   	ret    

c000ed3e <GDT::getNumberOfEntries()>:
c000ed3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed42:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed44:	c3                   	ret    
c000ed45:	90                   	nop

c000ed46 <GDT::flush()>:
c000ed46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed4a:	8b 10                	mov    edx,DWORD PTR [eax]
c000ed4c:	83 c0 04             	add    eax,0x4
c000ed4f:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ed56:	a3 52 c8 02 c0       	mov    ds:0xc002c852,eax
c000ed5b:	66 89 15 50 c8 02 c0 	mov    WORD PTR ds:0xc002c850,dx
c000ed62:	e9 96 16 ff ff       	jmp    c00003fd <loadGDT>
c000ed67:	90                   	nop

c000ed68 <GDT::setup()>:
c000ed68:	55                   	push   ebp
c000ed69:	57                   	push   edi
c000ed6a:	56                   	push   esi
c000ed6b:	53                   	push   ebx
c000ed6c:	83 ec 3c             	sub    esp,0x3c
c000ed6f:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000ed73:	6a 00                	push   0x0
c000ed75:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000ed79:	53                   	push   ebx
c000ed7a:	e8 33 ff ff ff       	call   c000ecb2 <GDTEntry::setBase(unsigned int)>
c000ed7f:	6a 00                	push   0x0
c000ed81:	53                   	push   ebx
c000ed82:	e8 47 ff ff ff       	call   c000ecce <GDTEntry::setLimit(unsigned int)>
c000ed87:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ed8f:	6a 00                	push   0x0
c000ed91:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ed95:	53                   	push   ebx
c000ed96:	e8 17 ff ff ff       	call   c000ecb2 <GDTEntry::setBase(unsigned int)>
c000ed9b:	68 ff ff ff 00       	push   0xffffff
c000eda0:	53                   	push   ebx
c000eda1:	e8 28 ff ff ff       	call   c000ecce <GDTEntry::setLimit(unsigned int)>
c000eda6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000edaa:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000edaf:	0d 00 9a c0 00       	or     eax,0xc09a00
c000edb4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000edb8:	83 c4 20             	add    esp,0x20
c000edbb:	6a 00                	push   0x0
c000edbd:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000edc1:	53                   	push   ebx
c000edc2:	e8 eb fe ff ff       	call   c000ecb2 <GDTEntry::setBase(unsigned int)>
c000edc7:	68 ff ff ff 00       	push   0xffffff
c000edcc:	53                   	push   ebx
c000edcd:	e8 fc fe ff ff       	call   c000ecce <GDTEntry::setLimit(unsigned int)>
c000edd2:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000edd6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000edda:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000edde:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000ede2:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ede6:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000edeb:	0d 00 92 c0 00       	or     eax,0xc09200
c000edf0:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000edf4:	89 d8                	mov    eax,ebx
c000edf6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000edfa:	80 cc 60             	or     ah,0x60
c000edfd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ee01:	83 c4 0c             	add    esp,0xc
c000ee04:	89 f8                	mov    eax,edi
c000ee06:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ee0a:	80 cc 60             	or     ah,0x60
c000ee0d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ee11:	89 c7                	mov    edi,eax
c000ee13:	55                   	push   ebp
c000ee14:	e8 e9 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee19:	83 c4 0c             	add    esp,0xc
c000ee1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee20:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee24:	55                   	push   ebp
c000ee25:	e8 d8 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee2a:	83 c4 0c             	add    esp,0xc
c000ee2d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee31:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee35:	55                   	push   ebp
c000ee36:	e8 c7 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee3b:	83 c4 0c             	add    esp,0xc
c000ee3e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ee42:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ee46:	53                   	push   ebx
c000ee47:	51                   	push   ecx
c000ee48:	55                   	push   ebp
c000ee49:	e8 b4 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee4e:	83 c4 0c             	add    esp,0xc
c000ee51:	57                   	push   edi
c000ee52:	56                   	push   esi
c000ee53:	55                   	push   ebp
c000ee54:	e8 a9 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee59:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ee5c:	e8 e5 fe ff ff       	call   c000ed46 <GDT::flush()>
c000ee61:	83 c4 4c             	add    esp,0x4c
c000ee64:	5b                   	pop    ebx
c000ee65:	5e                   	pop    esi
c000ee66:	5f                   	pop    edi
c000ee67:	5d                   	pop    ebp
c000ee68:	c3                   	ret    

c000ee69 <idleFunction(void*)>:
c000ee69:	53                   	push   ebx
c000ee6a:	83 ec 08             	sub    esp,0x8
c000ee6d:	e8 c0 dd 00 00       	call   c001cc32 <unlockScheduler()>
c000ee72:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c000ee77:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000ee7d:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000ee84:	74 3c                	je     c000eec2 <idleFunction(void*)+0x59>
c000ee86:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee8d:	74 33                	je     c000eec2 <idleFunction(void*)+0x59>
c000ee8f:	31 db                	xor    ebx,ebx
c000ee91:	52                   	push   edx
c000ee92:	52                   	push   edx
c000ee93:	68 e1 00 00 00       	push   0xe1
c000ee98:	50                   	push   eax
c000ee99:	e8 de fb ff ff       	call   c000ea7c <Computer::rdmsr(unsigned int)>
c000ee9e:	53                   	push   ebx
c000ee9f:	83 e0 02             	and    eax,0x2
c000eea2:	50                   	push   eax
c000eea3:	68 e1 00 00 00       	push   0xe1
c000eea8:	ff 35 48 c8 02 c0    	push   DWORD PTR ds:0xc002c848
c000eeae:	e8 f5 fb ff ff       	call   c000eaa8 <Computer::wrmsr(unsigned int, unsigned long long)>
c000eeb3:	83 c4 20             	add    esp,0x20
c000eeb6:	e8 79 13 ff ff       	call   c0000234 <doTPAUSE>
c000eebb:	e8 00 81 01 00       	call   c0026fc0 <idleCommon()>
c000eec0:	eb f4                	jmp    c000eeb6 <idleFunction(void*)+0x4d>
c000eec2:	fb                   	sti    
c000eec3:	f4                   	hlt    
c000eec4:	e8 f7 80 01 00       	call   c0026fc0 <idleCommon()>
c000eec9:	eb f7                	jmp    c000eec2 <idleFunction(void*)+0x59>
c000eecb:	90                   	nop

c000eecc <IDTEntry::IDTEntry(bool)>:
c000eecc:	83 ec 04             	sub    esp,0x4
c000eecf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eed3:	88 04 24             	mov    BYTE PTR [esp],al
c000eed6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eeda:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000eee0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eee4:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000eee8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eeec:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eeef:	83 e2 f0             	and    edx,0xfffffff0
c000eef2:	83 ca 0e             	or     edx,0xe
c000eef5:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eef8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eefc:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eeff:	83 e2 ef             	and    edx,0xffffffef
c000ef02:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef05:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000ef09:	74 04                	je     c000ef0f <IDTEntry::IDTEntry(bool)+0x43>
c000ef0b:	b2 03                	mov    dl,0x3
c000ef0d:	eb 02                	jmp    c000ef11 <IDTEntry::IDTEntry(bool)+0x45>
c000ef0f:	b2 00                	mov    dl,0x0
c000ef11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef15:	83 e2 03             	and    edx,0x3
c000ef18:	88 d1                	mov    cl,dl
c000ef1a:	c1 e1 05             	shl    ecx,0x5
c000ef1d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef20:	83 e2 9f             	and    edx,0xffffff9f
c000ef23:	09 ca                	or     edx,ecx
c000ef25:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef2c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef2f:	83 ca 80             	or     edx,0xffffff80
c000ef32:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef35:	90                   	nop
c000ef36:	83 c4 04             	add    esp,0x4
c000ef39:	c3                   	ret    

c000ef3a <IDTEntry::setOffset(unsigned int)>:
c000ef3a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ef3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef42:	66 89 02             	mov    WORD PTR [edx],ax
c000ef45:	c1 e8 10             	shr    eax,0x10
c000ef48:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ef4c:	c3                   	ret    
c000ef4d:	90                   	nop

c000ef4e <IDT::IDT()>:
c000ef4e:	90                   	nop
c000ef4f:	c3                   	ret    

c000ef50 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ef50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef54:	83 c0 30             	add    eax,0x30
c000ef57:	c3                   	ret    

c000ef58 <IDT::addEntry(IDTEntry, int)>:
c000ef58:	53                   	push   ebx
c000ef59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef5d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ef61:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef65:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef69:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ef6c:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ef70:	5b                   	pop    ebx
c000ef71:	c3                   	ret    

c000ef72 <IDT::addEntry(int, void (*)(), bool)>:
c000ef72:	53                   	push   ebx
c000ef73:	83 ec 10             	sub    esp,0x10
c000ef76:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ef7b:	50                   	push   eax
c000ef7c:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ef80:	53                   	push   ebx
c000ef81:	e8 46 ff ff ff       	call   c000eecc <IDTEntry::IDTEntry(bool)>
c000ef86:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ef8a:	53                   	push   ebx
c000ef8b:	e8 aa ff ff ff       	call   c000ef3a <IDTEntry::setOffset(unsigned int)>
c000ef90:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef94:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef98:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef9c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000efa0:	e8 b3 ff ff ff       	call   c000ef58 <IDT::addEntry(IDTEntry, int)>
c000efa5:	83 c4 30             	add    esp,0x30
c000efa8:	5b                   	pop    ebx
c000efa9:	c3                   	ret    

c000efaa <IDT::flush()>:
c000efaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000efae:	66 c7 05 58 c8 02 c0 ff 07 	mov    WORD PTR ds:0xc002c858,0x7ff
c000efb7:	a3 5a c8 02 c0       	mov    ds:0xc002c85a,eax
c000efbc:	0f 01 1d 58 c8 02 c0 	lidtd  ds:0xc002c858
c000efc3:	c3                   	ret    

c000efc4 <IDT::setup()>:
c000efc4:	57                   	push   edi
c000efc5:	56                   	push   esi
c000efc6:	53                   	push   ebx
c000efc7:	83 ec 10             	sub    esp,0x10
c000efca:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000efce:	6a 00                	push   0x0
c000efd0:	68 1d 04 00 c0       	push   0xc000041d
c000efd5:	6a 00                	push   0x0
c000efd7:	53                   	push   ebx
c000efd8:	e8 95 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000efdd:	6a 00                	push   0x0
c000efdf:	68 2d 04 00 c0       	push   0xc000042d
c000efe4:	6a 01                	push   0x1
c000efe6:	53                   	push   ebx
c000efe7:	e8 86 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000efec:	83 c4 20             	add    esp,0x20
c000efef:	6a 00                	push   0x0
c000eff1:	68 37 04 00 c0       	push   0xc0000437
c000eff6:	6a 02                	push   0x2
c000eff8:	53                   	push   ebx
c000eff9:	e8 74 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000effe:	6a 00                	push   0x0
c000f000:	68 41 04 00 c0       	push   0xc0000441
c000f005:	6a 03                	push   0x3
c000f007:	53                   	push   ebx
c000f008:	e8 65 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f00d:	83 c4 20             	add    esp,0x20
c000f010:	6a 00                	push   0x0
c000f012:	68 4b 04 00 c0       	push   0xc000044b
c000f017:	6a 04                	push   0x4
c000f019:	53                   	push   ebx
c000f01a:	e8 53 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f01f:	6a 00                	push   0x0
c000f021:	68 55 04 00 c0       	push   0xc0000455
c000f026:	6a 05                	push   0x5
c000f028:	53                   	push   ebx
c000f029:	e8 44 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f02e:	83 c4 20             	add    esp,0x20
c000f031:	6a 00                	push   0x0
c000f033:	68 5f 04 00 c0       	push   0xc000045f
c000f038:	6a 06                	push   0x6
c000f03a:	53                   	push   ebx
c000f03b:	e8 32 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f040:	6a 00                	push   0x0
c000f042:	68 69 04 00 c0       	push   0xc0000469
c000f047:	6a 07                	push   0x7
c000f049:	53                   	push   ebx
c000f04a:	e8 23 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f04f:	83 c4 20             	add    esp,0x20
c000f052:	6a 00                	push   0x0
c000f054:	68 73 04 00 c0       	push   0xc0000473
c000f059:	6a 08                	push   0x8
c000f05b:	53                   	push   ebx
c000f05c:	e8 11 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f061:	6a 00                	push   0x0
c000f063:	68 7b 04 00 c0       	push   0xc000047b
c000f068:	6a 09                	push   0x9
c000f06a:	53                   	push   ebx
c000f06b:	e8 02 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f070:	83 c4 20             	add    esp,0x20
c000f073:	6a 00                	push   0x0
c000f075:	68 85 04 00 c0       	push   0xc0000485
c000f07a:	6a 0a                	push   0xa
c000f07c:	53                   	push   ebx
c000f07d:	e8 f0 fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f082:	6a 00                	push   0x0
c000f084:	68 8d 04 00 c0       	push   0xc000048d
c000f089:	6a 0b                	push   0xb
c000f08b:	53                   	push   ebx
c000f08c:	e8 e1 fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f091:	83 c4 20             	add    esp,0x20
c000f094:	6a 00                	push   0x0
c000f096:	68 95 04 00 c0       	push   0xc0000495
c000f09b:	6a 0c                	push   0xc
c000f09d:	53                   	push   ebx
c000f09e:	e8 cf fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0a3:	6a 00                	push   0x0
c000f0a5:	68 9d 04 00 c0       	push   0xc000049d
c000f0aa:	6a 0d                	push   0xd
c000f0ac:	53                   	push   ebx
c000f0ad:	e8 c0 fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0b2:	83 c4 20             	add    esp,0x20
c000f0b5:	6a 00                	push   0x0
c000f0b7:	68 a5 04 00 c0       	push   0xc00004a5
c000f0bc:	6a 0e                	push   0xe
c000f0be:	53                   	push   ebx
c000f0bf:	e8 ae fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0c4:	6a 00                	push   0x0
c000f0c6:	68 ad 04 00 c0       	push   0xc00004ad
c000f0cb:	6a 0f                	push   0xf
c000f0cd:	53                   	push   ebx
c000f0ce:	e8 9f fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0d3:	83 c4 20             	add    esp,0x20
c000f0d6:	6a 00                	push   0x0
c000f0d8:	68 b7 04 00 c0       	push   0xc00004b7
c000f0dd:	6a 10                	push   0x10
c000f0df:	53                   	push   ebx
c000f0e0:	e8 8d fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0e5:	6a 00                	push   0x0
c000f0e7:	68 c1 04 00 c0       	push   0xc00004c1
c000f0ec:	6a 11                	push   0x11
c000f0ee:	53                   	push   ebx
c000f0ef:	e8 7e fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0f4:	83 c4 20             	add    esp,0x20
c000f0f7:	6a 00                	push   0x0
c000f0f9:	68 cb 04 00 c0       	push   0xc00004cb
c000f0fe:	6a 12                	push   0x12
c000f100:	53                   	push   ebx
c000f101:	e8 6c fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f106:	6a 01                	push   0x1
c000f108:	68 65 05 00 c0       	push   0xc0000565
c000f10d:	6a 60                	push   0x60
c000f10f:	53                   	push   ebx
c000f110:	e8 5d fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f115:	83 c4 20             	add    esp,0x20
c000f118:	6a 00                	push   0x0
c000f11a:	68 6c 05 00 c0       	push   0xc000056c
c000f11f:	6a 20                	push   0x20
c000f121:	53                   	push   ebx
c000f122:	e8 4b fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f127:	6a 00                	push   0x0
c000f129:	68 57 05 00 c0       	push   0xc0000557
c000f12e:	6a 21                	push   0x21
c000f130:	53                   	push   ebx
c000f131:	e8 3c fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f136:	83 c4 20             	add    esp,0x20
c000f139:	6a 00                	push   0x0
c000f13b:	68 5e 05 00 c0       	push   0xc000055e
c000f140:	6a 22                	push   0x22
c000f142:	53                   	push   ebx
c000f143:	e8 2a fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f148:	6a 00                	push   0x0
c000f14a:	68 d5 04 00 c0       	push   0xc00004d5
c000f14f:	6a 23                	push   0x23
c000f151:	53                   	push   ebx
c000f152:	e8 1b fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f157:	83 c4 20             	add    esp,0x20
c000f15a:	6a 00                	push   0x0
c000f15c:	68 df 04 00 c0       	push   0xc00004df
c000f161:	6a 24                	push   0x24
c000f163:	53                   	push   ebx
c000f164:	e8 09 fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f169:	6a 00                	push   0x0
c000f16b:	68 e9 04 00 c0       	push   0xc00004e9
c000f170:	6a 25                	push   0x25
c000f172:	53                   	push   ebx
c000f173:	e8 fa fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f178:	83 c4 20             	add    esp,0x20
c000f17b:	6a 00                	push   0x0
c000f17d:	68 f3 04 00 c0       	push   0xc00004f3
c000f182:	6a 26                	push   0x26
c000f184:	53                   	push   ebx
c000f185:	e8 e8 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f18a:	6a 00                	push   0x0
c000f18c:	68 fd 04 00 c0       	push   0xc00004fd
c000f191:	6a 27                	push   0x27
c000f193:	53                   	push   ebx
c000f194:	e8 d9 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f199:	83 c4 20             	add    esp,0x20
c000f19c:	6a 00                	push   0x0
c000f19e:	68 07 05 00 c0       	push   0xc0000507
c000f1a3:	6a 28                	push   0x28
c000f1a5:	53                   	push   ebx
c000f1a6:	e8 c7 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1ab:	6a 00                	push   0x0
c000f1ad:	68 11 05 00 c0       	push   0xc0000511
c000f1b2:	6a 29                	push   0x29
c000f1b4:	53                   	push   ebx
c000f1b5:	e8 b8 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1ba:	83 c4 20             	add    esp,0x20
c000f1bd:	6a 00                	push   0x0
c000f1bf:	68 1b 05 00 c0       	push   0xc000051b
c000f1c4:	6a 2a                	push   0x2a
c000f1c6:	53                   	push   ebx
c000f1c7:	e8 a6 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1cc:	6a 00                	push   0x0
c000f1ce:	68 25 05 00 c0       	push   0xc0000525
c000f1d3:	6a 2b                	push   0x2b
c000f1d5:	53                   	push   ebx
c000f1d6:	e8 97 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1db:	83 c4 20             	add    esp,0x20
c000f1de:	6a 00                	push   0x0
c000f1e0:	68 2f 05 00 c0       	push   0xc000052f
c000f1e5:	6a 2c                	push   0x2c
c000f1e7:	53                   	push   ebx
c000f1e8:	e8 85 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1ed:	6a 00                	push   0x0
c000f1ef:	68 39 05 00 c0       	push   0xc0000539
c000f1f4:	6a 2d                	push   0x2d
c000f1f6:	53                   	push   ebx
c000f1f7:	e8 76 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1fc:	83 c4 20             	add    esp,0x20
c000f1ff:	6a 00                	push   0x0
c000f201:	68 43 05 00 c0       	push   0xc0000543
c000f206:	6a 2e                	push   0x2e
c000f208:	53                   	push   ebx
c000f209:	e8 64 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f20e:	6a 00                	push   0x0
c000f210:	68 4d 05 00 c0       	push   0xc000054d
c000f215:	6a 2f                	push   0x2f
c000f217:	53                   	push   ebx
c000f218:	e8 55 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f21d:	83 c4 20             	add    esp,0x20
c000f220:	6a 00                	push   0x0
c000f222:	68 a2 05 00 c0       	push   0xc00005a2
c000f227:	6a 30                	push   0x30
c000f229:	53                   	push   ebx
c000f22a:	e8 43 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f22f:	6a 00                	push   0x0
c000f231:	68 ac 05 00 c0       	push   0xc00005ac
c000f236:	6a 31                	push   0x31
c000f238:	53                   	push   ebx
c000f239:	e8 34 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f23e:	83 c4 20             	add    esp,0x20
c000f241:	6a 00                	push   0x0
c000f243:	68 b6 05 00 c0       	push   0xc00005b6
c000f248:	6a 32                	push   0x32
c000f24a:	53                   	push   ebx
c000f24b:	e8 22 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f250:	6a 00                	push   0x0
c000f252:	68 c0 05 00 c0       	push   0xc00005c0
c000f257:	6a 33                	push   0x33
c000f259:	53                   	push   ebx
c000f25a:	e8 13 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f25f:	83 c4 20             	add    esp,0x20
c000f262:	6a 00                	push   0x0
c000f264:	68 ca 05 00 c0       	push   0xc00005ca
c000f269:	6a 34                	push   0x34
c000f26b:	53                   	push   ebx
c000f26c:	e8 01 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f271:	6a 00                	push   0x0
c000f273:	68 d4 05 00 c0       	push   0xc00005d4
c000f278:	6a 35                	push   0x35
c000f27a:	53                   	push   ebx
c000f27b:	e8 f2 fc ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f280:	83 c4 20             	add    esp,0x20
c000f283:	6a 00                	push   0x0
c000f285:	68 de 05 00 c0       	push   0xc00005de
c000f28a:	6a 36                	push   0x36
c000f28c:	53                   	push   ebx
c000f28d:	e8 e0 fc ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f292:	6a 00                	push   0x0
c000f294:	68 e8 05 00 c0       	push   0xc00005e8
c000f299:	6a 37                	push   0x37
c000f29b:	53                   	push   ebx
c000f29c:	e8 d1 fc ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f2a1:	83 c4 20             	add    esp,0x20
c000f2a4:	e8 7e 25 00 00       	call   c0011827 <Virt::getAKernelVAS()>
c000f2a9:	52                   	push   edx
c000f2aa:	6a 03                	push   0x3
c000f2ac:	6a 02                	push   0x2
c000f2ae:	50                   	push   eax
c000f2af:	e8 ae 2b 00 00       	call   c0011e62 <VAS::allocatePages(int, int)>
c000f2b4:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f2bb:	89 c6                	mov    esi,eax
c000f2bd:	e8 12 02 00 00       	call   c000f4d4 <malloc>
c000f2c2:	81 c6 00 20 00 00    	add    esi,0x2000
c000f2c8:	89 04 24             	mov    DWORD PTR [esp],eax
c000f2cb:	89 c7                	mov    edi,eax
c000f2cd:	e8 f6 1c 00 00       	call   c0010fc8 <TSS::TSS()>
c000f2d2:	83 c4 0c             	add    esp,0xc
c000f2d5:	68 73 04 00 c0       	push   0xc0000473
c000f2da:	56                   	push   esi
c000f2db:	57                   	push   edi
c000f2dc:	e8 27 1d 00 00       	call   c0011008 <TSS::setup(unsigned long, unsigned long)>
c000f2e1:	59                   	pop    ecx
c000f2e2:	89 c6                	mov    esi,eax
c000f2e4:	5f                   	pop    edi
c000f2e5:	6a 00                	push   0x0
c000f2e7:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f2eb:	50                   	push   eax
c000f2ec:	e8 db fb ff ff       	call   c000eecc <IDTEntry::IDTEntry(bool)>
c000f2f1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f2f5:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f2fa:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f301:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f307:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f30b:	80 ce 05             	or     dh,0x5
c000f30e:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f311:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f315:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f319:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f31c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f31f:	e8 86 fc ff ff       	call   c000efaa <IDT::flush()>
c000f324:	83 c4 20             	add    esp,0x20
c000f327:	5b                   	pop    ebx
c000f328:	5e                   	pop    esi
c000f329:	5f                   	pop    edi
c000f32a:	c3                   	ret    

c000f32b <sbrk>:
c000f32b:	55                   	push   ebp
c000f32c:	57                   	push   edi
c000f32d:	56                   	push   esi
c000f32e:	53                   	push   ebx
c000f32f:	83 ec 1c             	sub    esp,0x1c
c000f332:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f336:	85 c0                	test   eax,eax
c000f338:	74 3e                	je     c000f378 <sbrk+0x4d>
c000f33a:	78 43                	js     c000f37f <sbrk+0x54>
c000f33c:	8b 15 48 c8 02 c0    	mov    edx,DWORD PTR ds:0xc002c848
c000f342:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f348:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f34e:	83 e2 01             	and    edx,0x1
c000f351:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f355:	8b 0d 6c b7 02 c0    	mov    ecx,DWORD PTR ds:0xc002b76c
c000f35b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f35f:	05 ff 0f 00 00       	add    eax,0xfff
c000f364:	89 c2                	mov    edx,eax
c000f366:	78 2f                	js     c000f397 <sbrk+0x6c>
c000f368:	c1 fa 0c             	sar    edx,0xc
c000f36b:	89 d7                	mov    edi,edx
c000f36d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f371:	be 00 00 00 00       	mov    esi,0x0
c000f376:	eb 36                	jmp    c000f3ae <sbrk+0x83>
c000f378:	a1 6c b7 02 c0       	mov    eax,ds:0xc002b76c
c000f37d:	eb 74                	jmp    c000f3f3 <sbrk+0xc8>
c000f37f:	83 ec 08             	sub    esp,0x8
c000f382:	50                   	push   eax
c000f383:	68 50 8a 02 c0       	push   0xc0028a50
c000f388:	e8 fa 32 00 00       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c000f38d:	83 c4 10             	add    esp,0x10
c000f390:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f395:	eb 5c                	jmp    c000f3f3 <sbrk+0xc8>
c000f397:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f39d:	eb c9                	jmp    c000f368 <sbrk+0x3d>
c000f39f:	81 05 6c b7 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002b76c,0x1000
c000f3a9:	46                   	inc    esi
c000f3aa:	39 f7                	cmp    edi,esi
c000f3ac:	74 34                	je     c000f3e2 <sbrk+0xb7>
c000f3ae:	e8 74 24 00 00       	call   c0011827 <Virt::getAKernelVAS()>
c000f3b3:	89 c3                	mov    ebx,eax
c000f3b5:	8b 2d 6c b7 02 c0    	mov    ebp,DWORD PTR ds:0xc002b76c
c000f3bb:	e8 ee 05 00 00       	call   c000f9ae <Phys::allocatePage()>
c000f3c0:	68 01 04 00 00       	push   0x401
c000f3c5:	55                   	push   ebp
c000f3c6:	50                   	push   eax
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 95 29 00 00       	call   c0011d62 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f3cd:	83 c4 10             	add    esp,0x10
c000f3d0:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f3d5:	74 c8                	je     c000f39f <sbrk+0x74>
c000f3d7:	8b 1d 6c b7 02 c0    	mov    ebx,DWORD PTR ds:0xc002b76c
c000f3dd:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f3e0:	eb bd                	jmp    c000f39f <sbrk+0x74>
c000f3e2:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f3e7:	75 12                	jne    c000f3fb <sbrk+0xd0>
c000f3e9:	0f 20 d8             	mov    eax,cr3
c000f3ec:	0f 22 d8             	mov    cr3,eax
c000f3ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f3f3:	83 c4 1c             	add    esp,0x1c
c000f3f6:	5b                   	pop    ebx
c000f3f7:	5e                   	pop    esi
c000f3f8:	5f                   	pop    edi
c000f3f9:	5d                   	pop    ebp
c000f3fa:	c3                   	ret    
c000f3fb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f3ff:	89 cb                	mov    ebx,ecx
c000f401:	c1 eb 0a             	shr    ebx,0xa
c000f404:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f40a:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f410:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f414:	c1 e0 0c             	shl    eax,0xc
c000f417:	01 c8                	add    eax,ecx
c000f419:	c1 e8 0a             	shr    eax,0xa
c000f41c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f421:	2d 00 00 40 00       	sub    eax,0x400000
c000f426:	39 c3                	cmp    ebx,eax
c000f428:	77 c5                	ja     c000f3ef <sbrk+0xc4>
c000f42a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f42d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f433:	39 d8                	cmp    eax,ebx
c000f435:	73 f3                	jae    c000f42a <sbrk+0xff>
c000f437:	eb b6                	jmp    c000f3ef <sbrk+0xc4>

c000f439 <mmap>:
c000f439:	83 ec 18             	sub    esp,0x18
c000f43c:	68 80 8a 02 c0       	push   0xc0028a80
c000f441:	e8 5b a3 00 00       	call   c00197a1 <Krnl::panic(char const*)>
c000f446:	b8 00 00 00 00       	mov    eax,0x0
c000f44b:	83 c4 1c             	add    esp,0x1c
c000f44e:	c3                   	ret    

c000f44f <munmap>:
c000f44f:	83 ec 18             	sub    esp,0x18
c000f452:	68 85 8a 02 c0       	push   0xc0028a85
c000f457:	e8 45 a3 00 00       	call   c00197a1 <Krnl::panic(char const*)>
c000f45c:	b8 00 00 00 00       	mov    eax,0x0
c000f461:	83 c4 1c             	add    esp,0x1c
c000f464:	c3                   	ret    

c000f465 <liballoc_lock()>:
c000f465:	83 ec 0c             	sub    esp,0xc
c000f468:	e8 c3 d7 00 00       	call   c001cc30 <lockScheduler()>
c000f46d:	b8 00 00 00 00       	mov    eax,0x0
c000f472:	83 c4 0c             	add    esp,0xc
c000f475:	c3                   	ret    

c000f476 <liballoc_unlock()>:
c000f476:	83 ec 0c             	sub    esp,0xc
c000f479:	e8 b4 d7 00 00       	call   c001cc32 <unlockScheduler()>
c000f47e:	b8 00 00 00 00       	mov    eax,0x0
c000f483:	83 c4 0c             	add    esp,0xc
c000f486:	c3                   	ret    

c000f487 <liballoc_alloc(int)>:
c000f487:	83 ec 0c             	sub    esp,0xc
c000f48a:	e8 98 23 00 00       	call   c0011827 <Virt::getAKernelVAS()>
c000f48f:	83 ec 04             	sub    esp,0x4
c000f492:	6a 01                	push   0x1
c000f494:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f498:	50                   	push   eax
c000f499:	e8 c4 29 00 00       	call   c0011e62 <VAS::allocatePages(int, int)>
c000f49e:	83 c4 1c             	add    esp,0x1c
c000f4a1:	c3                   	ret    

c000f4a2 <liballoc_free(void*, int)>:
c000f4a2:	83 ec 0c             	sub    esp,0xc
c000f4a5:	e8 7d 23 00 00       	call   c0011827 <Virt::getAKernelVAS()>
c000f4aa:	83 ec 08             	sub    esp,0x8
c000f4ad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f4b1:	50                   	push   eax
c000f4b2:	e8 67 26 00 00       	call   c0011b1e <VAS::freeAllocatedPages(unsigned long)>
c000f4b7:	b8 00 00 00 00       	mov    eax,0x0
c000f4bc:	83 c4 1c             	add    esp,0x1c
c000f4bf:	c3                   	ret    

c000f4c0 <realloc>:
c000f4c0:	83 ec 14             	sub    esp,0x14
c000f4c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4cb:	e8 34 1f ff ff       	call   c0001404 <dlrealloc>
c000f4d0:	83 c4 1c             	add    esp,0x1c
c000f4d3:	c3                   	ret    

c000f4d4 <malloc>:
c000f4d4:	83 ec 18             	sub    esp,0x18
c000f4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4db:	e8 e7 19 ff ff       	call   c0000ec7 <dlmalloc>
c000f4e0:	83 c4 1c             	add    esp,0x1c
c000f4e3:	c3                   	ret    

c000f4e4 <free>:
c000f4e4:	83 ec 18             	sub    esp,0x18
c000f4e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4eb:	e8 7c 16 ff ff       	call   c0000b6c <dlfree>
c000f4f0:	83 c4 1c             	add    esp,0x1c
c000f4f3:	c3                   	ret    

c000f4f4 <rfree>:
c000f4f4:	83 ec 18             	sub    esp,0x18
c000f4f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4fb:	e8 6c 16 ff ff       	call   c0000b6c <dlfree>
c000f500:	83 c4 1c             	add    esp,0x1c
c000f503:	c3                   	ret    

c000f504 <calloc>:
c000f504:	56                   	push   esi
c000f505:	53                   	push   ebx
c000f506:	83 ec 10             	sub    esp,0x10
c000f509:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f50d:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f512:	53                   	push   ebx
c000f513:	e8 bc ff ff ff       	call   c000f4d4 <malloc>
c000f518:	89 c6                	mov    esi,eax
c000f51a:	83 c4 0c             	add    esp,0xc
c000f51d:	53                   	push   ebx
c000f51e:	6a 00                	push   0x0
c000f520:	50                   	push   eax
c000f521:	e8 65 11 ff ff       	call   c000068b <memset>
c000f526:	89 f0                	mov    eax,esi
c000f528:	83 c4 14             	add    esp,0x14
c000f52b:	5b                   	pop    ebx
c000f52c:	5e                   	pop    esi
c000f52d:	c3                   	ret    

c000f52e <hwTextMode_loadInData(VgaText*)>:
c000f52e:	55                   	push   ebp
c000f52f:	a1 80 b7 02 c0       	mov    eax,ds:0xc002b780
c000f534:	57                   	push   edi
c000f535:	56                   	push   esi
c000f536:	53                   	push   ebx
c000f537:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f53b:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f541:	85 d2                	test   edx,edx
c000f543:	7e 2f                	jle    c000f574 <hwTextMode_loadInData(VgaText*)+0x46>
c000f545:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f54b:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f54e:	31 f6                	xor    esi,esi
c000f550:	29 fd                	sub    ebp,edi
c000f552:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f555:	31 c0                	xor    eax,eax
c000f557:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f55b:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f55f:	40                   	inc    eax
c000f560:	83 f8 50             	cmp    eax,0x50
c000f563:	75 f2                	jne    c000f557 <hwTextMode_loadInData(VgaText*)+0x29>
c000f565:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f56b:	46                   	inc    esi
c000f56c:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f572:	7f de                	jg     c000f552 <hwTextMode_loadInData(VgaText*)+0x24>
c000f574:	5b                   	pop    ebx
c000f575:	5e                   	pop    esi
c000f576:	5f                   	pop    edi
c000f577:	5d                   	pop    ebp
c000f578:	c3                   	ret    

c000f579 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f579:	57                   	push   edi
c000f57a:	8b 15 80 b7 02 c0    	mov    edx,DWORD PTR ds:0xc002b780
c000f580:	56                   	push   esi
c000f581:	8d b2 a0 00 00 00    	lea    esi,[edx+0xa0]
c000f587:	53                   	push   ebx
c000f588:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f58c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f590:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000f596:	8b bb d8 0f 00 00    	mov    edi,DWORD PTR [ebx+0xfd8]
c000f59c:	c1 e0 04             	shl    eax,0x4
c000f59f:	83 e7 0f             	and    edi,0xf
c000f5a2:	0f b6 c0             	movzx  eax,al
c000f5a5:	41                   	inc    ecx
c000f5a6:	09 f8                	or     eax,edi
c000f5a8:	83 c2 02             	add    edx,0x2
c000f5ab:	0f b6 79 ff          	movzx  edi,BYTE PTR [ecx-0x1]
c000f5af:	c1 e0 08             	shl    eax,0x8
c000f5b2:	09 f8                	or     eax,edi
c000f5b4:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f5b8:	39 f2                	cmp    edx,esi
c000f5ba:	75 d4                	jne    c000f590 <hwTextMode_loadInTitle(VgaText*, char*)+0x17>
c000f5bc:	5b                   	pop    ebx
c000f5bd:	5e                   	pop    esi
c000f5be:	5f                   	pop    edi
c000f5bf:	c3                   	ret    

c000f5c0 <hwTextMode_scrollScreen(VgaText*)>:
c000f5c0:	55                   	push   ebp
c000f5c1:	bd 02 00 00 00       	mov    ebp,0x2
c000f5c6:	57                   	push   edi
c000f5c7:	56                   	push   esi
c000f5c8:	53                   	push   ebx
c000f5c9:	83 ec 1c             	sub    esp,0x1c
c000f5cc:	a1 80 b7 02 c0       	mov    eax,ds:0xc002b780
c000f5d1:	05 a0 00 00 00       	add    eax,0xa0
c000f5d6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f5da:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f5de:	31 c0                	xor    eax,eax
c000f5e0:	eb 0b                	jmp    c000f5ed <hwTextMode_scrollScreen(VgaText*)+0x2d>
c000f5e2:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f5e8:	74 57                	je     c000f641 <hwTextMode_scrollScreen(VgaText*)+0x81>
c000f5ea:	43                   	inc    ebx
c000f5eb:	89 f0                	mov    eax,esi
c000f5ed:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000f5f3:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000f5f9:	88 13                	mov    BYTE PTR [ebx],dl
c000f5fb:	8d 70 01             	lea    esi,[eax+0x1]
c000f5fe:	83 fd 18             	cmp    ebp,0x18
c000f601:	75 df                	jne    c000f5e2 <hwTextMode_scrollScreen(VgaText*)+0x22>
c000f603:	a8 01                	test   al,0x1
c000f605:	75 13                	jne    c000f61a <hwTextMode_scrollScreen(VgaText*)+0x5a>
c000f607:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000f60a:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f610:	75 d8                	jne    c000f5ea <hwTextMode_scrollScreen(VgaText*)+0x2a>
c000f612:	83 c4 1c             	add    esp,0x1c
c000f615:	5b                   	pop    ebx
c000f616:	5e                   	pop    esi
c000f617:	5f                   	pop    edi
c000f618:	5d                   	pop    ebp
c000f619:	c3                   	ret    
c000f61a:	83 ec 08             	sub    esp,0x8
c000f61d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f621:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000f628:	50                   	push   eax
c000f629:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f62d:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000f634:	50                   	push   eax
c000f635:	e8 b8 0b 00 00       	call   c00101f2 <VgaText::combineColours(unsigned char, unsigned char)>
c000f63a:	83 c4 10             	add    esp,0x10
c000f63d:	88 07                	mov    BYTE PTR [edi],al
c000f63f:	eb c9                	jmp    c000f60a <hwTextMode_scrollScreen(VgaText*)+0x4a>
c000f641:	45                   	inc    ebp
c000f642:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000f64a:	eb 8e                	jmp    c000f5da <hwTextMode_scrollScreen(VgaText*)+0x1a>

c000f64c <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000f64c:	56                   	push   esi
c000f64d:	53                   	push   ebx
c000f64e:	83 ec 0c             	sub    esp,0xc
c000f651:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000f655:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000f659:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f65e:	50                   	push   eax
c000f65f:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f664:	50                   	push   eax
c000f665:	e8 88 0b 00 00       	call   c00101f2 <VgaText::combineColours(unsigned char, unsigned char)>
c000f66a:	5a                   	pop    edx
c000f66b:	0f b6 c0             	movzx  eax,al
c000f66e:	59                   	pop    ecx
c000f66f:	50                   	push   eax
c000f670:	89 f0                	mov    eax,esi
c000f672:	0f be f0             	movsx  esi,al
c000f675:	56                   	push   esi
c000f676:	e8 31 0c 00 00       	call   c00102ac <VgaText::combineCharAndColour(char, unsigned char)>
c000f67b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000f67f:	ba 19 00 00 00       	mov    edx,0x19
c000f684:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000f68a:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000f68d:	8d 14 92             	lea    edx,[edx+edx*4]
c000f690:	c1 e1 04             	shl    ecx,0x4
c000f693:	c1 e2 04             	shl    edx,0x4
c000f696:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000f69a:	01 ca                	add    edx,ecx
c000f69c:	8b 0d 80 b7 02 c0    	mov    ecx,DWORD PTR ds:0xc002b780
c000f6a2:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c000f6a6:	83 c4 14             	add    esp,0x14
c000f6a9:	5b                   	pop    ebx
c000f6aa:	5e                   	pop    esi
c000f6ab:	c3                   	ret    

c000f6ac <hwTextMode_showCursor(VgaText*, bool)>:
c000f6ac:	56                   	push   esi
c000f6ad:	53                   	push   ebx
c000f6ae:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000f6b3:	74 38                	je     c000f6ed <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000f6b5:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f6ba:	b0 0a                	mov    al,0xa
c000f6bc:	89 da                	mov    edx,ebx
c000f6be:	ee                   	out    dx,al
c000f6bf:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f6c4:	89 ca                	mov    edx,ecx
c000f6c6:	ec                   	in     al,dx
c000f6c7:	b2 0f                	mov    dl,0xf
c000f6c9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f6cd:	83 e0 c0             	and    eax,0xffffffc0
c000f6d0:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f6d6:	09 d0                	or     eax,edx
c000f6d8:	89 ca                	mov    edx,ecx
c000f6da:	ee                   	out    dx,al
c000f6db:	b0 0b                	mov    al,0xb
c000f6dd:	89 da                	mov    edx,ebx
c000f6df:	ee                   	out    dx,al
c000f6e0:	89 ca                	mov    edx,ecx
c000f6e2:	ec                   	in     al,dx
c000f6e3:	83 e0 e0             	and    eax,0xffffffe0
c000f6e6:	83 c8 0f             	or     eax,0xf
c000f6e9:	ee                   	out    dx,al
c000f6ea:	5b                   	pop    ebx
c000f6eb:	5e                   	pop    esi
c000f6ec:	c3                   	ret    
c000f6ed:	b0 0a                	mov    al,0xa
c000f6ef:	ba d4 03 00 00       	mov    edx,0x3d4
c000f6f4:	ee                   	out    dx,al
c000f6f5:	b0 20                	mov    al,0x20
c000f6f7:	ba d5 03 00 00       	mov    edx,0x3d5
c000f6fc:	ee                   	out    dx,al
c000f6fd:	5b                   	pop    ebx
c000f6fe:	5e                   	pop    esi
c000f6ff:	c3                   	ret    

c000f700 <hwTextMode_update(VgaText*)>:
c000f700:	c3                   	ret    

c000f701 <hwTextMode_updateCursor(VgaText*)>:
c000f701:	56                   	push   esi
c000f702:	b9 19 00 00 00       	mov    ecx,0x19
c000f707:	53                   	push   ebx
c000f708:	be d4 03 00 00       	mov    esi,0x3d4
c000f70d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f711:	89 f2                	mov    edx,esi
c000f713:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f719:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f71f:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f722:	c1 e1 04             	shl    ecx,0x4
c000f725:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f72b:	b0 0f                	mov    al,0xf
c000f72d:	ee                   	out    dx,al
c000f72e:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f733:	88 c8                	mov    al,cl
c000f735:	89 da                	mov    edx,ebx
c000f737:	ee                   	out    dx,al
c000f738:	b0 0e                	mov    al,0xe
c000f73a:	89 f2                	mov    edx,esi
c000f73c:	ee                   	out    dx,al
c000f73d:	89 c8                	mov    eax,ecx
c000f73f:	89 da                	mov    edx,ebx
c000f741:	66 c1 e8 08          	shr    ax,0x8
c000f745:	ee                   	out    dx,al
c000f746:	5b                   	pop    ebx
c000f747:	5e                   	pop    esi
c000f748:	c3                   	ret    

c000f749 <hwTextMode_disableBlink(VgaText*, bool)>:
c000f749:	ba da 03 00 00       	mov    edx,0x3da
c000f74e:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000f753:	75 18                	jne    c000f76d <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000f755:	ec                   	in     al,dx
c000f756:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f75b:	b0 30                	mov    al,0x30
c000f75d:	89 ca                	mov    edx,ecx
c000f75f:	ee                   	out    dx,al
c000f760:	ba c1 03 00 00       	mov    edx,0x3c1
c000f765:	ec                   	in     al,dx
c000f766:	83 c8 08             	or     eax,0x8
c000f769:	89 ca                	mov    edx,ecx
c000f76b:	ee                   	out    dx,al
c000f76c:	c3                   	ret    
c000f76d:	ec                   	in     al,dx
c000f76e:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f773:	b0 30                	mov    al,0x30
c000f775:	89 ca                	mov    edx,ecx
c000f777:	ee                   	out    dx,al
c000f778:	ba c1 03 00 00       	mov    edx,0x3c1
c000f77d:	ec                   	in     al,dx
c000f77e:	83 e0 f7             	and    eax,0xfffffff7
c000f781:	89 ca                	mov    edx,ecx
c000f783:	ee                   	out    dx,al
c000f784:	c3                   	ret    

c000f785 <setupTextMode()>:
c000f785:	a1 10 04 00 00       	mov    eax,ds:0x410
c000f78a:	83 e0 30             	and    eax,0x30
c000f78d:	66 83 f8 30          	cmp    ax,0x30
c000f791:	74 11                	je     c000f7a4 <setupTextMode()+0x1f>
c000f793:	81 2d 80 b7 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002b780,0x8000
c000f79d:	c6 05 e0 c8 02 c0 01 	mov    BYTE PTR ds:0xc002c8e0,0x1
c000f7a4:	c6 05 00 00 0b c2 41 	mov    BYTE PTR ds:0xc20b0000,0x41
c000f7ab:	c6 05 01 00 0b c2 02 	mov    BYTE PTR ds:0xc20b0001,0x2
c000f7b2:	c6 05 02 00 0b c2 42 	mov    BYTE PTR ds:0xc20b0002,0x42
c000f7b9:	c6 05 03 00 0b c2 02 	mov    BYTE PTR ds:0xc20b0003,0x2
c000f7c0:	c6 05 04 00 0b c2 43 	mov    BYTE PTR ds:0xc20b0004,0x43
c000f7c7:	c6 05 05 00 0b c2 02 	mov    BYTE PTR ds:0xc20b0005,0x2
c000f7ce:	c6 05 06 00 0b c2 44 	mov    BYTE PTR ds:0xc20b0006,0x44
c000f7d5:	c6 05 07 00 0b c2 02 	mov    BYTE PTR ds:0xc20b0007,0x2
c000f7dc:	eb fe                	jmp    c000f7dc <setupTextMode()+0x57>

c000f7de <kernel_main>:
c000f7de:	83 ec 0c             	sub    esp,0xc
c000f7e1:	e8 66 08 00 00       	call   c001004c <installVgaTextImplementation()>
c000f7e6:	e8 9a ff ff ff       	call   c000f785 <setupTextMode()>

c000f7eb <Phys::allocateDMA(unsigned long)>:
c000f7eb:	55                   	push   ebp
c000f7ec:	31 d2                	xor    edx,edx
c000f7ee:	57                   	push   edi
c000f7ef:	31 ed                	xor    ebp,ebp
c000f7f1:	56                   	push   esi
c000f7f2:	31 c9                	xor    ecx,ecx
c000f7f4:	53                   	push   ebx
c000f7f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f7f9:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f7ff:	31 c0                	xor    eax,eax
c000f801:	c1 ee 0c             	shr    esi,0xc
c000f804:	eb 17                	jmp    c000f81d <Phys::allocateDMA(unsigned long)+0x32>
c000f806:	85 c9                	test   ecx,ecx
c000f808:	75 04                	jne    c000f80e <Phys::allocateDMA(unsigned long)+0x23>
c000f80a:	89 d5                	mov    ebp,edx
c000f80c:	89 d0                	mov    eax,edx
c000f80e:	8d 59 01             	lea    ebx,[ecx+0x1]
c000f811:	39 de                	cmp    esi,ebx
c000f813:	74 20                	je     c000f835 <Phys::allocateDMA(unsigned long)+0x4a>
c000f815:	42                   	inc    edx
c000f816:	89 d9                	mov    ecx,ebx
c000f818:	83 fa 2f             	cmp    edx,0x2f
c000f81b:	7f 11                	jg     c000f82e <Phys::allocateDMA(unsigned long)+0x43>
c000f81d:	80 ba a0 c8 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd3760],0x0
c000f824:	74 e0                	je     c000f806 <Phys::allocateDMA(unsigned long)+0x1b>
c000f826:	31 c9                	xor    ecx,ecx
c000f828:	42                   	inc    edx
c000f829:	83 fa 2f             	cmp    edx,0x2f
c000f82c:	7e ef                	jle    c000f81d <Phys::allocateDMA(unsigned long)+0x32>
c000f82e:	5b                   	pop    ebx
c000f82f:	31 c0                	xor    eax,eax
c000f831:	5e                   	pop    esi
c000f832:	5f                   	pop    edi
c000f833:	5d                   	pop    ebp
c000f834:	c3                   	ret    
c000f835:	8d 14 30             	lea    edx,[eax+esi*1]
c000f838:	89 d7                	mov    edi,edx
c000f83a:	4f                   	dec    edi
c000f83b:	79 03                	jns    c000f840 <Phys::allocateDMA(unsigned long)+0x55>
c000f83d:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f840:	c1 ff 04             	sar    edi,0x4
c000f843:	89 c2                	mov    edx,eax
c000f845:	c1 fa 04             	sar    edx,0x4
c000f848:	39 fa                	cmp    edx,edi
c000f84a:	75 2f                	jne    c000f87b <Phys::allocateDMA(unsigned long)+0x90>
c000f84c:	85 db                	test   ebx,ebx
c000f84e:	74 1a                	je     c000f86a <Phys::allocateDMA(unsigned long)+0x7f>
c000f850:	be a0 c8 02 c0       	mov    esi,0xc002c8a0
c000f855:	8d 90 a0 c8 02 c0    	lea    edx,[eax-0x3ffd3760]
c000f85b:	f7 d6                	not    esi
c000f85d:	29 c6                	sub    esi,eax
c000f85f:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f862:	42                   	inc    edx
c000f863:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000f866:	39 d9                	cmp    ecx,ebx
c000f868:	7f f5                	jg     c000f85f <Phys::allocateDMA(unsigned long)+0x74>
c000f86a:	85 ff                	test   edi,edi
c000f86c:	74 13                	je     c000f881 <Phys::allocateDMA(unsigned long)+0x96>
c000f86e:	5b                   	pop    ebx
c000f86f:	05 50 20 0c 00       	add    eax,0xc2050
c000f874:	5e                   	pop    esi
c000f875:	c1 e0 0c             	shl    eax,0xc
c000f878:	5f                   	pop    edi
c000f879:	5d                   	pop    ebp
c000f87a:	c3                   	ret    
c000f87b:	89 ea                	mov    edx,ebp
c000f87d:	31 c9                	xor    ecx,ecx
c000f87f:	eb a7                	jmp    c000f828 <Phys::allocateDMA(unsigned long)+0x3d>
c000f881:	5b                   	pop    ebx
c000f882:	c1 e0 0c             	shl    eax,0xc
c000f885:	5e                   	pop    esi
c000f886:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000f88b:	5f                   	pop    edi
c000f88c:	5d                   	pop    ebp
c000f88d:	c3                   	ret    

c000f88e <Phys::freeDMA(unsigned long, unsigned long)>:
c000f88e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f892:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f896:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000f89c:	c1 e9 0c             	shr    ecx,0xc
c000f89f:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000f8a4:	76 25                	jbe    c000f8cb <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000f8a6:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000f8ab:	c1 e8 0c             	shr    eax,0xc
c000f8ae:	8d 50 10             	lea    edx,[eax+0x10]
c000f8b1:	85 c9                	test   ecx,ecx
c000f8b3:	74 15                	je     c000f8ca <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000f8b5:	8d 82 a0 c8 02 c0    	lea    eax,[edx-0x3ffd3760]
c000f8bb:	8d 94 11 a0 c8 02 c0 	lea    edx,[ecx+edx*1-0x3ffd3760]
c000f8c2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f8c5:	40                   	inc    eax
c000f8c6:	39 d0                	cmp    eax,edx
c000f8c8:	75 f8                	jne    c000f8c2 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000f8ca:	c3                   	ret    
c000f8cb:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f8d1:	c1 ea 0c             	shr    edx,0xc
c000f8d4:	eb db                	jmp    c000f8b1 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000f8d6 <Phys::setPageState(unsigned long, bool)>:
c000f8d6:	56                   	push   esi
c000f8d7:	ba 01 00 00 00       	mov    edx,0x1
c000f8dc:	53                   	push   ebx
c000f8dd:	8b 35 70 b7 02 c0    	mov    esi,DWORD PTR ds:0xc002b770
c000f8e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f8e7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f8eb:	89 c8                	mov    eax,ecx
c000f8ed:	83 e1 07             	and    ecx,0x7
c000f8f0:	c1 e8 03             	shr    eax,0x3
c000f8f3:	d3 e3                	shl    ebx,cl
c000f8f5:	01 c6                	add    esi,eax
c000f8f7:	d3 e2                	shl    edx,cl
c000f8f9:	f7 d2                	not    edx
c000f8fb:	20 16                	and    BYTE PTR [esi],dl
c000f8fd:	03 05 70 b7 02 c0    	add    eax,DWORD PTR ds:0xc002b770
c000f903:	08 18                	or     BYTE PTR [eax],bl
c000f905:	5b                   	pop    ebx
c000f906:	5e                   	pop    esi
c000f907:	c3                   	ret    

c000f908 <Phys::getPageState(unsigned long)>:
c000f908:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f90c:	8b 15 70 b7 02 c0    	mov    edx,DWORD PTR ds:0xc002b770
c000f912:	89 c8                	mov    eax,ecx
c000f914:	83 e1 07             	and    ecx,0x7
c000f917:	c1 e8 03             	shr    eax,0x3
c000f91a:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f91e:	d3 f8                	sar    eax,cl
c000f920:	83 e0 01             	and    eax,0x1
c000f923:	c3                   	ret    

c000f924 <Phys::freePage(unsigned long)>:
c000f924:	53                   	push   ebx
c000f925:	83 ec 08             	sub    esp,0x8
c000f928:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f92c:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000f932:	76 57                	jbe    c000f98b <Phys::freePage(unsigned long)+0x67>
c000f934:	c1 eb 0c             	shr    ebx,0xc
c000f937:	53                   	push   ebx
c000f938:	e8 cb ff ff ff       	call   c000f908 <Phys::getPageState(unsigned long)>
c000f93d:	5a                   	pop    edx
c000f93e:	84 c0                	test   al,al
c000f940:	74 5b                	je     c000f99d <Phys::freePage(unsigned long)+0x79>
c000f942:	a1 8c c8 02 c0       	mov    eax,ds:0xc002c88c
c000f947:	48                   	dec    eax
c000f948:	a3 8c c8 02 c0       	mov    ds:0xc002c88c,eax
c000f94d:	8d 04 80             	lea    eax,[eax+eax*4]
c000f950:	8d 04 80             	lea    eax,[eax+eax*4]
c000f953:	c1 e0 02             	shl    eax,0x2
c000f956:	99                   	cdq    
c000f957:	f7 3d 90 c8 02 c0    	idiv   DWORD PTR ds:0xc002c890
c000f95d:	39 05 88 c8 02 c0    	cmp    DWORD PTR ds:0xc002c888,eax
c000f963:	75 13                	jne    c000f978 <Phys::freePage(unsigned long)+0x54>
c000f965:	83 ec 08             	sub    esp,0x8
c000f968:	6a 00                	push   0x0
c000f96a:	53                   	push   ebx
c000f96b:	e8 66 ff ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000f970:	83 c4 10             	add    esp,0x10
c000f973:	83 c4 08             	add    esp,0x8
c000f976:	5b                   	pop    ebx
c000f977:	c3                   	ret    
c000f978:	83 ec 0c             	sub    esp,0xc
c000f97b:	a3 88 c8 02 c0       	mov    ds:0xc002c888,eax
c000f980:	50                   	push   eax
c000f981:	e8 6e 0a 00 00       	call   c00103f4 <VgaText::updateRAMUsageDisplay(int)>
c000f986:	83 c4 10             	add    esp,0x10
c000f989:	eb da                	jmp    c000f965 <Phys::freePage(unsigned long)+0x41>
c000f98b:	68 00 10 00 00       	push   0x1000
c000f990:	53                   	push   ebx
c000f991:	e8 f8 fe ff ff       	call   c000f88e <Phys::freeDMA(unsigned long, unsigned long)>
c000f996:	59                   	pop    ecx
c000f997:	5b                   	pop    ebx
c000f998:	83 c4 08             	add    esp,0x8
c000f99b:	5b                   	pop    ebx
c000f99c:	c3                   	ret    
c000f99d:	c7 44 24 10 8c 8a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028a8c
c000f9a5:	83 c4 08             	add    esp,0x8
c000f9a8:	5b                   	pop    ebx
c000f9a9:	e9 f3 9d 00 00       	jmp    c00197a1 <Krnl::panic(char const*)>

c000f9ae <Phys::allocatePage()>:
c000f9ae:	56                   	push   esi
c000f9af:	53                   	push   ebx
c000f9b0:	51                   	push   ecx
c000f9b1:	8b 35 80 c8 02 c0    	mov    esi,DWORD PTR ds:0xc002c880
c000f9b7:	89 f3                	mov    ebx,esi
c000f9b9:	eb 0a                	jmp    c000f9c5 <Phys::allocatePage()+0x17>
c000f9bb:	89 1d 80 c8 02 c0    	mov    DWORD PTR ds:0xc002c880,ebx
c000f9c1:	39 de                	cmp    esi,ebx
c000f9c3:	74 24                	je     c000f9e9 <Phys::allocatePage()+0x3b>
c000f9c5:	53                   	push   ebx
c000f9c6:	e8 3d ff ff ff       	call   c000f908 <Phys::getPageState(unsigned long)>
c000f9cb:	5a                   	pop    edx
c000f9cc:	84 c0                	test   al,al
c000f9ce:	74 5a                	je     c000fa2a <Phys::allocatePage()+0x7c>
c000f9d0:	43                   	inc    ebx
c000f9d1:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f9d7:	75 e2                	jne    c000f9bb <Phys::allocatePage()+0xd>
c000f9d9:	31 db                	xor    ebx,ebx
c000f9db:	c7 05 80 c8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c880,0x0
c000f9e5:	39 de                	cmp    esi,ebx
c000f9e7:	75 dc                	jne    c000f9c5 <Phys::allocatePage()+0x17>
c000f9e9:	83 ec 0c             	sub    esp,0xc
c000f9ec:	68 a2 8a 02 c0       	push   0xc0028aa2
c000f9f1:	e8 91 2c 00 00       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c000f9f6:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000f9fd:	e8 e9 fd ff ff       	call   c000f7eb <Phys::allocateDMA(unsigned long)>
c000fa02:	83 c4 10             	add    esp,0x10
c000fa05:	85 c0                	test   eax,eax
c000fa07:	75 56                	jne    c000fa5f <Phys::allocatePage()+0xb1>
c000fa09:	83 ec 0c             	sub    esp,0xc
c000fa0c:	68 b3 8a 02 c0       	push   0xc0028ab3
c000fa11:	e8 8b 9d 00 00       	call   c00197a1 <Krnl::panic(char const*)>
c000fa16:	83 c4 10             	add    esp,0x10
c000fa19:	8b 1d 80 c8 02 c0    	mov    ebx,DWORD PTR ds:0xc002c880
c000fa1f:	53                   	push   ebx
c000fa20:	e8 e3 fe ff ff       	call   c000f908 <Phys::getPageState(unsigned long)>
c000fa25:	5a                   	pop    edx
c000fa26:	84 c0                	test   al,al
c000fa28:	75 a6                	jne    c000f9d0 <Phys::allocatePage()+0x22>
c000fa2a:	6a 01                	push   0x1
c000fa2c:	53                   	push   ebx
c000fa2d:	e8 a4 fe ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fa32:	a1 8c c8 02 c0       	mov    eax,ds:0xc002c88c
c000fa37:	59                   	pop    ecx
c000fa38:	40                   	inc    eax
c000fa39:	5b                   	pop    ebx
c000fa3a:	a3 8c c8 02 c0       	mov    ds:0xc002c88c,eax
c000fa3f:	8d 04 80             	lea    eax,[eax+eax*4]
c000fa42:	8d 04 80             	lea    eax,[eax+eax*4]
c000fa45:	c1 e0 02             	shl    eax,0x2
c000fa48:	99                   	cdq    
c000fa49:	f7 3d 90 c8 02 c0    	idiv   DWORD PTR ds:0xc002c890
c000fa4f:	39 05 88 c8 02 c0    	cmp    DWORD PTR ds:0xc002c888,eax
c000fa55:	75 0c                	jne    c000fa63 <Phys::allocatePage()+0xb5>
c000fa57:	a1 80 c8 02 c0       	mov    eax,ds:0xc002c880
c000fa5c:	c1 e0 0c             	shl    eax,0xc
c000fa5f:	5a                   	pop    edx
c000fa60:	5b                   	pop    ebx
c000fa61:	5e                   	pop    esi
c000fa62:	c3                   	ret    
c000fa63:	83 ec 0c             	sub    esp,0xc
c000fa66:	a3 88 c8 02 c0       	mov    ds:0xc002c888,eax
c000fa6b:	50                   	push   eax
c000fa6c:	e8 83 09 00 00       	call   c00103f4 <VgaText::updateRAMUsageDisplay(int)>
c000fa71:	83 c4 10             	add    esp,0x10
c000fa74:	eb e1                	jmp    c000fa57 <Phys::allocatePage()+0xa9>

c000fa76 <Phys::allocateContiguousPages(int)>:
c000fa76:	57                   	push   edi
c000fa77:	56                   	push   esi
c000fa78:	53                   	push   ebx
c000fa79:	31 db                	xor    ebx,ebx
c000fa7b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000fa7f:	e8 ac d1 00 00       	call   c001cc30 <lockScheduler()>
c000fa84:	85 db                	test   ebx,ebx
c000fa86:	75 11                	jne    c000fa99 <Phys::allocateContiguousPages(int)+0x23>
c000fa88:	e8 21 ff ff ff       	call   c000f9ae <Phys::allocatePage()>
c000fa8d:	83 ff 01             	cmp    edi,0x1
c000fa90:	89 c6                	mov    esi,eax
c000fa92:	74 21                	je     c000fab5 <Phys::allocateContiguousPages(int)+0x3f>
c000fa94:	bb 01 00 00 00       	mov    ebx,0x1
c000fa99:	e8 10 ff ff ff       	call   c000f9ae <Phys::allocatePage()>
c000fa9e:	89 da                	mov    edx,ebx
c000faa0:	c1 e2 0c             	shl    edx,0xc
c000faa3:	01 f2                	add    edx,esi
c000faa5:	39 c2                	cmp    edx,eax
c000faa7:	74 17                	je     c000fac0 <Phys::allocateContiguousPages(int)+0x4a>
c000faa9:	bb 01 00 00 00       	mov    ebx,0x1
c000faae:	89 c6                	mov    esi,eax
c000fab0:	83 ff 01             	cmp    edi,0x1
c000fab3:	75 e4                	jne    c000fa99 <Phys::allocateContiguousPages(int)+0x23>
c000fab5:	e8 78 d1 00 00       	call   c001cc32 <unlockScheduler()>
c000faba:	89 f0                	mov    eax,esi
c000fabc:	5b                   	pop    ebx
c000fabd:	5e                   	pop    esi
c000fabe:	5f                   	pop    edi
c000fabf:	c3                   	ret    
c000fac0:	43                   	inc    ebx
c000fac1:	39 fb                	cmp    ebx,edi
c000fac3:	75 bf                	jne    c000fa84 <Phys::allocateContiguousPages(int)+0xe>
c000fac5:	e8 68 d1 00 00       	call   c001cc32 <unlockScheduler()>
c000faca:	89 f0                	mov    eax,esi
c000facc:	5b                   	pop    ebx
c000facd:	5e                   	pop    esi
c000face:	5f                   	pop    edi
c000facf:	c3                   	ret    

c000fad0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fad0:	56                   	push   esi
c000fad1:	53                   	push   ebx
c000fad2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fad6:	39 1d 84 c8 02 c0    	cmp    DWORD PTR ds:0xc002c884,ebx
c000fadc:	73 06                	jae    c000fae4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fade:	89 1d 84 c8 02 c0    	mov    DWORD PTR ds:0xc002c884,ebx
c000fae4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fae8:	c1 eb 0c             	shr    ebx,0xc
c000faeb:	c1 e8 0c             	shr    eax,0xc
c000faee:	39 d8                	cmp    eax,ebx
c000faf0:	73 13                	jae    c000fb05 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000faf2:	6a 00                	push   0x0
c000faf4:	8d 70 01             	lea    esi,[eax+0x1]
c000faf7:	50                   	push   eax
c000faf8:	e8 d9 fd ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fafd:	5a                   	pop    edx
c000fafe:	89 f0                	mov    eax,esi
c000fb00:	59                   	pop    ecx
c000fb01:	39 f3                	cmp    ebx,esi
c000fb03:	75 ed                	jne    c000faf2 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fb05:	5b                   	pop    ebx
c000fb06:	5e                   	pop    esi
c000fb07:	c3                   	ret    

c000fb08 <Phys::physicalMemorySetup(unsigned int)>:
c000fb08:	55                   	push   ebp
c000fb09:	57                   	push   edi
c000fb0a:	56                   	push   esi
c000fb0b:	53                   	push   ebx
c000fb0c:	31 db                	xor    ebx,ebx
c000fb0e:	83 ec 40             	sub    esp,0x40
c000fb11:	6a 30                	push   0x30
c000fb13:	6a 00                	push   0x0
c000fb15:	68 a0 c8 02 c0       	push   0xc002c8a0
c000fb1a:	e8 6c 0b ff ff       	call   c000068b <memset>
c000fb1f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fb23:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fb28:	05 00 10 00 00       	add    eax,0x1000
c000fb2d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fb31:	83 c4 10             	add    esp,0x10
c000fb34:	83 ec 08             	sub    esp,0x8
c000fb37:	6a 01                	push   0x1
c000fb39:	53                   	push   ebx
c000fb3a:	43                   	inc    ebx
c000fb3b:	e8 96 fd ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fb40:	83 c4 10             	add    esp,0x10
c000fb43:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fb49:	75 e9                	jne    c000fb34 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000fb4b:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fb52:	66 85 c0             	test   ax,ax
c000fb55:	0f 84 8e 01 00 00    	je     c000fce9 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000fb5b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fb5f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fb67:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fb6b:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fb70:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fb74:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fb7c:	eb 15                	jmp    c000fb93 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000fb7e:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fb82:	83 c3 18             	add    ebx,0x18
c000fb85:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb89:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fb8d:	0f 84 66 01 00 00    	je     c000fcf9 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fb93:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fb96:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fb99:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fb9c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fba0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fba4:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fba6:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fba9:	01 f0                	add    eax,esi
c000fbab:	55                   	push   ebp
c000fbac:	11 fa                	adc    edx,edi
c000fbae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fbb2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fbb6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fbba:	56                   	push   esi
c000fbbb:	68 ec 8a 02 c0       	push   0xc0028aec
c000fbc0:	e8 c2 2a 00 00       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c000fbc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fbc9:	83 c4 10             	add    esp,0x10
c000fbcc:	09 f8                	or     eax,edi
c000fbce:	0f 85 25 01 00 00    	jne    c000fcf9 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fbd4:	4d                   	dec    ebp
c000fbd5:	75 a7                	jne    c000fb7e <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fbd7:	ba 00 00 08 00       	mov    edx,0x80000
c000fbdc:	89 c1                	mov    ecx,eax
c000fbde:	39 f2                	cmp    edx,esi
c000fbe0:	19 f9                	sbb    ecx,edi
c000fbe2:	0f 82 a7 00 00 00    	jb     c000fc8f <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fbe8:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fbec:	89 c1                	mov    ecx,eax
c000fbee:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fbf2:	0f 83 97 00 00 00    	jae    c000fc8f <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fbf8:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fbfd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fc01:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fc05:	39 fa                	cmp    edx,edi
c000fc07:	19 e8                	sbb    eax,ebp
c000fc09:	0f 82 14 01 00 00    	jb     c000fd23 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000fc0f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fc13:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fc17:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000fc1d:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fc22:	83 d5 ff             	adc    ebp,0xffffffff
c000fc25:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000fc29:	31 c0                	xor    eax,eax
c000fc2b:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000fc2f:	39 fa                	cmp    edx,edi
c000fc31:	89 c1                	mov    ecx,eax
c000fc33:	19 e9                	sbb    ecx,ebp
c000fc35:	0f 83 43 ff ff ff    	jae    c000fb7e <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fc3b:	be 00 00 08 00       	mov    esi,0x80000
c000fc40:	50                   	push   eax
c000fc41:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000fc45:	57                   	push   edi
c000fc46:	56                   	push   esi
c000fc47:	68 10 8b 02 c0       	push   0xc0028b10
c000fc4c:	e8 36 2a 00 00       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c000fc51:	5a                   	pop    edx
c000fc52:	59                   	pop    ecx
c000fc53:	57                   	push   edi
c000fc54:	56                   	push   esi
c000fc55:	e8 76 fe ff ff       	call   c000fad0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fc5a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fc5e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fc62:	83 c4 0c             	add    esp,0xc
c000fc65:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fc69:	03 05 90 c8 02 c0    	add    eax,DWORD PTR ds:0xc002c890
c000fc6f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fc76:	a3 90 c8 02 c0       	mov    ds:0xc002c890,eax
c000fc7b:	52                   	push   edx
c000fc7c:	50                   	push   eax
c000fc7d:	68 cf 8a 02 c0       	push   0xc0028acf
c000fc82:	e8 00 2a 00 00       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c000fc87:	83 c4 10             	add    esp,0x10
c000fc8a:	e9 ef fe ff ff       	jmp    c000fb7e <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fc8f:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fc93:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fc97:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fc9b:	39 ea                	cmp    edx,ebp
c000fc9d:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fca1:	0f 82 d7 fe ff ff    	jb     c000fb7e <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fca7:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fcac:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000fcb0:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000fcb4:	0f 83 c4 fe ff ff    	jae    c000fb7e <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fcba:	39 ee                	cmp    esi,ebp
c000fcbc:	89 f8                	mov    eax,edi
c000fcbe:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000fcc2:	0f 83 78 ff ff ff    	jae    c000fc40 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fcc8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fccc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fcd0:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fcd4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000fcd8:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000fcdc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fce0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fce4:	e9 57 ff ff ff       	jmp    c000fc40 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fce9:	83 ec 0c             	sub    esp,0xc
c000fcec:	68 c1 8a 02 c0       	push   0xc0028ac1
c000fcf1:	e8 ab 9a 00 00       	call   c00197a1 <Krnl::panic(char const*)>
c000fcf6:	83 c4 10             	add    esp,0x10
c000fcf9:	bb 40 01 00 00       	mov    ebx,0x140
c000fcfe:	83 ec 08             	sub    esp,0x8
c000fd01:	6a 00                	push   0x0
c000fd03:	53                   	push   ebx
c000fd04:	43                   	inc    ebx
c000fd05:	e8 cc fb ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fd0a:	ff 05 90 c8 02 c0    	inc    DWORD PTR ds:0xc002c890
c000fd10:	83 c4 10             	add    esp,0x10
c000fd13:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fd19:	75 e3                	jne    c000fcfe <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c000fd1b:	83 c4 3c             	add    esp,0x3c
c000fd1e:	5b                   	pop    ebx
c000fd1f:	5e                   	pop    esi
c000fd20:	5f                   	pop    edi
c000fd21:	5d                   	pop    ebp
c000fd22:	c3                   	ret    
c000fd23:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000fd2b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fd33:	e9 d7 fe ff ff       	jmp    c000fc0f <Phys::physicalMemorySetup(unsigned int)+0x107>

c000fd38 <Pipe::isAtty()>:
c000fd38:	31 c0                	xor    eax,eax
c000fd3a:	c3                   	ret    
c000fd3b:	90                   	nop

c000fd3c <Pipe::~Pipe()>:
c000fd3c:	83 ec 0c             	sub    esp,0xc
c000fd3f:	ba 7c 8b 02 c0       	mov    edx,0xc0028b7c
c000fd44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd48:	89 10                	mov    DWORD PTR [eax],edx
c000fd4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd4e:	83 ec 0c             	sub    esp,0xc
c000fd51:	50                   	push   eax
c000fd52:	e8 df 16 00 00       	call   c0011436 <UnixFile::~UnixFile()>
c000fd57:	83 c4 10             	add    esp,0x10
c000fd5a:	90                   	nop
c000fd5b:	83 c4 0c             	add    esp,0xc
c000fd5e:	c3                   	ret    
c000fd5f:	90                   	nop

c000fd60 <Pipe::~Pipe()>:
c000fd60:	83 ec 0c             	sub    esp,0xc
c000fd63:	83 ec 0c             	sub    esp,0xc
c000fd66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd6a:	e8 cd ff ff ff       	call   c000fd3c <Pipe::~Pipe()>
c000fd6f:	83 c4 10             	add    esp,0x10
c000fd72:	83 ec 08             	sub    esp,0x8
c000fd75:	6a 20                	push   0x20
c000fd77:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd7b:	e8 27 28 00 00       	call   c00125a7 <operator delete(void*, unsigned long)>
c000fd80:	83 c4 10             	add    esp,0x10
c000fd83:	83 c4 0c             	add    esp,0xc
c000fd86:	c3                   	ret    
c000fd87:	90                   	nop

c000fd88 <Pipe::read(unsigned long long, void*, int*)>:
c000fd88:	55                   	push   ebp
c000fd89:	57                   	push   edi
c000fd8a:	56                   	push   esi
c000fd8b:	53                   	push   ebx
c000fd8c:	83 ec 1c             	sub    esp,0x1c
c000fd8f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fd93:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fd97:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fd9b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fd9e:	89 c8                	mov    eax,ecx
c000fda0:	99                   	cdq    
c000fda1:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fda5:	74 19                	je     c000fdc0 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000fda7:	39 f9                	cmp    ecx,edi
c000fda9:	89 d1                	mov    ecx,edx
c000fdab:	19 f1                	sbb    ecx,esi
c000fdad:	73 11                	jae    c000fdc0 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000fdaf:	e8 7c ce 00 00       	call   c001cc30 <lockScheduler()>
c000fdb4:	e8 b3 d1 00 00       	call   c001cf6c <schedule()>
c000fdb9:	e8 74 ce 00 00       	call   c001cc32 <unlockScheduler()>
c000fdbe:	eb db                	jmp    c000fd9b <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fdc0:	39 f8                	cmp    eax,edi
c000fdc2:	89 d1                	mov    ecx,edx
c000fdc4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000fdc8:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000fdcc:	19 f1                	sbb    ecx,esi
c000fdce:	73 08                	jae    c000fdd8 <Pipe::read(unsigned long long, void*, int*)+0x50>
c000fdd0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fdd4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fdd8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fddb:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fdde:	29 c6                	sub    esi,eax
c000fde0:	89 f1                	mov    ecx,esi
c000fde2:	c1 f9 1f             	sar    ecx,0x1f
c000fde5:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000fde9:	89 ca                	mov    edx,ecx
c000fdeb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fdef:	19 d1                	sbb    ecx,edx
c000fdf1:	73 04                	jae    c000fdf7 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000fdf3:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000fdf7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fdfb:	89 fd                	mov    ebp,edi
c000fdfd:	29 f5                	sub    ebp,esi
c000fdff:	85 f6                	test   esi,esi
c000fe01:	74 12                	je     c000fe15 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000fe03:	52                   	push   edx
c000fe04:	56                   	push   esi
c000fe05:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000fe08:	50                   	push   eax
c000fe09:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000fe0d:	e8 43 08 ff ff       	call   c0000655 <memcpy>
c000fe12:	83 c4 10             	add    esp,0x10
c000fe15:	85 ed                	test   ebp,ebp
c000fe17:	74 12                	je     c000fe2b <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000fe19:	50                   	push   eax
c000fe1a:	55                   	push   ebp
c000fe1b:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000fe1e:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000fe22:	56                   	push   esi
c000fe23:	e8 2d 08 ff ff       	call   c0000655 <memcpy>
c000fe28:	83 c4 10             	add    esp,0x10
c000fe2b:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000fe2e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fe31:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fe34:	99                   	cdq    
c000fe35:	89 f7                	mov    edi,esi
c000fe37:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000fe3b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000fe3f:	c1 ff 1f             	sar    edi,0x1f
c000fe42:	57                   	push   edi
c000fe43:	56                   	push   esi
c000fe44:	52                   	push   edx
c000fe45:	50                   	push   eax
c000fe46:	e8 71 55 01 00       	call   c00253bc <__umoddi3>
c000fe4b:	83 c4 10             	add    esp,0x10
c000fe4e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000fe51:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fe56:	75 10                	jne    c000fe68 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000fe58:	83 ec 0c             	sub    esp,0xc
c000fe5b:	68 39 8b 02 c0       	push   0xc0028b39
c000fe60:	e8 3c 99 00 00       	call   c00197a1 <Krnl::panic(char const*)>
c000fe65:	83 c4 10             	add    esp,0x10
c000fe68:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fe6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe70:	89 10                	mov    DWORD PTR [eax],edx
c000fe72:	83 c4 1c             	add    esp,0x1c
c000fe75:	31 c0                	xor    eax,eax
c000fe77:	5b                   	pop    ebx
c000fe78:	5e                   	pop    esi
c000fe79:	5f                   	pop    edi
c000fe7a:	5d                   	pop    ebp
c000fe7b:	c3                   	ret    

c000fe7c <Pipe::write(unsigned long long, void*, int*)>:
c000fe7c:	55                   	push   ebp
c000fe7d:	57                   	push   edi
c000fe7e:	56                   	push   esi
c000fe7f:	53                   	push   ebx
c000fe80:	83 ec 1c             	sub    esp,0x1c
c000fe83:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fe87:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000fe8b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000fe8f:	89 04 24             	mov    DWORD PTR [esp],eax
c000fe92:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000fe95:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000fe98:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fe9c:	89 de                	mov    esi,ebx
c000fe9e:	89 df                	mov    edi,ebx
c000fea0:	c1 ff 1f             	sar    edi,0x1f
c000fea3:	01 c6                	add    esi,eax
c000fea5:	89 c8                	mov    eax,ecx
c000fea7:	11 d7                	adc    edi,edx
c000fea9:	99                   	cdq    
c000feaa:	39 f1                	cmp    ecx,esi
c000feac:	89 d0                	mov    eax,edx
c000feae:	19 f8                	sbb    eax,edi
c000feb0:	b8 01 00 00 00       	mov    eax,0x1
c000feb5:	0f 82 80 00 00 00    	jb     c000ff3b <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000febb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000febe:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000fec1:	01 d8                	add    eax,ebx
c000fec3:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000fec7:	99                   	cdq    
c000fec8:	f7 f9                	idiv   ecx
c000feca:	29 d1                	sub    ecx,edx
c000fecc:	89 d7                	mov    edi,edx
c000fece:	89 c8                	mov    eax,ecx
c000fed0:	99                   	cdq    
c000fed1:	39 ce                	cmp    esi,ecx
c000fed3:	19 d3                	sbb    ebx,edx
c000fed5:	bb 00 00 00 00       	mov    ebx,0x0
c000feda:	72 04                	jb     c000fee0 <Pipe::write(unsigned long long, void*, int*)+0x64>
c000fedc:	89 f3                	mov    ebx,esi
c000fede:	29 cb                	sub    ebx,ecx
c000fee0:	89 f1                	mov    ecx,esi
c000fee2:	29 d9                	sub    ecx,ebx
c000fee4:	74 1a                	je     c000ff00 <Pipe::write(unsigned long long, void*, int*)+0x84>
c000fee6:	52                   	push   edx
c000fee7:	51                   	push   ecx
c000fee8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000feec:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000fef0:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000fef3:	57                   	push   edi
c000fef4:	e8 5c 07 ff ff       	call   c0000655 <memcpy>
c000fef9:	83 c4 10             	add    esp,0x10
c000fefc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ff00:	85 db                	test   ebx,ebx
c000ff02:	74 12                	je     c000ff16 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000ff04:	50                   	push   eax
c000ff05:	53                   	push   ebx
c000ff06:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000ff0a:	51                   	push   ecx
c000ff0b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000ff0e:	e8 42 07 ff ff       	call   c0000655 <memcpy>
c000ff13:	83 c4 10             	add    esp,0x10
c000ff16:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000ff19:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ff1e:	75 10                	jne    c000ff30 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000ff20:	83 ec 0c             	sub    esp,0xc
c000ff23:	68 55 8b 02 c0       	push   0xc0028b55
c000ff28:	e8 74 98 00 00       	call   c00197a1 <Krnl::panic(char const*)>
c000ff2d:	83 c4 10             	add    esp,0x10
c000ff30:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ff34:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000ff37:	89 38                	mov    DWORD PTR [eax],edi
c000ff39:	31 c0                	xor    eax,eax
c000ff3b:	83 c4 1c             	add    esp,0x1c
c000ff3e:	5b                   	pop    ebx
c000ff3f:	5e                   	pop    esi
c000ff40:	5f                   	pop    edi
c000ff41:	5d                   	pop    ebp
c000ff42:	c3                   	ret    
c000ff43:	90                   	nop

c000ff44 <Pipe::Pipe(int)>:
c000ff44:	83 ec 0c             	sub    esp,0xc
c000ff47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff4b:	83 ec 08             	sub    esp,0x8
c000ff4e:	6a 00                	push   0x0
c000ff50:	50                   	push   eax
c000ff51:	e8 fe 12 00 00       	call   c0011254 <UnixFile::UnixFile(int)>
c000ff56:	83 c4 10             	add    esp,0x10
c000ff59:	ba 7c 8b 02 c0       	mov    edx,0xc0028b7c
c000ff5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff62:	89 10                	mov    DWORD PTR [eax],edx
c000ff64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff68:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ff6c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ff6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff73:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000ff7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff7e:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000ff85:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff89:	83 ec 0c             	sub    esp,0xc
c000ff8c:	50                   	push   eax
c000ff8d:	e8 42 f5 ff ff       	call   c000f4d4 <malloc>
c000ff92:	83 c4 10             	add    esp,0x10
c000ff95:	89 c2                	mov    edx,eax
c000ff97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff9b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ff9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffa2:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000ffa6:	90                   	nop
c000ffa7:	83 c4 0c             	add    esp,0xc
c000ffaa:	c3                   	ret    
c000ffab:	90                   	nop

c000ffac <VgaText::isAtty()>:
c000ffac:	b0 01                	mov    al,0x1
c000ffae:	c3                   	ret    
c000ffaf:	90                   	nop

c000ffb0 <VgaText::~VgaText()>:
c000ffb0:	83 ec 0c             	sub    esp,0xc
c000ffb3:	ba 38 8c 02 c0       	mov    edx,0xc0028c38
c000ffb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffbc:	89 10                	mov    DWORD PTR [eax],edx
c000ffbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffc2:	83 ec 0c             	sub    esp,0xc
c000ffc5:	50                   	push   eax
c000ffc6:	e8 6b 14 00 00       	call   c0011436 <UnixFile::~UnixFile()>
c000ffcb:	83 c4 10             	add    esp,0x10
c000ffce:	90                   	nop
c000ffcf:	83 c4 0c             	add    esp,0xc
c000ffd2:	c3                   	ret    
c000ffd3:	90                   	nop

c000ffd4 <VgaText::~VgaText()>:
c000ffd4:	83 ec 0c             	sub    esp,0xc
c000ffd7:	83 ec 0c             	sub    esp,0xc
c000ffda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffde:	e8 cd ff ff ff       	call   c000ffb0 <VgaText::~VgaText()>
c000ffe3:	83 c4 10             	add    esp,0x10
c000ffe6:	83 ec 08             	sub    esp,0x8
c000ffe9:	68 60 12 00 00       	push   0x1260
c000ffee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fff2:	e8 b0 25 00 00       	call   c00125a7 <operator delete(void*, unsigned long)>
c000fff7:	83 c4 10             	add    esp,0x10
c000fffa:	83 c4 0c             	add    esp,0xc
c000fffd:	c3                   	ret    

c000fffe <VgaText::read(unsigned long long, void*, int*)>:
c000fffe:	83 ec 10             	sub    esp,0x10
c0010001:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010005:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010009:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001000d:	e8 a9 58 00 00       	call   c00158bb <readKeyboard(VgaText*, char*, unsigned long)>
c0010012:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010016:	89 02                	mov    DWORD PTR [edx],eax
c0010018:	31 c0                	xor    eax,eax
c001001a:	83 c4 1c             	add    esp,0x1c
c001001d:	c3                   	ret    

c001001e <setTerminalScrollLock(bool)>:
c001001e:	c3                   	ret    

c001001f <addToTerminalCycle(VgaText*)>:
c001001f:	8b 15 20 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c920
c0010025:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010029:	85 d2                	test   edx,edx
c001002b:	75 0c                	jne    c0010039 <addToTerminalCycle(VgaText*)+0x1a>
c001002d:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c0010033:	a3 20 c9 02 c0       	mov    ds:0xc002c920,eax
c0010038:	c3                   	ret    
c0010039:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c001003f:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c0010045:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c001004b:	c3                   	ret    

c001004c <installVgaTextImplementation()>:
c001004c:	83 ec 10             	sub    esp,0x10
c001004f:	6a 20                	push   0x20
c0010051:	6a 00                	push   0x0
c0010053:	68 00 c9 02 c0       	push   0xc002c900
c0010058:	e8 2e 06 ff ff       	call   c000068b <memset>
c001005d:	83 c4 1c             	add    esp,0x1c
c0010060:	c3                   	ret    

c0010061 <scrollTerminalScrollLock(int)>:
c0010061:	c3                   	ret    

c0010062 <VgaText::load()>:
c0010062:	53                   	push   ebx
c0010063:	31 c0                	xor    eax,eax
c0010065:	83 ec 58             	sub    esp,0x58
c0010068:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001006c:	89 e2                	mov    edx,esp
c001006e:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010072:	40                   	inc    eax
c0010073:	83 f8 50             	cmp    eax,0x50
c0010076:	75 f6                	jne    c001006e <VgaText::load()+0xc>
c0010078:	31 c0                	xor    eax,eax
c001007a:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c0010081:	84 c9                	test   cl,cl
c0010083:	74 06                	je     c001008b <VgaText::load()+0x29>
c0010085:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010088:	40                   	inc    eax
c0010089:	eb ef                	jmp    c001007a <VgaText::load()+0x18>
c001008b:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c0010091:	85 c0                	test   eax,eax
c0010093:	74 09                	je     c001009e <VgaText::load()+0x3c>
c0010095:	51                   	push   ecx
c0010096:	51                   	push   ecx
c0010097:	52                   	push   edx
c0010098:	53                   	push   ebx
c0010099:	ff d0                	call   eax
c001009b:	83 c4 10             	add    esp,0x10
c001009e:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c00100a4:	85 c0                	test   eax,eax
c00100a6:	74 09                	je     c00100b1 <VgaText::load()+0x4f>
c00100a8:	83 ec 0c             	sub    esp,0xc
c00100ab:	53                   	push   ebx
c00100ac:	ff d0                	call   eax
c00100ae:	83 c4 10             	add    esp,0x10
c00100b1:	83 c4 58             	add    esp,0x58
c00100b4:	5b                   	pop    ebx
c00100b5:	c3                   	ret    

c00100b6 <VgaText::updateCursor()>:
c00100b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100ba:	39 05 24 c9 02 c0    	cmp    DWORD PTR ds:0xc002c924,eax
c00100c0:	75 0c                	jne    c00100ce <VgaText::updateCursor()+0x18>
c00100c2:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c00100c8:	85 c0                	test   eax,eax
c00100ca:	74 02                	je     c00100ce <VgaText::updateCursor()+0x18>
c00100cc:	ff e0                	jmp    eax
c00100ce:	c3                   	ret    
c00100cf:	90                   	nop

c00100d0 <VgaText::showCursor(bool)>:
c00100d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00100d8:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c00100de:	c3                   	ret    
c00100df:	90                   	nop

c00100e0 <VgaText::disableBlink(bool)>:
c00100e0:	56                   	push   esi
c00100e1:	53                   	push   ebx
c00100e2:	51                   	push   ecx
c00100e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00100e7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00100eb:	39 1d 24 c9 02 c0    	cmp    DWORD PTR ds:0xc002c924,ebx
c00100f1:	75 18                	jne    c001010b <VgaText::disableBlink(bool)+0x2b>
c00100f3:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c00100f9:	85 c0                	test   eax,eax
c00100fb:	74 0e                	je     c001010b <VgaText::disableBlink(bool)+0x2b>
c00100fd:	89 f1                	mov    ecx,esi
c00100ff:	52                   	push   edx
c0010100:	52                   	push   edx
c0010101:	0f b6 d1             	movzx  edx,cl
c0010104:	52                   	push   edx
c0010105:	53                   	push   ebx
c0010106:	ff d0                	call   eax
c0010108:	83 c4 10             	add    esp,0x10
c001010b:	89 f0                	mov    eax,esi
c001010d:	83 f0 01             	xor    eax,0x1
c0010110:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c0010116:	58                   	pop    eax
c0010117:	5b                   	pop    ebx
c0010118:	5e                   	pop    esi
c0010119:	c3                   	ret    

c001011a <VgaText::doANSI_SGR(int)>:
c001011a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001011e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010122:	85 d2                	test   edx,edx
c0010124:	75 14                	jne    c001013a <VgaText::doANSI_SGR(int)+0x20>
c0010126:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c001012c:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010132:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c0010138:	eb 65                	jmp    c001019f <VgaText::doANSI_SGR(int)+0x85>
c001013a:	83 fa 07             	cmp    edx,0x7
c001013d:	75 14                	jne    c0010153 <VgaText::doANSI_SGR(int)+0x39>
c001013f:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c0010145:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c001014b:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c0010151:	eb 4c                	jmp    c001019f <VgaText::doANSI_SGR(int)+0x85>
c0010153:	83 fa 1b             	cmp    edx,0x1b
c0010156:	74 ce                	je     c0010126 <VgaText::doANSI_SGR(int)+0xc>
c0010158:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001015b:	83 f9 07             	cmp    ecx,0x7
c001015e:	77 09                	ja     c0010169 <VgaText::doANSI_SGR(int)+0x4f>
c0010160:	8b 14 8d a0 b7 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd4860]
c0010167:	eb 20                	jmp    c0010189 <VgaText::doANSI_SGR(int)+0x6f>
c0010169:	8d 4a d8             	lea    ecx,[edx-0x28]
c001016c:	83 f9 07             	cmp    ecx,0x7
c001016f:	77 09                	ja     c001017a <VgaText::doANSI_SGR(int)+0x60>
c0010171:	8b 14 8d a0 b7 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd4860]
c0010178:	eb 25                	jmp    c001019f <VgaText::doANSI_SGR(int)+0x85>
c001017a:	8d 4a a6             	lea    ecx,[edx-0x5a]
c001017d:	83 f9 07             	cmp    ecx,0x7
c0010180:	77 0e                	ja     c0010190 <VgaText::doANSI_SGR(int)+0x76>
c0010182:	8b 14 95 58 b6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd49a8]
c0010189:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001018f:	c3                   	ret    
c0010190:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010193:	83 f9 07             	cmp    ecx,0x7
c0010196:	77 0d                	ja     c00101a5 <VgaText::doANSI_SGR(int)+0x8b>
c0010198:	8b 14 95 30 b6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd49d0]
c001019f:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00101a5:	c3                   	ret    

c00101a6 <VgaText::setDefaultBgColour(VgaColour)>:
c00101a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101ae:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c00101b4:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00101ba:	c3                   	ret    
c00101bb:	90                   	nop

c00101bc <VgaText::setDefaultFgColour(VgaColour)>:
c00101bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101c4:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c00101ca:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00101d0:	c3                   	ret    
c00101d1:	90                   	nop

c00101d2 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00101d2:	53                   	push   ebx
c00101d3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00101d7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00101db:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00101df:	51                   	push   ecx
c00101e0:	e8 c1 ff ff ff       	call   c00101a6 <VgaText::setDefaultBgColour(VgaColour)>
c00101e5:	58                   	pop    eax
c00101e6:	5a                   	pop    edx
c00101e7:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00101eb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00101ef:	5b                   	pop    ebx
c00101f0:	eb ca                	jmp    c00101bc <VgaText::setDefaultFgColour(VgaColour)>

c00101f2 <VgaText::combineColours(unsigned char, unsigned char)>:
c00101f2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00101f6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00101fa:	b0 02                	mov    al,0x2
c00101fc:	80 3d e0 c8 02 c0 00 	cmp    BYTE PTR ds:0xc002c8e0,0x0
c0010203:	75 0a                	jne    c001020f <VgaText::combineColours(unsigned char, unsigned char)+0x1d>
c0010205:	83 e2 0f             	and    edx,0xf
c0010208:	c1 e1 04             	shl    ecx,0x4
c001020b:	88 c8                	mov    al,cl
c001020d:	09 d0                	or     eax,edx
c001020f:	c3                   	ret    

c0010210 <VgaText::scrollScreen()>:
c0010210:	55                   	push   ebp
c0010211:	57                   	push   edi
c0010212:	bf 01 00 00 00       	mov    edi,0x1
c0010217:	56                   	push   esi
c0010218:	53                   	push   ebx
c0010219:	83 ec 0c             	sub    esp,0xc
c001021c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010220:	69 f7 a0 00 00 00    	imul   esi,edi,0xa0
c0010226:	31 ed                	xor    ebp,ebp
c0010228:	01 de                	add    esi,ebx
c001022a:	8a 46 0c             	mov    al,BYTE PTR [esi+0xc]
c001022d:	83 ff 17             	cmp    edi,0x17
c0010230:	88 86 6c ff ff ff    	mov    BYTE PTR [esi-0x94],al
c0010236:	75 28                	jne    c0010260 <VgaText::scrollScreen()+0x50>
c0010238:	f7 c5 01 00 00 00    	test   ebp,0x1
c001023e:	74 1c                	je     c001025c <VgaText::scrollScreen()+0x4c>
c0010240:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c0010247:	50                   	push   eax
c0010248:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c001024f:	50                   	push   eax
c0010250:	e8 9d ff ff ff       	call   c00101f2 <VgaText::combineColours(unsigned char, unsigned char)>
c0010255:	5a                   	pop    edx
c0010256:	59                   	pop    ecx
c0010257:	88 46 0c             	mov    BYTE PTR [esi+0xc],al
c001025a:	eb 04                	jmp    c0010260 <VgaText::scrollScreen()+0x50>
c001025c:	c6 46 0c 20          	mov    BYTE PTR [esi+0xc],0x20
c0010260:	45                   	inc    ebp
c0010261:	46                   	inc    esi
c0010262:	81 fd a0 00 00 00    	cmp    ebp,0xa0
c0010268:	75 c0                	jne    c001022a <VgaText::scrollScreen()+0x1a>
c001026a:	47                   	inc    edi
c001026b:	83 ff 18             	cmp    edi,0x18
c001026e:	75 b0                	jne    c0010220 <VgaText::scrollScreen()+0x10>
c0010270:	39 1d 24 c9 02 c0    	cmp    DWORD PTR ds:0xc002c924,ebx
c0010276:	75 24                	jne    c001029c <VgaText::scrollScreen()+0x8c>
c0010278:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c001027f:	74 08                	je     c0010289 <VgaText::scrollScreen()+0x79>
c0010281:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c0010287:	eb 13                	jmp    c001029c <VgaText::scrollScreen()+0x8c>
c0010289:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c001028f:	85 c0                	test   eax,eax
c0010291:	74 09                	je     c001029c <VgaText::scrollScreen()+0x8c>
c0010293:	83 ec 0c             	sub    esp,0xc
c0010296:	53                   	push   ebx
c0010297:	ff d0                	call   eax
c0010299:	83 c4 10             	add    esp,0x10
c001029c:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00102a0:	83 c4 0c             	add    esp,0xc
c00102a3:	5b                   	pop    ebx
c00102a4:	5e                   	pop    esi
c00102a5:	5f                   	pop    edi
c00102a6:	5d                   	pop    ebp
c00102a7:	e9 0a fe ff ff       	jmp    c00100b6 <VgaText::updateCursor()>

c00102ac <VgaText::combineCharAndColour(char, unsigned char)>:
c00102ac:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00102b1:	c1 e0 08             	shl    eax,0x8
c00102b4:	89 c2                	mov    edx,eax
c00102b6:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00102bb:	09 d0                	or     eax,edx
c00102bd:	c3                   	ret    

c00102be <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00102be:	53                   	push   ebx
c00102bf:	83 ec 08             	sub    esp,0x8
c00102c2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00102c6:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00102cb:	50                   	push   eax
c00102cc:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00102d1:	50                   	push   eax
c00102d2:	e8 1b ff ff ff       	call   c00101f2 <VgaText::combineColours(unsigned char, unsigned char)>
c00102d7:	5a                   	pop    edx
c00102d8:	0f b6 c0             	movzx  eax,al
c00102db:	59                   	pop    ecx
c00102dc:	0f be 4c 24 14       	movsx  ecx,BYTE PTR [esp+0x14]
c00102e1:	50                   	push   eax
c00102e2:	51                   	push   ecx
c00102e3:	e8 c4 ff ff ff       	call   c00102ac <VgaText::combineCharAndColour(char, unsigned char)>
c00102e8:	5a                   	pop    edx
c00102e9:	5a                   	pop    edx
c00102ea:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c00102f0:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c00102f4:	0f b7 d2             	movzx  edx,dx
c00102f7:	66 89 44 53 0c       	mov    WORD PTR [ebx+edx*2+0xc],ax
c00102fc:	39 1d 24 c9 02 c0    	cmp    DWORD PTR ds:0xc002c924,ebx
c0010302:	75 14                	jne    c0010318 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010304:	8b 83 18 10 00 00    	mov    eax,DWORD PTR [ebx+0x1018]
c001030a:	85 c0                	test   eax,eax
c001030c:	74 0a                	je     c0010318 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c001030e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010312:	83 c4 08             	add    esp,0x8
c0010315:	5b                   	pop    ebx
c0010316:	ff e0                	jmp    eax
c0010318:	83 c4 08             	add    esp,0x8
c001031b:	5b                   	pop    ebx
c001031c:	c3                   	ret    
c001031d:	90                   	nop

c001031e <VgaText::getCursorX()>:
c001031e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010322:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c0010328:	c3                   	ret    
c0010329:	90                   	nop

c001032a <VgaText::getCursorY()>:
c001032a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001032e:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c0010334:	c3                   	ret    
c0010335:	90                   	nop

c0010336 <VgaText::setCursor(int, int)>:
c0010336:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001033a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001033e:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c0010344:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010348:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c001034e:	e9 63 fd ff ff       	jmp    c00100b6 <VgaText::updateCursor()>
c0010353:	90                   	nop

c0010354 <VgaText::setCursorX(int)>:
c0010354:	83 ec 10             	sub    esp,0x10
c0010357:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001035b:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c0010361:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010365:	50                   	push   eax
c0010366:	e8 cb ff ff ff       	call   c0010336 <VgaText::setCursor(int, int)>
c001036b:	83 c4 1c             	add    esp,0x1c
c001036e:	c3                   	ret    
c001036f:	90                   	nop

c0010370 <VgaText::setCursorY(int)>:
c0010370:	83 ec 10             	sub    esp,0x10
c0010373:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010377:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001037b:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c0010381:	50                   	push   eax
c0010382:	e8 af ff ff ff       	call   c0010336 <VgaText::setCursor(int, int)>
c0010387:	83 c4 1c             	add    esp,0x1c
c001038a:	c3                   	ret    
c001038b:	90                   	nop

c001038c <VgaText::incrementCursor(bool)>:
c001038c:	56                   	push   esi
c001038d:	53                   	push   ebx
c001038e:	51                   	push   ecx
c001038f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010393:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010397:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c001039d:	40                   	inc    eax
c001039e:	83 f8 50             	cmp    eax,0x50
c00103a1:	74 08                	je     c00103ab <VgaText::incrementCursor(bool)+0x1f>
c00103a3:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c00103a9:	eb 33                	jmp    c00103de <VgaText::incrementCursor(bool)+0x52>
c00103ab:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00103b1:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00103bb:	8d 50 01             	lea    edx,[eax+0x1]
c00103be:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00103c4:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00103ca:	75 12                	jne    c00103de <VgaText::incrementCursor(bool)+0x52>
c00103cc:	83 ec 0c             	sub    esp,0xc
c00103cf:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00103d5:	53                   	push   ebx
c00103d6:	e8 35 fe ff ff       	call   c0010210 <VgaText::scrollScreen()>
c00103db:	83 c4 10             	add    esp,0x10
c00103de:	89 f0                	mov    eax,esi
c00103e0:	84 c0                	test   al,al
c00103e2:	74 0c                	je     c00103f0 <VgaText::incrementCursor(bool)+0x64>
c00103e4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00103e8:	5a                   	pop    edx
c00103e9:	5b                   	pop    ebx
c00103ea:	5e                   	pop    esi
c00103eb:	e9 c6 fc ff ff       	jmp    c00100b6 <VgaText::updateCursor()>
c00103f0:	58                   	pop    eax
c00103f1:	5b                   	pop    ebx
c00103f2:	5e                   	pop    esi
c00103f3:	c3                   	ret    

c00103f4 <VgaText::updateRAMUsageDisplay(int)>:
c00103f4:	56                   	push   esi
c00103f5:	8b 35 80 b7 02 c0    	mov    esi,DWORD PTR ds:0xc002b780
c00103fb:	53                   	push   ebx
c00103fc:	6a 0f                	push   0xf
c00103fe:	6a 00                	push   0x0
c0010400:	e8 ed fd ff ff       	call   c00101f2 <VgaText::combineColours(unsigned char, unsigned char)>
c0010405:	5a                   	pop    edx
c0010406:	0f b6 c0             	movzx  eax,al
c0010409:	59                   	pop    ecx
c001040a:	b9 0a 00 00 00       	mov    ecx,0xa
c001040f:	50                   	push   eax
c0010410:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010414:	99                   	cdq    
c0010415:	f7 f9                	idiv   ecx
c0010417:	89 d3                	mov    ebx,edx
c0010419:	83 c0 30             	add    eax,0x30
c001041c:	83 c3 30             	add    ebx,0x30
c001041f:	0f be c0             	movsx  eax,al
c0010422:	0f b6 db             	movzx  ebx,bl
c0010425:	50                   	push   eax
c0010426:	e8 81 fe ff ff       	call   c00102ac <VgaText::combineCharAndColour(char, unsigned char)>
c001042b:	5a                   	pop    edx
c001042c:	59                   	pop    ecx
c001042d:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c0010434:	6a 0f                	push   0xf
c0010436:	6a 00                	push   0x0
c0010438:	e8 b5 fd ff ff       	call   c00101f2 <VgaText::combineColours(unsigned char, unsigned char)>
c001043d:	5a                   	pop    edx
c001043e:	0f b6 c0             	movzx  eax,al
c0010441:	59                   	pop    ecx
c0010442:	50                   	push   eax
c0010443:	53                   	push   ebx
c0010444:	e8 63 fe ff ff       	call   c00102ac <VgaText::combineCharAndColour(char, unsigned char)>
c0010449:	5b                   	pop    ebx
c001044a:	5a                   	pop    edx
c001044b:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c0010452:	6a 0f                	push   0xf
c0010454:	6a 00                	push   0x0
c0010456:	e8 97 fd ff ff       	call   c00101f2 <VgaText::combineColours(unsigned char, unsigned char)>
c001045b:	59                   	pop    ecx
c001045c:	0f b6 c0             	movzx  eax,al
c001045f:	5b                   	pop    ebx
c0010460:	50                   	push   eax
c0010461:	6a 25                	push   0x25
c0010463:	e8 44 fe ff ff       	call   c00102ac <VgaText::combineCharAndColour(char, unsigned char)>
c0010468:	5a                   	pop    edx
c0010469:	59                   	pop    ecx
c001046a:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c0010471:	5b                   	pop    ebx
c0010472:	5e                   	pop    esi
c0010473:	c3                   	ret    

c0010474 <VgaText::updateDiskUsage()>:
c0010474:	55                   	push   ebp
c0010475:	57                   	push   edi
c0010476:	8b 3d 80 b7 02 c0    	mov    edi,DWORD PTR ds:0xc002b780
c001047c:	56                   	push   esi
c001047d:	53                   	push   ebx
c001047e:	bb 0a 00 00 00       	mov    ebx,0xa
c0010483:	6a 0f                	push   0xf
c0010485:	6a 00                	push   0x0
c0010487:	e8 66 fd ff ff       	call   c00101f2 <VgaText::combineColours(unsigned char, unsigned char)>
c001048c:	5a                   	pop    edx
c001048d:	8b 35 88 eb 02 c0    	mov    esi,DWORD PTR ds:0xc002eb88
c0010493:	59                   	pop    ecx
c0010494:	0f b6 c0             	movzx  eax,al
c0010497:	b9 10 27 00 00       	mov    ecx,0x2710
c001049c:	50                   	push   eax
c001049d:	89 f0                	mov    eax,esi
c001049f:	99                   	cdq    
c00104a0:	f7 f9                	idiv   ecx
c00104a2:	99                   	cdq    
c00104a3:	f7 fb                	idiv   ebx
c00104a5:	83 c2 30             	add    edx,0x30
c00104a8:	0f b6 d2             	movzx  edx,dl
c00104ab:	52                   	push   edx
c00104ac:	e8 fb fd ff ff       	call   c00102ac <VgaText::combineCharAndColour(char, unsigned char)>
c00104b1:	5d                   	pop    ebp
c00104b2:	5a                   	pop    edx
c00104b3:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c00104b7:	6a 0f                	push   0xf
c00104b9:	6a 00                	push   0x0
c00104bb:	e8 32 fd ff ff       	call   c00101f2 <VgaText::combineColours(unsigned char, unsigned char)>
c00104c0:	59                   	pop    ecx
c00104c1:	0f b6 c0             	movzx  eax,al
c00104c4:	5d                   	pop    ebp
c00104c5:	bd e8 03 00 00       	mov    ebp,0x3e8
c00104ca:	50                   	push   eax
c00104cb:	89 f0                	mov    eax,esi
c00104cd:	99                   	cdq    
c00104ce:	f7 fd                	idiv   ebp
c00104d0:	99                   	cdq    
c00104d1:	f7 fb                	idiv   ebx
c00104d3:	8d 42 30             	lea    eax,[edx+0x30]
c00104d6:	0f b6 c0             	movzx  eax,al
c00104d9:	50                   	push   eax
c00104da:	e8 cd fd ff ff       	call   c00102ac <VgaText::combineCharAndColour(char, unsigned char)>
c00104df:	5a                   	pop    edx
c00104e0:	59                   	pop    ecx
c00104e1:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c00104e8:	6a 0f                	push   0xf
c00104ea:	6a 00                	push   0x0
c00104ec:	e8 01 fd ff ff       	call   c00101f2 <VgaText::combineColours(unsigned char, unsigned char)>
c00104f1:	5a                   	pop    edx
c00104f2:	0f b6 c0             	movzx  eax,al
c00104f5:	59                   	pop    ecx
c00104f6:	b9 64 00 00 00       	mov    ecx,0x64
c00104fb:	50                   	push   eax
c00104fc:	89 f0                	mov    eax,esi
c00104fe:	99                   	cdq    
c00104ff:	f7 f9                	idiv   ecx
c0010501:	99                   	cdq    
c0010502:	f7 fb                	idiv   ebx
c0010504:	8d 42 30             	lea    eax,[edx+0x30]
c0010507:	0f b6 c0             	movzx  eax,al
c001050a:	50                   	push   eax
c001050b:	e8 9c fd ff ff       	call   c00102ac <VgaText::combineCharAndColour(char, unsigned char)>
c0010510:	5a                   	pop    edx
c0010511:	59                   	pop    ecx
c0010512:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010519:	6a 0f                	push   0xf
c001051b:	6a 00                	push   0x0
c001051d:	e8 d0 fc ff ff       	call   c00101f2 <VgaText::combineColours(unsigned char, unsigned char)>
c0010522:	5a                   	pop    edx
c0010523:	0f b6 c0             	movzx  eax,al
c0010526:	59                   	pop    ecx
c0010527:	50                   	push   eax
c0010528:	89 f0                	mov    eax,esi
c001052a:	99                   	cdq    
c001052b:	f7 fb                	idiv   ebx
c001052d:	89 d6                	mov    esi,edx
c001052f:	99                   	cdq    
c0010530:	f7 fb                	idiv   ebx
c0010532:	8d 42 30             	lea    eax,[edx+0x30]
c0010535:	0f b6 c0             	movzx  eax,al
c0010538:	50                   	push   eax
c0010539:	e8 6e fd ff ff       	call   c00102ac <VgaText::combineCharAndColour(char, unsigned char)>
c001053e:	5a                   	pop    edx
c001053f:	59                   	pop    ecx
c0010540:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010547:	6a 0f                	push   0xf
c0010549:	6a 00                	push   0x0
c001054b:	e8 a2 fc ff ff       	call   c00101f2 <VgaText::combineColours(unsigned char, unsigned char)>
c0010550:	5a                   	pop    edx
c0010551:	0f b6 c0             	movzx  eax,al
c0010554:	59                   	pop    ecx
c0010555:	50                   	push   eax
c0010556:	8d 46 30             	lea    eax,[esi+0x30]
c0010559:	0f b6 f0             	movzx  esi,al
c001055c:	56                   	push   esi
c001055d:	e8 4a fd ff ff       	call   c00102ac <VgaText::combineCharAndColour(char, unsigned char)>
c0010562:	5e                   	pop    esi
c0010563:	5a                   	pop    edx
c0010564:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c001056b:	6a 0f                	push   0xf
c001056d:	6a 00                	push   0x0
c001056f:	e8 7e fc ff ff       	call   c00101f2 <VgaText::combineColours(unsigned char, unsigned char)>
c0010574:	59                   	pop    ecx
c0010575:	0f b6 c0             	movzx  eax,al
c0010578:	5e                   	pop    esi
c0010579:	b9 10 27 00 00       	mov    ecx,0x2710
c001057e:	8b 35 84 eb 02 c0    	mov    esi,DWORD PTR ds:0xc002eb84
c0010584:	50                   	push   eax
c0010585:	89 f0                	mov    eax,esi
c0010587:	99                   	cdq    
c0010588:	f7 f9                	idiv   ecx
c001058a:	99                   	cdq    
c001058b:	f7 fb                	idiv   ebx
c001058d:	8d 42 30             	lea    eax,[edx+0x30]
c0010590:	0f b6 c0             	movzx  eax,al
c0010593:	50                   	push   eax
c0010594:	e8 13 fd ff ff       	call   c00102ac <VgaText::combineCharAndColour(char, unsigned char)>
c0010599:	5a                   	pop    edx
c001059a:	59                   	pop    ecx
c001059b:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c00105a2:	6a 0f                	push   0xf
c00105a4:	6a 00                	push   0x0
c00105a6:	e8 47 fc ff ff       	call   c00101f2 <VgaText::combineColours(unsigned char, unsigned char)>
c00105ab:	5a                   	pop    edx
c00105ac:	0f b6 c0             	movzx  eax,al
c00105af:	59                   	pop    ecx
c00105b0:	50                   	push   eax
c00105b1:	89 f0                	mov    eax,esi
c00105b3:	99                   	cdq    
c00105b4:	f7 fd                	idiv   ebp
c00105b6:	99                   	cdq    
c00105b7:	f7 fb                	idiv   ebx
c00105b9:	83 c2 30             	add    edx,0x30
c00105bc:	0f b6 d2             	movzx  edx,dl
c00105bf:	52                   	push   edx
c00105c0:	e8 e7 fc ff ff       	call   c00102ac <VgaText::combineCharAndColour(char, unsigned char)>
c00105c5:	5d                   	pop    ebp
c00105c6:	5a                   	pop    edx
c00105c7:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c00105ce:	6a 0f                	push   0xf
c00105d0:	6a 00                	push   0x0
c00105d2:	e8 1b fc ff ff       	call   c00101f2 <VgaText::combineColours(unsigned char, unsigned char)>
c00105d7:	59                   	pop    ecx
c00105d8:	0f b6 c0             	movzx  eax,al
c00105db:	5d                   	pop    ebp
c00105dc:	b9 64 00 00 00       	mov    ecx,0x64
c00105e1:	50                   	push   eax
c00105e2:	89 f0                	mov    eax,esi
c00105e4:	99                   	cdq    
c00105e5:	f7 f9                	idiv   ecx
c00105e7:	99                   	cdq    
c00105e8:	f7 fb                	idiv   ebx
c00105ea:	83 c2 30             	add    edx,0x30
c00105ed:	0f b6 d2             	movzx  edx,dl
c00105f0:	52                   	push   edx
c00105f1:	e8 b6 fc ff ff       	call   c00102ac <VgaText::combineCharAndColour(char, unsigned char)>
c00105f6:	5a                   	pop    edx
c00105f7:	59                   	pop    ecx
c00105f8:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c00105ff:	6a 0f                	push   0xf
c0010601:	6a 00                	push   0x0
c0010603:	e8 ea fb ff ff       	call   c00101f2 <VgaText::combineColours(unsigned char, unsigned char)>
c0010608:	5d                   	pop    ebp
c0010609:	0f b6 c0             	movzx  eax,al
c001060c:	5a                   	pop    edx
c001060d:	50                   	push   eax
c001060e:	89 f0                	mov    eax,esi
c0010610:	99                   	cdq    
c0010611:	f7 fb                	idiv   ebx
c0010613:	89 d6                	mov    esi,edx
c0010615:	99                   	cdq    
c0010616:	f7 fb                	idiv   ebx
c0010618:	8d 42 30             	lea    eax,[edx+0x30]
c001061b:	0f b6 c0             	movzx  eax,al
c001061e:	50                   	push   eax
c001061f:	e8 88 fc ff ff       	call   c00102ac <VgaText::combineCharAndColour(char, unsigned char)>
c0010624:	59                   	pop    ecx
c0010625:	5b                   	pop    ebx
c0010626:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c001062d:	6a 0f                	push   0xf
c001062f:	6a 00                	push   0x0
c0010631:	e8 bc fb ff ff       	call   c00101f2 <VgaText::combineColours(unsigned char, unsigned char)>
c0010636:	5d                   	pop    ebp
c0010637:	0f b6 c0             	movzx  eax,al
c001063a:	5a                   	pop    edx
c001063b:	50                   	push   eax
c001063c:	8d 46 30             	lea    eax,[esi+0x30]
c001063f:	0f b6 f0             	movzx  esi,al
c0010642:	56                   	push   esi
c0010643:	e8 64 fc ff ff       	call   c00102ac <VgaText::combineCharAndColour(char, unsigned char)>
c0010648:	59                   	pop    ecx
c0010649:	5b                   	pop    ebx
c001064a:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010651:	5b                   	pop    ebx
c0010652:	5e                   	pop    esi
c0010653:	5f                   	pop    edi
c0010654:	5d                   	pop    ebp
c0010655:	c3                   	ret    

c0010656 <VgaText::updateTitle()>:
c0010656:	53                   	push   ebx
c0010657:	31 c0                	xor    eax,eax
c0010659:	83 ec 58             	sub    esp,0x58
c001065c:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010660:	89 e1                	mov    ecx,esp
c0010662:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010666:	40                   	inc    eax
c0010667:	83 f8 50             	cmp    eax,0x50
c001066a:	75 f6                	jne    c0010662 <VgaText::updateTitle()+0xc>
c001066c:	31 c0                	xor    eax,eax
c001066e:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010675:	84 db                	test   bl,bl
c0010677:	74 06                	je     c001067f <VgaText::updateTitle()+0x29>
c0010679:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c001067c:	40                   	inc    eax
c001067d:	eb ef                	jmp    c001066e <VgaText::updateTitle()+0x18>
c001067f:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010685:	85 c0                	test   eax,eax
c0010687:	74 09                	je     c0010692 <VgaText::updateTitle()+0x3c>
c0010689:	53                   	push   ebx
c001068a:	53                   	push   ebx
c001068b:	51                   	push   ecx
c001068c:	52                   	push   edx
c001068d:	ff d0                	call   eax
c001068f:	83 c4 10             	add    esp,0x10
c0010692:	e8 dd fd ff ff       	call   c0010474 <VgaText::updateDiskUsage()>
c0010697:	83 c4 58             	add    esp,0x58
c001069a:	5b                   	pop    ebx
c001069b:	c3                   	ret    

c001069c <VgaText::setTitleTextColour(VgaColour)>:
c001069c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106a4:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c00106aa:	eb aa                	jmp    c0010656 <VgaText::updateTitle()>

c00106ac <VgaText::setTitleColour(VgaColour)>:
c00106ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106b4:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c00106ba:	eb 9a                	jmp    c0010656 <VgaText::updateTitle()>

c00106bc <VgaText::setTitle(char*)>:
c00106bc:	53                   	push   ebx
c00106bd:	83 ec 10             	sub    esp,0x10
c00106c0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00106c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106c8:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c00106ce:	50                   	push   eax
c00106cf:	e8 56 00 ff ff       	call   c000072a <strcpy>
c00106d4:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00106d8:	83 c4 18             	add    esp,0x18
c00106db:	5b                   	pop    ebx
c00106dc:	e9 75 ff ff ff       	jmp    c0010656 <VgaText::updateTitle()>
c00106e1:	90                   	nop

c00106e2 <VgaText::decrementCursor(bool)>:
c00106e2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00106e6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00106ea:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c00106f0:	85 c0                	test   eax,eax
c00106f2:	74 07                	je     c00106fb <VgaText::decrementCursor(bool)+0x19>
c00106f4:	48                   	dec    eax
c00106f5:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c00106fb:	84 c9                	test   cl,cl
c00106fd:	74 09                	je     c0010708 <VgaText::decrementCursor(bool)+0x26>
c00106ff:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010703:	e9 ae f9 ff ff       	jmp    c00100b6 <VgaText::updateCursor()>
c0010708:	c3                   	ret    
c0010709:	90                   	nop

c001070a <VgaText::putchar(char, VgaColour, VgaColour)>:
c001070a:	53                   	push   ebx
c001070b:	83 ec 08             	sub    esp,0x8
c001070e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010712:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010716:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001071a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001071e:	3c 07                	cmp    al,0x7
c0010720:	75 2a                	jne    c001074c <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010722:	a1 cc c9 02 c0       	mov    eax,ds:0xc002c9cc
c0010727:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001072f:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010737:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c001073f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010743:	83 c4 08             	add    esp,0x8
c0010746:	5b                   	pop    ebx
c0010747:	e9 3a 2d 00 00       	jmp    c0013486 <Buzzer::beep(int, int, bool)>
c001074c:	3c 0d                	cmp    al,0xd
c001074e:	75 0c                	jne    c001075c <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010750:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c001075a:	eb 3b                	jmp    c0010797 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c001075c:	3c 0a                	cmp    al,0xa
c001075e:	75 40                	jne    c00107a0 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010760:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010766:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010770:	8d 50 01             	lea    edx,[eax+0x1]
c0010773:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010779:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c001077f:	75 12                	jne    c0010793 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010781:	83 ec 0c             	sub    esp,0xc
c0010784:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c001078a:	53                   	push   ebx
c001078b:	e8 80 fa ff ff       	call   c0010210 <VgaText::scrollScreen()>
c0010790:	83 c4 10             	add    esp,0x10
c0010793:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010797:	83 c4 08             	add    esp,0x8
c001079a:	5b                   	pop    ebx
c001079b:	e9 16 f9 ff ff       	jmp    c00100b6 <VgaText::updateCursor()>
c00107a0:	3c 08                	cmp    al,0x8
c00107a2:	75 31                	jne    c00107d5 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c00107a4:	50                   	push   eax
c00107a5:	50                   	push   eax
c00107a6:	6a 01                	push   0x1
c00107a8:	53                   	push   ebx
c00107a9:	e8 34 ff ff ff       	call   c00106e2 <VgaText::decrementCursor(bool)>
c00107ae:	5a                   	pop    edx
c00107af:	59                   	pop    ecx
c00107b0:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00107b6:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00107bc:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00107c2:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00107c8:	6a 20                	push   0x20
c00107ca:	53                   	push   ebx
c00107cb:	e8 ee fa ff ff       	call   c00102be <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00107d0:	83 c4 28             	add    esp,0x28
c00107d3:	5b                   	pop    ebx
c00107d4:	c3                   	ret    
c00107d5:	83 ec 08             	sub    esp,0x8
c00107d8:	0f be c0             	movsx  eax,al
c00107db:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00107e1:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00107e7:	51                   	push   ecx
c00107e8:	52                   	push   edx
c00107e9:	50                   	push   eax
c00107ea:	53                   	push   ebx
c00107eb:	e8 ce fa ff ff       	call   c00102be <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00107f0:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00107f4:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00107fc:	83 c4 28             	add    esp,0x28
c00107ff:	5b                   	pop    ebx
c0010800:	e9 87 fb ff ff       	jmp    c001038c <VgaText::incrementCursor(bool)>
c0010805:	90                   	nop

c0010806 <VgaText::isShowingCursor()>:
c0010806:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001080a:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010810:	c3                   	ret    
c0010811:	90                   	nop

c0010812 <VgaText::isBlinkDisabled()>:
c0010812:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010816:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c001081c:	83 f0 01             	xor    eax,0x1
c001081f:	c3                   	ret    

c0010820 <VgaText::setCursorHeight(int)>:
c0010820:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010824:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010828:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c001082e:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010835:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010839:	e9 92 f8 ff ff       	jmp    c00100d0 <VgaText::showCursor(bool)>

c001083e <VgaText::getCursorHeight()>:
c001083e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010842:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010848:	c3                   	ret    

c0010849 <setActiveTerminal(VgaText*)>:
c0010849:	53                   	push   ebx
c001084a:	83 ec 08             	sub    esp,0x8
c001084d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010851:	85 db                	test   ebx,ebx
c0010853:	75 11                	jne    c0010866 <setActiveTerminal(VgaText*)+0x1d>
c0010855:	c7 44 24 10 90 8b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028b90
c001085d:	83 c4 08             	add    esp,0x8
c0010860:	5b                   	pop    ebx
c0010861:	e9 3b 8f 00 00       	jmp    c00197a1 <Krnl::panic(char const*)>
c0010866:	50                   	push   eax
c0010867:	50                   	push   eax
c0010868:	53                   	push   ebx
c0010869:	68 9e 8b 02 c0       	push   0xc0028b9e
c001086e:	e8 14 1e 00 00       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0010873:	a1 24 c9 02 c0       	mov    eax,ds:0xc002c924
c0010878:	83 c4 10             	add    esp,0x10
c001087b:	85 c0                	test   eax,eax
c001087d:	74 0c                	je     c001088b <setActiveTerminal(VgaText*)+0x42>
c001087f:	83 ec 0c             	sub    esp,0xc
c0010882:	50                   	push   eax
c0010883:	e8 2e f8 ff ff       	call   c00100b6 <VgaText::updateCursor()>
c0010888:	83 c4 10             	add    esp,0x10
c001088b:	89 1d 24 c9 02 c0    	mov    DWORD PTR ds:0xc002c924,ebx
c0010891:	51                   	push   ecx
c0010892:	51                   	push   ecx
c0010893:	53                   	push   ebx
c0010894:	68 b6 8b 02 c0       	push   0xc0028bb6
c0010899:	e8 e9 1d 00 00       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001089e:	83 c4 0c             	add    esp,0xc
c00108a1:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00108a7:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00108ad:	53                   	push   ebx
c00108ae:	e8 83 fa ff ff       	call   c0010336 <VgaText::setCursor(int, int)>
c00108b3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00108b6:	e8 57 ff ff ff       	call   c0010812 <VgaText::isBlinkDisabled()>
c00108bb:	5a                   	pop    edx
c00108bc:	0f b6 c0             	movzx  eax,al
c00108bf:	59                   	pop    ecx
c00108c0:	50                   	push   eax
c00108c1:	53                   	push   ebx
c00108c2:	e8 19 f8 ff ff       	call   c00100e0 <VgaText::disableBlink(bool)>
c00108c7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00108ca:	e8 6f ff ff ff       	call   c001083e <VgaText::getCursorHeight()>
c00108cf:	5a                   	pop    edx
c00108d0:	59                   	pop    ecx
c00108d1:	50                   	push   eax
c00108d2:	53                   	push   ebx
c00108d3:	e8 48 ff ff ff       	call   c0010820 <VgaText::setCursorHeight(int)>
c00108d8:	83 c4 10             	add    esp,0x10
c00108db:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00108e2:	75 0a                	jne    c00108ee <setActiveTerminal(VgaText*)+0xa5>
c00108e4:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c00108ee:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00108f2:	83 c4 08             	add    esp,0x8
c00108f5:	5b                   	pop    ebx
c00108f6:	e9 67 f7 ff ff       	jmp    c0010062 <VgaText::load()>

c00108fb <doTerminalCycle()>:
c00108fb:	83 ec 18             	sub    esp,0x18
c00108fe:	a1 20 c9 02 c0       	mov    eax,ds:0xc002c920
c0010903:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010909:	50                   	push   eax
c001090a:	a3 20 c9 02 c0       	mov    ds:0xc002c920,eax
c001090f:	e8 35 ff ff ff       	call   c0010849 <setActiveTerminal(VgaText*)>
c0010914:	83 c4 1c             	add    esp,0x1c
c0010917:	c3                   	ret    

c0010918 <VgaText::doUpdate()>:
c0010918:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001091c:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010922:	85 c0                	test   eax,eax
c0010924:	74 02                	je     c0010928 <VgaText::doUpdate()+0x10>
c0010926:	ff e0                	jmp    eax
c0010928:	c3                   	ret    
c0010929:	90                   	nop

c001092a <VgaText::puts(char const*, VgaColour, VgaColour)>:
c001092a:	55                   	push   ebp
c001092b:	57                   	push   edi
c001092c:	56                   	push   esi
c001092d:	53                   	push   ebx
c001092e:	83 ec 1c             	sub    esp,0x1c
c0010931:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010935:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001093a:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010941:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010944:	50                   	push   eax
c0010945:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001094a:	50                   	push   eax
c001094b:	e8 a2 f8 ff ff       	call   c00101f2 <VgaText::combineColours(unsigned char, unsigned char)>
c0010950:	59                   	pop    ecx
c0010951:	0f b6 c0             	movzx  eax,al
c0010954:	5b                   	pop    ebx
c0010955:	31 c9                	xor    ecx,ecx
c0010957:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c001095f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010963:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010969:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001096d:	0f b7 db             	movzx  ebx,bx
c0010970:	01 db                	add    ebx,ebx
c0010972:	01 fb                	add    ebx,edi
c0010974:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010977:	84 c0                	test   al,al
c0010979:	0f 84 38 01 00 00    	je     c0010ab7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c001097f:	3c 0d                	cmp    al,0xd
c0010981:	75 0f                	jne    c0010992 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010983:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c001098d:	e9 1f 01 00 00       	jmp    c0010ab1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010992:	3c 0a                	cmp    al,0xa
c0010994:	75 5b                	jne    c00109f1 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010996:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c001099c:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c00109a6:	8d 48 01             	lea    ecx,[eax+0x1]
c00109a9:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c00109af:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c00109b5:	75 12                	jne    c00109c9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c00109b7:	83 ec 0c             	sub    esp,0xc
c00109ba:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c00109c0:	55                   	push   ebp
c00109c1:	e8 4a f8 ff ff       	call   c0010210 <VgaText::scrollScreen()>
c00109c6:	83 c4 10             	add    esp,0x10
c00109c9:	83 ec 0c             	sub    esp,0xc
c00109cc:	55                   	push   ebp
c00109cd:	e8 e4 f6 ff ff       	call   c00100b6 <VgaText::updateCursor()>
c00109d2:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c00109da:	83 c4 10             	add    esp,0x10
c00109dd:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c00109e3:	31 c9                	xor    ecx,ecx
c00109e5:	0f b7 db             	movzx  ebx,bx
c00109e8:	01 db                	add    ebx,ebx
c00109ea:	01 fb                	add    ebx,edi
c00109ec:	e9 c0 00 00 00       	jmp    c0010ab1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c00109f1:	3c 08                	cmp    al,0x8
c00109f3:	75 4e                	jne    c0010a43 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c00109f5:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00109f9:	53                   	push   ebx
c00109fa:	53                   	push   ebx
c00109fb:	6a 01                	push   0x1
c00109fd:	55                   	push   ebp
c00109fe:	e8 df fc ff ff       	call   c00106e2 <VgaText::decrementCursor(bool)>
c0010a03:	58                   	pop    eax
c0010a04:	5a                   	pop    edx
c0010a05:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010a0b:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010a11:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010a17:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010a1d:	6a 20                	push   0x20
c0010a1f:	55                   	push   ebp
c0010a20:	e8 99 f8 ff ff       	call   c00102be <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010a25:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010a2d:	83 c4 20             	add    esp,0x20
c0010a30:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010a36:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010a3a:	0f b7 db             	movzx  ebx,bx
c0010a3d:	01 db                	add    ebx,ebx
c0010a3f:	01 fb                	add    ebx,edi
c0010a41:	eb 6e                	jmp    c0010ab1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010a43:	51                   	push   ecx
c0010a44:	51                   	push   ecx
c0010a45:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010a49:	50                   	push   eax
c0010a4a:	e8 5d f8 ff ff       	call   c00102ac <VgaText::combineCharAndColour(char, unsigned char)>
c0010a4f:	83 c4 10             	add    esp,0x10
c0010a52:	66 89 03             	mov    WORD PTR [ebx],ax
c0010a55:	39 2d 24 c9 02 c0    	cmp    DWORD PTR ds:0xc002c924,ebp
c0010a5b:	75 2a                	jne    c0010a87 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010a5d:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010a63:	85 c0                	test   eax,eax
c0010a65:	74 20                	je     c0010a87 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010a67:	52                   	push   edx
c0010a68:	52                   	push   edx
c0010a69:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010a6f:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010a75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010a79:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010a7d:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010a80:	51                   	push   ecx
c0010a81:	55                   	push   ebp
c0010a82:	ff d0                	call   eax
c0010a84:	83 c4 20             	add    esp,0x20
c0010a87:	83 c3 02             	add    ebx,0x2
c0010a8a:	50                   	push   eax
c0010a8b:	50                   	push   eax
c0010a8c:	6a 00                	push   0x0
c0010a8e:	55                   	push   ebp
c0010a8f:	e8 f8 f8 ff ff       	call   c001038c <VgaText::incrementCursor(bool)>
c0010a94:	83 c4 10             	add    esp,0x10
c0010a97:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010a9e:	75 0f                	jne    c0010aaf <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010aa0:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010aa8:	0f b7 db             	movzx  ebx,bx
c0010aab:	01 db                	add    ebx,ebx
c0010aad:	01 fb                	add    ebx,edi
c0010aaf:	b1 01                	mov    cl,0x1
c0010ab1:	46                   	inc    esi
c0010ab2:	e9 bd fe ff ff       	jmp    c0010974 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010ab7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010abb:	83 ec 0c             	sub    esp,0xc
c0010abe:	55                   	push   ebp
c0010abf:	e8 f2 f5 ff ff       	call   c00100b6 <VgaText::updateCursor()>
c0010ac4:	83 c4 10             	add    esp,0x10
c0010ac7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010acb:	84 c9                	test   cl,cl
c0010acd:	74 0c                	je     c0010adb <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010acf:	83 ec 0c             	sub    esp,0xc
c0010ad2:	55                   	push   ebp
c0010ad3:	e8 40 fe ff ff       	call   c0010918 <VgaText::doUpdate()>
c0010ad8:	83 c4 10             	add    esp,0x10
c0010adb:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010ae2:	83 c4 1c             	add    esp,0x1c
c0010ae5:	5b                   	pop    ebx
c0010ae6:	5e                   	pop    esi
c0010ae7:	5f                   	pop    edi
c0010ae8:	5d                   	pop    ebp
c0010ae9:	c3                   	ret    

c0010aea <VgaText::clearScreen()>:
c0010aea:	57                   	push   edi
c0010aeb:	56                   	push   esi
c0010aec:	31 f6                	xor    esi,esi
c0010aee:	53                   	push   ebx
c0010aef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010af3:	52                   	push   edx
c0010af4:	6a 00                	push   0x0
c0010af6:	6a 00                	push   0x0
c0010af8:	53                   	push   ebx
c0010af9:	e8 38 f8 ff ff       	call   c0010336 <VgaText::setCursor(int, int)>
c0010afe:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010b05:	83 c4 10             	add    esp,0x10
c0010b08:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010b0e:	7e 26                	jle    c0010b36 <VgaText::clearScreen()+0x4c>
c0010b10:	31 ff                	xor    edi,edi
c0010b12:	50                   	push   eax
c0010b13:	50                   	push   eax
c0010b14:	56                   	push   esi
c0010b15:	57                   	push   edi
c0010b16:	47                   	inc    edi
c0010b17:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010b1d:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010b23:	6a 20                	push   0x20
c0010b25:	53                   	push   ebx
c0010b26:	e8 93 f7 ff ff       	call   c00102be <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010b2b:	83 c4 20             	add    esp,0x20
c0010b2e:	83 ff 50             	cmp    edi,0x50
c0010b31:	75 df                	jne    c0010b12 <VgaText::clearScreen()+0x28>
c0010b33:	46                   	inc    esi
c0010b34:	eb d2                	jmp    c0010b08 <VgaText::clearScreen()+0x1e>
c0010b36:	83 ec 0c             	sub    esp,0xc
c0010b39:	53                   	push   ebx
c0010b3a:	e8 d9 fd ff ff       	call   c0010918 <VgaText::doUpdate()>
c0010b3f:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010b46:	83 c4 10             	add    esp,0x10
c0010b49:	5b                   	pop    ebx
c0010b4a:	5e                   	pop    esi
c0010b4b:	5f                   	pop    edi
c0010b4c:	c3                   	ret    
c0010b4d:	90                   	nop

c0010b4e <VgaText::putchar(char)>:
c0010b4e:	56                   	push   esi
c0010b4f:	53                   	push   ebx
c0010b50:	83 ec 14             	sub    esp,0x14
c0010b53:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010b57:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010b5b:	3c 5b                	cmp    al,0x5b
c0010b5d:	75 21                	jne    c0010b80 <VgaText::putchar(char)+0x32>
c0010b5f:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0010b66:	74 28                	je     c0010b90 <VgaText::putchar(char)+0x42>
c0010b68:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0010b71:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0010b7b:	e9 e2 00 00 00       	jmp    c0010c62 <VgaText::putchar(char)+0x114>
c0010b80:	3c 1b                	cmp    al,0x1b
c0010b82:	75 0c                	jne    c0010b90 <VgaText::putchar(char)+0x42>
c0010b84:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0010b8b:	e9 d2 00 00 00       	jmp    c0010c62 <VgaText::putchar(char)+0x114>
c0010b90:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c0010b96:	84 c9                	test   cl,cl
c0010b98:	0f 84 ab 00 00 00    	je     c0010c49 <VgaText::putchar(char)+0xfb>
c0010b9e:	8d 50 c0             	lea    edx,[eax-0x40]
c0010ba1:	80 fa 3e             	cmp    dl,0x3e
c0010ba4:	0f 87 82 00 00 00    	ja     c0010c2c <VgaText::putchar(char)+0xde>
c0010baa:	3c 6d                	cmp    al,0x6d
c0010bac:	75 4d                	jne    c0010bfb <VgaText::putchar(char)+0xad>
c0010bae:	31 f6                	xor    esi,esi
c0010bb0:	31 d2                	xor    edx,edx
c0010bb2:	31 c0                	xor    eax,eax
c0010bb4:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c0010bba:	7e 30                	jle    c0010bec <VgaText::putchar(char)+0x9e>
c0010bbc:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0010bc4:	80 fa 3b             	cmp    dl,0x3b
c0010bc7:	75 17                	jne    c0010be0 <VgaText::putchar(char)+0x92>
c0010bc9:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010bcd:	50                   	push   eax
c0010bce:	53                   	push   ebx
c0010bcf:	e8 46 f5 ff ff       	call   c001011a <VgaText::doANSI_SGR(int)>
c0010bd4:	59                   	pop    ecx
c0010bd5:	31 d2                	xor    edx,edx
c0010bd7:	58                   	pop    eax
c0010bd8:	31 c0                	xor    eax,eax
c0010bda:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010bde:	eb 09                	jmp    c0010be9 <VgaText::putchar(char)+0x9b>
c0010be0:	6b c0 0a             	imul   eax,eax,0xa
c0010be3:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010be7:	88 ca                	mov    dl,cl
c0010be9:	46                   	inc    esi
c0010bea:	eb c8                	jmp    c0010bb4 <VgaText::putchar(char)+0x66>
c0010bec:	84 d2                	test   dl,dl
c0010bee:	74 31                	je     c0010c21 <VgaText::putchar(char)+0xd3>
c0010bf0:	50                   	push   eax
c0010bf1:	53                   	push   ebx
c0010bf2:	e8 23 f5 ff ff       	call   c001011a <VgaText::doANSI_SGR(int)>
c0010bf7:	58                   	pop    eax
c0010bf8:	5a                   	pop    edx
c0010bf9:	eb 26                	jmp    c0010c21 <VgaText::putchar(char)+0xd3>
c0010bfb:	3c 4a                	cmp    al,0x4a
c0010bfd:	75 22                	jne    c0010c21 <VgaText::putchar(char)+0xd3>
c0010bff:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0010c06:	75 19                	jne    c0010c21 <VgaText::putchar(char)+0xd3>
c0010c08:	83 ec 0c             	sub    esp,0xc
c0010c0b:	53                   	push   ebx
c0010c0c:	e8 d9 fe ff ff       	call   c0010aea <VgaText::clearScreen()>
c0010c11:	83 c4 0c             	add    esp,0xc
c0010c14:	6a 00                	push   0x0
c0010c16:	6a 00                	push   0x0
c0010c18:	53                   	push   ebx
c0010c19:	e8 18 f7 ff ff       	call   c0010336 <VgaText::setCursor(int, int)>
c0010c1e:	83 c4 10             	add    esp,0x10
c0010c21:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0010c2a:	eb 36                	jmp    c0010c62 <VgaText::putchar(char)+0x114>
c0010c2c:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0010c32:	83 fa 0e             	cmp    edx,0xe
c0010c35:	7f 2b                	jg     c0010c62 <VgaText::putchar(char)+0x114>
c0010c37:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010c3a:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0010c40:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0010c47:	eb 19                	jmp    c0010c62 <VgaText::putchar(char)+0x114>
c0010c49:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010c4f:	0f be c0             	movsx  eax,al
c0010c52:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010c58:	50                   	push   eax
c0010c59:	53                   	push   ebx
c0010c5a:	e8 ab fa ff ff       	call   c001070a <VgaText::putchar(char, VgaColour, VgaColour)>
c0010c5f:	83 c4 10             	add    esp,0x10
c0010c62:	83 c4 14             	add    esp,0x14
c0010c65:	5b                   	pop    ebx
c0010c66:	5e                   	pop    esi
c0010c67:	c3                   	ret    

c0010c68 <VgaText::puts(char const*)>:
c0010c68:	53                   	push   ebx
c0010c69:	83 ec 08             	sub    esp,0x8
c0010c6c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010c70:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010c73:	84 c0                	test   al,al
c0010c75:	74 12                	je     c0010c89 <VgaText::puts(char const*)+0x21>
c0010c77:	43                   	inc    ebx
c0010c78:	51                   	push   ecx
c0010c79:	51                   	push   ecx
c0010c7a:	50                   	push   eax
c0010c7b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c7f:	e8 ca fe ff ff       	call   c0010b4e <VgaText::putchar(char)>
c0010c84:	83 c4 10             	add    esp,0x10
c0010c87:	eb e7                	jmp    c0010c70 <VgaText::puts(char const*)+0x8>
c0010c89:	83 c4 08             	add    esp,0x8
c0010c8c:	5b                   	pop    ebx
c0010c8d:	c3                   	ret    

c0010c8e <VgaText::putx(unsigned int)>:
c0010c8e:	57                   	push   edi
c0010c8f:	b9 11 00 00 00       	mov    ecx,0x11
c0010c94:	56                   	push   esi
c0010c95:	be d2 8b 02 c0       	mov    esi,0xc0028bd2
c0010c9a:	53                   	push   ebx
c0010c9b:	83 ec 20             	sub    esp,0x20
c0010c9e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010ca2:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010ca6:	fc                   	cld    
c0010ca7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010ca9:	be 08 00 00 00       	mov    esi,0x8
c0010cae:	50                   	push   eax
c0010caf:	50                   	push   eax
c0010cb0:	89 d8                	mov    eax,ebx
c0010cb2:	c1 e3 04             	shl    ebx,0x4
c0010cb5:	c1 e8 1c             	shr    eax,0x1c
c0010cb8:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010cbd:	50                   	push   eax
c0010cbe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010cc2:	e8 87 fe ff ff       	call   c0010b4e <VgaText::putchar(char)>
c0010cc7:	83 c4 10             	add    esp,0x10
c0010cca:	4e                   	dec    esi
c0010ccb:	75 e1                	jne    c0010cae <VgaText::putx(unsigned int)+0x20>
c0010ccd:	83 c4 20             	add    esp,0x20
c0010cd0:	5b                   	pop    ebx
c0010cd1:	5e                   	pop    esi
c0010cd2:	5f                   	pop    edi
c0010cd3:	c3                   	ret    

c0010cd4 <VgaText::VgaText(char const*)>:
c0010cd4:	57                   	push   edi
c0010cd5:	56                   	push   esi
c0010cd6:	53                   	push   ebx
c0010cd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cdb:	83 ec 08             	sub    esp,0x8
c0010cde:	6a 00                	push   0x0
c0010ce0:	50                   	push   eax
c0010ce1:	e8 6e 05 00 00       	call   c0011254 <UnixFile::UnixFile(int)>
c0010ce6:	83 c4 10             	add    esp,0x10
c0010ce9:	ba 38 8c 02 c0       	mov    edx,0xc0028c38
c0010cee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cf2:	89 10                	mov    DWORD PTR [eax],edx
c0010cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cf8:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0010d02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d06:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0010d10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d14:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0010d1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d1f:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0010d26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d2a:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0010d34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d38:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0010d42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d46:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0010d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d51:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0010d58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d5c:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0010d62:	bb 00 c9 02 c0       	mov    ebx,0xc002c900
c0010d67:	b8 08 00 00 00       	mov    eax,0x8
c0010d6c:	fc                   	cld    
c0010d6d:	89 d7                	mov    edi,edx
c0010d6f:	89 de                	mov    esi,ebx
c0010d71:	89 c1                	mov    ecx,eax
c0010d73:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010d75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d79:	05 1e 10 00 00       	add    eax,0x101e
c0010d7e:	83 ec 08             	sub    esp,0x8
c0010d81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d85:	50                   	push   eax
c0010d86:	e8 9f f9 fe ff       	call   c000072a <strcpy>
c0010d8b:	83 c4 10             	add    esp,0x10
c0010d8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d92:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0010d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010da0:	83 c0 0c             	add    eax,0xc
c0010da3:	83 ec 04             	sub    esp,0x4
c0010da6:	68 00 0f 00 00       	push   0xf00
c0010dab:	6a 00                	push   0x0
c0010dad:	50                   	push   eax
c0010dae:	e8 d8 f8 fe ff       	call   c000068b <memset>
c0010db3:	83 c4 10             	add    esp,0x10
c0010db6:	83 ec 04             	sub    esp,0x4
c0010db9:	6a 00                	push   0x0
c0010dbb:	6a 07                	push   0x7
c0010dbd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dc1:	e8 0c f4 ff ff       	call   c00101d2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010dc6:	83 c4 10             	add    esp,0x10
c0010dc9:	83 ec 08             	sub    esp,0x8
c0010dcc:	6a 02                	push   0x2
c0010dce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dd2:	e8 49 fa ff ff       	call   c0010820 <VgaText::setCursorHeight(int)>
c0010dd7:	83 c4 10             	add    esp,0x10
c0010dda:	83 ec 04             	sub    esp,0x4
c0010ddd:	6a 00                	push   0x0
c0010ddf:	6a 00                	push   0x0
c0010de1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010de5:	e8 4c f5 ff ff       	call   c0010336 <VgaText::setCursor(int, int)>
c0010dea:	83 c4 10             	add    esp,0x10
c0010ded:	83 ec 08             	sub    esp,0x8
c0010df0:	6a 01                	push   0x1
c0010df2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010df6:	e8 d5 f2 ff ff       	call   c00100d0 <VgaText::showCursor(bool)>
c0010dfb:	83 c4 10             	add    esp,0x10
c0010dfe:	83 ec 08             	sub    esp,0x8
c0010e01:	6a 01                	push   0x1
c0010e03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e07:	e8 d4 f2 ff ff       	call   c00100e0 <VgaText::disableBlink(bool)>
c0010e0c:	83 c4 10             	add    esp,0x10
c0010e0f:	83 ec 0c             	sub    esp,0xc
c0010e12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e16:	e8 cf fc ff ff       	call   c0010aea <VgaText::clearScreen()>
c0010e1b:	83 c4 10             	add    esp,0x10
c0010e1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e22:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0010e29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e2d:	05 9e 10 00 00       	add    eax,0x109e
c0010e32:	83 ec 04             	sub    esp,0x4
c0010e35:	68 96 00 00 00       	push   0x96
c0010e3a:	6a 00                	push   0x0
c0010e3c:	50                   	push   eax
c0010e3d:	e8 49 f8 fe ff       	call   c000068b <memset>
c0010e42:	83 c4 10             	add    esp,0x10
c0010e45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e49:	05 34 11 00 00       	add    eax,0x1134
c0010e4e:	83 ec 04             	sub    esp,0x4
c0010e51:	68 2c 01 00 00       	push   0x12c
c0010e56:	6a 00                	push   0x0
c0010e58:	50                   	push   eax
c0010e59:	e8 2d f8 fe ff       	call   c000068b <memset>
c0010e5e:	83 c4 10             	add    esp,0x10
c0010e61:	90                   	nop
c0010e62:	5b                   	pop    ebx
c0010e63:	5e                   	pop    esi
c0010e64:	5f                   	pop    edi
c0010e65:	c3                   	ret    

c0010e66 <VgaText::receiveKey(unsigned char)>:
c0010e66:	55                   	push   ebp
c0010e67:	57                   	push   edi
c0010e68:	56                   	push   esi
c0010e69:	53                   	push   ebx
c0010e6a:	83 ec 1c             	sub    esp,0x1c
c0010e6d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010e71:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010e75:	84 db                	test   bl,bl
c0010e77:	0f 84 c9 00 00 00    	je     c0010f46 <VgaText::receiveKey(unsigned char)+0xe0>
c0010e7d:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0010e83:	80 fb 08             	cmp    bl,0x8
c0010e86:	75 2c                	jne    c0010eb4 <VgaText::receiveKey(unsigned char)+0x4e>
c0010e88:	83 ec 0c             	sub    esp,0xc
c0010e8b:	57                   	push   edi
c0010e8c:	e8 17 f8 fe ff       	call   c00006a8 <strlen>
c0010e91:	83 c4 10             	add    esp,0x10
c0010e94:	85 c0                	test   eax,eax
c0010e96:	74 41                	je     c0010ed9 <VgaText::receiveKey(unsigned char)+0x73>
c0010e98:	50                   	push   eax
c0010e99:	50                   	push   eax
c0010e9a:	6a 08                	push   0x8
c0010e9c:	56                   	push   esi
c0010e9d:	e8 ac fc ff ff       	call   c0010b4e <VgaText::putchar(char)>
c0010ea2:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010ea5:	e8 fe f7 fe ff       	call   c00006a8 <strlen>
c0010eaa:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0010eb2:	eb 22                	jmp    c0010ed6 <VgaText::receiveKey(unsigned char)+0x70>
c0010eb4:	0f be c3             	movsx  eax,bl
c0010eb7:	52                   	push   edx
c0010eb8:	52                   	push   edx
c0010eb9:	50                   	push   eax
c0010eba:	56                   	push   esi
c0010ebb:	e8 8e fc ff ff       	call   c0010b4e <VgaText::putchar(char)>
c0010ec0:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010ec4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010ec9:	59                   	pop    ecx
c0010eca:	5d                   	pop    ebp
c0010ecb:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010ecf:	50                   	push   eax
c0010ed0:	57                   	push   edi
c0010ed1:	e8 0b f9 fe ff       	call   c00007e1 <strcat>
c0010ed6:	83 c4 10             	add    esp,0x10
c0010ed9:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0010ee0:	75 05                	jne    c0010ee7 <VgaText::receiveKey(unsigned char)+0x81>
c0010ee2:	80 fb 0a             	cmp    bl,0xa
c0010ee5:	75 53                	jne    c0010f3a <VgaText::receiveKey(unsigned char)+0xd4>
c0010ee7:	83 ec 0c             	sub    esp,0xc
c0010eea:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0010ef0:	53                   	push   ebx
c0010ef1:	e8 b2 f7 fe ff       	call   c00006a8 <strlen>
c0010ef6:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010ef9:	89 c5                	mov    ebp,eax
c0010efb:	e8 a8 f7 fe ff       	call   c00006a8 <strlen>
c0010f00:	83 c4 10             	add    esp,0x10
c0010f03:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010f07:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010f0c:	76 10                	jbe    c0010f1e <VgaText::receiveKey(unsigned char)+0xb8>
c0010f0e:	83 ec 0c             	sub    esp,0xc
c0010f11:	68 e3 8b 02 c0       	push   0xc0028be3
c0010f16:	e8 86 88 00 00       	call   c00197a1 <Krnl::panic(char const*)>
c0010f1b:	83 c4 10             	add    esp,0x10
c0010f1e:	50                   	push   eax
c0010f1f:	50                   	push   eax
c0010f20:	57                   	push   edi
c0010f21:	53                   	push   ebx
c0010f22:	e8 ba f8 fe ff       	call   c00007e1 <strcat>
c0010f27:	83 c4 0c             	add    esp,0xc
c0010f2a:	68 96 00 00 00       	push   0x96
c0010f2f:	6a 00                	push   0x0
c0010f31:	57                   	push   edi
c0010f32:	e8 54 f7 fe ff       	call   c000068b <memset>
c0010f37:	83 c4 10             	add    esp,0x10
c0010f3a:	83 ec 0c             	sub    esp,0xc
c0010f3d:	56                   	push   esi
c0010f3e:	e8 d5 f9 ff ff       	call   c0010918 <VgaText::doUpdate()>
c0010f43:	83 c4 10             	add    esp,0x10
c0010f46:	83 c4 1c             	add    esp,0x1c
c0010f49:	5b                   	pop    ebx
c0010f4a:	5e                   	pop    esi
c0010f4b:	5f                   	pop    edi
c0010f4c:	5d                   	pop    ebp
c0010f4d:	c3                   	ret    

c0010f4e <VgaText::write(unsigned long long, void*, int*)>:
c0010f4e:	55                   	push   ebp
c0010f4f:	57                   	push   edi
c0010f50:	56                   	push   esi
c0010f51:	53                   	push   ebx
c0010f52:	83 ec 0c             	sub    esp,0xc
c0010f55:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010f59:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010f5d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010f61:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0010f68:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010f6b:	39 eb                	cmp    ebx,ebp
c0010f6d:	74 13                	je     c0010f82 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010f6f:	43                   	inc    ebx
c0010f70:	50                   	push   eax
c0010f71:	50                   	push   eax
c0010f72:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010f76:	50                   	push   eax
c0010f77:	56                   	push   esi
c0010f78:	e8 d1 fb ff ff       	call   c0010b4e <VgaText::putchar(char)>
c0010f7d:	83 c4 10             	add    esp,0x10
c0010f80:	eb e9                	jmp    c0010f6b <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010f82:	83 ec 0c             	sub    esp,0xc
c0010f85:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0010f8c:	56                   	push   esi
c0010f8d:	e8 86 f9 ff ff       	call   c0010918 <VgaText::doUpdate()>
c0010f92:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010f96:	89 38                	mov    DWORD PTR [eax],edi
c0010f98:	83 c4 1c             	add    esp,0x1c
c0010f9b:	31 c0                	xor    eax,eax
c0010f9d:	5b                   	pop    ebx
c0010f9e:	5e                   	pop    esi
c0010f9f:	5f                   	pop    edi
c0010fa0:	5d                   	pop    ebp
c0010fa1:	c3                   	ret    

c0010fa2 <newTerminal(char*)>:
c0010fa2:	83 ec 28             	sub    esp,0x28
c0010fa5:	68 60 12 00 00       	push   0x1260
c0010faa:	e8 25 e5 ff ff       	call   c000f4d4 <malloc>
c0010faf:	5a                   	pop    edx
c0010fb0:	59                   	pop    ecx
c0010fb1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010fb5:	50                   	push   eax
c0010fb6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010fba:	e8 15 fd ff ff       	call   c0010cd4 <VgaText::VgaText(char const*)>
c0010fbf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010fc3:	83 c4 2c             	add    esp,0x2c
c0010fc6:	c3                   	ret    
c0010fc7:	90                   	nop

c0010fc8 <TSS::TSS()>:
c0010fc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fcc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010fd3:	90                   	nop
c0010fd4:	c3                   	ret    
c0010fd5:	90                   	nop

c0010fd6 <TSS::setESP(unsigned long)>:
c0010fd6:	55                   	push   ebp
c0010fd7:	89 e5                	mov    ebp,esp
c0010fd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010fdc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fdf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010fe2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010fe5:	90                   	nop
c0010fe6:	5d                   	pop    ebp
c0010fe7:	c3                   	ret    

c0010fe8 <TSS::flush()>:
c0010fe8:	55                   	push   ebp
c0010fe9:	89 e5                	mov    ebp,esp
c0010feb:	83 ec 10             	sub    esp,0x10
c0010fee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ff1:	8b 00                	mov    eax,DWORD PTR [eax]
c0010ff3:	83 c8 03             	or     eax,0x3
c0010ff6:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010ffa:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010ffe:	66 89 d0             	mov    ax,dx
c0011001:	0f 00 d8             	ltr    ax
c0011004:	90                   	nop
c0011005:	c9                   	leave  
c0011006:	c3                   	ret    
c0011007:	90                   	nop

c0011008 <TSS::setup(unsigned long, unsigned long)>:
c0011008:	55                   	push   ebp
c0011009:	89 e5                	mov    ebp,esp
c001100b:	83 ec 18             	sub    esp,0x18
c001100e:	83 ec 0c             	sub    esp,0xc
c0011011:	6a 68                	push   0x68
c0011013:	e8 bc e4 ff ff       	call   c000f4d4 <malloc>
c0011018:	83 c4 10             	add    esp,0x10
c001101b:	89 c2                	mov    edx,eax
c001101d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011020:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011023:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011026:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011029:	83 ec 04             	sub    esp,0x4
c001102c:	6a 68                	push   0x68
c001102e:	6a 00                	push   0x0
c0011030:	50                   	push   eax
c0011031:	e8 55 f6 fe ff       	call   c000068b <memset>
c0011036:	83 c4 10             	add    esp,0x10
c0011039:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001103c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001103f:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0011045:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011048:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001104b:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0011051:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011054:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011057:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001105a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001105d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011060:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011063:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011069:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001106c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001106f:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011075:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011078:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001107b:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011081:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011084:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011087:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c001108d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011090:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011093:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011099:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001109c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001109f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00110a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110ab:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00110ae:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00110b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110b7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00110ba:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00110bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110c3:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00110ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110cd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110d0:	0f 20 da             	mov    edx,cr3
c00110d3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00110d6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00110d9:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00110dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110df:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110e2:	83 ec 08             	sub    esp,0x8
c00110e5:	50                   	push   eax
c00110e6:	8d 45 ec             	lea    eax,[ebp-0x14]
c00110e9:	50                   	push   eax
c00110ea:	e8 c3 db ff ff       	call   c000ecb2 <GDTEntry::setBase(unsigned int)>
c00110ef:	83 c4 10             	add    esp,0x10
c00110f2:	83 ec 08             	sub    esp,0x8
c00110f5:	6a 68                	push   0x68
c00110f7:	8d 45 ec             	lea    eax,[ebp-0x14]
c00110fa:	50                   	push   eax
c00110fb:	e8 ce db ff ff       	call   c000ecce <GDTEntry::setLimit(unsigned int)>
c0011100:	83 c4 10             	add    esp,0x10
c0011103:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011107:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001110a:	83 e0 0f             	and    eax,0xf
c001110d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011110:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011113:	83 c8 40             	or     eax,0x40
c0011116:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011119:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c001111e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011124:	05 78 01 00 00       	add    eax,0x178
c0011129:	83 ec 04             	sub    esp,0x4
c001112c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001112f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0011132:	50                   	push   eax
c0011133:	e8 ca db ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c0011138:	83 c4 10             	add    esp,0x10
c001113b:	89 c2                	mov    edx,eax
c001113d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011140:	89 10                	mov    DWORD PTR [eax],edx
c0011142:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0011147:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001114d:	05 78 01 00 00       	add    eax,0x178
c0011152:	83 ec 0c             	sub    esp,0xc
c0011155:	50                   	push   eax
c0011156:	e8 eb db ff ff       	call   c000ed46 <GDT::flush()>
c001115b:	83 c4 10             	add    esp,0x10
c001115e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011161:	8b 00                	mov    eax,DWORD PTR [eax]
c0011163:	83 ec 08             	sub    esp,0x8
c0011166:	50                   	push   eax
c0011167:	68 4c 8c 02 c0       	push   0xc0028c4c
c001116c:	e8 16 15 00 00       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0011171:	83 c4 10             	add    esp,0x10
c0011174:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011177:	8b 00                	mov    eax,DWORD PTR [eax]
c0011179:	c9                   	leave  
c001117a:	c3                   	ret    
c001117b:	90                   	nop

c001117c <ReservedFilename::read(unsigned long long, void*, int*)>:
c001117c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011180:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011184:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011187:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001118c:	75 08                	jne    c0011196 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c001118e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011194:	eb 38                	jmp    c00111ce <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011196:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001119b:	75 17                	jne    c00111b4 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c001119d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111a2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00111a5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00111ab:	8b 10                	mov    edx,DWORD PTR [eax]
c00111ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00111b1:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00111b4:	89 c1                	mov    ecx,eax
c00111b6:	83 e1 fd             	and    ecx,0xfffffffd
c00111b9:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00111bf:	74 cd                	je     c001118e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00111c1:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00111c6:	83 e0 ef             	and    eax,0xffffffef
c00111c9:	83 f8 08             	cmp    eax,0x8
c00111cc:	76 c0                	jbe    c001118e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00111ce:	31 c0                	xor    eax,eax
c00111d0:	c3                   	ret    
c00111d1:	90                   	nop

c00111d2 <ReservedFilename::isAtty()>:
c00111d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111d6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00111d9:	31 c0                	xor    eax,eax
c00111db:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00111e1:	74 09                	je     c00111ec <ReservedFilename::isAtty()+0x1a>
c00111e3:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00111e9:	0f 94 c0             	sete   al
c00111ec:	c3                   	ret    
c00111ed:	90                   	nop

c00111ee <ReservedFilename::write(unsigned long long, void*, int*)>:
c00111ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111f2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00111f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00111fd:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011202:	75 08                	jne    c001120c <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0011204:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001120a:	eb 3d                	jmp    c0011249 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001120c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011211:	75 17                	jne    c001122a <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0011213:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011218:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001121b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011221:	8b 10                	mov    edx,DWORD PTR [eax]
c0011223:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011227:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c001122a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001122f:	75 04                	jne    c0011235 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011231:	89 0a                	mov    DWORD PTR [edx],ecx
c0011233:	eb 14                	jmp    c0011249 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011235:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c001123a:	74 c8                	je     c0011204 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001123c:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011241:	83 e0 ef             	and    eax,0xffffffef
c0011244:	83 f8 08             	cmp    eax,0x8
c0011247:	76 bb                	jbe    c0011204 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011249:	31 c0                	xor    eax,eax
c001124b:	c3                   	ret    

c001124c <UnixFile::getFileDescriptor()>:
c001124c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011250:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011253:	c3                   	ret    

c0011254 <UnixFile::UnixFile(int)>:
c0011254:	53                   	push   ebx
c0011255:	83 ec 28             	sub    esp,0x28
c0011258:	ba 38 8d 02 c0       	mov    edx,0xc0028d38
c001125d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011261:	89 10                	mov    DWORD PTR [eax],edx
c0011263:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c001126b:	0f 8f 8c 01 00 00    	jg     c00113fd <UnixFile::UnixFile(int)+0x1a9>
c0011271:	a1 e0 b7 02 c0       	mov    eax,ds:0xc002b7e0
c0011276:	8d 50 01             	lea    edx,[eax+0x1]
c0011279:	89 15 e0 b7 02 c0    	mov    DWORD PTR ds:0xc002b7e0,edx
c001127f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011283:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011286:	83 ec 08             	sub    esp,0x8
c0011289:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001128d:	68 b8 c9 02 c0       	push   0xc002c9b8
c0011292:	e8 99 5d 01 00       	call   c0027030 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011297:	83 c4 10             	add    esp,0x10
c001129a:	a0 b4 c9 02 c0       	mov    al,ds:0xc002c9b4
c001129f:	83 f0 01             	xor    eax,0x1
c00112a2:	84 c0                	test   al,al
c00112a4:	0f 84 54 01 00 00    	je     c00113fe <UnixFile::UnixFile(int)+0x1aa>
c00112aa:	c6 05 b4 c9 02 c0 01 	mov    BYTE PTR ds:0xc002c9b4,0x1
c00112b1:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00112b9:	83 ec 0c             	sub    esp,0xc
c00112bc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00112c0:	e8 0f e2 ff ff       	call   c000f4d4 <malloc>
c00112c5:	83 c4 10             	add    esp,0x10
c00112c8:	89 c3                	mov    ebx,eax
c00112ca:	83 ec 08             	sub    esp,0x8
c00112cd:	68 03 ff ff 0f       	push   0xfffff03
c00112d2:	53                   	push   ebx
c00112d3:	e8 2c 01 00 00       	call   c0011404 <ReservedFilename::ReservedFilename(int)>
c00112d8:	83 c4 10             	add    esp,0x10
c00112db:	89 1d ac c9 02 c0    	mov    DWORD PTR ds:0xc002c9ac,ebx
c00112e1:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00112e9:	83 ec 0c             	sub    esp,0xc
c00112ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112f0:	e8 df e1 ff ff       	call   c000f4d4 <malloc>
c00112f5:	83 c4 10             	add    esp,0x10
c00112f8:	89 c3                	mov    ebx,eax
c00112fa:	83 ec 08             	sub    esp,0x8
c00112fd:	68 01 ff ff 0f       	push   0xfffff01
c0011302:	53                   	push   ebx
c0011303:	e8 fc 00 00 00       	call   c0011404 <ReservedFilename::ReservedFilename(int)>
c0011308:	83 c4 10             	add    esp,0x10
c001130b:	89 1d b0 c9 02 c0    	mov    DWORD PTR ds:0xc002c9b0,ebx
c0011311:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011319:	83 ec 0c             	sub    esp,0xc
c001131c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011320:	e8 af e1 ff ff       	call   c000f4d4 <malloc>
c0011325:	83 c4 10             	add    esp,0x10
c0011328:	89 c3                	mov    ebx,eax
c001132a:	83 ec 08             	sub    esp,0x8
c001132d:	68 00 ff ff 0f       	push   0xfffff00
c0011332:	53                   	push   ebx
c0011333:	e8 cc 00 00 00       	call   c0011404 <ReservedFilename::ReservedFilename(int)>
c0011338:	83 c4 10             	add    esp,0x10
c001133b:	89 1d a4 c9 02 c0    	mov    DWORD PTR ds:0xc002c9a4,ebx
c0011341:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011349:	83 ec 0c             	sub    esp,0xc
c001134c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011350:	e8 7f e1 ff ff       	call   c000f4d4 <malloc>
c0011355:	83 c4 10             	add    esp,0x10
c0011358:	89 c3                	mov    ebx,eax
c001135a:	83 ec 08             	sub    esp,0x8
c001135d:	68 02 ff ff 0f       	push   0xfffff02
c0011362:	53                   	push   ebx
c0011363:	e8 9c 00 00 00       	call   c0011404 <ReservedFilename::ReservedFilename(int)>
c0011368:	83 c4 10             	add    esp,0x10
c001136b:	89 1d a8 c9 02 c0    	mov    DWORD PTR ds:0xc002c9a8,ebx
c0011371:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011379:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c001137e:	7f 7e                	jg     c00113fe <UnixFile::UnixFile(int)+0x1aa>
c0011380:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011388:	83 ec 0c             	sub    esp,0xc
c001138b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001138f:	e8 40 e1 ff ff       	call   c000f4d4 <malloc>
c0011394:	83 c4 10             	add    esp,0x10
c0011397:	89 c3                	mov    ebx,eax
c0011399:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001139d:	05 10 ff ff 0f       	add    eax,0xfffff10
c00113a2:	83 ec 08             	sub    esp,0x8
c00113a5:	50                   	push   eax
c00113a6:	53                   	push   ebx
c00113a7:	e8 58 00 00 00       	call   c0011404 <ReservedFilename::ReservedFilename(int)>
c00113ac:	83 c4 10             	add    esp,0x10
c00113af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00113b3:	89 1c 85 80 c9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3680],ebx
c00113ba:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00113c2:	83 ec 0c             	sub    esp,0xc
c00113c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00113c9:	e8 06 e1 ff ff       	call   c000f4d4 <malloc>
c00113ce:	83 c4 10             	add    esp,0x10
c00113d1:	89 c3                	mov    ebx,eax
c00113d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00113d7:	05 20 ff ff 0f       	add    eax,0xfffff20
c00113dc:	83 ec 08             	sub    esp,0x8
c00113df:	50                   	push   eax
c00113e0:	53                   	push   ebx
c00113e1:	e8 1e 00 00 00       	call   c0011404 <ReservedFilename::ReservedFilename(int)>
c00113e6:	83 c4 10             	add    esp,0x10
c00113e9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00113ed:	89 1c 85 40 c9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd36c0],ebx
c00113f4:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00113f8:	e9 7c ff ff ff       	jmp    c0011379 <UnixFile::UnixFile(int)+0x125>
c00113fd:	90                   	nop
c00113fe:	83 c4 28             	add    esp,0x28
c0011401:	5b                   	pop    ebx
c0011402:	c3                   	ret    
c0011403:	90                   	nop

c0011404 <ReservedFilename::ReservedFilename(int)>:
c0011404:	83 ec 0c             	sub    esp,0xc
c0011407:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001140b:	83 ec 08             	sub    esp,0x8
c001140e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011412:	50                   	push   eax
c0011413:	e8 3c fe ff ff       	call   c0011254 <UnixFile::UnixFile(int)>
c0011418:	83 c4 10             	add    esp,0x10
c001141b:	ba 54 8d 02 c0       	mov    edx,0xc0028d54
c0011420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011424:	89 10                	mov    DWORD PTR [eax],edx
c0011426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001142a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001142e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011431:	90                   	nop
c0011432:	83 c4 0c             	add    esp,0xc
c0011435:	c3                   	ret    

c0011436 <UnixFile::~UnixFile()>:
c0011436:	83 ec 1c             	sub    esp,0x1c
c0011439:	ba 38 8d 02 c0       	mov    edx,0xc0028d38
c001143e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011442:	89 10                	mov    DWORD PTR [eax],edx
c0011444:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011448:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001144b:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011450:	7f 73                	jg     c00114c5 <UnixFile::~UnixFile()+0x8f>
c0011452:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001145a:	83 ec 0c             	sub    esp,0xc
c001145d:	68 b8 c9 02 c0       	push   0xc002c9b8
c0011462:	e8 9d 5c 01 00       	call   c0027104 <LinkedList<UnixFile>::getFirstElement()>
c0011467:	83 c4 10             	add    esp,0x10
c001146a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001146e:	83 ec 0c             	sub    esp,0xc
c0011471:	68 b8 c9 02 c0       	push   0xc002c9b8
c0011476:	e8 91 5c 01 00       	call   c002710c <LinkedList<UnixFile>::removeFirst()>
c001147b:	83 c4 10             	add    esp,0x10
c001147e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011482:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011486:	74 40                	je     c00114c8 <UnixFile::~UnixFile()+0x92>
c0011488:	83 ec 08             	sub    esp,0x8
c001148b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001148f:	68 b8 c9 02 c0       	push   0xc002c9b8
c0011494:	e8 97 5b 01 00       	call   c0027030 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011499:	83 c4 10             	add    esp,0x10
c001149c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00114a0:	8d 50 01             	lea    edx,[eax+0x1]
c00114a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00114a7:	3d 88 13 00 00       	cmp    eax,0x1388
c00114ac:	0f 94 c0             	sete   al
c00114af:	84 c0                	test   al,al
c00114b1:	74 a7                	je     c001145a <UnixFile::~UnixFile()+0x24>
c00114b3:	83 ec 0c             	sub    esp,0xc
c00114b6:	68 10 8d 02 c0       	push   0xc0028d10
c00114bb:	e8 e1 82 00 00       	call   c00197a1 <Krnl::panic(char const*)>
c00114c0:	83 c4 10             	add    esp,0x10
c00114c3:	eb 95                	jmp    c001145a <UnixFile::~UnixFile()+0x24>
c00114c5:	90                   	nop
c00114c6:	eb 01                	jmp    c00114c9 <UnixFile::~UnixFile()+0x93>
c00114c8:	90                   	nop
c00114c9:	90                   	nop
c00114ca:	83 c4 1c             	add    esp,0x1c
c00114cd:	c3                   	ret    

c00114ce <UnixFile::~UnixFile()>:
c00114ce:	83 ec 0c             	sub    esp,0xc
c00114d1:	83 ec 0c             	sub    esp,0xc
c00114d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114d8:	e8 59 ff ff ff       	call   c0011436 <UnixFile::~UnixFile()>
c00114dd:	83 c4 10             	add    esp,0x10
c00114e0:	83 ec 08             	sub    esp,0x8
c00114e3:	6a 0c                	push   0xc
c00114e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114e9:	e8 b9 10 00 00       	call   c00125a7 <operator delete(void*, unsigned long)>
c00114ee:	83 c4 10             	add    esp,0x10
c00114f1:	83 c4 0c             	add    esp,0xc
c00114f4:	c3                   	ret    
c00114f5:	90                   	nop

c00114f6 <ReservedFilename::~ReservedFilename()>:
c00114f6:	83 ec 0c             	sub    esp,0xc
c00114f9:	ba 54 8d 02 c0       	mov    edx,0xc0028d54
c00114fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011502:	89 10                	mov    DWORD PTR [eax],edx
c0011504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011508:	83 ec 0c             	sub    esp,0xc
c001150b:	50                   	push   eax
c001150c:	e8 25 ff ff ff       	call   c0011436 <UnixFile::~UnixFile()>
c0011511:	83 c4 10             	add    esp,0x10
c0011514:	90                   	nop
c0011515:	83 c4 0c             	add    esp,0xc
c0011518:	c3                   	ret    
c0011519:	90                   	nop

c001151a <ReservedFilename::~ReservedFilename()>:
c001151a:	83 ec 0c             	sub    esp,0xc
c001151d:	83 ec 0c             	sub    esp,0xc
c0011520:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011524:	e8 cd ff ff ff       	call   c00114f6 <ReservedFilename::~ReservedFilename()>
c0011529:	83 c4 10             	add    esp,0x10
c001152c:	83 ec 08             	sub    esp,0x8
c001152f:	6a 0c                	push   0xc
c0011531:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011535:	e8 6d 10 00 00       	call   c00125a7 <operator delete(void*, unsigned long)>
c001153a:	83 c4 10             	add    esp,0x10
c001153d:	83 c4 0c             	add    esp,0xc
c0011540:	c3                   	ret    

c0011541 <getFromFileDescriptor(int)>:
c0011541:	53                   	push   ebx
c0011542:	83 ec 08             	sub    esp,0x8
c0011545:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011549:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c001154f:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011555:	7f 2c                	jg     c0011583 <getFromFileDescriptor(int)+0x42>
c0011557:	83 ec 0c             	sub    esp,0xc
c001155a:	68 b8 c9 02 c0       	push   0xc002c9b8
c001155f:	e8 a0 5b 01 00       	call   c0027104 <LinkedList<UnixFile>::getFirstElement()>
c0011564:	83 c4 10             	add    esp,0x10
c0011567:	85 c0                	test   eax,eax
c0011569:	75 04                	jne    c001156f <getFromFileDescriptor(int)+0x2e>
c001156b:	31 c0                	xor    eax,eax
c001156d:	eb 6e                	jmp    c00115dd <getFromFileDescriptor(int)+0x9c>
c001156f:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011572:	74 69                	je     c00115dd <getFromFileDescriptor(int)+0x9c>
c0011574:	52                   	push   edx
c0011575:	52                   	push   edx
c0011576:	50                   	push   eax
c0011577:	68 b8 c9 02 c0       	push   0xc002c9b8
c001157c:	e8 2d 5c 01 00       	call   c00271ae <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011581:	eb e1                	jmp    c0011564 <getFromFileDescriptor(int)+0x23>
c0011583:	a1 ac c9 02 c0       	mov    eax,ds:0xc002c9ac
c0011588:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c001158e:	74 4d                	je     c00115dd <getFromFileDescriptor(int)+0x9c>
c0011590:	a1 b0 c9 02 c0       	mov    eax,ds:0xc002c9b0
c0011595:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c001159b:	74 40                	je     c00115dd <getFromFileDescriptor(int)+0x9c>
c001159d:	a1 a8 c9 02 c0       	mov    eax,ds:0xc002c9a8
c00115a2:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00115a8:	74 33                	je     c00115dd <getFromFileDescriptor(int)+0x9c>
c00115aa:	a1 a4 c9 02 c0       	mov    eax,ds:0xc002c9a4
c00115af:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00115b5:	74 26                	je     c00115dd <getFromFileDescriptor(int)+0x9c>
c00115b7:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00115bd:	83 f8 08             	cmp    eax,0x8
c00115c0:	77 09                	ja     c00115cb <getFromFileDescriptor(int)+0x8a>
c00115c2:	8b 04 85 80 c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3680]
c00115c9:	eb 12                	jmp    c00115dd <getFromFileDescriptor(int)+0x9c>
c00115cb:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00115d1:	83 fb 08             	cmp    ebx,0x8
c00115d4:	77 95                	ja     c001156b <getFromFileDescriptor(int)+0x2a>
c00115d6:	8b 04 9d 40 c9 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd36c0]
c00115dd:	83 c4 08             	add    esp,0x8
c00115e0:	5b                   	pop    ebx
c00115e1:	c3                   	ret    

c00115e2 <__static_initialization_and_destruction_0(int, int)>:
c00115e2:	83 ec 0c             	sub    esp,0xc
c00115e5:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00115ea:	75 34                	jne    c0011620 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00115ec:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00115f4:	75 2a                	jne    c0011620 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00115f6:	83 ec 0c             	sub    esp,0xc
c00115f9:	68 b8 c9 02 c0       	push   0xc002c9b8
c00115fe:	e8 d5 59 01 00       	call   c0026fd8 <LinkedList<UnixFile>::LinkedList()>
c0011603:	83 c4 10             	add    esp,0x10
c0011606:	83 ec 04             	sub    esp,0x4
c0011609:	68 68 b7 02 c0       	push   0xc002b768
c001160e:	68 b8 c9 02 c0       	push   0xc002c9b8
c0011613:	68 d6 6f 02 c0       	push   0xc0026fd6
c0011618:	e8 04 0f 00 00       	call   c0012521 <__cxa_atexit>
c001161d:	83 c4 10             	add    esp,0x10
c0011620:	90                   	nop
c0011621:	83 c4 0c             	add    esp,0xc
c0011624:	c3                   	ret    

c0011625 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011625:	83 ec 0c             	sub    esp,0xc
c0011628:	83 ec 08             	sub    esp,0x8
c001162b:	68 ff ff 00 00       	push   0xffff
c0011630:	6a 01                	push   0x1
c0011632:	e8 ab ff ff ff       	call   c00115e2 <__static_initialization_and_destruction_0(int, int)>
c0011637:	83 c4 10             	add    esp,0x10
c001163a:	83 c4 0c             	add    esp,0xc
c001163d:	c3                   	ret    

c001163e <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c001163e:	53                   	push   ebx
c001163f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011643:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011647:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c001164d:	89 c8                	mov    eax,ecx
c001164f:	d1 e8                	shr    eax,1
c0011651:	03 05 e8 b7 02 c0    	add    eax,DWORD PTR ds:0xc002b7e8
c0011657:	83 e1 01             	and    ecx,0x1
c001165a:	8a 10                	mov    dl,BYTE PTR [eax]
c001165c:	75 09                	jne    c0011667 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c001165e:	83 e2 f0             	and    edx,0xfffffff0
c0011661:	09 da                	or     edx,ebx
c0011663:	88 10                	mov    BYTE PTR [eax],dl
c0011665:	5b                   	pop    ebx
c0011666:	c3                   	ret    
c0011667:	c1 e3 04             	shl    ebx,0x4
c001166a:	83 e2 0f             	and    edx,0xf
c001166d:	09 da                	or     edx,ebx
c001166f:	88 10                	mov    BYTE PTR [eax],dl
c0011671:	5b                   	pop    ebx
c0011672:	c3                   	ret    

c0011673 <Virt::getPageState(unsigned long)>:
c0011673:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011677:	8b 0d e8 b7 02 c0    	mov    ecx,DWORD PTR ds:0xc002b7e8
c001167d:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011683:	89 d0                	mov    eax,edx
c0011685:	d1 e8                	shr    eax,1
c0011687:	83 e2 01             	and    edx,0x1
c001168a:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c001168d:	75 04                	jne    c0011693 <Virt::getPageState(unsigned long)+0x20>
c001168f:	83 e0 0f             	and    eax,0xf
c0011692:	c3                   	ret    
c0011693:	c0 e8 04             	shr    al,0x4
c0011696:	c3                   	ret    

c0011697 <Virt::allocateKernelVirtualPages(int)>:
c0011697:	55                   	push   ebp
c0011698:	31 ed                	xor    ebp,ebp
c001169a:	57                   	push   edi
c001169b:	56                   	push   esi
c001169c:	53                   	push   ebx
c001169d:	31 db                	xor    ebx,ebx
c001169f:	83 ec 1c             	sub    esp,0x1c
c00116a2:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00116a6:	8b 3d e4 b7 02 c0    	mov    edi,DWORD PTR ds:0xc002b7e4
c00116ac:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00116b1:	57                   	push   edi
c00116b2:	e8 bc ff ff ff       	call   c0011673 <Virt::getPageState(unsigned long)>
c00116b7:	5a                   	pop    edx
c00116b8:	84 c0                	test   al,al
c00116ba:	75 3a                	jne    c00116f6 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00116bc:	85 db                	test   ebx,ebx
c00116be:	75 02                	jne    c00116c2 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00116c0:	89 fd                	mov    ebp,edi
c00116c2:	43                   	inc    ebx
c00116c3:	39 f3                	cmp    ebx,esi
c00116c5:	74 5a                	je     c0011721 <Virt::allocateKernelVirtualPages(int)+0x8a>
c00116c7:	47                   	inc    edi
c00116c8:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00116ce:	76 31                	jbe    c0011701 <Virt::allocateKernelVirtualPages(int)+0x6a>
c00116d0:	c7 05 e4 b7 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002b7e4,0xc8000
c00116da:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00116df:	75 28                	jne    c0011709 <Virt::allocateKernelVirtualPages(int)+0x72>
c00116e1:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00116e6:	bf 00 80 0c 00       	mov    edi,0xc8000
c00116eb:	57                   	push   edi
c00116ec:	e8 82 ff ff ff       	call   c0011673 <Virt::getPageState(unsigned long)>
c00116f1:	5a                   	pop    edx
c00116f2:	84 c0                	test   al,al
c00116f4:	74 c6                	je     c00116bc <Virt::allocateKernelVirtualPages(int)+0x25>
c00116f6:	31 db                	xor    ebx,ebx
c00116f8:	47                   	inc    edi
c00116f9:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00116ff:	77 cf                	ja     c00116d0 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011701:	89 3d e4 b7 02 c0    	mov    DWORD PTR ds:0xc002b7e4,edi
c0011707:	eb a8                	jmp    c00116b1 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011709:	83 ec 0c             	sub    esp,0xc
c001170c:	68 68 8d 02 c0       	push   0xc0028d68
c0011711:	e8 8b 80 00 00       	call   c00197a1 <Krnl::panic(char const*)>
c0011716:	8b 3d e4 b7 02 c0    	mov    edi,DWORD PTR ds:0xc002b7e4
c001171c:	83 c4 10             	add    esp,0x10
c001171f:	eb 90                	jmp    c00116b1 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011721:	89 2d e4 b7 02 c0    	mov    DWORD PTR ds:0xc002b7e4,ebp
c0011727:	4b                   	dec    ebx
c0011728:	74 5f                	je     c0011789 <Virt::allocateKernelVirtualPages(int)+0xf2>
c001172a:	85 f6                	test   esi,esi
c001172c:	74 3d                	je     c001176b <Virt::allocateKernelVirtualPages(int)+0xd4>
c001172e:	89 e8                	mov    eax,ebp
c0011730:	31 db                	xor    ebx,ebx
c0011732:	8d 7e ff             	lea    edi,[esi-0x1]
c0011735:	eb 14                	jmp    c001174b <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011737:	6a 01                	push   0x1
c0011739:	43                   	inc    ebx
c001173a:	50                   	push   eax
c001173b:	e8 fe fe ff ff       	call   c001163e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011740:	58                   	pop    eax
c0011741:	39 f3                	cmp    ebx,esi
c0011743:	5a                   	pop    edx
c0011744:	74 25                	je     c001176b <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011746:	a1 e4 b7 02 c0       	mov    eax,ds:0xc002b7e4
c001174b:	8d 50 01             	lea    edx,[eax+0x1]
c001174e:	85 db                	test   ebx,ebx
c0011750:	89 15 e4 b7 02 c0    	mov    DWORD PTR ds:0xc002b7e4,edx
c0011756:	74 20                	je     c0011778 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011758:	39 df                	cmp    edi,ebx
c001175a:	75 db                	jne    c0011737 <Virt::allocateKernelVirtualPages(int)+0xa0>
c001175c:	6a 03                	push   0x3
c001175e:	43                   	inc    ebx
c001175f:	50                   	push   eax
c0011760:	e8 d9 fe ff ff       	call   c001163e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011765:	59                   	pop    ecx
c0011766:	39 f3                	cmp    ebx,esi
c0011768:	58                   	pop    eax
c0011769:	75 db                	jne    c0011746 <Virt::allocateKernelVirtualPages(int)+0xaf>
c001176b:	83 c4 1c             	add    esp,0x1c
c001176e:	89 e8                	mov    eax,ebp
c0011770:	5b                   	pop    ebx
c0011771:	c1 e0 0c             	shl    eax,0xc
c0011774:	5e                   	pop    esi
c0011775:	5f                   	pop    edi
c0011776:	5d                   	pop    ebp
c0011777:	c3                   	ret    
c0011778:	6a 02                	push   0x2
c001177a:	bb 01 00 00 00       	mov    ebx,0x1
c001177f:	50                   	push   eax
c0011780:	e8 b9 fe ff ff       	call   c001163e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011785:	58                   	pop    eax
c0011786:	5a                   	pop    edx
c0011787:	eb bd                	jmp    c0011746 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011789:	6a 04                	push   0x4
c001178b:	8d 45 01             	lea    eax,[ebp+0x1]
c001178e:	55                   	push   ebp
c001178f:	a3 e4 b7 02 c0       	mov    ds:0xc002b7e4,eax
c0011794:	e8 a5 fe ff ff       	call   c001163e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011799:	59                   	pop    ecx
c001179a:	89 e8                	mov    eax,ebp
c001179c:	5b                   	pop    ebx
c001179d:	c1 e0 0c             	shl    eax,0xc
c00117a0:	83 c4 1c             	add    esp,0x1c
c00117a3:	5b                   	pop    ebx
c00117a4:	5e                   	pop    esi
c00117a5:	5f                   	pop    edi
c00117a6:	5d                   	pop    ebp
c00117a7:	c3                   	ret    

c00117a8 <Virt::virtualMemorySetup()>:
c00117a8:	53                   	push   ebx
c00117a9:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00117ae:	83 ec 08             	sub    esp,0x8
c00117b1:	6a 0f                	push   0xf
c00117b3:	53                   	push   ebx
c00117b4:	43                   	inc    ebx
c00117b5:	e8 84 fe ff ff       	call   c001163e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00117ba:	59                   	pop    ecx
c00117bb:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00117c1:	58                   	pop    eax
c00117c2:	75 ed                	jne    c00117b1 <Virt::virtualMemorySetup()+0x9>
c00117c4:	83 ec 08             	sub    esp,0x8
c00117c7:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00117cc:	68 00 00 00 c8       	push   0xc8000000
c00117d1:	68 ef 8e 02 c0       	push   0xc0028eef
c00117d6:	e8 ac 0e 00 00       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c00117db:	58                   	pop    eax
c00117dc:	5a                   	pop    edx
c00117dd:	68 00 f0 ff ef       	push   0xeffff000
c00117e2:	68 03 8f 02 c0       	push   0xc0028f03
c00117e7:	e8 9b 0e 00 00       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c00117ec:	83 c4 10             	add    esp,0x10
c00117ef:	83 ec 08             	sub    esp,0x8
c00117f2:	6a 00                	push   0x0
c00117f4:	53                   	push   ebx
c00117f5:	43                   	inc    ebx
c00117f6:	e8 43 fe ff ff       	call   c001163e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00117fb:	83 c4 10             	add    esp,0x10
c00117fe:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011804:	75 e9                	jne    c00117ef <Virt::virtualMemorySetup()+0x47>
c0011806:	bb 00 00 0d 00       	mov    ebx,0xd0000
c001180b:	83 ec 08             	sub    esp,0x8
c001180e:	6a 0f                	push   0xf
c0011810:	53                   	push   ebx
c0011811:	43                   	inc    ebx
c0011812:	e8 27 fe ff ff       	call   c001163e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011817:	83 c4 10             	add    esp,0x10
c001181a:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011820:	75 e9                	jne    c001180b <Virt::virtualMemorySetup()+0x63>
c0011822:	83 c4 08             	add    esp,0x8
c0011825:	5b                   	pop    ebx
c0011826:	c3                   	ret    

c0011827 <Virt::getAKernelVAS()>:
c0011827:	a1 c4 c9 02 c0       	mov    eax,ds:0xc002c9c4
c001182c:	c3                   	ret    

c001182d <Virt::setupPageSwapping(int)>:
c001182d:	57                   	push   edi
c001182e:	56                   	push   esi
c001182f:	53                   	push   ebx
c0011830:	83 ec 1c             	sub    esp,0x1c
c0011833:	68 14 01 00 00       	push   0x114
c0011838:	e8 97 dc ff ff       	call   c000f4d4 <malloc>
c001183d:	83 c4 0c             	add    esp,0xc
c0011840:	89 c6                	mov    esi,eax
c0011842:	ff 35 94 dd 02 c0    	push   DWORD PTR ds:0xc002dd94
c0011848:	68 17 8f 02 c0       	push   0xc0028f17
c001184d:	50                   	push   eax
c001184e:	e8 63 13 00 00       	call   c0012bb6 <File::File(char const*, Process*)>
c0011853:	89 34 24             	mov    DWORD PTR [esp],esi
c0011856:	e8 37 15 00 00       	call   c0012d92 <File::unlink()>
c001185b:	58                   	pop    eax
c001185c:	5a                   	pop    edx
c001185d:	6a 12                	push   0x12
c001185f:	56                   	push   esi
c0011860:	e8 b5 13 00 00       	call   c0012c1a <File::open(FileOpenMode)>
c0011865:	83 c4 10             	add    esp,0x10
c0011868:	85 c0                	test   eax,eax
c001186a:	0f 85 ca 00 00 00    	jne    c001193a <Virt::setupPageSwapping(int)+0x10d>
c0011870:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011874:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001187c:	c1 e3 08             	shl    ebx,0x8
c001187f:	83 ec 0c             	sub    esp,0xc
c0011882:	68 00 00 01 00       	push   0x10000
c0011887:	e8 48 dc ff ff       	call   c000f4d4 <malloc>
c001188c:	83 c4 0c             	add    esp,0xc
c001188f:	89 c7                	mov    edi,eax
c0011891:	68 00 00 01 00       	push   0x10000
c0011896:	6a 00                	push   0x0
c0011898:	50                   	push   eax
c0011899:	e8 ed ed fe ff       	call   c000068b <memset>
c001189e:	83 c4 10             	add    esp,0x10
c00118a1:	85 db                	test   ebx,ebx
c00118a3:	79 03                	jns    c00118a8 <Virt::setupPageSwapping(int)+0x7b>
c00118a5:	83 c3 0f             	add    ebx,0xf
c00118a8:	c1 fb 04             	sar    ebx,0x4
c00118ab:	4b                   	dec    ebx
c00118ac:	83 fb ff             	cmp    ebx,0xffffffff
c00118af:	74 4b                	je     c00118fc <Virt::setupPageSwapping(int)+0xcf>
c00118b1:	83 ec 0c             	sub    esp,0xc
c00118b4:	8b 06                	mov    eax,DWORD PTR [esi]
c00118b6:	8d 54 24 18          	lea    edx,[esp+0x18]
c00118ba:	52                   	push   edx
c00118bb:	57                   	push   edi
c00118bc:	6a 00                	push   0x0
c00118be:	68 00 00 01 00       	push   0x10000
c00118c3:	56                   	push   esi
c00118c4:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00118c7:	83 c4 20             	add    esp,0x20
c00118ca:	85 c0                	test   eax,eax
c00118cc:	75 59                	jne    c0011927 <Virt::setupPageSwapping(int)+0xfa>
c00118ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00118d2:	3d 00 00 01 00       	cmp    eax,0x10000
c00118d7:	74 d2                	je     c00118ab <Virt::setupPageSwapping(int)+0x7e>
c00118d9:	83 ec 08             	sub    esp,0x8
c00118dc:	4b                   	dec    ebx
c00118dd:	50                   	push   eax
c00118de:	68 6a 8f 02 c0       	push   0xc0028f6a
c00118e3:	e8 9f 0d 00 00       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c00118e8:	c7 04 24 73 8f 02 c0 	mov    DWORD PTR [esp],0xc0028f73
c00118ef:	e8 ad 7e 00 00       	call   c00197a1 <Krnl::panic(char const*)>
c00118f4:	83 c4 10             	add    esp,0x10
c00118f7:	83 fb ff             	cmp    ebx,0xffffffff
c00118fa:	75 b5                	jne    c00118b1 <Virt::setupPageSwapping(int)+0x84>
c00118fc:	83 ec 0c             	sub    esp,0xc
c00118ff:	56                   	push   esi
c0011900:	e8 73 13 00 00       	call   c0012c78 <File::close()>
c0011905:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011908:	e8 e7 db ff ff       	call   c000f4f4 <rfree>
c001190d:	83 c4 10             	add    esp,0x10
c0011910:	85 f6                	test   esi,esi
c0011912:	74 0c                	je     c0011920 <Virt::setupPageSwapping(int)+0xf3>
c0011914:	83 ec 0c             	sub    esp,0xc
c0011917:	8b 06                	mov    eax,DWORD PTR [esi]
c0011919:	56                   	push   esi
c001191a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001191d:	83 c4 10             	add    esp,0x10
c0011920:	83 c4 10             	add    esp,0x10
c0011923:	5b                   	pop    ebx
c0011924:	5e                   	pop    esi
c0011925:	5f                   	pop    edi
c0011926:	c3                   	ret    
c0011927:	83 ec 08             	sub    esp,0x8
c001192a:	50                   	push   eax
c001192b:	68 52 8f 02 c0       	push   0xc0028f52
c0011930:	e8 52 0d 00 00       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0011935:	83 c4 10             	add    esp,0x10
c0011938:	eb 94                	jmp    c00118ce <Virt::setupPageSwapping(int)+0xa1>
c001193a:	83 ec 08             	sub    esp,0x8
c001193d:	50                   	push   eax
c001193e:	68 2e 8f 02 c0       	push   0xc0028f2e
c0011943:	e8 3f 0d 00 00       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0011948:	c7 04 24 37 8f 02 c0 	mov    DWORD PTR [esp],0xc0028f37
c001194f:	e8 4d 7e 00 00       	call   c00197a1 <Krnl::panic(char const*)>
c0011954:	83 c4 10             	add    esp,0x10
c0011957:	e9 14 ff ff ff       	jmp    c0011870 <Virt::setupPageSwapping(int)+0x43>

c001195c <VAS::VAS()>:
c001195c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011960:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011967:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001196b:	a3 c4 c9 02 c0       	mov    ds:0xc002c9c4,eax
c0011970:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011974:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011978:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001197c:	c6 00 01             	mov    BYTE PTR [eax],0x1
c001197f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011983:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c001198a:	90                   	nop
c001198b:	c3                   	ret    

c001198c <VAS::VAS(VAS*)>:
c001198c:	83 ec 0c             	sub    esp,0xc
c001198f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011993:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001199a:	83 ec 0c             	sub    esp,0xc
c001199d:	68 88 8d 02 c0       	push   0xc0028d88
c00119a2:	e8 fa 7d 00 00       	call   c00197a1 <Krnl::panic(char const*)>
c00119a7:	83 c4 10             	add    esp,0x10
c00119aa:	90                   	nop
c00119ab:	83 c4 0c             	add    esp,0xc
c00119ae:	c3                   	ret    
c00119af:	90                   	nop

c00119b0 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00119b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119b4:	89 c2                	mov    edx,eax
c00119b6:	c1 e8 0a             	shr    eax,0xa
c00119b9:	c1 ea 16             	shr    edx,0x16
c00119bc:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00119c1:	19 c9                	sbb    ecx,ecx
c00119c3:	c1 e2 0c             	shl    edx,0xc
c00119c6:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00119cc:	25 fc 0f 00 00       	and    eax,0xffc
c00119d1:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00119d8:	01 d0                	add    eax,edx
c00119da:	c3                   	ret    
c00119db:	90                   	nop

c00119dc <VAS::getPageTableEntry(unsigned long)>:
c00119dc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00119e0:	89 ca                	mov    edx,ecx
c00119e2:	c1 e9 0a             	shr    ecx,0xa
c00119e5:	c1 ea 16             	shr    edx,0x16
c00119e8:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00119ee:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00119f4:	c1 e0 0c             	shl    eax,0xc
c00119f7:	8d 04 08             	lea    eax,[eax+ecx*1]
c00119fa:	c3                   	ret    

c00119fb <Virt::freeKernelVirtualPages(unsigned long)>:
c00119fb:	57                   	push   edi
c00119fc:	56                   	push   esi
c00119fd:	be 01 00 00 00       	mov    esi,0x1
c0011a02:	53                   	push   ebx
c0011a03:	83 ec 10             	sub    esp,0x10
c0011a06:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011a0a:	c1 eb 0c             	shr    ebx,0xc
c0011a0d:	eb 3f                	jmp    c0011a4e <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011a0f:	e8 13 fe ff ff       	call   c0011827 <Virt::getAKernelVAS()>
c0011a14:	83 ec 08             	sub    esp,0x8
c0011a17:	57                   	push   edi
c0011a18:	50                   	push   eax
c0011a19:	e8 be ff ff ff       	call   c00119dc <VAS::getPageTableEntry(unsigned long)>
c0011a1e:	83 c4 10             	add    esp,0x10
c0011a21:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a23:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011a27:	f6 c4 04             	test   ah,0x4
c0011a2a:	75 5f                	jne    c0011a8b <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011a2c:	80 fa 04             	cmp    dl,0x4
c0011a2f:	74 78                	je     c0011aa9 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011a31:	80 fa 02             	cmp    dl,0x2
c0011a34:	0f 84 88 00 00 00    	je     c0011ac2 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011a3a:	80 fa 03             	cmp    dl,0x3
c0011a3d:	0f 84 ad 00 00 00    	je     c0011af0 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011a43:	fe ca                	dec    dl
c0011a45:	0f 84 92 00 00 00    	je     c0011add <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011a4b:	43                   	inc    ebx
c0011a4c:	31 f6                	xor    esi,esi
c0011a4e:	53                   	push   ebx
c0011a4f:	e8 1f fc ff ff       	call   c0011673 <Virt::getPageState(unsigned long)>
c0011a54:	5f                   	pop    edi
c0011a55:	89 df                	mov    edi,ebx
c0011a57:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011a5b:	c1 e7 0c             	shl    edi,0xc
c0011a5e:	84 c0                	test   al,al
c0011a60:	75 ad                	jne    c0011a0f <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011a62:	83 ec 0c             	sub    esp,0xc
c0011a65:	68 79 8f 02 c0       	push   0xc0028f79
c0011a6a:	e8 32 7d 00 00       	call   c00197a1 <Krnl::panic(char const*)>
c0011a6f:	e8 b3 fd ff ff       	call   c0011827 <Virt::getAKernelVAS()>
c0011a74:	5a                   	pop    edx
c0011a75:	59                   	pop    ecx
c0011a76:	57                   	push   edi
c0011a77:	50                   	push   eax
c0011a78:	e8 5f ff ff ff       	call   c00119dc <VAS::getPageTableEntry(unsigned long)>
c0011a7d:	83 c4 10             	add    esp,0x10
c0011a80:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a82:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011a86:	f6 c4 04             	test   ah,0x4
c0011a89:	74 c0                	je     c0011a4b <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011a8b:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011a8f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011a94:	83 ec 0c             	sub    esp,0xc
c0011a97:	50                   	push   eax
c0011a98:	e8 87 de ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c0011a9d:	83 c4 10             	add    esp,0x10
c0011aa0:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011aa4:	80 fa 04             	cmp    dl,0x4
c0011aa7:	75 88                	jne    c0011a31 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011aa9:	89 f0                	mov    eax,esi
c0011aab:	84 c0                	test   al,al
c0011aad:	75 47                	jne    c0011af6 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011aaf:	c7 44 24 20 ac 8d 02 c0 	mov    DWORD PTR [esp+0x20],0xc0028dac
c0011ab7:	83 c4 10             	add    esp,0x10
c0011aba:	5b                   	pop    ebx
c0011abb:	5e                   	pop    esi
c0011abc:	5f                   	pop    edi
c0011abd:	e9 df 7c 00 00       	jmp    c00197a1 <Krnl::panic(char const*)>
c0011ac2:	89 f0                	mov    eax,esi
c0011ac4:	84 c0                	test   al,al
c0011ac6:	75 15                	jne    c0011add <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011ac8:	83 ec 0c             	sub    esp,0xc
c0011acb:	68 95 8f 02 c0       	push   0xc0028f95
c0011ad0:	e8 cc 7c 00 00       	call   c00197a1 <Krnl::panic(char const*)>
c0011ad5:	83 c4 10             	add    esp,0x10
c0011ad8:	e9 6e ff ff ff       	jmp    c0011a4b <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011add:	83 ec 08             	sub    esp,0x8
c0011ae0:	6a 00                	push   0x0
c0011ae2:	53                   	push   ebx
c0011ae3:	e8 56 fb ff ff       	call   c001163e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011ae8:	83 c4 10             	add    esp,0x10
c0011aeb:	e9 5b ff ff ff       	jmp    c0011a4b <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011af0:	89 f0                	mov    eax,esi
c0011af2:	84 c0                	test   al,al
c0011af4:	75 15                	jne    c0011b0b <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011af6:	83 ec 08             	sub    esp,0x8
c0011af9:	6a 00                	push   0x0
c0011afb:	53                   	push   ebx
c0011afc:	e8 3d fb ff ff       	call   c001163e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b01:	83 c4 10             	add    esp,0x10
c0011b04:	83 c4 10             	add    esp,0x10
c0011b07:	5b                   	pop    ebx
c0011b08:	5e                   	pop    esi
c0011b09:	5f                   	pop    edi
c0011b0a:	c3                   	ret    
c0011b0b:	c7 44 24 20 b1 8f 02 c0 	mov    DWORD PTR [esp+0x20],0xc0028fb1
c0011b13:	83 c4 10             	add    esp,0x10
c0011b16:	5b                   	pop    ebx
c0011b17:	5e                   	pop    esi
c0011b18:	5f                   	pop    edi
c0011b19:	e9 83 7c 00 00       	jmp    c00197a1 <Krnl::panic(char const*)>

c0011b1e <VAS::freeAllocatedPages(unsigned long)>:
c0011b1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b22:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011b26:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011b2a:	74 09                	je     c0011b35 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011b2c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011b30:	e9 c6 fe ff ff       	jmp    c00119fb <Virt::freeKernelVirtualPages(unsigned long)>
c0011b35:	c7 44 24 04 d0 8d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0028dd0
c0011b3d:	e9 45 0b 00 00       	jmp    c0012687 <Dbg::kprintf(char const*, ...)>

c0011b42 <VAS::virtualToPhysical(unsigned long)>:
c0011b42:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011b46:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011b4a:	e8 8d fe ff ff       	call   c00119dc <VAS::getPageTableEntry(unsigned long)>
c0011b4f:	5a                   	pop    edx
c0011b50:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b52:	59                   	pop    ecx
c0011b53:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011b58:	c3                   	ret    
c0011b59:	90                   	nop

c0011b5a <VAS::reflagRange(unsigned long, int, int, int)>:
c0011b5a:	55                   	push   ebp
c0011b5b:	57                   	push   edi
c0011b5c:	56                   	push   esi
c0011b5d:	53                   	push   ebx
c0011b5e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011b62:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011b66:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011b6a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011b6e:	85 db                	test   ebx,ebx
c0011b70:	7e 22                	jle    c0011b94 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011b72:	c1 e3 0c             	shl    ebx,0xc
c0011b75:	01 f3                	add    ebx,esi
c0011b77:	56                   	push   esi
c0011b78:	81 c6 00 10 00 00    	add    esi,0x1000
c0011b7e:	55                   	push   ebp
c0011b7f:	e8 58 fe ff ff       	call   c00119dc <VAS::getPageTableEntry(unsigned long)>
c0011b84:	5a                   	pop    edx
c0011b85:	59                   	pop    ecx
c0011b86:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011b88:	21 f9                	and    ecx,edi
c0011b8a:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011b8e:	39 f3                	cmp    ebx,esi
c0011b90:	89 08                	mov    DWORD PTR [eax],ecx
c0011b92:	75 e3                	jne    c0011b77 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011b94:	5b                   	pop    ebx
c0011b95:	5e                   	pop    esi
c0011b96:	5f                   	pop    edi
c0011b97:	5d                   	pop    ebp
c0011b98:	c3                   	ret    
c0011b99:	90                   	nop

c0011b9a <VAS::setToWriteCombining(unsigned long, int)>:
c0011b9a:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0011b9f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011ba5:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011bac:	75 01                	jne    c0011baf <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011bae:	c3                   	ret    
c0011baf:	68 80 00 00 00       	push   0x80
c0011bb4:	6a ff                	push   0xffffffff
c0011bb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011bba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011bbe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011bc2:	e8 93 ff ff ff       	call   c0011b5a <VAS::reflagRange(unsigned long, int, int, int)>
c0011bc7:	83 c4 14             	add    esp,0x14
c0011bca:	c3                   	ret    
c0011bcb:	90                   	nop

c0011bcc <VAS::mapOtherVASIn(bool, VAS*)>:
c0011bcc:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011bd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011bd5:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011bd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bdc:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0011bdf:	19 c0                	sbb    eax,eax
c0011be1:	83 ca 03             	or     edx,0x3
c0011be4:	83 e0 fc             	and    eax,0xfffffffc
c0011be7:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011bee:	0f 20 d8             	mov    eax,cr3
c0011bf1:	0f 22 d8             	mov    cr3,eax
c0011bf4:	c3                   	ret    
c0011bf5:	90                   	nop

c0011bf6 <VAS::~VAS()>:
c0011bf6:	83 ec 2c             	sub    esp,0x2c
c0011bf9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011c01:	e8 2a b0 00 00       	call   c001cc30 <lockScheduler()>
c0011c06:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011c0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c0d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011c10:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011c16:	83 ec 04             	sub    esp,0x4
c0011c19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011c1d:	6a 01                	push   0x1
c0011c1f:	50                   	push   eax
c0011c20:	e8 a7 ff ff ff       	call   c0011bcc <VAS::mapOtherVASIn(bool, VAS*)>
c0011c25:	83 c4 10             	add    esp,0x10
c0011c28:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011c30:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011c38:	0f 8f d7 00 00 00    	jg     c0011d15 <VAS::~VAS()+0x11f>
c0011c3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011c42:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011c45:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011c49:	c1 e2 02             	shl    edx,0x2
c0011c4c:	01 d0                	add    eax,edx
c0011c4e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011c54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c58:	83 e0 01             	and    eax,0x1
c0011c5b:	0f 84 ab 00 00 00    	je     c0011d0c <VAS::~VAS()+0x116>
c0011c61:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011c69:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011c71:	7f 75                	jg     c0011ce8 <VAS::~VAS()+0xf2>
c0011c73:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011c77:	c1 e0 0a             	shl    eax,0xa
c0011c7a:	89 c2                	mov    edx,eax
c0011c7c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011c80:	01 d0                	add    eax,edx
c0011c82:	c1 e0 0c             	shl    eax,0xc
c0011c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c89:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011c8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c90:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011c93:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011c99:	83 ec 04             	sub    esp,0x4
c0011c9c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011ca0:	6a 01                	push   0x1
c0011ca2:	50                   	push   eax
c0011ca3:	e8 08 fd ff ff       	call   c00119b0 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011ca8:	83 c4 10             	add    esp,0x10
c0011cab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011caf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011cb3:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cb5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011cb9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cbd:	25 01 04 00 00       	and    eax,0x401
c0011cc2:	3d 01 04 00 00       	cmp    eax,0x401
c0011cc7:	75 19                	jne    c0011ce2 <VAS::~VAS()+0xec>
c0011cc9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ccd:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011cd2:	83 ec 0c             	sub    esp,0xc
c0011cd5:	50                   	push   eax
c0011cd6:	e8 49 dc ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c0011cdb:	83 c4 10             	add    esp,0x10
c0011cde:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011ce2:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011ce6:	eb 81                	jmp    c0011c69 <VAS::~VAS()+0x73>
c0011ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011cec:	25 00 04 00 00       	and    eax,0x400
c0011cf1:	74 19                	je     c0011d0c <VAS::~VAS()+0x116>
c0011cf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011cf7:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011cfc:	83 ec 0c             	sub    esp,0xc
c0011cff:	50                   	push   eax
c0011d00:	e8 1f dc ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c0011d05:	83 c4 10             	add    esp,0x10
c0011d08:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011d0c:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011d10:	e9 1b ff ff ff       	jmp    c0011c30 <VAS::~VAS()+0x3a>
c0011d15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d19:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011d1c:	83 ec 0c             	sub    esp,0xc
c0011d1f:	50                   	push   eax
c0011d20:	e8 d6 fc ff ff       	call   c00119fb <Virt::freeKernelVirtualPages(unsigned long)>
c0011d25:	83 c4 10             	add    esp,0x10
c0011d28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d2c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011d2f:	83 ec 0c             	sub    esp,0xc
c0011d32:	50                   	push   eax
c0011d33:	e8 ec db ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c0011d38:	83 c4 10             	add    esp,0x10
c0011d3b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011d3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011d43:	c1 e0 02             	shl    eax,0x2
c0011d46:	83 ec 08             	sub    esp,0x8
c0011d49:	50                   	push   eax
c0011d4a:	68 f4 8d 02 c0       	push   0xc0028df4
c0011d4f:	e8 33 09 00 00       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0011d54:	83 c4 10             	add    esp,0x10
c0011d57:	e8 d6 ae 00 00       	call   c001cc32 <unlockScheduler()>
c0011d5c:	90                   	nop
c0011d5d:	83 c4 2c             	add    esp,0x2c
c0011d60:	c3                   	ret    
c0011d61:	90                   	nop

c0011d62 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011d62:	55                   	push   ebp
c0011d63:	57                   	push   edi
c0011d64:	56                   	push   esi
c0011d65:	53                   	push   ebx
c0011d66:	83 ec 1c             	sub    esp,0x1c
c0011d69:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011d6d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011d71:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011d77:	77 08                	ja     c0011d81 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011d79:	0f 20 d8             	mov    eax,cr3
c0011d7c:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0011d7f:	75 47                	jne    c0011dc8 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011d81:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011d85:	09 d8                	or     eax,ebx
c0011d87:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d8c:	75 57                	jne    c0011de5 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011d8e:	89 de                	mov    esi,ebx
c0011d90:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011d93:	c1 ee 16             	shr    esi,0x16
c0011d96:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011d9d:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011da1:	74 54                	je     c0011df7 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011da3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011da7:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011dad:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011db1:	c1 e6 0c             	shl    esi,0xc
c0011db4:	c1 eb 0a             	shr    ebx,0xa
c0011db7:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011dbd:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011dc0:	83 c4 1c             	add    esp,0x1c
c0011dc3:	5b                   	pop    ebx
c0011dc4:	5e                   	pop    esi
c0011dc5:	5f                   	pop    edi
c0011dc6:	5d                   	pop    ebp
c0011dc7:	c3                   	ret    
c0011dc8:	83 ec 0c             	sub    esp,0xc
c0011dcb:	68 14 8e 02 c0       	push   0xc0028e14
c0011dd0:	e8 b2 08 00 00       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0011dd5:	83 c4 10             	add    esp,0x10
c0011dd8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ddc:	09 d8                	or     eax,ebx
c0011dde:	a9 ff 0f 00 00       	test   eax,0xfff
c0011de3:	74 a9                	je     c0011d8e <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011de5:	83 ec 0c             	sub    esp,0xc
c0011de8:	68 7c 8e 02 c0       	push   0xc0028e7c
c0011ded:	e8 af 79 00 00       	call   c00197a1 <Krnl::panic(char const*)>
c0011df2:	83 c4 10             	add    esp,0x10
c0011df5:	eb 97                	jmp    c0011d8e <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011df7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011dfb:	e8 ae db ff ff       	call   c000f9ae <Phys::allocatePage()>
c0011e00:	89 c5                	mov    ebp,eax
c0011e02:	e8 20 fa ff ff       	call   c0011827 <Virt::getAKernelVAS()>
c0011e07:	83 ec 0c             	sub    esp,0xc
c0011e0a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011e0e:	6a 01                	push   0x1
c0011e10:	e8 82 f8 ff ff       	call   c0011697 <Virt::allocateKernelVirtualPages(int)>
c0011e15:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011e1c:	6a 01                	push   0x1
c0011e1e:	50                   	push   eax
c0011e1f:	55                   	push   ebp
c0011e20:	81 cd 07 04 00 00    	or     ebp,0x407
c0011e26:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011e2a:	51                   	push   ecx
c0011e2b:	e8 26 02 00 00       	call   c0012056 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e30:	83 c4 1c             	add    esp,0x1c
c0011e33:	68 00 10 00 00       	push   0x1000
c0011e38:	6a 00                	push   0x0
c0011e3a:	50                   	push   eax
c0011e3b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011e3f:	e8 47 e8 fe ff       	call   c000068b <memset>
c0011e44:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011e48:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011e4b:	e8 ab fb ff ff       	call   c00119fb <Virt::freeKernelVirtualPages(unsigned long)>
c0011e50:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011e54:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011e57:	83 c4 10             	add    esp,0x10
c0011e5a:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011e5d:	e9 41 ff ff ff       	jmp    c0011da3 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0011e62 <VAS::allocatePages(int, int)>:
c0011e62:	55                   	push   ebp
c0011e63:	57                   	push   edi
c0011e64:	56                   	push   esi
c0011e65:	53                   	push   ebx
c0011e66:	83 ec 1c             	sub    esp,0x1c
c0011e69:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011e6d:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0011e72:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011e78:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011e7e:	83 e0 01             	and    eax,0x1
c0011e81:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011e85:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011e89:	0f 85 cc 00 00 00    	jne    c0011f5b <VAS::allocatePages(int, int)+0xf9>
c0011e8f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011e96:	85 c0                	test   eax,eax
c0011e98:	0f 84 a1 00 00 00    	je     c0011f3f <VAS::allocatePages(int, int)+0xdd>
c0011e9e:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011ea2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ea6:	c1 e6 0c             	shl    esi,0xc
c0011ea9:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011ead:	85 c0                	test   eax,eax
c0011eaf:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011eb2:	7e 33                	jle    c0011ee7 <VAS::allocatePages(int, int)+0x85>
c0011eb4:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011eb8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011ebc:	81 cd 00 04 00 00    	or     ebp,0x400
c0011ec2:	e8 e7 da ff ff       	call   c000f9ae <Phys::allocatePage()>
c0011ec7:	55                   	push   ebp
c0011ec8:	53                   	push   ebx
c0011ec9:	50                   	push   eax
c0011eca:	57                   	push   edi
c0011ecb:	e8 92 fe ff ff       	call   c0011d62 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011ed0:	83 c4 10             	add    esp,0x10
c0011ed3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ed8:	74 03                	je     c0011edd <VAS::allocatePages(int, int)+0x7b>
c0011eda:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011edd:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ee3:	39 de                	cmp    esi,ebx
c0011ee5:	75 db                	jne    c0011ec2 <VAS::allocatePages(int, int)+0x60>
c0011ee7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011eec:	75 12                	jne    c0011f00 <VAS::allocatePages(int, int)+0x9e>
c0011eee:	0f 20 d8             	mov    eax,cr3
c0011ef1:	0f 22 d8             	mov    cr3,eax
c0011ef4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ef8:	83 c4 1c             	add    esp,0x1c
c0011efb:	5b                   	pop    ebx
c0011efc:	5e                   	pop    esi
c0011efd:	5f                   	pop    edi
c0011efe:	5d                   	pop    ebp
c0011eff:	c3                   	ret    
c0011f00:	c1 ee 0a             	shr    esi,0xa
c0011f03:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011f07:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011f0d:	c1 eb 0a             	shr    ebx,0xa
c0011f10:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011f16:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011f1c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011f22:	39 c3                	cmp    ebx,eax
c0011f24:	77 ce                	ja     c0011ef4 <VAS::allocatePages(int, int)+0x92>
c0011f26:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011f29:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011f2f:	39 d8                	cmp    eax,ebx
c0011f31:	73 f3                	jae    c0011f26 <VAS::allocatePages(int, int)+0xc4>
c0011f33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f37:	83 c4 1c             	add    esp,0x1c
c0011f3a:	5b                   	pop    ebx
c0011f3b:	5e                   	pop    esi
c0011f3c:	5f                   	pop    edi
c0011f3d:	5d                   	pop    ebp
c0011f3e:	c3                   	ret    
c0011f3f:	83 ec 0c             	sub    esp,0xc
c0011f42:	68 a0 8e 02 c0       	push   0xc0028ea0
c0011f47:	e8 55 78 00 00       	call   c00197a1 <Krnl::panic(char const*)>
c0011f4c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011f4f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011f53:	83 c4 10             	add    esp,0x10
c0011f56:	e9 43 ff ff ff       	jmp    c0011e9e <VAS::allocatePages(int, int)+0x3c>
c0011f5b:	83 ec 0c             	sub    esp,0xc
c0011f5e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011f62:	e8 30 f7 ff ff       	call   c0011697 <Virt::allocateKernelVirtualPages(int)>
c0011f67:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011f6b:	83 c4 10             	add    esp,0x10
c0011f6e:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011f73:	0f 87 9b 00 00 00    	ja     c0012014 <VAS::allocatePages(int, int)+0x1b2>
c0011f79:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011f7d:	85 d2                	test   edx,edx
c0011f7f:	7e 3c                	jle    c0011fbd <VAS::allocatePages(int, int)+0x15b>
c0011f81:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011f85:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011f89:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011f8d:	c1 e5 0c             	shl    ebp,0xc
c0011f90:	81 ce 00 04 00 00    	or     esi,0x400
c0011f96:	01 dd                	add    ebp,ebx
c0011f98:	e8 11 da ff ff       	call   c000f9ae <Phys::allocatePage()>
c0011f9d:	56                   	push   esi
c0011f9e:	53                   	push   ebx
c0011f9f:	50                   	push   eax
c0011fa0:	57                   	push   edi
c0011fa1:	e8 bc fd ff ff       	call   c0011d62 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011fa6:	83 c4 10             	add    esp,0x10
c0011fa9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011fae:	74 03                	je     c0011fb3 <VAS::allocatePages(int, int)+0x151>
c0011fb0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011fb3:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011fb9:	39 dd                	cmp    ebp,ebx
c0011fbb:	75 db                	jne    c0011f98 <VAS::allocatePages(int, int)+0x136>
c0011fbd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011fc2:	0f 84 26 ff ff ff    	je     c0011eee <VAS::allocatePages(int, int)+0x8c>
c0011fc8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011fcc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011fd0:	89 d3                	mov    ebx,edx
c0011fd2:	c1 e0 0c             	shl    eax,0xc
c0011fd5:	c1 eb 0a             	shr    ebx,0xa
c0011fd8:	01 d0                	add    eax,edx
c0011fda:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011fe0:	c1 e8 0a             	shr    eax,0xa
c0011fe3:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011fe9:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011fee:	2d 00 00 40 00       	sub    eax,0x400000
c0011ff3:	39 c3                	cmp    ebx,eax
c0011ff5:	0f 87 f9 fe ff ff    	ja     c0011ef4 <VAS::allocatePages(int, int)+0x92>
c0011ffb:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011ffe:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012004:	39 d8                	cmp    eax,ebx
c0012006:	73 f3                	jae    c0011ffb <VAS::allocatePages(int, int)+0x199>
c0012008:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001200c:	83 c4 1c             	add    esp,0x1c
c001200f:	5b                   	pop    ebx
c0012010:	5e                   	pop    esi
c0012011:	5f                   	pop    edi
c0012012:	5d                   	pop    ebp
c0012013:	c3                   	ret    
c0012014:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0012019:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001201f:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0012026:	0f 84 4d ff ff ff    	je     c0011f79 <VAS::allocatePages(int, int)+0x117>
c001202c:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0012034:	e9 40 ff ff ff       	jmp    c0011f79 <VAS::allocatePages(int, int)+0x117>
c0012039:	90                   	nop

c001203a <VAS::setCPUSpecific(unsigned long)>:
c001203a:	83 ec 0c             	sub    esp,0xc
c001203d:	6a 05                	push   0x5
c001203f:	68 00 00 40 c2       	push   0xc2400000
c0012044:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001204c:	e8 11 fd ff ff       	call   c0011d62 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012051:	83 c4 1c             	add    esp,0x1c
c0012054:	c3                   	ret    
c0012055:	90                   	nop

c0012056 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012056:	55                   	push   ebp
c0012057:	57                   	push   edi
c0012058:	56                   	push   esi
c0012059:	53                   	push   ebx
c001205a:	83 ec 1c             	sub    esp,0x1c
c001205d:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0012062:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012066:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001206c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012070:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012076:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001207a:	83 e0 01             	and    eax,0x1
c001207d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012081:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012085:	85 c0                	test   eax,eax
c0012087:	7e 39                	jle    c00120c2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012089:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001208d:	89 f3                	mov    ebx,esi
c001208f:	c1 e0 0c             	shl    eax,0xc
c0012092:	01 f0                	add    eax,esi
c0012094:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012098:	55                   	push   ebp
c0012099:	53                   	push   ebx
c001209a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001209e:	29 f0                	sub    eax,esi
c00120a0:	01 d8                	add    eax,ebx
c00120a2:	50                   	push   eax
c00120a3:	57                   	push   edi
c00120a4:	e8 b9 fc ff ff       	call   c0011d62 <VAS::mapPage(unsigned long, unsigned long, int)>
c00120a9:	83 c4 10             	add    esp,0x10
c00120ac:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00120b1:	74 03                	je     c00120b6 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c00120b3:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00120b6:	81 c3 00 10 00 00    	add    ebx,0x1000
c00120bc:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c00120c0:	75 d6                	jne    c0012098 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c00120c2:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00120c7:	75 10                	jne    c00120d9 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c00120c9:	0f 20 d8             	mov    eax,cr3
c00120cc:	0f 22 d8             	mov    cr3,eax
c00120cf:	83 c4 1c             	add    esp,0x1c
c00120d2:	89 f0                	mov    eax,esi
c00120d4:	5b                   	pop    ebx
c00120d5:	5e                   	pop    esi
c00120d6:	5f                   	pop    edi
c00120d7:	5d                   	pop    ebp
c00120d8:	c3                   	ret    
c00120d9:	89 f3                	mov    ebx,esi
c00120db:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00120df:	c1 eb 0a             	shr    ebx,0xa
c00120e2:	c1 e0 0c             	shl    eax,0xc
c00120e5:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00120eb:	01 f0                	add    eax,esi
c00120ed:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00120f3:	c1 e8 0a             	shr    eax,0xa
c00120f6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120fb:	2d 00 00 40 00       	sub    eax,0x400000
c0012100:	39 c3                	cmp    ebx,eax
c0012102:	77 cb                	ja     c00120cf <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0012104:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012107:	81 c3 00 10 00 00    	add    ebx,0x1000
c001210d:	39 d8                	cmp    eax,ebx
c001210f:	73 f3                	jae    c0012104 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0012111:	83 c4 1c             	add    esp,0x1c
c0012114:	89 f0                	mov    eax,esi
c0012116:	5b                   	pop    ebx
c0012117:	5e                   	pop    esi
c0012118:	5f                   	pop    edi
c0012119:	5d                   	pop    ebp
c001211a:	c3                   	ret    
c001211b:	90                   	nop

c001211c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c001211c:	55                   	push   ebp
c001211d:	57                   	push   edi
c001211e:	56                   	push   esi
c001211f:	53                   	push   ebx
c0012120:	83 ec 1c             	sub    esp,0x1c
c0012123:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012127:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001212b:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c001212f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012133:	a9 ff 0f 00 00       	test   eax,0xfff
c0012138:	75 4a                	jne    c0012184 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c001213a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001213e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012141:	c1 eb 16             	shr    ebx,0x16
c0012144:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c001214b:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c001214f:	74 4d                	je     c001219e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0012151:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012155:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012159:	c1 e8 0a             	shr    eax,0xa
c001215c:	80 fa 01             	cmp    dl,0x1
c001215f:	19 d2                	sbb    edx,edx
c0012161:	c1 e3 0c             	shl    ebx,0xc
c0012164:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012168:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c001216e:	25 fc 0f 00 00       	and    eax,0xffc
c0012173:	01 d8                	add    eax,ebx
c0012175:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c001217c:	83 c4 1c             	add    esp,0x1c
c001217f:	5b                   	pop    ebx
c0012180:	5e                   	pop    esi
c0012181:	5f                   	pop    edi
c0012182:	5d                   	pop    ebp
c0012183:	c3                   	ret    
c0012184:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012188:	83 ec 0c             	sub    esp,0xc
c001218b:	68 cc 8e 02 c0       	push   0xc0028ecc
c0012190:	e8 0c 76 00 00       	call   c00197a1 <Krnl::panic(char const*)>
c0012195:	83 c4 10             	add    esp,0x10
c0012198:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001219c:	eb 9c                	jmp    c001213a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c001219e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00121a2:	e8 07 d8 ff ff       	call   c000f9ae <Phys::allocatePage()>
c00121a7:	89 c5                	mov    ebp,eax
c00121a9:	e8 79 f6 ff ff       	call   c0011827 <Virt::getAKernelVAS()>
c00121ae:	83 ec 0c             	sub    esp,0xc
c00121b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00121b5:	6a 01                	push   0x1
c00121b7:	e8 db f4 ff ff       	call   c0011697 <Virt::allocateKernelVirtualPages(int)>
c00121bc:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00121c3:	6a 01                	push   0x1
c00121c5:	50                   	push   eax
c00121c6:	55                   	push   ebp
c00121c7:	81 cd 07 04 00 00    	or     ebp,0x407
c00121cd:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00121d1:	51                   	push   ecx
c00121d2:	e8 7f fe ff ff       	call   c0012056 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00121d7:	83 c4 1c             	add    esp,0x1c
c00121da:	68 00 10 00 00       	push   0x1000
c00121df:	6a 00                	push   0x0
c00121e1:	50                   	push   eax
c00121e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00121e6:	e8 a0 e4 fe ff       	call   c000068b <memset>
c00121eb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00121ef:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00121f2:	e8 04 f8 ff ff       	call   c00119fb <Virt::freeKernelVirtualPages(unsigned long)>
c00121f7:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00121fa:	83 c4 10             	add    esp,0x10
c00121fd:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0012200:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012204:	e9 48 ff ff ff       	jmp    c0012151 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0012209:	90                   	nop

c001220a <VAS::VAS(bool)>:
c001220a:	53                   	push   ebx
c001220b:	83 ec 28             	sub    esp,0x28
c001220e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012212:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012216:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001221a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012221:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012225:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012229:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c001222c:	e8 7d d7 ff ff       	call   c000f9ae <Phys::allocatePage()>
c0012231:	89 c2                	mov    edx,eax
c0012233:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012237:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001223a:	e8 e8 f5 ff ff       	call   c0011827 <Virt::getAKernelVAS()>
c001223f:	89 c3                	mov    ebx,eax
c0012241:	83 ec 0c             	sub    esp,0xc
c0012244:	6a 01                	push   0x1
c0012246:	e8 4c f4 ff ff       	call   c0011697 <Virt::allocateKernelVirtualPages(int)>
c001224b:	83 c4 10             	add    esp,0x10
c001224e:	89 c2                	mov    edx,eax
c0012250:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012254:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012257:	83 ec 0c             	sub    esp,0xc
c001225a:	6a 03                	push   0x3
c001225c:	6a 01                	push   0x1
c001225e:	52                   	push   edx
c001225f:	50                   	push   eax
c0012260:	53                   	push   ebx
c0012261:	e8 f0 fd ff ff       	call   c0012056 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012266:	83 c4 20             	add    esp,0x20
c0012269:	89 c2                	mov    edx,eax
c001226b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001226f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012272:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001227a:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012282:	7f 1c                	jg     c00122a0 <VAS::VAS(bool)+0x96>
c0012284:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012288:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001228b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001228f:	c1 e2 02             	shl    edx,0x2
c0012292:	01 d0                	add    eax,edx
c0012294:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001229a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001229e:	eb da                	jmp    c001227a <VAS::VAS(bool)+0x70>
c00122a0:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00122a8:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00122b0:	7f 7a                	jg     c001232c <VAS::VAS(bool)+0x122>
c00122b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00122b6:	2d 00 02 00 00       	sub    eax,0x200
c00122bb:	c1 e0 0c             	shl    eax,0xc
c00122be:	83 c8 03             	or     eax,0x3
c00122c1:	89 c2                	mov    edx,eax
c00122c3:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c00122c8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00122ce:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00122d4:	83 e0 10             	and    eax,0x10
c00122d7:	84 c0                	test   al,al
c00122d9:	74 07                	je     c00122e2 <VAS::VAS(bool)+0xd8>
c00122db:	b8 00 01 00 00       	mov    eax,0x100
c00122e0:	eb 05                	jmp    c00122e7 <VAS::VAS(bool)+0xdd>
c00122e2:	b8 00 00 00 00       	mov    eax,0x0
c00122e7:	09 d0                	or     eax,edx
c00122e9:	89 c1                	mov    ecx,eax
c00122eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122ef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00122f2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00122f6:	c1 e2 02             	shl    edx,0x2
c00122f9:	01 d0                	add    eax,edx
c00122fb:	89 ca                	mov    edx,ecx
c00122fd:	89 10                	mov    DWORD PTR [eax],edx
c00122ff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012303:	2d 40 03 00 00       	sub    eax,0x340
c0012308:	83 f8 7f             	cmp    eax,0x7f
c001230b:	77 16                	ja     c0012323 <VAS::VAS(bool)+0x119>
c001230d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012311:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012314:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012318:	c1 e2 02             	shl    edx,0x2
c001231b:	01 d0                	add    eax,edx
c001231d:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012323:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012327:	e9 7c ff ff ff       	jmp    c00122a8 <VAS::VAS(bool)+0x9e>
c001232c:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0012331:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012337:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001233d:	83 e0 10             	and    eax,0x10
c0012340:	84 c0                	test   al,al
c0012342:	74 07                	je     c001234b <VAS::VAS(bool)+0x141>
c0012344:	b8 03 41 00 00       	mov    eax,0x4103
c0012349:	eb 05                	jmp    c0012350 <VAS::VAS(bool)+0x146>
c001234b:	b8 03 40 00 00       	mov    eax,0x4003
c0012350:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012354:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012357:	81 c2 20 0c 00 00    	add    edx,0xc20
c001235d:	89 02                	mov    DWORD PTR [edx],eax
c001235f:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0012364:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001236a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012370:	83 ec 08             	sub    esp,0x8
c0012373:	50                   	push   eax
c0012374:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012378:	e8 bd fc ff ff       	call   c001203a <VAS::setCPUSpecific(unsigned long)>
c001237d:	83 c4 10             	add    esp,0x10
c0012380:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012384:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012387:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c001238c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012392:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012398:	83 e0 10             	and    eax,0x10
c001239b:	84 c0                	test   al,al
c001239d:	74 07                	je     c00123a6 <VAS::VAS(bool)+0x19c>
c001239f:	b8 00 01 00 00       	mov    eax,0x100
c00123a4:	eb 05                	jmp    c00123ab <VAS::VAS(bool)+0x1a1>
c00123a6:	b8 00 00 00 00       	mov    eax,0x0
c00123ab:	09 c2                	or     edx,eax
c00123ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123b1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00123b4:	05 fc 0f 00 00       	add    eax,0xffc
c00123b9:	83 ca 03             	or     edx,0x3
c00123bc:	89 10                	mov    DWORD PTR [eax],edx
c00123be:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c00123c3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00123c9:	83 ec 0c             	sub    esp,0xc
c00123cc:	50                   	push   eax
c00123cd:	e8 90 19 00 00       	call   c0013d62 <Device::getName()>
c00123d2:	83 c4 10             	add    esp,0x10
c00123d5:	83 ec 08             	sub    esp,0x8
c00123d8:	68 cb 8f 02 c0       	push   0xc0028fcb
c00123dd:	50                   	push   eax
c00123de:	e8 98 e3 fe ff       	call   c000077b <strcmp>
c00123e3:	83 c4 10             	add    esp,0x10
c00123e6:	85 c0                	test   eax,eax
c00123e8:	0f 94 c0             	sete   al
c00123eb:	84 c0                	test   al,al
c00123ed:	74 70                	je     c001245f <VAS::VAS(bool)+0x255>
c00123ef:	e8 1f a8 00 00       	call   c001cc13 <disableIRQs()>
c00123f4:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c00123f9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00123ff:	05 7c 09 00 00       	add    eax,0x97c
c0012404:	83 ec 0c             	sub    esp,0xc
c0012407:	50                   	push   eax
c0012408:	e8 43 cb ff ff       	call   c000ef50 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001240d:	83 c4 10             	add    esp,0x10
c0012410:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012415:	89 c3                	mov    ebx,eax
c0012417:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c001241c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012422:	05 7c 09 00 00       	add    eax,0x97c
c0012427:	83 ec 0c             	sub    esp,0xc
c001242a:	50                   	push   eax
c001242b:	e8 20 cb ff ff       	call   c000ef50 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012430:	83 c4 10             	add    esp,0x10
c0012433:	83 ec 08             	sub    esp,0x8
c0012436:	50                   	push   eax
c0012437:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001243b:	e8 9c f5 ff ff       	call   c00119dc <VAS::getPageTableEntry(unsigned long)>
c0012440:	83 c4 10             	add    esp,0x10
c0012443:	8b 00                	mov    eax,DWORD PTR [eax]
c0012445:	25 00 f0 ff ff       	and    eax,0xfffff000
c001244a:	6a 11                	push   0x11
c001244c:	53                   	push   ebx
c001244d:	50                   	push   eax
c001244e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012452:	e8 0b f9 ff ff       	call   c0011d62 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012457:	83 c4 10             	add    esp,0x10
c001245a:	e8 c2 a7 00 00       	call   c001cc21 <enableIRQs()>
c001245f:	90                   	nop
c0012460:	83 c4 28             	add    esp,0x28
c0012463:	5b                   	pop    ebx
c0012464:	c3                   	ret    

c0012465 <mapVASFirstTime>:
c0012465:	55                   	push   ebp
c0012466:	57                   	push   edi
c0012467:	56                   	push   esi
c0012468:	53                   	push   ebx
c0012469:	83 ec 0c             	sub    esp,0xc
c001246c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012471:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012474:	4a                   	dec    edx
c0012475:	0f 84 8e 00 00 00    	je     c0012509 <mapVASFirstTime+0xa4>
c001247b:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c001247e:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012481:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012486:	c1 e5 15             	shl    ebp,0x15
c0012489:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c001248e:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012494:	29 eb                	sub    ebx,ebp
c0012496:	29 ee                	sub    esi,ebp
c0012498:	e8 11 d5 ff ff       	call   c000f9ae <Phys::allocatePage()>
c001249d:	83 ec 0c             	sub    esp,0xc
c00124a0:	68 03 04 00 00       	push   0x403
c00124a5:	6a 01                	push   0x1
c00124a7:	53                   	push   ebx
c00124a8:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00124ae:	50                   	push   eax
c00124af:	57                   	push   edi
c00124b0:	e8 a1 fb ff ff       	call   c0012056 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00124b5:	83 c4 20             	add    esp,0x20
c00124b8:	39 f3                	cmp    ebx,esi
c00124ba:	75 dc                	jne    c0012498 <mapVASFirstTime+0x33>
c00124bc:	be 00 f0 ff 01       	mov    esi,0x1fff000
c00124c1:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c00124c6:	29 ee                	sub    esi,ebp
c00124c8:	29 e8                	sub    eax,ebp
c00124ca:	89 c5                	mov    ebp,eax
c00124cc:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c00124d0:	19 db                	sbb    ebx,ebx
c00124d2:	e8 d7 d4 ff ff       	call   c000f9ae <Phys::allocatePage()>
c00124d7:	83 e3 04             	and    ebx,0x4
c00124da:	83 ec 0c             	sub    esp,0xc
c00124dd:	81 c3 03 04 00 00    	add    ebx,0x403
c00124e3:	53                   	push   ebx
c00124e4:	6a 01                	push   0x1
c00124e6:	56                   	push   esi
c00124e7:	81 ee 00 10 00 00    	sub    esi,0x1000
c00124ed:	50                   	push   eax
c00124ee:	57                   	push   edi
c00124ef:	e8 62 fb ff ff       	call   c0012056 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00124f4:	83 c4 20             	add    esp,0x20
c00124f7:	39 f5                	cmp    ebp,esi
c00124f9:	75 d1                	jne    c00124cc <mapVASFirstTime+0x67>
c00124fb:	0f 20 d8             	mov    eax,cr3
c00124fe:	0f 22 d8             	mov    cr3,eax
c0012501:	83 c4 0c             	add    esp,0xc
c0012504:	5b                   	pop    ebx
c0012505:	5e                   	pop    esi
c0012506:	5f                   	pop    edi
c0012507:	5d                   	pop    ebp
c0012508:	c3                   	ret    
c0012509:	83 ec 0c             	sub    esp,0xc
c001250c:	68 d9 8f 02 c0       	push   0xc0028fd9
c0012511:	e8 71 01 00 00       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0012516:	83 c4 10             	add    esp,0x10
c0012519:	83 c4 0c             	add    esp,0xc
c001251c:	5b                   	pop    ebx
c001251d:	5e                   	pop    esi
c001251e:	5f                   	pop    edi
c001251f:	5d                   	pop    ebp
c0012520:	c3                   	ret    

c0012521 <__cxa_atexit>:
c0012521:	31 c0                	xor    eax,eax
c0012523:	c3                   	ret    

c0012524 <__cxa_finalize>:
c0012524:	c3                   	ret    

c0012525 <__stack_chk_fail>:
c0012525:	55                   	push   ebp
c0012526:	89 e5                	mov    ebp,esp
c0012528:	83 ec 14             	sub    esp,0x14
c001252b:	68 f2 8f 02 c0       	push   0xc0028ff2
c0012530:	e8 52 01 00 00       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0012535:	58                   	pop    eax
c0012536:	5a                   	pop    edx
c0012537:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001253a:	68 42 90 02 c0       	push   0xc0029042
c001253f:	e8 43 01 00 00       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0012544:	59                   	pop    ecx
c0012545:	58                   	pop    eax
c0012546:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012549:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001254c:	68 42 90 02 c0       	push   0xc0029042
c0012551:	e8 31 01 00 00       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0012556:	5a                   	pop    edx
c0012557:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001255a:	59                   	pop    ecx
c001255b:	8b 00                	mov    eax,DWORD PTR [eax]
c001255d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012560:	68 42 90 02 c0       	push   0xc0029042
c0012565:	e8 1d 01 00 00       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001256a:	5a                   	pop    edx
c001256b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001256e:	59                   	pop    ecx
c001256f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012571:	8b 00                	mov    eax,DWORD PTR [eax]
c0012573:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012576:	68 42 90 02 c0       	push   0xc0029042
c001257b:	e8 07 01 00 00       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0012580:	c7 04 24 4a 90 02 c0 	mov    DWORD PTR [esp],0xc002904a
c0012587:	e8 15 72 00 00       	call   c00197a1 <Krnl::panic(char const*)>
c001258c:	83 c4 10             	add    esp,0x10
c001258f:	c9                   	leave  
c0012590:	c3                   	ret    

c0012591 <__cxa_pure_virtual>:
c0012591:	83 ec 18             	sub    esp,0x18
c0012594:	68 62 90 02 c0       	push   0xc0029062
c0012599:	e8 03 72 00 00       	call   c00197a1 <Krnl::panic(char const*)>
c001259e:	83 c4 1c             	add    esp,0x1c
c00125a1:	c3                   	ret    

c00125a2 <operator new[](unsigned long)>:
c00125a2:	e9 2d cf ff ff       	jmp    c000f4d4 <malloc>

c00125a7 <operator delete(void*, unsigned long)>:
c00125a7:	e9 48 cf ff ff       	jmp    c000f4f4 <rfree>

c00125ac <operator delete[](void*)>:
c00125ac:	e9 43 cf ff ff       	jmp    c000f4f4 <rfree>

c00125b1 <operator delete[](void*, unsigned long)>:
c00125b1:	e9 3e cf ff ff       	jmp    c000f4f4 <rfree>

c00125b6 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c00125b6:	57                   	push   edi
c00125b7:	b9 3f 00 00 00       	mov    ecx,0x3f
c00125bc:	56                   	push   esi
c00125bd:	be 78 90 02 c0       	mov    esi,0xc0029078
c00125c2:	53                   	push   ebx
c00125c3:	83 ec 40             	sub    esp,0x40
c00125c6:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00125ca:	8d 7c 24 01          	lea    edi,[esp+0x1]
c00125ce:	fc                   	cld    
c00125cf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00125d1:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c00125d5:	83 f9 3e             	cmp    ecx,0x3e
c00125d8:	7e 05                	jle    c00125df <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c00125da:	b9 3e 00 00 00       	mov    ecx,0x3e
c00125df:	89 df                	mov    edi,ebx
c00125e1:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00125e5:	eb 02                	jmp    c00125e9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c00125e7:	89 c7                	mov    edi,eax
c00125e9:	31 d2                	xor    edx,edx
c00125eb:	46                   	inc    esi
c00125ec:	89 f8                	mov    eax,edi
c00125ee:	f7 f1                	div    ecx
c00125f0:	39 cf                	cmp    edi,ecx
c00125f2:	73 f3                	jae    c00125e7 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c00125f4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00125f7:	eb 02                	jmp    c00125fb <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c00125f9:	89 c3                	mov    ebx,eax
c00125fb:	31 d2                	xor    edx,edx
c00125fd:	4e                   	dec    esi
c00125fe:	89 d8                	mov    eax,ebx
c0012600:	f7 f1                	div    ecx
c0012602:	39 cb                	cmp    ebx,ecx
c0012604:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012608:	88 16                	mov    BYTE PTR [esi],dl
c001260a:	73 ed                	jae    c00125f9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c001260c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012610:	83 c4 40             	add    esp,0x40
c0012613:	5b                   	pop    ebx
c0012614:	5e                   	pop    esi
c0012615:	5f                   	pop    edi
c0012616:	c3                   	ret    

c0012617 <Dbg::logc(char)>:
c0012617:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001261b:	ba fd 03 00 00       	mov    edx,0x3fd
c0012620:	ec                   	in     al,dx
c0012621:	a8 20                	test   al,0x20
c0012623:	74 fb                	je     c0012620 <Dbg::logc(char)+0x9>
c0012625:	ba f8 03 00 00       	mov    edx,0x3f8
c001262a:	88 c8                	mov    al,cl
c001262c:	ee                   	out    dx,al
c001262d:	c3                   	ret    

c001262e <Dbg::logs(char*)>:
c001262e:	53                   	push   ebx
c001262f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012633:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012636:	84 c0                	test   al,al
c0012638:	74 0f                	je     c0012649 <Dbg::logs(char*)+0x1b>
c001263a:	50                   	push   eax
c001263b:	43                   	inc    ebx
c001263c:	e8 d6 ff ff ff       	call   c0012617 <Dbg::logc(char)>
c0012641:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012644:	5a                   	pop    edx
c0012645:	84 c0                	test   al,al
c0012647:	75 f1                	jne    c001263a <Dbg::logs(char*)+0xc>
c0012649:	5b                   	pop    ebx
c001264a:	c3                   	ret    

c001264b <Dbg::logWriteInt(unsigned int)>:
c001264b:	83 ec 10             	sub    esp,0x10
c001264e:	6a 0a                	push   0xa
c0012650:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012654:	50                   	push   eax
c0012655:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012659:	e8 58 ff ff ff       	call   c00125b6 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001265e:	50                   	push   eax
c001265f:	e8 ca ff ff ff       	call   c001262e <Dbg::logs(char*)>
c0012664:	83 c4 20             	add    esp,0x20
c0012667:	c3                   	ret    

c0012668 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012668:	83 ec 10             	sub    esp,0x10
c001266b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001266f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012673:	50                   	push   eax
c0012674:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012678:	e8 39 ff ff ff       	call   c00125b6 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001267d:	50                   	push   eax
c001267e:	e8 ab ff ff ff       	call   c001262e <Dbg::logs(char*)>
c0012683:	83 c4 20             	add    esp,0x20
c0012686:	c3                   	ret    

c0012687 <Dbg::kprintf(char const*, ...)>:
c0012687:	55                   	push   ebp
c0012688:	57                   	push   edi
c0012689:	56                   	push   esi
c001268a:	53                   	push   ebx
c001268b:	83 ec 0c             	sub    esp,0xc
c001268e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012692:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012696:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001269a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001269d:	84 c0                	test   al,al
c001269f:	74 4a                	je     c00126eb <Dbg::kprintf(char const*, ...)+0x64>
c00126a1:	31 db                	xor    ebx,ebx
c00126a3:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00126a6:	3c 25                	cmp    al,0x25
c00126a8:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c00126ab:	0f 85 e4 00 00 00    	jne    c0012795 <Dbg::kprintf(char const*, ...)+0x10e>
c00126b1:	83 c3 02             	add    ebx,0x2
c00126b4:	8a 07                	mov    al,BYTE PTR [edi]
c00126b6:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c00126b9:	83 e8 25             	sub    eax,0x25
c00126bc:	3c 53                	cmp    al,0x53
c00126be:	0f 87 ba 00 00 00    	ja     c001277e <Dbg::kprintf(char const*, ...)+0xf7>
c00126c4:	0f b6 c0             	movzx  eax,al
c00126c7:	ff 24 85 b8 90 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6f48]
c00126ce:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00126d2:	89 c8                	mov    eax,ecx
c00126d4:	83 c1 04             	add    ecx,0x4
c00126d7:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00126db:	ff 30                	push   DWORD PTR [eax]
c00126dd:	e8 4c ff ff ff       	call   c001262e <Dbg::logs(char*)>
c00126e2:	58                   	pop    eax
c00126e3:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00126e7:	84 c0                	test   al,al
c00126e9:	75 b8                	jne    c00126a3 <Dbg::kprintf(char const*, ...)+0x1c>
c00126eb:	83 c4 0c             	add    esp,0xc
c00126ee:	5b                   	pop    ebx
c00126ef:	5e                   	pop    esi
c00126f0:	5f                   	pop    edi
c00126f1:	5d                   	pop    ebp
c00126f2:	c3                   	ret    
c00126f3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00126f7:	89 d0                	mov    eax,edx
c00126f9:	83 c2 04             	add    edx,0x4
c00126fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012700:	ff 30                	push   DWORD PTR [eax]
c0012702:	e8 44 ff ff ff       	call   c001264b <Dbg::logWriteInt(unsigned int)>
c0012707:	58                   	pop    eax
c0012708:	eb d9                	jmp    c00126e3 <Dbg::kprintf(char const*, ...)+0x5c>
c001270a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001270e:	89 d0                	mov    eax,edx
c0012710:	83 c2 04             	add    edx,0x4
c0012713:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012716:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001271a:	50                   	push   eax
c001271b:	e8 f7 fe ff ff       	call   c0012617 <Dbg::logc(char)>
c0012720:	58                   	pop    eax
c0012721:	eb c0                	jmp    c00126e3 <Dbg::kprintf(char const*, ...)+0x5c>
c0012723:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012727:	89 c8                	mov    eax,ecx
c0012729:	83 c1 04             	add    ecx,0x4
c001272c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012730:	ff 30                	push   DWORD PTR [eax]
c0012732:	e8 14 ff ff ff       	call   c001264b <Dbg::logWriteInt(unsigned int)>
c0012737:	5f                   	pop    edi
c0012738:	eb a9                	jmp    c00126e3 <Dbg::kprintf(char const*, ...)+0x5c>
c001273a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001273e:	89 c8                	mov    eax,ecx
c0012740:	83 c1 04             	add    ecx,0x4
c0012743:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012747:	6a 10                	push   0x10
c0012749:	ff 30                	push   DWORD PTR [eax]
c001274b:	e8 18 ff ff ff       	call   c0012668 <Dbg::logWriteIntBase(unsigned int, int)>
c0012750:	59                   	pop    ecx
c0012751:	5f                   	pop    edi
c0012752:	eb 8f                	jmp    c00126e3 <Dbg::kprintf(char const*, ...)+0x5c>
c0012754:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012758:	89 d0                	mov    eax,edx
c001275a:	83 c2 08             	add    edx,0x8
c001275d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012761:	6a 10                	push   0x10
c0012763:	ff 30                	push   DWORD PTR [eax]
c0012765:	e8 fe fe ff ff       	call   c0012668 <Dbg::logWriteIntBase(unsigned int, int)>
c001276a:	58                   	pop    eax
c001276b:	5a                   	pop    edx
c001276c:	e9 72 ff ff ff       	jmp    c00126e3 <Dbg::kprintf(char const*, ...)+0x5c>
c0012771:	6a 25                	push   0x25
c0012773:	e8 9f fe ff ff       	call   c0012617 <Dbg::logc(char)>
c0012778:	58                   	pop    eax
c0012779:	e9 65 ff ff ff       	jmp    c00126e3 <Dbg::kprintf(char const*, ...)+0x5c>
c001277e:	6a 25                	push   0x25
c0012780:	e8 92 fe ff ff       	call   c0012617 <Dbg::logc(char)>
c0012785:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012788:	50                   	push   eax
c0012789:	e8 89 fe ff ff       	call   c0012617 <Dbg::logc(char)>
c001278e:	5a                   	pop    edx
c001278f:	59                   	pop    ecx
c0012790:	e9 4e ff ff ff       	jmp    c00126e3 <Dbg::kprintf(char const*, ...)+0x5c>
c0012795:	50                   	push   eax
c0012796:	89 eb                	mov    ebx,ebp
c0012798:	e8 7a fe ff ff       	call   c0012617 <Dbg::logc(char)>
c001279d:	89 fd                	mov    ebp,edi
c001279f:	58                   	pop    eax
c00127a0:	e9 3e ff ff ff       	jmp    c00126e3 <Dbg::kprintf(char const*, ...)+0x5c>
c00127a5:	90                   	nop

c00127a6 <File::read(unsigned long long, void*, int*)>:
c00127a6:	53                   	push   ebx
c00127a7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00127ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00127af:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00127b6:	3c 19                	cmp    al,0x19
c00127b8:	77 35                	ja     c00127ef <File::read(unsigned long long, void*, int*)+0x49>
c00127ba:	8b 04 85 60 ce 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd31a0]
c00127c1:	85 c0                	test   eax,eax
c00127c3:	74 2a                	je     c00127ef <File::read(unsigned long long, void*, int*)+0x49>
c00127c5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00127cb:	85 c0                	test   eax,eax
c00127cd:	74 20                	je     c00127ef <File::read(unsigned long long, void*, int*)+0x49>
c00127cf:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00127d3:	74 21                	je     c00127f6 <File::read(unsigned long long, void*, int*)+0x50>
c00127d5:	8b 08                	mov    ecx,DWORD PTR [eax]
c00127d7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00127db:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00127e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00127e5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00127e9:	5b                   	pop    ebx
c00127ea:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00127ed:	ff e0                	jmp    eax
c00127ef:	b8 0b 00 00 00       	mov    eax,0xb
c00127f4:	eb 05                	jmp    c00127fb <File::read(unsigned long long, void*, int*)+0x55>
c00127f6:	b8 05 00 00 00       	mov    eax,0x5
c00127fb:	5b                   	pop    ebx
c00127fc:	c3                   	ret    
c00127fd:	90                   	nop

c00127fe <File::write(unsigned long long, void*, int*)>:
c00127fe:	53                   	push   ebx
c00127ff:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012803:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012807:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001280e:	3c 19                	cmp    al,0x19
c0012810:	77 35                	ja     c0012847 <File::write(unsigned long long, void*, int*)+0x49>
c0012812:	8b 04 85 60 ce 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd31a0]
c0012819:	85 c0                	test   eax,eax
c001281b:	74 2a                	je     c0012847 <File::write(unsigned long long, void*, int*)+0x49>
c001281d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012823:	85 c0                	test   eax,eax
c0012825:	74 20                	je     c0012847 <File::write(unsigned long long, void*, int*)+0x49>
c0012827:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001282b:	74 21                	je     c001284e <File::write(unsigned long long, void*, int*)+0x50>
c001282d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001282f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012833:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012839:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001283d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012841:	5b                   	pop    ebx
c0012842:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012845:	ff e0                	jmp    eax
c0012847:	b8 0b 00 00 00       	mov    eax,0xb
c001284c:	eb 05                	jmp    c0012853 <File::write(unsigned long long, void*, int*)+0x55>
c001284e:	b8 05 00 00 00       	mov    eax,0x5
c0012853:	5b                   	pop    ebx
c0012854:	c3                   	ret    
c0012855:	90                   	nop

c0012856 <Directory::read(unsigned long long, void*, int*)>:
c0012856:	53                   	push   ebx
c0012857:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001285b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001285f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012866:	3c 19                	cmp    al,0x19
c0012868:	77 35                	ja     c001289f <Directory::read(unsigned long long, void*, int*)+0x49>
c001286a:	8b 04 85 60 ce 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd31a0]
c0012871:	85 c0                	test   eax,eax
c0012873:	74 2a                	je     c001289f <Directory::read(unsigned long long, void*, int*)+0x49>
c0012875:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001287b:	85 c0                	test   eax,eax
c001287d:	74 20                	je     c001289f <Directory::read(unsigned long long, void*, int*)+0x49>
c001287f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012883:	74 21                	je     c00128a6 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012885:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012887:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001288b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012891:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012895:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012899:	5b                   	pop    ebx
c001289a:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c001289d:	ff e0                	jmp    eax
c001289f:	b8 0b 00 00 00       	mov    eax,0xb
c00128a4:	eb 05                	jmp    c00128ab <Directory::read(unsigned long long, void*, int*)+0x55>
c00128a6:	b8 05 00 00 00       	mov    eax,0x5
c00128ab:	5b                   	pop    ebx
c00128ac:	c3                   	ret    
c00128ad:	90                   	nop

c00128ae <Directory::write(unsigned long long, void*, int*)>:
c00128ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128b2:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00128b9:	b8 0b 00 00 00       	mov    eax,0xb
c00128be:	80 fa 19             	cmp    dl,0x19
c00128c1:	77 18                	ja     c00128db <Directory::write(unsigned long long, void*, int*)+0x2d>
c00128c3:	8b 14 95 60 ce 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd31a0]
c00128ca:	85 d2                	test   edx,edx
c00128cc:	74 0d                	je     c00128db <Directory::write(unsigned long long, void*, int*)+0x2d>
c00128ce:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c00128d5:	19 c0                	sbb    eax,eax
c00128d7:	83 e0 0a             	and    eax,0xa
c00128da:	40                   	inc    eax
c00128db:	c3                   	ret    

c00128dc <File::isAtty()>:
c00128dc:	31 c0                	xor    eax,eax
c00128de:	c3                   	ret    
c00128df:	90                   	nop

c00128e0 <Directory::isAtty()>:
c00128e0:	31 c0                	xor    eax,eax
c00128e2:	c3                   	ret    
c00128e3:	90                   	nop

c00128e4 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00128e4:	b8 0a 00 00 00       	mov    eax,0xa
c00128e9:	c3                   	ret    

c00128ea <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00128ea:	b8 0a 00 00 00       	mov    eax,0xa
c00128ef:	c3                   	ret    

c00128f0 <File::~File()>:
c00128f0:	83 ec 0c             	sub    esp,0xc
c00128f3:	ba 74 92 02 c0       	mov    edx,0xc0029274
c00128f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128fc:	89 10                	mov    DWORD PTR [eax],edx
c00128fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012902:	83 ec 0c             	sub    esp,0xc
c0012905:	50                   	push   eax
c0012906:	e8 2b eb ff ff       	call   c0011436 <UnixFile::~UnixFile()>
c001290b:	83 c4 10             	add    esp,0x10
c001290e:	90                   	nop
c001290f:	83 c4 0c             	add    esp,0xc
c0012912:	c3                   	ret    
c0012913:	90                   	nop

c0012914 <File::~File()>:
c0012914:	83 ec 0c             	sub    esp,0xc
c0012917:	83 ec 0c             	sub    esp,0xc
c001291a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001291e:	e8 cd ff ff ff       	call   c00128f0 <File::~File()>
c0012923:	83 c4 10             	add    esp,0x10
c0012926:	83 ec 08             	sub    esp,0x8
c0012929:	68 14 01 00 00       	push   0x114
c001292e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012932:	e8 70 fc ff ff       	call   c00125a7 <operator delete(void*, unsigned long)>
c0012937:	83 c4 10             	add    esp,0x10
c001293a:	83 c4 0c             	add    esp,0xc
c001293d:	c3                   	ret    

c001293e <Directory::~Directory()>:
c001293e:	83 ec 0c             	sub    esp,0xc
c0012941:	ba 90 92 02 c0       	mov    edx,0xc0029290
c0012946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001294a:	89 10                	mov    DWORD PTR [eax],edx
c001294c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012950:	83 ec 0c             	sub    esp,0xc
c0012953:	50                   	push   eax
c0012954:	e8 dd ea ff ff       	call   c0011436 <UnixFile::~UnixFile()>
c0012959:	83 c4 10             	add    esp,0x10
c001295c:	90                   	nop
c001295d:	83 c4 0c             	add    esp,0xc
c0012960:	c3                   	ret    
c0012961:	90                   	nop

c0012962 <Directory::~Directory()>:
c0012962:	83 ec 0c             	sub    esp,0xc
c0012965:	83 ec 0c             	sub    esp,0xc
c0012968:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001296c:	e8 cd ff ff ff       	call   c001293e <Directory::~Directory()>
c0012971:	83 c4 10             	add    esp,0x10
c0012974:	83 ec 08             	sub    esp,0x8
c0012977:	68 14 01 00 00       	push   0x114
c001297c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012980:	e8 22 fc ff ff       	call   c00125a7 <operator delete(void*, unsigned long)>
c0012985:	83 c4 10             	add    esp,0x10
c0012988:	83 c4 0c             	add    esp,0xc
c001298b:	c3                   	ret    

c001298c <Filesystem::Filesystem()>:
c001298c:	ba 10 92 02 c0       	mov    edx,0xc0029210
c0012991:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012995:	89 10                	mov    DWORD PTR [eax],edx
c0012997:	8b 15 c8 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c9c8
c001299d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129a1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00129a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129a8:	a3 c8 c9 02 c0       	mov    ds:0xc002c9c8,eax
c00129ad:	90                   	nop
c00129ae:	c3                   	ret    
c00129af:	90                   	nop

c00129b0 <Filesystem::~Filesystem()>:
c00129b0:	ba 10 92 02 c0       	mov    edx,0xc0029210
c00129b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129b9:	89 10                	mov    DWORD PTR [eax],edx
c00129bb:	90                   	nop
c00129bc:	c3                   	ret    
c00129bd:	90                   	nop

c00129be <Filesystem::~Filesystem()>:
c00129be:	83 ec 0c             	sub    esp,0xc
c00129c1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00129c5:	e8 e6 ff ff ff       	call   c00129b0 <Filesystem::~Filesystem()>
c00129ca:	83 c4 04             	add    esp,0x4
c00129cd:	83 ec 08             	sub    esp,0x8
c00129d0:	6a 08                	push   0x8
c00129d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129d6:	e8 cc fb ff ff       	call   c00125a7 <operator delete(void*, unsigned long)>
c00129db:	83 c4 10             	add    esp,0x10
c00129de:	83 c4 0c             	add    esp,0xc
c00129e1:	c3                   	ret    

c00129e2 <initVFS()>:
c00129e2:	83 ec 18             	sub    esp,0x18
c00129e5:	6a 08                	push   0x8
c00129e7:	e8 e8 ca ff ff       	call   c000f4d4 <malloc>
c00129ec:	89 04 24             	mov    DWORD PTR [esp],eax
c00129ef:	e8 b0 d3 00 00       	call   c001fda4 <FAT::FAT()>
c00129f4:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00129fb:	e8 d4 ca ff ff       	call   c000f4d4 <malloc>
c0012a00:	89 04 24             	mov    DWORD PTR [esp],eax
c0012a03:	e8 12 e6 00 00       	call   c002101a <ISO9660::ISO9660()>
c0012a08:	83 c4 1c             	add    esp,0x1c
c0012a0b:	c3                   	ret    

c0012a0c <standardiseFiles(char*, char const*, char const*)>:
c0012a0c:	55                   	push   ebp
c0012a0d:	57                   	push   edi
c0012a0e:	56                   	push   esi
c0012a0f:	53                   	push   ebx
c0012a10:	81 ec 10 04 00 00    	sub    esp,0x410
c0012a16:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012a1d:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012a24:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012a2b:	68 00 04 00 00       	push   0x400
c0012a30:	6a 00                	push   0x0
c0012a32:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012a36:	56                   	push   esi
c0012a37:	e8 4f dc fe ff       	call   c000068b <memset>
c0012a3c:	83 c4 10             	add    esp,0x10
c0012a3f:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012a43:	75 0b                	jne    c0012a50 <standardiseFiles(char*, char const*, char const*)+0x44>
c0012a45:	50                   	push   eax
c0012a46:	50                   	push   eax
c0012a47:	57                   	push   edi
c0012a48:	56                   	push   esi
c0012a49:	e8 dc dc fe ff       	call   c000072a <strcpy>
c0012a4e:	eb 41                	jmp    c0012a91 <standardiseFiles(char*, char const*, char const*)+0x85>
c0012a50:	8a 07                	mov    al,BYTE PTR [edi]
c0012a52:	3c 5c                	cmp    al,0x5c
c0012a54:	74 04                	je     c0012a5a <standardiseFiles(char*, char const*, char const*)+0x4e>
c0012a56:	3c 2f                	cmp    al,0x2f
c0012a58:	75 18                	jne    c0012a72 <standardiseFiles(char*, char const*, char const*)+0x66>
c0012a5a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012a5d:	3c 60                	cmp    al,0x60
c0012a5f:	7e 03                	jle    c0012a64 <standardiseFiles(char*, char const*, char const*)+0x58>
c0012a61:	83 e8 20             	sub    eax,0x20
c0012a64:	88 04 24             	mov    BYTE PTR [esp],al
c0012a67:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012a6e:	50                   	push   eax
c0012a6f:	50                   	push   eax
c0012a70:	eb 18                	jmp    c0012a8a <standardiseFiles(char*, char const*, char const*)+0x7e>
c0012a72:	50                   	push   eax
c0012a73:	50                   	push   eax
c0012a74:	55                   	push   ebp
c0012a75:	56                   	push   esi
c0012a76:	e8 af dc fe ff       	call   c000072a <strcpy>
c0012a7b:	5a                   	pop    edx
c0012a7c:	59                   	pop    ecx
c0012a7d:	68 86 a6 02 c0       	push   0xc002a686
c0012a82:	56                   	push   esi
c0012a83:	e8 59 dd fe ff       	call   c00007e1 <strcat>
c0012a88:	5d                   	pop    ebp
c0012a89:	58                   	pop    eax
c0012a8a:	57                   	push   edi
c0012a8b:	56                   	push   esi
c0012a8c:	e8 50 dd fe ff       	call   c00007e1 <strcat>
c0012a91:	83 c4 10             	add    esp,0x10
c0012a94:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012a97:	3c 60                	cmp    al,0x60
c0012a99:	7e 03                	jle    c0012a9e <standardiseFiles(char*, char const*, char const*)+0x92>
c0012a9b:	83 e8 20             	sub    eax,0x20
c0012a9e:	88 04 24             	mov    BYTE PTR [esp],al
c0012aa1:	88 03                	mov    BYTE PTR [ebx],al
c0012aa3:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012aaa:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012ab0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012ab4:	bf 03 00 00 00       	mov    edi,0x3
c0012ab9:	b8 03 00 00 00       	mov    eax,0x3
c0012abe:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012ac1:	84 d2                	test   dl,dl
c0012ac3:	0f 84 91 00 00 00    	je     c0012b5a <standardiseFiles(char*, char const*, char const*)+0x14e>
c0012ac9:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012acc:	80 fa 5c             	cmp    dl,0x5c
c0012acf:	74 05                	je     c0012ad6 <standardiseFiles(char*, char const*, char const*)+0xca>
c0012ad1:	80 fa 2f             	cmp    dl,0x2f
c0012ad4:	75 12                	jne    c0012ae8 <standardiseFiles(char*, char const*, char const*)+0xdc>
c0012ad6:	89 c5                	mov    ebp,eax
c0012ad8:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012add:	74 09                	je     c0012ae8 <standardiseFiles(char*, char const*, char const*)+0xdc>
c0012adf:	40                   	inc    eax
c0012ae0:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012ae4:	89 cf                	mov    edi,ecx
c0012ae6:	eb d6                	jmp    c0012abe <standardiseFiles(char*, char const*, char const*)+0xb2>
c0012ae8:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012aed:	75 5b                	jne    c0012b4a <standardiseFiles(char*, char const*, char const*)+0x13e>
c0012aef:	80 fa 2e             	cmp    dl,0x2e
c0012af2:	75 56                	jne    c0012b4a <standardiseFiles(char*, char const*, char const*)+0x13e>
c0012af4:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012af8:	74 19                	je     c0012b13 <standardiseFiles(char*, char const*, char const*)+0x107>
c0012afa:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012aff:	74 53                	je     c0012b54 <standardiseFiles(char*, char const*, char const*)+0x148>
c0012b01:	89 f9                	mov    ecx,edi
c0012b03:	41                   	inc    ecx
c0012b04:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012b07:	80 fa 2f             	cmp    dl,0x2f
c0012b0a:	74 f7                	je     c0012b03 <standardiseFiles(char*, char const*, char const*)+0xf7>
c0012b0c:	80 fa 5c             	cmp    dl,0x5c
c0012b0f:	74 f2                	je     c0012b03 <standardiseFiles(char*, char const*, char const*)+0xf7>
c0012b11:	eb d1                	jmp    c0012ae4 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b13:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012b18:	74 3a                	je     c0012b54 <standardiseFiles(char*, char const*, char const*)+0x148>
c0012b1a:	83 f8 03             	cmp    eax,0x3
c0012b1d:	74 c5                	je     c0012ae4 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b1f:	41                   	inc    ecx
c0012b20:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012b23:	80 fa 2f             	cmp    dl,0x2f
c0012b26:	74 f7                	je     c0012b1f <standardiseFiles(char*, char const*, char const*)+0x113>
c0012b28:	80 fa 5c             	cmp    dl,0x5c
c0012b2b:	74 f2                	je     c0012b1f <standardiseFiles(char*, char const*, char const*)+0x113>
c0012b2d:	48                   	dec    eax
c0012b2e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012b32:	75 06                	jne    c0012b3a <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012b34:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012b38:	eb f3                	jmp    c0012b2d <standardiseFiles(char*, char const*, char const*)+0x121>
c0012b3a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012b3e:	74 07                	je     c0012b47 <standardiseFiles(char*, char const*, char const*)+0x13b>
c0012b40:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012b44:	48                   	dec    eax
c0012b45:	eb f3                	jmp    c0012b3a <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012b47:	40                   	inc    eax
c0012b48:	eb 9a                	jmp    c0012ae4 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b4a:	80 fa 2f             	cmp    dl,0x2f
c0012b4d:	74 95                	je     c0012ae4 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b4f:	80 fa 5c             	cmp    dl,0x5c
c0012b52:	74 90                	je     c0012ae4 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b54:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012b57:	40                   	inc    eax
c0012b58:	eb 8a                	jmp    c0012ae4 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b5a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012b5e:	83 ec 0c             	sub    esp,0xc
c0012b61:	53                   	push   ebx
c0012b62:	e8 41 db fe ff       	call   c00006a8 <strlen>
c0012b67:	83 c4 10             	add    esp,0x10
c0012b6a:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012b6f:	75 26                	jne    c0012b97 <standardiseFiles(char*, char const*, char const*)+0x18b>
c0012b71:	83 ec 0c             	sub    esp,0xc
c0012b74:	53                   	push   ebx
c0012b75:	e8 2e db fe ff       	call   c00006a8 <strlen>
c0012b7a:	83 c4 10             	add    esp,0x10
c0012b7d:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012b82:	74 26                	je     c0012baa <standardiseFiles(char*, char const*, char const*)+0x19e>
c0012b84:	83 ec 0c             	sub    esp,0xc
c0012b87:	53                   	push   ebx
c0012b88:	e8 1b db fe ff       	call   c00006a8 <strlen>
c0012b8d:	83 c4 10             	add    esp,0x10
c0012b90:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012b95:	eb c7                	jmp    c0012b5e <standardiseFiles(char*, char const*, char const*)+0x152>
c0012b97:	83 ec 0c             	sub    esp,0xc
c0012b9a:	53                   	push   ebx
c0012b9b:	e8 08 db fe ff       	call   c00006a8 <strlen>
c0012ba0:	83 c4 10             	add    esp,0x10
c0012ba3:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012ba8:	74 c7                	je     c0012b71 <standardiseFiles(char*, char const*, char const*)+0x165>
c0012baa:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012bb0:	5b                   	pop    ebx
c0012bb1:	5e                   	pop    esi
c0012bb2:	5f                   	pop    edi
c0012bb3:	5d                   	pop    ebp
c0012bb4:	c3                   	ret    
c0012bb5:	90                   	nop

c0012bb6 <File::File(char const*, Process*)>:
c0012bb6:	83 ec 0c             	sub    esp,0xc
c0012bb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bbd:	83 ec 08             	sub    esp,0x8
c0012bc0:	6a 00                	push   0x0
c0012bc2:	50                   	push   eax
c0012bc3:	e8 8c e6 ff ff       	call   c0011254 <UnixFile::UnixFile(int)>
c0012bc8:	83 c4 10             	add    esp,0x10
c0012bcb:	ba 74 92 02 c0       	mov    edx,0xc0029274
c0012bd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bd4:	89 10                	mov    DWORD PTR [eax],edx
c0012bd6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012bda:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012be0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012be4:	83 c0 0d             	add    eax,0xd
c0012be7:	83 ec 04             	sub    esp,0x4
c0012bea:	52                   	push   edx
c0012beb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bef:	50                   	push   eax
c0012bf0:	e8 17 fe ff ff       	call   c0012a0c <standardiseFiles(char*, char const*, char const*)>
c0012bf5:	83 c4 10             	add    esp,0x10
c0012bf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bfc:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012bff:	8d 50 bf             	lea    edx,[eax-0x41]
c0012c02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c06:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012c0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c10:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012c14:	90                   	nop
c0012c15:	83 c4 0c             	add    esp,0xc
c0012c18:	c3                   	ret    
c0012c19:	90                   	nop

c0012c1a <File::open(FileOpenMode)>:
c0012c1a:	53                   	push   ebx
c0012c1b:	b8 0b 00 00 00       	mov    eax,0xb
c0012c20:	83 ec 08             	sub    esp,0x8
c0012c23:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012c27:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012c2e:	80 fa 19             	cmp    dl,0x19
c0012c31:	77 40                	ja     c0012c73 <File::open(FileOpenMode)+0x59>
c0012c33:	8b 14 95 60 ce 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd31a0]
c0012c3a:	85 d2                	test   edx,edx
c0012c3c:	74 35                	je     c0012c73 <File::open(FileOpenMode)+0x59>
c0012c3e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012c44:	85 d2                	test   edx,edx
c0012c46:	74 2b                	je     c0012c73 <File::open(FileOpenMode)+0x59>
c0012c48:	b8 06 00 00 00       	mov    eax,0x6
c0012c4d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012c51:	75 20                	jne    c0012c73 <File::open(FileOpenMode)+0x59>
c0012c53:	8b 02                	mov    eax,DWORD PTR [edx]
c0012c55:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012c5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012c5f:	51                   	push   ecx
c0012c60:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012c63:	51                   	push   ecx
c0012c64:	52                   	push   edx
c0012c65:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012c68:	83 c4 10             	add    esp,0x10
c0012c6b:	85 c0                	test   eax,eax
c0012c6d:	75 04                	jne    c0012c73 <File::open(FileOpenMode)+0x59>
c0012c6f:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012c73:	83 c4 08             	add    esp,0x8
c0012c76:	5b                   	pop    ebx
c0012c77:	c3                   	ret    

c0012c78 <File::close()>:
c0012c78:	53                   	push   ebx
c0012c79:	b8 0b 00 00 00       	mov    eax,0xb
c0012c7e:	83 ec 08             	sub    esp,0x8
c0012c81:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012c85:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012c8c:	80 fa 19             	cmp    dl,0x19
c0012c8f:	77 41                	ja     c0012cd2 <File::close()+0x5a>
c0012c91:	8b 1c 95 60 ce 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd31a0]
c0012c98:	85 db                	test   ebx,ebx
c0012c9a:	74 36                	je     c0012cd2 <File::close()+0x5a>
c0012c9c:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012ca3:	74 2d                	je     c0012cd2 <File::close()+0x5a>
c0012ca5:	b8 05 00 00 00       	mov    eax,0x5
c0012caa:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012cae:	74 22                	je     c0012cd2 <File::close()+0x5a>
c0012cb0:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012cb4:	8b 04 95 60 ce 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd31a0]
c0012cbb:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012cc1:	53                   	push   ebx
c0012cc2:	53                   	push   ebx
c0012cc3:	8b 10                	mov    edx,DWORD PTR [eax]
c0012cc5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012ccb:	50                   	push   eax
c0012ccc:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012ccf:	83 c4 10             	add    esp,0x10
c0012cd2:	83 c4 08             	add    esp,0x8
c0012cd5:	5b                   	pop    ebx
c0012cd6:	c3                   	ret    
c0012cd7:	90                   	nop

c0012cd8 <File::seek(unsigned long long)>:
c0012cd8:	56                   	push   esi
c0012cd9:	53                   	push   ebx
c0012cda:	b8 0b 00 00 00       	mov    eax,0xb
c0012cdf:	51                   	push   ecx
c0012ce0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012ce4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012ce8:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012cef:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012cf3:	80 fa 19             	cmp    dl,0x19
c0012cf6:	77 31                	ja     c0012d29 <File::seek(unsigned long long)+0x51>
c0012cf8:	8b 14 95 60 ce 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd31a0]
c0012cff:	85 d2                	test   edx,edx
c0012d01:	74 26                	je     c0012d29 <File::seek(unsigned long long)+0x51>
c0012d03:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012d09:	85 d2                	test   edx,edx
c0012d0b:	74 1c                	je     c0012d29 <File::seek(unsigned long long)+0x51>
c0012d0d:	b8 05 00 00 00       	mov    eax,0x5
c0012d12:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012d16:	74 11                	je     c0012d29 <File::seek(unsigned long long)+0x51>
c0012d18:	8b 02                	mov    eax,DWORD PTR [edx]
c0012d1a:	53                   	push   ebx
c0012d1b:	51                   	push   ecx
c0012d1c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012d22:	52                   	push   edx
c0012d23:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012d26:	83 c4 10             	add    esp,0x10
c0012d29:	5a                   	pop    edx
c0012d2a:	5b                   	pop    ebx
c0012d2b:	5e                   	pop    esi
c0012d2c:	c3                   	ret    
c0012d2d:	90                   	nop

c0012d2e <File::tell(unsigned long long*)>:
c0012d2e:	83 ec 0c             	sub    esp,0xc
c0012d31:	b8 0b 00 00 00       	mov    eax,0xb
c0012d36:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012d3a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012d41:	80 fa 19             	cmp    dl,0x19
c0012d44:	77 34                	ja     c0012d7a <File::tell(unsigned long long*)+0x4c>
c0012d46:	8b 14 95 60 ce 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd31a0]
c0012d4d:	85 d2                	test   edx,edx
c0012d4f:	74 29                	je     c0012d7a <File::tell(unsigned long long*)+0x4c>
c0012d51:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012d57:	85 d2                	test   edx,edx
c0012d59:	74 1f                	je     c0012d7a <File::tell(unsigned long long*)+0x4c>
c0012d5b:	b8 05 00 00 00       	mov    eax,0x5
c0012d60:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012d64:	74 14                	je     c0012d7a <File::tell(unsigned long long*)+0x4c>
c0012d66:	50                   	push   eax
c0012d67:	8b 02                	mov    eax,DWORD PTR [edx]
c0012d69:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012d6d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012d73:	52                   	push   edx
c0012d74:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012d77:	83 c4 10             	add    esp,0x10
c0012d7a:	83 c4 0c             	add    esp,0xc
c0012d7d:	c3                   	ret    

c0012d7e <File::rewind()>:
c0012d7e:	83 ec 10             	sub    esp,0x10
c0012d81:	6a 00                	push   0x0
c0012d83:	6a 00                	push   0x0
c0012d85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d89:	e8 4a ff ff ff       	call   c0012cd8 <File::seek(unsigned long long)>
c0012d8e:	83 c4 1c             	add    esp,0x1c
c0012d91:	c3                   	ret    

c0012d92 <File::unlink()>:
c0012d92:	83 ec 0c             	sub    esp,0xc
c0012d95:	b8 0b 00 00 00       	mov    eax,0xb
c0012d9a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012d9e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012da5:	80 f9 19             	cmp    cl,0x19
c0012da8:	77 2f                	ja     c0012dd9 <File::unlink()+0x47>
c0012daa:	8b 0c 8d 60 ce 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd31a0]
c0012db1:	85 c9                	test   ecx,ecx
c0012db3:	74 24                	je     c0012dd9 <File::unlink()+0x47>
c0012db5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012dbb:	85 c9                	test   ecx,ecx
c0012dbd:	74 1a                	je     c0012dd9 <File::unlink()+0x47>
c0012dbf:	b8 06 00 00 00       	mov    eax,0x6
c0012dc4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012dc8:	75 0f                	jne    c0012dd9 <File::unlink()+0x47>
c0012dca:	83 c2 0d             	add    edx,0xd
c0012dcd:	50                   	push   eax
c0012dce:	50                   	push   eax
c0012dcf:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012dd1:	52                   	push   edx
c0012dd2:	51                   	push   ecx
c0012dd3:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012dd6:	83 c4 10             	add    esp,0x10
c0012dd9:	83 c4 0c             	add    esp,0xc
c0012ddc:	c3                   	ret    
c0012ddd:	90                   	nop

c0012dde <File::rename(char const*)>:
c0012dde:	83 ec 0c             	sub    esp,0xc
c0012de1:	b8 0b 00 00 00       	mov    eax,0xb
c0012de6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012dea:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012df1:	80 f9 19             	cmp    cl,0x19
c0012df4:	77 32                	ja     c0012e28 <File::rename(char const*)+0x4a>
c0012df6:	8b 0c 8d 60 ce 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd31a0]
c0012dfd:	85 c9                	test   ecx,ecx
c0012dff:	74 27                	je     c0012e28 <File::rename(char const*)+0x4a>
c0012e01:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e07:	85 c9                	test   ecx,ecx
c0012e09:	74 1d                	je     c0012e28 <File::rename(char const*)+0x4a>
c0012e0b:	b8 06 00 00 00       	mov    eax,0x6
c0012e10:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012e14:	75 12                	jne    c0012e28 <File::rename(char const*)+0x4a>
c0012e16:	83 c2 0d             	add    edx,0xd
c0012e19:	50                   	push   eax
c0012e1a:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e1c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e20:	52                   	push   edx
c0012e21:	51                   	push   ecx
c0012e22:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012e25:	83 c4 10             	add    esp,0x10
c0012e28:	83 c4 0c             	add    esp,0xc
c0012e2b:	c3                   	ret    

c0012e2c <File::chfatattr(unsigned char, unsigned char)>:
c0012e2c:	57                   	push   edi
c0012e2d:	b8 0b 00 00 00       	mov    eax,0xb
c0012e32:	56                   	push   esi
c0012e33:	53                   	push   ebx
c0012e34:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e38:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012e3c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e43:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012e47:	80 f9 19             	cmp    cl,0x19
c0012e4a:	77 37                	ja     c0012e83 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012e4c:	8b 0c 8d 60 ce 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd31a0]
c0012e53:	85 c9                	test   ecx,ecx
c0012e55:	74 2c                	je     c0012e83 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012e57:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e5d:	85 c9                	test   ecx,ecx
c0012e5f:	74 22                	je     c0012e83 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012e61:	b8 06 00 00 00       	mov    eax,0x6
c0012e66:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012e6a:	75 17                	jne    c0012e83 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012e6c:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012e6e:	89 f0                	mov    eax,esi
c0012e70:	83 c2 0d             	add    edx,0xd
c0012e73:	0f b6 f0             	movzx  esi,al
c0012e76:	0f b6 db             	movzx  ebx,bl
c0012e79:	56                   	push   esi
c0012e7a:	53                   	push   ebx
c0012e7b:	52                   	push   edx
c0012e7c:	51                   	push   ecx
c0012e7d:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012e80:	83 c4 10             	add    esp,0x10
c0012e83:	5b                   	pop    ebx
c0012e84:	5e                   	pop    esi
c0012e85:	5f                   	pop    edi
c0012e86:	c3                   	ret    
c0012e87:	90                   	nop

c0012e88 <File::exists()>:
c0012e88:	83 ec 0c             	sub    esp,0xc
c0012e8b:	31 c0                	xor    eax,eax
c0012e8d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e91:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e98:	80 f9 19             	cmp    cl,0x19
c0012e9b:	77 24                	ja     c0012ec1 <File::exists()+0x39>
c0012e9d:	8b 0c 8d 60 ce 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd31a0]
c0012ea4:	85 c9                	test   ecx,ecx
c0012ea6:	74 19                	je     c0012ec1 <File::exists()+0x39>
c0012ea8:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012eae:	85 c9                	test   ecx,ecx
c0012eb0:	74 0f                	je     c0012ec1 <File::exists()+0x39>
c0012eb2:	83 c2 0d             	add    edx,0xd
c0012eb5:	50                   	push   eax
c0012eb6:	50                   	push   eax
c0012eb7:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012eb9:	52                   	push   edx
c0012eba:	51                   	push   ecx
c0012ebb:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012ebe:	83 c4 10             	add    esp,0x10
c0012ec1:	83 c4 0c             	add    esp,0xc
c0012ec4:	c3                   	ret    
c0012ec5:	90                   	nop

c0012ec6 <File::stat(unsigned long long*, bool*)>:
c0012ec6:	56                   	push   esi
c0012ec7:	53                   	push   ebx
c0012ec8:	50                   	push   eax
c0012ec9:	b8 0b 00 00 00       	mov    eax,0xb
c0012ece:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012ed2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012ed6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012edd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012ee1:	80 f9 19             	cmp    cl,0x19
c0012ee4:	77 3d                	ja     c0012f23 <File::stat(unsigned long long*, bool*)+0x5d>
c0012ee6:	8b 0c 8d 60 ce 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd31a0]
c0012eed:	85 c9                	test   ecx,ecx
c0012eef:	74 32                	je     c0012f23 <File::stat(unsigned long long*, bool*)+0x5d>
c0012ef1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ef7:	85 c9                	test   ecx,ecx
c0012ef9:	74 28                	je     c0012f23 <File::stat(unsigned long long*, bool*)+0x5d>
c0012efb:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012efd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f01:	74 13                	je     c0012f16 <File::stat(unsigned long long*, bool*)+0x50>
c0012f03:	83 ec 04             	sub    esp,0x4
c0012f06:	56                   	push   esi
c0012f07:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012f0d:	51                   	push   ecx
c0012f0e:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012f11:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012f14:	eb 0a                	jmp    c0012f20 <File::stat(unsigned long long*, bool*)+0x5a>
c0012f16:	53                   	push   ebx
c0012f17:	83 c2 0d             	add    edx,0xd
c0012f1a:	56                   	push   esi
c0012f1b:	52                   	push   edx
c0012f1c:	51                   	push   ecx
c0012f1d:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012f20:	83 c4 10             	add    esp,0x10
c0012f23:	5a                   	pop    edx
c0012f24:	5b                   	pop    ebx
c0012f25:	5e                   	pop    esi
c0012f26:	c3                   	ret    

c0012f27 <getcwd(Process*, char*, int)>:
c0012f27:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012f2b:	31 c0                	xor    eax,eax
c0012f2d:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012f30:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012f34:	7d 15                	jge    c0012f4b <getcwd(Process*, char*, int)+0x24>
c0012f36:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f3a:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012f41:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012f44:	84 c9                	test   cl,cl
c0012f46:	74 06                	je     c0012f4e <getcwd(Process*, char*, int)+0x27>
c0012f48:	40                   	inc    eax
c0012f49:	eb e2                	jmp    c0012f2d <getcwd(Process*, char*, int)+0x6>
c0012f4b:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012f4e:	31 c0                	xor    eax,eax
c0012f50:	c3                   	ret    

c0012f51 <setcwd(Process*, char*)>:
c0012f51:	55                   	push   ebp
c0012f52:	57                   	push   edi
c0012f53:	56                   	push   esi
c0012f54:	53                   	push   ebx
c0012f55:	81 ec 20 02 00 00    	sub    esp,0x220
c0012f5b:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0012f62:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0012f68:	57                   	push   edi
c0012f69:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012f70:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012f74:	56                   	push   esi
c0012f75:	e8 92 fa ff ff       	call   c0012a0c <standardiseFiles(char*, char const*, char const*)>
c0012f7a:	89 34 24             	mov    DWORD PTR [esp],esi
c0012f7d:	e8 26 d7 fe ff       	call   c00006a8 <strlen>
c0012f82:	83 c4 10             	add    esp,0x10
c0012f85:	83 f8 02             	cmp    eax,0x2
c0012f88:	77 17                	ja     c0012fa1 <setcwd(Process*, char*)+0x50>
c0012f8a:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0012f8f:	83 e8 41             	sub    eax,0x41
c0012f92:	83 f8 19             	cmp    eax,0x19
c0012f95:	76 24                	jbe    c0012fbb <setcwd(Process*, char*)+0x6a>
c0012f97:	b8 03 00 00 00       	mov    eax,0x3
c0012f9c:	e9 e0 00 00 00       	jmp    c0013081 <setcwd(Process*, char*)+0x130>
c0012fa1:	83 ec 0c             	sub    esp,0xc
c0012fa4:	56                   	push   esi
c0012fa5:	e8 fe d6 fe ff       	call   c00006a8 <strlen>
c0012faa:	83 c4 10             	add    esp,0x10
c0012fad:	83 f8 03             	cmp    eax,0x3
c0012fb0:	75 34                	jne    c0012fe6 <setcwd(Process*, char*)+0x95>
c0012fb2:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0012fb7:	75 2d                	jne    c0012fe6 <setcwd(Process*, char*)+0x95>
c0012fb9:	eb cf                	jmp    c0012f8a <setcwd(Process*, char*)+0x39>
c0012fbb:	8b 14 85 60 ce 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd31a0]
c0012fc2:	b8 05 00 00 00       	mov    eax,0x5
c0012fc7:	85 d2                	test   edx,edx
c0012fc9:	0f 84 b2 00 00 00    	je     c0013081 <setcwd(Process*, char*)+0x130>
c0012fcf:	b8 06 00 00 00       	mov    eax,0x6
c0012fd4:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012fdb:	0f 85 92 00 00 00    	jne    c0013073 <setcwd(Process*, char*)+0x122>
c0012fe1:	e9 9b 00 00 00       	jmp    c0013081 <setcwd(Process*, char*)+0x130>
c0012fe6:	83 ec 0c             	sub    esp,0xc
c0012fe9:	68 14 01 00 00       	push   0x114
c0012fee:	e8 e1 c4 ff ff       	call   c000f4d4 <malloc>
c0012ff3:	83 c4 0c             	add    esp,0xc
c0012ff6:	89 c3                	mov    ebx,eax
c0012ff8:	55                   	push   ebp
c0012ff9:	56                   	push   esi
c0012ffa:	50                   	push   eax
c0012ffb:	e8 b6 fb ff ff       	call   c0012bb6 <File::File(char const*, Process*)>
c0013000:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013005:	83 c4 0c             	add    esp,0xc
c0013008:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001300c:	50                   	push   eax
c001300d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013011:	50                   	push   eax
c0013012:	53                   	push   ebx
c0013013:	e8 ae fe ff ff       	call   c0012ec6 <File::stat(unsigned long long*, bool*)>
c0013018:	83 c4 10             	add    esp,0x10
c001301b:	83 f8 02             	cmp    eax,0x2
c001301e:	74 04                	je     c0013024 <setcwd(Process*, char*)+0xd3>
c0013020:	85 c0                	test   eax,eax
c0013022:	74 1c                	je     c0013040 <setcwd(Process*, char*)+0xef>
c0013024:	b8 01 00 00 00       	mov    eax,0x1
c0013029:	85 db                	test   ebx,ebx
c001302b:	74 54                	je     c0013081 <setcwd(Process*, char*)+0x130>
c001302d:	83 ec 0c             	sub    esp,0xc
c0013030:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013032:	53                   	push   ebx
c0013033:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013036:	83 c4 10             	add    esp,0x10
c0013039:	b8 01 00 00 00       	mov    eax,0x1
c001303e:	eb 41                	jmp    c0013081 <setcwd(Process*, char*)+0x130>
c0013040:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013045:	75 1c                	jne    c0013063 <setcwd(Process*, char*)+0x112>
c0013047:	b8 02 00 00 00       	mov    eax,0x2
c001304c:	85 db                	test   ebx,ebx
c001304e:	74 31                	je     c0013081 <setcwd(Process*, char*)+0x130>
c0013050:	83 ec 0c             	sub    esp,0xc
c0013053:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013055:	53                   	push   ebx
c0013056:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013059:	83 c4 10             	add    esp,0x10
c001305c:	b8 02 00 00 00       	mov    eax,0x2
c0013061:	eb 1e                	jmp    c0013081 <setcwd(Process*, char*)+0x130>
c0013063:	85 db                	test   ebx,ebx
c0013065:	74 0c                	je     c0013073 <setcwd(Process*, char*)+0x122>
c0013067:	83 ec 0c             	sub    esp,0xc
c001306a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001306c:	53                   	push   ebx
c001306d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013070:	83 c4 10             	add    esp,0x10
c0013073:	50                   	push   eax
c0013074:	50                   	push   eax
c0013075:	56                   	push   esi
c0013076:	57                   	push   edi
c0013077:	e8 ae d6 fe ff       	call   c000072a <strcpy>
c001307c:	83 c4 10             	add    esp,0x10
c001307f:	31 c0                	xor    eax,eax
c0013081:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013087:	5b                   	pop    ebx
c0013088:	5e                   	pop    esi
c0013089:	5f                   	pop    edi
c001308a:	5d                   	pop    ebp
c001308b:	c3                   	ret    

c001308c <Directory::Directory(char const*, Process*)>:
c001308c:	83 ec 0c             	sub    esp,0xc
c001308f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013093:	83 ec 08             	sub    esp,0x8
c0013096:	6a 00                	push   0x0
c0013098:	50                   	push   eax
c0013099:	e8 b6 e1 ff ff       	call   c0011254 <UnixFile::UnixFile(int)>
c001309e:	83 c4 10             	add    esp,0x10
c00130a1:	ba 90 92 02 c0       	mov    edx,0xc0029290
c00130a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130aa:	89 10                	mov    DWORD PTR [eax],edx
c00130ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00130b0:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00130b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130ba:	83 c0 0d             	add    eax,0xd
c00130bd:	83 ec 04             	sub    esp,0x4
c00130c0:	52                   	push   edx
c00130c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130c5:	50                   	push   eax
c00130c6:	e8 41 f9 ff ff       	call   c0012a0c <standardiseFiles(char*, char const*, char const*)>
c00130cb:	83 c4 10             	add    esp,0x10
c00130ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130d2:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00130d5:	8d 50 bf             	lea    edx,[eax-0x41]
c00130d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130dc:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00130e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130e6:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00130ea:	90                   	nop
c00130eb:	83 c4 0c             	add    esp,0xc
c00130ee:	c3                   	ret    
c00130ef:	90                   	nop

c00130f0 <Directory::open()>:
c00130f0:	53                   	push   ebx
c00130f1:	b8 0b 00 00 00       	mov    eax,0xb
c00130f6:	83 ec 08             	sub    esp,0x8
c00130f9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00130fd:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013104:	80 fa 19             	cmp    dl,0x19
c0013107:	77 3d                	ja     c0013146 <Directory::open()+0x56>
c0013109:	8b 14 95 60 ce 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd31a0]
c0013110:	85 d2                	test   edx,edx
c0013112:	74 32                	je     c0013146 <Directory::open()+0x56>
c0013114:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001311a:	85 d2                	test   edx,edx
c001311c:	74 28                	je     c0013146 <Directory::open()+0x56>
c001311e:	b8 06 00 00 00       	mov    eax,0x6
c0013123:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013127:	75 1d                	jne    c0013146 <Directory::open()+0x56>
c0013129:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001312f:	50                   	push   eax
c0013130:	8b 02                	mov    eax,DWORD PTR [edx]
c0013132:	51                   	push   ecx
c0013133:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013136:	51                   	push   ecx
c0013137:	52                   	push   edx
c0013138:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c001313b:	83 c4 10             	add    esp,0x10
c001313e:	85 c0                	test   eax,eax
c0013140:	75 04                	jne    c0013146 <Directory::open()+0x56>
c0013142:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013146:	83 c4 08             	add    esp,0x8
c0013149:	5b                   	pop    ebx
c001314a:	c3                   	ret    
c001314b:	90                   	nop

c001314c <Directory::close()>:
c001314c:	53                   	push   ebx
c001314d:	b8 0b 00 00 00       	mov    eax,0xb
c0013152:	83 ec 08             	sub    esp,0x8
c0013155:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013159:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013160:	80 fa 19             	cmp    dl,0x19
c0013163:	77 41                	ja     c00131a6 <Directory::close()+0x5a>
c0013165:	8b 1c 95 60 ce 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd31a0]
c001316c:	85 db                	test   ebx,ebx
c001316e:	74 36                	je     c00131a6 <Directory::close()+0x5a>
c0013170:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013177:	74 2d                	je     c00131a6 <Directory::close()+0x5a>
c0013179:	b8 05 00 00 00       	mov    eax,0x5
c001317e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013182:	74 22                	je     c00131a6 <Directory::close()+0x5a>
c0013184:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013188:	8b 04 95 60 ce 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd31a0]
c001318f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013195:	53                   	push   ebx
c0013196:	53                   	push   ebx
c0013197:	8b 10                	mov    edx,DWORD PTR [eax]
c0013199:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001319f:	50                   	push   eax
c00131a0:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00131a3:	83 c4 10             	add    esp,0x10
c00131a6:	83 c4 08             	add    esp,0x8
c00131a9:	5b                   	pop    ebx
c00131aa:	c3                   	ret    
c00131ab:	90                   	nop

c00131ac <Directory::unlink()>:
c00131ac:	83 ec 0c             	sub    esp,0xc
c00131af:	b8 0b 00 00 00       	mov    eax,0xb
c00131b4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00131b8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00131bf:	80 f9 19             	cmp    cl,0x19
c00131c2:	77 2f                	ja     c00131f3 <Directory::unlink()+0x47>
c00131c4:	8b 0c 8d 60 ce 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd31a0]
c00131cb:	85 c9                	test   ecx,ecx
c00131cd:	74 24                	je     c00131f3 <Directory::unlink()+0x47>
c00131cf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00131d5:	85 c9                	test   ecx,ecx
c00131d7:	74 1a                	je     c00131f3 <Directory::unlink()+0x47>
c00131d9:	b8 06 00 00 00       	mov    eax,0x6
c00131de:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00131e2:	75 0f                	jne    c00131f3 <Directory::unlink()+0x47>
c00131e4:	83 c2 0d             	add    edx,0xd
c00131e7:	50                   	push   eax
c00131e8:	50                   	push   eax
c00131e9:	8b 01                	mov    eax,DWORD PTR [ecx]
c00131eb:	52                   	push   edx
c00131ec:	51                   	push   ecx
c00131ed:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00131f0:	83 c4 10             	add    esp,0x10
c00131f3:	83 c4 0c             	add    esp,0xc
c00131f6:	c3                   	ret    
c00131f7:	90                   	nop

c00131f8 <Directory::rename(char const*)>:
c00131f8:	83 ec 0c             	sub    esp,0xc
c00131fb:	b8 0b 00 00 00       	mov    eax,0xb
c0013200:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013204:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001320b:	80 f9 19             	cmp    cl,0x19
c001320e:	77 32                	ja     c0013242 <Directory::rename(char const*)+0x4a>
c0013210:	8b 0c 8d 60 ce 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd31a0]
c0013217:	85 c9                	test   ecx,ecx
c0013219:	74 27                	je     c0013242 <Directory::rename(char const*)+0x4a>
c001321b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013221:	85 c9                	test   ecx,ecx
c0013223:	74 1d                	je     c0013242 <Directory::rename(char const*)+0x4a>
c0013225:	b8 06 00 00 00       	mov    eax,0x6
c001322a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001322e:	75 12                	jne    c0013242 <Directory::rename(char const*)+0x4a>
c0013230:	83 c2 0d             	add    edx,0xd
c0013233:	50                   	push   eax
c0013234:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013236:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001323a:	52                   	push   edx
c001323b:	51                   	push   ecx
c001323c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001323f:	83 c4 10             	add    esp,0x10
c0013242:	83 c4 0c             	add    esp,0xc
c0013245:	c3                   	ret    

c0013246 <Directory::exists()>:
c0013246:	83 ec 0c             	sub    esp,0xc
c0013249:	31 c0                	xor    eax,eax
c001324b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001324f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013256:	80 f9 19             	cmp    cl,0x19
c0013259:	77 24                	ja     c001327f <Directory::exists()+0x39>
c001325b:	8b 0c 8d 60 ce 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd31a0]
c0013262:	85 c9                	test   ecx,ecx
c0013264:	74 19                	je     c001327f <Directory::exists()+0x39>
c0013266:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001326c:	85 c9                	test   ecx,ecx
c001326e:	74 0f                	je     c001327f <Directory::exists()+0x39>
c0013270:	83 c2 0d             	add    edx,0xd
c0013273:	50                   	push   eax
c0013274:	50                   	push   eax
c0013275:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013277:	52                   	push   edx
c0013278:	51                   	push   ecx
c0013279:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001327c:	83 c4 10             	add    esp,0x10
c001327f:	83 c4 0c             	add    esp,0xc
c0013282:	c3                   	ret    
c0013283:	90                   	nop

c0013284 <Directory::read(dirent*)>:
c0013284:	83 ec 1c             	sub    esp,0x1c
c0013287:	b8 0b 00 00 00       	mov    eax,0xb
c001328c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013290:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013297:	80 fa 19             	cmp    dl,0x19
c001329a:	77 30                	ja     c00132cc <Directory::read(dirent*)+0x48>
c001329c:	8b 14 95 60 ce 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd31a0]
c00132a3:	85 d2                	test   edx,edx
c00132a5:	74 25                	je     c00132cc <Directory::read(dirent*)+0x48>
c00132a7:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00132ae:	74 1c                	je     c00132cc <Directory::read(dirent*)+0x48>
c00132b0:	83 ec 0c             	sub    esp,0xc
c00132b3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132b5:	8d 54 24 18          	lea    edx,[esp+0x18]
c00132b9:	52                   	push   edx
c00132ba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00132be:	6a 00                	push   0x0
c00132c0:	68 10 01 00 00       	push   0x110
c00132c5:	51                   	push   ecx
c00132c6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00132c9:	83 c4 20             	add    esp,0x20
c00132cc:	83 c4 1c             	add    esp,0x1c
c00132cf:	c3                   	ret    

c00132d0 <Directory::create()>:
c00132d0:	83 ec 0c             	sub    esp,0xc
c00132d3:	b8 0b 00 00 00       	mov    eax,0xb
c00132d8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00132dc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00132e3:	80 f9 19             	cmp    cl,0x19
c00132e6:	77 2f                	ja     c0013317 <Directory::create()+0x47>
c00132e8:	8b 0c 8d 60 ce 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd31a0]
c00132ef:	85 c9                	test   ecx,ecx
c00132f1:	74 24                	je     c0013317 <Directory::create()+0x47>
c00132f3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00132f9:	85 c9                	test   ecx,ecx
c00132fb:	74 1a                	je     c0013317 <Directory::create()+0x47>
c00132fd:	b8 06 00 00 00       	mov    eax,0x6
c0013302:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013306:	75 0f                	jne    c0013317 <Directory::create()+0x47>
c0013308:	83 c2 0d             	add    edx,0xd
c001330b:	50                   	push   eax
c001330c:	50                   	push   eax
c001330d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001330f:	52                   	push   edx
c0013310:	51                   	push   ecx
c0013311:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013314:	83 c4 10             	add    esp,0x10
c0013317:	83 c4 0c             	add    esp,0xc
c001331a:	c3                   	ret    
c001331b:	90                   	nop

c001331c <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c001331c:	b8 0a 00 00 00       	mov    eax,0xa
c0013321:	c3                   	ret    

c0013322 <Bus::Bus(char const*)>:
c0013322:	83 ec 0c             	sub    esp,0xc
c0013325:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013329:	83 ec 08             	sub    esp,0x8
c001332c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013330:	50                   	push   eax
c0013331:	e8 30 09 00 00       	call   c0013c66 <Device::Device(char const*)>
c0013336:	83 c4 10             	add    esp,0x10
c0013339:	ba ac 92 02 c0       	mov    edx,0xc00292ac
c001333e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013342:	89 10                	mov    DWORD PTR [eax],edx
c0013344:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013348:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013352:	90                   	nop
c0013353:	83 c4 0c             	add    esp,0xc
c0013356:	c3                   	ret    
c0013357:	90                   	nop

c0013358 <Bus::~Bus()>:
c0013358:	83 ec 0c             	sub    esp,0xc
c001335b:	ba ac 92 02 c0       	mov    edx,0xc00292ac
c0013360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013364:	89 10                	mov    DWORD PTR [eax],edx
c0013366:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001336a:	83 ec 0c             	sub    esp,0xc
c001336d:	50                   	push   eax
c001336e:	e8 d5 05 00 00       	call   c0013948 <Device::~Device()>
c0013373:	83 c4 10             	add    esp,0x10
c0013376:	90                   	nop
c0013377:	83 c4 0c             	add    esp,0xc
c001337a:	c3                   	ret    
c001337b:	90                   	nop

c001337c <Bus::~Bus()>:
c001337c:	83 ec 0c             	sub    esp,0xc
c001337f:	83 ec 0c             	sub    esp,0xc
c0013382:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013386:	e8 cd ff ff ff       	call   c0013358 <Bus::~Bus()>
c001338b:	83 c4 10             	add    esp,0x10
c001338e:	83 ec 08             	sub    esp,0x8
c0013391:	68 58 01 00 00       	push   0x158
c0013396:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001339a:	e8 08 f2 ff ff       	call   c00125a7 <operator delete(void*, unsigned long)>
c001339f:	83 c4 10             	add    esp,0x10
c00133a2:	83 c4 0c             	add    esp,0xc
c00133a5:	c3                   	ret    

c00133a6 <Buzzer::Buzzer(char const*)>:
c00133a6:	83 ec 0c             	sub    esp,0xc
c00133a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133ad:	83 ec 08             	sub    esp,0x8
c00133b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133b4:	50                   	push   eax
c00133b5:	e8 ac 08 00 00       	call   c0013c66 <Device::Device(char const*)>
c00133ba:	83 c4 10             	add    esp,0x10
c00133bd:	ba d8 92 02 c0       	mov    edx,0xc00292d8
c00133c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133c6:	89 10                	mov    DWORD PTR [eax],edx
c00133c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133cc:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00133d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133da:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c00133e4:	90                   	nop
c00133e5:	83 c4 0c             	add    esp,0xc
c00133e8:	c3                   	ret    
c00133e9:	90                   	nop

c00133ea <Buzzer::~Buzzer()>:
c00133ea:	83 ec 0c             	sub    esp,0xc
c00133ed:	ba d8 92 02 c0       	mov    edx,0xc00292d8
c00133f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133f6:	89 10                	mov    DWORD PTR [eax],edx
c00133f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133fc:	83 ec 0c             	sub    esp,0xc
c00133ff:	50                   	push   eax
c0013400:	e8 43 05 00 00       	call   c0013948 <Device::~Device()>
c0013405:	83 c4 10             	add    esp,0x10
c0013408:	90                   	nop
c0013409:	83 c4 0c             	add    esp,0xc
c001340c:	c3                   	ret    
c001340d:	90                   	nop

c001340e <Buzzer::~Buzzer()>:
c001340e:	83 ec 0c             	sub    esp,0xc
c0013411:	83 ec 0c             	sub    esp,0xc
c0013414:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013418:	e8 cd ff ff ff       	call   c00133ea <Buzzer::~Buzzer()>
c001341d:	83 c4 10             	add    esp,0x10
c0013420:	83 ec 08             	sub    esp,0x8
c0013423:	68 5c 01 00 00       	push   0x15c
c0013428:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001342c:	e8 76 f1 ff ff       	call   c00125a7 <operator delete(void*, unsigned long)>
c0013431:	83 c4 10             	add    esp,0x10
c0013434:	83 c4 0c             	add    esp,0xc
c0013437:	c3                   	ret    

c0013438 <Buzzer::stop()>:
c0013438:	83 ec 14             	sub    esp,0x14
c001343b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001343f:	8b 10                	mov    edx,DWORD PTR [eax]
c0013441:	6a 00                	push   0x0
c0013443:	50                   	push   eax
c0013444:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013447:	83 c4 1c             	add    esp,0x1c
c001344a:	c3                   	ret    

c001344b <beepThread(void*)>:
c001344b:	53                   	push   ebx
c001344c:	83 ec 08             	sub    esp,0x8
c001344f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013453:	e8 da 97 00 00       	call   c001cc32 <unlockScheduler()>
c0013458:	b8 40 42 0f 00       	mov    eax,0xf4240
c001345d:	52                   	push   edx
c001345e:	52                   	push   edx
c001345f:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013465:	52                   	push   edx
c0013466:	50                   	push   eax
c0013467:	e8 14 9d 00 00       	call   c001d180 <nanoSleep(unsigned long long)>
c001346c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001346f:	e8 c4 ff ff ff       	call   c0013438 <Buzzer::stop()>
c0013474:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c001347c:	83 c4 18             	add    esp,0x18
c001347f:	5b                   	pop    ebx
c0013480:	e9 41 9c 00 00       	jmp    c001d0c6 <blockTask(TaskState)>
c0013485:	90                   	nop

c0013486 <Buzzer::beep(int, int, bool)>:
c0013486:	57                   	push   edi
c0013487:	56                   	push   esi
c0013488:	53                   	push   ebx
c0013489:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001348d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013491:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013495:	52                   	push   edx
c0013496:	52                   	push   edx
c0013497:	8b 06                	mov    eax,DWORD PTR [esi]
c0013499:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001349d:	56                   	push   esi
c001349e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00134a1:	83 c4 10             	add    esp,0x10
c00134a4:	89 f8                	mov    eax,edi
c00134a6:	84 c0                	test   al,al
c00134a8:	74 1f                	je     c00134c9 <Buzzer::beep(int, int, bool)+0x43>
c00134aa:	50                   	push   eax
c00134ab:	50                   	push   eax
c00134ac:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c00134b2:	99                   	cdq    
c00134b3:	52                   	push   edx
c00134b4:	50                   	push   eax
c00134b5:	e8 c6 9c 00 00       	call   c001d180 <nanoSleep(unsigned long long)>
c00134ba:	83 c4 10             	add    esp,0x10
c00134bd:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00134c1:	5b                   	pop    ebx
c00134c2:	5e                   	pop    esi
c00134c3:	5f                   	pop    edi
c00134c4:	e9 6f ff ff ff       	jmp    c0013438 <Buzzer::stop()>
c00134c9:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c00134cf:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00134d4:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c00134dc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00134e0:	c7 44 24 14 4b 34 01 c0 	mov    DWORD PTR [esp+0x14],0xc001344b
c00134e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00134ec:	5b                   	pop    ebx
c00134ed:	5e                   	pop    esi
c00134ee:	5f                   	pop    edi
c00134ef:	e9 6e 98 00 00       	jmp    c001cd62 <Process::createThread(void (*)(void*), void*, int)>

c00134f4 <loadClockSettings()>:
c00134f4:	c7 05 d4 c9 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002c9d4,0xa
c00134fe:	c6 05 d1 c9 02 c0 00 	mov    BYTE PTR ds:0xc002c9d1,0x0
c0013505:	c6 05 d0 c9 02 c0 01 	mov    BYTE PTR ds:0xc002c9d0,0x1
c001350c:	c3                   	ret    
c001350d:	90                   	nop

c001350e <Clock::Clock(char const*)>:
c001350e:	83 ec 0c             	sub    esp,0xc
c0013511:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013515:	83 ec 08             	sub    esp,0x8
c0013518:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001351c:	50                   	push   eax
c001351d:	e8 44 07 00 00       	call   c0013c66 <Device::Device(char const*)>
c0013522:	83 c4 10             	add    esp,0x10
c0013525:	ba 08 93 02 c0       	mov    edx,0xc0029308
c001352a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001352e:	89 10                	mov    DWORD PTR [eax],edx
c0013530:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013534:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c001353e:	90                   	nop
c001353f:	83 c4 0c             	add    esp,0xc
c0013542:	c3                   	ret    
c0013543:	90                   	nop

c0013544 <Clock::~Clock()>:
c0013544:	83 ec 0c             	sub    esp,0xc
c0013547:	ba 08 93 02 c0       	mov    edx,0xc0029308
c001354c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013550:	89 10                	mov    DWORD PTR [eax],edx
c0013552:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013556:	83 ec 0c             	sub    esp,0xc
c0013559:	50                   	push   eax
c001355a:	e8 e9 03 00 00       	call   c0013948 <Device::~Device()>
c001355f:	83 c4 10             	add    esp,0x10
c0013562:	90                   	nop
c0013563:	83 c4 0c             	add    esp,0xc
c0013566:	c3                   	ret    
c0013567:	90                   	nop

c0013568 <Clock::~Clock()>:
c0013568:	83 ec 0c             	sub    esp,0xc
c001356b:	83 ec 0c             	sub    esp,0xc
c001356e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013572:	e8 cd ff ff ff       	call   c0013544 <Clock::~Clock()>
c0013577:	83 c4 10             	add    esp,0x10
c001357a:	83 ec 08             	sub    esp,0x8
c001357d:	68 58 01 00 00       	push   0x158
c0013582:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013586:	e8 1c f0 ff ff       	call   c00125a7 <operator delete(void*, unsigned long)>
c001358b:	83 c4 10             	add    esp,0x10
c001358e:	83 c4 0c             	add    esp,0xc
c0013591:	c3                   	ret    

c0013592 <Clock::timeInSecondsLocal()>:
c0013592:	53                   	push   ebx
c0013593:	83 ec 14             	sub    esp,0x14
c0013596:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001359a:	8b 10                	mov    edx,DWORD PTR [eax]
c001359c:	50                   	push   eax
c001359d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00135a0:	0f b6 0d d0 c9 02 c0 	movzx  ecx,BYTE PTR ds:0xc002c9d0
c00135a7:	03 0d d4 c9 02 c0    	add    ecx,DWORD PTR ds:0xc002c9d4
c00135ad:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00135b3:	89 cb                	mov    ebx,ecx
c00135b5:	c1 fb 1f             	sar    ebx,0x1f
c00135b8:	01 c8                	add    eax,ecx
c00135ba:	11 da                	adc    edx,ebx
c00135bc:	83 c4 10             	add    esp,0x10
c00135bf:	31 c9                	xor    ecx,ecx
c00135c1:	80 3d d1 c9 02 c0 00 	cmp    BYTE PTR ds:0xc002c9d1,0x0
c00135c8:	74 05                	je     c00135cf <Clock::timeInSecondsLocal()+0x3d>
c00135ca:	b9 08 07 00 00       	mov    ecx,0x708
c00135cf:	31 db                	xor    ebx,ebx
c00135d1:	01 c8                	add    eax,ecx
c00135d3:	11 da                	adc    edx,ebx
c00135d5:	83 c4 08             	add    esp,0x8
c00135d8:	5b                   	pop    ebx
c00135d9:	c3                   	ret    

c00135da <Clock::setTimeInSecondsLocal(unsigned long long)>:
c00135da:	57                   	push   edi
c00135db:	56                   	push   esi
c00135dc:	53                   	push   ebx
c00135dd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00135e1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00135e5:	8b 01                	mov    eax,DWORD PTR [ecx]
c00135e7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00135eb:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c00135ee:	0f b6 05 d0 c9 02 c0 	movzx  eax,BYTE PTR ds:0xc002c9d0
c00135f5:	03 05 d4 c9 02 c0    	add    eax,DWORD PTR ds:0xc002c9d4
c00135fb:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013601:	99                   	cdq    
c0013602:	29 c6                	sub    esi,eax
c0013604:	19 d7                	sbb    edi,edx
c0013606:	89 f0                	mov    eax,esi
c0013608:	89 fa                	mov    edx,edi
c001360a:	31 f6                	xor    esi,esi
c001360c:	80 3d d1 c9 02 c0 00 	cmp    BYTE PTR ds:0xc002c9d1,0x0
c0013613:	74 05                	je     c001361a <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013615:	be 08 07 00 00       	mov    esi,0x708
c001361a:	31 ff                	xor    edi,edi
c001361c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013620:	29 f0                	sub    eax,esi
c0013622:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013626:	19 fa                	sbb    edx,edi
c0013628:	89 d8                	mov    eax,ebx
c001362a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001362e:	5b                   	pop    ebx
c001362f:	5e                   	pop    esi
c0013630:	5f                   	pop    edi
c0013631:	ff e0                	jmp    eax

c0013633 <datetimeToSeconds(datetime_t)>:
c0013633:	55                   	push   ebp
c0013634:	57                   	push   edi
c0013635:	56                   	push   esi
c0013636:	53                   	push   ebx
c0013637:	83 ec 14             	sub    esp,0x14
c001363a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001363e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013642:	89 d3                	mov    ebx,edx
c0013644:	0f b6 c6             	movzx  eax,dh
c0013647:	c1 eb 10             	shr    ebx,0x10
c001364a:	48                   	dec    eax
c001364b:	66 81 eb 6c 07       	sub    bx,0x76c
c0013650:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013654:	0f b6 f5             	movzx  esi,ch
c0013657:	89 cf                	mov    edi,ecx
c0013659:	6b f6 3c             	imul   esi,esi,0x3c
c001365c:	c1 ef 10             	shr    edi,0x10
c001365f:	0f b6 c9             	movzx  ecx,cl
c0013662:	89 f8                	mov    eax,edi
c0013664:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001366a:	0f b6 f8             	movzx  edi,al
c001366d:	0f b6 d2             	movzx  edx,dl
c0013670:	01 fe                	add    esi,edi
c0013672:	01 f1                	add    ecx,esi
c0013674:	0f b7 f3             	movzx  esi,bx
c0013677:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001367b:	c1 f9 1f             	sar    ecx,0x1f
c001367e:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013683:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013687:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c001368c:	8b 0c 8d 40 93 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6cc0]
c0013693:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013697:	76 29                	jbe    c00136c2 <datetimeToSeconds(datetime_t)+0x8f>
c0013699:	f6 c3 03             	test   bl,0x3
c001369c:	75 24                	jne    c00136c2 <datetimeToSeconds(datetime_t)+0x8f>
c001369e:	31 d2                	xor    edx,edx
c00136a0:	bf 64 00 00 00       	mov    edi,0x64
c00136a5:	89 d8                	mov    eax,ebx
c00136a7:	66 f7 f7             	div    di
c00136aa:	66 85 d2             	test   dx,dx
c00136ad:	75 12                	jne    c00136c1 <datetimeToSeconds(datetime_t)+0x8e>
c00136af:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c00136b5:	bf 90 01 00 00       	mov    edi,0x190
c00136ba:	99                   	cdq    
c00136bb:	f7 ff                	idiv   edi
c00136bd:	85 d2                	test   edx,edx
c00136bf:	75 01                	jne    c00136c2 <datetimeToSeconds(datetime_t)+0x8f>
c00136c1:	41                   	inc    ecx
c00136c2:	66 83 fb 46          	cmp    bx,0x46
c00136c6:	76 45                	jbe    c001370d <datetimeToSeconds(datetime_t)+0xda>
c00136c8:	bb 46 00 00 00       	mov    ebx,0x46
c00136cd:	bf 64 00 00 00       	mov    edi,0x64
c00136d2:	bd 90 01 00 00       	mov    ebp,0x190
c00136d7:	b8 6d 01 00 00       	mov    eax,0x16d
c00136dc:	f6 c3 03             	test   bl,0x3
c00136df:	75 23                	jne    c0013704 <datetimeToSeconds(datetime_t)+0xd1>
c00136e1:	89 d8                	mov    eax,ebx
c00136e3:	99                   	cdq    
c00136e4:	f7 ff                	idiv   edi
c00136e6:	b8 6e 01 00 00       	mov    eax,0x16e
c00136eb:	85 d2                	test   edx,edx
c00136ed:	75 15                	jne    c0013704 <datetimeToSeconds(datetime_t)+0xd1>
c00136ef:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c00136f5:	99                   	cdq    
c00136f6:	f7 fd                	idiv   ebp
c00136f8:	83 fa 01             	cmp    edx,0x1
c00136fb:	19 c0                	sbb    eax,eax
c00136fd:	f7 d0                	not    eax
c00136ff:	05 6e 01 00 00       	add    eax,0x16e
c0013704:	01 c1                	add    ecx,eax
c0013706:	43                   	inc    ebx
c0013707:	39 f3                	cmp    ebx,esi
c0013709:	7c cc                	jl     c00136d7 <datetimeToSeconds(datetime_t)+0xa4>
c001370b:	eb 35                	jmp    c0013742 <datetimeToSeconds(datetime_t)+0x10f>
c001370d:	74 33                	je     c0013742 <datetimeToSeconds(datetime_t)+0x10f>
c001370f:	b8 45 00 00 00       	mov    eax,0x45
c0013714:	89 c2                	mov    edx,eax
c0013716:	83 e2 03             	and    edx,0x3
c0013719:	39 f0                	cmp    eax,esi
c001371b:	7e 0f                	jle    c001372c <datetimeToSeconds(datetime_t)+0xf9>
c001371d:	83 fa 01             	cmp    edx,0x1
c0013720:	19 d2                	sbb    edx,edx
c0013722:	48                   	dec    eax
c0013723:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c001372a:	eb e8                	jmp    c0013714 <datetimeToSeconds(datetime_t)+0xe1>
c001372c:	b8 6d 01 00 00       	mov    eax,0x16d
c0013731:	85 d2                	test   edx,edx
c0013733:	75 0b                	jne    c0013740 <datetimeToSeconds(datetime_t)+0x10d>
c0013735:	66 83 fb 01          	cmp    bx,0x1
c0013739:	19 c0                	sbb    eax,eax
c001373b:	05 6e 01 00 00       	add    eax,0x16e
c0013740:	29 c1                	sub    ecx,eax
c0013742:	b8 80 51 01 00       	mov    eax,0x15180
c0013747:	f7 e9                	imul   ecx
c0013749:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001374d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013751:	83 c4 14             	add    esp,0x14
c0013754:	5b                   	pop    ebx
c0013755:	5e                   	pop    esi
c0013756:	5f                   	pop    edi
c0013757:	5d                   	pop    ebp
c0013758:	c3                   	ret    
c0013759:	90                   	nop

c001375a <Clock::setTimeInDatetimeLocal(datetime_t)>:
c001375a:	57                   	push   edi
c001375b:	56                   	push   esi
c001375c:	53                   	push   ebx
c001375d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013761:	8b 06                	mov    eax,DWORD PTR [esi]
c0013763:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013766:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001376a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001376e:	e8 c0 fe ff ff       	call   c0013633 <datetimeToSeconds(datetime_t)>
c0013773:	59                   	pop    ecx
c0013774:	0f b6 0d d0 c9 02 c0 	movzx  ecx,BYTE PTR ds:0xc002c9d0
c001377b:	5b                   	pop    ebx
c001377c:	03 0d d4 c9 02 c0    	add    ecx,DWORD PTR ds:0xc002c9d4
c0013782:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013788:	89 cb                	mov    ebx,ecx
c001378a:	c1 fb 1f             	sar    ebx,0x1f
c001378d:	29 c8                	sub    eax,ecx
c001378f:	19 da                	sbb    edx,ebx
c0013791:	31 c9                	xor    ecx,ecx
c0013793:	80 3d d1 c9 02 c0 00 	cmp    BYTE PTR ds:0xc002c9d1,0x0
c001379a:	74 05                	je     c00137a1 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001379c:	b9 08 07 00 00       	mov    ecx,0x708
c00137a1:	31 db                	xor    ebx,ebx
c00137a3:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00137a7:	29 c8                	sub    eax,ecx
c00137a9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00137ad:	19 da                	sbb    edx,ebx
c00137af:	89 f8                	mov    eax,edi
c00137b1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00137b5:	5b                   	pop    ebx
c00137b6:	5e                   	pop    esi
c00137b7:	5f                   	pop    edi
c00137b8:	ff e0                	jmp    eax

c00137ba <secondsToDatetime(unsigned long long)>:
c00137ba:	55                   	push   ebp
c00137bb:	57                   	push   edi
c00137bc:	56                   	push   esi
c00137bd:	53                   	push   ebx
c00137be:	83 ec 1c             	sub    esp,0x1c
c00137c1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00137c5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00137c9:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00137cd:	6a 00                	push   0x0
c00137cf:	68 80 51 01 00       	push   0x15180
c00137d4:	55                   	push   ebp
c00137d5:	57                   	push   edi
c00137d6:	e8 e1 1a 01 00       	call   c00252bc <__udivdi3>
c00137db:	83 c4 10             	add    esp,0x10
c00137de:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00137e4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00137e8:	6a 00                	push   0x0
c00137ea:	68 80 51 01 00       	push   0x15180
c00137ef:	55                   	push   ebp
c00137f0:	57                   	push   edi
c00137f1:	bf 10 0e 00 00       	mov    edi,0xe10
c00137f6:	e8 c1 1b 01 00       	call   c00253bc <__umoddi3>
c00137fb:	83 c4 10             	add    esp,0x10
c00137fe:	99                   	cdq    
c00137ff:	f7 ff                	idiv   edi
c0013801:	bf 3c 00 00 00       	mov    edi,0x3c
c0013806:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013809:	89 d0                	mov    eax,edx
c001380b:	99                   	cdq    
c001380c:	f7 ff                	idiv   edi
c001380e:	85 db                	test   ebx,ebx
c0013810:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013813:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013816:	79 11                	jns    c0013829 <secondsToDatetime(unsigned long long)+0x6f>
c0013818:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001381c:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013822:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013827:	eb 07                	jmp    c0013830 <secondsToDatetime(unsigned long long)+0x76>
c0013829:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001382e:	89 d8                	mov    eax,ebx
c0013830:	bf b4 05 00 00       	mov    edi,0x5b4
c0013835:	99                   	cdq    
c0013836:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c001383b:	f7 f9                	idiv   ecx
c001383d:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013842:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013846:	31 d2                	xor    edx,edx
c0013848:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013850:	01 c3                	add    ebx,eax
c0013852:	89 d8                	mov    eax,ebx
c0013854:	f7 f1                	div    ecx
c0013856:	31 d2                	xor    edx,edx
c0013858:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c001385b:	89 d8                	mov    eax,ebx
c001385d:	f7 f7                	div    edi
c001385f:	31 d2                	xor    edx,edx
c0013861:	29 c1                	sub    ecx,eax
c0013863:	89 d8                	mov    eax,ebx
c0013865:	f7 f5                	div    ebp
c0013867:	bd 6d 01 00 00       	mov    ebp,0x16d
c001386c:	29 c1                	sub    ecx,eax
c001386e:	31 d2                	xor    edx,edx
c0013870:	89 c8                	mov    eax,ecx
c0013872:	f7 f5                	div    ebp
c0013874:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013879:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001387d:	31 d2                	xor    edx,edx
c001387f:	89 c8                	mov    eax,ecx
c0013881:	f7 f5                	div    ebp
c0013883:	31 d2                	xor    edx,edx
c0013885:	01 c3                	add    ebx,eax
c0013887:	89 c8                	mov    eax,ecx
c0013889:	f7 f7                	div    edi
c001388b:	bf 99 00 00 00       	mov    edi,0x99
c0013890:	29 c3                	sub    ebx,eax
c0013892:	31 d2                	xor    edx,edx
c0013894:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001389c:	29 c3                	sub    ebx,eax
c001389e:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00138a1:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c00138a4:	bb 05 00 00 00       	mov    ebx,0x5
c00138a9:	83 c1 02             	add    ecx,0x2
c00138ac:	89 c8                	mov    eax,ecx
c00138ae:	f7 f7                	div    edi
c00138b0:	31 d2                	xor    edx,edx
c00138b2:	89 c7                	mov    edi,eax
c00138b4:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c00138ba:	83 c0 02             	add    eax,0x2
c00138bd:	f7 f3                	div    ebx
c00138bf:	89 eb                	mov    ebx,ebp
c00138c1:	29 c3                	sub    ebx,eax
c00138c3:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c00138c9:	88 1e                	mov    BYTE PTR [esi],bl
c00138cb:	19 c0                	sbb    eax,eax
c00138cd:	31 d2                	xor    edx,edx
c00138cf:	83 e0 0c             	and    eax,0xc
c00138d2:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00138d6:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00138de:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00138e2:	83 f9 01             	cmp    ecx,0x1
c00138e5:	0f 96 c2             	setbe  dl
c00138e8:	41                   	inc    ecx
c00138e9:	01 d0                	add    eax,edx
c00138eb:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00138ee:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00138f2:	83 c4 1c             	add    esp,0x1c
c00138f5:	89 f0                	mov    eax,esi
c00138f7:	5b                   	pop    ebx
c00138f8:	5e                   	pop    esi
c00138f9:	5f                   	pop    edi
c00138fa:	5d                   	pop    ebp
c00138fb:	c2 04 00             	ret    0x4

c00138fe <Clock::timeInDatetimeLocal()>:
c00138fe:	53                   	push   ebx
c00138ff:	83 ec 14             	sub    esp,0x14
c0013902:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013906:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001390a:	e8 83 fc ff ff       	call   c0013592 <Clock::timeInSecondsLocal()>
c001390f:	83 c4 0c             	add    esp,0xc
c0013912:	52                   	push   edx
c0013913:	50                   	push   eax
c0013914:	53                   	push   ebx
c0013915:	e8 a0 fe ff ff       	call   c00137ba <secondsToDatetime(unsigned long long)>
c001391a:	89 d8                	mov    eax,ebx
c001391c:	83 c4 14             	add    esp,0x14
c001391f:	5b                   	pop    ebx
c0013920:	c2 04 00             	ret    0x4
c0013923:	90                   	nop

c0013924 <Device::hibernate()>:
c0013924:	c3                   	ret    
c0013925:	90                   	nop

c0013926 <Device::wake()>:
c0013926:	c3                   	ret    
c0013927:	90                   	nop

c0013928 <Device::detect()>:
c0013928:	c3                   	ret    
c0013929:	90                   	nop

c001392a <Device::disableLegacy()>:
c001392a:	c3                   	ret    
c001392b:	90                   	nop

c001392c <Device::powerSaving(PowerSavingLevel)>:
c001392c:	c3                   	ret    
c001392d:	90                   	nop

c001392e <DriverlessDevice::close(int, int, void*)>:
c001392e:	31 c0                	xor    eax,eax
c0013930:	c3                   	ret    
c0013931:	90                   	nop

c0013932 <DriverlessDevice::detect()>:
c0013932:	c3                   	ret    
c0013933:	90                   	nop

c0013934 <DriverlessDevice::open(int, int, void*)>:
c0013934:	83 ec 18             	sub    esp,0x18
c0013937:	68 70 93 02 c0       	push   0xc0029370
c001393c:	e8 60 5e 00 00       	call   c00197a1 <Krnl::panic(char const*)>
c0013941:	83 c8 ff             	or     eax,0xffffffff
c0013944:	83 c4 1c             	add    esp,0x1c
c0013947:	c3                   	ret    

c0013948 <Device::~Device()>:
c0013948:	ba 98 93 02 c0       	mov    edx,0xc0029398
c001394d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013951:	89 10                	mov    DWORD PTR [eax],edx
c0013953:	90                   	nop
c0013954:	c3                   	ret    
c0013955:	90                   	nop

c0013956 <Device::~Device()>:
c0013956:	83 ec 0c             	sub    esp,0xc
c0013959:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001395d:	e8 e6 ff ff ff       	call   c0013948 <Device::~Device()>
c0013962:	83 c4 04             	add    esp,0x4
c0013965:	83 ec 08             	sub    esp,0x8
c0013968:	68 58 01 00 00       	push   0x158
c001396d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013971:	e8 31 ec ff ff       	call   c00125a7 <operator delete(void*, unsigned long)>
c0013976:	83 c4 10             	add    esp,0x10
c0013979:	83 c4 0c             	add    esp,0xc
c001397c:	c3                   	ret    
c001397d:	90                   	nop

c001397e <Device::findAndLoadDriver()>:
c001397e:	c3                   	ret    
c001397f:	90                   	nop

c0013980 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013980:	57                   	push   edi
c0013981:	b9 09 00 00 00       	mov    ecx,0x9
c0013986:	56                   	push   esi
c0013987:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001398b:	8d 74 24 10          	lea    esi,[esp+0x10]
c001398f:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013999:	81 c7 18 01 00 00    	add    edi,0x118
c001399f:	fc                   	cld    
c00139a0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00139a2:	5e                   	pop    esi
c00139a3:	5f                   	pop    edi
c00139a4:	c3                   	ret    
c00139a5:	90                   	nop

c00139a6 <Device::preOpenACPI(void*, char*, char*)>:
c00139a6:	56                   	push   esi
c00139a7:	53                   	push   ebx
c00139a8:	83 ec 08             	sub    esp,0x8
c00139ab:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00139af:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00139b3:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c00139bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00139c1:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c00139c7:	6a 1e                	push   0x1e
c00139c9:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c00139cf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00139d3:	81 c3 3a 01 00 00    	add    ebx,0x13a
c00139d9:	50                   	push   eax
c00139da:	e8 76 cc fe ff       	call   c0000655 <memcpy>
c00139df:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00139e3:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00139e7:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c00139ef:	83 c4 14             	add    esp,0x14
c00139f2:	5b                   	pop    ebx
c00139f3:	5e                   	pop    esi
c00139f4:	e9 5c cc fe ff       	jmp    c0000655 <memcpy>
c00139f9:	90                   	nop

c00139fa <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00139fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139fe:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013a03:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013a0a:	75 0b                	jne    c0013a17 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013a0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0013a0e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013a12:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013a15:	eb 1e                	jmp    c0013a35 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013a17:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0013a1c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013a22:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013a28:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013a2a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013a2e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013a32:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013a35:	ff e0                	jmp    eax
c0013a37:	90                   	nop

c0013a38 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013a38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a3c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013a41:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013a48:	75 0b                	jne    c0013a55 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013a4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0013a4c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013a50:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013a53:	eb 1e                	jmp    c0013a73 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013a55:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0013a5a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013a60:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013a66:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013a68:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013a6c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013a70:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013a73:	ff e0                	jmp    eax
c0013a75:	90                   	nop

c0013a76 <Device::addChild(Device*)>:
c0013a76:	53                   	push   ebx
c0013a77:	83 ec 08             	sub    esp,0x8
c0013a7a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a7e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013a82:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013a88:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013a8e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013a90:	85 d2                	test   edx,edx
c0013a92:	74 04                	je     c0013a98 <Device::addChild(Device*)+0x22>
c0013a94:	89 d3                	mov    ebx,edx
c0013a96:	eb f6                	jmp    c0013a8e <Device::addChild(Device*)+0x18>
c0013a98:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013a9b:	83 ec 0c             	sub    esp,0xc
c0013a9e:	6a 08                	push   0x8
c0013aa0:	e8 2f ba ff ff       	call   c000f4d4 <malloc>
c0013aa5:	89 03                	mov    DWORD PTR [ebx],eax
c0013aa7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013aad:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013ab4:	83 c4 18             	add    esp,0x18
c0013ab7:	5b                   	pop    ebx
c0013ab8:	c3                   	ret    
c0013ab9:	90                   	nop

c0013aba <Device::removeAllChildren()>:
c0013aba:	56                   	push   esi
c0013abb:	53                   	push   ebx
c0013abc:	52                   	push   edx
c0013abd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013ac1:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013ac7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013aca:	74 17                	je     c0013ae3 <Device::removeAllChildren()+0x29>
c0013acc:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013acf:	85 c0                	test   eax,eax
c0013ad1:	74 0c                	je     c0013adf <Device::removeAllChildren()+0x25>
c0013ad3:	83 ec 0c             	sub    esp,0xc
c0013ad6:	8b 10                	mov    edx,DWORD PTR [eax]
c0013ad8:	50                   	push   eax
c0013ad9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013adc:	83 c4 10             	add    esp,0x10
c0013adf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ae1:	eb e4                	jmp    c0013ac7 <Device::removeAllChildren()+0xd>
c0013ae3:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013ae9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013aef:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013af5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013afc:	58                   	pop    eax
c0013afd:	5b                   	pop    ebx
c0013afe:	5e                   	pop    esi
c0013aff:	c3                   	ret    

c0013b00 <Device::hibernateAll()>:
c0013b00:	53                   	push   ebx
c0013b01:	83 ec 14             	sub    esp,0x14
c0013b04:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b08:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b0a:	53                   	push   ebx
c0013b0b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013b0e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b14:	83 c4 10             	add    esp,0x10
c0013b17:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b1a:	74 0f                	je     c0013b2b <Device::hibernateAll()+0x2b>
c0013b1c:	83 ec 0c             	sub    esp,0xc
c0013b1f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b22:	e8 d9 ff ff ff       	call   c0013b00 <Device::hibernateAll()>
c0013b27:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b29:	eb e9                	jmp    c0013b14 <Device::hibernateAll()+0x14>
c0013b2b:	83 c4 08             	add    esp,0x8
c0013b2e:	5b                   	pop    ebx
c0013b2f:	c3                   	ret    

c0013b30 <Device::wakeAll()>:
c0013b30:	53                   	push   ebx
c0013b31:	83 ec 14             	sub    esp,0x14
c0013b34:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b38:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b3a:	53                   	push   ebx
c0013b3b:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013b3e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b44:	83 c4 10             	add    esp,0x10
c0013b47:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b4a:	74 0f                	je     c0013b5b <Device::wakeAll()+0x2b>
c0013b4c:	83 ec 0c             	sub    esp,0xc
c0013b4f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b52:	e8 d9 ff ff ff       	call   c0013b30 <Device::wakeAll()>
c0013b57:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b59:	eb e9                	jmp    c0013b44 <Device::wakeAll()+0x14>
c0013b5b:	83 c4 08             	add    esp,0x8
c0013b5e:	5b                   	pop    ebx
c0013b5f:	c3                   	ret    

c0013b60 <Device::detectAll()>:
c0013b60:	53                   	push   ebx
c0013b61:	83 ec 14             	sub    esp,0x14
c0013b64:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b68:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b6a:	53                   	push   ebx
c0013b6b:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013b6e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b74:	83 c4 10             	add    esp,0x10
c0013b77:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b7a:	74 0f                	je     c0013b8b <Device::detectAll()+0x2b>
c0013b7c:	83 ec 0c             	sub    esp,0xc
c0013b7f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b82:	e8 d9 ff ff ff       	call   c0013b60 <Device::detectAll()>
c0013b87:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b89:	eb e9                	jmp    c0013b74 <Device::detectAll()+0x14>
c0013b8b:	83 c4 08             	add    esp,0x8
c0013b8e:	5b                   	pop    ebx
c0013b8f:	c3                   	ret    

c0013b90 <Device::disableLegacyAll()>:
c0013b90:	53                   	push   ebx
c0013b91:	83 ec 14             	sub    esp,0x14
c0013b94:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b98:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b9a:	53                   	push   ebx
c0013b9b:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013b9e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ba4:	83 c4 10             	add    esp,0x10
c0013ba7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013baa:	74 0f                	je     c0013bbb <Device::disableLegacyAll()+0x2b>
c0013bac:	83 ec 0c             	sub    esp,0xc
c0013baf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013bb2:	e8 d9 ff ff ff       	call   c0013b90 <Device::disableLegacyAll()>
c0013bb7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013bb9:	eb e9                	jmp    c0013ba4 <Device::disableLegacyAll()+0x14>
c0013bbb:	83 c4 08             	add    esp,0x8
c0013bbe:	5b                   	pop    ebx
c0013bbf:	c3                   	ret    

c0013bc0 <Device::loadDriversForAll()>:
c0013bc0:	53                   	push   ebx
c0013bc1:	83 ec 08             	sub    esp,0x8
c0013bc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bc8:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013bce:	8b 18                	mov    ebx,DWORD PTR [eax]
c0013bd0:	85 db                	test   ebx,ebx
c0013bd2:	74 12                	je     c0013be6 <Device::loadDriversForAll()+0x26>
c0013bd4:	83 ec 0c             	sub    esp,0xc
c0013bd7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0013bda:	e8 e1 ff ff ff       	call   c0013bc0 <Device::loadDriversForAll()>
c0013bdf:	83 c4 10             	add    esp,0x10
c0013be2:	89 d8                	mov    eax,ebx
c0013be4:	eb e8                	jmp    c0013bce <Device::loadDriversForAll()+0xe>
c0013be6:	83 c4 08             	add    esp,0x8
c0013be9:	5b                   	pop    ebx
c0013bea:	c3                   	ret    
c0013beb:	90                   	nop

c0013bec <Device::closeAll()>:
c0013bec:	53                   	push   ebx
c0013bed:	83 ec 08             	sub    esp,0x8
c0013bf0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013bf4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bf6:	6a 00                	push   0x0
c0013bf8:	6a 00                	push   0x0
c0013bfa:	6a 00                	push   0x0
c0013bfc:	53                   	push   ebx
c0013bfd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c00:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c06:	83 c4 10             	add    esp,0x10
c0013c09:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c0c:	74 0f                	je     c0013c1d <Device::closeAll()+0x31>
c0013c0e:	83 ec 0c             	sub    esp,0xc
c0013c11:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c14:	e8 d3 ff ff ff       	call   c0013bec <Device::closeAll()>
c0013c19:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c1b:	eb e9                	jmp    c0013c06 <Device::closeAll()+0x1a>
c0013c1d:	83 c4 08             	add    esp,0x8
c0013c20:	5b                   	pop    ebx
c0013c21:	c3                   	ret    

c0013c22 <Device::powerSavingAll(PowerSavingLevel)>:
c0013c22:	56                   	push   esi
c0013c23:	53                   	push   ebx
c0013c24:	83 ec 0c             	sub    esp,0xc
c0013c27:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013c2b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013c2f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c31:	56                   	push   esi
c0013c32:	53                   	push   ebx
c0013c33:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013c36:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c3c:	83 c4 10             	add    esp,0x10
c0013c3f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c42:	74 0f                	je     c0013c53 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013c44:	52                   	push   edx
c0013c45:	52                   	push   edx
c0013c46:	56                   	push   esi
c0013c47:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c4a:	e8 d3 ff ff ff       	call   c0013c22 <Device::powerSavingAll(PowerSavingLevel)>
c0013c4f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c51:	eb e9                	jmp    c0013c3c <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013c53:	58                   	pop    eax
c0013c54:	5b                   	pop    ebx
c0013c55:	5e                   	pop    esi
c0013c56:	c3                   	ret    
c0013c57:	90                   	nop

c0013c58 <Device::setName(char const*)>:
c0013c58:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013c60:	e9 c5 ca fe ff       	jmp    c000072a <strcpy>
c0013c65:	90                   	nop

c0013c66 <Device::Device(char const*)>:
c0013c66:	83 ec 1c             	sub    esp,0x1c
c0013c69:	ba 98 93 02 c0       	mov    edx,0xc0029398
c0013c6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c72:	89 10                	mov    DWORD PTR [eax],edx
c0013c74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c78:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013c82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c86:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013c90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c94:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013c9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ca2:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013cac:	83 ec 08             	sub    esp,0x8
c0013caf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013cb3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013cb7:	e8 9c ff ff ff       	call   c0013c58 <Device::setName(char const*)>
c0013cbc:	83 c4 10             	add    esp,0x10
c0013cbf:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013cc7:	83 ec 0c             	sub    esp,0xc
c0013cca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013cce:	e8 01 b8 ff ff       	call   c000f4d4 <malloc>
c0013cd3:	83 c4 10             	add    esp,0x10
c0013cd6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013cdc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013ce3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013ce7:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013ced:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cf1:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013cf7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013cfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d01:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013d07:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d12:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013d19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d1d:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013d24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d28:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013d32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d36:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013d40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d44:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013d4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d52:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013d5c:	90                   	nop
c0013d5d:	83 c4 1c             	add    esp,0x1c
c0013d60:	c3                   	ret    
c0013d61:	90                   	nop

c0013d62 <Device::getName()>:
c0013d62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013d66:	05 d0 00 00 00       	add    eax,0xd0
c0013d6b:	c3                   	ret    

c0013d6c <DriverlessDevice::DriverlessDevice(char const*)>:
c0013d6c:	83 ec 0c             	sub    esp,0xc
c0013d6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d73:	83 ec 08             	sub    esp,0x8
c0013d76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d7a:	50                   	push   eax
c0013d7b:	e8 e6 fe ff ff       	call   c0013c66 <Device::Device(char const*)>
c0013d80:	83 c4 10             	add    esp,0x10
c0013d83:	ba c4 93 02 c0       	mov    edx,0xc00293c4
c0013d88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d8c:	89 10                	mov    DWORD PTR [eax],edx
c0013d8e:	90                   	nop
c0013d8f:	83 c4 0c             	add    esp,0xc
c0013d92:	c3                   	ret    
c0013d93:	90                   	nop

c0013d94 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013d94:	57                   	push   edi
c0013d95:	56                   	push   esi
c0013d96:	53                   	push   ebx
c0013d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d9b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013d9f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013da3:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013da9:	75 0c                	jne    c0013db7 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013dab:	52                   	push   edx
c0013dac:	52                   	push   edx
c0013dad:	53                   	push   ebx
c0013dae:	56                   	push   esi
c0013daf:	e8 46 34 01 00       	call   c00271fa <LinkedList<Device>::addElement(Device*)>
c0013db4:	83 c4 10             	add    esp,0x10
c0013db7:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013dbd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013dc0:	74 12                	je     c0013dd4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013dc2:	50                   	push   eax
c0013dc3:	57                   	push   edi
c0013dc4:	56                   	push   esi
c0013dc5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013dc8:	e8 c7 ff ff ff       	call   c0013d94 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013dcd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013dcf:	83 c4 10             	add    esp,0x10
c0013dd2:	eb e9                	jmp    c0013dbd <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013dd4:	5b                   	pop    ebx
c0013dd5:	5e                   	pop    esi
c0013dd6:	5f                   	pop    edi
c0013dd7:	c3                   	ret    

c0013dd8 <getDevicesOfType(DeviceType)>:
c0013dd8:	53                   	push   ebx
c0013dd9:	83 ec 14             	sub    esp,0x14
c0013ddc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013de0:	53                   	push   ebx
c0013de1:	e8 f0 34 01 00       	call   c00272d6 <LinkedList<Device>::LinkedList()>
c0013de6:	83 c4 0c             	add    esp,0xc
c0013de9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ded:	53                   	push   ebx
c0013dee:	ff 35 48 c8 02 c0    	push   DWORD PTR ds:0xc002c848
c0013df4:	e8 9b ff ff ff       	call   c0013d94 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013df9:	89 d8                	mov    eax,ebx
c0013dfb:	83 c4 18             	add    esp,0x18
c0013dfe:	5b                   	pop    ebx
c0013dff:	c2 04 00             	ret    0x4

c0013e02 <HardDiskController::HardDiskController(char const*)>:
c0013e02:	83 ec 0c             	sub    esp,0xc
c0013e05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e09:	83 ec 08             	sub    esp,0x8
c0013e0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e10:	50                   	push   eax
c0013e11:	e8 50 fe ff ff       	call   c0013c66 <Device::Device(char const*)>
c0013e16:	83 c4 10             	add    esp,0x10
c0013e19:	ba f0 93 02 c0       	mov    edx,0xc00293f0
c0013e1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e22:	89 10                	mov    DWORD PTR [eax],edx
c0013e24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e28:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013e32:	90                   	nop
c0013e33:	83 c4 0c             	add    esp,0xc
c0013e36:	c3                   	ret    
c0013e37:	90                   	nop

c0013e38 <HardDiskController::~HardDiskController()>:
c0013e38:	83 ec 0c             	sub    esp,0xc
c0013e3b:	ba f0 93 02 c0       	mov    edx,0xc00293f0
c0013e40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e44:	89 10                	mov    DWORD PTR [eax],edx
c0013e46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e4a:	83 ec 0c             	sub    esp,0xc
c0013e4d:	50                   	push   eax
c0013e4e:	e8 f5 fa ff ff       	call   c0013948 <Device::~Device()>
c0013e53:	83 c4 10             	add    esp,0x10
c0013e56:	90                   	nop
c0013e57:	83 c4 0c             	add    esp,0xc
c0013e5a:	c3                   	ret    
c0013e5b:	90                   	nop

c0013e5c <HardDiskController::~HardDiskController()>:
c0013e5c:	83 ec 0c             	sub    esp,0xc
c0013e5f:	83 ec 0c             	sub    esp,0xc
c0013e62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e66:	e8 cd ff ff ff       	call   c0013e38 <HardDiskController::~HardDiskController()>
c0013e6b:	83 c4 10             	add    esp,0x10
c0013e6e:	83 ec 08             	sub    esp,0x8
c0013e71:	68 58 01 00 00       	push   0x158
c0013e76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e7a:	e8 28 e7 ff ff       	call   c00125a7 <operator delete(void*, unsigned long)>
c0013e7f:	83 c4 10             	add    esp,0x10
c0013e82:	83 c4 0c             	add    esp,0xc
c0013e85:	c3                   	ret    

c0013e86 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013e86:	83 ec 0c             	sub    esp,0xc
c0013e89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e8d:	83 ec 08             	sub    esp,0x8
c0013e90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e94:	50                   	push   eax
c0013e95:	e8 cc fd ff ff       	call   c0013c66 <Device::Device(char const*)>
c0013e9a:	83 c4 10             	add    esp,0x10
c0013e9d:	ba 1c 94 02 c0       	mov    edx,0xc002941c
c0013ea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ea6:	89 10                	mov    DWORD PTR [eax],edx
c0013ea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013eac:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013eb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013eb7:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013ebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ec2:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013ecc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ed0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013ed4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013eda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ede:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013ee8:	90                   	nop
c0013ee9:	83 c4 0c             	add    esp,0xc
c0013eec:	c3                   	ret    
c0013eed:	90                   	nop

c0013eee <PhysicalDisk::startCache()>:
c0013eee:	56                   	push   esi
c0013eef:	53                   	push   ebx
c0013ef0:	83 ec 10             	sub    esp,0x10
c0013ef3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ef7:	6a 30                	push   0x30
c0013ef9:	e8 d6 b5 ff ff       	call   c000f4d4 <malloc>
c0013efe:	89 c6                	mov    esi,eax
c0013f00:	58                   	pop    eax
c0013f01:	5a                   	pop    edx
c0013f02:	53                   	push   ebx
c0013f03:	56                   	push   esi
c0013f04:	e8 dd 25 00 00       	call   c00164e6 <VCache::VCache(PhysicalDisk*)>
c0013f09:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013f0f:	83 c4 14             	add    esp,0x14
c0013f12:	5b                   	pop    ebx
c0013f13:	5e                   	pop    esi
c0013f14:	c3                   	ret    
c0013f15:	90                   	nop

c0013f16 <PhysicalDisk::~PhysicalDisk()>:
c0013f16:	83 ec 0c             	sub    esp,0xc
c0013f19:	ba 1c 94 02 c0       	mov    edx,0xc002941c
c0013f1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f22:	89 10                	mov    DWORD PTR [eax],edx
c0013f24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f28:	83 ec 0c             	sub    esp,0xc
c0013f2b:	50                   	push   eax
c0013f2c:	e8 17 fa ff ff       	call   c0013948 <Device::~Device()>
c0013f31:	83 c4 10             	add    esp,0x10
c0013f34:	90                   	nop
c0013f35:	83 c4 0c             	add    esp,0xc
c0013f38:	c3                   	ret    
c0013f39:	90                   	nop

c0013f3a <PhysicalDisk::~PhysicalDisk()>:
c0013f3a:	83 ec 0c             	sub    esp,0xc
c0013f3d:	83 ec 0c             	sub    esp,0xc
c0013f40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f44:	e8 cd ff ff ff       	call   c0013f16 <PhysicalDisk::~PhysicalDisk()>
c0013f49:	83 c4 10             	add    esp,0x10
c0013f4c:	83 ec 08             	sub    esp,0x8
c0013f4f:	68 6c 01 00 00       	push   0x16c
c0013f54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f58:	e8 4a e6 ff ff       	call   c00125a7 <operator delete(void*, unsigned long)>
c0013f5d:	83 c4 10             	add    esp,0x10
c0013f60:	83 c4 0c             	add    esp,0xc
c0013f63:	c3                   	ret    

c0013f64 <FPU::FPU(char const*)>:
c0013f64:	83 ec 0c             	sub    esp,0xc
c0013f67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f6b:	83 ec 08             	sub    esp,0x8
c0013f6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f72:	50                   	push   eax
c0013f73:	e8 ee fc ff ff       	call   c0013c66 <Device::Device(char const*)>
c0013f78:	83 c4 10             	add    esp,0x10
c0013f7b:	ba 5c 94 02 c0       	mov    edx,0xc002945c
c0013f80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f84:	89 10                	mov    DWORD PTR [eax],edx
c0013f86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f8a:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0013f94:	90                   	nop
c0013f95:	83 c4 0c             	add    esp,0xc
c0013f98:	c3                   	ret    
c0013f99:	90                   	nop

c0013f9a <FPU::~FPU()>:
c0013f9a:	83 ec 0c             	sub    esp,0xc
c0013f9d:	ba 5c 94 02 c0       	mov    edx,0xc002945c
c0013fa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fa6:	89 10                	mov    DWORD PTR [eax],edx
c0013fa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fac:	83 ec 0c             	sub    esp,0xc
c0013faf:	50                   	push   eax
c0013fb0:	e8 93 f9 ff ff       	call   c0013948 <Device::~Device()>
c0013fb5:	83 c4 10             	add    esp,0x10
c0013fb8:	90                   	nop
c0013fb9:	83 c4 0c             	add    esp,0xc
c0013fbc:	c3                   	ret    
c0013fbd:	90                   	nop

c0013fbe <FPU::~FPU()>:
c0013fbe:	83 ec 0c             	sub    esp,0xc
c0013fc1:	83 ec 0c             	sub    esp,0xc
c0013fc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013fc8:	e8 cd ff ff ff       	call   c0013f9a <FPU::~FPU()>
c0013fcd:	83 c4 10             	add    esp,0x10
c0013fd0:	83 ec 08             	sub    esp,0x8
c0013fd3:	68 58 01 00 00       	push   0x158
c0013fd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013fdc:	e8 c6 e5 ff ff       	call   c00125a7 <operator delete(void*, unsigned long)>
c0013fe1:	83 c4 10             	add    esp,0x10
c0013fe4:	83 c4 0c             	add    esp,0xc
c0013fe7:	c3                   	ret    

c0013fe8 <setupFPU()>:
c0013fe8:	53                   	push   ebx
c0013fe9:	83 ec 08             	sub    esp,0x8
c0013fec:	8b 15 48 c8 02 c0    	mov    edx,DWORD PTR ds:0xc002c848
c0013ff2:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0013ff9:	74 19                	je     c0014014 <setupFPU()+0x2c>
c0013ffb:	83 ec 0c             	sub    esp,0xc
c0013ffe:	68 58 01 00 00       	push   0x158
c0014003:	e8 cc b4 ff ff       	call   c000f4d4 <malloc>
c0014008:	89 c3                	mov    ebx,eax
c001400a:	89 04 24             	mov    DWORD PTR [esp],eax
c001400d:	e8 30 fe 00 00       	call   c0023e42 <AVX::AVX()>
c0014012:	eb 5b                	jmp    c001406f <setupFPU()+0x87>
c0014014:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001401a:	84 c0                	test   al,al
c001401c:	79 19                	jns    c0014037 <setupFPU()+0x4f>
c001401e:	83 ec 0c             	sub    esp,0xc
c0014021:	68 58 01 00 00       	push   0x158
c0014026:	e8 a9 b4 ff ff       	call   c000f4d4 <malloc>
c001402b:	89 c3                	mov    ebx,eax
c001402d:	89 04 24             	mov    DWORD PTR [esp],eax
c0014030:	e8 33 ff 00 00       	call   c0023f68 <SSE::SSE()>
c0014035:	eb 38                	jmp    c001406f <setupFPU()+0x87>
c0014037:	a8 20                	test   al,0x20
c0014039:	74 19                	je     c0014054 <setupFPU()+0x6c>
c001403b:	83 ec 0c             	sub    esp,0xc
c001403e:	68 58 01 00 00       	push   0x158
c0014043:	e8 8c b4 ff ff       	call   c000f4d4 <malloc>
c0014048:	89 c3                	mov    ebx,eax
c001404a:	89 04 24             	mov    DWORD PTR [esp],eax
c001404d:	e8 80 fe 00 00       	call   c0023ed2 <MMX::MMX()>
c0014052:	eb 1b                	jmp    c001406f <setupFPU()+0x87>
c0014054:	a8 10                	test   al,0x10
c0014056:	74 1c                	je     c0014074 <setupFPU()+0x8c>
c0014058:	83 ec 0c             	sub    esp,0xc
c001405b:	68 58 01 00 00       	push   0x158
c0014060:	e8 6f b4 ff ff       	call   c000f4d4 <malloc>
c0014065:	89 c3                	mov    ebx,eax
c0014067:	89 04 24             	mov    DWORD PTR [esp],eax
c001406a:	e8 87 ff 00 00       	call   c0023ff6 <x87::x87()>
c001406f:	83 c4 10             	add    esp,0x10
c0014072:	eb 24                	jmp    c0014098 <setupFPU()+0xb0>
c0014074:	83 e0 ef             	and    eax,0xffffffef
c0014077:	83 ec 0c             	sub    esp,0xc
c001407a:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014080:	68 48 94 02 c0       	push   0xc0029448
c0014085:	e8 fd e5 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001408a:	0f 20 c0             	mov    eax,cr0
c001408d:	83 c8 04             	or     eax,0x4
c0014090:	0f 22 c0             	mov    cr0,eax
c0014093:	31 db                	xor    ebx,ebx
c0014095:	83 c4 10             	add    esp,0x10
c0014098:	89 d8                	mov    eax,ebx
c001409a:	83 c4 08             	add    esp,0x8
c001409d:	5b                   	pop    ebx
c001409e:	c3                   	ret    
c001409f:	90                   	nop

c00140a0 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c00140a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00140a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00140a8:	c1 e0 04             	shl    eax,0x4
c00140ab:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00140af:	8d 50 10             	lea    edx,[eax+0x10]
c00140b2:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c00140b8:	74 08                	je     c00140c2 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c00140ba:	83 c0 04             	add    eax,0x4
c00140bd:	39 d0                	cmp    eax,edx
c00140bf:	75 f1                	jne    c00140b2 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c00140c1:	c3                   	ret    
c00140c2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00140cc:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00140d6:	eb e2                	jmp    c00140ba <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00140d8 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00140d8:	57                   	push   edi
c00140d9:	31 c0                	xor    eax,eax
c00140db:	56                   	push   esi
c00140dc:	53                   	push   ebx
c00140dd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00140e1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00140e5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00140e9:	89 da                	mov    edx,ebx
c00140eb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00140ef:	c1 e2 04             	shl    edx,0x4
c00140f2:	01 ca                	add    edx,ecx
c00140f4:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00140fc:	74 16                	je     c0014114 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00140fe:	40                   	inc    eax
c00140ff:	83 f8 04             	cmp    eax,0x4
c0014102:	75 f0                	jne    c00140f4 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014104:	c7 44 24 10 8c 94 02 c0 	mov    DWORD PTR [esp+0x10],0xc002948c
c001410c:	5b                   	pop    ebx
c001410d:	5e                   	pop    esi
c001410e:	5f                   	pop    edi
c001410f:	e9 8d 56 00 00       	jmp    c00197a1 <Krnl::panic(char const*)>
c0014114:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014117:	8d 04 81             	lea    eax,[ecx+eax*4]
c001411a:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014120:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014126:	5b                   	pop    ebx
c0014127:	5e                   	pop    esi
c0014128:	5f                   	pop    edi
c0014129:	c3                   	ret    

c001412a <doubleFault(regs*, void*)>:
c001412a:	55                   	push   ebp
c001412b:	89 e5                	mov    ebp,esp
c001412d:	83 ec 08             	sub    esp,0x8
c0014130:	83 ec 0c             	sub    esp,0xc
c0014133:	68 c7 94 02 c0       	push   0xc00294c7
c0014138:	e8 64 56 00 00       	call   c00197a1 <Krnl::panic(char const*)>
c001413d:	83 c4 10             	add    esp,0x10
c0014140:	90                   	nop
c0014141:	c9                   	leave  
c0014142:	c3                   	ret    
c0014143:	90                   	nop

c0014144 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014144:	56                   	push   esi
c0014145:	53                   	push   ebx
c0014146:	50                   	push   eax
c0014147:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001414b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001414f:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014154:	75 35                	jne    c001418b <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014156:	8d 43 20             	lea    eax,[ebx+0x20]
c0014159:	31 d2                	xor    edx,edx
c001415b:	89 c1                	mov    ecx,eax
c001415d:	c1 e1 04             	shl    ecx,0x4
c0014160:	01 f1                	add    ecx,esi
c0014162:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c001416a:	74 3e                	je     c00141aa <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c001416c:	42                   	inc    edx
c001416d:	83 fa 04             	cmp    edx,0x4
c0014170:	75 f0                	jne    c0014162 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014172:	83 ec 0c             	sub    esp,0xc
c0014175:	68 0c 95 02 c0       	push   0xc002950c
c001417a:	e8 22 56 00 00       	call   c00197a1 <Krnl::panic(char const*)>
c001417f:	83 c4 10             	add    esp,0x10
c0014182:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014187:	5a                   	pop    edx
c0014188:	5b                   	pop    ebx
c0014189:	5e                   	pop    esi
c001418a:	c3                   	ret    
c001418b:	83 ec 0c             	sub    esp,0xc
c001418e:	56                   	push   esi
c001418f:	e8 ce fb ff ff       	call   c0013d62 <Device::getName()>
c0014194:	83 c4 10             	add    esp,0x10
c0014197:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001419a:	75 ba                	jne    c0014156 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001419c:	83 fb 0f             	cmp    ebx,0xf
c001419f:	7f 29                	jg     c00141ca <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c00141a1:	0f b6 9b a0 ba 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd4560]
c00141a8:	eb ac                	jmp    c0014156 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00141aa:	8d 04 82             	lea    eax,[edx+eax*4]
c00141ad:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00141b1:	8d 04 86             	lea    eax,[esi+eax*4]
c00141b4:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00141ba:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00141be:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c00141c4:	89 d8                	mov    eax,ebx
c00141c6:	5a                   	pop    edx
c00141c7:	5b                   	pop    ebx
c00141c8:	5e                   	pop    esi
c00141c9:	c3                   	ret    
c00141ca:	83 ec 0c             	sub    esp,0xc
c00141cd:	68 d4 94 02 c0       	push   0xc00294d4
c00141d2:	e8 ca 55 00 00       	call   c00197a1 <Krnl::panic(char const*)>
c00141d7:	83 c4 10             	add    esp,0x10
c00141da:	e9 77 ff ff ff       	jmp    c0014156 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00141df:	90                   	nop

c00141e0 <InterruptController::clearAllHandlers(int, bool)>:
c00141e0:	56                   	push   esi
c00141e1:	53                   	push   ebx
c00141e2:	52                   	push   edx
c00141e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00141e7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00141eb:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00141f0:	75 61                	jne    c0014253 <InterruptController::clearAllHandlers(int, bool)+0x73>
c00141f2:	8d 46 20             	lea    eax,[esi+0x20]
c00141f5:	c1 e6 04             	shl    esi,0x4
c00141f8:	c1 e0 04             	shl    eax,0x4
c00141fb:	01 de                	add    esi,ebx
c00141fd:	01 d8                	add    eax,ebx
c00141ff:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014209:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014213:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001421d:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014227:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014231:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c001423b:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014245:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c001424f:	58                   	pop    eax
c0014250:	5b                   	pop    ebx
c0014251:	5e                   	pop    esi
c0014252:	c3                   	ret    
c0014253:	83 ec 0c             	sub    esp,0xc
c0014256:	53                   	push   ebx
c0014257:	e8 06 fb ff ff       	call   c0013d62 <Device::getName()>
c001425c:	83 c4 10             	add    esp,0x10
c001425f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014262:	75 8e                	jne    c00141f2 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014264:	83 fe 0f             	cmp    esi,0xf
c0014267:	7f 09                	jg     c0014272 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014269:	0f b6 b6 a0 ba 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd4560]
c0014270:	eb 80                	jmp    c00141f2 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014272:	83 ec 0c             	sub    esp,0xc
c0014275:	68 48 95 02 c0       	push   0xc0029548
c001427a:	e8 22 55 00 00       	call   c00197a1 <Krnl::panic(char const*)>
c001427f:	83 c4 10             	add    esp,0x10
c0014282:	e9 6b ff ff ff       	jmp    c00141f2 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014287:	90                   	nop

c0014288 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014288:	56                   	push   esi
c0014289:	53                   	push   ebx
c001428a:	52                   	push   edx
c001428b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001428f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014293:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014298:	75 3a                	jne    c00142d4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c001429a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001429e:	8d 50 20             	lea    edx,[eax+0x20]
c00142a1:	c1 e2 04             	shl    edx,0x4
c00142a4:	8d 04 16             	lea    eax,[esi+edx*1]
c00142a7:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c00142ab:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c00142b1:	74 0b                	je     c00142be <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c00142b3:	83 c0 04             	add    eax,0x4
c00142b6:	39 d0                	cmp    eax,edx
c00142b8:	75 f1                	jne    c00142ab <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c00142ba:	58                   	pop    eax
c00142bb:	5b                   	pop    ebx
c00142bc:	5e                   	pop    esi
c00142bd:	c3                   	ret    
c00142be:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00142c8:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00142d2:	eb df                	jmp    c00142b3 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c00142d4:	83 ec 0c             	sub    esp,0xc
c00142d7:	56                   	push   esi
c00142d8:	e8 85 fa ff ff       	call   c0013d62 <Device::getName()>
c00142dd:	83 c4 10             	add    esp,0x10
c00142e0:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00142e3:	75 b5                	jne    c001429a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00142e5:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00142ea:	7f 11                	jg     c00142fd <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c00142ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00142f0:	0f b6 80 a0 ba 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd4560]
c00142f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00142fb:	eb 9d                	jmp    c001429a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00142fd:	83 ec 0c             	sub    esp,0xc
c0014300:	68 48 95 02 c0       	push   0xc0029548
c0014305:	e8 97 54 00 00       	call   c00197a1 <Krnl::panic(char const*)>
c001430a:	83 c4 10             	add    esp,0x10
c001430d:	eb 8b                	jmp    c001429a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c001430f <nmiHandler(regs*, void*)>:
c001430f:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0014314:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014318:	e9 03 a9 ff ff       	jmp    c000ec20 <Computer::handleNMI()>

c001431d <int_handler>:
c001431d:	55                   	push   ebp
c001431e:	57                   	push   edi
c001431f:	56                   	push   esi
c0014320:	53                   	push   ebx
c0014321:	83 ec 0c             	sub    esp,0xc
c0014324:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014328:	80 3d 80 d3 02 c0 00 	cmp    BYTE PTR ds:0xc002d380,0x0
c001432f:	74 0b                	je     c001433c <int_handler+0x1f>
c0014331:	fa                   	cli    
c0014332:	f4                   	hlt    
c0014333:	80 3d 80 d3 02 c0 00 	cmp    BYTE PTR ds:0xc002d380,0x0
c001433a:	75 f5                	jne    c0014331 <int_handler+0x14>
c001433c:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0014341:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014344:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001434a:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014350:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014353:	83 f8 17             	cmp    eax,0x17
c0014356:	77 13                	ja     c001436b <int_handler+0x4e>
c0014358:	83 ec 08             	sub    esp,0x8
c001435b:	8b 17                	mov    edx,DWORD PTR [edi]
c001435d:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014360:	0f b6 c0             	movzx  eax,al
c0014363:	50                   	push   eax
c0014364:	57                   	push   edi
c0014365:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014368:	83 c4 10             	add    esp,0x10
c001436b:	83 c3 15             	add    ebx,0x15
c001436e:	c1 e3 04             	shl    ebx,0x4
c0014371:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014375:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c001437c:	31 db                	xor    ebx,ebx
c001437e:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014382:	85 c0                	test   eax,eax
c0014384:	74 13                	je     c0014399 <int_handler+0x7c>
c0014386:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014389:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c001438d:	74 1c                	je     c00143ab <int_handler+0x8e>
c001438f:	83 ec 08             	sub    esp,0x8
c0014392:	52                   	push   edx
c0014393:	56                   	push   esi
c0014394:	ff d0                	call   eax
c0014396:	83 c4 10             	add    esp,0x10
c0014399:	43                   	inc    ebx
c001439a:	83 fb 04             	cmp    ebx,0x4
c001439d:	75 df                	jne    c001437e <int_handler+0x61>
c001439f:	83 c4 0c             	add    esp,0xc
c00143a2:	31 c0                	xor    eax,eax
c00143a4:	5b                   	pop    ebx
c00143a5:	31 d2                	xor    edx,edx
c00143a7:	5e                   	pop    esi
c00143a8:	5f                   	pop    edi
c00143a9:	5d                   	pop    ebp
c00143aa:	c3                   	ret    
c00143ab:	83 ec 08             	sub    esp,0x8
c00143ae:	52                   	push   edx
c00143af:	56                   	push   esi
c00143b0:	ff d0                	call   eax
c00143b2:	83 c4 10             	add    esp,0x10
c00143b5:	83 c4 0c             	add    esp,0xc
c00143b8:	5b                   	pop    ebx
c00143b9:	5e                   	pop    esi
c00143ba:	5f                   	pop    edi
c00143bb:	5d                   	pop    ebp
c00143bc:	c3                   	ret    
c00143bd:	90                   	nop

c00143be <InterruptController::InterruptController(char const*)>:
c00143be:	83 ec 1c             	sub    esp,0x1c
c00143c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143c5:	83 ec 08             	sub    esp,0x8
c00143c8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00143cc:	50                   	push   eax
c00143cd:	e8 94 f8 ff ff       	call   c0013c66 <Device::Device(char const*)>
c00143d2:	83 c4 10             	add    esp,0x10
c00143d5:	ba 7c 97 02 c0       	mov    edx,0xc002977c
c00143da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143de:	89 10                	mov    DWORD PTR [eax],edx
c00143e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143e4:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c00143ee:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00143f6:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00143fe:	7f 5e                	jg     c001445e <InterruptController::InterruptController(char const*)+0xa0>
c0014400:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014408:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c001440d:	7f 49                	jg     c0014458 <InterruptController::InterruptController(char const*)+0x9a>
c001440f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014413:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014417:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001441e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014422:	01 ca                	add    edx,ecx
c0014424:	83 c2 54             	add    edx,0x54
c0014427:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001442f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014433:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014437:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001443e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014442:	01 ca                	add    edx,ecx
c0014444:	81 c2 54 04 00 00    	add    edx,0x454
c001444a:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014452:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014456:	eb b0                	jmp    c0014408 <InterruptController::InterruptController(char const*)+0x4a>
c0014458:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001445c:	eb 98                	jmp    c00143f6 <InterruptController::InterruptController(char const*)+0x38>
c001445e:	90                   	nop
c001445f:	83 c4 1c             	add    esp,0x1c
c0014462:	c3                   	ret    
c0014463:	90                   	nop

c0014464 <InterruptController::~InterruptController()>:
c0014464:	83 ec 0c             	sub    esp,0xc
c0014467:	ba 7c 97 02 c0       	mov    edx,0xc002977c
c001446c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014470:	89 10                	mov    DWORD PTR [eax],edx
c0014472:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014476:	83 ec 0c             	sub    esp,0xc
c0014479:	50                   	push   eax
c001447a:	e8 c9 f4 ff ff       	call   c0013948 <Device::~Device()>
c001447f:	83 c4 10             	add    esp,0x10
c0014482:	90                   	nop
c0014483:	83 c4 0c             	add    esp,0xc
c0014486:	c3                   	ret    
c0014487:	90                   	nop

c0014488 <InterruptController::~InterruptController()>:
c0014488:	83 ec 0c             	sub    esp,0xc
c001448b:	83 ec 0c             	sub    esp,0xc
c001448e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014492:	e8 cd ff ff ff       	call   c0014464 <InterruptController::~InterruptController()>
c0014497:	83 c4 10             	add    esp,0x10
c001449a:	83 ec 08             	sub    esp,0x8
c001449d:	68 58 21 00 00       	push   0x2158
c00144a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144a6:	e8 fc e0 ff ff       	call   c00125a7 <operator delete(void*, unsigned long)>
c00144ab:	83 c4 10             	add    esp,0x10
c00144ae:	83 c4 0c             	add    esp,0xc
c00144b1:	c3                   	ret    

c00144b2 <displayDebugInfo(regs*)>:
c00144b2:	55                   	push   ebp
c00144b3:	57                   	push   edi
c00144b4:	56                   	push   esi
c00144b5:	53                   	push   ebx
c00144b6:	83 ec 24             	sub    esp,0x24
c00144b9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00144bd:	0f 20 c2             	mov    edx,cr0
c00144c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00144c4:	0f 20 d7             	mov    edi,cr2
c00144c7:	0f 20 de             	mov    esi,cr3
c00144ca:	0f 20 e5             	mov    ebp,cr4
c00144cd:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00144d0:	68 82 95 02 c0       	push   0xc0029582
c00144d5:	e8 ad e1 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c00144da:	58                   	pop    eax
c00144db:	5a                   	pop    edx
c00144dc:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00144df:	68 8d 95 02 c0       	push   0xc002958d
c00144e4:	e8 9e e1 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c00144e9:	59                   	pop    ecx
c00144ea:	58                   	pop    eax
c00144eb:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00144ee:	68 98 95 02 c0       	push   0xc0029598
c00144f3:	e8 8f e1 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c00144f8:	58                   	pop    eax
c00144f9:	5a                   	pop    edx
c00144fa:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00144fd:	68 a3 95 02 c0       	push   0xc00295a3
c0014502:	e8 80 e1 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0014507:	59                   	pop    ecx
c0014508:	58                   	pop    eax
c0014509:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001450c:	68 ae 95 02 c0       	push   0xc00295ae
c0014511:	e8 71 e1 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0014516:	58                   	pop    eax
c0014517:	5a                   	pop    edx
c0014518:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c001451b:	68 b9 95 02 c0       	push   0xc00295b9
c0014520:	e8 62 e1 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0014525:	59                   	pop    ecx
c0014526:	58                   	pop    eax
c0014527:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001452a:	68 c4 95 02 c0       	push   0xc00295c4
c001452f:	e8 53 e1 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0014534:	58                   	pop    eax
c0014535:	5a                   	pop    edx
c0014536:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014539:	68 cf 95 02 c0       	push   0xc00295cf
c001453e:	e8 44 e1 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0014543:	59                   	pop    ecx
c0014544:	58                   	pop    eax
c0014545:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014548:	68 da 95 02 c0       	push   0xc00295da
c001454d:	e8 35 e1 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0014552:	58                   	pop    eax
c0014553:	5a                   	pop    edx
c0014554:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014557:	68 e9 95 02 c0       	push   0xc00295e9
c001455c:	e8 26 e1 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0014561:	59                   	pop    ecx
c0014562:	58                   	pop    eax
c0014563:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014566:	68 f4 95 02 c0       	push   0xc00295f4
c001456b:	e8 17 e1 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0014570:	58                   	pop    eax
c0014571:	5a                   	pop    edx
c0014572:	57                   	push   edi
c0014573:	68 ff 95 02 c0       	push   0xc00295ff
c0014578:	e8 0a e1 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001457d:	59                   	pop    ecx
c001457e:	58                   	pop    eax
c001457f:	56                   	push   esi
c0014580:	68 0a 96 02 c0       	push   0xc002960a
c0014585:	e8 fd e0 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001458a:	58                   	pop    eax
c001458b:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c0014590:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014596:	e8 ae c2 ff ff       	call   c0010849 <setActiveTerminal(VgaText*)>
c001459b:	58                   	pop    eax
c001459c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001459f:	5a                   	pop    edx
c00145a0:	c1 e0 05             	shl    eax,0x5
c00145a3:	05 00 b8 02 c0       	add    eax,0xc002b800
c00145a8:	50                   	push   eax
c00145a9:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00145ae:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145b4:	e8 af c6 ff ff       	call   c0010c68 <VgaText::puts(char const*)>
c00145b9:	59                   	pop    ecx
c00145ba:	58                   	pop    eax
c00145bb:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00145c0:	68 15 96 02 c0       	push   0xc0029615
c00145c5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145cb:	e8 98 c6 ff ff       	call   c0010c68 <VgaText::puts(char const*)>
c00145d0:	58                   	pop    eax
c00145d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00145d6:	5a                   	pop    edx
c00145d7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00145da:	83 c0 0c             	add    eax,0xc
c00145dd:	50                   	push   eax
c00145de:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00145e3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145e9:	e8 7a c6 ff ff       	call   c0010c68 <VgaText::puts(char const*)>
c00145ee:	59                   	pop    ecx
c00145ef:	58                   	pop    eax
c00145f0:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00145f5:	68 1e 96 02 c0       	push   0xc002961e
c00145fa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014600:	e8 63 c6 ff ff       	call   c0010c68 <VgaText::puts(char const*)>
c0014605:	58                   	pop    eax
c0014606:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c001460b:	5a                   	pop    edx
c001460c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001460f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014615:	e8 74 c6 ff ff       	call   c0010c8e <VgaText::putx(unsigned int)>
c001461a:	59                   	pop    ecx
c001461b:	58                   	pop    eax
c001461c:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c0014621:	68 26 96 02 c0       	push   0xc0029626
c0014626:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001462c:	e8 37 c6 ff ff       	call   c0010c68 <VgaText::puts(char const*)>
c0014631:	58                   	pop    eax
c0014632:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c0014637:	5a                   	pop    edx
c0014638:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001463b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014641:	e8 48 c6 ff ff       	call   c0010c8e <VgaText::putx(unsigned int)>
c0014646:	59                   	pop    ecx
c0014647:	58                   	pop    eax
c0014648:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c001464d:	68 2e 96 02 c0       	push   0xc002962e
c0014652:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014658:	e8 0b c6 ff ff       	call   c0010c68 <VgaText::puts(char const*)>
c001465d:	58                   	pop    eax
c001465e:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c0014663:	5a                   	pop    edx
c0014664:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014667:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001466d:	e8 1c c6 ff ff       	call   c0010c8e <VgaText::putx(unsigned int)>
c0014672:	59                   	pop    ecx
c0014673:	58                   	pop    eax
c0014674:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c0014679:	68 36 96 02 c0       	push   0xc0029636
c001467e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014684:	e8 df c5 ff ff       	call   c0010c68 <VgaText::puts(char const*)>
c0014689:	58                   	pop    eax
c001468a:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c001468f:	5a                   	pop    edx
c0014690:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014693:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014699:	e8 f0 c5 ff ff       	call   c0010c8e <VgaText::putx(unsigned int)>
c001469e:	59                   	pop    ecx
c001469f:	58                   	pop    eax
c00146a0:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00146a5:	68 3e 96 02 c0       	push   0xc002963e
c00146aa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146b0:	e8 b3 c5 ff ff       	call   c0010c68 <VgaText::puts(char const*)>
c00146b5:	58                   	pop    eax
c00146b6:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00146bb:	5a                   	pop    edx
c00146bc:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00146bf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146c5:	e8 c4 c5 ff ff       	call   c0010c8e <VgaText::putx(unsigned int)>
c00146ca:	59                   	pop    ecx
c00146cb:	58                   	pop    eax
c00146cc:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00146d1:	68 46 96 02 c0       	push   0xc0029646
c00146d6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146dc:	e8 87 c5 ff ff       	call   c0010c68 <VgaText::puts(char const*)>
c00146e1:	58                   	pop    eax
c00146e2:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00146e7:	5a                   	pop    edx
c00146e8:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00146eb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146f1:	e8 98 c5 ff ff       	call   c0010c8e <VgaText::putx(unsigned int)>
c00146f6:	59                   	pop    ecx
c00146f7:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00146fc:	5b                   	pop    ebx
c00146fd:	68 4e 96 02 c0       	push   0xc002964e
c0014702:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014708:	e8 5b c5 ff ff       	call   c0010c68 <VgaText::puts(char const*)>
c001470d:	58                   	pop    eax
c001470e:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c0014713:	5a                   	pop    edx
c0014714:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014718:	52                   	push   edx
c0014719:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001471f:	e8 6a c5 ff ff       	call   c0010c8e <VgaText::putx(unsigned int)>
c0014724:	59                   	pop    ecx
c0014725:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c001472a:	5b                   	pop    ebx
c001472b:	68 57 96 02 c0       	push   0xc0029657
c0014730:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014736:	e8 2d c5 ff ff       	call   c0010c68 <VgaText::puts(char const*)>
c001473b:	58                   	pop    eax
c001473c:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c0014741:	5a                   	pop    edx
c0014742:	57                   	push   edi
c0014743:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014749:	e8 40 c5 ff ff       	call   c0010c8e <VgaText::putx(unsigned int)>
c001474e:	59                   	pop    ecx
c001474f:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c0014754:	5b                   	pop    ebx
c0014755:	68 5f 96 02 c0       	push   0xc002965f
c001475a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014760:	e8 03 c5 ff ff       	call   c0010c68 <VgaText::puts(char const*)>
c0014765:	5f                   	pop    edi
c0014766:	58                   	pop    eax
c0014767:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c001476c:	56                   	push   esi
c001476d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014773:	e8 16 c5 ff ff       	call   c0010c8e <VgaText::putx(unsigned int)>
c0014778:	58                   	pop    eax
c0014779:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c001477e:	5a                   	pop    edx
c001477f:	68 67 96 02 c0       	push   0xc0029667
c0014784:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001478a:	e8 d9 c4 ff ff       	call   c0010c68 <VgaText::puts(char const*)>
c001478f:	59                   	pop    ecx
c0014790:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c0014795:	5b                   	pop    ebx
c0014796:	55                   	push   ebp
c0014797:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001479d:	e8 ec c4 ff ff       	call   c0010c8e <VgaText::putx(unsigned int)>
c00147a2:	5e                   	pop    esi
c00147a3:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00147a8:	5f                   	pop    edi
c00147a9:	68 6f 96 02 c0       	push   0xc002966f
c00147ae:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147b4:	e8 af c4 ff ff       	call   c0010c68 <VgaText::puts(char const*)>
c00147b9:	0f 21 c0             	mov    eax,db0
c00147bc:	5d                   	pop    ebp
c00147bd:	5a                   	pop    edx
c00147be:	50                   	push   eax
c00147bf:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00147c4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147ca:	e8 bf c4 ff ff       	call   c0010c8e <VgaText::putx(unsigned int)>
c00147cf:	59                   	pop    ecx
c00147d0:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00147d5:	5b                   	pop    ebx
c00147d6:	68 78 96 02 c0       	push   0xc0029678
c00147db:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147e1:	e8 82 c4 ff ff       	call   c0010c68 <VgaText::puts(char const*)>
c00147e6:	0f 21 c8             	mov    eax,db1
c00147e9:	5e                   	pop    esi
c00147ea:	5f                   	pop    edi
c00147eb:	50                   	push   eax
c00147ec:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00147f1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147f7:	e8 92 c4 ff ff       	call   c0010c8e <VgaText::putx(unsigned int)>
c00147fc:	5d                   	pop    ebp
c00147fd:	58                   	pop    eax
c00147fe:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c0014803:	68 80 96 02 c0       	push   0xc0029680
c0014808:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001480e:	e8 55 c4 ff ff       	call   c0010c68 <VgaText::puts(char const*)>
c0014813:	0f 21 d0             	mov    eax,db2
c0014816:	5a                   	pop    edx
c0014817:	59                   	pop    ecx
c0014818:	50                   	push   eax
c0014819:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c001481e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014824:	e8 65 c4 ff ff       	call   c0010c8e <VgaText::putx(unsigned int)>
c0014829:	5b                   	pop    ebx
c001482a:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c001482f:	5e                   	pop    esi
c0014830:	68 88 96 02 c0       	push   0xc0029688
c0014835:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001483b:	e8 28 c4 ff ff       	call   c0010c68 <VgaText::puts(char const*)>
c0014840:	0f 21 d8             	mov    eax,db3
c0014843:	5f                   	pop    edi
c0014844:	5d                   	pop    ebp
c0014845:	50                   	push   eax
c0014846:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c001484b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014851:	e8 38 c4 ff ff       	call   c0010c8e <VgaText::putx(unsigned int)>
c0014856:	58                   	pop    eax
c0014857:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c001485c:	5a                   	pop    edx
c001485d:	68 90 96 02 c0       	push   0xc0029690
c0014862:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014868:	e8 fb c3 ff ff       	call   c0010c68 <VgaText::puts(char const*)>
c001486d:	0f 21 f0             	mov    eax,db6
c0014870:	59                   	pop    ecx
c0014871:	5b                   	pop    ebx
c0014872:	50                   	push   eax
c0014873:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c0014878:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001487e:	e8 0b c4 ff ff       	call   c0010c8e <VgaText::putx(unsigned int)>
c0014883:	5e                   	pop    esi
c0014884:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c0014889:	5f                   	pop    edi
c001488a:	68 98 96 02 c0       	push   0xc0029698
c001488f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014895:	e8 ce c3 ff ff       	call   c0010c68 <VgaText::puts(char const*)>
c001489a:	0f 21 f8             	mov    eax,db7
c001489d:	5d                   	pop    ebp
c001489e:	5a                   	pop    edx
c001489f:	50                   	push   eax
c00148a0:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00148a5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148ab:	e8 de c3 ff ff       	call   c0010c8e <VgaText::putx(unsigned int)>
c00148b0:	fa                   	cli    
c00148b1:	f4                   	hlt    
c00148b2:	83 c4 10             	add    esp,0x10
c00148b5:	eb fe                	jmp    c00148b5 <displayDebugInfo(regs*)+0x403>

c00148b7 <x87EmulHandler(regs*, void*)>:
c00148b7:	53                   	push   ebx
c00148b8:	83 ec 14             	sub    esp,0x14
c00148bb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00148bf:	53                   	push   ebx
c00148c0:	e8 ff 9f 00 00       	call   c001e8c4 <Vm::x87Handler(regs*)>
c00148c5:	83 c4 10             	add    esp,0x10
c00148c8:	84 c0                	test   al,al
c00148ca:	74 05                	je     c00148d1 <x87EmulHandler(regs*, void*)+0x1a>
c00148cc:	83 c4 08             	add    esp,0x8
c00148cf:	5b                   	pop    ebx
c00148d0:	c3                   	ret    
c00148d1:	83 ec 0c             	sub    esp,0xc
c00148d4:	68 a0 96 02 c0       	push   0xc00296a0
c00148d9:	e8 a9 dd ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c00148de:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00148e1:	e8 cc fb ff ff       	call   c00144b2 <displayDebugInfo(regs*)>

c00148e6 <gpFault(regs*, void*)>:
c00148e6:	53                   	push   ebx
c00148e7:	83 ec 14             	sub    esp,0x14
c00148ea:	c7 05 f0 c9 02 c0 41 dc 01 c0 	mov    DWORD PTR ds:0xc002c9f0,0xc001dc41
c00148f4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00148f8:	53                   	push   ebx
c00148f9:	e8 43 93 00 00       	call   c001dc41 <Vm::faultHandler(regs*)>
c00148fe:	83 c4 10             	add    esp,0x10
c0014901:	84 c0                	test   al,al
c0014903:	74 05                	je     c001490a <gpFault(regs*, void*)+0x24>
c0014905:	83 c4 08             	add    esp,0x8
c0014908:	5b                   	pop    ebx
c0014909:	c3                   	ret    
c001490a:	83 ec 0c             	sub    esp,0xc
c001490d:	68 b6 96 02 c0       	push   0xc00296b6
c0014912:	e8 70 dd ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0014917:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001491a:	e8 93 fb ff ff       	call   c00144b2 <displayDebugInfo(regs*)>

c001491f <pgFault(regs*, void*)>:
c001491f:	83 ec 18             	sub    esp,0x18
c0014922:	68 d1 96 02 c0       	push   0xc00296d1
c0014927:	e8 5b dd ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001492c:	58                   	pop    eax
c001492d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014931:	e8 7c fb ff ff       	call   c00144b2 <displayDebugInfo(regs*)>

c0014936 <otherISRHandler(regs*, void*)>:
c0014936:	53                   	push   ebx
c0014937:	83 ec 0c             	sub    esp,0xc
c001493a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001493e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014941:	50                   	push   eax
c0014942:	50                   	push   eax
c0014943:	68 de 96 02 c0       	push   0xc00296de
c0014948:	e8 3a dd ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001494d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014950:	e8 5d fb ff ff       	call   c00144b2 <displayDebugInfo(regs*)>

c0014955 <opcodeFault(regs*, void*)>:
c0014955:	55                   	push   ebp
c0014956:	89 e5                	mov    ebp,esp
c0014958:	56                   	push   esi
c0014959:	53                   	push   ebx
c001495a:	83 ec 40             	sub    esp,0x40
c001495d:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0014962:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014968:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c001496e:	84 c0                	test   al,al
c0014970:	74 24                	je     c0014996 <opcodeFault(regs*, void*)+0x41>
c0014972:	83 ec 0c             	sub    esp,0xc
c0014975:	68 fc 96 02 c0       	push   0xc00296fc
c001497a:	e8 08 dd ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001497f:	83 c4 10             	add    esp,0x10
c0014982:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014985:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014988:	8d 50 19             	lea    edx,[eax+0x19]
c001498b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001498e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014991:	e9 77 05 00 00       	jmp    c0014f0d <opcodeFault(regs*, void*)+0x5b8>
c0014996:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014999:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001499c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001499f:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c00149a3:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c00149a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149aa:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00149ad:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00149b0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00149b3:	8a 00                	mov    al,BYTE PTR [eax]
c00149b5:	3c f0                	cmp    al,0xf0
c00149b7:	75 17                	jne    c00149d0 <opcodeFault(regs*, void*)+0x7b>
c00149b9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00149bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149bf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00149c2:	8d 50 01             	lea    edx,[eax+0x1]
c00149c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149c8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00149cb:	e9 da 00 00 00       	jmp    c0014aaa <opcodeFault(regs*, void*)+0x155>
c00149d0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00149d3:	8a 00                	mov    al,BYTE PTR [eax]
c00149d5:	3c f2                	cmp    al,0xf2
c00149d7:	74 09                	je     c00149e2 <opcodeFault(regs*, void*)+0x8d>
c00149d9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00149dc:	8a 00                	mov    al,BYTE PTR [eax]
c00149de:	3c f3                	cmp    al,0xf3
c00149e0:	75 1b                	jne    c00149fd <opcodeFault(regs*, void*)+0xa8>
c00149e2:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00149e6:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00149e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149ec:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00149ef:	8d 50 01             	lea    edx,[eax+0x1]
c00149f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149f5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00149f8:	e9 ad 00 00 00       	jmp    c0014aaa <opcodeFault(regs*, void*)+0x155>
c00149fd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a00:	8a 00                	mov    al,BYTE PTR [eax]
c0014a02:	3c 66                	cmp    al,0x66
c0014a04:	75 1f                	jne    c0014a25 <opcodeFault(regs*, void*)+0xd0>
c0014a06:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014a0a:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014a0e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a14:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a17:	8d 50 01             	lea    edx,[eax+0x1]
c0014a1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a1d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a20:	e9 85 00 00 00       	jmp    c0014aaa <opcodeFault(regs*, void*)+0x155>
c0014a25:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a28:	8a 00                	mov    al,BYTE PTR [eax]
c0014a2a:	3c 67                	cmp    al,0x67
c0014a2c:	75 18                	jne    c0014a46 <opcodeFault(regs*, void*)+0xf1>
c0014a2e:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014a32:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a38:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a3b:	8d 50 01             	lea    edx,[eax+0x1]
c0014a3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a41:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a44:	eb 64                	jmp    c0014aaa <opcodeFault(regs*, void*)+0x155>
c0014a46:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a49:	8a 00                	mov    al,BYTE PTR [eax]
c0014a4b:	3c 2e                	cmp    al,0x2e
c0014a4d:	74 09                	je     c0014a58 <opcodeFault(regs*, void*)+0x103>
c0014a4f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a52:	8a 00                	mov    al,BYTE PTR [eax]
c0014a54:	3c 3e                	cmp    al,0x3e
c0014a56:	75 18                	jne    c0014a70 <opcodeFault(regs*, void*)+0x11b>
c0014a58:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014a5c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a62:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a65:	8d 50 01             	lea    edx,[eax+0x1]
c0014a68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a6b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a6e:	eb 3a                	jmp    c0014aaa <opcodeFault(regs*, void*)+0x155>
c0014a70:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a73:	8a 00                	mov    al,BYTE PTR [eax]
c0014a75:	3c 36                	cmp    al,0x36
c0014a77:	74 1b                	je     c0014a94 <opcodeFault(regs*, void*)+0x13f>
c0014a79:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a7c:	8a 00                	mov    al,BYTE PTR [eax]
c0014a7e:	3c 26                	cmp    al,0x26
c0014a80:	74 12                	je     c0014a94 <opcodeFault(regs*, void*)+0x13f>
c0014a82:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a85:	8a 00                	mov    al,BYTE PTR [eax]
c0014a87:	3c 64                	cmp    al,0x64
c0014a89:	74 09                	je     c0014a94 <opcodeFault(regs*, void*)+0x13f>
c0014a8b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a8e:	8a 00                	mov    al,BYTE PTR [eax]
c0014a90:	3c 65                	cmp    al,0x65
c0014a92:	75 16                	jne    c0014aaa <opcodeFault(regs*, void*)+0x155>
c0014a94:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014a98:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a9e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014aa1:	8d 50 01             	lea    edx,[eax+0x1]
c0014aa4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aa7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014aaa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014aad:	8a 00                	mov    al,BYTE PTR [eax]
c0014aaf:	3c 0f                	cmp    al,0xf
c0014ab1:	0f 85 ad 00 00 00    	jne    c0014b64 <opcodeFault(regs*, void*)+0x20f>
c0014ab7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014aba:	40                   	inc    eax
c0014abb:	8a 00                	mov    al,BYTE PTR [eax]
c0014abd:	3c c2                	cmp    al,0xc2
c0014abf:	74 0e                	je     c0014acf <opcodeFault(regs*, void*)+0x17a>
c0014ac1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ac4:	40                   	inc    eax
c0014ac5:	8a 00                	mov    al,BYTE PTR [eax]
c0014ac7:	3c c3                	cmp    al,0xc3
c0014ac9:	0f 85 95 00 00 00    	jne    c0014b64 <opcodeFault(regs*, void*)+0x20f>
c0014acf:	83 ec 0c             	sub    esp,0xc
c0014ad2:	68 1f 97 02 c0       	push   0xc002971f
c0014ad7:	e8 ab db ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0014adc:	83 c4 10             	add    esp,0x10
c0014adf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ae2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ae5:	8d 50 01             	lea    edx,[eax+0x1]
c0014ae8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aeb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014aee:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014af1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014af4:	8a 00                	mov    al,BYTE PTR [eax]
c0014af6:	8d 50 fe             	lea    edx,[eax-0x2]
c0014af9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014afc:	88 10                	mov    BYTE PTR [eax],dl
c0014afe:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014b01:	50                   	push   eax
c0014b02:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014b05:	50                   	push   eax
c0014b06:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014b09:	50                   	push   eax
c0014b0a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014b0d:	e8 c0 44 00 00       	call   c0018fd2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014b12:	83 c4 10             	add    esp,0x10
c0014b15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b18:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b1b:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014b1e:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014b21:	01 d0                	add    eax,edx
c0014b23:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014b26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b29:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b2c:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014b2f:	48                   	dec    eax
c0014b30:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014b33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b36:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014b39:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b3f:	83 ec 04             	sub    esp,0x4
c0014b42:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014b45:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014b48:	50                   	push   eax
c0014b49:	e8 1b b6 fe ff       	call   c0000169 <voodooXADD>
c0014b4e:	83 c4 10             	add    esp,0x10
c0014b51:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014b54:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014b57:	01 c2                	add    edx,eax
c0014b59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b5c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b5f:	e9 a9 03 00 00       	jmp    c0014f0d <opcodeFault(regs*, void*)+0x5b8>
c0014b64:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b67:	8a 00                	mov    al,BYTE PTR [eax]
c0014b69:	3c 0f                	cmp    al,0xf
c0014b6b:	0f 85 8b 01 00 00    	jne    c0014cfc <opcodeFault(regs*, void*)+0x3a7>
c0014b71:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b74:	40                   	inc    eax
c0014b75:	8a 00                	mov    al,BYTE PTR [eax]
c0014b77:	3c c7                	cmp    al,0xc7
c0014b79:	0f 86 7d 01 00 00    	jbe    c0014cfc <opcodeFault(regs*, void*)+0x3a7>
c0014b7f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b82:	40                   	inc    eax
c0014b83:	8a 00                	mov    al,BYTE PTR [eax]
c0014b85:	3c cf                	cmp    al,0xcf
c0014b87:	0f 87 6f 01 00 00    	ja     c0014cfc <opcodeFault(regs*, void*)+0x3a7>
c0014b8d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b90:	40                   	inc    eax
c0014b91:	8a 00                	mov    al,BYTE PTR [eax]
c0014b93:	83 c0 38             	add    eax,0x38
c0014b96:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014b99:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014b9d:	75 0b                	jne    c0014baa <opcodeFault(regs*, void*)+0x255>
c0014b9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ba2:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014ba5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014ba8:	eb 75                	jmp    c0014c1f <opcodeFault(regs*, void*)+0x2ca>
c0014baa:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014bae:	75 0b                	jne    c0014bbb <opcodeFault(regs*, void*)+0x266>
c0014bb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bb3:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014bb6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014bb9:	eb 64                	jmp    c0014c1f <opcodeFault(regs*, void*)+0x2ca>
c0014bbb:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014bbf:	75 0b                	jne    c0014bcc <opcodeFault(regs*, void*)+0x277>
c0014bc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bc4:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014bc7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014bca:	eb 53                	jmp    c0014c1f <opcodeFault(regs*, void*)+0x2ca>
c0014bcc:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014bd0:	75 0b                	jne    c0014bdd <opcodeFault(regs*, void*)+0x288>
c0014bd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bd5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014bd8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014bdb:	eb 42                	jmp    c0014c1f <opcodeFault(regs*, void*)+0x2ca>
c0014bdd:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014be1:	75 0b                	jne    c0014bee <opcodeFault(regs*, void*)+0x299>
c0014be3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014be6:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014be9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014bec:	eb 31                	jmp    c0014c1f <opcodeFault(regs*, void*)+0x2ca>
c0014bee:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014bf2:	75 0b                	jne    c0014bff <opcodeFault(regs*, void*)+0x2aa>
c0014bf4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bf7:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014bfa:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014bfd:	eb 20                	jmp    c0014c1f <opcodeFault(regs*, void*)+0x2ca>
c0014bff:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014c03:	75 0b                	jne    c0014c10 <opcodeFault(regs*, void*)+0x2bb>
c0014c05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c08:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014c0b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c0e:	eb 0f                	jmp    c0014c1f <opcodeFault(regs*, void*)+0x2ca>
c0014c10:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014c14:	75 09                	jne    c0014c1f <opcodeFault(regs*, void*)+0x2ca>
c0014c16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c19:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014c1c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c1f:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014c23:	74 10                	je     c0014c35 <opcodeFault(regs*, void*)+0x2e0>
c0014c25:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014c2c:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014c33:	eb 2d                	jmp    c0014c62 <opcodeFault(regs*, void*)+0x30d>
c0014c35:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014c38:	c1 e0 18             	shl    eax,0x18
c0014c3b:	89 c2                	mov    edx,eax
c0014c3d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014c40:	c1 e0 08             	shl    eax,0x8
c0014c43:	25 00 00 ff 00       	and    eax,0xff0000
c0014c48:	09 c2                	or     edx,eax
c0014c4a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014c4d:	c1 e8 08             	shr    eax,0x8
c0014c50:	25 00 ff 00 00       	and    eax,0xff00
c0014c55:	09 c2                	or     edx,eax
c0014c57:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014c5a:	c1 e8 18             	shr    eax,0x18
c0014c5d:	09 d0                	or     eax,edx
c0014c5f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c62:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014c66:	75 0b                	jne    c0014c73 <opcodeFault(regs*, void*)+0x31e>
c0014c68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c6b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c6e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014c71:	eb 75                	jmp    c0014ce8 <opcodeFault(regs*, void*)+0x393>
c0014c73:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014c77:	75 0b                	jne    c0014c84 <opcodeFault(regs*, void*)+0x32f>
c0014c79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c7c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c7f:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014c82:	eb 64                	jmp    c0014ce8 <opcodeFault(regs*, void*)+0x393>
c0014c84:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014c88:	75 0b                	jne    c0014c95 <opcodeFault(regs*, void*)+0x340>
c0014c8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c8d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c90:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014c93:	eb 53                	jmp    c0014ce8 <opcodeFault(regs*, void*)+0x393>
c0014c95:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014c99:	75 0b                	jne    c0014ca6 <opcodeFault(regs*, void*)+0x351>
c0014c9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c9e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014ca1:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014ca4:	eb 42                	jmp    c0014ce8 <opcodeFault(regs*, void*)+0x393>
c0014ca6:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014caa:	75 0b                	jne    c0014cb7 <opcodeFault(regs*, void*)+0x362>
c0014cac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014caf:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014cb2:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014cb5:	eb 31                	jmp    c0014ce8 <opcodeFault(regs*, void*)+0x393>
c0014cb7:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014cbb:	75 0b                	jne    c0014cc8 <opcodeFault(regs*, void*)+0x373>
c0014cbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cc0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014cc3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014cc6:	eb 20                	jmp    c0014ce8 <opcodeFault(regs*, void*)+0x393>
c0014cc8:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014ccc:	75 0b                	jne    c0014cd9 <opcodeFault(regs*, void*)+0x384>
c0014cce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cd1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014cd4:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014cd7:	eb 0f                	jmp    c0014ce8 <opcodeFault(regs*, void*)+0x393>
c0014cd9:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014cdd:	75 09                	jne    c0014ce8 <opcodeFault(regs*, void*)+0x393>
c0014cdf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ce2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014ce5:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014ce8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ceb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cee:	8d 50 02             	lea    edx,[eax+0x2]
c0014cf1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cf4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014cf7:	e9 11 02 00 00       	jmp    c0014f0d <opcodeFault(regs*, void*)+0x5b8>
c0014cfc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cff:	8a 00                	mov    al,BYTE PTR [eax]
c0014d01:	3c 0f                	cmp    al,0xf
c0014d03:	0f 85 76 01 00 00    	jne    c0014e7f <opcodeFault(regs*, void*)+0x52a>
c0014d09:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d0c:	40                   	inc    eax
c0014d0d:	8a 00                	mov    al,BYTE PTR [eax]
c0014d0f:	3c c7                	cmp    al,0xc7
c0014d11:	0f 85 68 01 00 00    	jne    c0014e7f <opcodeFault(regs*, void*)+0x52a>
c0014d17:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d1d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d20:	8d 50 01             	lea    edx,[eax+0x1]
c0014d23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d26:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d29:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014d2c:	50                   	push   eax
c0014d2d:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014d30:	50                   	push   eax
c0014d31:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014d34:	50                   	push   eax
c0014d35:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014d38:	e8 95 42 00 00       	call   c0018fd2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014d3d:	83 c4 10             	add    esp,0x10
c0014d40:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014d43:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014d46:	83 f0 01             	xor    eax,0x1
c0014d49:	84 c0                	test   al,al
c0014d4b:	0f 84 2e 01 00 00    	je     c0014e7f <opcodeFault(regs*, void*)+0x52a>
c0014d51:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014d54:	3c 01                	cmp    al,0x1
c0014d56:	0f 85 23 01 00 00    	jne    c0014e7f <opcodeFault(regs*, void*)+0x52a>
c0014d5c:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014d5f:	83 f0 01             	xor    eax,0x1
c0014d62:	84 c0                	test   al,al
c0014d64:	0f 84 15 01 00 00    	je     c0014e7f <opcodeFault(regs*, void*)+0x52a>
c0014d6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d6d:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014d70:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014d73:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0014d7a:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014d7d:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014d80:	89 c2                	mov    edx,eax
c0014d82:	b8 00 00 00 00       	mov    eax,0x0
c0014d87:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014d8a:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014d8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d90:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014d93:	ba 00 00 00 00       	mov    edx,0x0
c0014d98:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0014d9b:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0014d9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014da1:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014da4:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014da7:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0014dae:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014db1:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014db4:	89 c2                	mov    edx,eax
c0014db6:	b8 00 00 00 00       	mov    eax,0x0
c0014dbb:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014dbe:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0014dc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dc4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014dc7:	ba 00 00 00 00       	mov    edx,0x0
c0014dcc:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0014dcf:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0014dd2:	e8 59 7e 00 00       	call   c001cc30 <lockScheduler()>
c0014dd7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014dda:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014ddd:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ddf:	89 c1                	mov    ecx,eax
c0014de1:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0014de4:	89 cb                	mov    ebx,ecx
c0014de6:	89 d0                	mov    eax,edx
c0014de8:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0014deb:	89 c6                	mov    esi,eax
c0014ded:	89 f0                	mov    eax,esi
c0014def:	09 d8                	or     eax,ebx
c0014df1:	85 c0                	test   eax,eax
c0014df3:	75 21                	jne    c0014e16 <opcodeFault(regs*, void*)+0x4c1>
c0014df5:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0014df8:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014dfb:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014dfe:	89 01                	mov    DWORD PTR [ecx],eax
c0014e00:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0014e03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e06:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e09:	83 c8 40             	or     eax,0x40
c0014e0c:	89 c2                	mov    edx,eax
c0014e0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e11:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014e14:	eb 3e                	jmp    c0014e54 <opcodeFault(regs*, void*)+0x4ff>
c0014e16:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014e19:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014e1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e1e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014e21:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014e24:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0014e27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014e2d:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014e30:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014e33:	89 d0                	mov    eax,edx
c0014e35:	31 d2                	xor    edx,edx
c0014e37:	89 c3                	mov    ebx,eax
c0014e39:	89 d6                	mov    esi,edx
c0014e3b:	89 da                	mov    edx,ebx
c0014e3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e40:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014e43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e46:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e49:	83 e0 bf             	and    eax,0xffffffbf
c0014e4c:	89 c2                	mov    edx,eax
c0014e4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e51:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014e54:	e8 d9 7d 00 00       	call   c001cc32 <unlockScheduler()>
c0014e59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e5c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e5f:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0014e62:	01 c2                	add    edx,eax
c0014e64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e67:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e6a:	83 ec 0c             	sub    esp,0xc
c0014e6d:	68 2e 97 02 c0       	push   0xc002972e
c0014e72:	e8 10 d8 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0014e77:	83 c4 10             	add    esp,0x10
c0014e7a:	e9 8e 00 00 00       	jmp    c0014f0d <opcodeFault(regs*, void*)+0x5b8>
c0014e7f:	83 ec 0c             	sub    esp,0xc
c0014e82:	68 41 97 02 c0       	push   0xc0029741
c0014e87:	e8 fb d7 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0014e8c:	83 c4 10             	add    esp,0x10
c0014e8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e92:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014e95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e98:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014e9b:	c1 e0 04             	shl    eax,0x4
c0014e9e:	01 d0                	add    eax,edx
c0014ea0:	83 c0 03             	add    eax,0x3
c0014ea3:	8a 00                	mov    al,BYTE PTR [eax]
c0014ea5:	0f b6 d8             	movzx  ebx,al
c0014ea8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eab:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014eae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eb1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014eb4:	c1 e0 04             	shl    eax,0x4
c0014eb7:	01 d0                	add    eax,edx
c0014eb9:	83 c0 02             	add    eax,0x2
c0014ebc:	8a 00                	mov    al,BYTE PTR [eax]
c0014ebe:	0f b6 c8             	movzx  ecx,al
c0014ec1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ec4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014ec7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eca:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014ecd:	c1 e0 04             	shl    eax,0x4
c0014ed0:	01 d0                	add    eax,edx
c0014ed2:	40                   	inc    eax
c0014ed3:	8a 00                	mov    al,BYTE PTR [eax]
c0014ed5:	0f b6 d0             	movzx  edx,al
c0014ed8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014edb:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0014ede:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ee1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014ee4:	c1 e0 04             	shl    eax,0x4
c0014ee7:	01 f0                	add    eax,esi
c0014ee9:	8a 00                	mov    al,BYTE PTR [eax]
c0014eeb:	0f b6 c0             	movzx  eax,al
c0014eee:	83 ec 0c             	sub    esp,0xc
c0014ef1:	53                   	push   ebx
c0014ef2:	51                   	push   ecx
c0014ef3:	52                   	push   edx
c0014ef4:	50                   	push   eax
c0014ef5:	68 54 97 02 c0       	push   0xc0029754
c0014efa:	e8 88 d7 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0014eff:	83 c4 20             	add    esp,0x20
c0014f02:	83 ec 0c             	sub    esp,0xc
c0014f05:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014f08:	e8 a5 f5 ff ff       	call   c00144b2 <displayDebugInfo(regs*)>
c0014f0d:	8d 65 f8             	lea    esp,[ebp-0x8]
c0014f10:	5b                   	pop    ebx
c0014f11:	5e                   	pop    esi
c0014f12:	5d                   	pop    ebp
c0014f13:	c3                   	ret    

c0014f14 <displayProgramFault(char const*)>:
c0014f14:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f19:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014f1c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014f22:	85 c0                	test   eax,eax
c0014f24:	74 15                	je     c0014f3b <displayProgramFault(char const*)+0x27>
c0014f26:	83 ec 0c             	sub    esp,0xc
c0014f29:	6a 04                	push   0x4
c0014f2b:	6a 0f                	push   0xf
c0014f2d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014f31:	50                   	push   eax
c0014f32:	e8 f3 b9 ff ff       	call   c001092a <VgaText::puts(char const*, VgaColour, VgaColour)>
c0014f37:	83 c4 1c             	add    esp,0x1c
c0014f3a:	c3                   	ret    
c0014f3b:	c3                   	ret    

c0014f3c <setupInterruptController()>:
c0014f3c:	55                   	push   ebp
c0014f3d:	89 e5                	mov    ebp,esp
c0014f3f:	53                   	push   ebx
c0014f40:	83 ec 24             	sub    esp,0x24
c0014f43:	b8 00 00 00 00       	mov    eax,0x0
c0014f48:	85 c0                	test   eax,eax
c0014f4a:	0f 95 c0             	setne  al
c0014f4d:	84 c0                	test   al,al
c0014f4f:	74 5b                	je     c0014fac <setupInterruptController()+0x70>
c0014f51:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0014f58:	83 ec 0c             	sub    esp,0xc
c0014f5b:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0014f5e:	e8 71 a5 ff ff       	call   c000f4d4 <malloc>
c0014f63:	83 c4 10             	add    esp,0x10
c0014f66:	89 c3                	mov    ebx,eax
c0014f68:	83 ec 0c             	sub    esp,0xc
c0014f6b:	53                   	push   ebx
c0014f6c:	e8 c3 f2 00 00       	call   c0024234 <APIC::APIC()>
c0014f71:	83 c4 10             	add    esp,0x10
c0014f74:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0014f77:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0014f7a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014f7d:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f7f:	83 c0 08             	add    eax,0x8
c0014f82:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f84:	6a 00                	push   0x0
c0014f86:	6a 00                	push   0x0
c0014f88:	6a 00                	push   0x0
c0014f8a:	52                   	push   edx
c0014f8b:	ff d0                	call   eax
c0014f8d:	83 c4 10             	add    esp,0x10
c0014f90:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0014f95:	83 ec 08             	sub    esp,0x8
c0014f98:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0014f9b:	50                   	push   eax
c0014f9c:	e8 d5 ea ff ff       	call   c0013a76 <Device::addChild(Device*)>
c0014fa1:	83 c4 10             	add    esp,0x10
c0014fa4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014fa7:	e9 52 03 00 00       	jmp    c00152fe <setupInterruptController()+0x3c2>
c0014fac:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0014fb1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0014fb7:	83 e0 01             	and    eax,0x1
c0014fba:	84 c0                	test   al,al
c0014fbc:	0f 95 c0             	setne  al
c0014fbf:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0014fc2:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0014fc9:	83 ec 0c             	sub    esp,0xc
c0014fcc:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014fcf:	e8 00 a5 ff ff       	call   c000f4d4 <malloc>
c0014fd4:	83 c4 10             	add    esp,0x10
c0014fd7:	89 c3                	mov    ebx,eax
c0014fd9:	83 ec 0c             	sub    esp,0xc
c0014fdc:	53                   	push   ebx
c0014fdd:	e8 aa f7 00 00       	call   c002478c <PIC::PIC()>
c0014fe2:	83 c4 10             	add    esp,0x10
c0014fe5:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0014fe8:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0014feb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fee:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ff0:	83 c0 08             	add    eax,0x8
c0014ff3:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ff5:	6a 00                	push   0x0
c0014ff7:	6a 00                	push   0x0
c0014ff9:	6a 00                	push   0x0
c0014ffb:	52                   	push   edx
c0014ffc:	ff d0                	call   eax
c0014ffe:	83 c4 10             	add    esp,0x10
c0015001:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015005:	74 73                	je     c001507a <setupInterruptController()+0x13e>
c0015007:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001500a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001500d:	8b 00                	mov    eax,DWORD PTR [eax]
c001500f:	83 c0 0c             	add    eax,0xc
c0015012:	8b 00                	mov    eax,DWORD PTR [eax]
c0015014:	6a 00                	push   0x0
c0015016:	6a 00                	push   0x0
c0015018:	6a 00                	push   0x0
c001501a:	52                   	push   edx
c001501b:	ff d0                	call   eax
c001501d:	83 c4 10             	add    esp,0x10
c0015020:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015024:	74 15                	je     c001503b <setupInterruptController()+0xff>
c0015026:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015029:	8b 00                	mov    eax,DWORD PTR [eax]
c001502b:	83 c0 04             	add    eax,0x4
c001502e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015030:	83 ec 0c             	sub    esp,0xc
c0015033:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015036:	ff d0                	call   eax
c0015038:	83 c4 10             	add    esp,0x10
c001503b:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015042:	83 ec 0c             	sub    esp,0xc
c0015045:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015048:	e8 87 a4 ff ff       	call   c000f4d4 <malloc>
c001504d:	83 c4 10             	add    esp,0x10
c0015050:	89 c3                	mov    ebx,eax
c0015052:	83 ec 0c             	sub    esp,0xc
c0015055:	53                   	push   ebx
c0015056:	e8 d9 f1 00 00       	call   c0024234 <APIC::APIC()>
c001505b:	83 c4 10             	add    esp,0x10
c001505e:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015061:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015064:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015067:	8b 00                	mov    eax,DWORD PTR [eax]
c0015069:	83 c0 08             	add    eax,0x8
c001506c:	8b 00                	mov    eax,DWORD PTR [eax]
c001506e:	6a 00                	push   0x0
c0015070:	6a 00                	push   0x0
c0015072:	6a 00                	push   0x0
c0015074:	52                   	push   edx
c0015075:	ff d0                	call   eax
c0015077:	83 c4 10             	add    esp,0x10
c001507a:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c001507f:	83 ec 08             	sub    esp,0x8
c0015082:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015085:	50                   	push   eax
c0015086:	e8 eb e9 ff ff       	call   c0013a76 <Device::addChild(Device*)>
c001508b:	83 c4 10             	add    esp,0x10
c001508e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015091:	8b 00                	mov    eax,DWORD PTR [eax]
c0015093:	83 c0 24             	add    eax,0x24
c0015096:	8b 00                	mov    eax,DWORD PTR [eax]
c0015098:	6a 00                	push   0x0
c001509a:	68 36 49 01 c0       	push   0xc0014936
c001509f:	6a 00                	push   0x0
c00150a1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00150a4:	ff d0                	call   eax
c00150a6:	83 c4 10             	add    esp,0x10
c00150a9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00150ae:	83 c0 24             	add    eax,0x24
c00150b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00150b3:	6a 00                	push   0x0
c00150b5:	68 36 49 01 c0       	push   0xc0014936
c00150ba:	6a 01                	push   0x1
c00150bc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00150bf:	ff d0                	call   eax
c00150c1:	83 c4 10             	add    esp,0x10
c00150c4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00150c9:	83 c0 24             	add    eax,0x24
c00150cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00150ce:	6a 00                	push   0x0
c00150d0:	68 0f 43 01 c0       	push   0xc001430f
c00150d5:	6a 02                	push   0x2
c00150d7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00150da:	ff d0                	call   eax
c00150dc:	83 c4 10             	add    esp,0x10
c00150df:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00150e4:	83 c0 24             	add    eax,0x24
c00150e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00150e9:	6a 00                	push   0x0
c00150eb:	68 36 49 01 c0       	push   0xc0014936
c00150f0:	6a 03                	push   0x3
c00150f2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00150f5:	ff d0                	call   eax
c00150f7:	83 c4 10             	add    esp,0x10
c00150fa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00150ff:	83 c0 24             	add    eax,0x24
c0015102:	8b 00                	mov    eax,DWORD PTR [eax]
c0015104:	6a 00                	push   0x0
c0015106:	68 36 49 01 c0       	push   0xc0014936
c001510b:	6a 04                	push   0x4
c001510d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015110:	ff d0                	call   eax
c0015112:	83 c4 10             	add    esp,0x10
c0015115:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015118:	8b 00                	mov    eax,DWORD PTR [eax]
c001511a:	83 c0 24             	add    eax,0x24
c001511d:	8b 00                	mov    eax,DWORD PTR [eax]
c001511f:	6a 00                	push   0x0
c0015121:	68 36 49 01 c0       	push   0xc0014936
c0015126:	6a 05                	push   0x5
c0015128:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001512b:	ff d0                	call   eax
c001512d:	83 c4 10             	add    esp,0x10
c0015130:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015133:	8b 00                	mov    eax,DWORD PTR [eax]
c0015135:	83 c0 24             	add    eax,0x24
c0015138:	8b 00                	mov    eax,DWORD PTR [eax]
c001513a:	6a 00                	push   0x0
c001513c:	68 55 49 01 c0       	push   0xc0014955
c0015141:	6a 06                	push   0x6
c0015143:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015146:	ff d0                	call   eax
c0015148:	83 c4 10             	add    esp,0x10
c001514b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001514e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015150:	83 c0 24             	add    eax,0x24
c0015153:	8b 00                	mov    eax,DWORD PTR [eax]
c0015155:	6a 00                	push   0x0
c0015157:	68 b7 48 01 c0       	push   0xc00148b7
c001515c:	6a 07                	push   0x7
c001515e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015161:	ff d0                	call   eax
c0015163:	83 c4 10             	add    esp,0x10
c0015166:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015169:	8b 00                	mov    eax,DWORD PTR [eax]
c001516b:	83 c0 24             	add    eax,0x24
c001516e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015170:	6a 00                	push   0x0
c0015172:	68 2a 41 01 c0       	push   0xc001412a
c0015177:	6a 08                	push   0x8
c0015179:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001517c:	ff d0                	call   eax
c001517e:	83 c4 10             	add    esp,0x10
c0015181:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015184:	8b 00                	mov    eax,DWORD PTR [eax]
c0015186:	83 c0 24             	add    eax,0x24
c0015189:	8b 00                	mov    eax,DWORD PTR [eax]
c001518b:	6a 00                	push   0x0
c001518d:	68 36 49 01 c0       	push   0xc0014936
c0015192:	6a 09                	push   0x9
c0015194:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015197:	ff d0                	call   eax
c0015199:	83 c4 10             	add    esp,0x10
c001519c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001519f:	8b 00                	mov    eax,DWORD PTR [eax]
c00151a1:	83 c0 24             	add    eax,0x24
c00151a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00151a6:	6a 00                	push   0x0
c00151a8:	68 36 49 01 c0       	push   0xc0014936
c00151ad:	6a 0a                	push   0xa
c00151af:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151b2:	ff d0                	call   eax
c00151b4:	83 c4 10             	add    esp,0x10
c00151b7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00151bc:	83 c0 24             	add    eax,0x24
c00151bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00151c1:	6a 00                	push   0x0
c00151c3:	68 36 49 01 c0       	push   0xc0014936
c00151c8:	6a 0b                	push   0xb
c00151ca:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151cd:	ff d0                	call   eax
c00151cf:	83 c4 10             	add    esp,0x10
c00151d2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00151d7:	83 c0 24             	add    eax,0x24
c00151da:	8b 00                	mov    eax,DWORD PTR [eax]
c00151dc:	6a 00                	push   0x0
c00151de:	68 36 49 01 c0       	push   0xc0014936
c00151e3:	6a 0c                	push   0xc
c00151e5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151e8:	ff d0                	call   eax
c00151ea:	83 c4 10             	add    esp,0x10
c00151ed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00151f2:	83 c0 24             	add    eax,0x24
c00151f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00151f7:	6a 00                	push   0x0
c00151f9:	68 e6 48 01 c0       	push   0xc00148e6
c00151fe:	6a 0d                	push   0xd
c0015200:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015203:	ff d0                	call   eax
c0015205:	83 c4 10             	add    esp,0x10
c0015208:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001520b:	8b 00                	mov    eax,DWORD PTR [eax]
c001520d:	83 c0 24             	add    eax,0x24
c0015210:	8b 00                	mov    eax,DWORD PTR [eax]
c0015212:	6a 00                	push   0x0
c0015214:	68 1f 49 01 c0       	push   0xc001491f
c0015219:	6a 0e                	push   0xe
c001521b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001521e:	ff d0                	call   eax
c0015220:	83 c4 10             	add    esp,0x10
c0015223:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015226:	8b 00                	mov    eax,DWORD PTR [eax]
c0015228:	83 c0 24             	add    eax,0x24
c001522b:	8b 00                	mov    eax,DWORD PTR [eax]
c001522d:	6a 00                	push   0x0
c001522f:	68 36 49 01 c0       	push   0xc0014936
c0015234:	6a 0f                	push   0xf
c0015236:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015239:	ff d0                	call   eax
c001523b:	83 c4 10             	add    esp,0x10
c001523e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015241:	8b 00                	mov    eax,DWORD PTR [eax]
c0015243:	83 c0 24             	add    eax,0x24
c0015246:	8b 00                	mov    eax,DWORD PTR [eax]
c0015248:	6a 00                	push   0x0
c001524a:	68 36 49 01 c0       	push   0xc0014936
c001524f:	6a 10                	push   0x10
c0015251:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015254:	ff d0                	call   eax
c0015256:	83 c4 10             	add    esp,0x10
c0015259:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001525c:	8b 00                	mov    eax,DWORD PTR [eax]
c001525e:	83 c0 24             	add    eax,0x24
c0015261:	8b 00                	mov    eax,DWORD PTR [eax]
c0015263:	6a 00                	push   0x0
c0015265:	68 36 49 01 c0       	push   0xc0014936
c001526a:	6a 11                	push   0x11
c001526c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001526f:	ff d0                	call   eax
c0015271:	83 c4 10             	add    esp,0x10
c0015274:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015277:	8b 00                	mov    eax,DWORD PTR [eax]
c0015279:	83 c0 24             	add    eax,0x24
c001527c:	8b 00                	mov    eax,DWORD PTR [eax]
c001527e:	6a 00                	push   0x0
c0015280:	68 36 49 01 c0       	push   0xc0014936
c0015285:	6a 12                	push   0x12
c0015287:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001528a:	ff d0                	call   eax
c001528c:	83 c4 10             	add    esp,0x10
c001528f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015292:	8b 00                	mov    eax,DWORD PTR [eax]
c0015294:	83 c0 24             	add    eax,0x24
c0015297:	8b 00                	mov    eax,DWORD PTR [eax]
c0015299:	6a 00                	push   0x0
c001529b:	68 36 49 01 c0       	push   0xc0014936
c00152a0:	6a 13                	push   0x13
c00152a2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152a5:	ff d0                	call   eax
c00152a7:	83 c4 10             	add    esp,0x10
c00152aa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00152af:	83 c0 24             	add    eax,0x24
c00152b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00152b4:	6a 00                	push   0x0
c00152b6:	68 36 49 01 c0       	push   0xc0014936
c00152bb:	6a 14                	push   0x14
c00152bd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152c0:	ff d0                	call   eax
c00152c2:	83 c4 10             	add    esp,0x10
c00152c5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00152ca:	83 c0 24             	add    eax,0x24
c00152cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00152cf:	6a 00                	push   0x0
c00152d1:	68 36 49 01 c0       	push   0xc0014936
c00152d6:	6a 1e                	push   0x1e
c00152d8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152db:	ff d0                	call   eax
c00152dd:	83 c4 10             	add    esp,0x10
c00152e0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00152e5:	83 c0 24             	add    eax,0x24
c00152e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00152ea:	6a 00                	push   0x0
c00152ec:	68 c5 b5 01 c0       	push   0xc001b5c5
c00152f1:	6a 60                	push   0x60
c00152f3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152f6:	ff d0                	call   eax
c00152f8:	83 c4 10             	add    esp,0x10
c00152fb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152fe:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015301:	c9                   	leave  
c0015302:	c3                   	ret    
c0015303:	90                   	nop

c0015304 <InterruptController::convertLegacyIRQNumber(int)>:
c0015304:	55                   	push   ebp
c0015305:	89 e5                	mov    ebp,esp
c0015307:	83 ec 08             	sub    esp,0x8
c001530a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001530d:	83 ec 0c             	sub    esp,0xc
c0015310:	50                   	push   eax
c0015311:	e8 4c ea ff ff       	call   c0013d62 <Device::getName()>
c0015316:	83 c4 10             	add    esp,0x10
c0015319:	8a 00                	mov    al,BYTE PTR [eax]
c001531b:	3c 41                	cmp    al,0x41
c001531d:	0f 94 c0             	sete   al
c0015320:	84 c0                	test   al,al
c0015322:	74 28                	je     c001534c <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015324:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015328:	7f 12                	jg     c001533c <InterruptController::convertLegacyIRQNumber(int)+0x38>
c001532a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001532d:	05 a0 ba 02 c0       	add    eax,0xc002baa0
c0015332:	8a 00                	mov    al,BYTE PTR [eax]
c0015334:	0f b6 c0             	movzx  eax,al
c0015337:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001533a:	eb 10                	jmp    c001534c <InterruptController::convertLegacyIRQNumber(int)+0x48>
c001533c:	83 ec 0c             	sub    esp,0xc
c001533f:	68 d4 94 02 c0       	push   0xc00294d4
c0015344:	e8 58 44 00 00       	call   c00197a1 <Krnl::panic(char const*)>
c0015349:	83 c4 10             	add    esp,0x10
c001534c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001534f:	c9                   	leave  
c0015350:	c3                   	ret    
c0015351:	90                   	nop

c0015352 <startGUI(void*)>:
c0015352:	55                   	push   ebp
c0015353:	89 e5                	mov    ebp,esp
c0015355:	53                   	push   ebx
c0015356:	83 ec 04             	sub    esp,0x4
c0015359:	e8 d4 78 00 00       	call   c001cc32 <unlockScheduler()>
c001535e:	8b 1d 48 c8 02 c0    	mov    ebx,DWORD PTR ds:0xc002c848
c0015364:	83 ec 08             	sub    esp,0x8
c0015367:	6a 01                	push   0x1
c0015369:	68 bc 97 02 c0       	push   0xc00297bc
c001536e:	e8 49 72 00 00       	call   c001c5bc <Thr::loadDLL(char const*, bool)>
c0015373:	83 c4 10             	add    esp,0x10
c0015376:	83 ec 08             	sub    esp,0x8
c0015379:	53                   	push   ebx
c001537a:	50                   	push   eax
c001537b:	e8 4b 74 00 00       	call   c001c7cb <Thr::executeDLL(unsigned long, void*)>
c0015380:	83 c4 10             	add    esp,0x10
c0015383:	8b 1d 48 c8 02 c0    	mov    ebx,DWORD PTR ds:0xc002c848
c0015389:	83 ec 08             	sub    esp,0x8
c001538c:	6a 01                	push   0x1
c001538e:	68 d6 97 02 c0       	push   0xc00297d6
c0015393:	e8 24 72 00 00       	call   c001c5bc <Thr::loadDLL(char const*, bool)>
c0015398:	83 c4 10             	add    esp,0x10
c001539b:	83 ec 08             	sub    esp,0x8
c001539e:	53                   	push   ebx
c001539f:	50                   	push   eax
c00153a0:	e8 26 74 00 00       	call   c001c7cb <Thr::executeDLL(unsigned long, void*)>
c00153a5:	83 c4 10             	add    esp,0x10
c00153a8:	90                   	nop
c00153a9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00153ac:	c9                   	leave  
c00153ad:	c3                   	ret    

c00153ae <startGUIVESA(void*)>:
c00153ae:	55                   	push   ebp
c00153af:	89 e5                	mov    ebp,esp
c00153b1:	53                   	push   ebx
c00153b2:	83 ec 04             	sub    esp,0x4
c00153b5:	e8 78 78 00 00       	call   c001cc32 <unlockScheduler()>
c00153ba:	8b 1d 48 c8 02 c0    	mov    ebx,DWORD PTR ds:0xc002c848
c00153c0:	83 ec 08             	sub    esp,0x8
c00153c3:	6a 01                	push   0x1
c00153c5:	68 f0 97 02 c0       	push   0xc00297f0
c00153ca:	e8 ed 71 00 00       	call   c001c5bc <Thr::loadDLL(char const*, bool)>
c00153cf:	83 c4 10             	add    esp,0x10
c00153d2:	83 ec 08             	sub    esp,0x8
c00153d5:	53                   	push   ebx
c00153d6:	50                   	push   eax
c00153d7:	e8 ef 73 00 00       	call   c001c7cb <Thr::executeDLL(unsigned long, void*)>
c00153dc:	83 c4 10             	add    esp,0x10
c00153df:	8b 1d 48 c8 02 c0    	mov    ebx,DWORD PTR ds:0xc002c848
c00153e5:	83 ec 08             	sub    esp,0x8
c00153e8:	6a 01                	push   0x1
c00153ea:	68 d6 97 02 c0       	push   0xc00297d6
c00153ef:	e8 c8 71 00 00       	call   c001c5bc <Thr::loadDLL(char const*, bool)>
c00153f4:	83 c4 10             	add    esp,0x10
c00153f7:	83 ec 08             	sub    esp,0x8
c00153fa:	53                   	push   ebx
c00153fb:	50                   	push   eax
c00153fc:	e8 ca 73 00 00       	call   c001c7cb <Thr::executeDLL(unsigned long, void*)>
c0015401:	83 c4 10             	add    esp,0x10
c0015404:	90                   	nop
c0015405:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015408:	c9                   	leave  
c0015409:	c3                   	ret    

c001540a <sendKeyToTerminal(unsigned char)>:
c001540a:	55                   	push   ebp
c001540b:	89 e5                	mov    ebp,esp
c001540d:	83 ec 28             	sub    esp,0x28
c0015410:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015413:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015416:	a1 24 c9 02 c0       	mov    eax,ds:0xc002c924
c001541b:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c001541f:	83 ec 08             	sub    esp,0x8
c0015422:	52                   	push   edx
c0015423:	50                   	push   eax
c0015424:	e8 3d ba ff ff       	call   c0010e66 <VgaText::receiveKey(unsigned char)>
c0015429:	83 c4 10             	add    esp,0x10
c001542c:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015430:	75 41                	jne    c0015473 <sendKeyToTerminal(unsigned char)+0x69>
c0015432:	e8 20 78 00 00       	call   c001cc57 <lockStuff()>
c0015437:	a1 00 ca 02 c0       	mov    eax,ds:0xc002ca00
c001543c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001543f:	c7 05 00 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ca00,0x0
c0015449:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001544d:	74 1f                	je     c001546e <sendKeyToTerminal(unsigned char)+0x64>
c001544f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015452:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015455:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015458:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001545b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001545e:	83 ec 0c             	sub    esp,0xc
c0015461:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015464:	e8 df 7d 00 00       	call   c001d248 <unblockTask(ThreadControlBlock*)>
c0015469:	83 c4 10             	add    esp,0x10
c001546c:	eb db                	jmp    c0015449 <sendKeyToTerminal(unsigned char)+0x3f>
c001546e:	e8 7e 7b 00 00       	call   c001cff1 <unlockStuff()>
c0015473:	90                   	nop
c0015474:	c9                   	leave  
c0015475:	c3                   	ret    

c0015476 <sendKeyboardToken(KeyboardToken)>:
c0015476:	55                   	push   ebp
c0015477:	89 e5                	mov    ebp,esp
c0015479:	83 ec 18             	sub    esp,0x18
c001547c:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c001547f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015482:	0f b7 c0             	movzx  eax,ax
c0015485:	83 f2 01             	xor    edx,0x1
c0015488:	88 90 20 ca 02 c0    	mov    BYTE PTR [eax-0x3ffd35e0],dl
c001548e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015491:	66 3d 03 02          	cmp    ax,0x203
c0015495:	75 07                	jne    c001549e <sendKeyboardToken(KeyboardToken)+0x28>
c0015497:	a0 20 cb 02 c0       	mov    al,ds:0xc002cb20
c001549c:	84 c0                	test   al,al
c001549e:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00154a2:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c00154a5:	a0 28 ce 02 c0       	mov    al,ds:0xc002ce28
c00154aa:	38 c2                	cmp    dl,al
c00154ac:	74 1c                	je     c00154ca <sendKeyboardToken(KeyboardToken)+0x54>
c00154ae:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c00154b1:	a2 28 ce 02 c0       	mov    ds:0xc002ce28,al
c00154b6:	a0 28 ce 02 c0       	mov    al,ds:0xc002ce28
c00154bb:	0f b6 c0             	movzx  eax,al
c00154be:	83 ec 0c             	sub    esp,0xc
c00154c1:	50                   	push   eax
c00154c2:	e8 57 ab ff ff       	call   c001001e <setTerminalScrollLock(bool)>
c00154c7:	83 c4 10             	add    esp,0x10
c00154ca:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c00154cd:	84 c0                	test   al,al
c00154cf:	0f 84 ae 00 00 00    	je     c0015583 <sendKeyboardToken(KeyboardToken)+0x10d>
c00154d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154d8:	66 3d 10 03          	cmp    ax,0x310
c00154dc:	75 06                	jne    c00154e4 <sendKeyboardToken(KeyboardToken)+0x6e>
c00154de:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c00154e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154e7:	66 3d 11 03          	cmp    ax,0x311
c00154eb:	75 06                	jne    c00154f3 <sendKeyboardToken(KeyboardToken)+0x7d>
c00154ed:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c00154f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154f6:	66 3d 12 03          	cmp    ax,0x312
c00154fa:	75 06                	jne    c0015502 <sendKeyboardToken(KeyboardToken)+0x8c>
c00154fc:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015502:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015505:	66 3d 13 03          	cmp    ax,0x313
c0015509:	75 06                	jne    c0015511 <sendKeyboardToken(KeyboardToken)+0x9b>
c001550b:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015511:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015514:	66 3d 14 03          	cmp    ax,0x314
c0015518:	75 06                	jne    c0015520 <sendKeyboardToken(KeyboardToken)+0xaa>
c001551a:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015520:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015523:	66 3d 15 03          	cmp    ax,0x315
c0015527:	75 06                	jne    c001552f <sendKeyboardToken(KeyboardToken)+0xb9>
c0015529:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001552f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015532:	66 3d 16 03          	cmp    ax,0x316
c0015536:	75 06                	jne    c001553e <sendKeyboardToken(KeyboardToken)+0xc8>
c0015538:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c001553e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015541:	66 3d 17 03          	cmp    ax,0x317
c0015545:	75 06                	jne    c001554d <sendKeyboardToken(KeyboardToken)+0xd7>
c0015547:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001554d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015550:	66 3d 18 03          	cmp    ax,0x318
c0015554:	75 06                	jne    c001555c <sendKeyboardToken(KeyboardToken)+0xe6>
c0015556:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001555c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001555f:	66 3d 19 03          	cmp    ax,0x319
c0015563:	75 06                	jne    c001556b <sendKeyboardToken(KeyboardToken)+0xf5>
c0015565:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001556b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001556e:	66 3d 1a 03          	cmp    ax,0x31a
c0015572:	0f 85 c9 00 00 00    	jne    c0015641 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015578:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001557e:	e9 be 00 00 00       	jmp    c0015641 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015583:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015586:	66 3d 10 03          	cmp    ax,0x310
c001558a:	75 0a                	jne    c0015596 <sendKeyboardToken(KeyboardToken)+0x120>
c001558c:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015592:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015596:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015599:	66 3d 11 03          	cmp    ax,0x311
c001559d:	75 0a                	jne    c00155a9 <sendKeyboardToken(KeyboardToken)+0x133>
c001559f:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c00155a5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00155a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155ac:	66 3d 12 03          	cmp    ax,0x312
c00155b0:	75 0a                	jne    c00155bc <sendKeyboardToken(KeyboardToken)+0x146>
c00155b2:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c00155b8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00155bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155bf:	66 3d 13 03          	cmp    ax,0x313
c00155c3:	75 0a                	jne    c00155cf <sendKeyboardToken(KeyboardToken)+0x159>
c00155c5:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c00155cb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00155cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155d2:	66 3d 14 03          	cmp    ax,0x314
c00155d6:	75 0a                	jne    c00155e2 <sendKeyboardToken(KeyboardToken)+0x16c>
c00155d8:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00155de:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00155e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155e5:	66 3d 15 03          	cmp    ax,0x315
c00155e9:	75 0a                	jne    c00155f5 <sendKeyboardToken(KeyboardToken)+0x17f>
c00155eb:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00155f1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00155f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155f8:	66 3d 16 03          	cmp    ax,0x316
c00155fc:	75 0a                	jne    c0015608 <sendKeyboardToken(KeyboardToken)+0x192>
c00155fe:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015604:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015608:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001560b:	66 3d 17 03          	cmp    ax,0x317
c001560f:	75 0a                	jne    c001561b <sendKeyboardToken(KeyboardToken)+0x1a5>
c0015611:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015617:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001561b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001561e:	66 3d 18 03          	cmp    ax,0x318
c0015622:	75 0a                	jne    c001562e <sendKeyboardToken(KeyboardToken)+0x1b8>
c0015624:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001562a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001562e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015631:	66 3d 19 03          	cmp    ax,0x319
c0015635:	75 0a                	jne    c0015641 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015637:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001563d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015641:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015644:	66 3d 00 02          	cmp    ax,0x200
c0015648:	75 2c                	jne    c0015676 <sendKeyboardToken(KeyboardToken)+0x200>
c001564a:	a0 20 ce 02 c0       	mov    al,ds:0xc002ce20
c001564f:	83 f0 01             	xor    eax,0x1
c0015652:	84 c0                	test   al,al
c0015654:	74 20                	je     c0015676 <sendKeyboardToken(KeyboardToken)+0x200>
c0015656:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c001565b:	6a 01                	push   0x1
c001565d:	6a 00                	push   0x0
c001565f:	68 52 53 01 c0       	push   0xc0015352
c0015664:	50                   	push   eax
c0015665:	e8 f8 76 00 00       	call   c001cd62 <Process::createThread(void (*)(void*), void*, int)>
c001566a:	83 c4 10             	add    esp,0x10
c001566d:	c6 05 20 ce 02 c0 01 	mov    BYTE PTR ds:0xc002ce20,0x1
c0015674:	eb 33                	jmp    c00156a9 <sendKeyboardToken(KeyboardToken)+0x233>
c0015676:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015679:	66 3d 01 02          	cmp    ax,0x201
c001567d:	75 2a                	jne    c00156a9 <sendKeyboardToken(KeyboardToken)+0x233>
c001567f:	a0 20 ce 02 c0       	mov    al,ds:0xc002ce20
c0015684:	83 f0 01             	xor    eax,0x1
c0015687:	84 c0                	test   al,al
c0015689:	74 1e                	je     c00156a9 <sendKeyboardToken(KeyboardToken)+0x233>
c001568b:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c0015690:	6a 01                	push   0x1
c0015692:	6a 00                	push   0x0
c0015694:	68 ae 53 01 c0       	push   0xc00153ae
c0015699:	50                   	push   eax
c001569a:	e8 c3 76 00 00       	call   c001cd62 <Process::createThread(void (*)(void*), void*, int)>
c001569f:	83 c4 10             	add    esp,0x10
c00156a2:	c6 05 20 ce 02 c0 01 	mov    BYTE PTR ds:0xc002ce20,0x1
c00156a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ac:	66 3d 1d 03          	cmp    ax,0x31d
c00156b0:	75 06                	jne    c00156b8 <sendKeyboardToken(KeyboardToken)+0x242>
c00156b2:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00156b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156bb:	66 3d 1c 03          	cmp    ax,0x31c
c00156bf:	75 06                	jne    c00156c7 <sendKeyboardToken(KeyboardToken)+0x251>
c00156c1:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00156c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ca:	66 3d 1b 03          	cmp    ax,0x31b
c00156ce:	75 06                	jne    c00156d6 <sendKeyboardToken(KeyboardToken)+0x260>
c00156d0:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00156d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156d9:	66 3d 1e 03          	cmp    ax,0x31e
c00156dd:	75 06                	jne    c00156e5 <sendKeyboardToken(KeyboardToken)+0x26f>
c00156df:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00156e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156e8:	66 3d 1f 03          	cmp    ax,0x31f
c00156ec:	75 06                	jne    c00156f4 <sendKeyboardToken(KeyboardToken)+0x27e>
c00156ee:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00156f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156f7:	66 3d 1a 03          	cmp    ax,0x31a
c00156fb:	75 06                	jne    c0015703 <sendKeyboardToken(KeyboardToken)+0x28d>
c00156fd:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015703:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015707:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001570a:	83 f0 01             	xor    eax,0x1
c001570d:	84 c0                	test   al,al
c001570f:	74 77                	je     c0015788 <sendKeyboardToken(KeyboardToken)+0x312>
c0015711:	a0 21 cb 02 c0       	mov    al,ds:0xc002cb21
c0015716:	84 c0                	test   al,al
c0015718:	74 41                	je     c001575b <sendKeyboardToken(KeyboardToken)+0x2e5>
c001571a:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001571e:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015722:	74 2b                	je     c001574f <sendKeyboardToken(KeyboardToken)+0x2d9>
c0015724:	8b 15 24 ce 02 c0    	mov    edx,DWORD PTR ds:0xc002ce24
c001572a:	89 d0                	mov    eax,edx
c001572c:	c1 e0 02             	shl    eax,0x2
c001572f:	01 d0                	add    eax,edx
c0015731:	01 c0                	add    eax,eax
c0015733:	a3 24 ce 02 c0       	mov    ds:0xc002ce24,eax
c0015738:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001573b:	0f b7 c0             	movzx  eax,ax
c001573e:	8d 50 d0             	lea    edx,[eax-0x30]
c0015741:	a1 24 ce 02 c0       	mov    eax,ds:0xc002ce24
c0015746:	01 d0                	add    eax,edx
c0015748:	a3 24 ce 02 c0       	mov    ds:0xc002ce24,eax
c001574d:	eb 6d                	jmp    c00157bc <sendKeyboardToken(KeyboardToken)+0x346>
c001574f:	c7 05 24 ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce24,0x0
c0015759:	eb 61                	jmp    c00157bc <sendKeyboardToken(KeyboardToken)+0x346>
c001575b:	a1 24 ce 02 c0       	mov    eax,ds:0xc002ce24
c0015760:	85 c0                	test   eax,eax
c0015762:	74 18                	je     c001577c <sendKeyboardToken(KeyboardToken)+0x306>
c0015764:	a1 24 ce 02 c0       	mov    eax,ds:0xc002ce24
c0015769:	0f b6 c0             	movzx  eax,al
c001576c:	83 ec 0c             	sub    esp,0xc
c001576f:	50                   	push   eax
c0015770:	e8 95 fc ff ff       	call   c001540a <sendKeyToTerminal(unsigned char)>
c0015775:	83 c4 10             	add    esp,0x10
c0015778:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001577c:	c7 05 24 ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce24,0x0
c0015786:	eb 34                	jmp    c00157bc <sendKeyboardToken(KeyboardToken)+0x346>
c0015788:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001578b:	66 3d 01 01          	cmp    ax,0x101
c001578f:	75 2b                	jne    c00157bc <sendKeyboardToken(KeyboardToken)+0x346>
c0015791:	a1 24 ce 02 c0       	mov    eax,ds:0xc002ce24
c0015796:	85 c0                	test   eax,eax
c0015798:	74 18                	je     c00157b2 <sendKeyboardToken(KeyboardToken)+0x33c>
c001579a:	a1 24 ce 02 c0       	mov    eax,ds:0xc002ce24
c001579f:	0f b6 c0             	movzx  eax,al
c00157a2:	83 ec 0c             	sub    esp,0xc
c00157a5:	50                   	push   eax
c00157a6:	e8 5f fc ff ff       	call   c001540a <sendKeyToTerminal(unsigned char)>
c00157ab:	83 c4 10             	add    esp,0x10
c00157ae:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00157b2:	c7 05 24 ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce24,0x0
c00157bc:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00157bf:	83 f0 01             	xor    eax,0x1
c00157c2:	84 c0                	test   al,al
c00157c4:	74 4c                	je     c0015812 <sendKeyboardToken(KeyboardToken)+0x39c>
c00157c6:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00157c9:	83 f0 01             	xor    eax,0x1
c00157cc:	84 c0                	test   al,al
c00157ce:	74 42                	je     c0015812 <sendKeyboardToken(KeyboardToken)+0x39c>
c00157d0:	a0 20 cb 02 c0       	mov    al,ds:0xc002cb20
c00157d5:	83 f0 01             	xor    eax,0x1
c00157d8:	84 c0                	test   al,al
c00157da:	74 36                	je     c0015812 <sendKeyboardToken(KeyboardToken)+0x39c>
c00157dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157df:	66 83 f8 1f          	cmp    ax,0x1f
c00157e3:	76 09                	jbe    c00157ee <sendKeyboardToken(KeyboardToken)+0x378>
c00157e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157e8:	66 83 f8 7e          	cmp    ax,0x7e
c00157ec:	76 12                	jbe    c0015800 <sendKeyboardToken(KeyboardToken)+0x38a>
c00157ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f1:	66 83 f8 0a          	cmp    ax,0xa
c00157f5:	74 09                	je     c0015800 <sendKeyboardToken(KeyboardToken)+0x38a>
c00157f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157fa:	66 83 f8 08          	cmp    ax,0x8
c00157fe:	75 12                	jne    c0015812 <sendKeyboardToken(KeyboardToken)+0x39c>
c0015800:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015803:	0f b6 c0             	movzx  eax,al
c0015806:	83 ec 0c             	sub    esp,0xc
c0015809:	50                   	push   eax
c001580a:	e8 fb fb ff ff       	call   c001540a <sendKeyToTerminal(unsigned char)>
c001580f:	83 c4 10             	add    esp,0x10
c0015812:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015815:	83 f0 01             	xor    eax,0x1
c0015818:	84 c0                	test   al,al
c001581a:	74 4f                	je     c001586b <sendKeyboardToken(KeyboardToken)+0x3f5>
c001581c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001581f:	83 f0 01             	xor    eax,0x1
c0015822:	84 c0                	test   al,al
c0015824:	74 45                	je     c001586b <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015826:	a0 20 cb 02 c0       	mov    al,ds:0xc002cb20
c001582b:	84 c0                	test   al,al
c001582d:	74 3c                	je     c001586b <sendKeyboardToken(KeyboardToken)+0x3f5>
c001582f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015832:	66 83 f8 3f          	cmp    ax,0x3f
c0015836:	76 33                	jbe    c001586b <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015838:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001583b:	66 83 f8 7f          	cmp    ax,0x7f
c001583f:	77 2a                	ja     c001586b <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015841:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015844:	88 c2                	mov    dl,al
c0015846:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015849:	66 83 f8 5f          	cmp    ax,0x5f
c001584d:	76 04                	jbe    c0015853 <sendKeyboardToken(KeyboardToken)+0x3dd>
c001584f:	b0 20                	mov    al,0x20
c0015851:	eb 02                	jmp    c0015855 <sendKeyboardToken(KeyboardToken)+0x3df>
c0015853:	b0 00                	mov    al,0x0
c0015855:	29 c2                	sub    edx,eax
c0015857:	88 d0                	mov    al,dl
c0015859:	83 e8 40             	sub    eax,0x40
c001585c:	0f b6 c0             	movzx  eax,al
c001585f:	83 ec 0c             	sub    esp,0xc
c0015862:	50                   	push   eax
c0015863:	e8 a2 fb ff ff       	call   c001540a <sendKeyToTerminal(unsigned char)>
c0015868:	83 c4 10             	add    esp,0x10
c001586b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001586e:	66 3d 00 03          	cmp    ax,0x300
c0015872:	75 0f                	jne    c0015883 <sendKeyboardToken(KeyboardToken)+0x40d>
c0015874:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015877:	83 f0 01             	xor    eax,0x1
c001587a:	84 c0                	test   al,al
c001587c:	74 05                	je     c0015883 <sendKeyboardToken(KeyboardToken)+0x40d>
c001587e:	e8 78 b0 ff ff       	call   c00108fb <doTerminalCycle()>
c0015883:	90                   	nop
c0015884:	c9                   	leave  
c0015885:	c3                   	ret    

c0015886 <clearInternalKeybuffer(VgaText*)>:
c0015886:	55                   	push   ebp
c0015887:	89 e5                	mov    ebp,esp
c0015889:	83 ec 08             	sub    esp,0x8
c001588c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001588f:	05 34 11 00 00       	add    eax,0x1134
c0015894:	83 ec 0c             	sub    esp,0xc
c0015897:	50                   	push   eax
c0015898:	e8 0b ae fe ff       	call   c00006a8 <strlen>
c001589d:	83 c4 10             	add    esp,0x10
c00158a0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00158a3:	81 c2 34 11 00 00    	add    edx,0x1134
c00158a9:	83 ec 04             	sub    esp,0x4
c00158ac:	50                   	push   eax
c00158ad:	6a 00                	push   0x0
c00158af:	52                   	push   edx
c00158b0:	e8 d6 ad fe ff       	call   c000068b <memset>
c00158b5:	83 c4 10             	add    esp,0x10
c00158b8:	90                   	nop
c00158b9:	c9                   	leave  
c00158ba:	c3                   	ret    

c00158bb <readKeyboard(VgaText*, char*, unsigned long)>:
c00158bb:	55                   	push   ebp
c00158bc:	89 e5                	mov    ebp,esp
c00158be:	83 ec 18             	sub    esp,0x18
c00158c1:	fb                   	sti    
c00158c2:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00158c9:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00158cd:	0f 84 8a 00 00 00    	je     c001595d <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c00158d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158d6:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00158dc:	84 c0                	test   al,al
c00158de:	75 11                	jne    c00158f1 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c00158e0:	e8 4b 73 00 00       	call   c001cc30 <lockScheduler()>
c00158e5:	e8 82 76 00 00       	call   c001cf6c <schedule()>
c00158ea:	e8 43 73 00 00       	call   c001cc32 <unlockScheduler()>
c00158ef:	eb e2                	jmp    c00158d3 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c00158f1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00158f4:	8d 50 01             	lea    edx,[eax+0x1]
c00158f7:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00158fa:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00158fd:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0015903:	88 10                	mov    BYTE PTR [eax],dl
c0015905:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015908:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c001590e:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015911:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015914:	05 34 11 00 00       	add    eax,0x1134
c0015919:	83 ec 0c             	sub    esp,0xc
c001591c:	50                   	push   eax
c001591d:	e8 86 ad fe ff       	call   c00006a8 <strlen>
c0015922:	83 c4 10             	add    esp,0x10
c0015925:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015928:	81 c2 34 11 00 00    	add    edx,0x1134
c001592e:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015931:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015934:	81 c2 34 11 00 00    	add    edx,0x1134
c001593a:	83 ec 04             	sub    esp,0x4
c001593d:	50                   	push   eax
c001593e:	51                   	push   ecx
c001593f:	52                   	push   edx
c0015940:	e8 d8 ac fe ff       	call   c000061d <memmove>
c0015945:	83 c4 10             	add    esp,0x10
c0015948:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c001594b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001594e:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015952:	0f 85 71 ff ff ff    	jne    c00158c9 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0015958:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001595b:	eb 03                	jmp    c0015960 <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c001595d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015960:	c9                   	leave  
c0015961:	c3                   	ret    

c0015962 <Keyboard::Keyboard(char const*)>:
c0015962:	83 ec 0c             	sub    esp,0xc
c0015965:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015969:	83 ec 08             	sub    esp,0x8
c001596c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015970:	50                   	push   eax
c0015971:	e8 f0 e2 ff ff       	call   c0013c66 <Device::Device(char const*)>
c0015976:	83 c4 10             	add    esp,0x10
c0015979:	ba 14 98 02 c0       	mov    edx,0xc0029814
c001597e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015982:	89 10                	mov    DWORD PTR [eax],edx
c0015984:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015988:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015992:	c6 05 04 ca 02 c0 01 	mov    BYTE PTR ds:0xc002ca04,0x1
c0015999:	90                   	nop
c001599a:	83 c4 0c             	add    esp,0xc
c001599d:	c3                   	ret    

c001599e <Keyboard::~Keyboard()>:
c001599e:	83 ec 0c             	sub    esp,0xc
c00159a1:	ba 14 98 02 c0       	mov    edx,0xc0029814
c00159a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159aa:	89 10                	mov    DWORD PTR [eax],edx
c00159ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159b0:	83 ec 0c             	sub    esp,0xc
c00159b3:	50                   	push   eax
c00159b4:	e8 8f df ff ff       	call   c0013948 <Device::~Device()>
c00159b9:	83 c4 10             	add    esp,0x10
c00159bc:	90                   	nop
c00159bd:	83 c4 0c             	add    esp,0xc
c00159c0:	c3                   	ret    
c00159c1:	90                   	nop

c00159c2 <Keyboard::~Keyboard()>:
c00159c2:	83 ec 0c             	sub    esp,0xc
c00159c5:	83 ec 0c             	sub    esp,0xc
c00159c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00159cc:	e8 cd ff ff ff       	call   c001599e <Keyboard::~Keyboard()>
c00159d1:	83 c4 10             	add    esp,0x10
c00159d4:	83 ec 08             	sub    esp,0x8
c00159d7:	68 5c 01 00 00       	push   0x15c
c00159dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00159e0:	e8 c2 cb ff ff       	call   c00125a7 <operator delete(void*, unsigned long)>
c00159e5:	83 c4 10             	add    esp,0x10
c00159e8:	83 c4 0c             	add    esp,0xc
c00159eb:	c3                   	ret    

c00159ec <LogicalDisk::close(int, int, void*)>:
c00159ec:	83 c8 ff             	or     eax,0xffffffff
c00159ef:	c3                   	ret    

c00159f0 <LogicalDisk::~LogicalDisk()>:
c00159f0:	83 ec 0c             	sub    esp,0xc
c00159f3:	ba c4 98 02 c0       	mov    edx,0xc00298c4
c00159f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159fc:	89 10                	mov    DWORD PTR [eax],edx
c00159fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a02:	83 ec 0c             	sub    esp,0xc
c0015a05:	50                   	push   eax
c0015a06:	e8 3d df ff ff       	call   c0013948 <Device::~Device()>
c0015a0b:	83 c4 10             	add    esp,0x10
c0015a0e:	90                   	nop
c0015a0f:	83 c4 0c             	add    esp,0xc
c0015a12:	c3                   	ret    
c0015a13:	90                   	nop

c0015a14 <LogicalDisk::~LogicalDisk()>:
c0015a14:	83 ec 0c             	sub    esp,0xc
c0015a17:	83 ec 0c             	sub    esp,0xc
c0015a1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015a1e:	e8 cd ff ff ff       	call   c00159f0 <LogicalDisk::~LogicalDisk()>
c0015a23:	83 c4 10             	add    esp,0x10
c0015a26:	83 ec 08             	sub    esp,0x8
c0015a29:	68 74 01 00 00       	push   0x174
c0015a2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015a32:	e8 70 cb ff ff       	call   c00125a7 <operator delete(void*, unsigned long)>
c0015a37:	83 c4 10             	add    esp,0x10
c0015a3a:	83 c4 0c             	add    esp,0xc
c0015a3d:	c3                   	ret    

c0015a3e <LogicalDisk::open(int, int, void*)>:
c0015a3e:	83 ec 18             	sub    esp,0x18
c0015a41:	68 40 98 02 c0       	push   0xc0029840
c0015a46:	e8 56 3d 00 00       	call   c00197a1 <Krnl::panic(char const*)>
c0015a4b:	83 c8 ff             	or     eax,0xffffffff
c0015a4e:	83 c4 1c             	add    esp,0x1c
c0015a51:	c3                   	ret    

c0015a52 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015a52:	53                   	push   ebx
c0015a53:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015a57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015a5b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015a5f:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015a65:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015a6b:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015a71:	77 10                	ja     c0015a83 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015a73:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015a79:	89 d3                	mov    ebx,edx
c0015a7b:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015a81:	72 05                	jb     c0015a88 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015a83:	83 c8 ff             	or     eax,0xffffffff
c0015a86:	89 c2                	mov    edx,eax
c0015a88:	5b                   	pop    ebx
c0015a89:	c3                   	ret    

c0015a8a <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015a8a:	56                   	push   esi
c0015a8b:	83 c8 ff             	or     eax,0xffffffff
c0015a8e:	53                   	push   ebx
c0015a8f:	89 c2                	mov    edx,eax
c0015a91:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015a95:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015a99:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015a9d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015aa3:	77 27                	ja     c0015acc <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015aa5:	89 d8                	mov    eax,ebx
c0015aa7:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015aad:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015ab3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015ab8:	89 c2                	mov    edx,eax
c0015aba:	73 10                	jae    c0015acc <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015abc:	89 c8                	mov    eax,ecx
c0015abe:	89 da                	mov    edx,ebx
c0015ac0:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015ac6:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015acc:	5b                   	pop    ebx
c0015acd:	5e                   	pop    esi
c0015ace:	c3                   	ret    
c0015acf:	90                   	nop

c0015ad0 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015ad0:	83 ec 1c             	sub    esp,0x1c
c0015ad3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015ad7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015adb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015adf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015ae3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015ae7:	89 04 24             	mov    DWORD PTR [esp],eax
c0015aea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015aee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015af2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015af6:	83 ec 08             	sub    esp,0x8
c0015af9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015afd:	50                   	push   eax
c0015afe:	e8 63 e1 ff ff       	call   c0013c66 <Device::Device(char const*)>
c0015b03:	83 c4 10             	add    esp,0x10
c0015b06:	ba c4 98 02 c0       	mov    edx,0xc00298c4
c0015b0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b0f:	89 10                	mov    DWORD PTR [eax],edx
c0015b11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b15:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015b1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b20:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015b27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b2b:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015b35:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015b39:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015b3d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015b41:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015b47:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015b4d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015b51:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015b54:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015b58:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015b5e:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b68:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015b6c:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015b72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b76:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015b80:	90                   	nop
c0015b81:	83 c4 1c             	add    esp,0x1c
c0015b84:	c3                   	ret    
c0015b85:	90                   	nop

c0015b86 <LogicalDisk::assignDriveLetter()>:
c0015b86:	55                   	push   ebp
c0015b87:	57                   	push   edi
c0015b88:	56                   	push   esi
c0015b89:	53                   	push   ebx
c0015b8a:	83 ec 14             	sub    esp,0x14
c0015b8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015b91:	8b 3d 40 ce 02 c0    	mov    edi,DWORD PTR ds:0xc002ce40
c0015b97:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015b9d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015ba1:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015ba7:	8b 3d 44 ce 02 c0    	mov    edi,DWORD PTR ds:0xc002ce44
c0015bad:	3c 01                	cmp    al,0x1
c0015baf:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015bb3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015bb7:	19 c0                	sbb    eax,eax
c0015bb9:	83 e0 02             	and    eax,0x2
c0015bbc:	83 c0 41             	add    eax,0x41
c0015bbf:	0f be e8             	movsx  ebp,al
c0015bc2:	3c 43                	cmp    al,0x43
c0015bc4:	75 10                	jne    c0015bd6 <LogicalDisk::assignDriveLetter()+0x50>
c0015bc6:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015bcd:	75 5d                	jne    c0015c2c <LogicalDisk::assignDriveLetter()+0xa6>
c0015bcf:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015bd4:	75 56                	jne    c0015c2c <LogicalDisk::assignDriveLetter()+0xa6>
c0015bd6:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015bd9:	ba 01 00 00 00       	mov    edx,0x1
c0015bde:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015be2:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015be6:	d3 e2                	shl    edx,cl
c0015be8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015bec:	89 d7                	mov    edi,edx
c0015bee:	89 d6                	mov    esi,edx
c0015bf0:	c1 ff 1f             	sar    edi,0x1f
c0015bf3:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015bf7:	21 f9                	and    ecx,edi
c0015bf9:	09 d1                	or     ecx,edx
c0015bfb:	75 2f                	jne    c0015c2c <LogicalDisk::assignDriveLetter()+0xa6>
c0015bfd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015c01:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015c05:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015c0b:	09 f2                	or     edx,esi
c0015c0d:	89 15 40 ce 02 c0    	mov    DWORD PTR ds:0xc002ce40,edx
c0015c13:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015c17:	09 fa                	or     edx,edi
c0015c19:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015c1d:	89 15 44 ce 02 c0    	mov    DWORD PTR ds:0xc002ce44,edx
c0015c23:	89 1c bd 60 ce 02 c0 	mov    DWORD PTR [edi*4-0x3ffd31a0],ebx
c0015c2a:	eb 08                	jmp    c0015c34 <LogicalDisk::assignDriveLetter()+0xae>
c0015c2c:	45                   	inc    ebp
c0015c2d:	40                   	inc    eax
c0015c2e:	3c 5b                	cmp    al,0x5b
c0015c30:	75 90                	jne    c0015bc2 <LogicalDisk::assignDriveLetter()+0x3c>
c0015c32:	31 c0                	xor    eax,eax
c0015c34:	83 c4 14             	add    esp,0x14
c0015c37:	5b                   	pop    ebx
c0015c38:	5e                   	pop    esi
c0015c39:	5f                   	pop    edi
c0015c3a:	5d                   	pop    ebp
c0015c3b:	c3                   	ret    

c0015c3c <LogicalDisk::mount()>:
c0015c3c:	56                   	push   esi
c0015c3d:	53                   	push   ebx
c0015c3e:	51                   	push   ecx
c0015c3f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015c43:	8b 1d c8 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c9c8
c0015c49:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015c53:	85 db                	test   ebx,ebx
c0015c55:	74 50                	je     c0015ca7 <LogicalDisk::mount()+0x6b>
c0015c57:	e8 bf 6f 00 00       	call   c001cc1b <getIRQNestingLevel()>
c0015c5c:	52                   	push   edx
c0015c5d:	52                   	push   edx
c0015c5e:	50                   	push   eax
c0015c5f:	68 64 98 02 c0       	push   0xc0029864
c0015c64:	e8 1e ca ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0015c69:	83 c4 0c             	add    esp,0xc
c0015c6c:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015c73:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015c75:	83 e8 41             	sub    eax,0x41
c0015c78:	50                   	push   eax
c0015c79:	56                   	push   esi
c0015c7a:	53                   	push   ebx
c0015c7b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015c7e:	83 c4 10             	add    esp,0x10
c0015c81:	84 c0                	test   al,al
c0015c83:	74 08                	je     c0015c8d <LogicalDisk::mount()+0x51>
c0015c85:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015c8b:	eb 1c                	jmp    c0015ca9 <LogicalDisk::mount()+0x6d>
c0015c8d:	e8 89 6f 00 00       	call   c001cc1b <getIRQNestingLevel()>
c0015c92:	51                   	push   ecx
c0015c93:	51                   	push   ecx
c0015c94:	50                   	push   eax
c0015c95:	68 7f 98 02 c0       	push   0xc002987f
c0015c9a:	e8 e8 c9 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0015c9f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015ca2:	83 c4 10             	add    esp,0x10
c0015ca5:	eb ac                	jmp    c0015c53 <LogicalDisk::mount()+0x17>
c0015ca7:	31 c0                	xor    eax,eax
c0015ca9:	5a                   	pop    edx
c0015caa:	5b                   	pop    ebx
c0015cab:	5e                   	pop    esi
c0015cac:	c3                   	ret    
c0015cad:	90                   	nop

c0015cae <LogicalDisk::unmount()>:
c0015cae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015cb2:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015cbc:	c3                   	ret    
c0015cbd:	90                   	nop

c0015cbe <LogicalDisk::unassignDriveLetter()>:
c0015cbe:	57                   	push   edi
c0015cbf:	56                   	push   esi
c0015cc0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015cc4:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015ccb:	84 c9                	test   cl,cl
c0015ccd:	75 0f                	jne    c0015cde <LogicalDisk::unassignDriveLetter()+0x20>
c0015ccf:	c7 44 24 0c 9a 98 02 c0 	mov    DWORD PTR [esp+0xc],0xc002989a
c0015cd7:	5e                   	pop    esi
c0015cd8:	5f                   	pop    edi
c0015cd9:	e9 c3 3a 00 00       	jmp    c00197a1 <Krnl::panic(char const*)>
c0015cde:	83 e9 41             	sub    ecx,0x41
c0015ce1:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0015ce8:	b8 01 00 00 00       	mov    eax,0x1
c0015ced:	c7 04 8d 60 ce 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd31a0],0x0
c0015cf8:	d3 e0                	shl    eax,cl
c0015cfa:	89 c7                	mov    edi,eax
c0015cfc:	f7 d0                	not    eax
c0015cfe:	c1 ff 1f             	sar    edi,0x1f
c0015d01:	21 05 40 ce 02 c0    	and    DWORD PTR ds:0xc002ce40,eax
c0015d07:	89 fe                	mov    esi,edi
c0015d09:	f7 d6                	not    esi
c0015d0b:	21 35 44 ce 02 c0    	and    DWORD PTR ds:0xc002ce44,esi
c0015d11:	5e                   	pop    esi
c0015d12:	5f                   	pop    edi
c0015d13:	c3                   	ret    

c0015d14 <LogicalDisk::read(unsigned long long, int, void*)>:
c0015d14:	57                   	push   edi
c0015d15:	56                   	push   esi
c0015d16:	53                   	push   ebx
c0015d17:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015d1b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015d1f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015d23:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015d27:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015d2d:	77 41                	ja     c0015d70 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0015d2f:	99                   	cdq    
c0015d30:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015d36:	01 c8                	add    eax,ecx
c0015d38:	11 da                	adc    edx,ebx
c0015d3a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015d40:	19 d7                	sbb    edi,edx
c0015d42:	72 33                	jb     c0015d77 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0015d44:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015d4a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015d50:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015d54:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015d58:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015d5e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015d64:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015d68:	5b                   	pop    ebx
c0015d69:	5e                   	pop    esi
c0015d6a:	5f                   	pop    edi
c0015d6b:	e9 f8 09 00 00       	jmp    c0016768 <VCache::read(unsigned long long, int, void*)>
c0015d70:	b8 05 00 00 00       	mov    eax,0x5
c0015d75:	eb 05                	jmp    c0015d7c <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0015d77:	b8 07 00 00 00       	mov    eax,0x7
c0015d7c:	5b                   	pop    ebx
c0015d7d:	5e                   	pop    esi
c0015d7e:	5f                   	pop    edi
c0015d7f:	c3                   	ret    

c0015d80 <LogicalDisk::write(unsigned long long, int, void*)>:
c0015d80:	57                   	push   edi
c0015d81:	56                   	push   esi
c0015d82:	53                   	push   ebx
c0015d83:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015d87:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015d8b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015d8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015d93:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015d99:	77 41                	ja     c0015ddc <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0015d9b:	99                   	cdq    
c0015d9c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015da2:	01 c8                	add    eax,ecx
c0015da4:	11 da                	adc    edx,ebx
c0015da6:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015dac:	19 d7                	sbb    edi,edx
c0015dae:	72 33                	jb     c0015de3 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0015db0:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015db6:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015dbc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015dc0:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015dc4:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015dca:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015dd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015dd4:	5b                   	pop    ebx
c0015dd5:	5e                   	pop    esi
c0015dd6:	5f                   	pop    edi
c0015dd7:	e9 a8 08 00 00       	jmp    c0016684 <VCache::write(unsigned long long, int, void*)>
c0015ddc:	b8 05 00 00 00       	mov    eax,0x5
c0015de1:	eb 05                	jmp    c0015de8 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0015de3:	b8 07 00 00 00       	mov    eax,0x7
c0015de8:	5b                   	pop    ebx
c0015de9:	5e                   	pop    esi
c0015dea:	5f                   	pop    edi
c0015deb:	c3                   	ret    

c0015dec <Mouse::Mouse(char const*)>:
c0015dec:	83 ec 0c             	sub    esp,0xc
c0015def:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015df3:	83 ec 08             	sub    esp,0x8
c0015df6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015dfa:	50                   	push   eax
c0015dfb:	e8 66 de ff ff       	call   c0013c66 <Device::Device(char const*)>
c0015e00:	83 c4 10             	add    esp,0x10
c0015e03:	ba f0 98 02 c0       	mov    edx,0xc00298f0
c0015e08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e0c:	89 10                	mov    DWORD PTR [eax],edx
c0015e0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e12:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0015e1c:	90                   	nop
c0015e1d:	83 c4 0c             	add    esp,0xc
c0015e20:	c3                   	ret    
c0015e21:	90                   	nop

c0015e22 <Mouse::~Mouse()>:
c0015e22:	83 ec 0c             	sub    esp,0xc
c0015e25:	ba f0 98 02 c0       	mov    edx,0xc00298f0
c0015e2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e2e:	89 10                	mov    DWORD PTR [eax],edx
c0015e30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e34:	83 ec 0c             	sub    esp,0xc
c0015e37:	50                   	push   eax
c0015e38:	e8 0b db ff ff       	call   c0013948 <Device::~Device()>
c0015e3d:	83 c4 10             	add    esp,0x10
c0015e40:	90                   	nop
c0015e41:	83 c4 0c             	add    esp,0xc
c0015e44:	c3                   	ret    
c0015e45:	90                   	nop

c0015e46 <Mouse::~Mouse()>:
c0015e46:	83 ec 0c             	sub    esp,0xc
c0015e49:	83 ec 0c             	sub    esp,0xc
c0015e4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e50:	e8 cd ff ff ff       	call   c0015e22 <Mouse::~Mouse()>
c0015e55:	83 c4 10             	add    esp,0x10
c0015e58:	83 ec 08             	sub    esp,0x8
c0015e5b:	68 58 01 00 00       	push   0x158
c0015e60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e64:	e8 3e c7 ff ff       	call   c00125a7 <operator delete(void*, unsigned long)>
c0015e69:	83 c4 10             	add    esp,0x10
c0015e6c:	83 c4 0c             	add    esp,0xc
c0015e6f:	c3                   	ret    

c0015e70 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015e70:	55                   	push   ebp
c0015e71:	57                   	push   edi
c0015e72:	56                   	push   esi
c0015e73:	53                   	push   ebx
c0015e74:	81 ec 28 01 00 00    	sub    esp,0x128
c0015e7a:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015e81:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0015e88:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0015e8f:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0015e96:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015e9a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0015e9e:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015ea5:	e8 b8 de ff ff       	call   c0013d62 <Device::getName()>
c0015eaa:	5a                   	pop    edx
c0015eab:	59                   	pop    ecx
c0015eac:	50                   	push   eax
c0015ead:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0015eb1:	55                   	push   ebp
c0015eb2:	e8 73 a8 fe ff       	call   c000072a <strcpy>
c0015eb7:	5b                   	pop    ebx
c0015eb8:	58                   	pop    eax
c0015eb9:	68 14 99 02 c0       	push   0xc0029914
c0015ebe:	55                   	push   ebp
c0015ebf:	e8 1d a9 fe ff       	call   c00007e1 <strcat>
c0015ec4:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0015ecb:	e8 04 96 ff ff       	call   c000f4d4 <malloc>
c0015ed0:	83 c4 0c             	add    esp,0xc
c0015ed3:	89 c3                	mov    ebx,eax
c0015ed5:	57                   	push   edi
c0015ed6:	56                   	push   esi
c0015ed7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015edb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015edf:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0015ee6:	55                   	push   ebp
c0015ee7:	50                   	push   eax
c0015ee8:	e8 e3 fb ff ff       	call   c0015ad0 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0015eed:	83 c4 14             	add    esp,0x14
c0015ef0:	53                   	push   ebx
c0015ef1:	e8 90 fc ff ff       	call   c0015b86 <LogicalDisk::assignDriveLetter()>
c0015ef6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ef9:	e8 3e fd ff ff       	call   c0015c3c <LogicalDisk::mount()>
c0015efe:	58                   	pop    eax
c0015eff:	5a                   	pop    edx
c0015f00:	53                   	push   ebx
c0015f01:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015f08:	e8 69 db ff ff       	call   c0013a76 <Device::addChild(Device*)>
c0015f0d:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015f13:	5b                   	pop    ebx
c0015f14:	5e                   	pop    esi
c0015f15:	5f                   	pop    edi
c0015f16:	5d                   	pop    ebp
c0015f17:	c3                   	ret    

c0015f18 <createPartitionsForDisk(PhysicalDisk*)>:
c0015f18:	55                   	push   ebp
c0015f19:	57                   	push   edi
c0015f1a:	56                   	push   esi
c0015f1b:	53                   	push   ebx
c0015f1c:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0015f22:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0015f29:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015f2f:	3d 00 02 00 00       	cmp    eax,0x200
c0015f34:	74 27                	je     c0015f5d <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0015f36:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0015f3c:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0015f42:	83 ec 10             	sub    esp,0x10
c0015f45:	0f a4 f7 0a          	shld   edi,esi,0xa
c0015f49:	99                   	cdq    
c0015f4a:	c1 e6 0a             	shl    esi,0xa
c0015f4d:	52                   	push   edx
c0015f4e:	89 fd                	mov    ebp,edi
c0015f50:	50                   	push   eax
c0015f51:	55                   	push   ebp
c0015f52:	56                   	push   esi
c0015f53:	e8 64 f3 00 00       	call   c00252bc <__udivdi3>
c0015f58:	e9 b1 00 00 00       	jmp    c001600e <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015f5d:	83 ec 0c             	sub    esp,0xc
c0015f60:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f62:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0015f66:	56                   	push   esi
c0015f67:	6a 01                	push   0x1
c0015f69:	6a 00                	push   0x0
c0015f6b:	6a 00                	push   0x0
c0015f6d:	53                   	push   ebx
c0015f6e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0015f71:	83 c4 20             	add    esp,0x20
c0015f74:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0015f7c:	75 0a                	jne    c0015f88 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0015f7e:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0015f86:	74 2c                	je     c0015fb4 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0015f88:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015f8e:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015f94:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015f9a:	83 ec 10             	sub    esp,0x10
c0015f9d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015fa1:	89 f7                	mov    edi,esi
c0015fa3:	c1 e0 0a             	shl    eax,0xa
c0015fa6:	c1 ff 1f             	sar    edi,0x1f
c0015fa9:	57                   	push   edi
c0015faa:	56                   	push   esi
c0015fab:	52                   	push   edx
c0015fac:	50                   	push   eax
c0015fad:	e8 0a f3 00 00       	call   c00252bc <__udivdi3>
c0015fb2:	eb 5a                	jmp    c001600e <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015fb4:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0015fbb:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0015fc2:	83 e1 7f             	and    ecx,0x7f
c0015fc5:	83 e0 7f             	and    eax,0x7f
c0015fc8:	01 c1                	add    ecx,eax
c0015fca:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0015fd1:	83 e0 7f             	and    eax,0x7f
c0015fd4:	01 c1                	add    ecx,eax
c0015fd6:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0015fdd:	83 e0 7f             	and    eax,0x7f
c0015fe0:	00 c1                	add    cl,al
c0015fe2:	74 41                	je     c0016025 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0015fe4:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015fea:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015ff0:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015ff6:	83 ec 10             	sub    esp,0x10
c0015ff9:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015ffd:	89 f7                	mov    edi,esi
c0015fff:	c1 e0 0a             	shl    eax,0xa
c0016002:	c1 ff 1f             	sar    edi,0x1f
c0016005:	57                   	push   edi
c0016006:	56                   	push   esi
c0016007:	52                   	push   edx
c0016008:	50                   	push   eax
c0016009:	e8 ae f2 00 00       	call   c00252bc <__udivdi3>
c001600e:	83 c4 14             	add    esp,0x14
c0016011:	52                   	push   edx
c0016012:	50                   	push   eax
c0016013:	6a 00                	push   0x0
c0016015:	6a 00                	push   0x0
c0016017:	53                   	push   ebx
c0016018:	e8 53 fe ff ff       	call   c0015e70 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001601d:	83 c4 20             	add    esp,0x20
c0016020:	e9 79 01 00 00       	jmp    c001619e <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016025:	89 f0                	mov    eax,esi
c0016027:	31 f6                	xor    esi,esi
c0016029:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016030:	75 02                	jne    c0016034 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016032:	89 f1                	mov    ecx,esi
c0016034:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001603b:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016042:	c1 e2 08             	shl    edx,0x8
c0016045:	c1 e7 10             	shl    edi,0x10
c0016048:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016050:	09 fa                	or     edx,edi
c0016052:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c001605a:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016061:	83 c0 10             	add    eax,0x10
c0016064:	09 fa                	or     edx,edi
c0016066:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c001606d:	c1 e7 18             	shl    edi,0x18
c0016070:	09 fa                	or     edx,edi
c0016072:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016079:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c001607d:	c1 e7 10             	shl    edi,0x10
c0016080:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016087:	c1 e2 08             	shl    edx,0x8
c001608a:	09 fa                	or     edx,edi
c001608c:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016093:	09 fa                	or     edx,edi
c0016095:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c001609c:	c1 e7 18             	shl    edi,0x18
c001609f:	09 fa                	or     edx,edi
c00160a1:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00160a5:	46                   	inc    esi
c00160a6:	83 fe 04             	cmp    esi,0x4
c00160a9:	0f 85 7a ff ff ff    	jne    c0016029 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00160af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160b3:	83 f0 01             	xor    eax,0x1
c00160b6:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00160ba:	75 57                	jne    c0016113 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00160bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00160c0:	83 f0 01             	xor    eax,0x1
c00160c3:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00160c7:	75 4a                	jne    c0016113 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00160c9:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00160cd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00160d5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00160dd:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00160e3:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00160e9:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00160ef:	0f a4 c2 0a          	shld   edx,eax,0xa
c00160f3:	89 f7                	mov    edi,esi
c00160f5:	c1 e0 0a             	shl    eax,0xa
c00160f8:	c1 ff 1f             	sar    edi,0x1f
c00160fb:	57                   	push   edi
c00160fc:	56                   	push   esi
c00160fd:	52                   	push   edx
c00160fe:	50                   	push   eax
c00160ff:	e8 b8 f1 00 00       	call   c00252bc <__udivdi3>
c0016104:	83 c4 10             	add    esp,0x10
c0016107:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001610b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001610f:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016113:	84 c9                	test   cl,cl
c0016115:	74 53                	je     c001616a <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016117:	0f b6 c9             	movzx  ecx,cl
c001611a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001611e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016122:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016126:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001612a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001612e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016132:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016136:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c001613a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001613e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016142:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016146:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001614a:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c001614e:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016152:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016156:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c001615a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001615e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016162:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016166:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c001616a:	31 ed                	xor    ebp,ebp
c001616c:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016170:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016174:	89 f8                	mov    eax,edi
c0016176:	09 f0                	or     eax,esi
c0016178:	74 1e                	je     c0016198 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001617a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001617e:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016182:	89 d1                	mov    ecx,edx
c0016184:	09 c1                	or     ecx,eax
c0016186:	74 10                	je     c0016198 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016188:	83 ec 0c             	sub    esp,0xc
c001618b:	57                   	push   edi
c001618c:	56                   	push   esi
c001618d:	52                   	push   edx
c001618e:	50                   	push   eax
c001618f:	53                   	push   ebx
c0016190:	e8 db fc ff ff       	call   c0015e70 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016195:	83 c4 20             	add    esp,0x20
c0016198:	45                   	inc    ebp
c0016199:	83 fd 04             	cmp    ebp,0x4
c001619c:	75 ce                	jne    c001616c <createPartitionsForDisk(PhysicalDisk*)+0x254>
c001619e:	81 c4 5c 02 00 00    	add    esp,0x25c
c00161a4:	5b                   	pop    ebx
c00161a5:	5e                   	pop    esi
c00161a6:	5f                   	pop    edi
c00161a7:	5d                   	pop    ebp
c00161a8:	c3                   	ret    
c00161a9:	90                   	nop

c00161aa <Serial::Serial(char const*)>:
c00161aa:	83 ec 0c             	sub    esp,0xc
c00161ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161b1:	83 ec 08             	sub    esp,0x8
c00161b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00161b8:	50                   	push   eax
c00161b9:	e8 a8 da ff ff       	call   c0013c66 <Device::Device(char const*)>
c00161be:	83 c4 10             	add    esp,0x10
c00161c1:	ba 28 99 02 c0       	mov    edx,0xc0029928
c00161c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161ca:	89 10                	mov    DWORD PTR [eax],edx
c00161cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161d0:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c00161da:	90                   	nop
c00161db:	83 c4 0c             	add    esp,0xc
c00161de:	c3                   	ret    
c00161df:	90                   	nop

c00161e0 <Serial::~Serial()>:
c00161e0:	83 ec 0c             	sub    esp,0xc
c00161e3:	ba 28 99 02 c0       	mov    edx,0xc0029928
c00161e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161ec:	89 10                	mov    DWORD PTR [eax],edx
c00161ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161f2:	83 ec 0c             	sub    esp,0xc
c00161f5:	50                   	push   eax
c00161f6:	e8 4d d7 ff ff       	call   c0013948 <Device::~Device()>
c00161fb:	83 c4 10             	add    esp,0x10
c00161fe:	90                   	nop
c00161ff:	83 c4 0c             	add    esp,0xc
c0016202:	c3                   	ret    
c0016203:	90                   	nop

c0016204 <Serial::~Serial()>:
c0016204:	83 ec 0c             	sub    esp,0xc
c0016207:	83 ec 0c             	sub    esp,0xc
c001620a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001620e:	e8 cd ff ff ff       	call   c00161e0 <Serial::~Serial()>
c0016213:	83 c4 10             	add    esp,0x10
c0016216:	83 ec 08             	sub    esp,0x8
c0016219:	68 58 01 00 00       	push   0x158
c001621e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016222:	e8 80 c3 ff ff       	call   c00125a7 <operator delete(void*, unsigned long)>
c0016227:	83 c4 10             	add    esp,0x10
c001622a:	83 c4 0c             	add    esp,0xc
c001622d:	c3                   	ret    

c001622e <Timer::Timer(char const*)>:
c001622e:	83 ec 0c             	sub    esp,0xc
c0016231:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016235:	83 ec 08             	sub    esp,0x8
c0016238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001623c:	50                   	push   eax
c001623d:	e8 24 da ff ff       	call   c0013c66 <Device::Device(char const*)>
c0016242:	83 c4 10             	add    esp,0x10
c0016245:	ba 6c 99 02 c0       	mov    edx,0xc002996c
c001624a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001624e:	89 10                	mov    DWORD PTR [eax],edx
c0016250:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016254:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c001625e:	90                   	nop
c001625f:	83 c4 0c             	add    esp,0xc
c0016262:	c3                   	ret    
c0016263:	90                   	nop

c0016264 <Timer::~Timer()>:
c0016264:	83 ec 0c             	sub    esp,0xc
c0016267:	ba 6c 99 02 c0       	mov    edx,0xc002996c
c001626c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016270:	89 10                	mov    DWORD PTR [eax],edx
c0016272:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016276:	83 ec 0c             	sub    esp,0xc
c0016279:	50                   	push   eax
c001627a:	e8 c9 d6 ff ff       	call   c0013948 <Device::~Device()>
c001627f:	83 c4 10             	add    esp,0x10
c0016282:	90                   	nop
c0016283:	83 c4 0c             	add    esp,0xc
c0016286:	c3                   	ret    
c0016287:	90                   	nop

c0016288 <Timer::~Timer()>:
c0016288:	83 ec 0c             	sub    esp,0xc
c001628b:	83 ec 0c             	sub    esp,0xc
c001628e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016292:	e8 cd ff ff ff       	call   c0016264 <Timer::~Timer()>
c0016297:	83 c4 10             	add    esp,0x10
c001629a:	83 ec 08             	sub    esp,0x8
c001629d:	68 5c 01 00 00       	push   0x15c
c00162a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162a6:	e8 fc c2 ff ff       	call   c00125a7 <operator delete(void*, unsigned long)>
c00162ab:	83 c4 10             	add    esp,0x10
c00162ae:	83 c4 0c             	add    esp,0xc
c00162b1:	c3                   	ret    

c00162b2 <Timer::read()>:
c00162b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00162b6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00162bc:	c3                   	ret    

c00162bd <timerHandler(unsigned long long)>:
c00162bd:	55                   	push   ebp
c00162be:	57                   	push   edi
c00162bf:	56                   	push   esi
c00162c0:	53                   	push   ebx
c00162c1:	83 ec 0c             	sub    esp,0xc
c00162c4:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00162c8:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00162cc:	01 35 d0 ce 02 c0    	add    DWORD PTR ds:0xc002ced0,esi
c00162d2:	11 3d d4 ce 02 c0    	adc    DWORD PTR ds:0xc002ced4,edi
c00162d8:	80 3d 4d c8 02 c0 00 	cmp    BYTE PTR ds:0xc002c84d,0x0
c00162df:	0f 84 07 01 00 00    	je     c00163ec <timerHandler(unsigned long long)+0x12f>
c00162e5:	e8 6d 69 00 00       	call   c001cc57 <lockStuff()>
c00162ea:	83 ec 0c             	sub    esp,0xc
c00162ed:	68 7c dd 02 c0       	push   0xc002dd7c
c00162f2:	e8 37 10 01 00       	call   c002732e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00162f7:	c7 04 24 7c dd 02 c0 	mov    DWORD PTR [esp],0xc002dd7c
c00162fe:	89 c3                	mov    ebx,eax
c0016300:	e8 31 10 01 00       	call   c0027336 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016305:	83 c4 10             	add    esp,0x10
c0016308:	84 c0                	test   al,al
c001630a:	74 60                	je     c001636c <timerHandler(unsigned long long)+0xaf>
c001630c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016312:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016315:	85 c0                	test   eax,eax
c0016317:	0f 85 91 00 00 00    	jne    c00163ae <timerHandler(unsigned long long)+0xf1>
c001631d:	e9 be 00 00 00       	jmp    c00163e0 <timerHandler(unsigned long long)+0x123>
c0016322:	83 ec 0c             	sub    esp,0xc
c0016325:	55                   	push   ebp
c0016326:	e8 1d 6f 00 00       	call   c001d248 <unblockTask(ThreadControlBlock*)>
c001632b:	83 c4 10             	add    esp,0x10
c001632e:	39 eb                	cmp    ebx,ebp
c0016330:	75 12                	jne    c0016344 <timerHandler(unsigned long long)+0x87>
c0016332:	83 ec 0c             	sub    esp,0xc
c0016335:	68 7c dd 02 c0       	push   0xc002dd7c
c001633a:	e8 ef 0f 01 00       	call   c002732e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001633f:	89 c3                	mov    ebx,eax
c0016341:	83 c4 10             	add    esp,0x10
c0016344:	83 ec 0c             	sub    esp,0xc
c0016347:	68 7c dd 02 c0       	push   0xc002dd7c
c001634c:	e8 e5 0f 01 00       	call   c0027336 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016351:	83 c4 10             	add    esp,0x10
c0016354:	84 c0                	test   al,al
c0016356:	75 b4                	jne    c001630c <timerHandler(unsigned long long)+0x4f>
c0016358:	83 ec 0c             	sub    esp,0xc
c001635b:	68 7c dd 02 c0       	push   0xc002dd7c
c0016360:	e8 c9 0f 01 00       	call   c002732e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016365:	83 c4 10             	add    esp,0x10
c0016368:	39 d8                	cmp    eax,ebx
c001636a:	74 a0                	je     c001630c <timerHandler(unsigned long long)+0x4f>
c001636c:	83 ec 0c             	sub    esp,0xc
c001636f:	68 7c dd 02 c0       	push   0xc002dd7c
c0016374:	e8 b5 0f 01 00       	call   c002732e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016379:	c7 04 24 7c dd 02 c0 	mov    DWORD PTR [esp],0xc002dd7c
c0016380:	89 c5                	mov    ebp,eax
c0016382:	e8 cb 0f 01 00       	call   c0027352 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016387:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c001638a:	83 c4 10             	add    esp,0x10
c001638d:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016390:	39 15 d0 ce 02 c0    	cmp    DWORD PTR ds:0xc002ced0,edx
c0016396:	a1 d4 ce 02 c0       	mov    eax,ds:0xc002ced4
c001639b:	19 c8                	sbb    eax,ecx
c001639d:	73 83                	jae    c0016322 <timerHandler(unsigned long long)+0x65>
c001639f:	50                   	push   eax
c00163a0:	50                   	push   eax
c00163a1:	55                   	push   ebp
c00163a2:	68 7c dd 02 c0       	push   0xc002dd7c
c00163a7:	e8 54 10 01 00       	call   c0027400 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00163ac:	eb 93                	jmp    c0016341 <timerHandler(unsigned long long)+0x84>
c00163ae:	80 3d 4c c8 02 c0 00 	cmp    BYTE PTR ds:0xc002c84c,0x0
c00163b5:	74 29                	je     c00163e0 <timerHandler(unsigned long long)+0x123>
c00163b7:	39 c6                	cmp    esi,eax
c00163b9:	bb 00 00 00 00       	mov    ebx,0x0
c00163be:	19 df                	sbb    edi,ebx
c00163c0:	72 19                	jb     c00163db <timerHandler(unsigned long long)+0x11e>
c00163c2:	e8 69 68 00 00       	call   c001cc30 <lockScheduler()>
c00163c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163cc:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c00163cf:	e8 98 6b 00 00       	call   c001cf6c <schedule()>
c00163d4:	e8 59 68 00 00       	call   c001cc32 <unlockScheduler()>
c00163d9:	eb 05                	jmp    c00163e0 <timerHandler(unsigned long long)+0x123>
c00163db:	29 f0                	sub    eax,esi
c00163dd:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c00163e0:	83 c4 0c             	add    esp,0xc
c00163e3:	5b                   	pop    ebx
c00163e4:	5e                   	pop    esi
c00163e5:	5f                   	pop    edi
c00163e6:	5d                   	pop    ebp
c00163e7:	e9 05 6c 00 00       	jmp    c001cff1 <unlockStuff()>
c00163ec:	83 c4 0c             	add    esp,0xc
c00163ef:	5b                   	pop    ebx
c00163f0:	5e                   	pop    esi
c00163f1:	5f                   	pop    edi
c00163f2:	5d                   	pop    ebp
c00163f3:	c3                   	ret    

c00163f4 <setupTimer(int)>:
c00163f4:	57                   	push   edi
c00163f5:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c00163fa:	56                   	push   esi
c00163fb:	53                   	push   ebx
c00163fc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016400:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016406:	83 ec 0c             	sub    esp,0xc
c0016409:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001640f:	e8 4e d9 ff ff       	call   c0013d62 <Device::getName()>
c0016414:	83 c4 10             	add    esp,0x10
c0016417:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001641a:	0f 85 8d 00 00 00    	jne    c00164ad <setupTimer(int)+0xb9>
c0016420:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0016425:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c001642c:	74 7f                	je     c00164ad <setupTimer(int)+0xb9>
c001642e:	83 ec 0c             	sub    esp,0xc
c0016431:	68 5c 01 00 00       	push   0x15c
c0016436:	e8 99 90 ff ff       	call   c000f4d4 <malloc>
c001643b:	89 04 24             	mov    DWORD PTR [esp],eax
c001643e:	89 c3                	mov    ebx,eax
c0016440:	e8 51 ea 00 00       	call   c0024e96 <PIT::PIT()>
c0016445:	59                   	pop    ecx
c0016446:	5f                   	pop    edi
c0016447:	53                   	push   ebx
c0016448:	ff 35 48 c8 02 c0    	push   DWORD PTR ds:0xc002c848
c001644e:	e8 23 d6 ff ff       	call   c0013a76 <Device::addChild(Device*)>
c0016453:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016455:	6a 00                	push   0x0
c0016457:	6a 00                	push   0x0
c0016459:	56                   	push   esi
c001645a:	53                   	push   ebx
c001645b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001645e:	83 c4 14             	add    esp,0x14
c0016461:	68 60 01 00 00       	push   0x160
c0016466:	e8 69 90 ff ff       	call   c000f4d4 <malloc>
c001646b:	89 04 24             	mov    DWORD PTR [esp],eax
c001646e:	89 c7                	mov    edi,eax
c0016470:	e8 d1 e8 00 00       	call   c0024d46 <APICTimer::APICTimer()>
c0016475:	6a 00                	push   0x0
c0016477:	6a 00                	push   0x0
c0016479:	56                   	push   esi
c001647a:	57                   	push   edi
c001647b:	e8 c8 e7 00 00       	call   c0024c48 <APICTimer::open(int, int, void*)>
c0016480:	83 c4 20             	add    esp,0x20
c0016483:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016485:	6a 00                	push   0x0
c0016487:	6a 00                	push   0x0
c0016489:	6a 00                	push   0x0
c001648b:	53                   	push   ebx
c001648c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001648f:	58                   	pop    eax
c0016490:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0016495:	5a                   	pop    edx
c0016496:	57                   	push   edi
c0016497:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001649d:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00164a3:	e8 ce d5 ff ff       	call   c0013a76 <Device::addChild(Device*)>
c00164a8:	83 c4 10             	add    esp,0x10
c00164ab:	eb 33                	jmp    c00164e0 <setupTimer(int)+0xec>
c00164ad:	83 ec 0c             	sub    esp,0xc
c00164b0:	68 5c 01 00 00       	push   0x15c
c00164b5:	e8 1a 90 ff ff       	call   c000f4d4 <malloc>
c00164ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00164bd:	89 c3                	mov    ebx,eax
c00164bf:	e8 d2 e9 00 00       	call   c0024e96 <PIT::PIT()>
c00164c4:	58                   	pop    eax
c00164c5:	5a                   	pop    edx
c00164c6:	53                   	push   ebx
c00164c7:	ff 35 48 c8 02 c0    	push   DWORD PTR ds:0xc002c848
c00164cd:	e8 a4 d5 ff ff       	call   c0013a76 <Device::addChild(Device*)>
c00164d2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00164d4:	6a 00                	push   0x0
c00164d6:	6a 00                	push   0x0
c00164d8:	56                   	push   esi
c00164d9:	53                   	push   ebx
c00164da:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00164dd:	83 c4 20             	add    esp,0x20
c00164e0:	89 d8                	mov    eax,ebx
c00164e2:	5b                   	pop    ebx
c00164e3:	5e                   	pop    esi
c00164e4:	5f                   	pop    edi
c00164e5:	c3                   	ret    

c00164e6 <VCache::VCache(PhysicalDisk*)>:
c00164e6:	53                   	push   ebx
c00164e7:	83 ec 18             	sub    esp,0x18
c00164ea:	ba 9c 99 02 c0       	mov    edx,0xc002999c
c00164ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164f3:	89 10                	mov    DWORD PTR [eax],edx
c00164f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164f9:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016500:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016504:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001650b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001650f:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016516:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001651d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016521:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016528:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001652f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016533:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001653a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001653e:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016542:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c001654a:	83 ec 0c             	sub    esp,0xc
c001654d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016551:	e8 7e 8f ff ff       	call   c000f4d4 <malloc>
c0016556:	83 c4 10             	add    esp,0x10
c0016559:	89 c3                	mov    ebx,eax
c001655b:	83 ec 0c             	sub    esp,0xc
c001655e:	53                   	push   ebx
c001655f:	e8 ec 67 00 00       	call   c001cd50 <Mutex::Mutex()>
c0016564:	83 c4 10             	add    esp,0x10
c0016567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001656b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001656e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016572:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016576:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016579:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001657d:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016584:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016588:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001658e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016592:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016595:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016599:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001659f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00165a5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00165a9:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00165ac:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00165af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165b3:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00165b7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00165bb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00165c1:	c1 e0 06             	shl    eax,0x6
c00165c4:	83 ec 0c             	sub    esp,0xc
c00165c7:	50                   	push   eax
c00165c8:	e8 07 8f ff ff       	call   c000f4d4 <malloc>
c00165cd:	83 c4 10             	add    esp,0x10
c00165d0:	89 c2                	mov    edx,eax
c00165d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165d6:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00165d9:	90                   	nop
c00165da:	83 c4 18             	add    esp,0x18
c00165dd:	5b                   	pop    ebx
c00165de:	c3                   	ret    
c00165df:	90                   	nop

c00165e0 <VCache::writeWriteBuffer()>:
c00165e0:	53                   	push   ebx
c00165e1:	83 ec 14             	sub    esp,0x14
c00165e4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00165e8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00165eb:	8b 10                	mov    edx,DWORD PTR [eax]
c00165ed:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00165f0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00165f3:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00165f6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00165f9:	50                   	push   eax
c00165fa:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00165fd:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016604:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001660b:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001660f:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016616:	83 c4 28             	add    esp,0x28
c0016619:	5b                   	pop    ebx
c001661a:	c3                   	ret    
c001661b:	90                   	nop

c001661c <VCache::~VCache()>:
c001661c:	83 ec 0c             	sub    esp,0xc
c001661f:	ba 9c 99 02 c0       	mov    edx,0xc002999c
c0016624:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016628:	89 10                	mov    DWORD PTR [eax],edx
c001662a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001662e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016631:	84 c0                	test   al,al
c0016633:	74 0f                	je     c0016644 <VCache::~VCache()+0x28>
c0016635:	83 ec 0c             	sub    esp,0xc
c0016638:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001663c:	e8 9f ff ff ff       	call   c00165e0 <VCache::writeWriteBuffer()>
c0016641:	83 c4 10             	add    esp,0x10
c0016644:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016648:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001664b:	83 ec 0c             	sub    esp,0xc
c001664e:	50                   	push   eax
c001664f:	e8 90 8e ff ff       	call   c000f4e4 <free>
c0016654:	83 c4 10             	add    esp,0x10
c0016657:	90                   	nop
c0016658:	83 c4 0c             	add    esp,0xc
c001665b:	c3                   	ret    

c001665c <VCache::~VCache()>:
c001665c:	83 ec 0c             	sub    esp,0xc
c001665f:	83 ec 0c             	sub    esp,0xc
c0016662:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016666:	e8 b1 ff ff ff       	call   c001661c <VCache::~VCache()>
c001666b:	83 c4 10             	add    esp,0x10
c001666e:	83 ec 08             	sub    esp,0x8
c0016671:	6a 30                	push   0x30
c0016673:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016677:	e8 2b bf ff ff       	call   c00125a7 <operator delete(void*, unsigned long)>
c001667c:	83 c4 10             	add    esp,0x10
c001667f:	83 c4 0c             	add    esp,0xc
c0016682:	c3                   	ret    
c0016683:	90                   	nop

c0016684 <VCache::write(unsigned long long, int, void*)>:
c0016684:	55                   	push   ebp
c0016685:	57                   	push   edi
c0016686:	56                   	push   esi
c0016687:	53                   	push   ebx
c0016688:	83 ec 28             	sub    esp,0x28
c001668b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001668f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016693:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016697:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001669b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001669e:	e8 0f 6b 00 00       	call   c001d1b2 <Semaphore::acquire()>
c00166a3:	83 c4 10             	add    esp,0x10
c00166a6:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00166aa:	74 66                	je     c0016712 <VCache::write(unsigned long long, int, void*)+0x8e>
c00166ac:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00166af:	99                   	cdq    
c00166b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00166b4:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00166b7:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00166ba:	89 c1                	mov    ecx,eax
c00166bc:	89 d0                	mov    eax,edx
c00166be:	31 f1                	xor    ecx,esi
c00166c0:	31 f8                	xor    eax,edi
c00166c2:	89 ca                	mov    edx,ecx
c00166c4:	09 c2                	or     edx,eax
c00166c6:	75 3e                	jne    c0016706 <VCache::write(unsigned long long, int, void*)+0x82>
c00166c8:	83 fd 01             	cmp    ebp,0x1
c00166cb:	75 39                	jne    c0016706 <VCache::write(unsigned long long, int, void*)+0x82>
c00166cd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00166d0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00166d6:	51                   	push   ecx
c00166d7:	50                   	push   eax
c00166d8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00166dc:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00166e0:	0f af c8             	imul   ecx,eax
c00166e3:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00166e6:	51                   	push   ecx
c00166e7:	e8 69 9f fe ff       	call   c0000655 <memcpy>
c00166ec:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00166ef:	83 c4 10             	add    esp,0x10
c00166f2:	40                   	inc    eax
c00166f3:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00166f6:	83 f8 40             	cmp    eax,0x40
c00166f9:	75 57                	jne    c0016752 <VCache::write(unsigned long long, int, void*)+0xce>
c00166fb:	83 ec 0c             	sub    esp,0xc
c00166fe:	53                   	push   ebx
c00166ff:	e8 dc fe ff ff       	call   c00165e0 <VCache::writeWriteBuffer()>
c0016704:	eb 34                	jmp    c001673a <VCache::write(unsigned long long, int, void*)+0xb6>
c0016706:	83 ec 0c             	sub    esp,0xc
c0016709:	53                   	push   ebx
c001670a:	e8 d1 fe ff ff       	call   c00165e0 <VCache::writeWriteBuffer()>
c001670f:	83 c4 10             	add    esp,0x10
c0016712:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016715:	83 fd 3f             	cmp    ebp,0x3f
c0016718:	7f 25                	jg     c001673f <VCache::write(unsigned long long, int, void*)+0xbb>
c001671a:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001671d:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016720:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0016723:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016727:	52                   	push   edx
c0016728:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001672e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016732:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016735:	e8 1b 9f fe ff       	call   c0000655 <memcpy>
c001673a:	83 c4 10             	add    esp,0x10
c001673d:	eb 13                	jmp    c0016752 <VCache::write(unsigned long long, int, void*)+0xce>
c001673f:	83 ec 0c             	sub    esp,0xc
c0016742:	8b 10                	mov    edx,DWORD PTR [eax]
c0016744:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016748:	55                   	push   ebp
c0016749:	57                   	push   edi
c001674a:	56                   	push   esi
c001674b:	50                   	push   eax
c001674c:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001674f:	83 c4 20             	add    esp,0x20
c0016752:	83 ec 0c             	sub    esp,0xc
c0016755:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016758:	e8 03 70 00 00       	call   c001d760 <Semaphore::release()>
c001675d:	83 c4 2c             	add    esp,0x2c
c0016760:	31 c0                	xor    eax,eax
c0016762:	5b                   	pop    ebx
c0016763:	5e                   	pop    esi
c0016764:	5f                   	pop    edi
c0016765:	5d                   	pop    ebp
c0016766:	c3                   	ret    
c0016767:	90                   	nop

c0016768 <VCache::read(unsigned long long, int, void*)>:
c0016768:	57                   	push   edi
c0016769:	56                   	push   esi
c001676a:	53                   	push   ebx
c001676b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001676f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0016773:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0016777:	83 ec 0c             	sub    esp,0xc
c001677a:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001677d:	e8 30 6a 00 00       	call   c001d1b2 <Semaphore::acquire()>
c0016782:	83 c4 10             	add    esp,0x10
c0016785:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016789:	74 0c                	je     c0016797 <VCache::read(unsigned long long, int, void*)+0x2f>
c001678b:	83 ec 0c             	sub    esp,0xc
c001678e:	53                   	push   ebx
c001678f:	e8 4c fe ff ff       	call   c00165e0 <VCache::writeWriteBuffer()>
c0016794:	83 c4 10             	add    esp,0x10
c0016797:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001679a:	83 ec 0c             	sub    esp,0xc
c001679d:	8b 10                	mov    edx,DWORD PTR [eax]
c001679f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00167a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00167a7:	57                   	push   edi
c00167a8:	56                   	push   esi
c00167a9:	50                   	push   eax
c00167aa:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00167ad:	83 c4 14             	add    esp,0x14
c00167b0:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00167b3:	e8 a8 6f 00 00       	call   c001d760 <Semaphore::release()>
c00167b8:	83 c4 10             	add    esp,0x10
c00167bb:	31 c0                	xor    eax,eax
c00167bd:	5b                   	pop    ebx
c00167be:	5e                   	pop    esi
c00167bf:	5f                   	pop    edi
c00167c0:	c3                   	ret    
c00167c1:	90                   	nop

c00167c2 <Video::putrect(int, int, int, int, unsigned int)>:
c00167c2:	55                   	push   ebp
c00167c3:	57                   	push   edi
c00167c4:	56                   	push   esi
c00167c5:	53                   	push   ebx
c00167c6:	83 ec 1c             	sub    esp,0x1c
c00167c9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00167cd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00167d1:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00167d5:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00167d9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00167dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00167e1:	01 df                	add    edi,ebx
c00167e3:	39 fb                	cmp    ebx,edi
c00167e5:	7d 1f                	jge    c0016806 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c00167e7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00167eb:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00167ef:	7d 12                	jge    c0016803 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c00167f1:	8b 16                	mov    edx,DWORD PTR [esi]
c00167f3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00167f7:	53                   	push   ebx
c00167f8:	55                   	push   ebp
c00167f9:	45                   	inc    ebp
c00167fa:	56                   	push   esi
c00167fb:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00167fe:	83 c4 10             	add    esp,0x10
c0016801:	eb e8                	jmp    c00167eb <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016803:	43                   	inc    ebx
c0016804:	eb dd                	jmp    c00167e3 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016806:	83 c4 1c             	add    esp,0x1c
c0016809:	5b                   	pop    ebx
c001680a:	5e                   	pop    esi
c001680b:	5f                   	pop    edi
c001680c:	5d                   	pop    ebp
c001680d:	c3                   	ret    

c001680e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001680e:	55                   	push   ebp
c001680f:	57                   	push   edi
c0016810:	31 ff                	xor    edi,edi
c0016812:	56                   	push   esi
c0016813:	53                   	push   ebx
c0016814:	83 ec 1c             	sub    esp,0x1c
c0016817:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001681b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001681f:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016826:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001682b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001682f:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016833:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016837:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001683a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001683e:	01 f9                	add    ecx,edi
c0016840:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016844:	7d 2f                	jge    c0016875 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016846:	31 f6                	xor    esi,esi
c0016848:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001684c:	01 f2                	add    edx,esi
c001684e:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016852:	7d 1a                	jge    c001686e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016854:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016857:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001685a:	46                   	inc    esi
c001685b:	51                   	push   ecx
c001685c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016860:	52                   	push   edx
c0016861:	55                   	push   ebp
c0016862:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016865:	83 c4 10             	add    esp,0x10
c0016868:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001686c:	eb da                	jmp    c0016848 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001686e:	47                   	inc    edi
c001686f:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016873:	eb c5                	jmp    c001683a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016875:	83 c4 1c             	add    esp,0x1c
c0016878:	5b                   	pop    ebx
c0016879:	5e                   	pop    esi
c001687a:	5f                   	pop    edi
c001687b:	5d                   	pop    ebp
c001687c:	c3                   	ret    
c001687d:	90                   	nop

c001687e <Video::blit(unsigned int*, int, int, int, int)>:
c001687e:	55                   	push   ebp
c001687f:	57                   	push   edi
c0016880:	56                   	push   esi
c0016881:	53                   	push   ebx
c0016882:	83 ec 1c             	sub    esp,0x1c
c0016885:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016889:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001688d:	85 c0                	test   eax,eax
c001688f:	79 02                	jns    c0016893 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016891:	31 c0                	xor    eax,eax
c0016893:	c1 e0 02             	shl    eax,0x2
c0016896:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001689a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001689e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00168a2:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00168a6:	39 d8                	cmp    eax,ebx
c00168a8:	7e 49                	jle    c00168f3 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00168aa:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00168b0:	7c 41                	jl     c00168f3 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00168b2:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00168b6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00168ba:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00168be:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00168c2:	39 f9                	cmp    ecx,edi
c00168c4:	7e 22                	jle    c00168e8 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00168c6:	83 c5 04             	add    ebp,0x4
c00168c9:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00168cf:	7c 14                	jl     c00168e5 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00168d1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00168d3:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00168d6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00168da:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00168de:	56                   	push   esi
c00168df:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00168e2:	83 c4 10             	add    esp,0x10
c00168e5:	47                   	inc    edi
c00168e6:	eb d2                	jmp    c00168ba <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00168e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00168ec:	43                   	inc    ebx
c00168ed:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00168f1:	eb ab                	jmp    c001689e <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00168f3:	83 c4 1c             	add    esp,0x1c
c00168f6:	5b                   	pop    ebx
c00168f7:	5e                   	pop    esi
c00168f8:	5f                   	pop    edi
c00168f9:	5d                   	pop    ebp
c00168fa:	c3                   	ret    
c00168fb:	90                   	nop

c00168fc <Video::clearScreen(unsigned int)>:
c00168fc:	57                   	push   edi
c00168fd:	56                   	push   esi
c00168fe:	53                   	push   ebx
c00168ff:	31 db                	xor    ebx,ebx
c0016901:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016905:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001690b:	7e 1f                	jle    c001692c <Video::clearScreen(unsigned int)+0x30>
c001690d:	31 ff                	xor    edi,edi
c001690f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016915:	7e 12                	jle    c0016929 <Video::clearScreen(unsigned int)+0x2d>
c0016917:	8b 06                	mov    eax,DWORD PTR [esi]
c0016919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001691d:	53                   	push   ebx
c001691e:	57                   	push   edi
c001691f:	47                   	inc    edi
c0016920:	56                   	push   esi
c0016921:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016924:	83 c4 10             	add    esp,0x10
c0016927:	eb e6                	jmp    c001690f <Video::clearScreen(unsigned int)+0x13>
c0016929:	43                   	inc    ebx
c001692a:	eb d9                	jmp    c0016905 <Video::clearScreen(unsigned int)+0x9>
c001692c:	5b                   	pop    ebx
c001692d:	5e                   	pop    esi
c001692e:	5f                   	pop    edi
c001692f:	c3                   	ret    

c0016930 <Video::putpixel(int, int, unsigned int)>:
c0016930:	c7 44 24 04 a4 99 02 c0 	mov    DWORD PTR [esp+0x4],0xc00299a4
c0016938:	e9 64 2e 00 00       	jmp    c00197a1 <Krnl::panic(char const*)>
c001693d:	90                   	nop

c001693e <Video::Video(char const*)>:
c001693e:	83 ec 0c             	sub    esp,0xc
c0016941:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016945:	83 ec 08             	sub    esp,0x8
c0016948:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001694c:	50                   	push   eax
c001694d:	e8 14 d3 ff ff       	call   c0013c66 <Device::Device(char const*)>
c0016952:	83 c4 10             	add    esp,0x10
c0016955:	ba 28 9a 02 c0       	mov    edx,0xc0029a28
c001695a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001695e:	89 10                	mov    DWORD PTR [eax],edx
c0016960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016964:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001696e:	90                   	nop
c001696f:	83 c4 0c             	add    esp,0xc
c0016972:	c3                   	ret    
c0016973:	90                   	nop

c0016974 <Video::~Video()>:
c0016974:	83 ec 0c             	sub    esp,0xc
c0016977:	ba 28 9a 02 c0       	mov    edx,0xc0029a28
c001697c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016980:	89 10                	mov    DWORD PTR [eax],edx
c0016982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016986:	83 ec 0c             	sub    esp,0xc
c0016989:	50                   	push   eax
c001698a:	e8 b9 cf ff ff       	call   c0013948 <Device::~Device()>
c001698f:	83 c4 10             	add    esp,0x10
c0016992:	90                   	nop
c0016993:	83 c4 0c             	add    esp,0xc
c0016996:	c3                   	ret    
c0016997:	90                   	nop

c0016998 <Video::~Video()>:
c0016998:	83 ec 0c             	sub    esp,0xc
c001699b:	83 ec 0c             	sub    esp,0xc
c001699e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00169a2:	e8 cd ff ff ff       	call   c0016974 <Video::~Video()>
c00169a7:	83 c4 10             	add    esp,0x10
c00169aa:	83 ec 08             	sub    esp,0x8
c00169ad:	68 64 01 00 00       	push   0x164
c00169b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00169b6:	e8 ec bb ff ff       	call   c00125a7 <operator delete(void*, unsigned long)>
c00169bb:	83 c4 10             	add    esp,0x10
c00169be:	83 c4 0c             	add    esp,0xc
c00169c1:	c3                   	ret    

c00169c2 <Video::isMonochrome()>:
c00169c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00169c6:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00169cc:	c3                   	ret    
c00169cd:	90                   	nop

c00169ce <Video::getWidth()>:
c00169ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00169d2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00169d8:	c3                   	ret    
c00169d9:	90                   	nop

c00169da <Video::getHeight()>:
c00169da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00169de:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00169e4:	c3                   	ret    
c00169e5:	90                   	nop

c00169e6 <Video::drawCursor(int, int, unsigned char*, int)>:
c00169e6:	55                   	push   ebp
c00169e7:	57                   	push   edi
c00169e8:	56                   	push   esi
c00169e9:	53                   	push   ebx
c00169ea:	83 ec 2c             	sub    esp,0x2c
c00169ed:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00169f1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00169f5:	83 f8 01             	cmp    eax,0x1
c00169f8:	19 c9                	sbb    ecx,ecx
c00169fa:	31 db                	xor    ebx,ebx
c00169fc:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016a00:	89 cd                	mov    ebp,ecx
c0016a02:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016a0a:	f7 d5                	not    ebp
c0016a0c:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016a12:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016a16:	01 d8                	add    eax,ebx
c0016a18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016a1c:	56                   	push   esi
c0016a1d:	e8 b8 ff ff ff       	call   c00169da <Video::getHeight()>
c0016a22:	59                   	pop    ecx
c0016a23:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016a27:	7e 70                	jle    c0016a99 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016a29:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016a2d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016a31:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016a34:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016a38:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016a3c:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016a43:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016a47:	89 f8                	mov    eax,edi
c0016a49:	83 c0 20             	add    eax,0x20
c0016a4c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016a50:	56                   	push   esi
c0016a51:	e8 78 ff ff ff       	call   c00169ce <Video::getWidth()>
c0016a56:	5a                   	pop    edx
c0016a57:	39 c7                	cmp    edi,eax
c0016a59:	7d 34                	jge    c0016a8f <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016a5b:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0016a60:	74 05                	je     c0016a67 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016a62:	8b 06                	mov    eax,DWORD PTR [esi]
c0016a64:	55                   	push   ebp
c0016a65:	eb 0d                	jmp    c0016a74 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0016a67:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016a6c:	74 12                	je     c0016a80 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016a6e:	8b 06                	mov    eax,DWORD PTR [esi]
c0016a70:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016a74:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016a78:	57                   	push   edi
c0016a79:	56                   	push   esi
c0016a7a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016a7d:	83 c4 10             	add    esp,0x10
c0016a80:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0016a84:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016a88:	47                   	inc    edi
c0016a89:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016a8d:	75 c1                	jne    c0016a50 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0016a8f:	43                   	inc    ebx
c0016a90:	83 fb 20             	cmp    ebx,0x20
c0016a93:	0f 85 79 ff ff ff    	jne    c0016a12 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016a99:	83 c4 2c             	add    esp,0x2c
c0016a9c:	5b                   	pop    ebx
c0016a9d:	5e                   	pop    esi
c0016a9e:	5f                   	pop    edi
c0016a9f:	5d                   	pop    ebp
c0016aa0:	c3                   	ret    
c0016aa1:	90                   	nop

c0016aa2 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0016aa2:	55                   	push   ebp
c0016aa3:	57                   	push   edi
c0016aa4:	56                   	push   esi
c0016aa5:	53                   	push   ebx
c0016aa6:	83 ec 28             	sub    esp,0x28
c0016aa9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016aad:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0016ab1:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0016ab5:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0016ab9:	c1 e7 08             	shl    edi,0x8
c0016abc:	01 c7                	add    edi,eax
c0016abe:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0016ac2:	c1 e0 08             	shl    eax,0x8
c0016ac5:	01 d0                	add    eax,edx
c0016ac7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016acb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016acf:	0f af c7             	imul   eax,edi
c0016ad2:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0016ad9:	50                   	push   eax
c0016ada:	e8 f5 89 ff ff       	call   c000f4d4 <malloc>
c0016adf:	83 c4 10             	add    esp,0x10
c0016ae2:	89 c5                	mov    ebp,eax
c0016ae4:	85 c0                	test   eax,eax
c0016ae6:	75 15                	jne    c0016afd <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0016ae8:	83 ec 0c             	sub    esp,0xc
c0016aeb:	68 c5 99 02 c0       	push   0xc00299c5
c0016af0:	e8 92 bb ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0016af5:	83 c4 10             	add    esp,0x10
c0016af8:	e9 1c 01 00 00       	jmp    c0016c19 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0016afd:	be 12 00 00 00       	mov    esi,0x12
c0016b02:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0016b06:	74 11                	je     c0016b19 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0016b08:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c0016b0c:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0016b10:	c1 fe 03             	sar    esi,0x3
c0016b13:	0f af f0             	imul   esi,eax
c0016b16:	83 c6 12             	add    esi,0x12
c0016b19:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0016b1d:	74 04                	je     c0016b23 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0016b1f:	85 ff                	test   edi,edi
c0016b21:	75 12                	jne    c0016b35 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0016b23:	83 ec 0c             	sub    esp,0xc
c0016b26:	68 dc 99 02 c0       	push   0xc00299dc
c0016b2b:	e8 57 bb ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0016b30:	e9 ce 00 00 00       	jmp    c0016c03 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0016b35:	52                   	push   edx
c0016b36:	52                   	push   edx
c0016b37:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0016b3b:	50                   	push   eax
c0016b3c:	68 f1 99 02 c0       	push   0xc00299f1
c0016b41:	e8 41 bb ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0016b46:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0016b4a:	83 c4 10             	add    esp,0x10
c0016b4d:	80 fa 02             	cmp    dl,0x2
c0016b50:	0f 85 98 00 00 00    	jne    c0016bee <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0016b56:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0016b5b:	75 10                	jne    c0016b6d <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016b5d:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0016b61:	75 0a                	jne    c0016b6d <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016b63:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0016b66:	83 e8 18             	sub    eax,0x18
c0016b69:	a8 f7                	test   al,0xf7
c0016b6b:	74 0a                	je     c0016b77 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0016b6d:	83 ec 0c             	sub    esp,0xc
c0016b70:	68 fe 99 02 c0       	push   0xc00299fe
c0016b75:	eb 7f                	jmp    c0016bf6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0016b77:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016b7f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016b87:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016b8b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016b93:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0016b97:	75 0c                	jne    c0016ba5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0016b99:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0016b9e:	c1 e0 18             	shl    eax,0x18
c0016ba1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016ba5:	41                   	inc    ecx
c0016ba6:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0016bab:	c1 e2 10             	shl    edx,0x10
c0016bae:	89 d0                	mov    eax,edx
c0016bb0:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0016bb5:	c1 e2 08             	shl    edx,0x8
c0016bb8:	09 c2                	or     edx,eax
c0016bba:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0016bbe:	09 c2                	or     edx,eax
c0016bc0:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0016bc4:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c0016bc8:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0016bcc:	c1 f8 03             	sar    eax,0x3
c0016bcf:	01 c6                	add    esi,eax
c0016bd1:	89 c8                	mov    eax,ecx
c0016bd3:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0016bd7:	39 c7                	cmp    edi,eax
c0016bd9:	7f b0                	jg     c0016b8b <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0016bdb:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016bdf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016be3:	39 14 24             	cmp    DWORD PTR [esp],edx
c0016be6:	7e 22                	jle    c0016c0a <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0016be8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0016bec:	eb 99                	jmp    c0016b87 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c0016bee:	50                   	push   eax
c0016bef:	50                   	push   eax
c0016bf0:	52                   	push   edx
c0016bf1:	68 0c 9a 02 c0       	push   0xc0029a0c
c0016bf6:	e8 8c ba ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0016bfb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016bfe:	e8 e1 88 ff ff       	call   c000f4e4 <free>
c0016c03:	83 c4 10             	add    esp,0x10
c0016c06:	31 ed                	xor    ebp,ebp
c0016c08:	eb 0f                	jmp    c0016c19 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0016c0a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016c0e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0016c11:	89 38                	mov    DWORD PTR [eax],edi
c0016c13:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016c17:	89 08                	mov    DWORD PTR [eax],ecx
c0016c19:	83 c4 1c             	add    esp,0x1c
c0016c1c:	89 e8                	mov    eax,ebp
c0016c1e:	5b                   	pop    ebx
c0016c1f:	5e                   	pop    esi
c0016c20:	5f                   	pop    edi
c0016c21:	5d                   	pop    ebp
c0016c22:	c3                   	ret    
c0016c23:	90                   	nop

c0016c24 <Video::putTGA(int, int, unsigned char*, int)>:
c0016c24:	55                   	push   ebp
c0016c25:	57                   	push   edi
c0016c26:	56                   	push   esi
c0016c27:	53                   	push   ebx
c0016c28:	83 ec 28             	sub    esp,0x28
c0016c2b:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016c2f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016c33:	50                   	push   eax
c0016c34:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016c38:	50                   	push   eax
c0016c39:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016c3d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016c41:	56                   	push   esi
c0016c42:	e8 5b fe ff ff       	call   c0016aa2 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0016c47:	83 c4 20             	add    esp,0x20
c0016c4a:	85 c0                	test   eax,eax
c0016c4c:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016c50:	74 35                	je     c0016c87 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016c52:	89 c7                	mov    edi,eax
c0016c54:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016c58:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0016c5c:	39 d8                	cmp    eax,ebx
c0016c5e:	7e 27                	jle    c0016c87 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016c60:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016c64:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016c68:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0016c6c:	39 e8                	cmp    eax,ebp
c0016c6e:	7e 14                	jle    c0016c84 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0016c70:	8b 06                	mov    eax,DWORD PTR [esi]
c0016c72:	83 c7 04             	add    edi,0x4
c0016c75:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0016c78:	53                   	push   ebx
c0016c79:	55                   	push   ebp
c0016c7a:	45                   	inc    ebp
c0016c7b:	56                   	push   esi
c0016c7c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016c7f:	83 c4 10             	add    esp,0x10
c0016c82:	eb e0                	jmp    c0016c64 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0016c84:	43                   	inc    ebx
c0016c85:	eb cd                	jmp    c0016c54 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0016c87:	83 c4 1c             	add    esp,0x1c
c0016c8a:	5b                   	pop    ebx
c0016c8b:	5e                   	pop    esi
c0016c8c:	5f                   	pop    edi
c0016c8d:	5d                   	pop    ebp
c0016c8e:	c3                   	ret    
c0016c8f:	90                   	nop

c0016c90 <ACPI::close(int, int, void*)>:
c0016c90:	83 ec 1c             	sub    esp,0x1c
c0016c93:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0016c9b:	74 0a                	je     c0016ca7 <ACPI::close(int, int, void*)+0x17>
c0016c9d:	b8 00 00 00 00       	mov    eax,0x0
c0016ca2:	e9 9a 00 00 00       	jmp    c0016d41 <ACPI::close(int, int, void*)+0xb1>
c0016ca7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016cac:	75 37                	jne    c0016ce5 <ACPI::close(int, int, void*)+0x55>
c0016cae:	83 ec 0c             	sub    esp,0xc
c0016cb1:	68 68 9a 02 c0       	push   0xc0029a68
c0016cb6:	e8 cc b9 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0016cbb:	83 c4 10             	add    esp,0x10
c0016cbe:	a1 e8 ce 02 c0       	mov    eax,ds:0xc002cee8
c0016cc3:	85 c0                	test   eax,eax
c0016cc5:	74 07                	je     c0016cce <ACPI::close(int, int, void*)+0x3e>
c0016cc7:	a1 e8 ce 02 c0       	mov    eax,ds:0xc002cee8
c0016ccc:	ff d0                	call   eax
c0016cce:	83 ec 0c             	sub    esp,0xc
c0016cd1:	68 3c 9b 02 c0       	push   0xc0029b3c
c0016cd6:	e8 c6 2a 00 00       	call   c00197a1 <Krnl::panic(char const*)>
c0016cdb:	83 c4 10             	add    esp,0x10
c0016cde:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016ce3:	eb 5c                	jmp    c0016d41 <ACPI::close(int, int, void*)+0xb1>
c0016ce5:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0016cea:	75 50                	jne    c0016d3c <ACPI::close(int, int, void*)+0xac>
c0016cec:	a1 e4 ce 02 c0       	mov    eax,ds:0xc002cee4
c0016cf1:	85 c0                	test   eax,eax
c0016cf3:	74 07                	je     c0016cfc <ACPI::close(int, int, void*)+0x6c>
c0016cf5:	a1 e4 ce 02 c0       	mov    eax,ds:0xc002cee4
c0016cfa:	ff d0                	call   eax
c0016cfc:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0016d01:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016d06:	83 e0 02             	and    eax,0x2
c0016d09:	74 1c                	je     c0016d27 <ACPI::close(int, int, void*)+0x97>
c0016d0b:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0016d12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016d16:	89 c2                	mov    edx,eax
c0016d18:	ec                   	in     al,dx
c0016d19:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0016d1d:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0016d21:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016d25:	eb da                	jmp    c0016d01 <ACPI::close(int, int, void*)+0x71>
c0016d27:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0016d2e:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0016d33:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0016d37:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016d3b:	ee                   	out    dx,al
c0016d3c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016d41:	83 c4 1c             	add    esp,0x1c
c0016d44:	c3                   	ret    

c0016d45 <findRSDP()>:
c0016d45:	83 ec 1c             	sub    esp,0x1c
c0016d48:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0016d4d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016d53:	83 e0 04             	and    eax,0x4
c0016d56:	84 c0                	test   al,al
c0016d58:	75 07                	jne    c0016d61 <findRSDP()+0x1c>
c0016d5a:	b8 00 00 00 00       	mov    eax,0x0
c0016d5f:	eb 6a                	jmp    c0016dcb <findRSDP()+0x86>
c0016d61:	a1 90 c8 02 c0       	mov    eax,ds:0xc002c890
c0016d66:	3d ff 07 00 00       	cmp    eax,0x7ff
c0016d6b:	7f 1b                	jg     c0016d88 <findRSDP()+0x43>
c0016d6d:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0016d72:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016d78:	83 e2 fb             	and    edx,0xfffffffb
c0016d7b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016d81:	b8 00 00 00 00       	mov    eax,0x0
c0016d86:	eb 43                	jmp    c0016dcb <findRSDP()+0x86>
c0016d88:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0016d90:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0016d98:	77 2c                	ja     c0016dc6 <findRSDP()+0x81>
c0016d9a:	83 ec 04             	sub    esp,0x4
c0016d9d:	6a 08                	push   0x8
c0016d9f:	68 75 9a 02 c0       	push   0xc0029a75
c0016da4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016da8:	e8 45 98 fe ff       	call   c00005f2 <memcmp>
c0016dad:	83 c4 10             	add    esp,0x10
c0016db0:	85 c0                	test   eax,eax
c0016db2:	0f 94 c0             	sete   al
c0016db5:	84 c0                	test   al,al
c0016db7:	74 06                	je     c0016dbf <findRSDP()+0x7a>
c0016db9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016dbd:	eb 0c                	jmp    c0016dcb <findRSDP()+0x86>
c0016dbf:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0016dc4:	eb ca                	jmp    c0016d90 <findRSDP()+0x4b>
c0016dc6:	b8 00 00 00 00       	mov    eax,0x0
c0016dcb:	83 c4 1c             	add    esp,0x1c
c0016dce:	c3                   	ret    

c0016dcf <loadACPITables(unsigned char*)>:
c0016dcf:	56                   	push   esi
c0016dd0:	53                   	push   ebx
c0016dd1:	83 ec 44             	sub    esp,0x44
c0016dd4:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0016dd9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016ddf:	83 e0 04             	and    eax,0x4
c0016de2:	84 c0                	test   al,al
c0016de4:	0f 84 05 02 00 00    	je     c0016fef <loadACPITables(unsigned char*)+0x220>
c0016dea:	a0 00 d1 02 c0       	mov    al,ds:0xc002d100
c0016def:	84 c0                	test   al,al
c0016df1:	74 75                	je     c0016e68 <loadACPITables(unsigned char*)+0x99>
c0016df3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016df7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016dfb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016dff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016e02:	83 e8 24             	sub    eax,0x24
c0016e05:	c1 e8 03             	shr    eax,0x3
c0016e08:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0016e0c:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0016e14:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016e18:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0016e1c:	0f 8d b2 00 00 00    	jge    c0016ed4 <loadACPITables(unsigned char*)+0x105>
c0016e22:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016e26:	83 c0 24             	add    eax,0x24
c0016e29:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016e2d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016e31:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0016e35:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016e39:	c1 e0 03             	shl    eax,0x3
c0016e3c:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0016e40:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016e44:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0016e47:	8b 00                	mov    eax,DWORD PTR [eax]
c0016e49:	89 c1                	mov    ecx,eax
c0016e4b:	a1 ec ce 02 c0       	mov    eax,ds:0xc002ceec
c0016e50:	8d 50 01             	lea    edx,[eax+0x1]
c0016e53:	89 15 ec ce 02 c0    	mov    DWORD PTR ds:0xc002ceec,edx
c0016e59:	89 ca                	mov    edx,ecx
c0016e5b:	89 14 c5 04 cf 02 c0 	mov    DWORD PTR [eax*8-0x3ffd30fc],edx
c0016e62:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0016e66:	eb ac                	jmp    c0016e14 <loadACPITables(unsigned char*)+0x45>
c0016e68:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016e6c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016e70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e74:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016e77:	83 e8 24             	sub    eax,0x24
c0016e7a:	c1 e8 02             	shr    eax,0x2
c0016e7d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016e81:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0016e89:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016e8d:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0016e91:	7d 41                	jge    c0016ed4 <loadACPITables(unsigned char*)+0x105>
c0016e93:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016e97:	83 c0 24             	add    eax,0x24
c0016e9a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016e9e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016ea2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016ea6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016eaa:	c1 e0 02             	shl    eax,0x2
c0016ead:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0016eb1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016eb5:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016eb7:	a1 ec ce 02 c0       	mov    eax,ds:0xc002ceec
c0016ebc:	8d 50 01             	lea    edx,[eax+0x1]
c0016ebf:	89 15 ec ce 02 c0    	mov    DWORD PTR ds:0xc002ceec,edx
c0016ec5:	89 ca                	mov    edx,ecx
c0016ec7:	89 14 c5 04 cf 02 c0 	mov    DWORD PTR [eax*8-0x3ffd30fc],edx
c0016ece:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0016ed2:	eb b5                	jmp    c0016e89 <loadACPITables(unsigned char*)+0xba>
c0016ed4:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0016edc:	a1 ec ce 02 c0       	mov    eax,ds:0xc002ceec
c0016ee1:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0016ee5:	0f 8d 05 01 00 00    	jge    c0016ff0 <loadACPITables(unsigned char*)+0x221>
c0016eeb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016eef:	8b 04 c5 04 cf 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd30fc]
c0016ef6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016efa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016efe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f06:	25 ff 0f 00 00       	and    eax,0xfff
c0016f0b:	89 c6                	mov    esi,eax
c0016f0d:	e8 15 a9 ff ff       	call   c0011827 <Virt::getAKernelVAS()>
c0016f12:	89 c3                	mov    ebx,eax
c0016f14:	83 ec 0c             	sub    esp,0xc
c0016f17:	6a 01                	push   0x1
c0016f19:	e8 79 a7 ff ff       	call   c0011697 <Virt::allocateKernelVirtualPages(int)>
c0016f1e:	83 c4 10             	add    esp,0x10
c0016f21:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016f25:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016f2b:	83 ec 0c             	sub    esp,0xc
c0016f2e:	6a 01                	push   0x1
c0016f30:	6a 01                	push   0x1
c0016f32:	50                   	push   eax
c0016f33:	52                   	push   edx
c0016f34:	53                   	push   ebx
c0016f35:	e8 1c b1 ff ff       	call   c0012056 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016f3a:	83 c4 20             	add    esp,0x20
c0016f3d:	09 f0                	or     eax,esi
c0016f3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016f43:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016f47:	c1 e0 03             	shl    eax,0x3
c0016f4a:	05 00 cf 02 c0       	add    eax,0xc002cf00
c0016f4f:	83 ec 04             	sub    esp,0x4
c0016f52:	6a 04                	push   0x4
c0016f54:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016f58:	50                   	push   eax
c0016f59:	e8 f7 96 fe ff       	call   c0000655 <memcpy>
c0016f5e:	83 c4 10             	add    esp,0x10
c0016f61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f65:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016f68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016f6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016f70:	05 00 10 00 00       	add    eax,0x1000
c0016f75:	c1 e8 0c             	shr    eax,0xc
c0016f78:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016f7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f80:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f87:	25 ff 0f 00 00       	and    eax,0xfff
c0016f8c:	89 c6                	mov    esi,eax
c0016f8e:	e8 94 a8 ff ff       	call   c0011827 <Virt::getAKernelVAS()>
c0016f93:	89 c3                	mov    ebx,eax
c0016f95:	83 ec 0c             	sub    esp,0xc
c0016f98:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016f9c:	e8 f6 a6 ff ff       	call   c0011697 <Virt::allocateKernelVirtualPages(int)>
c0016fa1:	83 c4 10             	add    esp,0x10
c0016fa4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016fa8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016fae:	83 ec 0c             	sub    esp,0xc
c0016fb1:	6a 01                	push   0x1
c0016fb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016fb7:	50                   	push   eax
c0016fb8:	52                   	push   edx
c0016fb9:	53                   	push   ebx
c0016fba:	e8 97 b0 ff ff       	call   c0012056 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016fbf:	83 c4 20             	add    esp,0x20
c0016fc2:	09 f0                	or     eax,esi
c0016fc4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016fc8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016fcb:	83 ec 0c             	sub    esp,0xc
c0016fce:	50                   	push   eax
c0016fcf:	e8 27 aa ff ff       	call   c00119fb <Virt::freeKernelVirtualPages(unsigned long)>
c0016fd4:	83 c4 10             	add    esp,0x10
c0016fd7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016fdb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016fdf:	89 14 c5 04 cf 02 c0 	mov    DWORD PTR [eax*8-0x3ffd30fc],edx
c0016fe6:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0016fea:	e9 ed fe ff ff       	jmp    c0016edc <loadACPITables(unsigned char*)+0x10d>
c0016fef:	90                   	nop
c0016ff0:	83 c4 44             	add    esp,0x44
c0016ff3:	5b                   	pop    ebx
c0016ff4:	5e                   	pop    esi
c0016ff5:	c3                   	ret    

c0016ff6 <findRSDT(unsigned char*)>:
c0016ff6:	56                   	push   esi
c0016ff7:	53                   	push   ebx
c0016ff8:	83 ec 44             	sub    esp,0x44
c0016ffb:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0017000:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017006:	83 e0 04             	and    eax,0x4
c0017009:	84 c0                	test   al,al
c001700b:	75 0a                	jne    c0017017 <findRSDT(unsigned char*)+0x21>
c001700d:	b8 00 00 00 00       	mov    eax,0x0
c0017012:	e9 f7 00 00 00       	jmp    c001710e <findRSDT(unsigned char*)+0x118>
c0017017:	83 ec 04             	sub    esp,0x4
c001701a:	6a 24                	push   0x24
c001701c:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017020:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017024:	50                   	push   eax
c0017025:	e8 2b 96 fe ff       	call   c0000655 <memcpy>
c001702a:	83 c4 10             	add    esp,0x10
c001702d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017031:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017035:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c001703d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017041:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017045:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017049:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001704d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017051:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017055:	25 ff 0f 00 00       	and    eax,0xfff
c001705a:	89 c6                	mov    esi,eax
c001705c:	e8 c6 a7 ff ff       	call   c0011827 <Virt::getAKernelVAS()>
c0017061:	89 c3                	mov    ebx,eax
c0017063:	83 ec 0c             	sub    esp,0xc
c0017066:	6a 02                	push   0x2
c0017068:	e8 2a a6 ff ff       	call   c0011697 <Virt::allocateKernelVirtualPages(int)>
c001706d:	83 c4 10             	add    esp,0x10
c0017070:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017074:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001707a:	83 ec 0c             	sub    esp,0xc
c001707d:	6a 01                	push   0x1
c001707f:	6a 02                	push   0x2
c0017081:	50                   	push   eax
c0017082:	52                   	push   edx
c0017083:	53                   	push   ebx
c0017084:	e8 cd af ff ff       	call   c0012056 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017089:	83 c4 20             	add    esp,0x20
c001708c:	09 f0                	or     eax,esi
c001708e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017092:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017096:	25 ff 0f 00 00       	and    eax,0xfff
c001709b:	89 c6                	mov    esi,eax
c001709d:	e8 85 a7 ff ff       	call   c0011827 <Virt::getAKernelVAS()>
c00170a2:	89 c3                	mov    ebx,eax
c00170a4:	83 ec 0c             	sub    esp,0xc
c00170a7:	6a 02                	push   0x2
c00170a9:	e8 e9 a5 ff ff       	call   c0011697 <Virt::allocateKernelVirtualPages(int)>
c00170ae:	83 c4 10             	add    esp,0x10
c00170b1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00170b5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00170bb:	83 ec 0c             	sub    esp,0xc
c00170be:	6a 01                	push   0x1
c00170c0:	6a 02                	push   0x2
c00170c2:	50                   	push   eax
c00170c3:	52                   	push   edx
c00170c4:	53                   	push   ebx
c00170c5:	e8 8c af ff ff       	call   c0012056 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00170ca:	83 c4 20             	add    esp,0x20
c00170cd:	09 f0                	or     eax,esi
c00170cf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00170d3:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c00170d8:	75 11                	jne    c00170eb <findRSDT(unsigned char*)+0xf5>
c00170da:	c6 05 00 d1 02 c0 00 	mov    BYTE PTR ds:0xc002d100,0x0
c00170e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00170e5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00170e9:	eb 1f                	jmp    c001710a <findRSDT(unsigned char*)+0x114>
c00170eb:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c00170f0:	75 11                	jne    c0017103 <findRSDT(unsigned char*)+0x10d>
c00170f2:	c6 05 00 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d100,0x1
c00170f9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00170fd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017101:	eb 07                	jmp    c001710a <findRSDT(unsigned char*)+0x114>
c0017103:	b8 00 00 00 00       	mov    eax,0x0
c0017108:	eb 04                	jmp    c001710e <findRSDT(unsigned char*)+0x118>
c001710a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001710e:	83 c4 44             	add    esp,0x44
c0017111:	5b                   	pop    ebx
c0017112:	5e                   	pop    esi
c0017113:	c3                   	ret    

c0017114 <findDataTable(unsigned char*, char*)>:
c0017114:	83 ec 1c             	sub    esp,0x1c
c0017117:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c001711c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017122:	83 e0 04             	and    eax,0x4
c0017125:	84 c0                	test   al,al
c0017127:	75 07                	jne    c0017130 <findDataTable(unsigned char*, char*)+0x1c>
c0017129:	b8 00 00 00 00       	mov    eax,0x0
c001712e:	eb 7c                	jmp    c00171ac <findDataTable(unsigned char*, char*)+0x98>
c0017130:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017138:	a1 ec ce 02 c0       	mov    eax,ds:0xc002ceec
c001713d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017141:	7d 3a                	jge    c001717d <findDataTable(unsigned char*, char*)+0x69>
c0017143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017147:	c1 e0 03             	shl    eax,0x3
c001714a:	05 00 cf 02 c0       	add    eax,0xc002cf00
c001714f:	83 ec 04             	sub    esp,0x4
c0017152:	6a 04                	push   0x4
c0017154:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017158:	50                   	push   eax
c0017159:	e8 94 94 fe ff       	call   c00005f2 <memcmp>
c001715e:	83 c4 10             	add    esp,0x10
c0017161:	85 c0                	test   eax,eax
c0017163:	0f 94 c0             	sete   al
c0017166:	84 c0                	test   al,al
c0017168:	74 0d                	je     c0017177 <findDataTable(unsigned char*, char*)+0x63>
c001716a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001716e:	8b 04 c5 04 cf 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd30fc]
c0017175:	eb 35                	jmp    c00171ac <findDataTable(unsigned char*, char*)+0x98>
c0017177:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001717b:	eb bb                	jmp    c0017138 <findDataTable(unsigned char*, char*)+0x24>
c001717d:	a0 00 d1 02 c0       	mov    al,ds:0xc002d100
c0017182:	84 c0                	test   al,al
c0017184:	74 07                	je     c001718d <findDataTable(unsigned char*, char*)+0x79>
c0017186:	b8 58 00 00 00       	mov    eax,0x58
c001718b:	eb 05                	jmp    c0017192 <findDataTable(unsigned char*, char*)+0x7e>
c001718d:	b8 52 00 00 00       	mov    eax,0x52
c0017192:	83 ec 04             	sub    esp,0x4
c0017195:	50                   	push   eax
c0017196:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001719a:	68 60 9b 02 c0       	push   0xc0029b60
c001719f:	e8 e3 b4 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c00171a4:	83 c4 10             	add    esp,0x10
c00171a7:	b8 00 00 00 00       	mov    eax,0x0
c00171ac:	83 c4 1c             	add    esp,0x1c
c00171af:	c3                   	ret    

c00171b0 <scanMADT()>:
c00171b0:	53                   	push   ebx
c00171b1:	83 ec 38             	sub    esp,0x38
c00171b4:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c00171b9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00171bf:	83 e0 04             	and    eax,0x4
c00171c2:	84 c0                	test   al,al
c00171c4:	0f 84 63 04 00 00    	je     c001762d <scanMADT()+0x47d>
c00171ca:	e8 76 fb ff ff       	call   c0016d45 <findRSDP()>
c00171cf:	a3 0c d1 02 c0       	mov    ds:0xc002d10c,eax
c00171d4:	a1 0c d1 02 c0       	mov    eax,ds:0xc002d10c
c00171d9:	85 c0                	test   eax,eax
c00171db:	75 19                	jne    c00171f6 <scanMADT()+0x46>
c00171dd:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c00171e2:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00171e8:	83 e2 fb             	and    edx,0xfffffffb
c00171eb:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00171f1:	e9 3b 04 00 00       	jmp    c0017631 <scanMADT()+0x481>
c00171f6:	a1 0c d1 02 c0       	mov    eax,ds:0xc002d10c
c00171fb:	83 ec 0c             	sub    esp,0xc
c00171fe:	50                   	push   eax
c00171ff:	e8 f2 fd ff ff       	call   c0016ff6 <findRSDT(unsigned char*)>
c0017204:	83 c4 10             	add    esp,0x10
c0017207:	a3 08 d1 02 c0       	mov    ds:0xc002d108,eax
c001720c:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c0017211:	85 c0                	test   eax,eax
c0017213:	75 19                	jne    c001722e <scanMADT()+0x7e>
c0017215:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c001721a:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017220:	83 e2 fb             	and    edx,0xfffffffb
c0017223:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017229:	e9 03 04 00 00       	jmp    c0017631 <scanMADT()+0x481>
c001722e:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c0017233:	83 ec 0c             	sub    esp,0xc
c0017236:	50                   	push   eax
c0017237:	e8 93 fb ff ff       	call   c0016dcf <loadACPITables(unsigned char*)>
c001723c:	83 c4 10             	add    esp,0x10
c001723f:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c0017244:	83 ec 08             	sub    esp,0x8
c0017247:	68 7e 9a 02 c0       	push   0xc0029a7e
c001724c:	50                   	push   eax
c001724d:	e8 c2 fe ff ff       	call   c0017114 <findDataTable(unsigned char*, char*)>
c0017252:	83 c4 10             	add    esp,0x10
c0017255:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017259:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c001725e:	75 19                	jne    c0017279 <scanMADT()+0xc9>
c0017260:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0017265:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001726b:	83 e2 fe             	and    edx,0xfffffffe
c001726e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017274:	e9 b8 03 00 00       	jmp    c0017631 <scanMADT()+0x481>
c0017279:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017281:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017285:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017288:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001728c:	0f 87 9f 03 00 00    	ja     c0017631 <scanMADT()+0x481>
c0017292:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c001729a:	0f 87 91 03 00 00    	ja     c0017631 <scanMADT()+0x481>
c00172a0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00172a4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00172a8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00172ac:	8d 50 01             	lea    edx,[eax+0x1]
c00172af:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00172b3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00172b7:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00172bb:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00172bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00172c3:	8d 50 01             	lea    edx,[eax+0x1]
c00172c6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00172ca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00172ce:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00172d2:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00172d6:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c00172db:	0f 86 4f 03 00 00    	jbe    c0017630 <scanMADT()+0x480>
c00172e1:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c00172e6:	75 57                	jne    c001733f <scanMADT()+0x18f>
c00172e8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00172ec:	8d 50 01             	lea    edx,[eax+0x1]
c00172ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00172f3:	8a 15 00 d3 02 c0    	mov    dl,BYTE PTR ds:0xc002d300
c00172f9:	0f b6 d2             	movzx  edx,dl
c00172fc:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017300:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017304:	88 82 40 d3 02 c0    	mov    BYTE PTR [edx-0x3ffd2cc0],al
c001730a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001730e:	8d 50 01             	lea    edx,[eax+0x1]
c0017311:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017315:	8a 15 00 d3 02 c0    	mov    dl,BYTE PTR ds:0xc002d300
c001731b:	8d 4a 01             	lea    ecx,[edx+0x1]
c001731e:	88 0d 00 d3 02 c0    	mov    BYTE PTR ds:0xc002d300,cl
c0017324:	0f b6 d2             	movzx  edx,dl
c0017327:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001732b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001732f:	88 82 20 d3 02 c0    	mov    BYTE PTR [edx-0x3ffd2ce0],al
c0017335:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001733a:	e9 da 02 00 00       	jmp    c0017619 <scanMADT()+0x469>
c001733f:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017344:	0f 85 14 01 00 00    	jne    c001745e <scanMADT()+0x2ae>
c001734a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001734e:	8d 50 01             	lea    edx,[eax+0x1]
c0017351:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017355:	8a 15 c0 d1 02 c0    	mov    dl,BYTE PTR ds:0xc002d1c0
c001735b:	0f b6 d2             	movzx  edx,dl
c001735e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017362:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017366:	88 82 e0 d1 02 c0    	mov    BYTE PTR [edx-0x3ffd2e20],al
c001736c:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017370:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017374:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017378:	01 d0                	add    eax,edx
c001737a:	83 c0 2c             	add    eax,0x2c
c001737d:	8a 00                	mov    al,BYTE PTR [eax]
c001737f:	0f b6 d0             	movzx  edx,al
c0017382:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017386:	8d 48 01             	lea    ecx,[eax+0x1]
c0017389:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001738d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017391:	0f b6 c0             	movzx  eax,al
c0017394:	c1 e0 08             	shl    eax,0x8
c0017397:	89 d1                	mov    ecx,edx
c0017399:	09 c1                	or     ecx,eax
c001739b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001739f:	8d 50 02             	lea    edx,[eax+0x2]
c00173a2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00173a6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00173aa:	0f b6 c0             	movzx  eax,al
c00173ad:	c1 e0 10             	shl    eax,0x10
c00173b0:	09 c1                	or     ecx,eax
c00173b2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00173b6:	8d 50 03             	lea    edx,[eax+0x3]
c00173b9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00173bd:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00173c1:	0f b6 c0             	movzx  eax,al
c00173c4:	c1 e0 18             	shl    eax,0x18
c00173c7:	09 c1                	or     ecx,eax
c00173c9:	89 ca                	mov    edx,ecx
c00173cb:	a0 c0 d1 02 c0       	mov    al,ds:0xc002d1c0
c00173d0:	0f b6 c0             	movzx  eax,al
c00173d3:	89 14 85 00 d2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2e00],edx
c00173da:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00173df:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00173e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00173e7:	01 d0                	add    eax,edx
c00173e9:	83 c0 2c             	add    eax,0x2c
c00173ec:	8a 00                	mov    al,BYTE PTR [eax]
c00173ee:	0f b6 d0             	movzx  edx,al
c00173f1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00173f5:	8d 48 01             	lea    ecx,[eax+0x1]
c00173f8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00173fc:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017400:	0f b6 c0             	movzx  eax,al
c0017403:	c1 e0 08             	shl    eax,0x8
c0017406:	89 d1                	mov    ecx,edx
c0017408:	09 c1                	or     ecx,eax
c001740a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001740e:	8d 50 02             	lea    edx,[eax+0x2]
c0017411:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017415:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017419:	0f b6 c0             	movzx  eax,al
c001741c:	c1 e0 10             	shl    eax,0x10
c001741f:	09 c1                	or     ecx,eax
c0017421:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017425:	8d 50 03             	lea    edx,[eax+0x3]
c0017428:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001742c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017430:	0f b6 c0             	movzx  eax,al
c0017433:	c1 e0 18             	shl    eax,0x18
c0017436:	09 c1                	or     ecx,eax
c0017438:	89 ca                	mov    edx,ecx
c001743a:	a0 c0 d1 02 c0       	mov    al,ds:0xc002d1c0
c001743f:	0f b6 c0             	movzx  eax,al
c0017442:	89 14 85 80 d2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2d80],edx
c0017449:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001744e:	a0 c0 d1 02 c0       	mov    al,ds:0xc002d1c0
c0017453:	40                   	inc    eax
c0017454:	a2 c0 d1 02 c0       	mov    ds:0xc002d1c0,al
c0017459:	e9 bb 01 00 00       	jmp    c0017619 <scanMADT()+0x469>
c001745e:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017463:	0f 85 e9 00 00 00    	jne    c0017552 <scanMADT()+0x3a2>
c0017469:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001746d:	8d 50 01             	lea    edx,[eax+0x1]
c0017470:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017474:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017478:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001747c:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017480:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017484:	8d 50 01             	lea    edx,[eax+0x1]
c0017487:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001748b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001748f:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017493:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017497:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001749b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001749f:	01 d0                	add    eax,edx
c00174a1:	83 c0 2c             	add    eax,0x2c
c00174a4:	8a 00                	mov    al,BYTE PTR [eax]
c00174a6:	0f b6 d0             	movzx  edx,al
c00174a9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174ad:	8d 48 01             	lea    ecx,[eax+0x1]
c00174b0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00174b4:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00174b8:	0f b6 c0             	movzx  eax,al
c00174bb:	c1 e0 08             	shl    eax,0x8
c00174be:	89 d1                	mov    ecx,edx
c00174c0:	09 c1                	or     ecx,eax
c00174c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174c6:	8d 50 02             	lea    edx,[eax+0x2]
c00174c9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00174cd:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00174d1:	0f b6 c0             	movzx  eax,al
c00174d4:	c1 e0 10             	shl    eax,0x10
c00174d7:	09 c1                	or     ecx,eax
c00174d9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174dd:	8d 50 03             	lea    edx,[eax+0x3]
c00174e0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00174e4:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00174e8:	0f b6 c0             	movzx  eax,al
c00174eb:	c1 e0 18             	shl    eax,0x18
c00174ee:	09 c8                	or     eax,ecx
c00174f0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00174f4:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00174f9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00174fd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017501:	01 d0                	add    eax,edx
c0017503:	83 c0 2c             	add    eax,0x2c
c0017506:	8a 00                	mov    al,BYTE PTR [eax]
c0017508:	0f b6 c0             	movzx  eax,al
c001750b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001750f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017512:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017516:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c001751a:	0f b6 d2             	movzx  edx,dl
c001751d:	c1 e2 08             	shl    edx,0x8
c0017520:	09 d0                	or     eax,edx
c0017522:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017527:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001752c:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017531:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017535:	88 90 a0 ba 02 c0    	mov    BYTE PTR [eax-0x3ffd4560],dl
c001753b:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017540:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017545:	66 89 84 12 a0 d1 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd2e60],ax
c001754d:	e9 c7 00 00 00       	jmp    c0017619 <scanMADT()+0x469>
c0017552:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017557:	0f 85 b0 00 00 00    	jne    c001760d <scanMADT()+0x45d>
c001755d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017561:	8d 50 01             	lea    edx,[eax+0x1]
c0017564:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017568:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001756c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017570:	0f b6 c0             	movzx  eax,al
c0017573:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017577:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001757b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001757f:	01 d0                	add    eax,edx
c0017581:	83 c0 2c             	add    eax,0x2c
c0017584:	8a 00                	mov    al,BYTE PTR [eax]
c0017586:	0f b6 d0             	movzx  edx,al
c0017589:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001758d:	8d 48 01             	lea    ecx,[eax+0x1]
c0017590:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017594:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017598:	0f b6 c0             	movzx  eax,al
c001759b:	c1 e0 08             	shl    eax,0x8
c001759e:	09 d0                	or     eax,edx
c00175a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00175a4:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00175a9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175ad:	8d 50 01             	lea    edx,[eax+0x1]
c00175b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00175b4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00175b8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00175bc:	0f b6 c0             	movzx  eax,al
c00175bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00175c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175c7:	c1 e0 08             	shl    eax,0x8
c00175ca:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00175ce:	89 c1                	mov    ecx,eax
c00175d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00175d4:	c1 e0 18             	shl    eax,0x18
c00175d7:	89 c3                	mov    ebx,eax
c00175d9:	a1 10 d1 02 c0       	mov    eax,ds:0xc002d110
c00175de:	8d 50 01             	lea    edx,[eax+0x1]
c00175e1:	89 15 10 d1 02 c0    	mov    DWORD PTR ds:0xc002d110,edx
c00175e7:	09 d9                	or     ecx,ebx
c00175e9:	89 ca                	mov    edx,ecx
c00175eb:	89 14 85 20 d1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2ee0],edx
c00175f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00175f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00175fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175fe:	68 90 9b 02 c0       	push   0xc0029b90
c0017603:	e8 7f b0 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0017608:	83 c4 10             	add    esp,0x10
c001760b:	eb 0c                	jmp    c0017619 <scanMADT()+0x469>
c001760d:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017612:	75 05                	jne    c0017619 <scanMADT()+0x469>
c0017614:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017619:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c001761e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017622:	01 d0                	add    eax,edx
c0017624:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017628:	e9 54 fc ff ff       	jmp    c0017281 <scanMADT()+0xd1>
c001762d:	90                   	nop
c001762e:	eb 01                	jmp    c0017631 <scanMADT()+0x481>
c0017630:	90                   	nop
c0017631:	83 c4 38             	add    esp,0x38
c0017634:	5b                   	pop    ebx
c0017635:	c3                   	ret    

c0017636 <ACPI::ACPI()>:
c0017636:	83 ec 0c             	sub    esp,0xc
c0017639:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001763d:	83 ec 08             	sub    esp,0x8
c0017640:	68 83 9a 02 c0       	push   0xc0029a83
c0017645:	50                   	push   eax
c0017646:	e8 1b c6 ff ff       	call   c0013c66 <Device::Device(char const*)>
c001764b:	83 c4 10             	add    esp,0x10
c001764e:	ba 68 9c 02 c0       	mov    edx,0xc0029c68
c0017653:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017657:	89 10                	mov    DWORD PTR [eax],edx
c0017659:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001765d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017664:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017668:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c0017672:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017676:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c0017680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017684:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c001768b:	e8 20 fb ff ff       	call   c00171b0 <scanMADT()>
c0017690:	90                   	nop
c0017691:	83 c4 0c             	add    esp,0xc
c0017694:	c3                   	ret    
c0017695:	90                   	nop

c0017696 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017696:	83 ec 2c             	sub    esp,0x2c
c0017699:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001769d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00176a1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00176a5:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00176a9:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00176ae:	88 d0                	mov    al,dl
c00176b0:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00176b4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00176b9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00176c1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00176c5:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00176cb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00176cf:	0f 8d 97 00 00 00    	jge    c001776c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c00176d5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00176d9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00176dd:	83 c2 2a             	add    edx,0x2a
c00176e0:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00176e4:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00176e9:	75 78                	jne    c0017763 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00176eb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00176ef:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00176f3:	83 c2 2a             	add    edx,0x2a
c00176f6:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c00176fa:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00176fe:	75 63                	jne    c0017763 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017700:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017705:	74 3a                	je     c0017741 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017707:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001770b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001770f:	83 c2 2a             	add    edx,0x2a
c0017712:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017716:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001771a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001771d:	39 c2                	cmp    edx,eax
c001771f:	74 10                	je     c0017731 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017721:	83 ec 0c             	sub    esp,0xc
c0017724:	68 cc 9b 02 c0       	push   0xc0029bcc
c0017729:	e8 73 20 00 00       	call   c00197a1 <Krnl::panic(char const*)>
c001772e:	83 c4 10             	add    esp,0x10
c0017731:	83 ec 0c             	sub    esp,0xc
c0017734:	68 88 9a 02 c0       	push   0xc0029a88
c0017739:	e8 63 20 00 00       	call   c00197a1 <Krnl::panic(char const*)>
c001773e:	83 c4 10             	add    esp,0x10
c0017741:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017745:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017749:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001774d:	83 c2 2a             	add    edx,0x2a
c0017750:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017754:	8b 02                	mov    eax,DWORD PTR [edx]
c0017756:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017759:	89 01                	mov    DWORD PTR [ecx],eax
c001775b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001775e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017763:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017767:	e9 55 ff ff ff       	jmp    c00176c1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c001776c:	90                   	nop
c001776d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017771:	83 c4 2c             	add    esp,0x2c
c0017774:	c2 04 00             	ret    0x4
c0017777:	90                   	nop

c0017778 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017778:	56                   	push   esi
c0017779:	53                   	push   ebx
c001777a:	83 ec 14             	sub    esp,0x14
c001777d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017781:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017785:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017789:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001778e:	88 c8                	mov    al,cl
c0017790:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017794:	88 d0                	mov    al,dl
c0017796:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001779a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001779e:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c00177a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177a8:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c00177ae:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c00177b3:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00177b8:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00177bd:	83 ec 04             	sub    esp,0x4
c00177c0:	56                   	push   esi
c00177c1:	53                   	push   ebx
c00177c2:	51                   	push   ecx
c00177c3:	52                   	push   edx
c00177c4:	50                   	push   eax
c00177c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00177c9:	68 fc 9b 02 c0       	push   0xc0029bfc
c00177ce:	e8 b4 ae ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c00177d3:	83 c4 20             	add    esp,0x20
c00177d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177da:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00177e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177e4:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00177e7:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00177eb:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00177ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177f3:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00177f9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00177fd:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017800:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017804:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017809:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001780d:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0017813:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017817:	8d 48 01             	lea    ecx,[eax+0x1]
c001781a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001781e:	83 c2 2a             	add    edx,0x2a
c0017821:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017825:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017829:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c001782f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017833:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017836:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001783a:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001783e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017842:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017848:	8d 50 01             	lea    edx,[eax+0x1]
c001784b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001784f:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c0017855:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017859:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c001785f:	3d 00 08 00 00       	cmp    eax,0x800
c0017864:	75 10                	jne    c0017876 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c0017866:	83 ec 0c             	sub    esp,0xc
c0017869:	68 97 9a 02 c0       	push   0xc0029a97
c001786e:	e8 2e 1f 00 00       	call   c00197a1 <Krnl::panic(char const*)>
c0017873:	83 c4 10             	add    esp,0x10
c0017876:	90                   	nop
c0017877:	83 c4 14             	add    esp,0x14
c001787a:	5b                   	pop    ebx
c001787b:	5e                   	pop    esi
c001787c:	c3                   	ret    
c001787d:	90                   	nop

c001787e <ACPI::setScreenBrightnessLevel(void*, int)>:
c001787e:	b8 00 00 00 00       	mov    eax,0x0
c0017883:	c3                   	ret    

c0017884 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017884:	83 ec 1c             	sub    esp,0x1c
c0017887:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001788b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001788e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017892:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0017897:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001789c:	83 ec 08             	sub    esp,0x8
c001789f:	52                   	push   edx
c00178a0:	50                   	push   eax
c00178a1:	e8 46 72 ff ff       	call   c000eaec <Computer::readCMOS(unsigned char)>
c00178a6:	83 c4 10             	add    esp,0x10
c00178a9:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00178ad:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c00178b2:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00178b7:	83 ec 04             	sub    esp,0x4
c00178ba:	6a 01                	push   0x1
c00178bc:	52                   	push   edx
c00178bd:	50                   	push   eax
c00178be:	e8 3f 73 ff ff       	call   c000ec02 <Computer::writeCMOS(unsigned char, unsigned char)>
c00178c3:	83 c4 10             	add    esp,0x10
c00178c6:	90                   	nop
c00178c7:	83 c4 1c             	add    esp,0x1c
c00178ca:	c3                   	ret    
c00178cb:	90                   	nop

c00178cc <ACPI::open(int, int, void*)>:
c00178cc:	53                   	push   ebx
c00178cd:	83 ec 28             	sub    esp,0x28
c00178d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00178d4:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c00178db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00178df:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c00178e5:	84 c0                	test   al,al
c00178e7:	74 67                	je     c0017950 <ACPI::open(int, int, void*)+0x84>
c00178e9:	c7 44 24 10 58 01 00 00 	mov    DWORD PTR [esp+0x10],0x158
c00178f1:	83 ec 0c             	sub    esp,0xc
c00178f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00178f8:	e8 d7 7b ff ff       	call   c000f4d4 <malloc>
c00178fd:	83 c4 10             	add    esp,0x10
c0017900:	89 c3                	mov    ebx,eax
c0017902:	83 ec 0c             	sub    esp,0xc
c0017905:	53                   	push   ebx
c0017906:	e8 47 9e 00 00       	call   c0021752 <PCI::PCI()>
c001790b:	83 c4 10             	add    esp,0x10
c001790e:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0017912:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017916:	83 ec 08             	sub    esp,0x8
c0017919:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001791d:	50                   	push   eax
c001791e:	e8 53 c1 ff ff       	call   c0013a76 <Device::addChild(Device*)>
c0017923:	83 c4 10             	add    esp,0x10
c0017926:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001792a:	8b 00                	mov    eax,DWORD PTR [eax]
c001792c:	83 c0 08             	add    eax,0x8
c001792f:	8b 00                	mov    eax,DWORD PTR [eax]
c0017931:	6a 00                	push   0x0
c0017933:	6a 00                	push   0x0
c0017935:	6a 00                	push   0x0
c0017937:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001793b:	ff d0                	call   eax
c001793d:	83 c4 10             	add    esp,0x10
c0017940:	83 ec 0c             	sub    esp,0xc
c0017943:	68 b4 9a 02 c0       	push   0xc0029ab4
c0017948:	e8 3a ad ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001794d:	83 c4 10             	add    esp,0x10
c0017950:	83 ec 0c             	sub    esp,0xc
c0017953:	68 bf 9a 02 c0       	push   0xc0029abf
c0017958:	e8 9f 41 00 00       	call   c001bafc <Thr::loadKernelSymbolTable(char const*)>
c001795d:	83 c4 10             	add    esp,0x10
c0017960:	8b 1d 48 c8 02 c0    	mov    ebx,DWORD PTR ds:0xc002c848
c0017966:	83 ec 08             	sub    esp,0x8
c0017969:	6a 01                	push   0x1
c001796b:	68 dd 9a 02 c0       	push   0xc0029add
c0017970:	e8 47 4c 00 00       	call   c001c5bc <Thr::loadDLL(char const*, bool)>
c0017975:	83 c4 10             	add    esp,0x10
c0017978:	83 ec 08             	sub    esp,0x8
c001797b:	53                   	push   ebx
c001797c:	50                   	push   eax
c001797d:	e8 49 4e 00 00       	call   c001c7cb <Thr::executeDLL(unsigned long, void*)>
c0017982:	83 c4 10             	add    esp,0x10
c0017985:	8b 1d 48 c8 02 c0    	mov    ebx,DWORD PTR ds:0xc002c848
c001798b:	83 ec 08             	sub    esp,0x8
c001798e:	6a 01                	push   0x1
c0017990:	68 fa 9a 02 c0       	push   0xc0029afa
c0017995:	e8 22 4c 00 00       	call   c001c5bc <Thr::loadDLL(char const*, bool)>
c001799a:	83 c4 10             	add    esp,0x10
c001799d:	83 ec 08             	sub    esp,0x8
c00179a0:	53                   	push   ebx
c00179a1:	50                   	push   eax
c00179a2:	e8 24 4e 00 00       	call   c001c7cb <Thr::executeDLL(unsigned long, void*)>
c00179a7:	83 c4 10             	add    esp,0x10
c00179aa:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c00179af:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00179b5:	83 e0 04             	and    eax,0x4
c00179b8:	84 c0                	test   al,al
c00179ba:	0f 84 d6 00 00 00    	je     c0017a96 <ACPI::open(int, int, void*)+0x1ca>
c00179c0:	c7 44 24 0c 14 01 00 00 	mov    DWORD PTR [esp+0xc],0x114
c00179c8:	83 ec 0c             	sub    esp,0xc
c00179cb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00179cf:	e8 00 7b ff ff       	call   c000f4d4 <malloc>
c00179d4:	83 c4 10             	add    esp,0x10
c00179d7:	89 c3                	mov    ebx,eax
c00179d9:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00179de:	83 ec 04             	sub    esp,0x4
c00179e1:	50                   	push   eax
c00179e2:	68 17 9b 02 c0       	push   0xc0029b17
c00179e7:	53                   	push   ebx
c00179e8:	e8 c9 b1 ff ff       	call   c0012bb6 <File::File(char const*, Process*)>
c00179ed:	83 c4 10             	add    esp,0x10
c00179f0:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00179f4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00179f9:	74 17                	je     c0017a12 <ACPI::open(int, int, void*)+0x146>
c00179fb:	83 ec 0c             	sub    esp,0xc
c00179fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017a02:	e8 81 b4 ff ff       	call   c0012e88 <File::exists()>
c0017a07:	83 c4 10             	add    esp,0x10
c0017a0a:	84 c0                	test   al,al
c0017a0c:	74 04                	je     c0017a12 <ACPI::open(int, int, void*)+0x146>
c0017a0e:	b0 01                	mov    al,0x1
c0017a10:	eb 02                	jmp    c0017a14 <ACPI::open(int, int, void*)+0x148>
c0017a12:	b0 00                	mov    al,0x0
c0017a14:	84 c0                	test   al,al
c0017a16:	74 25                	je     c0017a3d <ACPI::open(int, int, void*)+0x171>
c0017a18:	8b 1d 48 c8 02 c0    	mov    ebx,DWORD PTR ds:0xc002c848
c0017a1e:	83 ec 08             	sub    esp,0x8
c0017a21:	6a 01                	push   0x1
c0017a23:	68 17 9b 02 c0       	push   0xc0029b17
c0017a28:	e8 8f 4b 00 00       	call   c001c5bc <Thr::loadDLL(char const*, bool)>
c0017a2d:	83 c4 10             	add    esp,0x10
c0017a30:	83 ec 08             	sub    esp,0x8
c0017a33:	53                   	push   ebx
c0017a34:	50                   	push   eax
c0017a35:	e8 91 4d 00 00       	call   c001c7cb <Thr::executeDLL(unsigned long, void*)>
c0017a3a:	83 c4 10             	add    esp,0x10
c0017a3d:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017a42:	74 1e                	je     c0017a62 <ACPI::open(int, int, void*)+0x196>
c0017a44:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017a49:	74 17                	je     c0017a62 <ACPI::open(int, int, void*)+0x196>
c0017a4b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017a4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a51:	83 c0 08             	add    eax,0x8
c0017a54:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a56:	83 ec 0c             	sub    esp,0xc
c0017a59:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017a5d:	ff d0                	call   eax
c0017a5f:	83 c4 10             	add    esp,0x10
c0017a62:	a1 08 d1 02 c0       	mov    eax,ds:0xc002d108
c0017a67:	83 ec 08             	sub    esp,0x8
c0017a6a:	68 34 9b 02 c0       	push   0xc0029b34
c0017a6f:	50                   	push   eax
c0017a70:	e8 9f f6 ff ff       	call   c0017114 <findDataTable(unsigned char*, char*)>
c0017a75:	83 c4 10             	add    esp,0x10
c0017a78:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017a7c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017a81:	74 13                	je     c0017a96 <ACPI::open(int, int, void*)+0x1ca>
c0017a83:	83 ec 08             	sub    esp,0x8
c0017a86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017a8e:	e8 f1 fd ff ff       	call   c0017884 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0017a93:	83 c4 10             	add    esp,0x10
c0017a96:	b8 00 00 00 00       	mov    eax,0x0
c0017a9b:	83 c4 28             	add    esp,0x28
c0017a9e:	5b                   	pop    ebx
c0017a9f:	c3                   	ret    

c0017aa0 <ACPI::sleep()>:
c0017aa0:	83 ec 0c             	sub    esp,0xc
c0017aa3:	a1 e0 ce 02 c0       	mov    eax,ds:0xc002cee0
c0017aa8:	85 c0                	test   eax,eax
c0017aaa:	74 07                	je     c0017ab3 <ACPI::sleep()+0x13>
c0017aac:	a1 e0 ce 02 c0       	mov    eax,ds:0xc002cee0
c0017ab1:	ff d0                	call   eax
c0017ab3:	90                   	nop
c0017ab4:	83 c4 0c             	add    esp,0xc
c0017ab7:	c3                   	ret    

c0017ab8 <CPU::close(int, int, void*)>:
c0017ab8:	31 c0                	xor    eax,eax
c0017aba:	c3                   	ret    
c0017abb:	90                   	nop

c0017abc <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0017abc:	55                   	push   ebp
c0017abd:	57                   	push   edi
c0017abe:	56                   	push   esi
c0017abf:	53                   	push   ebx
c0017ac0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017ac4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017ac8:	89 ce                	mov    esi,ecx
c0017aca:	89 d5                	mov    ebp,edx
c0017acc:	80 f9 04             	cmp    cl,0x4
c0017acf:	75 28                	jne    c0017af9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0017ad1:	8d 42 f9             	lea    eax,[edx-0x7]
c0017ad4:	3c 03                	cmp    al,0x3
c0017ad6:	0f 86 63 01 00 00    	jbe    c0017c3f <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017adc:	80 fa 03             	cmp    dl,0x3
c0017adf:	0f 84 5a 01 00 00    	je     c0017c3f <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017ae5:	8d 7a f2             	lea    edi,[edx-0xe]
c0017ae8:	b8 70 bc 02 c0       	mov    eax,0xc002bc70
c0017aed:	89 fb                	mov    ebx,edi
c0017aef:	80 fb 01             	cmp    bl,0x1
c0017af2:	77 4e                	ja     c0017b42 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0017af4:	e9 52 01 00 00       	jmp    c0017c4b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017af9:	80 f9 05             	cmp    cl,0x5
c0017afc:	75 4d                	jne    c0017b4b <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0017afe:	b8 80 bc 02 c0       	mov    eax,0xc002bc80
c0017b03:	80 fa 03             	cmp    dl,0x3
c0017b06:	0f 86 3f 01 00 00    	jbe    c0017c4b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017b0c:	8d 7a fa             	lea    edi,[edx-0x6]
c0017b0f:	b8 90 bc 02 c0       	mov    eax,0xc002bc90
c0017b14:	89 fb                	mov    ebx,edi
c0017b16:	80 fb 01             	cmp    bl,0x1
c0017b19:	0f 86 2c 01 00 00    	jbe    c0017c4b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017b1f:	b8 a0 bc 02 c0       	mov    eax,0xc002bca0
c0017b24:	80 fa 08             	cmp    dl,0x8
c0017b27:	0f 84 1e 01 00 00    	je     c0017c4b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017b2d:	89 d7                	mov    edi,edx
c0017b2f:	b8 b0 bc 02 c0       	mov    eax,0xc002bcb0
c0017b34:	83 e7 fb             	and    edi,0xfffffffb
c0017b37:	89 fb                	mov    ebx,edi
c0017b39:	80 fb 09             	cmp    bl,0x9
c0017b3c:	0f 84 09 01 00 00    	je     c0017c4b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017b42:	31 c0                	xor    eax,eax
c0017b44:	89 eb                	mov    ebx,ebp
c0017b46:	0f b6 fb             	movzx  edi,bl
c0017b49:	eb 30                	jmp    c0017b7b <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0017b4b:	31 c0                	xor    eax,eax
c0017b4d:	80 f9 06             	cmp    cl,0x6
c0017b50:	75 f2                	jne    c0017b44 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017b52:	80 fa 0a             	cmp    dl,0xa
c0017b55:	77 ed                	ja     c0017b44 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017b57:	bf de 05 00 00       	mov    edi,0x5de
c0017b5c:	0f a3 d7             	bt     edi,edx
c0017b5f:	73 e3                	jae    c0017b44 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017b61:	b8 c0 bc 02 c0       	mov    eax,0xc002bcc0
c0017b66:	e9 e0 00 00 00       	jmp    c0017c4b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017b6b:	39 c7                	cmp    edi,eax
c0017b6d:	0f 84 d3 00 00 00    	je     c0017c46 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0017b73:	40                   	inc    eax
c0017b74:	3d d0 00 00 00       	cmp    eax,0xd0
c0017b79:	74 09                	je     c0017b84 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0017b7b:	89 f3                	mov    ebx,esi
c0017b7d:	80 fb 0f             	cmp    bl,0xf
c0017b80:	75 f1                	jne    c0017b73 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0017b82:	eb e7                	jmp    c0017b6b <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0017b84:	80 f9 10             	cmp    cl,0x10
c0017b87:	75 14                	jne    c0017b9d <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0017b89:	8d 42 fc             	lea    eax,[edx-0x4]
c0017b8c:	83 e0 fb             	and    eax,0xfffffffb
c0017b8f:	3c 02                	cmp    al,0x2
c0017b91:	76 34                	jbe    c0017bc7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0017b93:	b8 7e 9f 02 c0       	mov    eax,0xc0029f7e
c0017b98:	80 fa 02             	cmp    dl,0x2
c0017b9b:	eb 24                	jmp    c0017bc1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0017b9d:	80 f9 11             	cmp    cl,0x11
c0017ba0:	75 13                	jne    c0017bb5 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0017ba2:	b8 7e 9f 02 c0       	mov    eax,0xc0029f7e
c0017ba7:	80 fa 03             	cmp    dl,0x3
c0017baa:	0f 85 9b 00 00 00    	jne    c0017c4b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017bb0:	e9 91 00 00 00       	jmp    c0017c46 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0017bb5:	80 f9 12             	cmp    cl,0x12
c0017bb8:	75 14                	jne    c0017bce <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0017bba:	b8 7e 9f 02 c0       	mov    eax,0xc0029f7e
c0017bbf:	fe ca                	dec    dl
c0017bc1:	0f 85 84 00 00 00    	jne    c0017c4b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017bc7:	b8 e0 bc 02 c0       	mov    eax,0xc002bce0
c0017bcc:	eb 7d                	jmp    c0017c4b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017bce:	80 f9 14             	cmp    cl,0x14
c0017bd1:	75 12                	jne    c0017be5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0017bd3:	4a                   	dec    edx
c0017bd4:	b8 7e 9f 02 c0       	mov    eax,0xc0029f7e
c0017bd9:	80 fa 01             	cmp    dl,0x1
c0017bdc:	77 6d                	ja     c0017c4b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017bde:	b8 f0 bc 02 c0       	mov    eax,0xc002bcf0
c0017be3:	eb 66                	jmp    c0017c4b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017be5:	80 f9 15             	cmp    cl,0x15
c0017be8:	75 31                	jne    c0017c1b <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0017bea:	b8 00 bd 02 c0       	mov    eax,0xc002bd00
c0017bef:	80 fa 01             	cmp    dl,0x1
c0017bf2:	74 57                	je     c0017c4b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017bf4:	b8 7e 9f 02 c0       	mov    eax,0xc0029f7e
c0017bf9:	80 fa 13             	cmp    dl,0x13
c0017bfc:	76 0c                	jbe    c0017c0a <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0017bfe:	80 fa 30             	cmp    dl,0x30
c0017c01:	75 48                	jne    c0017c4b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c03:	b8 20 bd 02 c0       	mov    eax,0xc002bd20
c0017c08:	eb 41                	jmp    c0017c4b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c0a:	b9 04 00 09 00       	mov    ecx,0x90004
c0017c0f:	0f a3 d1             	bt     ecx,edx
c0017c12:	73 37                	jae    c0017c4b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c14:	b8 10 bd 02 c0       	mov    eax,0xc002bd10
c0017c19:	eb 30                	jmp    c0017c4b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c1b:	b8 7e 9f 02 c0       	mov    eax,0xc0029f7e
c0017c20:	80 f9 16             	cmp    cl,0x16
c0017c23:	75 26                	jne    c0017c4b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c25:	b8 30 bd 02 c0       	mov    eax,0xc002bd30
c0017c2a:	84 d2                	test   dl,dl
c0017c2c:	74 1d                	je     c0017c4b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c2e:	b8 7e 9f 02 c0       	mov    eax,0xc0029f7e
c0017c33:	80 fa 30             	cmp    dl,0x30
c0017c36:	75 13                	jne    c0017c4b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c38:	b8 40 bd 02 c0       	mov    eax,0xc002bd40
c0017c3d:	eb 0c                	jmp    c0017c4b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c3f:	b8 60 bc 02 c0       	mov    eax,0xc002bc60
c0017c44:	eb 05                	jmp    c0017c4b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c46:	b8 d0 bc 02 c0       	mov    eax,0xc002bcd0
c0017c4b:	5b                   	pop    ebx
c0017c4c:	5e                   	pop    esi
c0017c4d:	5f                   	pop    edi
c0017c4e:	5d                   	pop    ebp
c0017c4f:	c3                   	ret    

c0017c50 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0017c50:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017c54:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017c58:	80 f9 04             	cmp    cl,0x4
c0017c5b:	75 6b                	jne    c0017cc8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0017c5d:	b8 c0 ba 02 c0       	mov    eax,0xc002bac0
c0017c62:	80 fa 01             	cmp    dl,0x1
c0017c65:	0f 86 92 02 00 00    	jbe    c0017efd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017c6b:	b8 d0 ba 02 c0       	mov    eax,0xc002bad0
c0017c70:	80 fa 02             	cmp    dl,0x2
c0017c73:	0f 84 84 02 00 00    	je     c0017efd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017c79:	b8 e0 ba 02 c0       	mov    eax,0xc002bae0
c0017c7e:	80 fa 03             	cmp    dl,0x3
c0017c81:	0f 84 76 02 00 00    	je     c0017efd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017c87:	b8 f0 ba 02 c0       	mov    eax,0xc002baf0
c0017c8c:	80 fa 04             	cmp    dl,0x4
c0017c8f:	0f 84 68 02 00 00    	je     c0017efd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017c95:	b8 00 bb 02 c0       	mov    eax,0xc002bb00
c0017c9a:	80 fa 05             	cmp    dl,0x5
c0017c9d:	0f 84 5a 02 00 00    	je     c0017efd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ca3:	b8 e0 ba 02 c0       	mov    eax,0xc002bae0
c0017ca8:	80 fa 07             	cmp    dl,0x7
c0017cab:	0f 84 4c 02 00 00    	je     c0017efd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017cb1:	83 ea 08             	sub    edx,0x8
c0017cb4:	b8 7e 9f 02 c0       	mov    eax,0xc0029f7e
c0017cb9:	80 fa 01             	cmp    dl,0x1
c0017cbc:	0f 87 3b 02 00 00    	ja     c0017efd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017cc2:	b8 10 bb 02 c0       	mov    eax,0xc002bb10
c0017cc7:	c3                   	ret    
c0017cc8:	80 f9 05             	cmp    cl,0x5
c0017ccb:	75 45                	jne    c0017d12 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0017ccd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0017cd0:	b8 20 bb 02 c0       	mov    eax,0xc002bb20
c0017cd5:	80 f9 02             	cmp    cl,0x2
c0017cd8:	0f 86 1f 02 00 00    	jbe    c0017efd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017cde:	80 fa 04             	cmp    dl,0x4
c0017ce1:	0f 84 f3 01 00 00    	je     c0017eda <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0017ce7:	80 fa 07             	cmp    dl,0x7
c0017cea:	0f 84 0d 02 00 00    	je     c0017efd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017cf0:	b8 30 bb 02 c0       	mov    eax,0xc002bb30
c0017cf5:	80 fa 08             	cmp    dl,0x8
c0017cf8:	0f 84 ff 01 00 00    	je     c0017efd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017cfe:	b8 7e 9f 02 c0       	mov    eax,0xc0029f7e
c0017d03:	80 fa 09             	cmp    dl,0x9
c0017d06:	0f 85 f1 01 00 00    	jne    c0017efd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d0c:	b8 40 bb 02 c0       	mov    eax,0xc002bb40
c0017d11:	c3                   	ret    
c0017d12:	80 f9 06             	cmp    cl,0x6
c0017d15:	0f 85 85 01 00 00    	jne    c0017ea0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0017d1b:	b8 50 bb 02 c0       	mov    eax,0xc002bb50
c0017d20:	80 fa 01             	cmp    dl,0x1
c0017d23:	0f 84 d4 01 00 00    	je     c0017efd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d29:	8d 42 fb             	lea    eax,[edx-0x5]
c0017d2c:	3c 01                	cmp    al,0x1
c0017d2e:	0f 86 ac 01 00 00    	jbe    c0017ee0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0017d34:	80 fa 03             	cmp    dl,0x3
c0017d37:	0f 84 a3 01 00 00    	je     c0017ee0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0017d3d:	8d 4a f9             	lea    ecx,[edx-0x7]
c0017d40:	b8 70 bb 02 c0       	mov    eax,0xc002bb70
c0017d45:	80 f9 01             	cmp    cl,0x1
c0017d48:	0f 86 af 01 00 00    	jbe    c0017efd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d4e:	80 fa 09             	cmp    dl,0x9
c0017d51:	0f 84 8f 01 00 00    	je     c0017ee6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0017d57:	8d 4a f6             	lea    ecx,[edx-0xa]
c0017d5a:	80 f9 01             	cmp    cl,0x1
c0017d5d:	0f 86 9a 01 00 00    	jbe    c0017efd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d63:	b8 80 bb 02 c0       	mov    eax,0xc002bb80
c0017d68:	80 fa 0d             	cmp    dl,0xd
c0017d6b:	0f 84 8c 01 00 00    	je     c0017efd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d71:	b8 90 bb 02 c0       	mov    eax,0xc002bb90
c0017d76:	80 fa 0e             	cmp    dl,0xe
c0017d79:	0f 84 7e 01 00 00    	je     c0017efd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d7f:	b8 a0 bb 02 c0       	mov    eax,0xc002bba0
c0017d84:	80 fa 0f             	cmp    dl,0xf
c0017d87:	0f 84 70 01 00 00    	je     c0017efd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d8d:	b8 80 bb 02 c0       	mov    eax,0xc002bb80
c0017d92:	80 fa 15             	cmp    dl,0x15
c0017d95:	0f 84 62 01 00 00    	je     c0017efd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d9b:	8d 4a ea             	lea    ecx,[edx-0x16]
c0017d9e:	b8 a0 bb 02 c0       	mov    eax,0xc002bba0
c0017da3:	80 f9 01             	cmp    cl,0x1
c0017da6:	0f 86 51 01 00 00    	jbe    c0017efd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017dac:	80 fa 1a             	cmp    dl,0x1a
c0017daf:	0f 84 37 01 00 00    	je     c0017eec <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0017db5:	80 fa 1c             	cmp    dl,0x1c
c0017db8:	0f 84 34 01 00 00    	je     c0017ef2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0017dbe:	80 fa 1d             	cmp    dl,0x1d
c0017dc1:	0f 84 36 01 00 00    	je     c0017efd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017dc7:	b8 d0 bb 02 c0       	mov    eax,0xc002bbd0
c0017dcc:	80 fa 25             	cmp    dl,0x25
c0017dcf:	0f 84 28 01 00 00    	je     c0017efd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017dd5:	8d 4a da             	lea    ecx,[edx-0x26]
c0017dd8:	b8 c0 bb 02 c0       	mov    eax,0xc002bbc0
c0017ddd:	80 f9 01             	cmp    cl,0x1
c0017de0:	0f 86 17 01 00 00    	jbe    c0017efd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017de6:	b8 e0 bb 02 c0       	mov    eax,0xc002bbe0
c0017deb:	80 fa 2a             	cmp    dl,0x2a
c0017dee:	0f 84 09 01 00 00    	je     c0017efd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017df4:	b8 d0 bb 02 c0       	mov    eax,0xc002bbd0
c0017df9:	80 fa 2c             	cmp    dl,0x2c
c0017dfc:	0f 84 fb 00 00 00    	je     c0017efd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e02:	b8 e0 bb 02 c0       	mov    eax,0xc002bbe0
c0017e07:	80 fa 2d             	cmp    dl,0x2d
c0017e0a:	0f 84 ed 00 00 00    	je     c0017efd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e10:	b8 b0 bb 02 c0       	mov    eax,0xc002bbb0
c0017e15:	80 fa 2e             	cmp    dl,0x2e
c0017e18:	0f 84 df 00 00 00    	je     c0017efd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e1e:	b8 d0 bb 02 c0       	mov    eax,0xc002bbd0
c0017e23:	80 fa 2f             	cmp    dl,0x2f
c0017e26:	0f 84 d1 00 00 00    	je     c0017efd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e2c:	8d 4a cb             	lea    ecx,[edx-0x35]
c0017e2f:	b8 c0 bb 02 c0       	mov    eax,0xc002bbc0
c0017e34:	80 f9 01             	cmp    cl,0x1
c0017e37:	0f 86 c0 00 00 00    	jbe    c0017efd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e3d:	b8 f0 bb 02 c0       	mov    eax,0xc002bbf0
c0017e42:	80 fa 37             	cmp    dl,0x37
c0017e45:	0f 84 b2 00 00 00    	je     c0017efd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e4b:	b8 00 bc 02 c0       	mov    eax,0xc002bc00
c0017e50:	80 fa 3a             	cmp    dl,0x3a
c0017e53:	0f 84 a4 00 00 00    	je     c0017efd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e59:	b8 10 bc 02 c0       	mov    eax,0xc002bc10
c0017e5e:	80 fa 3c             	cmp    dl,0x3c
c0017e61:	0f 84 96 00 00 00    	je     c0017efd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e67:	b8 20 bc 02 c0       	mov    eax,0xc002bc20
c0017e6c:	80 fa 3d             	cmp    dl,0x3d
c0017e6f:	0f 84 88 00 00 00    	je     c0017efd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e75:	b8 00 bc 02 c0       	mov    eax,0xc002bc00
c0017e7a:	80 fa 3e             	cmp    dl,0x3e
c0017e7d:	74 7e                	je     c0017efd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e7f:	8d 42 bb             	lea    eax,[edx-0x45]
c0017e82:	3c 01                	cmp    al,0x1
c0017e84:	76 72                	jbe    c0017ef8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0017e86:	80 fa 3f             	cmp    dl,0x3f
c0017e89:	74 6d                	je     c0017ef8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0017e8b:	80 fa 4a             	cmp    dl,0x4a
c0017e8e:	74 0a                	je     c0017e9a <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0017e90:	b8 7e 9f 02 c0       	mov    eax,0xc0029f7e
c0017e95:	80 fa 4d             	cmp    dl,0x4d
c0017e98:	75 63                	jne    c0017efd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e9a:	b8 f0 bb 02 c0       	mov    eax,0xc002bbf0
c0017e9f:	c3                   	ret    
c0017ea0:	b8 7e 9f 02 c0       	mov    eax,0xc0029f7e
c0017ea5:	80 f9 0b             	cmp    cl,0xb
c0017ea8:	75 0a                	jne    c0017eb4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0017eaa:	fe ca                	dec    dl
c0017eac:	75 4f                	jne    c0017efd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017eae:	b8 30 bc 02 c0       	mov    eax,0xc002bc30
c0017eb3:	c3                   	ret    
c0017eb4:	80 f9 0f             	cmp    cl,0xf
c0017eb7:	75 44                	jne    c0017efd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017eb9:	b8 40 bc 02 c0       	mov    eax,0xc002bc40
c0017ebe:	80 fa 02             	cmp    dl,0x2
c0017ec1:	76 3a                	jbe    c0017efd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ec3:	8d 42 fd             	lea    eax,[edx-0x3]
c0017ec6:	3c 01                	cmp    al,0x1
c0017ec8:	76 0a                	jbe    c0017ed4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0017eca:	b8 7e 9f 02 c0       	mov    eax,0xc0029f7e
c0017ecf:	80 fa 06             	cmp    dl,0x6
c0017ed2:	75 29                	jne    c0017efd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ed4:	b8 50 bc 02 c0       	mov    eax,0xc002bc50
c0017ed9:	c3                   	ret    
c0017eda:	b8 30 bb 02 c0       	mov    eax,0xc002bb30
c0017edf:	c3                   	ret    
c0017ee0:	b8 60 bb 02 c0       	mov    eax,0xc002bb60
c0017ee5:	c3                   	ret    
c0017ee6:	b8 80 bb 02 c0       	mov    eax,0xc002bb80
c0017eeb:	c3                   	ret    
c0017eec:	b8 b0 bb 02 c0       	mov    eax,0xc002bbb0
c0017ef1:	c3                   	ret    
c0017ef2:	b8 c0 bb 02 c0       	mov    eax,0xc002bbc0
c0017ef7:	c3                   	ret    
c0017ef8:	b8 10 bc 02 c0       	mov    eax,0xc002bc10
c0017efd:	c3                   	ret    

c0017efe <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0017efe:	60                   	pusha  
c0017eff:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017f03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017f07:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017f0b:	9c                   	pushf  
c0017f0c:	fa                   	cli    
c0017f0d:	0f 09                	wbinvd 
c0017f0f:	0f 30                	wrmsr  
c0017f11:	9d                   	popf   
c0017f12:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017f16:	89 02                	mov    DWORD PTR [edx],eax
c0017f18:	61                   	popa   
c0017f19:	c3                   	ret    

c0017f1a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0017f1a:	60                   	pusha  
c0017f1b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017f1f:	9c                   	pushf  
c0017f20:	fa                   	cli    
c0017f21:	0f 09                	wbinvd 
c0017f23:	31 c0                	xor    eax,eax
c0017f25:	31 d2                	xor    edx,edx
c0017f27:	0f 32                	rdmsr  
c0017f29:	9d                   	popf   
c0017f2a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017f2e:	89 02                	mov    DWORD PTR [edx],eax
c0017f30:	61                   	popa   
c0017f31:	c3                   	ret    

c0017f32 <CPU::AMD_K6_writeback(int, int, int)>:
c0017f32:	56                   	push   esi
c0017f33:	53                   	push   ebx
c0017f34:	83 ec 10             	sub    esp,0x10
c0017f37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f3b:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0017f40:	75 5d                	jne    c0017f9f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0017f42:	83 f8 08             	cmp    eax,0x8
c0017f45:	75 09                	jne    c0017f50 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0017f47:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0017f4c:	7e 13                	jle    c0017f61 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0017f4e:	eb 30                	jmp    c0017f80 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0017f50:	83 f8 06             	cmp    eax,0x6
c0017f53:	7c 4a                	jl     c0017f9f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0017f55:	83 f8 07             	cmp    eax,0x7
c0017f58:	7e 07                	jle    c0017f61 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0017f5a:	83 f8 09             	cmp    eax,0x9
c0017f5d:	74 21                	je     c0017f80 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0017f5f:	eb 3e                	jmp    c0017f9f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0017f61:	89 e6                	mov    esi,esp
c0017f63:	8b 1d 84 c8 02 c0    	mov    ebx,DWORD PTR ds:0xc002c884
c0017f69:	56                   	push   esi
c0017f6a:	c1 eb 15             	shr    ebx,0x15
c0017f6d:	68 82 00 00 c0       	push   0xc0000082
c0017f72:	83 e3 7e             	and    ebx,0x7e
c0017f75:	e8 a0 ff ff ff       	call   c0017f1a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0017f7a:	56                   	push   esi
c0017f7b:	6a 00                	push   0x0
c0017f7d:	53                   	push   ebx
c0017f7e:	eb 12                	jmp    c0017f92 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0017f80:	89 e3                	mov    ebx,esp
c0017f82:	53                   	push   ebx
c0017f83:	68 82 00 00 c0       	push   0xc0000082
c0017f88:	e8 8d ff ff ff       	call   c0017f1a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0017f8d:	53                   	push   ebx
c0017f8e:	6a 00                	push   0x0
c0017f90:	6a 00                	push   0x0
c0017f92:	68 82 00 00 c0       	push   0xc0000082
c0017f97:	e8 62 ff ff ff       	call   c0017efe <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0017f9c:	83 c4 18             	add    esp,0x18
c0017f9f:	83 c4 10             	add    esp,0x10
c0017fa2:	5b                   	pop    ebx
c0017fa3:	5e                   	pop    esi
c0017fa4:	c3                   	ret    
c0017fa5:	90                   	nop

c0017fa6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0017fa6:	55                   	push   ebp
c0017fa7:	57                   	push   edi
c0017fa8:	56                   	push   esi
c0017fa9:	53                   	push   ebx
c0017faa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017fae:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017fb2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017fb6:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0017fba:	39 05 60 bd 02 c0    	cmp    DWORD PTR ds:0xc002bd60,eax
c0017fc0:	75 23                	jne    c0017fe5 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0017fc2:	a1 6c d3 02 c0       	mov    eax,ds:0xc002d36c
c0017fc7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017fcb:	89 06                	mov    DWORD PTR [esi],eax
c0017fcd:	a1 68 d3 02 c0       	mov    eax,ds:0xc002d368
c0017fd2:	89 07                	mov    DWORD PTR [edi],eax
c0017fd4:	a1 64 d3 02 c0       	mov    eax,ds:0xc002d364
c0017fd9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0017fdc:	a1 60 d3 02 c0       	mov    eax,ds:0xc002d360
c0017fe1:	89 02                	mov    DWORD PTR [edx],eax
c0017fe3:	eb 3f                	jmp    c0018024 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0017fe5:	31 c9                	xor    ecx,ecx
c0017fe7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017feb:	0f a2                	cpuid  
c0017fed:	89 06                	mov    DWORD PTR [esi],eax
c0017fef:	89 1f                	mov    DWORD PTR [edi],ebx
c0017ff1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017ff5:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0017ff8:	89 10                	mov    DWORD PTR [eax],edx
c0017ffa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017ffe:	a3 60 bd 02 c0       	mov    ds:0xc002bd60,eax
c0018003:	8b 06                	mov    eax,DWORD PTR [esi]
c0018005:	a3 6c d3 02 c0       	mov    ds:0xc002d36c,eax
c001800a:	8b 07                	mov    eax,DWORD PTR [edi]
c001800c:	a3 68 d3 02 c0       	mov    ds:0xc002d368,eax
c0018011:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018014:	a3 64 d3 02 c0       	mov    ds:0xc002d364,eax
c0018019:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001801d:	8b 00                	mov    eax,DWORD PTR [eax]
c001801f:	a3 60 d3 02 c0       	mov    ds:0xc002d360,eax
c0018024:	5b                   	pop    ebx
c0018025:	5e                   	pop    esi
c0018026:	5f                   	pop    edi
c0018027:	5d                   	pop    ebp
c0018028:	c3                   	ret    
c0018029:	90                   	nop

c001802a <CPU::cpuidCheckEDX(unsigned int)>:
c001802a:	83 ec 10             	sub    esp,0x10
c001802d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018031:	50                   	push   eax
c0018032:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018036:	50                   	push   eax
c0018037:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001803b:	50                   	push   eax
c001803c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018040:	50                   	push   eax
c0018041:	6a 01                	push   0x1
c0018043:	e8 5e ff ff ff       	call   c0017fa6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018048:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001804c:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018050:	0f 95 c0             	setne  al
c0018053:	83 c4 24             	add    esp,0x24
c0018056:	c3                   	ret    
c0018057:	90                   	nop

c0018058 <CPU::cpuidCheckECX(unsigned int)>:
c0018058:	83 ec 10             	sub    esp,0x10
c001805b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001805f:	50                   	push   eax
c0018060:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018064:	50                   	push   eax
c0018065:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018069:	50                   	push   eax
c001806a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001806e:	50                   	push   eax
c001806f:	6a 01                	push   0x1
c0018071:	e8 30 ff ff ff       	call   c0017fa6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018076:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001807a:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001807e:	0f 95 c0             	setne  al
c0018081:	83 c4 24             	add    esp,0x24
c0018084:	c3                   	ret    
c0018085:	90                   	nop

c0018086 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018086:	83 ec 10             	sub    esp,0x10
c0018089:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001808d:	50                   	push   eax
c001808e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018092:	50                   	push   eax
c0018093:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018097:	50                   	push   eax
c0018098:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001809c:	50                   	push   eax
c001809d:	6a 07                	push   0x7
c001809f:	e8 02 ff ff ff       	call   c0017fa6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00180a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180a8:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00180ac:	0f 95 c0             	setne  al
c00180af:	83 c4 24             	add    esp,0x24
c00180b2:	c3                   	ret    
c00180b3:	90                   	nop

c00180b4 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00180b4:	83 ec 10             	sub    esp,0x10
c00180b7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00180bb:	50                   	push   eax
c00180bc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00180c0:	50                   	push   eax
c00180c1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00180c5:	50                   	push   eax
c00180c6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00180ca:	50                   	push   eax
c00180cb:	6a 07                	push   0x7
c00180cd:	e8 d4 fe ff ff       	call   c0017fa6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00180d2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180d6:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00180da:	0f 95 c0             	setne  al
c00180dd:	83 c4 24             	add    esp,0x24
c00180e0:	c3                   	ret    
c00180e1:	90                   	nop

c00180e2 <CPU::CPU()>:
c00180e2:	83 ec 0c             	sub    esp,0xc
c00180e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180e9:	83 ec 08             	sub    esp,0x8
c00180ec:	68 7e 9f 02 c0       	push   0xc0029f7e
c00180f1:	50                   	push   eax
c00180f2:	e8 6f bb ff ff       	call   c0013c66 <Device::Device(char const*)>
c00180f7:	83 c4 10             	add    esp,0x10
c00180fa:	ba 58 a0 02 c0       	mov    edx,0xc002a058
c00180ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018103:	89 10                	mov    DWORD PTR [eax],edx
c0018105:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018109:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018113:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018117:	05 78 01 00 00       	add    eax,0x178
c001811c:	83 ec 0c             	sub    esp,0xc
c001811f:	50                   	push   eax
c0018120:	e8 c7 6b ff ff       	call   c000ecec <GDT::GDT()>
c0018125:	83 c4 10             	add    esp,0x10
c0018128:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001812c:	05 7c 09 00 00       	add    eax,0x97c
c0018131:	83 ec 0c             	sub    esp,0xc
c0018134:	50                   	push   eax
c0018135:	e8 14 6e ff ff       	call   c000ef4e <IDT::IDT()>
c001813a:	83 c4 10             	add    esp,0x10
c001813d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018141:	05 7c 11 00 00       	add    eax,0x117c
c0018146:	83 ec 0c             	sub    esp,0xc
c0018149:	50                   	push   eax
c001814a:	e8 79 8e ff ff       	call   c0010fc8 <TSS::TSS()>
c001814f:	83 c4 10             	add    esp,0x10
c0018152:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018156:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c001815d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018161:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c001816b:	90                   	nop
c001816c:	83 c4 0c             	add    esp,0xc
c001816f:	c3                   	ret    

c0018170 <CPU::displayFeatures()>:
c0018170:	53                   	push   ebx
c0018171:	83 ec 10             	sub    esp,0x10
c0018174:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018178:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001817e:	68 8c 9c 02 c0       	push   0xc0029c8c
c0018183:	e8 ff a4 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0018188:	59                   	pop    ecx
c0018189:	58                   	pop    eax
c001818a:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018190:	50                   	push   eax
c0018191:	68 9d 9c 02 c0       	push   0xc0029c9d
c0018196:	e8 ec a4 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001819b:	58                   	pop    eax
c001819c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00181a2:	5a                   	pop    edx
c00181a3:	c1 e8 0e             	shr    eax,0xe
c00181a6:	0f b6 c0             	movzx  eax,al
c00181a9:	50                   	push   eax
c00181aa:	68 ae 9c 02 c0       	push   0xc0029cae
c00181af:	e8 d3 a4 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c00181b4:	59                   	pop    ecx
c00181b5:	58                   	pop    eax
c00181b6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00181bc:	66 c1 e8 06          	shr    ax,0x6
c00181c0:	0f b6 c0             	movzx  eax,al
c00181c3:	50                   	push   eax
c00181c4:	68 bf 9c 02 c0       	push   0xc0029cbf
c00181c9:	e8 b9 a4 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c00181ce:	c7 04 24 5b a1 02 c0 	mov    DWORD PTR [esp],0xc002a15b
c00181d5:	e8 ad a4 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c00181da:	83 c4 10             	add    esp,0x10
c00181dd:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c00181e2:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c00181e9:	74 05                	je     c00181f0 <CPU::displayFeatures()+0x80>
c00181eb:	b8 78 88 02 c0       	mov    eax,0xc0028878
c00181f0:	52                   	push   edx
c00181f1:	52                   	push   edx
c00181f2:	50                   	push   eax
c00181f3:	68 d0 9c 02 c0       	push   0xc0029cd0
c00181f8:	e8 8a a4 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c00181fd:	83 c4 10             	add    esp,0x10
c0018200:	b8 78 88 02 c0       	mov    eax,0xc0028878
c0018205:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c001820c:	78 05                	js     c0018213 <CPU::displayFeatures()+0xa3>
c001820e:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c0018213:	51                   	push   ecx
c0018214:	51                   	push   ecx
c0018215:	50                   	push   eax
c0018216:	68 e7 9c 02 c0       	push   0xc0029ce7
c001821b:	e8 67 a4 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0018220:	83 c4 10             	add    esp,0x10
c0018223:	b8 78 88 02 c0       	mov    eax,0xc0028878
c0018228:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c001822f:	75 05                	jne    c0018236 <CPU::displayFeatures()+0xc6>
c0018231:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c0018236:	52                   	push   edx
c0018237:	52                   	push   edx
c0018238:	50                   	push   eax
c0018239:	68 fe 9c 02 c0       	push   0xc0029cfe
c001823e:	e8 44 a4 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0018243:	83 c4 10             	add    esp,0x10
c0018246:	b8 78 88 02 c0       	mov    eax,0xc0028878
c001824b:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018252:	75 05                	jne    c0018259 <CPU::displayFeatures()+0xe9>
c0018254:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c0018259:	51                   	push   ecx
c001825a:	51                   	push   ecx
c001825b:	50                   	push   eax
c001825c:	68 15 9d 02 c0       	push   0xc0029d15
c0018261:	e8 21 a4 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0018266:	83 c4 10             	add    esp,0x10
c0018269:	b8 78 88 02 c0       	mov    eax,0xc0028878
c001826e:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018275:	75 05                	jne    c001827c <CPU::displayFeatures()+0x10c>
c0018277:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c001827c:	52                   	push   edx
c001827d:	52                   	push   edx
c001827e:	50                   	push   eax
c001827f:	68 2c 9d 02 c0       	push   0xc0029d2c
c0018284:	e8 fe a3 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0018289:	83 c4 10             	add    esp,0x10
c001828c:	b8 78 88 02 c0       	mov    eax,0xc0028878
c0018291:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018298:	75 05                	jne    c001829f <CPU::displayFeatures()+0x12f>
c001829a:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c001829f:	51                   	push   ecx
c00182a0:	51                   	push   ecx
c00182a1:	50                   	push   eax
c00182a2:	68 43 9d 02 c0       	push   0xc0029d43
c00182a7:	e8 db a3 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c00182ac:	83 c4 10             	add    esp,0x10
c00182af:	b8 78 88 02 c0       	mov    eax,0xc0028878
c00182b4:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c00182bb:	75 05                	jne    c00182c2 <CPU::displayFeatures()+0x152>
c00182bd:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c00182c2:	52                   	push   edx
c00182c3:	52                   	push   edx
c00182c4:	50                   	push   eax
c00182c5:	68 5a 9d 02 c0       	push   0xc0029d5a
c00182ca:	e8 b8 a3 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c00182cf:	83 c4 10             	add    esp,0x10
c00182d2:	b8 78 88 02 c0       	mov    eax,0xc0028878
c00182d7:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00182de:	75 05                	jne    c00182e5 <CPU::displayFeatures()+0x175>
c00182e0:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c00182e5:	51                   	push   ecx
c00182e6:	51                   	push   ecx
c00182e7:	50                   	push   eax
c00182e8:	68 71 9d 02 c0       	push   0xc0029d71
c00182ed:	e8 95 a3 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c00182f2:	83 c4 10             	add    esp,0x10
c00182f5:	b8 78 88 02 c0       	mov    eax,0xc0028878
c00182fa:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018301:	75 05                	jne    c0018308 <CPU::displayFeatures()+0x198>
c0018303:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c0018308:	52                   	push   edx
c0018309:	52                   	push   edx
c001830a:	50                   	push   eax
c001830b:	68 88 9d 02 c0       	push   0xc0029d88
c0018310:	e8 72 a3 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0018315:	83 c4 10             	add    esp,0x10
c0018318:	b8 78 88 02 c0       	mov    eax,0xc0028878
c001831d:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0018324:	75 05                	jne    c001832b <CPU::displayFeatures()+0x1bb>
c0018326:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c001832b:	51                   	push   ecx
c001832c:	51                   	push   ecx
c001832d:	50                   	push   eax
c001832e:	68 9f 9d 02 c0       	push   0xc0029d9f
c0018333:	e8 4f a3 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0018338:	83 c4 10             	add    esp,0x10
c001833b:	b8 78 88 02 c0       	mov    eax,0xc0028878
c0018340:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018347:	75 05                	jne    c001834e <CPU::displayFeatures()+0x1de>
c0018349:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c001834e:	52                   	push   edx
c001834f:	52                   	push   edx
c0018350:	50                   	push   eax
c0018351:	68 b6 9d 02 c0       	push   0xc0029db6
c0018356:	e8 2c a3 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001835b:	83 c4 10             	add    esp,0x10
c001835e:	b8 78 88 02 c0       	mov    eax,0xc0028878
c0018363:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c001836a:	75 05                	jne    c0018371 <CPU::displayFeatures()+0x201>
c001836c:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c0018371:	51                   	push   ecx
c0018372:	51                   	push   ecx
c0018373:	50                   	push   eax
c0018374:	68 cd 9d 02 c0       	push   0xc0029dcd
c0018379:	e8 09 a3 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001837e:	83 c4 10             	add    esp,0x10
c0018381:	b8 78 88 02 c0       	mov    eax,0xc0028878
c0018386:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c001838d:	75 05                	jne    c0018394 <CPU::displayFeatures()+0x224>
c001838f:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c0018394:	52                   	push   edx
c0018395:	52                   	push   edx
c0018396:	50                   	push   eax
c0018397:	68 e4 9d 02 c0       	push   0xc0029de4
c001839c:	e8 e6 a2 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c00183a1:	83 c4 10             	add    esp,0x10
c00183a4:	b8 78 88 02 c0       	mov    eax,0xc0028878
c00183a9:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c00183b0:	78 05                	js     c00183b7 <CPU::displayFeatures()+0x247>
c00183b2:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c00183b7:	51                   	push   ecx
c00183b8:	51                   	push   ecx
c00183b9:	50                   	push   eax
c00183ba:	68 fb 9d 02 c0       	push   0xc0029dfb
c00183bf:	e8 c3 a2 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c00183c4:	83 c4 10             	add    esp,0x10
c00183c7:	b8 78 88 02 c0       	mov    eax,0xc0028878
c00183cc:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c00183d3:	75 05                	jne    c00183da <CPU::displayFeatures()+0x26a>
c00183d5:	b8 7c 88 02 c0       	mov    eax,0xc002887c
c00183da:	52                   	push   edx
c00183db:	52                   	push   edx
c00183dc:	50                   	push   eax
c00183dd:	68 12 9e 02 c0       	push   0xc0029e12
c00183e2:	e8 a0 a2 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c00183e7:	83 c4 18             	add    esp,0x18
c00183ea:	5b                   	pop    ebx
c00183eb:	c3                   	ret    

c00183ec <CPU::detectFeatures()>:
c00183ec:	55                   	push   ebp
c00183ed:	57                   	push   edi
c00183ee:	56                   	push   esi
c00183ef:	53                   	push   ebx
c00183f0:	83 ec 50             	sub    esp,0x50
c00183f3:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00183f7:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018401:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018408:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c001840e:	6a 0d                	push   0xd
c0018410:	6a 00                	push   0x0
c0018412:	57                   	push   edi
c0018413:	e8 73 82 fe ff       	call   c000068b <memset>
c0018418:	83 c4 10             	add    esp,0x10
c001841b:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0018420:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018427:	0f 84 20 09 00 00    	je     c0018d4d <CPU::detectFeatures()+0x961>
c001842d:	83 ec 0c             	sub    esp,0xc
c0018430:	6a 10                	push   0x10
c0018432:	e8 f3 fb ff ff       	call   c001802a <CPU::cpuidCheckEDX(unsigned int)>
c0018437:	83 e0 01             	and    eax,0x1
c001843a:	8d 14 00             	lea    edx,[eax+eax*1]
c001843d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018443:	83 e0 fd             	and    eax,0xfffffffd
c0018446:	09 d0                	or     eax,edx
c0018448:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001844e:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018455:	e8 d0 fb ff ff       	call   c001802a <CPU::cpuidCheckEDX(unsigned int)>
c001845a:	83 e0 01             	and    eax,0x1
c001845d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018464:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001846a:	83 e0 fb             	and    eax,0xfffffffb
c001846d:	09 d0                	or     eax,edx
c001846f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018475:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001847c:	e8 a9 fb ff ff       	call   c001802a <CPU::cpuidCheckEDX(unsigned int)>
c0018481:	83 e0 01             	and    eax,0x1
c0018484:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001848b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018491:	83 e0 f7             	and    eax,0xfffffff7
c0018494:	09 d0                	or     eax,edx
c0018496:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001849c:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00184a3:	e8 82 fb ff ff       	call   c001802a <CPU::cpuidCheckEDX(unsigned int)>
c00184a8:	83 e0 01             	and    eax,0x1
c00184ab:	c1 e0 04             	shl    eax,0x4
c00184ae:	88 c2                	mov    dl,al
c00184b0:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00184b6:	83 e0 ef             	and    eax,0xffffffef
c00184b9:	09 d0                	or     eax,edx
c00184bb:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00184c1:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00184c8:	e8 5d fb ff ff       	call   c001802a <CPU::cpuidCheckEDX(unsigned int)>
c00184cd:	83 e0 01             	and    eax,0x1
c00184d0:	c1 e0 05             	shl    eax,0x5
c00184d3:	88 c2                	mov    dl,al
c00184d5:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00184db:	83 e0 df             	and    eax,0xffffffdf
c00184de:	09 d0                	or     eax,edx
c00184e0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00184e6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00184ed:	e8 38 fb ff ff       	call   c001802a <CPU::cpuidCheckEDX(unsigned int)>
c00184f2:	83 e0 01             	and    eax,0x1
c00184f5:	8d 14 00             	lea    edx,[eax+eax*1]
c00184f8:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00184fe:	83 e0 fd             	and    eax,0xfffffffd
c0018501:	09 d0                	or     eax,edx
c0018503:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018509:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018510:	e8 15 fb ff ff       	call   c001802a <CPU::cpuidCheckEDX(unsigned int)>
c0018515:	83 e0 01             	and    eax,0x1
c0018518:	c1 e0 06             	shl    eax,0x6
c001851b:	88 c2                	mov    dl,al
c001851d:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018523:	83 e0 bf             	and    eax,0xffffffbf
c0018526:	09 d0                	or     eax,edx
c0018528:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001852e:	58                   	pop    eax
c001852f:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018533:	56                   	push   esi
c0018534:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018538:	55                   	push   ebp
c0018539:	8d 44 24 28          	lea    eax,[esp+0x28]
c001853d:	50                   	push   eax
c001853e:	8d 54 24 28          	lea    edx,[esp+0x28]
c0018542:	52                   	push   edx
c0018543:	6a 00                	push   0x0
c0018545:	e8 5c fa ff ff       	call   c0017fa6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001854a:	83 c4 1c             	add    esp,0x1c
c001854d:	6a 04                	push   0x4
c001854f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018553:	50                   	push   eax
c0018554:	57                   	push   edi
c0018555:	e8 fb 80 fe ff       	call   c0000655 <memcpy>
c001855a:	83 c4 0c             	add    esp,0xc
c001855d:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0018563:	6a 04                	push   0x4
c0018565:	56                   	push   esi
c0018566:	50                   	push   eax
c0018567:	e8 e9 80 fe ff       	call   c0000655 <memcpy>
c001856c:	83 c4 0c             	add    esp,0xc
c001856f:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0018575:	6a 04                	push   0x4
c0018577:	55                   	push   ebp
c0018578:	50                   	push   eax
c0018579:	e8 d7 80 fe ff       	call   c0000655 <memcpy>
c001857e:	58                   	pop    eax
c001857f:	5a                   	pop    edx
c0018580:	68 29 9e 02 c0       	push   0xc0029e29
c0018585:	57                   	push   edi
c0018586:	e8 f0 81 fe ff       	call   c000077b <strcmp>
c001858b:	83 c4 10             	add    esp,0x10
c001858e:	85 c0                	test   eax,eax
c0018590:	75 0f                	jne    c00185a1 <CPU::detectFeatures()+0x1b5>
c0018592:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001859c:	e9 22 02 00 00       	jmp    c00187c3 <CPU::detectFeatures()+0x3d7>
c00185a1:	50                   	push   eax
c00185a2:	50                   	push   eax
c00185a3:	68 36 9e 02 c0       	push   0xc0029e36
c00185a8:	57                   	push   edi
c00185a9:	e8 cd 81 fe ff       	call   c000077b <strcmp>
c00185ae:	83 c4 10             	add    esp,0x10
c00185b1:	85 c0                	test   eax,eax
c00185b3:	74 dd                	je     c0018592 <CPU::detectFeatures()+0x1a6>
c00185b5:	51                   	push   ecx
c00185b6:	51                   	push   ecx
c00185b7:	68 43 9e 02 c0       	push   0xc0029e43
c00185bc:	57                   	push   edi
c00185bd:	e8 b9 81 fe ff       	call   c000077b <strcmp>
c00185c2:	83 c4 10             	add    esp,0x10
c00185c5:	85 c0                	test   eax,eax
c00185c7:	74 2a                	je     c00185f3 <CPU::detectFeatures()+0x207>
c00185c9:	52                   	push   edx
c00185ca:	52                   	push   edx
c00185cb:	68 50 9e 02 c0       	push   0xc0029e50
c00185d0:	57                   	push   edi
c00185d1:	e8 a5 81 fe ff       	call   c000077b <strcmp>
c00185d6:	83 c4 10             	add    esp,0x10
c00185d9:	85 c0                	test   eax,eax
c00185db:	74 16                	je     c00185f3 <CPU::detectFeatures()+0x207>
c00185dd:	50                   	push   eax
c00185de:	50                   	push   eax
c00185df:	68 5d 9e 02 c0       	push   0xc0029e5d
c00185e4:	57                   	push   edi
c00185e5:	e8 91 81 fe ff       	call   c000077b <strcmp>
c00185ea:	83 c4 10             	add    esp,0x10
c00185ed:	85 c0                	test   eax,eax
c00185ef:	74 48                	je     c0018639 <CPU::detectFeatures()+0x24d>
c00185f1:	eb 0f                	jmp    c0018602 <CPU::detectFeatures()+0x216>
c00185f3:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00185fd:	e9 c1 01 00 00       	jmp    c00187c3 <CPU::detectFeatures()+0x3d7>
c0018602:	50                   	push   eax
c0018603:	50                   	push   eax
c0018604:	68 6a 9e 02 c0       	push   0xc0029e6a
c0018609:	57                   	push   edi
c001860a:	e8 6c 81 fe ff       	call   c000077b <strcmp>
c001860f:	83 c4 10             	add    esp,0x10
c0018612:	85 c0                	test   eax,eax
c0018614:	74 23                	je     c0018639 <CPU::detectFeatures()+0x24d>
c0018616:	50                   	push   eax
c0018617:	50                   	push   eax
c0018618:	68 77 9e 02 c0       	push   0xc0029e77
c001861d:	57                   	push   edi
c001861e:	e8 58 81 fe ff       	call   c000077b <strcmp>
c0018623:	83 c4 10             	add    esp,0x10
c0018626:	85 c0                	test   eax,eax
c0018628:	75 1e                	jne    c0018648 <CPU::detectFeatures()+0x25c>
c001862a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018634:	e9 8a 01 00 00       	jmp    c00187c3 <CPU::detectFeatures()+0x3d7>
c0018639:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018643:	e9 7b 01 00 00       	jmp    c00187c3 <CPU::detectFeatures()+0x3d7>
c0018648:	50                   	push   eax
c0018649:	50                   	push   eax
c001864a:	68 84 9e 02 c0       	push   0xc0029e84
c001864f:	57                   	push   edi
c0018650:	e8 26 81 fe ff       	call   c000077b <strcmp>
c0018655:	83 c4 10             	add    esp,0x10
c0018658:	85 c0                	test   eax,eax
c001865a:	75 0f                	jne    c001866b <CPU::detectFeatures()+0x27f>
c001865c:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018666:	e9 58 01 00 00       	jmp    c00187c3 <CPU::detectFeatures()+0x3d7>
c001866b:	50                   	push   eax
c001866c:	50                   	push   eax
c001866d:	68 43 9e 02 c0       	push   0xc0029e43
c0018672:	57                   	push   edi
c0018673:	e8 03 81 fe ff       	call   c000077b <strcmp>
c0018678:	83 c4 10             	add    esp,0x10
c001867b:	85 c0                	test   eax,eax
c001867d:	75 0f                	jne    c001868e <CPU::detectFeatures()+0x2a2>
c001867f:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018689:	e9 35 01 00 00       	jmp    c00187c3 <CPU::detectFeatures()+0x3d7>
c001868e:	50                   	push   eax
c001868f:	50                   	push   eax
c0018690:	68 91 9e 02 c0       	push   0xc0029e91
c0018695:	57                   	push   edi
c0018696:	e8 e0 80 fe ff       	call   c000077b <strcmp>
c001869b:	83 c4 10             	add    esp,0x10
c001869e:	85 c0                	test   eax,eax
c00186a0:	75 0f                	jne    c00186b1 <CPU::detectFeatures()+0x2c5>
c00186a2:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00186ac:	e9 12 01 00 00       	jmp    c00187c3 <CPU::detectFeatures()+0x3d7>
c00186b1:	51                   	push   ecx
c00186b2:	51                   	push   ecx
c00186b3:	68 9e 9e 02 c0       	push   0xc0029e9e
c00186b8:	57                   	push   edi
c00186b9:	e8 bd 80 fe ff       	call   c000077b <strcmp>
c00186be:	83 c4 10             	add    esp,0x10
c00186c1:	85 c0                	test   eax,eax
c00186c3:	75 0f                	jne    c00186d4 <CPU::detectFeatures()+0x2e8>
c00186c5:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00186cf:	e9 ef 00 00 00       	jmp    c00187c3 <CPU::detectFeatures()+0x3d7>
c00186d4:	52                   	push   edx
c00186d5:	52                   	push   edx
c00186d6:	68 ab 9e 02 c0       	push   0xc0029eab
c00186db:	57                   	push   edi
c00186dc:	e8 9a 80 fe ff       	call   c000077b <strcmp>
c00186e1:	83 c4 10             	add    esp,0x10
c00186e4:	85 c0                	test   eax,eax
c00186e6:	75 0f                	jne    c00186f7 <CPU::detectFeatures()+0x30b>
c00186e8:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00186f2:	e9 cc 00 00 00       	jmp    c00187c3 <CPU::detectFeatures()+0x3d7>
c00186f7:	50                   	push   eax
c00186f8:	50                   	push   eax
c00186f9:	68 b8 9e 02 c0       	push   0xc0029eb8
c00186fe:	57                   	push   edi
c00186ff:	e8 77 80 fe ff       	call   c000077b <strcmp>
c0018704:	83 c4 10             	add    esp,0x10
c0018707:	85 c0                	test   eax,eax
c0018709:	75 0f                	jne    c001871a <CPU::detectFeatures()+0x32e>
c001870b:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018715:	e9 a9 00 00 00       	jmp    c00187c3 <CPU::detectFeatures()+0x3d7>
c001871a:	50                   	push   eax
c001871b:	50                   	push   eax
c001871c:	68 c5 9e 02 c0       	push   0xc0029ec5
c0018721:	57                   	push   edi
c0018722:	e8 54 80 fe ff       	call   c000077b <strcmp>
c0018727:	83 c4 10             	add    esp,0x10
c001872a:	85 c0                	test   eax,eax
c001872c:	75 0f                	jne    c001873d <CPU::detectFeatures()+0x351>
c001872e:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018738:	e9 86 00 00 00       	jmp    c00187c3 <CPU::detectFeatures()+0x3d7>
c001873d:	50                   	push   eax
c001873e:	50                   	push   eax
c001873f:	68 d2 9e 02 c0       	push   0xc0029ed2
c0018744:	57                   	push   edi
c0018745:	e8 31 80 fe ff       	call   c000077b <strcmp>
c001874a:	83 c4 10             	add    esp,0x10
c001874d:	85 c0                	test   eax,eax
c001874f:	75 0c                	jne    c001875d <CPU::detectFeatures()+0x371>
c0018751:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001875b:	eb 66                	jmp    c00187c3 <CPU::detectFeatures()+0x3d7>
c001875d:	50                   	push   eax
c001875e:	50                   	push   eax
c001875f:	68 df 9e 02 c0       	push   0xc0029edf
c0018764:	57                   	push   edi
c0018765:	e8 11 80 fe ff       	call   c000077b <strcmp>
c001876a:	83 c4 10             	add    esp,0x10
c001876d:	85 c0                	test   eax,eax
c001876f:	75 0c                	jne    c001877d <CPU::detectFeatures()+0x391>
c0018771:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001877b:	eb 46                	jmp    c00187c3 <CPU::detectFeatures()+0x3d7>
c001877d:	50                   	push   eax
c001877e:	50                   	push   eax
c001877f:	68 ec 9e 02 c0       	push   0xc0029eec
c0018784:	57                   	push   edi
c0018785:	e8 f1 7f fe ff       	call   c000077b <strcmp>
c001878a:	83 c4 10             	add    esp,0x10
c001878d:	85 c0                	test   eax,eax
c001878f:	74 e0                	je     c0018771 <CPU::detectFeatures()+0x385>
c0018791:	50                   	push   eax
c0018792:	50                   	push   eax
c0018793:	68 f9 9e 02 c0       	push   0xc0029ef9
c0018798:	57                   	push   edi
c0018799:	e8 dd 7f fe ff       	call   c000077b <strcmp>
c001879e:	83 c4 10             	add    esp,0x10
c00187a1:	85 c0                	test   eax,eax
c00187a3:	74 cc                	je     c0018771 <CPU::detectFeatures()+0x385>
c00187a5:	51                   	push   ecx
c00187a6:	51                   	push   ecx
c00187a7:	68 06 9f 02 c0       	push   0xc0029f06
c00187ac:	57                   	push   edi
c00187ad:	e8 c9 7f fe ff       	call   c000077b <strcmp>
c00187b2:	83 c4 10             	add    esp,0x10
c00187b5:	85 c0                	test   eax,eax
c00187b7:	74 b8                	je     c0018771 <CPU::detectFeatures()+0x385>
c00187b9:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00187c3:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00187c8:	0f 86 be 00 00 00    	jbe    c001888c <CPU::detectFeatures()+0x4a0>
c00187ce:	83 ec 0c             	sub    esp,0xc
c00187d1:	68 80 00 00 00       	push   0x80
c00187d6:	e8 ab f8 ff ff       	call   c0018086 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00187db:	83 e0 01             	and    eax,0x1
c00187de:	c1 e0 06             	shl    eax,0x6
c00187e1:	88 c2                	mov    dl,al
c00187e3:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00187e9:	83 e0 bf             	and    eax,0xffffffbf
c00187ec:	09 d0                	or     eax,edx
c00187ee:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00187f4:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00187fb:	e8 86 f8 ff ff       	call   c0018086 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018800:	83 e0 01             	and    eax,0x1
c0018803:	c1 e0 04             	shl    eax,0x4
c0018806:	88 c2                	mov    dl,al
c0018808:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001880e:	83 e0 ef             	and    eax,0xffffffef
c0018811:	09 d0                	or     eax,edx
c0018813:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018819:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0018820:	e8 61 f8 ff ff       	call   c0018086 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018825:	c1 e0 07             	shl    eax,0x7
c0018828:	88 c2                	mov    dl,al
c001882a:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018830:	83 e0 7f             	and    eax,0x7f
c0018833:	09 d0                	or     eax,edx
c0018835:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001883b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018842:	e8 6d f8 ff ff       	call   c00180b4 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018847:	83 e0 01             	and    eax,0x1
c001884a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018851:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018857:	83 e0 f7             	and    eax,0xfffffff7
c001885a:	09 d0                	or     eax,edx
c001885c:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018862:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0018869:	e8 46 f8 ff ff       	call   c00180b4 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001886e:	83 c4 10             	add    esp,0x10
c0018871:	83 e0 01             	and    eax,0x1
c0018874:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001887b:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018881:	83 e0 fb             	and    eax,0xfffffffb
c0018884:	09 d0                	or     eax,edx
c0018886:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001888c:	83 ec 0c             	sub    esp,0xc
c001888f:	56                   	push   esi
c0018890:	55                   	push   ebp
c0018891:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0018895:	57                   	push   edi
c0018896:	8d 44 24 28          	lea    eax,[esp+0x28]
c001889a:	50                   	push   eax
c001889b:	6a 01                	push   0x1
c001889d:	e8 04 f7 ff ff       	call   c0017fa6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00188a2:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00188a6:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00188ac:	88 ca                	mov    dl,cl
c00188ae:	83 e0 f0             	and    eax,0xfffffff0
c00188b1:	83 e2 0f             	and    edx,0xf
c00188b4:	09 d0                	or     eax,edx
c00188b6:	88 ca                	mov    dl,cl
c00188b8:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00188be:	c0 ea 04             	shr    dl,0x4
c00188c1:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00188c5:	0f b6 c2             	movzx  eax,dl
c00188c8:	83 c4 20             	add    esp,0x20
c00188cb:	c1 e0 06             	shl    eax,0x6
c00188ce:	89 c5                	mov    ebp,eax
c00188d0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00188d6:	66 25 3f c0          	and    ax,0xc03f
c00188da:	09 e8                	or     eax,ebp
c00188dc:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00188e3:	89 c8                	mov    eax,ecx
c00188e5:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00188eb:	c1 e8 08             	shr    eax,0x8
c00188ee:	83 e2 3f             	and    edx,0x3f
c00188f1:	83 e0 0f             	and    eax,0xf
c00188f4:	89 c5                	mov    ebp,eax
c00188f6:	c1 e5 06             	shl    ebp,0x6
c00188f9:	09 d5                	or     ebp,edx
c00188fb:	89 ea                	mov    edx,ebp
c00188fd:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0018903:	88 c2                	mov    dl,al
c0018905:	c0 ea 02             	shr    dl,0x2
c0018908:	89 d5                	mov    ebp,edx
c001890a:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0018910:	83 e2 c0             	and    edx,0xffffffc0
c0018913:	09 d5                	or     ebp,edx
c0018915:	89 ea                	mov    edx,ebp
c0018917:	89 cd                	mov    ebp,ecx
c0018919:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c001891f:	c1 ed 0c             	shr    ebp,0xc
c0018922:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0018928:	83 e5 03             	and    ebp,0x3
c001892b:	83 e2 cf             	and    edx,0xffffffcf
c001892e:	c1 e5 04             	shl    ebp,0x4
c0018931:	09 d5                	or     ebp,edx
c0018933:	3c 06                	cmp    al,0x6
c0018935:	89 ea                	mov    edx,ebp
c0018937:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001893d:	74 04                	je     c0018943 <CPU::detectFeatures()+0x557>
c001893f:	3c 0f                	cmp    al,0xf
c0018941:	75 5c                	jne    c001899f <CPU::detectFeatures()+0x5b3>
c0018943:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018947:	89 cd                	mov    ebp,ecx
c0018949:	c1 ed 10             	shr    ebp,0x10
c001894c:	c1 e5 04             	shl    ebp,0x4
c001894f:	09 ea                	or     edx,ebp
c0018951:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0018957:	0f b6 d2             	movzx  edx,dl
c001895a:	66 81 e5 3f c0       	and    bp,0xc03f
c001895f:	c1 e2 06             	shl    edx,0x6
c0018962:	09 ea                	or     edx,ebp
c0018964:	3c 0f                	cmp    al,0xf
c0018966:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001896d:	75 30                	jne    c001899f <CPU::detectFeatures()+0x5b3>
c001896f:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0018975:	c1 e9 14             	shr    ecx,0x14
c0018978:	83 e0 3f             	and    eax,0x3f
c001897b:	83 c1 0f             	add    ecx,0xf
c001897e:	88 ca                	mov    dl,cl
c0018980:	c0 e9 02             	shr    cl,0x2
c0018983:	c1 e2 06             	shl    edx,0x6
c0018986:	09 d0                	or     eax,edx
c0018988:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c001898e:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0018994:	83 e0 c0             	and    eax,0xffffffc0
c0018997:	09 c1                	or     ecx,eax
c0018999:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001899f:	83 ec 0c             	sub    esp,0xc
c00189a2:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00189a9:	56                   	push   esi
c00189aa:	8d 44 24 28          	lea    eax,[esp+0x28]
c00189ae:	50                   	push   eax
c00189af:	57                   	push   edi
c00189b0:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00189b4:	55                   	push   ebp
c00189b5:	68 00 00 00 80       	push   0x80000000
c00189ba:	e8 e7 f5 ff ff       	call   c0017fa6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00189bf:	83 c4 20             	add    esp,0x20
c00189c2:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00189ca:	8d 44 24 18          	lea    eax,[esp+0x18]
c00189ce:	76 1e                	jbe    c00189ee <CPU::detectFeatures()+0x602>
c00189d0:	83 ec 0c             	sub    esp,0xc
c00189d3:	56                   	push   esi
c00189d4:	50                   	push   eax
c00189d5:	57                   	push   edi
c00189d6:	55                   	push   ebp
c00189d7:	68 01 00 00 80       	push   0x80000001
c00189dc:	e8 c5 f5 ff ff       	call   c0017fa6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00189e1:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00189eb:	83 c4 20             	add    esp,0x20
c00189ee:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00189f4:	83 f8 01             	cmp    eax,0x1
c00189f7:	75 6f                	jne    c0018a68 <CPU::detectFeatures()+0x67c>
c00189f9:	51                   	push   ecx
c00189fa:	51                   	push   ecx
c00189fb:	68 12 9f 02 c0       	push   0xc0029f12
c0018a00:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018a04:	56                   	push   esi
c0018a05:	e8 20 7d fe ff       	call   c000072a <strcpy>
c0018a0a:	5f                   	pop    edi
c0018a0b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018a11:	5d                   	pop    ebp
c0018a12:	66 c1 e8 06          	shr    ax,0x6
c0018a16:	0f b6 c0             	movzx  eax,al
c0018a19:	50                   	push   eax
c0018a1a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018a20:	c1 e8 0e             	shr    eax,0xe
c0018a23:	0f b6 c0             	movzx  eax,al
c0018a26:	50                   	push   eax
c0018a27:	e8 24 f2 ff ff       	call   c0017c50 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0018a2c:	5a                   	pop    edx
c0018a2d:	59                   	pop    ecx
c0018a2e:	50                   	push   eax
c0018a2f:	56                   	push   esi
c0018a30:	e8 ac 7d fe ff       	call   c00007e1 <strcat>
c0018a35:	5f                   	pop    edi
c0018a36:	5d                   	pop    ebp
c0018a37:	56                   	push   esi
c0018a38:	53                   	push   ebx
c0018a39:	e8 1a b2 ff ff       	call   c0013c58 <Device::setName(char const*)>
c0018a3e:	58                   	pop    eax
c0018a3f:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018a45:	5a                   	pop    edx
c0018a46:	68 19 9f 02 c0       	push   0xc0029f19
c0018a4b:	50                   	push   eax
c0018a4c:	e8 2a 7d fe ff       	call   c000077b <strcmp>
c0018a51:	83 c4 10             	add    esp,0x10
c0018a54:	85 c0                	test   eax,eax
c0018a56:	0f 85 71 03 00 00    	jne    c0018dcd <CPU::detectFeatures()+0x9e1>
c0018a5c:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0018a63:	e9 65 03 00 00       	jmp    c0018dcd <CPU::detectFeatures()+0x9e1>
c0018a68:	83 f8 02             	cmp    eax,0x2
c0018a6b:	0f 85 b5 00 00 00    	jne    c0018b26 <CPU::detectFeatures()+0x73a>
c0018a71:	57                   	push   edi
c0018a72:	57                   	push   edi
c0018a73:	68 2b 9f 02 c0       	push   0xc0029f2b
c0018a78:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018a7c:	56                   	push   esi
c0018a7d:	e8 a8 7c fe ff       	call   c000072a <strcpy>
c0018a82:	5d                   	pop    ebp
c0018a83:	58                   	pop    eax
c0018a84:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018a8a:	66 c1 e8 06          	shr    ax,0x6
c0018a8e:	0f b6 c0             	movzx  eax,al
c0018a91:	50                   	push   eax
c0018a92:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018a98:	c1 e8 0e             	shr    eax,0xe
c0018a9b:	0f b6 c0             	movzx  eax,al
c0018a9e:	50                   	push   eax
c0018a9f:	e8 18 f0 ff ff       	call   c0017abc <CPU::lookupAMDName(unsigned char, unsigned char)>
c0018aa4:	5a                   	pop    edx
c0018aa5:	59                   	pop    ecx
c0018aa6:	50                   	push   eax
c0018aa7:	56                   	push   esi
c0018aa8:	e8 34 7d fe ff       	call   c00007e1 <strcat>
c0018aad:	5f                   	pop    edi
c0018aae:	5d                   	pop    ebp
c0018aaf:	56                   	push   esi
c0018ab0:	53                   	push   ebx
c0018ab1:	e8 a2 b1 ff ff       	call   c0013c58 <Device::setName(char const*)>
c0018ab6:	58                   	pop    eax
c0018ab7:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018abd:	5a                   	pop    edx
c0018abe:	68 30 9f 02 c0       	push   0xc0029f30
c0018ac3:	50                   	push   eax
c0018ac4:	e8 b2 7c fe ff       	call   c000077b <strcmp>
c0018ac9:	83 c4 10             	add    esp,0x10
c0018acc:	85 c0                	test   eax,eax
c0018ace:	75 20                	jne    c0018af0 <CPU::detectFeatures()+0x704>
c0018ad0:	8b 15 48 c8 02 c0    	mov    edx,DWORD PTR ds:0xc002c848
c0018ad6:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0018adc:	a8 01                	test   al,0x1
c0018ade:	74 10                	je     c0018af0 <CPU::detectFeatures()+0x704>
c0018ae0:	83 e0 fe             	and    eax,0xfffffffe
c0018ae3:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0018ae9:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0018af0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018af6:	c1 e8 0e             	shr    eax,0xe
c0018af9:	3c 05                	cmp    al,0x5
c0018afb:	0f 85 cc 02 00 00    	jne    c0018dcd <CPU::detectFeatures()+0x9e1>
c0018b01:	56                   	push   esi
c0018b02:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018b08:	83 e0 0f             	and    eax,0xf
c0018b0b:	50                   	push   eax
c0018b0c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018b12:	66 c1 e8 06          	shr    ax,0x6
c0018b16:	0f b6 c0             	movzx  eax,al
c0018b19:	50                   	push   eax
c0018b1a:	6a 05                	push   0x5
c0018b1c:	e8 11 f4 ff ff       	call   c0017f32 <CPU::AMD_K6_writeback(int, int, int)>
c0018b21:	e9 1f 02 00 00       	jmp    c0018d45 <CPU::detectFeatures()+0x959>
c0018b26:	8d 50 fd             	lea    edx,[eax-0x3]
c0018b29:	83 fa 01             	cmp    edx,0x1
c0018b2c:	76 09                	jbe    c0018b37 <CPU::detectFeatures()+0x74b>
c0018b2e:	83 f8 06             	cmp    eax,0x6
c0018b31:	0f 85 91 01 00 00    	jne    c0018cc8 <CPU::detectFeatures()+0x8dc>
c0018b37:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018b3d:	c1 ea 0e             	shr    edx,0xe
c0018b40:	80 fa 05             	cmp    dl,0x5
c0018b43:	75 7b                	jne    c0018bc0 <CPU::detectFeatures()+0x7d4>
c0018b45:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018b4b:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018b50:	66 81 fa 00 01       	cmp    dx,0x100
c0018b55:	75 0c                	jne    c0018b63 <CPU::detectFeatures()+0x777>
c0018b57:	51                   	push   ecx
c0018b58:	51                   	push   ecx
c0018b59:	68 37 9f 02 c0       	push   0xc0029f37
c0018b5e:	e9 dc 01 00 00       	jmp    c0018d3f <CPU::detectFeatures()+0x953>
c0018b63:	66 81 fa 00 02       	cmp    dx,0x200
c0018b68:	75 0c                	jne    c0018b76 <CPU::detectFeatures()+0x78a>
c0018b6a:	52                   	push   edx
c0018b6b:	52                   	push   edx
c0018b6c:	68 4a 9f 02 c0       	push   0xc0029f4a
c0018b71:	e9 c9 01 00 00       	jmp    c0018d3f <CPU::detectFeatures()+0x953>
c0018b76:	66 81 fa 40 02       	cmp    dx,0x240
c0018b7b:	75 0c                	jne    c0018b89 <CPU::detectFeatures()+0x79d>
c0018b7d:	50                   	push   eax
c0018b7e:	50                   	push   eax
c0018b7f:	68 5c 9f 02 c0       	push   0xc0029f5c
c0018b84:	e9 b6 01 00 00       	jmp    c0018d3f <CPU::detectFeatures()+0x953>
c0018b89:	83 f8 06             	cmp    eax,0x6
c0018b8c:	75 0c                	jne    c0018b9a <CPU::detectFeatures()+0x7ae>
c0018b8e:	50                   	push   eax
c0018b8f:	50                   	push   eax
c0018b90:	68 6e 9f 02 c0       	push   0xc0029f6e
c0018b95:	e9 a5 01 00 00       	jmp    c0018d3f <CPU::detectFeatures()+0x953>
c0018b9a:	83 f8 04             	cmp    eax,0x4
c0018b9d:	75 0c                	jne    c0018bab <CPU::detectFeatures()+0x7bf>
c0018b9f:	50                   	push   eax
c0018ba0:	50                   	push   eax
c0018ba1:	68 7a 9f 02 c0       	push   0xc0029f7a
c0018ba6:	e9 94 01 00 00       	jmp    c0018d3f <CPU::detectFeatures()+0x953>
c0018bab:	83 f8 03             	cmp    eax,0x3
c0018bae:	0f 85 19 02 00 00    	jne    c0018dcd <CPU::detectFeatures()+0x9e1>
c0018bb4:	50                   	push   eax
c0018bb5:	50                   	push   eax
c0018bb6:	68 82 9f 02 c0       	push   0xc0029f82
c0018bbb:	e9 7f 01 00 00       	jmp    c0018d3f <CPU::detectFeatures()+0x953>
c0018bc0:	80 fa 06             	cmp    dl,0x6
c0018bc3:	0f 85 db 00 00 00    	jne    c0018ca4 <CPU::detectFeatures()+0x8b8>
c0018bc9:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018bcf:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018bd4:	66 81 fa 80 01       	cmp    dx,0x180
c0018bd9:	75 0c                	jne    c0018be7 <CPU::detectFeatures()+0x7fb>
c0018bdb:	50                   	push   eax
c0018bdc:	50                   	push   eax
c0018bdd:	68 8d 9f 02 c0       	push   0xc0029f8d
c0018be2:	e9 58 01 00 00       	jmp    c0018d3f <CPU::detectFeatures()+0x953>
c0018be7:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0018bed:	66 f7 c1 80 ff       	test   cx,0xff80
c0018bf2:	75 0c                	jne    c0018c00 <CPU::detectFeatures()+0x814>
c0018bf4:	50                   	push   eax
c0018bf5:	50                   	push   eax
c0018bf6:	68 9d 9f 02 c0       	push   0xc0029f9d
c0018bfb:	e9 3f 01 00 00       	jmp    c0018d3f <CPU::detectFeatures()+0x953>
c0018c00:	66 81 fa 40 02       	cmp    dx,0x240
c0018c05:	75 0c                	jne    c0018c13 <CPU::detectFeatures()+0x827>
c0018c07:	55                   	push   ebp
c0018c08:	55                   	push   ebp
c0018c09:	68 a4 9f 02 c0       	push   0xc0029fa4
c0018c0e:	e9 2c 01 00 00       	jmp    c0018d3f <CPU::detectFeatures()+0x953>
c0018c13:	66 81 fa 80 02       	cmp    dx,0x280
c0018c18:	75 0c                	jne    c0018c26 <CPU::detectFeatures()+0x83a>
c0018c1a:	57                   	push   edi
c0018c1b:	57                   	push   edi
c0018c1c:	68 ad 9f 02 c0       	push   0xc0029fad
c0018c21:	e9 19 01 00 00       	jmp    c0018d3f <CPU::detectFeatures()+0x953>
c0018c26:	66 81 fa 40 03       	cmp    dx,0x340
c0018c2b:	74 ed                	je     c0018c1a <CPU::detectFeatures()+0x82e>
c0018c2d:	66 81 fa c0 03       	cmp    dx,0x3c0
c0018c32:	75 0c                	jne    c0018c40 <CPU::detectFeatures()+0x854>
c0018c34:	56                   	push   esi
c0018c35:	56                   	push   esi
c0018c36:	68 b4 9f 02 c0       	push   0xc0029fb4
c0018c3b:	e9 ff 00 00 00       	jmp    c0018d3f <CPU::detectFeatures()+0x953>
c0018c40:	83 f8 06             	cmp    eax,0x6
c0018c43:	0f 84 45 ff ff ff    	je     c0018b8e <CPU::detectFeatures()+0x7a2>
c0018c49:	83 f8 04             	cmp    eax,0x4
c0018c4c:	0f 84 4d ff ff ff    	je     c0018b9f <CPU::detectFeatures()+0x7b3>
c0018c52:	83 f8 03             	cmp    eax,0x3
c0018c55:	0f 85 72 01 00 00    	jne    c0018dcd <CPU::detectFeatures()+0x9e1>
c0018c5b:	51                   	push   ecx
c0018c5c:	51                   	push   ecx
c0018c5d:	68 bd 9f 02 c0       	push   0xc0029fbd
c0018c62:	53                   	push   ebx
c0018c63:	e8 f0 af ff ff       	call   c0013c58 <Device::setName(char const*)>
c0018c68:	b1 c1                	mov    cl,0xc1
c0018c6a:	88 c8                	mov    al,cl
c0018c6c:	e6 22                	out    0x22,al
c0018c6e:	e4 23                	in     al,0x23
c0018c70:	88 c2                	mov    dl,al
c0018c72:	88 c8                	mov    al,cl
c0018c74:	e6 22                	out    0x22,al
c0018c76:	88 d0                	mov    al,dl
c0018c78:	83 c8 10             	or     eax,0x10
c0018c7b:	e6 23                	out    0x23,al
c0018c7d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0018c84:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0018c87:	89 d0                	mov    eax,edx
c0018c89:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0018c8f:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0018c93:	40                   	inc    eax
c0018c94:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0018c9a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0018c9f:	e9 a1 00 00 00       	jmp    c0018d45 <CPU::detectFeatures()+0x959>
c0018ca4:	83 f8 06             	cmp    eax,0x6
c0018ca7:	0f 84 e1 fe ff ff    	je     c0018b8e <CPU::detectFeatures()+0x7a2>
c0018cad:	83 f8 04             	cmp    eax,0x4
c0018cb0:	0f 84 e9 fe ff ff    	je     c0018b9f <CPU::detectFeatures()+0x7b3>
c0018cb6:	83 f8 03             	cmp    eax,0x3
c0018cb9:	0f 85 0e 01 00 00    	jne    c0018dcd <CPU::detectFeatures()+0x9e1>
c0018cbf:	52                   	push   edx
c0018cc0:	52                   	push   edx
c0018cc1:	68 c8 9f 02 c0       	push   0xc0029fc8
c0018cc6:	eb 77                	jmp    c0018d3f <CPU::detectFeatures()+0x953>
c0018cc8:	83 f8 07             	cmp    eax,0x7
c0018ccb:	75 09                	jne    c0018cd6 <CPU::detectFeatures()+0x8ea>
c0018ccd:	50                   	push   eax
c0018cce:	50                   	push   eax
c0018ccf:	68 d2 9f 02 c0       	push   0xc0029fd2
c0018cd4:	eb 69                	jmp    c0018d3f <CPU::detectFeatures()+0x953>
c0018cd6:	83 f8 0a             	cmp    eax,0xa
c0018cd9:	75 09                	jne    c0018ce4 <CPU::detectFeatures()+0x8f8>
c0018cdb:	50                   	push   eax
c0018cdc:	50                   	push   eax
c0018cdd:	68 dd 9f 02 c0       	push   0xc0029fdd
c0018ce2:	eb 5b                	jmp    c0018d3f <CPU::detectFeatures()+0x953>
c0018ce4:	83 f8 0b             	cmp    eax,0xb
c0018ce7:	75 09                	jne    c0018cf2 <CPU::detectFeatures()+0x906>
c0018ce9:	50                   	push   eax
c0018cea:	50                   	push   eax
c0018ceb:	68 e5 9f 02 c0       	push   0xc0029fe5
c0018cf0:	eb 4d                	jmp    c0018d3f <CPU::detectFeatures()+0x953>
c0018cf2:	83 f8 08             	cmp    eax,0x8
c0018cf5:	75 09                	jne    c0018d00 <CPU::detectFeatures()+0x914>
c0018cf7:	50                   	push   eax
c0018cf8:	50                   	push   eax
c0018cf9:	68 ee 9f 02 c0       	push   0xc0029fee
c0018cfe:	eb 3f                	jmp    c0018d3f <CPU::detectFeatures()+0x953>
c0018d00:	83 f8 09             	cmp    eax,0x9
c0018d03:	75 09                	jne    c0018d0e <CPU::detectFeatures()+0x922>
c0018d05:	50                   	push   eax
c0018d06:	50                   	push   eax
c0018d07:	68 f6 9f 02 c0       	push   0xc0029ff6
c0018d0c:	eb 31                	jmp    c0018d3f <CPU::detectFeatures()+0x953>
c0018d0e:	83 f8 05             	cmp    eax,0x5
c0018d11:	75 09                	jne    c0018d1c <CPU::detectFeatures()+0x930>
c0018d13:	50                   	push   eax
c0018d14:	50                   	push   eax
c0018d15:	68 fe 9f 02 c0       	push   0xc0029ffe
c0018d1a:	eb 23                	jmp    c0018d3f <CPU::detectFeatures()+0x953>
c0018d1c:	83 f8 0c             	cmp    eax,0xc
c0018d1f:	75 09                	jne    c0018d2a <CPU::detectFeatures()+0x93e>
c0018d21:	55                   	push   ebp
c0018d22:	55                   	push   ebp
c0018d23:	68 0c a0 02 c0       	push   0xc002a00c
c0018d28:	eb 15                	jmp    c0018d3f <CPU::detectFeatures()+0x953>
c0018d2a:	83 f8 0d             	cmp    eax,0xd
c0018d2d:	75 09                	jne    c0018d38 <CPU::detectFeatures()+0x94c>
c0018d2f:	57                   	push   edi
c0018d30:	57                   	push   edi
c0018d31:	68 17 a0 02 c0       	push   0xc002a017
c0018d36:	eb 07                	jmp    c0018d3f <CPU::detectFeatures()+0x953>
c0018d38:	56                   	push   esi
c0018d39:	56                   	push   esi
c0018d3a:	68 2b a0 02 c0       	push   0xc002a02b
c0018d3f:	53                   	push   ebx
c0018d40:	e8 13 af ff ff       	call   c0013c58 <Device::setName(char const*)>
c0018d45:	83 c4 10             	add    esp,0x10
c0018d48:	e9 80 00 00 00       	jmp    c0018dcd <CPU::detectFeatures()+0x9e1>
c0018d4d:	51                   	push   ecx
c0018d4e:	51                   	push   ecx
c0018d4f:	68 77 9e 02 c0       	push   0xc0029e77
c0018d54:	57                   	push   edi
c0018d55:	e8 d0 79 fe ff       	call   c000072a <strcpy>
c0018d5a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018d64:	e8 fa 74 fe ff       	call   c0000263 <is486>
c0018d69:	83 c4 10             	add    esp,0x10
c0018d6c:	85 c0                	test   eax,eax
c0018d6e:	74 2b                	je     c0018d9b <CPU::detectFeatures()+0x9af>
c0018d70:	52                   	push   edx
c0018d71:	52                   	push   edx
c0018d72:	68 37 a0 02 c0       	push   0xc002a037
c0018d77:	53                   	push   ebx
c0018d78:	e8 db ae ff ff       	call   c0013c58 <Device::setName(char const*)>
c0018d7d:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018d84:	0f 20 c0             	mov    eax,cr0
c0018d87:	83 e0 14             	and    eax,0x14
c0018d8a:	83 c4 10             	add    esp,0x10
c0018d8d:	83 f8 04             	cmp    eax,0x4
c0018d90:	75 1f                	jne    c0018db1 <CPU::detectFeatures()+0x9c5>
c0018d92:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0018d99:	eb 32                	jmp    c0018dcd <CPU::detectFeatures()+0x9e1>
c0018d9b:	50                   	push   eax
c0018d9c:	50                   	push   eax
c0018d9d:	68 42 a0 02 c0       	push   0xc002a042
c0018da2:	53                   	push   ebx
c0018da3:	e8 b0 ae ff ff       	call   c0013c58 <Device::setName(char const*)>
c0018da8:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0018daf:	eb d3                	jmp    c0018d84 <CPU::detectFeatures()+0x998>
c0018db1:	e8 88 74 fe ff       	call   c000023e <hasLegacyFPU>
c0018db6:	83 e0 01             	and    eax,0x1
c0018db9:	8d 14 00             	lea    edx,[eax+eax*1]
c0018dbc:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018dc2:	83 e0 fd             	and    eax,0xfffffffd
c0018dc5:	09 d0                	or     eax,edx
c0018dc7:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018dcd:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0018dd4:	83 c4 4c             	add    esp,0x4c
c0018dd7:	5b                   	pop    ebx
c0018dd8:	5e                   	pop    esi
c0018dd9:	5f                   	pop    edi
c0018dda:	5d                   	pop    ebp
c0018ddb:	c3                   	ret    

c0018ddc <CPU::setupSMEP()>:
c0018ddc:	0f 20 e0             	mov    eax,cr4
c0018ddf:	0d 00 00 10 00       	or     eax,0x100000
c0018de4:	0f 22 e0             	mov    cr4,eax
c0018de7:	c3                   	ret    

c0018de8 <CPU::setupUMIP()>:
c0018de8:	0f 20 e0             	mov    eax,cr4
c0018deb:	80 cc 08             	or     ah,0x8
c0018dee:	0f 22 e0             	mov    cr4,eax
c0018df1:	c3                   	ret    

c0018df2 <CPU::setupTSC()>:
c0018df2:	0f 20 e0             	mov    eax,cr4
c0018df5:	83 c8 04             	or     eax,0x4
c0018df8:	0f 22 e0             	mov    cr4,eax
c0018dfb:	c3                   	ret    

c0018dfc <CPU::setupLargePages()>:
c0018dfc:	0f 20 e0             	mov    eax,cr4
c0018dff:	83 c8 10             	or     eax,0x10
c0018e02:	0f 22 e0             	mov    cr4,eax
c0018e05:	c3                   	ret    

c0018e06 <CPU::setupPAT()>:
c0018e06:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0018e0b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0018e12:	74 2c                	je     c0018e40 <CPU::setupPAT()+0x3a>
c0018e14:	53                   	push   ebx
c0018e15:	83 ec 10             	sub    esp,0x10
c0018e18:	68 77 02 00 00       	push   0x277
c0018e1d:	50                   	push   eax
c0018e1e:	e8 59 5c ff ff       	call   c000ea7c <Computer::rdmsr(unsigned int)>
c0018e23:	83 e2 f8             	and    edx,0xfffffff8
c0018e26:	83 ca 01             	or     edx,0x1
c0018e29:	52                   	push   edx
c0018e2a:	50                   	push   eax
c0018e2b:	68 77 02 00 00       	push   0x277
c0018e30:	ff 35 48 c8 02 c0    	push   DWORD PTR ds:0xc002c848
c0018e36:	e8 6d 5c ff ff       	call   c000eaa8 <Computer::wrmsr(unsigned int, unsigned long long)>
c0018e3b:	83 c4 28             	add    esp,0x28
c0018e3e:	5b                   	pop    ebx
c0018e3f:	c3                   	ret    
c0018e40:	c3                   	ret    
c0018e41:	90                   	nop

c0018e42 <CPU::setupMTRR()>:
c0018e42:	c3                   	ret    
c0018e43:	90                   	nop

c0018e44 <CPU::setupGlobalPages()>:
c0018e44:	0f 20 e0             	mov    eax,cr4
c0018e47:	0c 80                	or     al,0x80
c0018e49:	0f 22 e0             	mov    cr4,eax
c0018e4c:	c3                   	ret    
c0018e4d:	90                   	nop

c0018e4e <CPU::allowUsermodeDataAccess()>:
c0018e4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e52:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0018e59:	74 03                	je     c0018e5e <CPU::allowUsermodeDataAccess()+0x10>
c0018e5b:	0f 01 cb             	stac   
c0018e5e:	c3                   	ret    
c0018e5f:	90                   	nop

c0018e60 <CPU::prohibitUsermodeDataAccess()>:
c0018e60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e64:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0018e6b:	74 03                	je     c0018e70 <CPU::prohibitUsermodeDataAccess()+0x10>
c0018e6d:	0f 01 ca             	clac   
c0018e70:	c3                   	ret    
c0018e71:	90                   	nop

c0018e72 <CPU::setupSMAP()>:
c0018e72:	0f 20 e0             	mov    eax,cr4
c0018e75:	0d 00 00 20 00       	or     eax,0x200000
c0018e7a:	0f 22 e0             	mov    cr4,eax
c0018e7d:	eb e1                	jmp    c0018e60 <CPU::prohibitUsermodeDataAccess()>
c0018e7f:	90                   	nop

c0018e80 <CPU::setupFeatures()>:
c0018e80:	83 ec 0c             	sub    esp,0xc
c0018e83:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018e87:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0018e8e:	74 07                	je     c0018e97 <CPU::setupFeatures()+0x17>
c0018e90:	52                   	push   edx
c0018e91:	e8 46 ff ff ff       	call   c0018ddc <CPU::setupSMEP()>
c0018e96:	58                   	pop    eax
c0018e97:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0018e9e:	74 07                	je     c0018ea7 <CPU::setupFeatures()+0x27>
c0018ea0:	52                   	push   edx
c0018ea1:	e8 cc ff ff ff       	call   c0018e72 <CPU::setupSMAP()>
c0018ea6:	58                   	pop    eax
c0018ea7:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0018eae:	74 07                	je     c0018eb7 <CPU::setupFeatures()+0x37>
c0018eb0:	52                   	push   edx
c0018eb1:	e8 32 ff ff ff       	call   c0018de8 <CPU::setupUMIP()>
c0018eb6:	58                   	pop    eax
c0018eb7:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0018ebe:	74 07                	je     c0018ec7 <CPU::setupFeatures()+0x47>
c0018ec0:	52                   	push   edx
c0018ec1:	e8 2c ff ff ff       	call   c0018df2 <CPU::setupTSC()>
c0018ec6:	58                   	pop    eax
c0018ec7:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0018ece:	74 07                	je     c0018ed7 <CPU::setupFeatures()+0x57>
c0018ed0:	52                   	push   edx
c0018ed1:	e8 26 ff ff ff       	call   c0018dfc <CPU::setupLargePages()>
c0018ed6:	59                   	pop    ecx
c0018ed7:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0018ede:	74 07                	je     c0018ee7 <CPU::setupFeatures()+0x67>
c0018ee0:	52                   	push   edx
c0018ee1:	e8 5e ff ff ff       	call   c0018e44 <CPU::setupGlobalPages()>
c0018ee6:	58                   	pop    eax
c0018ee7:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0018eee:	74 0c                	je     c0018efc <CPU::setupFeatures()+0x7c>
c0018ef0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0018ef4:	83 c4 0c             	add    esp,0xc
c0018ef7:	e9 0a ff ff ff       	jmp    c0018e06 <CPU::setupPAT()>
c0018efc:	83 c4 0c             	add    esp,0xc
c0018eff:	c3                   	ret    

c0018f00 <CPU::open(int, int, void*)>:
c0018f00:	57                   	push   edi
c0018f01:	56                   	push   esi
c0018f02:	53                   	push   ebx
c0018f03:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018f07:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018f0b:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0018f11:	83 ec 0c             	sub    esp,0xc
c0018f14:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0018f1a:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0018f20:	50                   	push   eax
c0018f21:	e8 42 5e ff ff       	call   c000ed68 <GDT::setup()>
c0018f26:	83 c4 0c             	add    esp,0xc
c0018f29:	6a 00                	push   0x0
c0018f2b:	68 ef be ad de       	push   0xdeadbeef
c0018f30:	57                   	push   edi
c0018f31:	e8 d2 80 ff ff       	call   c0011008 <TSS::setup(unsigned long, unsigned long)>
c0018f36:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018f39:	e8 aa 80 ff ff       	call   c0010fe8 <TSS::flush()>
c0018f3e:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0018f44:	89 04 24             	mov    DWORD PTR [esp],eax
c0018f47:	e8 78 60 ff ff       	call   c000efc4 <IDT::setup()>
c0018f4c:	b8 00 04 00 00       	mov    eax,0x400
c0018f51:	0f 23 f8             	mov    db7,eax
c0018f54:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0018f5e:	e8 4b 6a ff ff       	call   c000f9ae <Phys::allocatePage()>
c0018f63:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0018f69:	89 30                	mov    DWORD PTR [eax],esi
c0018f6b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0018f71:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0018f74:	58                   	pop    eax
c0018f75:	5a                   	pop    edx
c0018f76:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0018f7c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0018f80:	e8 b5 90 ff ff       	call   c001203a <VAS::setCPUSpecific(unsigned long)>
c0018f85:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018f88:	e8 5f f4 ff ff       	call   c00183ec <CPU::detectFeatures()>
c0018f8d:	e8 aa bf ff ff       	call   c0014f3c <setupInterruptController()>
c0018f92:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0018f98:	a1 60 c8 02 c0       	mov    eax,ds:0xc002c860
c0018f9d:	83 e0 10             	and    eax,0x10
c0018fa0:	83 f8 01             	cmp    eax,0x1
c0018fa3:	19 c0                	sbb    eax,eax
c0018fa5:	83 e0 46             	and    eax,0x46
c0018fa8:	83 c0 1e             	add    eax,0x1e
c0018fab:	89 04 24             	mov    DWORD PTR [esp],eax
c0018fae:	e8 41 d4 ff ff       	call   c00163f4 <setupTimer(int)>
c0018fb3:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0018fb9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018fbc:	e8 bf fe ff ff       	call   c0018e80 <CPU::setupFeatures()>
c0018fc1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018fc4:	e8 a7 f1 ff ff       	call   c0018170 <CPU::displayFeatures()>
c0018fc9:	83 c4 10             	add    esp,0x10
c0018fcc:	31 c0                	xor    eax,eax
c0018fce:	5b                   	pop    ebx
c0018fcf:	5e                   	pop    esi
c0018fd0:	5f                   	pop    edi
c0018fd1:	c3                   	ret    

c0018fd2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0018fd2:	57                   	push   edi
c0018fd3:	56                   	push   esi
c0018fd4:	53                   	push   ebx
c0018fd5:	51                   	push   ecx
c0018fd6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018fda:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0018fdd:	0f 02 c0             	lar    eax,ax
c0018fe0:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0018fe3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018fe7:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0018fea:	88 ca                	mov    dl,cl
c0018fec:	c0 ea 06             	shr    dl,0x6
c0018fef:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0018ff3:	89 ca                	mov    edx,ecx
c0018ff5:	66 c1 ea 03          	shr    dx,0x3
c0018ff9:	83 e2 07             	and    edx,0x7
c0018ffc:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019001:	88 17                	mov    BYTE PTR [edi],dl
c0019003:	0f 84 a6 01 00 00    	je     c00191af <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019009:	83 e1 07             	and    ecx,0x7
c001900c:	80 f9 04             	cmp    cl,0x4
c001900f:	0f 84 98 00 00 00    	je     c00190ad <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019015:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001901a:	0f 95 c0             	setne  al
c001901d:	80 f9 05             	cmp    cl,0x5
c0019020:	0f 95 c2             	setne  dl
c0019023:	08 c2                	or     dl,al
c0019025:	74 79                	je     c00190a0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019027:	84 c9                	test   cl,cl
c0019029:	75 05                	jne    c0019030 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c001902b:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001902e:	eb 3c                	jmp    c001906c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019030:	80 f9 01             	cmp    cl,0x1
c0019033:	75 05                	jne    c001903a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019035:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019038:	eb 32                	jmp    c001906c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001903a:	80 f9 02             	cmp    cl,0x2
c001903d:	75 05                	jne    c0019044 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c001903f:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019042:	eb 28                	jmp    c001906c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019044:	31 c0                	xor    eax,eax
c0019046:	80 f9 03             	cmp    cl,0x3
c0019049:	75 05                	jne    c0019050 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c001904b:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001904e:	eb 1c                	jmp    c001906c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019050:	80 f9 05             	cmp    cl,0x5
c0019053:	75 05                	jne    c001905a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019055:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019058:	eb 12                	jmp    c001906c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001905a:	80 f9 06             	cmp    cl,0x6
c001905d:	75 05                	jne    c0019064 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c001905f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019062:	eb 08                	jmp    c001906c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019064:	80 f9 07             	cmp    cl,0x7
c0019067:	75 03                	jne    c001906c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019069:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001906c:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019071:	75 10                	jne    c0019083 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019073:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019077:	b9 03 00 00 00       	mov    ecx,0x3
c001907c:	01 d0                	add    eax,edx
c001907e:	e9 37 01 00 00       	jmp    c00191ba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019083:	b9 02 00 00 00       	mov    ecx,0x2
c0019088:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c001908d:	0f 85 27 01 00 00    	jne    c00191ba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019093:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019096:	b9 06 00 00 00       	mov    ecx,0x6
c001909b:	e9 1a 01 00 00       	jmp    c00191ba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00190a0:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00190a3:	b9 06 00 00 00       	mov    ecx,0x6
c00190a8:	e9 0f 01 00 00       	jmp    c00191bc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00190ad:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00190b0:	88 ca                	mov    dl,cl
c00190b2:	c0 ea 06             	shr    dl,0x6
c00190b5:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c00190b9:	89 ca                	mov    edx,ecx
c00190bb:	66 c1 ea 03          	shr    dx,0x3
c00190bf:	83 e2 07             	and    edx,0x7
c00190c2:	80 e1 07             	and    cl,0x7
c00190c5:	75 05                	jne    c00190cc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c00190c7:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c00190ca:	eb 4c                	jmp    c0019118 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00190cc:	80 f9 01             	cmp    cl,0x1
c00190cf:	75 05                	jne    c00190d6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c00190d1:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00190d4:	eb 42                	jmp    c0019118 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00190d6:	80 f9 02             	cmp    cl,0x2
c00190d9:	75 05                	jne    c00190e0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c00190db:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00190de:	eb 38                	jmp    c0019118 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00190e0:	80 f9 03             	cmp    cl,0x3
c00190e3:	75 05                	jne    c00190ea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c00190e5:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c00190e8:	eb 2e                	jmp    c0019118 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00190ea:	80 f9 04             	cmp    cl,0x4
c00190ed:	75 12                	jne    c0019101 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c00190ef:	f6 c4 60             	test   ah,0x60
c00190f2:	75 08                	jne    c00190fc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c00190f4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00190f7:	8d 78 14             	lea    edi,[eax+0x14]
c00190fa:	eb 1c                	jmp    c0019118 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00190fc:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c00190ff:	eb 17                	jmp    c0019118 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019101:	80 f9 05             	cmp    cl,0x5
c0019104:	75 05                	jne    c001910b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019106:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019109:	eb 0d                	jmp    c0019118 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001910b:	80 f9 06             	cmp    cl,0x6
c001910e:	75 05                	jne    c0019115 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019110:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019113:	eb 03                	jmp    c0019118 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019115:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019118:	84 d2                	test   dl,dl
c001911a:	75 05                	jne    c0019121 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c001911c:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001911f:	eb 3c                	jmp    c001915d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019121:	80 fa 01             	cmp    dl,0x1
c0019124:	75 05                	jne    c001912b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019126:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019129:	eb 32                	jmp    c001915d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001912b:	80 fa 02             	cmp    dl,0x2
c001912e:	75 05                	jne    c0019135 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019130:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019133:	eb 28                	jmp    c001915d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019135:	80 fa 03             	cmp    dl,0x3
c0019138:	75 05                	jne    c001913f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c001913a:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001913d:	eb 1e                	jmp    c001915d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001913f:	31 c0                	xor    eax,eax
c0019141:	80 fa 04             	cmp    dl,0x4
c0019144:	74 17                	je     c001915d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019146:	80 fa 05             	cmp    dl,0x5
c0019149:	75 05                	jne    c0019150 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c001914b:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001914e:	eb 0d                	jmp    c001915d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019150:	80 fa 06             	cmp    dl,0x6
c0019153:	75 05                	jne    c001915a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019155:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019158:	eb 03                	jmp    c001915d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001915a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001915d:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019162:	0f 94 c2             	sete   dl
c0019165:	80 f9 05             	cmp    cl,0x5
c0019168:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c001916c:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019171:	d3 e0                	shl    eax,cl
c0019173:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019177:	74 0a                	je     c0019183 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019179:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001917c:	b9 07 00 00 00       	mov    ecx,0x7
c0019181:	eb 37                	jmp    c00191ba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019183:	01 f8                	add    eax,edi
c0019185:	b9 03 00 00 00       	mov    ecx,0x3
c001918a:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001918f:	74 2b                	je     c00191bc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019191:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019196:	75 0d                	jne    c00191a5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019198:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c001919c:	01 c8                	add    eax,ecx
c001919e:	b9 04 00 00 00       	mov    ecx,0x4
c00191a3:	eb 17                	jmp    c00191bc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00191a5:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00191a8:	b9 07 00 00 00       	mov    ecx,0x7
c00191ad:	eb 0d                	jmp    c00191bc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00191af:	b9 02 00 00 00       	mov    ecx,0x2
c00191b4:	b2 01                	mov    dl,0x1
c00191b6:	31 c0                	xor    eax,eax
c00191b8:	eb 02                	jmp    c00191bc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00191ba:	31 d2                	xor    edx,edx
c00191bc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00191c0:	89 0b                	mov    DWORD PTR [ebx],ecx
c00191c2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00191c6:	88 11                	mov    BYTE PTR [ecx],dl
c00191c8:	5a                   	pop    edx
c00191c9:	5b                   	pop    ebx
c00191ca:	5e                   	pop    esi
c00191cb:	5f                   	pop    edi
c00191cc:	c3                   	ret    
c00191cd:	90                   	nop

c00191ce <EnvVarContainer::getEnv(char const*)>:
c00191ce:	57                   	push   edi
c00191cf:	56                   	push   esi
c00191d0:	53                   	push   ebx
c00191d1:	31 db                	xor    ebx,ebx
c00191d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00191d7:	39 1e                	cmp    DWORD PTR [esi],ebx
c00191d9:	7e 2b                	jle    c0019206 <EnvVarContainer::getEnv(char const*)+0x38>
c00191db:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c00191e2:	50                   	push   eax
c00191e3:	50                   	push   eax
c00191e4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00191e7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c00191ea:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00191ee:	e8 88 75 fe ff       	call   c000077b <strcmp>
c00191f3:	83 c4 10             	add    esp,0x10
c00191f6:	85 c0                	test   eax,eax
c00191f8:	75 09                	jne    c0019203 <EnvVarContainer::getEnv(char const*)+0x35>
c00191fa:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00191fd:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019201:	eb 05                	jmp    c0019208 <EnvVarContainer::getEnv(char const*)+0x3a>
c0019203:	43                   	inc    ebx
c0019204:	eb d1                	jmp    c00191d7 <EnvVarContainer::getEnv(char const*)+0x9>
c0019206:	31 c0                	xor    eax,eax
c0019208:	5b                   	pop    ebx
c0019209:	5e                   	pop    esi
c001920a:	5f                   	pop    edi
c001920b:	c3                   	ret    

c001920c <EnvVarContainer::setEnv(char const*, char const*)>:
c001920c:	57                   	push   edi
c001920d:	56                   	push   esi
c001920e:	53                   	push   ebx
c001920f:	83 ec 1c             	sub    esp,0x1c
c0019212:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019216:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001921a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001921e:	57                   	push   edi
c001921f:	e8 84 74 fe ff       	call   c00006a8 <strlen>
c0019224:	40                   	inc    eax
c0019225:	89 04 24             	mov    DWORD PTR [esp],eax
c0019228:	e8 a7 62 ff ff       	call   c000f4d4 <malloc>
c001922d:	89 34 24             	mov    DWORD PTR [esp],esi
c0019230:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019234:	e8 6f 74 fe ff       	call   c00006a8 <strlen>
c0019239:	40                   	inc    eax
c001923a:	89 04 24             	mov    DWORD PTR [esp],eax
c001923d:	e8 92 62 ff ff       	call   c000f4d4 <malloc>
c0019242:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019245:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019249:	e8 5a 74 fe ff       	call   c00006a8 <strlen>
c001924e:	83 c4 0c             	add    esp,0xc
c0019251:	40                   	inc    eax
c0019252:	50                   	push   eax
c0019253:	6a 00                	push   0x0
c0019255:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019259:	e8 2d 74 fe ff       	call   c000068b <memset>
c001925e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019261:	e8 42 74 fe ff       	call   c00006a8 <strlen>
c0019266:	83 c4 0c             	add    esp,0xc
c0019269:	40                   	inc    eax
c001926a:	50                   	push   eax
c001926b:	57                   	push   edi
c001926c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019270:	e8 e0 73 fe ff       	call   c0000655 <memcpy>
c0019275:	89 34 24             	mov    DWORD PTR [esp],esi
c0019278:	e8 2b 74 fe ff       	call   c00006a8 <strlen>
c001927d:	83 c4 0c             	add    esp,0xc
c0019280:	40                   	inc    eax
c0019281:	50                   	push   eax
c0019282:	6a 00                	push   0x0
c0019284:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019288:	e8 fe 73 fe ff       	call   c000068b <memset>
c001928d:	89 34 24             	mov    DWORD PTR [esp],esi
c0019290:	e8 13 74 fe ff       	call   c00006a8 <strlen>
c0019295:	83 c4 0c             	add    esp,0xc
c0019298:	40                   	inc    eax
c0019299:	50                   	push   eax
c001929a:	56                   	push   esi
c001929b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001929f:	e8 b1 73 fe ff       	call   c0000655 <memcpy>
c00192a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00192a6:	40                   	inc    eax
c00192a7:	89 03                	mov    DWORD PTR [ebx],eax
c00192a9:	c1 e0 03             	shl    eax,0x3
c00192ac:	5a                   	pop    edx
c00192ad:	59                   	pop    ecx
c00192ae:	50                   	push   eax
c00192af:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00192b2:	e8 09 62 ff ff       	call   c000f4c0 <realloc>
c00192b7:	83 c4 0c             	add    esp,0xc
c00192ba:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00192bd:	6a 08                	push   0x8
c00192bf:	8d 54 24 10          	lea    edx,[esp+0x10]
c00192c3:	52                   	push   edx
c00192c4:	8b 13                	mov    edx,DWORD PTR [ebx]
c00192c6:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c00192ca:	50                   	push   eax
c00192cb:	e8 85 73 fe ff       	call   c0000655 <memcpy>
c00192d0:	83 c4 20             	add    esp,0x20
c00192d3:	5b                   	pop    ebx
c00192d4:	5e                   	pop    esi
c00192d5:	5f                   	pop    edi
c00192d6:	c3                   	ret    
c00192d7:	90                   	nop

c00192d8 <EnvVarContainer::deleteEnv(char const*)>:
c00192d8:	c3                   	ret    
c00192d9:	90                   	nop

c00192da <EnvVarContainer::loadFrom(char const*, char const*)>:
c00192da:	55                   	push   ebp
c00192db:	57                   	push   edi
c00192dc:	56                   	push   esi
c00192dd:	53                   	push   ebx
c00192de:	81 ec 38 01 00 00    	sub    esp,0x138
c00192e4:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c00192eb:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c00192f2:	68 14 01 00 00       	push   0x114
c00192f7:	e8 d8 61 ff ff       	call   c000f4d4 <malloc>
c00192fc:	83 c4 0c             	add    esp,0xc
c00192ff:	89 c7                	mov    edi,eax
c0019301:	ff 76 08             	push   DWORD PTR [esi+0x8]
c0019304:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001930b:	50                   	push   eax
c001930c:	e8 a5 98 ff ff       	call   c0012bb6 <File::File(char const*, Process*)>
c0019311:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019314:	e8 6f 9b ff ff       	call   c0012e88 <File::exists()>
c0019319:	83 c4 10             	add    esp,0x10
c001931c:	84 c0                	test   al,al
c001931e:	75 31                	jne    c0019351 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0019320:	51                   	push   ecx
c0019321:	51                   	push   ecx
c0019322:	6a 12                	push   0x12
c0019324:	57                   	push   edi
c0019325:	e8 f0 98 ff ff       	call   c0012c1a <File::open(FileOpenMode)>
c001932a:	8b 07                	mov    eax,DWORD PTR [edi]
c001932c:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001932f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019332:	e8 71 73 fe ff       	call   c00006a8 <strlen>
c0019337:	5a                   	pop    edx
c0019338:	31 d2                	xor    edx,edx
c001933a:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001933e:	51                   	push   ecx
c001933f:	55                   	push   ebp
c0019340:	52                   	push   edx
c0019341:	50                   	push   eax
c0019342:	57                   	push   edi
c0019343:	ff d3                	call   ebx
c0019345:	83 c4 14             	add    esp,0x14
c0019348:	57                   	push   edi
c0019349:	e8 2a 99 ff ff       	call   c0012c78 <File::close()>
c001934e:	83 c4 10             	add    esp,0x10
c0019351:	31 db                	xor    ebx,ebx
c0019353:	50                   	push   eax
c0019354:	31 ed                	xor    ebp,ebp
c0019356:	68 00 01 00 00       	push   0x100
c001935b:	6a 00                	push   0x0
c001935d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019361:	50                   	push   eax
c0019362:	e8 24 73 fe ff       	call   c000068b <memset>
c0019367:	58                   	pop    eax
c0019368:	5a                   	pop    edx
c0019369:	6a 01                	push   0x1
c001936b:	57                   	push   edi
c001936c:	e8 a9 98 ff ff       	call   c0012c1a <File::open(FileOpenMode)>
c0019371:	83 c4 10             	add    esp,0x10
c0019374:	83 ec 0c             	sub    esp,0xc
c0019377:	8b 07                	mov    eax,DWORD PTR [edi]
c0019379:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001937d:	51                   	push   ecx
c001937e:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019382:	52                   	push   edx
c0019383:	6a 00                	push   0x0
c0019385:	6a 01                	push   0x1
c0019387:	57                   	push   edi
c0019388:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001938b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001938f:	83 c4 20             	add    esp,0x20
c0019392:	3c 0d                	cmp    al,0xd
c0019394:	0f 84 12 01 00 00    	je     c00194ac <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001939a:	85 db                	test   ebx,ebx
c001939c:	0f 84 fd 00 00 00    	je     c001949f <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c00193a2:	3c 0a                	cmp    al,0xa
c00193a4:	74 13                	je     c00193b9 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c00193a6:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00193ab:	74 0c                	je     c00193b9 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c00193ad:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c00193b3:	0f 8e e6 00 00 00    	jle    c001949f <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c00193b9:	83 ec 0c             	sub    esp,0xc
c00193bc:	8d 53 01             	lea    edx,[ebx+0x1]
c00193bf:	29 dd                	sub    ebp,ebx
c00193c1:	52                   	push   edx
c00193c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00193c6:	e8 09 61 ff ff       	call   c000f4d4 <malloc>
c00193cb:	8d 4d 04             	lea    ecx,[ebp+0x4]
c00193ce:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00193d2:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00193d5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00193d9:	e8 f6 60 ff ff       	call   c000f4d4 <malloc>
c00193de:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00193e2:	83 c4 0c             	add    esp,0xc
c00193e5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00193e9:	52                   	push   edx
c00193ea:	6a 00                	push   0x0
c00193ec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00193f0:	e8 96 72 fe ff       	call   c000068b <memset>
c00193f5:	83 c4 0c             	add    esp,0xc
c00193f8:	53                   	push   ebx
c00193f9:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00193fd:	55                   	push   ebp
c00193fe:	01 eb                	add    ebx,ebp
c0019400:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019404:	e8 4c 72 fe ff       	call   c0000655 <memcpy>
c0019409:	83 c4 0c             	add    esp,0xc
c001940c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019410:	51                   	push   ecx
c0019411:	6a 00                	push   0x0
c0019413:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019417:	e8 6f 72 fe ff       	call   c000068b <memset>
c001941c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001941f:	e8 84 72 fe ff       	call   c00006a8 <strlen>
c0019424:	83 c4 0c             	add    esp,0xc
c0019427:	50                   	push   eax
c0019428:	53                   	push   ebx
c0019429:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001942d:	e8 23 72 fe ff       	call   c0000655 <memcpy>
c0019432:	5b                   	pop    ebx
c0019433:	58                   	pop    eax
c0019434:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019438:	68 7c a0 02 c0       	push   0xc002a07c
c001943d:	e8 45 92 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0019442:	8b 06                	mov    eax,DWORD PTR [esi]
c0019444:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0019447:	40                   	inc    eax
c0019448:	83 c4 10             	add    esp,0x10
c001944b:	89 06                	mov    DWORD PTR [esi],eax
c001944d:	85 d2                	test   edx,edx
c001944f:	75 0c                	jne    c001945d <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c0019451:	83 ec 0c             	sub    esp,0xc
c0019454:	6a 08                	push   0x8
c0019456:	e8 79 60 ff ff       	call   c000f4d4 <malloc>
c001945b:	eb 0c                	jmp    c0019469 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001945d:	c1 e0 03             	shl    eax,0x3
c0019460:	51                   	push   ecx
c0019461:	51                   	push   ecx
c0019462:	50                   	push   eax
c0019463:	52                   	push   edx
c0019464:	e8 57 60 ff ff       	call   c000f4c0 <realloc>
c0019469:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001946c:	83 c4 10             	add    esp,0x10
c001946f:	31 db                	xor    ebx,ebx
c0019471:	52                   	push   edx
c0019472:	6a 08                	push   0x8
c0019474:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019478:	50                   	push   eax
c0019479:	8b 16                	mov    edx,DWORD PTR [esi]
c001947b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001947e:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c0019482:	50                   	push   eax
c0019483:	e8 cd 71 fe ff       	call   c0000655 <memcpy>
c0019488:	83 c4 0c             	add    esp,0xc
c001948b:	68 00 01 00 00       	push   0x100
c0019490:	6a 00                	push   0x0
c0019492:	55                   	push   ebp
c0019493:	31 ed                	xor    ebp,ebp
c0019495:	e8 f1 71 fe ff       	call   c000068b <memset>
c001949a:	83 c4 10             	add    esp,0x10
c001949d:	eb 0d                	jmp    c00194ac <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001949f:	3c 3d                	cmp    al,0x3d
c00194a1:	74 07                	je     c00194aa <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c00194a3:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c00194a7:	45                   	inc    ebp
c00194a8:	eb 02                	jmp    c00194ac <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c00194aa:	89 eb                	mov    ebx,ebp
c00194ac:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00194b1:	0f 85 bd fe ff ff    	jne    c0019374 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c00194b7:	50                   	push   eax
c00194b8:	50                   	push   eax
c00194b9:	ff 36                	push   DWORD PTR [esi]
c00194bb:	68 8a a0 02 c0       	push   0xc002a08a
c00194c0:	e8 c2 91 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c00194c5:	81 c4 3c 01 00 00    	add    esp,0x13c
c00194cb:	5b                   	pop    ebx
c00194cc:	5e                   	pop    esi
c00194cd:	5f                   	pop    edi
c00194ce:	5d                   	pop    ebp
c00194cf:	c3                   	ret    

c00194d0 <EnvVarContainer::__loadSystem()>:
c00194d0:	83 ec 10             	sub    esp,0x10
c00194d3:	68 80 bd 02 c0       	push   0xc002bd80
c00194d8:	68 b5 a0 02 c0       	push   0xc002a0b5
c00194dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00194e1:	e8 f4 fd ff ff       	call   c00192da <EnvVarContainer::loadFrom(char const*, char const*)>
c00194e6:	83 c4 1c             	add    esp,0x1c
c00194e9:	c3                   	ret    

c00194ea <EnvVarContainer::__loadUser()>:
c00194ea:	c3                   	ret    
c00194eb:	90                   	nop

c00194ec <EnvVarContainer::EnvVarContainer(Process*)>:
c00194ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00194f0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00194f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00194fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00194fe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019501:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019505:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001950c:	90                   	nop
c001950d:	c3                   	ret    

c001950e <EnvVarContainer::~EnvVarContainer()>:
c001950e:	83 ec 0c             	sub    esp,0xc
c0019511:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019515:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019518:	85 c0                	test   eax,eax
c001951a:	74 1d                	je     c0019539 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001951c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019520:	8b 00                	mov    eax,DWORD PTR [eax]
c0019522:	85 c0                	test   eax,eax
c0019524:	74 13                	je     c0019539 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019526:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001952a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001952d:	83 ec 0c             	sub    esp,0xc
c0019530:	50                   	push   eax
c0019531:	e8 ae 5f ff ff       	call   c000f4e4 <free>
c0019536:	83 c4 10             	add    esp,0x10
c0019539:	90                   	nop
c001953a:	83 c4 0c             	add    esp,0xc
c001953d:	c3                   	ret    

c001953e <Krnl::getEnv(Process*, char const*)>:
c001953e:	53                   	push   ebx
c001953f:	83 ec 08             	sub    esp,0x8
c0019542:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019546:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001954a:	39 05 94 dd 02 c0    	cmp    DWORD PTR ds:0xc002dd94,eax
c0019550:	74 04                	je     c0019556 <Krnl::getEnv(Process*, char const*)+0x18>
c0019552:	85 c0                	test   eax,eax
c0019554:	75 0b                	jne    c0019561 <Krnl::getEnv(Process*, char const*)+0x23>
c0019556:	a1 70 d3 02 c0       	mov    eax,ds:0xc002d370
c001955b:	85 c0                	test   eax,eax
c001955d:	75 19                	jne    c0019578 <Krnl::getEnv(Process*, char const*)+0x3a>
c001955f:	eb 27                	jmp    c0019588 <Krnl::getEnv(Process*, char const*)+0x4a>
c0019561:	52                   	push   edx
c0019562:	52                   	push   edx
c0019563:	53                   	push   ebx
c0019564:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001956a:	e8 5f fc ff ff       	call   c00191ce <EnvVarContainer::getEnv(char const*)>
c001956f:	83 c4 10             	add    esp,0x10
c0019572:	85 c0                	test   eax,eax
c0019574:	75 28                	jne    c001959e <Krnl::getEnv(Process*, char const*)+0x60>
c0019576:	eb de                	jmp    c0019556 <Krnl::getEnv(Process*, char const*)+0x18>
c0019578:	52                   	push   edx
c0019579:	52                   	push   edx
c001957a:	53                   	push   ebx
c001957b:	50                   	push   eax
c001957c:	e8 4d fc ff ff       	call   c00191ce <EnvVarContainer::getEnv(char const*)>
c0019581:	83 c4 10             	add    esp,0x10
c0019584:	85 c0                	test   eax,eax
c0019586:	75 16                	jne    c001959e <Krnl::getEnv(Process*, char const*)+0x60>
c0019588:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001958c:	a1 74 d3 02 c0       	mov    eax,ds:0xc002d374
c0019591:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019595:	83 c4 08             	add    esp,0x8
c0019598:	5b                   	pop    ebx
c0019599:	e9 30 fc ff ff       	jmp    c00191ce <EnvVarContainer::getEnv(char const*)>
c001959e:	83 c4 08             	add    esp,0x8
c00195a1:	5b                   	pop    ebx
c00195a2:	c3                   	ret    

c00195a3 <Krnl::setEnvSystem(char const*, char const*)>:
c00195a3:	83 ec 10             	sub    esp,0x10
c00195a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00195aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00195ae:	ff 35 74 d3 02 c0    	push   DWORD PTR ds:0xc002d374
c00195b4:	e8 53 fc ff ff       	call   c001920c <EnvVarContainer::setEnv(char const*, char const*)>
c00195b9:	83 c4 1c             	add    esp,0x1c
c00195bc:	c3                   	ret    

c00195bd <Krnl::setEnvUser(char const*, char const*)>:
c00195bd:	a1 70 d3 02 c0       	mov    eax,ds:0xc002d370
c00195c2:	85 c0                	test   eax,eax
c00195c4:	74 15                	je     c00195db <Krnl::setEnvUser(char const*, char const*)+0x1e>
c00195c6:	83 ec 10             	sub    esp,0x10
c00195c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00195cd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00195d1:	50                   	push   eax
c00195d2:	e8 35 fc ff ff       	call   c001920c <EnvVarContainer::setEnv(char const*, char const*)>
c00195d7:	83 c4 1c             	add    esp,0x1c
c00195da:	c3                   	ret    
c00195db:	c3                   	ret    

c00195dc <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c00195dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00195e0:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c00195e6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00195ea:	e9 1d fc ff ff       	jmp    c001920c <EnvVarContainer::setEnv(char const*, char const*)>

c00195ef <Krnl::deleteEnvSystem(char const*)>:
c00195ef:	c3                   	ret    

c00195f0 <Krnl::deleteEnvUser(char const*)>:
c00195f0:	c3                   	ret    

c00195f1 <Krnl::deleteEnvProcess(Process*, char const*)>:
c00195f1:	c3                   	ret    

c00195f2 <Krnl::newProcessEnv(Process*)>:
c00195f2:	83 ec 28             	sub    esp,0x28
c00195f5:	6a 0c                	push   0xc
c00195f7:	e8 d8 5e ff ff       	call   c000f4d4 <malloc>
c00195fc:	5a                   	pop    edx
c00195fd:	59                   	pop    ecx
c00195fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019602:	50                   	push   eax
c0019603:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019607:	e8 e0 fe ff ff       	call   c00194ec <EnvVarContainer::EnvVarContainer(Process*)>
c001960c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019610:	83 c4 2c             	add    esp,0x2c
c0019613:	c3                   	ret    

c0019614 <Krnl::copyProcessEnv(Process*, Process*)>:
c0019614:	56                   	push   esi
c0019615:	53                   	push   ebx
c0019616:	83 ec 10             	sub    esp,0x10
c0019619:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001961d:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c0019623:	6a 0c                	push   0xc
c0019625:	e8 aa 5e ff ff       	call   c000f4d4 <malloc>
c001962a:	89 c3                	mov    ebx,eax
c001962c:	58                   	pop    eax
c001962d:	5a                   	pop    edx
c001962e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019632:	53                   	push   ebx
c0019633:	e8 b4 fe ff ff       	call   c00194ec <EnvVarContainer::EnvVarContainer(Process*)>
c0019638:	8b 06                	mov    eax,DWORD PTR [esi]
c001963a:	89 03                	mov    DWORD PTR [ebx],eax
c001963c:	c1 e0 03             	shl    eax,0x3
c001963f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019642:	e8 8d 5e ff ff       	call   c000f4d4 <malloc>
c0019647:	83 c4 0c             	add    esp,0xc
c001964a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001964d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001964f:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c0019656:	52                   	push   edx
c0019657:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001965a:	50                   	push   eax
c001965b:	e8 f5 6f fe ff       	call   c0000655 <memcpy>
c0019660:	89 d8                	mov    eax,ebx
c0019662:	83 c4 14             	add    esp,0x14
c0019665:	5b                   	pop    ebx
c0019666:	5e                   	pop    esi
c0019667:	c3                   	ret    

c0019668 <Krnl::loadSystemEnv()>:
c0019668:	53                   	push   ebx
c0019669:	83 ec 14             	sub    esp,0x14
c001966c:	6a 0c                	push   0xc
c001966e:	e8 61 5e ff ff       	call   c000f4d4 <malloc>
c0019673:	89 c3                	mov    ebx,eax
c0019675:	58                   	pop    eax
c0019676:	5a                   	pop    edx
c0019677:	ff 35 94 dd 02 c0    	push   DWORD PTR ds:0xc002dd94
c001967d:	53                   	push   ebx
c001967e:	e8 69 fe ff ff       	call   c00194ec <EnvVarContainer::EnvVarContainer(Process*)>
c0019683:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019686:	89 1d 74 d3 02 c0    	mov    DWORD PTR ds:0xc002d374,ebx
c001968c:	e8 3f fe ff ff       	call   c00194d0 <EnvVarContainer::__loadSystem()>
c0019691:	83 c4 18             	add    esp,0x18
c0019694:	5b                   	pop    ebx
c0019695:	c3                   	ret    

c0019696 <Krnl::loadUserEnv()>:
c0019696:	53                   	push   ebx
c0019697:	83 ec 14             	sub    esp,0x14
c001969a:	6a 0c                	push   0xc
c001969c:	e8 33 5e ff ff       	call   c000f4d4 <malloc>
c00196a1:	89 c3                	mov    ebx,eax
c00196a3:	58                   	pop    eax
c00196a4:	5a                   	pop    edx
c00196a5:	ff 35 94 dd 02 c0    	push   DWORD PTR ds:0xc002dd94
c00196ab:	53                   	push   ebx
c00196ac:	e8 3b fe ff ff       	call   c00194ec <EnvVarContainer::EnvVarContainer(Process*)>
c00196b1:	89 1d 70 d3 02 c0    	mov    DWORD PTR ds:0xc002d370,ebx
c00196b7:	83 c4 18             	add    esp,0x18
c00196ba:	5b                   	pop    ebx
c00196bb:	c3                   	ret    

c00196bc <Krnl::flushEnv()>:
c00196bc:	c3                   	ret    

c00196bd <Krnl::getProcessTotalEnvCount(Process*)>:
c00196bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00196c1:	8b 15 70 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d370
c00196c7:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c00196cd:	a1 74 d3 02 c0       	mov    eax,ds:0xc002d374
c00196d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00196d4:	03 01                	add    eax,DWORD PTR [ecx]
c00196d6:	85 d2                	test   edx,edx
c00196d8:	74 02                	je     c00196dc <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c00196da:	03 02                	add    eax,DWORD PTR [edx]
c00196dc:	c3                   	ret    

c00196dd <Krnl::getProcessEnvPair(Process*, int)>:
c00196dd:	57                   	push   edi
c00196de:	8b 0d 70 d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d370
c00196e4:	56                   	push   esi
c00196e5:	85 c9                	test   ecx,ecx
c00196e7:	53                   	push   ebx
c00196e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00196ec:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00196f0:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c00196f6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00196fa:	8b 02                	mov    eax,DWORD PTR [edx]
c00196fc:	75 47                	jne    c0019745 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c00196fe:	39 c3                	cmp    ebx,eax
c0019700:	7c 47                	jl     c0019749 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c0019702:	8b 15 74 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d374
c0019708:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001970a:	01 c1                	add    ecx,eax
c001970c:	39 d9                	cmp    ecx,ebx
c001970e:	7e 6c                	jle    c001977c <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c0019710:	51                   	push   ecx
c0019711:	89 d9                	mov    ecx,ebx
c0019713:	29 c1                	sub    ecx,eax
c0019715:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019718:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001971c:	53                   	push   ebx
c001971d:	68 d7 a0 02 c0       	push   0xc002a0d7
c0019722:	e8 60 8f ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0019727:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001972d:	2b 18                	sub    ebx,DWORD PTR [eax]
c001972f:	a1 74 d3 02 c0       	mov    eax,ds:0xc002d374
c0019734:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019737:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001973b:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001973e:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0019741:	89 06                	mov    DWORD PTR [esi],eax
c0019743:	eb 51                	jmp    c0019796 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c0019745:	39 c3                	cmp    ebx,eax
c0019747:	7d 05                	jge    c001974e <Krnl::getProcessEnvPair(Process*, int)+0x71>
c0019749:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001974c:	eb 20                	jmp    c001976e <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001974e:	8b 39                	mov    edi,DWORD PTR [ecx]
c0019750:	8d 14 07             	lea    edx,[edi+eax*1]
c0019753:	39 da                	cmp    edx,ebx
c0019755:	7e 04                	jle    c001975b <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c0019757:	29 c3                	sub    ebx,eax
c0019759:	eb 10                	jmp    c001976b <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001975b:	8b 0d 74 d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d374
c0019761:	03 11                	add    edx,DWORD PTR [ecx]
c0019763:	39 da                	cmp    edx,ebx
c0019765:	7e 15                	jle    c001977c <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c0019767:	29 c3                	sub    ebx,eax
c0019769:	29 fb                	sub    ebx,edi
c001976b:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001976e:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c0019772:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0019775:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0019778:	89 06                	mov    DWORD PTR [esi],eax
c001977a:	eb 1d                	jmp    c0019799 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001977c:	83 ec 0c             	sub    esp,0xc
c001977f:	68 eb a0 02 c0       	push   0xc002a0eb
c0019784:	e8 18 00 00 00       	call   c00197a1 <Krnl::panic(char const*)>
c0019789:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001978f:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0019796:	83 c4 10             	add    esp,0x10
c0019799:	89 f0                	mov    eax,esi
c001979b:	5b                   	pop    ebx
c001979c:	5e                   	pop    esi
c001979d:	5f                   	pop    edi
c001979e:	c2 04 00             	ret    0x4

c00197a1 <Krnl::panic(char const*)>:
c00197a1:	55                   	push   ebp
c00197a2:	89 e5                	mov    ebp,esp
c00197a4:	53                   	push   ebx
c00197a5:	50                   	push   eax
c00197a6:	a1 7c d3 02 c0       	mov    eax,ds:0xc002d37c
c00197ab:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00197ae:	85 c0                	test   eax,eax
c00197b0:	74 02                	je     c00197b4 <Krnl::panic(char const*)+0x13>
c00197b2:	ff d0                	call   eax
c00197b4:	fa                   	cli    
c00197b5:	c6 05 80 d3 02 c0 01 	mov    BYTE PTR ds:0xc002d380,0x1
c00197bc:	83 ec 08             	sub    esp,0x8
c00197bf:	c6 05 84 b7 02 c0 00 	mov    BYTE PTR ds:0xc002b784,0x0
c00197c6:	53                   	push   ebx
c00197c7:	68 05 a1 02 c0       	push   0xc002a105
c00197cc:	e8 b6 8e ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c00197d1:	58                   	pop    eax
c00197d2:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00197d7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00197dd:	e8 67 70 ff ff       	call   c0010849 <setActiveTerminal(VgaText*)>
c00197e2:	83 c4 0c             	add    esp,0xc
c00197e5:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00197ea:	6a 01                	push   0x1
c00197ec:	6a 0f                	push   0xf
c00197ee:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00197f4:	e8 d9 69 ff ff       	call   c00101d2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00197f9:	5a                   	pop    edx
c00197fa:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00197ff:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019805:	e8 e0 72 ff ff       	call   c0010aea <VgaText::clearScreen()>
c001980a:	59                   	pop    ecx
c001980b:	58                   	pop    eax
c001980c:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c0019811:	68 1e a1 02 c0       	push   0xc002a11e
c0019816:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001981c:	e8 47 74 ff ff       	call   c0010c68 <VgaText::puts(char const*)>
c0019821:	58                   	pop    eax
c0019822:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c0019827:	5a                   	pop    edx
c0019828:	68 c4 a1 02 c0       	push   0xc002a1c4
c001982d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019833:	e8 30 74 ff ff       	call   c0010c68 <VgaText::puts(char const*)>
c0019838:	59                   	pop    ecx
c0019839:	58                   	pop    eax
c001983a:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c001983f:	68 3a a1 02 c0       	push   0xc002a13a
c0019844:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001984a:	e8 19 74 ff ff       	call   c0010c68 <VgaText::puts(char const*)>
c001984f:	58                   	pop    eax
c0019850:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c0019855:	5a                   	pop    edx
c0019856:	53                   	push   ebx
c0019857:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001985d:	e8 06 74 ff ff       	call   c0010c68 <VgaText::puts(char const*)>
c0019862:	59                   	pop    ecx
c0019863:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c0019868:	5b                   	pop    ebx
c0019869:	68 5a a1 02 c0       	push   0xc002a15a
c001986e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019874:	e8 ef 73 ff ff       	call   c0010c68 <VgaText::puts(char const*)>
c0019879:	58                   	pop    eax
c001987a:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c001987f:	5a                   	pop    edx
c0019880:	68 00 a2 02 c0       	push   0xc002a200
c0019885:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001988b:	e8 d8 73 ff ff       	call   c0010c68 <VgaText::puts(char const*)>
c0019890:	59                   	pop    ecx
c0019891:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c0019896:	5b                   	pop    ebx
c0019897:	68 3a a1 02 c0       	push   0xc002a13a
c001989c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00198a2:	e8 c1 73 ff ff       	call   c0010c68 <VgaText::puts(char const*)>
c00198a7:	58                   	pop    eax
c00198a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00198ad:	5a                   	pop    edx
c00198ae:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00198b1:	83 c0 0c             	add    eax,0xc
c00198b4:	50                   	push   eax
c00198b5:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00198ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00198c0:	e8 a3 73 ff ff       	call   c0010c68 <VgaText::puts(char const*)>
c00198c5:	59                   	pop    ecx
c00198c6:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00198cb:	5b                   	pop    ebx
c00198cc:	68 59 a1 02 c0       	push   0xc002a159
c00198d1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00198d7:	e8 8c 73 ff ff       	call   c0010c68 <VgaText::puts(char const*)>
c00198dc:	58                   	pop    eax
c00198dd:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00198e2:	5a                   	pop    edx
c00198e3:	68 2c a2 02 c0       	push   0xc002a22c
c00198e8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00198ee:	e8 75 73 ff ff       	call   c0010c68 <VgaText::puts(char const*)>
c00198f3:	59                   	pop    ecx
c00198f4:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00198f9:	5b                   	pop    ebx
c00198fa:	68 6c a2 02 c0       	push   0xc002a26c
c00198ff:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019905:	e8 5e 73 ff ff       	call   c0010c68 <VgaText::puts(char const*)>
c001990a:	58                   	pop    eax
c001990b:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c0019910:	5a                   	pop    edx
c0019911:	68 45 a1 02 c0       	push   0xc002a145
c0019916:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001991c:	e8 47 73 ff ff       	call   c0010c68 <VgaText::puts(char const*)>
c0019921:	59                   	pop    ecx
c0019922:	5b                   	pop    ebx
c0019923:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019926:	68 5d a1 02 c0       	push   0xc002a15d
c001992b:	e8 57 8d ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0019930:	58                   	pop    eax
c0019931:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019934:	5a                   	pop    edx
c0019935:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019938:	68 66 a1 02 c0       	push   0xc002a166
c001993d:	e8 45 8d ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0019942:	59                   	pop    ecx
c0019943:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019946:	5b                   	pop    ebx
c0019947:	8b 00                	mov    eax,DWORD PTR [eax]
c0019949:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001994c:	68 6f a1 02 c0       	push   0xc002a16f
c0019951:	e8 31 8d ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0019956:	58                   	pop    eax
c0019957:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c001995c:	5a                   	pop    edx
c001995d:	68 b0 a2 02 c0       	push   0xc002a2b0
c0019962:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019968:	e8 fb 72 ff ff       	call   c0010c68 <VgaText::puts(char const*)>
c001996d:	59                   	pop    ecx
c001996e:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c0019973:	5b                   	pop    ebx
c0019974:	68 78 a1 02 c0       	push   0xc002a178
c0019979:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001997f:	e8 e4 72 ff ff       	call   c0010c68 <VgaText::puts(char const*)>
c0019984:	0f 20 c0             	mov    eax,cr0
c0019987:	5a                   	pop    edx
c0019988:	59                   	pop    ecx
c0019989:	50                   	push   eax
c001998a:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c001998f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019995:	e8 f4 72 ff ff       	call   c0010c8e <VgaText::putx(unsigned int)>
c001999a:	5b                   	pop    ebx
c001999b:	58                   	pop    eax
c001999c:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00199a1:	68 82 a1 02 c0       	push   0xc002a182
c00199a6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00199ac:	e8 b7 72 ff ff       	call   c0010c68 <VgaText::puts(char const*)>
c00199b1:	0f 20 d0             	mov    eax,cr2
c00199b4:	5a                   	pop    edx
c00199b5:	59                   	pop    ecx
c00199b6:	50                   	push   eax
c00199b7:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00199bc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00199c2:	e8 c7 72 ff ff       	call   c0010c8e <VgaText::putx(unsigned int)>
c00199c7:	5b                   	pop    ebx
c00199c8:	58                   	pop    eax
c00199c9:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00199ce:	68 8c a1 02 c0       	push   0xc002a18c
c00199d3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00199d9:	e8 8a 72 ff ff       	call   c0010c68 <VgaText::puts(char const*)>
c00199de:	0f 20 d8             	mov    eax,cr3
c00199e1:	5a                   	pop    edx
c00199e2:	59                   	pop    ecx
c00199e3:	50                   	push   eax
c00199e4:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00199e9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00199ef:	e8 9a 72 ff ff       	call   c0010c8e <VgaText::putx(unsigned int)>
c00199f4:	5b                   	pop    ebx
c00199f5:	58                   	pop    eax
c00199f6:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c00199fb:	68 9f a1 02 c0       	push   0xc002a19f
c0019a00:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a06:	e8 5d 72 ff ff       	call   c0010c68 <VgaText::puts(char const*)>
c0019a0b:	0f 20 e0             	mov    eax,cr4
c0019a0e:	5a                   	pop    edx
c0019a0f:	59                   	pop    ecx
c0019a10:	50                   	push   eax
c0019a11:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c0019a16:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a1c:	e8 6d 72 ff ff       	call   c0010c8e <VgaText::putx(unsigned int)>
c0019a21:	5b                   	pop    ebx
c0019a22:	58                   	pop    eax
c0019a23:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c0019a28:	68 a9 a1 02 c0       	push   0xc002a1a9
c0019a2d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a33:	e8 30 72 ff ff       	call   c0010c68 <VgaText::puts(char const*)>
c0019a38:	5a                   	pop    edx
c0019a39:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c0019a3e:	59                   	pop    ecx
c0019a3f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019a45:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019a48:	50                   	push   eax
c0019a49:	e8 40 72 ff ff       	call   c0010c8e <VgaText::putx(unsigned int)>
c0019a4e:	5b                   	pop    ebx
c0019a4f:	58                   	pop    eax
c0019a50:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c0019a55:	68 c0 a1 02 c0       	push   0xc002a1c0
c0019a5a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a60:	e8 03 72 ff ff       	call   c0010c68 <VgaText::puts(char const*)>
c0019a65:	5a                   	pop    edx
c0019a66:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c0019a6b:	59                   	pop    ecx
c0019a6c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019a72:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019a75:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019a78:	50                   	push   eax
c0019a79:	e8 10 72 ff ff       	call   c0010c8e <VgaText::putx(unsigned int)>
c0019a7e:	5b                   	pop    ebx
c0019a7f:	58                   	pop    eax
c0019a80:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c0019a85:	68 c0 a1 02 c0       	push   0xc002a1c0
c0019a8a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a90:	e8 d3 71 ff ff       	call   c0010c68 <VgaText::puts(char const*)>
c0019a95:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c0019a9a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019a9d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019aa3:	8b 12                	mov    edx,DWORD PTR [edx]
c0019aa5:	59                   	pop    ecx
c0019aa6:	5b                   	pop    ebx
c0019aa7:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019aaa:	50                   	push   eax
c0019aab:	e8 de 71 ff ff       	call   c0010c8e <VgaText::putx(unsigned int)>
c0019ab0:	83 c4 10             	add    esp,0x10
c0019ab3:	b2 fe                	mov    dl,0xfe
c0019ab5:	e4 60                	in     al,0x60
c0019ab7:	3c 1c                	cmp    al,0x1c
c0019ab9:	74 04                	je     c0019abf <Krnl::panic(char const*)+0x31e>
c0019abb:	3c 5a                	cmp    al,0x5a
c0019abd:	75 f6                	jne    c0019ab5 <Krnl::panic(char const*)+0x314>
c0019abf:	e4 64                	in     al,0x64
c0019ac1:	a8 02                	test   al,0x2
c0019ac3:	75 fa                	jne    c0019abf <Krnl::panic(char const*)+0x31e>
c0019ac5:	88 d0                	mov    al,dl
c0019ac7:	e6 64                	out    0x64,al
c0019ac9:	fa                   	cli    
c0019aca:	f4                   	hlt    
c0019acb:	eb e8                	jmp    c0019ab5 <Krnl::panic(char const*)+0x314>

c0019acd <Net::switchEndian16(unsigned short)>:
c0019acd:	83 ec 04             	sub    esp,0x4
c0019ad0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019ad4:	66 89 04 24          	mov    WORD PTR [esp],ax
c0019ad8:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0019adc:	c1 f8 08             	sar    eax,0x8
c0019adf:	89 c2                	mov    edx,eax
c0019ae1:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0019ae5:	c1 e0 08             	shl    eax,0x8
c0019ae8:	09 d0                	or     eax,edx
c0019aea:	83 c4 04             	add    esp,0x4
c0019aed:	c3                   	ret    

c0019aee <Net::switchEndian32(unsigned int)>:
c0019aee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019af2:	c1 e8 18             	shr    eax,0x18
c0019af5:	89 c2                	mov    edx,eax
c0019af7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019afb:	c1 e0 08             	shl    eax,0x8
c0019afe:	25 00 00 ff 00       	and    eax,0xff0000
c0019b03:	09 c2                	or     edx,eax
c0019b05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b09:	c1 e8 08             	shr    eax,0x8
c0019b0c:	25 00 ff 00 00       	and    eax,0xff00
c0019b11:	09 c2                	or     edx,eax
c0019b13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b17:	c1 e0 18             	shl    eax,0x18
c0019b1a:	09 d0                	or     eax,edx
c0019b1c:	c3                   	ret    

c0019b1d <Net::crc32Calc(unsigned char*, int)>:
c0019b1d:	83 ec 10             	sub    esp,0x10
c0019b20:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019b25:	75 07                	jne    c0019b2e <Net::crc32Calc(unsigned char*, int)+0x11>
c0019b27:	b8 00 00 00 00       	mov    eax,0x0
c0019b2c:	eb 7c                	jmp    c0019baa <Net::crc32Calc(unsigned char*, int)+0x8d>
c0019b2e:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0019b33:	7f 07                	jg     c0019b3c <Net::crc32Calc(unsigned char*, int)+0x1f>
c0019b35:	b8 00 00 00 00       	mov    eax,0x0
c0019b3a:	eb 6e                	jmp    c0019baa <Net::crc32Calc(unsigned char*, int)+0x8d>
c0019b3c:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0019b44:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019b4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b50:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0019b54:	7d 4e                	jge    c0019ba4 <Net::crc32Calc(unsigned char*, int)+0x87>
c0019b56:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019b5a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019b5e:	01 d0                	add    eax,edx
c0019b60:	8a 00                	mov    al,BYTE PTR [eax]
c0019b62:	0f b6 c0             	movzx  eax,al
c0019b65:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0019b69:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019b71:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0019b76:	7f 26                	jg     c0019b9e <Net::crc32Calc(unsigned char*, int)+0x81>
c0019b78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b7c:	83 e0 01             	and    eax,0x1
c0019b7f:	74 0d                	je     c0019b8e <Net::crc32Calc(unsigned char*, int)+0x71>
c0019b81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b85:	d1 e8                	shr    eax,1
c0019b87:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0019b8c:	eb 06                	jmp    c0019b94 <Net::crc32Calc(unsigned char*, int)+0x77>
c0019b8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b92:	d1 e8                	shr    eax,1
c0019b94:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019b98:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0019b9c:	eb d3                	jmp    c0019b71 <Net::crc32Calc(unsigned char*, int)+0x54>
c0019b9e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0019ba2:	eb a8                	jmp    c0019b4c <Net::crc32Calc(unsigned char*, int)+0x2f>
c0019ba4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ba8:	f7 d0                	not    eax
c0019baa:	83 c4 10             	add    esp,0x10
c0019bad:	c3                   	ret    

c0019bae <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c0019bae:	83 ec 1c             	sub    esp,0x1c
c0019bb1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019bb5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019bb9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019bc1:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c0019bc6:	7f 14                	jg     c0019bdc <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c0019bc8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019bcc:	8d 50 01             	lea    edx,[eax+0x1]
c0019bcf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019bd3:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c0019bd6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0019bda:	eb e5                	jmp    c0019bc1 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c0019bdc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019be0:	8d 50 01             	lea    edx,[eax+0x1]
c0019be3:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019be7:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c0019bea:	83 ec 04             	sub    esp,0x4
c0019bed:	6a 06                	push   0x6
c0019bef:	8d 44 24 36          	lea    eax,[esp+0x36]
c0019bf3:	50                   	push   eax
c0019bf4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0019bf8:	e8 58 6a fe ff       	call   c0000655 <memcpy>
c0019bfd:	83 c4 10             	add    esp,0x10
c0019c00:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c0019c05:	83 ec 04             	sub    esp,0x4
c0019c08:	6a 06                	push   0x6
c0019c0a:	8d 44 24 30          	lea    eax,[esp+0x30]
c0019c0e:	50                   	push   eax
c0019c0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0019c13:	e8 3d 6a fe ff       	call   c0000655 <memcpy>
c0019c18:	83 c4 10             	add    esp,0x10
c0019c1b:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c0019c20:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019c24:	0f b7 c0             	movzx  eax,ax
c0019c27:	c1 f8 08             	sar    eax,0x8
c0019c2a:	89 c1                	mov    ecx,eax
c0019c2c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019c30:	8d 50 01             	lea    edx,[eax+0x1]
c0019c33:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019c37:	88 ca                	mov    dl,cl
c0019c39:	88 10                	mov    BYTE PTR [eax],dl
c0019c3b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019c3f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019c43:	8d 48 01             	lea    ecx,[eax+0x1]
c0019c46:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0019c4a:	88 10                	mov    BYTE PTR [eax],dl
c0019c4c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0019c50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019c54:	83 ec 04             	sub    esp,0x4
c0019c57:	52                   	push   edx
c0019c58:	50                   	push   eax
c0019c59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0019c5d:	e8 f3 69 fe ff       	call   c0000655 <memcpy>
c0019c62:	83 c4 10             	add    esp,0x10
c0019c65:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019c69:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0019c6d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019c71:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0019c75:	83 ec 08             	sub    esp,0x8
c0019c78:	50                   	push   eax
c0019c79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019c7d:	e8 9b fe ff ff       	call   c0019b1d <Net::crc32Calc(unsigned char*, int)>
c0019c82:	83 c4 10             	add    esp,0x10
c0019c85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019c89:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c8d:	c1 e8 18             	shr    eax,0x18
c0019c90:	89 c1                	mov    ecx,eax
c0019c92:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019c96:	8d 50 01             	lea    edx,[eax+0x1]
c0019c99:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019c9d:	88 ca                	mov    dl,cl
c0019c9f:	88 10                	mov    BYTE PTR [eax],dl
c0019ca1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ca5:	c1 e8 10             	shr    eax,0x10
c0019ca8:	89 c1                	mov    ecx,eax
c0019caa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019cae:	8d 50 01             	lea    edx,[eax+0x1]
c0019cb1:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019cb5:	88 ca                	mov    dl,cl
c0019cb7:	88 10                	mov    BYTE PTR [eax],dl
c0019cb9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019cbd:	c1 e8 08             	shr    eax,0x8
c0019cc0:	89 c1                	mov    ecx,eax
c0019cc2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019cc6:	8d 50 01             	lea    edx,[eax+0x1]
c0019cc9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019ccd:	88 ca                	mov    dl,cl
c0019ccf:	88 10                	mov    BYTE PTR [eax],dl
c0019cd1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019cd5:	8d 50 01             	lea    edx,[eax+0x1]
c0019cd8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019cdc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019ce0:	88 10                	mov    BYTE PTR [eax],dl
c0019ce2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019ce6:	83 c4 1c             	add    esp,0x1c
c0019ce9:	c3                   	ret    

c0019cea <Net::unwrapEthernetFrame(unsigned char*, int)>:
c0019cea:	83 ec 2c             	sub    esp,0x2c
c0019ced:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019cf1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019cf5:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c0019cfa:	83 ec 04             	sub    esp,0x4
c0019cfd:	6a 06                	push   0x6
c0019cff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019d03:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019d07:	83 c0 0e             	add    eax,0xe
c0019d0a:	50                   	push   eax
c0019d0b:	e8 45 69 fe ff       	call   c0000655 <memcpy>
c0019d10:	83 c4 10             	add    esp,0x10
c0019d13:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c0019d18:	83 ec 04             	sub    esp,0x4
c0019d1b:	6a 06                	push   0x6
c0019d1d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019d21:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019d25:	83 c0 08             	add    eax,0x8
c0019d28:	50                   	push   eax
c0019d29:	e8 27 69 fe ff       	call   c0000655 <memcpy>
c0019d2e:	83 c4 10             	add    esp,0x10
c0019d31:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c0019d36:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019d3a:	8d 50 01             	lea    edx,[eax+0x1]
c0019d3d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019d41:	8a 00                	mov    al,BYTE PTR [eax]
c0019d43:	0f b6 c0             	movzx  eax,al
c0019d46:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0019d4b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019d4f:	8d 50 01             	lea    edx,[eax+0x1]
c0019d52:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019d56:	8a 00                	mov    al,BYTE PTR [eax]
c0019d58:	0f b6 c0             	movzx  eax,al
c0019d5b:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0019d60:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c0019d65:	c1 e0 08             	shl    eax,0x8
c0019d68:	89 c2                	mov    edx,eax
c0019d6a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019d6e:	09 d0                	or     eax,edx
c0019d70:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019d74:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c0019d78:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c0019d7d:	75 3a                	jne    c0019db9 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c0019d7f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019d83:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019d86:	66 3d dc 05          	cmp    ax,0x5dc
c0019d8a:	77 10                	ja     c0019d9c <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c0019d8c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019d90:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019d93:	0f b7 c0             	movzx  eax,ax
c0019d96:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0019d9a:	eb 1d                	jmp    c0019db9 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c0019d9c:	83 ec 0c             	sub    esp,0xc
c0019d9f:	68 d8 a2 02 c0       	push   0xc002a2d8
c0019da4:	e8 de 88 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0019da9:	83 c4 10             	add    esp,0x10
c0019dac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019db0:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c0019db4:	e9 c0 00 00 00       	jmp    c0019e79 <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c0019db9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019dbd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019dc1:	8b 00                	mov    eax,DWORD PTR [eax]
c0019dc3:	83 ec 04             	sub    esp,0x4
c0019dc6:	52                   	push   edx
c0019dc7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019dcb:	50                   	push   eax
c0019dcc:	e8 84 68 fe ff       	call   c0000655 <memcpy>
c0019dd1:	83 c4 10             	add    esp,0x10
c0019dd4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019dd8:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0019ddc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019de0:	8d 50 01             	lea    edx,[eax+0x1]
c0019de3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019de7:	8a 00                	mov    al,BYTE PTR [eax]
c0019de9:	0f b6 c0             	movzx  eax,al
c0019dec:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019df0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019df4:	8d 50 01             	lea    edx,[eax+0x1]
c0019df7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019dfb:	8a 00                	mov    al,BYTE PTR [eax]
c0019dfd:	0f b6 c0             	movzx  eax,al
c0019e00:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019e04:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019e08:	8d 50 01             	lea    edx,[eax+0x1]
c0019e0b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019e0f:	8a 00                	mov    al,BYTE PTR [eax]
c0019e11:	0f b6 c0             	movzx  eax,al
c0019e14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019e18:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019e1c:	8d 50 01             	lea    edx,[eax+0x1]
c0019e1f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019e23:	8a 00                	mov    al,BYTE PTR [eax]
c0019e25:	0f b6 c0             	movzx  eax,al
c0019e28:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019e2c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019e30:	c1 e0 18             	shl    eax,0x18
c0019e33:	89 c2                	mov    edx,eax
c0019e35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e39:	c1 e0 10             	shl    eax,0x10
c0019e3c:	09 c2                	or     edx,eax
c0019e3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019e42:	c1 e0 08             	shl    eax,0x8
c0019e45:	09 d0                	or     eax,edx
c0019e47:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0019e4b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019e4f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019e53:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0019e57:	83 e8 04             	sub    eax,0x4
c0019e5a:	83 ec 08             	sub    esp,0x8
c0019e5d:	50                   	push   eax
c0019e5e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019e62:	e8 b6 fc ff ff       	call   c0019b1d <Net::crc32Calc(unsigned char*, int)>
c0019e67:	83 c4 10             	add    esp,0x10
c0019e6a:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0019e6e:	0f 94 c2             	sete   dl
c0019e71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019e75:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c0019e78:	90                   	nop
c0019e79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019e7d:	83 c4 2c             	add    esp,0x2c
c0019e80:	c2 04 00             	ret    0x4

c0019e83 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0019e83:	55                   	push   ebp
c0019e84:	57                   	push   edi
c0019e85:	56                   	push   esi
c0019e86:	53                   	push   ebx
c0019e87:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019e8d:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0019e94:	8a 1e                	mov    bl,BYTE PTR [esi]
c0019e96:	8d 6e 01             	lea    ebp,[esi+0x1]
c0019e99:	80 fb 40             	cmp    bl,0x40
c0019e9c:	75 1b                	jne    c0019eb9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0019e9e:	8a 16                	mov    dl,BYTE PTR [esi]
c0019ea0:	84 d2                	test   dl,dl
c0019ea2:	0f 84 f1 00 00 00    	je     c0019f99 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019ea8:	8d 46 01             	lea    eax,[esi+0x1]
c0019eab:	80 fa 3a             	cmp    dl,0x3a
c0019eae:	74 04                	je     c0019eb4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0019eb0:	89 c6                	mov    esi,eax
c0019eb2:	eb ea                	jmp    c0019e9e <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0019eb4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0019eb7:	89 c6                	mov    esi,eax
c0019eb9:	50                   	push   eax
c0019eba:	6a 40                	push   0x40
c0019ebc:	6a 00                	push   0x0
c0019ebe:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019ec2:	50                   	push   eax
c0019ec3:	e8 c3 67 fe ff       	call   c000068b <memset>
c0019ec8:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0019ecf:	31 c0                	xor    eax,eax
c0019ed1:	83 c4 10             	add    esp,0x10
c0019ed4:	8a 0f                	mov    cl,BYTE PTR [edi]
c0019ed6:	84 c9                	test   cl,cl
c0019ed8:	0f 84 bb 00 00 00    	je     c0019f99 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019ede:	3d c7 00 00 00       	cmp    eax,0xc7
c0019ee3:	0f 8f b0 00 00 00    	jg     c0019f99 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019ee9:	80 f9 0a             	cmp    cl,0xa
c0019eec:	0f 85 98 00 00 00    	jne    c0019f8a <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0019ef2:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0019ef7:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0019efb:	a8 df                	test   al,0xdf
c0019efd:	0f 94 c1             	sete   cl
c0019f00:	3c 23                	cmp    al,0x23
c0019f02:	0f 94 c2             	sete   dl
c0019f05:	08 d1                	or     cl,dl
c0019f07:	75 4a                	jne    c0019f53 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0019f09:	8d 50 f7             	lea    edx,[eax-0x9]
c0019f0c:	80 fa 01             	cmp    dl,0x1
c0019f0f:	76 42                	jbe    c0019f53 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0019f11:	3c 5b                	cmp    al,0x5b
c0019f13:	75 42                	jne    c0019f57 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0019f15:	80 fb 40             	cmp    bl,0x40
c0019f18:	75 39                	jne    c0019f53 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0019f1a:	83 ec 0c             	sub    esp,0xc
c0019f1d:	8d 54 24 65          	lea    edx,[esp+0x65]
c0019f21:	52                   	push   edx
c0019f22:	e8 81 67 fe ff       	call   c00006a8 <strlen>
c0019f27:	83 c4 10             	add    esp,0x10
c0019f2a:	83 f8 3f             	cmp    eax,0x3f
c0019f2d:	77 6a                	ja     c0019f99 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019f2f:	50                   	push   eax
c0019f30:	50                   	push   eax
c0019f31:	8d 54 24 61          	lea    edx,[esp+0x61]
c0019f35:	52                   	push   edx
c0019f36:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019f3a:	52                   	push   edx
c0019f3b:	e8 ea 67 fe ff       	call   c000072a <strcpy>
c0019f40:	58                   	pop    eax
c0019f41:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019f45:	52                   	push   edx
c0019f46:	e8 5d 67 fe ff       	call   c00006a8 <strlen>
c0019f4b:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0019f50:	83 c4 10             	add    esp,0x10
c0019f53:	31 d2                	xor    edx,edx
c0019f55:	eb 3a                	jmp    c0019f91 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0019f57:	80 fb 40             	cmp    bl,0x40
c0019f5a:	74 06                	je     c0019f62 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0019f5c:	8d 44 24 58          	lea    eax,[esp+0x58]
c0019f60:	eb 20                	jmp    c0019f82 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0019f62:	50                   	push   eax
c0019f63:	50                   	push   eax
c0019f64:	55                   	push   ebp
c0019f65:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019f69:	50                   	push   eax
c0019f6a:	e8 0c 68 fe ff       	call   c000077b <strcmp>
c0019f6f:	83 c4 10             	add    esp,0x10
c0019f72:	85 c0                	test   eax,eax
c0019f74:	75 dd                	jne    c0019f53 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0019f76:	eb e4                	jmp    c0019f5c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0019f78:	8d 50 01             	lea    edx,[eax+0x1]
c0019f7b:	80 f9 3d             	cmp    cl,0x3d
c0019f7e:	74 1d                	je     c0019f9d <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0019f80:	89 d0                	mov    eax,edx
c0019f82:	8a 08                	mov    cl,BYTE PTR [eax]
c0019f84:	84 c9                	test   cl,cl
c0019f86:	75 f0                	jne    c0019f78 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0019f88:	eb 0f                	jmp    c0019f99 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019f8a:	8d 50 01             	lea    edx,[eax+0x1]
c0019f8d:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0019f91:	47                   	inc    edi
c0019f92:	89 d0                	mov    eax,edx
c0019f94:	e9 3b ff ff ff       	jmp    c0019ed4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0019f99:	31 c0                	xor    eax,eax
c0019f9b:	eb 33                	jmp    c0019fd0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0019f9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019fa1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0019fa4:	50                   	push   eax
c0019fa5:	50                   	push   eax
c0019fa6:	8d 44 24 60          	lea    eax,[esp+0x60]
c0019faa:	50                   	push   eax
c0019fab:	56                   	push   esi
c0019fac:	e8 ca 67 fe ff       	call   c000077b <strcmp>
c0019fb1:	83 c4 10             	add    esp,0x10
c0019fb4:	85 c0                	test   eax,eax
c0019fb6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019fba:	75 97                	jne    c0019f53 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0019fbc:	51                   	push   ecx
c0019fbd:	51                   	push   ecx
c0019fbe:	52                   	push   edx
c0019fbf:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0019fc6:	e8 5f 67 fe ff       	call   c000072a <strcpy>
c0019fcb:	83 c4 10             	add    esp,0x10
c0019fce:	b0 01                	mov    al,0x1
c0019fd0:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019fd6:	5b                   	pop    ebx
c0019fd7:	5e                   	pop    esi
c0019fd8:	5f                   	pop    edi
c0019fd9:	5d                   	pop    ebp
c0019fda:	c3                   	ret    

c0019fdb <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0019fdb:	57                   	push   edi
c0019fdc:	56                   	push   esi
c0019fdd:	53                   	push   ebx
c0019fde:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019fe4:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0019feb:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0019ff2:	53                   	push   ebx
c0019ff3:	e8 b0 66 fe ff       	call   c00006a8 <strlen>
c0019ff8:	89 34 24             	mov    DWORD PTR [esp],esi
c0019ffb:	89 c7                	mov    edi,eax
c0019ffd:	e8 a6 66 fe ff       	call   c00006a8 <strlen>
c001a002:	83 c4 10             	add    esp,0x10
c001a005:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001a009:	3d ff 00 00 00       	cmp    eax,0xff
c001a00e:	0f 87 d3 00 00 00    	ja     c001a0e7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a014:	57                   	push   edi
c001a015:	57                   	push   edi
c001a016:	56                   	push   esi
c001a017:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001a01b:	56                   	push   esi
c001a01c:	e8 09 67 fe ff       	call   c000072a <strcpy>
c001a021:	58                   	pop    eax
c001a022:	5a                   	pop    edx
c001a023:	68 86 a6 02 c0       	push   0xc002a686
c001a028:	56                   	push   esi
c001a029:	e8 b3 67 fe ff       	call   c00007e1 <strcat>
c001a02e:	59                   	pop    ecx
c001a02f:	5f                   	pop    edi
c001a030:	53                   	push   ebx
c001a031:	56                   	push   esi
c001a032:	e8 aa 67 fe ff       	call   c00007e1 <strcat>
c001a037:	58                   	pop    eax
c001a038:	5a                   	pop    edx
c001a039:	68 24 a3 02 c0       	push   0xc002a324
c001a03e:	56                   	push   esi
c001a03f:	e8 9d 67 fe ff       	call   c00007e1 <strcat>
c001a044:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001a04b:	e8 84 54 ff ff       	call   c000f4d4 <malloc>
c001a050:	83 c4 0c             	add    esp,0xc
c001a053:	89 c3                	mov    ebx,eax
c001a055:	ff 35 94 dd 02 c0    	push   DWORD PTR ds:0xc002dd94
c001a05b:	56                   	push   esi
c001a05c:	50                   	push   eax
c001a05d:	e8 54 8b ff ff       	call   c0012bb6 <File::File(char const*, Process*)>
c001a062:	83 c4 10             	add    esp,0x10
c001a065:	85 db                	test   ebx,ebx
c001a067:	74 7e                	je     c001a0e7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a069:	51                   	push   ecx
c001a06a:	51                   	push   ecx
c001a06b:	6a 01                	push   0x1
c001a06d:	53                   	push   ebx
c001a06e:	e8 a7 8b ff ff       	call   c0012c1a <File::open(FileOpenMode)>
c001a073:	83 c4 10             	add    esp,0x10
c001a076:	85 c0                	test   eax,eax
c001a078:	74 08                	je     c001a082 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001a07a:	83 ec 0c             	sub    esp,0xc
c001a07d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a07f:	53                   	push   ebx
c001a080:	eb 5f                	jmp    c001a0e1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001a082:	52                   	push   edx
c001a083:	8d 44 24 17          	lea    eax,[esp+0x17]
c001a087:	50                   	push   eax
c001a088:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a08c:	50                   	push   eax
c001a08d:	53                   	push   ebx
c001a08e:	e8 33 8e ff ff       	call   c0012ec6 <File::stat(unsigned long long*, bool*)>
c001a093:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a097:	83 c4 10             	add    esp,0x10
c001a09a:	89 c1                	mov    ecx,eax
c001a09c:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001a0a0:	74 31                	je     c001a0d3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a0a2:	83 ec 0c             	sub    esp,0xc
c001a0a5:	50                   	push   eax
c001a0a6:	e8 29 54 ff ff       	call   c000f4d4 <malloc>
c001a0ab:	89 c6                	mov    esi,eax
c001a0ad:	58                   	pop    eax
c001a0ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a0b0:	8d 54 24 20          	lea    edx,[esp+0x20]
c001a0b4:	52                   	push   edx
c001a0b5:	56                   	push   esi
c001a0b6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a0ba:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a0be:	53                   	push   ebx
c001a0bf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a0c2:	83 c4 20             	add    esp,0x20
c001a0c5:	85 c0                	test   eax,eax
c001a0c7:	75 0a                	jne    c001a0d3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a0c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a0cd:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a0d1:	74 18                	je     c001a0eb <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001a0d3:	83 ec 0c             	sub    esp,0xc
c001a0d6:	53                   	push   ebx
c001a0d7:	e8 9c 8b ff ff       	call   c0012c78 <File::close()>
c001a0dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a0de:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a0e1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a0e4:	83 c4 10             	add    esp,0x10
c001a0e7:	31 c0                	xor    eax,eax
c001a0e9:	eb 3b                	jmp    c001a126 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001a0eb:	83 ec 0c             	sub    esp,0xc
c001a0ee:	53                   	push   ebx
c001a0ef:	e8 84 8b ff ff       	call   c0012c78 <File::close()>
c001a0f4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a0f6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a0f9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a0fc:	83 c4 0c             	add    esp,0xc
c001a0ff:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a106:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a10d:	56                   	push   esi
c001a10e:	e8 70 fd ff ff       	call   c0019e83 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001a113:	89 34 24             	mov    DWORD PTR [esp],esi
c001a116:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a11a:	e8 c5 53 ff ff       	call   c000f4e4 <free>
c001a11f:	83 c4 10             	add    esp,0x10
c001a122:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a126:	81 c4 20 01 00 00    	add    esp,0x120
c001a12c:	5b                   	pop    ebx
c001a12d:	5e                   	pop    esi
c001a12e:	5f                   	pop    edi
c001a12f:	c3                   	ret    

c001a130 <Reg::getLine(char*, char*, char*)>:
c001a130:	57                   	push   edi
c001a131:	56                   	push   esi
c001a132:	53                   	push   ebx
c001a133:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a137:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a13b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a13f:	57                   	push   edi
c001a140:	56                   	push   esi
c001a141:	53                   	push   ebx
c001a142:	68 29 a3 02 c0       	push   0xc002a329
c001a147:	e8 8f fe ff ff       	call   c0019fdb <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a14c:	83 c4 10             	add    esp,0x10
c001a14f:	84 c0                	test   al,al
c001a151:	75 10                	jne    c001a163 <Reg::getLine(char*, char*, char*)+0x33>
c001a153:	57                   	push   edi
c001a154:	56                   	push   esi
c001a155:	53                   	push   ebx
c001a156:	68 4e a3 02 c0       	push   0xc002a34e
c001a15b:	e8 7b fe ff ff       	call   c0019fdb <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a160:	83 c4 10             	add    esp,0x10
c001a163:	5b                   	pop    ebx
c001a164:	5e                   	pop    esi
c001a165:	5f                   	pop    edi
c001a166:	c3                   	ret    

c001a167 <Reg::readInt(char*, char*, int*)>:
c001a167:	55                   	push   ebp
c001a168:	57                   	push   edi
c001a169:	56                   	push   esi
c001a16a:	53                   	push   ebx
c001a16b:	81 ec f0 00 00 00    	sub    esp,0xf0
c001a171:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a175:	57                   	push   edi
c001a176:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a17d:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a184:	e8 a7 ff ff ff       	call   c001a130 <Reg::getLine(char*, char*, char*)>
c001a189:	83 c4 10             	add    esp,0x10
c001a18c:	84 c0                	test   al,al
c001a18e:	0f 84 b3 00 00 00    	je     c001a247 <Reg::readInt(char*, char*, int*)+0xe0>
c001a194:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001a198:	80 fa 2b             	cmp    dl,0x2b
c001a19b:	74 0c                	je     c001a1a9 <Reg::readInt(char*, char*, int*)+0x42>
c001a19d:	80 fa 2d             	cmp    dl,0x2d
c001a1a0:	75 0e                	jne    c001a1b0 <Reg::readInt(char*, char*, int*)+0x49>
c001a1a2:	ba 01 00 00 00       	mov    edx,0x1
c001a1a7:	eb 0b                	jmp    c001a1b4 <Reg::readInt(char*, char*, int*)+0x4d>
c001a1a9:	ba 01 00 00 00       	mov    edx,0x1
c001a1ae:	eb 02                	jmp    c001a1b2 <Reg::readInt(char*, char*, int*)+0x4b>
c001a1b0:	31 d2                	xor    edx,edx
c001a1b2:	31 c0                	xor    eax,eax
c001a1b4:	be 0a 00 00 00       	mov    esi,0xa
c001a1b9:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001a1be:	75 20                	jne    c001a1e0 <Reg::readInt(char*, char*, int*)+0x79>
c001a1c0:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001a1c4:	80 f9 78             	cmp    cl,0x78
c001a1c7:	75 0a                	jne    c001a1d3 <Reg::readInt(char*, char*, int*)+0x6c>
c001a1c9:	83 c2 02             	add    edx,0x2
c001a1cc:	be 10 00 00 00       	mov    esi,0x10
c001a1d1:	eb 0d                	jmp    c001a1e0 <Reg::readInt(char*, char*, int*)+0x79>
c001a1d3:	80 f9 62             	cmp    cl,0x62
c001a1d6:	75 08                	jne    c001a1e0 <Reg::readInt(char*, char*, int*)+0x79>
c001a1d8:	83 c2 02             	add    edx,0x2
c001a1db:	be 02 00 00 00       	mov    esi,0x2
c001a1e0:	01 d7                	add    edi,edx
c001a1e2:	31 d2                	xor    edx,edx
c001a1e4:	8a 1f                	mov    bl,BYTE PTR [edi]
c001a1e6:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001a1ea:	80 fb 0d             	cmp    bl,0xd
c001a1ed:	0f 94 c3             	sete   bl
c001a1f0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a1f5:	0f 94 c1             	sete   cl
c001a1f8:	08 cb                	or     bl,cl
c001a1fa:	75 3a                	jne    c001a236 <Reg::readInt(char*, char*, int*)+0xcf>
c001a1fc:	0f af d6             	imul   edx,esi
c001a1ff:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001a204:	83 fe 10             	cmp    esi,0x10
c001a207:	75 26                	jne    c001a22f <Reg::readInt(char*, char*, int*)+0xc8>
c001a209:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a20d:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001a210:	89 e9                	mov    ecx,ebp
c001a212:	80 f9 05             	cmp    cl,0x5
c001a215:	77 06                	ja     c001a21d <Reg::readInt(char*, char*, int*)+0xb6>
c001a217:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001a21b:	eb 16                	jmp    c001a233 <Reg::readInt(char*, char*, int*)+0xcc>
c001a21d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a221:	83 e9 61             	sub    ecx,0x61
c001a224:	80 f9 05             	cmp    cl,0x5
c001a227:	77 06                	ja     c001a22f <Reg::readInt(char*, char*, int*)+0xc8>
c001a229:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001a22d:	eb 04                	jmp    c001a233 <Reg::readInt(char*, char*, int*)+0xcc>
c001a22f:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001a233:	47                   	inc    edi
c001a234:	eb ae                	jmp    c001a1e4 <Reg::readInt(char*, char*, int*)+0x7d>
c001a236:	84 c0                	test   al,al
c001a238:	74 02                	je     c001a23c <Reg::readInt(char*, char*, int*)+0xd5>
c001a23a:	f7 da                	neg    edx
c001a23c:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001a243:	89 10                	mov    DWORD PTR [eax],edx
c001a245:	88 d8                	mov    al,bl
c001a247:	81 c4 ec 00 00 00    	add    esp,0xec
c001a24d:	5b                   	pop    ebx
c001a24e:	5e                   	pop    esi
c001a24f:	5f                   	pop    edi
c001a250:	5d                   	pop    ebp
c001a251:	c3                   	ret    

c001a252 <Reg::readString(char*, char*, char*, int)>:
c001a252:	57                   	push   edi
c001a253:	56                   	push   esi
c001a254:	53                   	push   ebx
c001a255:	81 ec d4 00 00 00    	sub    esp,0xd4
c001a25b:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001a262:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001a266:	57                   	push   edi
c001a267:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a26e:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a275:	e8 b6 fe ff ff       	call   c001a130 <Reg::getLine(char*, char*, char*)>
c001a27a:	83 c4 10             	add    esp,0x10
c001a27d:	89 c6                	mov    esi,eax
c001a27f:	84 c0                	test   al,al
c001a281:	74 44                	je     c001a2c7 <Reg::readString(char*, char*, char*, int)+0x75>
c001a283:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001a28a:	31 c0                	xor    eax,eax
c001a28c:	4a                   	dec    edx
c001a28d:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001a290:	84 c9                	test   cl,cl
c001a292:	74 0f                	je     c001a2a3 <Reg::readString(char*, char*, char*, int)+0x51>
c001a294:	39 c2                	cmp    edx,eax
c001a296:	7e 0b                	jle    c001a2a3 <Reg::readString(char*, char*, char*, int)+0x51>
c001a298:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001a29b:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001a2a0:	40                   	inc    eax
c001a2a1:	eb ea                	jmp    c001a28d <Reg::readString(char*, char*, char*, int)+0x3b>
c001a2a3:	83 ec 0c             	sub    esp,0xc
c001a2a6:	53                   	push   ebx
c001a2a7:	e8 fc 63 fe ff       	call   c00006a8 <strlen>
c001a2ac:	83 c4 10             	add    esp,0x10
c001a2af:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001a2b4:	75 11                	jne    c001a2c7 <Reg::readString(char*, char*, char*, int)+0x75>
c001a2b6:	83 ec 0c             	sub    esp,0xc
c001a2b9:	53                   	push   ebx
c001a2ba:	e8 e9 63 fe ff       	call   c00006a8 <strlen>
c001a2bf:	83 c4 10             	add    esp,0x10
c001a2c2:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001a2c7:	81 c4 d0 00 00 00    	add    esp,0xd0
c001a2cd:	89 f0                	mov    eax,esi
c001a2cf:	5b                   	pop    ebx
c001a2d0:	5e                   	pop    esi
c001a2d1:	5f                   	pop    edi
c001a2d2:	c3                   	ret    

c001a2d3 <Reg::readBool(char*, char*, bool*)>:
c001a2d3:	83 ec 20             	sub    esp,0x20
c001a2d6:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a2da:	50                   	push   eax
c001a2db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a2df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a2e3:	e8 7f fe ff ff       	call   c001a167 <Reg::readInt(char*, char*, int*)>
c001a2e8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a2ed:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a2f1:	0f 95 02             	setne  BYTE PTR [edx]
c001a2f4:	83 c4 2c             	add    esp,0x2c
c001a2f7:	c3                   	ret    

c001a2f8 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001a2f8:	53                   	push   ebx
c001a2f9:	83 ec 1c             	sub    esp,0x1c
c001a2fc:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001a300:	8d 44 24 13          	lea    eax,[esp+0x13]
c001a304:	50                   	push   eax
c001a305:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a309:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a30d:	e8 c1 ff ff ff       	call   c001a2d3 <Reg::readBool(char*, char*, bool*)>
c001a312:	83 c4 10             	add    esp,0x10
c001a315:	84 c0                	test   al,al
c001a317:	74 04                	je     c001a31d <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001a319:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001a31d:	88 d8                	mov    al,bl
c001a31f:	83 c4 18             	add    esp,0x18
c001a322:	5b                   	pop    ebx
c001a323:	c3                   	ret    

c001a324 <Reg::readIntWithDefault(char*, char*, int)>:
c001a324:	53                   	push   ebx
c001a325:	83 ec 1c             	sub    esp,0x1c
c001a328:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a32c:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a330:	50                   	push   eax
c001a331:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a335:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a339:	e8 29 fe ff ff       	call   c001a167 <Reg::readInt(char*, char*, int*)>
c001a33e:	83 c4 10             	add    esp,0x10
c001a341:	84 c0                	test   al,al
c001a343:	74 04                	je     c001a349 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001a345:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a349:	89 d8                	mov    eax,ebx
c001a34b:	83 c4 18             	add    esp,0x18
c001a34e:	5b                   	pop    ebx
c001a34f:	c3                   	ret    

c001a350 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001a350:	57                   	push   edi
c001a351:	56                   	push   esi
c001a352:	53                   	push   ebx
c001a353:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a357:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001a35b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001a35f:	56                   	push   esi
c001a360:	53                   	push   ebx
c001a361:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a365:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a369:	e8 e4 fe ff ff       	call   c001a252 <Reg::readString(char*, char*, char*, int)>
c001a36e:	83 c4 10             	add    esp,0x10
c001a371:	84 c0                	test   al,al
c001a373:	75 1b                	jne    c001a390 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001a375:	50                   	push   eax
c001a376:	56                   	push   esi
c001a377:	4e                   	dec    esi
c001a378:	6a 00                	push   0x0
c001a37a:	53                   	push   ebx
c001a37b:	e8 0b 63 fe ff       	call   c000068b <memset>
c001a380:	83 c4 0c             	add    esp,0xc
c001a383:	56                   	push   esi
c001a384:	57                   	push   edi
c001a385:	53                   	push   ebx
c001a386:	89 fb                	mov    ebx,edi
c001a388:	e8 c8 62 fe ff       	call   c0000655 <memcpy>
c001a38d:	83 c4 10             	add    esp,0x10
c001a390:	89 d8                	mov    eax,ebx
c001a392:	5b                   	pop    ebx
c001a393:	5e                   	pop    esi
c001a394:	5f                   	pop    edi
c001a395:	c3                   	ret    

c001a396 <Sys::exit(regs*)>:
c001a396:	83 ec 18             	sub    esp,0x18
c001a399:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a39d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a3a0:	e8 ce 32 00 00       	call   c001d673 <terminateTask(int)>
c001a3a5:	83 c8 ff             	or     eax,0xffffffff
c001a3a8:	83 c4 1c             	add    esp,0x1c
c001a3ab:	89 c2                	mov    edx,eax
c001a3ad:	c3                   	ret    

c001a3ae <Sys::getCwd(regs*)>:
c001a3ae:	83 ec 10             	sub    esp,0x10
c001a3b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a3b5:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001a3b8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a3bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a3c0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a3c3:	e8 5f 8b ff ff       	call   c0012f27 <getcwd(Process*, char*, int)>
c001a3c8:	83 c4 1c             	add    esp,0x1c
c001a3cb:	99                   	cdq    
c001a3cc:	c3                   	ret    

c001a3cd <Sys::getPID(regs*)>:
c001a3cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a3d2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a3d5:	8b 00                	mov    eax,DWORD PTR [eax]
c001a3d7:	99                   	cdq    
c001a3d8:	c3                   	ret    

c001a3d9 <Sys::loadDLL(regs*)>:
c001a3d9:	56                   	push   esi
c001a3da:	53                   	push   ebx
c001a3db:	31 d2                	xor    edx,edx
c001a3dd:	51                   	push   ecx
c001a3de:	b8 01 00 00 00       	mov    eax,0x1
c001a3e3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a3e7:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001a3eb:	0f 84 8c 00 00 00    	je     c001a47d <Sys::loadDLL(regs*)+0xa4>
c001a3f1:	83 ec 0c             	sub    esp,0xc
c001a3f4:	68 14 01 00 00       	push   0x114
c001a3f9:	e8 d6 50 ff ff       	call   c000f4d4 <malloc>
c001a3fe:	83 c4 0c             	add    esp,0xc
c001a401:	89 c3                	mov    ebx,eax
c001a403:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a408:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a40b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001a40e:	53                   	push   ebx
c001a40f:	e8 a2 87 ff ff       	call   c0012bb6 <File::File(char const*, Process*)>
c001a414:	83 c4 10             	add    esp,0x10
c001a417:	31 d2                	xor    edx,edx
c001a419:	b8 02 00 00 00       	mov    eax,0x2
c001a41e:	85 db                	test   ebx,ebx
c001a420:	74 5b                	je     c001a47d <Sys::loadDLL(regs*)+0xa4>
c001a422:	83 ec 0c             	sub    esp,0xc
c001a425:	53                   	push   ebx
c001a426:	e8 5d 8a ff ff       	call   c0012e88 <File::exists()>
c001a42b:	83 c4 10             	add    esp,0x10
c001a42e:	84 c0                	test   al,al
c001a430:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a432:	75 11                	jne    c001a445 <Sys::loadDLL(regs*)+0x6c>
c001a434:	83 ec 0c             	sub    esp,0xc
c001a437:	53                   	push   ebx
c001a438:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a43b:	83 c4 10             	add    esp,0x10
c001a43e:	b8 03 00 00 00       	mov    eax,0x3
c001a443:	eb 36                	jmp    c001a47b <Sys::loadDLL(regs*)+0xa2>
c001a445:	83 ec 0c             	sub    esp,0xc
c001a448:	53                   	push   ebx
c001a449:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a44c:	58                   	pop    eax
c001a44d:	5a                   	pop    edx
c001a44e:	6a 00                	push   0x0
c001a450:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001a453:	e8 64 21 00 00       	call   c001c5bc <Thr::loadDLL(char const*, bool)>
c001a458:	83 c4 10             	add    esp,0x10
c001a45b:	89 c1                	mov    ecx,eax
c001a45d:	31 d2                	xor    edx,edx
c001a45f:	b8 04 00 00 00       	mov    eax,0x4
c001a464:	85 c9                	test   ecx,ecx
c001a466:	74 15                	je     c001a47d <Sys::loadDLL(regs*)+0xa4>
c001a468:	53                   	push   ebx
c001a469:	53                   	push   ebx
c001a46a:	ff 35 48 c8 02 c0    	push   DWORD PTR ds:0xc002c848
c001a470:	51                   	push   ecx
c001a471:	e8 55 23 00 00       	call   c001c7cb <Thr::executeDLL(unsigned long, void*)>
c001a476:	83 c4 10             	add    esp,0x10
c001a479:	31 c0                	xor    eax,eax
c001a47b:	31 d2                	xor    edx,edx
c001a47d:	59                   	pop    ecx
c001a47e:	5b                   	pop    ebx
c001a47f:	5e                   	pop    esi
c001a480:	c3                   	ret    

c001a481 <Sys::read(regs*)>:
c001a481:	57                   	push   edi
c001a482:	56                   	push   esi
c001a483:	53                   	push   ebx
c001a484:	83 ec 10             	sub    esp,0x10
c001a487:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a48b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a48e:	83 f8 02             	cmp    eax,0x2
c001a491:	77 10                	ja     c001a4a3 <Sys::read(regs*)+0x22>
c001a493:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a498:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a49b:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001a4a1:	eb 0e                	jmp    c001a4b1 <Sys::read(regs*)+0x30>
c001a4a3:	83 ec 0c             	sub    esp,0xc
c001a4a6:	50                   	push   eax
c001a4a7:	e8 95 70 ff ff       	call   c0011541 <getFromFileDescriptor(int)>
c001a4ac:	83 c4 10             	add    esp,0x10
c001a4af:	89 c1                	mov    ecx,eax
c001a4b1:	83 c8 ff             	or     eax,0xffffffff
c001a4b4:	85 c9                	test   ecx,ecx
c001a4b6:	89 c2                	mov    edx,eax
c001a4b8:	74 28                	je     c001a4e2 <Sys::read(regs*)+0x61>
c001a4ba:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a4c2:	31 ff                	xor    edi,edi
c001a4c4:	83 ec 0c             	sub    esp,0xc
c001a4c7:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a4c9:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a4cd:	52                   	push   edx
c001a4ce:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a4d1:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001a4d4:	57                   	push   edi
c001a4d5:	56                   	push   esi
c001a4d6:	51                   	push   ecx
c001a4d7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a4da:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a4de:	83 c4 20             	add    esp,0x20
c001a4e1:	99                   	cdq    
c001a4e2:	83 c4 10             	add    esp,0x10
c001a4e5:	5b                   	pop    ebx
c001a4e6:	5e                   	pop    esi
c001a4e7:	5f                   	pop    edi
c001a4e8:	c3                   	ret    

c001a4e9 <Sys::sbrk(regs*)>:
c001a4e9:	56                   	push   esi
c001a4ea:	53                   	push   ebx
c001a4eb:	50                   	push   eax
c001a4ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a4f1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a4f5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a4f8:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001a4fb:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001a501:	85 db                	test   ebx,ebx
c001a503:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001a506:	74 02                	je     c001a50a <Sys::sbrk(regs*)+0x21>
c001a508:	79 06                	jns    c001a510 <Sys::sbrk(regs*)+0x27>
c001a50a:	89 f0                	mov    eax,esi
c001a50c:	31 d2                	xor    edx,edx
c001a50e:	eb 2a                	jmp    c001a53a <Sys::sbrk(regs*)+0x51>
c001a510:	83 c8 ff             	or     eax,0xffffffff
c001a513:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001a519:	89 c2                	mov    edx,eax
c001a51b:	77 1d                	ja     c001a53a <Sys::sbrk(regs*)+0x51>
c001a51d:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001a523:	50                   	push   eax
c001a524:	c1 ea 0c             	shr    edx,0xc
c001a527:	68 07 04 00 00       	push   0x407
c001a52c:	52                   	push   edx
c001a52d:	51                   	push   ecx
c001a52e:	e8 2f 79 ff ff       	call   c0011e62 <VAS::allocatePages(int, int)>
c001a533:	89 f0                	mov    eax,esi
c001a535:	31 d2                	xor    edx,edx
c001a537:	83 c4 10             	add    esp,0x10
c001a53a:	59                   	pop    ecx
c001a53b:	5b                   	pop    ebx
c001a53c:	5e                   	pop    esi
c001a53d:	c3                   	ret    

c001a53e <Sys::setCwd(regs*)>:
c001a53e:	83 ec 14             	sub    esp,0x14
c001a541:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a545:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a548:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a54d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a550:	e8 fc 89 ff ff       	call   c0012f51 <setcwd(Process*, char*)>
c001a555:	83 c4 1c             	add    esp,0x1c
c001a558:	99                   	cdq    
c001a559:	c3                   	ret    

c001a55a <Sys::write(regs*)>:
c001a55a:	57                   	push   edi
c001a55b:	56                   	push   esi
c001a55c:	53                   	push   ebx
c001a55d:	83 ec 10             	sub    esp,0x10
c001a560:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a564:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a567:	83 f8 02             	cmp    eax,0x2
c001a56a:	77 10                	ja     c001a57c <Sys::write(regs*)+0x22>
c001a56c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a571:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a574:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001a57a:	eb 0e                	jmp    c001a58a <Sys::write(regs*)+0x30>
c001a57c:	83 ec 0c             	sub    esp,0xc
c001a57f:	50                   	push   eax
c001a580:	e8 bc 6f ff ff       	call   c0011541 <getFromFileDescriptor(int)>
c001a585:	83 c4 10             	add    esp,0x10
c001a588:	89 c1                	mov    ecx,eax
c001a58a:	83 c8 ff             	or     eax,0xffffffff
c001a58d:	85 c9                	test   ecx,ecx
c001a58f:	89 c2                	mov    edx,eax
c001a591:	74 28                	je     c001a5bb <Sys::write(regs*)+0x61>
c001a593:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a59b:	31 ff                	xor    edi,edi
c001a59d:	83 ec 0c             	sub    esp,0xc
c001a5a0:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a5a2:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a5a6:	52                   	push   edx
c001a5a7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a5aa:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001a5ad:	57                   	push   edi
c001a5ae:	56                   	push   esi
c001a5af:	51                   	push   ecx
c001a5b0:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001a5b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a5b7:	83 c4 20             	add    esp,0x20
c001a5ba:	99                   	cdq    
c001a5bb:	83 c4 10             	add    esp,0x10
c001a5be:	5b                   	pop    ebx
c001a5bf:	5e                   	pop    esi
c001a5c0:	5f                   	pop    edi
c001a5c1:	c3                   	ret    

c001a5c2 <Sys::yield(regs*)>:
c001a5c2:	57                   	push   edi
c001a5c3:	56                   	push   esi
c001a5c4:	53                   	push   ebx
c001a5c5:	e8 66 26 00 00       	call   c001cc30 <lockScheduler()>
c001a5ca:	e8 9d 29 00 00       	call   c001cf6c <schedule()>
c001a5cf:	e8 5e 26 00 00       	call   c001cc32 <unlockScheduler()>
c001a5d4:	8b 35 d0 ce 02 c0    	mov    esi,DWORD PTR ds:0xc002ced0
c001a5da:	8b 3d d4 ce 02 c0    	mov    edi,DWORD PTR ds:0xc002ced4
c001a5e0:	89 f0                	mov    eax,esi
c001a5e2:	89 fb                	mov    ebx,edi
c001a5e4:	89 f1                	mov    ecx,esi
c001a5e6:	c1 e0 07             	shl    eax,0x7
c001a5e9:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001a5ed:	25 80 30 0f 00       	and    eax,0xf3080
c001a5f2:	c1 eb 17             	shr    ebx,0x17
c001a5f5:	31 c8                	xor    eax,ecx
c001a5f7:	89 da                	mov    edx,ebx
c001a5f9:	5b                   	pop    ebx
c001a5fa:	5e                   	pop    esi
c001a5fb:	5f                   	pop    edi
c001a5fc:	c3                   	ret    

c001a5fd <sysCallSeekDir(regs*)>:
c001a5fd:	31 c0                	xor    eax,eax
c001a5ff:	31 d2                	xor    edx,edx
c001a601:	c3                   	ret    

c001a602 <sysCallTellDir(regs*)>:
c001a602:	31 c0                	xor    eax,eax
c001a604:	31 d2                	xor    edx,edx
c001a606:	c3                   	ret    

c001a607 <sysCallVerify(regs*)>:
c001a607:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a60b:	31 d2                	xor    edx,edx
c001a60d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a610:	c3                   	ret    

c001a611 <sysCallGetArgc(regs*)>:
c001a611:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a616:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a619:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001a61f:	99                   	cdq    
c001a620:	c3                   	ret    

c001a621 <sysFormatDisk(regs*)>:
c001a621:	56                   	push   esi
c001a622:	53                   	push   ebx
c001a623:	53                   	push   ebx
c001a624:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a628:	8b 1d c8 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c9c8
c001a62e:	eb 25                	jmp    c001a655 <sysFormatDisk(regs*)+0x34>
c001a630:	83 ec 0c             	sub    esp,0xc
c001a633:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001a636:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a638:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001a63b:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001a63e:	50                   	push   eax
c001a63f:	ff 34 85 60 ce 02 c0 	push   DWORD PTR [eax*4-0x3ffd31a0]
c001a646:	53                   	push   ebx
c001a647:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001a64a:	83 c4 20             	add    esp,0x20
c001a64d:	83 f8 08             	cmp    eax,0x8
c001a650:	75 12                	jne    c001a664 <sysFormatDisk(regs*)+0x43>
c001a652:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001a655:	85 db                	test   ebx,ebx
c001a657:	75 d7                	jne    c001a630 <sysFormatDisk(regs*)+0xf>
c001a659:	59                   	pop    ecx
c001a65a:	b8 03 00 00 00       	mov    eax,0x3
c001a65f:	31 d2                	xor    edx,edx
c001a661:	5b                   	pop    ebx
c001a662:	5e                   	pop    esi
c001a663:	c3                   	ret    
c001a664:	85 c0                	test   eax,eax
c001a666:	74 1b                	je     c001a683 <sysFormatDisk(regs*)+0x62>
c001a668:	83 f8 09             	cmp    eax,0x9
c001a66b:	74 0b                	je     c001a678 <sysFormatDisk(regs*)+0x57>
c001a66d:	59                   	pop    ecx
c001a66e:	b8 02 00 00 00       	mov    eax,0x2
c001a673:	31 d2                	xor    edx,edx
c001a675:	5b                   	pop    ebx
c001a676:	5e                   	pop    esi
c001a677:	c3                   	ret    
c001a678:	59                   	pop    ecx
c001a679:	b8 01 00 00 00       	mov    eax,0x1
c001a67e:	31 d2                	xor    edx,edx
c001a680:	5b                   	pop    ebx
c001a681:	5e                   	pop    esi
c001a682:	c3                   	ret    
c001a683:	59                   	pop    ecx
c001a684:	31 c0                	xor    eax,eax
c001a686:	31 d2                	xor    edx,edx
c001a688:	5b                   	pop    ebx
c001a689:	5e                   	pop    esi
c001a68a:	c3                   	ret    

c001a68b <sysSetDiskVolumeLabel(regs*)>:
c001a68b:	56                   	push   esi
c001a68c:	53                   	push   ebx
c001a68d:	53                   	push   ebx
c001a68e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a692:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001a695:	83 f8 19             	cmp    eax,0x19
c001a698:	77 29                	ja     c001a6c3 <sysSetDiskVolumeLabel(regs*)+0x38>
c001a69a:	8b 0c 85 60 ce 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd31a0]
c001a6a1:	85 c9                	test   ecx,ecx
c001a6a3:	74 1e                	je     c001a6c3 <sysSetDiskVolumeLabel(regs*)+0x38>
c001a6a5:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001a6a8:	85 d2                	test   edx,edx
c001a6aa:	74 17                	je     c001a6c3 <sysSetDiskVolumeLabel(regs*)+0x38>
c001a6ac:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001a6b2:	8b 33                	mov    esi,DWORD PTR [ebx]
c001a6b4:	52                   	push   edx
c001a6b5:	50                   	push   eax
c001a6b6:	51                   	push   ecx
c001a6b7:	53                   	push   ebx
c001a6b8:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001a6bb:	83 c4 10             	add    esp,0x10
c001a6be:	99                   	cdq    
c001a6bf:	59                   	pop    ecx
c001a6c0:	5b                   	pop    ebx
c001a6c1:	5e                   	pop    esi
c001a6c2:	c3                   	ret    
c001a6c3:	59                   	pop    ecx
c001a6c4:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001a6c9:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a6ce:	5b                   	pop    ebx
c001a6cf:	5e                   	pop    esi
c001a6d0:	c3                   	ret    

c001a6d1 <sysGetDiskVolumeLabel(regs*)>:
c001a6d1:	57                   	push   edi
c001a6d2:	56                   	push   esi
c001a6d3:	53                   	push   ebx
c001a6d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a6d8:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001a6db:	83 fa 19             	cmp    edx,0x19
c001a6de:	77 34                	ja     c001a714 <sysGetDiskVolumeLabel(regs*)+0x43>
c001a6e0:	8b 0c 95 60 ce 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd31a0]
c001a6e7:	85 c9                	test   ecx,ecx
c001a6e9:	74 29                	je     c001a714 <sysGetDiskVolumeLabel(regs*)+0x43>
c001a6eb:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001a6ee:	85 db                	test   ebx,ebx
c001a6f0:	74 22                	je     c001a714 <sysGetDiskVolumeLabel(regs*)+0x43>
c001a6f2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001a6f5:	85 c0                	test   eax,eax
c001a6f7:	74 1b                	je     c001a714 <sysGetDiskVolumeLabel(regs*)+0x43>
c001a6f9:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001a6ff:	83 ec 0c             	sub    esp,0xc
c001a702:	8b 3e                	mov    edi,DWORD PTR [esi]
c001a704:	50                   	push   eax
c001a705:	53                   	push   ebx
c001a706:	52                   	push   edx
c001a707:	51                   	push   ecx
c001a708:	56                   	push   esi
c001a709:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001a70c:	83 c4 20             	add    esp,0x20
c001a70f:	99                   	cdq    
c001a710:	5b                   	pop    ebx
c001a711:	5e                   	pop    esi
c001a712:	5f                   	pop    edi
c001a713:	c3                   	ret    
c001a714:	5b                   	pop    ebx
c001a715:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001a71a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a71f:	5e                   	pop    esi
c001a720:	5f                   	pop    edi
c001a721:	c3                   	ret    

c001a722 <sysShutdown(regs*)>:
c001a722:	83 ec 0c             	sub    esp,0xc
c001a725:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a729:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a72c:	85 c0                	test   eax,eax
c001a72e:	74 18                	je     c001a748 <sysShutdown(regs*)+0x26>
c001a730:	83 f8 01             	cmp    eax,0x1
c001a733:	74 38                	je     c001a76d <sysShutdown(regs*)+0x4b>
c001a735:	83 f8 02             	cmp    eax,0x2
c001a738:	74 24                	je     c001a75e <sysShutdown(regs*)+0x3c>
c001a73a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a73f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a744:	83 c4 0c             	add    esp,0xc
c001a747:	c3                   	ret    
c001a748:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c001a74d:	8b 10                	mov    edx,DWORD PTR [eax]
c001a74f:	6a 00                	push   0x0
c001a751:	6a 00                	push   0x0
c001a753:	6a 00                	push   0x0
c001a755:	50                   	push   eax
c001a756:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a759:	83 c4 10             	add    esp,0x10
c001a75c:	eb dc                	jmp    c001a73a <sysShutdown(regs*)+0x18>
c001a75e:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c001a763:	8b 10                	mov    edx,DWORD PTR [eax]
c001a765:	6a 00                	push   0x0
c001a767:	6a 00                	push   0x0
c001a769:	6a 01                	push   0x1
c001a76b:	eb e8                	jmp    c001a755 <sysShutdown(regs*)+0x33>
c001a76d:	a1 e0 ce 02 c0       	mov    eax,ds:0xc002cee0
c001a772:	85 c0                	test   eax,eax
c001a774:	74 02                	je     c001a778 <sysShutdown(regs*)+0x56>
c001a776:	ff d0                	call   eax
c001a778:	31 c0                	xor    eax,eax
c001a77a:	31 d2                	xor    edx,edx
c001a77c:	83 c4 0c             	add    esp,0xc
c001a77f:	c3                   	ret    

c001a780 <sysCallRealpath(regs*)>:
c001a780:	83 ec 0c             	sub    esp,0xc
c001a783:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a787:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001a78a:	85 d2                	test   edx,edx
c001a78c:	74 07                	je     c001a795 <sysCallRealpath(regs*)+0x15>
c001a78e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001a791:	85 c0                	test   eax,eax
c001a793:	75 0b                	jne    c001a7a0 <sysCallRealpath(regs*)+0x20>
c001a795:	b8 01 00 00 00       	mov    eax,0x1
c001a79a:	31 d2                	xor    edx,edx
c001a79c:	83 c4 0c             	add    esp,0xc
c001a79f:	c3                   	ret    
c001a7a0:	51                   	push   ecx
c001a7a1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001a7a7:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001a7aa:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001a7b0:	51                   	push   ecx
c001a7b1:	52                   	push   edx
c001a7b2:	50                   	push   eax
c001a7b3:	e8 54 82 ff ff       	call   c0012a0c <standardiseFiles(char*, char const*, char const*)>
c001a7b8:	83 c4 10             	add    esp,0x10
c001a7bb:	31 c0                	xor    eax,eax
c001a7bd:	31 d2                	xor    edx,edx
c001a7bf:	83 c4 0c             	add    esp,0xc
c001a7c2:	c3                   	ret    

c001a7c3 <sysCallReadDir(regs*)>:
c001a7c3:	53                   	push   ebx
c001a7c4:	83 ec 18             	sub    esp,0x18
c001a7c7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a7cb:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001a7ce:	83 f8 02             	cmp    eax,0x2
c001a7d1:	76 53                	jbe    c001a826 <sysCallReadDir(regs*)+0x63>
c001a7d3:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001a7d6:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001a7dc:	77 4f                	ja     c001a82d <sysCallReadDir(regs*)+0x6a>
c001a7de:	83 ec 0c             	sub    esp,0xc
c001a7e1:	50                   	push   eax
c001a7e2:	e8 5a 6d ff ff       	call   c0011541 <getFromFileDescriptor(int)>
c001a7e7:	83 c4 10             	add    esp,0x10
c001a7ea:	85 c0                	test   eax,eax
c001a7ec:	74 50                	je     c001a83e <sysCallReadDir(regs*)+0x7b>
c001a7ee:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a7f6:	83 ec 0c             	sub    esp,0xc
c001a7f9:	8b 10                	mov    edx,DWORD PTR [eax]
c001a7fb:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001a7ff:	51                   	push   ecx
c001a800:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a803:	6a 00                	push   0x0
c001a805:	68 10 01 00 00       	push   0x110
c001a80a:	50                   	push   eax
c001a80b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a80e:	83 c4 20             	add    esp,0x20
c001a811:	85 c0                	test   eax,eax
c001a813:	74 38                	je     c001a84d <sysCallReadDir(regs*)+0x8a>
c001a815:	83 f8 07             	cmp    eax,0x7
c001a818:	74 0c                	je     c001a826 <sysCallReadDir(regs*)+0x63>
c001a81a:	b8 02 00 00 00       	mov    eax,0x2
c001a81f:	31 d2                	xor    edx,edx
c001a821:	83 c4 18             	add    esp,0x18
c001a824:	5b                   	pop    ebx
c001a825:	c3                   	ret    
c001a826:	b8 01 00 00 00       	mov    eax,0x1
c001a82b:	eb f2                	jmp    c001a81f <sysCallReadDir(regs*)+0x5c>
c001a82d:	83 ec 08             	sub    esp,0x8
c001a830:	52                   	push   edx
c001a831:	68 6c a3 02 c0       	push   0xc002a36c
c001a836:	e8 4c 7e ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001a83b:	83 c4 10             	add    esp,0x10
c001a83e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a843:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a848:	83 c4 18             	add    esp,0x18
c001a84b:	5b                   	pop    ebx
c001a84c:	c3                   	ret    
c001a84d:	31 c0                	xor    eax,eax
c001a84f:	eb ce                	jmp    c001a81f <sysCallReadDir(regs*)+0x5c>

c001a851 <sysCallIsATTY(regs*)>:
c001a851:	83 ec 0c             	sub    esp,0xc
c001a854:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a858:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a85b:	83 f8 02             	cmp    eax,0x2
c001a85e:	76 07                	jbe    c001a867 <sysCallIsATTY(regs*)+0x16>
c001a860:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001a865:	75 26                	jne    c001a88d <sysCallIsATTY(regs*)+0x3c>
c001a867:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a86c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a86f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a875:	85 c0                	test   eax,eax
c001a877:	74 24                	je     c001a89d <sysCallIsATTY(regs*)+0x4c>
c001a879:	83 ec 0c             	sub    esp,0xc
c001a87c:	8b 10                	mov    edx,DWORD PTR [eax]
c001a87e:	50                   	push   eax
c001a87f:	ff 12                	call   DWORD PTR [edx]
c001a881:	31 d2                	xor    edx,edx
c001a883:	0f b6 c0             	movzx  eax,al
c001a886:	83 c4 10             	add    esp,0x10
c001a889:	83 c4 0c             	add    esp,0xc
c001a88c:	c3                   	ret    
c001a88d:	83 ec 0c             	sub    esp,0xc
c001a890:	50                   	push   eax
c001a891:	e8 ab 6c ff ff       	call   c0011541 <getFromFileDescriptor(int)>
c001a896:	83 c4 10             	add    esp,0x10
c001a899:	85 c0                	test   eax,eax
c001a89b:	75 dc                	jne    c001a879 <sysCallIsATTY(regs*)+0x28>
c001a89d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a8a2:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a8a7:	83 c4 0c             	add    esp,0xc
c001a8aa:	c3                   	ret    

c001a8ab <sysCallSeek(regs*)>:
c001a8ab:	53                   	push   ebx
c001a8ac:	83 ec 08             	sub    esp,0x8
c001a8af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a8b3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a8b6:	83 f8 02             	cmp    eax,0x2
c001a8b9:	76 4a                	jbe    c001a905 <sysCallSeek(regs*)+0x5a>
c001a8bb:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001a8c0:	77 32                	ja     c001a8f4 <sysCallSeek(regs*)+0x49>
c001a8c2:	83 ec 0c             	sub    esp,0xc
c001a8c5:	50                   	push   eax
c001a8c6:	e8 76 6c ff ff       	call   c0011541 <getFromFileDescriptor(int)>
c001a8cb:	83 c4 0c             	add    esp,0xc
c001a8ce:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001a8d1:	31 db                	xor    ebx,ebx
c001a8d3:	53                   	push   ebx
c001a8d4:	51                   	push   ecx
c001a8d5:	50                   	push   eax
c001a8d6:	e8 fd 83 ff ff       	call   c0012cd8 <File::seek(unsigned long long)>
c001a8db:	83 c4 10             	add    esp,0x10
c001a8de:	85 c0                	test   eax,eax
c001a8e0:	0f 95 c0             	setne  al
c001a8e3:	31 d2                	xor    edx,edx
c001a8e5:	0f b6 c0             	movzx  eax,al
c001a8e8:	f7 d8                	neg    eax
c001a8ea:	83 d2 00             	adc    edx,0x0
c001a8ed:	83 c4 08             	add    esp,0x8
c001a8f0:	f7 da                	neg    edx
c001a8f2:	5b                   	pop    ebx
c001a8f3:	c3                   	ret    
c001a8f4:	83 ec 08             	sub    esp,0x8
c001a8f7:	50                   	push   eax
c001a8f8:	68 db a3 02 c0       	push   0xc002a3db
c001a8fd:	e8 85 7d ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001a902:	83 c4 10             	add    esp,0x10
c001a905:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a90a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a90f:	83 c4 08             	add    esp,0x8
c001a912:	5b                   	pop    ebx
c001a913:	c3                   	ret    

c001a914 <sysCallTell(regs*)>:
c001a914:	53                   	push   ebx
c001a915:	83 ec 08             	sub    esp,0x8
c001a918:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a91c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a91f:	83 f8 02             	cmp    eax,0x2
c001a922:	76 5e                	jbe    c001a982 <sysCallTell(regs*)+0x6e>
c001a924:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001a929:	77 2d                	ja     c001a958 <sysCallTell(regs*)+0x44>
c001a92b:	83 ec 0c             	sub    esp,0xc
c001a92e:	50                   	push   eax
c001a92f:	e8 0d 6c ff ff       	call   c0011541 <getFromFileDescriptor(int)>
c001a934:	5a                   	pop    edx
c001a935:	59                   	pop    ecx
c001a936:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001a939:	50                   	push   eax
c001a93a:	e8 ef 83 ff ff       	call   c0012d2e <File::tell(unsigned long long*)>
c001a93f:	83 c4 10             	add    esp,0x10
c001a942:	85 c0                	test   eax,eax
c001a944:	0f 95 c0             	setne  al
c001a947:	31 d2                	xor    edx,edx
c001a949:	0f b6 c0             	movzx  eax,al
c001a94c:	f7 d8                	neg    eax
c001a94e:	83 d2 00             	adc    edx,0x0
c001a951:	83 c4 08             	add    esp,0x8
c001a954:	f7 da                	neg    edx
c001a956:	5b                   	pop    ebx
c001a957:	c3                   	ret    
c001a958:	83 ec 08             	sub    esp,0x8
c001a95b:	50                   	push   eax
c001a95c:	68 f5 a3 02 c0       	push   0xc002a3f5
c001a961:	e8 21 7d ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001a966:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001a969:	83 c4 10             	add    esp,0x10
c001a96c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a972:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a979:	31 d2                	xor    edx,edx
c001a97b:	31 c0                	xor    eax,eax
c001a97d:	83 c4 08             	add    esp,0x8
c001a980:	5b                   	pop    ebx
c001a981:	c3                   	ret    
c001a982:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a987:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a98c:	83 c4 08             	add    esp,0x8
c001a98f:	5b                   	pop    ebx
c001a990:	c3                   	ret    

c001a991 <sysCallSize(regs*)>:
c001a991:	53                   	push   ebx
c001a992:	83 ec 18             	sub    esp,0x18
c001a995:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a999:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a99c:	83 f8 02             	cmp    eax,0x2
c001a99f:	76 64                	jbe    c001aa05 <sysCallSize(regs*)+0x74>
c001a9a1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001a9a6:	77 33                	ja     c001a9db <sysCallSize(regs*)+0x4a>
c001a9a8:	83 ec 0c             	sub    esp,0xc
c001a9ab:	50                   	push   eax
c001a9ac:	e8 90 6b ff ff       	call   c0011541 <getFromFileDescriptor(int)>
c001a9b1:	83 c4 0c             	add    esp,0xc
c001a9b4:	8d 54 24 13          	lea    edx,[esp+0x13]
c001a9b8:	52                   	push   edx
c001a9b9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001a9bc:	50                   	push   eax
c001a9bd:	e8 04 85 ff ff       	call   c0012ec6 <File::stat(unsigned long long*, bool*)>
c001a9c2:	83 c4 10             	add    esp,0x10
c001a9c5:	85 c0                	test   eax,eax
c001a9c7:	0f 95 c0             	setne  al
c001a9ca:	31 d2                	xor    edx,edx
c001a9cc:	0f b6 c0             	movzx  eax,al
c001a9cf:	f7 d8                	neg    eax
c001a9d1:	83 d2 00             	adc    edx,0x0
c001a9d4:	83 c4 18             	add    esp,0x18
c001a9d7:	f7 da                	neg    edx
c001a9d9:	5b                   	pop    ebx
c001a9da:	c3                   	ret    
c001a9db:	83 ec 08             	sub    esp,0x8
c001a9de:	50                   	push   eax
c001a9df:	68 0f a4 02 c0       	push   0xc002a40f
c001a9e4:	e8 9e 7c ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001a9e9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001a9ec:	83 c4 10             	add    esp,0x10
c001a9ef:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a9f5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a9fc:	31 d2                	xor    edx,edx
c001a9fe:	31 c0                	xor    eax,eax
c001aa00:	83 c4 18             	add    esp,0x18
c001aa03:	5b                   	pop    ebx
c001aa04:	c3                   	ret    
c001aa05:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001aa0a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001aa0f:	83 c4 18             	add    esp,0x18
c001aa12:	5b                   	pop    ebx
c001aa13:	c3                   	ret    

c001aa14 <sysCallSizeFromFilename(regs*)>:
c001aa14:	57                   	push   edi
c001aa15:	56                   	push   esi
c001aa16:	53                   	push   ebx
c001aa17:	83 ec 20             	sub    esp,0x20
c001aa1a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001aa1e:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001aa21:	83 fb 02             	cmp    ebx,0x2
c001aa24:	0f 86 99 00 00 00    	jbe    c001aac3 <sysCallSizeFromFilename(regs*)+0xaf>
c001aa2a:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001aa30:	77 65                	ja     c001aa97 <sysCallSizeFromFilename(regs*)+0x83>
c001aa32:	83 ec 0c             	sub    esp,0xc
c001aa35:	68 14 01 00 00       	push   0x114
c001aa3a:	e8 95 4a ff ff       	call   c000f4d4 <malloc>
c001aa3f:	83 c4 0c             	add    esp,0xc
c001aa42:	89 c6                	mov    esi,eax
c001aa44:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aa49:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001aa4c:	53                   	push   ebx
c001aa4d:	56                   	push   esi
c001aa4e:	e8 63 81 ff ff       	call   c0012bb6 <File::File(char const*, Process*)>
c001aa53:	83 c4 0c             	add    esp,0xc
c001aa56:	8d 44 24 23          	lea    eax,[esp+0x23]
c001aa5a:	50                   	push   eax
c001aa5b:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001aa5e:	56                   	push   esi
c001aa5f:	e8 62 84 ff ff       	call   c0012ec6 <File::stat(unsigned long long*, bool*)>
c001aa64:	83 c4 10             	add    esp,0x10
c001aa67:	85 f6                	test   esi,esi
c001aa69:	74 14                	je     c001aa7f <sysCallSizeFromFilename(regs*)+0x6b>
c001aa6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aa6f:	8b 16                	mov    edx,DWORD PTR [esi]
c001aa71:	83 ec 0c             	sub    esp,0xc
c001aa74:	56                   	push   esi
c001aa75:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001aa78:	83 c4 10             	add    esp,0x10
c001aa7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aa7f:	85 c0                	test   eax,eax
c001aa81:	0f 95 c0             	setne  al
c001aa84:	31 d2                	xor    edx,edx
c001aa86:	0f b6 c0             	movzx  eax,al
c001aa89:	f7 d8                	neg    eax
c001aa8b:	83 d2 00             	adc    edx,0x0
c001aa8e:	83 c4 20             	add    esp,0x20
c001aa91:	f7 da                	neg    edx
c001aa93:	5b                   	pop    ebx
c001aa94:	5e                   	pop    esi
c001aa95:	5f                   	pop    edi
c001aa96:	c3                   	ret    
c001aa97:	83 ec 08             	sub    esp,0x8
c001aa9a:	53                   	push   ebx
c001aa9b:	68 0f a4 02 c0       	push   0xc002a40f
c001aaa0:	e8 e2 7b ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001aaa5:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001aaa8:	83 c4 10             	add    esp,0x10
c001aaab:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001aab1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001aab8:	31 d2                	xor    edx,edx
c001aaba:	83 c4 20             	add    esp,0x20
c001aabd:	31 c0                	xor    eax,eax
c001aabf:	5b                   	pop    ebx
c001aac0:	5e                   	pop    esi
c001aac1:	5f                   	pop    edi
c001aac2:	c3                   	ret    
c001aac3:	83 c4 20             	add    esp,0x20
c001aac6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001aacb:	5b                   	pop    ebx
c001aacc:	ba ff ff ff ff       	mov    edx,0xffffffff
c001aad1:	5e                   	pop    esi
c001aad2:	5f                   	pop    edi
c001aad3:	c3                   	ret    

c001aad4 <sysCallClose(regs*)>:
c001aad4:	53                   	push   ebx
c001aad5:	83 ec 08             	sub    esp,0x8
c001aad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aadc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001aadf:	83 f8 02             	cmp    eax,0x2
c001aae2:	76 50                	jbe    c001ab34 <sysCallClose(regs*)+0x60>
c001aae4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001aae9:	74 58                	je     c001ab43 <sysCallClose(regs*)+0x6f>
c001aaeb:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001aaf0:	74 60                	je     c001ab52 <sysCallClose(regs*)+0x7e>
c001aaf2:	77 2f                	ja     c001ab23 <sysCallClose(regs*)+0x4f>
c001aaf4:	83 ec 0c             	sub    esp,0xc
c001aaf7:	50                   	push   eax
c001aaf8:	e8 44 6a ff ff       	call   c0011541 <getFromFileDescriptor(int)>
c001aafd:	89 c3                	mov    ebx,eax
c001aaff:	89 04 24             	mov    DWORD PTR [esp],eax
c001ab02:	e8 71 81 ff ff       	call   c0012c78 <File::close()>
c001ab07:	83 c4 10             	add    esp,0x10
c001ab0a:	85 db                	test   ebx,ebx
c001ab0c:	74 0c                	je     c001ab1a <sysCallClose(regs*)+0x46>
c001ab0e:	83 ec 0c             	sub    esp,0xc
c001ab11:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ab13:	53                   	push   ebx
c001ab14:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ab17:	83 c4 10             	add    esp,0x10
c001ab1a:	31 c0                	xor    eax,eax
c001ab1c:	31 d2                	xor    edx,edx
c001ab1e:	83 c4 08             	add    esp,0x8
c001ab21:	5b                   	pop    ebx
c001ab22:	c3                   	ret    
c001ab23:	83 ec 08             	sub    esp,0x8
c001ab26:	50                   	push   eax
c001ab27:	68 90 a3 02 c0       	push   0xc002a390
c001ab2c:	e8 56 7b ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001ab31:	83 c4 10             	add    esp,0x10
c001ab34:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ab39:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ab3e:	83 c4 08             	add    esp,0x8
c001ab41:	5b                   	pop    ebx
c001ab42:	c3                   	ret    
c001ab43:	83 ec 0c             	sub    esp,0xc
c001ab46:	68 2a a4 02 c0       	push   0xc002a42a
c001ab4b:	e8 37 7b ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001ab50:	eb c5                	jmp    c001ab17 <sysCallClose(regs*)+0x43>
c001ab52:	83 ec 0c             	sub    esp,0xc
c001ab55:	68 38 a4 02 c0       	push   0xc002a438
c001ab5a:	eb ef                	jmp    c001ab4b <sysCallClose(regs*)+0x77>

c001ab5c <sysCallOpenDir(regs*)>:
c001ab5c:	56                   	push   esi
c001ab5d:	53                   	push   ebx
c001ab5e:	53                   	push   ebx
c001ab5f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ab63:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001ab66:	85 f6                	test   esi,esi
c001ab68:	74 59                	je     c001abc3 <sysCallOpenDir(regs*)+0x67>
c001ab6a:	83 ec 0c             	sub    esp,0xc
c001ab6d:	68 14 01 00 00       	push   0x114
c001ab72:	e8 5d 49 ff ff       	call   c000f4d4 <malloc>
c001ab77:	83 c4 0c             	add    esp,0xc
c001ab7a:	89 c6                	mov    esi,eax
c001ab7c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ab81:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ab84:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ab87:	56                   	push   esi
c001ab88:	e8 ff 84 ff ff       	call   c001308c <Directory::Directory(char const*, Process*)>
c001ab8d:	83 c4 10             	add    esp,0x10
c001ab90:	85 f6                	test   esi,esi
c001ab92:	74 2f                	je     c001abc3 <sysCallOpenDir(regs*)+0x67>
c001ab94:	83 ec 0c             	sub    esp,0xc
c001ab97:	56                   	push   esi
c001ab98:	e8 53 85 ff ff       	call   c00130f0 <Directory::open()>
c001ab9d:	83 c4 10             	add    esp,0x10
c001aba0:	85 c0                	test   eax,eax
c001aba2:	75 1f                	jne    c001abc3 <sysCallOpenDir(regs*)+0x67>
c001aba4:	83 ec 0c             	sub    esp,0xc
c001aba7:	56                   	push   esi
c001aba8:	e8 9f 66 ff ff       	call   c001124c <UnixFile::getFileDescriptor()>
c001abad:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001abb0:	83 c4 10             	add    esp,0x10
c001abb3:	89 02                	mov    DWORD PTR [edx],eax
c001abb5:	c1 f8 1f             	sar    eax,0x1f
c001abb8:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001abbb:	31 c0                	xor    eax,eax
c001abbd:	59                   	pop    ecx
c001abbe:	31 d2                	xor    edx,edx
c001abc0:	5b                   	pop    ebx
c001abc1:	5e                   	pop    esi
c001abc2:	c3                   	ret    
c001abc3:	59                   	pop    ecx
c001abc4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001abc9:	ba ff ff ff ff       	mov    edx,0xffffffff
c001abce:	5b                   	pop    ebx
c001abcf:	5e                   	pop    esi
c001abd0:	c3                   	ret    

c001abd1 <sysCallCloseDir(regs*)>:
c001abd1:	53                   	push   ebx
c001abd2:	83 ec 08             	sub    esp,0x8
c001abd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abd9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001abdc:	83 f8 02             	cmp    eax,0x2
c001abdf:	76 47                	jbe    c001ac28 <sysCallCloseDir(regs*)+0x57>
c001abe1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001abe6:	77 2f                	ja     c001ac17 <sysCallCloseDir(regs*)+0x46>
c001abe8:	83 ec 0c             	sub    esp,0xc
c001abeb:	50                   	push   eax
c001abec:	e8 50 69 ff ff       	call   c0011541 <getFromFileDescriptor(int)>
c001abf1:	89 c3                	mov    ebx,eax
c001abf3:	89 04 24             	mov    DWORD PTR [esp],eax
c001abf6:	e8 51 85 ff ff       	call   c001314c <Directory::close()>
c001abfb:	83 c4 10             	add    esp,0x10
c001abfe:	85 db                	test   ebx,ebx
c001ac00:	74 0c                	je     c001ac0e <sysCallCloseDir(regs*)+0x3d>
c001ac02:	83 ec 0c             	sub    esp,0xc
c001ac05:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ac07:	53                   	push   ebx
c001ac08:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ac0b:	83 c4 10             	add    esp,0x10
c001ac0e:	31 c0                	xor    eax,eax
c001ac10:	31 d2                	xor    edx,edx
c001ac12:	83 c4 08             	add    esp,0x8
c001ac15:	5b                   	pop    ebx
c001ac16:	c3                   	ret    
c001ac17:	83 ec 08             	sub    esp,0x8
c001ac1a:	50                   	push   eax
c001ac1b:	68 b8 a3 02 c0       	push   0xc002a3b8
c001ac20:	e8 62 7a ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001ac25:	83 c4 10             	add    esp,0x10
c001ac28:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ac2d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ac32:	83 c4 08             	add    esp,0x8
c001ac35:	5b                   	pop    ebx
c001ac36:	c3                   	ret    

c001ac37 <sysCallMakeDir(regs*)>:
c001ac37:	56                   	push   esi
c001ac38:	53                   	push   ebx
c001ac39:	83 ec 10             	sub    esp,0x10
c001ac3c:	68 14 01 00 00       	push   0x114
c001ac41:	e8 8e 48 ff ff       	call   c000f4d4 <malloc>
c001ac46:	83 c4 0c             	add    esp,0xc
c001ac49:	89 c3                	mov    ebx,eax
c001ac4b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ac50:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ac53:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ac57:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001ac5a:	53                   	push   ebx
c001ac5b:	e8 2c 84 ff ff       	call   c001308c <Directory::Directory(char const*, Process*)>
c001ac60:	83 c4 10             	add    esp,0x10
c001ac63:	85 db                	test   ebx,ebx
c001ac65:	74 32                	je     c001ac99 <sysCallMakeDir(regs*)+0x62>
c001ac67:	83 ec 0c             	sub    esp,0xc
c001ac6a:	53                   	push   ebx
c001ac6b:	e8 60 86 ff ff       	call   c00132d0 <Directory::create()>
c001ac70:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ac73:	89 c6                	mov    esi,eax
c001ac75:	e8 d2 84 ff ff       	call   c001314c <Directory::close()>
c001ac7a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ac7c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ac7f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ac82:	83 c4 10             	add    esp,0x10
c001ac85:	31 c0                	xor    eax,eax
c001ac87:	59                   	pop    ecx
c001ac88:	85 f6                	test   esi,esi
c001ac8a:	5b                   	pop    ebx
c001ac8b:	0f 95 c0             	setne  al
c001ac8e:	5e                   	pop    esi
c001ac8f:	31 d2                	xor    edx,edx
c001ac91:	f7 d8                	neg    eax
c001ac93:	83 d2 00             	adc    edx,0x0
c001ac96:	f7 da                	neg    edx
c001ac98:	c3                   	ret    
c001ac99:	59                   	pop    ecx
c001ac9a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ac9f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001aca4:	5b                   	pop    ebx
c001aca5:	5e                   	pop    esi
c001aca6:	c3                   	ret    

c001aca7 <sysCallWait(regs*)>:
c001aca7:	83 ec 10             	sub    esp,0x10
c001acaa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001acae:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001acb1:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001acb4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001acb7:	e8 2b 24 00 00       	call   c001d0e7 <waitTask(int, int*, int)>
c001acbc:	83 c4 1c             	add    esp,0x1c
c001acbf:	99                   	cdq    
c001acc0:	c3                   	ret    

c001acc1 <sysCallNotImpl(regs*)>:
c001acc1:	83 ec 18             	sub    esp,0x18
c001acc4:	68 46 a4 02 c0       	push   0xc002a446
c001acc9:	e8 d3 ea ff ff       	call   c00197a1 <Krnl::panic(char const*)>
c001acce:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001acd3:	ba ff ff ff ff       	mov    edx,0xffffffff
c001acd8:	83 c4 1c             	add    esp,0x1c
c001acdb:	c3                   	ret    

c001acdc <sysPanic(regs*)>:
c001acdc:	83 ec 18             	sub    esp,0x18
c001acdf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ace3:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001ace6:	e8 b6 ea ff ff       	call   c00197a1 <Krnl::panic(char const*)>
c001aceb:	c7 04 24 60 a4 02 c0 	mov    DWORD PTR [esp],0xc002a460
c001acf2:	e8 aa ea ff ff       	call   c00197a1 <Krnl::panic(char const*)>
c001acf7:	b8 01 00 00 00       	mov    eax,0x1
c001acfc:	31 d2                	xor    edx,edx
c001acfe:	83 c4 1c             	add    esp,0x1c
c001ad01:	c3                   	ret    

c001ad02 <sysCallRmdir(regs*)>:
c001ad02:	56                   	push   esi
c001ad03:	53                   	push   ebx
c001ad04:	83 ec 20             	sub    esp,0x20
c001ad07:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ad0b:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001ad0e:	68 14 01 00 00       	push   0x114
c001ad13:	e8 bc 47 ff ff       	call   c000f4d4 <malloc>
c001ad18:	83 c4 0c             	add    esp,0xc
c001ad1b:	89 c3                	mov    ebx,eax
c001ad1d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad22:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ad25:	56                   	push   esi
c001ad26:	53                   	push   ebx
c001ad27:	e8 8a 7e ff ff       	call   c0012bb6 <File::File(char const*, Process*)>
c001ad2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ad2f:	e8 5e 80 ff ff       	call   c0012d92 <File::unlink()>
c001ad34:	83 c4 10             	add    esp,0x10
c001ad37:	85 db                	test   ebx,ebx
c001ad39:	74 14                	je     c001ad4f <sysCallRmdir(regs*)+0x4d>
c001ad3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ad3f:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ad41:	83 ec 0c             	sub    esp,0xc
c001ad44:	53                   	push   ebx
c001ad45:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001ad48:	83 c4 10             	add    esp,0x10
c001ad4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad4f:	85 c0                	test   eax,eax
c001ad51:	0f 95 c0             	setne  al
c001ad54:	31 d2                	xor    edx,edx
c001ad56:	0f b6 c0             	movzx  eax,al
c001ad59:	f7 d8                	neg    eax
c001ad5b:	83 d2 00             	adc    edx,0x0
c001ad5e:	83 c4 14             	add    esp,0x14
c001ad61:	f7 da                	neg    edx
c001ad63:	5b                   	pop    ebx
c001ad64:	5e                   	pop    esi
c001ad65:	c3                   	ret    

c001ad66 <sysCallUnlink(regs*)>:
c001ad66:	56                   	push   esi
c001ad67:	53                   	push   ebx
c001ad68:	83 ec 20             	sub    esp,0x20
c001ad6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ad6f:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001ad72:	68 14 01 00 00       	push   0x114
c001ad77:	e8 58 47 ff ff       	call   c000f4d4 <malloc>
c001ad7c:	83 c4 0c             	add    esp,0xc
c001ad7f:	89 c3                	mov    ebx,eax
c001ad81:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad86:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ad89:	56                   	push   esi
c001ad8a:	53                   	push   ebx
c001ad8b:	e8 26 7e ff ff       	call   c0012bb6 <File::File(char const*, Process*)>
c001ad90:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ad93:	e8 fa 7f ff ff       	call   c0012d92 <File::unlink()>
c001ad98:	83 c4 10             	add    esp,0x10
c001ad9b:	85 db                	test   ebx,ebx
c001ad9d:	74 14                	je     c001adb3 <sysCallUnlink(regs*)+0x4d>
c001ad9f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ada3:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ada5:	83 ec 0c             	sub    esp,0xc
c001ada8:	53                   	push   ebx
c001ada9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001adac:	83 c4 10             	add    esp,0x10
c001adaf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001adb3:	85 c0                	test   eax,eax
c001adb5:	0f 95 c0             	setne  al
c001adb8:	31 d2                	xor    edx,edx
c001adba:	0f b6 c0             	movzx  eax,al
c001adbd:	f7 d8                	neg    eax
c001adbf:	83 d2 00             	adc    edx,0x0
c001adc2:	83 c4 14             	add    esp,0x14
c001adc5:	f7 da                	neg    edx
c001adc7:	5b                   	pop    ebx
c001adc8:	5e                   	pop    esi
c001adc9:	c3                   	ret    

c001adca <sysCallGetArgv(regs*)>:
c001adca:	83 ec 0c             	sub    esp,0xc
c001adcd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001add1:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001add4:	85 c0                	test   eax,eax
c001add6:	78 2b                	js     c001ae03 <sysCallGetArgv(regs*)+0x39>
c001add8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001adde:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001ade1:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001ade7:	7d 1a                	jge    c001ae03 <sysCallGetArgv(regs*)+0x39>
c001ade9:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001adf0:	85 c0                	test   eax,eax
c001adf2:	74 17                	je     c001ae0b <sysCallGetArgv(regs*)+0x41>
c001adf4:	83 ec 08             	sub    esp,0x8
c001adf7:	50                   	push   eax
c001adf8:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001adfb:	e8 2a 59 fe ff       	call   c000072a <strcpy>
c001ae00:	83 c4 10             	add    esp,0x10
c001ae03:	31 c0                	xor    eax,eax
c001ae05:	31 d2                	xor    edx,edx
c001ae07:	83 c4 0c             	add    esp,0xc
c001ae0a:	c3                   	ret    
c001ae0b:	b8 01 00 00 00       	mov    eax,0x1
c001ae10:	31 d2                	xor    edx,edx
c001ae12:	83 c4 0c             	add    esp,0xc
c001ae15:	c3                   	ret    

c001ae16 <sysCallTTYName(regs*)>:
c001ae16:	56                   	push   esi
c001ae17:	53                   	push   ebx
c001ae18:	53                   	push   ebx
c001ae19:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ae1d:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001ae20:	85 c0                	test   eax,eax
c001ae22:	74 5f                	je     c001ae83 <sysCallTTYName(regs*)+0x6d>
c001ae24:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001ae27:	83 f8 02             	cmp    eax,0x2
c001ae2a:	77 3e                	ja     c001ae6a <sysCallTTYName(regs*)+0x54>
c001ae2c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae31:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ae34:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001ae3a:	85 db                	test   ebx,ebx
c001ae3c:	74 45                	je     c001ae83 <sysCallTTYName(regs*)+0x6d>
c001ae3e:	83 ec 0c             	sub    esp,0xc
c001ae41:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae43:	53                   	push   ebx
c001ae44:	ff 10                	call   DWORD PTR [eax]
c001ae46:	83 c4 10             	add    esp,0x10
c001ae49:	84 c0                	test   al,al
c001ae4b:	74 41                	je     c001ae8e <sysCallTTYName(regs*)+0x78>
c001ae4d:	83 ec 08             	sub    esp,0x8
c001ae50:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001ae56:	53                   	push   ebx
c001ae57:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001ae5a:	e8 cb 58 fe ff       	call   c000072a <strcpy>
c001ae5f:	83 c4 10             	add    esp,0x10
c001ae62:	31 c0                	xor    eax,eax
c001ae64:	59                   	pop    ecx
c001ae65:	31 d2                	xor    edx,edx
c001ae67:	5b                   	pop    ebx
c001ae68:	5e                   	pop    esi
c001ae69:	c3                   	ret    
c001ae6a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001ae6f:	74 bb                	je     c001ae2c <sysCallTTYName(regs*)+0x16>
c001ae71:	83 ec 0c             	sub    esp,0xc
c001ae74:	50                   	push   eax
c001ae75:	e8 c7 66 ff ff       	call   c0011541 <getFromFileDescriptor(int)>
c001ae7a:	83 c4 10             	add    esp,0x10
c001ae7d:	89 c3                	mov    ebx,eax
c001ae7f:	85 db                	test   ebx,ebx
c001ae81:	75 bb                	jne    c001ae3e <sysCallTTYName(regs*)+0x28>
c001ae83:	59                   	pop    ecx
c001ae84:	b8 01 00 00 00       	mov    eax,0x1
c001ae89:	31 d2                	xor    edx,edx
c001ae8b:	5b                   	pop    ebx
c001ae8c:	5e                   	pop    esi
c001ae8d:	c3                   	ret    
c001ae8e:	59                   	pop    ecx
c001ae8f:	b8 02 00 00 00       	mov    eax,0x2
c001ae94:	31 d2                	xor    edx,edx
c001ae96:	5b                   	pop    ebx
c001ae97:	5e                   	pop    esi
c001ae98:	c3                   	ret    

c001ae99 <sysCallUSleep(regs*)>:
c001ae99:	83 ec 14             	sub    esp,0x14
c001ae9c:	b8 e8 03 00 00       	mov    eax,0x3e8
c001aea1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001aea5:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001aeac:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001aeaf:	01 ca                	add    edx,ecx
c001aeb1:	52                   	push   edx
c001aeb2:	50                   	push   eax
c001aeb3:	e8 c8 22 00 00       	call   c001d180 <nanoSleep(unsigned long long)>
c001aeb8:	31 c0                	xor    eax,eax
c001aeba:	31 d2                	xor    edx,edx
c001aebc:	83 c4 1c             	add    esp,0x1c
c001aebf:	c3                   	ret    

c001aec0 <sysCallSpawn(regs*)>:
c001aec0:	56                   	push   esi
c001aec1:	53                   	push   ebx
c001aec2:	53                   	push   ebx
c001aec3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aec7:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001aeca:	85 f6                	test   esi,esi
c001aecc:	75 08                	jne    c001aed6 <sysCallSpawn(regs*)+0x16>
c001aece:	59                   	pop    ecx
c001aecf:	31 c0                	xor    eax,eax
c001aed1:	31 d2                	xor    edx,edx
c001aed3:	5b                   	pop    ebx
c001aed4:	5e                   	pop    esi
c001aed5:	c3                   	ret    
c001aed6:	83 ec 0c             	sub    esp,0xc
c001aed9:	68 3f 07 00 00       	push   0x73f
c001aede:	e8 f1 45 ff ff       	call   c000f4d4 <malloc>
c001aee3:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001aee6:	89 c6                	mov    esi,eax
c001aee8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aeed:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001aef0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001aef3:	56                   	push   esi
c001aef4:	e8 87 19 00 00       	call   c001c880 <Process::Process(char const*, Process*, char**)>
c001aef9:	83 c4 20             	add    esp,0x20
c001aefc:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001af03:	75 c9                	jne    c001aece <sysCallSpawn(regs*)+0xe>
c001af05:	83 ec 0c             	sub    esp,0xc
c001af08:	56                   	push   esi
c001af09:	e8 38 1f 00 00       	call   c001ce46 <Process::createUserThread()>
c001af0e:	8b 06                	mov    eax,DWORD PTR [esi]
c001af10:	83 c4 10             	add    esp,0x10
c001af13:	99                   	cdq    
c001af14:	59                   	pop    ecx
c001af15:	5b                   	pop    ebx
c001af16:	5e                   	pop    esi
c001af17:	c3                   	ret    

c001af18 <sysCallGetEnv(regs*)>:
c001af18:	57                   	push   edi
c001af19:	56                   	push   esi
c001af1a:	53                   	push   ebx
c001af1b:	83 ec 1c             	sub    esp,0x1c
c001af1e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001af22:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001af27:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001af2a:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001af2d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001af30:	e8 88 e7 ff ff       	call   c00196bd <Krnl::getProcessTotalEnvCount(Process*)>
c001af35:	83 c4 10             	add    esp,0x10
c001af38:	39 c7                	cmp    edi,eax
c001af3a:	7c 14                	jl     c001af50 <sysCallGetEnv(regs*)+0x38>
c001af3c:	85 f6                	test   esi,esi
c001af3e:	75 0b                	jne    c001af4b <sysCallGetEnv(regs*)+0x33>
c001af40:	83 c4 10             	add    esp,0x10
c001af43:	31 c0                	xor    eax,eax
c001af45:	5b                   	pop    ebx
c001af46:	31 d2                	xor    edx,edx
c001af48:	5e                   	pop    esi
c001af49:	5f                   	pop    edi
c001af4a:	c3                   	ret    
c001af4b:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001af4e:	eb f0                	jmp    c001af40 <sysCallGetEnv(regs*)+0x28>
c001af50:	8d 44 24 08          	lea    eax,[esp+0x8]
c001af54:	52                   	push   edx
c001af55:	57                   	push   edi
c001af56:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001af5c:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001af5f:	50                   	push   eax
c001af60:	e8 78 e7 ff ff       	call   c00196dd <Krnl::getProcessEnvPair(Process*, int)>
c001af65:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001af68:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af6c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001af70:	83 c4 0c             	add    esp,0xc
c001af73:	85 c9                	test   ecx,ecx
c001af75:	75 23                	jne    c001af9a <sysCallGetEnv(regs*)+0x82>
c001af77:	83 ec 0c             	sub    esp,0xc
c001af7a:	50                   	push   eax
c001af7b:	e8 28 57 fe ff       	call   c00006a8 <strlen>
c001af80:	89 3c 24             	mov    DWORD PTR [esp],edi
c001af83:	89 c3                	mov    ebx,eax
c001af85:	e8 1e 57 fe ff       	call   c00006a8 <strlen>
c001af8a:	83 c4 10             	add    esp,0x10
c001af8d:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001af91:	83 c4 10             	add    esp,0x10
c001af94:	31 d2                	xor    edx,edx
c001af96:	5b                   	pop    ebx
c001af97:	5e                   	pop    esi
c001af98:	5f                   	pop    edi
c001af99:	c3                   	ret    
c001af9a:	83 ec 08             	sub    esp,0x8
c001af9d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001afa0:	50                   	push   eax
c001afa1:	56                   	push   esi
c001afa2:	e8 83 57 fe ff       	call   c000072a <strcpy>
c001afa7:	58                   	pop    eax
c001afa8:	5a                   	pop    edx
c001afa9:	68 6f a4 02 c0       	push   0xc002a46f
c001afae:	56                   	push   esi
c001afaf:	e8 2d 58 fe ff       	call   c00007e1 <strcat>
c001afb4:	59                   	pop    ecx
c001afb5:	5b                   	pop    ebx
c001afb6:	57                   	push   edi
c001afb7:	56                   	push   esi
c001afb8:	e8 24 58 fe ff       	call   c00007e1 <strcat>
c001afbd:	83 c4 10             	add    esp,0x10
c001afc0:	e9 7b ff ff ff       	jmp    c001af40 <sysCallGetEnv(regs*)+0x28>

c001afc5 <sysAppSettings(regs*)>:
c001afc5:	53                   	push   ebx
c001afc6:	83 ec 08             	sub    esp,0x8
c001afc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afcd:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001afd0:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001afd6:	25 e0 1f 00 00       	and    eax,0x1fe0
c001afdb:	66 3d c0 09          	cmp    ax,0x9c0
c001afdf:	75 2f                	jne    c001b010 <sysAppSettings(regs*)+0x4b>
c001afe1:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001afe7:	83 e0 1f             	and    eax,0x1f
c001afea:	3c 01                	cmp    al,0x1
c001afec:	74 2e                	je     c001b01c <sysAppSettings(regs*)+0x57>
c001afee:	3c 07                	cmp    al,0x7
c001aff0:	0f 84 bd 00 00 00    	je     c001b0b3 <sysAppSettings(regs*)+0xee>
c001aff6:	84 c0                	test   al,al
c001aff8:	0f 84 dc 00 00 00    	je     c001b0da <sysAppSettings(regs*)+0x115>
c001affe:	3c 08                	cmp    al,0x8
c001b000:	74 6d                	je     c001b06f <sysAppSettings(regs*)+0xaa>
c001b002:	0f b6 c0             	movzx  eax,al
c001b005:	83 c4 08             	add    esp,0x8
c001b008:	05 e8 03 00 00       	add    eax,0x3e8
c001b00d:	5b                   	pop    ebx
c001b00e:	99                   	cdq    
c001b00f:	c3                   	ret    
c001b010:	b8 01 00 00 00       	mov    eax,0x1
c001b015:	31 d2                	xor    edx,edx
c001b017:	83 c4 08             	add    esp,0x8
c001b01a:	5b                   	pop    ebx
c001b01b:	c3                   	ret    
c001b01c:	51                   	push   ecx
c001b01d:	68 00 01 00 00       	push   0x100
c001b022:	6a 00                	push   0x0
c001b024:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b029:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b02c:	83 c0 0c             	add    eax,0xc
c001b02f:	50                   	push   eax
c001b030:	e8 56 56 fe ff       	call   c000068b <memset>
c001b035:	83 c4 0c             	add    esp,0xc
c001b038:	68 ff 00 00 00       	push   0xff
c001b03d:	53                   	push   ebx
c001b03e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b043:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b046:	83 c0 0c             	add    eax,0xc
c001b049:	50                   	push   eax
c001b04a:	e8 06 56 fe ff       	call   c0000655 <memcpy>
c001b04f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b054:	5b                   	pop    ebx
c001b055:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b058:	5a                   	pop    edx
c001b059:	8d 50 0c             	lea    edx,[eax+0xc]
c001b05c:	52                   	push   edx
c001b05d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b063:	e8 54 56 ff ff       	call   c00106bc <VgaText::setTitle(char*)>
c001b068:	83 c4 10             	add    esp,0x10
c001b06b:	31 c0                	xor    eax,eax
c001b06d:	eb a6                	jmp    c001b015 <sysAppSettings(regs*)+0x50>
c001b06f:	83 ec 08             	sub    esp,0x8
c001b072:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001b078:	83 e0 0f             	and    eax,0xf
c001b07b:	50                   	push   eax
c001b07c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b081:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b084:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b08a:	e8 1d 56 ff ff       	call   c00106ac <VgaText::setTitleColour(VgaColour)>
c001b08f:	58                   	pop    eax
c001b090:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001b096:	5a                   	pop    edx
c001b097:	c1 e8 04             	shr    eax,0x4
c001b09a:	83 e0 0f             	and    eax,0xf
c001b09d:	50                   	push   eax
c001b09e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b0a3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b0a6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b0ac:	e8 eb 55 ff ff       	call   c001069c <VgaText::setTitleTextColour(VgaColour)>
c001b0b1:	eb b5                	jmp    c001b068 <sysAppSettings(regs*)+0xa3>
c001b0b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b0b8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b0bb:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001b0c1:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001b0c7:	c0 e8 06             	shr    al,0x6
c001b0ca:	83 e0 01             	and    eax,0x1
c001b0cd:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001b0d3:	31 c0                	xor    eax,eax
c001b0d5:	e9 3b ff ff ff       	jmp    c001b015 <sysAppSettings(regs*)+0x50>
c001b0da:	b8 02 00 00 00       	mov    eax,0x2
c001b0df:	e9 31 ff ff ff       	jmp    c001b015 <sysAppSettings(regs*)+0x50>

c001b0e4 <sysSetFatAttrib(regs*)>:
c001b0e4:	57                   	push   edi
c001b0e5:	56                   	push   esi
c001b0e6:	53                   	push   ebx
c001b0e7:	83 ec 1c             	sub    esp,0x1c
c001b0ea:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b0ee:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001b0f1:	68 14 01 00 00       	push   0x114
c001b0f6:	e8 d9 43 ff ff       	call   c000f4d4 <malloc>
c001b0fb:	83 c4 0c             	add    esp,0xc
c001b0fe:	89 c3                	mov    ebx,eax
c001b100:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b105:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b108:	57                   	push   edi
c001b109:	53                   	push   ebx
c001b10a:	e8 a7 7a ff ff       	call   c0012bb6 <File::File(char const*, Process*)>
c001b10f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b112:	83 c4 0c             	add    esp,0xc
c001b115:	0f b6 d4             	movzx  edx,ah
c001b118:	0f b6 c0             	movzx  eax,al
c001b11b:	52                   	push   edx
c001b11c:	50                   	push   eax
c001b11d:	53                   	push   ebx
c001b11e:	e8 09 7d ff ff       	call   c0012e2c <File::chfatattr(unsigned char, unsigned char)>
c001b123:	83 c4 10             	add    esp,0x10
c001b126:	85 db                	test   ebx,ebx
c001b128:	74 14                	je     c001b13e <sysSetFatAttrib(regs*)+0x5a>
c001b12a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b12e:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b130:	83 ec 0c             	sub    esp,0xc
c001b133:	53                   	push   ebx
c001b134:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b137:	83 c4 10             	add    esp,0x10
c001b13a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b13e:	85 c0                	test   eax,eax
c001b140:	0f 95 c0             	setne  al
c001b143:	31 d2                	xor    edx,edx
c001b145:	0f b6 c0             	movzx  eax,al
c001b148:	f7 d8                	neg    eax
c001b14a:	83 d2 00             	adc    edx,0x0
c001b14d:	83 c4 10             	add    esp,0x10
c001b150:	f7 da                	neg    edx
c001b152:	5b                   	pop    ebx
c001b153:	5e                   	pop    esi
c001b154:	5f                   	pop    edi
c001b155:	c3                   	ret    

c001b156 <sysPipe(regs*)>:
c001b156:	57                   	push   edi
c001b157:	56                   	push   esi
c001b158:	53                   	push   ebx
c001b159:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b15d:	83 ec 0c             	sub    esp,0xc
c001b160:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001b163:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001b166:	6a 20                	push   0x20
c001b168:	e8 67 43 ff ff       	call   c000f4d4 <malloc>
c001b16d:	89 c3                	mov    ebx,eax
c001b16f:	58                   	pop    eax
c001b170:	5a                   	pop    edx
c001b171:	68 00 50 00 00       	push   0x5000
c001b176:	53                   	push   ebx
c001b177:	e8 c8 4d ff ff       	call   c000ff44 <Pipe::Pipe(int)>
c001b17c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b17f:	e8 c8 60 ff ff       	call   c001124c <UnixFile::getFileDescriptor()>
c001b184:	89 07                	mov    DWORD PTR [edi],eax
c001b186:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b189:	e8 be 60 ff ff       	call   c001124c <UnixFile::getFileDescriptor()>
c001b18e:	83 c4 10             	add    esp,0x10
c001b191:	89 06                	mov    DWORD PTR [esi],eax
c001b193:	31 d2                	xor    edx,edx
c001b195:	5b                   	pop    ebx
c001b196:	31 c0                	xor    eax,eax
c001b198:	5e                   	pop    esi
c001b199:	5f                   	pop    edi
c001b19a:	c3                   	ret    

c001b19b <sysGetUnixTime(regs*)>:
c001b19b:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c001b1a0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b1a6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b1aa:	e9 e3 83 ff ff       	jmp    c0013592 <Clock::timeInSecondsLocal()>

c001b1af <string_ends_with(char const*, char const*)>:
c001b1af:	57                   	push   edi
c001b1b0:	56                   	push   esi
c001b1b1:	53                   	push   ebx
c001b1b2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b1b6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b1ba:	83 ec 0c             	sub    esp,0xc
c001b1bd:	53                   	push   ebx
c001b1be:	e8 e5 54 fe ff       	call   c00006a8 <strlen>
c001b1c3:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b1c6:	89 c6                	mov    esi,eax
c001b1c8:	e8 db 54 fe ff       	call   c00006a8 <strlen>
c001b1cd:	83 c4 10             	add    esp,0x10
c001b1d0:	39 c6                	cmp    esi,eax
c001b1d2:	7d 06                	jge    c001b1da <string_ends_with(char const*, char const*)+0x2b>
c001b1d4:	5b                   	pop    ebx
c001b1d5:	31 c0                	xor    eax,eax
c001b1d7:	5e                   	pop    esi
c001b1d8:	5f                   	pop    edi
c001b1d9:	c3                   	ret    
c001b1da:	83 ec 08             	sub    esp,0x8
c001b1dd:	29 c6                	sub    esi,eax
c001b1df:	57                   	push   edi
c001b1e0:	01 f3                	add    ebx,esi
c001b1e2:	53                   	push   ebx
c001b1e3:	e8 93 55 fe ff       	call   c000077b <strcmp>
c001b1e8:	83 c4 10             	add    esp,0x10
c001b1eb:	85 c0                	test   eax,eax
c001b1ed:	5b                   	pop    ebx
c001b1ee:	0f 94 c0             	sete   al
c001b1f1:	5e                   	pop    esi
c001b1f2:	0f b6 c0             	movzx  eax,al
c001b1f5:	5f                   	pop    edi
c001b1f6:	c3                   	ret    

c001b1f7 <sysCallOpen(regs*)>:
c001b1f7:	56                   	push   esi
c001b1f8:	53                   	push   ebx
c001b1f9:	81 ec 04 01 00 00    	sub    esp,0x104
c001b1ff:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001b206:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001b209:	85 c9                	test   ecx,ecx
c001b20b:	0f 84 b3 00 00 00    	je     c001b2c4 <sysCallOpen(regs*)+0xcd>
c001b211:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001b214:	85 c0                	test   eax,eax
c001b216:	0f 84 a8 00 00 00    	je     c001b2c4 <sysCallOpen(regs*)+0xcd>
c001b21c:	52                   	push   edx
c001b21d:	68 71 a4 02 c0       	push   0xc002a471
c001b222:	50                   	push   eax
c001b223:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001b227:	56                   	push   esi
c001b228:	e8 df 77 ff ff       	call   c0012a0c <standardiseFiles(char*, char const*, char const*)>
c001b22d:	89 34 24             	mov    DWORD PTR [esp],esi
c001b230:	e8 73 54 fe ff       	call   c00006a8 <strlen>
c001b235:	83 c4 10             	add    esp,0x10
c001b238:	48                   	dec    eax
c001b239:	74 1d                	je     c001b258 <sysCallOpen(regs*)+0x61>
c001b23b:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001b23e:	eb 0f                	jmp    c001b24f <sysCallOpen(regs*)+0x58>
c001b240:	80 fa 3a             	cmp    dl,0x3a
c001b243:	74 0f                	je     c001b254 <sysCallOpen(regs*)+0x5d>
c001b245:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001b249:	48                   	dec    eax
c001b24a:	74 0c                	je     c001b258 <sysCallOpen(regs*)+0x61>
c001b24c:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001b24f:	80 fa 2e             	cmp    dl,0x2e
c001b252:	75 ec                	jne    c001b240 <sysCallOpen(regs*)+0x49>
c001b254:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001b258:	83 ec 08             	sub    esp,0x8
c001b25b:	68 75 a4 02 c0       	push   0xc002a475
c001b260:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b263:	e8 47 ff ff ff       	call   c001b1af <string_ends_with(char const*, char const*)>
c001b268:	83 c4 10             	add    esp,0x10
c001b26b:	85 c0                	test   eax,eax
c001b26d:	75 17                	jne    c001b286 <sysCallOpen(regs*)+0x8f>
c001b26f:	83 ec 08             	sub    esp,0x8
c001b272:	68 96 a4 02 c0       	push   0xc002a496
c001b277:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b27a:	e8 30 ff ff ff       	call   c001b1af <string_ends_with(char const*, char const*)>
c001b27f:	83 c4 10             	add    esp,0x10
c001b282:	85 c0                	test   eax,eax
c001b284:	74 51                	je     c001b2d7 <sysCallOpen(regs*)+0xe0>
c001b286:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b289:	83 ec 08             	sub    esp,0x8
c001b28c:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001b292:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b299:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b29c:	ff 30                	push   DWORD PTR [eax]
c001b29e:	68 7a a4 02 c0       	push   0xc002a47a
c001b2a3:	e8 df 73 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001b2a8:	c7 04 24 89 a4 02 c0 	mov    DWORD PTR [esp],0xc002a489
c001b2af:	e8 d3 73 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001b2b4:	83 c4 10             	add    esp,0x10
c001b2b7:	81 c4 04 01 00 00    	add    esp,0x104
c001b2bd:	31 c0                	xor    eax,eax
c001b2bf:	31 d2                	xor    edx,edx
c001b2c1:	5b                   	pop    ebx
c001b2c2:	5e                   	pop    esi
c001b2c3:	c3                   	ret    
c001b2c4:	81 c4 04 01 00 00    	add    esp,0x104
c001b2ca:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b2cf:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b2d4:	5b                   	pop    ebx
c001b2d5:	5e                   	pop    esi
c001b2d6:	c3                   	ret    
c001b2d7:	83 ec 08             	sub    esp,0x8
c001b2da:	68 76 a4 02 c0       	push   0xc002a476
c001b2df:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b2e2:	e8 94 54 fe ff       	call   c000077b <strcmp>
c001b2e7:	83 c4 10             	add    esp,0x10
c001b2ea:	85 c0                	test   eax,eax
c001b2ec:	74 98                	je     c001b286 <sysCallOpen(regs*)+0x8f>
c001b2ee:	83 ec 08             	sub    esp,0x8
c001b2f1:	68 75 a4 02 c0       	push   0xc002a475
c001b2f6:	56                   	push   esi
c001b2f7:	e8 b3 fe ff ff       	call   c001b1af <string_ends_with(char const*, char const*)>
c001b2fc:	83 c4 10             	add    esp,0x10
c001b2ff:	85 c0                	test   eax,eax
c001b301:	75 83                	jne    c001b286 <sysCallOpen(regs*)+0x8f>
c001b303:	83 ec 08             	sub    esp,0x8
c001b306:	68 9b a4 02 c0       	push   0xc002a49b
c001b30b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b30e:	e8 9c fe ff ff       	call   c001b1af <string_ends_with(char const*, char const*)>
c001b313:	83 c4 10             	add    esp,0x10
c001b316:	85 c0                	test   eax,eax
c001b318:	0f 85 d9 00 00 00    	jne    c001b3f7 <sysCallOpen(regs*)+0x200>
c001b31e:	83 ec 08             	sub    esp,0x8
c001b321:	68 a0 a4 02 c0       	push   0xc002a4a0
c001b326:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b329:	e8 81 fe ff ff       	call   c001b1af <string_ends_with(char const*, char const*)>
c001b32e:	83 c4 10             	add    esp,0x10
c001b331:	85 c0                	test   eax,eax
c001b333:	0f 85 be 00 00 00    	jne    c001b3f7 <sysCallOpen(regs*)+0x200>
c001b339:	83 ec 08             	sub    esp,0x8
c001b33c:	68 9c a4 02 c0       	push   0xc002a49c
c001b341:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b344:	e8 32 54 fe ff       	call   c000077b <strcmp>
c001b349:	83 c4 10             	add    esp,0x10
c001b34c:	85 c0                	test   eax,eax
c001b34e:	0f 84 a3 00 00 00    	je     c001b3f7 <sysCallOpen(regs*)+0x200>
c001b354:	83 ec 08             	sub    esp,0x8
c001b357:	68 9b a4 02 c0       	push   0xc002a49b
c001b35c:	56                   	push   esi
c001b35d:	e8 4d fe ff ff       	call   c001b1af <string_ends_with(char const*, char const*)>
c001b362:	83 c4 10             	add    esp,0x10
c001b365:	85 c0                	test   eax,eax
c001b367:	0f 85 8a 00 00 00    	jne    c001b3f7 <sysCallOpen(regs*)+0x200>
c001b36d:	83 ec 0c             	sub    esp,0xc
c001b370:	68 14 01 00 00       	push   0x114
c001b375:	e8 5a 41 ff ff       	call   c000f4d4 <malloc>
c001b37a:	83 c4 0c             	add    esp,0xc
c001b37d:	89 c6                	mov    esi,eax
c001b37f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b384:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b387:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b38a:	56                   	push   esi
c001b38b:	e8 26 78 ff ff       	call   c0012bb6 <File::File(char const*, Process*)>
c001b390:	83 c4 10             	add    esp,0x10
c001b393:	85 f6                	test   esi,esi
c001b395:	0f 84 29 ff ff ff    	je     c001b2c4 <sysCallOpen(regs*)+0xcd>
c001b39b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001b39e:	0f b6 c2             	movzx  eax,dl
c001b3a1:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001b3a4:	89 d0                	mov    eax,edx
c001b3a6:	83 e0 01             	and    eax,0x1
c001b3a9:	f6 c2 02             	test   dl,0x2
c001b3ac:	74 03                	je     c001b3b1 <sysCallOpen(regs*)+0x1ba>
c001b3ae:	83 c8 02             	or     eax,0x2
c001b3b1:	f6 c2 04             	test   dl,0x4
c001b3b4:	74 03                	je     c001b3b9 <sysCallOpen(regs*)+0x1c2>
c001b3b6:	83 c8 04             	or     eax,0x4
c001b3b9:	f6 c2 08             	test   dl,0x8
c001b3bc:	74 03                	je     c001b3c1 <sysCallOpen(regs*)+0x1ca>
c001b3be:	83 c8 0a             	or     eax,0xa
c001b3c1:	83 e2 10             	and    edx,0x10
c001b3c4:	74 03                	je     c001b3c9 <sysCallOpen(regs*)+0x1d2>
c001b3c6:	83 c8 12             	or     eax,0x12
c001b3c9:	83 ec 08             	sub    esp,0x8
c001b3cc:	50                   	push   eax
c001b3cd:	56                   	push   esi
c001b3ce:	e8 47 78 ff ff       	call   c0012c1a <File::open(FileOpenMode)>
c001b3d3:	83 c4 10             	add    esp,0x10
c001b3d6:	85 c0                	test   eax,eax
c001b3d8:	0f 85 e6 fe ff ff    	jne    c001b2c4 <sysCallOpen(regs*)+0xcd>
c001b3de:	83 ec 0c             	sub    esp,0xc
c001b3e1:	56                   	push   esi
c001b3e2:	e8 65 5e ff ff       	call   c001124c <UnixFile::getFileDescriptor()>
c001b3e7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b3ea:	89 02                	mov    DWORD PTR [edx],eax
c001b3ec:	c1 f8 1f             	sar    eax,0x1f
c001b3ef:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b3f2:	e9 bd fe ff ff       	jmp    c001b2b4 <sysCallOpen(regs*)+0xbd>
c001b3f7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b3fa:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001b400:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b407:	e9 ab fe ff ff       	jmp    c001b2b7 <sysCallOpen(regs*)+0xc0>

c001b40c <setupSystemCalls()>:
c001b40c:	c7 05 a0 d3 02 c0 c2 a5 01 c0 	mov    DWORD PTR ds:0xc002d3a0,0xc001a5c2
c001b416:	c7 05 a4 d3 02 c0 96 a3 01 c0 	mov    DWORD PTR ds:0xc002d3a4,0xc001a396
c001b420:	c7 05 a8 d3 02 c0 e9 a4 01 c0 	mov    DWORD PTR ds:0xc002d3a8,0xc001a4e9
c001b42a:	c7 05 ac d3 02 c0 5a a5 01 c0 	mov    DWORD PTR ds:0xc002d3ac,0xc001a55a
c001b434:	c7 05 b0 d3 02 c0 81 a4 01 c0 	mov    DWORD PTR ds:0xc002d3b0,0xc001a481
c001b43e:	c7 05 b4 d3 02 c0 cd a3 01 c0 	mov    DWORD PTR ds:0xc002d3b4,0xc001a3cd
c001b448:	c7 05 b8 d3 02 c0 ae a3 01 c0 	mov    DWORD PTR ds:0xc002d3b8,0xc001a3ae
c001b452:	c7 05 bc d3 02 c0 3e a5 01 c0 	mov    DWORD PTR ds:0xc002d3bc,0xc001a53e
c001b45c:	c7 05 c4 d3 02 c0 d4 aa 01 c0 	mov    DWORD PTR ds:0xc002d3c4,0xc001aad4
c001b466:	c7 05 c0 d3 02 c0 f7 b1 01 c0 	mov    DWORD PTR ds:0xc002d3c0,0xc001b1f7
c001b470:	c7 05 c8 d3 02 c0 5c ab 01 c0 	mov    DWORD PTR ds:0xc002d3c8,0xc001ab5c
c001b47a:	c7 05 cc d3 02 c0 c3 a7 01 c0 	mov    DWORD PTR ds:0xc002d3cc,0xc001a7c3
c001b484:	c7 05 d0 d3 02 c0 fd a5 01 c0 	mov    DWORD PTR ds:0xc002d3d0,0xc001a5fd
c001b48e:	c7 05 d4 d3 02 c0 02 a6 01 c0 	mov    DWORD PTR ds:0xc002d3d4,0xc001a602
c001b498:	c7 05 d8 d3 02 c0 37 ac 01 c0 	mov    DWORD PTR ds:0xc002d3d8,0xc001ac37
c001b4a2:	c7 05 dc d3 02 c0 d1 ab 01 c0 	mov    DWORD PTR ds:0xc002d3dc,0xc001abd1
c001b4ac:	c7 05 e0 d3 02 c0 ab a8 01 c0 	mov    DWORD PTR ds:0xc002d3e0,0xc001a8ab
c001b4b6:	c7 05 e4 d3 02 c0 14 a9 01 c0 	mov    DWORD PTR ds:0xc002d3e4,0xc001a914
c001b4c0:	c7 05 e8 d3 02 c0 91 a9 01 c0 	mov    DWORD PTR ds:0xc002d3e8,0xc001a991
c001b4ca:	c7 05 ec d3 02 c0 07 a6 01 c0 	mov    DWORD PTR ds:0xc002d3ec,0xc001a607
c001b4d4:	c7 05 f0 d3 02 c0 a7 ac 01 c0 	mov    DWORD PTR ds:0xc002d3f0,0xc001aca7
c001b4de:	c7 05 f4 d3 02 c0 c1 ac 01 c0 	mov    DWORD PTR ds:0xc002d3f4,0xc001acc1
c001b4e8:	c7 05 f8 d3 02 c0 c1 ac 01 c0 	mov    DWORD PTR ds:0xc002d3f8,0xc001acc1
c001b4f2:	c7 05 fc d3 02 c0 02 ad 01 c0 	mov    DWORD PTR ds:0xc002d3fc,0xc001ad02
c001b4fc:	c7 05 00 d4 02 c0 66 ad 01 c0 	mov    DWORD PTR ds:0xc002d400,0xc001ad66
c001b506:	c7 05 04 d4 02 c0 11 a6 01 c0 	mov    DWORD PTR ds:0xc002d404,0xc001a611
c001b510:	c7 05 08 d4 02 c0 ca ad 01 c0 	mov    DWORD PTR ds:0xc002d408,0xc001adca
c001b51a:	c7 05 0c d4 02 c0 80 a7 01 c0 	mov    DWORD PTR ds:0xc002d40c,0xc001a780
c001b524:	c7 05 10 d4 02 c0 16 ae 01 c0 	mov    DWORD PTR ds:0xc002d410,0xc001ae16
c001b52e:	c7 05 14 d4 02 c0 51 a8 01 c0 	mov    DWORD PTR ds:0xc002d414,0xc001a851
c001b538:	c7 05 18 d4 02 c0 99 ae 01 c0 	mov    DWORD PTR ds:0xc002d418,0xc001ae99
c001b542:	c7 05 1c d4 02 c0 14 aa 01 c0 	mov    DWORD PTR ds:0xc002d41c,0xc001aa14
c001b54c:	c7 05 20 d4 02 c0 c0 ae 01 c0 	mov    DWORD PTR ds:0xc002d420,0xc001aec0
c001b556:	c7 05 24 d4 02 c0 18 af 01 c0 	mov    DWORD PTR ds:0xc002d424,0xc001af18
c001b560:	c7 05 28 d4 02 c0 c5 af 01 c0 	mov    DWORD PTR ds:0xc002d428,0xc001afc5
c001b56a:	c7 05 2c d4 02 c0 21 a6 01 c0 	mov    DWORD PTR ds:0xc002d42c,0xc001a621
c001b574:	c7 05 30 d4 02 c0 8b a6 01 c0 	mov    DWORD PTR ds:0xc002d430,0xc001a68b
c001b57e:	c7 05 34 d4 02 c0 d1 a6 01 c0 	mov    DWORD PTR ds:0xc002d434,0xc001a6d1
c001b588:	c7 05 38 d4 02 c0 e4 b0 01 c0 	mov    DWORD PTR ds:0xc002d438,0xc001b0e4
c001b592:	c7 05 3c d4 02 c0 dc ac 01 c0 	mov    DWORD PTR ds:0xc002d43c,0xc001acdc
c001b59c:	c7 05 40 d4 02 c0 22 a7 01 c0 	mov    DWORD PTR ds:0xc002d440,0xc001a722
c001b5a6:	c7 05 44 d4 02 c0 56 b1 01 c0 	mov    DWORD PTR ds:0xc002d444,0xc001b156
c001b5b0:	c7 05 48 d4 02 c0 9b b1 01 c0 	mov    DWORD PTR ds:0xc002d448,0xc001b19b
c001b5ba:	c7 05 4c d4 02 c0 d9 a3 01 c0 	mov    DWORD PTR ds:0xc002d44c,0xc001a3d9
c001b5c4:	c3                   	ret    

c001b5c5 <systemCall(regs*, void*)>:
c001b5c5:	53                   	push   ebx
c001b5c6:	83 ec 08             	sub    esp,0x8
c001b5c9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b5cd:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001b5d0:	83 f8 7f             	cmp    eax,0x7f
c001b5d3:	77 16                	ja     c001b5eb <systemCall(regs*, void*)+0x26>
c001b5d5:	8b 14 85 a0 d3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2c60]
c001b5dc:	85 d2                	test   edx,edx
c001b5de:	74 0b                	je     c001b5eb <systemCall(regs*, void*)+0x26>
c001b5e0:	83 ec 0c             	sub    esp,0xc
c001b5e3:	53                   	push   ebx
c001b5e4:	ff d2                	call   edx
c001b5e6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001b5e9:	eb 0d                	jmp    c001b5f8 <systemCall(regs*, void*)+0x33>
c001b5eb:	52                   	push   edx
c001b5ec:	52                   	push   edx
c001b5ed:	50                   	push   eax
c001b5ee:	68 a5 a4 02 c0       	push   0xc002a4a5
c001b5f3:	e8 8f 70 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001b5f8:	83 c4 10             	add    esp,0x10
c001b5fb:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b600:	31 d2                	xor    edx,edx
c001b602:	83 c4 08             	add    esp,0x8
c001b605:	5b                   	pop    ebx
c001b606:	c3                   	ret    

c001b607 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001b607:	55                   	push   ebp
c001b608:	89 e5                	mov    ebp,esp
c001b60a:	57                   	push   edi
c001b60b:	56                   	push   esi
c001b60c:	53                   	push   ebx
c001b60d:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001b613:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001b616:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001b619:	85 c0                	test   eax,eax
c001b61b:	0f 95 c1             	setne  cl
c001b61e:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001b622:	0f 94 c2             	sete   dl
c001b625:	84 d1                	test   cl,dl
c001b627:	74 26                	je     c001b64f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001b629:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001b630:	74 1d                	je     c001b64f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001b632:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001b635:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c001b63b:	89 d6                	mov    esi,edx
c001b63d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001b643:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001b649:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001b64c:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c001b64f:	83 ec 0c             	sub    esp,0xc
c001b652:	05 ff 0f 00 00       	add    eax,0xfff
c001b657:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001b65a:	6a 01                	push   0x1
c001b65c:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c001b662:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001b668:	e8 2a 60 ff ff       	call   c0011697 <Virt::allocateKernelVirtualPages(int)>
c001b66d:	83 c4 10             	add    esp,0x10
c001b670:	89 c6                	mov    esi,eax
c001b672:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001b678:	0f 86 21 01 00 00    	jbe    c001b79f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001b67e:	c1 eb 0c             	shr    ebx,0xc
c001b681:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001b68b:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001b691:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001b694:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b697:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001b69d:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001b6a0:	29 d8                	sub    eax,ebx
c001b6a2:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001b6a8:	0f 83 f4 00 00 00    	jae    c001b7a2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001b6ae:	83 ec 0c             	sub    esp,0xc
c001b6b1:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001b6b7:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001b6ba:	3d 00 10 00 00       	cmp    eax,0x1000
c001b6bf:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001b6c1:	52                   	push   edx
c001b6c2:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001b6c8:	52                   	push   edx
c001b6c9:	76 05                	jbe    c001b6d0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c001b6cb:	b8 00 10 00 00       	mov    eax,0x1000
c001b6d0:	31 d2                	xor    edx,edx
c001b6d2:	52                   	push   edx
c001b6d3:	50                   	push   eax
c001b6d4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001b6d7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b6da:	83 c4 20             	add    esp,0x20
c001b6dd:	85 c0                	test   eax,eax
c001b6df:	74 1f                	je     c001b700 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c001b6e1:	51                   	push   ecx
c001b6e2:	51                   	push   ecx
c001b6e3:	50                   	push   eax
c001b6e4:	68 b9 a4 02 c0       	push   0xc002a4b9
c001b6e9:	e8 99 6f ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001b6ee:	89 34 24             	mov    DWORD PTR [esp],esi
c001b6f1:	e8 05 63 ff ff       	call   c00119fb <Virt::freeKernelVirtualPages(unsigned long)>
c001b6f6:	83 c4 10             	add    esp,0x10
c001b6f9:	31 c0                	xor    eax,eax
c001b6fb:	e9 7c 01 00 00       	jmp    c001b87c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001b700:	e8 2b 15 00 00       	call   c001cc30 <lockScheduler()>
c001b705:	e8 a4 42 ff ff       	call   c000f9ae <Phys::allocatePage()>
c001b70a:	6a 07                	push   0x7
c001b70c:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001b712:	56                   	push   esi
c001b713:	50                   	push   eax
c001b714:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b71a:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001b71d:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001b723:	e8 3a 66 ff ff       	call   c0011d62 <VAS::mapPage(unsigned long, unsigned long, int)>
c001b728:	83 c4 0c             	add    esp,0xc
c001b72b:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b731:	6a 00                	push   0x0
c001b733:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b739:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001b73c:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001b742:	e8 85 64 ff ff       	call   c0011bcc <VAS::mapOtherVASIn(bool, VAS*)>
c001b747:	58                   	pop    eax
c001b748:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001b74e:	5a                   	pop    edx
c001b74f:	68 07 04 00 00       	push   0x407
c001b754:	53                   	push   ebx
c001b755:	81 c3 00 10 00 00    	add    ebx,0x1000
c001b75b:	50                   	push   eax
c001b75c:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b762:	6a 00                	push   0x0
c001b764:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b769:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b76c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b772:	e8 a5 69 ff ff       	call   c001211c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001b777:	83 c4 1c             	add    esp,0x1c
c001b77a:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c001b780:	68 00 10 00 00       	push   0x1000
c001b785:	50                   	push   eax
c001b786:	56                   	push   esi
c001b787:	e8 c9 4e fe ff       	call   c0000655 <memcpy>
c001b78c:	e8 a1 14 00 00       	call   c001cc32 <unlockScheduler()>
c001b791:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001b797:	83 c4 10             	add    esp,0x10
c001b79a:	e9 f5 fe ff ff       	jmp    c001b694 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c001b79f:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001b7a2:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001b7ac:	0f 86 bc 00 00 00    	jbe    c001b86e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c001b7b2:	e8 79 14 00 00       	call   c001cc30 <lockScheduler()>
c001b7b7:	51                   	push   ecx
c001b7b8:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b7be:	6a 00                	push   0x0
c001b7c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7c5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b7c8:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b7ce:	e8 f9 63 ff ff       	call   c0011bcc <VAS::mapOtherVASIn(bool, VAS*)>
c001b7d3:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001b7d9:	83 c4 10             	add    esp,0x10
c001b7dc:	c1 e8 0c             	shr    eax,0xc
c001b7df:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001b7e9:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001b7ef:	e8 ba 41 ff ff       	call   c000f9ae <Phys::allocatePage()>
c001b7f4:	6a 07                	push   0x7
c001b7f6:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001b7fc:	56                   	push   esi
c001b7fd:	50                   	push   eax
c001b7fe:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b804:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b807:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001b80d:	e8 50 65 ff ff       	call   c0011d62 <VAS::mapPage(unsigned long, unsigned long, int)>
c001b812:	58                   	pop    eax
c001b813:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001b819:	5a                   	pop    edx
c001b81a:	68 07 04 00 00       	push   0x407
c001b81f:	53                   	push   ebx
c001b820:	81 c3 00 10 00 00    	add    ebx,0x1000
c001b826:	50                   	push   eax
c001b827:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b82d:	6a 00                	push   0x0
c001b82f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b834:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b837:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b83d:	e8 da 68 ff ff       	call   c001211c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001b842:	83 c4 1c             	add    esp,0x1c
c001b845:	68 00 10 00 00       	push   0x1000
c001b84a:	6a 00                	push   0x0
c001b84c:	56                   	push   esi
c001b84d:	e8 39 4e fe ff       	call   c000068b <memset>
c001b852:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001b858:	83 c4 10             	add    esp,0x10
c001b85b:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c001b861:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001b867:	77 86                	ja     c001b7ef <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c001b869:	e8 c4 13 00 00       	call   c001cc32 <unlockScheduler()>
c001b86e:	83 ec 0c             	sub    esp,0xc
c001b871:	56                   	push   esi
c001b872:	e8 84 61 ff ff       	call   c00119fb <Virt::freeKernelVirtualPages(unsigned long)>
c001b877:	83 c4 10             	add    esp,0x10
c001b87a:	b0 01                	mov    al,0x1
c001b87c:	8d 65 f4             	lea    esp,[ebp-0xc]
c001b87f:	5b                   	pop    ebx
c001b880:	5e                   	pop    esi
c001b881:	5f                   	pop    edi
c001b882:	5d                   	pop    ebp
c001b883:	c3                   	ret    

c001b884 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001b884:	55                   	push   ebp
c001b885:	57                   	push   edi
c001b886:	56                   	push   esi
c001b887:	53                   	push   ebx
c001b888:	83 ec 48             	sub    esp,0x48
c001b88b:	68 14 01 00 00       	push   0x114
c001b890:	e8 3f 3c ff ff       	call   c000f4d4 <malloc>
c001b895:	83 c4 0c             	add    esp,0xc
c001b898:	89 c6                	mov    esi,eax
c001b89a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001b89e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001b8a2:	50                   	push   eax
c001b8a3:	e8 0e 73 ff ff       	call   c0012bb6 <File::File(char const*, Process*)>
c001b8a8:	58                   	pop    eax
c001b8a9:	5a                   	pop    edx
c001b8aa:	6a 01                	push   0x1
c001b8ac:	56                   	push   esi
c001b8ad:	e8 68 73 ff ff       	call   c0012c1a <File::open(FileOpenMode)>
c001b8b2:	83 c4 10             	add    esp,0x10
c001b8b5:	85 c0                	test   eax,eax
c001b8b7:	0f 85 47 01 00 00    	jne    c001ba04 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b8bd:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001b8c5:	83 ec 0c             	sub    esp,0xc
c001b8c8:	6a 34                	push   0x34
c001b8ca:	e8 05 3c ff ff       	call   c000f4d4 <malloc>
c001b8cf:	89 c3                	mov    ebx,eax
c001b8d1:	58                   	pop    eax
c001b8d2:	8b 06                	mov    eax,DWORD PTR [esi]
c001b8d4:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001b8d8:	57                   	push   edi
c001b8d9:	53                   	push   ebx
c001b8da:	6a 00                	push   0x0
c001b8dc:	6a 34                	push   0x34
c001b8de:	56                   	push   esi
c001b8df:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b8e2:	83 c4 20             	add    esp,0x20
c001b8e5:	85 c0                	test   eax,eax
c001b8e7:	0f 85 17 01 00 00    	jne    c001ba04 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b8ed:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001b8f3:	0f 85 0b 01 00 00    	jne    c001ba04 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b8f9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b8fc:	85 c0                	test   eax,eax
c001b8fe:	0f 84 00 01 00 00    	je     c001ba04 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b904:	31 d2                	xor    edx,edx
c001b906:	55                   	push   ebp
c001b907:	52                   	push   edx
c001b908:	50                   	push   eax
c001b909:	56                   	push   esi
c001b90a:	e8 c9 73 ff ff       	call   c0012cd8 <File::seek(unsigned long long)>
c001b90f:	83 c4 10             	add    esp,0x10
c001b912:	85 c0                	test   eax,eax
c001b914:	0f 85 ea 00 00 00    	jne    c001ba04 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b91a:	83 ec 0c             	sub    esp,0xc
c001b91d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001b920:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001b924:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b928:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001b92c:	0f af c2             	imul   eax,edx
c001b92f:	50                   	push   eax
c001b930:	e8 9f 3b ff ff       	call   c000f4d4 <malloc>
c001b935:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001b937:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b93b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b93e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b942:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001b946:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001b94a:	0f af c2             	imul   eax,edx
c001b94d:	99                   	cdq    
c001b94e:	52                   	push   edx
c001b94f:	50                   	push   eax
c001b950:	56                   	push   esi
c001b951:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b954:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001b957:	83 c4 20             	add    esp,0x20
c001b95a:	85 c0                	test   eax,eax
c001b95c:	0f 84 a2 00 00 00    	je     c001ba04 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b962:	31 d2                	xor    edx,edx
c001b964:	51                   	push   ecx
c001b965:	52                   	push   edx
c001b966:	50                   	push   eax
c001b967:	56                   	push   esi
c001b968:	e8 6b 73 ff ff       	call   c0012cd8 <File::seek(unsigned long long)>
c001b96d:	83 c4 10             	add    esp,0x10
c001b970:	85 c0                	test   eax,eax
c001b972:	0f 85 8c 00 00 00    	jne    c001ba04 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b978:	83 ec 0c             	sub    esp,0xc
c001b97b:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001b97f:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001b983:	31 ed                	xor    ebp,ebp
c001b985:	0f af c2             	imul   eax,edx
c001b988:	50                   	push   eax
c001b989:	e8 46 3b ff ff       	call   c000f4d4 <malloc>
c001b98e:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001b990:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b994:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b997:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b99b:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001b99f:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001b9a3:	0f af c2             	imul   eax,edx
c001b9a6:	99                   	cdq    
c001b9a7:	52                   	push   edx
c001b9a8:	50                   	push   eax
c001b9a9:	56                   	push   esi
c001b9aa:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b9ad:	83 c4 20             	add    esp,0x20
c001b9b0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b9b8:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001b9bc:	0f 86 80 00 00 00    	jbe    c001ba42 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001b9c2:	0f b7 fd             	movzx  edi,bp
c001b9c5:	c1 e7 05             	shl    edi,0x5
c001b9c8:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001b9cc:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001b9cf:	75 6b                	jne    c001ba3c <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001b9d1:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001b9d4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b9d8:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001b9db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b9df:	52                   	push   edx
c001b9e0:	31 d2                	xor    edx,edx
c001b9e2:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001b9e5:	52                   	push   edx
c001b9e6:	50                   	push   eax
c001b9e7:	56                   	push   esi
c001b9e8:	e8 eb 72 ff ff       	call   c0012cd8 <File::seek(unsigned long long)>
c001b9ed:	83 c4 10             	add    esp,0x10
c001b9f0:	85 c0                	test   eax,eax
c001b9f2:	74 17                	je     c001ba0b <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001b9f4:	83 ec 0c             	sub    esp,0xc
c001b9f7:	68 e4 a4 02 c0       	push   0xc002a4e4
c001b9fc:	e8 86 6c ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001ba01:	83 c4 10             	add    esp,0x10
c001ba04:	31 c0                	xor    eax,eax
c001ba06:	e9 87 00 00 00       	jmp    c001ba92 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001ba0b:	83 ec 0c             	sub    esp,0xc
c001ba0e:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001ba11:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001ba14:	50                   	push   eax
c001ba15:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ba19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ba1d:	56                   	push   esi
c001ba1e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001ba22:	e8 e0 fb ff ff       	call   c001b607 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001ba27:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ba2b:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001ba2f:	83 c4 20             	add    esp,0x20
c001ba32:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001ba36:	73 04                	jae    c001ba3c <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001ba38:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ba3c:	45                   	inc    ebp
c001ba3d:	e9 76 ff ff ff       	jmp    c001b9b8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001ba42:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001ba46:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ba4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba4e:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001ba54:	83 ec 0c             	sub    esp,0xc
c001ba57:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001ba5d:	25 00 f0 ff ff       	and    eax,0xfffff000
c001ba62:	05 00 10 00 00       	add    eax,0x1000
c001ba67:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001ba6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba6e:	e8 71 3a ff ff       	call   c000f4e4 <free>
c001ba73:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ba76:	e8 69 3a ff ff       	call   c000f4e4 <free>
c001ba7b:	58                   	pop    eax
c001ba7c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ba80:	e8 5f 3a ff ff       	call   c000f4e4 <free>
c001ba85:	89 34 24             	mov    DWORD PTR [esp],esi
c001ba88:	e8 eb 71 ff ff       	call   c0012c78 <File::close()>
c001ba8d:	83 c4 10             	add    esp,0x10
c001ba90:	b0 01                	mov    al,0x1
c001ba92:	83 c4 3c             	add    esp,0x3c
c001ba95:	5b                   	pop    ebx
c001ba96:	5e                   	pop    esi
c001ba97:	5f                   	pop    edi
c001ba98:	5d                   	pop    ebp
c001ba99:	c3                   	ret    

c001ba9a <Thr::runtimeReferenceHelper()>:
c001ba9a:	83 ec 18             	sub    esp,0x18
c001ba9d:	68 ec a4 02 c0       	push   0xc002a4ec
c001baa2:	e8 e0 6b ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001baa7:	fa                   	cli    
c001baa8:	83 c4 10             	add    esp,0x10
c001baab:	eb fe                	jmp    c001baab <Thr::runtimeReferenceHelper()+0x11>

c001baad <Thr::getAddressOfKernelSymbol(char const*)>:
c001baad:	57                   	push   edi
c001baae:	56                   	push   esi
c001baaf:	53                   	push   ebx
c001bab0:	31 db                	xor    ebx,ebx
c001bab2:	39 1d 40 dd 02 c0    	cmp    DWORD PTR ds:0xc002dd40,ebx
c001bab8:	7e 3c                	jle    c001baf6 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001baba:	8b 34 9d c0 dc 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd2340]
c001bac1:	31 ff                	xor    edi,edi
c001bac3:	39 3c 9d c0 db 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd2440],edi
c001baca:	7e 27                	jle    c001baf3 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001bacc:	50                   	push   eax
c001bacd:	50                   	push   eax
c001bace:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bad2:	8b 06                	mov    eax,DWORD PTR [esi]
c001bad4:	03 04 9d 40 dc 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd23c0]
c001badb:	50                   	push   eax
c001badc:	e8 9a 4c fe ff       	call   c000077b <strcmp>
c001bae1:	83 c4 10             	add    esp,0x10
c001bae4:	85 c0                	test   eax,eax
c001bae6:	75 05                	jne    c001baed <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001bae8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001baeb:	eb 0b                	jmp    c001baf8 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001baed:	83 c6 10             	add    esi,0x10
c001baf0:	47                   	inc    edi
c001baf1:	eb d0                	jmp    c001bac3 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001baf3:	43                   	inc    ebx
c001baf4:	eb bc                	jmp    c001bab2 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001baf6:	31 c0                	xor    eax,eax
c001baf8:	5b                   	pop    ebx
c001baf9:	5e                   	pop    esi
c001bafa:	5f                   	pop    edi
c001bafb:	c3                   	ret    

c001bafc <Thr::loadKernelSymbolTable(char const*)>:
c001bafc:	55                   	push   ebp
c001bafd:	57                   	push   edi
c001bafe:	56                   	push   esi
c001baff:	53                   	push   ebx
c001bb00:	83 ec 68             	sub    esp,0x68
c001bb03:	8b 35 94 dd 02 c0    	mov    esi,DWORD PTR ds:0xc002dd94
c001bb09:	68 14 01 00 00       	push   0x114
c001bb0e:	e8 c1 39 ff ff       	call   c000f4d4 <malloc>
c001bb13:	83 c4 0c             	add    esp,0xc
c001bb16:	89 c3                	mov    ebx,eax
c001bb18:	56                   	push   esi
c001bb19:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001bb1d:	50                   	push   eax
c001bb1e:	e8 93 70 ff ff       	call   c0012bb6 <File::File(char const*, Process*)>
c001bb23:	5e                   	pop    esi
c001bb24:	5f                   	pop    edi
c001bb25:	6a 01                	push   0x1
c001bb27:	53                   	push   ebx
c001bb28:	e8 ed 70 ff ff       	call   c0012c1a <File::open(FileOpenMode)>
c001bb2d:	83 c4 10             	add    esp,0x10
c001bb30:	31 d2                	xor    edx,edx
c001bb32:	85 c0                	test   eax,eax
c001bb34:	0f 85 74 02 00 00    	jne    c001bdae <Thr::loadKernelSymbolTable(char const*)+0x2b2>
c001bb3a:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001bb42:	83 ec 0c             	sub    esp,0xc
c001bb45:	6a 34                	push   0x34
c001bb47:	e8 88 39 ff ff       	call   c000f4d4 <malloc>
c001bb4c:	59                   	pop    ecx
c001bb4d:	89 c7                	mov    edi,eax
c001bb4f:	8d 74 24 34          	lea    esi,[esp+0x34]
c001bb53:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bb55:	56                   	push   esi
c001bb56:	57                   	push   edi
c001bb57:	6a 00                	push   0x0
c001bb59:	6a 34                	push   0x34
c001bb5b:	53                   	push   ebx
c001bb5c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001bb5f:	83 c4 20             	add    esp,0x20
c001bb62:	85 c0                	test   eax,eax
c001bb64:	74 17                	je     c001bb7d <Thr::loadKernelSymbolTable(char const*)+0x81>
c001bb66:	83 ec 0c             	sub    esp,0xc
c001bb69:	68 0e a5 02 c0       	push   0xc002a50e
c001bb6e:	e8 2e dc ff ff       	call   c00197a1 <Krnl::panic(char const*)>
c001bb73:	83 c4 10             	add    esp,0x10
c001bb76:	31 d2                	xor    edx,edx
c001bb78:	e9 31 02 00 00       	jmp    c001bdae <Thr::loadKernelSymbolTable(char const*)+0x2b2>
c001bb7d:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001bb83:	75 e1                	jne    c001bb66 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001bb85:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001bb88:	85 c0                	test   eax,eax
c001bb8a:	74 da                	je     c001bb66 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001bb8c:	52                   	push   edx
c001bb8d:	31 d2                	xor    edx,edx
c001bb8f:	52                   	push   edx
c001bb90:	50                   	push   eax
c001bb91:	53                   	push   ebx
c001bb92:	e8 41 71 ff ff       	call   c0012cd8 <File::seek(unsigned long long)>
c001bb97:	83 c4 10             	add    esp,0x10
c001bb9a:	85 c0                	test   eax,eax
c001bb9c:	75 c8                	jne    c001bb66 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001bb9e:	83 ec 0c             	sub    esp,0xc
c001bba1:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001bba5:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001bba9:	31 ed                	xor    ebp,ebp
c001bbab:	0f af c2             	imul   eax,edx
c001bbae:	50                   	push   eax
c001bbaf:	e8 20 39 ff ff       	call   c000f4d4 <malloc>
c001bbb4:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001bbb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bbba:	89 34 24             	mov    DWORD PTR [esp],esi
c001bbbd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bbc1:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001bbc5:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001bbc9:	0f af c2             	imul   eax,edx
c001bbcc:	99                   	cdq    
c001bbcd:	52                   	push   edx
c001bbce:	50                   	push   eax
c001bbcf:	53                   	push   ebx
c001bbd0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bbd3:	83 c4 20             	add    esp,0x20
c001bbd6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001bbde:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001bbe6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001bbee:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bbf6:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001bbfa:	0f 86 aa 00 00 00    	jbe    c001bcaa <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c001bc00:	0f b7 f5             	movzx  esi,bp
c001bc03:	6b f6 28             	imul   esi,esi,0x28
c001bc06:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001bc0a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001bc0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bc11:	50                   	push   eax
c001bc12:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001bc16:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001bc1a:	8b 16                	mov    edx,DWORD PTR [esi]
c001bc1c:	6b c0 28             	imul   eax,eax,0x28
c001bc1f:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001bc23:	89 d0                	mov    eax,edx
c001bc25:	31 d2                	xor    edx,edx
c001bc27:	52                   	push   edx
c001bc28:	50                   	push   eax
c001bc29:	53                   	push   ebx
c001bc2a:	e8 a9 70 ff ff       	call   c0012cd8 <File::seek(unsigned long long)>
c001bc2f:	83 c4 0c             	add    esp,0xc
c001bc32:	6a 20                	push   0x20
c001bc34:	6a 00                	push   0x0
c001bc36:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001bc3a:	52                   	push   edx
c001bc3b:	e8 4b 4a fe ff       	call   c000068b <memset>
c001bc40:	58                   	pop    eax
c001bc41:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc43:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001bc47:	51                   	push   ecx
c001bc48:	8d 54 24 40          	lea    edx,[esp+0x40]
c001bc4c:	52                   	push   edx
c001bc4d:	6a 00                	push   0x0
c001bc4f:	6a 1f                	push   0x1f
c001bc51:	53                   	push   ebx
c001bc52:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001bc55:	83 c4 18             	add    esp,0x18
c001bc58:	68 25 a5 02 c0       	push   0xc002a525
c001bc5d:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001bc61:	52                   	push   edx
c001bc62:	e8 14 4b fe ff       	call   c000077b <strcmp>
c001bc67:	83 c4 10             	add    esp,0x10
c001bc6a:	85 c0                	test   eax,eax
c001bc6c:	75 0f                	jne    c001bc7d <Thr::loadKernelSymbolTable(char const*)+0x181>
c001bc6e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001bc71:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bc75:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bc79:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bc7d:	50                   	push   eax
c001bc7e:	50                   	push   eax
c001bc7f:	68 2d a5 02 c0       	push   0xc002a52d
c001bc84:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001bc88:	50                   	push   eax
c001bc89:	e8 ed 4a fe ff       	call   c000077b <strcmp>
c001bc8e:	83 c4 10             	add    esp,0x10
c001bc91:	85 c0                	test   eax,eax
c001bc93:	75 0f                	jne    c001bca4 <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c001bc95:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001bc98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bc9c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bca0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001bca4:	45                   	inc    ebp
c001bca5:	e9 4c ff ff ff       	jmp    c001bbf6 <Thr::loadKernelSymbolTable(char const*)+0xfa>
c001bcaa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001bcaf:	75 10                	jne    c001bcc1 <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c001bcb1:	83 ec 0c             	sub    esp,0xc
c001bcb4:	68 35 a5 02 c0       	push   0xc002a535
c001bcb9:	e8 e3 da ff ff       	call   c00197a1 <Krnl::panic(char const*)>
c001bcbe:	83 c4 10             	add    esp,0x10
c001bcc1:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001bcc6:	75 10                	jne    c001bcd8 <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c001bcc8:	83 ec 0c             	sub    esp,0xc
c001bccb:	68 35 a5 02 c0       	push   0xc002a535
c001bcd0:	e8 cc da ff ff       	call   c00197a1 <Krnl::panic(char const*)>
c001bcd5:	83 c4 10             	add    esp,0x10
c001bcd8:	31 d2                	xor    edx,edx
c001bcda:	50                   	push   eax
c001bcdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcdf:	52                   	push   edx
c001bce0:	50                   	push   eax
c001bce1:	53                   	push   ebx
c001bce2:	e8 f1 6f ff ff       	call   c0012cd8 <File::seek(unsigned long long)>
c001bce7:	5a                   	pop    edx
c001bce8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001bcec:	e8 e3 37 ff ff       	call   c000f4d4 <malloc>
c001bcf1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bcf5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bcf9:	31 c9                	xor    ecx,ecx
c001bcfb:	5e                   	pop    esi
c001bcfc:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bcfe:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001bd02:	55                   	push   ebp
c001bd03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bd07:	51                   	push   ecx
c001bd08:	52                   	push   edx
c001bd09:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001bd0d:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001bd11:	53                   	push   ebx
c001bd12:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001bd15:	83 c4 14             	add    esp,0x14
c001bd18:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bd1c:	e8 b3 37 ff ff       	call   c000f4d4 <malloc>
c001bd21:	89 c6                	mov    esi,eax
c001bd23:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd25:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001bd28:	56                   	push   esi
c001bd29:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001bd2d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001bd31:	51                   	push   ecx
c001bd32:	52                   	push   edx
c001bd33:	53                   	push   ebx
c001bd34:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001bd37:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bd3b:	8b 15 40 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dd40
c001bd41:	83 c4 1c             	add    esp,0x1c
c001bd44:	c1 e8 04             	shr    eax,0x4
c001bd47:	89 04 95 c0 db 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2440],eax
c001bd4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bd52:	31 d2                	xor    edx,edx
c001bd54:	52                   	push   edx
c001bd55:	50                   	push   eax
c001bd56:	53                   	push   ebx
c001bd57:	e8 7c 6f ff ff       	call   c0012cd8 <File::seek(unsigned long long)>
c001bd5c:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001bd5e:	31 d2                	xor    edx,edx
c001bd60:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001bd63:	56                   	push   esi
c001bd64:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bd68:	52                   	push   edx
c001bd69:	50                   	push   eax
c001bd6a:	53                   	push   ebx
c001bd6b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bd6e:	83 c4 14             	add    esp,0x14
c001bd71:	53                   	push   ebx
c001bd72:	e8 01 6f ff ff       	call   c0012c78 <File::close()>
c001bd77:	5d                   	pop    ebp
c001bd78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001bd7c:	e8 63 37 ff ff       	call   c000f4e4 <free>
c001bd81:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bd84:	e8 5b 37 ff ff       	call   c000f4e4 <free>
c001bd89:	a1 40 dd 02 c0       	mov    eax,ds:0xc002dd40
c001bd8e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bd92:	8d 50 01             	lea    edx,[eax+0x1]
c001bd95:	89 0c 85 c0 dc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2340],ecx
c001bd9c:	89 15 40 dd 02 c0    	mov    DWORD PTR ds:0xc002dd40,edx
c001bda2:	89 34 85 40 dc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd23c0],esi
c001bda9:	83 c4 10             	add    esp,0x10
c001bdac:	b2 01                	mov    dl,0x1
c001bdae:	83 c4 5c             	add    esp,0x5c
c001bdb1:	88 d0                	mov    al,dl
c001bdb3:	5b                   	pop    ebx
c001bdb4:	5e                   	pop    esi
c001bdb5:	5f                   	pop    edi
c001bdb6:	5d                   	pop    ebp
c001bdb7:	c3                   	ret    

c001bdb8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001bdb8:	55                   	push   ebp
c001bdb9:	57                   	push   edi
c001bdba:	56                   	push   esi
c001bdbb:	53                   	push   ebx
c001bdbc:	81 ec 68 03 00 00    	sub    esp,0x368
c001bdc2:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001bdc9:	8b 1d 94 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002dd94
c001bdcf:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001bdd3:	68 14 01 00 00       	push   0x114
c001bdd8:	e8 f7 36 ff ff       	call   c000f4d4 <malloc>
c001bddd:	83 c4 0c             	add    esp,0xc
c001bde0:	89 c5                	mov    ebp,eax
c001bde2:	53                   	push   ebx
c001bde3:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001bdea:	50                   	push   eax
c001bdeb:	e8 c6 6d ff ff       	call   c0012bb6 <File::File(char const*, Process*)>
c001bdf0:	58                   	pop    eax
c001bdf1:	5a                   	pop    edx
c001bdf2:	6a 01                	push   0x1
c001bdf4:	55                   	push   ebp
c001bdf5:	e8 20 6e ff ff       	call   c0012c1a <File::open(FileOpenMode)>
c001bdfa:	83 c4 10             	add    esp,0x10
c001bdfd:	85 c0                	test   eax,eax
c001bdff:	0f 85 f2 06 00 00    	jne    c001c4f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001be05:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001be0d:	83 ec 0c             	sub    esp,0xc
c001be10:	6a 34                	push   0x34
c001be12:	e8 bd 36 ff ff       	call   c000f4d4 <malloc>
c001be17:	89 c7                	mov    edi,eax
c001be19:	58                   	pop    eax
c001be1a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001be1d:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001be21:	53                   	push   ebx
c001be22:	57                   	push   edi
c001be23:	6a 00                	push   0x0
c001be25:	6a 34                	push   0x34
c001be27:	55                   	push   ebp
c001be28:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001be2b:	83 c4 20             	add    esp,0x20
c001be2e:	85 c0                	test   eax,eax
c001be30:	0f 85 c1 06 00 00    	jne    c001c4f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001be36:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001be3c:	0f 85 b5 06 00 00    	jne    c001c4f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001be42:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001be45:	85 c0                	test   eax,eax
c001be47:	0f 84 aa 06 00 00    	je     c001c4f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001be4d:	31 d2                	xor    edx,edx
c001be4f:	56                   	push   esi
c001be50:	52                   	push   edx
c001be51:	50                   	push   eax
c001be52:	55                   	push   ebp
c001be53:	e8 80 6e ff ff       	call   c0012cd8 <File::seek(unsigned long long)>
c001be58:	83 c4 10             	add    esp,0x10
c001be5b:	85 c0                	test   eax,eax
c001be5d:	0f 85 94 06 00 00    	jne    c001c4f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001be63:	83 ec 0c             	sub    esp,0xc
c001be66:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001be69:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001be6d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001be71:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001be75:	0f af c2             	imul   eax,edx
c001be78:	50                   	push   eax
c001be79:	e8 56 36 ff ff       	call   c000f4d4 <malloc>
c001be7e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001be81:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001be85:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001be8c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001be90:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001be94:	0f af c2             	imul   eax,edx
c001be97:	99                   	cdq    
c001be98:	52                   	push   edx
c001be99:	50                   	push   eax
c001be9a:	55                   	push   ebp
c001be9b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001be9e:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001bea1:	83 c4 20             	add    esp,0x20
c001bea4:	85 c0                	test   eax,eax
c001bea6:	0f 84 4b 06 00 00    	je     c001c4f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001beac:	31 d2                	xor    edx,edx
c001beae:	51                   	push   ecx
c001beaf:	52                   	push   edx
c001beb0:	50                   	push   eax
c001beb1:	55                   	push   ebp
c001beb2:	e8 21 6e ff ff       	call   c0012cd8 <File::seek(unsigned long long)>
c001beb7:	83 c4 10             	add    esp,0x10
c001beba:	85 c0                	test   eax,eax
c001bebc:	0f 85 35 06 00 00    	jne    c001c4f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bec2:	83 ec 0c             	sub    esp,0xc
c001bec5:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001bec9:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001becd:	31 f6                	xor    esi,esi
c001becf:	0f af c2             	imul   eax,edx
c001bed2:	50                   	push   eax
c001bed3:	e8 fc 35 ff ff       	call   c000f4d4 <malloc>
c001bed8:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001bedb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001bedf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bee2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bee6:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001beea:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001beee:	0f af c2             	imul   eax,edx
c001bef1:	99                   	cdq    
c001bef2:	52                   	push   edx
c001bef3:	50                   	push   eax
c001bef4:	55                   	push   ebp
c001bef5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bef8:	83 c4 20             	add    esp,0x20
c001befb:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001beff:	0f 86 8a 00 00 00    	jbe    c001bf8f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001bf05:	0f b7 de             	movzx  ebx,si
c001bf08:	c1 e3 05             	shl    ebx,0x5
c001bf0b:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c001bf0f:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001bf12:	75 75                	jne    c001bf89 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001bf14:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001bf17:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bf1b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001bf1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bf22:	52                   	push   edx
c001bf23:	31 d2                	xor    edx,edx
c001bf25:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001bf28:	52                   	push   edx
c001bf29:	50                   	push   eax
c001bf2a:	55                   	push   ebp
c001bf2b:	e8 a8 6d ff ff       	call   c0012cd8 <File::seek(unsigned long long)>
c001bf30:	83 c4 10             	add    esp,0x10
c001bf33:	85 c0                	test   eax,eax
c001bf35:	0f 85 bc 05 00 00    	jne    c001c4f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bf3b:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001bf42:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001bf45:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001bf49:	31 d2                	xor    edx,edx
c001bf4b:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001bf4f:	83 ec 0c             	sub    esp,0xc
c001bf52:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001bf56:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001bf5d:	50                   	push   eax
c001bf5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001bf62:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bf66:	52                   	push   edx
c001bf67:	50                   	push   eax
c001bf68:	55                   	push   ebp
c001bf69:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bf6c:	83 c4 1c             	add    esp,0x1c
c001bf6f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001bf72:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001bf75:	50                   	push   eax
c001bf76:	6a 00                	push   0x0
c001bf78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf7c:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001bf80:	50                   	push   eax
c001bf81:	e8 05 47 fe ff       	call   c000068b <memset>
c001bf86:	83 c4 10             	add    esp,0x10
c001bf89:	46                   	inc    esi
c001bf8a:	e9 6c ff ff ff       	jmp    c001befb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001bf8f:	31 db                	xor    ebx,ebx
c001bf91:	50                   	push   eax
c001bf92:	68 00 01 00 00       	push   0x100
c001bf97:	6a 00                	push   0x0
c001bf99:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001bf9d:	50                   	push   eax
c001bf9e:	e8 e8 46 fe ff       	call   c000068b <memset>
c001bfa3:	83 c4 0c             	add    esp,0xc
c001bfa6:	68 00 01 00 00       	push   0x100
c001bfab:	6a 00                	push   0x0
c001bfad:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001bfb4:	50                   	push   eax
c001bfb5:	e8 d1 46 fe ff       	call   c000068b <memset>
c001bfba:	83 c4 10             	add    esp,0x10
c001bfbd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001bfc5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001bfcd:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001bfd5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001bfdd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001bfe5:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001bfe9:	0f 86 30 01 00 00    	jbe    c001c11f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001bfef:	0f b7 f3             	movzx  esi,bx
c001bff2:	6b f6 28             	imul   esi,esi,0x28
c001bff5:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001bff9:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001bffc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c000:	50                   	push   eax
c001c001:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c005:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001c009:	8b 06                	mov    eax,DWORD PTR [esi]
c001c00b:	6b d2 28             	imul   edx,edx,0x28
c001c00e:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001c012:	31 d2                	xor    edx,edx
c001c014:	52                   	push   edx
c001c015:	50                   	push   eax
c001c016:	55                   	push   ebp
c001c017:	e8 bc 6c ff ff       	call   c0012cd8 <File::seek(unsigned long long)>
c001c01c:	83 c4 0c             	add    esp,0xc
c001c01f:	6a 20                	push   0x20
c001c021:	6a 00                	push   0x0
c001c023:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c02a:	51                   	push   ecx
c001c02b:	e8 5b 46 fe ff       	call   c000068b <memset>
c001c030:	58                   	pop    eax
c001c031:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c034:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c038:	52                   	push   edx
c001c039:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001c040:	51                   	push   ecx
c001c041:	6a 00                	push   0x0
c001c043:	6a 1f                	push   0x1f
c001c045:	55                   	push   ebp
c001c046:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c049:	83 c4 1c             	add    esp,0x1c
c001c04c:	6a 09                	push   0x9
c001c04e:	68 4f a5 02 c0       	push   0xc002a54f
c001c053:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c05a:	51                   	push   ecx
c001c05b:	e8 92 45 fe ff       	call   c00005f2 <memcmp>
c001c060:	83 c4 10             	add    esp,0x10
c001c063:	85 c0                	test   eax,eax
c001c065:	75 21                	jne    c001c088 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001c067:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c06b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001c06f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c073:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c077:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c07a:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001c081:	89 c8                	mov    eax,ecx
c001c083:	40                   	inc    eax
c001c084:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c088:	50                   	push   eax
c001c089:	6a 09                	push   0x9
c001c08b:	68 59 a5 02 c0       	push   0xc002a559
c001c090:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c097:	50                   	push   eax
c001c098:	e8 55 45 fe ff       	call   c00005f2 <memcmp>
c001c09d:	83 c4 10             	add    esp,0x10
c001c0a0:	85 c0                	test   eax,eax
c001c0a2:	75 21                	jne    c001c0c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001c0a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c0a8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001c0ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c0b0:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c0b4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c0b7:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001c0be:	89 c8                	mov    eax,ecx
c001c0c0:	40                   	inc    eax
c001c0c1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c0c5:	50                   	push   eax
c001c0c6:	50                   	push   eax
c001c0c7:	68 25 a5 02 c0       	push   0xc002a525
c001c0cc:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c0d3:	50                   	push   eax
c001c0d4:	e8 a2 46 fe ff       	call   c000077b <strcmp>
c001c0d9:	83 c4 10             	add    esp,0x10
c001c0dc:	85 c0                	test   eax,eax
c001c0de:	75 0f                	jne    c001c0ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001c0e0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c0e3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c0e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c0eb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c0ef:	50                   	push   eax
c001c0f0:	50                   	push   eax
c001c0f1:	68 2d a5 02 c0       	push   0xc002a52d
c001c0f6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c0fd:	50                   	push   eax
c001c0fe:	e8 78 46 fe ff       	call   c000077b <strcmp>
c001c103:	83 c4 10             	add    esp,0x10
c001c106:	85 c0                	test   eax,eax
c001c108:	75 0f                	jne    c001c119 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001c10a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c10d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c115:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c119:	43                   	inc    ebx
c001c11a:	e9 c6 fe ff ff       	jmp    c001bfe5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001c11f:	31 d2                	xor    edx,edx
c001c121:	50                   	push   eax
c001c122:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c126:	52                   	push   edx
c001c127:	50                   	push   eax
c001c128:	55                   	push   ebp
c001c129:	e8 aa 6b ff ff       	call   c0012cd8 <File::seek(unsigned long long)>
c001c12e:	5a                   	pop    edx
c001c12f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c133:	e8 9c 33 ff ff       	call   c000f4d4 <malloc>
c001c138:	31 d2                	xor    edx,edx
c001c13a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001c13e:	59                   	pop    ecx
c001c13f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c142:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c146:	53                   	push   ebx
c001c147:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001c14b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c14f:	52                   	push   edx
c001c150:	50                   	push   eax
c001c151:	55                   	push   ebp
c001c152:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c155:	83 c4 14             	add    esp,0x14
c001c158:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c15c:	e8 73 33 ff ff       	call   c000f4d4 <malloc>
c001c161:	31 d2                	xor    edx,edx
c001c163:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c167:	83 c4 0c             	add    esp,0xc
c001c16a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c16e:	52                   	push   edx
c001c16f:	50                   	push   eax
c001c170:	55                   	push   ebp
c001c171:	e8 62 6b ff ff       	call   c0012cd8 <File::seek(unsigned long long)>
c001c176:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c179:	31 d2                	xor    edx,edx
c001c17b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c17e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c182:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c186:	52                   	push   edx
c001c187:	50                   	push   eax
c001c188:	55                   	push   ebp
c001c189:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c18c:	83 c4 20             	add    esp,0x20
c001c18f:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001c197:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c19b:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c001c19f:	0f 84 56 03 00 00    	je     c001c4fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x743>
c001c1a5:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c001c1ac:	31 d2                	xor    edx,edx
c001c1ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c1b2:	c1 e8 03             	shr    eax,0x3
c001c1b5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001c1b9:	50                   	push   eax
c001c1ba:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c1be:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001c1c2:	52                   	push   edx
c001c1c3:	50                   	push   eax
c001c1c4:	55                   	push   ebp
c001c1c5:	e8 0e 6b ff ff       	call   c0012cd8 <File::seek(unsigned long long)>
c001c1ca:	58                   	pop    eax
c001c1cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c1cf:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001c1d6:	e8 f9 32 ff ff       	call   c000f4d4 <malloc>
c001c1db:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c1de:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001c1e2:	31 d2                	xor    edx,edx
c001c1e4:	58                   	pop    eax
c001c1e5:	8d 44 24 58          	lea    eax,[esp+0x58]
c001c1e9:	50                   	push   eax
c001c1ea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c1ee:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c1f2:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001c1f9:	52                   	push   edx
c001c1fa:	50                   	push   eax
c001c1fb:	55                   	push   ebp
c001c1fc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c1ff:	83 c4 20             	add    esp,0x20
c001c202:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c20a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001c20e:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c001c212:	0f 8d c7 02 00 00    	jge    c001c4df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x727>
c001c218:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c21c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c220:	31 db                	xor    ebx,ebx
c001c222:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c001c225:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001c229:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c22d:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c001c231:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c235:	c1 e8 08             	shr    eax,0x8
c001c238:	89 c6                	mov    esi,eax
c001c23a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001c23e:	c1 e6 04             	shl    esi,0x4
c001c241:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c001c245:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c248:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c24c:	85 c0                	test   eax,eax
c001c24e:	0f 85 17 01 00 00    	jne    c001c36b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001c254:	83 ec 0c             	sub    esp,0xc
c001c257:	b3 01                	mov    bl,0x1
c001c259:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c25d:	03 06                	add    eax,DWORD PTR [esi]
c001c25f:	50                   	push   eax
c001c260:	e8 48 f8 ff ff       	call   c001baad <Thr::getAddressOfKernelSymbol(char const*)>
c001c265:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c269:	83 c4 10             	add    esp,0x10
c001c26c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001c271:	0f 85 f4 00 00 00    	jne    c001c36b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001c277:	50                   	push   eax
c001c278:	50                   	push   eax
c001c279:	68 63 a5 02 c0       	push   0xc002a563
c001c27e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c282:	03 06                	add    eax,DWORD PTR [esi]
c001c284:	50                   	push   eax
c001c285:	e8 f1 44 fe ff       	call   c000077b <strcmp>
c001c28a:	83 c4 10             	add    esp,0x10
c001c28d:	85 c0                	test   eax,eax
c001c28f:	75 0a                	jne    c001c29b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x4e3>
c001c291:	b8 bc 52 02 c0       	mov    eax,0xc00252bc
c001c296:	e9 ca 00 00 00       	jmp    c001c365 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001c29b:	50                   	push   eax
c001c29c:	50                   	push   eax
c001c29d:	68 6d a5 02 c0       	push   0xc002a56d
c001c2a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c2a6:	03 06                	add    eax,DWORD PTR [esi]
c001c2a8:	50                   	push   eax
c001c2a9:	e8 cd 44 fe ff       	call   c000077b <strcmp>
c001c2ae:	83 c4 10             	add    esp,0x10
c001c2b1:	85 c0                	test   eax,eax
c001c2b3:	75 0a                	jne    c001c2bf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x507>
c001c2b5:	b8 f0 4f 02 c0       	mov    eax,0xc0024ff0
c001c2ba:	e9 a6 00 00 00       	jmp    c001c365 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001c2bf:	53                   	push   ebx
c001c2c0:	53                   	push   ebx
c001c2c1:	68 76 a5 02 c0       	push   0xc002a576
c001c2c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c2ca:	03 06                	add    eax,DWORD PTR [esi]
c001c2cc:	50                   	push   eax
c001c2cd:	e8 a9 44 fe ff       	call   c000077b <strcmp>
c001c2d2:	83 c4 10             	add    esp,0x10
c001c2d5:	85 c0                	test   eax,eax
c001c2d7:	75 0a                	jne    c001c2e3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x52b>
c001c2d9:	b8 bc 53 02 c0       	mov    eax,0xc00253bc
c001c2de:	e9 82 00 00 00       	jmp    c001c365 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001c2e3:	51                   	push   ecx
c001c2e4:	51                   	push   ecx
c001c2e5:	68 80 a5 02 c0       	push   0xc002a580
c001c2ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c2ee:	03 06                	add    eax,DWORD PTR [esi]
c001c2f0:	50                   	push   eax
c001c2f1:	e8 85 44 fe ff       	call   c000077b <strcmp>
c001c2f6:	83 c4 10             	add    esp,0x10
c001c2f9:	85 c0                	test   eax,eax
c001c2fb:	74 63                	je     c001c360 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a8>
c001c2fd:	50                   	push   eax
c001c2fe:	50                   	push   eax
c001c2ff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c303:	03 06                	add    eax,DWORD PTR [esi]
c001c305:	50                   	push   eax
c001c306:	68 89 a5 02 c0       	push   0xc002a589
c001c30b:	e8 77 63 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001c310:	58                   	pop    eax
c001c311:	5a                   	pop    edx
c001c312:	68 a3 a5 02 c0       	push   0xc002a5a3
c001c317:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c001c31e:	53                   	push   ebx
c001c31f:	e8 06 44 fe ff       	call   c000072a <strcpy>
c001c324:	59                   	pop    ecx
c001c325:	58                   	pop    eax
c001c326:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c32a:	03 06                	add    eax,DWORD PTR [esi]
c001c32c:	50                   	push   eax
c001c32d:	53                   	push   ebx
c001c32e:	e8 ae 44 fe ff       	call   c00007e1 <strcat>
c001c333:	58                   	pop    eax
c001c334:	5a                   	pop    edx
c001c335:	68 39 a6 02 c0       	push   0xc002a639
c001c33a:	53                   	push   ebx
c001c33b:	e8 a1 44 fe ff       	call   c00007e1 <strcat>
c001c340:	83 c4 10             	add    esp,0x10
c001c343:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001c348:	0f 84 4b 01 00 00    	je     c001c499 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001c34e:	83 ec 0c             	sub    esp,0xc
c001c351:	53                   	push   ebx
c001c352:	e8 4a d4 ff ff       	call   c00197a1 <Krnl::panic(char const*)>
c001c357:	83 c4 10             	add    esp,0x10
c001c35a:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c001c35e:	eb 0b                	jmp    c001c36b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001c360:	b8 3c 51 02 c0       	mov    eax,0xc002513c
c001c365:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c369:	b3 01                	mov    bl,0x1
c001c36b:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c001c370:	0f 85 80 00 00 00    	jne    c001c3f6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63e>
c001c376:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001c37d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c381:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001c385:	01 ce                	add    esi,ecx
c001c387:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001c38f:	8b 06                	mov    eax,DWORD PTR [esi]
c001c391:	0f 94 c2             	sete   dl
c001c394:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001c39c:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c001c3a1:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c001c3a5:	84 db                	test   bl,bl
c001c3a7:	74 31                	je     c001c3da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x622>
c001c3a9:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001c3ad:	01 c3                	add    ebx,eax
c001c3af:	84 d2                	test   dl,dl
c001c3b1:	75 0a                	jne    c001c3bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x605>
c001c3b3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c3b7:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001c3bb:	76 32                	jbe    c001c3ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001c3bd:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001c3c2:	0f 84 d1 00 00 00    	je     c001c499 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001c3c8:	83 ec 0c             	sub    esp,0xc
c001c3cb:	68 ba a5 02 c0       	push   0xc002a5ba
c001c3d0:	e8 cc d3 ff ff       	call   c00197a1 <Krnl::panic(char const*)>
c001c3d5:	83 c4 10             	add    esp,0x10
c001c3d8:	eb 15                	jmp    c001c3ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001c3da:	8d 1c 08             	lea    ebx,[eax+ecx*1]
c001c3dd:	84 d2                	test   dl,dl
c001c3df:	75 0e                	jne    c001c3ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001c3e1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c3e5:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001c3e9:	77 04                	ja     c001c3ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001c3eb:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001c3ef:	89 1e                	mov    DWORD PTR [esi],ebx
c001c3f1:	e9 e0 00 00 00       	jmp    c001c4d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001c3f6:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c001c3fb:	75 6e                	jne    c001c46b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b3>
c001c3fd:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001c404:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c001c408:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c001c40c:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001c414:	74 17                	je     c001c42d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c001c416:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001c41e:	74 0d                	je     c001c42d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c001c420:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c424:	83 e8 04             	sub    eax,0x4
c001c427:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001c42b:	76 17                	jbe    c001c444 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x68c>
c001c42d:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001c432:	74 65                	je     c001c499 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001c434:	83 ec 0c             	sub    esp,0xc
c001c437:	68 d6 a5 02 c0       	push   0xc002a5d6
c001c43c:	e8 60 d3 ff ff       	call   c00197a1 <Krnl::panic(char const*)>
c001c441:	83 c4 10             	add    esp,0x10
c001c444:	8b 16                	mov    edx,DWORD PTR [esi]
c001c446:	84 db                	test   bl,bl
c001c448:	74 13                	je     c001c45d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a5>
c001c44a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c44e:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c001c455:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001c459:	01 d0                	add    eax,edx
c001c45b:	eb 06                	jmp    c001c463 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c001c45d:	89 d0                	mov    eax,edx
c001c45f:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001c463:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001c467:	89 06                	mov    DWORD PTR [esi],eax
c001c469:	eb 6b                	jmp    c001c4d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001c46b:	50                   	push   eax
c001c46c:	50                   	push   eax
c001c46d:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001c472:	50                   	push   eax
c001c473:	68 f2 a5 02 c0       	push   0xc002a5f2
c001c478:	e8 0a 62 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001c47d:	83 c4 10             	add    esp,0x10
c001c480:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001c485:	74 12                	je     c001c499 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001c487:	83 ec 0c             	sub    esp,0xc
c001c48a:	68 fd a5 02 c0       	push   0xc002a5fd
c001c48f:	e8 0d d3 ff ff       	call   c00197a1 <Krnl::panic(char const*)>
c001c494:	83 c4 10             	add    esp,0x10
c001c497:	eb 3d                	jmp    c001c4d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001c499:	83 ec 0c             	sub    esp,0xc
c001c49c:	55                   	push   ebp
c001c49d:	e8 d6 67 ff ff       	call   c0012c78 <File::close()>
c001c4a2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c4a5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c4a8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c4ab:	59                   	pop    ecx
c001c4ac:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c4b0:	e8 2f 30 ff ff       	call   c000f4e4 <free>
c001c4b5:	5b                   	pop    ebx
c001c4b6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c4ba:	e8 25 30 ff ff       	call   c000f4e4 <free>
c001c4bf:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c4c2:	e8 1d 30 ff ff       	call   c000f4e4 <free>
c001c4c7:	5e                   	pop    esi
c001c4c8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c4cc:	e8 13 30 ff ff       	call   c000f4e4 <free>
c001c4d1:	83 c4 10             	add    esp,0x10
c001c4d4:	eb 21                	jmp    c001c4f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001c4d6:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c001c4da:	e9 2b fd ff ff       	jmp    c001c20a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001c4df:	83 ec 0c             	sub    esp,0xc
c001c4e2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c4e6:	e8 f9 2f ff ff       	call   c000f4e4 <free>
c001c4eb:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c001c4ef:	83 c4 10             	add    esp,0x10
c001c4f2:	e9 a0 fc ff ff       	jmp    c001c197 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001c4f7:	31 c0                	xor    eax,eax
c001c4f9:	eb 33                	jmp    c001c52e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x776>
c001c4fb:	83 ec 0c             	sub    esp,0xc
c001c4fe:	55                   	push   ebp
c001c4ff:	e8 74 67 ff ff       	call   c0012c78 <File::close()>
c001c504:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c507:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c50a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c50d:	58                   	pop    eax
c001c50e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c512:	e8 cd 2f ff ff       	call   c000f4e4 <free>
c001c517:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c51a:	e8 c5 2f ff ff       	call   c000f4e4 <free>
c001c51f:	5a                   	pop    edx
c001c520:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c524:	e8 bb 2f ff ff       	call   c000f4e4 <free>
c001c529:	83 c4 10             	add    esp,0x10
c001c52c:	b0 01                	mov    al,0x1
c001c52e:	81 c4 5c 03 00 00    	add    esp,0x35c
c001c534:	5b                   	pop    ebx
c001c535:	5e                   	pop    esi
c001c536:	5f                   	pop    edi
c001c537:	5d                   	pop    ebp
c001c538:	c3                   	ret    

c001c539 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001c539:	56                   	push   esi
c001c53a:	31 d2                	xor    edx,edx
c001c53c:	53                   	push   ebx
c001c53d:	8b 1d a0 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d5a0
c001c543:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c547:	39 d3                	cmp    ebx,edx
c001c549:	7e 1b                	jle    c001c566 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001c54b:	8b 04 95 c0 d7 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2840]
c001c552:	39 c8                	cmp    eax,ecx
c001c554:	77 0d                	ja     c001c563 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001c556:	8b 34 95 c0 d5 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd2a40]
c001c55d:	01 c6                	add    esi,eax
c001c55f:	39 ce                	cmp    esi,ecx
c001c561:	77 05                	ja     c001c568 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001c563:	42                   	inc    edx
c001c564:	eb e1                	jmp    c001c547 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001c566:	31 c0                	xor    eax,eax
c001c568:	5b                   	pop    ebx
c001c569:	5e                   	pop    esi
c001c56a:	c3                   	ret    

c001c56b <Thr::getDriverNameFromAddress(unsigned long)>:
c001c56b:	53                   	push   ebx
c001c56c:	31 c0                	xor    eax,eax
c001c56e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c572:	8b 1d a0 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d5a0
c001c578:	39 c3                	cmp    ebx,eax
c001c57a:	7e 22                	jle    c001c59e <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001c57c:	8b 14 85 c0 d7 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2840]
c001c583:	39 ca                	cmp    edx,ecx
c001c585:	77 14                	ja     c001c59b <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001c587:	03 14 85 c0 d5 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd2a40]
c001c58e:	39 ca                	cmp    edx,ecx
c001c590:	76 09                	jbe    c001c59b <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001c592:	8b 04 85 c0 d9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2640]
c001c599:	eb 05                	jmp    c001c5a0 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001c59b:	40                   	inc    eax
c001c59c:	eb da                	jmp    c001c578 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001c59e:	31 c0                	xor    eax,eax
c001c5a0:	5b                   	pop    ebx
c001c5a1:	c3                   	ret    

c001c5a2 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001c5a2:	53                   	push   ebx
c001c5a3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001c5a7:	53                   	push   ebx
c001c5a8:	e8 8c ff ff ff       	call   c001c539 <Thr::getDriverBaseFromAddress(unsigned long)>
c001c5ad:	5a                   	pop    edx
c001c5ae:	31 d2                	xor    edx,edx
c001c5b0:	85 c0                	test   eax,eax
c001c5b2:	74 04                	je     c001c5b8 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001c5b4:	89 da                	mov    edx,ebx
c001c5b6:	29 c2                	sub    edx,eax
c001c5b8:	89 d0                	mov    eax,edx
c001c5ba:	5b                   	pop    ebx
c001c5bb:	c3                   	ret    

c001c5bc <Thr::loadDLL(char const*, bool)>:
c001c5bc:	55                   	push   ebp
c001c5bd:	57                   	push   edi
c001c5be:	56                   	push   esi
c001c5bf:	53                   	push   ebx
c001c5c0:	81 ec 34 01 00 00    	sub    esp,0x134
c001c5c6:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001c5cd:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001c5d4:	56                   	push   esi
c001c5d5:	68 15 a6 02 c0       	push   0xc002a615
c001c5da:	e8 a8 60 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001c5df:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001c5e6:	e8 e9 2e ff ff       	call   c000f4d4 <malloc>
c001c5eb:	83 c4 0c             	add    esp,0xc
c001c5ee:	89 c3                	mov    ebx,eax
c001c5f0:	ff 35 94 dd 02 c0    	push   DWORD PTR ds:0xc002dd94
c001c5f6:	56                   	push   esi
c001c5f7:	50                   	push   eax
c001c5f8:	e8 b9 65 ff ff       	call   c0012bb6 <File::File(char const*, Process*)>
c001c5fd:	83 c4 10             	add    esp,0x10
c001c600:	85 db                	test   ebx,ebx
c001c602:	75 3c                	jne    c001c640 <Thr::loadDLL(char const*, bool)+0x84>
c001c604:	89 e8                	mov    eax,ebp
c001c606:	84 c0                	test   al,al
c001c608:	0f 84 b0 01 00 00    	je     c001c7be <Thr::loadDLL(char const*, bool)+0x202>
c001c60e:	50                   	push   eax
c001c60f:	50                   	push   eax
c001c610:	68 26 a6 02 c0       	push   0xc002a626
c001c615:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001c619:	57                   	push   edi
c001c61a:	e8 0b 41 fe ff       	call   c000072a <strcpy>
c001c61f:	58                   	pop    eax
c001c620:	5a                   	pop    edx
c001c621:	56                   	push   esi
c001c622:	57                   	push   edi
c001c623:	e8 b9 41 fe ff       	call   c00007e1 <strcat>
c001c628:	59                   	pop    ecx
c001c629:	58                   	pop    eax
c001c62a:	68 39 a6 02 c0       	push   0xc002a639
c001c62f:	57                   	push   edi
c001c630:	e8 ac 41 fe ff       	call   c00007e1 <strcat>
c001c635:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c638:	e8 64 d1 ff ff       	call   c00197a1 <Krnl::panic(char const*)>
c001c63d:	83 c4 10             	add    esp,0x10
c001c640:	50                   	push   eax
c001c641:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001c645:	50                   	push   eax
c001c646:	8d 44 24 20          	lea    eax,[esp+0x20]
c001c64a:	50                   	push   eax
c001c64b:	53                   	push   ebx
c001c64c:	e8 75 68 ff ff       	call   c0012ec6 <File::stat(unsigned long long*, bool*)>
c001c651:	83 c4 10             	add    esp,0x10
c001c654:	85 db                	test   ebx,ebx
c001c656:	74 0c                	je     c001c664 <Thr::loadDLL(char const*, bool)+0xa8>
c001c658:	83 ec 0c             	sub    esp,0xc
c001c65b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c65d:	53                   	push   ebx
c001c65e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c661:	83 c4 10             	add    esp,0x10
c001c664:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001c669:	75 0a                	jne    c001c675 <Thr::loadDLL(char const*, bool)+0xb9>
c001c66b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c66f:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001c673:	75 3c                	jne    c001c6b1 <Thr::loadDLL(char const*, bool)+0xf5>
c001c675:	89 e8                	mov    eax,ebp
c001c677:	84 c0                	test   al,al
c001c679:	0f 84 3d 01 00 00    	je     c001c7bc <Thr::loadDLL(char const*, bool)+0x200>
c001c67f:	50                   	push   eax
c001c680:	50                   	push   eax
c001c681:	68 26 a6 02 c0       	push   0xc002a626
c001c686:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001c68a:	53                   	push   ebx
c001c68b:	e8 9a 40 fe ff       	call   c000072a <strcpy>
c001c690:	58                   	pop    eax
c001c691:	5a                   	pop    edx
c001c692:	56                   	push   esi
c001c693:	53                   	push   ebx
c001c694:	e8 48 41 fe ff       	call   c00007e1 <strcat>
c001c699:	59                   	pop    ecx
c001c69a:	5f                   	pop    edi
c001c69b:	68 39 a6 02 c0       	push   0xc002a639
c001c6a0:	53                   	push   ebx
c001c6a1:	e8 3b 41 fe ff       	call   c00007e1 <strcat>
c001c6a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c6a9:	e8 f3 d0 ff ff       	call   c00197a1 <Krnl::panic(char const*)>
c001c6ae:	83 c4 10             	add    esp,0x10
c001c6b1:	e8 71 51 ff ff       	call   c0011827 <Virt::getAKernelVAS()>
c001c6b6:	51                   	push   ecx
c001c6b7:	6a 03                	push   0x3
c001c6b9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001c6bd:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001c6c1:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001c6c7:	83 d3 00             	adc    ebx,0x0
c001c6ca:	89 ca                	mov    edx,ecx
c001c6cc:	89 d1                	mov    ecx,edx
c001c6ce:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001c6d2:	51                   	push   ecx
c001c6d3:	50                   	push   eax
c001c6d4:	e8 89 57 ff ff       	call   c0011e62 <VAS::allocatePages(int, int)>
c001c6d9:	89 34 24             	mov    DWORD PTR [esp],esi
c001c6dc:	89 c3                	mov    ebx,eax
c001c6de:	e8 c5 3f fe ff       	call   c00006a8 <strlen>
c001c6e3:	8b 3d a0 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d5a0
c001c6e9:	40                   	inc    eax
c001c6ea:	89 04 24             	mov    DWORD PTR [esp],eax
c001c6ed:	e8 e2 2d ff ff       	call   c000f4d4 <malloc>
c001c6f2:	89 04 bd c0 d9 02 c0 	mov    DWORD PTR [edi*4-0x3ffd2640],eax
c001c6f9:	5f                   	pop    edi
c001c6fa:	58                   	pop    eax
c001c6fb:	a1 a0 d5 02 c0       	mov    eax,ds:0xc002d5a0
c001c700:	56                   	push   esi
c001c701:	ff 34 85 c0 d9 02 c0 	push   DWORD PTR [eax*4-0x3ffd2640]
c001c708:	e8 1d 40 fe ff       	call   c000072a <strcpy>
c001c70d:	a1 a0 d5 02 c0       	mov    eax,ds:0xc002d5a0
c001c712:	8d 50 01             	lea    edx,[eax+0x1]
c001c715:	89 1c 85 c0 d7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2840],ebx
c001c71c:	89 15 a0 d5 02 c0    	mov    DWORD PTR ds:0xc002d5a0,edx
c001c722:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c726:	83 c4 0c             	add    esp,0xc
c001c729:	89 14 85 c0 d5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2a40],edx
c001c730:	6a 01                	push   0x1
c001c732:	53                   	push   ebx
c001c733:	56                   	push   esi
c001c734:	e8 7f f6 ff ff       	call   c001bdb8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001c739:	83 c4 10             	add    esp,0x10
c001c73c:	89 c7                	mov    edi,eax
c001c73e:	fe c8                	dec    al
c001c740:	74 16                	je     c001c758 <Thr::loadDLL(char const*, bool)+0x19c>
c001c742:	89 e8                	mov    eax,ebp
c001c744:	84 c0                	test   al,al
c001c746:	74 10                	je     c001c758 <Thr::loadDLL(char const*, bool)+0x19c>
c001c748:	83 ec 0c             	sub    esp,0xc
c001c74b:	68 3b a6 02 c0       	push   0xc002a63b
c001c750:	e8 4c d0 ff ff       	call   c00197a1 <Krnl::panic(char const*)>
c001c755:	83 c4 10             	add    esp,0x10
c001c758:	31 f6                	xor    esi,esi
c001c75a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c75e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c762:	05 ff 0f 00 00       	add    eax,0xfff
c001c767:	83 d2 00             	adc    edx,0x0
c001c76a:	0f ac d0 0c          	shrd   eax,edx,0xc
c001c76e:	c1 ea 0c             	shr    edx,0xc
c001c771:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c775:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c779:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001c77d:	ba 00 00 00 00       	mov    edx,0x0
c001c782:	89 d0                	mov    eax,edx
c001c784:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001c788:	73 2c                	jae    c001c7b6 <Thr::loadDLL(char const*, bool)+0x1fa>
c001c78a:	e8 98 50 ff ff       	call   c0011827 <Virt::getAKernelVAS()>
c001c78f:	89 f5                	mov    ebp,esi
c001c791:	c1 e5 0c             	shl    ebp,0xc
c001c794:	52                   	push   edx
c001c795:	01 dd                	add    ebp,ebx
c001c797:	52                   	push   edx
c001c798:	55                   	push   ebp
c001c799:	50                   	push   eax
c001c79a:	e8 3d 52 ff ff       	call   c00119dc <VAS::getPageTableEntry(unsigned long)>
c001c79f:	83 c4 10             	add    esp,0x10
c001c7a2:	f6 00 60             	test   BYTE PTR [eax],0x60
c001c7a5:	75 0c                	jne    c001c7b3 <Thr::loadDLL(char const*, bool)+0x1f7>
c001c7a7:	83 ec 0c             	sub    esp,0xc
c001c7aa:	55                   	push   ebp
c001c7ab:	e8 74 31 ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c001c7b0:	83 c4 10             	add    esp,0x10
c001c7b3:	46                   	inc    esi
c001c7b4:	eb a4                	jmp    c001c75a <Thr::loadDLL(char const*, bool)+0x19e>
c001c7b6:	89 f8                	mov    eax,edi
c001c7b8:	84 c0                	test   al,al
c001c7ba:	75 02                	jne    c001c7be <Thr::loadDLL(char const*, bool)+0x202>
c001c7bc:	31 db                	xor    ebx,ebx
c001c7be:	81 c4 2c 01 00 00    	add    esp,0x12c
c001c7c4:	89 d8                	mov    eax,ebx
c001c7c6:	5b                   	pop    ebx
c001c7c7:	5e                   	pop    esi
c001c7c8:	5f                   	pop    edi
c001c7c9:	5d                   	pop    ebp
c001c7ca:	c3                   	ret    

c001c7cb <Thr::executeDLL(unsigned long, void*)>:
c001c7cb:	56                   	push   esi
c001c7cc:	53                   	push   ebx
c001c7cd:	51                   	push   ecx
c001c7ce:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c7d2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001c7d6:	85 db                	test   ebx,ebx
c001c7d8:	75 10                	jne    c001c7ea <Thr::executeDLL(unsigned long, void*)+0x1f>
c001c7da:	83 ec 0c             	sub    esp,0xc
c001c7dd:	68 5a a6 02 c0       	push   0xc002a65a
c001c7e2:	e8 ba cf ff ff       	call   c00197a1 <Krnl::panic(char const*)>
c001c7e7:	83 c4 10             	add    esp,0x10
c001c7ea:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001c7ee:	89 d8                	mov    eax,ebx
c001c7f0:	5a                   	pop    edx
c001c7f1:	5b                   	pop    ebx
c001c7f2:	5e                   	pop    esi
c001c7f3:	ff e0                	jmp    eax
c001c7f5:	90                   	nop

c001c7f6 <changeTSS>:
c001c7f6:	83 ec 14             	sub    esp,0x14
c001c7f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c7fe:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001c801:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001c806:	c1 e2 15             	shl    edx,0x15
c001c809:	29 d0                	sub    eax,edx
c001c80b:	50                   	push   eax
c001c80c:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c001c811:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c817:	05 7c 11 00 00       	add    eax,0x117c
c001c81c:	50                   	push   eax
c001c81d:	e8 b4 47 ff ff       	call   c0010fd6 <TSS::setESP(unsigned long)>
c001c822:	83 c4 1c             	add    esp,0x1c
c001c825:	c3                   	ret    

c001c826 <Process::addArgs(char**)>:
c001c826:	57                   	push   edi
c001c827:	56                   	push   esi
c001c828:	53                   	push   ebx
c001c829:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c82d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c831:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001c83b:	85 ff                	test   edi,edi
c001c83d:	74 3d                	je     c001c87c <Process::addArgs(char**)+0x56>
c001c83f:	8b 07                	mov    eax,DWORD PTR [edi]
c001c841:	85 c0                	test   eax,eax
c001c843:	74 37                	je     c001c87c <Process::addArgs(char**)+0x56>
c001c845:	31 db                	xor    ebx,ebx
c001c847:	83 ec 0c             	sub    esp,0xc
c001c84a:	50                   	push   eax
c001c84b:	e8 58 3e fe ff       	call   c00006a8 <strlen>
c001c850:	40                   	inc    eax
c001c851:	89 04 24             	mov    DWORD PTR [esp],eax
c001c854:	e8 7b 2c ff ff       	call   c000f4d4 <malloc>
c001c859:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001c860:	5a                   	pop    edx
c001c861:	59                   	pop    ecx
c001c862:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001c865:	43                   	inc    ebx
c001c866:	50                   	push   eax
c001c867:	e8 be 3e fe ff       	call   c000072a <strcpy>
c001c86c:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001c872:	83 c4 10             	add    esp,0x10
c001c875:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001c878:	85 c0                	test   eax,eax
c001c87a:	75 cb                	jne    c001c847 <Process::addArgs(char**)+0x21>
c001c87c:	5b                   	pop    ebx
c001c87d:	5e                   	pop    esi
c001c87e:	5f                   	pop    edi
c001c87f:	c3                   	ret    

c001c880 <Process::Process(char const*, Process*, char**)>:
c001c880:	56                   	push   esi
c001c881:	53                   	push   ebx
c001c882:	83 ec 14             	sub    esp,0x14
c001c885:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c889:	05 0c 02 00 00       	add    eax,0x20c
c001c88e:	bb 07 00 00 00       	mov    ebx,0x7
c001c893:	89 c6                	mov    esi,eax
c001c895:	85 db                	test   ebx,ebx
c001c897:	78 12                	js     c001c8ab <Process::Process(char const*, Process*, char**)+0x2b>
c001c899:	83 ec 0c             	sub    esp,0xc
c001c89c:	56                   	push   esi
c001c89d:	e8 d0 ac 00 00       	call   c0027572 <ThreadControlBlock::ThreadControlBlock()>
c001c8a2:	83 c4 10             	add    esp,0x10
c001c8a5:	83 c6 63             	add    esi,0x63
c001c8a8:	4b                   	dec    ebx
c001c8a9:	eb ea                	jmp    c001c895 <Process::Process(char const*, Process*, char**)+0x15>
c001c8ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c8af:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001c8b6:	83 ec 0c             	sub    esp,0xc
c001c8b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c8bd:	e8 30 cd ff ff       	call   c00195f2 <Krnl::newProcessEnv(Process*)>
c001c8c2:	83 c4 10             	add    esp,0x10
c001c8c5:	89 c2                	mov    edx,eax
c001c8c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c8cb:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001c8d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c8d5:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001c8de:	a1 d0 bd 02 c0       	mov    eax,ds:0xc002bdd0
c001c8e3:	8d 50 01             	lea    edx,[eax+0x1]
c001c8e6:	89 15 d0 bd 02 c0    	mov    DWORD PTR ds:0xc002bdd0,edx
c001c8ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c8f0:	89 02                	mov    DWORD PTR [edx],eax
c001c8f2:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001c8fa:	83 ec 0c             	sub    esp,0xc
c001c8fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c901:	e8 ce 2b ff ff       	call   c000f4d4 <malloc>
c001c906:	83 c4 10             	add    esp,0x10
c001c909:	89 c3                	mov    ebx,eax
c001c90b:	83 ec 08             	sub    esp,0x8
c001c90e:	6a 00                	push   0x0
c001c910:	53                   	push   ebx
c001c911:	e8 f4 58 ff ff       	call   c001220a <VAS::VAS(bool)>
c001c916:	83 c4 10             	add    esp,0x10
c001c919:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c91d:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001c923:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c927:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001c931:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c935:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c939:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001c93f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c943:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001c949:	85 c0                	test   eax,eax
c001c94b:	74 42                	je     c001c98f <Process::Process(char const*, Process*, char**)+0x10f>
c001c94d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c951:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001c957:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c95d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c961:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001c967:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c96b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001c971:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001c977:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c97b:	05 0c 01 00 00       	add    eax,0x10c
c001c980:	83 ec 08             	sub    esp,0x8
c001c983:	52                   	push   edx
c001c984:	50                   	push   eax
c001c985:	e8 a0 3d fe ff       	call   c000072a <strcpy>
c001c98a:	83 c4 10             	add    esp,0x10
c001c98d:	eb 63                	jmp    c001c9f2 <Process::Process(char const*, Process*, char**)+0x172>
c001c98f:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001c997:	83 ec 0c             	sub    esp,0xc
c001c99a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c99e:	e8 31 2b ff ff       	call   c000f4d4 <malloc>
c001c9a3:	83 c4 10             	add    esp,0x10
c001c9a6:	89 c3                	mov    ebx,eax
c001c9a8:	83 ec 08             	sub    esp,0x8
c001c9ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c9af:	53                   	push   ebx
c001c9b0:	e8 1f 43 ff ff       	call   c0010cd4 <VgaText::VgaText(char const*)>
c001c9b5:	83 c4 10             	add    esp,0x10
c001c9b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c9bc:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001c9c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c9c6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001c9cc:	83 ec 0c             	sub    esp,0xc
c001c9cf:	50                   	push   eax
c001c9d0:	e8 4a 36 ff ff       	call   c001001f <addToTerminalCycle(VgaText*)>
c001c9d5:	83 c4 10             	add    esp,0x10
c001c9d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c9dc:	05 0c 01 00 00       	add    eax,0x10c
c001c9e1:	83 ec 08             	sub    esp,0x8
c001c9e4:	68 84 a6 02 c0       	push   0xc002a684
c001c9e9:	50                   	push   eax
c001c9ea:	e8 3b 3d fe ff       	call   c000072a <strcpy>
c001c9ef:	83 c4 10             	add    esp,0x10
c001c9f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c9f6:	83 c0 0c             	add    eax,0xc
c001c9f9:	83 ec 08             	sub    esp,0x8
c001c9fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ca00:	50                   	push   eax
c001ca01:	e8 24 3d fe ff       	call   c000072a <strcpy>
c001ca06:	83 c4 10             	add    esp,0x10
c001ca09:	83 ec 08             	sub    esp,0x8
c001ca0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ca10:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ca14:	e8 0d fe ff ff       	call   c001c826 <Process::addArgs(char**)>
c001ca19:	83 c4 10             	add    esp,0x10
c001ca1c:	83 ec 08             	sub    esp,0x8
c001ca1f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ca23:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ca27:	e8 58 ee ff ff       	call   c001b884 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001ca2c:	83 c4 10             	add    esp,0x10
c001ca2f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ca33:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ca37:	83 f0 01             	xor    eax,0x1
c001ca3a:	88 c2                	mov    dl,al
c001ca3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca40:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001ca46:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001ca4b:	83 ec 08             	sub    esp,0x8
c001ca4e:	50                   	push   eax
c001ca4f:	68 80 a7 02 c0       	push   0xc002a780
c001ca54:	e8 2e 5c ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001ca59:	83 c4 10             	add    esp,0x10
c001ca5c:	90                   	nop
c001ca5d:	83 c4 14             	add    esp,0x14
c001ca60:	5b                   	pop    ebx
c001ca61:	5e                   	pop    esi
c001ca62:	c3                   	ret    
c001ca63:	90                   	nop

c001ca64 <Process::Process(bool, char const*, Process*, char**)>:
c001ca64:	56                   	push   esi
c001ca65:	53                   	push   ebx
c001ca66:	83 ec 24             	sub    esp,0x24
c001ca69:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ca6d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ca71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ca75:	05 0c 02 00 00       	add    eax,0x20c
c001ca7a:	bb 07 00 00 00       	mov    ebx,0x7
c001ca7f:	89 c6                	mov    esi,eax
c001ca81:	85 db                	test   ebx,ebx
c001ca83:	78 12                	js     c001ca97 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001ca85:	83 ec 0c             	sub    esp,0xc
c001ca88:	56                   	push   esi
c001ca89:	e8 e4 aa 00 00       	call   c0027572 <ThreadControlBlock::ThreadControlBlock()>
c001ca8e:	83 c4 10             	add    esp,0x10
c001ca91:	83 c6 63             	add    esi,0x63
c001ca94:	4b                   	dec    ebx
c001ca95:	eb ea                	jmp    c001ca81 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001ca97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ca9b:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001caa2:	83 ec 0c             	sub    esp,0xc
c001caa5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001caa9:	e8 44 cb ff ff       	call   c00195f2 <Krnl::newProcessEnv(Process*)>
c001caae:	83 c4 10             	add    esp,0x10
c001cab1:	89 c2                	mov    edx,eax
c001cab3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cab7:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001cabd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cac1:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001caca:	a1 d0 bd 02 c0       	mov    eax,ds:0xc002bdd0
c001cacf:	8d 50 01             	lea    edx,[eax+0x1]
c001cad2:	89 15 d0 bd 02 c0    	mov    DWORD PTR ds:0xc002bdd0,edx
c001cad8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cadc:	89 02                	mov    DWORD PTR [edx],eax
c001cade:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001cae6:	83 ec 0c             	sub    esp,0xc
c001cae9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001caed:	e8 e2 29 ff ff       	call   c000f4d4 <malloc>
c001caf2:	83 c4 10             	add    esp,0x10
c001caf5:	89 c3                	mov    ebx,eax
c001caf7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001cafc:	83 ec 08             	sub    esp,0x8
c001caff:	50                   	push   eax
c001cb00:	53                   	push   ebx
c001cb01:	e8 04 57 ff ff       	call   c001220a <VAS::VAS(bool)>
c001cb06:	83 c4 10             	add    esp,0x10
c001cb09:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cb0d:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001cb13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cb17:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001cb21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cb25:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001cb29:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001cb2f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cb33:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cb39:	85 c0                	test   eax,eax
c001cb3b:	74 42                	je     c001cb7f <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001cb3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cb41:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cb47:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001cb4d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cb51:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001cb57:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cb5b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cb61:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001cb67:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cb6b:	05 0c 01 00 00       	add    eax,0x10c
c001cb70:	83 ec 08             	sub    esp,0x8
c001cb73:	52                   	push   edx
c001cb74:	50                   	push   eax
c001cb75:	e8 b0 3b fe ff       	call   c000072a <strcpy>
c001cb7a:	83 c4 10             	add    esp,0x10
c001cb7d:	eb 63                	jmp    c001cbe2 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001cb7f:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001cb87:	83 ec 0c             	sub    esp,0xc
c001cb8a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cb8e:	e8 41 29 ff ff       	call   c000f4d4 <malloc>
c001cb93:	83 c4 10             	add    esp,0x10
c001cb96:	89 c3                	mov    ebx,eax
c001cb98:	83 ec 08             	sub    esp,0x8
c001cb9b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001cb9f:	53                   	push   ebx
c001cba0:	e8 2f 41 ff ff       	call   c0010cd4 <VgaText::VgaText(char const*)>
c001cba5:	83 c4 10             	add    esp,0x10
c001cba8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cbac:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001cbb2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cbb6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001cbbc:	83 ec 0c             	sub    esp,0xc
c001cbbf:	50                   	push   eax
c001cbc0:	e8 5a 34 ff ff       	call   c001001f <addToTerminalCycle(VgaText*)>
c001cbc5:	83 c4 10             	add    esp,0x10
c001cbc8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cbcc:	05 0c 01 00 00       	add    eax,0x10c
c001cbd1:	83 ec 08             	sub    esp,0x8
c001cbd4:	68 84 a6 02 c0       	push   0xc002a684
c001cbd9:	50                   	push   eax
c001cbda:	e8 4b 3b fe ff       	call   c000072a <strcpy>
c001cbdf:	83 c4 10             	add    esp,0x10
c001cbe2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cbe6:	83 c0 0c             	add    eax,0xc
c001cbe9:	83 ec 08             	sub    esp,0x8
c001cbec:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001cbf0:	50                   	push   eax
c001cbf1:	e8 34 3b fe ff       	call   c000072a <strcpy>
c001cbf6:	83 c4 10             	add    esp,0x10
c001cbf9:	83 ec 08             	sub    esp,0x8
c001cbfc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001cc00:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cc04:	e8 1d fc ff ff       	call   c001c826 <Process::addArgs(char**)>
c001cc09:	83 c4 10             	add    esp,0x10
c001cc0c:	90                   	nop
c001cc0d:	83 c4 24             	add    esp,0x24
c001cc10:	5b                   	pop    ebx
c001cc11:	5e                   	pop    esi
c001cc12:	c3                   	ret    

c001cc13 <disableIRQs()>:
c001cc13:	fa                   	cli    
c001cc14:	ff 05 6c dd 02 c0    	inc    DWORD PTR ds:0xc002dd6c
c001cc1a:	c3                   	ret    

c001cc1b <getIRQNestingLevel()>:
c001cc1b:	a1 6c dd 02 c0       	mov    eax,ds:0xc002dd6c
c001cc20:	c3                   	ret    

c001cc21 <enableIRQs()>:
c001cc21:	a1 6c dd 02 c0       	mov    eax,ds:0xc002dd6c
c001cc26:	48                   	dec    eax
c001cc27:	a3 6c dd 02 c0       	mov    ds:0xc002dd6c,eax
c001cc2c:	75 01                	jne    c001cc2f <enableIRQs()+0xe>
c001cc2e:	fb                   	sti    
c001cc2f:	c3                   	ret    

c001cc30 <lockScheduler()>:
c001cc30:	eb e1                	jmp    c001cc13 <disableIRQs()>

c001cc32 <unlockScheduler()>:
c001cc32:	eb ed                	jmp    c001cc21 <enableIRQs()>

c001cc34 <userModeEntryPoint(void*)>:
c001cc34:	83 ec 0c             	sub    esp,0xc
c001cc37:	e8 f6 ff ff ff       	call   c001cc32 <unlockScheduler()>
c001cc3c:	fb                   	sti    
c001cc3d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cc42:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cc45:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001cc4b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cc4f:	83 c4 0c             	add    esp,0xc
c001cc52:	e9 88 36 fe ff       	jmp    c00002df <goToUsermode>

c001cc57 <lockStuff()>:
c001cc57:	e8 b7 ff ff ff       	call   c001cc13 <disableIRQs()>
c001cc5c:	ff 05 68 dd 02 c0    	inc    DWORD PTR ds:0xc002dd68
c001cc62:	c3                   	ret    

c001cc63 <taskStartupFunction>:
c001cc63:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cc68:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001cc6b:	c3                   	ret    

c001cc6c <updateTimeUsed()>:
c001cc6c:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c001cc71:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001cc77:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001cc7e:	74 50                	je     c001ccd0 <updateTimeUsed()+0x64>
c001cc80:	57                   	push   edi
c001cc81:	56                   	push   esi
c001cc82:	53                   	push   ebx
c001cc83:	0f 31                	rdtsc  
c001cc85:	89 c1                	mov    ecx,eax
c001cc87:	a3 a8 dd 02 c0       	mov    ds:0xc002dda8,eax
c001cc8c:	2b 0d 98 dd 02 c0    	sub    ecx,DWORD PTR ds:0xc002dd98
c001cc92:	89 d3                	mov    ebx,edx
c001cc94:	89 0d a0 dd 02 c0    	mov    DWORD PTR ds:0xc002dda0,ecx
c001cc9a:	1b 1d 9c dd 02 c0    	sbb    ebx,DWORD PTR ds:0xc002dd9c
c001cca0:	a3 98 dd 02 c0       	mov    ds:0xc002dd98,eax
c001cca5:	89 1d a4 dd 02 c0    	mov    DWORD PTR ds:0xc002dda4,ebx
c001ccab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ccb0:	89 15 ac dd 02 c0    	mov    DWORD PTR ds:0xc002ddac,edx
c001ccb6:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001ccb9:	89 15 9c dd 02 c0    	mov    DWORD PTR ds:0xc002dd9c,edx
c001ccbf:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001ccc2:	01 f1                	add    ecx,esi
c001ccc4:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001ccc7:	11 fb                	adc    ebx,edi
c001ccc9:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001cccc:	5b                   	pop    ebx
c001cccd:	5e                   	pop    esi
c001ccce:	5f                   	pop    edi
c001cccf:	c3                   	ret    
c001ccd0:	c3                   	ret    

c001ccd1 <switchToThread(ThreadControlBlock*)>:
c001ccd1:	53                   	push   ebx
c001ccd2:	83 ec 08             	sub    esp,0x8
c001ccd5:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c001ccda:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ccde:	85 c0                	test   eax,eax
c001cce0:	75 30                	jne    c001cd12 <switchToThread(ThreadControlBlock*)+0x41>
c001cce2:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001cce5:	3c ff                	cmp    al,0xff
c001cce7:	74 25                	je     c001cd0e <switchToThread(ThreadControlBlock*)+0x3d>
c001cce9:	0f b6 d0             	movzx  edx,al
c001ccec:	b8 84 03 00 00       	mov    eax,0x384
c001ccf1:	29 d0                	sub    eax,edx
c001ccf3:	c1 e0 10             	shl    eax,0x10
c001ccf6:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001ccf9:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001ccfc:	e8 6b ff ff ff       	call   c001cc6c <updateTimeUsed()>
c001cd01:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001cd05:	83 c4 08             	add    esp,0x8
c001cd08:	5b                   	pop    ebx
c001cd09:	e9 09 36 fe ff       	jmp    c0000317 <switchToThreadASM>
c001cd0e:	31 c0                	xor    eax,eax
c001cd10:	eb e7                	jmp    c001ccf9 <switchToThread(ThreadControlBlock*)+0x28>
c001cd12:	c7 05 64 dd 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002dd64,0x1
c001cd1c:	83 c4 08             	add    esp,0x8
c001cd1f:	5b                   	pop    ebx
c001cd20:	c3                   	ret    
c001cd21:	90                   	nop

c001cd22 <Semaphore::Semaphore(int)>:
c001cd22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd26:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cd2a:	89 10                	mov    DWORD PTR [eax],edx
c001cd2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd30:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001cd37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd3b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cd42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd46:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cd4d:	90                   	nop
c001cd4e:	c3                   	ret    
c001cd4f:	90                   	nop

c001cd50 <Mutex::Mutex()>:
c001cd50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd54:	6a 01                	push   0x1
c001cd56:	50                   	push   eax
c001cd57:	e8 c6 ff ff ff       	call   c001cd22 <Semaphore::Semaphore(int)>
c001cd5c:	83 c4 08             	add    esp,0x8
c001cd5f:	90                   	nop
c001cd60:	c3                   	ret    
c001cd61:	90                   	nop

c001cd62 <Process::createThread(void (*)(void*), void*, int)>:
c001cd62:	55                   	push   ebp
c001cd63:	31 c9                	xor    ecx,ecx
c001cd65:	57                   	push   edi
c001cd66:	56                   	push   esi
c001cd67:	53                   	push   ebx
c001cd68:	83 ec 1c             	sub    esp,0x1c
c001cd6b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001cd6f:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001cd76:	89 f2                	mov    edx,esi
c001cd78:	0f b7 c2             	movzx  eax,dx
c001cd7b:	83 e2 01             	and    edx,0x1
c001cd7e:	74 14                	je     c001cd94 <Process::createThread(void (*)(void*), void*, int)+0x32>
c001cd80:	d1 f8                	sar    eax,1
c001cd82:	41                   	inc    ecx
c001cd83:	89 c2                	mov    edx,eax
c001cd85:	83 f9 10             	cmp    ecx,0x10
c001cd88:	75 ee                	jne    c001cd78 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001cd8a:	83 c4 1c             	add    esp,0x1c
c001cd8d:	31 c0                	xor    eax,eax
c001cd8f:	5b                   	pop    ebx
c001cd90:	5e                   	pop    esi
c001cd91:	5f                   	pop    edi
c001cd92:	5d                   	pop    ebp
c001cd93:	c3                   	ret    
c001cd94:	83 ec 08             	sub    esp,0x8
c001cd97:	b8 01 00 00 00       	mov    eax,0x1
c001cd9c:	d3 e0                	shl    eax,cl
c001cd9e:	09 c6                	or     esi,eax
c001cda0:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001cda6:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001cdad:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001cdb0:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001cdb3:	01 ce                	add    esi,ecx
c001cdb5:	89 f0                	mov    eax,esi
c001cdb7:	c1 e0 05             	shl    eax,0x5
c001cdba:	01 c6                	add    esi,eax
c001cdbc:	8d 04 33             	lea    eax,[ebx+esi*1]
c001cdbf:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001cdc5:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001cdcb:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001cdcf:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001cdd5:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001cddb:	89 ca                	mov    edx,ecx
c001cddd:	f7 da                	neg    edx
c001cddf:	c1 e2 15             	shl    edx,0x15
c001cde2:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001cde8:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001cdee:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001cdf2:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001cdfc:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001ce02:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001ce06:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001ce0c:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001ce16:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001ce20:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001ce27:	50                   	push   eax
c001ce28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ce2c:	68 88 dd 02 c0       	push   0xc002dd88
c001ce31:	e8 ca a5 00 00       	call   c0027400 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ce36:	83 c4 10             	add    esp,0x10
c001ce39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ce3d:	83 c4 1c             	add    esp,0x1c
c001ce40:	5b                   	pop    ebx
c001ce41:	5e                   	pop    esi
c001ce42:	5f                   	pop    edi
c001ce43:	5d                   	pop    ebp
c001ce44:	c3                   	ret    
c001ce45:	90                   	nop

c001ce46 <Process::createUserThread()>:
c001ce46:	83 ec 0c             	sub    esp,0xc
c001ce49:	68 80 00 00 00       	push   0x80
c001ce4e:	6a 00                	push   0x0
c001ce50:	68 34 cc 01 c0       	push   0xc001cc34
c001ce55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce59:	e8 04 ff ff ff       	call   c001cd62 <Process::createThread(void (*)(void*), void*, int)>
c001ce5e:	83 c4 1c             	add    esp,0x1c
c001ce61:	c3                   	ret    

c001ce62 <setupMultitasking(void (*)())>:
c001ce62:	56                   	push   esi
c001ce63:	53                   	push   ebx
c001ce64:	53                   	push   ebx
c001ce65:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ce69:	eb 10                	jmp    c001ce7b <setupMultitasking(void (*)())+0x19>
c001ce6b:	83 ec 0c             	sub    esp,0xc
c001ce6e:	68 88 dd 02 c0       	push   0xc002dd88
c001ce73:	e8 da a4 00 00       	call   c0027352 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001ce78:	83 c4 10             	add    esp,0x10
c001ce7b:	83 ec 0c             	sub    esp,0xc
c001ce7e:	68 88 dd 02 c0       	push   0xc002dd88
c001ce83:	e8 ae a4 00 00       	call   c0027336 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001ce88:	83 c4 10             	add    esp,0x10
c001ce8b:	84 c0                	test   al,al
c001ce8d:	74 dc                	je     c001ce6b <setupMultitasking(void (*)())+0x9>
c001ce8f:	83 ec 0c             	sub    esp,0xc
c001ce92:	68 3f 07 00 00       	push   0x73f
c001ce97:	e8 38 26 ff ff       	call   c000f4d4 <malloc>
c001ce9c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001cea3:	89 c3                	mov    ebx,eax
c001cea5:	6a 00                	push   0x0
c001cea7:	68 88 a6 02 c0       	push   0xc002a688
c001ceac:	6a 01                	push   0x1
c001ceae:	50                   	push   eax
c001ceaf:	e8 b0 fb ff ff       	call   c001ca64 <Process::Process(bool, char const*, Process*, char**)>
c001ceb4:	83 c4 18             	add    esp,0x18
c001ceb7:	89 1d 94 dd 02 c0    	mov    DWORD PTR ds:0xc002dd94,ebx
c001cebd:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001cec3:	68 a8 a7 02 c0       	push   0xc002a7a8
c001cec8:	e8 ba 57 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001cecd:	58                   	pop    eax
c001cece:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001ced4:	e8 70 39 ff ff       	call   c0010849 <setActiveTerminal(VgaText*)>
c001ced9:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001cee1:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001cee7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ceea:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001cef4:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001cefa:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001cf00:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001cf0a:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001cf14:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001cf1e:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001cf24:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001cf2a:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001cf34:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001cf3a:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001cf44:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001cf4a:	5a                   	pop    edx
c001cf4b:	59                   	pop    ecx
c001cf4c:	68 84 a6 02 c0       	push   0xc002a684
c001cf51:	50                   	push   eax
c001cf52:	e8 d3 37 fe ff       	call   c000072a <strcpy>
c001cf57:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001cf5e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001cf62:	83 c4 14             	add    esp,0x14
c001cf65:	5b                   	pop    ebx
c001cf66:	5e                   	pop    esi
c001cf67:	e9 9d 33 fe ff       	jmp    c0000309 <switchToThreadASMFirstTime>

c001cf6c <schedule()>:
c001cf6c:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c001cf71:	85 c0                	test   eax,eax
c001cf73:	74 0b                	je     c001cf80 <schedule()+0x14>
c001cf75:	c7 05 64 dd 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002dd64,0x1
c001cf7f:	c3                   	ret    
c001cf80:	53                   	push   ebx
c001cf81:	83 ec 14             	sub    esp,0x14
c001cf84:	68 88 dd 02 c0       	push   0xc002dd88
c001cf89:	e8 a8 a3 00 00       	call   c0027336 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001cf8e:	83 c4 10             	add    esp,0x10
c001cf91:	84 c0                	test   al,al
c001cf93:	75 38                	jne    c001cfcd <schedule()+0x61>
c001cf95:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cf9a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001cf9d:	4a                   	dec    edx
c001cf9e:	74 32                	je     c001cfd2 <schedule()+0x66>
c001cfa0:	83 ec 0c             	sub    esp,0xc
c001cfa3:	68 88 dd 02 c0       	push   0xc002dd88
c001cfa8:	e8 81 a3 00 00       	call   c002732e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cfad:	c7 04 24 88 dd 02 c0 	mov    DWORD PTR [esp],0xc002dd88
c001cfb4:	89 c3                	mov    ebx,eax
c001cfb6:	e8 97 a3 00 00       	call   c0027352 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001cfbb:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001cfc2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cfc5:	e8 07 fd ff ff       	call   c001ccd1 <switchToThread(ThreadControlBlock*)>
c001cfca:	83 c4 10             	add    esp,0x10
c001cfcd:	83 c4 08             	add    esp,0x8
c001cfd0:	5b                   	pop    ebx
c001cfd1:	c3                   	ret    
c001cfd2:	83 ec 08             	sub    esp,0x8
c001cfd5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001cfdc:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001cfe2:	68 88 dd 02 c0       	push   0xc002dd88
c001cfe7:	e8 14 a4 00 00       	call   c0027400 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001cfec:	83 c4 10             	add    esp,0x10
c001cfef:	eb af                	jmp    c001cfa0 <schedule()+0x34>

c001cff1 <unlockStuff()>:
c001cff1:	a1 68 dd 02 c0       	mov    eax,ds:0xc002dd68
c001cff6:	48                   	dec    eax
c001cff7:	a3 68 dd 02 c0       	mov    ds:0xc002dd68,eax
c001cffc:	75 09                	jne    c001d007 <unlockStuff()+0x16>
c001cffe:	a1 64 dd 02 c0       	mov    eax,ds:0xc002dd64
c001d003:	85 c0                	test   eax,eax
c001d005:	75 05                	jne    c001d00c <unlockStuff()+0x1b>
c001d007:	e9 15 fc ff ff       	jmp    c001cc21 <enableIRQs()>
c001d00c:	83 ec 0c             	sub    esp,0xc
c001d00f:	c7 05 64 dd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dd64,0x0
c001d019:	e8 4e ff ff ff       	call   c001cf6c <schedule()>
c001d01e:	83 c4 0c             	add    esp,0xc
c001d021:	e9 fb fb ff ff       	jmp    c001cc21 <enableIRQs()>

c001d026 <Semaphore::tryAcquire()>:
c001d026:	83 ec 0c             	sub    esp,0xc
c001d029:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d02d:	e8 25 fc ff ff       	call   c001cc57 <lockStuff()>
c001d032:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d035:	3b 10                	cmp    edx,DWORD PTR [eax]
c001d037:	7c 0b                	jl     c001d044 <Semaphore::tryAcquire()+0x1e>
c001d039:	e8 b3 ff ff ff       	call   c001cff1 <unlockStuff()>
c001d03e:	31 c0                	xor    eax,eax
c001d040:	83 c4 0c             	add    esp,0xc
c001d043:	c3                   	ret    
c001d044:	42                   	inc    edx
c001d045:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d048:	e8 a4 ff ff ff       	call   c001cff1 <unlockStuff()>
c001d04d:	b0 01                	mov    al,0x1
c001d04f:	83 c4 0c             	add    esp,0xc
c001d052:	c3                   	ret    
c001d053:	90                   	nop

c001d054 <Semaphore::assertLocked(char const*)>:
c001d054:	83 ec 0c             	sub    esp,0xc
c001d057:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d05b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d05f:	e8 f3 fb ff ff       	call   c001cc57 <lockStuff()>
c001d064:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d066:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001d069:	7c 05                	jl     c001d070 <Semaphore::assertLocked(char const*)+0x1c>
c001d06b:	83 c4 0c             	add    esp,0xc
c001d06e:	eb 81                	jmp    c001cff1 <unlockStuff()>
c001d070:	83 ec 0c             	sub    esp,0xc
c001d073:	52                   	push   edx
c001d074:	e8 28 c7 ff ff       	call   c00197a1 <Krnl::panic(char const*)>
c001d079:	83 c4 10             	add    esp,0x10
c001d07c:	83 c4 0c             	add    esp,0xc
c001d07f:	e9 6d ff ff ff       	jmp    c001cff1 <unlockStuff()>

c001d084 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001d084:	83 ec 0c             	sub    esp,0xc
c001d087:	e8 8f fb ff ff       	call   c001cc1b <getIRQNestingLevel()>
c001d08c:	83 ec 08             	sub    esp,0x8
c001d08f:	50                   	push   eax
c001d090:	68 dc a7 02 c0       	push   0xc002a7dc
c001d095:	e8 ed 55 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001d09a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d09e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d0a3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d0a6:	e8 c1 fe ff ff       	call   c001cf6c <schedule()>
c001d0ab:	e8 82 fb ff ff       	call   c001cc32 <unlockScheduler()>
c001d0b0:	e8 66 fb ff ff       	call   c001cc1b <getIRQNestingLevel()>
c001d0b5:	5a                   	pop    edx
c001d0b6:	59                   	pop    ecx
c001d0b7:	50                   	push   eax
c001d0b8:	68 10 a8 02 c0       	push   0xc002a810
c001d0bd:	e8 c5 55 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001d0c2:	83 c4 1c             	add    esp,0x1c
c001d0c5:	c3                   	ret    

c001d0c6 <blockTask(TaskState)>:
c001d0c6:	83 ec 0c             	sub    esp,0xc
c001d0c9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d0cd:	e8 5e fb ff ff       	call   c001cc30 <lockScheduler()>
c001d0d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d0d7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d0da:	e8 8d fe ff ff       	call   c001cf6c <schedule()>
c001d0df:	83 c4 0c             	add    esp,0xc
c001d0e2:	e9 4b fb ff ff       	jmp    c001cc32 <unlockScheduler()>

c001d0e7 <waitTask(int, int*, int)>:
c001d0e7:	83 ec 18             	sub    esp,0x18
c001d0ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d0ef:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d0f3:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001d0f6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d0fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d0ff:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001d102:	6a 07                	push   0x7
c001d104:	e8 bd ff ff ff       	call   c001d0c6 <blockTask(TaskState)>
c001d109:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d10e:	83 c4 10             	add    esp,0x10
c001d111:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001d114:	85 d2                	test   edx,edx
c001d116:	74 0a                	je     c001d122 <waitTask(int, int*, int)+0x3b>
c001d118:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001d11b:	89 02                	mov    DWORD PTR [edx],eax
c001d11d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d122:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001d125:	83 c4 0c             	add    esp,0xc
c001d128:	c3                   	ret    

c001d129 <nanoSleepUntil(unsigned long long)>:
c001d129:	83 ec 0c             	sub    esp,0xc
c001d12c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d130:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d134:	3b 05 d0 ce 02 c0    	cmp    eax,DWORD PTR ds:0xc002ced0
c001d13a:	89 d1                	mov    ecx,edx
c001d13c:	1b 0d d4 ce 02 c0    	sbb    ecx,DWORD PTR ds:0xc002ced4
c001d142:	73 04                	jae    c001d148 <nanoSleepUntil(unsigned long long)+0x1f>
c001d144:	83 c4 0c             	add    esp,0xc
c001d147:	c3                   	ret    
c001d148:	e8 0a fb ff ff       	call   c001cc57 <lockStuff()>
c001d14d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001d153:	83 ec 08             	sub    esp,0x8
c001d156:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001d159:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001d15c:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001d162:	68 7c dd 02 c0       	push   0xc002dd7c
c001d167:	e8 94 a2 00 00       	call   c0027400 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d16c:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001d173:	e8 4e ff ff ff       	call   c001d0c6 <blockTask(TaskState)>
c001d178:	83 c4 1c             	add    esp,0x1c
c001d17b:	e9 71 fe ff ff       	jmp    c001cff1 <unlockStuff()>

c001d180 <nanoSleep(unsigned long long)>:
c001d180:	a1 d0 ce 02 c0       	mov    eax,ds:0xc002ced0
c001d185:	8b 15 d4 ce 02 c0    	mov    edx,DWORD PTR ds:0xc002ced4
c001d18b:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001d18f:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001d193:	eb 94                	jmp    c001d129 <nanoSleepUntil(unsigned long long)>

c001d195 <sleep(unsigned long long)>:
c001d195:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001d19d:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001d1a2:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001d1a6:	01 ca                	add    edx,ecx
c001d1a8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d1ac:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d1b0:	eb ce                	jmp    c001d180 <nanoSleep(unsigned long long)>

c001d1b2 <Semaphore::acquire()>:
c001d1b2:	83 ec 0c             	sub    esp,0xc
c001d1b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1b9:	e8 99 fa ff ff       	call   c001cc57 <lockStuff()>
c001d1be:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d1c1:	3b 10                	cmp    edx,DWORD PTR [eax]
c001d1c3:	7d 0c                	jge    c001d1d1 <Semaphore::acquire()+0x1f>
c001d1c5:	42                   	inc    edx
c001d1c6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d1c9:	83 c4 0c             	add    esp,0xc
c001d1cc:	e9 20 fe ff ff       	jmp    c001cff1 <unlockStuff()>
c001d1d1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d1d7:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001d1de:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001d1e1:	85 d2                	test   edx,edx
c001d1e3:	74 2a                	je     c001d20f <Semaphore::acquire()+0x5d>
c001d1e5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001d1e8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001d1ee:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001d1f1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d1f7:	83 ec 0c             	sub    esp,0xc
c001d1fa:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d1fd:	6a 05                	push   0x5
c001d1ff:	e8 c2 fe ff ff       	call   c001d0c6 <blockTask(TaskState)>
c001d204:	83 c4 10             	add    esp,0x10
c001d207:	83 c4 0c             	add    esp,0xc
c001d20a:	e9 e2 fd ff ff       	jmp    c001cff1 <unlockStuff()>
c001d20f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d215:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d218:	eb d7                	jmp    c001d1f1 <Semaphore::acquire()+0x3f>

c001d21a <taskReturned>:
c001d21a:	83 ec 18             	sub    esp,0x18
c001d21d:	68 44 a8 02 c0       	push   0xc002a844
c001d222:	e8 7a c5 ff ff       	call   c00197a1 <Krnl::panic(char const*)>
c001d227:	83 c4 10             	add    esp,0x10
c001d22a:	83 ec 0c             	sub    esp,0xc
c001d22d:	6a 02                	push   0x2
c001d22f:	e8 92 fe ff ff       	call   c001d0c6 <blockTask(TaskState)>
c001d234:	e8 f7 f9 ff ff       	call   c001cc30 <lockScheduler()>
c001d239:	e8 2e fd ff ff       	call   c001cf6c <schedule()>
c001d23e:	e8 ef f9 ff ff       	call   c001cc32 <unlockScheduler()>
c001d243:	83 c4 10             	add    esp,0x10
c001d246:	eb e2                	jmp    c001d22a <taskReturned+0x10>

c001d248 <unblockTask(ThreadControlBlock*)>:
c001d248:	53                   	push   ebx
c001d249:	83 ec 08             	sub    esp,0x8
c001d24c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d250:	e8 db f9 ff ff       	call   c001cc30 <lockScheduler()>
c001d255:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001d258:	85 c0                	test   eax,eax
c001d25a:	74 5c                	je     c001d2b8 <unblockTask(ThreadControlBlock*)+0x70>
c001d25c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001d25f:	48                   	dec    eax
c001d260:	74 31                	je     c001d293 <unblockTask(ThreadControlBlock*)+0x4b>
c001d262:	83 ec 0c             	sub    esp,0xc
c001d265:	68 88 dd 02 c0       	push   0xc002dd88
c001d26a:	e8 bf a0 00 00       	call   c002732e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d26f:	83 c4 10             	add    esp,0x10
c001d272:	85 c0                	test   eax,eax
c001d274:	75 17                	jne    c001d28d <unblockTask(ThreadControlBlock*)+0x45>
c001d276:	eb 65                	jmp    c001d2dd <unblockTask(ThreadControlBlock*)+0x95>
c001d278:	83 ec 08             	sub    esp,0x8
c001d27b:	50                   	push   eax
c001d27c:	68 88 dd 02 c0       	push   0xc002dd88
c001d281:	e8 82 a3 00 00       	call   c0027608 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001d286:	83 c4 10             	add    esp,0x10
c001d289:	85 c0                	test   eax,eax
c001d28b:	74 50                	je     c001d2dd <unblockTask(ThreadControlBlock*)+0x95>
c001d28d:	39 c3                	cmp    ebx,eax
c001d28f:	75 e7                	jne    c001d278 <unblockTask(ThreadControlBlock*)+0x30>
c001d291:	eb 1c                	jmp    c001d2af <unblockTask(ThreadControlBlock*)+0x67>
c001d293:	83 ec 0c             	sub    esp,0xc
c001d296:	68 34 a9 02 c0       	push   0xc002a934
c001d29b:	e8 e7 53 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001d2a0:	c7 04 24 c0 a8 02 c0 	mov    DWORD PTR [esp],0xc002a8c0
c001d2a7:	e8 db 53 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001d2ac:	83 c4 10             	add    esp,0x10
c001d2af:	83 c4 08             	add    esp,0x8
c001d2b2:	5b                   	pop    ebx
c001d2b3:	e9 7a f9 ff ff       	jmp    c001cc32 <unlockScheduler()>
c001d2b8:	83 ec 0c             	sub    esp,0xc
c001d2bb:	68 78 a8 02 c0       	push   0xc002a878
c001d2c0:	e8 c2 53 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001d2c5:	c7 04 24 c0 a8 02 c0 	mov    DWORD PTR [esp],0xc002a8c0
c001d2cc:	e8 b6 53 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001d2d1:	83 c4 10             	add    esp,0x10
c001d2d4:	83 c4 08             	add    esp,0x8
c001d2d7:	5b                   	pop    ebx
c001d2d8:	e9 55 f9 ff ff       	jmp    c001cc32 <unlockScheduler()>
c001d2dd:	83 ec 08             	sub    esp,0x8
c001d2e0:	53                   	push   ebx
c001d2e1:	68 88 dd 02 c0       	push   0xc002dd88
c001d2e6:	e8 15 a1 00 00       	call   c0027400 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d2eb:	83 c4 10             	add    esp,0x10
c001d2ee:	83 c4 08             	add    esp,0x8
c001d2f1:	5b                   	pop    ebx
c001d2f2:	e9 3b f9 ff ff       	jmp    c001cc32 <unlockScheduler()>

c001d2f7 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001d2f7:	55                   	push   ebp
c001d2f8:	57                   	push   edi
c001d2f9:	56                   	push   esi
c001d2fa:	53                   	push   ebx
c001d2fb:	83 ec 1c             	sub    esp,0x1c
c001d2fe:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d302:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d305:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001d30b:	85 ff                	test   edi,edi
c001d30d:	7e 20                	jle    c001d32f <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001d30f:	31 f6                	xor    esi,esi
c001d311:	83 ec 0c             	sub    esp,0xc
c001d314:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001d31b:	46                   	inc    esi
c001d31c:	e8 c3 21 ff ff       	call   c000f4e4 <free>
c001d321:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d324:	83 c4 10             	add    esp,0x10
c001d327:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001d32d:	7f e2                	jg     c001d311 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001d32f:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d339:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001d33e:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001d341:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001d344:	d3 c0                	rol    eax,cl
c001d346:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001d34d:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d350:	89 f7                	mov    edi,esi
c001d352:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001d35a:	0f 85 74 01 00 00    	jne    c001d4d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001d360:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001d366:	85 ed                	test   ebp,ebp
c001d368:	74 1b                	je     c001d385 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001d36a:	83 ec 0c             	sub    esp,0xc
c001d36d:	55                   	push   ebp
c001d36e:	e8 9b c1 ff ff       	call   c001950e <EnvVarContainer::~EnvVarContainer()>
c001d373:	59                   	pop    ecx
c001d374:	5e                   	pop    esi
c001d375:	6a 0c                	push   0xc
c001d377:	55                   	push   ebp
c001d378:	e8 2a 52 ff ff       	call   c00125a7 <operator delete(void*, unsigned long)>
c001d37d:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d380:	83 c4 10             	add    esp,0x10
c001d383:	89 f7                	mov    edi,esi
c001d385:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001d38b:	85 c0                	test   eax,eax
c001d38d:	0f 84 aa 00 00 00    	je     c001d43d <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001d393:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001d396:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d39a:	31 c9                	xor    ecx,ecx
c001d39c:	eb 10                	jmp    c001d3ae <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001d39e:	41                   	inc    ecx
c001d39f:	83 f9 10             	cmp    ecx,0x10
c001d3a2:	0f 84 95 00 00 00    	je     c001d43d <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001d3a8:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001d3ae:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001d3b5:	d3 fa                	sar    edx,cl
c001d3b7:	83 e2 01             	and    edx,0x1
c001d3ba:	74 e2                	je     c001d39e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d3bc:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001d3bf:	01 ca                	add    edx,ecx
c001d3c1:	89 d5                	mov    ebp,edx
c001d3c3:	c1 e5 05             	shl    ebp,0x5
c001d3c6:	01 ea                	add    edx,ebp
c001d3c8:	01 d0                	add    eax,edx
c001d3ca:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001d3d0:	83 fd 07             	cmp    ebp,0x7
c001d3d3:	75 c9                	jne    c001d39e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d3d5:	05 40 02 00 00       	add    eax,0x240
c001d3da:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001d3dd:	83 fd ff             	cmp    ebp,0xffffffff
c001d3e0:	0f 8c 08 01 00 00    	jl     c001d4ee <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001d3e6:	0f 84 b9 01 00 00    	je     c001d5a5 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001d3ec:	85 ed                	test   ebp,ebp
c001d3ee:	0f 84 a0 01 00 00    	je     c001d594 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001d3f4:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001d3f6:	75 a6                	jne    c001d39e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d3f8:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001d3fe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d402:	01 d0                	add    eax,edx
c001d404:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001d408:	83 ec 0c             	sub    esp,0xc
c001d40b:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001d411:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d414:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d41a:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001d421:	50                   	push   eax
c001d422:	e8 21 fe ff ff       	call   c001d248 <unblockTask(ThreadControlBlock*)>
c001d427:	83 c4 10             	add    esp,0x10
c001d42a:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d42d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d431:	89 f7                	mov    edi,esi
c001d433:	41                   	inc    ecx
c001d434:	83 f9 10             	cmp    ecx,0x10
c001d437:	0f 85 6b ff ff ff    	jne    c001d3a8 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001d43d:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001d443:	85 c0                	test   eax,eax
c001d445:	74 5d                	je     c001d4a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001d447:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001d44d:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001d453:	74 4f                	je     c001d4a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001d455:	83 ec 0c             	sub    esp,0xc
c001d458:	68 88 dd 02 c0       	push   0xc002dd88
c001d45d:	e8 cc 9e 00 00       	call   c002732e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d462:	c7 04 24 88 dd 02 c0 	mov    DWORD PTR [esp],0xc002dd88
c001d469:	89 c7                	mov    edi,eax
c001d46b:	e8 c6 9e 00 00       	call   c0027336 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d470:	83 c4 10             	add    esp,0x10
c001d473:	84 c0                	test   al,al
c001d475:	0f 84 e4 00 00 00    	je     c001d55f <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001d47b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d47e:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d484:	85 d2                	test   edx,edx
c001d486:	74 0f                	je     c001d497 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001d488:	83 ec 0c             	sub    esp,0xc
c001d48b:	8b 02                	mov    eax,DWORD PTR [edx]
c001d48d:	52                   	push   edx
c001d48e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d491:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d494:	83 c4 10             	add    esp,0x10
c001d497:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001d4a1:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001d4a4:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001d4aa:	85 db                	test   ebx,ebx
c001d4ac:	74 16                	je     c001d4c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001d4ae:	83 ec 0c             	sub    esp,0xc
c001d4b1:	53                   	push   ebx
c001d4b2:	e8 3f 47 ff ff       	call   c0011bf6 <VAS::~VAS()>
c001d4b7:	58                   	pop    eax
c001d4b8:	5a                   	pop    edx
c001d4b9:	6a 10                	push   0x10
c001d4bb:	53                   	push   ebx
c001d4bc:	e8 e6 50 ff ff       	call   c00125a7 <operator delete(void*, unsigned long)>
c001d4c1:	83 c4 10             	add    esp,0x10
c001d4c4:	83 ec 0c             	sub    esp,0xc
c001d4c7:	68 8f a6 02 c0       	push   0xc002a68f
c001d4cc:	e8 b6 51 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001d4d1:	83 c4 10             	add    esp,0x10
c001d4d4:	83 ec 08             	sub    esp,0x8
c001d4d7:	68 3f 07 00 00       	push   0x73f
c001d4dc:	68 9d a6 02 c0       	push   0xc002a69d
c001d4e1:	e8 a1 51 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001d4e6:	83 c4 2c             	add    esp,0x2c
c001d4e9:	5b                   	pop    ebx
c001d4ea:	5e                   	pop    esi
c001d4eb:	5f                   	pop    edi
c001d4ec:	5d                   	pop    ebp
c001d4ed:	c3                   	ret    
c001d4ee:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d4f2:	83 ec 0c             	sub    esp,0xc
c001d4f5:	68 78 a9 02 c0       	push   0xc002a978
c001d4fa:	e8 a2 c2 ff ff       	call   c00197a1 <Krnl::panic(char const*)>
c001d4ff:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d502:	83 c4 10             	add    esp,0x10
c001d505:	89 f7                	mov    edi,esi
c001d507:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d50b:	e9 8e fe ff ff       	jmp    c001d39e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d510:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d516:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001d51c:	75 1c                	jne    c001d53a <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001d51e:	83 ec 0c             	sub    esp,0xc
c001d521:	68 e0 a9 02 c0       	push   0xc002a9e0
c001d526:	e8 5c 51 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001d52b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001d532:	e8 8f fb ff ff       	call   c001d0c6 <blockTask(TaskState)>
c001d537:	83 c4 10             	add    esp,0x10
c001d53a:	83 ec 08             	sub    esp,0x8
c001d53d:	56                   	push   esi
c001d53e:	68 88 dd 02 c0       	push   0xc002dd88
c001d543:	e8 b8 9e 00 00       	call   c0027400 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d548:	c7 04 24 88 dd 02 c0 	mov    DWORD PTR [esp],0xc002dd88
c001d54f:	e8 da 9d 00 00       	call   c002732e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d554:	83 c4 10             	add    esp,0x10
c001d557:	39 f8                	cmp    eax,edi
c001d559:	0f 84 1c ff ff ff    	je     c001d47b <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001d55f:	83 ec 0c             	sub    esp,0xc
c001d562:	68 88 dd 02 c0       	push   0xc002dd88
c001d567:	e8 c2 9d 00 00       	call   c002732e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d56c:	c7 04 24 88 dd 02 c0 	mov    DWORD PTR [esp],0xc002dd88
c001d573:	89 c6                	mov    esi,eax
c001d575:	e8 d8 9d 00 00       	call   c0027352 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d57a:	83 c4 10             	add    esp,0x10
c001d57d:	39 f3                	cmp    ebx,esi
c001d57f:	74 b9                	je     c001d53a <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001d581:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001d584:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d587:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001d58d:	75 ab                	jne    c001d53a <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001d58f:	e9 7c ff ff ff       	jmp    c001d510 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001d594:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d598:	83 ec 0c             	sub    esp,0xc
c001d59b:	68 ac a9 02 c0       	push   0xc002a9ac
c001d5a0:	e9 55 ff ff ff       	jmp    c001d4fa <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001d5a5:	8b 36                	mov    esi,DWORD PTR [esi]
c001d5a7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d5ab:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001d5ae:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d5b1:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001d5b7:	01 d7                	add    edi,edx
c001d5b9:	89 f8                	mov    eax,edi
c001d5bb:	e9 44 fe ff ff       	jmp    c001d404 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001d5c0 <cleanerTaskFunction(void*)>:
c001d5c0:	53                   	push   ebx
c001d5c1:	83 ec 08             	sub    esp,0x8
c001d5c4:	e8 69 f6 ff ff       	call   c001cc32 <unlockScheduler()>
c001d5c9:	e8 62 f6 ff ff       	call   c001cc30 <lockScheduler()>
c001d5ce:	80 3d 4c dd 02 c0 00 	cmp    BYTE PTR ds:0xc002dd4c,0x0
c001d5d5:	0f 85 8e 00 00 00    	jne    c001d669 <cleanerTaskFunction(void*)+0xa9>
c001d5db:	83 ec 0c             	sub    esp,0xc
c001d5de:	6a 02                	push   0x2
c001d5e0:	e8 9f fa ff ff       	call   c001d084 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001d5e5:	83 c4 10             	add    esp,0x10
c001d5e8:	c6 05 4c dd 02 c0 00 	mov    BYTE PTR ds:0xc002dd4c,0x0
c001d5ef:	e8 63 f6 ff ff       	call   c001cc57 <lockStuff()>
c001d5f4:	e8 37 f6 ff ff       	call   c001cc30 <lockScheduler()>
c001d5f9:	83 ec 0c             	sub    esp,0xc
c001d5fc:	68 70 dd 02 c0       	push   0xc002dd70
c001d601:	e8 30 9d 00 00       	call   c0027336 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d606:	83 c4 10             	add    esp,0x10
c001d609:	84 c0                	test   al,al
c001d60b:	75 40                	jne    c001d64d <cleanerTaskFunction(void*)+0x8d>
c001d60d:	83 ec 0c             	sub    esp,0xc
c001d610:	68 70 dd 02 c0       	push   0xc002dd70
c001d615:	e8 14 9d 00 00       	call   c002732e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d61a:	c7 04 24 70 dd 02 c0 	mov    DWORD PTR [esp],0xc002dd70
c001d621:	89 c3                	mov    ebx,eax
c001d623:	e8 2a 9d 00 00       	call   c0027352 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d628:	c7 04 24 b3 a6 02 c0 	mov    DWORD PTR [esp],0xc002a6b3
c001d62f:	e8 53 50 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001d634:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d637:	e8 bb fc ff ff       	call   c001d2f7 <cleanupTerminatedTask(ThreadControlBlock*)>
c001d63c:	c7 04 24 cc a6 02 c0 	mov    DWORD PTR [esp],0xc002a6cc
c001d643:	e8 3f 50 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001d648:	83 c4 10             	add    esp,0x10
c001d64b:	eb ac                	jmp    c001d5f9 <cleanerTaskFunction(void*)+0x39>
c001d64d:	e8 e0 f5 ff ff       	call   c001cc32 <unlockScheduler()>
c001d652:	e8 9a f9 ff ff       	call   c001cff1 <unlockStuff()>
c001d657:	e8 d4 f5 ff ff       	call   c001cc30 <lockScheduler()>
c001d65c:	80 3d 4c dd 02 c0 00 	cmp    BYTE PTR ds:0xc002dd4c,0x0
c001d663:	0f 84 72 ff ff ff    	je     c001d5db <cleanerTaskFunction(void*)+0x1b>
c001d669:	e8 c4 f5 ff ff       	call   c001cc32 <unlockScheduler()>
c001d66e:	e9 75 ff ff ff       	jmp    c001d5e8 <cleanerTaskFunction(void*)+0x28>

c001d673 <terminateTask(int)>:
c001d673:	83 ec 14             	sub    esp,0x14
c001d676:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d67b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d67e:	83 c0 0c             	add    eax,0xc
c001d681:	50                   	push   eax
c001d682:	68 08 aa 02 c0       	push   0xc002aa08
c001d687:	e8 fb 4f ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001d68c:	e8 c6 f5 ff ff       	call   c001cc57 <lockStuff()>
c001d691:	e8 9a f5 ff ff       	call   c001cc30 <lockScheduler()>
c001d696:	c7 04 24 df a6 02 c0 	mov    DWORD PTR [esp],0xc002a6df
c001d69d:	e8 e5 4f ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001d6a2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d6a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d6ab:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001d6ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d6b3:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001d6b6:	5a                   	pop    edx
c001d6b7:	59                   	pop    ecx
c001d6b8:	50                   	push   eax
c001d6b9:	68 70 dd 02 c0       	push   0xc002dd70
c001d6be:	e8 3d 9d 00 00       	call   c0027400 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d6c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d6c8:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001d6cf:	c7 04 24 f9 a6 02 c0 	mov    DWORD PTR [esp],0xc002a6f9
c001d6d6:	e8 ac 4f ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001d6db:	83 c4 10             	add    esp,0x10
c001d6de:	a1 48 dd 02 c0       	mov    eax,ds:0xc002dd48
c001d6e3:	85 c0                	test   eax,eax
c001d6e5:	74 5a                	je     c001d741 <terminateTask(int)+0xce>
c001d6e7:	83 ec 0c             	sub    esp,0xc
c001d6ea:	68 13 a7 02 c0       	push   0xc002a713
c001d6ef:	e8 93 4f ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001d6f4:	58                   	pop    eax
c001d6f5:	c6 05 4c dd 02 c0 01 	mov    BYTE PTR ds:0xc002dd4c,0x1
c001d6fc:	ff 35 48 dd 02 c0    	push   DWORD PTR ds:0xc002dd48
c001d702:	e8 41 fb ff ff       	call   c001d248 <unblockTask(ThreadControlBlock*)>
c001d707:	c7 04 24 2d a7 02 c0 	mov    DWORD PTR [esp],0xc002a72d
c001d70e:	e8 74 4f ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001d713:	83 c4 10             	add    esp,0x10
c001d716:	e8 17 f5 ff ff       	call   c001cc32 <unlockScheduler()>
c001d71b:	e8 d1 f8 ff ff       	call   c001cff1 <unlockStuff()>
c001d720:	83 ec 0c             	sub    esp,0xc
c001d723:	68 65 a7 02 c0       	push   0xc002a765
c001d728:	e8 5a 4f ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001d72d:	83 c4 10             	add    esp,0x10
c001d730:	e8 fb f4 ff ff       	call   c001cc30 <lockScheduler()>
c001d735:	e8 32 f8 ff ff       	call   c001cf6c <schedule()>
c001d73a:	e8 f3 f4 ff ff       	call   c001cc32 <unlockScheduler()>
c001d73f:	eb ef                	jmp    c001d730 <terminateTask(int)+0xbd>
c001d741:	83 ec 0c             	sub    esp,0xc
c001d744:	68 47 a7 02 c0       	push   0xc002a747
c001d749:	e8 39 4f ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001d74e:	83 c4 10             	add    esp,0x10
c001d751:	eb c3                	jmp    c001d716 <terminateTask(int)+0xa3>

c001d753 <Thr::terminateFromIRQ(int)>:
c001d753:	83 ec 18             	sub    esp,0x18
c001d756:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d75a:	e8 14 ff ff ff       	call   c001d673 <terminateTask(int)>
c001d75f:	90                   	nop

c001d760 <Semaphore::release()>:
c001d760:	83 ec 0c             	sub    esp,0xc
c001d763:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d767:	e8 eb f4 ff ff       	call   c001cc57 <lockStuff()>
c001d76c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001d76f:	85 d2                	test   edx,edx
c001d771:	74 1a                	je     c001d78d <Semaphore::release()+0x2d>
c001d773:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001d776:	83 ec 0c             	sub    esp,0xc
c001d779:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001d77c:	52                   	push   edx
c001d77d:	e8 c6 fa ff ff       	call   c001d248 <unblockTask(ThreadControlBlock*)>
c001d782:	83 c4 10             	add    esp,0x10
c001d785:	83 c4 0c             	add    esp,0xc
c001d788:	e9 64 f8 ff ff       	jmp    c001cff1 <unlockStuff()>
c001d78d:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001d790:	83 c4 0c             	add    esp,0xc
c001d793:	e9 59 f8 ff ff       	jmp    c001cff1 <unlockStuff()>

c001d798 <__static_initialization_and_destruction_0(int, int)>:
c001d798:	83 ec 0c             	sub    esp,0xc
c001d79b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001d7a0:	0f 85 88 00 00 00    	jne    c001d82e <__static_initialization_and_destruction_0(int, int)+0x96>
c001d7a6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001d7ae:	75 7e                	jne    c001d82e <__static_initialization_and_destruction_0(int, int)+0x96>
c001d7b0:	83 ec 0c             	sub    esp,0xc
c001d7b3:	68 88 dd 02 c0       	push   0xc002dd88
c001d7b8:	e8 f3 9d 00 00       	call   c00275b0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001d7bd:	83 c4 10             	add    esp,0x10
c001d7c0:	83 ec 04             	sub    esp,0x4
c001d7c3:	68 68 b7 02 c0       	push   0xc002b768
c001d7c8:	68 88 dd 02 c0       	push   0xc002dd88
c001d7cd:	68 70 75 02 c0       	push   0xc0027570
c001d7d2:	e8 4a 4d ff ff       	call   c0012521 <__cxa_atexit>
c001d7d7:	83 c4 10             	add    esp,0x10
c001d7da:	83 ec 0c             	sub    esp,0xc
c001d7dd:	68 7c dd 02 c0       	push   0xc002dd7c
c001d7e2:	e8 c9 9d 00 00       	call   c00275b0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001d7e7:	83 c4 10             	add    esp,0x10
c001d7ea:	83 ec 04             	sub    esp,0x4
c001d7ed:	68 68 b7 02 c0       	push   0xc002b768
c001d7f2:	68 7c dd 02 c0       	push   0xc002dd7c
c001d7f7:	68 70 75 02 c0       	push   0xc0027570
c001d7fc:	e8 20 4d ff ff       	call   c0012521 <__cxa_atexit>
c001d801:	83 c4 10             	add    esp,0x10
c001d804:	83 ec 0c             	sub    esp,0xc
c001d807:	68 70 dd 02 c0       	push   0xc002dd70
c001d80c:	e8 9f 9d 00 00       	call   c00275b0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001d811:	83 c4 10             	add    esp,0x10
c001d814:	83 ec 04             	sub    esp,0x4
c001d817:	68 68 b7 02 c0       	push   0xc002b768
c001d81c:	68 70 dd 02 c0       	push   0xc002dd70
c001d821:	68 70 75 02 c0       	push   0xc0027570
c001d826:	e8 f6 4c ff ff       	call   c0012521 <__cxa_atexit>
c001d82b:	83 c4 10             	add    esp,0x10
c001d82e:	90                   	nop
c001d82f:	83 c4 0c             	add    esp,0xc
c001d832:	c3                   	ret    

c001d833 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001d833:	83 ec 0c             	sub    esp,0xc
c001d836:	83 ec 08             	sub    esp,0x8
c001d839:	68 ff ff 00 00       	push   0xffff
c001d83e:	6a 01                	push   0x1
c001d840:	e8 53 ff ff ff       	call   c001d798 <__static_initialization_and_destruction_0(int, int)>
c001d845:	83 c4 10             	add    esp,0x10
c001d848:	83 c4 0c             	add    esp,0xc
c001d84b:	c3                   	ret    

c001d84c <Vm::inbv(unsigned short)>:
c001d84c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d850:	66 81 fa fe fe       	cmp    dx,0xfefe
c001d855:	75 06                	jne    c001d85d <Vm::inbv(unsigned short)+0x11>
c001d857:	a0 cc dd 02 c0       	mov    al,ds:0xc002ddcc
c001d85c:	c3                   	ret    
c001d85d:	ec                   	in     al,dx
c001d85e:	c3                   	ret    

c001d85f <Vm::outbv(unsigned short, unsigned char)>:
c001d85f:	53                   	push   ebx
c001d860:	83 ec 08             	sub    esp,0x8
c001d863:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d867:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d86b:	66 81 fa fe fe       	cmp    dx,0xfefe
c001d870:	75 38                	jne    c001d8aa <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001d872:	0f b6 c3             	movzx  eax,bl
c001d875:	51                   	push   ecx
c001d876:	51                   	push   ecx
c001d877:	50                   	push   eax
c001d878:	68 27 aa 02 c0       	push   0xc002aa27
c001d87d:	e8 05 4e ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001d882:	8b 15 cc dd 02 c0    	mov    edx,DWORD PTR ds:0xc002ddcc
c001d888:	83 c4 10             	add    esp,0x10
c001d88b:	8d 42 01             	lea    eax,[edx+0x1]
c001d88e:	88 9a e0 dd 02 c0    	mov    BYTE PTR [edx-0x3ffd2220],bl
c001d894:	a3 cc dd 02 c0       	mov    ds:0xc002ddcc,eax
c001d899:	83 f8 20             	cmp    eax,0x20
c001d89c:	75 0f                	jne    c001d8ad <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001d89e:	c7 05 cc dd 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002ddcc,0x1f
c001d8a8:	eb 03                	jmp    c001d8ad <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001d8aa:	88 d8                	mov    al,bl
c001d8ac:	ee                   	out    dx,al
c001d8ad:	83 c4 08             	add    esp,0x8
c001d8b0:	5b                   	pop    ebx
c001d8b1:	c3                   	ret    

c001d8b2 <Vm::realToLinear(unsigned short, unsigned short)>:
c001d8b2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d8b7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001d8bc:	c1 e0 04             	shl    eax,0x4
c001d8bf:	01 d0                	add    eax,edx
c001d8c1:	c3                   	ret    

c001d8c2 <Vm::getSegment(unsigned int)>:
c001d8c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d8c6:	c1 e8 10             	shr    eax,0x10
c001d8c9:	c3                   	ret    

c001d8ca <Vm::getOffset(unsigned int)>:
c001d8ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d8ce:	c3                   	ret    

c001d8cf <Vm::mainloop2()>:
c001d8cf:	83 ec 0c             	sub    esp,0xc
c001d8d2:	e8 59 f3 ff ff       	call   c001cc30 <lockScheduler()>
c001d8d7:	83 ec 0c             	sub    esp,0xc
c001d8da:	c6 05 c5 dd 02 c0 01 	mov    BYTE PTR ds:0xc002ddc5,0x1
c001d8e1:	6a 02                	push   0x2
c001d8e3:	e8 9c f7 ff ff       	call   c001d084 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001d8e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d8ed:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001d8f1:	52                   	push   edx
c001d8f2:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001d8f6:	52                   	push   edx
c001d8f7:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001d8fb:	52                   	push   edx
c001d8fc:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001d900:	50                   	push   eax
c001d901:	e8 a9 29 fe ff       	call   c00002af <goToVM86>
c001d906:	83 c4 2c             	add    esp,0x2c
c001d909:	c3                   	ret    

c001d90a <Vm::mainVm8086Loop(void*)>:
c001d90a:	83 ec 0c             	sub    esp,0xc
c001d90d:	e8 20 f3 ff ff       	call   c001cc32 <unlockScheduler()>
c001d912:	83 c4 0c             	add    esp,0xc
c001d915:	eb b8                	jmp    c001d8cf <Vm::mainloop2()>

c001d917 <Vm::mainloop3(unsigned long)>:
c001d917:	53                   	push   ebx
c001d918:	83 ec 08             	sub    esp,0x8
c001d91b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d91f:	e8 0c f3 ff ff       	call   c001cc30 <lockScheduler()>
c001d924:	83 ec 0c             	sub    esp,0xc
c001d927:	89 1d c0 dd 02 c0    	mov    DWORD PTR ds:0xc002ddc0,ebx
c001d92d:	6a 02                	push   0x2
c001d92f:	c6 05 c4 dd 02 c0 01 	mov    BYTE PTR ds:0xc002ddc4,0x1
c001d936:	e8 49 f7 ff ff       	call   c001d084 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001d93b:	83 c4 18             	add    esp,0x18
c001d93e:	5b                   	pop    ebx
c001d93f:	eb 8e                	jmp    c001d8cf <Vm::mainloop2()>

c001d941 <Vm::initialise8086()>:
c001d941:	83 ec 0c             	sub    esp,0xc
c001d944:	68 80 00 00 00       	push   0x80
c001d949:	6a 00                	push   0x0
c001d94b:	68 0a d9 01 c0       	push   0xc001d90a
c001d950:	ff 35 94 dd 02 c0    	push   DWORD PTR ds:0xc002dd94
c001d956:	e8 07 f4 ff ff       	call   c001cd62 <Process::createThread(void (*)(void*), void*, int)>
c001d95b:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001d962:	a3 c8 dd 02 c0       	mov    ds:0xc002ddc8,eax
c001d967:	68 00 01 00 00       	push   0x100
c001d96c:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c001d971:	6a 00                	push   0x0
c001d973:	6a 00                	push   0x0
c001d975:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001d97b:	e8 d6 46 ff ff       	call   c0012056 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001d980:	83 c4 2c             	add    esp,0x2c
c001d983:	c3                   	ret    

c001d984 <Vm::finish8086()>:
c001d984:	53                   	push   ebx
c001d985:	83 ec 08             	sub    esp,0x8
c001d988:	e8 a3 f2 ff ff       	call   c001cc30 <lockScheduler()>
c001d98d:	80 3d c4 dd 02 c0 00 	cmp    BYTE PTR ds:0xc002ddc4,0x0
c001d994:	75 0c                	jne    c001d9a2 <Vm::finish8086()+0x1e>
c001d996:	e8 d1 f5 ff ff       	call   c001cf6c <schedule()>
c001d99b:	e8 92 f2 ff ff       	call   c001cc32 <unlockScheduler()>
c001d9a0:	eb e6                	jmp    c001d988 <Vm::finish8086()+0x4>
c001d9a2:	83 ec 0c             	sub    esp,0xc
c001d9a5:	8b 1d c0 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002ddc0
c001d9ab:	ff 35 c8 dd 02 c0    	push   DWORD PTR ds:0xc002ddc8
c001d9b1:	c6 05 c4 dd 02 c0 00 	mov    BYTE PTR ds:0xc002ddc4,0x0
c001d9b8:	e8 8b f8 ff ff       	call   c001d248 <unblockTask(ThreadControlBlock*)>
c001d9bd:	e8 70 f2 ff ff       	call   c001cc32 <unlockScheduler()>
c001d9c2:	89 d8                	mov    eax,ebx
c001d9c4:	83 c4 18             	add    esp,0x18
c001d9c7:	5b                   	pop    ebx
c001d9c8:	c3                   	ret    

c001d9c9 <Vm::getOutput8086(unsigned char*)>:
c001d9c9:	83 ec 10             	sub    esp,0x10
c001d9cc:	ff 35 cc dd 02 c0    	push   DWORD PTR ds:0xc002ddcc
c001d9d2:	68 e0 dd 02 c0       	push   0xc002dde0
c001d9d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d9db:	e8 75 2c fe ff       	call   c0000655 <memcpy>
c001d9e0:	a1 cc dd 02 c0       	mov    eax,ds:0xc002ddcc
c001d9e5:	c7 05 cc dd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ddcc,0x0
c001d9ef:	83 c4 1c             	add    esp,0x1c
c001d9f2:	c3                   	ret    

c001d9f3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001d9f3:	55                   	push   ebp
c001d9f4:	57                   	push   edi
c001d9f5:	56                   	push   esi
c001d9f6:	53                   	push   ebx
c001d9f7:	83 ec 2c             	sub    esp,0x2c
c001d9fa:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d9fe:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001da02:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001da06:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001da0a:	e8 21 f2 ff ff       	call   c001cc30 <lockScheduler()>
c001da0f:	a0 c5 dd 02 c0       	mov    al,ds:0xc002ddc5
c001da14:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001da18:	84 c0                	test   al,al
c001da1a:	75 0c                	jne    c001da28 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001da1c:	e8 4b f5 ff ff       	call   c001cf6c <schedule()>
c001da21:	e8 0c f2 ff ff       	call   c001cc32 <unlockScheduler()>
c001da26:	eb e2                	jmp    c001da0a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001da28:	a1 c8 dd 02 c0       	mov    eax,ds:0xc002ddc8
c001da2d:	c7 05 cc dd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ddcc,0x0
c001da37:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001da3b:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001da3f:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001da43:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001da47:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001da4b:	50                   	push   eax
c001da4c:	6a 20                	push   0x20
c001da4e:	6a 00                	push   0x0
c001da50:	68 e0 dd 02 c0       	push   0xc002dde0
c001da55:	e8 31 2c fe ff       	call   c000068b <memset>
c001da5a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001da61:	e8 6e 1a ff ff       	call   c000f4d4 <malloc>
c001da66:	83 c4 0c             	add    esp,0xc
c001da69:	89 c7                	mov    edi,eax
c001da6b:	ff 35 94 dd 02 c0    	push   DWORD PTR ds:0xc002dd94
c001da71:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001da75:	50                   	push   eax
c001da76:	e8 3b 51 ff ff       	call   c0012bb6 <File::File(char const*, Process*)>
c001da7b:	83 c4 10             	add    esp,0x10
c001da7e:	85 ff                	test   edi,edi
c001da80:	75 0a                	jne    c001da8c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001da82:	83 ec 0c             	sub    esp,0xc
c001da85:	68 43 aa 02 c0       	push   0xc002aa43
c001da8a:	eb 27                	jmp    c001dab3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001da8c:	50                   	push   eax
c001da8d:	8d 44 24 17          	lea    eax,[esp+0x17]
c001da91:	50                   	push   eax
c001da92:	8d 44 24 20          	lea    eax,[esp+0x20]
c001da96:	50                   	push   eax
c001da97:	57                   	push   edi
c001da98:	e8 29 54 ff ff       	call   c0012ec6 <File::stat(unsigned long long*, bool*)>
c001da9d:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001daa2:	83 c4 10             	add    esp,0x10
c001daa5:	89 e8                	mov    eax,ebp
c001daa7:	84 c0                	test   al,al
c001daa9:	74 19                	je     c001dac4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001daab:	83 ec 0c             	sub    esp,0xc
c001daae:	68 57 aa 02 c0       	push   0xc002aa57
c001dab3:	e8 e9 bc ff ff       	call   c00197a1 <Krnl::panic(char const*)>
c001dab8:	31 ed                	xor    ebp,ebp
c001daba:	e8 73 f1 ff ff       	call   c001cc32 <unlockScheduler()>
c001dabf:	83 c4 10             	add    esp,0x10
c001dac2:	eb 75                	jmp    c001db39 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001dac4:	50                   	push   eax
c001dac5:	50                   	push   eax
c001dac6:	6a 01                	push   0x1
c001dac8:	57                   	push   edi
c001dac9:	e8 4c 51 ff ff       	call   c0012c1a <File::open(FileOpenMode)>
c001dace:	83 c4 10             	add    esp,0x10
c001dad1:	85 c0                	test   eax,eax
c001dad3:	74 17                	je     c001daec <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001dad5:	83 ec 0c             	sub    esp,0xc
c001dad8:	68 70 aa 02 c0       	push   0xc002aa70
c001dadd:	e8 bf bc ff ff       	call   c00197a1 <Krnl::panic(char const*)>
c001dae2:	e8 4b f1 ff ff       	call   c001cc32 <unlockScheduler()>
c001dae7:	83 c4 10             	add    esp,0x10
c001daea:	eb 4d                	jmp    c001db39 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001daec:	0f b7 f6             	movzx  esi,si
c001daef:	50                   	push   eax
c001daf0:	0f b7 db             	movzx  ebx,bx
c001daf3:	50                   	push   eax
c001daf4:	56                   	push   esi
c001daf5:	53                   	push   ebx
c001daf6:	e8 b7 fd ff ff       	call   c001d8b2 <Vm::realToLinear(unsigned short, unsigned short)>
c001dafb:	5a                   	pop    edx
c001dafc:	8b 17                	mov    edx,DWORD PTR [edi]
c001dafe:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001db02:	51                   	push   ecx
c001db03:	50                   	push   eax
c001db04:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001db08:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001db0c:	57                   	push   edi
c001db0d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001db10:	83 c4 14             	add    esp,0x14
c001db13:	57                   	push   edi
c001db14:	e8 5f 51 ff ff       	call   c0012c78 <File::close()>
c001db19:	c6 05 c5 dd 02 c0 00 	mov    BYTE PTR ds:0xc002ddc5,0x0
c001db20:	e8 0d f1 ff ff       	call   c001cc32 <unlockScheduler()>
c001db25:	59                   	pop    ecx
c001db26:	ff 35 c8 dd 02 c0    	push   DWORD PTR ds:0xc002ddc8
c001db2c:	e8 17 f7 ff ff       	call   c001d248 <unblockTask(ThreadControlBlock*)>
c001db31:	83 c4 10             	add    esp,0x10
c001db34:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001db39:	83 c4 2c             	add    esp,0x2c
c001db3c:	89 e8                	mov    eax,ebp
c001db3e:	5b                   	pop    ebx
c001db3f:	5e                   	pop    esi
c001db40:	5f                   	pop    edi
c001db41:	5d                   	pop    ebp
c001db42:	c3                   	ret    

c001db43 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001db43:	57                   	push   edi
c001db44:	56                   	push   esi
c001db45:	53                   	push   ebx
c001db46:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001db4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db4e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001db52:	83 e8 06             	sub    eax,0x6
c001db55:	0f b7 c0             	movzx  eax,ax
c001db58:	50                   	push   eax
c001db59:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001db5e:	50                   	push   eax
c001db5f:	e8 4e fd ff ff       	call   c001d8b2 <Vm::realToLinear(unsigned short, unsigned short)>
c001db64:	5a                   	pop    edx
c001db65:	5e                   	pop    esi
c001db66:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001db69:	8d 56 fa             	lea    edx,[esi-0x6]
c001db6c:	81 e2 ff ff 00 00    	and    edx,0xffff
c001db72:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001db75:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001db78:	83 c2 02             	add    edx,0x2
c001db7b:	66 89 10             	mov    WORD PTR [eax],dx
c001db7e:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001db81:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001db85:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001db88:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001db8c:	89 d6                	mov    esi,edx
c001db8e:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001db94:	66 81 e6 ff fd       	and    si,0xfdff
c001db99:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001db9d:	74 07                	je     c001dba6 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001db9f:	89 d6                	mov    esi,edx
c001dba1:	66 81 ce 00 02       	or     si,0x200
c001dba6:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001dbaa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dbaf:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001dbb3:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001dbbb:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001dbbe:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001dbc6:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001dbc9:	5b                   	pop    ebx
c001dbca:	5e                   	pop    esi
c001dbcb:	5f                   	pop    edi
c001dbcc:	c3                   	ret    

c001dbcd <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001dbcd:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dbd2:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dbd7:	c1 e0 04             	shl    eax,0x4
c001dbda:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001dbdd:	c3                   	ret    

c001dbde <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001dbde:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dbe3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dbe8:	c1 e0 04             	shl    eax,0x4
c001dbeb:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001dbef:	c3                   	ret    

c001dbf0 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001dbf0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dbf5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dbfa:	c1 e0 04             	shl    eax,0x4
c001dbfd:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001dc00:	c3                   	ret    

c001dc01 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001dc01:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dc06:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dc0b:	c1 e0 04             	shl    eax,0x4
c001dc0e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dc12:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001dc15:	c3                   	ret    

c001dc16 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001dc16:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dc1b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dc20:	c1 e0 04             	shl    eax,0x4
c001dc23:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dc27:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001dc2b:	c3                   	ret    

c001dc2c <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001dc2c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dc31:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dc36:	c1 e0 04             	shl    eax,0x4
c001dc39:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dc3d:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001dc40:	c3                   	ret    

c001dc41 <Vm::faultHandler(regs*)>:
c001dc41:	55                   	push   ebp
c001dc42:	57                   	push   edi
c001dc43:	56                   	push   esi
c001dc44:	53                   	push   ebx
c001dc45:	83 ec 1c             	sub    esp,0x1c
c001dc48:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001dc4c:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001dc4f:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001dc52:	0f b7 c1             	movzx  eax,cx
c001dc55:	50                   	push   eax
c001dc56:	0f b7 c3             	movzx  eax,bx
c001dc59:	c1 e3 04             	shl    ebx,0x4
c001dc5c:	50                   	push   eax
c001dc5d:	e8 50 fc ff ff       	call   c001d8b2 <Vm::realToLinear(unsigned short, unsigned short)>
c001dc62:	5a                   	pop    edx
c001dc63:	89 c5                	mov    ebp,eax
c001dc65:	5e                   	pop    esi
c001dc66:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001dc6a:	50                   	push   eax
c001dc6b:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001dc6f:	50                   	push   eax
c001dc70:	e8 3d fc ff ff       	call   c001d8b2 <Vm::realToLinear(unsigned short, unsigned short)>
c001dc75:	01 cb                	add    ebx,ecx
c001dc77:	89 c6                	mov    esi,eax
c001dc79:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001dc7d:	50                   	push   eax
c001dc7e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dc82:	50                   	push   eax
c001dc83:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001dc87:	50                   	push   eax
c001dc88:	55                   	push   ebp
c001dc89:	53                   	push   ebx
c001dc8a:	b3 06                	mov    bl,0x6
c001dc8c:	68 89 aa 02 c0       	push   0xc002aa89
c001dc91:	e8 f1 49 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001dc96:	83 c4 20             	add    esp,0x20
c001dc99:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001dc9e:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001dca3:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001dca7:	3c 9d                	cmp    al,0x9d
c001dca9:	0f 84 d7 02 00 00    	je     c001df86 <Vm::faultHandler(regs*)+0x345>
c001dcaf:	0f 87 a3 00 00 00    	ja     c001dd58 <Vm::faultHandler(regs*)+0x117>
c001dcb5:	3c 66                	cmp    al,0x66
c001dcb7:	0f 84 15 02 00 00    	je     c001ded2 <Vm::faultHandler(regs*)+0x291>
c001dcbd:	77 5f                	ja     c001dd1e <Vm::faultHandler(regs*)+0xdd>
c001dcbf:	3c 36                	cmp    al,0x36
c001dcc1:	0f 84 f1 01 00 00    	je     c001deb8 <Vm::faultHandler(regs*)+0x277>
c001dcc7:	77 28                	ja     c001dcf1 <Vm::faultHandler(regs*)+0xb0>
c001dcc9:	3c 26                	cmp    al,0x26
c001dccb:	0f 84 99 01 00 00    	je     c001de6a <Vm::faultHandler(regs*)+0x229>
c001dcd1:	3c 2e                	cmp    al,0x2e
c001dcd3:	0f 85 3b 07 00 00    	jne    c001e414 <Vm::faultHandler(regs*)+0x7d3>
c001dcd9:	83 ec 0c             	sub    esp,0xc
c001dcdc:	31 db                	xor    ebx,ebx
c001dcde:	68 9e aa 02 c0       	push   0xc002aa9e
c001dce3:	e8 9f 49 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001dce8:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001dceb:	83 c4 10             	add    esp,0x10
c001dcee:	45                   	inc    ebp
c001dcef:	eb b2                	jmp    c001dca3 <Vm::faultHandler(regs*)+0x62>
c001dcf1:	3c 64                	cmp    al,0x64
c001dcf3:	0f 84 8b 01 00 00    	je     c001de84 <Vm::faultHandler(regs*)+0x243>
c001dcf9:	0f 87 9f 01 00 00    	ja     c001de9e <Vm::faultHandler(regs*)+0x25d>
c001dcff:	3c 3e                	cmp    al,0x3e
c001dd01:	0f 85 0d 07 00 00    	jne    c001e414 <Vm::faultHandler(regs*)+0x7d3>
c001dd07:	83 ec 0c             	sub    esp,0xc
c001dd0a:	b3 01                	mov    bl,0x1
c001dd0c:	68 a2 aa 02 c0       	push   0xc002aaa2
c001dd11:	e8 71 49 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001dd16:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001dd19:	83 c4 10             	add    esp,0x10
c001dd1c:	eb d0                	jmp    c001dcee <Vm::faultHandler(regs*)+0xad>
c001dd1e:	3c 6d                	cmp    al,0x6d
c001dd20:	0f 84 af 03 00 00    	je     c001e0d5 <Vm::faultHandler(regs*)+0x494>
c001dd26:	77 15                	ja     c001dd3d <Vm::faultHandler(regs*)+0xfc>
c001dd28:	3c 67                	cmp    al,0x67
c001dd2a:	0f 84 bf 01 00 00    	je     c001deef <Vm::faultHandler(regs*)+0x2ae>
c001dd30:	3c 6c                	cmp    al,0x6c
c001dd32:	0f 84 3f 03 00 00    	je     c001e077 <Vm::faultHandler(regs*)+0x436>
c001dd38:	e9 d7 06 00 00       	jmp    c001e414 <Vm::faultHandler(regs*)+0x7d3>
c001dd3d:	3c 6f                	cmp    al,0x6f
c001dd3f:	0f 84 a4 04 00 00    	je     c001e1e9 <Vm::faultHandler(regs*)+0x5a8>
c001dd45:	0f 82 11 04 00 00    	jb     c001e15c <Vm::faultHandler(regs*)+0x51b>
c001dd4b:	3c 9c                	cmp    al,0x9c
c001dd4d:	0f 84 ba 01 00 00    	je     c001df0d <Vm::faultHandler(regs*)+0x2cc>
c001dd53:	e9 bc 06 00 00       	jmp    c001e414 <Vm::faultHandler(regs*)+0x7d3>
c001dd58:	3c ec                	cmp    al,0xec
c001dd5a:	0f 84 24 06 00 00    	je     c001e384 <Vm::faultHandler(regs*)+0x743>
c001dd60:	0f 87 93 00 00 00    	ja     c001ddf9 <Vm::faultHandler(regs*)+0x1b8>
c001dd66:	3c e4                	cmp    al,0xe4
c001dd68:	0f 84 5c 05 00 00    	je     c001e2ca <Vm::faultHandler(regs*)+0x689>
c001dd6e:	77 6a                	ja     c001ddda <Vm::faultHandler(regs*)+0x199>
c001dd70:	3c cd                	cmp    al,0xcd
c001dd72:	0f 84 7e 02 00 00    	je     c001dff6 <Vm::faultHandler(regs*)+0x3b5>
c001dd78:	3c cf                	cmp    al,0xcf
c001dd7a:	0f 85 94 06 00 00    	jne    c001e414 <Vm::faultHandler(regs*)+0x7d3>
c001dd80:	83 ec 0c             	sub    esp,0xc
c001dd83:	68 e6 aa 02 c0       	push   0xc002aae6
c001dd88:	e8 fa 48 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001dd8d:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001dd90:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001dd93:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001dd97:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001dd9a:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001dd9e:	0d 00 02 02 00       	or     eax,0x20200
c001dda3:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001dda6:	56                   	push   esi
c001dda7:	53                   	push   ebx
c001dda8:	52                   	push   edx
c001dda9:	68 ec aa 02 c0       	push   0xc002aaec
c001ddae:	e8 d4 48 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001ddb3:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001ddb7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ddbd:	66 c1 e8 09          	shr    ax,0x9
c001ddc1:	83 e0 01             	and    eax,0x1
c001ddc4:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ddc7:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001ddca:	83 c0 06             	add    eax,0x6
c001ddcd:	25 ff ff 00 00       	and    eax,0xffff
c001ddd2:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001ddd5:	e9 95 02 00 00       	jmp    c001e06f <Vm::faultHandler(regs*)+0x42e>
c001ddda:	3c e6                	cmp    al,0xe6
c001dddc:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001dde0:	0f 84 4e 05 00 00    	je     c001e334 <Vm::faultHandler(regs*)+0x6f3>
c001dde6:	0f 82 0a 05 00 00    	jb     c001e2f6 <Vm::faultHandler(regs*)+0x6b5>
c001ddec:	3c e7                	cmp    al,0xe7
c001ddee:	0f 84 69 05 00 00    	je     c001e35d <Vm::faultHandler(regs*)+0x71c>
c001ddf4:	e9 1b 06 00 00       	jmp    c001e414 <Vm::faultHandler(regs*)+0x7d3>
c001ddf9:	3c ef                	cmp    al,0xef
c001ddfb:	0f 84 e6 05 00 00    	je     c001e3e7 <Vm::faultHandler(regs*)+0x7a6>
c001de01:	77 37                	ja     c001de3a <Vm::faultHandler(regs*)+0x1f9>
c001de03:	3c ed                	cmp    al,0xed
c001de05:	0f 84 a3 05 00 00    	je     c001e3ae <Vm::faultHandler(regs*)+0x76d>
c001de0b:	3c ee                	cmp    al,0xee
c001de0d:	0f 85 01 06 00 00    	jne    c001e414 <Vm::faultHandler(regs*)+0x7d3>
c001de13:	52                   	push   edx
c001de14:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001de17:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001de1a:	68 87 ab 02 c0       	push   0xc002ab87
c001de1f:	e8 63 48 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001de24:	59                   	pop    ecx
c001de25:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001de29:	5b                   	pop    ebx
c001de2a:	50                   	push   eax
c001de2b:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001de2f:	50                   	push   eax
c001de30:	e8 2a fa ff ff       	call   c001d85f <Vm::outbv(unsigned short, unsigned char)>
c001de35:	e9 a5 05 00 00       	jmp    c001e3df <Vm::faultHandler(regs*)+0x79e>
c001de3a:	3c fa                	cmp    al,0xfa
c001de3c:	0f 84 f7 01 00 00    	je     c001e039 <Vm::faultHandler(regs*)+0x3f8>
c001de42:	3c fb                	cmp    al,0xfb
c001de44:	0f 84 0a 02 00 00    	je     c001e054 <Vm::faultHandler(regs*)+0x413>
c001de4a:	3c f3                	cmp    al,0xf3
c001de4c:	0f 85 c2 05 00 00    	jne    c001e414 <Vm::faultHandler(regs*)+0x7d3>
c001de52:	83 ec 0c             	sub    esp,0xc
c001de55:	68 bf aa 02 c0       	push   0xc002aabf
c001de5a:	e8 28 48 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001de5f:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001de62:	83 c4 10             	add    esp,0x10
c001de65:	e9 84 fe ff ff       	jmp    c001dcee <Vm::faultHandler(regs*)+0xad>
c001de6a:	83 ec 0c             	sub    esp,0xc
c001de6d:	b3 02                	mov    bl,0x2
c001de6f:	68 9a aa 02 c0       	push   0xc002aa9a
c001de74:	e8 0e 48 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001de79:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001de7c:	83 c4 10             	add    esp,0x10
c001de7f:	e9 6a fe ff ff       	jmp    c001dcee <Vm::faultHandler(regs*)+0xad>
c001de84:	83 ec 0c             	sub    esp,0xc
c001de87:	b3 03                	mov    bl,0x3
c001de89:	68 a6 aa 02 c0       	push   0xc002aaa6
c001de8e:	e8 f4 47 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001de93:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001de96:	83 c4 10             	add    esp,0x10
c001de99:	e9 50 fe ff ff       	jmp    c001dcee <Vm::faultHandler(regs*)+0xad>
c001de9e:	83 ec 0c             	sub    esp,0xc
c001dea1:	b3 04                	mov    bl,0x4
c001dea3:	68 aa aa 02 c0       	push   0xc002aaaa
c001dea8:	e8 da 47 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001dead:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001deb0:	83 c4 10             	add    esp,0x10
c001deb3:	e9 36 fe ff ff       	jmp    c001dcee <Vm::faultHandler(regs*)+0xad>
c001deb8:	83 ec 0c             	sub    esp,0xc
c001debb:	b3 05                	mov    bl,0x5
c001debd:	68 ae aa 02 c0       	push   0xc002aaae
c001dec2:	e8 c0 47 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001dec7:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001deca:	83 c4 10             	add    esp,0x10
c001decd:	e9 1c fe ff ff       	jmp    c001dcee <Vm::faultHandler(regs*)+0xad>
c001ded2:	83 ec 0c             	sub    esp,0xc
c001ded5:	68 b2 aa 02 c0       	push   0xc002aab2
c001deda:	e8 a8 47 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001dedf:	83 c4 10             	add    esp,0x10
c001dee2:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001dee5:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001deea:	e9 ff fd ff ff       	jmp    c001dcee <Vm::faultHandler(regs*)+0xad>
c001deef:	50                   	push   eax
c001def0:	50                   	push   eax
c001def1:	6a 01                	push   0x1
c001def3:	68 b7 aa 02 c0       	push   0xc002aab7
c001def8:	e8 8a 47 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001defd:	83 c4 10             	add    esp,0x10
c001df00:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001df03:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001df08:	e9 e1 fd ff ff       	jmp    c001dcee <Vm::faultHandler(regs*)+0xad>
c001df0d:	83 ec 0c             	sub    esp,0xc
c001df10:	68 c5 aa 02 c0       	push   0xc002aac5
c001df15:	e8 6d 47 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001df1a:	83 c4 10             	add    esp,0x10
c001df1d:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001df20:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001df25:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001df28:	74 2f                	je     c001df59 <Vm::faultHandler(regs*)+0x318>
c001df2a:	83 ea 04             	sub    edx,0x4
c001df2d:	25 ff 0d 00 00       	and    eax,0xdff
c001df32:	81 e2 ff ff 00 00    	and    edx,0xffff
c001df38:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001df3b:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001df3e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001df44:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001df48:	0f 84 bf 04 00 00    	je     c001e40d <Vm::faultHandler(regs*)+0x7cc>
c001df4e:	80 cc 02             	or     ah,0x2
c001df51:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001df54:	e9 b4 04 00 00       	jmp    c001e40d <Vm::faultHandler(regs*)+0x7cc>
c001df59:	83 ea 02             	sub    edx,0x2
c001df5c:	81 e2 ff ff 00 00    	and    edx,0xffff
c001df62:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001df65:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001df69:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001df6f:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001df73:	74 05                	je     c001df7a <Vm::faultHandler(regs*)+0x339>
c001df75:	80 cc 02             	or     ah,0x2
c001df78:	eb 03                	jmp    c001df7d <Vm::faultHandler(regs*)+0x33c>
c001df7a:	80 e4 fd             	and    ah,0xfd
c001df7d:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001df81:	e9 87 04 00 00       	jmp    c001e40d <Vm::faultHandler(regs*)+0x7cc>
c001df86:	83 ec 0c             	sub    esp,0xc
c001df89:	68 cc aa 02 c0       	push   0xc002aacc
c001df8e:	e8 f4 46 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001df93:	83 c4 10             	add    esp,0x10
c001df96:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001df9b:	74 28                	je     c001dfc5 <Vm::faultHandler(regs*)+0x384>
c001df9d:	8b 06                	mov    eax,DWORD PTR [esi]
c001df9f:	25 ff 0d 00 00       	and    eax,0xdff
c001dfa4:	0d 00 02 02 00       	or     eax,0x20200
c001dfa9:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001dfac:	8b 06                	mov    eax,DWORD PTR [esi]
c001dfae:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001dfb4:	c1 e8 09             	shr    eax,0x9
c001dfb7:	83 e0 01             	and    eax,0x1
c001dfba:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001dfbd:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001dfc0:	83 c0 04             	add    eax,0x4
c001dfc3:	eb 24                	jmp    c001dfe9 <Vm::faultHandler(regs*)+0x3a8>
c001dfc5:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001dfc8:	0d 00 02 02 00       	or     eax,0x20200
c001dfcd:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001dfd0:	66 8b 06             	mov    ax,WORD PTR [esi]
c001dfd3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001dfd9:	66 c1 e8 09          	shr    ax,0x9
c001dfdd:	83 e0 01             	and    eax,0x1
c001dfe0:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001dfe3:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001dfe6:	83 c0 02             	add    eax,0x2
c001dfe9:	25 ff ff 00 00       	and    eax,0xffff
c001dfee:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001dff1:	e9 17 04 00 00       	jmp    c001e40d <Vm::faultHandler(regs*)+0x7cc>
c001dff6:	53                   	push   ebx
c001dff7:	53                   	push   ebx
c001dff8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dffc:	50                   	push   eax
c001dffd:	68 d2 aa 02 c0       	push   0xc002aad2
c001e002:	e8 80 46 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001e007:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e00b:	83 c4 10             	add    esp,0x10
c001e00e:	3c ee                	cmp    al,0xee
c001e010:	75 10                	jne    c001e022 <Vm::faultHandler(regs*)+0x3e1>
c001e012:	83 ec 0c             	sub    esp,0xc
c001e015:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e018:	e8 fa f8 ff ff       	call   c001d917 <Vm::mainloop3(unsigned long)>
c001e01d:	e9 c0 03 00 00       	jmp    c001e3e2 <Vm::faultHandler(regs*)+0x7a1>
c001e022:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001e026:	83 ec 0c             	sub    esp,0xc
c001e029:	53                   	push   ebx
c001e02a:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001e02e:	53                   	push   ebx
c001e02f:	55                   	push   ebp
c001e030:	50                   	push   eax
c001e031:	57                   	push   edi
c001e032:	e8 0c fb ff ff       	call   c001db43 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001e037:	eb 36                	jmp    c001e06f <Vm::faultHandler(regs*)+0x42e>
c001e039:	83 ec 0c             	sub    esp,0xc
c001e03c:	68 dc aa 02 c0       	push   0xc002aadc
c001e041:	e8 41 46 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001e046:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e04b:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e04f:	e9 8b 03 00 00       	jmp    c001e3df <Vm::faultHandler(regs*)+0x79e>
c001e054:	83 ec 0c             	sub    esp,0xc
c001e057:	68 e1 aa 02 c0       	push   0xc002aae1
c001e05c:	e8 26 46 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001e061:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e066:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001e06a:	e9 70 03 00 00       	jmp    c001e3df <Vm::faultHandler(regs*)+0x79e>
c001e06f:	83 c4 20             	add    esp,0x20
c001e072:	e9 99 03 00 00       	jmp    c001e410 <Vm::faultHandler(regs*)+0x7cf>
c001e077:	83 ec 0c             	sub    esp,0xc
c001e07a:	68 1f ab 02 c0       	push   0xc002ab1f
c001e07f:	e8 03 46 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001e084:	83 c4 10             	add    esp,0x10
c001e087:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001e08a:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e08f:	74 0d                	je     c001e09e <Vm::faultHandler(regs*)+0x45d>
c001e091:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001e098:	0f 87 9e 01 00 00    	ja     c001e23c <Vm::faultHandler(regs*)+0x5fb>
c001e09e:	83 ec 0c             	sub    esp,0xc
c001e0a1:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e0a5:	0f b7 db             	movzx  ebx,bx
c001e0a8:	50                   	push   eax
c001e0a9:	e8 9e f7 ff ff       	call   c001d84c <Vm::inbv(unsigned short)>
c001e0ae:	83 c4 0c             	add    esp,0xc
c001e0b1:	0f b6 c0             	movzx  eax,al
c001e0b4:	50                   	push   eax
c001e0b5:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001e0b9:	50                   	push   eax
c001e0ba:	53                   	push   ebx
c001e0bb:	e8 41 fb ff ff       	call   c001dc01 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001e0c0:	83 c4 10             	add    esp,0x10
c001e0c3:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e0c6:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e0ca:	74 03                	je     c001e0cf <Vm::faultHandler(regs*)+0x48e>
c001e0cc:	48                   	dec    eax
c001e0cd:	eb 01                	jmp    c001e0d0 <Vm::faultHandler(regs*)+0x48f>
c001e0cf:	40                   	inc    eax
c001e0d0:	0f b7 c0             	movzx  eax,ax
c001e0d3:	eb 7f                	jmp    c001e154 <Vm::faultHandler(regs*)+0x513>
c001e0d5:	83 ec 0c             	sub    esp,0xc
c001e0d8:	68 51 ab 02 c0       	push   0xc002ab51
c001e0dd:	e8 a5 45 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001e0e2:	83 c4 10             	add    esp,0x10
c001e0e5:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001e0e8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e0ed:	74 0d                	je     c001e0fc <Vm::faultHandler(regs*)+0x4bb>
c001e0ef:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001e0f6:	0f 87 40 01 00 00    	ja     c001e23c <Vm::faultHandler(regs*)+0x5fb>
c001e0fc:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e0ff:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001e103:	0f b7 db             	movzx  ebx,bx
c001e106:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e10b:	74 20                	je     c001e12d <Vm::faultHandler(regs*)+0x4ec>
c001e10d:	ed                   	in     eax,dx
c001e10e:	51                   	push   ecx
c001e10f:	50                   	push   eax
c001e110:	56                   	push   esi
c001e111:	53                   	push   ebx
c001e112:	e8 15 fb ff ff       	call   c001dc2c <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001e117:	83 c4 10             	add    esp,0x10
c001e11a:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e11d:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e121:	74 05                	je     c001e128 <Vm::faultHandler(regs*)+0x4e7>
c001e123:	83 e8 04             	sub    eax,0x4
c001e126:	eb 27                	jmp    c001e14f <Vm::faultHandler(regs*)+0x50e>
c001e128:	83 c0 04             	add    eax,0x4
c001e12b:	eb 22                	jmp    c001e14f <Vm::faultHandler(regs*)+0x50e>
c001e12d:	66 ed                	in     ax,dx
c001e12f:	0f b7 c0             	movzx  eax,ax
c001e132:	52                   	push   edx
c001e133:	50                   	push   eax
c001e134:	56                   	push   esi
c001e135:	53                   	push   ebx
c001e136:	e8 db fa ff ff       	call   c001dc16 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001e13b:	83 c4 10             	add    esp,0x10
c001e13e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e141:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e145:	74 05                	je     c001e14c <Vm::faultHandler(regs*)+0x50b>
c001e147:	83 e8 02             	sub    eax,0x2
c001e14a:	eb 03                	jmp    c001e14f <Vm::faultHandler(regs*)+0x50e>
c001e14c:	83 c0 02             	add    eax,0x2
c001e14f:	25 ff ff 00 00       	and    eax,0xffff
c001e154:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001e157:	e9 b1 02 00 00       	jmp    c001e40d <Vm::faultHandler(regs*)+0x7cc>
c001e15c:	83 ec 0c             	sub    esp,0xc
c001e15f:	4b                   	dec    ebx
c001e160:	68 57 ab 02 c0       	push   0xc002ab57
c001e165:	e8 1d 45 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001e16a:	83 c4 10             	add    esp,0x10
c001e16d:	80 fb 05             	cmp    bl,0x5
c001e170:	77 0a                	ja     c001e17c <Vm::faultHandler(regs*)+0x53b>
c001e172:	0f b6 db             	movzx  ebx,bl
c001e175:	ff 24 9d c8 ab 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd5438]
c001e17c:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001e180:	eb 1b                	jmp    c001e19d <Vm::faultHandler(regs*)+0x55c>
c001e182:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001e186:	eb 15                	jmp    c001e19d <Vm::faultHandler(regs*)+0x55c>
c001e188:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001e18c:	eb 0f                	jmp    c001e19d <Vm::faultHandler(regs*)+0x55c>
c001e18e:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001e192:	eb 09                	jmp    c001e19d <Vm::faultHandler(regs*)+0x55c>
c001e194:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001e197:	eb 04                	jmp    c001e19d <Vm::faultHandler(regs*)+0x55c>
c001e199:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001e19d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e1a2:	74 0d                	je     c001e1b1 <Vm::faultHandler(regs*)+0x570>
c001e1a4:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001e1ab:	0f 87 8b 00 00 00    	ja     c001e23c <Vm::faultHandler(regs*)+0x5fb>
c001e1b1:	53                   	push   ebx
c001e1b2:	53                   	push   ebx
c001e1b3:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001e1b7:	52                   	push   edx
c001e1b8:	50                   	push   eax
c001e1b9:	e8 0f fa ff ff       	call   c001dbcd <Vm::readByteFromReal(unsigned short, unsigned short)>
c001e1be:	5e                   	pop    esi
c001e1bf:	0f b6 c0             	movzx  eax,al
c001e1c2:	5d                   	pop    ebp
c001e1c3:	50                   	push   eax
c001e1c4:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e1c8:	50                   	push   eax
c001e1c9:	e8 91 f6 ff ff       	call   c001d85f <Vm::outbv(unsigned short, unsigned char)>
c001e1ce:	83 c4 10             	add    esp,0x10
c001e1d1:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001e1d4:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e1d8:	74 03                	je     c001e1dd <Vm::faultHandler(regs*)+0x59c>
c001e1da:	48                   	dec    eax
c001e1db:	eb 01                	jmp    c001e1de <Vm::faultHandler(regs*)+0x59d>
c001e1dd:	40                   	inc    eax
c001e1de:	0f b7 c0             	movzx  eax,ax
c001e1e1:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001e1e4:	e9 24 02 00 00       	jmp    c001e40d <Vm::faultHandler(regs*)+0x7cc>
c001e1e9:	83 ec 0c             	sub    esp,0xc
c001e1ec:	4b                   	dec    ebx
c001e1ed:	68 57 ab 02 c0       	push   0xc002ab57
c001e1f2:	e8 90 44 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001e1f7:	83 c4 10             	add    esp,0x10
c001e1fa:	80 fb 05             	cmp    bl,0x5
c001e1fd:	77 0a                	ja     c001e209 <Vm::faultHandler(regs*)+0x5c8>
c001e1ff:	0f b6 db             	movzx  ebx,bl
c001e202:	ff 24 9d e0 ab 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd5420]
c001e209:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001e20d:	eb 1b                	jmp    c001e22a <Vm::faultHandler(regs*)+0x5e9>
c001e20f:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001e213:	eb 15                	jmp    c001e22a <Vm::faultHandler(regs*)+0x5e9>
c001e215:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001e219:	eb 0f                	jmp    c001e22a <Vm::faultHandler(regs*)+0x5e9>
c001e21b:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001e21f:	eb 09                	jmp    c001e22a <Vm::faultHandler(regs*)+0x5e9>
c001e221:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001e224:	eb 04                	jmp    c001e22a <Vm::faultHandler(regs*)+0x5e9>
c001e226:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001e22a:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001e22d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e232:	74 39                	je     c001e26d <Vm::faultHandler(regs*)+0x62c>
c001e234:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001e23a:	76 31                	jbe    c001e26d <Vm::faultHandler(regs*)+0x62c>
c001e23c:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001e240:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001e244:	51                   	push   ecx
c001e245:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001e249:	51                   	push   ecx
c001e24a:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001e24e:	51                   	push   ecx
c001e24f:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001e253:	51                   	push   ecx
c001e254:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e258:	52                   	push   edx
c001e259:	50                   	push   eax
c001e25a:	50                   	push   eax
c001e25b:	68 24 ab 02 c0       	push   0xc002ab24
c001e260:	e8 22 44 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001e265:	83 c4 20             	add    esp,0x20
c001e268:	e9 fb 01 00 00       	jmp    c001e468 <Vm::faultHandler(regs*)+0x827>
c001e26d:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001e270:	0f b7 d3             	movzx  edx,bx
c001e273:	81 e6 00 04 00 00    	and    esi,0x400
c001e279:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001e27c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e281:	74 1d                	je     c001e2a0 <Vm::faultHandler(regs*)+0x65f>
c001e283:	51                   	push   ecx
c001e284:	51                   	push   ecx
c001e285:	52                   	push   edx
c001e286:	50                   	push   eax
c001e287:	e8 64 f9 ff ff       	call   c001dbf0 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001e28c:	83 c4 10             	add    esp,0x10
c001e28f:	89 ea                	mov    edx,ebp
c001e291:	ef                   	out    dx,eax
c001e292:	85 f6                	test   esi,esi
c001e294:	74 05                	je     c001e29b <Vm::faultHandler(regs*)+0x65a>
c001e296:	83 eb 04             	sub    ebx,0x4
c001e299:	eb 21                	jmp    c001e2bc <Vm::faultHandler(regs*)+0x67b>
c001e29b:	83 c3 04             	add    ebx,0x4
c001e29e:	eb 1c                	jmp    c001e2bc <Vm::faultHandler(regs*)+0x67b>
c001e2a0:	51                   	push   ecx
c001e2a1:	51                   	push   ecx
c001e2a2:	52                   	push   edx
c001e2a3:	50                   	push   eax
c001e2a4:	e8 35 f9 ff ff       	call   c001dbde <Vm::readWordFromReal(unsigned short, unsigned short)>
c001e2a9:	83 c4 10             	add    esp,0x10
c001e2ac:	89 ea                	mov    edx,ebp
c001e2ae:	66 ef                	out    dx,ax
c001e2b0:	85 f6                	test   esi,esi
c001e2b2:	74 05                	je     c001e2b9 <Vm::faultHandler(regs*)+0x678>
c001e2b4:	83 eb 02             	sub    ebx,0x2
c001e2b7:	eb 03                	jmp    c001e2bc <Vm::faultHandler(regs*)+0x67b>
c001e2b9:	83 c3 02             	add    ebx,0x2
c001e2bc:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001e2c2:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001e2c5:	e9 43 01 00 00       	jmp    c001e40d <Vm::faultHandler(regs*)+0x7cc>
c001e2ca:	53                   	push   ebx
c001e2cb:	53                   	push   ebx
c001e2cc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e2d0:	50                   	push   eax
c001e2d1:	68 5d ab 02 c0       	push   0xc002ab5d
c001e2d6:	e8 ac 43 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001e2db:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001e2e2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e2e6:	89 04 24             	mov    DWORD PTR [esp],eax
c001e2e9:	e8 5e f5 ff ff       	call   c001d84c <Vm::inbv(unsigned short)>
c001e2ee:	0f b6 c0             	movzx  eax,al
c001e2f1:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001e2f4:	eb 5e                	jmp    c001e354 <Vm::faultHandler(regs*)+0x713>
c001e2f6:	51                   	push   ecx
c001e2f7:	51                   	push   ecx
c001e2f8:	53                   	push   ebx
c001e2f9:	68 63 ab 02 c0       	push   0xc002ab63
c001e2fe:	e8 84 43 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001e303:	83 c4 10             	add    esp,0x10
c001e306:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e30b:	74 07                	je     c001e314 <Vm::faultHandler(regs*)+0x6d3>
c001e30d:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e311:	ed                   	in     eax,dx
c001e312:	eb 14                	jmp    c001e328 <Vm::faultHandler(regs*)+0x6e7>
c001e314:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001e317:	66 31 db             	xor    bx,bx
c001e31a:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001e31d:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e321:	66 ed                	in     ax,dx
c001e323:	0f b7 c0             	movzx  eax,ax
c001e326:	09 d8                	or     eax,ebx
c001e328:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001e32b:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001e32f:	e9 dc 00 00 00       	jmp    c001e410 <Vm::faultHandler(regs*)+0x7cf>
c001e334:	50                   	push   eax
c001e335:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e338:	53                   	push   ebx
c001e339:	68 69 ab 02 c0       	push   0xc002ab69
c001e33e:	e8 44 43 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001e343:	58                   	pop    eax
c001e344:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001e348:	5a                   	pop    edx
c001e349:	50                   	push   eax
c001e34a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e34e:	50                   	push   eax
c001e34f:	e8 0b f5 ff ff       	call   c001d85f <Vm::outbv(unsigned short, unsigned char)>
c001e354:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001e358:	e9 85 00 00 00       	jmp    c001e3e2 <Vm::faultHandler(regs*)+0x7a1>
c001e35d:	50                   	push   eax
c001e35e:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e361:	53                   	push   ebx
c001e362:	68 72 ab 02 c0       	push   0xc002ab72
c001e367:	e8 1b 43 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001e36c:	83 c4 10             	add    esp,0x10
c001e36f:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e373:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e378:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001e37b:	74 03                	je     c001e380 <Vm::faultHandler(regs*)+0x73f>
c001e37d:	ef                   	out    dx,eax
c001e37e:	eb ab                	jmp    c001e32b <Vm::faultHandler(regs*)+0x6ea>
c001e380:	66 ef                	out    dx,ax
c001e382:	eb a7                	jmp    c001e32b <Vm::faultHandler(regs*)+0x6ea>
c001e384:	55                   	push   ebp
c001e385:	55                   	push   ebp
c001e386:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e389:	68 7b ab 02 c0       	push   0xc002ab7b
c001e38e:	e8 f4 42 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001e393:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001e39a:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e39e:	89 04 24             	mov    DWORD PTR [esp],eax
c001e3a1:	e8 a6 f4 ff ff       	call   c001d84c <Vm::inbv(unsigned short)>
c001e3a6:	0f b6 c0             	movzx  eax,al
c001e3a9:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001e3ac:	eb 31                	jmp    c001e3df <Vm::faultHandler(regs*)+0x79e>
c001e3ae:	56                   	push   esi
c001e3af:	56                   	push   esi
c001e3b0:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e3b3:	68 81 ab 02 c0       	push   0xc002ab81
c001e3b8:	e8 ca 42 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001e3bd:	83 c4 10             	add    esp,0x10
c001e3c0:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e3c3:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e3c8:	74 03                	je     c001e3cd <Vm::faultHandler(regs*)+0x78c>
c001e3ca:	ed                   	in     eax,dx
c001e3cb:	eb 0d                	jmp    c001e3da <Vm::faultHandler(regs*)+0x799>
c001e3cd:	66 ed                	in     ax,dx
c001e3cf:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001e3d2:	0f b7 c0             	movzx  eax,ax
c001e3d5:	66 31 d2             	xor    dx,dx
c001e3d8:	09 d0                	or     eax,edx
c001e3da:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001e3dd:	eb 2e                	jmp    c001e40d <Vm::faultHandler(regs*)+0x7cc>
c001e3df:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e3e2:	83 c4 10             	add    esp,0x10
c001e3e5:	eb 29                	jmp    c001e410 <Vm::faultHandler(regs*)+0x7cf>
c001e3e7:	50                   	push   eax
c001e3e8:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e3eb:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e3ee:	68 90 ab 02 c0       	push   0xc002ab90
c001e3f3:	e8 8f 42 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001e3f8:	83 c4 10             	add    esp,0x10
c001e3fb:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e3fe:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e403:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001e406:	74 03                	je     c001e40b <Vm::faultHandler(regs*)+0x7ca>
c001e408:	ef                   	out    dx,eax
c001e409:	eb 02                	jmp    c001e40d <Vm::faultHandler(regs*)+0x7cc>
c001e40b:	66 ef                	out    dx,ax
c001e40d:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e410:	b0 01                	mov    al,0x1
c001e412:	eb 56                	jmp    c001e46a <Vm::faultHandler(regs*)+0x829>
c001e414:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001e418:	51                   	push   ecx
c001e419:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001e41d:	51                   	push   ecx
c001e41e:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001e422:	51                   	push   ecx
c001e423:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001e427:	51                   	push   ecx
c001e428:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e42c:	52                   	push   edx
c001e42d:	50                   	push   eax
c001e42e:	50                   	push   eax
c001e42f:	68 99 ab 02 c0       	push   0xc002ab99
c001e434:	e8 4e 42 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001e439:	83 c4 20             	add    esp,0x20
c001e43c:	83 ec 0c             	sub    esp,0xc
c001e43f:	6a 60                	push   0x60
c001e441:	e8 06 f4 ff ff       	call   c001d84c <Vm::inbv(unsigned short)>
c001e446:	83 c4 10             	add    esp,0x10
c001e449:	3c 1c                	cmp    al,0x1c
c001e44b:	74 04                	je     c001e451 <Vm::faultHandler(regs*)+0x810>
c001e44d:	3c 5a                	cmp    al,0x5a
c001e44f:	75 eb                	jne    c001e43c <Vm::faultHandler(regs*)+0x7fb>
c001e451:	3c 1c                	cmp    al,0x1c
c001e453:	74 04                	je     c001e459 <Vm::faultHandler(regs*)+0x818>
c001e455:	3c 5a                	cmp    al,0x5a
c001e457:	75 0f                	jne    c001e468 <Vm::faultHandler(regs*)+0x827>
c001e459:	83 ec 0c             	sub    esp,0xc
c001e45c:	6a 60                	push   0x60
c001e45e:	e8 e9 f3 ff ff       	call   c001d84c <Vm::inbv(unsigned short)>
c001e463:	83 c4 10             	add    esp,0x10
c001e466:	eb e9                	jmp    c001e451 <Vm::faultHandler(regs*)+0x810>
c001e468:	31 c0                	xor    eax,eax
c001e46a:	83 c4 1c             	add    esp,0x1c
c001e46d:	5b                   	pop    ebx
c001e46e:	5e                   	pop    esi
c001e46f:	5f                   	pop    edi
c001e470:	5d                   	pop    ebp
c001e471:	c3                   	ret    

c001e472 <Vm::fpuInternalTo32(unsigned long long)>:
c001e472:	57                   	push   edi
c001e473:	56                   	push   esi
c001e474:	53                   	push   ebx
c001e475:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e479:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e47d:	89 d6                	mov    esi,edx
c001e47f:	89 d7                	mov    edi,edx
c001e481:	89 c1                	mov    ecx,eax
c001e483:	c1 ef 14             	shr    edi,0x14
c001e486:	89 d3                	mov    ebx,edx
c001e488:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001e48e:	31 d2                	xor    edx,edx
c001e490:	89 f8                	mov    eax,edi
c001e492:	81 e6 00 00 00 80    	and    esi,0x80000000
c001e498:	bf ff 00 00 00       	mov    edi,0xff
c001e49d:	05 80 fc ff ff       	add    eax,0xfffffc80
c001e4a2:	83 d2 ff             	adc    edx,0xffffffff
c001e4a5:	39 c7                	cmp    edi,eax
c001e4a7:	bf 00 00 00 00       	mov    edi,0x0
c001e4ac:	19 d7                	sbb    edi,edx
c001e4ae:	72 15                	jb     c001e4c5 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001e4b0:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001e4b4:	c1 e0 17             	shl    eax,0x17
c001e4b7:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001e4bd:	09 f1                	or     ecx,esi
c001e4bf:	09 c1                	or     ecx,eax
c001e4c1:	89 cf                	mov    edi,ecx
c001e4c3:	eb 02                	jmp    c001e4c7 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001e4c5:	31 ff                	xor    edi,edi
c001e4c7:	89 f8                	mov    eax,edi
c001e4c9:	5b                   	pop    ebx
c001e4ca:	5e                   	pop    esi
c001e4cb:	5f                   	pop    edi
c001e4cc:	c3                   	ret    

c001e4cd <Vm::fpuInternalTo64(unsigned long long)>:
c001e4cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e4d1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e4d5:	c3                   	ret    

c001e4d6 <Vm::fpu32ToInternal(unsigned int)>:
c001e4d6:	57                   	push   edi
c001e4d7:	31 ff                	xor    edi,edi
c001e4d9:	56                   	push   esi
c001e4da:	53                   	push   ebx
c001e4db:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e4df:	89 cb                	mov    ebx,ecx
c001e4e1:	89 ce                	mov    esi,ecx
c001e4e3:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001e4e9:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001e4ef:	c1 e9 17             	shr    ecx,0x17
c001e4f2:	89 f0                	mov    eax,esi
c001e4f4:	0f b6 d1             	movzx  edx,cl
c001e4f7:	81 c2 80 03 00 00    	add    edx,0x380
c001e4fd:	89 d1                	mov    ecx,edx
c001e4ff:	89 fa                	mov    edx,edi
c001e501:	c1 e1 14             	shl    ecx,0x14
c001e504:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001e508:	c1 e0 1d             	shl    eax,0x1d
c001e50b:	89 d7                	mov    edi,edx
c001e50d:	89 c6                	mov    esi,eax
c001e50f:	89 ca                	mov    edx,ecx
c001e511:	89 f0                	mov    eax,esi
c001e513:	09 fa                	or     edx,edi
c001e515:	09 da                	or     edx,ebx
c001e517:	5b                   	pop    ebx
c001e518:	5e                   	pop    esi
c001e519:	5f                   	pop    edi
c001e51a:	c3                   	ret    

c001e51b <Vm::fpu64ToInternal(unsigned long long)>:
c001e51b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e51f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e523:	c3                   	ret    

c001e524 <Vm::fpuFloatToLong(unsigned long long)>:
c001e524:	57                   	push   edi
c001e525:	31 c0                	xor    eax,eax
c001e527:	56                   	push   esi
c001e528:	31 d2                	xor    edx,edx
c001e52a:	53                   	push   ebx
c001e52b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e52f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e533:	89 d9                	mov    ecx,ebx
c001e535:	c1 e9 14             	shr    ecx,0x14
c001e538:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001e53e:	89 cf                	mov    edi,ecx
c001e540:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001e546:	78 33                	js     c001e57b <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001e548:	89 d9                	mov    ecx,ebx
c001e54a:	89 f0                	mov    eax,esi
c001e54c:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001e552:	81 c9 00 00 10 00    	or     ecx,0x100000
c001e558:	89 ca                	mov    edx,ecx
c001e55a:	b9 34 00 00 00       	mov    ecx,0x34
c001e55f:	29 f9                	sub    ecx,edi
c001e561:	0f ad d0             	shrd   eax,edx,cl
c001e564:	d3 fa                	sar    edx,cl
c001e566:	f6 c1 20             	test   cl,0x20
c001e569:	74 05                	je     c001e570 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001e56b:	89 d0                	mov    eax,edx
c001e56d:	c1 fa 1f             	sar    edx,0x1f
c001e570:	85 db                	test   ebx,ebx
c001e572:	79 07                	jns    c001e57b <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001e574:	f7 d8                	neg    eax
c001e576:	83 d2 00             	adc    edx,0x0
c001e579:	f7 da                	neg    edx
c001e57b:	5b                   	pop    ebx
c001e57c:	5e                   	pop    esi
c001e57d:	5f                   	pop    edi
c001e57e:	c3                   	ret    

c001e57f <Vm::fpuULongToFloat(unsigned long long)>:
c001e57f:	57                   	push   edi
c001e580:	31 c9                	xor    ecx,ecx
c001e582:	56                   	push   esi
c001e583:	53                   	push   ebx
c001e584:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e588:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001e58c:	0f ba e7 14          	bt     edi,0x14
c001e590:	72 07                	jb     c001e599 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001e592:	01 f6                	add    esi,esi
c001e594:	11 ff                	adc    edi,edi
c001e596:	41                   	inc    ecx
c001e597:	eb f3                	jmp    c001e58c <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001e599:	89 fa                	mov    edx,edi
c001e59b:	89 f0                	mov    eax,esi
c001e59d:	bb 33 04 00 00       	mov    ebx,0x433
c001e5a2:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001e5a8:	29 cb                	sub    ebx,ecx
c001e5aa:	89 d9                	mov    ecx,ebx
c001e5ac:	5b                   	pop    ebx
c001e5ad:	c1 e1 14             	shl    ecx,0x14
c001e5b0:	5e                   	pop    esi
c001e5b1:	09 ca                	or     edx,ecx
c001e5b3:	5f                   	pop    edi
c001e5b4:	c3                   	ret    

c001e5b5 <Vm::fpuLongToFloat(long long)>:
c001e5b5:	56                   	push   esi
c001e5b6:	31 c0                	xor    eax,eax
c001e5b8:	53                   	push   ebx
c001e5b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e5bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e5c1:	39 c8                	cmp    eax,ecx
c001e5c3:	19 d8                	sbb    eax,ebx
c001e5c5:	7d 04                	jge    c001e5cb <Vm::fpuLongToFloat(long long)+0x16>
c001e5c7:	31 f6                	xor    esi,esi
c001e5c9:	eb 0c                	jmp    c001e5d7 <Vm::fpuLongToFloat(long long)+0x22>
c001e5cb:	f7 d9                	neg    ecx
c001e5cd:	be 01 00 00 00       	mov    esi,0x1
c001e5d2:	83 d3 00             	adc    ebx,0x0
c001e5d5:	f7 db                	neg    ebx
c001e5d7:	31 c0                	xor    eax,eax
c001e5d9:	0f ba e3 14          	bt     ebx,0x14
c001e5dd:	72 07                	jb     c001e5e6 <Vm::fpuLongToFloat(long long)+0x31>
c001e5df:	01 c9                	add    ecx,ecx
c001e5e1:	11 db                	adc    ebx,ebx
c001e5e3:	40                   	inc    eax
c001e5e4:	eb f3                	jmp    c001e5d9 <Vm::fpuLongToFloat(long long)+0x24>
c001e5e6:	ba 33 04 00 00       	mov    edx,0x433
c001e5eb:	29 c2                	sub    edx,eax
c001e5ed:	89 c8                	mov    eax,ecx
c001e5ef:	c1 e2 14             	shl    edx,0x14
c001e5f2:	89 d9                	mov    ecx,ebx
c001e5f4:	89 f3                	mov    ebx,esi
c001e5f6:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001e5fc:	09 ca                	or     edx,ecx
c001e5fe:	84 db                	test   bl,bl
c001e600:	74 06                	je     c001e608 <Vm::fpuLongToFloat(long long)+0x53>
c001e602:	81 ca 00 00 00 80    	or     edx,0x80000000
c001e608:	5b                   	pop    ebx
c001e609:	5e                   	pop    esi
c001e60a:	c3                   	ret    

c001e60b <Vm::fpuGet0()>:
c001e60b:	31 c0                	xor    eax,eax
c001e60d:	31 d2                	xor    edx,edx
c001e60f:	c3                   	ret    

c001e610 <Vm::fpuGet1()>:
c001e610:	b8 01 00 00 00       	mov    eax,0x1
c001e615:	31 d2                	xor    edx,edx
c001e617:	c3                   	ret    

c001e618 <Vm::fpuGetPi()>:
c001e618:	b8 03 00 00 00       	mov    eax,0x3
c001e61d:	31 d2                	xor    edx,edx
c001e61f:	c3                   	ret    

c001e620 <Vm::fpuGetLog2E()>:
c001e620:	83 ec 18             	sub    esp,0x18
c001e623:	68 f8 ab 02 c0       	push   0xc002abf8
c001e628:	e8 74 b1 ff ff       	call   c00197a1 <Krnl::panic(char const*)>
c001e62d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e632:	31 d2                	xor    edx,edx
c001e634:	83 c4 1c             	add    esp,0x1c
c001e637:	c3                   	ret    

c001e638 <Vm::fpuGetLogE2()>:
c001e638:	83 ec 18             	sub    esp,0x18
c001e63b:	68 04 ac 02 c0       	push   0xc002ac04
c001e640:	e8 5c b1 ff ff       	call   c00197a1 <Krnl::panic(char const*)>
c001e645:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e64a:	31 d2                	xor    edx,edx
c001e64c:	83 c4 1c             	add    esp,0x1c
c001e64f:	c3                   	ret    

c001e650 <Vm::fpuGetLog210()>:
c001e650:	83 ec 18             	sub    esp,0x18
c001e653:	68 10 ac 02 c0       	push   0xc002ac10
c001e658:	e8 44 b1 ff ff       	call   c00197a1 <Krnl::panic(char const*)>
c001e65d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e662:	31 d2                	xor    edx,edx
c001e664:	83 c4 1c             	add    esp,0x1c
c001e667:	c3                   	ret    

c001e668 <Vm::fpuGetLog102()>:
c001e668:	83 ec 18             	sub    esp,0x18
c001e66b:	68 1d ac 02 c0       	push   0xc002ac1d
c001e670:	e8 2c b1 ff ff       	call   c00197a1 <Krnl::panic(char const*)>
c001e675:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e67a:	31 d2                	xor    edx,edx
c001e67c:	83 c4 1c             	add    esp,0x1c
c001e67f:	c3                   	ret    

c001e680 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001e680:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e684:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001e688:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e68c:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001e690:	0f 92 c0             	setb   al
c001e693:	c3                   	ret    

c001e694 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001e694:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e69c:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001e6a0:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001e6a4:	09 c2                	or     edx,eax
c001e6a6:	0f 94 c0             	sete   al
c001e6a9:	c3                   	ret    

c001e6aa <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001e6aa:	57                   	push   edi
c001e6ab:	56                   	push   esi
c001e6ac:	53                   	push   ebx
c001e6ad:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e6b1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e6b5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001e6b9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001e6bd:	57                   	push   edi
c001e6be:	56                   	push   esi
c001e6bf:	53                   	push   ebx
c001e6c0:	51                   	push   ecx
c001e6c1:	e8 ce ff ff ff       	call   c001e694 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001e6c6:	83 c4 10             	add    esp,0x10
c001e6c9:	88 c2                	mov    dl,al
c001e6cb:	31 c0                	xor    eax,eax
c001e6cd:	84 d2                	test   dl,dl
c001e6cf:	75 0c                	jne    c001e6dd <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001e6d1:	57                   	push   edi
c001e6d2:	56                   	push   esi
c001e6d3:	53                   	push   ebx
c001e6d4:	51                   	push   ecx
c001e6d5:	e8 a6 ff ff ff       	call   c001e680 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001e6da:	83 c4 10             	add    esp,0x10
c001e6dd:	83 e0 01             	and    eax,0x1
c001e6e0:	5b                   	pop    ebx
c001e6e1:	88 c1                	mov    cl,al
c001e6e3:	83 e2 01             	and    edx,0x1
c001e6e6:	a0 01 de 02 c0       	mov    al,ds:0xc002de01
c001e6eb:	c1 e2 06             	shl    edx,0x6
c001e6ee:	83 e0 ba             	and    eax,0xffffffba
c001e6f1:	5e                   	pop    esi
c001e6f2:	09 c8                	or     eax,ecx
c001e6f4:	5f                   	pop    edi
c001e6f5:	09 d0                	or     eax,edx
c001e6f7:	a2 01 de 02 c0       	mov    ds:0xc002de01,al
c001e6fc:	c3                   	ret    

c001e6fd <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001e6fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e701:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e705:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001e709:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001e70d:	c3                   	ret    

c001e70e <Vm::fpuAbs(unsigned long long)>:
c001e70e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e712:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e716:	c3                   	ret    

c001e717 <Vm::fpuChs(unsigned long long)>:
c001e717:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e71b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e71f:	f7 d8                	neg    eax
c001e721:	83 d2 00             	adc    edx,0x0
c001e724:	f7 da                	neg    edx
c001e726:	c3                   	ret    

c001e727 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001e727:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001e72b:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001e730:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001e734:	eb c7                	jmp    c001e6fd <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001e736 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001e736:	53                   	push   ebx
c001e737:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e73b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e73f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e743:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e747:	0f af ca             	imul   ecx,edx
c001e74a:	0f af d8             	imul   ebx,eax
c001e74d:	f7 e2                	mul    edx
c001e74f:	01 d9                	add    ecx,ebx
c001e751:	5b                   	pop    ebx
c001e752:	01 ca                	add    edx,ecx
c001e754:	c3                   	ret    

c001e755 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001e755:	83 ec 0c             	sub    esp,0xc
c001e758:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e75c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e760:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e764:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e768:	e8 4f 6b 00 00       	call   c00252bc <__udivdi3>
c001e76d:	83 c4 1c             	add    esp,0x1c
c001e770:	c3                   	ret    

c001e771 <Vm::fpuSquare(unsigned long long)>:
c001e771:	50                   	push   eax
c001e772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e776:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e77a:	52                   	push   edx
c001e77b:	50                   	push   eax
c001e77c:	52                   	push   edx
c001e77d:	50                   	push   eax
c001e77e:	e8 b3 ff ff ff       	call   c001e736 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001e783:	83 c4 14             	add    esp,0x14
c001e786:	c3                   	ret    

c001e787 <Vm::fpuGetReg(int)>:
c001e787:	83 ec 0c             	sub    esp,0xc
c001e78a:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001e78f:	76 10                	jbe    c001e7a1 <Vm::fpuGetReg(int)+0x1a>
c001e791:	83 ec 0c             	sub    esp,0xc
c001e794:	68 2a ac 02 c0       	push   0xc002ac2a
c001e799:	e8 03 b0 ff ff       	call   c00197a1 <Krnl::panic(char const*)>
c001e79e:	83 c4 10             	add    esp,0x10
c001e7a1:	a0 01 de 02 c0       	mov    al,ds:0xc002de01
c001e7a6:	b9 08 00 00 00       	mov    ecx,0x8
c001e7ab:	c0 e8 03             	shr    al,0x3
c001e7ae:	83 e0 07             	and    eax,0x7
c001e7b1:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e7b5:	99                   	cdq    
c001e7b6:	f7 f9                	idiv   ecx
c001e7b8:	8b 04 d5 04 de 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd21fc]
c001e7bf:	8b 14 d5 08 de 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd21f8]
c001e7c6:	83 c4 0c             	add    esp,0xc
c001e7c9:	c3                   	ret    

c001e7ca <Vm::fpuSetReg(int, unsigned long long)>:
c001e7ca:	57                   	push   edi
c001e7cb:	56                   	push   esi
c001e7cc:	52                   	push   edx
c001e7cd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001e7d1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e7d5:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001e7da:	76 10                	jbe    c001e7ec <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001e7dc:	83 ec 0c             	sub    esp,0xc
c001e7df:	68 3d ac 02 c0       	push   0xc002ac3d
c001e7e4:	e8 b8 af ff ff       	call   c00197a1 <Krnl::panic(char const*)>
c001e7e9:	83 c4 10             	add    esp,0x10
c001e7ec:	a0 01 de 02 c0       	mov    al,ds:0xc002de01
c001e7f1:	b9 08 00 00 00       	mov    ecx,0x8
c001e7f6:	c0 e8 03             	shr    al,0x3
c001e7f9:	83 e0 07             	and    eax,0x7
c001e7fc:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e800:	99                   	cdq    
c001e801:	f7 f9                	idiv   ecx
c001e803:	89 34 d5 04 de 02 c0 	mov    DWORD PTR [edx*8-0x3ffd21fc],esi
c001e80a:	89 3c d5 08 de 02 c0 	mov    DWORD PTR [edx*8-0x3ffd21f8],edi
c001e811:	58                   	pop    eax
c001e812:	5e                   	pop    esi
c001e813:	5f                   	pop    edi
c001e814:	c3                   	ret    

c001e815 <Vm::fpuPush(unsigned long long)>:
c001e815:	a0 01 de 02 c0       	mov    al,ds:0xc002de01
c001e81a:	c0 e8 03             	shr    al,0x3
c001e81d:	83 e0 07             	and    eax,0x7
c001e820:	83 c0 07             	add    eax,0x7
c001e823:	88 c2                	mov    dl,al
c001e825:	83 e0 07             	and    eax,0x7
c001e828:	83 e2 07             	and    edx,0x7
c001e82b:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001e832:	8a 15 01 de 02 c0    	mov    dl,BYTE PTR ds:0xc002de01
c001e838:	83 e2 c7             	and    edx,0xffffffc7
c001e83b:	09 ca                	or     edx,ecx
c001e83d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e841:	88 15 01 de 02 c0    	mov    BYTE PTR ds:0xc002de01,dl
c001e847:	89 0c c5 08 de 02 c0 	mov    DWORD PTR [eax*8-0x3ffd21f8],ecx
c001e84e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e852:	89 14 c5 04 de 02 c0 	mov    DWORD PTR [eax*8-0x3ffd21fc],edx
c001e859:	a1 44 de 02 c0       	mov    eax,ds:0xc002de44
c001e85e:	83 f8 08             	cmp    eax,0x8
c001e861:	75 08                	jne    c001e86b <Vm::fpuPush(unsigned long long)+0x56>
c001e863:	80 0d 00 de 02 c0 40 	or     BYTE PTR ds:0xc002de00,0x40
c001e86a:	c3                   	ret    
c001e86b:	40                   	inc    eax
c001e86c:	a3 44 de 02 c0       	mov    ds:0xc002de44,eax
c001e871:	c3                   	ret    

c001e872 <Vm::fpuPop()>:
c001e872:	8a 0d 01 de 02 c0    	mov    cl,BYTE PTR ds:0xc002de01
c001e878:	53                   	push   ebx
c001e879:	c0 e9 03             	shr    cl,0x3
c001e87c:	8a 1d 01 de 02 c0    	mov    bl,BYTE PTR ds:0xc002de01
c001e882:	83 e1 07             	and    ecx,0x7
c001e885:	83 e3 c7             	and    ebx,0xffffffc7
c001e888:	8b 04 cd 04 de 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd21fc]
c001e88f:	8b 14 cd 08 de 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd21f8]
c001e896:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001e89d:	83 e1 38             	and    ecx,0x38
c001e8a0:	09 d9                	or     ecx,ebx
c001e8a2:	88 0d 01 de 02 c0    	mov    BYTE PTR ds:0xc002de01,cl
c001e8a8:	8b 0d 44 de 02 c0    	mov    ecx,DWORD PTR ds:0xc002de44
c001e8ae:	85 c9                	test   ecx,ecx
c001e8b0:	74 09                	je     c001e8bb <Vm::fpuPop()+0x49>
c001e8b2:	49                   	dec    ecx
c001e8b3:	89 0d 44 de 02 c0    	mov    DWORD PTR ds:0xc002de44,ecx
c001e8b9:	eb 07                	jmp    c001e8c2 <Vm::fpuPop()+0x50>
c001e8bb:	80 0d 00 de 02 c0 40 	or     BYTE PTR ds:0xc002de00,0x40
c001e8c2:	5b                   	pop    ebx
c001e8c3:	c3                   	ret    

c001e8c4 <Vm::x87Handler(regs*)>:
c001e8c4:	55                   	push   ebp
c001e8c5:	57                   	push   edi
c001e8c6:	56                   	push   esi
c001e8c7:	53                   	push   ebx
c001e8c8:	83 ec 1c             	sub    esp,0x1c
c001e8cb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e8cf:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001e8d4:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001e8d7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001e8df:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001e8e3:	50                   	push   eax
c001e8e4:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001e8e8:	50                   	push   eax
c001e8e9:	8d 44 24 14          	lea    eax,[esp+0x14]
c001e8ed:	50                   	push   eax
c001e8ee:	53                   	push   ebx
c001e8ef:	e8 de a6 ff ff       	call   c0018fd2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001e8f4:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001e8f7:	83 c4 10             	add    esp,0x10
c001e8fa:	89 c6                	mov    esi,eax
c001e8fc:	80 fa d9             	cmp    dl,0xd9
c001e8ff:	0f 85 52 01 00 00    	jne    c001ea57 <Vm::x87Handler(regs*)+0x193>
c001e905:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e909:	8d 50 20             	lea    edx,[eax+0x20]
c001e90c:	80 fa 0e             	cmp    dl,0xe
c001e90f:	0f 87 86 00 00 00    	ja     c001e99b <Vm::x87Handler(regs*)+0xd7>
c001e915:	0f b6 d2             	movzx  edx,dl
c001e918:	ff 24 95 50 ac 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd53b0]
c001e91f:	e8 e7 fc ff ff       	call   c001e60b <Vm::fpuGet0()>
c001e924:	eb 05                	jmp    c001e92b <Vm::x87Handler(regs*)+0x67>
c001e926:	e8 e5 fc ff ff       	call   c001e610 <Vm::fpuGet1()>
c001e92b:	57                   	push   edi
c001e92c:	57                   	push   edi
c001e92d:	52                   	push   edx
c001e92e:	50                   	push   eax
c001e92f:	e8 e1 fe ff ff       	call   c001e815 <Vm::fpuPush(unsigned long long)>
c001e934:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001e938:	83 c4 10             	add    esp,0x10
c001e93b:	b0 01                	mov    al,0x1
c001e93d:	e9 e3 09 00 00       	jmp    c001f325 <Vm::x87Handler(regs*)+0xa61>
c001e942:	83 ec 0c             	sub    esp,0xc
c001e945:	6a 00                	push   0x0
c001e947:	e8 3b fe ff ff       	call   c001e787 <Vm::fpuGetReg(int)>
c001e94c:	59                   	pop    ecx
c001e94d:	5e                   	pop    esi
c001e94e:	52                   	push   edx
c001e94f:	50                   	push   eax
c001e950:	e8 c2 fd ff ff       	call   c001e717 <Vm::fpuChs(unsigned long long)>
c001e955:	eb 13                	jmp    c001e96a <Vm::x87Handler(regs*)+0xa6>
c001e957:	83 ec 0c             	sub    esp,0xc
c001e95a:	6a 00                	push   0x0
c001e95c:	e8 26 fe ff ff       	call   c001e787 <Vm::fpuGetReg(int)>
c001e961:	5f                   	pop    edi
c001e962:	5d                   	pop    ebp
c001e963:	52                   	push   edx
c001e964:	50                   	push   eax
c001e965:	e8 a4 fd ff ff       	call   c001e70e <Vm::fpuAbs(unsigned long long)>
c001e96a:	83 c4 0c             	add    esp,0xc
c001e96d:	52                   	push   edx
c001e96e:	50                   	push   eax
c001e96f:	6a 00                	push   0x0
c001e971:	e8 54 fe ff ff       	call   c001e7ca <Vm::fpuSetReg(int, unsigned long long)>
c001e976:	eb bc                	jmp    c001e934 <Vm::x87Handler(regs*)+0x70>
c001e978:	e8 d3 fc ff ff       	call   c001e650 <Vm::fpuGetLog210()>
c001e97d:	eb ac                	jmp    c001e92b <Vm::x87Handler(regs*)+0x67>
c001e97f:	e8 9c fc ff ff       	call   c001e620 <Vm::fpuGetLog2E()>
c001e984:	eb a5                	jmp    c001e92b <Vm::x87Handler(regs*)+0x67>
c001e986:	e8 8d fc ff ff       	call   c001e618 <Vm::fpuGetPi()>
c001e98b:	eb 9e                	jmp    c001e92b <Vm::x87Handler(regs*)+0x67>
c001e98d:	e8 d6 fc ff ff       	call   c001e668 <Vm::fpuGetLog102()>
c001e992:	eb 97                	jmp    c001e92b <Vm::x87Handler(regs*)+0x67>
c001e994:	e8 9f fc ff ff       	call   c001e638 <Vm::fpuGetLogE2()>
c001e999:	eb 90                	jmp    c001e92b <Vm::x87Handler(regs*)+0x67>
c001e99b:	8d 50 40             	lea    edx,[eax+0x40]
c001e99e:	80 fa 07             	cmp    dl,0x7
c001e9a1:	77 15                	ja     c001e9b8 <Vm::x87Handler(regs*)+0xf4>
c001e9a3:	83 ec 0c             	sub    esp,0xc
c001e9a6:	2d c0 00 00 00       	sub    eax,0xc0
c001e9ab:	50                   	push   eax
c001e9ac:	e8 d6 fd ff ff       	call   c001e787 <Vm::fpuGetReg(int)>
c001e9b1:	59                   	pop    ecx
c001e9b2:	5e                   	pop    esi
c001e9b3:	e9 75 ff ff ff       	jmp    c001e92d <Vm::x87Handler(regs*)+0x69>
c001e9b8:	8d 50 38             	lea    edx,[eax+0x38]
c001e9bb:	80 fa 07             	cmp    dl,0x7
c001e9be:	77 3c                	ja     c001e9fc <Vm::x87Handler(regs*)+0x138>
c001e9c0:	83 ec 0c             	sub    esp,0xc
c001e9c3:	2d c8 00 00 00       	sub    eax,0xc8
c001e9c8:	50                   	push   eax
c001e9c9:	e8 b9 fd ff ff       	call   c001e787 <Vm::fpuGetReg(int)>
c001e9ce:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e9d5:	89 c6                	mov    esi,eax
c001e9d7:	89 d7                	mov    edi,edx
c001e9d9:	e8 a9 fd ff ff       	call   c001e787 <Vm::fpuGetReg(int)>
c001e9de:	83 c4 0c             	add    esp,0xc
c001e9e1:	52                   	push   edx
c001e9e2:	50                   	push   eax
c001e9e3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e9e7:	2d c8 00 00 00       	sub    eax,0xc8
c001e9ec:	50                   	push   eax
c001e9ed:	e8 d8 fd ff ff       	call   c001e7ca <Vm::fpuSetReg(int, unsigned long long)>
c001e9f2:	83 c4 0c             	add    esp,0xc
c001e9f5:	57                   	push   edi
c001e9f6:	56                   	push   esi
c001e9f7:	e9 73 ff ff ff       	jmp    c001e96f <Vm::x87Handler(regs*)+0xab>
c001e9fc:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ea00:	84 d2                	test   dl,dl
c001ea02:	75 0f                	jne    c001ea13 <Vm::x87Handler(regs*)+0x14f>
c001ea04:	83 ec 0c             	sub    esp,0xc
c001ea07:	ff 36                	push   DWORD PTR [esi]
c001ea09:	e8 c8 fa ff ff       	call   c001e4d6 <Vm::fpu32ToInternal(unsigned int)>
c001ea0e:	e9 bf 00 00 00       	jmp    c001ead2 <Vm::x87Handler(regs*)+0x20e>
c001ea13:	80 fa 03             	cmp    dl,0x3
c001ea16:	75 13                	jne    c001ea2b <Vm::x87Handler(regs*)+0x167>
c001ea18:	e8 55 fe ff ff       	call   c001e872 <Vm::fpuPop()>
c001ea1d:	55                   	push   ebp
c001ea1e:	55                   	push   ebp
c001ea1f:	52                   	push   edx
c001ea20:	50                   	push   eax
c001ea21:	e8 4c fa ff ff       	call   c001e472 <Vm::fpuInternalTo32(unsigned long long)>
c001ea26:	e9 88 00 00 00       	jmp    c001eab3 <Vm::x87Handler(regs*)+0x1ef>
c001ea2b:	80 fa 05             	cmp    dl,0x5
c001ea2e:	75 0e                	jne    c001ea3e <Vm::x87Handler(regs*)+0x17a>
c001ea30:	66 8b 06             	mov    ax,WORD PTR [esi]
c001ea33:	66 a3 02 de 02 c0    	mov    ds:0xc002de02,ax
c001ea39:	e9 df 00 00 00       	jmp    c001eb1d <Vm::x87Handler(regs*)+0x259>
c001ea3e:	31 c0                	xor    eax,eax
c001ea40:	80 fa 07             	cmp    dl,0x7
c001ea43:	0f 85 dc 08 00 00    	jne    c001f325 <Vm::x87Handler(regs*)+0xa61>
c001ea49:	66 a1 02 de 02 c0    	mov    ax,ds:0xc002de02
c001ea4f:	66 89 06             	mov    WORD PTR [esi],ax
c001ea52:	e9 c6 00 00 00       	jmp    c001eb1d <Vm::x87Handler(regs*)+0x259>
c001ea57:	80 fa d8             	cmp    dl,0xd8
c001ea5a:	0f 84 c9 00 00 00    	je     c001eb29 <Vm::x87Handler(regs*)+0x265>
c001ea60:	80 fa dc             	cmp    dl,0xdc
c001ea63:	0f 84 0d 02 00 00    	je     c001ec76 <Vm::x87Handler(regs*)+0x3b2>
c001ea69:	80 fa de             	cmp    dl,0xde
c001ea6c:	0f 84 cd 02 00 00    	je     c001ed3f <Vm::x87Handler(regs*)+0x47b>
c001ea72:	80 fa dd             	cmp    dl,0xdd
c001ea75:	0f 84 5f 04 00 00    	je     c001eeda <Vm::x87Handler(regs*)+0x616>
c001ea7b:	80 fa da             	cmp    dl,0xda
c001ea7e:	0f 84 24 05 00 00    	je     c001efa8 <Vm::x87Handler(regs*)+0x6e4>
c001ea84:	80 fa df             	cmp    dl,0xdf
c001ea87:	0f 84 68 05 00 00    	je     c001eff5 <Vm::x87Handler(regs*)+0x731>
c001ea8d:	31 c0                	xor    eax,eax
c001ea8f:	80 fa db             	cmp    dl,0xdb
c001ea92:	0f 85 8d 08 00 00    	jne    c001f325 <Vm::x87Handler(regs*)+0xa61>
c001ea98:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ea9c:	80 fa 03             	cmp    dl,0x3
c001ea9f:	0f 85 70 06 00 00    	jne    c001f115 <Vm::x87Handler(regs*)+0x851>
c001eaa5:	e8 c8 fd ff ff       	call   c001e872 <Vm::fpuPop()>
c001eaaa:	55                   	push   ebp
c001eaab:	55                   	push   ebp
c001eaac:	52                   	push   edx
c001eaad:	50                   	push   eax
c001eaae:	e8 71 fa ff ff       	call   c001e524 <Vm::fpuFloatToLong(unsigned long long)>
c001eab3:	83 c4 10             	add    esp,0x10
c001eab6:	89 06                	mov    DWORD PTR [esi],eax
c001eab8:	eb 63                	jmp    c001eb1d <Vm::x87Handler(regs*)+0x259>
c001eaba:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001eabe:	84 d2                	test   dl,dl
c001eac0:	0f 85 e6 05 00 00    	jne    c001f0ac <Vm::x87Handler(regs*)+0x7e8>
c001eac6:	57                   	push   edi
c001eac7:	57                   	push   edi
c001eac8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001eacb:	ff 36                	push   DWORD PTR [esi]
c001eacd:	e8 49 fa ff ff       	call   c001e51b <Vm::fpu64ToInternal(unsigned long long)>
c001ead2:	5e                   	pop    esi
c001ead3:	5f                   	pop    edi
c001ead4:	52                   	push   edx
c001ead5:	50                   	push   eax
c001ead6:	e8 3a fd ff ff       	call   c001e815 <Vm::fpuPush(unsigned long long)>
c001eadb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001eadf:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001eae2:	e9 51 fe ff ff       	jmp    c001e938 <Vm::x87Handler(regs*)+0x74>
c001eae7:	80 fa 03             	cmp    dl,0x3
c001eaea:	0f 85 d7 06 00 00    	jne    c001f1c7 <Vm::x87Handler(regs*)+0x903>
c001eaf0:	57                   	push   edi
c001eaf1:	57                   	push   edi
c001eaf2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001eaf5:	ff 36                	push   DWORD PTR [esi]
c001eaf7:	e8 1f fa ff ff       	call   c001e51b <Vm::fpu64ToInternal(unsigned long long)>
c001eafc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001eb03:	89 c6                	mov    esi,eax
c001eb05:	89 d7                	mov    edi,edx
c001eb07:	e8 7b fc ff ff       	call   c001e787 <Vm::fpuGetReg(int)>
c001eb0c:	57                   	push   edi
c001eb0d:	56                   	push   esi
c001eb0e:	52                   	push   edx
c001eb0f:	50                   	push   eax
c001eb10:	e8 95 fb ff ff       	call   c001e6aa <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001eb15:	83 c4 20             	add    esp,0x20
c001eb18:	e8 55 fd ff ff       	call   c001e872 <Vm::fpuPop()>
c001eb1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eb21:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001eb24:	e9 12 fe ff ff       	jmp    c001e93b <Vm::x87Handler(regs*)+0x77>
c001eb29:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eb2d:	8d 50 40             	lea    edx,[eax+0x40]
c001eb30:	80 fa 07             	cmp    dl,0x7
c001eb33:	77 29                	ja     c001eb5e <Vm::x87Handler(regs*)+0x29a>
c001eb35:	83 ec 0c             	sub    esp,0xc
c001eb38:	2d c0 00 00 00       	sub    eax,0xc0
c001eb3d:	50                   	push   eax
c001eb3e:	e8 44 fc ff ff       	call   c001e787 <Vm::fpuGetReg(int)>
c001eb43:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001eb4a:	89 c6                	mov    esi,eax
c001eb4c:	89 d7                	mov    edi,edx
c001eb4e:	e8 34 fc ff ff       	call   c001e787 <Vm::fpuGetReg(int)>
c001eb53:	57                   	push   edi
c001eb54:	56                   	push   esi
c001eb55:	52                   	push   edx
c001eb56:	50                   	push   eax
c001eb57:	e8 a1 fb ff ff       	call   c001e6fd <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001eb5c:	eb 2f                	jmp    c001eb8d <Vm::x87Handler(regs*)+0x2c9>
c001eb5e:	8d 50 38             	lea    edx,[eax+0x38]
c001eb61:	80 fa 07             	cmp    dl,0x7
c001eb64:	77 2f                	ja     c001eb95 <Vm::x87Handler(regs*)+0x2d1>
c001eb66:	83 ec 0c             	sub    esp,0xc
c001eb69:	2d c8 00 00 00       	sub    eax,0xc8
c001eb6e:	50                   	push   eax
c001eb6f:	e8 13 fc ff ff       	call   c001e787 <Vm::fpuGetReg(int)>
c001eb74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001eb7b:	89 c6                	mov    esi,eax
c001eb7d:	89 d7                	mov    edi,edx
c001eb7f:	e8 03 fc ff ff       	call   c001e787 <Vm::fpuGetReg(int)>
c001eb84:	57                   	push   edi
c001eb85:	56                   	push   esi
c001eb86:	52                   	push   edx
c001eb87:	50                   	push   eax
c001eb88:	e8 a9 fb ff ff       	call   c001e736 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001eb8d:	83 c4 1c             	add    esp,0x1c
c001eb90:	e9 d8 fd ff ff       	jmp    c001e96d <Vm::x87Handler(regs*)+0xa9>
c001eb95:	8d 50 30             	lea    edx,[eax+0x30]
c001eb98:	80 fa 07             	cmp    dl,0x7
c001eb9b:	77 0d                	ja     c001ebaa <Vm::x87Handler(regs*)+0x2e6>
c001eb9d:	83 ec 0c             	sub    esp,0xc
c001eba0:	2d d0 00 00 00       	sub    eax,0xd0
c001eba5:	e9 99 03 00 00       	jmp    c001ef43 <Vm::x87Handler(regs*)+0x67f>
c001ebaa:	8d 50 28             	lea    edx,[eax+0x28]
c001ebad:	80 fa 07             	cmp    dl,0x7
c001ebb0:	77 0d                	ja     c001ebbf <Vm::x87Handler(regs*)+0x2fb>
c001ebb2:	83 ec 0c             	sub    esp,0xc
c001ebb5:	2d d8 00 00 00       	sub    eax,0xd8
c001ebba:	e9 c0 03 00 00       	jmp    c001ef7f <Vm::x87Handler(regs*)+0x6bb>
c001ebbf:	8d 50 20             	lea    edx,[eax+0x20]
c001ebc2:	80 fa 07             	cmp    dl,0x7
c001ebc5:	77 1b                	ja     c001ebe2 <Vm::x87Handler(regs*)+0x31e>
c001ebc7:	83 ec 0c             	sub    esp,0xc
c001ebca:	2d e0 00 00 00       	sub    eax,0xe0
c001ebcf:	50                   	push   eax
c001ebd0:	e8 b2 fb ff ff       	call   c001e787 <Vm::fpuGetReg(int)>
c001ebd5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ebdc:	89 c6                	mov    esi,eax
c001ebde:	89 d7                	mov    edi,edx
c001ebe0:	eb 22                	jmp    c001ec04 <Vm::x87Handler(regs*)+0x340>
c001ebe2:	8d 50 18             	lea    edx,[eax+0x18]
c001ebe5:	80 fa 07             	cmp    dl,0x7
c001ebe8:	77 2d                	ja     c001ec17 <Vm::x87Handler(regs*)+0x353>
c001ebea:	83 ec 0c             	sub    esp,0xc
c001ebed:	6a 00                	push   0x0
c001ebef:	e8 93 fb ff ff       	call   c001e787 <Vm::fpuGetReg(int)>
c001ebf4:	89 c6                	mov    esi,eax
c001ebf6:	89 d7                	mov    edi,edx
c001ebf8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ebfc:	2d e8 00 00 00       	sub    eax,0xe8
c001ec01:	89 04 24             	mov    DWORD PTR [esp],eax
c001ec04:	e8 7e fb ff ff       	call   c001e787 <Vm::fpuGetReg(int)>
c001ec09:	57                   	push   edi
c001ec0a:	56                   	push   esi
c001ec0b:	52                   	push   edx
c001ec0c:	50                   	push   eax
c001ec0d:	e8 15 fb ff ff       	call   c001e727 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ec12:	e9 76 ff ff ff       	jmp    c001eb8d <Vm::x87Handler(regs*)+0x2c9>
c001ec17:	8d 50 10             	lea    edx,[eax+0x10]
c001ec1a:	80 fa 07             	cmp    dl,0x7
c001ec1d:	77 1b                	ja     c001ec3a <Vm::x87Handler(regs*)+0x376>
c001ec1f:	83 ec 0c             	sub    esp,0xc
c001ec22:	2d f0 00 00 00       	sub    eax,0xf0
c001ec27:	50                   	push   eax
c001ec28:	e8 5a fb ff ff       	call   c001e787 <Vm::fpuGetReg(int)>
c001ec2d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ec34:	89 c6                	mov    esi,eax
c001ec36:	89 d7                	mov    edi,edx
c001ec38:	eb 22                	jmp    c001ec5c <Vm::x87Handler(regs*)+0x398>
c001ec3a:	3c f7                	cmp    al,0xf7
c001ec3c:	0f 86 d1 03 00 00    	jbe    c001f013 <Vm::x87Handler(regs*)+0x74f>
c001ec42:	83 ec 0c             	sub    esp,0xc
c001ec45:	6a 00                	push   0x0
c001ec47:	e8 3b fb ff ff       	call   c001e787 <Vm::fpuGetReg(int)>
c001ec4c:	89 c6                	mov    esi,eax
c001ec4e:	89 d7                	mov    edi,edx
c001ec50:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ec54:	2d f8 00 00 00       	sub    eax,0xf8
c001ec59:	89 04 24             	mov    DWORD PTR [esp],eax
c001ec5c:	e8 26 fb ff ff       	call   c001e787 <Vm::fpuGetReg(int)>
c001ec61:	57                   	push   edi
c001ec62:	56                   	push   esi
c001ec63:	52                   	push   edx
c001ec64:	50                   	push   eax
c001ec65:	e8 eb fa ff ff       	call   c001e755 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ec6a:	83 c4 1c             	add    esp,0x1c
c001ec6d:	52                   	push   edx
c001ec6e:	50                   	push   eax
c001ec6f:	6a 00                	push   0x0
c001ec71:	e9 51 02 00 00       	jmp    c001eec7 <Vm::x87Handler(regs*)+0x603>
c001ec76:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ec7a:	8d 50 40             	lea    edx,[eax+0x40]
c001ec7d:	80 fa 07             	cmp    dl,0x7
c001ec80:	77 37                	ja     c001ecb9 <Vm::x87Handler(regs*)+0x3f5>
c001ec82:	83 ec 0c             	sub    esp,0xc
c001ec85:	2d c0 00 00 00       	sub    eax,0xc0
c001ec8a:	50                   	push   eax
c001ec8b:	e8 f7 fa ff ff       	call   c001e787 <Vm::fpuGetReg(int)>
c001ec90:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ec97:	89 c6                	mov    esi,eax
c001ec99:	89 d7                	mov    edi,edx
c001ec9b:	e8 e7 fa ff ff       	call   c001e787 <Vm::fpuGetReg(int)>
c001eca0:	57                   	push   edi
c001eca1:	56                   	push   esi
c001eca2:	52                   	push   edx
c001eca3:	50                   	push   eax
c001eca4:	e8 54 fa ff ff       	call   c001e6fd <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001eca9:	83 c4 1c             	add    esp,0x1c
c001ecac:	52                   	push   edx
c001ecad:	50                   	push   eax
c001ecae:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ecb2:	2d c0 00 00 00       	sub    eax,0xc0
c001ecb7:	eb 3d                	jmp    c001ecf6 <Vm::x87Handler(regs*)+0x432>
c001ecb9:	8d 50 38             	lea    edx,[eax+0x38]
c001ecbc:	80 fa 07             	cmp    dl,0x7
c001ecbf:	77 3b                	ja     c001ecfc <Vm::x87Handler(regs*)+0x438>
c001ecc1:	83 ec 0c             	sub    esp,0xc
c001ecc4:	2d c8 00 00 00       	sub    eax,0xc8
c001ecc9:	50                   	push   eax
c001ecca:	e8 b8 fa ff ff       	call   c001e787 <Vm::fpuGetReg(int)>
c001eccf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ecd6:	89 c6                	mov    esi,eax
c001ecd8:	89 d7                	mov    edi,edx
c001ecda:	e8 a8 fa ff ff       	call   c001e787 <Vm::fpuGetReg(int)>
c001ecdf:	57                   	push   edi
c001ece0:	56                   	push   esi
c001ece1:	52                   	push   edx
c001ece2:	50                   	push   eax
c001ece3:	e8 4e fa ff ff       	call   c001e736 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ece8:	83 c4 1c             	add    esp,0x1c
c001eceb:	52                   	push   edx
c001ecec:	50                   	push   eax
c001eced:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ecf1:	2d c8 00 00 00       	sub    eax,0xc8
c001ecf6:	50                   	push   eax
c001ecf7:	e9 75 fc ff ff       	jmp    c001e971 <Vm::x87Handler(regs*)+0xad>
c001ecfc:	83 c0 18             	add    eax,0x18
c001ecff:	3c 07                	cmp    al,0x7
c001ed01:	0f 87 3b 04 00 00    	ja     c001f142 <Vm::x87Handler(regs*)+0x87e>
c001ed07:	83 ec 0c             	sub    esp,0xc
c001ed0a:	6a 00                	push   0x0
c001ed0c:	e8 76 fa ff ff       	call   c001e787 <Vm::fpuGetReg(int)>
c001ed11:	89 c6                	mov    esi,eax
c001ed13:	89 d7                	mov    edi,edx
c001ed15:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ed19:	2d e8 00 00 00       	sub    eax,0xe8
c001ed1e:	89 04 24             	mov    DWORD PTR [esp],eax
c001ed21:	e8 61 fa ff ff       	call   c001e787 <Vm::fpuGetReg(int)>
c001ed26:	57                   	push   edi
c001ed27:	56                   	push   esi
c001ed28:	52                   	push   edx
c001ed29:	50                   	push   eax
c001ed2a:	e8 f8 f9 ff ff       	call   c001e727 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ed2f:	83 c4 1c             	add    esp,0x1c
c001ed32:	52                   	push   edx
c001ed33:	50                   	push   eax
c001ed34:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ed38:	2d e8 00 00 00       	sub    eax,0xe8
c001ed3d:	eb b7                	jmp    c001ecf6 <Vm::x87Handler(regs*)+0x432>
c001ed3f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ed43:	8d 50 40             	lea    edx,[eax+0x40]
c001ed46:	80 fa 07             	cmp    dl,0x7
c001ed49:	77 3a                	ja     c001ed85 <Vm::x87Handler(regs*)+0x4c1>
c001ed4b:	83 ec 0c             	sub    esp,0xc
c001ed4e:	2d c0 00 00 00       	sub    eax,0xc0
c001ed53:	50                   	push   eax
c001ed54:	e8 2e fa ff ff       	call   c001e787 <Vm::fpuGetReg(int)>
c001ed59:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ed60:	89 c6                	mov    esi,eax
c001ed62:	89 d7                	mov    edi,edx
c001ed64:	e8 1e fa ff ff       	call   c001e787 <Vm::fpuGetReg(int)>
c001ed69:	57                   	push   edi
c001ed6a:	56                   	push   esi
c001ed6b:	52                   	push   edx
c001ed6c:	50                   	push   eax
c001ed6d:	e8 8b f9 ff ff       	call   c001e6fd <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ed72:	83 c4 1c             	add    esp,0x1c
c001ed75:	52                   	push   edx
c001ed76:	50                   	push   eax
c001ed77:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ed7b:	2d c0 00 00 00       	sub    eax,0xc0
c001ed80:	e9 9e 01 00 00       	jmp    c001ef23 <Vm::x87Handler(regs*)+0x65f>
c001ed85:	8d 50 20             	lea    edx,[eax+0x20]
c001ed88:	80 fa 07             	cmp    dl,0x7
c001ed8b:	77 3a                	ja     c001edc7 <Vm::x87Handler(regs*)+0x503>
c001ed8d:	83 ec 0c             	sub    esp,0xc
c001ed90:	2d e0 00 00 00       	sub    eax,0xe0
c001ed95:	50                   	push   eax
c001ed96:	e8 ec f9 ff ff       	call   c001e787 <Vm::fpuGetReg(int)>
c001ed9b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001eda2:	89 c6                	mov    esi,eax
c001eda4:	89 d7                	mov    edi,edx
c001eda6:	e8 dc f9 ff ff       	call   c001e787 <Vm::fpuGetReg(int)>
c001edab:	57                   	push   edi
c001edac:	56                   	push   esi
c001edad:	52                   	push   edx
c001edae:	50                   	push   eax
c001edaf:	e8 73 f9 ff ff       	call   c001e727 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001edb4:	83 c4 1c             	add    esp,0x1c
c001edb7:	52                   	push   edx
c001edb8:	50                   	push   eax
c001edb9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001edbd:	2d e0 00 00 00       	sub    eax,0xe0
c001edc2:	e9 5c 01 00 00       	jmp    c001ef23 <Vm::x87Handler(regs*)+0x65f>
c001edc7:	8d 50 18             	lea    edx,[eax+0x18]
c001edca:	80 fa 07             	cmp    dl,0x7
c001edcd:	77 3b                	ja     c001ee0a <Vm::x87Handler(regs*)+0x546>
c001edcf:	83 ec 0c             	sub    esp,0xc
c001edd2:	6a 00                	push   0x0
c001edd4:	e8 ae f9 ff ff       	call   c001e787 <Vm::fpuGetReg(int)>
c001edd9:	89 c6                	mov    esi,eax
c001eddb:	89 d7                	mov    edi,edx
c001eddd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ede1:	2d e8 00 00 00       	sub    eax,0xe8
c001ede6:	89 04 24             	mov    DWORD PTR [esp],eax
c001ede9:	e8 99 f9 ff ff       	call   c001e787 <Vm::fpuGetReg(int)>
c001edee:	57                   	push   edi
c001edef:	56                   	push   esi
c001edf0:	52                   	push   edx
c001edf1:	50                   	push   eax
c001edf2:	e8 30 f9 ff ff       	call   c001e727 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001edf7:	83 c4 1c             	add    esp,0x1c
c001edfa:	52                   	push   edx
c001edfb:	50                   	push   eax
c001edfc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee00:	2d e8 00 00 00       	sub    eax,0xe8
c001ee05:	e9 19 01 00 00       	jmp    c001ef23 <Vm::x87Handler(regs*)+0x65f>
c001ee0a:	8d 50 38             	lea    edx,[eax+0x38]
c001ee0d:	80 fa 07             	cmp    dl,0x7
c001ee10:	77 37                	ja     c001ee49 <Vm::x87Handler(regs*)+0x585>
c001ee12:	83 ec 0c             	sub    esp,0xc
c001ee15:	2d c8 00 00 00       	sub    eax,0xc8
c001ee1a:	50                   	push   eax
c001ee1b:	e8 67 f9 ff ff       	call   c001e787 <Vm::fpuGetReg(int)>
c001ee20:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ee27:	89 c6                	mov    esi,eax
c001ee29:	89 d7                	mov    edi,edx
c001ee2b:	e8 57 f9 ff ff       	call   c001e787 <Vm::fpuGetReg(int)>
c001ee30:	57                   	push   edi
c001ee31:	56                   	push   esi
c001ee32:	52                   	push   edx
c001ee33:	50                   	push   eax
c001ee34:	e8 fd f8 ff ff       	call   c001e736 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ee39:	83 c4 1c             	add    esp,0x1c
c001ee3c:	52                   	push   edx
c001ee3d:	50                   	push   eax
c001ee3e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee42:	2d c8 00 00 00       	sub    eax,0xc8
c001ee47:	eb 7d                	jmp    c001eec6 <Vm::x87Handler(regs*)+0x602>
c001ee49:	3c f7                	cmp    al,0xf7
c001ee4b:	76 38                	jbe    c001ee85 <Vm::x87Handler(regs*)+0x5c1>
c001ee4d:	83 ec 0c             	sub    esp,0xc
c001ee50:	6a 00                	push   0x0
c001ee52:	e8 30 f9 ff ff       	call   c001e787 <Vm::fpuGetReg(int)>
c001ee57:	89 c6                	mov    esi,eax
c001ee59:	89 d7                	mov    edi,edx
c001ee5b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee5f:	2d f8 00 00 00       	sub    eax,0xf8
c001ee64:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee67:	e8 1b f9 ff ff       	call   c001e787 <Vm::fpuGetReg(int)>
c001ee6c:	57                   	push   edi
c001ee6d:	56                   	push   esi
c001ee6e:	52                   	push   edx
c001ee6f:	50                   	push   eax
c001ee70:	e8 e0 f8 ff ff       	call   c001e755 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ee75:	83 c4 1c             	add    esp,0x1c
c001ee78:	52                   	push   edx
c001ee79:	50                   	push   eax
c001ee7a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee7e:	2d f8 00 00 00       	sub    eax,0xf8
c001ee83:	eb 41                	jmp    c001eec6 <Vm::x87Handler(regs*)+0x602>
c001ee85:	8d 50 10             	lea    edx,[eax+0x10]
c001ee88:	80 fa 07             	cmp    dl,0x7
c001ee8b:	0f 87 5a 01 00 00    	ja     c001efeb <Vm::x87Handler(regs*)+0x727>
c001ee91:	83 ec 0c             	sub    esp,0xc
c001ee94:	2d f0 00 00 00       	sub    eax,0xf0
c001ee99:	50                   	push   eax
c001ee9a:	e8 e8 f8 ff ff       	call   c001e787 <Vm::fpuGetReg(int)>
c001ee9f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001eea6:	89 c6                	mov    esi,eax
c001eea8:	89 d7                	mov    edi,edx
c001eeaa:	e8 d8 f8 ff ff       	call   c001e787 <Vm::fpuGetReg(int)>
c001eeaf:	57                   	push   edi
c001eeb0:	56                   	push   esi
c001eeb1:	52                   	push   edx
c001eeb2:	50                   	push   eax
c001eeb3:	e8 9d f8 ff ff       	call   c001e755 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001eeb8:	83 c4 1c             	add    esp,0x1c
c001eebb:	52                   	push   edx
c001eebc:	50                   	push   eax
c001eebd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eec1:	2d f0 00 00 00       	sub    eax,0xf0
c001eec6:	50                   	push   eax
c001eec7:	e8 fe f8 ff ff       	call   c001e7ca <Vm::fpuSetReg(int, unsigned long long)>
c001eecc:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001eed0:	e8 9d f9 ff ff       	call   c001e872 <Vm::fpuPop()>
c001eed5:	e9 5e fa ff ff       	jmp    c001e938 <Vm::x87Handler(regs*)+0x74>
c001eeda:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eede:	8d 50 30             	lea    edx,[eax+0x30]
c001eee1:	80 fa 07             	cmp    dl,0x7
c001eee4:	77 1d                	ja     c001ef03 <Vm::x87Handler(regs*)+0x63f>
c001eee6:	83 ec 0c             	sub    esp,0xc
c001eee9:	6a 00                	push   0x0
c001eeeb:	e8 97 f8 ff ff       	call   c001e787 <Vm::fpuGetReg(int)>
c001eef0:	83 c4 0c             	add    esp,0xc
c001eef3:	52                   	push   edx
c001eef4:	50                   	push   eax
c001eef5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eef9:	2d d0 00 00 00       	sub    eax,0xd0
c001eefe:	e9 f3 fd ff ff       	jmp    c001ecf6 <Vm::x87Handler(regs*)+0x432>
c001ef03:	8d 50 28             	lea    edx,[eax+0x28]
c001ef06:	80 fa 07             	cmp    dl,0x7
c001ef09:	77 28                	ja     c001ef33 <Vm::x87Handler(regs*)+0x66f>
c001ef0b:	83 ec 0c             	sub    esp,0xc
c001ef0e:	6a 00                	push   0x0
c001ef10:	e8 72 f8 ff ff       	call   c001e787 <Vm::fpuGetReg(int)>
c001ef15:	83 c4 0c             	add    esp,0xc
c001ef18:	52                   	push   edx
c001ef19:	50                   	push   eax
c001ef1a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ef1e:	2d d8 00 00 00       	sub    eax,0xd8
c001ef23:	50                   	push   eax
c001ef24:	e8 a1 f8 ff ff       	call   c001e7ca <Vm::fpuSetReg(int, unsigned long long)>
c001ef29:	e8 44 f9 ff ff       	call   c001e872 <Vm::fpuPop()>
c001ef2e:	e9 01 fa ff ff       	jmp    c001e934 <Vm::x87Handler(regs*)+0x70>
c001ef33:	8d 50 20             	lea    edx,[eax+0x20]
c001ef36:	80 fa 07             	cmp    dl,0x7
c001ef39:	77 30                	ja     c001ef6b <Vm::x87Handler(regs*)+0x6a7>
c001ef3b:	83 ec 0c             	sub    esp,0xc
c001ef3e:	2d e0 00 00 00       	sub    eax,0xe0
c001ef43:	50                   	push   eax
c001ef44:	e8 3e f8 ff ff       	call   c001e787 <Vm::fpuGetReg(int)>
c001ef49:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ef50:	89 c6                	mov    esi,eax
c001ef52:	89 d7                	mov    edi,edx
c001ef54:	e8 2e f8 ff ff       	call   c001e787 <Vm::fpuGetReg(int)>
c001ef59:	57                   	push   edi
c001ef5a:	56                   	push   esi
c001ef5b:	52                   	push   edx
c001ef5c:	50                   	push   eax
c001ef5d:	e8 48 f7 ff ff       	call   c001e6aa <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ef62:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ef66:	e9 54 02 00 00       	jmp    c001f1bf <Vm::x87Handler(regs*)+0x8fb>
c001ef6b:	8d 50 18             	lea    edx,[eax+0x18]
c001ef6e:	80 fa 07             	cmp    dl,0x7
c001ef71:	0f 87 43 fb ff ff    	ja     c001eaba <Vm::x87Handler(regs*)+0x1f6>
c001ef77:	83 ec 0c             	sub    esp,0xc
c001ef7a:	2d e8 00 00 00       	sub    eax,0xe8
c001ef7f:	50                   	push   eax
c001ef80:	e8 02 f8 ff ff       	call   c001e787 <Vm::fpuGetReg(int)>
c001ef85:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ef8c:	89 c6                	mov    esi,eax
c001ef8e:	89 d7                	mov    edi,edx
c001ef90:	e8 f2 f7 ff ff       	call   c001e787 <Vm::fpuGetReg(int)>
c001ef95:	57                   	push   edi
c001ef96:	56                   	push   esi
c001ef97:	52                   	push   edx
c001ef98:	50                   	push   eax
c001ef99:	e8 0c f7 ff ff       	call   c001e6aa <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ef9e:	83 c4 20             	add    esp,0x20
c001efa1:	e8 cc f8 ff ff       	call   c001e872 <Vm::fpuPop()>
c001efa6:	eb 62                	jmp    c001f00a <Vm::x87Handler(regs*)+0x746>
c001efa8:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001efac:	0f 85 0f 01 00 00    	jne    c001f0c1 <Vm::x87Handler(regs*)+0x7fd>
c001efb2:	83 ec 0c             	sub    esp,0xc
c001efb5:	6a 01                	push   0x1
c001efb7:	e8 cb f7 ff ff       	call   c001e787 <Vm::fpuGetReg(int)>
c001efbc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001efc3:	89 c6                	mov    esi,eax
c001efc5:	89 d7                	mov    edi,edx
c001efc7:	e8 bb f7 ff ff       	call   c001e787 <Vm::fpuGetReg(int)>
c001efcc:	57                   	push   edi
c001efcd:	56                   	push   esi
c001efce:	52                   	push   edx
c001efcf:	50                   	push   eax
c001efd0:	e8 d5 f6 ff ff       	call   c001e6aa <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001efd5:	83 c4 20             	add    esp,0x20
c001efd8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001efdc:	e8 91 f8 ff ff       	call   c001e872 <Vm::fpuPop()>
c001efe1:	e8 8c f8 ff ff       	call   c001e872 <Vm::fpuPop()>
c001efe6:	e9 50 f9 ff ff       	jmp    c001e93b <Vm::x87Handler(regs*)+0x77>
c001efeb:	3c d9                	cmp    al,0xd9
c001efed:	0f 85 b5 02 00 00    	jne    c001f2a8 <Vm::x87Handler(regs*)+0x9e4>
c001eff3:	eb bd                	jmp    c001efb2 <Vm::x87Handler(regs*)+0x6ee>
c001eff5:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001eff9:	0f 85 ea 02 00 00    	jne    c001f2e9 <Vm::x87Handler(regs*)+0xa25>
c001efff:	0f b7 05 00 de 02 c0 	movzx  eax,WORD PTR ds:0xc002de00
c001f006:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001f00a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f00e:	e9 28 f9 ff ff       	jmp    c001e93b <Vm::x87Handler(regs*)+0x77>
c001f013:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f017:	84 d2                	test   dl,dl
c001f019:	75 0f                	jne    c001f02a <Vm::x87Handler(regs*)+0x766>
c001f01b:	83 ec 0c             	sub    esp,0xc
c001f01e:	ff 36                	push   DWORD PTR [esi]
c001f020:	e8 b1 f4 ff ff       	call   c001e4d6 <Vm::fpu32ToInternal(unsigned int)>
c001f025:	e9 2c 01 00 00       	jmp    c001f156 <Vm::x87Handler(regs*)+0x892>
c001f02a:	80 fa 01             	cmp    dl,0x1
c001f02d:	75 0f                	jne    c001f03e <Vm::x87Handler(regs*)+0x77a>
c001f02f:	83 ec 0c             	sub    esp,0xc
c001f032:	ff 36                	push   DWORD PTR [esi]
c001f034:	e8 9d f4 ff ff       	call   c001e4d6 <Vm::fpu32ToInternal(unsigned int)>
c001f039:	e9 81 02 00 00       	jmp    c001f2bf <Vm::x87Handler(regs*)+0x9fb>
c001f03e:	80 fa 04             	cmp    dl,0x4
c001f041:	75 0f                	jne    c001f052 <Vm::x87Handler(regs*)+0x78e>
c001f043:	83 ec 0c             	sub    esp,0xc
c001f046:	ff 36                	push   DWORD PTR [esi]
c001f048:	e8 89 f4 ff ff       	call   c001e4d6 <Vm::fpu32ToInternal(unsigned int)>
c001f04d:	e9 86 01 00 00       	jmp    c001f1d8 <Vm::x87Handler(regs*)+0x914>
c001f052:	80 fa 05             	cmp    dl,0x5
c001f055:	75 1b                	jne    c001f072 <Vm::x87Handler(regs*)+0x7ae>
c001f057:	83 ec 0c             	sub    esp,0xc
c001f05a:	6a 00                	push   0x0
c001f05c:	e8 26 f7 ff ff       	call   c001e787 <Vm::fpuGetReg(int)>
c001f061:	89 c7                	mov    edi,eax
c001f063:	89 d5                	mov    ebp,edx
c001f065:	58                   	pop    eax
c001f066:	ff 36                	push   DWORD PTR [esi]
c001f068:	e8 69 f4 ff ff       	call   c001e4d6 <Vm::fpu32ToInternal(unsigned int)>
c001f06d:	e9 a3 01 00 00       	jmp    c001f215 <Vm::x87Handler(regs*)+0x951>
c001f072:	80 fa 06             	cmp    dl,0x6
c001f075:	75 0f                	jne    c001f086 <Vm::x87Handler(regs*)+0x7c2>
c001f077:	83 ec 0c             	sub    esp,0xc
c001f07a:	ff 36                	push   DWORD PTR [esi]
c001f07c:	e8 55 f4 ff ff       	call   c001e4d6 <Vm::fpu32ToInternal(unsigned int)>
c001f081:	e9 ae 01 00 00       	jmp    c001f234 <Vm::x87Handler(regs*)+0x970>
c001f086:	31 c0                	xor    eax,eax
c001f088:	80 fa 07             	cmp    dl,0x7
c001f08b:	0f 85 94 02 00 00    	jne    c001f325 <Vm::x87Handler(regs*)+0xa61>
c001f091:	83 ec 0c             	sub    esp,0xc
c001f094:	6a 00                	push   0x0
c001f096:	e8 ec f6 ff ff       	call   c001e787 <Vm::fpuGetReg(int)>
c001f09b:	89 c7                	mov    edi,eax
c001f09d:	89 d5                	mov    ebp,edx
c001f09f:	58                   	pop    eax
c001f0a0:	ff 36                	push   DWORD PTR [esi]
c001f0a2:	e8 2f f4 ff ff       	call   c001e4d6 <Vm::fpu32ToInternal(unsigned int)>
c001f0a7:	e9 cb 01 00 00       	jmp    c001f277 <Vm::x87Handler(regs*)+0x9b3>
c001f0ac:	80 fa 03             	cmp    dl,0x3
c001f0af:	0f 85 d3 01 00 00    	jne    c001f288 <Vm::x87Handler(regs*)+0x9c4>
c001f0b5:	e8 b8 f7 ff ff       	call   c001e872 <Vm::fpuPop()>
c001f0ba:	51                   	push   ecx
c001f0bb:	51                   	push   ecx
c001f0bc:	e9 de 01 00 00       	jmp    c001f29f <Vm::x87Handler(regs*)+0x9db>
c001f0c1:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f0c5:	80 fa 01             	cmp    dl,0x1
c001f0c8:	75 09                	jne    c001f0d3 <Vm::x87Handler(regs*)+0x80f>
c001f0ca:	57                   	push   edi
c001f0cb:	57                   	push   edi
c001f0cc:	8b 06                	mov    eax,DWORD PTR [esi]
c001f0ce:	e9 e3 01 00 00       	jmp    c001f2b6 <Vm::x87Handler(regs*)+0x9f2>
c001f0d3:	80 fa 04             	cmp    dl,0x4
c001f0d6:	75 12                	jne    c001f0ea <Vm::x87Handler(regs*)+0x826>
c001f0d8:	31 d2                	xor    edx,edx
c001f0da:	51                   	push   ecx
c001f0db:	51                   	push   ecx
c001f0dc:	8b 06                	mov    eax,DWORD PTR [esi]
c001f0de:	52                   	push   edx
c001f0df:	50                   	push   eax
c001f0e0:	e8 d0 f4 ff ff       	call   c001e5b5 <Vm::fpuLongToFloat(long long)>
c001f0e5:	e9 ee 00 00 00       	jmp    c001f1d8 <Vm::x87Handler(regs*)+0x914>
c001f0ea:	31 c0                	xor    eax,eax
c001f0ec:	80 fa 07             	cmp    dl,0x7
c001f0ef:	0f 85 30 02 00 00    	jne    c001f325 <Vm::x87Handler(regs*)+0xa61>
c001f0f5:	83 ec 0c             	sub    esp,0xc
c001f0f8:	6a 00                	push   0x0
c001f0fa:	e8 88 f6 ff ff       	call   c001e787 <Vm::fpuGetReg(int)>
c001f0ff:	89 c7                	mov    edi,eax
c001f101:	89 d5                	mov    ebp,edx
c001f103:	58                   	pop    eax
c001f104:	8b 06                	mov    eax,DWORD PTR [esi]
c001f106:	5a                   	pop    edx
c001f107:	31 d2                	xor    edx,edx
c001f109:	52                   	push   edx
c001f10a:	50                   	push   eax
c001f10b:	e8 a5 f4 ff ff       	call   c001e5b5 <Vm::fpuLongToFloat(long long)>
c001f110:	e9 62 01 00 00       	jmp    c001f277 <Vm::x87Handler(regs*)+0x9b3>
c001f115:	84 d2                	test   dl,dl
c001f117:	75 0d                	jne    c001f126 <Vm::x87Handler(regs*)+0x862>
c001f119:	31 d2                	xor    edx,edx
c001f11b:	55                   	push   ebp
c001f11c:	55                   	push   ebp
c001f11d:	8b 06                	mov    eax,DWORD PTR [esi]
c001f11f:	52                   	push   edx
c001f120:	50                   	push   eax
c001f121:	e9 d3 01 00 00       	jmp    c001f2f9 <Vm::x87Handler(regs*)+0xa35>
c001f126:	31 c0                	xor    eax,eax
c001f128:	80 fa 02             	cmp    dl,0x2
c001f12b:	0f 85 f4 01 00 00    	jne    c001f325 <Vm::x87Handler(regs*)+0xa61>
c001f131:	83 ec 0c             	sub    esp,0xc
c001f134:	6a 00                	push   0x0
c001f136:	e8 4c f6 ff ff       	call   c001e787 <Vm::fpuGetReg(int)>
c001f13b:	59                   	pop    ecx
c001f13c:	5f                   	pop    edi
c001f13d:	e9 6a f9 ff ff       	jmp    c001eaac <Vm::x87Handler(regs*)+0x1e8>
c001f142:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f146:	84 d2                	test   dl,dl
c001f148:	75 2a                	jne    c001f174 <Vm::x87Handler(regs*)+0x8b0>
c001f14a:	50                   	push   eax
c001f14b:	50                   	push   eax
c001f14c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f14f:	ff 36                	push   DWORD PTR [esi]
c001f151:	e8 c5 f3 ff ff       	call   c001e51b <Vm::fpu64ToInternal(unsigned long long)>
c001f156:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f15d:	89 c6                	mov    esi,eax
c001f15f:	89 d7                	mov    edi,edx
c001f161:	e8 21 f6 ff ff       	call   c001e787 <Vm::fpuGetReg(int)>
c001f166:	57                   	push   edi
c001f167:	56                   	push   esi
c001f168:	52                   	push   edx
c001f169:	50                   	push   eax
c001f16a:	e8 8e f5 ff ff       	call   c001e6fd <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f16f:	e9 64 01 00 00       	jmp    c001f2d8 <Vm::x87Handler(regs*)+0xa14>
c001f174:	80 fa 01             	cmp    dl,0x1
c001f177:	75 11                	jne    c001f18a <Vm::x87Handler(regs*)+0x8c6>
c001f179:	50                   	push   eax
c001f17a:	50                   	push   eax
c001f17b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f17e:	ff 36                	push   DWORD PTR [esi]
c001f180:	e8 96 f3 ff ff       	call   c001e51b <Vm::fpu64ToInternal(unsigned long long)>
c001f185:	e9 35 01 00 00       	jmp    c001f2bf <Vm::x87Handler(regs*)+0x9fb>
c001f18a:	80 fa 02             	cmp    dl,0x2
c001f18d:	0f 85 54 f9 ff ff    	jne    c001eae7 <Vm::x87Handler(regs*)+0x223>
c001f193:	55                   	push   ebp
c001f194:	55                   	push   ebp
c001f195:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f198:	ff 36                	push   DWORD PTR [esi]
c001f19a:	e8 7c f3 ff ff       	call   c001e51b <Vm::fpu64ToInternal(unsigned long long)>
c001f19f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f1a6:	89 c6                	mov    esi,eax
c001f1a8:	89 d7                	mov    edi,edx
c001f1aa:	e8 d8 f5 ff ff       	call   c001e787 <Vm::fpuGetReg(int)>
c001f1af:	57                   	push   edi
c001f1b0:	56                   	push   esi
c001f1b1:	52                   	push   edx
c001f1b2:	50                   	push   eax
c001f1b3:	e8 f2 f4 ff ff       	call   c001e6aa <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f1b8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001f1bc:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f1bf:	83 c4 20             	add    esp,0x20
c001f1c2:	e9 74 f7 ff ff       	jmp    c001e93b <Vm::x87Handler(regs*)+0x77>
c001f1c7:	80 fa 04             	cmp    dl,0x4
c001f1ca:	75 2a                	jne    c001f1f6 <Vm::x87Handler(regs*)+0x932>
c001f1cc:	51                   	push   ecx
c001f1cd:	51                   	push   ecx
c001f1ce:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f1d1:	ff 36                	push   DWORD PTR [esi]
c001f1d3:	e8 43 f3 ff ff       	call   c001e51b <Vm::fpu64ToInternal(unsigned long long)>
c001f1d8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f1df:	89 c6                	mov    esi,eax
c001f1e1:	89 d7                	mov    edi,edx
c001f1e3:	e8 9f f5 ff ff       	call   c001e787 <Vm::fpuGetReg(int)>
c001f1e8:	57                   	push   edi
c001f1e9:	56                   	push   esi
c001f1ea:	52                   	push   edx
c001f1eb:	50                   	push   eax
c001f1ec:	e8 36 f5 ff ff       	call   c001e727 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f1f1:	e9 e2 00 00 00       	jmp    c001f2d8 <Vm::x87Handler(regs*)+0xa14>
c001f1f6:	80 fa 05             	cmp    dl,0x5
c001f1f9:	75 28                	jne    c001f223 <Vm::x87Handler(regs*)+0x95f>
c001f1fb:	83 ec 0c             	sub    esp,0xc
c001f1fe:	6a 00                	push   0x0
c001f200:	e8 82 f5 ff ff       	call   c001e787 <Vm::fpuGetReg(int)>
c001f205:	89 c7                	mov    edi,eax
c001f207:	89 d5                	mov    ebp,edx
c001f209:	58                   	pop    eax
c001f20a:	5a                   	pop    edx
c001f20b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f20e:	ff 36                	push   DWORD PTR [esi]
c001f210:	e8 06 f3 ff ff       	call   c001e51b <Vm::fpu64ToInternal(unsigned long long)>
c001f215:	83 c4 10             	add    esp,0x10
c001f218:	55                   	push   ebp
c001f219:	57                   	push   edi
c001f21a:	52                   	push   edx
c001f21b:	50                   	push   eax
c001f21c:	e8 06 f5 ff ff       	call   c001e727 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f221:	eb 60                	jmp    c001f283 <Vm::x87Handler(regs*)+0x9bf>
c001f223:	80 fa 06             	cmp    dl,0x6
c001f226:	75 2a                	jne    c001f252 <Vm::x87Handler(regs*)+0x98e>
c001f228:	51                   	push   ecx
c001f229:	51                   	push   ecx
c001f22a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f22d:	ff 36                	push   DWORD PTR [esi]
c001f22f:	e8 e7 f2 ff ff       	call   c001e51b <Vm::fpu64ToInternal(unsigned long long)>
c001f234:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f23b:	89 c6                	mov    esi,eax
c001f23d:	89 d7                	mov    edi,edx
c001f23f:	e8 43 f5 ff ff       	call   c001e787 <Vm::fpuGetReg(int)>
c001f244:	57                   	push   edi
c001f245:	56                   	push   esi
c001f246:	52                   	push   edx
c001f247:	50                   	push   eax
c001f248:	e8 08 f5 ff ff       	call   c001e755 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f24d:	e9 86 00 00 00       	jmp    c001f2d8 <Vm::x87Handler(regs*)+0xa14>
c001f252:	31 c0                	xor    eax,eax
c001f254:	80 fa 07             	cmp    dl,0x7
c001f257:	0f 85 c8 00 00 00    	jne    c001f325 <Vm::x87Handler(regs*)+0xa61>
c001f25d:	83 ec 0c             	sub    esp,0xc
c001f260:	6a 00                	push   0x0
c001f262:	e8 20 f5 ff ff       	call   c001e787 <Vm::fpuGetReg(int)>
c001f267:	89 c7                	mov    edi,eax
c001f269:	89 d5                	mov    ebp,edx
c001f26b:	58                   	pop    eax
c001f26c:	5a                   	pop    edx
c001f26d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f270:	ff 36                	push   DWORD PTR [esi]
c001f272:	e8 a4 f2 ff ff       	call   c001e51b <Vm::fpu64ToInternal(unsigned long long)>
c001f277:	83 c4 10             	add    esp,0x10
c001f27a:	55                   	push   ebp
c001f27b:	57                   	push   edi
c001f27c:	52                   	push   edx
c001f27d:	50                   	push   eax
c001f27e:	e8 d2 f4 ff ff       	call   c001e755 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f283:	83 c4 0c             	add    esp,0xc
c001f286:	eb 53                	jmp    c001f2db <Vm::x87Handler(regs*)+0xa17>
c001f288:	31 c0                	xor    eax,eax
c001f28a:	80 fa 02             	cmp    dl,0x2
c001f28d:	0f 85 92 00 00 00    	jne    c001f325 <Vm::x87Handler(regs*)+0xa61>
c001f293:	83 ec 0c             	sub    esp,0xc
c001f296:	6a 00                	push   0x0
c001f298:	e8 ea f4 ff ff       	call   c001e787 <Vm::fpuGetReg(int)>
c001f29d:	59                   	pop    ecx
c001f29e:	5f                   	pop    edi
c001f29f:	52                   	push   edx
c001f2a0:	50                   	push   eax
c001f2a1:	e8 27 f2 ff ff       	call   c001e4cd <Vm::fpuInternalTo64(unsigned long long)>
c001f2a6:	eb 70                	jmp    c001f318 <Vm::x87Handler(regs*)+0xa54>
c001f2a8:	31 c0                	xor    eax,eax
c001f2aa:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001f2af:	75 74                	jne    c001f325 <Vm::x87Handler(regs*)+0xa61>
c001f2b1:	50                   	push   eax
c001f2b2:	50                   	push   eax
c001f2b3:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f2b6:	31 d2                	xor    edx,edx
c001f2b8:	52                   	push   edx
c001f2b9:	50                   	push   eax
c001f2ba:	e8 f6 f2 ff ff       	call   c001e5b5 <Vm::fpuLongToFloat(long long)>
c001f2bf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f2c6:	89 c6                	mov    esi,eax
c001f2c8:	89 d7                	mov    edi,edx
c001f2ca:	e8 b8 f4 ff ff       	call   c001e787 <Vm::fpuGetReg(int)>
c001f2cf:	57                   	push   edi
c001f2d0:	56                   	push   esi
c001f2d1:	52                   	push   edx
c001f2d2:	50                   	push   eax
c001f2d3:	e8 5e f4 ff ff       	call   c001e736 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f2d8:	83 c4 1c             	add    esp,0x1c
c001f2db:	52                   	push   edx
c001f2dc:	50                   	push   eax
c001f2dd:	6a 00                	push   0x0
c001f2df:	e8 e6 f4 ff ff       	call   c001e7ca <Vm::fpuSetReg(int, unsigned long long)>
c001f2e4:	e9 f2 f7 ff ff       	jmp    c001eadb <Vm::x87Handler(regs*)+0x217>
c001f2e9:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f2ed:	80 fa 05             	cmp    dl,0x5
c001f2f0:	75 11                	jne    c001f303 <Vm::x87Handler(regs*)+0xa3f>
c001f2f2:	55                   	push   ebp
c001f2f3:	55                   	push   ebp
c001f2f4:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f2f7:	ff 36                	push   DWORD PTR [esi]
c001f2f9:	e8 81 f2 ff ff       	call   c001e57f <Vm::fpuULongToFloat(unsigned long long)>
c001f2fe:	e9 cf f7 ff ff       	jmp    c001ead2 <Vm::x87Handler(regs*)+0x20e>
c001f303:	31 c0                	xor    eax,eax
c001f305:	80 fa 07             	cmp    dl,0x7
c001f308:	75 1b                	jne    c001f325 <Vm::x87Handler(regs*)+0xa61>
c001f30a:	e8 63 f5 ff ff       	call   c001e872 <Vm::fpuPop()>
c001f30f:	51                   	push   ecx
c001f310:	51                   	push   ecx
c001f311:	52                   	push   edx
c001f312:	50                   	push   eax
c001f313:	e8 0c f2 ff ff       	call   c001e524 <Vm::fpuFloatToLong(unsigned long long)>
c001f318:	83 c4 10             	add    esp,0x10
c001f31b:	89 06                	mov    DWORD PTR [esi],eax
c001f31d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001f320:	e9 f8 f7 ff ff       	jmp    c001eb1d <Vm::x87Handler(regs*)+0x259>
c001f325:	83 c4 1c             	add    esp,0x1c
c001f328:	5b                   	pop    ebx
c001f329:	5e                   	pop    esi
c001f32a:	5f                   	pop    edi
c001f32b:	5d                   	pop    ebp
c001f32c:	c3                   	ret    

c001f32d <__static_initialization_and_destruction_0(int, int)>:
c001f32d:	83 ec 0c             	sub    esp,0xc
c001f330:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001f335:	75 1a                	jne    c001f351 <__static_initialization_and_destruction_0(int, int)+0x24>
c001f337:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001f33f:	75 10                	jne    c001f351 <__static_initialization_and_destruction_0(int, int)+0x24>
c001f341:	83 ec 0c             	sub    esp,0xc
c001f344:	68 00 de 02 c0       	push   0xc002de00
c001f349:	e8 c2 82 00 00       	call   c0027610 <Vm::_FPUState::_FPUState()>
c001f34e:	83 c4 10             	add    esp,0x10
c001f351:	90                   	nop
c001f352:	83 c4 0c             	add    esp,0xc
c001f355:	c3                   	ret    

c001f356 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001f356:	83 ec 0c             	sub    esp,0xc
c001f359:	83 ec 08             	sub    esp,0x8
c001f35c:	68 ff ff 00 00       	push   0xffff
c001f361:	6a 01                	push   0x1
c001f363:	e8 c5 ff ff ff       	call   c001f32d <__static_initialization_and_destruction_0(int, int)>
c001f368:	83 c4 10             	add    esp,0x10
c001f36b:	83 c4 0c             	add    esp,0xc
c001f36e:	c3                   	ret    
c001f36f:	90                   	nop

c001f370 <FAT::getName()>:
c001f370:	b8 8c ac 02 c0       	mov    eax,0xc002ac8c
c001f375:	c3                   	ret    

c001f376 <FAT::tell(void*, unsigned long long*)>:
c001f376:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001f37b:	75 06                	jne    c001f383 <FAT::tell(void*, unsigned long long*)+0xd>
c001f37d:	b8 04 00 00 00       	mov    eax,0x4
c001f382:	c3                   	ret    
c001f383:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f388:	75 06                	jne    c001f390 <FAT::tell(void*, unsigned long long*)+0x1a>
c001f38a:	b8 04 00 00 00       	mov    eax,0x4
c001f38f:	c3                   	ret    
c001f390:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f394:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001f397:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001f39a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f39e:	89 01                	mov    DWORD PTR [ecx],eax
c001f3a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001f3a3:	b8 00 00 00 00       	mov    eax,0x0
c001f3a8:	c3                   	ret    
c001f3a9:	90                   	nop

c001f3aa <FAT::stat(void*, unsigned long long*)>:
c001f3aa:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001f3af:	75 06                	jne    c001f3b7 <FAT::stat(void*, unsigned long long*)+0xd>
c001f3b1:	b8 04 00 00 00       	mov    eax,0x4
c001f3b6:	c3                   	ret    
c001f3b7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f3bc:	75 06                	jne    c001f3c4 <FAT::stat(void*, unsigned long long*)+0x1a>
c001f3be:	b8 04 00 00 00       	mov    eax,0x4
c001f3c3:	c3                   	ret    
c001f3c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f3c8:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001f3cb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f3ce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f3d2:	89 01                	mov    DWORD PTR [ecx],eax
c001f3d4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001f3d7:	b8 00 00 00 00       	mov    eax,0x0
c001f3dc:	c3                   	ret    
c001f3dd:	90                   	nop

c001f3de <FAT::~FAT()>:
c001f3de:	83 ec 0c             	sub    esp,0xc
c001f3e1:	ba 10 ad 02 c0       	mov    edx,0xc002ad10
c001f3e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3ea:	89 10                	mov    DWORD PTR [eax],edx
c001f3ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3f0:	83 ec 0c             	sub    esp,0xc
c001f3f3:	50                   	push   eax
c001f3f4:	e8 b7 35 ff ff       	call   c00129b0 <Filesystem::~Filesystem()>
c001f3f9:	83 c4 10             	add    esp,0x10
c001f3fc:	90                   	nop
c001f3fd:	83 c4 0c             	add    esp,0xc
c001f400:	c3                   	ret    
c001f401:	90                   	nop

c001f402 <FAT::~FAT()>:
c001f402:	83 ec 0c             	sub    esp,0xc
c001f405:	83 ec 0c             	sub    esp,0xc
c001f408:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f40c:	e8 cd ff ff ff       	call   c001f3de <FAT::~FAT()>
c001f411:	83 c4 10             	add    esp,0x10
c001f414:	83 ec 08             	sub    esp,0x8
c001f417:	6a 08                	push   0x8
c001f419:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f41d:	e8 85 31 ff ff       	call   c00125a7 <operator delete(void*, unsigned long)>
c001f422:	83 c4 10             	add    esp,0x10
c001f425:	83 c4 0c             	add    esp,0xc
c001f428:	c3                   	ret    
c001f429:	90                   	nop

c001f42a <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001f42a:	83 ec 1c             	sub    esp,0x1c
c001f42d:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001f434:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001f439:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f43d:	8b 04 85 80 de 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2180]
c001f444:	83 f8 ff             	cmp    eax,0xffffffff
c001f447:	75 34                	jne    c001f47d <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001f449:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f44d:	88 c2                	mov    dl,al
c001f44f:	a1 60 de 02 c0       	mov    eax,ds:0xc002de60
c001f454:	01 d0                	add    eax,edx
c001f456:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f45a:	8b 15 60 de 02 c0    	mov    edx,DWORD PTR ds:0xc002de60
c001f460:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f464:	89 14 85 80 de 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2180],edx
c001f46b:	a1 60 de 02 c0       	mov    eax,ds:0xc002de60
c001f470:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001f474:	89 14 85 00 df 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2100],edx
c001f47b:	eb 17                	jmp    c001f494 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001f47d:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f481:	88 c2                	mov    dl,al
c001f483:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f487:	8b 04 85 80 de 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2180]
c001f48e:	01 d0                	add    eax,edx
c001f490:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f494:	83 ec 04             	sub    esp,0x4
c001f497:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001f49b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001f49f:	8d 44 24 15          	lea    eax,[esp+0x15]
c001f4a3:	50                   	push   eax
c001f4a4:	e8 3f 76 fe ff       	call   c0006ae8 <f_getlabel>
c001f4a9:	83 c4 10             	add    esp,0x10
c001f4ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f4b0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f4b5:	75 07                	jne    c001f4be <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001f4b7:	b8 00 00 00 00       	mov    eax,0x0
c001f4bc:	eb 05                	jmp    c001f4c3 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001f4be:	b8 01 00 00 00       	mov    eax,0x1
c001f4c3:	83 c4 1c             	add    esp,0x1c
c001f4c6:	c3                   	ret    
c001f4c7:	90                   	nop

c001f4c8 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001f4c8:	57                   	push   edi
c001f4c9:	83 ec 58             	sub    esp,0x58
c001f4cc:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001f4d4:	8d 54 24 10          	lea    edx,[esp+0x10]
c001f4d8:	b9 0f 00 00 00       	mov    ecx,0xf
c001f4dd:	b8 00 00 00 00       	mov    eax,0x0
c001f4e2:	fc                   	cld    
c001f4e3:	89 d7                	mov    edi,edx
c001f4e5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f4e7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f4eb:	8b 04 85 80 de 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2180]
c001f4f2:	83 f8 ff             	cmp    eax,0xffffffff
c001f4f5:	75 34                	jne    c001f52b <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001f4f7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001f4fb:	88 c2                	mov    dl,al
c001f4fd:	a1 60 de 02 c0       	mov    eax,ds:0xc002de60
c001f502:	01 d0                	add    eax,edx
c001f504:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001f508:	8b 15 60 de 02 c0    	mov    edx,DWORD PTR ds:0xc002de60
c001f50e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f512:	89 14 85 80 de 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2180],edx
c001f519:	a1 60 de 02 c0       	mov    eax,ds:0xc002de60
c001f51e:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001f522:	89 14 85 00 df 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2100],edx
c001f529:	eb 17                	jmp    c001f542 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001f52b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001f52f:	88 c2                	mov    dl,al
c001f531:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f535:	8b 04 85 80 de 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2180]
c001f53c:	01 d0                	add    eax,edx
c001f53e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001f542:	83 ec 08             	sub    esp,0x8
c001f545:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001f549:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f54d:	50                   	push   eax
c001f54e:	e8 8e 12 fe ff       	call   c00007e1 <strcat>
c001f553:	83 c4 10             	add    esp,0x10
c001f556:	83 ec 0c             	sub    esp,0xc
c001f559:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f55d:	50                   	push   eax
c001f55e:	e8 73 77 fe ff       	call   c0006cd6 <f_setlabel>
c001f563:	83 c4 10             	add    esp,0x10
c001f566:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001f56a:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001f56f:	75 07                	jne    c001f578 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001f571:	b8 00 00 00 00       	mov    eax,0x0
c001f576:	eb 05                	jmp    c001f57d <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001f578:	b8 01 00 00 00       	mov    eax,0x1
c001f57d:	83 c4 58             	add    esp,0x58
c001f580:	5f                   	pop    edi
c001f581:	c3                   	ret    

c001f582 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001f582:	83 ec 2c             	sub    esp,0x2c
c001f585:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001f58d:	83 ec 08             	sub    esp,0x8
c001f590:	68 b0 ac 02 c0       	push   0xc002acb0
c001f595:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f599:	e8 dd 11 fe ff       	call   c000077b <strcmp>
c001f59e:	83 c4 10             	add    esp,0x10
c001f5a1:	85 c0                	test   eax,eax
c001f5a3:	0f 94 c0             	sete   al
c001f5a6:	84 c0                	test   al,al
c001f5a8:	74 0d                	je     c001f5b7 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001f5aa:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001f5b2:	e9 a6 00 00 00       	jmp    c001f65d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f5b7:	83 ec 08             	sub    esp,0x8
c001f5ba:	68 a2 ac 02 c0       	push   0xc002aca2
c001f5bf:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f5c3:	e8 b3 11 fe ff       	call   c000077b <strcmp>
c001f5c8:	83 c4 10             	add    esp,0x10
c001f5cb:	85 c0                	test   eax,eax
c001f5cd:	0f 94 c0             	sete   al
c001f5d0:	84 c0                	test   al,al
c001f5d2:	74 0a                	je     c001f5de <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001f5d4:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001f5dc:	eb 7f                	jmp    c001f65d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f5de:	83 ec 08             	sub    esp,0x8
c001f5e1:	68 a8 ac 02 c0       	push   0xc002aca8
c001f5e6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f5ea:	e8 8c 11 fe ff       	call   c000077b <strcmp>
c001f5ef:	83 c4 10             	add    esp,0x10
c001f5f2:	85 c0                	test   eax,eax
c001f5f4:	0f 94 c0             	sete   al
c001f5f7:	84 c0                	test   al,al
c001f5f9:	74 0a                	je     c001f605 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001f5fb:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001f603:	eb 58                	jmp    c001f65d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f605:	83 ec 08             	sub    esp,0x8
c001f608:	68 2c 7d 02 c0       	push   0xc0027d2c
c001f60d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f611:	e8 65 11 fe ff       	call   c000077b <strcmp>
c001f616:	83 c4 10             	add    esp,0x10
c001f619:	85 c0                	test   eax,eax
c001f61b:	0f 94 c0             	sete   al
c001f61e:	84 c0                	test   al,al
c001f620:	74 0a                	je     c001f62c <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001f622:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001f62a:	eb 31                	jmp    c001f65d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f62c:	83 ec 08             	sub    esp,0x8
c001f62f:	68 ae ac 02 c0       	push   0xc002acae
c001f634:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f638:	e8 3e 11 fe ff       	call   c000077b <strcmp>
c001f63d:	83 c4 10             	add    esp,0x10
c001f640:	85 c0                	test   eax,eax
c001f642:	0f 94 c0             	sete   al
c001f645:	84 c0                	test   al,al
c001f647:	74 0a                	je     c001f653 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001f649:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001f651:	eb 0a                	jmp    c001f65d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f653:	b8 08 00 00 00       	mov    eax,0x8
c001f658:	e9 04 01 00 00       	jmp    c001f761 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001f65d:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001f664:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001f669:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f66d:	8b 04 85 80 de 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2180]
c001f674:	83 f8 ff             	cmp    eax,0xffffffff
c001f677:	75 34                	jne    c001f6ad <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001f679:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001f67d:	88 c2                	mov    dl,al
c001f67f:	a1 60 de 02 c0       	mov    eax,ds:0xc002de60
c001f684:	01 d0                	add    eax,edx
c001f686:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001f68a:	8b 15 60 de 02 c0    	mov    edx,DWORD PTR ds:0xc002de60
c001f690:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f694:	89 14 85 80 de 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2180],edx
c001f69b:	a1 60 de 02 c0       	mov    eax,ds:0xc002de60
c001f6a0:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001f6a4:	89 14 85 00 df 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2100],edx
c001f6ab:	eb 17                	jmp    c001f6c4 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001f6ad:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001f6b1:	88 c2                	mov    dl,al
c001f6b3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f6b7:	8b 04 85 80 de 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2180]
c001f6be:	01 d0                	add    eax,edx
c001f6c0:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001f6c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f6c8:	88 04 24             	mov    BYTE PTR [esp],al
c001f6cb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001f6cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f6d3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001f6db:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001f6e0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f6e8:	83 ec 0c             	sub    esp,0xc
c001f6eb:	68 00 20 00 00       	push   0x2000
c001f6f0:	e8 df fd fe ff       	call   c000f4d4 <malloc>
c001f6f5:	83 c4 10             	add    esp,0x10
c001f6f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f6fc:	68 00 20 00 00       	push   0x2000
c001f701:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f705:	8d 44 24 08          	lea    eax,[esp+0x8]
c001f709:	50                   	push   eax
c001f70a:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001f70e:	50                   	push   eax
c001f70f:	e8 0d 7a fe ff       	call   c0007121 <f_mkfs>
c001f714:	83 c4 10             	add    esp,0x10
c001f717:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f71b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f720:	75 07                	jne    c001f729 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001f722:	b8 00 00 00 00       	mov    eax,0x0
c001f727:	eb 38                	jmp    c001f761 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001f729:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001f72e:	75 17                	jne    c001f747 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001f730:	83 ec 0c             	sub    esp,0xc
c001f733:	68 e0 ac 02 c0       	push   0xc002ace0
c001f738:	e8 4a 2f ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001f73d:	83 c4 10             	add    esp,0x10
c001f740:	b8 09 00 00 00       	mov    eax,0x9
c001f745:	eb 1a                	jmp    c001f761 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001f747:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f74b:	83 ec 08             	sub    esp,0x8
c001f74e:	50                   	push   eax
c001f74f:	68 b4 ac 02 c0       	push   0xc002acb4
c001f754:	e8 2e 2f ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c001f759:	83 c4 10             	add    esp,0x10
c001f75c:	b8 01 00 00 00       	mov    eax,0x1
c001f761:	83 c4 2c             	add    esp,0x2c
c001f764:	c3                   	ret    
c001f765:	90                   	nop

c001f766 <FAT::tryMount(LogicalDisk*, int)>:
c001f766:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001f76c:	a1 60 de 02 c0       	mov    eax,ds:0xc002de60
c001f771:	83 f8 14             	cmp    eax,0x14
c001f774:	75 17                	jne    c001f78d <FAT::tryMount(LogicalDisk*, int)+0x27>
c001f776:	83 ec 0c             	sub    esp,0xc
c001f779:	68 c6 ac 02 c0       	push   0xc002acc6
c001f77e:	e8 1e a0 ff ff       	call   c00197a1 <Krnl::panic(char const*)>
c001f783:	83 c4 10             	add    esp,0x10
c001f786:	b0 00                	mov    al,0x0
c001f788:	e9 d7 01 00 00       	jmp    c001f964 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001f78d:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001f794:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001f79a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001f7a0:	3d 00 02 00 00       	cmp    eax,0x200
c001f7a5:	74 07                	je     c001f7ae <FAT::tryMount(LogicalDisk*, int)+0x48>
c001f7a7:	b0 00                	mov    al,0x0
c001f7a9:	e9 b6 01 00 00       	jmp    c001f964 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001f7ae:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001f7b6:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001f7bd:	8b 04 85 80 de 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2180]
c001f7c4:	83 f8 ff             	cmp    eax,0xffffffff
c001f7c7:	74 07                	je     c001f7d0 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001f7c9:	b0 01                	mov    al,0x1
c001f7cb:	e9 94 01 00 00       	jmp    c001f964 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001f7d0:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001f7da:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001f7e2:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001f7e9:	88 c2                	mov    dl,al
c001f7eb:	a1 60 de 02 c0       	mov    eax,ds:0xc002de60
c001f7f0:	01 d0                	add    eax,edx
c001f7f2:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001f7f9:	8b 15 60 de 02 c0    	mov    edx,DWORD PTR ds:0xc002de60
c001f7ff:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001f806:	89 14 85 80 de 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2180],edx
c001f80d:	a1 60 de 02 c0       	mov    eax,ds:0xc002de60
c001f812:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001f819:	89 14 85 00 df 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2100],edx
c001f820:	83 ec 0c             	sub    esp,0xc
c001f823:	68 54 02 00 00       	push   0x254
c001f828:	e8 a7 fc fe ff       	call   c000f4d4 <malloc>
c001f82d:	83 c4 10             	add    esp,0x10
c001f830:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001f837:	83 ec 04             	sub    esp,0x4
c001f83a:	6a 00                	push   0x0
c001f83c:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001f843:	50                   	push   eax
c001f844:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001f84b:	e8 8f 54 fe ff       	call   c0004cdf <f_mount>
c001f850:	83 c4 10             	add    esp,0x10
c001f853:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001f85a:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001f862:	74 19                	je     c001f87d <FAT::tryMount(LogicalDisk*, int)+0x117>
c001f864:	83 ec 0c             	sub    esp,0xc
c001f867:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001f86e:	e8 81 fc fe ff       	call   c000f4f4 <rfree>
c001f873:	83 c4 10             	add    esp,0x10
c001f876:	b0 00                	mov    al,0x0
c001f878:	e9 e7 00 00 00       	jmp    c001f964 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001f87d:	83 ec 04             	sub    esp,0x4
c001f880:	68 00 01 00 00       	push   0x100
c001f885:	6a 00                	push   0x0
c001f887:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001f88e:	50                   	push   eax
c001f88f:	e8 f7 0d fe ff       	call   c000068b <memset>
c001f894:	83 c4 10             	add    esp,0x10
c001f897:	83 ec 08             	sub    esp,0x8
c001f89a:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001f8a1:	50                   	push   eax
c001f8a2:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001f8a9:	50                   	push   eax
c001f8aa:	e8 32 0f fe ff       	call   c00007e1 <strcat>
c001f8af:	83 c4 10             	add    esp,0x10
c001f8b2:	83 ec 08             	sub    esp,0x8
c001f8b5:	68 d4 ac 02 c0       	push   0xc002acd4
c001f8ba:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001f8c1:	50                   	push   eax
c001f8c2:	e8 1a 0f fe ff       	call   c00007e1 <strcat>
c001f8c7:	83 c4 10             	add    esp,0x10
c001f8ca:	83 ec 04             	sub    esp,0x4
c001f8cd:	6a 01                	push   0x1
c001f8cf:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001f8d6:	50                   	push   eax
c001f8d7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f8db:	50                   	push   eax
c001f8dc:	e8 60 54 fe ff       	call   c0004d41 <f_open>
c001f8e1:	83 c4 10             	add    esp,0x10
c001f8e4:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001f8eb:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001f8f2:	85 c0                	test   eax,eax
c001f8f4:	74 0a                	je     c001f900 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001f8f6:	78 2d                	js     c001f925 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001f8f8:	83 e8 04             	sub    eax,0x4
c001f8fb:	83 f8 01             	cmp    eax,0x1
c001f8fe:	77 25                	ja     c001f925 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001f900:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001f908:	83 ec 0c             	sub    esp,0xc
c001f90b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f90f:	50                   	push   eax
c001f910:	e8 7e 5f fe ff       	call   c0005893 <f_close>
c001f915:	83 c4 10             	add    esp,0x10
c001f918:	90                   	nop
c001f919:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001f921:	74 3a                	je     c001f95d <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001f923:	eb 2d                	jmp    c001f952 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001f925:	83 ec 0c             	sub    esp,0xc
c001f928:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001f92f:	e8 c0 fb fe ff       	call   c000f4f4 <rfree>
c001f934:	83 c4 10             	add    esp,0x10
c001f937:	83 ec 04             	sub    esp,0x4
c001f93a:	6a 00                	push   0x0
c001f93c:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001f943:	50                   	push   eax
c001f944:	6a 00                	push   0x0
c001f946:	e8 94 53 fe ff       	call   c0004cdf <f_mount>
c001f94b:	83 c4 10             	add    esp,0x10
c001f94e:	b0 00                	mov    al,0x0
c001f950:	eb 12                	jmp    c001f964 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001f952:	a1 60 de 02 c0       	mov    eax,ds:0xc002de60
c001f957:	40                   	inc    eax
c001f958:	a3 60 de 02 c0       	mov    ds:0xc002de60,eax
c001f95d:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001f964:	81 c4 6c 03 00 00    	add    esp,0x36c
c001f96a:	c3                   	ret    
c001f96b:	90                   	nop

c001f96c <FAT::readDir(void*, unsigned long, void*, int*)>:
c001f96c:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001f972:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001f97a:	74 0a                	je     c001f986 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001f97c:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001f984:	75 0a                	jne    c001f990 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001f986:	b8 04 00 00 00       	mov    eax,0x4
c001f98b:	e9 db 00 00 00       	jmp    c001fa6b <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001f990:	83 ec 08             	sub    esp,0x8
c001f993:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001f99a:	50                   	push   eax
c001f99b:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001f9a2:	e8 f6 64 fe ff       	call   c0005e9d <f_readdir>
c001f9a7:	83 c4 10             	add    esp,0x10
c001f9aa:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001f9b1:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001f9b7:	83 ec 0c             	sub    esp,0xc
c001f9ba:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001f9c1:	83 c0 1a             	add    eax,0x1a
c001f9c4:	50                   	push   eax
c001f9c5:	e8 de 0c fe ff       	call   c00006a8 <strlen>
c001f9ca:	83 c4 10             	add    esp,0x10
c001f9cd:	ba 00 00 00 00       	mov    edx,0x0
c001f9d2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f9d6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f9da:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001f9e1:	0f b6 c0             	movzx  eax,al
c001f9e4:	83 e0 10             	and    eax,0x10
c001f9e7:	74 07                	je     c001f9f0 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c001f9e9:	b8 02 00 00 00       	mov    eax,0x2
c001f9ee:	eb 05                	jmp    c001f9f5 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c001f9f0:	b8 01 00 00 00       	mov    eax,0x1
c001f9f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f9f9:	83 ec 08             	sub    esp,0x8
c001f9fc:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001fa03:	83 c0 1a             	add    eax,0x1a
c001fa06:	50                   	push   eax
c001fa07:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001fa0b:	83 c0 10             	add    eax,0x10
c001fa0e:	50                   	push   eax
c001fa0f:	e8 16 0d fe ff       	call   c000072a <strcpy>
c001fa14:	83 c4 10             	add    esp,0x10
c001fa17:	83 ec 04             	sub    esp,0x4
c001fa1a:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001fa21:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fa25:	50                   	push   eax
c001fa26:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001fa2d:	e8 23 0c fe ff       	call   c0000655 <memcpy>
c001fa32:	83 c4 10             	add    esp,0x10
c001fa35:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001fa3c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001fa42:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001fa49:	84 c0                	test   al,al
c001fa4b:	75 07                	jne    c001fa54 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c001fa4d:	b8 07 00 00 00       	mov    eax,0x7
c001fa52:	eb 17                	jmp    c001fa6b <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001fa54:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001fa5b:	85 c0                	test   eax,eax
c001fa5d:	75 07                	jne    c001fa66 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c001fa5f:	b8 00 00 00 00       	mov    eax,0x0
c001fa64:	eb 05                	jmp    c001fa6b <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001fa66:	b8 01 00 00 00       	mov    eax,0x1
c001fa6b:	81 c4 3c 02 00 00    	add    esp,0x23c
c001fa71:	c3                   	ret    

c001fa72 <FAT::read(void*, unsigned long, void*, int*)>:
c001fa72:	83 ec 1c             	sub    esp,0x1c
c001fa75:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001fa7a:	74 07                	je     c001fa83 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001fa7c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001fa81:	75 07                	jne    c001fa8a <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001fa83:	b8 04 00 00 00       	mov    eax,0x4
c001fa88:	eb 3d                	jmp    c001fac7 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001fa8a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fa8e:	50                   	push   eax
c001fa8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fa93:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fa97:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fa9b:	e8 dd 56 fe ff       	call   c000517d <f_read>
c001faa0:	83 c4 10             	add    esp,0x10
c001faa3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001faa7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001faab:	89 c2                	mov    edx,eax
c001faad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001fab1:	89 10                	mov    DWORD PTR [eax],edx
c001fab3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fab7:	85 c0                	test   eax,eax
c001fab9:	75 07                	jne    c001fac2 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001fabb:	b8 00 00 00 00       	mov    eax,0x0
c001fac0:	eb 05                	jmp    c001fac7 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001fac2:	b8 01 00 00 00       	mov    eax,0x1
c001fac7:	83 c4 1c             	add    esp,0x1c
c001faca:	c3                   	ret    
c001facb:	90                   	nop

c001facc <FAT::write(void*, unsigned long, void*, int*)>:
c001facc:	83 ec 1c             	sub    esp,0x1c
c001facf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001fad4:	74 07                	je     c001fadd <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001fad6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001fadb:	75 07                	jne    c001fae4 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001fadd:	b8 04 00 00 00       	mov    eax,0x4
c001fae2:	eb 3d                	jmp    c001fb21 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001fae4:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fae8:	50                   	push   eax
c001fae9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001faed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001faf1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001faf5:	e8 03 59 fe ff       	call   c00053fd <f_write>
c001fafa:	83 c4 10             	add    esp,0x10
c001fafd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fb01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fb05:	89 c2                	mov    edx,eax
c001fb07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001fb0b:	89 10                	mov    DWORD PTR [eax],edx
c001fb0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb11:	85 c0                	test   eax,eax
c001fb13:	75 07                	jne    c001fb1c <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001fb15:	b8 00 00 00 00       	mov    eax,0x0
c001fb1a:	eb 05                	jmp    c001fb21 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001fb1c:	b8 01 00 00 00       	mov    eax,0x1
c001fb21:	83 c4 1c             	add    esp,0x1c
c001fb24:	c3                   	ret    
c001fb25:	90                   	nop

c001fb26 <FAT::close(void*)>:
c001fb26:	83 ec 1c             	sub    esp,0x1c
c001fb29:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001fb2e:	75 07                	jne    c001fb37 <FAT::close(void*)+0x11>
c001fb30:	b8 04 00 00 00       	mov    eax,0x4
c001fb35:	eb 36                	jmp    c001fb6d <FAT::close(void*)+0x47>
c001fb37:	83 ec 0c             	sub    esp,0xc
c001fb3a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fb3e:	e8 50 5d fe ff       	call   c0005893 <f_close>
c001fb43:	83 c4 10             	add    esp,0x10
c001fb46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fb4a:	83 ec 0c             	sub    esp,0xc
c001fb4d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fb51:	e8 8e f9 fe ff       	call   c000f4e4 <free>
c001fb56:	83 c4 10             	add    esp,0x10
c001fb59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb5d:	85 c0                	test   eax,eax
c001fb5f:	75 07                	jne    c001fb68 <FAT::close(void*)+0x42>
c001fb61:	b8 00 00 00 00       	mov    eax,0x0
c001fb66:	eb 05                	jmp    c001fb6d <FAT::close(void*)+0x47>
c001fb68:	b8 01 00 00 00       	mov    eax,0x1
c001fb6d:	83 c4 1c             	add    esp,0x1c
c001fb70:	c3                   	ret    
c001fb71:	90                   	nop

c001fb72 <FAT::closeDir(void*)>:
c001fb72:	83 ec 1c             	sub    esp,0x1c
c001fb75:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001fb7a:	75 07                	jne    c001fb83 <FAT::closeDir(void*)+0x11>
c001fb7c:	b8 04 00 00 00       	mov    eax,0x4
c001fb81:	eb 36                	jmp    c001fbb9 <FAT::closeDir(void*)+0x47>
c001fb83:	83 ec 0c             	sub    esp,0xc
c001fb86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fb8a:	e8 ec 62 fe ff       	call   c0005e7b <f_closedir>
c001fb8f:	83 c4 10             	add    esp,0x10
c001fb92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fb96:	83 ec 0c             	sub    esp,0xc
c001fb99:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fb9d:	e8 42 f9 fe ff       	call   c000f4e4 <free>
c001fba2:	83 c4 10             	add    esp,0x10
c001fba5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fba9:	85 c0                	test   eax,eax
c001fbab:	75 07                	jne    c001fbb4 <FAT::closeDir(void*)+0x42>
c001fbad:	b8 00 00 00 00       	mov    eax,0x0
c001fbb2:	eb 05                	jmp    c001fbb9 <FAT::closeDir(void*)+0x47>
c001fbb4:	b8 01 00 00 00       	mov    eax,0x1
c001fbb9:	83 c4 1c             	add    esp,0x1c
c001fbbc:	c3                   	ret    
c001fbbd:	90                   	nop

c001fbbe <FAT::seek(void*, unsigned long long)>:
c001fbbe:	83 ec 2c             	sub    esp,0x2c
c001fbc1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fbc5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fbc9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001fbcd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fbd1:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001fbd6:	75 07                	jne    c001fbdf <FAT::seek(void*, unsigned long long)+0x21>
c001fbd8:	b8 04 00 00 00       	mov    eax,0x4
c001fbdd:	eb 2f                	jmp    c001fc0e <FAT::seek(void*, unsigned long long)+0x50>
c001fbdf:	83 ec 04             	sub    esp,0x4
c001fbe2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001fbe6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001fbea:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001fbee:	e8 cf 5c fe ff       	call   c00058c2 <f_lseek>
c001fbf3:	83 c4 10             	add    esp,0x10
c001fbf6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fbfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fbfe:	85 c0                	test   eax,eax
c001fc00:	75 07                	jne    c001fc09 <FAT::seek(void*, unsigned long long)+0x4b>
c001fc02:	b8 00 00 00 00       	mov    eax,0x0
c001fc07:	eb 05                	jmp    c001fc0e <FAT::seek(void*, unsigned long long)+0x50>
c001fc09:	b8 01 00 00 00       	mov    eax,0x1
c001fc0e:	83 c4 2c             	add    esp,0x2c
c001fc11:	c3                   	ret    

c001fc12 <fatWrapperReadDisk>:
c001fc12:	83 ec 1c             	sub    esp,0x1c
c001fc15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fc19:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fc1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fc21:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc24:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fc28:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001fc2c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fc31:	8b 04 85 60 ce 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd31a0]
c001fc38:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001fc3c:	83 ec 0c             	sub    esp,0xc
c001fc3f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fc43:	52                   	push   edx
c001fc44:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fc48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fc4c:	50                   	push   eax
c001fc4d:	e8 c2 60 ff ff       	call   c0015d14 <LogicalDisk::read(unsigned long long, int, void*)>
c001fc52:	83 c4 20             	add    esp,0x20
c001fc55:	83 c4 1c             	add    esp,0x1c
c001fc58:	c3                   	ret    

c001fc59 <fatWrapperWriteDisk>:
c001fc59:	83 ec 1c             	sub    esp,0x1c
c001fc5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fc60:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fc64:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fc68:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fc6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001fc73:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fc78:	8b 04 85 60 ce 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd31a0]
c001fc7f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001fc83:	83 ec 0c             	sub    esp,0xc
c001fc86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fc8a:	52                   	push   edx
c001fc8b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fc8f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fc93:	50                   	push   eax
c001fc94:	e8 e7 60 ff ff       	call   c0015d80 <LogicalDisk::write(unsigned long long, int, void*)>
c001fc99:	83 c4 20             	add    esp,0x20
c001fc9c:	83 c4 1c             	add    esp,0x1c
c001fc9f:	c3                   	ret    

c001fca0 <fatWrapperIoctl>:
c001fca0:	53                   	push   ebx
c001fca1:	83 ec 28             	sub    esp,0x28
c001fca4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001fca8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001fcac:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001fcb0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001fcb4:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001fcb9:	75 31                	jne    c001fcec <fatWrapperIoctl+0x4c>
c001fcbb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fcbf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fcc3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fcc8:	8b 04 85 60 ce 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd31a0]
c001fccf:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001fcd5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001fcdb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fcdf:	66 89 02             	mov    WORD PTR [edx],ax
c001fce2:	b8 00 00 00 00       	mov    eax,0x0
c001fce7:	e9 b2 00 00 00       	jmp    c001fd9e <fatWrapperIoctl+0xfe>
c001fcec:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001fcf1:	75 6a                	jne    c001fd5d <fatWrapperIoctl+0xbd>
c001fcf3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fcf7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fcfb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fd00:	8b 04 85 60 ce 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd31a0]
c001fd07:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001fd0d:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001fd13:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001fd19:	89 c8                	mov    eax,ecx
c001fd1b:	89 da                	mov    edx,ebx
c001fd1d:	0f a4 c2 0a          	shld   edx,eax,0xa
c001fd21:	c1 e0 0a             	shl    eax,0xa
c001fd24:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001fd29:	8b 0c 8d 60 ce 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd31a0]
c001fd30:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001fd36:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001fd3c:	89 cb                	mov    ebx,ecx
c001fd3e:	c1 fb 1f             	sar    ebx,0x1f
c001fd41:	53                   	push   ebx
c001fd42:	51                   	push   ecx
c001fd43:	52                   	push   edx
c001fd44:	50                   	push   eax
c001fd45:	e8 72 55 00 00       	call   c00252bc <__udivdi3>
c001fd4a:	83 c4 10             	add    esp,0x10
c001fd4d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001fd51:	89 01                	mov    DWORD PTR [ecx],eax
c001fd53:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fd56:	b8 00 00 00 00       	mov    eax,0x0
c001fd5b:	eb 41                	jmp    c001fd9e <fatWrapperIoctl+0xfe>
c001fd5d:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001fd62:	75 07                	jne    c001fd6b <fatWrapperIoctl+0xcb>
c001fd64:	b8 00 00 00 00       	mov    eax,0x0
c001fd69:	eb 33                	jmp    c001fd9e <fatWrapperIoctl+0xfe>
c001fd6b:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001fd70:	75 19                	jne    c001fd8b <fatWrapperIoctl+0xeb>
c001fd72:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fd76:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001fd7a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fd7e:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001fd84:	b8 00 00 00 00       	mov    eax,0x0
c001fd89:	eb 13                	jmp    c001fd9e <fatWrapperIoctl+0xfe>
c001fd8b:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001fd90:	75 07                	jne    c001fd99 <fatWrapperIoctl+0xf9>
c001fd92:	b8 00 00 00 00       	mov    eax,0x0
c001fd97:	eb 05                	jmp    c001fd9e <fatWrapperIoctl+0xfe>
c001fd99:	b8 04 00 00 00       	mov    eax,0x4
c001fd9e:	83 c4 28             	add    esp,0x28
c001fda1:	5b                   	pop    ebx
c001fda2:	c3                   	ret    
c001fda3:	90                   	nop

c001fda4 <FAT::FAT()>:
c001fda4:	83 ec 1c             	sub    esp,0x1c
c001fda7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fdab:	83 ec 0c             	sub    esp,0xc
c001fdae:	50                   	push   eax
c001fdaf:	e8 d8 2b ff ff       	call   c001298c <Filesystem::Filesystem()>
c001fdb4:	83 c4 10             	add    esp,0x10
c001fdb7:	ba 10 ad 02 c0       	mov    edx,0xc002ad10
c001fdbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fdc0:	89 10                	mov    DWORD PTR [eax],edx
c001fdc2:	c7 05 60 de 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002de60,0x0
c001fdcc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001fdd4:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001fdd9:	7f 15                	jg     c001fdf0 <FAT::FAT()+0x4c>
c001fddb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fddf:	c7 04 85 80 de 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd2180],0xffffffff
c001fdea:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001fdee:	eb e4                	jmp    c001fdd4 <FAT::FAT()+0x30>
c001fdf0:	90                   	nop
c001fdf1:	83 c4 1c             	add    esp,0x1c
c001fdf4:	c3                   	ret    
c001fdf5:	90                   	nop

c001fdf6 <FAT::fixFilepath(char*)>:
c001fdf6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fdfa:	8a 00                	mov    al,BYTE PTR [eax]
c001fdfc:	3c 40                	cmp    al,0x40
c001fdfe:	7e 2c                	jle    c001fe2c <FAT::fixFilepath(char*)+0x36>
c001fe00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fe04:	8a 00                	mov    al,BYTE PTR [eax]
c001fe06:	83 e8 41             	sub    eax,0x41
c001fe09:	88 c2                	mov    dl,al
c001fe0b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fe0f:	88 10                	mov    BYTE PTR [eax],dl
c001fe11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fe15:	8a 00                	mov    al,BYTE PTR [eax]
c001fe17:	0f be c0             	movsx  eax,al
c001fe1a:	8b 04 85 80 de 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2180]
c001fe21:	83 c0 30             	add    eax,0x30
c001fe24:	88 c2                	mov    dl,al
c001fe26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fe2a:	88 10                	mov    BYTE PTR [eax],dl
c001fe2c:	90                   	nop
c001fe2d:	c3                   	ret    

c001fe2e <FAT::open(char const*, void**, FileOpenMode)>:
c001fe2e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001fe34:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001fe3c:	74 0a                	je     c001fe48 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001fe3e:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001fe46:	75 0a                	jne    c001fe52 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001fe48:	b8 04 00 00 00       	mov    eax,0x4
c001fe4d:	e9 fd 00 00 00       	jmp    c001ff4f <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001fe52:	83 ec 08             	sub    esp,0x8
c001fe55:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001fe5c:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fe60:	50                   	push   eax
c001fe61:	e8 c4 08 fe ff       	call   c000072a <strcpy>
c001fe66:	83 c4 10             	add    esp,0x10
c001fe69:	83 ec 08             	sub    esp,0x8
c001fe6c:	8d 44 24 10          	lea    eax,[esp+0x10]
c001fe70:	50                   	push   eax
c001fe71:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001fe78:	e8 79 ff ff ff       	call   c001fdf6 <FAT::fixFilepath(char*)>
c001fe7d:	83 c4 10             	add    esp,0x10
c001fe80:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001fe88:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001fe8f:	83 e0 01             	and    eax,0x1
c001fe92:	74 08                	je     c001fe9c <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001fe94:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001fe9c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001fea3:	83 e0 04             	and    eax,0x4
c001fea6:	74 10                	je     c001feb8 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001fea8:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001feb0:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001feb8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001febf:	83 e0 02             	and    eax,0x2
c001fec2:	74 08                	je     c001fecc <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001fec4:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001fecc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001fed3:	83 e0 08             	and    eax,0x8
c001fed6:	74 08                	je     c001fee0 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001fed8:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001fee0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001fee7:	83 e0 10             	and    eax,0x10
c001feea:	74 08                	je     c001fef4 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001feec:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001fef4:	83 ec 0c             	sub    esp,0xc
c001fef7:	68 50 02 00 00       	push   0x250
c001fefc:	e8 d3 f5 fe ff       	call   c000f4d4 <malloc>
c001ff01:	83 c4 10             	add    esp,0x10
c001ff04:	89 c2                	mov    edx,eax
c001ff06:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ff0d:	89 10                	mov    DWORD PTR [eax],edx
c001ff0f:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001ff17:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ff1e:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff20:	83 ec 04             	sub    esp,0x4
c001ff23:	52                   	push   edx
c001ff24:	8d 54 24 10          	lea    edx,[esp+0x10]
c001ff28:	52                   	push   edx
c001ff29:	50                   	push   eax
c001ff2a:	e8 12 4e fe ff       	call   c0004d41 <f_open>
c001ff2f:	83 c4 10             	add    esp,0x10
c001ff32:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001ff39:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001ff41:	74 07                	je     c001ff4a <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c001ff43:	b8 01 00 00 00       	mov    eax,0x1
c001ff48:	eb 05                	jmp    c001ff4f <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001ff4a:	b8 00 00 00 00       	mov    eax,0x0
c001ff4f:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ff55:	c3                   	ret    

c001ff56 <FAT::openDir(char const*, void**)>:
c001ff56:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ff5c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ff64:	74 0a                	je     c001ff70 <FAT::openDir(char const*, void**)+0x1a>
c001ff66:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001ff6e:	75 07                	jne    c001ff77 <FAT::openDir(char const*, void**)+0x21>
c001ff70:	b8 04 00 00 00       	mov    eax,0x4
c001ff75:	eb 7d                	jmp    c001fff4 <FAT::openDir(char const*, void**)+0x9e>
c001ff77:	83 ec 08             	sub    esp,0x8
c001ff7a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ff81:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ff85:	50                   	push   eax
c001ff86:	e8 9f 07 fe ff       	call   c000072a <strcpy>
c001ff8b:	83 c4 10             	add    esp,0x10
c001ff8e:	83 ec 08             	sub    esp,0x8
c001ff91:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ff95:	50                   	push   eax
c001ff96:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ff9d:	e8 54 fe ff ff       	call   c001fdf6 <FAT::fixFilepath(char*)>
c001ffa2:	83 c4 10             	add    esp,0x10
c001ffa5:	83 ec 0c             	sub    esp,0xc
c001ffa8:	6a 4c                	push   0x4c
c001ffaa:	e8 25 f5 fe ff       	call   c000f4d4 <malloc>
c001ffaf:	83 c4 10             	add    esp,0x10
c001ffb2:	89 c2                	mov    edx,eax
c001ffb4:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ffbb:	89 10                	mov    DWORD PTR [eax],edx
c001ffbd:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ffc4:	8b 00                	mov    eax,DWORD PTR [eax]
c001ffc6:	83 ec 08             	sub    esp,0x8
c001ffc9:	8d 54 24 14          	lea    edx,[esp+0x14]
c001ffcd:	52                   	push   edx
c001ffce:	50                   	push   eax
c001ffcf:	e8 a5 5d fe ff       	call   c0005d79 <f_opendir>
c001ffd4:	83 c4 10             	add    esp,0x10
c001ffd7:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ffde:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001ffe6:	74 07                	je     c001ffef <FAT::openDir(char const*, void**)+0x99>
c001ffe8:	b8 01 00 00 00       	mov    eax,0x1
c001ffed:	eb 05                	jmp    c001fff4 <FAT::openDir(char const*, void**)+0x9e>
c001ffef:	b8 00 00 00 00       	mov    eax,0x0
c001fff4:	81 c4 1c 01 00 00    	add    esp,0x11c
c001fffa:	c3                   	ret    
c001fffb:	90                   	nop

c001fffc <FAT::stat(char const*, unsigned long long*, bool*)>:
c001fffc:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020002:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c002000a:	75 0a                	jne    c0020016 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c002000c:	b8 04 00 00 00       	mov    eax,0x4
c0020011:	e9 c9 00 00 00       	jmp    c00200df <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020016:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c002001e:	75 0a                	jne    c002002a <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0020020:	b8 04 00 00 00       	mov    eax,0x4
c0020025:	e9 b5 00 00 00       	jmp    c00200df <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002002a:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0020032:	75 0a                	jne    c002003e <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0020034:	b8 04 00 00 00       	mov    eax,0x4
c0020039:	e9 a1 00 00 00       	jmp    c00200df <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002003e:	83 ec 08             	sub    esp,0x8
c0020041:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020048:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c002004f:	50                   	push   eax
c0020050:	e8 d5 06 fe ff       	call   c000072a <strcpy>
c0020055:	83 c4 10             	add    esp,0x10
c0020058:	83 ec 08             	sub    esp,0x8
c002005b:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0020062:	50                   	push   eax
c0020063:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002006a:	e8 87 fd ff ff       	call   c001fdf6 <FAT::fixFilepath(char*)>
c002006f:	83 c4 10             	add    esp,0x10
c0020072:	83 ec 08             	sub    esp,0x8
c0020075:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020079:	50                   	push   eax
c002007a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020081:	50                   	push   eax
c0020082:	e8 b1 5e fe ff       	call   c0005f38 <f_stat>
c0020087:	83 c4 10             	add    esp,0x10
c002008a:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020091:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020098:	85 c0                	test   eax,eax
c002009a:	74 07                	je     c00200a3 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c002009c:	83 f8 04             	cmp    eax,0x4
c002009f:	74 32                	je     c00200d3 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c00200a1:	eb 37                	jmp    c00200da <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c00200a3:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00200a7:	0f b6 c0             	movzx  eax,al
c00200aa:	83 e0 10             	and    eax,0x10
c00200ad:	0f 95 c2             	setne  dl
c00200b0:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00200b7:	88 10                	mov    BYTE PTR [eax],dl
c00200b9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00200bc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00200c0:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00200c7:	89 01                	mov    DWORD PTR [ecx],eax
c00200c9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00200cc:	b8 00 00 00 00       	mov    eax,0x0
c00200d1:	eb 0c                	jmp    c00200df <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00200d3:	b8 02 00 00 00       	mov    eax,0x2
c00200d8:	eb 05                	jmp    c00200df <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00200da:	b8 01 00 00 00       	mov    eax,0x1
c00200df:	81 c4 2c 02 00 00    	add    esp,0x22c
c00200e5:	c3                   	ret    

c00200e6 <FAT::unlink(char const*)>:
c00200e6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00200ec:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00200f4:	75 07                	jne    c00200fd <FAT::unlink(char const*)+0x17>
c00200f6:	b8 04 00 00 00       	mov    eax,0x4
c00200fb:	eb 5c                	jmp    c0020159 <FAT::unlink(char const*)+0x73>
c00200fd:	83 ec 08             	sub    esp,0x8
c0020100:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020107:	8d 44 24 18          	lea    eax,[esp+0x18]
c002010b:	50                   	push   eax
c002010c:	e8 19 06 fe ff       	call   c000072a <strcpy>
c0020111:	83 c4 10             	add    esp,0x10
c0020114:	83 ec 08             	sub    esp,0x8
c0020117:	8d 44 24 14          	lea    eax,[esp+0x14]
c002011b:	50                   	push   eax
c002011c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020123:	e8 ce fc ff ff       	call   c001fdf6 <FAT::fixFilepath(char*)>
c0020128:	83 c4 10             	add    esp,0x10
c002012b:	83 ec 0c             	sub    esp,0xc
c002012e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020132:	50                   	push   eax
c0020133:	e8 52 61 fe ff       	call   c000628a <f_unlink>
c0020138:	83 c4 10             	add    esp,0x10
c002013b:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020142:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020149:	85 c0                	test   eax,eax
c002014b:	75 07                	jne    c0020154 <FAT::unlink(char const*)+0x6e>
c002014d:	b8 00 00 00 00       	mov    eax,0x0
c0020152:	eb 05                	jmp    c0020159 <FAT::unlink(char const*)+0x73>
c0020154:	b8 01 00 00 00       	mov    eax,0x1
c0020159:	81 c4 1c 01 00 00    	add    esp,0x11c
c002015f:	c3                   	ret    

c0020160 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0020160:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0020166:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c002016d:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0020174:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020178:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002017c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0020184:	75 0a                	jne    c0020190 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0020186:	b8 04 00 00 00       	mov    eax,0x4
c002018b:	e9 1c 01 00 00       	jmp    c00202ac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020190:	83 ec 08             	sub    esp,0x8
c0020193:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002019a:	8d 44 24 24          	lea    eax,[esp+0x24]
c002019e:	50                   	push   eax
c002019f:	e8 86 05 fe ff       	call   c000072a <strcpy>
c00201a4:	83 c4 10             	add    esp,0x10
c00201a7:	83 ec 08             	sub    esp,0x8
c00201aa:	8d 44 24 20          	lea    eax,[esp+0x20]
c00201ae:	50                   	push   eax
c00201af:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00201b6:	e8 3b fc ff ff       	call   c001fdf6 <FAT::fixFilepath(char*)>
c00201bb:	83 c4 10             	add    esp,0x10
c00201be:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00201c6:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00201ce:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00201d3:	83 e0 01             	and    eax,0x1
c00201d6:	74 08                	je     c00201e0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c00201d8:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00201e0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00201e5:	83 e0 02             	and    eax,0x2
c00201e8:	74 08                	je     c00201f2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c00201ea:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00201f2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00201f7:	83 e0 04             	and    eax,0x4
c00201fa:	74 08                	je     c0020204 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c00201fc:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0020204:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020209:	83 e0 08             	and    eax,0x8
c002020c:	74 08                	je     c0020216 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c002020e:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0020216:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002021b:	83 e0 01             	and    eax,0x1
c002021e:	74 08                	je     c0020228 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0020220:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0020228:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002022d:	83 e0 02             	and    eax,0x2
c0020230:	74 08                	je     c002023a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0020232:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c002023a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002023f:	83 e0 04             	and    eax,0x4
c0020242:	74 08                	je     c002024c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0020244:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c002024c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020251:	83 e0 08             	and    eax,0x8
c0020254:	74 08                	je     c002025e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0020256:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c002025e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0020265:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c002026c:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0020274:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c002027c:	83 ec 04             	sub    esp,0x4
c002027f:	52                   	push   edx
c0020280:	50                   	push   eax
c0020281:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020285:	50                   	push   eax
c0020286:	e8 a1 66 fe ff       	call   c000692c <f_chmod>
c002028b:	83 c4 10             	add    esp,0x10
c002028e:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0020295:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c002029c:	85 c0                	test   eax,eax
c002029e:	75 07                	jne    c00202a7 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c00202a0:	b8 00 00 00 00       	mov    eax,0x0
c00202a5:	eb 05                	jmp    c00202ac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00202a7:	b8 01 00 00 00       	mov    eax,0x1
c00202ac:	81 c4 2c 01 00 00    	add    esp,0x12c
c00202b2:	c3                   	ret    
c00202b3:	90                   	nop

c00202b4 <FAT::rename(char const*, char const*)>:
c00202b4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00202ba:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00202c2:	74 0a                	je     c00202ce <FAT::rename(char const*, char const*)+0x1a>
c00202c4:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00202cc:	75 0a                	jne    c00202d8 <FAT::rename(char const*, char const*)+0x24>
c00202ce:	b8 04 00 00 00       	mov    eax,0x4
c00202d3:	e9 98 00 00 00       	jmp    c0020370 <FAT::rename(char const*, char const*)+0xbc>
c00202d8:	83 ec 08             	sub    esp,0x8
c00202db:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00202e2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00202e9:	50                   	push   eax
c00202ea:	e8 3b 04 fe ff       	call   c000072a <strcpy>
c00202ef:	83 c4 10             	add    esp,0x10
c00202f2:	83 ec 08             	sub    esp,0x8
c00202f5:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00202fc:	50                   	push   eax
c00202fd:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020304:	e8 ed fa ff ff       	call   c001fdf6 <FAT::fixFilepath(char*)>
c0020309:	83 c4 10             	add    esp,0x10
c002030c:	83 ec 08             	sub    esp,0x8
c002030f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0020316:	8d 44 24 18          	lea    eax,[esp+0x18]
c002031a:	50                   	push   eax
c002031b:	e8 0a 04 fe ff       	call   c000072a <strcpy>
c0020320:	83 c4 10             	add    esp,0x10
c0020323:	83 ec 08             	sub    esp,0x8
c0020326:	8d 44 24 14          	lea    eax,[esp+0x14]
c002032a:	50                   	push   eax
c002032b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020332:	e8 bf fa ff ff       	call   c001fdf6 <FAT::fixFilepath(char*)>
c0020337:	83 c4 10             	add    esp,0x10
c002033a:	83 ec 08             	sub    esp,0x8
c002033d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020341:	50                   	push   eax
c0020342:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020349:	50                   	push   eax
c002034a:	e8 ea 62 fe ff       	call   c0006639 <f_rename>
c002034f:	83 c4 10             	add    esp,0x10
c0020352:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0020359:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0020360:	85 c0                	test   eax,eax
c0020362:	75 07                	jne    c002036b <FAT::rename(char const*, char const*)+0xb7>
c0020364:	b8 00 00 00 00       	mov    eax,0x0
c0020369:	eb 05                	jmp    c0020370 <FAT::rename(char const*, char const*)+0xbc>
c002036b:	b8 01 00 00 00       	mov    eax,0x1
c0020370:	81 c4 1c 02 00 00    	add    esp,0x21c
c0020376:	c3                   	ret    
c0020377:	90                   	nop

c0020378 <FAT::mkdir(char const*)>:
c0020378:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002037e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020386:	75 07                	jne    c002038f <FAT::mkdir(char const*)+0x17>
c0020388:	b8 04 00 00 00       	mov    eax,0x4
c002038d:	eb 5c                	jmp    c00203eb <FAT::mkdir(char const*)+0x73>
c002038f:	83 ec 08             	sub    esp,0x8
c0020392:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020399:	8d 44 24 18          	lea    eax,[esp+0x18]
c002039d:	50                   	push   eax
c002039e:	e8 87 03 fe ff       	call   c000072a <strcpy>
c00203a3:	83 c4 10             	add    esp,0x10
c00203a6:	83 ec 08             	sub    esp,0x8
c00203a9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00203ad:	50                   	push   eax
c00203ae:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00203b5:	e8 3c fa ff ff       	call   c001fdf6 <FAT::fixFilepath(char*)>
c00203ba:	83 c4 10             	add    esp,0x10
c00203bd:	83 ec 0c             	sub    esp,0xc
c00203c0:	8d 44 24 18          	lea    eax,[esp+0x18]
c00203c4:	50                   	push   eax
c00203c5:	e8 43 60 fe ff       	call   c000640d <f_mkdir>
c00203ca:	83 c4 10             	add    esp,0x10
c00203cd:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00203d4:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00203db:	85 c0                	test   eax,eax
c00203dd:	75 07                	jne    c00203e6 <FAT::mkdir(char const*)+0x6e>
c00203df:	b8 00 00 00 00       	mov    eax,0x0
c00203e4:	eb 05                	jmp    c00203eb <FAT::mkdir(char const*)+0x73>
c00203e6:	b8 01 00 00 00       	mov    eax,0x1
c00203eb:	81 c4 1c 01 00 00    	add    esp,0x11c
c00203f1:	c3                   	ret    

c00203f2 <FAT::exists(char const*)>:
c00203f2:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00203f8:	83 ec 08             	sub    esp,0x8
c00203fb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020402:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020406:	50                   	push   eax
c0020407:	e8 1e 03 fe ff       	call   c000072a <strcpy>
c002040c:	83 c4 10             	add    esp,0x10
c002040f:	83 ec 08             	sub    esp,0x8
c0020412:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020416:	50                   	push   eax
c0020417:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002041e:	e8 d3 f9 ff ff       	call   c001fdf6 <FAT::fixFilepath(char*)>
c0020423:	83 c4 10             	add    esp,0x10
c0020426:	83 ec 08             	sub    esp,0x8
c0020429:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0020430:	50                   	push   eax
c0020431:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020435:	50                   	push   eax
c0020436:	e8 fd 5a fe ff       	call   c0005f38 <f_stat>
c002043b:	83 c4 10             	add    esp,0x10
c002043e:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020445:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c002044c:	85 c0                	test   eax,eax
c002044e:	75 04                	jne    c0020454 <FAT::exists(char const*)+0x62>
c0020450:	b0 01                	mov    al,0x1
c0020452:	eb 02                	jmp    c0020456 <FAT::exists(char const*)+0x64>
c0020454:	b0 00                	mov    al,0x0
c0020456:	81 c4 2c 02 00 00    	add    esp,0x22c
c002045c:	c3                   	ret    
c002045d:	90                   	nop

c002045e <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c002045e:	b8 08 00 00 00       	mov    eax,0x8
c0020463:	c3                   	ret    

c0020464 <ISO9660::seek(void*, unsigned long long)>:
c0020464:	53                   	push   ebx
c0020465:	b8 04 00 00 00       	mov    eax,0x4
c002046a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002046e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020472:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020476:	85 d2                	test   edx,edx
c0020478:	74 17                	je     c0020491 <ISO9660::seek(void*, unsigned long long)+0x2d>
c002047a:	89 c8                	mov    eax,ecx
c002047c:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c002047f:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0020482:	b8 01 00 00 00       	mov    eax,0x1
c0020487:	73 08                	jae    c0020491 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020489:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c002048c:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c002048f:	31 c0                	xor    eax,eax
c0020491:	5b                   	pop    ebx
c0020492:	c3                   	ret    
c0020493:	90                   	nop

c0020494 <ISO9660::tell(void*, unsigned long long*)>:
c0020494:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020498:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002049c:	85 d2                	test   edx,edx
c002049e:	74 12                	je     c00204b2 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00204a0:	85 c0                	test   eax,eax
c00204a2:	74 0e                	je     c00204b2 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00204a4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00204a7:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c00204aa:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00204ad:	89 10                	mov    DWORD PTR [eax],edx
c00204af:	31 c0                	xor    eax,eax
c00204b1:	c3                   	ret    
c00204b2:	b8 04 00 00 00       	mov    eax,0x4
c00204b7:	c3                   	ret    

c00204b8 <ISO9660::getName()>:
c00204b8:	b8 6c ad 02 c0       	mov    eax,0xc002ad6c
c00204bd:	c3                   	ret    

c00204be <ISO9660::stat(void*, unsigned long long*)>:
c00204be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00204c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00204c6:	85 d2                	test   edx,edx
c00204c8:	74 12                	je     c00204dc <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00204ca:	85 c0                	test   eax,eax
c00204cc:	74 0e                	je     c00204dc <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00204ce:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00204d1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00204d4:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00204d7:	89 10                	mov    DWORD PTR [eax],edx
c00204d9:	31 c0                	xor    eax,eax
c00204db:	c3                   	ret    
c00204dc:	b8 04 00 00 00       	mov    eax,0x4
c00204e1:	c3                   	ret    

c00204e2 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00204e2:	b8 01 00 00 00       	mov    eax,0x1
c00204e7:	c3                   	ret    

c00204e8 <ISO9660::unlink(char const*)>:
c00204e8:	b8 01 00 00 00       	mov    eax,0x1
c00204ed:	c3                   	ret    

c00204ee <ISO9660::write(void*, unsigned long, void*, int*)>:
c00204ee:	b8 01 00 00 00       	mov    eax,0x1
c00204f3:	c3                   	ret    

c00204f4 <ISO9660::rename(char const*, char const*)>:
c00204f4:	b8 01 00 00 00       	mov    eax,0x1
c00204f9:	c3                   	ret    

c00204fa <ISO9660::mkdir(char const*)>:
c00204fa:	b8 01 00 00 00       	mov    eax,0x1
c00204ff:	c3                   	ret    

c0020500 <ISO9660::close(void*)>:
c0020500:	83 ec 0c             	sub    esp,0xc
c0020503:	b8 04 00 00 00       	mov    eax,0x4
c0020508:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002050c:	85 d2                	test   edx,edx
c002050e:	74 0e                	je     c002051e <ISO9660::close(void*)+0x1e>
c0020510:	83 ec 0c             	sub    esp,0xc
c0020513:	52                   	push   edx
c0020514:	e8 cb ef fe ff       	call   c000f4e4 <free>
c0020519:	83 c4 10             	add    esp,0x10
c002051c:	31 c0                	xor    eax,eax
c002051e:	83 c4 0c             	add    esp,0xc
c0020521:	c3                   	ret    

c0020522 <ISO9660::closeDir(void*)>:
c0020522:	83 ec 0c             	sub    esp,0xc
c0020525:	b8 04 00 00 00       	mov    eax,0x4
c002052a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002052e:	85 d2                	test   edx,edx
c0020530:	74 0e                	je     c0020540 <ISO9660::closeDir(void*)+0x1e>
c0020532:	83 ec 0c             	sub    esp,0xc
c0020535:	52                   	push   edx
c0020536:	e8 a9 ef fe ff       	call   c000f4e4 <free>
c002053b:	83 c4 10             	add    esp,0x10
c002053e:	31 c0                	xor    eax,eax
c0020540:	83 c4 0c             	add    esp,0xc
c0020543:	c3                   	ret    

c0020544 <ISO9660::~ISO9660()>:
c0020544:	83 ec 0c             	sub    esp,0xc
c0020547:	ba c0 ad 02 c0       	mov    edx,0xc002adc0
c002054c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020550:	89 10                	mov    DWORD PTR [eax],edx
c0020552:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020556:	83 ec 0c             	sub    esp,0xc
c0020559:	50                   	push   eax
c002055a:	e8 51 24 ff ff       	call   c00129b0 <Filesystem::~Filesystem()>
c002055f:	83 c4 10             	add    esp,0x10
c0020562:	90                   	nop
c0020563:	83 c4 0c             	add    esp,0xc
c0020566:	c3                   	ret    
c0020567:	90                   	nop

c0020568 <ISO9660::~ISO9660()>:
c0020568:	83 ec 0c             	sub    esp,0xc
c002056b:	83 ec 0c             	sub    esp,0xc
c002056e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020572:	e8 cd ff ff ff       	call   c0020544 <ISO9660::~ISO9660()>
c0020577:	83 c4 10             	add    esp,0x10
c002057a:	83 ec 08             	sub    esp,0x8
c002057d:	6a 08                	push   0x8
c002057f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020583:	e8 1f 20 ff ff       	call   c00125a7 <operator delete(void*, unsigned long)>
c0020588:	83 c4 10             	add    esp,0x10
c002058b:	83 c4 0c             	add    esp,0xc
c002058e:	c3                   	ret    

c002058f <__memmem(unsigned char*, int, unsigned char*, int)>:
c002058f:	55                   	push   ebp
c0020590:	31 c9                	xor    ecx,ecx
c0020592:	57                   	push   edi
c0020593:	56                   	push   esi
c0020594:	53                   	push   ebx
c0020595:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0020599:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c002059d:	89 eb                	mov    ebx,ebp
c002059f:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c00205a3:	39 ce                	cmp    esi,ecx
c00205a5:	7e 17                	jle    c00205be <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c00205a7:	31 d2                	xor    edx,edx
c00205a9:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c00205ad:	7d 13                	jge    c00205c2 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c00205af:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00205b3:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00205b6:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c00205b9:	75 0d                	jne    c00205c8 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c00205bb:	42                   	inc    edx
c00205bc:	eb eb                	jmp    c00205a9 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c00205be:	31 c0                	xor    eax,eax
c00205c0:	eb 0a                	jmp    c00205cc <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00205c2:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00205c6:	eb 04                	jmp    c00205cc <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00205c8:	41                   	inc    ecx
c00205c9:	43                   	inc    ebx
c00205ca:	eb d7                	jmp    c00205a3 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c00205cc:	5b                   	pop    ebx
c00205cd:	5e                   	pop    esi
c00205ce:	5f                   	pop    edi
c00205cf:	5d                   	pop    ebp
c00205d0:	c3                   	ret    

c00205d1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00205d1:	56                   	push   esi
c00205d2:	53                   	push   ebx
c00205d3:	52                   	push   edx
c00205d4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00205d8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00205dc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00205e0:	39 0d 60 df 02 c0    	cmp    DWORD PTR ds:0xc002df60,ecx
c00205e6:	75 08                	jne    c00205f0 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c00205e8:	38 05 d4 bd 02 c0    	cmp    BYTE PTR ds:0xc002bdd4,al
c00205ee:	74 2b                	je     c002061b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c00205f0:	83 ec 0c             	sub    esp,0xc
c00205f3:	a2 d4 bd 02 c0       	mov    ds:0xc002bdd4,al
c00205f8:	68 80 df 02 c0       	push   0xc002df80
c00205fd:	0f be c0             	movsx  eax,al
c0020600:	6a 01                	push   0x1
c0020602:	89 0d 60 df 02 c0    	mov    DWORD PTR ds:0xc002df60,ecx
c0020608:	31 db                	xor    ebx,ebx
c002060a:	53                   	push   ebx
c002060b:	51                   	push   ecx
c002060c:	ff 34 85 5c cd 02 c0 	push   DWORD PTR [eax*4-0x3ffd32a4]
c0020613:	e8 fc 56 ff ff       	call   c0015d14 <LogicalDisk::read(unsigned long long, int, void*)>
c0020618:	83 c4 20             	add    esp,0x20
c002061b:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0020623:	c7 44 24 14 80 df 02 c0 	mov    DWORD PTR [esp+0x14],0xc002df80
c002062b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c002062f:	58                   	pop    eax
c0020630:	5b                   	pop    ebx
c0020631:	5e                   	pop    esi
c0020632:	e9 1e 00 fe ff       	jmp    c0000655 <memcpy>
c0020637:	90                   	nop

c0020638 <ISO9660::tryMount(LogicalDisk*, int)>:
c0020638:	81 ec 10 08 00 00    	sub    esp,0x810
c002063e:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0020645:	83 c0 41             	add    eax,0x41
c0020648:	0f be c0             	movsx  eax,al
c002064b:	50                   	push   eax
c002064c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020650:	50                   	push   eax
c0020651:	6a 10                	push   0x10
c0020653:	e8 79 ff ff ff       	call   c00205d1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020658:	83 c4 10             	add    esp,0x10
c002065b:	31 c0                	xor    eax,eax
c002065d:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0020662:	75 1d                	jne    c0020681 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020664:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0020669:	75 16                	jne    c0020681 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002066b:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0020670:	75 0f                	jne    c0020681 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020672:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0020677:	75 08                	jne    c0020681 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020679:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c002067e:	0f 94 c0             	sete   al
c0020681:	81 c4 0c 08 00 00    	add    esp,0x80c
c0020687:	c3                   	ret    

c0020688 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0020688:	55                   	push   ebp
c0020689:	57                   	push   edi
c002068a:	56                   	push   esi
c002068b:	53                   	push   ebx
c002068c:	81 ec 34 08 00 00    	sub    esp,0x834
c0020692:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c0020699:	55                   	push   ebp
c002069a:	68 87 ad 02 c0       	push   0xc002ad87
c002069f:	e8 e3 1f ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c00206a4:	83 c4 10             	add    esp,0x10
c00206a7:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c00206af:	0f 84 06 02 00 00    	je     c00208bb <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c00206b5:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c00206bd:	0f 84 f8 01 00 00    	je     c00208bb <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c00206c3:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c00206ca:	b8 01 00 00 00       	mov    eax,0x1
c00206cf:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c00206d3:	0f 85 e7 01 00 00    	jne    c00208c0 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c00206d9:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c00206dc:	31 d2                	xor    edx,edx
c00206de:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c00206e1:	89 e9                	mov    ecx,ebp
c00206e3:	89 d3                	mov    ebx,edx
c00206e5:	01 f1                	add    ecx,esi
c00206e7:	11 fb                	adc    ebx,edi
c00206e9:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00206ed:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00206f1:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c00206f8:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00206fb:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c00206fe:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0020702:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0020706:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002070a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002070e:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c0020712:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0020716:	72 19                	jb     c0020731 <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c0020718:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002071c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020720:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020724:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0020727:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002072b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002072f:	eb 13                	jmp    c0020744 <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c0020731:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020735:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020739:	29 f0                	sub    eax,esi
c002073b:	19 fa                	sbb    edx,edi
c002073d:	89 04 24             	mov    DWORD PTR [esp],eax
c0020740:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020744:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c002074b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c002074e:	8b 00                	mov    eax,DWORD PTR [eax]
c0020750:	53                   	push   ebx
c0020751:	0f a4 c2 0b          	shld   edx,eax,0xb
c0020755:	c1 e0 0b             	shl    eax,0xb
c0020758:	01 c6                	add    esi,eax
c002075a:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0020761:	11 d7                	adc    edi,edx
c0020763:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c0020767:	89 fa                	mov    edx,edi
c0020769:	50                   	push   eax
c002076a:	8d 44 24 28          	lea    eax,[esp+0x28]
c002076e:	50                   	push   eax
c002076f:	89 f0                	mov    eax,esi
c0020771:	0f ac d0 0b          	shrd   eax,edx,0xb
c0020775:	50                   	push   eax
c0020776:	e8 56 fe ff ff       	call   c00205d1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002077b:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0020782:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020786:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020789:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c002078d:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0020793:	83 c4 10             	add    esp,0x10
c0020796:	b8 00 08 00 00       	mov    eax,0x800
c002079b:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c002079f:	29 d0                	sub    eax,edx
c00207a1:	39 c1                	cmp    ecx,eax
c00207a3:	83 db 00             	sbb    ebx,0x0
c00207a6:	7d 19                	jge    c00207c1 <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c00207a8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00207ad:	75 16                	jne    c00207c5 <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c00207af:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00207b6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00207bc:	e9 f6 00 00 00       	jmp    c00208b7 <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c00207c1:	89 c5                	mov    ebp,eax
c00207c3:	eb 03                	jmp    c00207c8 <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c00207c5:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00207c8:	51                   	push   ecx
c00207c9:	55                   	push   ebp
c00207ca:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c00207ce:	50                   	push   eax
c00207cf:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c00207d6:	e8 7a fe fd ff       	call   c0000655 <memcpy>
c00207db:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00207df:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00207e3:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c00207ea:	01 e8                	add    eax,ebp
c00207ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00207f0:	89 e8                	mov    eax,ebp
c00207f2:	99                   	cdq    
c00207f3:	01 ee                	add    esi,ebp
c00207f5:	11 d7                	adc    edi,edx
c00207f7:	29 e9                	sub    ecx,ebp
c00207f9:	19 d3                	sbb    ebx,edx
c00207fb:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00207ff:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0020803:	83 c4 10             	add    esp,0x10
c0020806:	b8 ff 07 00 00       	mov    eax,0x7ff
c002080b:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c002080e:	b8 00 00 00 00       	mov    eax,0x0
c0020813:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0020817:	7d 3f                	jge    c0020858 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c0020819:	52                   	push   edx
c002081a:	89 fa                	mov    edx,edi
c002081c:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0020823:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c0020827:	50                   	push   eax
c0020828:	89 f0                	mov    eax,esi
c002082a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002082e:	0f ac d0 0b          	shrd   eax,edx,0xb
c0020832:	50                   	push   eax
c0020833:	e8 99 fd ff ff       	call   c00205d1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020838:	81 c6 00 08 00 00    	add    esi,0x800
c002083e:	83 d7 00             	adc    edi,0x0
c0020841:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0020849:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0020851:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0020856:	eb ab                	jmp    c0020803 <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c0020858:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002085c:	0b 04 24             	or     eax,DWORD PTR [esp]
c002085f:	74 34                	je     c0020895 <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c0020861:	89 fa                	mov    edx,edi
c0020863:	50                   	push   eax
c0020864:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c002086b:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c002086f:	50                   	push   eax
c0020870:	89 f0                	mov    eax,esi
c0020872:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0020876:	0f ac d0 0b          	shrd   eax,edx,0xb
c002087a:	55                   	push   ebp
c002087b:	50                   	push   eax
c002087c:	e8 50 fd ff ff       	call   c00205d1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020881:	83 c4 0c             	add    esp,0xc
c0020884:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0020888:	55                   	push   ebp
c0020889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002088d:	e8 c3 fd fd ff       	call   c0000655 <memcpy>
c0020892:	83 c4 10             	add    esp,0x10
c0020895:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c002089c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00208a0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00208a4:	89 38                	mov    DWORD PTR [eax],edi
c00208a6:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c00208ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00208b1:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c00208b4:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c00208b7:	31 c0                	xor    eax,eax
c00208b9:	eb 05                	jmp    c00208c0 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c00208bb:	b8 04 00 00 00       	mov    eax,0x4
c00208c0:	81 c4 2c 08 00 00    	add    esp,0x82c
c00208c6:	5b                   	pop    ebx
c00208c7:	5e                   	pop    esi
c00208c8:	5f                   	pop    edi
c00208c9:	5d                   	pop    ebp
c00208ca:	c3                   	ret    
c00208cb:	90                   	nop

c00208cc <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00208cc:	55                   	push   ebp
c00208cd:	57                   	push   edi
c00208ce:	56                   	push   esi
c00208cf:	53                   	push   ebx
c00208d0:	81 ec 5c 09 00 00    	sub    esp,0x95c
c00208d6:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c00208dd:	85 f6                	test   esi,esi
c00208df:	0f 84 64 02 00 00    	je     c0020b49 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c00208e5:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c00208ed:	0f 84 56 02 00 00    	je     c0020b49 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c00208f3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00208f6:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c00208f9:	75 0a                	jne    c0020905 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c00208fb:	b8 07 00 00 00       	mov    eax,0x7
c0020900:	e9 49 02 00 00       	jmp    c0020b4e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0020905:	50                   	push   eax
c0020906:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c002090a:	50                   	push   eax
c002090b:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0020912:	53                   	push   ebx
c0020913:	8b 06                	mov    eax,DWORD PTR [esi]
c0020915:	c1 e0 0b             	shl    eax,0xb
c0020918:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c002091b:	c1 e8 0b             	shr    eax,0xb
c002091e:	50                   	push   eax
c002091f:	e8 ad fc ff ff       	call   c00205d1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020924:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0020927:	83 c4 10             	add    esp,0x10
c002092a:	89 c1                	mov    ecx,eax
c002092c:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c002092f:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0020935:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0020938:	84 db                	test   bl,bl
c002093a:	0f 85 90 00 00 00    	jne    c00209d0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0020940:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0020946:	81 e7 ff 07 00 00    	and    edi,0x7ff
c002094c:	29 c7                	sub    edi,eax
c002094e:	89 fb                	mov    ebx,edi
c0020950:	c1 fb 1f             	sar    ebx,0x1f
c0020953:	01 f8                	add    eax,edi
c0020955:	11 da                	adc    edx,ebx
c0020957:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002095b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002095f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0020962:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0020965:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0020968:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c002096b:	89 04 24             	mov    DWORD PTR [esp],eax
c002096e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020972:	89 d8                	mov    eax,ebx
c0020974:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0020977:	ba 00 00 00 00       	mov    edx,0x0
c002097c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0020980:	b8 00 00 00 00       	mov    eax,0x0
c0020985:	73 0b                	jae    c0020992 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0020987:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002098a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002098e:	29 f8                	sub    eax,edi
c0020990:	19 da                	sbb    edx,ebx
c0020992:	89 d3                	mov    ebx,edx
c0020994:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0020997:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c002099a:	09 c3                	or     ebx,eax
c002099c:	0f 84 59 ff ff ff    	je     c00208fb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c00209a2:	55                   	push   ebp
c00209a3:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c00209a7:	50                   	push   eax
c00209a8:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00209af:	53                   	push   ebx
c00209b0:	8b 06                	mov    eax,DWORD PTR [esi]
c00209b2:	c1 e0 0b             	shl    eax,0xb
c00209b5:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c00209b9:	c1 e8 0b             	shr    eax,0xb
c00209bc:	50                   	push   eax
c00209bd:	e8 0f fc ff ff       	call   c00205d1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00209c2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00209c5:	83 c4 10             	add    esp,0x10
c00209c8:	25 ff 07 00 00       	and    eax,0x7ff
c00209cd:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c00209d0:	57                   	push   edi
c00209d1:	6a 28                	push   0x28
c00209d3:	6a 00                	push   0x0
c00209d5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00209d9:	50                   	push   eax
c00209da:	e8 ac fc fd ff       	call   c000068b <memset>
c00209df:	31 d2                	xor    edx,edx
c00209e1:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c00209e4:	81 e7 ff 07 00 00    	and    edi,0x7ff
c00209ea:	89 f8                	mov    eax,edi
c00209ec:	83 c0 21             	add    eax,0x21
c00209ef:	83 d2 00             	adc    edx,0x0
c00209f2:	89 c7                	mov    edi,eax
c00209f4:	89 d5                	mov    ebp,edx
c00209f6:	83 c4 10             	add    esp,0x10
c00209f9:	31 c9                	xor    ecx,ecx
c00209fb:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0020a02:	83 f9 28             	cmp    ecx,0x28
c0020a05:	88 04 24             	mov    BYTE PTR [esp],al
c0020a08:	0f 94 c2             	sete   dl
c0020a0b:	88 d0                	mov    al,dl
c0020a0d:	ba ff 07 00 00       	mov    edx,0x7ff
c0020a12:	39 fa                	cmp    edx,edi
c0020a14:	ba 00 00 00 00       	mov    edx,0x0
c0020a19:	19 ea                	sbb    edx,ebp
c0020a1b:	0f 92 c2             	setb   dl
c0020a1e:	09 c2                	or     edx,eax
c0020a20:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0020a24:	0f 94 c0             	sete   al
c0020a27:	08 d0                	or     al,dl
c0020a29:	75 16                	jne    c0020a41 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0020a2b:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0020a2f:	74 10                	je     c0020a41 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0020a31:	8a 04 24             	mov    al,BYTE PTR [esp]
c0020a34:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0020a38:	41                   	inc    ecx
c0020a39:	83 c7 01             	add    edi,0x1
c0020a3c:	83 d5 00             	adc    ebp,0x0
c0020a3f:	eb ba                	jmp    c00209fb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0020a41:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0020a48:	83 ec 0c             	sub    esp,0xc
c0020a4b:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0020a4f:	57                   	push   edi
c0020a50:	e8 53 fc fd ff       	call   c00006a8 <strlen>
c0020a55:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0020a5d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0020a61:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0020a68:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0020a6b:	5a                   	pop    edx
c0020a6c:	25 ff 07 00 00       	and    eax,0x7ff
c0020a71:	01 c8                	add    eax,ecx
c0020a73:	59                   	pop    ecx
c0020a74:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0020a7a:	83 e0 02             	and    eax,0x2
c0020a7d:	3c 01                	cmp    al,0x1
c0020a7f:	19 c0                	sbb    eax,eax
c0020a81:	83 c0 02             	add    eax,0x2
c0020a84:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0020a88:	57                   	push   edi
c0020a89:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0020a8d:	50                   	push   eax
c0020a8e:	e8 97 fc fd ff       	call   c000072a <strcpy>
c0020a93:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0020a97:	83 c4 10             	add    esp,0x10
c0020a9a:	84 c0                	test   al,al
c0020a9c:	75 21                	jne    c0020abf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0020a9e:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0020aa6:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0020aae:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0020ab6:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0020abd:	eb 28                	jmp    c0020ae7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0020abf:	fe c8                	dec    al
c0020ac1:	75 24                	jne    c0020ae7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0020ac3:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0020acb:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0020ad3:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0020adb:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0020ae2:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0020ae7:	0f b6 fb             	movzx  edi,bl
c0020aea:	31 db                	xor    ebx,ebx
c0020aec:	50                   	push   eax
c0020aed:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0020af4:	8d 44 24 48          	lea    eax,[esp+0x48]
c0020af8:	50                   	push   eax
c0020af9:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0020b00:	e8 50 fb fd ff       	call   c0000655 <memcpy>
c0020b05:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0020b0c:	89 f9                	mov    ecx,edi
c0020b0e:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020b14:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0020b17:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0020b1a:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0020b1d:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0020b20:	83 c4 10             	add    esp,0x10
c0020b23:	39 c7                	cmp    edi,eax
c0020b25:	89 df                	mov    edi,ebx
c0020b27:	19 d7                	sbb    edi,edx
c0020b29:	72 10                	jb     c0020b3b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0020b2b:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0020b32:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0020b39:	eb 0a                	jmp    c0020b45 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0020b3b:	29 c8                	sub    eax,ecx
c0020b3d:	19 da                	sbb    edx,ebx
c0020b3f:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0020b42:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0020b45:	31 c0                	xor    eax,eax
c0020b47:	eb 05                	jmp    c0020b4e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0020b49:	b8 04 00 00 00       	mov    eax,0x4
c0020b4e:	81 c4 5c 09 00 00    	add    esp,0x95c
c0020b54:	5b                   	pop    ebx
c0020b55:	5e                   	pop    esi
c0020b56:	5f                   	pop    edi
c0020b57:	5d                   	pop    ebp
c0020b58:	c3                   	ret    

c0020b59 <readRoot(unsigned int*, unsigned int*, char)>:
c0020b59:	81 ec 40 08 00 00    	sub    esp,0x840
c0020b5f:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0020b67:	50                   	push   eax
c0020b68:	8d 44 24 38          	lea    eax,[esp+0x38]
c0020b6c:	50                   	push   eax
c0020b6d:	6a 10                	push   0x10
c0020b6f:	e8 5d fa ff ff       	call   c00205d1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020b74:	83 c4 0c             	add    esp,0xc
c0020b77:	6a 22                	push   0x22
c0020b79:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0020b80:	50                   	push   eax
c0020b81:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0020b85:	50                   	push   eax
c0020b86:	e8 ca fa fd ff       	call   c0000655 <memcpy>
c0020b8b:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0020b92:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0020b96:	89 10                	mov    DWORD PTR [eax],edx
c0020b98:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0020b9f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020ba3:	89 10                	mov    DWORD PTR [eax],edx
c0020ba5:	b0 01                	mov    al,0x1
c0020ba7:	81 c4 4c 08 00 00    	add    esp,0x84c
c0020bad:	c3                   	ret    

c0020bae <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0020bae:	55                   	push   ebp
c0020baf:	57                   	push   edi
c0020bb0:	56                   	push   esi
c0020bb1:	53                   	push   ebx
c0020bb2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020bb8:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0020bbf:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0020bc6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020bca:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0020bce:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0020bd2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020bd6:	75 03                	jne    c0020bdb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0020bd8:	83 c3 02             	add    ebx,0x2
c0020bdb:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0020bde:	75 03                	jne    c0020be3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0020be0:	43                   	inc    ebx
c0020be1:	eb f8                	jmp    c0020bdb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0020be3:	51                   	push   ecx
c0020be4:	68 00 01 00 00       	push   0x100
c0020be9:	6a 00                	push   0x0
c0020beb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020bef:	50                   	push   eax
c0020bf0:	e8 96 fa fd ff       	call   c000068b <memset>
c0020bf5:	83 c4 10             	add    esp,0x10
c0020bf8:	31 d2                	xor    edx,edx
c0020bfa:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0020bfd:	84 c0                	test   al,al
c0020bff:	74 21                	je     c0020c22 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0020c01:	3c 2f                	cmp    al,0x2f
c0020c03:	75 0b                	jne    c0020c10 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0020c05:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0020c09:	bd 01 00 00 00       	mov    ebp,0x1
c0020c0e:	eb 14                	jmp    c0020c24 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0020c10:	8d 48 9f             	lea    ecx,[eax-0x61]
c0020c13:	80 f9 19             	cmp    cl,0x19
c0020c16:	77 03                	ja     c0020c1b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0020c18:	83 e8 20             	sub    eax,0x20
c0020c1b:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0020c1f:	42                   	inc    edx
c0020c20:	eb d8                	jmp    c0020bfa <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0020c22:	31 ed                	xor    ebp,ebp
c0020c24:	83 ec 0c             	sub    esp,0xc
c0020c27:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0020c2e:	e8 a1 e8 fe ff       	call   c000f4d4 <malloc>
c0020c33:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0020c3a:	89 c6                	mov    esi,eax
c0020c3c:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0020c42:	c1 ef 0b             	shr    edi,0xb
c0020c45:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0020c4c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0020c50:	83 c4 10             	add    esp,0x10
c0020c53:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0020c58:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020c5c:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0020c63:	74 28                	je     c0020c8d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0020c65:	52                   	push   edx
c0020c66:	57                   	push   edi
c0020c67:	50                   	push   eax
c0020c68:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020c6c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0020c73:	e8 59 f9 ff ff       	call   c00205d1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020c78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020c7c:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0020c83:	05 00 08 00 00       	add    eax,0x800
c0020c88:	83 c4 10             	add    esp,0x10
c0020c8b:	eb cb                	jmp    c0020c58 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0020c8d:	83 ec 0c             	sub    esp,0xc
c0020c90:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0020c94:	57                   	push   edi
c0020c95:	e8 0e fa fd ff       	call   c00006a8 <strlen>
c0020c9a:	50                   	push   eax
c0020c9b:	57                   	push   edi
c0020c9c:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0020ca3:	56                   	push   esi
c0020ca4:	e8 e6 f8 ff ff       	call   c002058f <__memmem(unsigned char*, int, unsigned char*, int)>
c0020ca9:	83 c4 20             	add    esp,0x20
c0020cac:	85 c0                	test   eax,eax
c0020cae:	75 13                	jne    c0020cc3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0020cb0:	83 ec 0c             	sub    esp,0xc
c0020cb3:	56                   	push   esi
c0020cb4:	e8 2b e8 fe ff       	call   c000f4e4 <free>
c0020cb9:	83 c4 10             	add    esp,0x10
c0020cbc:	31 c0                	xor    eax,eax
c0020cbe:	e9 b3 00 00 00       	jmp    c0020d76 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0020cc3:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0020cc7:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0020ccb:	c1 e7 08             	shl    edi,0x8
c0020cce:	c1 e2 10             	shl    edx,0x10
c0020cd1:	09 d7                	or     edi,edx
c0020cd3:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0020cd7:	09 d7                	or     edi,edx
c0020cd9:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0020cdd:	c1 e2 18             	shl    edx,0x18
c0020ce0:	09 d7                	or     edi,edx
c0020ce2:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0020ce6:	89 d1                	mov    ecx,edx
c0020ce8:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0020cec:	c1 e1 08             	shl    ecx,0x8
c0020cef:	c1 e2 10             	shl    edx,0x10
c0020cf2:	09 ca                	or     edx,ecx
c0020cf4:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0020cf8:	09 ca                	or     edx,ecx
c0020cfa:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0020cfe:	c1 e1 18             	shl    ecx,0x18
c0020d01:	09 ca                	or     edx,ecx
c0020d03:	89 e9                	mov    ecx,ebp
c0020d05:	84 c9                	test   cl,cl
c0020d07:	74 3c                	je     c0020d45 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0020d09:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020d0d:	83 ec 0c             	sub    esp,0xc
c0020d10:	56                   	push   esi
c0020d11:	e8 ce e7 fe ff       	call   c000f4e4 <free>
c0020d16:	83 c4 0c             	add    esp,0xc
c0020d19:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0020d20:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0020d25:	50                   	push   eax
c0020d26:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0020d2d:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0020d34:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020d38:	52                   	push   edx
c0020d39:	57                   	push   edi
c0020d3a:	53                   	push   ebx
c0020d3b:	e8 6e fe ff ff       	call   c0020bae <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0020d40:	83 c4 20             	add    esp,0x20
c0020d43:	eb 31                	jmp    c0020d76 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0020d45:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0020d48:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0020d4f:	d0 e8                	shr    al,1
c0020d51:	89 3b                	mov    DWORD PTR [ebx],edi
c0020d53:	83 e0 01             	and    eax,0x1
c0020d56:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0020d5d:	83 ec 0c             	sub    esp,0xc
c0020d60:	89 13                	mov    DWORD PTR [ebx],edx
c0020d62:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0020d69:	89 03                	mov    DWORD PTR [ebx],eax
c0020d6b:	56                   	push   esi
c0020d6c:	e8 73 e7 fe ff       	call   c000f4e4 <free>
c0020d71:	83 c4 10             	add    esp,0x10
c0020d74:	b0 01                	mov    al,0x1
c0020d76:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020d7c:	5b                   	pop    ebx
c0020d7d:	5e                   	pop    esi
c0020d7e:	5f                   	pop    edi
c0020d7f:	5d                   	pop    ebp
c0020d80:	c3                   	ret    

c0020d81 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0020d81:	55                   	push   ebp
c0020d82:	57                   	push   edi
c0020d83:	56                   	push   esi
c0020d84:	53                   	push   ebx
c0020d85:	83 ec 20             	sub    esp,0x20
c0020d88:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0020d8c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0020d90:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0020d94:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020d9c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0020da4:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0020da9:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0020daf:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0020db5:	57                   	push   edi
c0020db6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020dba:	50                   	push   eax
c0020dbb:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020dbf:	50                   	push   eax
c0020dc0:	e8 94 fd ff ff       	call   c0020b59 <readRoot(unsigned int*, unsigned int*, char)>
c0020dc5:	5a                   	pop    edx
c0020dc6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020dca:	e8 d9 f8 fd ff       	call   c00006a8 <strlen>
c0020dcf:	83 c4 10             	add    esp,0x10
c0020dd2:	83 f8 03             	cmp    eax,0x3
c0020dd5:	77 17                	ja     c0020dee <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0020dd7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020ddb:	89 03                	mov    DWORD PTR [ebx],eax
c0020ddd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020de1:	89 06                	mov    DWORD PTR [esi],eax
c0020de3:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0020dea:	b0 01                	mov    al,0x1
c0020dec:	eb 19                	jmp    c0020e07 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0020dee:	50                   	push   eax
c0020def:	55                   	push   ebp
c0020df0:	57                   	push   edi
c0020df1:	56                   	push   esi
c0020df2:	53                   	push   ebx
c0020df3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0020df7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0020dfb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0020dff:	e8 aa fd ff ff       	call   c0020bae <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0020e04:	83 c4 20             	add    esp,0x20
c0020e07:	83 c4 1c             	add    esp,0x1c
c0020e0a:	5b                   	pop    ebx
c0020e0b:	5e                   	pop    esi
c0020e0c:	5f                   	pop    edi
c0020e0d:	5d                   	pop    ebp
c0020e0e:	c3                   	ret    
c0020e0f:	90                   	nop

c0020e10 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0020e10:	57                   	push   edi
c0020e11:	56                   	push   esi
c0020e12:	53                   	push   ebx
c0020e13:	83 ec 10             	sub    esp,0x10
c0020e16:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0020e1a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0020e1e:	85 ff                	test   edi,edi
c0020e20:	74 7b                	je     c0020e9d <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c0020e22:	85 f6                	test   esi,esi
c0020e24:	74 77                	je     c0020e9d <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c0020e26:	83 ec 0c             	sub    esp,0xc
c0020e29:	6a 1c                	push   0x1c
c0020e2b:	e8 a4 e6 fe ff       	call   c000f4d4 <malloc>
c0020e30:	89 07                	mov    DWORD PTR [edi],eax
c0020e32:	89 c3                	mov    ebx,eax
c0020e34:	58                   	pop    eax
c0020e35:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020e39:	50                   	push   eax
c0020e3a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0020e3d:	50                   	push   eax
c0020e3e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020e42:	50                   	push   eax
c0020e43:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020e47:	50                   	push   eax
c0020e48:	56                   	push   esi
c0020e49:	e8 33 ff ff ff       	call   c0020d81 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0020e4e:	83 c4 20             	add    esp,0x20
c0020e51:	84 c0                	test   al,al
c0020e53:	74 07                	je     c0020e5c <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c0020e55:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020e5a:	74 0b                	je     c0020e67 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0020e5c:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0020e60:	b8 01 00 00 00       	mov    eax,0x1
c0020e65:	eb 3b                	jmp    c0020ea2 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c0020e67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020e6b:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0020e6f:	89 03                	mov    DWORD PTR [ebx],eax
c0020e71:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0020e78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e7c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0020e83:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0020e8a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0020e8d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0020e94:	8a 06                	mov    al,BYTE PTR [esi]
c0020e96:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0020e99:	31 c0                	xor    eax,eax
c0020e9b:	eb 05                	jmp    c0020ea2 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c0020e9d:	b8 04 00 00 00       	mov    eax,0x4
c0020ea2:	83 c4 10             	add    esp,0x10
c0020ea5:	5b                   	pop    ebx
c0020ea6:	5e                   	pop    esi
c0020ea7:	5f                   	pop    edi
c0020ea8:	c3                   	ret    
c0020ea9:	90                   	nop

c0020eaa <ISO9660::exists(char const*)>:
c0020eaa:	83 ec 28             	sub    esp,0x28
c0020ead:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020eb1:	8d 54 24 18          	lea    edx,[esp+0x18]
c0020eb5:	52                   	push   edx
c0020eb6:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0020eb9:	52                   	push   edx
c0020eba:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020ebe:	52                   	push   edx
c0020ebf:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020ec3:	52                   	push   edx
c0020ec4:	50                   	push   eax
c0020ec5:	e8 b7 fe ff ff       	call   c0020d81 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0020eca:	83 c4 3c             	add    esp,0x3c
c0020ecd:	c3                   	ret    

c0020ece <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0020ece:	56                   	push   esi
c0020ecf:	53                   	push   ebx
c0020ed0:	83 ec 14             	sub    esp,0x14
c0020ed3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0020ed7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0020edb:	85 db                	test   ebx,ebx
c0020edd:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0020ee1:	0f 94 c2             	sete   dl
c0020ee4:	85 f6                	test   esi,esi
c0020ee6:	0f 94 c0             	sete   al
c0020ee9:	08 c2                	or     dl,al
c0020eeb:	75 68                	jne    c0020f55 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0020eed:	85 c9                	test   ecx,ecx
c0020eef:	74 64                	je     c0020f55 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0020ef1:	83 ec 0c             	sub    esp,0xc
c0020ef4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0020ef7:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020efb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0020f01:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0020f08:	50                   	push   eax
c0020f09:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0020f0c:	50                   	push   eax
c0020f0d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020f11:	50                   	push   eax
c0020f12:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020f16:	50                   	push   eax
c0020f17:	51                   	push   ecx
c0020f18:	e8 64 fe ff ff       	call   c0020d81 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0020f1d:	83 c4 20             	add    esp,0x20
c0020f20:	ba 01 00 00 00       	mov    edx,0x1
c0020f25:	84 c0                	test   al,al
c0020f27:	74 31                	je     c0020f5a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0020f29:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f2d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0020f34:	89 03                	mov    DWORD PTR [ebx],eax
c0020f36:	ba 00 00 00 00       	mov    edx,0x0
c0020f3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f3f:	85 c0                	test   eax,eax
c0020f41:	0f 95 06             	setne  BYTE PTR [esi]
c0020f44:	74 14                	je     c0020f5a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0020f46:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0020f4c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0020f53:	eb 05                	jmp    c0020f5a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0020f55:	ba 04 00 00 00       	mov    edx,0x4
c0020f5a:	83 c4 14             	add    esp,0x14
c0020f5d:	89 d0                	mov    eax,edx
c0020f5f:	5b                   	pop    ebx
c0020f60:	5e                   	pop    esi
c0020f61:	c3                   	ret    

c0020f62 <ISO9660::openDir(char const*, void**)>:
c0020f62:	57                   	push   edi
c0020f63:	56                   	push   esi
c0020f64:	53                   	push   ebx
c0020f65:	83 ec 10             	sub    esp,0x10
c0020f68:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0020f6c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0020f70:	85 ff                	test   edi,edi
c0020f72:	0f 84 95 00 00 00    	je     c002100d <ISO9660::openDir(char const*, void**)+0xab>
c0020f78:	85 f6                	test   esi,esi
c0020f7a:	0f 84 8d 00 00 00    	je     c002100d <ISO9660::openDir(char const*, void**)+0xab>
c0020f80:	83 ec 0c             	sub    esp,0xc
c0020f83:	6a 1c                	push   0x1c
c0020f85:	e8 4a e5 fe ff       	call   c000f4d4 <malloc>
c0020f8a:	89 07                	mov    DWORD PTR [edi],eax
c0020f8c:	89 c3                	mov    ebx,eax
c0020f8e:	59                   	pop    ecx
c0020f8f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020f93:	50                   	push   eax
c0020f94:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0020f97:	50                   	push   eax
c0020f98:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020f9c:	50                   	push   eax
c0020f9d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020fa1:	50                   	push   eax
c0020fa2:	56                   	push   esi
c0020fa3:	e8 d9 fd ff ff       	call   c0020d81 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0020fa8:	83 c4 20             	add    esp,0x20
c0020fab:	84 c0                	test   al,al
c0020fad:	74 07                	je     c0020fb6 <ISO9660::openDir(char const*, void**)+0x54>
c0020faf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020fb4:	75 21                	jne    c0020fd7 <ISO9660::openDir(char const*, void**)+0x75>
c0020fb6:	0f b6 c0             	movzx  eax,al
c0020fb9:	52                   	push   edx
c0020fba:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020fbe:	50                   	push   eax
c0020fbf:	68 9a ad 02 c0       	push   0xc002ad9a
c0020fc4:	e8 be 16 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0020fc9:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0020fcd:	83 c4 10             	add    esp,0x10
c0020fd0:	b8 01 00 00 00       	mov    eax,0x1
c0020fd5:	eb 3b                	jmp    c0021012 <ISO9660::openDir(char const*, void**)+0xb0>
c0020fd7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020fdb:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0020fdf:	89 03                	mov    DWORD PTR [ebx],eax
c0020fe1:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0020fe8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0020ff3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0020ffa:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0020ffd:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021004:	8a 06                	mov    al,BYTE PTR [esi]
c0021006:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021009:	31 c0                	xor    eax,eax
c002100b:	eb 05                	jmp    c0021012 <ISO9660::openDir(char const*, void**)+0xb0>
c002100d:	b8 04 00 00 00       	mov    eax,0x4
c0021012:	83 c4 10             	add    esp,0x10
c0021015:	5b                   	pop    ebx
c0021016:	5e                   	pop    esi
c0021017:	5f                   	pop    edi
c0021018:	c3                   	ret    
c0021019:	90                   	nop

c002101a <ISO9660::ISO9660()>:
c002101a:	83 ec 0c             	sub    esp,0xc
c002101d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021021:	83 ec 0c             	sub    esp,0xc
c0021024:	50                   	push   eax
c0021025:	e8 62 19 ff ff       	call   c001298c <Filesystem::Filesystem()>
c002102a:	83 c4 10             	add    esp,0x10
c002102d:	ba c0 ad 02 c0       	mov    edx,0xc002adc0
c0021032:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021036:	89 10                	mov    DWORD PTR [eax],edx
c0021038:	90                   	nop
c0021039:	83 c4 0c             	add    esp,0xc
c002103c:	c3                   	ret    
c002103d:	90                   	nop

c002103e <SoundChannel::~SoundChannel()>:
c002103e:	83 ec 0c             	sub    esp,0xc
c0021041:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021045:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0021048:	83 ec 0c             	sub    esp,0xc
c002104b:	50                   	push   eax
c002104c:	e8 93 e4 fe ff       	call   c000f4e4 <free>
c0021051:	83 c4 10             	add    esp,0x10
c0021054:	90                   	nop
c0021055:	83 c4 0c             	add    esp,0xc
c0021058:	c3                   	ret    
c0021059:	90                   	nop

c002105a <SoundChannel::setSpeed(float)>:
c002105a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002105e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021062:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0021065:	c3                   	ret    

c0021066 <SoundChannel::getSpeed()>:
c0021066:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002106a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c002106d:	c3                   	ret    

c002106e <SoundChannel::setVolume(int)>:
c002106e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021072:	83 f8 64             	cmp    eax,0x64
c0021075:	7e 05                	jle    c002107c <SoundChannel::setVolume(int)+0xe>
c0021077:	b8 64 00 00 00       	mov    eax,0x64
c002107c:	85 c0                	test   eax,eax
c002107e:	79 02                	jns    c0021082 <SoundChannel::setVolume(int)+0x14>
c0021080:	31 c0                	xor    eax,eax
c0021082:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021086:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0021089:	c3                   	ret    

c002108a <SoundChannel::getVolume()>:
c002108a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002108e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0021091:	c3                   	ret    

c0021092 <SoundChannel::pause()>:
c0021092:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021096:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c002109a:	c3                   	ret    
c002109b:	90                   	nop

c002109c <SoundChannel::SoundChannel(int, int, int, int)>:
c002109c:	83 ec 1c             	sub    esp,0x1c
c002109f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00210a3:	e8 ea ff ff ff       	call   c0021092 <SoundChannel::pause()>
c00210a8:	83 c4 04             	add    esp,0x4
c00210ab:	6a 50                	push   0x50
c00210ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00210b1:	e8 b8 ff ff ff       	call   c002106e <SoundChannel::setVolume(int)>
c00210b6:	83 c4 08             	add    esp,0x8
c00210b9:	a1 38 ae 02 c0       	mov    eax,ds:0xc002ae38
c00210be:	50                   	push   eax
c00210bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00210c3:	e8 92 ff ff ff       	call   c002105a <SoundChannel::setSpeed(float)>
c00210c8:	83 c4 08             	add    esp,0x8
c00210cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00210cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00210d3:	89 10                	mov    DWORD PTR [eax],edx
c00210d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00210d9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00210dd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00210e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00210e4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00210e8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00210eb:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c00210f0:	75 23                	jne    c0021115 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c00210f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00210f6:	8b 10                	mov    edx,DWORD PTR [eax]
c00210f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00210fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00210ff:	0f af c2             	imul   eax,edx
c0021102:	85 c0                	test   eax,eax
c0021104:	79 03                	jns    c0021109 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0021106:	83 c0 03             	add    eax,0x3
c0021109:	c1 f8 02             	sar    eax,0x2
c002110c:	05 a0 0f 00 00       	add    eax,0xfa0
c0021111:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021115:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021119:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002111d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0021120:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021124:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c002112b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002112f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0021136:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002113a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c002113d:	c1 e0 02             	shl    eax,0x2
c0021140:	83 ec 0c             	sub    esp,0xc
c0021143:	50                   	push   eax
c0021144:	e8 8b e3 fe ff       	call   c000f4d4 <malloc>
c0021149:	83 c4 10             	add    esp,0x10
c002114c:	89 c2                	mov    edx,eax
c002114e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021152:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0021155:	83 ec 04             	sub    esp,0x4
c0021158:	8d 44 24 08          	lea    eax,[esp+0x8]
c002115c:	50                   	push   eax
c002115d:	6a 01                	push   0x1
c002115f:	6a 04                	push   0x4
c0021161:	e8 e9 77 fe ff       	call   c000894f <src_new>
c0021166:	83 c4 10             	add    esp,0x10
c0021169:	89 c2                	mov    edx,eax
c002116b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002116f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0021172:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021176:	85 c0                	test   eax,eax
c0021178:	74 10                	je     c002118a <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c002117a:	83 ec 0c             	sub    esp,0xc
c002117d:	68 1c ae 02 c0       	push   0xc002ae1c
c0021182:	e8 1a 86 ff ff       	call   c00197a1 <Krnl::panic(char const*)>
c0021187:	83 c4 10             	add    esp,0x10
c002118a:	a0 80 eb 02 c0       	mov    al,ds:0xc002eb80
c002118f:	83 f0 01             	xor    eax,0x1
c0021192:	84 c0                	test   al,al
c0021194:	74 57                	je     c00211ed <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0021196:	a1 3c ae 02 c0       	mov    eax,ds:0xc002ae3c
c002119b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002119f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00211a7:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00211af:	7f 35                	jg     c00211e6 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c00211b1:	83 ec 0c             	sub    esp,0xc
c00211b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00211b8:	e8 2a 4a 00 00       	call   c0025be7 <__floatsisf>
c00211bd:	83 c4 10             	add    esp,0x10
c00211c0:	8b 15 3c ae 02 c0    	mov    edx,DWORD PTR ds:0xc002ae3c
c00211c6:	83 ec 08             	sub    esp,0x8
c00211c9:	52                   	push   edx
c00211ca:	50                   	push   eax
c00211cb:	e8 29 46 00 00       	call   c00257f9 <__mulsf3>
c00211d0:	83 c4 10             	add    esp,0x10
c00211d3:	89 c2                	mov    edx,eax
c00211d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00211d9:	89 14 85 80 e7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1880],edx
c00211e0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00211e4:	eb c1                	jmp    c00211a7 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c00211e6:	c6 05 80 eb 02 c0 01 	mov    BYTE PTR ds:0xc002eb80,0x1
c00211ed:	90                   	nop
c00211ee:	83 c4 1c             	add    esp,0x1c
c00211f1:	c3                   	ret    

c00211f2 <SoundChannel::play()>:
c00211f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00211f6:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c00211fa:	c3                   	ret    
c00211fb:	90                   	nop

c00211fc <SoundChannel::paused()>:
c00211fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021200:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0021203:	c3                   	ret    

c0021204 <SoundChannel::getSampleRate()>:
c0021204:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021208:	8b 00                	mov    eax,DWORD PTR [eax]
c002120a:	c3                   	ret    
c002120b:	90                   	nop

c002120c <SoundChannel::getBits()>:
c002120c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021210:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021213:	c3                   	ret    

c0021214 <SoundChannel::getBufferUsed()>:
c0021214:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021218:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c002121b:	c3                   	ret    

c002121c <SoundChannel::getBufferSize()>:
c002121c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021220:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021223:	c3                   	ret    

c0021224 <SoundChannel::unbuffer(float*, int, int)>:
c0021224:	56                   	push   esi
c0021225:	53                   	push   ebx
c0021226:	83 ec 40             	sub    esp,0x40
c0021229:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c002122d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0021230:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021234:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0021237:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002123b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002123f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0021243:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0021247:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002124b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c002124f:	e8 93 49 00 00       	call   c0025be7 <__floatsisf>
c0021254:	5a                   	pop    edx
c0021255:	89 c6                	mov    esi,eax
c0021257:	ff 33                	push   DWORD PTR [ebx]
c0021259:	e8 89 49 00 00       	call   c0025be7 <__floatsisf>
c002125e:	59                   	pop    ecx
c002125f:	5a                   	pop    edx
c0021260:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0021263:	50                   	push   eax
c0021264:	e8 90 45 00 00       	call   c00257f9 <__mulsf3>
c0021269:	59                   	pop    ecx
c002126a:	5a                   	pop    edx
c002126b:	50                   	push   eax
c002126c:	56                   	push   esi
c002126d:	e8 4a 47 00 00       	call   c00259bc <__divsf3>
c0021272:	89 04 24             	mov    DWORD PTR [esp],eax
c0021275:	e8 3d 5c 00 00       	call   c0026eb7 <__extendsfdf2>
c002127a:	59                   	pop    ecx
c002127b:	5e                   	pop    esi
c002127c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021280:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0021284:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c002128c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021290:	50                   	push   eax
c0021291:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0021294:	e8 ab 72 fe ff       	call   c0008544 <src_process>
c0021299:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002129d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00212a0:	83 c4 0c             	add    esp,0xc
c00212a3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00212a6:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c00212a9:	29 d0                	sub    eax,edx
c00212ab:	c1 e0 02             	shl    eax,0x2
c00212ae:	50                   	push   eax
c00212af:	8d 04 91             	lea    eax,[ecx+edx*4]
c00212b2:	50                   	push   eax
c00212b3:	51                   	push   ecx
c00212b4:	e8 64 f3 fd ff       	call   c000061d <memmove>
c00212b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00212bd:	83 c4 44             	add    esp,0x44
c00212c0:	5b                   	pop    ebx
c00212c1:	5e                   	pop    esi
c00212c2:	c3                   	ret    
c00212c3:	90                   	nop

c00212c4 <SoundChannel::buffer8(unsigned char*, int)>:
c00212c4:	55                   	push   ebp
c00212c5:	57                   	push   edi
c00212c6:	56                   	push   esi
c00212c7:	53                   	push   ebx
c00212c8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00212cc:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00212d0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00212d3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00212d7:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00212da:	74 7a                	je     c0021356 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00212dc:	85 ff                	test   edi,edi
c00212de:	7e 76                	jle    c0021356 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00212e0:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c00212e4:	8d 70 01             	lea    esi,[eax+0x1]
c00212e7:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00212ea:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00212ed:	8b 1c 9d 80 e7 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd1880]
c00212f4:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00212f7:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00212fa:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00212fd:	74 5e                	je     c002135d <SoundChannel::buffer8(unsigned char*, int)+0x99>
c00212ff:	83 ff 01             	cmp    edi,0x1
c0021302:	74 4b                	je     c002134f <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0021304:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0021308:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c002130b:	8d 70 01             	lea    esi,[eax+0x1]
c002130e:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021311:	8b 1c 9d 80 e7 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd1880]
c0021318:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c002131b:	b8 02 00 00 00       	mov    eax,0x2
c0021320:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021323:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021326:	75 23                	jne    c002134b <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0021328:	eb 27                	jmp    c0021351 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c002132a:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c002132f:	8d 71 01             	lea    esi,[ecx+0x1]
c0021332:	40                   	inc    eax
c0021333:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021336:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0021339:	8b 1c 9d 80 e7 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd1880]
c0021340:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0021343:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021346:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021349:	74 06                	je     c0021351 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c002134b:	39 c7                	cmp    edi,eax
c002134d:	75 db                	jne    c002132a <SoundChannel::buffer8(unsigned char*, int)+0x66>
c002134f:	89 f8                	mov    eax,edi
c0021351:	5b                   	pop    ebx
c0021352:	5e                   	pop    esi
c0021353:	5f                   	pop    edi
c0021354:	5d                   	pop    ebp
c0021355:	c3                   	ret    
c0021356:	5b                   	pop    ebx
c0021357:	31 c0                	xor    eax,eax
c0021359:	5e                   	pop    esi
c002135a:	5f                   	pop    edi
c002135b:	5d                   	pop    ebp
c002135c:	c3                   	ret    
c002135d:	b8 01 00 00 00       	mov    eax,0x1
c0021362:	eb ed                	jmp    c0021351 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0021364 <SoundDevice::SoundDevice(char const*)>:
c0021364:	83 ec 1c             	sub    esp,0x1c
c0021367:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002136b:	83 ec 08             	sub    esp,0x8
c002136e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021372:	50                   	push   eax
c0021373:	e8 ee 28 ff ff       	call   c0013c66 <Device::Device(char const*)>
c0021378:	83 c4 10             	add    esp,0x10
c002137b:	ba 48 ae 02 c0       	mov    edx,0xc002ae48
c0021380:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021384:	89 10                	mov    DWORD PTR [eax],edx
c0021386:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002138a:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0021394:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021398:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00213a2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00213aa:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00213af:	7f 19                	jg     c00213ca <SoundDevice::SoundDevice(char const*)+0x66>
c00213b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00213b5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00213b9:	83 c2 54             	add    edx,0x54
c00213bc:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c00213c4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00213c8:	eb e0                	jmp    c00213aa <SoundDevice::SoundDevice(char const*)+0x46>
c00213ca:	90                   	nop
c00213cb:	83 c4 1c             	add    esp,0x1c
c00213ce:	c3                   	ret    
c00213cf:	90                   	nop

c00213d0 <SoundDevice::~SoundDevice()>:
c00213d0:	53                   	push   ebx
c00213d1:	83 ec 18             	sub    esp,0x18
c00213d4:	ba 48 ae 02 c0       	mov    edx,0xc002ae48
c00213d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00213dd:	89 10                	mov    DWORD PTR [eax],edx
c00213df:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00213e7:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00213ec:	7f 46                	jg     c0021434 <SoundDevice::~SoundDevice()+0x64>
c00213ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00213f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00213f6:	83 c2 54             	add    edx,0x54
c00213f9:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c00213fd:	85 c0                	test   eax,eax
c00213ff:	74 2d                	je     c002142e <SoundDevice::~SoundDevice()+0x5e>
c0021401:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021405:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021409:	83 c2 54             	add    edx,0x54
c002140c:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0021410:	85 db                	test   ebx,ebx
c0021412:	74 1a                	je     c002142e <SoundDevice::~SoundDevice()+0x5e>
c0021414:	83 ec 0c             	sub    esp,0xc
c0021417:	53                   	push   ebx
c0021418:	e8 21 fc ff ff       	call   c002103e <SoundChannel::~SoundChannel()>
c002141d:	83 c4 10             	add    esp,0x10
c0021420:	83 ec 08             	sub    esp,0x8
c0021423:	6a 2c                	push   0x2c
c0021425:	53                   	push   ebx
c0021426:	e8 7c 11 ff ff       	call   c00125a7 <operator delete(void*, unsigned long)>
c002142b:	83 c4 10             	add    esp,0x10
c002142e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021432:	eb b3                	jmp    c00213e7 <SoundDevice::~SoundDevice()+0x17>
c0021434:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021438:	83 ec 0c             	sub    esp,0xc
c002143b:	50                   	push   eax
c002143c:	e8 07 25 ff ff       	call   c0013948 <Device::~Device()>
c0021441:	83 c4 10             	add    esp,0x10
c0021444:	90                   	nop
c0021445:	83 c4 18             	add    esp,0x18
c0021448:	5b                   	pop    ebx
c0021449:	c3                   	ret    

c002144a <SoundDevice::~SoundDevice()>:
c002144a:	83 ec 0c             	sub    esp,0xc
c002144d:	83 ec 0c             	sub    esp,0xc
c0021450:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021454:	e8 77 ff ff ff       	call   c00213d0 <SoundDevice::~SoundDevice()>
c0021459:	83 c4 10             	add    esp,0x10
c002145c:	83 ec 08             	sub    esp,0x8
c002145f:	68 e4 01 00 00       	push   0x1e4
c0021464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021468:	e8 3a 11 ff ff       	call   c00125a7 <operator delete(void*, unsigned long)>
c002146d:	83 c4 10             	add    esp,0x10
c0021470:	83 c4 0c             	add    esp,0xc
c0021473:	c3                   	ret    

c0021474 <SoundDevice::getFreeChannelNum()>:
c0021474:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021478:	31 c0                	xor    eax,eax
c002147a:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0021482:	74 09                	je     c002148d <SoundDevice::getFreeChannelNum()+0x19>
c0021484:	40                   	inc    eax
c0021485:	83 f8 20             	cmp    eax,0x20
c0021488:	75 f0                	jne    c002147a <SoundDevice::getFreeChannelNum()+0x6>
c002148a:	83 c8 ff             	or     eax,0xffffffff
c002148d:	c3                   	ret    

c002148e <SoundDevice::addChannel(SoundChannel*)>:
c002148e:	56                   	push   esi
c002148f:	53                   	push   ebx
c0021490:	51                   	push   ecx
c0021491:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021495:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021499:	53                   	push   ebx
c002149a:	e8 d5 ff ff ff       	call   c0021474 <SoundDevice::getFreeChannelNum()>
c002149f:	5a                   	pop    edx
c00214a0:	83 f8 ff             	cmp    eax,0xffffffff
c00214a3:	74 51                	je     c00214f6 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00214a5:	85 f6                	test   esi,esi
c00214a7:	74 4d                	je     c00214f6 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00214a9:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c00214b0:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c00214b7:	75 30                	jne    c00214e9 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c00214b9:	83 ec 0c             	sub    esp,0xc
c00214bc:	56                   	push   esi
c00214bd:	e8 42 fd ff ff       	call   c0021204 <SoundChannel::getSampleRate()>
c00214c2:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c00214c8:	89 34 24             	mov    DWORD PTR [esp],esi
c00214cb:	e8 3c fd ff ff       	call   c002120c <SoundChannel::getBits()>
c00214d0:	83 c4 0c             	add    esp,0xc
c00214d3:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c00214d9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00214db:	50                   	push   eax
c00214dc:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00214e2:	53                   	push   ebx
c00214e3:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00214e6:	83 c4 10             	add    esp,0x10
c00214e9:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c00214ef:	b8 01 00 00 00       	mov    eax,0x1
c00214f4:	eb 03                	jmp    c00214f9 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c00214f6:	83 c8 ff             	or     eax,0xffffffff
c00214f9:	5a                   	pop    edx
c00214fa:	5b                   	pop    ebx
c00214fb:	5e                   	pop    esi
c00214fc:	c3                   	ret    
c00214fd:	90                   	nop

c00214fe <SoundDevice::removeChannel(int)>:
c00214fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021502:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021506:	83 fa 1f             	cmp    edx,0x1f
c0021509:	77 23                	ja     c002152e <SoundDevice::removeChannel(int)+0x30>
c002150b:	8d 14 90             	lea    edx,[eax+edx*4]
c002150e:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0021515:	74 17                	je     c002152e <SoundDevice::removeChannel(int)+0x30>
c0021517:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0021521:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0021527:	75 05                	jne    c002152e <SoundDevice::removeChannel(int)+0x30>
c0021529:	8b 00                	mov    eax,DWORD PTR [eax]
c002152b:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c002152e:	c3                   	ret    
c002152f:	90                   	nop

c0021530 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0021530:	57                   	push   edi
c0021531:	56                   	push   esi
c0021532:	53                   	push   ebx
c0021533:	31 db                	xor    ebx,ebx
c0021535:	83 ec 10             	sub    esp,0x10
c0021538:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c002153c:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0021540:	0f 8d cb 00 00 00    	jge    c0021611 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0021546:	83 ec 0c             	sub    esp,0xc
c0021549:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002154d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0021550:	e8 62 59 00 00       	call   c0026eb7 <__extendsfdf2>
c0021555:	83 c4 10             	add    esp,0x10
c0021558:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002155c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021560:	68 00 00 f0 3f       	push   0x3ff00000
c0021565:	6a 00                	push   0x0
c0021567:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002156b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002156f:	e8 cf 48 00 00       	call   c0025e43 <__adddf3>
c0021574:	83 c4 10             	add    esp,0x10
c0021577:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002157b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002157f:	68 00 00 e0 3f       	push   0x3fe00000
c0021584:	6a 00                	push   0x0
c0021586:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002158a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002158e:	e8 2d 4f 00 00       	call   c00264c0 <__muldf3>
c0021593:	83 c4 10             	add    esp,0x10
c0021596:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002159a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002159e:	68 00 00 60 40       	push   0x40600000
c00215a3:	6a 00                	push   0x0
c00215a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00215a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00215ad:	e8 0e 4f 00 00       	call   c00264c0 <__muldf3>
c00215b2:	59                   	pop    ecx
c00215b3:	5f                   	pop    edi
c00215b4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00215b8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00215bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00215c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00215c4:	e8 ca 57 00 00       	call   c0026d93 <__truncdfsf2>
c00215c9:	5a                   	pop    edx
c00215ca:	89 c7                	mov    edi,eax
c00215cc:	59                   	pop    ecx
c00215cd:	68 00 00 fe 42       	push   0x42fe0000
c00215d2:	50                   	push   eax
c00215d3:	e8 65 48 00 00       	call   c0025e3d <__gesf2>
c00215d8:	83 c4 10             	add    esp,0x10
c00215db:	85 c0                	test   eax,eax
c00215dd:	78 06                	js     c00215e5 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c00215df:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c00215e3:	eb 26                	jmp    c002160b <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00215e5:	50                   	push   eax
c00215e6:	50                   	push   eax
c00215e7:	6a 00                	push   0x0
c00215e9:	57                   	push   edi
c00215ea:	e8 52 48 00 00       	call   c0025e41 <__lesf2>
c00215ef:	83 c4 10             	add    esp,0x10
c00215f2:	85 c0                	test   eax,eax
c00215f4:	7f 06                	jg     c00215fc <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c00215f6:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c00215fa:	eb 0f                	jmp    c002160b <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00215fc:	83 ec 0c             	sub    esp,0xc
c00215ff:	57                   	push   edi
c0021600:	e8 47 59 00 00       	call   c0026f4c <lrintf>
c0021605:	83 c4 10             	add    esp,0x10
c0021608:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c002160b:	43                   	inc    ebx
c002160c:	e9 2b ff ff ff       	jmp    c002153c <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0021611:	83 c4 10             	add    esp,0x10
c0021614:	5b                   	pop    ebx
c0021615:	5e                   	pop    esi
c0021616:	5f                   	pop    edi
c0021617:	c3                   	ret    

c0021618 <SoundDevice::getAudio(int, float*, float*)>:
c0021618:	55                   	push   ebp
c0021619:	57                   	push   edi
c002161a:	56                   	push   esi
c002161b:	53                   	push   ebx
c002161c:	31 db                	xor    ebx,ebx
c002161e:	83 ec 20             	sub    esp,0x20
c0021621:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021625:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0021629:	c1 e0 02             	shl    eax,0x2
c002162c:	50                   	push   eax
c002162d:	6a 00                	push   0x0
c002162f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0021633:	e8 53 f0 fd ff       	call   c000068b <memset>
c0021638:	83 c4 10             	add    esp,0x10
c002163b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002163f:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c0021646:	85 c0                	test   eax,eax
c0021648:	0f 84 d7 00 00 00    	je     c0021725 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002164e:	83 ec 0c             	sub    esp,0xc
c0021651:	50                   	push   eax
c0021652:	e8 a5 fb ff ff       	call   c00211fc <SoundChannel::paused()>
c0021657:	83 c4 10             	add    esp,0x10
c002165a:	84 c0                	test   al,al
c002165c:	0f 85 c3 00 00 00    	jne    c0021725 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021662:	83 ec 0c             	sub    esp,0xc
c0021665:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002166c:	e8 19 fa ff ff       	call   c002108a <SoundChannel::getVolume()>
c0021671:	83 c4 10             	add    esp,0x10
c0021674:	85 c0                	test   eax,eax
c0021676:	0f 84 a9 00 00 00    	je     c0021725 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002167c:	83 ec 0c             	sub    esp,0xc
c002167f:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0021686:	e8 ff f9 ff ff       	call   c002108a <SoundChannel::getVolume()>
c002168b:	83 ec 0c             	sub    esp,0xc
c002168e:	50                   	push   eax
c002168f:	e8 53 45 00 00       	call   c0025be7 <__floatsisf>
c0021694:	59                   	pop    ecx
c0021695:	5d                   	pop    ebp
c0021696:	31 ed                	xor    ebp,ebp
c0021698:	68 00 00 c8 42       	push   0x42c80000
c002169d:	50                   	push   eax
c002169e:	e8 19 43 00 00       	call   c00259bc <__divsf3>
c00216a3:	83 c4 10             	add    esp,0x10
c00216a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00216aa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00216ae:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c00216b4:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00216b8:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00216bf:	e8 60 fb ff ff       	call   c0021224 <SoundChannel::unbuffer(float*, int, int)>
c00216c4:	83 c4 20             	add    esp,0x20
c00216c7:	89 c1                	mov    ecx,eax
c00216c9:	39 cd                	cmp    ebp,ecx
c00216cb:	7d 52                	jge    c002171f <SoundDevice::getAudio(int, float*, float*)+0x107>
c00216cd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00216d1:	50                   	push   eax
c00216d2:	50                   	push   eax
c00216d3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00216d7:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00216da:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00216de:	e8 16 41 00 00       	call   c00257f9 <__mulsf3>
c00216e3:	5a                   	pop    edx
c00216e4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00216e8:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c00216ee:	e8 f4 44 00 00       	call   c0025be7 <__floatsisf>
c00216f3:	59                   	pop    ecx
c00216f4:	5a                   	pop    edx
c00216f5:	50                   	push   eax
c00216f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00216fa:	e8 bd 42 00 00       	call   c00259bc <__divsf3>
c00216ff:	59                   	pop    ecx
c0021700:	5a                   	pop    edx
c0021701:	50                   	push   eax
c0021702:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0021706:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0021709:	e8 c8 3d 00 00       	call   c00254d6 <__addsf3>
c002170e:	83 c4 10             	add    esp,0x10
c0021711:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021715:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021719:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c002171c:	45                   	inc    ebp
c002171d:	eb aa                	jmp    c00216c9 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c002171f:	39 cf                	cmp    edi,ecx
c0021721:	7e 02                	jle    c0021725 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021723:	89 cf                	mov    edi,ecx
c0021725:	43                   	inc    ebx
c0021726:	83 fb 20             	cmp    ebx,0x20
c0021729:	0f 85 10 ff ff ff    	jne    c002163f <SoundDevice::getAudio(int, float*, float*)+0x27>
c002172f:	83 c4 1c             	add    esp,0x1c
c0021732:	89 f8                	mov    eax,edi
c0021734:	5b                   	pop    ebx
c0021735:	5e                   	pop    esi
c0021736:	5f                   	pop    edi
c0021737:	5d                   	pop    ebp
c0021738:	c3                   	ret    
c0021739:	90                   	nop

c002173a <PCI::open(int, int, void*)>:
c002173a:	83 ec 18             	sub    esp,0x18
c002173d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021741:	8b 10                	mov    edx,DWORD PTR [eax]
c0021743:	50                   	push   eax
c0021744:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0021747:	31 c0                	xor    eax,eax
c0021749:	83 c4 1c             	add    esp,0x1c
c002174c:	c3                   	ret    
c002174d:	90                   	nop

c002174e <PCI::close(int, int, void*)>:
c002174e:	31 c0                	xor    eax,eax
c0021750:	c3                   	ret    
c0021751:	90                   	nop

c0021752 <PCI::PCI()>:
c0021752:	83 ec 0c             	sub    esp,0xc
c0021755:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021759:	83 ec 08             	sub    esp,0x8
c002175c:	68 78 ae 02 c0       	push   0xc002ae78
c0021761:	50                   	push   eax
c0021762:	e8 bb 1b ff ff       	call   c0013322 <Bus::Bus(char const*)>
c0021767:	83 c4 10             	add    esp,0x10
c002176a:	ba e4 ae 02 c0       	mov    edx,0xc002aee4
c002176f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021773:	89 10                	mov    DWORD PTR [eax],edx
c0021775:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021779:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002177f:	0f b6 d0             	movzx  edx,al
c0021782:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021786:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c002178d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021791:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021797:	0f b6 d0             	movzx  edx,al
c002179a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002179e:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00217a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217a7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00217ad:	8d 50 01             	lea    edx,[eax+0x1]
c00217b0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00217b4:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00217ba:	0f b6 d0             	movzx  edx,al
c00217bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217c1:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00217c5:	83 c9 c0             	or     ecx,0xffffffc0
c00217c8:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00217cc:	90                   	nop
c00217cd:	83 c4 0c             	add    esp,0xc
c00217d0:	c3                   	ret    
c00217d1:	90                   	nop

c00217d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00217d2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00217d6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00217db:	89 ca                	mov    edx,ecx
c00217dd:	c1 e0 10             	shl    eax,0x10
c00217e0:	81 e2 fc 00 00 00    	and    edx,0xfc
c00217e6:	09 d0                	or     eax,edx
c00217e8:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00217ed:	c1 e2 08             	shl    edx,0x8
c00217f0:	09 d0                	or     eax,edx
c00217f2:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c00217f7:	c1 e2 0b             	shl    edx,0xb
c00217fa:	09 d0                	or     eax,edx
c00217fc:	ba f8 0c 00 00       	mov    edx,0xcf8
c0021801:	0d 00 00 00 80       	or     eax,0x80000000
c0021806:	ef                   	out    dx,eax
c0021807:	ba fc 0c 00 00       	mov    edx,0xcfc
c002180c:	ed                   	in     eax,dx
c002180d:	83 e1 02             	and    ecx,0x2
c0021810:	0f b6 c9             	movzx  ecx,cl
c0021813:	c1 e1 03             	shl    ecx,0x3
c0021816:	d3 e8                	shr    eax,cl
c0021818:	c3                   	ret    
c0021819:	90                   	nop

c002181a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c002181a:	6a 00                	push   0x0
c002181c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021821:	50                   	push   eax
c0021822:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021827:	50                   	push   eax
c0021828:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002182d:	50                   	push   eax
c002182e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021832:	e8 9b ff ff ff       	call   c00217d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021837:	83 c4 14             	add    esp,0x14
c002183a:	c3                   	ret    
c002183b:	90                   	nop

c002183c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c002183c:	6a 0e                	push   0xe
c002183e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021843:	50                   	push   eax
c0021844:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021849:	50                   	push   eax
c002184a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002184f:	50                   	push   eax
c0021850:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021854:	e8 79 ff ff ff       	call   c00217d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021859:	83 c4 14             	add    esp,0x14
c002185c:	0f b6 c0             	movzx  eax,al
c002185f:	c3                   	ret    

c0021860 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0021860:	55                   	push   ebp
c0021861:	57                   	push   edi
c0021862:	56                   	push   esi
c0021863:	53                   	push   ebx
c0021864:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0021869:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c002186e:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0021873:	6a 0a                	push   0xa
c0021875:	56                   	push   esi
c0021876:	55                   	push   ebp
c0021877:	57                   	push   edi
c0021878:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002187c:	e8 51 ff ff ff       	call   c00217d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021881:	6a 0a                	push   0xa
c0021883:	89 c3                	mov    ebx,eax
c0021885:	56                   	push   esi
c0021886:	0f b6 db             	movzx  ebx,bl
c0021889:	55                   	push   ebp
c002188a:	57                   	push   edi
c002188b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c002188f:	e8 3e ff ff ff       	call   c00217d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021894:	83 c4 28             	add    esp,0x28
c0021897:	25 00 ff 00 00       	and    eax,0xff00
c002189c:	09 d8                	or     eax,ebx
c002189e:	5b                   	pop    ebx
c002189f:	5e                   	pop    esi
c00218a0:	5f                   	pop    edi
c00218a1:	5d                   	pop    ebp
c00218a2:	c3                   	ret    
c00218a3:	90                   	nop

c00218a4 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00218a4:	6a 08                	push   0x8
c00218a6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00218ab:	50                   	push   eax
c00218ac:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00218b1:	50                   	push   eax
c00218b2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00218b7:	50                   	push   eax
c00218b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00218bc:	e8 11 ff ff ff       	call   c00217d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00218c1:	83 c4 14             	add    esp,0x14
c00218c4:	0f b6 c4             	movzx  eax,ah
c00218c7:	c3                   	ret    

c00218c8 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c00218c8:	6a 08                	push   0x8
c00218ca:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00218cf:	50                   	push   eax
c00218d0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00218d5:	50                   	push   eax
c00218d6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00218db:	50                   	push   eax
c00218dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00218e0:	e8 ed fe ff ff       	call   c00217d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00218e5:	83 c4 14             	add    esp,0x14
c00218e8:	c3                   	ret    
c00218e9:	90                   	nop

c00218ea <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00218ea:	6a 3c                	push   0x3c
c00218ec:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00218f1:	50                   	push   eax
c00218f2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00218f7:	50                   	push   eax
c00218f8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00218fd:	50                   	push   eax
c00218fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021902:	e8 cb fe ff ff       	call   c00217d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021907:	83 c4 14             	add    esp,0x14
c002190a:	c3                   	ret    
c002190b:	90                   	nop

c002190c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c002190c:	6a 18                	push   0x18
c002190e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021913:	50                   	push   eax
c0021914:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021919:	50                   	push   eax
c002191a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002191f:	50                   	push   eax
c0021920:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021924:	e8 a9 fe ff ff       	call   c00217d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021929:	83 c4 14             	add    esp,0x14
c002192c:	0f b6 c4             	movzx  eax,ah
c002192f:	c3                   	ret    

c0021930 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0021930:	55                   	push   ebp
c0021931:	57                   	push   edi
c0021932:	56                   	push   esi
c0021933:	53                   	push   ebx
c0021934:	50                   	push   eax
c0021935:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0021939:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c002193e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0021943:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0021948:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c002194f:	8d 43 12             	lea    eax,[ebx+0x12]
c0021952:	83 c3 10             	add    ebx,0x10
c0021955:	0f b6 c0             	movzx  eax,al
c0021958:	0f b6 db             	movzx  ebx,bl
c002195b:	50                   	push   eax
c002195c:	51                   	push   ecx
c002195d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021961:	57                   	push   edi
c0021962:	55                   	push   ebp
c0021963:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0021967:	e8 66 fe ff ff       	call   c00217d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002196c:	53                   	push   ebx
c002196d:	89 c6                	mov    esi,eax
c002196f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021973:	c1 e6 10             	shl    esi,0x10
c0021976:	51                   	push   ecx
c0021977:	57                   	push   edi
c0021978:	55                   	push   ebp
c0021979:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002197d:	e8 50 fe ff ff       	call   c00217d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021982:	83 c4 2c             	add    esp,0x2c
c0021985:	0f b7 c0             	movzx  eax,ax
c0021988:	5b                   	pop    ebx
c0021989:	09 f0                	or     eax,esi
c002198b:	5e                   	pop    esi
c002198c:	5f                   	pop    edi
c002198d:	5d                   	pop    ebp
c002198e:	c3                   	ret    
c002198f:	90                   	nop

c0021990 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0021990:	53                   	push   ebx
c0021991:	ba f8 0c 00 00       	mov    edx,0xcf8
c0021996:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c002199b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002199f:	c1 e1 10             	shl    ecx,0x10
c00219a2:	25 fc 00 00 00       	and    eax,0xfc
c00219a7:	09 c1                	or     ecx,eax
c00219a9:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00219ae:	c1 e0 08             	shl    eax,0x8
c00219b1:	09 c1                	or     ecx,eax
c00219b3:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00219b8:	c1 e0 0b             	shl    eax,0xb
c00219bb:	09 c1                	or     ecx,eax
c00219bd:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00219c3:	89 c8                	mov    eax,ecx
c00219c5:	ef                   	out    dx,eax
c00219c6:	ba fc 0c 00 00       	mov    edx,0xcfc
c00219cb:	ed                   	in     eax,dx
c00219cc:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00219d1:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00219d6:	74 0a                	je     c00219e2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c00219d8:	0f b7 d8             	movzx  ebx,ax
c00219db:	89 d0                	mov    eax,edx
c00219dd:	c1 e0 10             	shl    eax,0x10
c00219e0:	eb 05                	jmp    c00219e7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c00219e2:	66 31 c0             	xor    ax,ax
c00219e5:	89 d3                	mov    ebx,edx
c00219e7:	09 c3                	or     ebx,eax
c00219e9:	ba f8 0c 00 00       	mov    edx,0xcf8
c00219ee:	89 c8                	mov    eax,ecx
c00219f0:	ef                   	out    dx,eax
c00219f1:	ba fc 0c 00 00       	mov    edx,0xcfc
c00219f6:	89 d8                	mov    eax,ebx
c00219f8:	ef                   	out    dx,eax
c00219f9:	5b                   	pop    ebx
c00219fa:	c3                   	ret    
c00219fb:	90                   	nop

c00219fc <PCI::checkBus(unsigned char)>:
c00219fc:	56                   	push   esi
c00219fd:	53                   	push   ebx
c00219fe:	31 db                	xor    ebx,ebx
c0021a00:	51                   	push   ecx
c0021a01:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0021a06:	52                   	push   edx
c0021a07:	53                   	push   ebx
c0021a08:	43                   	inc    ebx
c0021a09:	56                   	push   esi
c0021a0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a0e:	e8 2b 03 00 00       	call   c0021d3e <PCI::checkDevice(unsigned char, unsigned char)>
c0021a13:	83 c4 10             	add    esp,0x10
c0021a16:	83 fb 20             	cmp    ebx,0x20
c0021a19:	75 eb                	jne    c0021a06 <PCI::checkBus(unsigned char)+0xa>
c0021a1b:	58                   	pop    eax
c0021a1c:	5b                   	pop    ebx
c0021a1d:	5e                   	pop    esi
c0021a1e:	c3                   	ret    
c0021a1f:	90                   	nop

c0021a20 <PCI::foundDevice(PCIDeviceInfo)>:
c0021a20:	55                   	push   ebp
c0021a21:	57                   	push   edi
c0021a22:	56                   	push   esi
c0021a23:	53                   	push   ebx
c0021a24:	83 ec 1c             	sub    esp,0x1c
c0021a27:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0021a2b:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0021a31:	0f 84 52 01 00 00    	je     c0021b89 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0021a37:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0021a3b:	66 81 f9 06 04       	cmp    cx,0x406
c0021a40:	75 2c                	jne    c0021a6e <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0021a42:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0021a47:	50                   	push   eax
c0021a48:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0021a4d:	50                   	push   eax
c0021a4e:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0021a53:	50                   	push   eax
c0021a54:	56                   	push   esi
c0021a55:	e8 b2 fe ff ff       	call   c002190c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0021a5a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0021a5e:	0f b6 c0             	movzx  eax,al
c0021a61:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0021a65:	83 c4 2c             	add    esp,0x2c
c0021a68:	5b                   	pop    ebx
c0021a69:	5e                   	pop    esi
c0021a6a:	5f                   	pop    edi
c0021a6b:	5d                   	pop    ebp
c0021a6c:	eb 8e                	jmp    c00219fc <PCI::checkBus(unsigned char)>
c0021a6e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021a72:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0021a78:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021a7c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0021a80:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0021a84:	88 d3                	mov    bl,dl
c0021a86:	85 c0                	test   eax,eax
c0021a88:	74 33                	je     c0021abd <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0021a8a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0021a8d:	85 d2                	test   edx,edx
c0021a8f:	74 28                	je     c0021ab9 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0021a91:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0021a97:	31 ef                	xor    edi,ebp
c0021a99:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0021a9f:	75 18                	jne    c0021ab9 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0021aa1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021aa5:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0021aab:	75 0c                	jne    c0021ab9 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0021aad:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0021ab3:	0f 84 d0 00 00 00    	je     c0021b89 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0021ab9:	8b 00                	mov    eax,DWORD PTR [eax]
c0021abb:	eb c9                	jmp    c0021a86 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0021abd:	66 81 f9 01 06       	cmp    cx,0x601
c0021ac2:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0021ac6:	75 19                	jne    c0021ae1 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0021ac8:	83 ec 0c             	sub    esp,0xc
c0021acb:	68 64 01 00 00       	push   0x164
c0021ad0:	e8 ff d9 fe ff       	call   c000f4d4 <malloc>
c0021ad5:	89 c5                	mov    ebp,eax
c0021ad7:	89 04 24             	mov    DWORD PTR [esp],eax
c0021ada:	e8 95 0f 00 00       	call   c0022a74 <SATABus::SATABus()>
c0021adf:	eb 1e                	jmp    c0021aff <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0021ae1:	66 81 f9 01 01       	cmp    cx,0x101
c0021ae6:	75 60                	jne    c0021b48 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0021ae8:	83 ec 0c             	sub    esp,0xc
c0021aeb:	68 70 02 00 00       	push   0x270
c0021af0:	e8 df d9 fe ff       	call   c000f4d4 <malloc>
c0021af5:	89 c5                	mov    ebp,eax
c0021af7:	89 04 24             	mov    DWORD PTR [esp],eax
c0021afa:	e8 03 03 00 00       	call   c0021e02 <IDE::IDE()>
c0021aff:	58                   	pop    eax
c0021b00:	5a                   	pop    edx
c0021b01:	55                   	push   ebp
c0021b02:	56                   	push   esi
c0021b03:	e8 6e 1f ff ff       	call   c0013a76 <Device::addChild(Device*)>
c0021b08:	83 ec 1c             	sub    esp,0x1c
c0021b0b:	b9 09 00 00 00       	mov    ecx,0x9
c0021b10:	fc                   	cld    
c0021b11:	89 e7                	mov    edi,esp
c0021b13:	89 de                	mov    esi,ebx
c0021b15:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021b17:	55                   	push   ebp
c0021b18:	e8 63 1e ff ff       	call   c0013980 <Device::preOpenPCI(PCIDeviceInfo)>
c0021b1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021b20:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0021b24:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0021b2c:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0021b34:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0021b3c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021b3f:	83 c4 4c             	add    esp,0x4c
c0021b42:	5b                   	pop    ebx
c0021b43:	5e                   	pop    esi
c0021b44:	5f                   	pop    edi
c0021b45:	5d                   	pop    ebp
c0021b46:	ff e0                	jmp    eax
c0021b48:	83 ec 0c             	sub    esp,0xc
c0021b4b:	68 58 01 00 00       	push   0x158
c0021b50:	e8 7f d9 fe ff       	call   c000f4d4 <malloc>
c0021b55:	89 c5                	mov    ebp,eax
c0021b57:	58                   	pop    eax
c0021b58:	5a                   	pop    edx
c0021b59:	68 80 ae 02 c0       	push   0xc002ae80
c0021b5e:	55                   	push   ebp
c0021b5f:	e8 08 22 ff ff       	call   c0013d6c <DriverlessDevice::DriverlessDevice(char const*)>
c0021b64:	59                   	pop    ecx
c0021b65:	5f                   	pop    edi
c0021b66:	55                   	push   ebp
c0021b67:	56                   	push   esi
c0021b68:	e8 09 1f ff ff       	call   c0013a76 <Device::addChild(Device*)>
c0021b6d:	b9 09 00 00 00       	mov    ecx,0x9
c0021b72:	fc                   	cld    
c0021b73:	89 df                	mov    edi,ebx
c0021b75:	89 de                	mov    esi,ebx
c0021b77:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021b79:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0021b7d:	83 c4 2c             	add    esp,0x2c
c0021b80:	5b                   	pop    ebx
c0021b81:	5e                   	pop    esi
c0021b82:	5f                   	pop    edi
c0021b83:	5d                   	pop    ebp
c0021b84:	e9 f7 1d ff ff       	jmp    c0013980 <Device::preOpenPCI(PCIDeviceInfo)>
c0021b89:	83 c4 1c             	add    esp,0x1c
c0021b8c:	5b                   	pop    ebx
c0021b8d:	5e                   	pop    esi
c0021b8e:	5f                   	pop    edi
c0021b8f:	5d                   	pop    ebp
c0021b90:	c3                   	ret    
c0021b91:	90                   	nop

c0021b92 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0021b92:	55                   	push   ebp
c0021b93:	57                   	push   edi
c0021b94:	56                   	push   esi
c0021b95:	53                   	push   ebx
c0021b96:	83 ec 5c             	sub    esp,0x5c
c0021b99:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0021b9d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0021ba1:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0021ba5:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0021baa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021bae:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0021bb2:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0021bb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021bbb:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0021bc0:	6a 0c                	push   0xc
c0021bc2:	55                   	push   ebp
c0021bc3:	53                   	push   ebx
c0021bc4:	57                   	push   edi
c0021bc5:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0021bcc:	e8 01 fc ff ff       	call   c00217d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021bd1:	55                   	push   ebp
c0021bd2:	53                   	push   ebx
c0021bd3:	57                   	push   edi
c0021bd4:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0021bdb:	e8 80 fc ff ff       	call   c0021860 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0021be0:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0021be5:	83 c4 24             	add    esp,0x24
c0021be8:	55                   	push   ebp
c0021be9:	53                   	push   ebx
c0021bea:	57                   	push   edi
c0021beb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0021bef:	e8 f6 fc ff ff       	call   c00218ea <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0021bf4:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0021bf8:	6a 3c                	push   0x3c
c0021bfa:	55                   	push   ebp
c0021bfb:	53                   	push   ebx
c0021bfc:	57                   	push   edi
c0021bfd:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0021c04:	e8 c9 fb ff ff       	call   c00217d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021c09:	0f b6 c4             	movzx  eax,ah
c0021c0c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021c10:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0021c14:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0021c18:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0021c1d:	83 c4 24             	add    esp,0x24
c0021c20:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0021c26:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c0021c2d:	74 6c                	je     c0021c9b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0021c2f:	31 f6                	xor    esi,esi
c0021c31:	8b 15 48 c8 02 c0    	mov    edx,DWORD PTR ds:0xc002c848
c0021c37:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0021c3d:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c0021c43:	7e 56                	jle    c0021c9b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0021c45:	8d 14 f2             	lea    edx,[edx+esi*8]
c0021c48:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0021c4f:	39 cb                	cmp    ebx,ecx
c0021c51:	75 45                	jne    c0021c98 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0021c53:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0021c5a:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0021c5e:	75 38                	jne    c0021c98 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0021c60:	83 ec 0c             	sub    esp,0xc
c0021c63:	68 9a ae 02 c0       	push   0xc002ae9a
c0021c68:	e8 1a 0a ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0021c6d:	8b 15 48 c8 02 c0    	mov    edx,DWORD PTR ds:0xc002c848
c0021c73:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0021c79:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0021c81:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0021c85:	52                   	push   edx
c0021c86:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021c8a:	53                   	push   ebx
c0021c8b:	68 bf ae 02 c0       	push   0xc002aebf
c0021c90:	e8 f2 09 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0021c95:	83 c4 20             	add    esp,0x20
c0021c98:	46                   	inc    esi
c0021c99:	eb 96                	jmp    c0021c31 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0021c9b:	31 d2                	xor    edx,edx
c0021c9d:	83 ec 0c             	sub    esp,0xc
c0021ca0:	55                   	push   ebp
c0021ca1:	53                   	push   ebx
c0021ca2:	57                   	push   edi
c0021ca3:	52                   	push   edx
c0021ca4:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0021ca8:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0021caf:	e8 7c fc ff ff       	call   c0021930 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021cb4:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0021cb8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021cbc:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0021cc0:	42                   	inc    edx
c0021cc1:	83 c4 20             	add    esp,0x20
c0021cc4:	83 fa 06             	cmp    edx,0x6
c0021cc7:	75 d4                	jne    c0021c9d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0021cc9:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0021ccd:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0021cd1:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0021cd5:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0021cd9:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0021cdd:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0021ce1:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0021ce6:	86 e0                	xchg   al,ah
c0021ce8:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0021ced:	55                   	push   ebp
c0021cee:	53                   	push   ebx
c0021cef:	57                   	push   edi
c0021cf0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0021cf4:	e8 ab fb ff ff       	call   c00218a4 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0021cf9:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0021cfd:	55                   	push   ebp
c0021cfe:	53                   	push   ebx
c0021cff:	57                   	push   edi
c0021d00:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0021d07:	e8 0e fb ff ff       	call   c002181a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021d0c:	83 ec 0c             	sub    esp,0xc
c0021d0f:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0021d14:	b9 09 00 00 00       	mov    ecx,0x9
c0021d19:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0021d1d:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0021d21:	fc                   	cld    
c0021d22:	89 e7                	mov    edi,esp
c0021d24:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021d26:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0021d2d:	e8 ee fc ff ff       	call   c0021a20 <PCI::foundDevice(PCIDeviceInfo)>
c0021d32:	81 c4 8c 00 00 00    	add    esp,0x8c
c0021d38:	5b                   	pop    ebx
c0021d39:	5e                   	pop    esi
c0021d3a:	5f                   	pop    edi
c0021d3b:	5d                   	pop    ebp
c0021d3c:	c3                   	ret    
c0021d3d:	90                   	nop

c0021d3e <PCI::checkDevice(unsigned char, unsigned char)>:
c0021d3e:	55                   	push   ebp
c0021d3f:	57                   	push   edi
c0021d40:	56                   	push   esi
c0021d41:	53                   	push   ebx
c0021d42:	83 ec 0c             	sub    esp,0xc
c0021d45:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0021d49:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0021d4e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0021d53:	6a 00                	push   0x0
c0021d55:	56                   	push   esi
c0021d56:	57                   	push   edi
c0021d57:	55                   	push   ebp
c0021d58:	e8 bd fa ff ff       	call   c002181a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021d5d:	6a 00                	push   0x0
c0021d5f:	56                   	push   esi
c0021d60:	57                   	push   edi
c0021d61:	55                   	push   ebp
c0021d62:	e8 2b fe ff ff       	call   c0021b92 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0021d67:	83 c4 20             	add    esp,0x20
c0021d6a:	6a 00                	push   0x0
c0021d6c:	56                   	push   esi
c0021d6d:	57                   	push   edi
c0021d6e:	55                   	push   ebp
c0021d6f:	e8 c8 fa ff ff       	call   c002183c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0021d74:	83 c4 10             	add    esp,0x10
c0021d77:	84 c0                	test   al,al
c0021d79:	79 27                	jns    c0021da2 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0021d7b:	bb 01 00 00 00       	mov    ebx,0x1
c0021d80:	53                   	push   ebx
c0021d81:	56                   	push   esi
c0021d82:	57                   	push   edi
c0021d83:	55                   	push   ebp
c0021d84:	e8 91 fa ff ff       	call   c002181a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021d89:	83 c4 10             	add    esp,0x10
c0021d8c:	66 40                	inc    ax
c0021d8e:	74 0c                	je     c0021d9c <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0021d90:	53                   	push   ebx
c0021d91:	56                   	push   esi
c0021d92:	57                   	push   edi
c0021d93:	55                   	push   ebp
c0021d94:	e8 f9 fd ff ff       	call   c0021b92 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0021d99:	83 c4 10             	add    esp,0x10
c0021d9c:	43                   	inc    ebx
c0021d9d:	83 fb 08             	cmp    ebx,0x8
c0021da0:	75 de                	jne    c0021d80 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0021da2:	83 c4 0c             	add    esp,0xc
c0021da5:	5b                   	pop    ebx
c0021da6:	5e                   	pop    esi
c0021da7:	5f                   	pop    edi
c0021da8:	5d                   	pop    ebp
c0021da9:	c3                   	ret    

c0021daa <PCI::detect()>:
c0021daa:	56                   	push   esi
c0021dab:	53                   	push   ebx
c0021dac:	53                   	push   ebx
c0021dad:	31 db                	xor    ebx,ebx
c0021daf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0021db3:	6a 00                	push   0x0
c0021db5:	6a 00                	push   0x0
c0021db7:	6a 00                	push   0x0
c0021db9:	56                   	push   esi
c0021dba:	e8 7d fa ff ff       	call   c002183c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0021dbf:	83 c4 10             	add    esp,0x10
c0021dc2:	a8 80                	test   al,0x80
c0021dc4:	75 21                	jne    c0021de7 <PCI::detect()+0x3d>
c0021dc6:	51                   	push   ecx
c0021dc7:	51                   	push   ecx
c0021dc8:	6a 00                	push   0x0
c0021dca:	56                   	push   esi
c0021dcb:	e8 2c fc ff ff       	call   c00219fc <PCI::checkBus(unsigned char)>
c0021dd0:	83 c4 10             	add    esp,0x10
c0021dd3:	eb 24                	jmp    c0021df9 <PCI::detect()+0x4f>
c0021dd5:	52                   	push   edx
c0021dd6:	52                   	push   edx
c0021dd7:	53                   	push   ebx
c0021dd8:	43                   	inc    ebx
c0021dd9:	56                   	push   esi
c0021dda:	e8 1d fc ff ff       	call   c00219fc <PCI::checkBus(unsigned char)>
c0021ddf:	83 c4 10             	add    esp,0x10
c0021de2:	83 fb 08             	cmp    ebx,0x8
c0021de5:	74 12                	je     c0021df9 <PCI::detect()+0x4f>
c0021de7:	53                   	push   ebx
c0021de8:	6a 00                	push   0x0
c0021dea:	6a 00                	push   0x0
c0021dec:	56                   	push   esi
c0021ded:	e8 28 fa ff ff       	call   c002181a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021df2:	83 c4 10             	add    esp,0x10
c0021df5:	66 40                	inc    ax
c0021df7:	74 dc                	je     c0021dd5 <PCI::detect()+0x2b>
c0021df9:	58                   	pop    eax
c0021dfa:	5b                   	pop    ebx
c0021dfb:	5e                   	pop    esi
c0021dfc:	c3                   	ret    
c0021dfd:	90                   	nop

c0021dfe <IDE::close(int, int, void*)>:
c0021dfe:	83 c8 ff             	or     eax,0xffffffff
c0021e01:	c3                   	ret    

c0021e02 <IDE::IDE()>:
c0021e02:	83 ec 0c             	sub    esp,0xc
c0021e05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e09:	83 ec 08             	sub    esp,0x8
c0021e0c:	68 08 af 02 c0       	push   0xc002af08
c0021e11:	50                   	push   eax
c0021e12:	e8 eb 1f ff ff       	call   c0013e02 <HardDiskController::HardDiskController(char const*)>
c0021e17:	83 c4 10             	add    esp,0x10
c0021e1a:	ba 48 b1 02 c0       	mov    edx,0xc002b148
c0021e1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e23:	89 10                	mov    DWORD PTR [eax],edx
c0021e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e29:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0021e30:	90                   	nop
c0021e31:	83 c4 0c             	add    esp,0xc
c0021e34:	c3                   	ret    
c0021e35:	90                   	nop

c0021e36 <IDE::prepareInterrupt(unsigned char)>:
c0021e36:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021e3b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021e3f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0021e47:	c3                   	ret    

c0021e48 <selectDrive(unsigned char, unsigned char)>:
c0021e48:	c3                   	ret    
c0021e49:	90                   	nop

c0021e4a <IDE::getBase(unsigned char)>:
c0021e4a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0021e4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e53:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0021e5b:	c3                   	ret    

c0021e5c <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0021e5c:	55                   	push   ebp
c0021e5d:	57                   	push   edi
c0021e5e:	56                   	push   esi
c0021e5f:	53                   	push   ebx
c0021e60:	83 ec 1c             	sub    esp,0x1c
c0021e63:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021e67:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0021e6b:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0021e6e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0021e72:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0021e76:	80 f9 03             	cmp    cl,0x3
c0021e79:	77 51                	ja     c0021ecc <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0021e7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021e7f:	0f b6 f2             	movzx  esi,dl
c0021e82:	0f b6 db             	movzx  ebx,bl
c0021e85:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0021e88:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0021e8c:	83 ca 80             	or     edx,0xffffff80
c0021e8f:	0f b6 d2             	movzx  edx,dl
c0021e92:	52                   	push   edx
c0021e93:	6a 0c                	push   0xc
c0021e95:	56                   	push   esi
c0021e96:	57                   	push   edi
c0021e97:	e8 c0 ff ff ff       	call   c0021e5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021e9c:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0021ea1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021ea5:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0021ea9:	ee                   	out    dx,al
c0021eaa:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0021eaf:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0021eb3:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0021eb7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0021ebb:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0021ec3:	83 c4 2c             	add    esp,0x2c
c0021ec6:	5b                   	pop    ebx
c0021ec7:	5e                   	pop    esi
c0021ec8:	5f                   	pop    edi
c0021ec9:	5d                   	pop    ebp
c0021eca:	eb 90                	jmp    c0021e5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021ecc:	80 fb 07             	cmp    bl,0x7
c0021ecf:	77 12                	ja     c0021ee3 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0021ed1:	0f b6 d2             	movzx  edx,dl
c0021ed4:	0f b6 db             	movzx  ebx,bl
c0021ed7:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0021edf:	89 da                	mov    edx,ebx
c0021ee1:	eb 2f                	jmp    c0021f12 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0021ee3:	80 fb 0d             	cmp    bl,0xd
c0021ee6:	77 13                	ja     c0021efb <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0021ee8:	0f b6 d2             	movzx  edx,dl
c0021eeb:	0f b6 db             	movzx  ebx,bl
c0021eee:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0021ef5:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0021ef9:	eb 17                	jmp    c0021f12 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0021efb:	80 fb 15             	cmp    bl,0x15
c0021efe:	77 13                	ja     c0021f13 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0021f00:	0f b6 d2             	movzx  edx,dl
c0021f03:	0f b6 db             	movzx  ebx,bl
c0021f06:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0021f0e:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0021f12:	ee                   	out    dx,al
c0021f13:	83 c4 1c             	add    esp,0x1c
c0021f16:	5b                   	pop    ebx
c0021f17:	5e                   	pop    esi
c0021f18:	5f                   	pop    edi
c0021f19:	5d                   	pop    ebp
c0021f1a:	c3                   	ret    
c0021f1b:	90                   	nop

c0021f1c <IDE::read(unsigned char, unsigned char)>:
c0021f1c:	55                   	push   ebp
c0021f1d:	57                   	push   edi
c0021f1e:	56                   	push   esi
c0021f1f:	53                   	push   ebx
c0021f20:	83 ec 1c             	sub    esp,0x1c
c0021f23:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021f27:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0021f2b:	8d 43 f8             	lea    eax,[ebx-0x8]
c0021f2e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0021f32:	3c 03                	cmp    al,0x3
c0021f34:	77 43                	ja     c0021f79 <IDE::read(unsigned char, unsigned char)+0x5d>
c0021f36:	0f b6 f2             	movzx  esi,dl
c0021f39:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0021f3c:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0021f40:	83 c8 80             	or     eax,0xffffff80
c0021f43:	0f b6 c0             	movzx  eax,al
c0021f46:	50                   	push   eax
c0021f47:	6a 0c                	push   0xc
c0021f49:	56                   	push   esi
c0021f4a:	57                   	push   edi
c0021f4b:	e8 0c ff ff ff       	call   c0021e5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021f50:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0021f55:	0f b6 c3             	movzx  eax,bl
c0021f58:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0021f5c:	ec                   	in     al,dx
c0021f5d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0021f61:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0021f66:	52                   	push   edx
c0021f67:	6a 0c                	push   0xc
c0021f69:	56                   	push   esi
c0021f6a:	57                   	push   edi
c0021f6b:	e8 ec fe ff ff       	call   c0021e5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021f70:	83 c4 20             	add    esp,0x20
c0021f73:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0021f77:	eb 49                	jmp    c0021fc2 <IDE::read(unsigned char, unsigned char)+0xa6>
c0021f79:	80 fb 07             	cmp    bl,0x7
c0021f7c:	77 12                	ja     c0021f90 <IDE::read(unsigned char, unsigned char)+0x74>
c0021f7e:	0f b6 d2             	movzx  edx,dl
c0021f81:	0f b6 c3             	movzx  eax,bl
c0021f84:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0021f8c:	89 c2                	mov    edx,eax
c0021f8e:	eb 31                	jmp    c0021fc1 <IDE::read(unsigned char, unsigned char)+0xa5>
c0021f90:	80 fb 0d             	cmp    bl,0xd
c0021f93:	77 13                	ja     c0021fa8 <IDE::read(unsigned char, unsigned char)+0x8c>
c0021f95:	0f b6 d2             	movzx  edx,dl
c0021f98:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0021f9f:	0f b6 d3             	movzx  edx,bl
c0021fa2:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0021fa6:	eb 19                	jmp    c0021fc1 <IDE::read(unsigned char, unsigned char)+0xa5>
c0021fa8:	31 c0                	xor    eax,eax
c0021faa:	80 fb 15             	cmp    bl,0x15
c0021fad:	77 13                	ja     c0021fc2 <IDE::read(unsigned char, unsigned char)+0xa6>
c0021faf:	0f b6 d2             	movzx  edx,dl
c0021fb2:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0021fba:	0f b6 d3             	movzx  edx,bl
c0021fbd:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0021fc1:	ec                   	in     al,dx
c0021fc2:	83 c4 1c             	add    esp,0x1c
c0021fc5:	5b                   	pop    ebx
c0021fc6:	5e                   	pop    esi
c0021fc7:	5f                   	pop    edi
c0021fc8:	5d                   	pop    ebp
c0021fc9:	c3                   	ret    

c0021fca <IDE::waitInterrupt(unsigned char)>:
c0021fca:	55                   	push   ebp
c0021fcb:	57                   	push   edi
c0021fcc:	56                   	push   esi
c0021fcd:	53                   	push   ebx
c0021fce:	31 db                	xor    ebx,ebx
c0021fd0:	83 ec 0c             	sub    esp,0xc
c0021fd3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0021fd7:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0021fdc:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0021fe4:	89 e8                	mov    eax,ebp
c0021fe6:	84 c0                	test   al,al
c0021fe8:	75 34                	jne    c002201e <IDE::waitInterrupt(unsigned char)+0x54>
c0021fea:	52                   	push   edx
c0021feb:	6a 0c                	push   0xc
c0021fed:	56                   	push   esi
c0021fee:	57                   	push   edi
c0021fef:	e8 28 ff ff ff       	call   c0021f1c <IDE::read(unsigned char, unsigned char)>
c0021ff4:	83 c4 10             	add    esp,0x10
c0021ff7:	a8 01                	test   al,0x1
c0021ff9:	75 2b                	jne    c0022026 <IDE::waitInterrupt(unsigned char)+0x5c>
c0021ffb:	f6 c3 04             	test   bl,0x4
c0021ffe:	75 16                	jne    c0022016 <IDE::waitInterrupt(unsigned char)+0x4c>
c0022000:	83 fb 32             	cmp    ebx,0x32
c0022003:	7e 11                	jle    c0022016 <IDE::waitInterrupt(unsigned char)+0x4c>
c0022005:	50                   	push   eax
c0022006:	50                   	push   eax
c0022007:	6a 00                	push   0x0
c0022009:	68 80 96 98 00       	push   0x989680
c002200e:	e8 6d b1 ff ff       	call   c001d180 <nanoSleep(unsigned long long)>
c0022013:	83 c4 10             	add    esp,0x10
c0022016:	83 fb 3c             	cmp    ebx,0x3c
c0022019:	74 0b                	je     c0022026 <IDE::waitInterrupt(unsigned char)+0x5c>
c002201b:	43                   	inc    ebx
c002201c:	eb be                	jmp    c0021fdc <IDE::waitInterrupt(unsigned char)+0x12>
c002201e:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0022026:	83 c4 0c             	add    esp,0xc
c0022029:	89 e8                	mov    eax,ebp
c002202b:	5b                   	pop    ebx
c002202c:	5e                   	pop    esi
c002202d:	5f                   	pop    edi
c002202e:	5d                   	pop    ebp
c002202f:	c3                   	ret    

c0022030 <ideChannel0IRQHandler(regs*, void*)>:
c0022030:	83 ec 10             	sub    esp,0x10
c0022033:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022037:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c002203e:	6a 07                	push   0x7
c0022040:	6a 00                	push   0x0
c0022042:	50                   	push   eax
c0022043:	e8 d4 fe ff ff       	call   c0021f1c <IDE::read(unsigned char, unsigned char)>
c0022048:	83 c4 1c             	add    esp,0x1c
c002204b:	c3                   	ret    

c002204c <ideChannel1IRQHandler(regs*, void*)>:
c002204c:	83 ec 10             	sub    esp,0x10
c002204f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022053:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c002205a:	6a 07                	push   0x7
c002205c:	6a 01                	push   0x1
c002205e:	50                   	push   eax
c002205f:	e8 b8 fe ff ff       	call   c0021f1c <IDE::read(unsigned char, unsigned char)>
c0022064:	83 c4 1c             	add    esp,0x1c
c0022067:	c3                   	ret    

c0022068 <IDE::enableIRQs(unsigned char, bool)>:
c0022068:	57                   	push   edi
c0022069:	56                   	push   esi
c002206a:	be 04 00 00 00       	mov    esi,0x4
c002206f:	53                   	push   ebx
c0022070:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0022075:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022079:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c002207e:	0f 94 c0             	sete   al
c0022081:	d1 e0                	shl    eax,1
c0022083:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c002208a:	0f b6 c0             	movzx  eax,al
c002208d:	50                   	push   eax
c002208e:	6a 0c                	push   0xc
c0022090:	57                   	push   edi
c0022091:	53                   	push   ebx
c0022092:	e8 c5 fd ff ff       	call   c0021e5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022097:	83 c4 10             	add    esp,0x10
c002209a:	50                   	push   eax
c002209b:	6a 0c                	push   0xc
c002209d:	57                   	push   edi
c002209e:	53                   	push   ebx
c002209f:	e8 78 fe ff ff       	call   c0021f1c <IDE::read(unsigned char, unsigned char)>
c00220a4:	83 c4 10             	add    esp,0x10
c00220a7:	4e                   	dec    esi
c00220a8:	75 f0                	jne    c002209a <IDE::enableIRQs(unsigned char, bool)+0x32>
c00220aa:	5b                   	pop    ebx
c00220ab:	5e                   	pop    esi
c00220ac:	5f                   	pop    edi
c00220ad:	c3                   	ret    

c00220ae <IDE::open(int, int, void*)>:
c00220ae:	55                   	push   ebp
c00220af:	57                   	push   edi
c00220b0:	56                   	push   esi
c00220b1:	53                   	push   ebx
c00220b2:	83 ec 1c             	sub    esp,0x1c
c00220b5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00220b9:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c00220c2:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c00220cb:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c00220d2:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00220d9:	0f 85 b0 02 00 00    	jne    c002238f <IDE::open(int, int, void*)+0x2e1>
c00220df:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00220e5:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00220e9:	83 e0 7f             	and    eax,0x7f
c00220ec:	3c 05                	cmp    al,0x5
c00220ee:	74 04                	je     c00220f4 <IDE::open(int, int, void*)+0x46>
c00220f0:	3c 0f                	cmp    al,0xf
c00220f2:	75 32                	jne    c0022126 <IDE::open(int, int, void*)+0x78>
c00220f4:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00220fa:	83 e0 fc             	and    eax,0xfffffffc
c00220fd:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0022104:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c002210a:	83 e0 fc             	and    eax,0xfffffffc
c002210d:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0022114:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c002211a:	83 e0 fc             	and    eax,0xfffffffc
c002211d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0022124:	eb 14                	jmp    c002213a <IDE::open(int, int, void*)+0x8c>
c0022126:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0022130:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002213a:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0022141:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0022148:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002214c:	89 c6                	mov    esi,eax
c002214e:	bf f8 0c 00 00       	mov    edi,0xcf8
c0022153:	c1 e6 10             	shl    esi,0x10
c0022156:	89 e8                	mov    eax,ebp
c0022158:	89 fa                	mov    edx,edi
c002215a:	c1 e0 0b             	shl    eax,0xb
c002215d:	09 f0                	or     eax,esi
c002215f:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0022166:	c1 e6 08             	shl    esi,0x8
c0022169:	09 c6                	or     esi,eax
c002216b:	89 f0                	mov    eax,esi
c002216d:	0d 08 00 00 80       	or     eax,0x80000008
c0022172:	ef                   	out    dx,eax
c0022173:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0022178:	89 ca                	mov    edx,ecx
c002217a:	ed                   	in     eax,dx
c002217b:	c1 e8 10             	shr    eax,0x10
c002217e:	3d ff ff 00 00       	cmp    eax,0xffff
c0022183:	0f 84 f5 00 00 00    	je     c002227e <IDE::open(int, int, void*)+0x1d0>
c0022189:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c002218f:	89 fa                	mov    edx,edi
c0022191:	89 f0                	mov    eax,esi
c0022193:	ef                   	out    dx,eax
c0022194:	b0 fe                	mov    al,0xfe
c0022196:	89 ca                	mov    edx,ecx
c0022198:	ee                   	out    dx,al
c0022199:	89 f0                	mov    eax,esi
c002219b:	89 fa                	mov    edx,edi
c002219d:	ef                   	out    dx,eax
c002219e:	89 ca                	mov    edx,ecx
c00221a0:	ed                   	in     eax,dx
c00221a1:	3c fe                	cmp    al,0xfe
c00221a3:	0f 85 a9 00 00 00    	jne    c0022252 <IDE::open(int, int, void*)+0x1a4>
c00221a9:	8b 15 48 c8 02 c0    	mov    edx,DWORD PTR ds:0xc002c848
c00221af:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c00221b6:	74 33                	je     c00221eb <IDE::open(int, int, void*)+0x13d>
c00221b8:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c00221be:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c00221c2:	40                   	inc    eax
c00221c3:	83 ec 0c             	sub    esp,0xc
c00221c6:	0f b6 c0             	movzx  eax,al
c00221c9:	50                   	push   eax
c00221ca:	55                   	push   ebp
c00221cb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00221cf:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c00221d5:	51                   	push   ecx
c00221d6:	e8 bb 54 ff ff       	call   c0017696 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00221db:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00221e0:	83 c4 1c             	add    esp,0x1c
c00221e3:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00221e9:	eb 0a                	jmp    c00221f5 <IDE::open(int, int, void*)+0x147>
c00221eb:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00221f5:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00221fc:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0022203:	c1 e1 10             	shl    ecx,0x10
c0022206:	c1 e0 08             	shl    eax,0x8
c0022209:	bf f8 0c 00 00       	mov    edi,0xcf8
c002220e:	09 c1                	or     ecx,eax
c0022210:	89 fa                	mov    edx,edi
c0022212:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0022219:	c1 e0 0b             	shl    eax,0xb
c002221c:	09 c1                	or     ecx,eax
c002221e:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0022224:	89 c8                	mov    eax,ecx
c0022226:	ef                   	out    dx,eax
c0022227:	be fc 0c 00 00       	mov    esi,0xcfc
c002222c:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0022232:	89 f2                	mov    edx,esi
c0022234:	ee                   	out    dx,al
c0022235:	89 c8                	mov    eax,ecx
c0022237:	89 fa                	mov    edx,edi
c0022239:	ef                   	out    dx,eax
c002223a:	89 f2                	mov    edx,esi
c002223c:	ed                   	in     eax,dx
c002223d:	0f b6 c0             	movzx  eax,al
c0022240:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0022246:	74 46                	je     c002228e <IDE::open(int, int, void*)+0x1e0>
c0022248:	83 ec 0c             	sub    esp,0xc
c002224b:	68 20 af 02 c0       	push   0xc002af20
c0022250:	eb 34                	jmp    c0022286 <IDE::open(int, int, void*)+0x1d8>
c0022252:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c002225b:	75 17                	jne    c0022274 <IDE::open(int, int, void*)+0x1c6>
c002225d:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0022262:	74 07                	je     c002226b <IDE::open(int, int, void*)+0x1bd>
c0022264:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0022269:	75 09                	jne    c0022274 <IDE::open(int, int, void*)+0x1c6>
c002226b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0022272:	eb 1a                	jmp    c002228e <IDE::open(int, int, void*)+0x1e0>
c0022274:	83 ec 0c             	sub    esp,0xc
c0022277:	68 28 af 02 c0       	push   0xc002af28
c002227c:	eb 08                	jmp    c0022286 <IDE::open(int, int, void*)+0x1d8>
c002227e:	83 ec 0c             	sub    esp,0xc
c0022281:	68 59 af 02 c0       	push   0xc002af59
c0022286:	e8 16 75 ff ff       	call   c00197a1 <Krnl::panic(char const*)>
c002228b:	83 c4 10             	add    esp,0x10
c002228e:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0022295:	79 1a                	jns    c00222b1 <IDE::open(int, int, void*)+0x203>
c0022297:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c002229d:	83 e0 fc             	and    eax,0xfffffffc
c00222a0:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00222a7:	83 c0 08             	add    eax,0x8
c00222aa:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00222b1:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00222b7:	89 c2                	mov    edx,eax
c00222b9:	83 e2 0f             	and    edx,0xf
c00222bc:	66 83 fa 08          	cmp    dx,0x8
c00222c0:	75 0a                	jne    c00222cc <IDE::open(int, int, void*)+0x21e>
c00222c2:	83 e8 02             	sub    eax,0x2
c00222c5:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00222cc:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00222d2:	89 c2                	mov    edx,eax
c00222d4:	83 e2 0f             	and    edx,0xf
c00222d7:	66 83 fa 08          	cmp    dx,0x8
c00222db:	75 0a                	jne    c00222e7 <IDE::open(int, int, void*)+0x239>
c00222dd:	83 e8 02             	sub    eax,0x2
c00222e0:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00222e7:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00222ee:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00222f5:	89 d0                	mov    eax,edx
c00222f7:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00222fa:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00222fe:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0022302:	8d 4a 01             	lea    ecx,[edx+0x1]
c0022305:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002230a:	0f b6 c9             	movzx  ecx,cl
c002230d:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0022314:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0022317:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002231b:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c002231f:	8d 50 02             	lea    edx,[eax+0x2]
c0022322:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0022327:	0f b6 d2             	movzx  edx,dl
c002232a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0022330:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0022333:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0022337:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c002233b:	8d 48 03             	lea    ecx,[eax+0x3]
c002233e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0022343:	0f b6 c9             	movzx  ecx,cl
c0022346:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c002234c:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002234f:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0022353:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0022357:	8d 50 04             	lea    edx,[eax+0x4]
c002235a:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0022360:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0022365:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c002236c:	66 85 f6             	test   si,si
c002236f:	74 3e                	je     c00223af <IDE::open(int, int, void*)+0x301>
c0022371:	0f b6 d2             	movzx  edx,dl
c0022374:	83 c0 05             	add    eax,0x5
c0022377:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002237a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002237e:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0022382:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0022388:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002238d:	eb 20                	jmp    c00223af <IDE::open(int, int, void*)+0x301>
c002238f:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0022399:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00223a3:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00223aa:	e9 02 ff ff ff       	jmp    c00222b1 <IDE::open(int, int, void*)+0x203>
c00223af:	52                   	push   edx
c00223b0:	52                   	push   edx
c00223b1:	6a 00                	push   0x0
c00223b3:	53                   	push   ebx
c00223b4:	e8 7d fa ff ff       	call   c0021e36 <IDE::prepareInterrupt(unsigned char)>
c00223b9:	59                   	pop    ecx
c00223ba:	5e                   	pop    esi
c00223bb:	6a 01                	push   0x1
c00223bd:	53                   	push   ebx
c00223be:	e8 73 fa ff ff       	call   c0021e36 <IDE::prepareInterrupt(unsigned char)>
c00223c3:	83 c4 0c             	add    esp,0xc
c00223c6:	6a 00                	push   0x0
c00223c8:	6a 00                	push   0x0
c00223ca:	53                   	push   ebx
c00223cb:	e8 98 fc ff ff       	call   c0022068 <IDE::enableIRQs(unsigned char, bool)>
c00223d0:	83 c4 0c             	add    esp,0xc
c00223d3:	6a 00                	push   0x0
c00223d5:	6a 01                	push   0x1
c00223d7:	53                   	push   ebx
c00223d8:	e8 8b fc ff ff       	call   c0022068 <IDE::enableIRQs(unsigned char, bool)>
c00223dd:	83 c4 10             	add    esp,0x10
c00223e0:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00223e7:	74 40                	je     c0022429 <IDE::open(int, int, void*)+0x37b>
c00223e9:	83 ec 0c             	sub    esp,0xc
c00223ec:	68 83 af 02 c0       	push   0xc002af83
c00223f1:	e8 91 02 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c00223f6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00223f9:	6a 01                	push   0x1
c00223fb:	68 30 20 02 c0       	push   0xc0022030
c0022400:	6a 0e                	push   0xe
c0022402:	53                   	push   ebx
c0022403:	e8 f2 15 ff ff       	call   c00139fa <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022408:	83 c4 14             	add    esp,0x14
c002240b:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0022411:	53                   	push   ebx
c0022412:	6a 01                	push   0x1
c0022414:	68 4c 20 02 c0       	push   0xc002204c
c0022419:	6a 0f                	push   0xf
c002241b:	53                   	push   ebx
c002241c:	e8 d9 15 ff ff       	call   c00139fa <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022421:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0022427:	eb 4a                	jmp    c0022473 <IDE::open(int, int, void*)+0x3c5>
c0022429:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0022433:	50                   	push   eax
c0022434:	6a 0f                	push   0xf
c0022436:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002243c:	68 9f af 02 c0       	push   0xc002af9f
c0022441:	e8 41 02 ff ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0022446:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022449:	6a 00                	push   0x0
c002244b:	68 30 20 02 c0       	push   0xc0022030
c0022450:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0022456:	53                   	push   ebx
c0022457:	e8 9e 15 ff ff       	call   c00139fa <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002245c:	83 c4 14             	add    esp,0x14
c002245f:	53                   	push   ebx
c0022460:	6a 00                	push   0x0
c0022462:	68 4c 20 02 c0       	push   0xc002204c
c0022467:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c002246d:	53                   	push   ebx
c002246e:	e8 87 15 ff ff       	call   c00139fa <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022473:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022475:	83 c4 20             	add    esp,0x20
c0022478:	83 ec 0c             	sub    esp,0xc
c002247b:	53                   	push   ebx
c002247c:	ff 50 18             	call   DWORD PTR [eax+0x18]
c002247f:	83 c4 0c             	add    esp,0xc
c0022482:	6a 07                	push   0x7
c0022484:	6a 00                	push   0x0
c0022486:	53                   	push   ebx
c0022487:	e8 90 fa ff ff       	call   c0021f1c <IDE::read(unsigned char, unsigned char)>
c002248c:	83 c4 0c             	add    esp,0xc
c002248f:	6a 07                	push   0x7
c0022491:	6a 01                	push   0x1
c0022493:	53                   	push   ebx
c0022494:	e8 83 fa ff ff       	call   c0021f1c <IDE::read(unsigned char, unsigned char)>
c0022499:	83 c4 0c             	add    esp,0xc
c002249c:	6a 01                	push   0x1
c002249e:	6a 00                	push   0x0
c00224a0:	53                   	push   ebx
c00224a1:	e8 c2 fb ff ff       	call   c0022068 <IDE::enableIRQs(unsigned char, bool)>
c00224a6:	83 c4 0c             	add    esp,0xc
c00224a9:	6a 01                	push   0x1
c00224ab:	6a 01                	push   0x1
c00224ad:	53                   	push   ebx
c00224ae:	e8 b5 fb ff ff       	call   c0022068 <IDE::enableIRQs(unsigned char, bool)>
c00224b3:	83 c4 2c             	add    esp,0x2c
c00224b6:	31 c0                	xor    eax,eax
c00224b8:	5b                   	pop    ebx
c00224b9:	5e                   	pop    esi
c00224ba:	5f                   	pop    edi
c00224bb:	5d                   	pop    ebp
c00224bc:	c3                   	ret    
c00224bd:	90                   	nop

c00224be <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00224be:	55                   	push   ebp
c00224bf:	57                   	push   edi
c00224c0:	56                   	push   esi
c00224c1:	53                   	push   ebx
c00224c2:	83 ec 1c             	sub    esp,0x1c
c00224c5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00224c9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00224cd:	8d 50 f8             	lea    edx,[eax-0x8]
c00224d0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00224d4:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00224d8:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00224dc:	80 fa 03             	cmp    dl,0x3
c00224df:	77 5d                	ja     c002253e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00224e1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00224e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00224e9:	0f b6 db             	movzx  ebx,bl
c00224ec:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00224ef:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00224f3:	83 ca 80             	or     edx,0xffffff80
c00224f6:	0f b6 d2             	movzx  edx,dl
c00224f9:	52                   	push   edx
c00224fa:	6a 0c                	push   0xc
c00224fc:	53                   	push   ebx
c00224fd:	56                   	push   esi
c00224fe:	e8 59 f9 ff ff       	call   c0021e5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022503:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0022508:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002250c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022510:	0f b6 c0             	movzx  eax,al
c0022513:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0022517:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0022519:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002251e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0022522:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022526:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002252a:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022532:	83 c4 2c             	add    esp,0x2c
c0022535:	5b                   	pop    ebx
c0022536:	5e                   	pop    esi
c0022537:	5f                   	pop    edi
c0022538:	5d                   	pop    ebp
c0022539:	e9 1e f9 ff ff       	jmp    c0021e5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002253e:	3c 07                	cmp    al,0x7
c0022540:	77 10                	ja     c0022552 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0022542:	0f b6 db             	movzx  ebx,bl
c0022545:	0f b6 d0             	movzx  edx,al
c0022548:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0022550:	eb 2d                	jmp    c002257f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0022552:	3c 0d                	cmp    al,0xd
c0022554:	77 13                	ja     c0022569 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0022556:	0f b6 db             	movzx  ebx,bl
c0022559:	0f b6 c0             	movzx  eax,al
c002255c:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0022563:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0022567:	eb 16                	jmp    c002257f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0022569:	3c 15                	cmp    al,0x15
c002256b:	77 14                	ja     c0022581 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c002256d:	0f b6 db             	movzx  ebx,bl
c0022570:	0f b6 c0             	movzx  eax,al
c0022573:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c002257b:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c002257f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0022581:	83 c4 1c             	add    esp,0x1c
c0022584:	5b                   	pop    ebx
c0022585:	5e                   	pop    esi
c0022586:	5f                   	pop    edi
c0022587:	5d                   	pop    ebp
c0022588:	c3                   	ret    
c0022589:	90                   	nop

c002258a <IDE::detect()>:
c002258a:	55                   	push   ebp
c002258b:	57                   	push   edi
c002258c:	56                   	push   esi
c002258d:	53                   	push   ebx
c002258e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0022594:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c002259b:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00225a2:	0f 85 be 02 00 00    	jne    c0022866 <IDE::detect()+0x2dc>
c00225a8:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00225af:	31 f6                	xor    esi,esi
c00225b1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00225b9:	31 ed                	xor    ebp,ebp
c00225bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00225bf:	c1 e0 06             	shl    eax,0x6
c00225c2:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c00225ca:	89 e8                	mov    eax,ebp
c00225cc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00225d0:	c1 e0 04             	shl    eax,0x4
c00225d3:	83 c8 a0             	or     eax,0xffffffa0
c00225d6:	0f b6 c0             	movzx  eax,al
c00225d9:	50                   	push   eax
c00225da:	6a 06                	push   0x6
c00225dc:	56                   	push   esi
c00225dd:	53                   	push   ebx
c00225de:	e8 79 f8 ff ff       	call   c0021e5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00225e3:	83 c4 0c             	add    esp,0xc
c00225e6:	6a 0c                	push   0xc
c00225e8:	56                   	push   esi
c00225e9:	53                   	push   ebx
c00225ea:	e8 2d f9 ff ff       	call   c0021f1c <IDE::read(unsigned char, unsigned char)>
c00225ef:	83 c4 0c             	add    esp,0xc
c00225f2:	6a 0c                	push   0xc
c00225f4:	56                   	push   esi
c00225f5:	53                   	push   ebx
c00225f6:	e8 21 f9 ff ff       	call   c0021f1c <IDE::read(unsigned char, unsigned char)>
c00225fb:	83 c4 0c             	add    esp,0xc
c00225fe:	6a 0c                	push   0xc
c0022600:	56                   	push   esi
c0022601:	53                   	push   ebx
c0022602:	e8 15 f9 ff ff       	call   c0021f1c <IDE::read(unsigned char, unsigned char)>
c0022607:	83 c4 0c             	add    esp,0xc
c002260a:	6a 0c                	push   0xc
c002260c:	56                   	push   esi
c002260d:	53                   	push   ebx
c002260e:	e8 09 f9 ff ff       	call   c0021f1c <IDE::read(unsigned char, unsigned char)>
c0022613:	68 ec 00 00 00       	push   0xec
c0022618:	6a 07                	push   0x7
c002261a:	56                   	push   esi
c002261b:	53                   	push   ebx
c002261c:	e8 3b f8 ff ff       	call   c0021e5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022621:	83 c4 1c             	add    esp,0x1c
c0022624:	6a 0c                	push   0xc
c0022626:	56                   	push   esi
c0022627:	53                   	push   ebx
c0022628:	e8 ef f8 ff ff       	call   c0021f1c <IDE::read(unsigned char, unsigned char)>
c002262d:	83 c4 0c             	add    esp,0xc
c0022630:	6a 0c                	push   0xc
c0022632:	56                   	push   esi
c0022633:	53                   	push   ebx
c0022634:	e8 e3 f8 ff ff       	call   c0021f1c <IDE::read(unsigned char, unsigned char)>
c0022639:	83 c4 0c             	add    esp,0xc
c002263c:	6a 0c                	push   0xc
c002263e:	56                   	push   esi
c002263f:	53                   	push   ebx
c0022640:	e8 d7 f8 ff ff       	call   c0021f1c <IDE::read(unsigned char, unsigned char)>
c0022645:	83 c4 0c             	add    esp,0xc
c0022648:	6a 0c                	push   0xc
c002264a:	56                   	push   esi
c002264b:	53                   	push   ebx
c002264c:	e8 cb f8 ff ff       	call   c0021f1c <IDE::read(unsigned char, unsigned char)>
c0022651:	83 c4 0c             	add    esp,0xc
c0022654:	6a 0c                	push   0xc
c0022656:	56                   	push   esi
c0022657:	53                   	push   ebx
c0022658:	e8 bf f8 ff ff       	call   c0021f1c <IDE::read(unsigned char, unsigned char)>
c002265d:	83 c4 10             	add    esp,0x10
c0022660:	84 c0                	test   al,al
c0022662:	0f 84 8b 01 00 00    	je     c00227f3 <IDE::detect()+0x269>
c0022668:	31 ff                	xor    edi,edi
c002266a:	50                   	push   eax
c002266b:	6a 0c                	push   0xc
c002266d:	56                   	push   esi
c002266e:	53                   	push   ebx
c002266f:	e8 a8 f8 ff ff       	call   c0021f1c <IDE::read(unsigned char, unsigned char)>
c0022674:	83 c4 10             	add    esp,0x10
c0022677:	a8 01                	test   al,0x1
c0022679:	0f 85 8e 01 00 00    	jne    c002280d <IDE::detect()+0x283>
c002267f:	84 c0                	test   al,al
c0022681:	78 04                	js     c0022687 <IDE::detect()+0xfd>
c0022683:	a8 08                	test   al,0x8
c0022685:	75 27                	jne    c00226ae <IDE::detect()+0x124>
c0022687:	47                   	inc    edi
c0022688:	81 ff 17 01 00 00    	cmp    edi,0x117
c002268e:	7e da                	jle    c002266a <IDE::detect()+0xe0>
c0022690:	50                   	push   eax
c0022691:	50                   	push   eax
c0022692:	6a 00                	push   0x0
c0022694:	68 40 4b 4c 00       	push   0x4c4b40
c0022699:	e8 e2 aa ff ff       	call   c001d180 <nanoSleep(unsigned long long)>
c002269e:	83 c4 10             	add    esp,0x10
c00226a1:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00226a7:	75 c1                	jne    c002266a <IDE::detect()+0xe0>
c00226a9:	e9 5f 01 00 00       	jmp    c002280d <IDE::detect()+0x283>
c00226ae:	31 c9                	xor    ecx,ecx
c00226b0:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00226b4:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00226b8:	83 ec 0c             	sub    esp,0xc
c00226bb:	68 80 00 00 00       	push   0x80
c00226c0:	57                   	push   edi
c00226c1:	6a 00                	push   0x0
c00226c3:	56                   	push   esi
c00226c4:	53                   	push   ebx
c00226c5:	e8 f4 fd ff ff       	call   c00224be <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00226ca:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00226cf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00226d3:	89 d1                	mov    ecx,edx
c00226d5:	c1 e0 06             	shl    eax,0x6
c00226d8:	01 d8                	add    eax,ebx
c00226da:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00226e1:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00226e8:	89 f2                	mov    edx,esi
c00226ea:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00226f0:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00226f4:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00226fa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00226fe:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0022705:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c002270d:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0022714:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c002271c:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0022722:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0022729:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c002272f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0022733:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022737:	83 c4 20             	add    esp,0x20
c002273a:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c002273d:	83 c0 02             	add    eax,0x2
c0022740:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0022746:	83 c7 02             	add    edi,0x2
c0022749:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c002274c:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0022752:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0022756:	75 e2                	jne    c002273a <IDE::detect()+0x1b0>
c0022758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002275c:	c1 e0 06             	shl    eax,0x6
c002275f:	01 d8                	add    eax,ebx
c0022761:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0022767:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c002276e:	66 c1 ea 09          	shr    dx,0x9
c0022772:	83 e2 01             	and    edx,0x1
c0022775:	84 c9                	test   cl,cl
c0022777:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c002277d:	75 2f                	jne    c00227ae <IDE::detect()+0x224>
c002277f:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0022785:	85 c0                	test   eax,eax
c0022787:	74 66                	je     c00227ef <IDE::detect()+0x265>
c0022789:	50                   	push   eax
c002278a:	55                   	push   ebp
c002278b:	56                   	push   esi
c002278c:	68 bb af 02 c0       	push   0xc002afbb
c0022791:	e8 f1 fe fe ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0022796:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c002279d:	e8 32 cd fe ff       	call   c000f4d4 <malloc>
c00227a2:	89 c7                	mov    edi,eax
c00227a4:	89 04 24             	mov    DWORD PTR [esp],eax
c00227a7:	e8 62 06 00 00       	call   c0022e0e <ATA::ATA()>
c00227ac:	eb 28                	jmp    c00227d6 <IDE::detect()+0x24c>
c00227ae:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c00227b4:	55                   	push   ebp
c00227b5:	56                   	push   esi
c00227b6:	68 ea af 02 c0       	push   0xc002afea
c00227bb:	e8 c7 fe fe ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c00227c0:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c00227c7:	e8 08 cd fe ff       	call   c000f4d4 <malloc>
c00227cc:	89 c7                	mov    edi,eax
c00227ce:	89 04 24             	mov    DWORD PTR [esp],eax
c00227d1:	e8 68 0c 00 00       	call   c002343e <ATAPI::ATAPI()>
c00227d6:	5a                   	pop    edx
c00227d7:	59                   	pop    ecx
c00227d8:	57                   	push   edi
c00227d9:	53                   	push   ebx
c00227da:	e8 97 12 ff ff       	call   c0013a76 <Device::addChild(Device*)>
c00227df:	8b 07                	mov    eax,DWORD PTR [edi]
c00227e1:	53                   	push   ebx
c00227e2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00227e6:	6a 00                	push   0x0
c00227e8:	57                   	push   edi
c00227e9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00227ec:	83 c4 20             	add    esp,0x20
c00227ef:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00227f3:	4d                   	dec    ebp
c00227f4:	74 0a                	je     c0022800 <IDE::detect()+0x276>
c00227f6:	bd 01 00 00 00       	mov    ebp,0x1
c00227fb:	e9 bb fd ff ff       	jmp    c00225bb <IDE::detect()+0x31>
c0022800:	4e                   	dec    esi
c0022801:	74 63                	je     c0022866 <IDE::detect()+0x2dc>
c0022803:	be 01 00 00 00       	mov    esi,0x1
c0022808:	e9 ac fd ff ff       	jmp    c00225b9 <IDE::detect()+0x2f>
c002280d:	50                   	push   eax
c002280e:	6a 04                	push   0x4
c0022810:	56                   	push   esi
c0022811:	53                   	push   ebx
c0022812:	e8 05 f7 ff ff       	call   c0021f1c <IDE::read(unsigned char, unsigned char)>
c0022817:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002281b:	83 c4 0c             	add    esp,0xc
c002281e:	6a 05                	push   0x5
c0022820:	56                   	push   esi
c0022821:	53                   	push   ebx
c0022822:	e8 f5 f6 ff ff       	call   c0021f1c <IDE::read(unsigned char, unsigned char)>
c0022827:	83 c4 10             	add    esp,0x10
c002282a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c002282e:	80 fa 14             	cmp    dl,0x14
c0022831:	75 04                	jne    c0022837 <IDE::detect()+0x2ad>
c0022833:	3c eb                	cmp    al,0xeb
c0022835:	eb 07                	jmp    c002283e <IDE::detect()+0x2b4>
c0022837:	3c 96                	cmp    al,0x96
c0022839:	75 b8                	jne    c00227f3 <IDE::detect()+0x269>
c002283b:	80 fa 69             	cmp    dl,0x69
c002283e:	75 b3                	jne    c00227f3 <IDE::detect()+0x269>
c0022840:	68 a1 00 00 00       	push   0xa1
c0022845:	6a 07                	push   0x7
c0022847:	56                   	push   esi
c0022848:	53                   	push   ebx
c0022849:	e8 0e f6 ff ff       	call   c0021e5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002284e:	5f                   	pop    edi
c002284f:	58                   	pop    eax
c0022850:	6a 00                	push   0x0
c0022852:	68 40 42 0f 00       	push   0xf4240
c0022857:	e8 24 a9 ff ff       	call   c001d180 <nanoSleep(unsigned long long)>
c002285c:	83 c4 10             	add    esp,0x10
c002285f:	b1 01                	mov    cl,0x1
c0022861:	e9 4a fe ff ff       	jmp    c00226b0 <IDE::detect()+0x126>
c0022866:	81 c4 1c 02 00 00    	add    esp,0x21c
c002286c:	5b                   	pop    ebx
c002286d:	5e                   	pop    esi
c002286e:	5f                   	pop    edi
c002286f:	5d                   	pop    ebp
c0022870:	c3                   	ret    
c0022871:	90                   	nop

c0022872 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0022872:	55                   	push   ebp
c0022873:	57                   	push   edi
c0022874:	56                   	push   esi
c0022875:	53                   	push   ebx
c0022876:	83 ec 1c             	sub    esp,0x1c
c0022879:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002287d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022881:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022885:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0022889:	88 c3                	mov    bl,al
c002288b:	84 c0                	test   al,al
c002288d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022891:	0f 84 67 01 00 00    	je     c00229fe <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0022897:	83 ec 0c             	sub    esp,0xc
c002289a:	68 1b b0 02 c0       	push   0xc002b01b
c002289f:	e8 e3 fd fe ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c00228a4:	83 c4 10             	add    esp,0x10
c00228a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00228ab:	3c 01                	cmp    al,0x1
c00228ad:	75 17                	jne    c00228c6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c00228af:	83 ec 0c             	sub    esp,0xc
c00228b2:	b3 13                	mov    bl,0x13
c00228b4:	68 27 b0 02 c0       	push   0xc002b027
c00228b9:	e8 c9 fd fe ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c00228be:	83 c4 10             	add    esp,0x10
c00228c1:	e9 25 01 00 00       	jmp    c00229eb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00228c6:	3c 02                	cmp    al,0x2
c00228c8:	0f 85 ef 00 00 00    	jne    c00229bd <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c00228ce:	d1 e6                	shl    esi,1
c00228d0:	09 ee                	or     esi,ebp
c00228d2:	52                   	push   edx
c00228d3:	89 f0                	mov    eax,esi
c00228d5:	6a 01                	push   0x1
c00228d7:	0f b6 f0             	movzx  esi,al
c00228da:	c1 e6 06             	shl    esi,0x6
c00228dd:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c00228e5:	50                   	push   eax
c00228e6:	57                   	push   edi
c00228e7:	e8 30 f6 ff ff       	call   c0021f1c <IDE::read(unsigned char, unsigned char)>
c00228ec:	83 c4 10             	add    esp,0x10
c00228ef:	89 c6                	mov    esi,eax
c00228f1:	a8 01                	test   al,0x1
c00228f3:	74 12                	je     c0022907 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c00228f5:	83 ec 0c             	sub    esp,0xc
c00228f8:	b3 07                	mov    bl,0x7
c00228fa:	68 3c b0 02 c0       	push   0xc002b03c
c00228ff:	e8 83 fd fe ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0022904:	83 c4 10             	add    esp,0x10
c0022907:	f7 c6 02 00 00 00    	test   esi,0x2
c002290d:	74 12                	je     c0022921 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c002290f:	83 ec 0c             	sub    esp,0xc
c0022912:	b3 03                	mov    bl,0x3
c0022914:	68 5a b0 02 c0       	push   0xc002b05a
c0022919:	e8 69 fd fe ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c002291e:	83 c4 10             	add    esp,0x10
c0022921:	f7 c6 04 00 00 00    	test   esi,0x4
c0022927:	74 12                	je     c002293b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0022929:	83 ec 0c             	sub    esp,0xc
c002292c:	b3 14                	mov    bl,0x14
c002292e:	68 7a b0 02 c0       	push   0xc002b07a
c0022933:	e8 4f fd fe ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0022938:	83 c4 10             	add    esp,0x10
c002293b:	f7 c6 08 00 00 00    	test   esi,0x8
c0022941:	74 12                	je     c0022955 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0022943:	83 ec 0c             	sub    esp,0xc
c0022946:	b3 03                	mov    bl,0x3
c0022948:	68 5a b0 02 c0       	push   0xc002b05a
c002294d:	e8 35 fd fe ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0022952:	83 c4 10             	add    esp,0x10
c0022955:	f7 c6 10 00 00 00    	test   esi,0x10
c002295b:	74 12                	je     c002296f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c002295d:	83 ec 0c             	sub    esp,0xc
c0022960:	b3 15                	mov    bl,0x15
c0022962:	68 92 b0 02 c0       	push   0xc002b092
c0022967:	e8 1b fd fe ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c002296c:	83 c4 10             	add    esp,0x10
c002296f:	f7 c6 20 00 00 00    	test   esi,0x20
c0022975:	74 12                	je     c0022989 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0022977:	83 ec 0c             	sub    esp,0xc
c002297a:	b3 03                	mov    bl,0x3
c002297c:	68 5a b0 02 c0       	push   0xc002b05a
c0022981:	e8 01 fd fe ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0022986:	83 c4 10             	add    esp,0x10
c0022989:	f7 c6 40 00 00 00    	test   esi,0x40
c002298f:	74 12                	je     c00229a3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0022991:	83 ec 0c             	sub    esp,0xc
c0022994:	b3 16                	mov    bl,0x16
c0022996:	68 ac b0 02 c0       	push   0xc002b0ac
c002299b:	e8 e7 fc fe ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c00229a0:	83 c4 10             	add    esp,0x10
c00229a3:	89 f0                	mov    eax,esi
c00229a5:	84 c0                	test   al,al
c00229a7:	79 42                	jns    c00229eb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00229a9:	83 ec 0c             	sub    esp,0xc
c00229ac:	b3 0d                	mov    bl,0xd
c00229ae:	68 cd b0 02 c0       	push   0xc002b0cd
c00229b3:	e8 cf fc fe ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c00229b8:	83 c4 10             	add    esp,0x10
c00229bb:	eb 2e                	jmp    c00229eb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00229bd:	3c 03                	cmp    al,0x3
c00229bf:	75 14                	jne    c00229d5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c00229c1:	83 ec 0c             	sub    esp,0xc
c00229c4:	b3 17                	mov    bl,0x17
c00229c6:	68 e1 b0 02 c0       	push   0xc002b0e1
c00229cb:	e8 b7 fc fe ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c00229d0:	83 c4 10             	add    esp,0x10
c00229d3:	eb 16                	jmp    c00229eb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00229d5:	3c 04                	cmp    al,0x4
c00229d7:	75 12                	jne    c00229eb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00229d9:	83 ec 0c             	sub    esp,0xc
c00229dc:	b3 08                	mov    bl,0x8
c00229de:	68 f7 b0 02 c0       	push   0xc002b0f7
c00229e3:	e8 9f fc fe ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c00229e8:	83 c4 10             	add    esp,0x10
c00229eb:	50                   	push   eax
c00229ec:	50                   	push   eax
c00229ed:	0f b6 c3             	movzx  eax,bl
c00229f0:	50                   	push   eax
c00229f1:	68 0f b1 02 c0       	push   0xc002b10f
c00229f6:	e8 8c fc fe ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c00229fb:	83 c4 10             	add    esp,0x10
c00229fe:	83 c4 1c             	add    esp,0x1c
c0022a01:	88 d8                	mov    al,bl
c0022a03:	5b                   	pop    ebx
c0022a04:	5e                   	pop    esi
c0022a05:	5f                   	pop    edi
c0022a06:	5d                   	pop    ebp
c0022a07:	c3                   	ret    

c0022a08 <IDE::polling(unsigned char, unsigned int)>:
c0022a08:	57                   	push   edi
c0022a09:	56                   	push   esi
c0022a0a:	53                   	push   ebx
c0022a0b:	bb 04 00 00 00       	mov    ebx,0x4
c0022a10:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0022a14:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022a19:	52                   	push   edx
c0022a1a:	6a 0c                	push   0xc
c0022a1c:	56                   	push   esi
c0022a1d:	57                   	push   edi
c0022a1e:	e8 f9 f4 ff ff       	call   c0021f1c <IDE::read(unsigned char, unsigned char)>
c0022a23:	83 c4 10             	add    esp,0x10
c0022a26:	4b                   	dec    ebx
c0022a27:	75 f0                	jne    c0022a19 <IDE::polling(unsigned char, unsigned int)+0x11>
c0022a29:	bb a0 86 01 00       	mov    ebx,0x186a0
c0022a2e:	50                   	push   eax
c0022a2f:	6a 0c                	push   0xc
c0022a31:	56                   	push   esi
c0022a32:	57                   	push   edi
c0022a33:	e8 e4 f4 ff ff       	call   c0021f1c <IDE::read(unsigned char, unsigned char)>
c0022a38:	83 c4 10             	add    esp,0x10
c0022a3b:	a8 01                	test   al,0x1
c0022a3d:	74 12                	je     c0022a51 <IDE::polling(unsigned char, unsigned int)+0x49>
c0022a3f:	83 ec 0c             	sub    esp,0xc
c0022a42:	68 29 b1 02 c0       	push   0xc002b129
c0022a47:	e8 3b fc fe ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0022a4c:	83 c4 10             	add    esp,0x10
c0022a4f:	eb 17                	jmp    c0022a68 <IDE::polling(unsigned char, unsigned int)+0x60>
c0022a51:	a8 20                	test   al,0x20
c0022a53:	75 0f                	jne    c0022a64 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0022a55:	4b                   	dec    ebx
c0022a56:	74 10                	je     c0022a68 <IDE::polling(unsigned char, unsigned int)+0x60>
c0022a58:	84 c0                	test   al,al
c0022a5a:	78 d2                	js     c0022a2e <IDE::polling(unsigned char, unsigned int)+0x26>
c0022a5c:	a8 08                	test   al,0x8
c0022a5e:	74 ce                	je     c0022a2e <IDE::polling(unsigned char, unsigned int)+0x26>
c0022a60:	31 c0                	xor    eax,eax
c0022a62:	eb 06                	jmp    c0022a6a <IDE::polling(unsigned char, unsigned int)+0x62>
c0022a64:	b0 01                	mov    al,0x1
c0022a66:	eb 02                	jmp    c0022a6a <IDE::polling(unsigned char, unsigned int)+0x62>
c0022a68:	b0 02                	mov    al,0x2
c0022a6a:	5b                   	pop    ebx
c0022a6b:	5e                   	pop    esi
c0022a6c:	5f                   	pop    edi
c0022a6d:	c3                   	ret    

c0022a6e <SATABus::close(int, int, void*)>:
c0022a6e:	31 c0                	xor    eax,eax
c0022a70:	c3                   	ret    
c0022a71:	90                   	nop

c0022a72 <SATABus::detect()>:
c0022a72:	c3                   	ret    
c0022a73:	90                   	nop

c0022a74 <SATABus::SATABus()>:
c0022a74:	83 ec 0c             	sub    esp,0xc
c0022a77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a7b:	83 ec 08             	sub    esp,0x8
c0022a7e:	68 6c b1 02 c0       	push   0xc002b16c
c0022a83:	50                   	push   eax
c0022a84:	e8 79 13 ff ff       	call   c0013e02 <HardDiskController::HardDiskController(char const*)>
c0022a89:	83 c4 10             	add    esp,0x10
c0022a8c:	ba 28 b2 02 c0       	mov    edx,0xc002b228
c0022a91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a95:	89 10                	mov    DWORD PTR [eax],edx
c0022a97:	83 ec 0c             	sub    esp,0xc
c0022a9a:	6a 50                	push   0x50
c0022a9c:	e8 d5 cf fe ff       	call   c000fa76 <Phys::allocateContiguousPages(int)>
c0022aa1:	83 c4 10             	add    esp,0x10
c0022aa4:	89 c2                	mov    edx,eax
c0022aa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022aaa:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0022ab0:	83 ec 0c             	sub    esp,0xc
c0022ab3:	6a 50                	push   0x50
c0022ab5:	e8 dd eb fe ff       	call   c0011697 <Virt::allocateKernelVirtualPages(int)>
c0022aba:	83 c4 10             	add    esp,0x10
c0022abd:	89 c2                	mov    edx,eax
c0022abf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ac3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022ac9:	e8 59 ed fe ff       	call   c0011827 <Virt::getAKernelVAS()>
c0022ace:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022ad2:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0022ad8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022adc:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0022ae2:	83 ec 0c             	sub    esp,0xc
c0022ae5:	6a 03                	push   0x3
c0022ae7:	6a 50                	push   0x50
c0022ae9:	51                   	push   ecx
c0022aea:	52                   	push   edx
c0022aeb:	50                   	push   eax
c0022aec:	e8 65 f5 fe ff       	call   c0012056 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0022af1:	83 c4 20             	add    esp,0x20
c0022af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022af8:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0022afe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b02:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0022b08:	83 ec 04             	sub    esp,0x4
c0022b0b:	52                   	push   edx
c0022b0c:	50                   	push   eax
c0022b0d:	68 90 b1 02 c0       	push   0xc002b190
c0022b12:	e8 70 fb fe ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0022b17:	83 c4 10             	add    esp,0x10
c0022b1a:	90                   	nop
c0022b1b:	83 c4 0c             	add    esp,0xc
c0022b1e:	c3                   	ret    
c0022b1f:	90                   	nop

c0022b20 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0022b20:	83 ec 0c             	sub    esp,0xc
c0022b23:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022b27:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0022b2a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0022b2d:	09 c2                	or     edx,eax
c0022b2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b33:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0022b39:	8b 08                	mov    ecx,DWORD PTR [eax]
c0022b3b:	31 c0                	xor    eax,eax
c0022b3d:	c1 e9 08             	shr    ecx,0x8
c0022b40:	83 e1 0f             	and    ecx,0xf
c0022b43:	39 c8                	cmp    eax,ecx
c0022b45:	74 0a                	je     c0022b51 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0022b47:	f6 c2 01             	test   dl,0x1
c0022b4a:	74 18                	je     c0022b64 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0022b4c:	d1 ea                	shr    edx,1
c0022b4e:	40                   	inc    eax
c0022b4f:	eb f2                	jmp    c0022b43 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0022b51:	83 ec 0c             	sub    esp,0xc
c0022b54:	68 b4 b1 02 c0       	push   0xc002b1b4
c0022b59:	e8 43 6c ff ff       	call   c00197a1 <Krnl::panic(char const*)>
c0022b5e:	83 c4 10             	add    esp,0x10
c0022b61:	83 c8 ff             	or     eax,0xffffffff
c0022b64:	83 c4 0c             	add    esp,0xc
c0022b67:	c3                   	ret    

c0022b68 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0022b68:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022b6c:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0022b6f:	89 c2                	mov    edx,eax
c0022b71:	c1 ea 08             	shr    edx,0x8
c0022b74:	83 e2 0f             	and    edx,0xf
c0022b77:	fe ca                	dec    dl
c0022b79:	75 31                	jne    c0022bac <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0022b7b:	83 e0 0f             	and    eax,0xf
c0022b7e:	3c 03                	cmp    al,0x3
c0022b80:	75 2a                	jne    c0022bac <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0022b82:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0022b85:	b8 02 00 00 00       	mov    eax,0x2
c0022b8a:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0022b90:	74 1c                	je     c0022bae <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0022b92:	b8 04 00 00 00       	mov    eax,0x4
c0022b97:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0022b9d:	74 0f                	je     c0022bae <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0022b9f:	31 c0                	xor    eax,eax
c0022ba1:	83 fa 03             	cmp    edx,0x3
c0022ba4:	0f 94 c0             	sete   al
c0022ba7:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0022bab:	c3                   	ret    
c0022bac:	31 c0                	xor    eax,eax
c0022bae:	c3                   	ret    
c0022baf:	90                   	nop

c0022bb0 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0022bb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022bb4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022bb7:	0f ba e2 0f          	bt     edx,0xf
c0022bbb:	72 f7                	jb     c0022bb4 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0022bbd:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022bc0:	83 ca 10             	or     edx,0x10
c0022bc3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022bc6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022bc9:	83 ca 01             	or     edx,0x1
c0022bcc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022bcf:	c3                   	ret    

c0022bd0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0022bd0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022bd4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022bd7:	83 e2 fe             	and    edx,0xfffffffe
c0022bda:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022bdd:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022be0:	83 e2 ef             	and    edx,0xffffffef
c0022be3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022be6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022be9:	0f ba e2 0e          	bt     edx,0xe
c0022bed:	72 f7                	jb     c0022be6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0022bef:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022bf2:	0f ba e2 0f          	bt     edx,0xf
c0022bf6:	72 ee                	jb     c0022be6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0022bf8:	c3                   	ret    
c0022bf9:	90                   	nop

c0022bfa <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0022bfa:	55                   	push   ebp
c0022bfb:	57                   	push   edi
c0022bfc:	56                   	push   esi
c0022bfd:	53                   	push   ebx
c0022bfe:	83 ec 1c             	sub    esp,0x1c
c0022c01:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022c05:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022c09:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0022c0d:	53                   	push   ebx
c0022c0e:	89 fd                	mov    ebp,edi
c0022c10:	56                   	push   esi
c0022c11:	c1 e5 0a             	shl    ebp,0xa
c0022c14:	e8 b7 ff ff ff       	call   c0022bd0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0022c19:	83 ec 0c             	sub    esp,0xc
c0022c1c:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0022c22:	01 e8                	add    eax,ebp
c0022c24:	89 03                	mov    DWORD PTR [ebx],eax
c0022c26:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022c28:	68 00 04 00 00       	push   0x400
c0022c2d:	6a 00                	push   0x0
c0022c2f:	50                   	push   eax
c0022c30:	e8 56 da fd ff       	call   c000068b <memset>
c0022c35:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0022c3b:	89 fa                	mov    edx,edi
c0022c3d:	01 e8                	add    eax,ebp
c0022c3f:	c1 e7 0d             	shl    edi,0xd
c0022c42:	89 03                	mov    DWORD PTR [ebx],eax
c0022c44:	c1 e2 08             	shl    edx,0x8
c0022c47:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022c4e:	81 c2 00 80 00 00    	add    edx,0x8000
c0022c54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0022c58:	89 d0                	mov    eax,edx
c0022c5a:	83 c4 1c             	add    esp,0x1c
c0022c5d:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0022c63:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022c66:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0022c69:	68 00 01 00 00       	push   0x100
c0022c6e:	6a 00                	push   0x0
c0022c70:	50                   	push   eax
c0022c71:	e8 15 da fd ff       	call   c000068b <memset>
c0022c76:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022c7a:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0022c80:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0022c86:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022c8a:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0022c8d:	83 c4 10             	add    esp,0x10
c0022c90:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022c97:	31 ff                	xor    edi,edi
c0022c99:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0022c9f:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0022ca5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022ca9:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0022caf:	83 c5 20             	add    ebp,0x20
c0022cb2:	01 f8                	add    eax,edi
c0022cb4:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0022cb7:	52                   	push   edx
c0022cb8:	68 00 01 00 00       	push   0x100
c0022cbd:	6a 00                	push   0x0
c0022cbf:	50                   	push   eax
c0022cc0:	e8 c6 d9 fd ff       	call   c000068b <memset>
c0022cc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022cc9:	83 c4 10             	add    esp,0x10
c0022ccc:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0022cd2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0022cd9:	01 f8                	add    eax,edi
c0022cdb:	81 c7 00 01 00 00    	add    edi,0x100
c0022ce1:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0022ce4:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0022cea:	75 b3                	jne    c0022c9f <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0022cec:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0022cf0:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0022cf4:	83 c4 1c             	add    esp,0x1c
c0022cf7:	5b                   	pop    ebx
c0022cf8:	5e                   	pop    esi
c0022cf9:	5f                   	pop    edi
c0022cfa:	5d                   	pop    ebp
c0022cfb:	e9 b0 fe ff ff       	jmp    c0022bb0 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0022d00 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0022d00:	55                   	push   ebp
c0022d01:	57                   	push   edi
c0022d02:	56                   	push   esi
c0022d03:	53                   	push   ebx
c0022d04:	31 db                	xor    ebx,ebx
c0022d06:	83 ec 0c             	sub    esp,0xc
c0022d09:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0022d0d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0022d11:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0022d14:	f7 c7 01 00 00 00    	test   edi,0x1
c0022d1a:	0f 84 94 00 00 00    	je     c0022db4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb4>
c0022d20:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022d24:	89 d8                	mov    eax,ebx
c0022d26:	c1 e0 07             	shl    eax,0x7
c0022d29:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0022d30:	55                   	push   ebp
c0022d31:	56                   	push   esi
c0022d32:	e8 31 fe ff ff       	call   c0022b68 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0022d37:	59                   	pop    ecx
c0022d38:	83 f8 01             	cmp    eax,0x1
c0022d3b:	5a                   	pop    edx
c0022d3c:	75 47                	jne    c0022d85 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x85>
c0022d3e:	51                   	push   ecx
c0022d3f:	51                   	push   ecx
c0022d40:	53                   	push   ebx
c0022d41:	68 d9 b1 02 c0       	push   0xc002b1d9
c0022d46:	e8 3c f9 fe ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0022d4b:	83 c4 0c             	add    esp,0xc
c0022d4e:	53                   	push   ebx
c0022d4f:	55                   	push   ebp
c0022d50:	56                   	push   esi
c0022d51:	e8 a4 fe ff ff       	call   c0022bfa <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0022d56:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0022d5d:	e8 72 c7 fe ff       	call   c000f4d4 <malloc>
c0022d62:	89 04 24             	mov    DWORD PTR [esp],eax
c0022d65:	89 c5                	mov    ebp,eax
c0022d67:	e8 de 0c 00 00       	call   c0023a4a <SATA::SATA()>
c0022d6c:	58                   	pop    eax
c0022d6d:	5a                   	pop    edx
c0022d6e:	55                   	push   ebp
c0022d6f:	56                   	push   esi
c0022d70:	e8 01 0d ff ff       	call   c0013a76 <Device::addChild(Device*)>
c0022d75:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022d78:	56                   	push   esi
c0022d79:	6a 00                	push   0x0
c0022d7b:	53                   	push   ebx
c0022d7c:	55                   	push   ebp
c0022d7d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022d80:	83 c4 20             	add    esp,0x20
c0022d83:	eb 2f                	jmp    c0022db4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb4>
c0022d85:	83 f8 04             	cmp    eax,0x4
c0022d88:	75 1a                	jne    c0022da4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa4>
c0022d8a:	52                   	push   edx
c0022d8b:	52                   	push   edx
c0022d8c:	53                   	push   ebx
c0022d8d:	68 f0 b1 02 c0       	push   0xc002b1f0
c0022d92:	e8 f0 f8 fe ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0022d97:	83 c4 0c             	add    esp,0xc
c0022d9a:	53                   	push   ebx
c0022d9b:	55                   	push   ebp
c0022d9c:	56                   	push   esi
c0022d9d:	e8 58 fe ff ff       	call   c0022bfa <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0022da2:	eb 0d                	jmp    c0022db1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb1>
c0022da4:	50                   	push   eax
c0022da5:	50                   	push   eax
c0022da6:	53                   	push   ebx
c0022da7:	68 09 b2 02 c0       	push   0xc002b209
c0022dac:	e8 d6 f8 fe ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0022db1:	83 c4 10             	add    esp,0x10
c0022db4:	d1 ef                	shr    edi,1
c0022db6:	43                   	inc    ebx
c0022db7:	83 fb 20             	cmp    ebx,0x20
c0022dba:	0f 85 54 ff ff ff    	jne    c0022d14 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0022dc0:	83 c4 0c             	add    esp,0xc
c0022dc3:	5b                   	pop    ebx
c0022dc4:	5e                   	pop    esi
c0022dc5:	5f                   	pop    edi
c0022dc6:	5d                   	pop    ebp
c0022dc7:	c3                   	ret    

c0022dc8 <SATABus::open(int, int, void*)>:
c0022dc8:	83 ec 14             	sub    esp,0x14
c0022dcb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022dcf:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0022dd5:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0022ddb:	52                   	push   edx
c0022ddc:	50                   	push   eax
c0022ddd:	e8 1e ff ff ff       	call   c0022d00 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0022de2:	31 c0                	xor    eax,eax
c0022de4:	83 c4 1c             	add    esp,0x1c
c0022de7:	c3                   	ret    

c0022de8 <ATA::close(int, int, void*)>:
c0022de8:	83 ec 0c             	sub    esp,0xc
c0022deb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022def:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0022df5:	85 c0                	test   eax,eax
c0022df7:	74 0c                	je     c0022e05 <ATA::close(int, int, void*)+0x1d>
c0022df9:	83 ec 0c             	sub    esp,0xc
c0022dfc:	8b 10                	mov    edx,DWORD PTR [eax]
c0022dfe:	50                   	push   eax
c0022dff:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0022e02:	83 c4 10             	add    esp,0x10
c0022e05:	31 c0                	xor    eax,eax
c0022e07:	83 c4 0c             	add    esp,0xc
c0022e0a:	c3                   	ret    
c0022e0b:	90                   	nop

c0022e0c <ATA::powerSaving(PowerSavingLevel)>:
c0022e0c:	c3                   	ret    
c0022e0d:	90                   	nop

c0022e0e <ATA::ATA()>:
c0022e0e:	83 ec 0c             	sub    esp,0xc
c0022e11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e15:	83 ec 04             	sub    esp,0x4
c0022e18:	68 00 02 00 00       	push   0x200
c0022e1d:	68 1c b3 02 c0       	push   0xc002b31c
c0022e22:	50                   	push   eax
c0022e23:	e8 5e 10 ff ff       	call   c0013e86 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0022e28:	83 c4 10             	add    esp,0x10
c0022e2b:	ba 68 b2 02 c0       	mov    edx,0xc002b268
c0022e30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e34:	89 10                	mov    DWORD PTR [eax],edx
c0022e36:	90                   	nop
c0022e37:	83 c4 0c             	add    esp,0xc
c0022e3a:	c3                   	ret    
c0022e3b:	90                   	nop

c0022e3c <ATA::flush(bool)>:
c0022e3c:	53                   	push   ebx
c0022e3d:	83 ec 08             	sub    esp,0x8
c0022e40:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0022e45:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022e49:	19 c0                	sbb    eax,eax
c0022e4b:	83 e0 fd             	and    eax,0xfffffffd
c0022e4e:	05 ea 00 00 00       	add    eax,0xea
c0022e53:	50                   	push   eax
c0022e54:	6a 07                	push   0x7
c0022e56:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022e5d:	50                   	push   eax
c0022e5e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022e64:	e8 f3 ef ff ff       	call   c0021e5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022e69:	83 c4 0c             	add    esp,0xc
c0022e6c:	6a 00                	push   0x0
c0022e6e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022e75:	50                   	push   eax
c0022e76:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022e7c:	e8 87 fb ff ff       	call   c0022a08 <IDE::polling(unsigned char, unsigned int)>
c0022e81:	83 c4 18             	add    esp,0x18
c0022e84:	5b                   	pop    ebx
c0022e85:	c3                   	ret    

c0022e86 <ATA::readyForCommand()>:
c0022e86:	56                   	push   esi
c0022e87:	53                   	push   ebx
c0022e88:	31 db                	xor    ebx,ebx
c0022e8a:	50                   	push   eax
c0022e8b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022e8f:	50                   	push   eax
c0022e90:	6a 0c                	push   0xc
c0022e92:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0022e99:	50                   	push   eax
c0022e9a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0022ea0:	e8 77 f0 ff ff       	call   c0021f1c <IDE::read(unsigned char, unsigned char)>
c0022ea5:	83 c4 10             	add    esp,0x10
c0022ea8:	a8 88                	test   al,0x88
c0022eaa:	74 23                	je     c0022ecf <ATA::readyForCommand()+0x49>
c0022eac:	43                   	inc    ebx
c0022ead:	83 fb 63             	cmp    ebx,0x63
c0022eb0:	7e dd                	jle    c0022e8f <ATA::readyForCommand()+0x9>
c0022eb2:	51                   	push   ecx
c0022eb3:	51                   	push   ecx
c0022eb4:	6a 00                	push   0x0
c0022eb6:	68 40 42 0f 00       	push   0xf4240
c0022ebb:	e8 c0 a2 ff ff       	call   c001d180 <nanoSleep(unsigned long long)>
c0022ec0:	83 c4 10             	add    esp,0x10
c0022ec3:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0022ec9:	75 c4                	jne    c0022e8f <ATA::readyForCommand()+0x9>
c0022ecb:	31 c0                	xor    eax,eax
c0022ecd:	eb 02                	jmp    c0022ed1 <ATA::readyForCommand()+0x4b>
c0022ecf:	b0 01                	mov    al,0x1
c0022ed1:	5a                   	pop    edx
c0022ed2:	5b                   	pop    ebx
c0022ed3:	5e                   	pop    esi
c0022ed4:	c3                   	ret    
c0022ed5:	90                   	nop

c0022ed6 <ATA::access(unsigned long long, int, void*, bool)>:
c0022ed6:	55                   	push   ebp
c0022ed7:	57                   	push   edi
c0022ed8:	56                   	push   esi
c0022ed9:	53                   	push   ebx
c0022eda:	83 ec 2c             	sub    esp,0x2c
c0022edd:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0022ee1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0022ee5:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0022ee9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022eed:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0022ef1:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0022ef5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0022ef9:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0022eff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022f03:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0022f09:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022f0d:	c1 e0 06             	shl    eax,0x6
c0022f10:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0022f18:	74 5d                	je     c0022f77 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0022f1a:	89 fa                	mov    edx,edi
c0022f1c:	89 f0                	mov    eax,esi
c0022f1e:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0022f22:	c1 ea 1c             	shr    edx,0x1c
c0022f25:	89 d1                	mov    ecx,edx
c0022f27:	09 c1                	or     ecx,eax
c0022f29:	74 25                	je     c0022f50 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0022f2b:	31 ed                	xor    ebp,ebp
c0022f2d:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0022f34:	89 fa                	mov    edx,edi
c0022f36:	89 f0                	mov    eax,esi
c0022f38:	0f ad d0             	shrd   eax,edx,cl
c0022f3b:	d3 ea                	shr    edx,cl
c0022f3d:	f6 c1 20             	test   cl,0x20
c0022f40:	74 02                	je     c0022f44 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0022f42:	89 d0                	mov    eax,edx
c0022f44:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0022f48:	45                   	inc    ebp
c0022f49:	83 fd 06             	cmp    ebp,0x6
c0022f4c:	75 df                	jne    c0022f2d <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0022f4e:	eb 76                	jmp    c0022fc6 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0022f50:	89 f0                	mov    eax,esi
c0022f52:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0022f57:	89 fa                	mov    edx,edi
c0022f59:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0022f60:	0f ac d0 10          	shrd   eax,edx,0x10
c0022f64:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0022f69:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0022f6d:	c1 ee 18             	shr    esi,0x18
c0022f70:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0022f75:	eb 56                	jmp    c0022fcd <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0022f77:	6a 00                	push   0x0
c0022f79:	6a 3f                	push   0x3f
c0022f7b:	57                   	push   edi
c0022f7c:	56                   	push   esi
c0022f7d:	e8 3a 24 00 00       	call   c00253bc <__umoddi3>
c0022f82:	83 c4 10             	add    esp,0x10
c0022f85:	40                   	inc    eax
c0022f86:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0022f8a:	6a 00                	push   0x0
c0022f8c:	68 f0 03 00 00       	push   0x3f0
c0022f91:	57                   	push   edi
c0022f92:	56                   	push   esi
c0022f93:	e8 24 23 00 00       	call   c00252bc <__udivdi3>
c0022f98:	83 c4 10             	add    esp,0x10
c0022f9b:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0022fa0:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0022fa7:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0022fac:	6a 00                	push   0x0
c0022fae:	6a 3f                	push   0x3f
c0022fb0:	57                   	push   edi
c0022fb1:	56                   	push   esi
c0022fb2:	e8 05 23 00 00       	call   c00252bc <__udivdi3>
c0022fb7:	83 c4 10             	add    esp,0x10
c0022fba:	89 c6                	mov    esi,eax
c0022fbc:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0022fc1:	83 e6 0f             	and    esi,0xf
c0022fc4:	eb 07                	jmp    c0022fcd <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0022fc6:	31 f6                	xor    esi,esi
c0022fc8:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0022fcd:	bf 01 00 00 00       	mov    edi,0x1
c0022fd2:	50                   	push   eax
c0022fd3:	6a 00                	push   0x0
c0022fd5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022fdc:	50                   	push   eax
c0022fdd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022fe1:	e8 82 f0 ff ff       	call   c0022068 <IDE::enableIRQs(unsigned char, bool)>
c0022fe6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022fe9:	e8 98 fe ff ff       	call   c0022e86 <ATA::readyForCommand()>
c0022fee:	83 c4 10             	add    esp,0x10
c0022ff1:	84 c0                	test   al,al
c0022ff3:	0f 84 50 02 00 00    	je     c0023249 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c0022ff9:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0022fff:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0023005:	c1 e0 04             	shl    eax,0x4
c0023008:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c002300f:	09 c6                	or     esi,eax
c0023011:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0023016:	75 05                	jne    c002301d <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0023018:	83 ce a0             	or     esi,0xffffffa0
c002301b:	eb 03                	jmp    c0023020 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c002301d:	83 ce e0             	or     esi,0xffffffe0
c0023020:	89 f0                	mov    eax,esi
c0023022:	0f b6 f0             	movzx  esi,al
c0023025:	56                   	push   esi
c0023026:	6a 06                	push   0x6
c0023028:	51                   	push   ecx
c0023029:	52                   	push   edx
c002302a:	e8 2d ee ff ff       	call   c0021e5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002302f:	83 c4 10             	add    esp,0x10
c0023032:	6a 00                	push   0x0
c0023034:	6a 01                	push   0x1
c0023036:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002303d:	50                   	push   eax
c002303e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023044:	e8 13 ee ff ff       	call   c0021e5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023049:	83 c4 10             	add    esp,0x10
c002304c:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023051:	75 6e                	jne    c00230c1 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0023053:	6a 00                	push   0x0
c0023055:	6a 08                	push   0x8
c0023057:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002305e:	50                   	push   eax
c002305f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023065:	e8 f2 ed ff ff       	call   c0021e5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002306a:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c002306f:	50                   	push   eax
c0023070:	6a 09                	push   0x9
c0023072:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023079:	50                   	push   eax
c002307a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023080:	e8 d7 ed ff ff       	call   c0021e5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023085:	83 c4 20             	add    esp,0x20
c0023088:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c002308d:	50                   	push   eax
c002308e:	6a 0a                	push   0xa
c0023090:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023097:	50                   	push   eax
c0023098:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002309e:	e8 b9 ed ff ff       	call   c0021e5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230a3:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c00230a8:	50                   	push   eax
c00230a9:	6a 0b                	push   0xb
c00230ab:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00230b2:	50                   	push   eax
c00230b3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00230b9:	e8 9e ed ff ff       	call   c0021e5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230be:	83 c4 20             	add    esp,0x20
c00230c1:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c00230c6:	50                   	push   eax
c00230c7:	6a 02                	push   0x2
c00230c9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00230d0:	50                   	push   eax
c00230d1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00230d7:	e8 80 ed ff ff       	call   c0021e5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230dc:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c00230e1:	50                   	push   eax
c00230e2:	6a 03                	push   0x3
c00230e4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00230eb:	50                   	push   eax
c00230ec:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00230f2:	e8 65 ed ff ff       	call   c0021e5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230f7:	83 c4 20             	add    esp,0x20
c00230fa:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00230ff:	50                   	push   eax
c0023100:	6a 04                	push   0x4
c0023102:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023109:	50                   	push   eax
c002310a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023110:	e8 47 ed ff ff       	call   c0021e5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023115:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002311a:	50                   	push   eax
c002311b:	6a 05                	push   0x5
c002311d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023124:	50                   	push   eax
c0023125:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002312b:	e8 2c ed ff ff       	call   c0021e5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023130:	83 c4 20             	add    esp,0x20
c0023133:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023138:	0f 94 c0             	sete   al
c002313b:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0023140:	74 09                	je     c002314b <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0023142:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0023149:	eb 07                	jmp    c0023152 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c002314b:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0023152:	0f b6 c0             	movzx  eax,al
c0023155:	50                   	push   eax
c0023156:	6a 07                	push   0x7
c0023158:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002315f:	50                   	push   eax
c0023160:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023166:	e8 f1 ec ff ff       	call   c0021e5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002316b:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002316f:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0023173:	83 c4 10             	add    esp,0x10
c0023176:	85 f6                	test   esi,esi
c0023178:	0f 84 ac 00 00 00    	je     c002322a <ATA::access(unsigned long long, int, void*, bool)+0x354>
c002317e:	50                   	push   eax
c002317f:	6a 01                	push   0x1
c0023181:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023188:	50                   	push   eax
c0023189:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002318f:	e8 74 f8 ff ff       	call   c0022a08 <IDE::polling(unsigned char, unsigned int)>
c0023194:	83 c4 10             	add    esp,0x10
c0023197:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002319d:	84 c0                	test   al,al
c002319f:	74 20                	je     c00231c1 <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c00231a1:	0f b6 f8             	movzx  edi,al
c00231a4:	0f b6 d2             	movzx  edx,dl
c00231a7:	57                   	push   edi
c00231a8:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00231af:	50                   	push   eax
c00231b0:	52                   	push   edx
c00231b1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00231b7:	e8 b6 f6 ff ff       	call   c0022872 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00231bc:	e9 85 00 00 00       	jmp    c0023246 <ATA::access(unsigned long long, int, void*, bool)+0x370>
c00231c1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00231c6:	74 41                	je     c0023209 <ATA::access(unsigned long long, int, void*, bool)+0x333>
c00231c8:	31 c9                	xor    ecx,ecx
c00231ca:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c00231ce:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00231d2:	50                   	push   eax
c00231d3:	50                   	push   eax
c00231d4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00231db:	50                   	push   eax
c00231dc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00231e2:	e8 63 ec ff ff       	call   c0021e4a <IDE::getBase(unsigned char)>
c00231e7:	89 c2                	mov    edx,eax
c00231e9:	89 e8                	mov    eax,ebp
c00231eb:	66 ef                	out    dx,ax
c00231ed:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00231f1:	83 c4 10             	add    esp,0x10
c00231f4:	41                   	inc    ecx
c00231f5:	81 f9 00 01 00 00    	cmp    ecx,0x100
c00231fb:	75 cd                	jne    c00231ca <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c00231fd:	4e                   	dec    esi
c00231fe:	81 c7 00 02 00 00    	add    edi,0x200
c0023204:	e9 6d ff ff ff       	jmp    c0023176 <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c0023209:	0f b6 d2             	movzx  edx,dl
c002320c:	51                   	push   ecx
c002320d:	51                   	push   ecx
c002320e:	52                   	push   edx
c002320f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023215:	e8 30 ec ff ff       	call   c0021e4a <IDE::getBase(unsigned char)>
c002321a:	b9 00 01 00 00       	mov    ecx,0x100
c002321f:	89 c2                	mov    edx,eax
c0023221:	fc                   	cld    
c0023222:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0023225:	83 c4 10             	add    esp,0x10
c0023228:	eb d3                	jmp    c00231fd <ATA::access(unsigned long long, int, void*, bool)+0x327>
c002322a:	31 ff                	xor    edi,edi
c002322c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0023231:	74 16                	je     c0023249 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c0023233:	50                   	push   eax
c0023234:	50                   	push   eax
c0023235:	31 c0                	xor    eax,eax
c0023237:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c002323c:	0f 94 c0             	sete   al
c002323f:	50                   	push   eax
c0023240:	53                   	push   ebx
c0023241:	e8 f6 fb ff ff       	call   c0022e3c <ATA::flush(bool)>
c0023246:	83 c4 10             	add    esp,0x10
c0023249:	83 c4 2c             	add    esp,0x2c
c002324c:	89 f8                	mov    eax,edi
c002324e:	5b                   	pop    ebx
c002324f:	5e                   	pop    esi
c0023250:	5f                   	pop    edi
c0023251:	5d                   	pop    ebp
c0023252:	c3                   	ret    
c0023253:	90                   	nop

c0023254 <ATA::read(unsigned long long, int, void*)>:
c0023254:	57                   	push   edi
c0023255:	b8 04 00 00 00       	mov    eax,0x4
c002325a:	56                   	push   esi
c002325b:	53                   	push   ebx
c002325c:	83 ec 10             	sub    esp,0x10
c002325f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023263:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023267:	8d 4b ff             	lea    ecx,[ebx-0x1]
c002326a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002326e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023272:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023278:	77 3b                	ja     c00232b5 <ATA::read(unsigned long long, int, void*)+0x61>
c002327a:	b8 06 00 00 00       	mov    eax,0x6
c002327f:	85 d2                	test   edx,edx
c0023281:	74 32                	je     c00232b5 <ATA::read(unsigned long long, int, void*)+0x61>
c0023283:	50                   	push   eax
c0023284:	50                   	push   eax
c0023285:	6a 00                	push   0x0
c0023287:	52                   	push   edx
c0023288:	53                   	push   ebx
c0023289:	57                   	push   edi
c002328a:	56                   	push   esi
c002328b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002328f:	e8 42 fc ff ff       	call   c0022ed6 <ATA::access(unsigned long long, int, void*, bool)>
c0023294:	83 c4 20             	add    esp,0x20
c0023297:	85 c0                	test   eax,eax
c0023299:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002329d:	75 11                	jne    c00232b0 <ATA::read(unsigned long long, int, void*)+0x5c>
c002329f:	01 1d 88 eb 02 c0    	add    DWORD PTR ds:0xc002eb88,ebx
c00232a5:	e8 ca d1 fe ff       	call   c0010474 <VgaText::updateDiskUsage()>
c00232aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00232ae:	eb 05                	jmp    c00232b5 <ATA::read(unsigned long long, int, void*)+0x61>
c00232b0:	b8 01 00 00 00       	mov    eax,0x1
c00232b5:	83 c4 10             	add    esp,0x10
c00232b8:	5b                   	pop    ebx
c00232b9:	5e                   	pop    esi
c00232ba:	5f                   	pop    edi
c00232bb:	c3                   	ret    

c00232bc <ATA::write(unsigned long long, int, void*)>:
c00232bc:	57                   	push   edi
c00232bd:	b8 04 00 00 00       	mov    eax,0x4
c00232c2:	56                   	push   esi
c00232c3:	53                   	push   ebx
c00232c4:	83 ec 10             	sub    esp,0x10
c00232c7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00232cb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00232cf:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00232d2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00232d6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00232da:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00232e0:	77 3b                	ja     c002331d <ATA::write(unsigned long long, int, void*)+0x61>
c00232e2:	b8 06 00 00 00       	mov    eax,0x6
c00232e7:	85 d2                	test   edx,edx
c00232e9:	74 32                	je     c002331d <ATA::write(unsigned long long, int, void*)+0x61>
c00232eb:	50                   	push   eax
c00232ec:	50                   	push   eax
c00232ed:	6a 01                	push   0x1
c00232ef:	52                   	push   edx
c00232f0:	53                   	push   ebx
c00232f1:	57                   	push   edi
c00232f2:	56                   	push   esi
c00232f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00232f7:	e8 da fb ff ff       	call   c0022ed6 <ATA::access(unsigned long long, int, void*, bool)>
c00232fc:	83 c4 20             	add    esp,0x20
c00232ff:	85 c0                	test   eax,eax
c0023301:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023305:	75 11                	jne    c0023318 <ATA::write(unsigned long long, int, void*)+0x5c>
c0023307:	01 1d 84 eb 02 c0    	add    DWORD PTR ds:0xc002eb84,ebx
c002330d:	e8 62 d1 fe ff       	call   c0010474 <VgaText::updateDiskUsage()>
c0023312:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023316:	eb 05                	jmp    c002331d <ATA::write(unsigned long long, int, void*)+0x61>
c0023318:	b8 01 00 00 00       	mov    eax,0x1
c002331d:	83 c4 10             	add    esp,0x10
c0023320:	5b                   	pop    ebx
c0023321:	5e                   	pop    esi
c0023322:	5f                   	pop    edi
c0023323:	c3                   	ret    

c0023324 <ATA::detectCHS()>:
c0023324:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023328:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002332e:	c1 e0 06             	shl    eax,0x6
c0023331:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0023337:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0023341:	c7 44 24 04 4c b2 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b24c
c0023349:	e9 53 64 ff ff       	jmp    c00197a1 <Krnl::panic(char const*)>

c002334e <ATA::open(int, int, void*)>:
c002334e:	53                   	push   ebx
c002334f:	83 ec 08             	sub    esp,0x8
c0023352:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023356:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002335a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002335e:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0023364:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002336a:	c1 e0 06             	shl    eax,0x6
c002336d:	01 d0                	add    eax,edx
c002336f:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0023376:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002337c:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0023383:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002338d:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0023393:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002339a:	75 0c                	jne    c00233a8 <ATA::open(int, int, void*)+0x5a>
c002339c:	83 ec 0c             	sub    esp,0xc
c002339f:	53                   	push   ebx
c00233a0:	e8 7f ff ff ff       	call   c0023324 <ATA::detectCHS()>
c00233a5:	83 c4 10             	add    esp,0x10
c00233a8:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00233ae:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00233b4:	c1 e0 06             	shl    eax,0x6
c00233b7:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00233be:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00233c8:	d1 e8                	shr    eax,1
c00233ca:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00233d0:	6a 04                	push   0x4
c00233d2:	6a 0c                	push   0xc
c00233d4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00233db:	50                   	push   eax
c00233dc:	52                   	push   edx
c00233dd:	e8 7a ea ff ff       	call   c0021e5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00233e2:	90                   	nop
c00233e3:	90                   	nop
c00233e4:	6a 00                	push   0x0
c00233e6:	6a 0c                	push   0xc
c00233e8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00233ef:	50                   	push   eax
c00233f0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00233f6:	e8 61 ea ff ff       	call   c0021e5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00233fb:	83 c4 14             	add    esp,0x14
c00233fe:	53                   	push   ebx
c00233ff:	e8 ea 0a ff ff       	call   c0013eee <PhysicalDisk::startCache()>
c0023404:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023407:	e8 0c 2b ff ff       	call   c0015f18 <createPartitionsForDisk(PhysicalDisk*)>
c002340c:	31 c0                	xor    eax,eax
c002340e:	83 c4 18             	add    esp,0x18
c0023411:	5b                   	pop    ebx
c0023412:	c3                   	ret    
c0023413:	90                   	nop

c0023414 <ATAPI::write(unsigned long long, int, void*)>:
c0023414:	b8 03 00 00 00       	mov    eax,0x3
c0023419:	c3                   	ret    

c002341a <ATAPI::close(int, int, void*)>:
c002341a:	83 ec 0c             	sub    esp,0xc
c002341d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023421:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023427:	85 c0                	test   eax,eax
c0023429:	74 0c                	je     c0023437 <ATAPI::close(int, int, void*)+0x1d>
c002342b:	83 ec 0c             	sub    esp,0xc
c002342e:	8b 10                	mov    edx,DWORD PTR [eax]
c0023430:	50                   	push   eax
c0023431:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023434:	83 c4 10             	add    esp,0x10
c0023437:	31 c0                	xor    eax,eax
c0023439:	83 c4 0c             	add    esp,0xc
c002343c:	c3                   	ret    
c002343d:	90                   	nop

c002343e <ATAPI::ATAPI()>:
c002343e:	83 ec 0c             	sub    esp,0xc
c0023441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023445:	83 ec 04             	sub    esp,0x4
c0023448:	68 00 08 00 00       	push   0x800
c002344d:	68 94 b2 02 c0       	push   0xc002b294
c0023452:	50                   	push   eax
c0023453:	e8 2e 0a ff ff       	call   c0013e86 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023458:	83 c4 10             	add    esp,0x10
c002345b:	ba d4 b2 02 c0       	mov    edx,0xc002b2d4
c0023460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023464:	89 10                	mov    DWORD PTR [eax],edx
c0023466:	90                   	nop
c0023467:	83 c4 0c             	add    esp,0xc
c002346a:	c3                   	ret    
c002346b:	90                   	nop

c002346c <ATAPI::readyForCommand()>:
c002346c:	56                   	push   esi
c002346d:	53                   	push   ebx
c002346e:	31 db                	xor    ebx,ebx
c0023470:	50                   	push   eax
c0023471:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023475:	50                   	push   eax
c0023476:	6a 0c                	push   0xc
c0023478:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002347f:	50                   	push   eax
c0023480:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023486:	e8 91 ea ff ff       	call   c0021f1c <IDE::read(unsigned char, unsigned char)>
c002348b:	83 c4 10             	add    esp,0x10
c002348e:	a8 88                	test   al,0x88
c0023490:	74 23                	je     c00234b5 <ATAPI::readyForCommand()+0x49>
c0023492:	43                   	inc    ebx
c0023493:	83 fb 63             	cmp    ebx,0x63
c0023496:	7e dd                	jle    c0023475 <ATAPI::readyForCommand()+0x9>
c0023498:	51                   	push   ecx
c0023499:	51                   	push   ecx
c002349a:	6a 00                	push   0x0
c002349c:	68 40 42 0f 00       	push   0xf4240
c00234a1:	e8 da 9c ff ff       	call   c001d180 <nanoSleep(unsigned long long)>
c00234a6:	83 c4 10             	add    esp,0x10
c00234a9:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00234af:	75 c4                	jne    c0023475 <ATAPI::readyForCommand()+0x9>
c00234b1:	31 c0                	xor    eax,eax
c00234b3:	eb 02                	jmp    c00234b7 <ATAPI::readyForCommand()+0x4b>
c00234b5:	b0 01                	mov    al,0x1
c00234b7:	5a                   	pop    edx
c00234b8:	5b                   	pop    ebx
c00234b9:	5e                   	pop    esi
c00234ba:	c3                   	ret    
c00234bb:	90                   	nop

c00234bc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00234bc:	55                   	push   ebp
c00234bd:	57                   	push   edi
c00234be:	56                   	push   esi
c00234bf:	53                   	push   ebx
c00234c0:	83 ec 20             	sub    esp,0x20
c00234c3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00234c7:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00234cb:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00234cf:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00234d3:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00234d7:	6a 01                	push   0x1
c00234d9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00234e0:	50                   	push   eax
c00234e1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00234e7:	e8 7c eb ff ff       	call   c0022068 <IDE::enableIRQs(unsigned char, bool)>
c00234ec:	5e                   	pop    esi
c00234ed:	58                   	pop    eax
c00234ee:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00234f5:	50                   	push   eax
c00234f6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00234fc:	e8 35 e9 ff ff       	call   c0021e36 <IDE::prepareInterrupt(unsigned char)>
c0023501:	89 3c 24             	mov    DWORD PTR [esp],edi
c0023504:	e8 63 ff ff ff       	call   c002346c <ATAPI::readyForCommand()>
c0023509:	83 c4 10             	add    esp,0x10
c002350c:	84 c0                	test   al,al
c002350e:	75 0a                	jne    c002351a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0023510:	bb 01 00 00 00       	mov    ebx,0x1
c0023515:	e9 57 02 00 00       	jmp    c0023771 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002351a:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0023520:	c1 e0 04             	shl    eax,0x4
c0023523:	0f b6 c0             	movzx  eax,al
c0023526:	50                   	push   eax
c0023527:	6a 06                	push   0x6
c0023529:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023530:	50                   	push   eax
c0023531:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023537:	e8 20 e9 ff ff       	call   c0021e5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002353c:	6a 00                	push   0x0
c002353e:	6a 01                	push   0x1
c0023540:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023547:	50                   	push   eax
c0023548:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002354e:	e8 09 e9 ff ff       	call   c0021e5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023553:	83 c4 20             	add    esp,0x20
c0023556:	0f b6 c3             	movzx  eax,bl
c0023559:	0f b6 df             	movzx  ebx,bh
c002355c:	50                   	push   eax
c002355d:	6a 04                	push   0x4
c002355f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023566:	50                   	push   eax
c0023567:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002356d:	e8 ea e8 ff ff       	call   c0021e5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023572:	53                   	push   ebx
c0023573:	6a 05                	push   0x5
c0023575:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002357c:	50                   	push   eax
c002357d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023583:	e8 d4 e8 ff ff       	call   c0021e5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023588:	83 c4 20             	add    esp,0x20
c002358b:	68 a0 00 00 00       	push   0xa0
c0023590:	6a 07                	push   0x7
c0023592:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023599:	50                   	push   eax
c002359a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00235a0:	e8 b7 e8 ff ff       	call   c0021e5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00235a5:	83 c4 0c             	add    esp,0xc
c00235a8:	6a 01                	push   0x1
c00235aa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00235b1:	50                   	push   eax
c00235b2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00235b8:	e8 4b f4 ff ff       	call   c0022a08 <IDE::polling(unsigned char, unsigned int)>
c00235bd:	83 c4 10             	add    esp,0x10
c00235c0:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c00235c6:	84 c0                	test   al,al
c00235c8:	74 23                	je     c00235ed <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c00235ca:	0f b6 d8             	movzx  ebx,al
c00235cd:	0f b6 d2             	movzx  edx,dl
c00235d0:	53                   	push   ebx
c00235d1:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c00235d8:	50                   	push   eax
c00235d9:	52                   	push   edx
c00235da:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00235e0:	e8 8d f2 ff ff       	call   c0022872 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00235e5:	83 c4 10             	add    esp,0x10
c00235e8:	e9 84 01 00 00       	jmp    c0023771 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00235ed:	0f b6 d2             	movzx  edx,dl
c00235f0:	53                   	push   ebx
c00235f1:	53                   	push   ebx
c00235f2:	52                   	push   edx
c00235f3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00235f9:	e8 4c e8 ff ff       	call   c0021e4a <IDE::getBase(unsigned char)>
c00235fe:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023602:	b9 06 00 00 00       	mov    ecx,0x6
c0023607:	89 c2                	mov    edx,eax
c0023609:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002360c:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0023610:	83 c4 10             	add    esp,0x10
c0023613:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0023619:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0023620:	85 db                	test   ebx,ebx
c0023622:	0f 84 ec 00 00 00    	je     c0023714 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0023628:	51                   	push   ecx
c0023629:	51                   	push   ecx
c002362a:	52                   	push   edx
c002362b:	50                   	push   eax
c002362c:	e8 99 e9 ff ff       	call   c0021fca <IDE::waitInterrupt(unsigned char)>
c0023631:	83 c4 10             	add    esp,0x10
c0023634:	84 c0                	test   al,al
c0023636:	0f 84 d4 fe ff ff    	je     c0023510 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002363c:	56                   	push   esi
c002363d:	56                   	push   esi
c002363e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023645:	50                   	push   eax
c0023646:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002364c:	e8 e5 e7 ff ff       	call   c0021e36 <IDE::prepareInterrupt(unsigned char)>
c0023651:	83 c4 0c             	add    esp,0xc
c0023654:	6a 04                	push   0x4
c0023656:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002365d:	50                   	push   eax
c002365e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023664:	e8 b3 e8 ff ff       	call   c0021f1c <IDE::read(unsigned char, unsigned char)>
c0023669:	83 c4 0c             	add    esp,0xc
c002366c:	89 c6                	mov    esi,eax
c002366e:	6a 05                	push   0x5
c0023670:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023677:	50                   	push   eax
c0023678:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002367e:	e8 99 e8 ff ff       	call   c0021f1c <IDE::read(unsigned char, unsigned char)>
c0023683:	89 f1                	mov    ecx,esi
c0023685:	0f b6 c0             	movzx  eax,al
c0023688:	0f b6 f1             	movzx  esi,cl
c002368b:	c1 e0 08             	shl    eax,0x8
c002368e:	09 c6                	or     esi,eax
c0023690:	d1 fe                	sar    esi,1
c0023692:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0023696:	83 c4 10             	add    esp,0x10
c0023699:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c002369e:	74 41                	je     c00236e1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00236a0:	31 c9                	xor    ecx,ecx
c00236a2:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00236a8:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00236af:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00236b3:	75 0a                	jne    c00236bf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00236b5:	01 c9                	add    ecx,ecx
c00236b7:	01 cd                	add    ebp,ecx
c00236b9:	4b                   	dec    ebx
c00236ba:	e9 54 ff ff ff       	jmp    c0023613 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00236bf:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00236c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00236c8:	51                   	push   ecx
c00236c9:	51                   	push   ecx
c00236ca:	52                   	push   edx
c00236cb:	50                   	push   eax
c00236cc:	e8 79 e7 ff ff       	call   c0021e4a <IDE::getBase(unsigned char)>
c00236d1:	89 c2                	mov    edx,eax
c00236d3:	89 f0                	mov    eax,esi
c00236d5:	66 ef                	out    dx,ax
c00236d7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00236db:	83 c4 10             	add    esp,0x10
c00236de:	41                   	inc    ecx
c00236df:	eb c1                	jmp    c00236a2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c00236e1:	31 f6                	xor    esi,esi
c00236e3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00236e9:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00236f0:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00236f4:	75 06                	jne    c00236fc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c00236f6:	01 f6                	add    esi,esi
c00236f8:	01 f5                	add    ebp,esi
c00236fa:	eb bd                	jmp    c00236b9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c00236fc:	51                   	push   ecx
c00236fd:	51                   	push   ecx
c00236fe:	52                   	push   edx
c00236ff:	50                   	push   eax
c0023700:	e8 45 e7 ff ff       	call   c0021e4a <IDE::getBase(unsigned char)>
c0023705:	89 c2                	mov    edx,eax
c0023707:	66 ed                	in     ax,dx
c0023709:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002370e:	83 c4 10             	add    esp,0x10
c0023711:	46                   	inc    esi
c0023712:	eb cf                	jmp    c00236e3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0023714:	51                   	push   ecx
c0023715:	51                   	push   ecx
c0023716:	52                   	push   edx
c0023717:	50                   	push   eax
c0023718:	e8 ad e8 ff ff       	call   c0021fca <IDE::waitInterrupt(unsigned char)>
c002371d:	83 c4 10             	add    esp,0x10
c0023720:	84 c0                	test   al,al
c0023722:	0f 84 e8 fd ff ff    	je     c0023510 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0023728:	bb a0 86 01 00       	mov    ebx,0x186a0
c002372d:	52                   	push   edx
c002372e:	52                   	push   edx
c002372f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023736:	50                   	push   eax
c0023737:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002373d:	e8 f4 e6 ff ff       	call   c0021e36 <IDE::prepareInterrupt(unsigned char)>
c0023742:	83 c4 10             	add    esp,0x10
c0023745:	50                   	push   eax
c0023746:	50                   	push   eax
c0023747:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002374e:	50                   	push   eax
c002374f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023755:	e8 f0 e6 ff ff       	call   c0021e4a <IDE::getBase(unsigned char)>
c002375a:	8d 50 07             	lea    edx,[eax+0x7]
c002375d:	ec                   	in     al,dx
c002375e:	83 c4 10             	add    esp,0x10
c0023761:	a8 88                	test   al,0x88
c0023763:	74 0a                	je     c002376f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0023765:	4b                   	dec    ebx
c0023766:	75 dd                	jne    c0023745 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0023768:	bb 02 00 00 00       	mov    ebx,0x2
c002376d:	eb 02                	jmp    c0023771 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002376f:	31 db                	xor    ebx,ebx
c0023771:	83 c4 1c             	add    esp,0x1c
c0023774:	89 d8                	mov    eax,ebx
c0023776:	5b                   	pop    ebx
c0023777:	5e                   	pop    esi
c0023778:	5f                   	pop    edi
c0023779:	5d                   	pop    ebp
c002377a:	c3                   	ret    
c002377b:	90                   	nop

c002377c <ATAPI::diskRemoved()>:
c002377c:	83 ec 18             	sub    esp,0x18
c002377f:	68 9f b2 02 c0       	push   0xc002b29f
c0023784:	e8 fe ee fe ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0023789:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002378d:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0023794:	83 c4 1c             	add    esp,0x1c
c0023797:	c3                   	ret    

c0023798 <ATAPI::eject()>:
c0023798:	57                   	push   edi
c0023799:	b9 03 00 00 00       	mov    ecx,0x3
c002379e:	53                   	push   ebx
c002379f:	83 ec 14             	sub    esp,0x14
c00237a2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00237a6:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00237aa:	fc                   	cld    
c00237ab:	31 c0                	xor    eax,eax
c00237ad:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00237af:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00237b4:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00237b9:	50                   	push   eax
c00237ba:	50                   	push   eax
c00237bb:	6a 00                	push   0x0
c00237bd:	6a 00                	push   0x0
c00237bf:	6a 00                	push   0x0
c00237c1:	6a 02                	push   0x2
c00237c3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00237c7:	50                   	push   eax
c00237c8:	53                   	push   ebx
c00237c9:	e8 ee fc ff ff       	call   c00234bc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00237ce:	83 c4 14             	add    esp,0x14
c00237d1:	53                   	push   ebx
c00237d2:	e8 a5 ff ff ff       	call   c002377c <ATAPI::diskRemoved()>
c00237d7:	83 c4 24             	add    esp,0x24
c00237da:	5b                   	pop    ebx
c00237db:	5f                   	pop    edi
c00237dc:	c3                   	ret    
c00237dd:	90                   	nop

c00237de <ATAPI::diskInserted()>:
c00237de:	53                   	push   ebx
c00237df:	83 ec 14             	sub    esp,0x14
c00237e2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00237e6:	68 b5 b2 02 c0       	push   0xc002b2b5
c00237eb:	e8 97 ee fe ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c00237f0:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c00237f7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00237fa:	e8 ef 06 ff ff       	call   c0013eee <PhysicalDisk::startCache()>
c00237ff:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0023803:	83 c4 18             	add    esp,0x18
c0023806:	5b                   	pop    ebx
c0023807:	e9 0c 27 ff ff       	jmp    c0015f18 <createPartitionsForDisk(PhysicalDisk*)>

c002380c <ATAPI::detectMedia()>:
c002380c:	56                   	push   esi
c002380d:	53                   	push   ebx
c002380e:	83 ec 28             	sub    esp,0x28
c0023811:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023815:	6a 0c                	push   0xc
c0023817:	6a 00                	push   0x0
c0023819:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002381d:	56                   	push   esi
c002381e:	e8 68 ce fd ff       	call   c000068b <memset>
c0023823:	58                   	pop    eax
c0023824:	5a                   	pop    edx
c0023825:	6a 00                	push   0x0
c0023827:	6a 00                	push   0x0
c0023829:	6a 00                	push   0x0
c002382b:	6a 00                	push   0x0
c002382d:	56                   	push   esi
c002382e:	53                   	push   ebx
c002382f:	e8 88 fc ff ff       	call   c00234bc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023834:	83 c4 1c             	add    esp,0x1c
c0023837:	6a 0c                	push   0xc
c0023839:	6a 00                	push   0x0
c002383b:	56                   	push   esi
c002383c:	e8 4a ce fd ff       	call   c000068b <memset>
c0023841:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0023846:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002384b:	59                   	pop    ecx
c002384c:	58                   	pop    eax
c002384d:	6a 01                	push   0x1
c002384f:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0023853:	50                   	push   eax
c0023854:	6a 00                	push   0x0
c0023856:	6a 12                	push   0x12
c0023858:	56                   	push   esi
c0023859:	53                   	push   ebx
c002385a:	e8 5d fc ff ff       	call   c00234bc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002385f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0023863:	83 c4 20             	add    esp,0x20
c0023866:	83 e0 7f             	and    eax,0x7f
c0023869:	3c 70                	cmp    al,0x70
c002386b:	74 15                	je     c0023882 <ATAPI::detectMedia()+0x76>
c002386d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0023874:	75 0c                	jne    c0023882 <ATAPI::detectMedia()+0x76>
c0023876:	83 ec 0c             	sub    esp,0xc
c0023879:	53                   	push   ebx
c002387a:	e8 5f ff ff ff       	call   c00237de <ATAPI::diskInserted()>
c002387f:	83 c4 10             	add    esp,0x10
c0023882:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0023886:	83 e0 0f             	and    eax,0xf
c0023889:	3c 02                	cmp    al,0x2
c002388b:	75 1b                	jne    c00238a8 <ATAPI::detectMedia()+0x9c>
c002388d:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0023892:	75 2d                	jne    c00238c1 <ATAPI::detectMedia()+0xb5>
c0023894:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002389b:	74 24                	je     c00238c1 <ATAPI::detectMedia()+0xb5>
c002389d:	83 ec 0c             	sub    esp,0xc
c00238a0:	53                   	push   ebx
c00238a1:	e8 d6 fe ff ff       	call   c002377c <ATAPI::diskRemoved()>
c00238a6:	eb 16                	jmp    c00238be <ATAPI::detectMedia()+0xb2>
c00238a8:	84 c0                	test   al,al
c00238aa:	75 15                	jne    c00238c1 <ATAPI::detectMedia()+0xb5>
c00238ac:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00238b3:	75 0c                	jne    c00238c1 <ATAPI::detectMedia()+0xb5>
c00238b5:	83 ec 0c             	sub    esp,0xc
c00238b8:	53                   	push   ebx
c00238b9:	e8 20 ff ff ff       	call   c00237de <ATAPI::diskInserted()>
c00238be:	83 c4 10             	add    esp,0x10
c00238c1:	83 c4 24             	add    esp,0x24
c00238c4:	5b                   	pop    ebx
c00238c5:	5e                   	pop    esi
c00238c6:	c3                   	ret    
c00238c7:	90                   	nop

c00238c8 <ATAPI::open(int, int, void*)>:
c00238c8:	53                   	push   ebx
c00238c9:	83 ec 08             	sub    esp,0x8
c00238cc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00238d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00238d4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00238d8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00238de:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00238e4:	c1 e0 06             	shl    eax,0x6
c00238e7:	01 d0                	add    eax,edx
c00238e9:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c00238f0:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c00238f6:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c00238fd:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0023907:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002390d:	6a 04                	push   0x4
c002390f:	6a 0c                	push   0xc
c0023911:	51                   	push   ecx
c0023912:	52                   	push   edx
c0023913:	e8 44 e5 ff ff       	call   c0021e5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023918:	90                   	nop
c0023919:	90                   	nop
c002391a:	6a 00                	push   0x0
c002391c:	6a 0c                	push   0xc
c002391e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023925:	50                   	push   eax
c0023926:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002392c:	e8 2b e5 ff ff       	call   c0021e5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023931:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0023938:	83 c4 14             	add    esp,0x14
c002393b:	53                   	push   ebx
c002393c:	e8 cb fe ff ff       	call   c002380c <ATAPI::detectMedia()>
c0023941:	31 c0                	xor    eax,eax
c0023943:	83 c4 18             	add    esp,0x18
c0023946:	5b                   	pop    ebx
c0023947:	c3                   	ret    

c0023948 <ATAPI::read(unsigned long long, int, void*)>:
c0023948:	55                   	push   ebp
c0023949:	57                   	push   edi
c002394a:	56                   	push   esi
c002394b:	53                   	push   ebx
c002394c:	83 ec 1c             	sub    esp,0x1c
c002394f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023953:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023957:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002395b:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0023962:	74 41                	je     c00239a5 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0023964:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023968:	b9 03 00 00 00       	mov    ecx,0x3
c002396d:	fc                   	cld    
c002396e:	31 c0                	xor    eax,eax
c0023970:	86 fb                	xchg   bl,bh
c0023972:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0023974:	c1 c3 10             	rol    ebx,0x10
c0023977:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002397c:	89 e8                	mov    eax,ebp
c002397e:	86 fb                	xchg   bl,bh
c0023980:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0023984:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0023988:	50                   	push   eax
c0023989:	50                   	push   eax
c002398a:	55                   	push   ebp
c002398b:	c1 e5 0b             	shl    ebp,0xb
c002398e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0023992:	6a 00                	push   0x0
c0023994:	55                   	push   ebp
c0023995:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0023999:	50                   	push   eax
c002399a:	56                   	push   esi
c002399b:	e8 1c fb ff ff       	call   c00234bc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00239a0:	83 c4 20             	add    esp,0x20
c00239a3:	eb 1a                	jmp    c00239bf <ATAPI::read(unsigned long long, int, void*)+0x77>
c00239a5:	83 ec 0c             	sub    esp,0xc
c00239a8:	56                   	push   esi
c00239a9:	e8 5e fe ff ff       	call   c002380c <ATAPI::detectMedia()>
c00239ae:	83 c4 10             	add    esp,0x10
c00239b1:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00239b8:	75 aa                	jne    c0023964 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c00239ba:	b8 02 00 00 00       	mov    eax,0x2
c00239bf:	83 c4 1c             	add    esp,0x1c
c00239c2:	5b                   	pop    ebx
c00239c3:	5e                   	pop    esi
c00239c4:	5f                   	pop    edi
c00239c5:	5d                   	pop    ebp
c00239c6:	c3                   	ret    
c00239c7:	90                   	nop

c00239c8 <SATA::close(int, int, void*)>:
c00239c8:	83 ec 0c             	sub    esp,0xc
c00239cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00239cf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00239d5:	85 c0                	test   eax,eax
c00239d7:	74 0c                	je     c00239e5 <SATA::close(int, int, void*)+0x1d>
c00239d9:	83 ec 0c             	sub    esp,0xc
c00239dc:	8b 10                	mov    edx,DWORD PTR [eax]
c00239de:	50                   	push   eax
c00239df:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00239e2:	83 c4 10             	add    esp,0x10
c00239e5:	31 c0                	xor    eax,eax
c00239e7:	83 c4 0c             	add    esp,0xc
c00239ea:	c3                   	ret    
c00239eb:	90                   	nop

c00239ec <SATA::powerSaving(PowerSavingLevel)>:
c00239ec:	c3                   	ret    
c00239ed:	90                   	nop

c00239ee <SATA::open(int, int, void*)>:
c00239ee:	53                   	push   ebx
c00239ef:	83 ec 14             	sub    esp,0x14
c00239f2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00239f6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00239fa:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0023a04:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0023a0a:	c7 83 60 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x160],0x0
c0023a14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023a18:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0023a22:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0023a28:	68 00 b3 02 c0       	push   0xc002b300
c0023a2d:	e8 55 ec fe ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0023a32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023a35:	e8 b4 04 ff ff       	call   c0013eee <PhysicalDisk::startCache()>
c0023a3a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023a3d:	e8 d6 24 ff ff       	call   c0015f18 <createPartitionsForDisk(PhysicalDisk*)>
c0023a42:	31 c0                	xor    eax,eax
c0023a44:	83 c4 18             	add    esp,0x18
c0023a47:	5b                   	pop    ebx
c0023a48:	c3                   	ret    
c0023a49:	90                   	nop

c0023a4a <SATA::SATA()>:
c0023a4a:	83 ec 0c             	sub    esp,0xc
c0023a4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a51:	83 ec 04             	sub    esp,0x4
c0023a54:	68 00 02 00 00       	push   0x200
c0023a59:	68 1b b3 02 c0       	push   0xc002b31b
c0023a5e:	50                   	push   eax
c0023a5f:	e8 22 04 ff ff       	call   c0013e86 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023a64:	83 c4 10             	add    esp,0x10
c0023a67:	ba f8 b3 02 c0       	mov    edx,0xc002b3f8
c0023a6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a70:	89 10                	mov    DWORD PTR [eax],edx
c0023a72:	90                   	nop
c0023a73:	83 c4 0c             	add    esp,0xc
c0023a76:	c3                   	ret    
c0023a77:	90                   	nop

c0023a78 <SATA::access(unsigned long long, int, void*, bool)>:
c0023a78:	55                   	push   ebp
c0023a79:	57                   	push   edi
c0023a7a:	56                   	push   esi
c0023a7b:	53                   	push   ebx
c0023a7c:	81 ec 2c 04 00 00    	sub    esp,0x42c
c0023a82:	8b 84 24 48 04 00 00 	mov    eax,DWORD PTR [esp+0x448]
c0023a89:	8b bc 24 4c 04 00 00 	mov    edi,DWORD PTR [esp+0x44c]
c0023a90:	8b 9c 24 40 04 00 00 	mov    ebx,DWORD PTR [esp+0x440]
c0023a97:	8b b4 24 44 04 00 00 	mov    esi,DWORD PTR [esp+0x444]
c0023a9e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023aa2:	83 ff 08             	cmp    edi,0x8
c0023aa5:	7e 10                	jle    c0023ab7 <SATA::access(unsigned long long, int, void*, bool)+0x3f>
c0023aa7:	83 ec 0c             	sub    esp,0xc
c0023aaa:	68 2b b3 02 c0       	push   0xc002b32b
c0023aaf:	e8 ed 5c ff ff       	call   c00197a1 <Krnl::panic(char const*)>
c0023ab4:	83 c4 10             	add    esp,0x10
c0023ab7:	51                   	push   ecx
c0023ab8:	68 00 02 00 00       	push   0x200
c0023abd:	68 ee 00 00 00       	push   0xee
c0023ac2:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0023ac6:	55                   	push   ebp
c0023ac7:	e8 bf cb fd ff       	call   c000068b <memset>
c0023acc:	83 c4 0c             	add    esp,0xc
c0023acf:	68 00 02 00 00       	push   0x200
c0023ad4:	68 ee 00 00 00       	push   0xee
c0023ad9:	8d 84 24 2c 02 00 00 	lea    eax,[esp+0x22c]
c0023ae0:	50                   	push   eax
c0023ae1:	e8 a5 cb fd ff       	call   c000068b <memset>
c0023ae6:	55                   	push   ebp
c0023ae7:	57                   	push   edi
c0023ae8:	56                   	push   esi
c0023ae9:	68 5d b3 02 c0       	push   0xc002b35d
c0023aee:	e8 94 eb fe ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0023af3:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0023af9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023aff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0023b03:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023b09:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0023b0d:	c1 e0 07             	shl    eax,0x7
c0023b10:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
c0023b14:	83 c4 18             	add    esp,0x18
c0023b17:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0023b21:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023b25:	8d 50 02             	lea    edx,[eax+0x2]
c0023b28:	c1 e2 07             	shl    edx,0x7
c0023b2b:	03 54 24 14          	add    edx,DWORD PTR [esp+0x14]
c0023b2f:	52                   	push   edx
c0023b30:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023b34:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0023b3a:	e8 e1 ef ff ff       	call   c0022b20 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0023b3f:	89 c1                	mov    ecx,eax
c0023b41:	58                   	pop    eax
c0023b42:	5a                   	pop    edx
c0023b43:	51                   	push   ecx
c0023b44:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0023b48:	68 92 b3 02 c0       	push   0xc002b392
c0023b4d:	e8 35 eb fe ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0023b52:	83 c4 10             	add    esp,0x10
c0023b55:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0023b59:	83 f9 ff             	cmp    ecx,0xffffffff
c0023b5c:	0f 84 9a 01 00 00    	je     c0023cfc <SATA::access(unsigned long long, int, void*, bool)+0x284>
c0023b62:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0023b68:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023b6c:	8b 12                	mov    edx,DWORD PTR [edx]
c0023b6e:	2b 90 5c 01 00 00    	sub    edx,DWORD PTR [eax+0x15c]
c0023b74:	03 90 58 01 00 00    	add    edx,DWORD PTR [eax+0x158]
c0023b7a:	89 c8                	mov    eax,ecx
c0023b7c:	c1 e0 05             	shl    eax,0x5
c0023b7f:	01 c2                	add    edx,eax
c0023b81:	8a 02                	mov    al,BYTE PTR [edx]
c0023b83:	83 e0 a0             	and    eax,0xffffffa0
c0023b86:	83 c8 05             	or     eax,0x5
c0023b89:	88 02                	mov    BYTE PTR [edx],al
c0023b8b:	8d 47 ff             	lea    eax,[edi-0x1]
c0023b8e:	c1 f8 04             	sar    eax,0x4
c0023b91:	40                   	inc    eax
c0023b92:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0023b96:	0f b7 c0             	movzx  eax,ax
c0023b99:	8b 9b 70 01 00 00    	mov    ebx,DWORD PTR [ebx+0x170]
c0023b9f:	83 c0 08             	add    eax,0x8
c0023ba2:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c0023ba8:	c1 e0 04             	shl    eax,0x4
c0023bab:	2b 8b 5c 01 00 00    	sub    ecx,DWORD PTR [ebx+0x15c]
c0023bb1:	8b 5a 08             	mov    ebx,DWORD PTR [edx+0x8]
c0023bb4:	01 cb                	add    ebx,ecx
c0023bb6:	52                   	push   edx
c0023bb7:	50                   	push   eax
c0023bb8:	6a 00                	push   0x0
c0023bba:	53                   	push   ebx
c0023bbb:	e8 cb ca fd ff       	call   c000068b <memset>
c0023bc0:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0023bc6:	83 c4 10             	add    esp,0x10
c0023bc9:	89 ab 80 00 00 00    	mov    DWORD PTR [ebx+0x80],ebp
c0023bcf:	25 00 00 c0 7f       	and    eax,0x7fc00000
c0023bd4:	8d ac 24 20 02 00 00 	lea    ebp,[esp+0x220]
c0023bdb:	0d ff 01 00 80       	or     eax,0x800001ff
c0023be0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0023be4:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0023bea:	b8 01 00 00 00       	mov    eax,0x1
c0023bef:	89 c2                	mov    edx,eax
c0023bf1:	c1 e2 04             	shl    edx,0x4
c0023bf4:	89 ac 13 80 00 00 00 	mov    DWORD PTR [ebx+edx*1+0x80],ebp
c0023bfb:	8d 50 08             	lea    edx,[eax+0x8]
c0023bfe:	40                   	inc    eax
c0023bff:	c1 e2 04             	shl    edx,0x4
c0023c02:	81 64 13 0c 00 00 c0 7f 	and    DWORD PTR [ebx+edx*1+0xc],0x7fc00000
c0023c0a:	83 f8 10             	cmp    eax,0x10
c0023c0d:	75 e0                	jne    c0023bef <SATA::access(unsigned long long, int, void*, bool)+0x177>
c0023c0f:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0023c12:	c6 43 02 25          	mov    BYTE PTR [ebx+0x2],0x25
c0023c16:	66 25 00 7f          	and    ax,0x7f00
c0023c1a:	66 89 73 04          	mov    WORD PTR [ebx+0x4],si
c0023c1e:	66 0d 27 80          	or     ax,0x8027
c0023c22:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0023c26:	66 89 03             	mov    WORD PTR [ebx],ax
c0023c29:	66 89 7b 0c          	mov    WORD PTR [ebx+0xc],di
c0023c2d:	89 f0                	mov    eax,esi
c0023c2f:	31 d2                	xor    edx,edx
c0023c31:	c1 e8 10             	shr    eax,0x10
c0023c34:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0023c37:	89 f0                	mov    eax,esi
c0023c39:	c1 e8 18             	shr    eax,0x18
c0023c3c:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0023c3f:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0023c43:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0023c46:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023c4a:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0023c4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c51:	c1 e0 07             	shl    eax,0x7
c0023c54:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0023c58:	8b 98 20 01 00 00    	mov    ebx,DWORD PTR [eax+0x120]
c0023c5e:	80 e3 88             	and    bl,0x88
c0023c61:	74 0b                	je     c0023c6e <SATA::access(unsigned long long, int, void*, bool)+0x1f6>
c0023c63:	81 fa 40 42 0f 00    	cmp    edx,0xf4240
c0023c69:	74 0b                	je     c0023c76 <SATA::access(unsigned long long, int, void*, bool)+0x1fe>
c0023c6b:	42                   	inc    edx
c0023c6c:	eb ea                	jmp    c0023c58 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c0023c6e:	81 fa 40 42 0f 00    	cmp    edx,0xf4240
c0023c74:	75 0a                	jne    c0023c80 <SATA::access(unsigned long long, int, void*, bool)+0x208>
c0023c76:	83 ec 0c             	sub    esp,0xc
c0023c79:	68 9b b3 02 c0       	push   0xc002b39b
c0023c7e:	eb 60                	jmp    c0023ce0 <SATA::access(unsigned long long, int, void*, bool)+0x268>
c0023c80:	be 01 00 00 00       	mov    esi,0x1
c0023c85:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023c89:	d3 e6                	shl    esi,cl
c0023c8b:	c1 e3 07             	shl    ebx,0x7
c0023c8e:	89 b0 38 01 00 00    	mov    DWORD PTR [eax+0x138],esi
c0023c94:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0023c98:	83 ec 0c             	sub    esp,0xc
c0023c9b:	68 a9 b3 02 c0       	push   0xc002b3a9
c0023ca0:	e8 e2 e9 fe ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0023ca5:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c0023cab:	83 c4 10             	add    esp,0x10
c0023cae:	85 c6                	test   esi,eax
c0023cb0:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c0023cb6:	74 1a                	je     c0023cd2 <SATA::access(unsigned long long, int, void*, bool)+0x25a>
c0023cb8:	0f ba e0 1e          	bt     eax,0x1e
c0023cbc:	73 da                	jae    c0023c98 <SATA::access(unsigned long long, int, void*, bool)+0x220>
c0023cbe:	83 ec 0c             	sub    esp,0xc
c0023cc1:	68 b6 b3 02 c0       	push   0xc002b3b6
c0023cc6:	e8 d6 5a ff ff       	call   c00197a1 <Krnl::panic(char const*)>
c0023ccb:	83 c4 10             	add    esp,0x10
c0023cce:	31 c0                	xor    eax,eax
c0023cd0:	eb 2f                	jmp    c0023d01 <SATA::access(unsigned long long, int, void*, bool)+0x289>
c0023cd2:	0f ba e0 1e          	bt     eax,0x1e
c0023cd6:	73 12                	jae    c0023cea <SATA::access(unsigned long long, int, void*, bool)+0x272>
c0023cd8:	83 ec 0c             	sub    esp,0xc
c0023cdb:	68 b6 b3 02 c0       	push   0xc002b3b6
c0023ce0:	e8 bc 5a ff ff       	call   c00197a1 <Krnl::panic(char const*)>
c0023ce5:	83 c4 10             	add    esp,0x10
c0023ce8:	eb 12                	jmp    c0023cfc <SATA::access(unsigned long long, int, void*, bool)+0x284>
c0023cea:	83 ec 0c             	sub    esp,0xc
c0023ced:	68 c7 b3 02 c0       	push   0xc002b3c7
c0023cf2:	e8 aa 5a ff ff       	call   c00197a1 <Krnl::panic(char const*)>
c0023cf7:	83 c4 10             	add    esp,0x10
c0023cfa:	eb fe                	jmp    c0023cfa <SATA::access(unsigned long long, int, void*, bool)+0x282>
c0023cfc:	b8 01 00 00 00       	mov    eax,0x1
c0023d01:	81 c4 2c 04 00 00    	add    esp,0x42c
c0023d07:	5b                   	pop    ebx
c0023d08:	5e                   	pop    esi
c0023d09:	5f                   	pop    edi
c0023d0a:	5d                   	pop    ebp
c0023d0b:	c3                   	ret    

c0023d0c <SATA::read(unsigned long long, int, void*)>:
c0023d0c:	57                   	push   edi
c0023d0d:	b8 04 00 00 00       	mov    eax,0x4
c0023d12:	56                   	push   esi
c0023d13:	53                   	push   ebx
c0023d14:	83 ec 10             	sub    esp,0x10
c0023d17:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023d1b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023d1f:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023d22:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023d26:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023d2a:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023d30:	77 3b                	ja     c0023d6d <SATA::read(unsigned long long, int, void*)+0x61>
c0023d32:	b8 06 00 00 00       	mov    eax,0x6
c0023d37:	85 d2                	test   edx,edx
c0023d39:	74 32                	je     c0023d6d <SATA::read(unsigned long long, int, void*)+0x61>
c0023d3b:	50                   	push   eax
c0023d3c:	50                   	push   eax
c0023d3d:	6a 00                	push   0x0
c0023d3f:	52                   	push   edx
c0023d40:	53                   	push   ebx
c0023d41:	57                   	push   edi
c0023d42:	56                   	push   esi
c0023d43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023d47:	e8 2c fd ff ff       	call   c0023a78 <SATA::access(unsigned long long, int, void*, bool)>
c0023d4c:	83 c4 20             	add    esp,0x20
c0023d4f:	85 c0                	test   eax,eax
c0023d51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023d55:	75 11                	jne    c0023d68 <SATA::read(unsigned long long, int, void*)+0x5c>
c0023d57:	01 1d 88 eb 02 c0    	add    DWORD PTR ds:0xc002eb88,ebx
c0023d5d:	e8 12 c7 fe ff       	call   c0010474 <VgaText::updateDiskUsage()>
c0023d62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023d66:	eb 05                	jmp    c0023d6d <SATA::read(unsigned long long, int, void*)+0x61>
c0023d68:	b8 01 00 00 00       	mov    eax,0x1
c0023d6d:	83 c4 10             	add    esp,0x10
c0023d70:	5b                   	pop    ebx
c0023d71:	5e                   	pop    esi
c0023d72:	5f                   	pop    edi
c0023d73:	c3                   	ret    

c0023d74 <SATA::write(unsigned long long, int, void*)>:
c0023d74:	57                   	push   edi
c0023d75:	b8 04 00 00 00       	mov    eax,0x4
c0023d7a:	56                   	push   esi
c0023d7b:	53                   	push   ebx
c0023d7c:	83 ec 10             	sub    esp,0x10
c0023d7f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023d83:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023d87:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023d8a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023d8e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023d92:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023d98:	77 3b                	ja     c0023dd5 <SATA::write(unsigned long long, int, void*)+0x61>
c0023d9a:	b8 06 00 00 00       	mov    eax,0x6
c0023d9f:	85 d2                	test   edx,edx
c0023da1:	74 32                	je     c0023dd5 <SATA::write(unsigned long long, int, void*)+0x61>
c0023da3:	50                   	push   eax
c0023da4:	50                   	push   eax
c0023da5:	6a 01                	push   0x1
c0023da7:	52                   	push   edx
c0023da8:	53                   	push   ebx
c0023da9:	57                   	push   edi
c0023daa:	56                   	push   esi
c0023dab:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023daf:	e8 c4 fc ff ff       	call   c0023a78 <SATA::access(unsigned long long, int, void*, bool)>
c0023db4:	83 c4 20             	add    esp,0x20
c0023db7:	85 c0                	test   eax,eax
c0023db9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023dbd:	75 11                	jne    c0023dd0 <SATA::write(unsigned long long, int, void*)+0x5c>
c0023dbf:	01 1d 84 eb 02 c0    	add    DWORD PTR ds:0xc002eb84,ebx
c0023dc5:	e8 aa c6 fe ff       	call   c0010474 <VgaText::updateDiskUsage()>
c0023dca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023dce:	eb 05                	jmp    c0023dd5 <SATA::write(unsigned long long, int, void*)+0x61>
c0023dd0:	b8 01 00 00 00       	mov    eax,0x1
c0023dd5:	83 c4 10             	add    esp,0x10
c0023dd8:	5b                   	pop    ebx
c0023dd9:	5e                   	pop    esi
c0023dda:	5f                   	pop    edi
c0023ddb:	c3                   	ret    

c0023ddc <AVX::open(int, int, void*)>:
c0023ddc:	83 ec 0c             	sub    esp,0xc
c0023ddf:	e8 44 11 00 00       	call   c0024f28 <avxInit>
c0023de4:	b8 00 00 00 00       	mov    eax,0x0
c0023de9:	83 c4 0c             	add    esp,0xc
c0023dec:	c3                   	ret    
c0023ded:	90                   	nop

c0023dee <AVX::close(int, int, void*)>:
c0023dee:	83 ec 0c             	sub    esp,0xc
c0023df1:	e8 33 11 00 00       	call   c0024f29 <avxClose>
c0023df6:	b8 00 00 00 00       	mov    eax,0x0
c0023dfb:	83 c4 0c             	add    esp,0xc
c0023dfe:	c3                   	ret    
c0023dff:	90                   	nop

c0023e00 <AVX::available()>:
c0023e00:	83 ec 0c             	sub    esp,0xc
c0023e03:	e8 18 11 00 00       	call   c0024f20 <avxDetect>
c0023e08:	85 c0                	test   eax,eax
c0023e0a:	0f 95 c0             	setne  al
c0023e0d:	83 c4 0c             	add    esp,0xc
c0023e10:	c3                   	ret    
c0023e11:	90                   	nop

c0023e12 <AVX::save(void*)>:
c0023e12:	83 ec 0c             	sub    esp,0xc
c0023e15:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023e19:	83 ec 0c             	sub    esp,0xc
c0023e1c:	50                   	push   eax
c0023e1d:	e8 04 11 00 00       	call   c0024f26 <avxSave>
c0023e22:	83 c4 10             	add    esp,0x10
c0023e25:	90                   	nop
c0023e26:	83 c4 0c             	add    esp,0xc
c0023e29:	c3                   	ret    

c0023e2a <AVX::load(void*)>:
c0023e2a:	83 ec 0c             	sub    esp,0xc
c0023e2d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023e31:	83 ec 0c             	sub    esp,0xc
c0023e34:	50                   	push   eax
c0023e35:	e8 ed 10 00 00       	call   c0024f27 <avxLoad>
c0023e3a:	83 c4 10             	add    esp,0x10
c0023e3d:	90                   	nop
c0023e3e:	83 c4 0c             	add    esp,0xc
c0023e41:	c3                   	ret    

c0023e42 <AVX::AVX()>:
c0023e42:	83 ec 0c             	sub    esp,0xc
c0023e45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e49:	83 ec 08             	sub    esp,0x8
c0023e4c:	68 24 b4 02 c0       	push   0xc002b424
c0023e51:	50                   	push   eax
c0023e52:	e8 0d 01 ff ff       	call   c0013f64 <FPU::FPU(char const*)>
c0023e57:	83 c4 10             	add    esp,0x10
c0023e5a:	ba 34 b4 02 c0       	mov    edx,0xc002b434
c0023e5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e63:	89 10                	mov    DWORD PTR [eax],edx
c0023e65:	90                   	nop
c0023e66:	83 c4 0c             	add    esp,0xc
c0023e69:	c3                   	ret    

c0023e6a <MMX::available()>:
c0023e6a:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0023e6f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0023e75:	83 e0 20             	and    eax,0x20
c0023e78:	84 c0                	test   al,al
c0023e7a:	0f 95 c0             	setne  al
c0023e7d:	c3                   	ret    

c0023e7e <MMX::open(int, int, void*)>:
c0023e7e:	83 ec 0c             	sub    esp,0xc
c0023e81:	e8 26 11 00 00       	call   c0024fac <x87Init>
c0023e86:	b8 00 00 00 00       	mov    eax,0x0
c0023e8b:	83 c4 0c             	add    esp,0xc
c0023e8e:	c3                   	ret    
c0023e8f:	90                   	nop

c0023e90 <MMX::close(int, int, void*)>:
c0023e90:	83 ec 0c             	sub    esp,0xc
c0023e93:	e8 2e 11 00 00       	call   c0024fc6 <x87Close>
c0023e98:	b8 00 00 00 00       	mov    eax,0x0
c0023e9d:	83 c4 0c             	add    esp,0xc
c0023ea0:	c3                   	ret    
c0023ea1:	90                   	nop

c0023ea2 <MMX::save(void*)>:
c0023ea2:	83 ec 0c             	sub    esp,0xc
c0023ea5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023ea9:	83 ec 0c             	sub    esp,0xc
c0023eac:	50                   	push   eax
c0023ead:	e8 ef 10 00 00       	call   c0024fa1 <x87Save>
c0023eb2:	83 c4 10             	add    esp,0x10
c0023eb5:	90                   	nop
c0023eb6:	83 c4 0c             	add    esp,0xc
c0023eb9:	c3                   	ret    

c0023eba <MMX::load(void*)>:
c0023eba:	83 ec 0c             	sub    esp,0xc
c0023ebd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023ec1:	83 ec 0c             	sub    esp,0xc
c0023ec4:	50                   	push   eax
c0023ec5:	e8 dd 10 00 00       	call   c0024fa7 <x87Load>
c0023eca:	83 c4 10             	add    esp,0x10
c0023ecd:	90                   	nop
c0023ece:	83 c4 0c             	add    esp,0xc
c0023ed1:	c3                   	ret    

c0023ed2 <MMX::MMX()>:
c0023ed2:	83 ec 0c             	sub    esp,0xc
c0023ed5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ed9:	83 ec 08             	sub    esp,0x8
c0023edc:	68 64 b4 02 c0       	push   0xc002b464
c0023ee1:	50                   	push   eax
c0023ee2:	e8 7d 00 ff ff       	call   c0013f64 <FPU::FPU(char const*)>
c0023ee7:	83 c4 10             	add    esp,0x10
c0023eea:	ba 74 b4 02 c0       	mov    edx,0xc002b474
c0023eef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ef3:	89 10                	mov    DWORD PTR [eax],edx
c0023ef5:	90                   	nop
c0023ef6:	83 c4 0c             	add    esp,0xc
c0023ef9:	c3                   	ret    

c0023efa <SSE::open(int, int, void*)>:
c0023efa:	83 ec 0c             	sub    esp,0xc
c0023efd:	e8 62 10 00 00       	call   c0024f64 <sseInit>
c0023f02:	b8 00 00 00 00       	mov    eax,0x0
c0023f07:	83 c4 0c             	add    esp,0xc
c0023f0a:	c3                   	ret    
c0023f0b:	90                   	nop

c0023f0c <SSE::close(int, int, void*)>:
c0023f0c:	83 ec 0c             	sub    esp,0xc
c0023f0f:	e8 60 10 00 00       	call   c0024f74 <sseClose>
c0023f14:	b8 00 00 00 00       	mov    eax,0x0
c0023f19:	83 c4 0c             	add    esp,0xc
c0023f1c:	c3                   	ret    
c0023f1d:	90                   	nop

c0023f1e <SSE::available()>:
c0023f1e:	83 ec 1c             	sub    esp,0x1c
c0023f21:	e8 1a 10 00 00       	call   c0024f40 <absolutelyNoChanceInHell>
c0023f26:	85 c0                	test   eax,eax
c0023f28:	0f 95 c0             	setne  al
c0023f2b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023f2f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023f33:	83 c4 1c             	add    esp,0x1c
c0023f36:	c3                   	ret    
c0023f37:	90                   	nop

c0023f38 <SSE::save(void*)>:
c0023f38:	83 ec 0c             	sub    esp,0xc
c0023f3b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023f3f:	83 ec 0c             	sub    esp,0xc
c0023f42:	50                   	push   eax
c0023f43:	e8 10 10 00 00       	call   c0024f58 <sseSave>
c0023f48:	83 c4 10             	add    esp,0x10
c0023f4b:	90                   	nop
c0023f4c:	83 c4 0c             	add    esp,0xc
c0023f4f:	c3                   	ret    

c0023f50 <SSE::load(void*)>:
c0023f50:	83 ec 0c             	sub    esp,0xc
c0023f53:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023f57:	83 ec 0c             	sub    esp,0xc
c0023f5a:	50                   	push   eax
c0023f5b:	e8 fe 0f 00 00       	call   c0024f5e <sseLoad>
c0023f60:	83 c4 10             	add    esp,0x10
c0023f63:	90                   	nop
c0023f64:	83 c4 0c             	add    esp,0xc
c0023f67:	c3                   	ret    

c0023f68 <SSE::SSE()>:
c0023f68:	83 ec 0c             	sub    esp,0xc
c0023f6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f6f:	83 ec 08             	sub    esp,0x8
c0023f72:	68 a4 b4 02 c0       	push   0xc002b4a4
c0023f77:	50                   	push   eax
c0023f78:	e8 e7 ff fe ff       	call   c0013f64 <FPU::FPU(char const*)>
c0023f7d:	83 c4 10             	add    esp,0x10
c0023f80:	ba b4 b4 02 c0       	mov    edx,0xc002b4b4
c0023f85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f89:	89 10                	mov    DWORD PTR [eax],edx
c0023f8b:	90                   	nop
c0023f8c:	83 c4 0c             	add    esp,0xc
c0023f8f:	c3                   	ret    

c0023f90 <x87::open(int, int, void*)>:
c0023f90:	83 ec 0c             	sub    esp,0xc
c0023f93:	e8 14 10 00 00       	call   c0024fac <x87Init>
c0023f98:	b8 00 00 00 00       	mov    eax,0x0
c0023f9d:	83 c4 0c             	add    esp,0xc
c0023fa0:	c3                   	ret    
c0023fa1:	90                   	nop

c0023fa2 <x87::close(int, int, void*)>:
c0023fa2:	83 ec 0c             	sub    esp,0xc
c0023fa5:	e8 1c 10 00 00       	call   c0024fc6 <x87Close>
c0023faa:	b8 00 00 00 00       	mov    eax,0x0
c0023faf:	83 c4 0c             	add    esp,0xc
c0023fb2:	c3                   	ret    
c0023fb3:	90                   	nop

c0023fb4 <x87::available()>:
c0023fb4:	83 ec 0c             	sub    esp,0xc
c0023fb7:	e8 ca 0f 00 00       	call   c0024f86 <x87Detect>
c0023fbc:	85 c0                	test   eax,eax
c0023fbe:	0f 95 c0             	setne  al
c0023fc1:	83 c4 0c             	add    esp,0xc
c0023fc4:	c3                   	ret    
c0023fc5:	90                   	nop

c0023fc6 <x87::save(void*)>:
c0023fc6:	83 ec 0c             	sub    esp,0xc
c0023fc9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023fcd:	83 ec 0c             	sub    esp,0xc
c0023fd0:	50                   	push   eax
c0023fd1:	e8 cb 0f 00 00       	call   c0024fa1 <x87Save>
c0023fd6:	83 c4 10             	add    esp,0x10
c0023fd9:	90                   	nop
c0023fda:	83 c4 0c             	add    esp,0xc
c0023fdd:	c3                   	ret    

c0023fde <x87::load(void*)>:
c0023fde:	83 ec 0c             	sub    esp,0xc
c0023fe1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023fe5:	83 ec 0c             	sub    esp,0xc
c0023fe8:	50                   	push   eax
c0023fe9:	e8 b9 0f 00 00       	call   c0024fa7 <x87Load>
c0023fee:	83 c4 10             	add    esp,0x10
c0023ff1:	90                   	nop
c0023ff2:	83 c4 0c             	add    esp,0xc
c0023ff5:	c3                   	ret    

c0023ff6 <x87::x87()>:
c0023ff6:	83 ec 0c             	sub    esp,0xc
c0023ff9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ffd:	83 ec 08             	sub    esp,0x8
c0024000:	68 e4 b4 02 c0       	push   0xc002b4e4
c0024005:	50                   	push   eax
c0024006:	e8 59 ff fe ff       	call   c0013f64 <FPU::FPU(char const*)>
c002400b:	83 c4 10             	add    esp,0x10
c002400e:	ba f4 b4 02 c0       	mov    edx,0xc002b4f4
c0024013:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024017:	89 10                	mov    DWORD PTR [eax],edx
c0024019:	90                   	nop
c002401a:	83 c4 0c             	add    esp,0xc
c002401d:	c3                   	ret    

c002401e <APIC::disable()>:
c002401e:	90                   	nop
c002401f:	c3                   	ret    

c0024020 <APIC::close(int, int, void*)>:
c0024020:	55                   	push   ebp
c0024021:	89 e5                	mov    ebp,esp
c0024023:	83 ec 08             	sub    esp,0x8
c0024026:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024029:	8b 00                	mov    eax,DWORD PTR [eax]
c002402b:	83 c0 3c             	add    eax,0x3c
c002402e:	8b 00                	mov    eax,DWORD PTR [eax]
c0024030:	83 ec 0c             	sub    esp,0xc
c0024033:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024036:	ff d0                	call   eax
c0024038:	83 c4 10             	add    esp,0x10
c002403b:	b8 00 00 00 00       	mov    eax,0x0
c0024040:	c9                   	leave  
c0024041:	c3                   	ret    

c0024042 <IOAPIC::close(int, int, void*)>:
c0024042:	b8 00 00 00 00       	mov    eax,0x0
c0024047:	c3                   	ret    

c0024048 <APIC::io_wait()>:
c0024048:	eb 00                	jmp    c002404a <APIC::io_wait()+0x2>
c002404a:	eb 00                	jmp    c002404c <APIC::io_wait()+0x4>
c002404c:	90                   	nop
c002404d:	c3                   	ret    

c002404e <APIC::getBase()>:
c002404e:	55                   	push   ebp
c002404f:	89 e5                	mov    ebp,esp
c0024051:	83 ec 18             	sub    esp,0x18
c0024054:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0024059:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002405f:	83 e0 08             	and    eax,0x8
c0024062:	84 c0                	test   al,al
c0024064:	75 07                	jne    c002406d <APIC::getBase()+0x1f>
c0024066:	b8 00 00 00 00       	mov    eax,0x0
c002406b:	eb 21                	jmp    c002408e <APIC::getBase()+0x40>
c002406d:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0024072:	83 ec 08             	sub    esp,0x8
c0024075:	6a 1b                	push   0x1b
c0024077:	50                   	push   eax
c0024078:	e8 ff a9 fe ff       	call   c000ea7c <Computer::rdmsr(unsigned int)>
c002407d:	83 c4 10             	add    esp,0x10
c0024080:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0024083:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0024086:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024089:	25 00 f0 ff ff       	and    eax,0xfffff000
c002408e:	c9                   	leave  
c002408f:	c3                   	ret    

c0024090 <APIC::eoi(unsigned char)>:
c0024090:	55                   	push   ebp
c0024091:	89 e5                	mov    ebp,esp
c0024093:	83 ec 28             	sub    esp,0x28
c0024096:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024099:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002409c:	83 ec 0c             	sub    esp,0xc
c002409f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00240a2:	e8 a7 ff ff ff       	call   c002404e <APIC::getBase()>
c00240a7:	83 c4 10             	add    esp,0x10
c00240aa:	05 b0 00 00 00       	add    eax,0xb0
c00240af:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00240b2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00240b5:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00240bb:	90                   	nop
c00240bc:	c9                   	leave  
c00240bd:	c3                   	ret    

c00240be <APIC::open(int, int, void*)>:
c00240be:	55                   	push   ebp
c00240bf:	89 e5                	mov    ebp,esp
c00240c1:	57                   	push   edi
c00240c2:	56                   	push   esi
c00240c3:	53                   	push   ebx
c00240c4:	83 ec 2c             	sub    esp,0x2c
c00240c7:	83 ec 0c             	sub    esp,0xc
c00240ca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00240cd:	e8 7c ff ff ff       	call   c002404e <APIC::getBase()>
c00240d2:	83 c4 10             	add    esp,0x10
c00240d5:	89 c2                	mov    edx,eax
c00240d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00240da:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00240e0:	0f b6 f8             	movzx  edi,al
c00240e3:	89 d0                	mov    eax,edx
c00240e5:	ba 00 00 00 00       	mov    edx,0x0
c00240ea:	89 c1                	mov    ecx,eax
c00240ec:	80 e5 ff             	and    ch,0xff
c00240ef:	89 cb                	mov    ebx,ecx
c00240f1:	0f b6 f2             	movzx  esi,dl
c00240f4:	89 d8                	mov    eax,ebx
c00240f6:	89 f2                	mov    edx,esi
c00240f8:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00240fb:	8d 5f 08             	lea    ebx,[edi+0x8]
c00240fe:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0024102:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0024106:	83 e0 00             	and    eax,0x0
c0024109:	09 d0                	or     eax,edx
c002410b:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002410f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024112:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024118:	8d 50 01             	lea    edx,[eax+0x1]
c002411b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002411e:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0024124:	0f b6 d0             	movzx  edx,al
c0024127:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002412a:	83 c2 08             	add    edx,0x8
c002412d:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0024131:	0f b6 c9             	movzx  ecx,cl
c0024134:	81 c9 00 00 01 00    	or     ecx,0x10000
c002413a:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002413e:	83 ec 0c             	sub    esp,0xc
c0024141:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024144:	e8 05 ff ff ff       	call   c002404e <APIC::getBase()>
c0024149:	83 c4 10             	add    esp,0x10
c002414c:	05 f0 00 00 00       	add    eax,0xf0
c0024151:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0024154:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024157:	8b 00                	mov    eax,DWORD PTR [eax]
c0024159:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002415c:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0024163:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c002416a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002416d:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024170:	89 10                	mov    DWORD PTR [eax],edx
c0024172:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0024179:	a1 10 d1 02 c0       	mov    eax,ds:0xc002d110
c002417e:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0024181:	7d 7c                	jge    c00241ff <APIC::open(int, int, void*)+0x141>
c0024183:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024186:	8b 04 85 20 d1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2ee0]
c002418d:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0024190:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024193:	8b 04 85 20 d1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2ee0]
c002419a:	c1 e8 08             	shr    eax,0x8
c002419d:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00241a1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00241a4:	8b 04 85 20 d1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2ee0]
c00241ab:	c1 e8 18             	shr    eax,0x18
c00241ae:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00241b1:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00241b5:	75 40                	jne    c00241f7 <APIC::open(int, int, void*)+0x139>
c00241b7:	83 ec 0c             	sub    esp,0xc
c00241ba:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00241bd:	e8 8c fe ff ff       	call   c002404e <APIC::getBase()>
c00241c2:	83 c4 10             	add    esp,0x10
c00241c5:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00241c9:	75 07                	jne    c00241d2 <APIC::open(int, int, void*)+0x114>
c00241cb:	ba 60 03 00 00       	mov    edx,0x360
c00241d0:	eb 05                	jmp    c00241d7 <APIC::open(int, int, void*)+0x119>
c00241d2:	ba 50 03 00 00       	mov    edx,0x350
c00241d7:	01 d0                	add    eax,edx
c00241d9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00241dc:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00241df:	8b 00                	mov    eax,DWORD PTR [eax]
c00241e1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00241e4:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00241eb:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00241ef:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00241f2:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00241f5:	89 10                	mov    DWORD PTR [eax],edx
c00241f7:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00241fa:	e9 7a ff ff ff       	jmp    c0024179 <APIC::open(int, int, void*)+0xbb>
c00241ff:	b8 00 00 00 00       	mov    eax,0x0
c0024204:	8d 65 f4             	lea    esp,[ebp-0xc]
c0024207:	5b                   	pop    ebx
c0024208:	5e                   	pop    esi
c0024209:	5f                   	pop    edi
c002420a:	5d                   	pop    ebp
c002420b:	c3                   	ret    

c002420c <IOAPIC::IOAPIC()>:
c002420c:	83 ec 0c             	sub    esp,0xc
c002420f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024213:	83 ec 08             	sub    esp,0x8
c0024216:	68 24 b5 02 c0       	push   0xc002b524
c002421b:	50                   	push   eax
c002421c:	e8 45 fa fe ff       	call   c0013c66 <Device::Device(char const*)>
c0024221:	83 c4 10             	add    esp,0x10
c0024224:	ba 4c b6 02 c0       	mov    edx,0xc002b64c
c0024229:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002422d:	89 10                	mov    DWORD PTR [eax],edx
c002422f:	90                   	nop
c0024230:	83 c4 0c             	add    esp,0xc
c0024233:	c3                   	ret    

c0024234 <APIC::APIC()>:
c0024234:	53                   	push   ebx
c0024235:	83 ec 18             	sub    esp,0x18
c0024238:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002423c:	83 ec 08             	sub    esp,0x8
c002423f:	68 2c b5 02 c0       	push   0xc002b52c
c0024244:	50                   	push   eax
c0024245:	e8 74 01 ff ff       	call   c00143be <InterruptController::InterruptController(char const*)>
c002424a:	83 c4 10             	add    esp,0x10
c002424d:	ba 04 b6 02 c0       	mov    edx,0xc002b604
c0024252:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024256:	89 10                	mov    DWORD PTR [eax],edx
c0024258:	a0 e0 eb 02 c0       	mov    al,ds:0xc002ebe0
c002425d:	83 f0 01             	xor    eax,0x1
c0024260:	84 c0                	test   al,al
c0024262:	0f 84 a1 00 00 00    	je     c0024309 <APIC::APIC()+0xd5>
c0024268:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c002426d:	a0 c0 d1 02 c0       	mov    al,ds:0xc002d1c0
c0024272:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0024276:	0f 83 86 00 00 00    	jae    c0024302 <APIC::APIC()+0xce>
c002427c:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0024284:	83 ec 0c             	sub    esp,0xc
c0024287:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002428b:	e8 44 b2 fe ff       	call   c000f4d4 <malloc>
c0024290:	83 c4 10             	add    esp,0x10
c0024293:	89 c3                	mov    ebx,eax
c0024295:	83 ec 0c             	sub    esp,0xc
c0024298:	53                   	push   ebx
c0024299:	e8 6e ff ff ff       	call   c002420c <IOAPIC::IOAPIC()>
c002429e:	83 c4 10             	add    esp,0x10
c00242a1:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00242a5:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00242aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00242ae:	89 14 85 c0 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1440],edx
c00242b5:	a1 a0 eb 02 c0       	mov    eax,ds:0xc002eba0
c00242ba:	40                   	inc    eax
c00242bb:	a3 a0 eb 02 c0       	mov    ds:0xc002eba0,eax
c00242c0:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c00242c5:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00242cb:	83 ec 08             	sub    esp,0x8
c00242ce:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00242d2:	50                   	push   eax
c00242d3:	e8 9e f7 fe ff       	call   c0013a76 <Device::addChild(Device*)>
c00242d8:	83 c4 10             	add    esp,0x10
c00242db:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00242df:	8b 00                	mov    eax,DWORD PTR [eax]
c00242e1:	83 c0 08             	add    eax,0x8
c00242e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00242e6:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00242eb:	6a 00                	push   0x0
c00242ed:	6a 00                	push   0x0
c00242ef:	52                   	push   edx
c00242f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00242f4:	ff d0                	call   eax
c00242f6:	83 c4 10             	add    esp,0x10
c00242f9:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00242fd:	e9 6b ff ff ff       	jmp    c002426d <APIC::APIC()+0x39>
c0024302:	c6 05 e0 eb 02 c0 01 	mov    BYTE PTR ds:0xc002ebe0,0x1
c0024309:	90                   	nop
c002430a:	83 c4 18             	add    esp,0x18
c002430d:	5b                   	pop    ebx
c002430e:	c3                   	ret    
c002430f:	90                   	nop

c0024310 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0024310:	55                   	push   ebp
c0024311:	89 e5                	mov    ebp,esp
c0024313:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024316:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002431c:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002431f:	72 1d                	jb     c002433e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0024321:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024324:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002432a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002432d:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0024333:	01 d0                	add    eax,edx
c0024335:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0024338:	73 04                	jae    c002433e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002433a:	b0 01                	mov    al,0x1
c002433c:	eb 02                	jmp    c0024340 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c002433e:	b0 00                	mov    al,0x0
c0024340:	5d                   	pop    ebp
c0024341:	c3                   	ret    

c0024342 <IOAPIC::read(int)>:
c0024342:	55                   	push   ebp
c0024343:	89 e5                	mov    ebp,esp
c0024345:	83 ec 10             	sub    esp,0x10
c0024348:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002434b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0024351:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0024354:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024357:	0f b6 d0             	movzx  edx,al
c002435a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002435d:	89 10                	mov    DWORD PTR [eax],edx
c002435f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0024362:	83 c0 10             	add    eax,0x10
c0024365:	8b 00                	mov    eax,DWORD PTR [eax]
c0024367:	c9                   	leave  
c0024368:	c3                   	ret    
c0024369:	90                   	nop

c002436a <IOAPIC::open(int, int, void*)>:
c002436a:	55                   	push   ebp
c002436b:	89 e5                	mov    ebp,esp
c002436d:	57                   	push   edi
c002436e:	56                   	push   esi
c002436f:	53                   	push   ebx
c0024370:	83 ec 0c             	sub    esp,0xc
c0024373:	83 ec 0c             	sub    esp,0xc
c0024376:	68 57 b5 02 c0       	push   0xc002b557
c002437b:	e8 07 e3 fe ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0024380:	83 c4 10             	add    esp,0x10
c0024383:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024386:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024389:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002438f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024392:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024398:	8b 14 85 00 d2 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2e00]
c002439f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00243a2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00243a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00243ab:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00243b1:	8b 14 85 80 d2 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2d80]
c00243b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00243bb:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00243c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00243c4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00243ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00243cd:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00243d3:	0f b6 f8             	movzx  edi,al
c00243d6:	89 d0                	mov    eax,edx
c00243d8:	ba 00 00 00 00       	mov    edx,0x0
c00243dd:	89 c1                	mov    ecx,eax
c00243df:	80 e5 ff             	and    ch,0xff
c00243e2:	89 cb                	mov    ebx,ecx
c00243e4:	0f b6 f2             	movzx  esi,dl
c00243e7:	89 d8                	mov    eax,ebx
c00243e9:	89 f2                	mov    edx,esi
c00243eb:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00243ee:	8d 5f 08             	lea    ebx,[edi+0x8]
c00243f1:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00243f5:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00243f9:	83 e0 00             	and    eax,0x0
c00243fc:	09 d0                	or     eax,edx
c00243fe:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0024402:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024405:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002440b:	8d 50 01             	lea    edx,[eax+0x1]
c002440e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0024411:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0024417:	0f b6 d0             	movzx  edx,al
c002441a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002441d:	83 c2 08             	add    edx,0x8
c0024420:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0024424:	0f b6 c9             	movzx  ecx,cl
c0024427:	81 c9 00 ad de 00    	or     ecx,0xdead00
c002442d:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0024431:	83 ec 08             	sub    esp,0x8
c0024434:	6a 01                	push   0x1
c0024436:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024439:	e8 04 ff ff ff       	call   c0024342 <IOAPIC::read(int)>
c002443e:	83 c4 10             	add    esp,0x10
c0024441:	c1 f8 10             	sar    eax,0x10
c0024444:	0f b6 c0             	movzx  eax,al
c0024447:	8d 50 01             	lea    edx,[eax+0x1]
c002444a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002444d:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0024453:	b8 00 00 00 00       	mov    eax,0x0
c0024458:	8d 65 f4             	lea    esp,[ebp-0xc]
c002445b:	5b                   	pop    ebx
c002445c:	5e                   	pop    esi
c002445d:	5f                   	pop    edi
c002445e:	5d                   	pop    ebp
c002445f:	c3                   	ret    

c0024460 <IOAPIC::write(int, int)>:
c0024460:	55                   	push   ebp
c0024461:	89 e5                	mov    ebp,esp
c0024463:	83 ec 10             	sub    esp,0x10
c0024466:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024469:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002446f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0024472:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024475:	0f b6 d0             	movzx  edx,al
c0024478:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002447b:	89 10                	mov    DWORD PTR [eax],edx
c002447d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0024480:	8d 50 10             	lea    edx,[eax+0x10]
c0024483:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0024486:	89 02                	mov    DWORD PTR [edx],eax
c0024488:	90                   	nop
c0024489:	c9                   	leave  
c002448a:	c3                   	ret    
c002448b:	90                   	nop

c002448c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c002448c:	55                   	push   ebp
c002448d:	89 e5                	mov    ebp,esp
c002448f:	53                   	push   ebx
c0024490:	83 ec 2c             	sub    esp,0x2c
c0024493:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024496:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0024499:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002449c:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c002449f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00244a2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00244a5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00244a8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00244ab:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00244ae:	88 d8                	mov    al,bl
c00244b0:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00244b3:	88 c8                	mov    al,cl
c00244b5:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00244b8:	88 d0                	mov    al,dl
c00244ba:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00244bd:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00244c1:	83 c0 08             	add    eax,0x8
c00244c4:	01 c0                	add    eax,eax
c00244c6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00244c9:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00244cd:	83 c0 08             	add    eax,0x8
c00244d0:	01 c0                	add    eax,eax
c00244d2:	40                   	inc    eax
c00244d3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00244d6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00244d9:	50                   	push   eax
c00244da:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00244dd:	e8 60 fe ff ff       	call   c0024342 <IOAPIC::read(int)>
c00244e2:	83 c4 08             	add    esp,0x8
c00244e5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00244e8:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c00244ef:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00244f2:	c1 e0 18             	shl    eax,0x18
c00244f5:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c00244f8:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00244fb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00244fe:	52                   	push   edx
c00244ff:	50                   	push   eax
c0024500:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024503:	e8 58 ff ff ff       	call   c0024460 <IOAPIC::write(int, int)>
c0024508:	83 c4 0c             	add    esp,0xc
c002450b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002450e:	50                   	push   eax
c002450f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024512:	e8 2b fe ff ff       	call   c0024342 <IOAPIC::read(int)>
c0024517:	83 c4 08             	add    esp,0x8
c002451a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002451d:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0024524:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c002452b:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0024532:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0024536:	74 09                	je     c0024541 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0024538:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c002453f:	eb 07                	jmp    c0024548 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0024541:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0024548:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c002454c:	74 09                	je     c0024557 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c002454e:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0024555:	eb 07                	jmp    c002455e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0024557:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c002455e:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0024565:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0024569:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c002456c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c002456f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024572:	52                   	push   edx
c0024573:	50                   	push   eax
c0024574:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024577:	e8 e4 fe ff ff       	call   c0024460 <IOAPIC::write(int, int)>
c002457c:	83 c4 0c             	add    esp,0xc
c002457f:	90                   	nop
c0024580:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0024583:	c9                   	leave  
c0024584:	c3                   	ret    
c0024585:	90                   	nop

c0024586 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0024586:	55                   	push   ebp
c0024587:	89 e5                	mov    ebp,esp
c0024589:	57                   	push   edi
c002458a:	56                   	push   esi
c002458b:	53                   	push   ebx
c002458c:	83 ec 2c             	sub    esp,0x2c
c002458f:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0024592:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0024595:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0024599:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c002459d:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00245a1:	74 5a                	je     c00245fd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00245a3:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00245a7:	7f 44                	jg     c00245ed <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c00245a9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00245ac:	05 a0 ba 02 c0       	add    eax,0xc002baa0
c00245b1:	8a 00                	mov    al,BYTE PTR [eax]
c00245b3:	0f b6 c0             	movzx  eax,al
c00245b6:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00245b9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00245bc:	66 8b 84 00 a0 d1 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd2e60]
c00245c4:	0f b7 c0             	movzx  eax,ax
c00245c7:	83 e0 02             	and    eax,0x2
c00245ca:	85 c0                	test   eax,eax
c00245cc:	74 04                	je     c00245d2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c00245ce:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c00245d2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00245d5:	66 8b 84 00 a0 d1 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd2e60]
c00245dd:	0f b7 c0             	movzx  eax,ax
c00245e0:	83 e0 08             	and    eax,0x8
c00245e3:	85 c0                	test   eax,eax
c00245e5:	74 16                	je     c00245fd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00245e7:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00245eb:	eb 10                	jmp    c00245fd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00245ed:	83 ec 0c             	sub    esp,0xc
c00245f0:	68 68 b5 02 c0       	push   0xc002b568
c00245f5:	e8 a7 51 ff ff       	call   c00197a1 <Krnl::panic(char const*)>
c00245fa:	83 c4 10             	add    esp,0x10
c00245fd:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0024601:	a1 a0 eb 02 c0       	mov    eax,ds:0xc002eba0
c0024606:	83 ec 08             	sub    esp,0x8
c0024609:	50                   	push   eax
c002460a:	68 a0 b5 02 c0       	push   0xc002b5a0
c002460f:	e8 73 e0 fe ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0024614:	83 c4 10             	add    esp,0x10
c0024617:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c002461e:	a1 a0 eb 02 c0       	mov    eax,ds:0xc002eba0
c0024623:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0024626:	7d 67                	jge    c002468f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0024628:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002462b:	8b 04 85 c0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1440]
c0024632:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024635:	83 ec 08             	sub    esp,0x8
c0024638:	52                   	push   edx
c0024639:	50                   	push   eax
c002463a:	e8 d1 fc ff ff       	call   c0024310 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c002463f:	83 c4 10             	add    esp,0x10
c0024642:	84 c0                	test   al,al
c0024644:	74 44                	je     c002468a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0024646:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024649:	8b 1c 85 c0 eb 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd1440]
c0024650:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0024654:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0024657:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c002465b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002465e:	83 c0 20             	add    eax,0x20
c0024661:	0f b6 f0             	movzx  esi,al
c0024664:	b8 00 00 00 00       	mov    eax,0x0
c0024669:	99                   	cdq    
c002466a:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002466d:	0f b6 c9             	movzx  ecx,cl
c0024670:	83 ec 04             	sub    esp,0x4
c0024673:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0024676:	57                   	push   edi
c0024677:	56                   	push   esi
c0024678:	52                   	push   edx
c0024679:	50                   	push   eax
c002467a:	51                   	push   ecx
c002467b:	53                   	push   ebx
c002467c:	e8 0b fe ff ff       	call   c002448c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0024681:	83 c4 20             	add    esp,0x20
c0024684:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0024688:	eb 05                	jmp    c002468f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002468a:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c002468d:	eb 8f                	jmp    c002461e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c002468f:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0024692:	83 f0 01             	xor    eax,0x1
c0024695:	84 c0                	test   al,al
c0024697:	74 10                	je     c00246a9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0024699:	83 ec 0c             	sub    esp,0xc
c002469c:	68 b7 b5 02 c0       	push   0xc002b5b7
c00246a1:	e8 fb 50 ff ff       	call   c00197a1 <Krnl::panic(char const*)>
c00246a6:	83 c4 10             	add    esp,0x10
c00246a9:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c00246ad:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c00246b4:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c00246b8:	7f 65                	jg     c002471f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c00246ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00246bd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00246c0:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00246c7:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00246ca:	01 ca                	add    edx,ecx
c00246cc:	83 c2 54             	add    edx,0x54
c00246cf:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c00246d3:	85 c0                	test   eax,eax
c00246d5:	75 43                	jne    c002471a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c00246d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00246da:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00246dd:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00246e4:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00246e7:	01 ca                	add    edx,ecx
c00246e9:	8d 4a 54             	lea    ecx,[edx+0x54]
c00246ec:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00246ef:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00246f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00246f6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00246f9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0024700:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024703:	01 ca                	add    edx,ecx
c0024705:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c002470b:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c002470e:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0024712:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024715:	83 e8 20             	sub    eax,0x20
c0024718:	eb 1a                	jmp    c0024734 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c002471a:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c002471d:	eb 95                	jmp    c00246b4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c002471f:	83 ec 0c             	sub    esp,0xc
c0024722:	68 c4 b5 02 c0       	push   0xc002b5c4
c0024727:	e8 75 50 ff ff       	call   c00197a1 <Krnl::panic(char const*)>
c002472c:	83 c4 10             	add    esp,0x10
c002472f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0024734:	8d 65 f4             	lea    esp,[ebp-0xc]
c0024737:	5b                   	pop    ebx
c0024738:	5e                   	pop    esi
c0024739:	5f                   	pop    edi
c002473a:	5d                   	pop    ebp
c002473b:	c3                   	ret    

c002473c <PIC::disable()>:
c002473c:	55                   	push   ebp
c002473d:	89 e5                	mov    ebp,esp
c002473f:	83 ec 10             	sub    esp,0x10
c0024742:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0024748:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c002474c:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002474f:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0024753:	ee                   	out    dx,al
c0024754:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c002475a:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c002475e:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0024761:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0024765:	ee                   	out    dx,al
c0024766:	90                   	nop
c0024767:	c9                   	leave  
c0024768:	c3                   	ret    
c0024769:	90                   	nop

c002476a <PIC::close(int, int, void*)>:
c002476a:	55                   	push   ebp
c002476b:	89 e5                	mov    ebp,esp
c002476d:	83 ec 08             	sub    esp,0x8
c0024770:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024773:	8b 00                	mov    eax,DWORD PTR [eax]
c0024775:	83 c0 3c             	add    eax,0x3c
c0024778:	8b 00                	mov    eax,DWORD PTR [eax]
c002477a:	83 ec 0c             	sub    esp,0xc
c002477d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024780:	ff d0                	call   eax
c0024782:	83 c4 10             	add    esp,0x10
c0024785:	b8 00 00 00 00       	mov    eax,0x0
c002478a:	c9                   	leave  
c002478b:	c3                   	ret    

c002478c <PIC::PIC()>:
c002478c:	83 ec 0c             	sub    esp,0xc
c002478f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024793:	83 ec 08             	sub    esp,0x8
c0024796:	68 70 b6 02 c0       	push   0xc002b670
c002479b:	50                   	push   eax
c002479c:	e8 1d fc fe ff       	call   c00143be <InterruptController::InterruptController(char const*)>
c00247a1:	83 c4 10             	add    esp,0x10
c00247a4:	ba 9c b6 02 c0       	mov    edx,0xc002b69c
c00247a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00247ad:	89 10                	mov    DWORD PTR [eax],edx
c00247af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00247b3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00247b9:	0f b6 d0             	movzx  edx,al
c00247bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00247c0:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c00247c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00247cb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00247d1:	0f b6 d0             	movzx  edx,al
c00247d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00247d8:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00247dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00247e1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00247e7:	8d 50 01             	lea    edx,[eax+0x1]
c00247ea:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00247ee:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00247f4:	0f b6 d0             	movzx  edx,al
c00247f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00247fb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00247ff:	83 e1 3f             	and    ecx,0x3f
c0024802:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0024806:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002480a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024810:	0f b6 d0             	movzx  edx,al
c0024813:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024817:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c002481e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024822:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024828:	0f b6 d0             	movzx  edx,al
c002482b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002482f:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0024834:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024838:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002483e:	8d 50 01             	lea    edx,[eax+0x1]
c0024841:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024845:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002484b:	0f b6 d0             	movzx  edx,al
c002484e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024852:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0024856:	83 e1 3f             	and    ecx,0x3f
c0024859:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002485d:	90                   	nop
c002485e:	83 c4 0c             	add    esp,0xc
c0024861:	c3                   	ret    

c0024862 <PIC::ioWait()>:
c0024862:	eb 00                	jmp    c0024864 <PIC::ioWait()+0x2>
c0024864:	eb 00                	jmp    c0024866 <PIC::ioWait()+0x4>
c0024866:	90                   	nop
c0024867:	c3                   	ret    

c0024868 <PIC::getIRQReg(int)>:
c0024868:	55                   	push   ebp
c0024869:	89 e5                	mov    ebp,esp
c002486b:	83 ec 10             	sub    esp,0x10
c002486e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024871:	0f b6 c0             	movzx  eax,al
c0024874:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002487a:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c002487d:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0024880:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0024884:	ee                   	out    dx,al
c0024885:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024888:	0f b6 c0             	movzx  eax,al
c002488b:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0024891:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0024894:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0024897:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002489b:	ee                   	out    dx,al
c002489c:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c00248a2:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c00248a6:	89 c2                	mov    edx,eax
c00248a8:	ec                   	in     al,dx
c00248a9:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c00248ac:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00248af:	0f b6 c0             	movzx  eax,al
c00248b2:	c1 e0 08             	shl    eax,0x8
c00248b5:	89 c1                	mov    ecx,eax
c00248b7:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c00248bd:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c00248c1:	89 c2                	mov    edx,eax
c00248c3:	ec                   	in     al,dx
c00248c4:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c00248c7:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00248ca:	0f b6 c0             	movzx  eax,al
c00248cd:	09 c8                	or     eax,ecx
c00248cf:	c9                   	leave  
c00248d0:	c3                   	ret    
c00248d1:	90                   	nop

c00248d2 <PIC::eoi(unsigned char)>:
c00248d2:	55                   	push   ebp
c00248d3:	89 e5                	mov    ebp,esp
c00248d5:	83 ec 14             	sub    esp,0x14
c00248d8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00248db:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c00248de:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00248e2:	75 1e                	jne    c0024902 <PIC::eoi(unsigned char)+0x30>
c00248e4:	6a 0b                	push   0xb
c00248e6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00248e9:	e8 7a ff ff ff       	call   c0024868 <PIC::getIRQReg(int)>
c00248ee:	83 c4 08             	add    esp,0x8
c00248f1:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00248f5:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c00248f9:	25 80 00 00 00       	and    eax,0x80
c00248fe:	85 c0                	test   eax,eax
c0024900:	74 5f                	je     c0024961 <PIC::eoi(unsigned char)+0x8f>
c0024902:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0024906:	75 2d                	jne    c0024935 <PIC::eoi(unsigned char)+0x63>
c0024908:	6a 0b                	push   0xb
c002490a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002490d:	e8 56 ff ff ff       	call   c0024868 <PIC::getIRQReg(int)>
c0024912:	83 c4 08             	add    esp,0x8
c0024915:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0024919:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002491c:	66 85 c0             	test   ax,ax
c002491f:	78 14                	js     c0024935 <PIC::eoi(unsigned char)+0x63>
c0024921:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0024927:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c002492b:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002492e:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0024932:	ee                   	out    dx,al
c0024933:	eb 2d                	jmp    c0024962 <PIC::eoi(unsigned char)+0x90>
c0024935:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0024939:	76 12                	jbe    c002494d <PIC::eoi(unsigned char)+0x7b>
c002493b:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0024941:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0024945:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0024948:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002494c:	ee                   	out    dx,al
c002494d:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0024953:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0024957:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002495a:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002495e:	ee                   	out    dx,al
c002495f:	eb 01                	jmp    c0024962 <PIC::eoi(unsigned char)+0x90>
c0024961:	90                   	nop
c0024962:	c9                   	leave  
c0024963:	c3                   	ret    

c0024964 <PIC::remap()>:
c0024964:	55                   	push   ebp
c0024965:	89 e5                	mov    ebp,esp
c0024967:	83 ec 48             	sub    esp,0x48
c002496a:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0024971:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0024978:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c002497e:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0024981:	89 c2                	mov    edx,eax
c0024983:	ec                   	in     al,dx
c0024984:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0024987:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c002498a:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c002498d:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0024993:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0024996:	89 c2                	mov    edx,eax
c0024998:	ec                   	in     al,dx
c0024999:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c002499c:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c002499f:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c00249a2:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c00249a8:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c00249ac:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c00249af:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c00249b2:	ee                   	out    dx,al
c00249b3:	83 ec 0c             	sub    esp,0xc
c00249b6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00249b9:	e8 a4 fe ff ff       	call   c0024862 <PIC::ioWait()>
c00249be:	83 c4 10             	add    esp,0x10
c00249c1:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c00249c7:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c00249cb:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c00249ce:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00249d1:	ee                   	out    dx,al
c00249d2:	83 ec 0c             	sub    esp,0xc
c00249d5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00249d8:	e8 85 fe ff ff       	call   c0024862 <PIC::ioWait()>
c00249dd:	83 c4 10             	add    esp,0x10
c00249e0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00249e3:	0f b6 c0             	movzx  eax,al
c00249e6:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c00249ec:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c00249ef:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c00249f2:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00249f5:	ee                   	out    dx,al
c00249f6:	83 ec 0c             	sub    esp,0xc
c00249f9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00249fc:	e8 61 fe ff ff       	call   c0024862 <PIC::ioWait()>
c0024a01:	83 c4 10             	add    esp,0x10
c0024a04:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024a07:	0f b6 c0             	movzx  eax,al
c0024a0a:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0024a10:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0024a13:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0024a16:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0024a19:	ee                   	out    dx,al
c0024a1a:	83 ec 0c             	sub    esp,0xc
c0024a1d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024a20:	e8 3d fe ff ff       	call   c0024862 <PIC::ioWait()>
c0024a25:	83 c4 10             	add    esp,0x10
c0024a28:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0024a2e:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0024a32:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0024a35:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0024a38:	ee                   	out    dx,al
c0024a39:	83 ec 0c             	sub    esp,0xc
c0024a3c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024a3f:	e8 1e fe ff ff       	call   c0024862 <PIC::ioWait()>
c0024a44:	83 c4 10             	add    esp,0x10
c0024a47:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0024a4d:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0024a51:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0024a54:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024a57:	ee                   	out    dx,al
c0024a58:	83 ec 0c             	sub    esp,0xc
c0024a5b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024a5e:	e8 ff fd ff ff       	call   c0024862 <PIC::ioWait()>
c0024a63:	83 c4 10             	add    esp,0x10
c0024a66:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0024a6c:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0024a70:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0024a73:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0024a76:	ee                   	out    dx,al
c0024a77:	83 ec 0c             	sub    esp,0xc
c0024a7a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024a7d:	e8 e0 fd ff ff       	call   c0024862 <PIC::ioWait()>
c0024a82:	83 c4 10             	add    esp,0x10
c0024a85:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0024a8b:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0024a8f:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0024a92:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0024a95:	ee                   	out    dx,al
c0024a96:	83 ec 0c             	sub    esp,0xc
c0024a99:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024a9c:	e8 c1 fd ff ff       	call   c0024862 <PIC::ioWait()>
c0024aa1:	83 c4 10             	add    esp,0x10
c0024aa4:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0024aa8:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0024aae:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0024ab1:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0024ab4:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0024ab7:	ee                   	out    dx,al
c0024ab8:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0024abc:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0024ac2:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0024ac5:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0024ac8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0024acb:	ee                   	out    dx,al
c0024acc:	90                   	nop
c0024acd:	c9                   	leave  
c0024ace:	c3                   	ret    
c0024acf:	90                   	nop

c0024ad0 <PIC::open(int, int, void*)>:
c0024ad0:	55                   	push   ebp
c0024ad1:	89 e5                	mov    ebp,esp
c0024ad3:	83 ec 18             	sub    esp,0x18
c0024ad6:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0024adc:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0024ae0:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0024ae3:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0024ae7:	ee                   	out    dx,al
c0024ae8:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0024aee:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0024af2:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0024af5:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0024af9:	ee                   	out    dx,al
c0024afa:	83 ec 0c             	sub    esp,0xc
c0024afd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024b00:	e8 5f fe ff ff       	call   c0024964 <PIC::remap()>
c0024b05:	83 c4 10             	add    esp,0x10
c0024b08:	b8 00 00 00 00       	mov    eax,0x0
c0024b0d:	c9                   	leave  
c0024b0e:	c3                   	ret    
c0024b0f:	90                   	nop

c0024b10 <APICTimer::close(int, int, void*)>:
c0024b10:	b8 00 00 00 00       	mov    eax,0x0
c0024b15:	c3                   	ret    

c0024b16 <apicTimerHandler(regs*, void*)>:
c0024b16:	83 ec 0c             	sub    esp,0xc
c0024b19:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024b1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0024b1f:	99                   	cdq    
c0024b20:	52                   	push   edx
c0024b21:	50                   	push   eax
c0024b22:	6a 00                	push   0x0
c0024b24:	68 00 ca 9a 3b       	push   0x3b9aca00
c0024b29:	e8 8e 07 00 00       	call   c00252bc <__udivdi3>
c0024b2e:	83 c4 10             	add    esp,0x10
c0024b31:	83 ec 08             	sub    esp,0x8
c0024b34:	52                   	push   edx
c0024b35:	50                   	push   eax
c0024b36:	e8 82 17 ff ff       	call   c00162bd <timerHandler(unsigned long long)>
c0024b3b:	83 c4 10             	add    esp,0x10
c0024b3e:	90                   	nop
c0024b3f:	83 c4 0c             	add    esp,0xc
c0024b42:	c3                   	ret    
c0024b43:	90                   	nop

c0024b44 <APICTimer::write(int)>:
c0024b44:	53                   	push   ebx
c0024b45:	83 ec 28             	sub    esp,0x28
c0024b48:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024b4c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0024b50:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0024b56:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0024b5b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024b61:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0024b67:	83 ec 0c             	sub    esp,0xc
c0024b6a:	50                   	push   eax
c0024b6b:	e8 de f4 ff ff       	call   c002404e <APIC::getBase()>
c0024b70:	83 c4 10             	add    esp,0x10
c0024b73:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024b77:	a1 d0 ce 02 c0       	mov    eax,ds:0xc002ced0
c0024b7c:	8b 15 d4 ce 02 c0    	mov    edx,DWORD PTR ds:0xc002ced4
c0024b82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024b86:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0024b8a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024b8e:	05 e0 03 00 00       	add    eax,0x3e0
c0024b93:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0024b99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024b9d:	05 80 03 00 00       	add    eax,0x380
c0024ba2:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0024ba8:	fb                   	sti    
c0024ba9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024bad:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0024bb1:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0024bb6:	83 d2 00             	adc    edx,0x0
c0024bb9:	89 c1                	mov    ecx,eax
c0024bbb:	89 d3                	mov    ebx,edx
c0024bbd:	a1 d0 ce 02 c0       	mov    eax,ds:0xc002ced0
c0024bc2:	8b 15 d4 ce 02 c0    	mov    edx,DWORD PTR ds:0xc002ced4
c0024bc8:	39 c8                	cmp    eax,ecx
c0024bca:	89 d0                	mov    eax,edx
c0024bcc:	19 d8                	sbb    eax,ebx
c0024bce:	73 02                	jae    c0024bd2 <APICTimer::write(int)+0x8e>
c0024bd0:	eb d7                	jmp    c0024ba9 <APICTimer::write(int)+0x65>
c0024bd2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024bd6:	05 20 03 00 00       	add    eax,0x320
c0024bdb:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0024be1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024be5:	05 90 03 00 00       	add    eax,0x390
c0024bea:	8b 00                	mov    eax,DWORD PTR [eax]
c0024bec:	f7 d0                	not    eax
c0024bee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024bf2:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024bf6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024bfa:	ba 00 00 00 00       	mov    edx,0x0
c0024bff:	f7 f3                	div    ebx
c0024c01:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024c05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024c09:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0024c0f:	0d 00 00 02 00       	or     eax,0x20000
c0024c14:	89 c2                	mov    edx,eax
c0024c16:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024c1a:	05 20 03 00 00       	add    eax,0x320
c0024c1f:	89 10                	mov    DWORD PTR [eax],edx
c0024c21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024c25:	05 e0 03 00 00       	add    eax,0x3e0
c0024c2a:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0024c30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024c34:	05 80 03 00 00       	add    eax,0x380
c0024c39:	89 c2                	mov    edx,eax
c0024c3b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024c3f:	89 02                	mov    DWORD PTR [edx],eax
c0024c41:	90                   	nop
c0024c42:	83 c4 28             	add    esp,0x28
c0024c45:	5b                   	pop    ebx
c0024c46:	c3                   	ret    
c0024c47:	90                   	nop

c0024c48 <APICTimer::open(int, int, void*)>:
c0024c48:	57                   	push   edi
c0024c49:	56                   	push   esi
c0024c4a:	53                   	push   ebx
c0024c4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0024c51:	83 c0 24             	add    eax,0x24
c0024c54:	8b 00                	mov    eax,DWORD PTR [eax]
c0024c56:	83 ec 08             	sub    esp,0x8
c0024c59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024c5d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024c61:	ff d0                	call   eax
c0024c63:	83 c4 10             	add    esp,0x10
c0024c66:	a1 48 c8 02 c0       	mov    eax,ds:0xc002c848
c0024c6b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024c71:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0024c77:	83 ec 0c             	sub    esp,0xc
c0024c7a:	50                   	push   eax
c0024c7b:	e8 ce f3 ff ff       	call   c002404e <APIC::getBase()>
c0024c80:	83 c4 10             	add    esp,0x10
c0024c83:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0024c89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c8d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024c93:	0f b6 f8             	movzx  edi,al
c0024c96:	89 d0                	mov    eax,edx
c0024c98:	ba 00 00 00 00       	mov    edx,0x0
c0024c9d:	89 c1                	mov    ecx,eax
c0024c9f:	80 e5 ff             	and    ch,0xff
c0024ca2:	89 cb                	mov    ebx,ecx
c0024ca4:	0f b6 f2             	movzx  esi,dl
c0024ca7:	89 d8                	mov    eax,ebx
c0024ca9:	89 f2                	mov    edx,esi
c0024cab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024caf:	8d 5f 08             	lea    ebx,[edi+0x8]
c0024cb2:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0024cb6:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0024cba:	83 e0 00             	and    eax,0x0
c0024cbd:	09 d0                	or     eax,edx
c0024cbf:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0024cc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024cc7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024ccd:	8d 50 01             	lea    edx,[eax+0x1]
c0024cd0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024cd4:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0024cda:	0f b6 d0             	movzx  edx,al
c0024cdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ce1:	83 c2 08             	add    edx,0x8
c0024ce4:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0024ce8:	0f b6 c9             	movzx  ecx,cl
c0024ceb:	81 c9 00 00 01 00    	or     ecx,0x10000
c0024cf1:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0024cf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024cf9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0024cfd:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0024d03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d07:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024d0b:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0024d11:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024d15:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0024d1b:	83 ec 0c             	sub    esp,0xc
c0024d1e:	51                   	push   ecx
c0024d1f:	6a 01                	push   0x1
c0024d21:	68 16 4b 02 c0       	push   0xc0024b16
c0024d26:	52                   	push   edx
c0024d27:	50                   	push   eax
c0024d28:	e8 cd ec fe ff       	call   c00139fa <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0024d2d:	83 c4 20             	add    esp,0x20
c0024d30:	89 c2                	mov    edx,eax
c0024d32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d36:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0024d3c:	b8 00 00 00 00       	mov    eax,0x0
c0024d41:	5b                   	pop    ebx
c0024d42:	5e                   	pop    esi
c0024d43:	5f                   	pop    edi
c0024d44:	c3                   	ret    
c0024d45:	90                   	nop

c0024d46 <APICTimer::APICTimer()>:
c0024d46:	83 ec 0c             	sub    esp,0xc
c0024d49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d4d:	83 ec 08             	sub    esp,0x8
c0024d50:	68 dc b6 02 c0       	push   0xc002b6dc
c0024d55:	50                   	push   eax
c0024d56:	e8 d3 14 ff ff       	call   c001622e <Timer::Timer(char const*)>
c0024d5b:	83 c4 10             	add    esp,0x10
c0024d5e:	ba f0 b6 02 c0       	mov    edx,0xc002b6f0
c0024d63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d67:	89 10                	mov    DWORD PTR [eax],edx
c0024d69:	90                   	nop
c0024d6a:	83 c4 0c             	add    esp,0xc
c0024d6d:	c3                   	ret    

c0024d6e <PIT::write(int)>:
c0024d6e:	83 ec 10             	sub    esp,0x10
c0024d71:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024d75:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0024d79:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0024d7f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024d83:	a3 e4 eb 02 c0       	mov    ds:0xc002ebe4,eax
c0024d88:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0024d8d:	99                   	cdq    
c0024d8e:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0024d92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024d96:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0024d9d:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0024da2:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0024da6:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0024dab:	ee                   	out    dx,al
c0024dac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024db0:	0f b6 c0             	movzx  eax,al
c0024db3:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0024dba:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0024dbe:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0024dc2:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0024dc7:	ee                   	out    dx,al
c0024dc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024dcc:	c1 f8 08             	sar    eax,0x8
c0024dcf:	0f b6 c0             	movzx  eax,al
c0024dd2:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0024dd9:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0024ddd:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0024de1:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0024de6:	ee                   	out    dx,al
c0024de7:	90                   	nop
c0024de8:	83 c4 10             	add    esp,0x10
c0024deb:	c3                   	ret    

c0024dec <pitHandler(regs*, void*)>:
c0024dec:	83 ec 0c             	sub    esp,0xc
c0024def:	a1 e4 eb 02 c0       	mov    eax,ds:0xc002ebe4
c0024df4:	99                   	cdq    
c0024df5:	52                   	push   edx
c0024df6:	50                   	push   eax
c0024df7:	6a 00                	push   0x0
c0024df9:	68 00 ca 9a 3b       	push   0x3b9aca00
c0024dfe:	e8 b9 04 00 00       	call   c00252bc <__udivdi3>
c0024e03:	83 c4 10             	add    esp,0x10
c0024e06:	83 ec 08             	sub    esp,0x8
c0024e09:	52                   	push   edx
c0024e0a:	50                   	push   eax
c0024e0b:	e8 ad 14 ff ff       	call   c00162bd <timerHandler(unsigned long long)>
c0024e10:	83 c4 10             	add    esp,0x10
c0024e13:	90                   	nop
c0024e14:	83 c4 0c             	add    esp,0xc
c0024e17:	c3                   	ret    

c0024e18 <PIT::open(int, int, void*)>:
c0024e18:	83 ec 0c             	sub    esp,0xc
c0024e1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e1f:	8b 00                	mov    eax,DWORD PTR [eax]
c0024e21:	83 c0 24             	add    eax,0x24
c0024e24:	8b 00                	mov    eax,DWORD PTR [eax]
c0024e26:	83 ec 08             	sub    esp,0x8
c0024e29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024e2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024e31:	ff d0                	call   eax
c0024e33:	83 c4 10             	add    esp,0x10
c0024e36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e3a:	83 ec 0c             	sub    esp,0xc
c0024e3d:	6a 00                	push   0x0
c0024e3f:	6a 01                	push   0x1
c0024e41:	68 ec 4d 02 c0       	push   0xc0024dec
c0024e46:	6a 00                	push   0x0
c0024e48:	50                   	push   eax
c0024e49:	e8 ac eb fe ff       	call   c00139fa <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0024e4e:	83 c4 20             	add    esp,0x20
c0024e51:	89 c2                	mov    edx,eax
c0024e53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e57:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0024e5d:	b8 00 00 00 00       	mov    eax,0x0
c0024e62:	83 c4 0c             	add    esp,0xc
c0024e65:	c3                   	ret    

c0024e66 <PIT::close(int, int, void*)>:
c0024e66:	83 ec 0c             	sub    esp,0xc
c0024e69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e6d:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0024e77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e7b:	6a 01                	push   0x1
c0024e7d:	68 ec 4d 02 c0       	push   0xc0024dec
c0024e82:	6a 00                	push   0x0
c0024e84:	50                   	push   eax
c0024e85:	e8 ae eb fe ff       	call   c0013a38 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0024e8a:	83 c4 10             	add    esp,0x10
c0024e8d:	b8 00 00 00 00       	mov    eax,0x0
c0024e92:	83 c4 0c             	add    esp,0xc
c0024e95:	c3                   	ret    

c0024e96 <PIT::PIT()>:
c0024e96:	83 ec 0c             	sub    esp,0xc
c0024e99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e9d:	83 ec 08             	sub    esp,0x8
c0024ea0:	68 18 b7 02 c0       	push   0xc002b718
c0024ea5:	50                   	push   eax
c0024ea6:	e8 83 13 ff ff       	call   c001622e <Timer::Timer(char const*)>
c0024eab:	83 c4 10             	add    esp,0x10
c0024eae:	ba 40 b7 02 c0       	mov    edx,0xc002b740
c0024eb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024eb7:	89 10                	mov    DWORD PTR [eax],edx
c0024eb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ebd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024ec3:	0f b6 d0             	movzx  edx,al
c0024ec6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024eca:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0024ed1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ed5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024edb:	0f b6 d0             	movzx  edx,al
c0024ede:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ee2:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0024ee7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024eeb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024ef1:	8d 50 01             	lea    edx,[eax+0x1]
c0024ef4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024ef8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0024efe:	0f b6 d0             	movzx  edx,al
c0024f01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f05:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0024f09:	83 e1 3f             	and    ecx,0x3f
c0024f0c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0024f10:	90                   	nop
c0024f11:	83 c4 0c             	add    esp,0xc
c0024f14:	c3                   	ret    
c0024f15:	66 90                	xchg   ax,ax
c0024f17:	66 90                	xchg   ax,ax
c0024f19:	66 90                	xchg   ax,ax
c0024f1b:	66 90                	xchg   ax,ax
c0024f1d:	66 90                	xchg   ax,ax
c0024f1f:	90                   	nop

c0024f20 <avxDetect>:
c0024f20:	b8 00 00 00 00       	mov    eax,0x0
c0024f25:	c3                   	ret    

c0024f26 <avxSave>:
c0024f26:	c3                   	ret    

c0024f27 <avxLoad>:
c0024f27:	c3                   	ret    

c0024f28 <avxInit>:
c0024f28:	c3                   	ret    

c0024f29 <avxClose>:
c0024f29:	c3                   	ret    

c0024f2a <wouldSheSayYes>:
c0024f2a:	c3                   	ret    
c0024f2b:	49                   	dec    ecx
c0024f2c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0024f30:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0024f34:	75 20                	jne    c0024f56 <sseDetect.noSSE+0x1>
c0024f36:	4e                   	dec    esi
c0024f37:	79 61                	jns    c0024f9a <x87Detect+0x14>
c0024f39:	68 2e 2e 2e 00       	push   0x2e2e2e
c0024f3e:	66 90                	xchg   ax,ax

c0024f40 <absolutelyNoChanceInHell>:
c0024f40:	b8 01 00 00 00       	mov    eax,0x1
c0024f45:	0f a2                	cpuid  
c0024f47:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0024f4d:	74 06                	je     c0024f55 <sseDetect.noSSE>
c0024f4f:	b8 01 00 00 00       	mov    eax,0x1
c0024f54:	c3                   	ret    

c0024f55 <sseDetect.noSSE>:
c0024f55:	31 c0                	xor    eax,eax
c0024f57:	c3                   	ret    

c0024f58 <sseSave>:
c0024f58:	0f ae 44 24 08       	fxsave [esp+0x8]
c0024f5d:	c3                   	ret    

c0024f5e <sseLoad>:
c0024f5e:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0024f63:	c3                   	ret    

c0024f64 <sseInit>:
c0024f64:	e8 43 00 00 00       	call   c0024fac <x87Init>
c0024f69:	0f 20 e0             	mov    eax,cr4
c0024f6c:	66 0d 00 06          	or     ax,0x600
c0024f70:	0f 22 e0             	mov    cr4,eax
c0024f73:	c3                   	ret    

c0024f74 <sseClose>:
c0024f74:	c3                   	ret    
c0024f75:	66 90                	xchg   ax,ax
c0024f77:	66 90                	xchg   ax,ax
c0024f79:	66 90                	xchg   ax,ax
c0024f7b:	66 90                	xchg   ax,ax
c0024f7d:	66 90                	xchg   ax,ax
c0024f7f:	90                   	nop

c0024f80 <value_37F>:
c0024f80:	7f 03                	jg     c0024f85 <value_37A+0x1>

c0024f82 <value_37E>:
c0024f82:	7e 03                	jle    c0024f87 <x87Detect+0x1>

c0024f84 <value_37A>:
c0024f84:	7a 03                	jp     c0024f89 <x87Detect+0x3>

c0024f86 <x87Detect>:
c0024f86:	b8 01 00 00 00       	mov    eax,0x1
c0024f8b:	0f a2                	cpuid  
c0024f8d:	f7 c2 01 00 00 00    	test   edx,0x1
c0024f93:	74 06                	je     c0024f9b <x87Detect.nox87>
c0024f95:	b8 01 00 00 00       	mov    eax,0x1
c0024f9a:	c3                   	ret    

c0024f9b <x87Detect.nox87>:
c0024f9b:	b8 00 00 00 00       	mov    eax,0x0
c0024fa0:	c3                   	ret    

c0024fa1 <x87Save>:
c0024fa1:	9b dd 74 24 08       	fsave  [esp+0x8]
c0024fa6:	c3                   	ret    

c0024fa7 <x87Load>:
c0024fa7:	dd 64 24 08          	frstor [esp+0x8]
c0024fab:	c3                   	ret    

c0024fac <x87Init>:
c0024fac:	9b db e3             	finit  
c0024faf:	0f 20 c0             	mov    eax,cr0
c0024fb2:	66 25 fb ff          	and    ax,0xfffb
c0024fb6:	66 0d 22 00          	or     ax,0x22
c0024fba:	0f 22 c0             	mov    cr0,eax
c0024fbd:	0f 06                	clts   
c0024fbf:	d9 2d 84 4f 02 c0    	fldcw  WORD PTR ds:0xc0024f84
c0024fc5:	c3                   	ret    

c0024fc6 <x87Close>:
c0024fc6:	c3                   	ret    
c0024fc7:	90                   	nop

c0024fc8 <__do_global_ctors_aux>:
c0024fc8:	a1 bc 7a 02 c0       	mov    eax,ds:0xc0027abc
c0024fcd:	83 f8 ff             	cmp    eax,0xffffffff
c0024fd0:	74 1a                	je     c0024fec <__do_global_ctors_aux+0x24>
c0024fd2:	55                   	push   ebp
c0024fd3:	89 e5                	mov    ebp,esp
c0024fd5:	53                   	push   ebx
c0024fd6:	52                   	push   edx
c0024fd7:	bb bc 7a 02 c0       	mov    ebx,0xc0027abc
c0024fdc:	ff d0                	call   eax
c0024fde:	83 eb 04             	sub    ebx,0x4
c0024fe1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024fe3:	83 f8 ff             	cmp    eax,0xffffffff
c0024fe6:	75 f4                	jne    c0024fdc <__do_global_ctors_aux+0x14>
c0024fe8:	58                   	pop    eax
c0024fe9:	5b                   	pop    ebx
c0024fea:	5d                   	pop    ebp
c0024feb:	c3                   	ret    
c0024fec:	c3                   	ret    
c0024fed:	66 90                	xchg   ax,ax
c0024fef:	90                   	nop

c0024ff0 <__divdi3>:
c0024ff0:	55                   	push   ebp
c0024ff1:	57                   	push   edi
c0024ff2:	56                   	push   esi
c0024ff3:	53                   	push   ebx
c0024ff4:	83 ec 1c             	sub    esp,0x1c
c0024ff7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0024ffb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024fff:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0025002:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0025006:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002500a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002500e:	85 db                	test   ebx,ebx
c0025010:	0f 88 8e 00 00 00    	js     c00250a4 <__divdi3+0xb4>
c0025016:	89 dd                	mov    ebp,ebx
c0025018:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0025020:	89 d3                	mov    ebx,edx
c0025022:	85 d2                	test   edx,edx
c0025024:	79 0d                	jns    c0025033 <__divdi3+0x43>
c0025026:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002502a:	f7 d8                	neg    eax
c002502c:	83 d2 00             	adc    edx,0x0
c002502f:	f7 da                	neg    edx
c0025031:	89 d3                	mov    ebx,edx
c0025033:	89 c7                	mov    edi,eax
c0025035:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0025038:	85 db                	test   ebx,ebx
c002503a:	75 48                	jne    c0025084 <__divdi3+0x94>
c002503c:	39 ef                	cmp    edi,ebp
c002503e:	76 24                	jbe    c0025064 <__divdi3+0x74>
c0025040:	89 ea                	mov    edx,ebp
c0025042:	f7 f7                	div    edi
c0025044:	89 c1                	mov    ecx,eax
c0025046:	31 f6                	xor    esi,esi
c0025048:	89 c8                	mov    eax,ecx
c002504a:	89 f2                	mov    edx,esi
c002504c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0025050:	85 c9                	test   ecx,ecx
c0025052:	74 07                	je     c002505b <__divdi3+0x6b>
c0025054:	f7 d8                	neg    eax
c0025056:	83 d2 00             	adc    edx,0x0
c0025059:	f7 da                	neg    edx
c002505b:	83 c4 1c             	add    esp,0x1c
c002505e:	5b                   	pop    ebx
c002505f:	5e                   	pop    esi
c0025060:	5f                   	pop    edi
c0025061:	5d                   	pop    ebp
c0025062:	c3                   	ret    
c0025063:	90                   	nop
c0025064:	85 ff                	test   edi,edi
c0025066:	75 0b                	jne    c0025073 <__divdi3+0x83>
c0025068:	b8 01 00 00 00       	mov    eax,0x1
c002506d:	31 d2                	xor    edx,edx
c002506f:	f7 f3                	div    ebx
c0025071:	89 c7                	mov    edi,eax
c0025073:	31 d2                	xor    edx,edx
c0025075:	89 e8                	mov    eax,ebp
c0025077:	f7 f7                	div    edi
c0025079:	89 c6                	mov    esi,eax
c002507b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002507e:	f7 f7                	div    edi
c0025080:	89 c1                	mov    ecx,eax
c0025082:	eb c4                	jmp    c0025048 <__divdi3+0x58>
c0025084:	39 eb                	cmp    ebx,ebp
c0025086:	77 3c                	ja     c00250c4 <__divdi3+0xd4>
c0025088:	0f bd f3             	bsr    esi,ebx
c002508b:	83 f6 1f             	xor    esi,0x1f
c002508e:	75 40                	jne    c00250d0 <__divdi3+0xe0>
c0025090:	39 eb                	cmp    ebx,ebp
c0025092:	72 09                	jb     c002509d <__divdi3+0xad>
c0025094:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0025097:	0f 87 97 00 00 00    	ja     c0025134 <__divdi3+0x144>
c002509d:	b9 01 00 00 00       	mov    ecx,0x1
c00250a2:	eb a4                	jmp    c0025048 <__divdi3+0x58>
c00250a4:	f7 d9                	neg    ecx
c00250a6:	83 d3 00             	adc    ebx,0x0
c00250a9:	f7 db                	neg    ebx
c00250ab:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00250ae:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00250b2:	89 dd                	mov    ebp,ebx
c00250b4:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00250bc:	e9 5f ff ff ff       	jmp    c0025020 <__divdi3+0x30>
c00250c1:	8d 76 00             	lea    esi,[esi+0x0]
c00250c4:	31 f6                	xor    esi,esi
c00250c6:	31 c9                	xor    ecx,ecx
c00250c8:	e9 7b ff ff ff       	jmp    c0025048 <__divdi3+0x58>
c00250cd:	8d 76 00             	lea    esi,[esi+0x0]
c00250d0:	b8 20 00 00 00       	mov    eax,0x20
c00250d5:	29 f0                	sub    eax,esi
c00250d7:	89 f1                	mov    ecx,esi
c00250d9:	d3 e3                	shl    ebx,cl
c00250db:	89 fa                	mov    edx,edi
c00250dd:	88 c1                	mov    cl,al
c00250df:	d3 ea                	shr    edx,cl
c00250e1:	09 da                	or     edx,ebx
c00250e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00250e7:	89 f1                	mov    ecx,esi
c00250e9:	d3 e7                	shl    edi,cl
c00250eb:	89 eb                	mov    ebx,ebp
c00250ed:	88 c1                	mov    cl,al
c00250ef:	d3 eb                	shr    ebx,cl
c00250f1:	89 f1                	mov    ecx,esi
c00250f3:	d3 e5                	shl    ebp,cl
c00250f5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00250f8:	88 c1                	mov    cl,al
c00250fa:	d3 ea                	shr    edx,cl
c00250fc:	09 d5                	or     ebp,edx
c00250fe:	89 e8                	mov    eax,ebp
c0025100:	89 da                	mov    edx,ebx
c0025102:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0025106:	89 d3                	mov    ebx,edx
c0025108:	89 c5                	mov    ebp,eax
c002510a:	f7 e7                	mul    edi
c002510c:	39 d3                	cmp    ebx,edx
c002510e:	72 18                	jb     c0025128 <__divdi3+0x138>
c0025110:	74 0a                	je     c002511c <__divdi3+0x12c>
c0025112:	89 e9                	mov    ecx,ebp
c0025114:	31 f6                	xor    esi,esi
c0025116:	e9 2d ff ff ff       	jmp    c0025048 <__divdi3+0x58>
c002511b:	90                   	nop
c002511c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002511f:	89 f1                	mov    ecx,esi
c0025121:	d3 e7                	shl    edi,cl
c0025123:	39 c7                	cmp    edi,eax
c0025125:	73 eb                	jae    c0025112 <__divdi3+0x122>
c0025127:	90                   	nop
c0025128:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002512b:	31 f6                	xor    esi,esi
c002512d:	e9 16 ff ff ff       	jmp    c0025048 <__divdi3+0x58>
c0025132:	66 90                	xchg   ax,ax
c0025134:	31 c9                	xor    ecx,ecx
c0025136:	e9 0d ff ff ff       	jmp    c0025048 <__divdi3+0x58>
c002513b:	90                   	nop

c002513c <__moddi3>:
c002513c:	55                   	push   ebp
c002513d:	57                   	push   edi
c002513e:	56                   	push   esi
c002513f:	53                   	push   ebx
c0025140:	83 ec 2c             	sub    esp,0x2c
c0025143:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0025147:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002514b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002514f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0025153:	85 db                	test   ebx,ebx
c0025155:	0f 88 85 00 00 00    	js     c00251e0 <__moddi3+0xa4>
c002515b:	89 de                	mov    esi,ebx
c002515d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0025165:	89 d7                	mov    edi,edx
c0025167:	85 d2                	test   edx,edx
c0025169:	79 09                	jns    c0025174 <__moddi3+0x38>
c002516b:	f7 d8                	neg    eax
c002516d:	83 d2 00             	adc    edx,0x0
c0025170:	f7 da                	neg    edx
c0025172:	89 d7                	mov    edi,edx
c0025174:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025178:	89 cd                	mov    ebp,ecx
c002517a:	85 ff                	test   edi,edi
c002517c:	75 52                	jne    c00251d0 <__moddi3+0x94>
c002517e:	89 c3                	mov    ebx,eax
c0025180:	39 f0                	cmp    eax,esi
c0025182:	76 24                	jbe    c00251a8 <__moddi3+0x6c>
c0025184:	89 c8                	mov    eax,ecx
c0025186:	89 f2                	mov    edx,esi
c0025188:	f7 f3                	div    ebx
c002518a:	89 d6                	mov    esi,edx
c002518c:	89 f0                	mov    eax,esi
c002518e:	31 d2                	xor    edx,edx
c0025190:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025194:	85 c9                	test   ecx,ecx
c0025196:	74 07                	je     c002519f <__moddi3+0x63>
c0025198:	f7 d8                	neg    eax
c002519a:	83 d2 00             	adc    edx,0x0
c002519d:	f7 da                	neg    edx
c002519f:	83 c4 2c             	add    esp,0x2c
c00251a2:	5b                   	pop    ebx
c00251a3:	5e                   	pop    esi
c00251a4:	5f                   	pop    edi
c00251a5:	5d                   	pop    ebp
c00251a6:	c3                   	ret    
c00251a7:	90                   	nop
c00251a8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00251ac:	85 db                	test   ebx,ebx
c00251ae:	75 0d                	jne    c00251bd <__moddi3+0x81>
c00251b0:	b8 01 00 00 00       	mov    eax,0x1
c00251b5:	31 d2                	xor    edx,edx
c00251b7:	f7 f7                	div    edi
c00251b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00251bd:	89 f0                	mov    eax,esi
c00251bf:	31 d2                	xor    edx,edx
c00251c1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00251c5:	f7 f7                	div    edi
c00251c7:	89 e8                	mov    eax,ebp
c00251c9:	f7 f7                	div    edi
c00251cb:	89 d6                	mov    esi,edx
c00251cd:	eb bd                	jmp    c002518c <__moddi3+0x50>
c00251cf:	90                   	nop
c00251d0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00251d4:	39 f7                	cmp    edi,esi
c00251d6:	76 20                	jbe    c00251f8 <__moddi3+0xbc>
c00251d8:	89 c8                	mov    eax,ecx
c00251da:	89 f2                	mov    edx,esi
c00251dc:	eb b2                	jmp    c0025190 <__moddi3+0x54>
c00251de:	66 90                	xchg   ax,ax
c00251e0:	f7 d9                	neg    ecx
c00251e2:	83 d3 00             	adc    ebx,0x0
c00251e5:	f7 db                	neg    ebx
c00251e7:	89 de                	mov    esi,ebx
c00251e9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00251f1:	e9 6f ff ff ff       	jmp    c0025165 <__moddi3+0x29>
c00251f6:	66 90                	xchg   ax,ax
c00251f8:	0f bd c7             	bsr    eax,edi
c00251fb:	83 f0 1f             	xor    eax,0x1f
c00251fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0025202:	75 24                	jne    c0025228 <__moddi3+0xec>
c0025204:	39 f7                	cmp    edi,esi
c0025206:	72 06                	jb     c002520e <__moddi3+0xd2>
c0025208:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002520c:	77 0c                	ja     c002521a <__moddi3+0xde>
c002520e:	89 e9                	mov    ecx,ebp
c0025210:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0025214:	19 fe                	sbb    esi,edi
c0025216:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002521a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002521e:	89 f2                	mov    edx,esi
c0025220:	e9 6b ff ff ff       	jmp    c0025190 <__moddi3+0x54>
c0025225:	8d 76 00             	lea    esi,[esi+0x0]
c0025228:	b8 20 00 00 00       	mov    eax,0x20
c002522d:	89 c2                	mov    edx,eax
c002522f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0025233:	29 da                	sub    edx,ebx
c0025235:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0025239:	88 d9                	mov    cl,bl
c002523b:	d3 e7                	shl    edi,cl
c002523d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025241:	88 d1                	mov    cl,dl
c0025243:	d3 e8                	shr    eax,cl
c0025245:	09 c7                	or     edi,eax
c0025247:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002524b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002524f:	89 d8                	mov    eax,ebx
c0025251:	88 d9                	mov    cl,bl
c0025253:	d3 e7                	shl    edi,cl
c0025255:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0025259:	89 f3                	mov    ebx,esi
c002525b:	88 d1                	mov    cl,dl
c002525d:	d3 eb                	shr    ebx,cl
c002525f:	89 c7                	mov    edi,eax
c0025261:	88 c1                	mov    cl,al
c0025263:	d3 e6                	shl    esi,cl
c0025265:	89 e8                	mov    eax,ebp
c0025267:	88 d1                	mov    cl,dl
c0025269:	d3 e8                	shr    eax,cl
c002526b:	09 f0                	or     eax,esi
c002526d:	89 f9                	mov    ecx,edi
c002526f:	d3 e5                	shl    ebp,cl
c0025271:	89 da                	mov    edx,ebx
c0025273:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0025277:	89 d3                	mov    ebx,edx
c0025279:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002527d:	89 c6                	mov    esi,eax
c002527f:	89 d1                	mov    ecx,edx
c0025281:	39 d3                	cmp    ebx,edx
c0025283:	72 27                	jb     c00252ac <__moddi3+0x170>
c0025285:	74 21                	je     c00252a8 <__moddi3+0x16c>
c0025287:	29 f5                	sub    ebp,esi
c0025289:	19 cb                	sbb    ebx,ecx
c002528b:	89 de                	mov    esi,ebx
c002528d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0025291:	d3 e6                	shl    esi,cl
c0025293:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0025297:	89 f9                	mov    ecx,edi
c0025299:	d3 ed                	shr    ebp,cl
c002529b:	09 ee                	or     esi,ebp
c002529d:	89 f0                	mov    eax,esi
c002529f:	d3 eb                	shr    ebx,cl
c00252a1:	89 da                	mov    edx,ebx
c00252a3:	e9 e8 fe ff ff       	jmp    c0025190 <__moddi3+0x54>
c00252a8:	39 c5                	cmp    ebp,eax
c00252aa:	73 db                	jae    c0025287 <__moddi3+0x14b>
c00252ac:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00252b0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00252b4:	89 d1                	mov    ecx,edx
c00252b6:	89 c6                	mov    esi,eax
c00252b8:	eb cd                	jmp    c0025287 <__moddi3+0x14b>
c00252ba:	66 90                	xchg   ax,ax

c00252bc <__udivdi3>:
c00252bc:	55                   	push   ebp
c00252bd:	57                   	push   edi
c00252be:	56                   	push   esi
c00252bf:	53                   	push   ebx
c00252c0:	83 ec 1c             	sub    esp,0x1c
c00252c3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00252c7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00252cb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00252cf:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00252d3:	85 d2                	test   edx,edx
c00252d5:	75 41                	jne    c0025318 <__udivdi3+0x5c>
c00252d7:	39 f7                	cmp    edi,esi
c00252d9:	76 15                	jbe    c00252f0 <__udivdi3+0x34>
c00252db:	89 e8                	mov    eax,ebp
c00252dd:	89 f2                	mov    edx,esi
c00252df:	f7 f7                	div    edi
c00252e1:	31 db                	xor    ebx,ebx
c00252e3:	89 da                	mov    edx,ebx
c00252e5:	83 c4 1c             	add    esp,0x1c
c00252e8:	5b                   	pop    ebx
c00252e9:	5e                   	pop    esi
c00252ea:	5f                   	pop    edi
c00252eb:	5d                   	pop    ebp
c00252ec:	c3                   	ret    
c00252ed:	8d 76 00             	lea    esi,[esi+0x0]
c00252f0:	89 f9                	mov    ecx,edi
c00252f2:	85 ff                	test   edi,edi
c00252f4:	75 0b                	jne    c0025301 <__udivdi3+0x45>
c00252f6:	b8 01 00 00 00       	mov    eax,0x1
c00252fb:	31 d2                	xor    edx,edx
c00252fd:	f7 f7                	div    edi
c00252ff:	89 c1                	mov    ecx,eax
c0025301:	31 d2                	xor    edx,edx
c0025303:	89 f0                	mov    eax,esi
c0025305:	f7 f1                	div    ecx
c0025307:	89 c3                	mov    ebx,eax
c0025309:	89 e8                	mov    eax,ebp
c002530b:	f7 f1                	div    ecx
c002530d:	89 da                	mov    edx,ebx
c002530f:	83 c4 1c             	add    esp,0x1c
c0025312:	5b                   	pop    ebx
c0025313:	5e                   	pop    esi
c0025314:	5f                   	pop    edi
c0025315:	5d                   	pop    ebp
c0025316:	c3                   	ret    
c0025317:	90                   	nop
c0025318:	39 f2                	cmp    edx,esi
c002531a:	77 1c                	ja     c0025338 <__udivdi3+0x7c>
c002531c:	0f bd da             	bsr    ebx,edx
c002531f:	83 f3 1f             	xor    ebx,0x1f
c0025322:	75 24                	jne    c0025348 <__udivdi3+0x8c>
c0025324:	39 f2                	cmp    edx,esi
c0025326:	72 08                	jb     c0025330 <__udivdi3+0x74>
c0025328:	39 ef                	cmp    edi,ebp
c002532a:	0f 87 84 00 00 00    	ja     c00253b4 <__udivdi3+0xf8>
c0025330:	b8 01 00 00 00       	mov    eax,0x1
c0025335:	eb ac                	jmp    c00252e3 <__udivdi3+0x27>
c0025337:	90                   	nop
c0025338:	31 db                	xor    ebx,ebx
c002533a:	31 c0                	xor    eax,eax
c002533c:	89 da                	mov    edx,ebx
c002533e:	83 c4 1c             	add    esp,0x1c
c0025341:	5b                   	pop    ebx
c0025342:	5e                   	pop    esi
c0025343:	5f                   	pop    edi
c0025344:	5d                   	pop    ebp
c0025345:	c3                   	ret    
c0025346:	66 90                	xchg   ax,ax
c0025348:	b8 20 00 00 00       	mov    eax,0x20
c002534d:	29 d8                	sub    eax,ebx
c002534f:	88 d9                	mov    cl,bl
c0025351:	d3 e2                	shl    edx,cl
c0025353:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0025357:	89 fa                	mov    edx,edi
c0025359:	88 c1                	mov    cl,al
c002535b:	d3 ea                	shr    edx,cl
c002535d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0025361:	09 d1                	or     ecx,edx
c0025363:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0025367:	88 d9                	mov    cl,bl
c0025369:	d3 e7                	shl    edi,cl
c002536b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002536f:	89 f7                	mov    edi,esi
c0025371:	88 c1                	mov    cl,al
c0025373:	d3 ef                	shr    edi,cl
c0025375:	88 d9                	mov    cl,bl
c0025377:	d3 e6                	shl    esi,cl
c0025379:	89 ea                	mov    edx,ebp
c002537b:	88 c1                	mov    cl,al
c002537d:	d3 ea                	shr    edx,cl
c002537f:	09 d6                	or     esi,edx
c0025381:	89 f0                	mov    eax,esi
c0025383:	89 fa                	mov    edx,edi
c0025385:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0025389:	89 d7                	mov    edi,edx
c002538b:	89 c6                	mov    esi,eax
c002538d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0025391:	39 d7                	cmp    edi,edx
c0025393:	72 13                	jb     c00253a8 <__udivdi3+0xec>
c0025395:	74 09                	je     c00253a0 <__udivdi3+0xe4>
c0025397:	89 f0                	mov    eax,esi
c0025399:	31 db                	xor    ebx,ebx
c002539b:	e9 43 ff ff ff       	jmp    c00252e3 <__udivdi3+0x27>
c00253a0:	88 d9                	mov    cl,bl
c00253a2:	d3 e5                	shl    ebp,cl
c00253a4:	39 c5                	cmp    ebp,eax
c00253a6:	73 ef                	jae    c0025397 <__udivdi3+0xdb>
c00253a8:	8d 46 ff             	lea    eax,[esi-0x1]
c00253ab:	31 db                	xor    ebx,ebx
c00253ad:	e9 31 ff ff ff       	jmp    c00252e3 <__udivdi3+0x27>
c00253b2:	66 90                	xchg   ax,ax
c00253b4:	31 c0                	xor    eax,eax
c00253b6:	e9 28 ff ff ff       	jmp    c00252e3 <__udivdi3+0x27>
c00253bb:	90                   	nop

c00253bc <__umoddi3>:
c00253bc:	55                   	push   ebp
c00253bd:	57                   	push   edi
c00253be:	56                   	push   esi
c00253bf:	53                   	push   ebx
c00253c0:	83 ec 1c             	sub    esp,0x1c
c00253c3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00253c7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00253cb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00253cf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00253d3:	89 da                	mov    edx,ebx
c00253d5:	85 c0                	test   eax,eax
c00253d7:	75 37                	jne    c0025410 <__umoddi3+0x54>
c00253d9:	39 df                	cmp    edi,ebx
c00253db:	76 13                	jbe    c00253f0 <__umoddi3+0x34>
c00253dd:	89 f0                	mov    eax,esi
c00253df:	f7 f7                	div    edi
c00253e1:	89 d0                	mov    eax,edx
c00253e3:	31 d2                	xor    edx,edx
c00253e5:	83 c4 1c             	add    esp,0x1c
c00253e8:	5b                   	pop    ebx
c00253e9:	5e                   	pop    esi
c00253ea:	5f                   	pop    edi
c00253eb:	5d                   	pop    ebp
c00253ec:	c3                   	ret    
c00253ed:	8d 76 00             	lea    esi,[esi+0x0]
c00253f0:	89 fd                	mov    ebp,edi
c00253f2:	85 ff                	test   edi,edi
c00253f4:	75 0b                	jne    c0025401 <__umoddi3+0x45>
c00253f6:	b8 01 00 00 00       	mov    eax,0x1
c00253fb:	31 d2                	xor    edx,edx
c00253fd:	f7 f7                	div    edi
c00253ff:	89 c5                	mov    ebp,eax
c0025401:	89 d8                	mov    eax,ebx
c0025403:	31 d2                	xor    edx,edx
c0025405:	f7 f5                	div    ebp
c0025407:	89 f0                	mov    eax,esi
c0025409:	f7 f5                	div    ebp
c002540b:	89 d0                	mov    eax,edx
c002540d:	eb d4                	jmp    c00253e3 <__umoddi3+0x27>
c002540f:	90                   	nop
c0025410:	89 f1                	mov    ecx,esi
c0025412:	39 d8                	cmp    eax,ebx
c0025414:	76 0a                	jbe    c0025420 <__umoddi3+0x64>
c0025416:	89 f0                	mov    eax,esi
c0025418:	83 c4 1c             	add    esp,0x1c
c002541b:	5b                   	pop    ebx
c002541c:	5e                   	pop    esi
c002541d:	5f                   	pop    edi
c002541e:	5d                   	pop    ebp
c002541f:	c3                   	ret    
c0025420:	0f bd e8             	bsr    ebp,eax
c0025423:	83 f5 1f             	xor    ebp,0x1f
c0025426:	75 1c                	jne    c0025444 <__umoddi3+0x88>
c0025428:	39 d8                	cmp    eax,ebx
c002542a:	72 04                	jb     c0025430 <__umoddi3+0x74>
c002542c:	39 f7                	cmp    edi,esi
c002542e:	77 08                	ja     c0025438 <__umoddi3+0x7c>
c0025430:	89 da                	mov    edx,ebx
c0025432:	29 fe                	sub    esi,edi
c0025434:	19 c2                	sbb    edx,eax
c0025436:	89 f1                	mov    ecx,esi
c0025438:	89 c8                	mov    eax,ecx
c002543a:	83 c4 1c             	add    esp,0x1c
c002543d:	5b                   	pop    ebx
c002543e:	5e                   	pop    esi
c002543f:	5f                   	pop    edi
c0025440:	5d                   	pop    ebp
c0025441:	c3                   	ret    
c0025442:	66 90                	xchg   ax,ax
c0025444:	ba 20 00 00 00       	mov    edx,0x20
c0025449:	29 ea                	sub    edx,ebp
c002544b:	89 e9                	mov    ecx,ebp
c002544d:	d3 e0                	shl    eax,cl
c002544f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025453:	89 f8                	mov    eax,edi
c0025455:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0025459:	88 d1                	mov    cl,dl
c002545b:	d3 e8                	shr    eax,cl
c002545d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0025461:	09 c1                	or     ecx,eax
c0025463:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0025467:	89 e9                	mov    ecx,ebp
c0025469:	d3 e7                	shl    edi,cl
c002546b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002546f:	89 d8                	mov    eax,ebx
c0025471:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025475:	88 d1                	mov    cl,dl
c0025477:	d3 e8                	shr    eax,cl
c0025479:	89 c7                	mov    edi,eax
c002547b:	89 e9                	mov    ecx,ebp
c002547d:	d3 e3                	shl    ebx,cl
c002547f:	89 f0                	mov    eax,esi
c0025481:	88 d1                	mov    cl,dl
c0025483:	d3 e8                	shr    eax,cl
c0025485:	09 d8                	or     eax,ebx
c0025487:	89 e9                	mov    ecx,ebp
c0025489:	d3 e6                	shl    esi,cl
c002548b:	89 f3                	mov    ebx,esi
c002548d:	89 fa                	mov    edx,edi
c002548f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0025493:	89 d1                	mov    ecx,edx
c0025495:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0025499:	89 c6                	mov    esi,eax
c002549b:	89 d7                	mov    edi,edx
c002549d:	39 d1                	cmp    ecx,edx
c002549f:	72 27                	jb     c00254c8 <__umoddi3+0x10c>
c00254a1:	74 21                	je     c00254c4 <__umoddi3+0x108>
c00254a3:	89 ca                	mov    edx,ecx
c00254a5:	29 f3                	sub    ebx,esi
c00254a7:	19 fa                	sbb    edx,edi
c00254a9:	89 d0                	mov    eax,edx
c00254ab:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00254af:	d3 e0                	shl    eax,cl
c00254b1:	89 e9                	mov    ecx,ebp
c00254b3:	d3 eb                	shr    ebx,cl
c00254b5:	09 d8                	or     eax,ebx
c00254b7:	d3 ea                	shr    edx,cl
c00254b9:	83 c4 1c             	add    esp,0x1c
c00254bc:	5b                   	pop    ebx
c00254bd:	5e                   	pop    esi
c00254be:	5f                   	pop    edi
c00254bf:	5d                   	pop    ebp
c00254c0:	c3                   	ret    
c00254c1:	8d 76 00             	lea    esi,[esi+0x0]
c00254c4:	39 c3                	cmp    ebx,eax
c00254c6:	73 db                	jae    c00254a3 <__umoddi3+0xe7>
c00254c8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00254cc:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00254d0:	89 d7                	mov    edi,edx
c00254d2:	89 c6                	mov    esi,eax
c00254d4:	eb cd                	jmp    c00254a3 <__umoddi3+0xe7>

c00254d6 <__addsf3>:
c00254d6:	55                   	push   ebp
c00254d7:	89 e5                	mov    ebp,esp
c00254d9:	57                   	push   edi
c00254da:	56                   	push   esi
c00254db:	53                   	push   ebx
c00254dc:	83 ec 08             	sub    esp,0x8
c00254df:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00254e2:	89 fa                	mov    edx,edi
c00254e4:	89 f8                	mov    eax,edi
c00254e6:	c1 f8 17             	sar    eax,0x17
c00254e9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00254ec:	c1 e2 08             	shl    edx,0x8
c00254ef:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00254f5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00254f8:	89 de                	mov    esi,ebx
c00254fa:	c1 fe 17             	sar    esi,0x17
c00254fd:	c1 e3 08             	shl    ebx,0x8
c0025500:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0025506:	31 f0                	xor    eax,esi
c0025508:	0f 88 3b 01 00 00    	js     c0025649 <__addsf3+0x173>
c002550e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0025511:	29 f1                	sub    ecx,esi
c0025513:	85 c9                	test   ecx,ecx
c0025515:	7e 54                	jle    c002556b <__addsf3+0x95>
c0025517:	89 f0                	mov    eax,esi
c0025519:	84 c0                	test   al,al
c002551b:	75 10                	jne    c002552d <__addsf3+0x57>
c002551d:	85 db                	test   ebx,ebx
c002551f:	0f 84 aa 02 00 00    	je     c00257cf <__addsf3+0x2f9>
c0025525:	49                   	dec    ecx
c0025526:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0025529:	74 38                	je     c0025563 <__addsf3+0x8d>
c002552b:	eb 13                	jmp    c0025540 <__addsf3+0x6a>
c002552d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025530:	f7 d0                	not    eax
c0025532:	84 c0                	test   al,al
c0025534:	0f 84 95 02 00 00    	je     c00257cf <__addsf3+0x2f9>
c002553a:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0025540:	83 f9 1f             	cmp    ecx,0x1f
c0025543:	0f 8f 86 02 00 00    	jg     c00257cf <__addsf3+0x2f9>
c0025549:	89 de                	mov    esi,ebx
c002554b:	d3 ee                	shr    esi,cl
c002554d:	b8 20 00 00 00       	mov    eax,0x20
c0025552:	29 c8                	sub    eax,ecx
c0025554:	89 c1                	mov    ecx,eax
c0025556:	d3 e3                	shl    ebx,cl
c0025558:	31 c0                	xor    eax,eax
c002555a:	85 db                	test   ebx,ebx
c002555c:	0f 95 c0             	setne  al
c002555f:	09 f0                	or     eax,esi
c0025561:	01 d0                	add    eax,edx
c0025563:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0025566:	e9 b6 00 00 00       	jmp    c0025621 <__addsf3+0x14b>
c002556b:	74 5c                	je     c00255c9 <__addsf3+0xf3>
c002556d:	89 f1                	mov    ecx,esi
c002556f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0025572:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0025575:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0025579:	75 14                	jne    c002558f <__addsf3+0xb9>
c002557b:	85 d2                	test   edx,edx
c002557d:	0f 84 4c 02 00 00    	je     c00257cf <__addsf3+0x2f9>
c0025583:	49                   	dec    ecx
c0025584:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0025587:	0f 84 94 00 00 00    	je     c0025621 <__addsf3+0x14b>
c002558d:	eb 12                	jmp    c00255a1 <__addsf3+0xcb>
c002558f:	89 f0                	mov    eax,esi
c0025591:	f7 d0                	not    eax
c0025593:	84 c0                	test   al,al
c0025595:	0f 84 34 02 00 00    	je     c00257cf <__addsf3+0x2f9>
c002559b:	81 ca 00 00 00 80    	or     edx,0x80000000
c00255a1:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00255a4:	83 f9 1f             	cmp    ecx,0x1f
c00255a7:	0f 8f 22 02 00 00    	jg     c00257cf <__addsf3+0x2f9>
c00255ad:	89 d7                	mov    edi,edx
c00255af:	d3 ef                	shr    edi,cl
c00255b1:	b8 20 00 00 00       	mov    eax,0x20
c00255b6:	29 c8                	sub    eax,ecx
c00255b8:	89 c1                	mov    ecx,eax
c00255ba:	d3 e2                	shl    edx,cl
c00255bc:	31 c0                	xor    eax,eax
c00255be:	85 d2                	test   edx,edx
c00255c0:	0f 95 c0             	setne  al
c00255c3:	09 f8                	or     eax,edi
c00255c5:	01 d8                	add    eax,ebx
c00255c7:	eb 58                	jmp    c0025621 <__addsf3+0x14b>
c00255c9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00255cc:	8d 70 01             	lea    esi,[eax+0x1]
c00255cf:	f7 c6 fe 00 00 00    	test   esi,0xfe
c00255d5:	75 32                	jne    c0025609 <__addsf3+0x133>
c00255d7:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00255db:	75 1f                	jne    c00255fc <__addsf3+0x126>
c00255dd:	85 d2                	test   edx,edx
c00255df:	0f 84 e0 01 00 00    	je     c00257c5 <__addsf3+0x2ef>
c00255e5:	85 db                	test   ebx,ebx
c00255e7:	0f 84 e2 01 00 00    	je     c00257cf <__addsf3+0x2f9>
c00255ed:	89 d0                	mov    eax,edx
c00255ef:	01 d8                	add    eax,ebx
c00255f1:	0f 89 a9 01 00 00    	jns    c00257a0 <__addsf3+0x2ca>
c00255f7:	e9 9d 01 00 00       	jmp    c0025799 <__addsf3+0x2c3>
c00255fc:	85 d2                	test   edx,edx
c00255fe:	0f 85 cb 01 00 00    	jne    c00257cf <__addsf3+0x2f9>
c0025604:	e9 bc 01 00 00       	jmp    c00257c5 <__addsf3+0x2ef>
c0025609:	31 c0                	xor    eax,eax
c002560b:	89 f1                	mov    ecx,esi
c002560d:	f7 d1                	not    ecx
c002560f:	84 c9                	test   cl,cl
c0025611:	0f 84 90 01 00 00    	je     c00257a7 <__addsf3+0x2d1>
c0025617:	8d 04 1a             	lea    eax,[edx+ebx*1]
c002561a:	d1 e8                	shr    eax,1
c002561c:	e9 86 01 00 00       	jmp    c00257a7 <__addsf3+0x2d1>
c0025621:	85 c0                	test   eax,eax
c0025623:	0f 89 7e 01 00 00    	jns    c00257a7 <__addsf3+0x2d1>
c0025629:	46                   	inc    esi
c002562a:	89 f2                	mov    edx,esi
c002562c:	f7 d2                	not    edx
c002562e:	84 d2                	test   dl,dl
c0025630:	0f 84 6f 01 00 00    	je     c00257a5 <__addsf3+0x2cf>
c0025636:	89 c2                	mov    edx,eax
c0025638:	83 e2 01             	and    edx,0x1
c002563b:	d1 e8                	shr    eax,1
c002563d:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0025642:	09 d0                	or     eax,edx
c0025644:	e9 5e 01 00 00       	jmp    c00257a7 <__addsf3+0x2d1>
c0025649:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c002564d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025650:	89 f0                	mov    eax,esi
c0025652:	0f b6 c0             	movzx  eax,al
c0025655:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0025658:	29 c1                	sub    ecx,eax
c002565a:	85 c9                	test   ecx,ecx
c002565c:	7e 55                	jle    c00256b3 <__addsf3+0x1dd>
c002565e:	85 c0                	test   eax,eax
c0025660:	75 11                	jne    c0025673 <__addsf3+0x19d>
c0025662:	85 db                	test   ebx,ebx
c0025664:	0f 84 65 01 00 00    	je     c00257cf <__addsf3+0x2f9>
c002566a:	49                   	dec    ecx
c002566b:	75 19                	jne    c0025686 <__addsf3+0x1b0>
c002566d:	89 d0                	mov    eax,edx
c002566f:	29 d8                	sub    eax,ebx
c0025671:	eb 38                	jmp    c00256ab <__addsf3+0x1d5>
c0025673:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025676:	f7 d0                	not    eax
c0025678:	84 c0                	test   al,al
c002567a:	0f 84 4f 01 00 00    	je     c00257cf <__addsf3+0x2f9>
c0025680:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0025686:	83 f9 1f             	cmp    ecx,0x1f
c0025689:	0f 8f 40 01 00 00    	jg     c00257cf <__addsf3+0x2f9>
c002568f:	89 de                	mov    esi,ebx
c0025691:	d3 ee                	shr    esi,cl
c0025693:	b8 20 00 00 00       	mov    eax,0x20
c0025698:	29 c8                	sub    eax,ecx
c002569a:	89 c1                	mov    ecx,eax
c002569c:	d3 e3                	shl    ebx,cl
c002569e:	31 c0                	xor    eax,eax
c00256a0:	85 db                	test   ebx,ebx
c00256a2:	0f 95 c0             	setne  al
c00256a5:	09 f0                	or     eax,esi
c00256a7:	29 c2                	sub    edx,eax
c00256a9:	89 d0                	mov    eax,edx
c00256ab:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00256ae:	e9 af 00 00 00       	jmp    c0025762 <__addsf3+0x28c>
c00256b3:	74 5c                	je     c0025711 <__addsf3+0x23b>
c00256b5:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c00256b8:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00256bb:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00256bf:	75 14                	jne    c00256d5 <__addsf3+0x1ff>
c00256c1:	85 d2                	test   edx,edx
c00256c3:	0f 84 06 01 00 00    	je     c00257cf <__addsf3+0x2f9>
c00256c9:	48                   	dec    eax
c00256ca:	75 1b                	jne    c00256e7 <__addsf3+0x211>
c00256cc:	89 d8                	mov    eax,ebx
c00256ce:	29 d0                	sub    eax,edx
c00256d0:	e9 8d 00 00 00       	jmp    c0025762 <__addsf3+0x28c>
c00256d5:	89 f1                	mov    ecx,esi
c00256d7:	f7 d1                	not    ecx
c00256d9:	84 c9                	test   cl,cl
c00256db:	0f 84 ee 00 00 00    	je     c00257cf <__addsf3+0x2f9>
c00256e1:	81 ca 00 00 00 80    	or     edx,0x80000000
c00256e7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00256ea:	83 f8 1f             	cmp    eax,0x1f
c00256ed:	0f 8f dc 00 00 00    	jg     c00257cf <__addsf3+0x2f9>
c00256f3:	89 d7                	mov    edi,edx
c00256f5:	88 c1                	mov    cl,al
c00256f7:	d3 ef                	shr    edi,cl
c00256f9:	b9 20 00 00 00       	mov    ecx,0x20
c00256fe:	29 c1                	sub    ecx,eax
c0025700:	d3 e2                	shl    edx,cl
c0025702:	31 c0                	xor    eax,eax
c0025704:	85 d2                	test   edx,edx
c0025706:	0f 95 c0             	setne  al
c0025709:	09 f8                	or     eax,edi
c002570b:	29 c3                	sub    ebx,eax
c002570d:	89 d8                	mov    eax,ebx
c002570f:	eb 51                	jmp    c0025762 <__addsf3+0x28c>
c0025711:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025714:	40                   	inc    eax
c0025715:	a8 fe                	test   al,0xfe
c0025717:	75 3d                	jne    c0025756 <__addsf3+0x280>
c0025719:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c002571d:	0f 85 a7 00 00 00    	jne    c00257ca <__addsf3+0x2f4>
c0025723:	85 d2                	test   edx,edx
c0025725:	75 12                	jne    c0025739 <__addsf3+0x263>
c0025727:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002572a:	85 db                	test   ebx,ebx
c002572c:	0f 85 9d 00 00 00    	jne    c00257cf <__addsf3+0x2f9>
c0025732:	31 ff                	xor    edi,edi
c0025734:	e9 96 00 00 00       	jmp    c00257cf <__addsf3+0x2f9>
c0025739:	85 db                	test   ebx,ebx
c002573b:	0f 84 8e 00 00 00    	je     c00257cf <__addsf3+0x2f9>
c0025741:	89 d0                	mov    eax,edx
c0025743:	29 d8                	sub    eax,ebx
c0025745:	79 06                	jns    c002574d <__addsf3+0x277>
c0025747:	89 d8                	mov    eax,ebx
c0025749:	29 d0                	sub    eax,edx
c002574b:	eb 5a                	jmp    c00257a7 <__addsf3+0x2d1>
c002574d:	bf 00 00 00 00       	mov    edi,0x0
c0025752:	74 7b                	je     c00257cf <__addsf3+0x2f9>
c0025754:	eb 4a                	jmp    c00257a0 <__addsf3+0x2ca>
c0025756:	89 d0                	mov    eax,edx
c0025758:	29 d8                	sub    eax,ebx
c002575a:	79 12                	jns    c002576e <__addsf3+0x298>
c002575c:	89 d8                	mov    eax,ebx
c002575e:	29 d0                	sub    eax,edx
c0025760:	eb 09                	jmp    c002576b <__addsf3+0x295>
c0025762:	85 c0                	test   eax,eax
c0025764:	79 41                	jns    c00257a7 <__addsf3+0x2d1>
c0025766:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002576b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c002576e:	31 f6                	xor    esi,esi
c0025770:	85 c0                	test   eax,eax
c0025772:	74 33                	je     c00257a7 <__addsf3+0x2d1>
c0025774:	0f bd c8             	bsr    ecx,eax
c0025777:	83 f1 1f             	xor    ecx,0x1f
c002577a:	d3 e0                	shl    eax,cl
c002577c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0025780:	39 ca                	cmp    edx,ecx
c0025782:	7f 10                	jg     c0025794 <__addsf3+0x2be>
c0025784:	29 d1                	sub    ecx,edx
c0025786:	41                   	inc    ecx
c0025787:	d3 e8                	shr    eax,cl
c0025789:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002578c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0025792:	eb 13                	jmp    c00257a7 <__addsf3+0x2d1>
c0025794:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0025797:	29 ce                	sub    esi,ecx
c0025799:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002579e:	eb 07                	jmp    c00257a7 <__addsf3+0x2d1>
c00257a0:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00257a3:	eb 02                	jmp    c00257a7 <__addsf3+0x2d1>
c00257a5:	31 c0                	xor    eax,eax
c00257a7:	89 c2                	mov    edx,eax
c00257a9:	c1 ea 08             	shr    edx,0x8
c00257ac:	a8 7f                	test   al,0x7f
c00257ae:	0f 95 c1             	setne  cl
c00257b1:	09 d1                	or     ecx,edx
c00257b3:	83 e1 01             	and    ecx,0x1
c00257b6:	c1 e8 07             	shr    eax,0x7
c00257b9:	21 c8                	and    eax,ecx
c00257bb:	c1 e6 17             	shl    esi,0x17
c00257be:	09 d6                	or     esi,edx
c00257c0:	8d 3c 30             	lea    edi,[eax+esi*1]
c00257c3:	eb 0a                	jmp    c00257cf <__addsf3+0x2f9>
c00257c5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00257c8:	eb 05                	jmp    c00257cf <__addsf3+0x2f9>
c00257ca:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c00257cf:	89 f8                	mov    eax,edi
c00257d1:	5a                   	pop    edx
c00257d2:	59                   	pop    ecx
c00257d3:	5b                   	pop    ebx
c00257d4:	5e                   	pop    esi
c00257d5:	5f                   	pop    edi
c00257d6:	5d                   	pop    ebp
c00257d7:	c3                   	ret    

c00257d8 <__subsf3>:
c00257d8:	55                   	push   ebp
c00257d9:	89 e5                	mov    ebp,esp
c00257db:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00257de:	05 00 00 00 80       	add    eax,0x80000000
c00257e3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00257e6:	5d                   	pop    ebp
c00257e7:	e9 ea fc ff ff       	jmp    c00254d6 <__addsf3>

c00257ec <__negsf2>:
c00257ec:	55                   	push   ebp
c00257ed:	89 e5                	mov    ebp,esp
c00257ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257f2:	05 00 00 00 80       	add    eax,0x80000000
c00257f7:	5d                   	pop    ebp
c00257f8:	c3                   	ret    

c00257f9 <__mulsf3>:
c00257f9:	55                   	push   ebp
c00257fa:	89 e5                	mov    ebp,esp
c00257fc:	57                   	push   edi
c00257fd:	56                   	push   esi
c00257fe:	53                   	push   ebx
c00257ff:	83 ec 1c             	sub    esp,0x1c
c0025802:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0025805:	89 f0                	mov    eax,esi
c0025807:	89 f1                	mov    ecx,esi
c0025809:	c1 f9 17             	sar    ecx,0x17
c002580c:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c002580f:	c1 e0 08             	shl    eax,0x8
c0025812:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0025817:	89 c1                	mov    ecx,eax
c0025819:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002581c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002581f:	89 c7                	mov    edi,eax
c0025821:	c1 ff 17             	sar    edi,0x17
c0025824:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025828:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002582b:	89 f8                	mov    eax,edi
c002582d:	0f b6 c0             	movzx  eax,al
c0025830:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0025833:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0025837:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002583a:	42                   	inc    edx
c002583b:	80 e2 fe             	and    dl,0xfe
c002583e:	75 7b                	jne    c00258bb <__mulsf3+0xc2>
c0025840:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0025844:	74 54                	je     c002589a <__mulsf3+0xa1>
c0025846:	85 c9                	test   ecx,ecx
c0025848:	0f 85 64 01 00 00    	jne    c00259b2 <__mulsf3+0x1b9>
c002584e:	8d 57 01             	lea    edx,[edi+0x1]
c0025851:	80 e2 fe             	and    dl,0xfe
c0025854:	75 1f                	jne    c0025875 <__mulsf3+0x7c>
c0025856:	85 c0                	test   eax,eax
c0025858:	b8 00 00 00 00       	mov    eax,0x0
c002585d:	74 29                	je     c0025888 <__mulsf3+0x8f>
c002585f:	53                   	push   ebx
c0025860:	53                   	push   ebx
c0025861:	50                   	push   eax
c0025862:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025865:	e8 96 05 00 00       	call   c0025e00 <__nesf2>
c002586a:	83 c4 10             	add    esp,0x10
c002586d:	85 c0                	test   eax,eax
c002586f:	0f 85 3a 01 00 00    	jne    c00259af <__mulsf3+0x1b6>
c0025875:	85 ff                	test   edi,edi
c0025877:	0f 89 35 01 00 00    	jns    c00259b2 <__mulsf3+0x1b9>
c002587d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0025883:	e9 2a 01 00 00       	jmp    c00259b2 <__mulsf3+0x1b9>
c0025888:	51                   	push   ecx
c0025889:	51                   	push   ecx
c002588a:	50                   	push   eax
c002588b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002588e:	e8 6d 05 00 00       	call   c0025e00 <__nesf2>
c0025893:	83 c4 10             	add    esp,0x10
c0025896:	85 c0                	test   eax,eax
c0025898:	eb 15                	jmp    c00258af <__mulsf3+0xb6>
c002589a:	85 c9                	test   ecx,ecx
c002589c:	74 0b                	je     c00258a9 <__mulsf3+0xb0>
c002589e:	8d 53 ff             	lea    edx,[ebx-0x1]
c00258a1:	01 c9                	add    ecx,ecx
c00258a3:	78 16                	js     c00258bb <__mulsf3+0xc2>
c00258a5:	89 d3                	mov    ebx,edx
c00258a7:	eb f5                	jmp    c002589e <__mulsf3+0xa5>
c00258a9:	89 f8                	mov    eax,edi
c00258ab:	f7 d0                	not    eax
c00258ad:	84 c0                	test   al,al
c00258af:	75 c4                	jne    c0025875 <__mulsf3+0x7c>
c00258b1:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c00258b6:	e9 f7 00 00 00       	jmp    c00259b2 <__mulsf3+0x1b9>
c00258bb:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00258be:	c1 e6 08             	shl    esi,0x8
c00258c1:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c00258c7:	8d 57 01             	lea    edx,[edi+0x1]
c00258ca:	80 e2 fe             	and    dl,0xfe
c00258cd:	75 63                	jne    c0025932 <__mulsf3+0x139>
c00258cf:	85 c0                	test   eax,eax
c00258d1:	74 2f                	je     c0025902 <__mulsf3+0x109>
c00258d3:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00258d7:	0f 89 d2 00 00 00    	jns    c00259af <__mulsf3+0x1b6>
c00258dd:	52                   	push   edx
c00258de:	52                   	push   edx
c00258df:	6a 00                	push   0x0
c00258e1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00258e4:	e8 dc 04 00 00       	call   c0025dc5 <__eqsf2>
c00258e9:	83 c4 10             	add    esp,0x10
c00258ec:	85 c0                	test   eax,eax
c00258ee:	0f 85 bb 00 00 00    	jne    c00259af <__mulsf3+0x1b6>
c00258f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00258f7:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c00258fd:	e9 b0 00 00 00       	jmp    c00259b2 <__mulsf3+0x1b9>
c0025902:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0025905:	50                   	push   eax
c0025906:	50                   	push   eax
c0025907:	6a 00                	push   0x0
c0025909:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002590c:	e8 b4 04 00 00       	call   c0025dc5 <__eqsf2>
c0025911:	83 c4 10             	add    esp,0x10
c0025914:	85 c0                	test   eax,eax
c0025916:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0025919:	75 0c                	jne    c0025927 <__mulsf3+0x12e>
c002591b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c002591f:	0f 89 8a 00 00 00    	jns    c00259af <__mulsf3+0x1b6>
c0025925:	eb cd                	jmp    c00258f4 <__mulsf3+0xfb>
c0025927:	8d 43 ff             	lea    eax,[ebx-0x1]
c002592a:	01 f6                	add    esi,esi
c002592c:	78 04                	js     c0025932 <__mulsf3+0x139>
c002592e:	89 c3                	mov    ebx,eax
c0025930:	eb f5                	jmp    c0025927 <__mulsf3+0x12e>
c0025932:	89 c8                	mov    eax,ecx
c0025934:	0d 00 00 00 80       	or     eax,0x80000000
c0025939:	81 ce 00 00 00 80    	or     esi,0x80000000
c002593f:	f7 e6                	mul    esi
c0025941:	85 c0                	test   eax,eax
c0025943:	0f 95 c0             	setne  al
c0025946:	0f b6 c0             	movzx  eax,al
c0025949:	09 c2                	or     edx,eax
c002594b:	78 03                	js     c0025950 <__mulsf3+0x157>
c002594d:	01 d2                	add    edx,edx
c002594f:	4b                   	dec    ebx
c0025950:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0025956:	7f 22                	jg     c002597a <__mulsf3+0x181>
c0025958:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002595e:	85 db                	test   ebx,ebx
c0025960:	7f 23                	jg     c0025985 <__mulsf3+0x18c>
c0025962:	83 fb e9             	cmp    ebx,0xffffffe9
c0025965:	7c 1a                	jl     c0025981 <__mulsf3+0x188>
c0025967:	81 ca 00 00 00 80    	or     edx,0x80000000
c002596d:	b9 01 00 00 00       	mov    ecx,0x1
c0025972:	29 d9                	sub    ecx,ebx
c0025974:	d3 ea                	shr    edx,cl
c0025976:	31 db                	xor    ebx,ebx
c0025978:	eb 0b                	jmp    c0025985 <__mulsf3+0x18c>
c002597a:	bb ff 00 00 00       	mov    ebx,0xff
c002597f:	eb 02                	jmp    c0025983 <__mulsf3+0x18a>
c0025981:	31 db                	xor    ebx,ebx
c0025983:	31 d2                	xor    edx,edx
c0025985:	89 d0                	mov    eax,edx
c0025987:	c1 e8 08             	shr    eax,0x8
c002598a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c002598d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0025993:	09 fb                	or     ebx,edi
c0025995:	c1 e3 17             	shl    ebx,0x17
c0025998:	09 c3                	or     ebx,eax
c002599a:	f6 c2 7f             	test   dl,0x7f
c002599d:	0f 95 c1             	setne  cl
c00259a0:	09 c8                	or     eax,ecx
c00259a2:	83 e0 01             	and    eax,0x1
c00259a5:	c1 ea 07             	shr    edx,0x7
c00259a8:	21 c2                	and    edx,eax
c00259aa:	8d 34 13             	lea    esi,[ebx+edx*1]
c00259ad:	eb 03                	jmp    c00259b2 <__mulsf3+0x1b9>
c00259af:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00259b2:	89 f0                	mov    eax,esi
c00259b4:	8d 65 f4             	lea    esp,[ebp-0xc]
c00259b7:	5b                   	pop    ebx
c00259b8:	5e                   	pop    esi
c00259b9:	5f                   	pop    edi
c00259ba:	5d                   	pop    ebp
c00259bb:	c3                   	ret    

c00259bc <__divsf3>:
c00259bc:	55                   	push   ebp
c00259bd:	89 e5                	mov    ebp,esp
c00259bf:	57                   	push   edi
c00259c0:	56                   	push   esi
c00259c1:	53                   	push   ebx
c00259c2:	83 ec 1c             	sub    esp,0x1c
c00259c5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00259c8:	89 d8                	mov    eax,ebx
c00259ca:	89 d9                	mov    ecx,ebx
c00259cc:	c1 f9 17             	sar    ecx,0x17
c00259cf:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00259d2:	c1 e0 08             	shl    eax,0x8
c00259d5:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00259da:	89 c1                	mov    ecx,eax
c00259dc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00259df:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00259e2:	89 c7                	mov    edi,eax
c00259e4:	c1 ff 17             	sar    edi,0x17
c00259e7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00259eb:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00259ee:	89 f8                	mov    eax,edi
c00259f0:	0f b6 c0             	movzx  eax,al
c00259f3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00259f6:	29 c6                	sub    esi,eax
c00259f8:	83 c6 7f             	add    esi,0x7f
c00259fb:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00259fe:	42                   	inc    edx
c00259ff:	80 e2 fe             	and    dl,0xfe
c0025a02:	0f 85 9c 00 00 00    	jne    c0025aa4 <__divsf3+0xe8>
c0025a08:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0025a0c:	74 33                	je     c0025a41 <__divsf3+0x85>
c0025a0e:	85 c9                	test   ecx,ecx
c0025a10:	0f 85 c7 01 00 00    	jne    c0025bdd <__divsf3+0x221>
c0025a16:	8d 57 01             	lea    edx,[edi+0x1]
c0025a19:	80 e2 fe             	and    dl,0xfe
c0025a1c:	75 2f                	jne    c0025a4d <__divsf3+0x91>
c0025a1e:	85 c0                	test   eax,eax
c0025a20:	74 2b                	je     c0025a4d <__divsf3+0x91>
c0025a22:	51                   	push   ecx
c0025a23:	51                   	push   ecx
c0025a24:	6a 00                	push   0x0
c0025a26:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025a29:	e8 d2 03 00 00       	call   c0025e00 <__nesf2>
c0025a2e:	83 c4 10             	add    esp,0x10
c0025a31:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0025a34:	85 c0                	test   eax,eax
c0025a36:	0f 85 a1 01 00 00    	jne    c0025bdd <__divsf3+0x221>
c0025a3c:	e9 92 01 00 00       	jmp    c0025bd3 <__divsf3+0x217>
c0025a41:	85 c9                	test   ecx,ecx
c0025a43:	75 1b                	jne    c0025a60 <__divsf3+0xa4>
c0025a45:	8d 57 01             	lea    edx,[edi+0x1]
c0025a48:	80 e2 fe             	and    dl,0xfe
c0025a4b:	74 1e                	je     c0025a6b <__divsf3+0xaf>
c0025a4d:	85 ff                	test   edi,edi
c0025a4f:	0f 89 88 01 00 00    	jns    c0025bdd <__divsf3+0x221>
c0025a55:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0025a5b:	e9 7d 01 00 00       	jmp    c0025bdd <__divsf3+0x221>
c0025a60:	8d 56 ff             	lea    edx,[esi-0x1]
c0025a63:	01 c9                	add    ecx,ecx
c0025a65:	78 3d                	js     c0025aa4 <__divsf3+0xe8>
c0025a67:	89 d6                	mov    esi,edx
c0025a69:	eb f5                	jmp    c0025a60 <__divsf3+0xa4>
c0025a6b:	85 c0                	test   eax,eax
c0025a6d:	b8 00 00 00 00       	mov    eax,0x0
c0025a72:	74 18                	je     c0025a8c <__divsf3+0xd0>
c0025a74:	52                   	push   edx
c0025a75:	52                   	push   edx
c0025a76:	50                   	push   eax
c0025a77:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025a7a:	e8 81 03 00 00       	call   c0025e00 <__nesf2>
c0025a7f:	83 c4 10             	add    esp,0x10
c0025a82:	85 c0                	test   eax,eax
c0025a84:	0f 85 50 01 00 00    	jne    c0025bda <__divsf3+0x21e>
c0025a8a:	eb c1                	jmp    c0025a4d <__divsf3+0x91>
c0025a8c:	56                   	push   esi
c0025a8d:	56                   	push   esi
c0025a8e:	50                   	push   eax
c0025a8f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025a92:	e8 69 03 00 00       	call   c0025e00 <__nesf2>
c0025a97:	83 c4 10             	add    esp,0x10
c0025a9a:	85 c0                	test   eax,eax
c0025a9c:	0f 84 31 01 00 00    	je     c0025bd3 <__divsf3+0x217>
c0025aa2:	eb a9                	jmp    c0025a4d <__divsf3+0x91>
c0025aa4:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0025aa7:	c1 e3 08             	shl    ebx,0x8
c0025aaa:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0025ab0:	8d 57 01             	lea    edx,[edi+0x1]
c0025ab3:	80 e2 fe             	and    dl,0xfe
c0025ab6:	75 71                	jne    c0025b29 <__divsf3+0x16d>
c0025ab8:	85 c0                	test   eax,eax
c0025aba:	ba 00 00 00 00       	mov    edx,0x0
c0025abf:	74 2f                	je     c0025af0 <__divsf3+0x134>
c0025ac1:	51                   	push   ecx
c0025ac2:	51                   	push   ecx
c0025ac3:	52                   	push   edx
c0025ac4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025ac7:	e8 f9 02 00 00       	call   c0025dc5 <__eqsf2>
c0025acc:	83 c4 10             	add    esp,0x10
c0025acf:	85 c0                	test   eax,eax
c0025ad1:	0f 85 03 01 00 00    	jne    c0025bda <__divsf3+0x21e>
c0025ad7:	31 d2                	xor    edx,edx
c0025ad9:	89 d3                	mov    ebx,edx
c0025adb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025ade:	31 f8                	xor    eax,edi
c0025ae0:	0f 89 f7 00 00 00    	jns    c0025bdd <__divsf3+0x221>
c0025ae6:	bb 00 00 00 80       	mov    ebx,0x80000000
c0025aeb:	e9 ed 00 00 00       	jmp    c0025bdd <__divsf3+0x221>
c0025af0:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0025af3:	50                   	push   eax
c0025af4:	50                   	push   eax
c0025af5:	52                   	push   edx
c0025af6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025af9:	e8 c7 02 00 00       	call   c0025dc5 <__eqsf2>
c0025afe:	83 c4 10             	add    esp,0x10
c0025b01:	85 c0                	test   eax,eax
c0025b03:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0025b06:	75 16                	jne    c0025b1e <__divsf3+0x162>
c0025b08:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0025b0b:	31 fb                	xor    ebx,edi
c0025b0d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0025b13:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0025b19:	e9 bf 00 00 00       	jmp    c0025bdd <__divsf3+0x221>
c0025b1e:	8d 46 01             	lea    eax,[esi+0x1]
c0025b21:	01 db                	add    ebx,ebx
c0025b23:	78 04                	js     c0025b29 <__divsf3+0x16d>
c0025b25:	89 c6                	mov    esi,eax
c0025b27:	eb f5                	jmp    c0025b1e <__divsf3+0x162>
c0025b29:	89 c8                	mov    eax,ecx
c0025b2b:	0d 00 00 00 80       	or     eax,0x80000000
c0025b30:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0025b36:	31 d2                	xor    edx,edx
c0025b38:	39 d8                	cmp    eax,ebx
c0025b3a:	72 07                	jb     c0025b43 <__divsf3+0x187>
c0025b3c:	29 d8                	sub    eax,ebx
c0025b3e:	ba 01 00 00 00       	mov    edx,0x1
c0025b43:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0025b4a:	01 d2                	add    edx,edx
c0025b4c:	89 c1                	mov    ecx,eax
c0025b4e:	01 c0                	add    eax,eax
c0025b50:	85 c9                	test   ecx,ecx
c0025b52:	78 04                	js     c0025b58 <__divsf3+0x19c>
c0025b54:	39 c3                	cmp    ebx,eax
c0025b56:	77 05                	ja     c0025b5d <__divsf3+0x1a1>
c0025b58:	29 d8                	sub    eax,ebx
c0025b5a:	83 ca 01             	or     edx,0x1
c0025b5d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0025b60:	75 e8                	jne    c0025b4a <__divsf3+0x18e>
c0025b62:	85 c0                	test   eax,eax
c0025b64:	0f 95 c0             	setne  al
c0025b67:	0f b6 c0             	movzx  eax,al
c0025b6a:	c1 e2 06             	shl    edx,0x6
c0025b6d:	09 c2                	or     edx,eax
c0025b6f:	78 03                	js     c0025b74 <__divsf3+0x1b8>
c0025b71:	01 d2                	add    edx,edx
c0025b73:	4e                   	dec    esi
c0025b74:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0025b7a:	7f 22                	jg     c0025b9e <__divsf3+0x1e2>
c0025b7c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0025b82:	85 f6                	test   esi,esi
c0025b84:	7f 23                	jg     c0025ba9 <__divsf3+0x1ed>
c0025b86:	83 fe e9             	cmp    esi,0xffffffe9
c0025b89:	7c 1a                	jl     c0025ba5 <__divsf3+0x1e9>
c0025b8b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025b91:	b9 01 00 00 00       	mov    ecx,0x1
c0025b96:	29 f1                	sub    ecx,esi
c0025b98:	d3 ea                	shr    edx,cl
c0025b9a:	31 f6                	xor    esi,esi
c0025b9c:	eb 0b                	jmp    c0025ba9 <__divsf3+0x1ed>
c0025b9e:	be ff 00 00 00       	mov    esi,0xff
c0025ba3:	eb 02                	jmp    c0025ba7 <__divsf3+0x1eb>
c0025ba5:	31 f6                	xor    esi,esi
c0025ba7:	31 d2                	xor    edx,edx
c0025ba9:	89 d0                	mov    eax,edx
c0025bab:	c1 e8 08             	shr    eax,0x8
c0025bae:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0025bb1:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0025bb7:	09 fe                	or     esi,edi
c0025bb9:	c1 e6 17             	shl    esi,0x17
c0025bbc:	09 c6                	or     esi,eax
c0025bbe:	f6 c2 7f             	test   dl,0x7f
c0025bc1:	0f 95 c1             	setne  cl
c0025bc4:	09 c8                	or     eax,ecx
c0025bc6:	83 e0 01             	and    eax,0x1
c0025bc9:	c1 ea 07             	shr    edx,0x7
c0025bcc:	21 c2                	and    edx,eax
c0025bce:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0025bd1:	eb 0a                	jmp    c0025bdd <__divsf3+0x221>
c0025bd3:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0025bd8:	eb 03                	jmp    c0025bdd <__divsf3+0x221>
c0025bda:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0025bdd:	89 d8                	mov    eax,ebx
c0025bdf:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025be2:	5b                   	pop    ebx
c0025be3:	5e                   	pop    esi
c0025be4:	5f                   	pop    edi
c0025be5:	5d                   	pop    ebp
c0025be6:	c3                   	ret    

c0025be7 <__floatsisf>:
c0025be7:	55                   	push   ebp
c0025be8:	89 e5                	mov    ebp,esp
c0025bea:	53                   	push   ebx
c0025beb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025bee:	85 d2                	test   edx,edx
c0025bf0:	7e 2b                	jle    c0025c1d <__floatsisf+0x36>
c0025bf2:	0f bd ca             	bsr    ecx,edx
c0025bf5:	83 f1 1f             	xor    ecx,0x1f
c0025bf8:	d3 e2                	shl    edx,cl
c0025bfa:	89 d0                	mov    eax,edx
c0025bfc:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025c01:	89 c3                	mov    ebx,eax
c0025c03:	c1 eb 08             	shr    ebx,0x8
c0025c06:	80 e2 7f             	and    dl,0x7f
c0025c09:	0f 95 c2             	setne  dl
c0025c0c:	09 da                	or     edx,ebx
c0025c0e:	83 e2 01             	and    edx,0x1
c0025c11:	c1 e8 07             	shr    eax,0x7
c0025c14:	21 c2                	and    edx,eax
c0025c16:	b8 9e 00 00 00       	mov    eax,0x9e
c0025c1b:	eb 32                	jmp    c0025c4f <__floatsisf+0x68>
c0025c1d:	b8 00 00 00 00       	mov    eax,0x0
c0025c22:	74 34                	je     c0025c58 <__floatsisf+0x71>
c0025c24:	f7 da                	neg    edx
c0025c26:	0f bd ca             	bsr    ecx,edx
c0025c29:	83 f1 1f             	xor    ecx,0x1f
c0025c2c:	d3 e2                	shl    edx,cl
c0025c2e:	89 d0                	mov    eax,edx
c0025c30:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025c35:	89 c3                	mov    ebx,eax
c0025c37:	c1 eb 08             	shr    ebx,0x8
c0025c3a:	80 e2 7f             	and    dl,0x7f
c0025c3d:	0f 95 c2             	setne  dl
c0025c40:	09 da                	or     edx,ebx
c0025c42:	83 e2 01             	and    edx,0x1
c0025c45:	c1 e8 07             	shr    eax,0x7
c0025c48:	21 c2                	and    edx,eax
c0025c4a:	b8 9e 01 00 00       	mov    eax,0x19e
c0025c4f:	29 c8                	sub    eax,ecx
c0025c51:	c1 e0 17             	shl    eax,0x17
c0025c54:	09 d8                	or     eax,ebx
c0025c56:	01 d0                	add    eax,edx
c0025c58:	5b                   	pop    ebx
c0025c59:	5d                   	pop    ebp
c0025c5a:	c3                   	ret    

c0025c5b <__floatunsisf>:
c0025c5b:	55                   	push   ebp
c0025c5c:	89 e5                	mov    ebp,esp
c0025c5e:	53                   	push   ebx
c0025c5f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025c62:	31 c0                	xor    eax,eax
c0025c64:	85 d2                	test   edx,edx
c0025c66:	74 32                	je     c0025c9a <__floatunsisf+0x3f>
c0025c68:	0f bd ca             	bsr    ecx,edx
c0025c6b:	83 f1 1f             	xor    ecx,0x1f
c0025c6e:	d3 e2                	shl    edx,cl
c0025c70:	89 d0                	mov    eax,edx
c0025c72:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025c77:	89 c3                	mov    ebx,eax
c0025c79:	c1 eb 08             	shr    ebx,0x8
c0025c7c:	80 e2 7f             	and    dl,0x7f
c0025c7f:	0f 95 c2             	setne  dl
c0025c82:	09 da                	or     edx,ebx
c0025c84:	83 e2 01             	and    edx,0x1
c0025c87:	c1 e8 07             	shr    eax,0x7
c0025c8a:	21 c2                	and    edx,eax
c0025c8c:	b8 9e 00 00 00       	mov    eax,0x9e
c0025c91:	29 c8                	sub    eax,ecx
c0025c93:	c1 e0 17             	shl    eax,0x17
c0025c96:	09 d8                	or     eax,ebx
c0025c98:	01 d0                	add    eax,edx
c0025c9a:	5b                   	pop    ebx
c0025c9b:	5d                   	pop    ebp
c0025c9c:	c3                   	ret    

c0025c9d <__fixsfsi>:
c0025c9d:	55                   	push   ebp
c0025c9e:	89 e5                	mov    ebp,esp
c0025ca0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025ca3:	89 d1                	mov    ecx,edx
c0025ca5:	c1 e1 08             	shl    ecx,0x8
c0025ca8:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0025cae:	c1 fa 17             	sar    edx,0x17
c0025cb1:	78 1c                	js     c0025ccf <__fixsfsi+0x32>
c0025cb3:	83 ea 7f             	sub    edx,0x7f
c0025cb6:	31 c0                	xor    eax,eax
c0025cb8:	83 fa 1e             	cmp    edx,0x1e
c0025cbb:	77 40                	ja     c0025cfd <__fixsfsi+0x60>
c0025cbd:	89 c8                	mov    eax,ecx
c0025cbf:	0d 00 00 00 80       	or     eax,0x80000000
c0025cc4:	b9 1f 00 00 00       	mov    ecx,0x1f
c0025cc9:	29 d1                	sub    ecx,edx
c0025ccb:	d3 e8                	shr    eax,cl
c0025ccd:	eb 2e                	jmp    c0025cfd <__fixsfsi+0x60>
c0025ccf:	31 c0                	xor    eax,eax
c0025cd1:	81 c2 81 00 00 00    	add    edx,0x81
c0025cd7:	78 24                	js     c0025cfd <__fixsfsi+0x60>
c0025cd9:	83 fa 1e             	cmp    edx,0x1e
c0025cdc:	7e 09                	jle    c0025ce7 <__fixsfsi+0x4a>
c0025cde:	83 fa 1f             	cmp    edx,0x1f
c0025ce1:	75 18                	jne    c0025cfb <__fixsfsi+0x5e>
c0025ce3:	85 c9                	test   ecx,ecx
c0025ce5:	75 14                	jne    c0025cfb <__fixsfsi+0x5e>
c0025ce7:	89 c8                	mov    eax,ecx
c0025ce9:	0d 00 00 00 80       	or     eax,0x80000000
c0025cee:	b9 1f 00 00 00       	mov    ecx,0x1f
c0025cf3:	29 d1                	sub    ecx,edx
c0025cf5:	d3 e8                	shr    eax,cl
c0025cf7:	f7 d8                	neg    eax
c0025cf9:	eb 02                	jmp    c0025cfd <__fixsfsi+0x60>
c0025cfb:	31 c0                	xor    eax,eax
c0025cfd:	5d                   	pop    ebp
c0025cfe:	c3                   	ret    

c0025cff <__fixunssfsi>:
c0025cff:	55                   	push   ebp
c0025d00:	89 e5                	mov    ebp,esp
c0025d02:	53                   	push   ebx
c0025d03:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025d06:	89 d3                	mov    ebx,edx
c0025d08:	c1 fb 17             	sar    ebx,0x17
c0025d0b:	83 eb 7f             	sub    ebx,0x7f
c0025d0e:	31 c0                	xor    eax,eax
c0025d10:	83 fb 1f             	cmp    ebx,0x1f
c0025d13:	77 18                	ja     c0025d2d <__fixunssfsi+0x2e>
c0025d15:	89 d0                	mov    eax,edx
c0025d17:	c1 e0 08             	shl    eax,0x8
c0025d1a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0025d1f:	0d 00 00 00 80       	or     eax,0x80000000
c0025d24:	b9 1f 00 00 00       	mov    ecx,0x1f
c0025d29:	29 d9                	sub    ecx,ebx
c0025d2b:	d3 e8                	shr    eax,cl
c0025d2d:	5b                   	pop    ebx
c0025d2e:	5d                   	pop    ebp
c0025d2f:	c3                   	ret    

c0025d30 <__cmpsf2>:
c0025d30:	55                   	push   ebp
c0025d31:	89 e5                	mov    ebp,esp
c0025d33:	57                   	push   edi
c0025d34:	56                   	push   esi
c0025d35:	53                   	push   ebx
c0025d36:	83 ec 24             	sub    esp,0x24
c0025d39:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025d3c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d3f:	e8 4f 10 00 00       	call   c0026d93 <__truncdfsf2>
c0025d44:	5a                   	pop    edx
c0025d45:	59                   	pop    ecx
c0025d46:	89 c3                	mov    ebx,eax
c0025d48:	c1 e8 17             	shr    eax,0x17
c0025d4b:	0f b6 f0             	movzx  esi,al
c0025d4e:	89 d8                	mov    eax,ebx
c0025d50:	c1 e8 1f             	shr    eax,0x1f
c0025d53:	31 c6                	xor    esi,eax
c0025d55:	c1 e3 08             	shl    ebx,0x8
c0025d58:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0025d5b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0025d5e:	e8 30 10 00 00       	call   c0026d93 <__truncdfsf2>
c0025d63:	83 c4 10             	add    esp,0x10
c0025d66:	89 c1                	mov    ecx,eax
c0025d68:	c1 e9 17             	shr    ecx,0x17
c0025d6b:	0f b6 c9             	movzx  ecx,cl
c0025d6e:	89 c7                	mov    edi,eax
c0025d70:	c1 ef 1f             	shr    edi,0x1f
c0025d73:	89 ca                	mov    edx,ecx
c0025d75:	31 fa                	xor    edx,edi
c0025d77:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0025d7a:	c1 e0 08             	shl    eax,0x8
c0025d7d:	89 c2                	mov    edx,eax
c0025d7f:	89 d8                	mov    eax,ebx
c0025d81:	09 d0                	or     eax,edx
c0025d83:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0025d88:	09 f0                	or     eax,esi
c0025d8a:	75 08                	jne    c0025d94 <__cmpsf2+0x64>
c0025d8c:	31 c0                	xor    eax,eax
c0025d8e:	39 f9                	cmp    ecx,edi
c0025d90:	75 0c                	jne    c0025d9e <__cmpsf2+0x6e>
c0025d92:	eb 29                	jmp    c0025dbd <__cmpsf2+0x8d>
c0025d94:	b8 01 00 00 00       	mov    eax,0x1
c0025d99:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0025d9c:	7f 1f                	jg     c0025dbd <__cmpsf2+0x8d>
c0025d9e:	83 c8 ff             	or     eax,0xffffffff
c0025da1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0025da4:	7c 17                	jl     c0025dbd <__cmpsf2+0x8d>
c0025da6:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0025dac:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0025db2:	b8 01 00 00 00       	mov    eax,0x1
c0025db7:	39 d3                	cmp    ebx,edx
c0025db9:	77 02                	ja     c0025dbd <__cmpsf2+0x8d>
c0025dbb:	19 c0                	sbb    eax,eax
c0025dbd:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025dc0:	5b                   	pop    ebx
c0025dc1:	5e                   	pop    esi
c0025dc2:	5f                   	pop    edi
c0025dc3:	5d                   	pop    ebp
c0025dc4:	c3                   	ret    

c0025dc5 <__eqsf2>:
c0025dc5:	55                   	push   ebp
c0025dc6:	89 e5                	mov    ebp,esp
c0025dc8:	83 ec 24             	sub    esp,0x24
c0025dcb:	6a 01                	push   0x1
c0025dcd:	83 ec 0c             	sub    esp,0xc
c0025dd0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025dd3:	e8 df 10 00 00       	call   c0026eb7 <__extendsfdf2>
c0025dd8:	83 c4 10             	add    esp,0x10
c0025ddb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025dde:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025de1:	52                   	push   edx
c0025de2:	50                   	push   eax
c0025de3:	50                   	push   eax
c0025de4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025de7:	e8 cb 10 00 00       	call   c0026eb7 <__extendsfdf2>
c0025dec:	59                   	pop    ecx
c0025ded:	59                   	pop    ecx
c0025dee:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025df1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025df4:	52                   	push   edx
c0025df5:	50                   	push   eax
c0025df6:	e8 35 ff ff ff       	call   c0025d30 <__cmpsf2>
c0025dfb:	83 c4 20             	add    esp,0x20
c0025dfe:	c9                   	leave  
c0025dff:	c3                   	ret    

c0025e00 <__nesf2>:
c0025e00:	eb c3                	jmp    c0025dc5 <__eqsf2>

c0025e02 <__gtsf2>:
c0025e02:	55                   	push   ebp
c0025e03:	89 e5                	mov    ebp,esp
c0025e05:	83 ec 24             	sub    esp,0x24
c0025e08:	6a ff                	push   0xffffffff
c0025e0a:	83 ec 0c             	sub    esp,0xc
c0025e0d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025e10:	e8 a2 10 00 00       	call   c0026eb7 <__extendsfdf2>
c0025e15:	83 c4 10             	add    esp,0x10
c0025e18:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025e1b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025e1e:	52                   	push   edx
c0025e1f:	50                   	push   eax
c0025e20:	50                   	push   eax
c0025e21:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e24:	e8 8e 10 00 00       	call   c0026eb7 <__extendsfdf2>
c0025e29:	59                   	pop    ecx
c0025e2a:	59                   	pop    ecx
c0025e2b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025e2e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025e31:	52                   	push   edx
c0025e32:	50                   	push   eax
c0025e33:	e8 f8 fe ff ff       	call   c0025d30 <__cmpsf2>
c0025e38:	83 c4 20             	add    esp,0x20
c0025e3b:	c9                   	leave  
c0025e3c:	c3                   	ret    

c0025e3d <__gesf2>:
c0025e3d:	eb c3                	jmp    c0025e02 <__gtsf2>

c0025e3f <__ltsf2>:
c0025e3f:	eb 84                	jmp    c0025dc5 <__eqsf2>

c0025e41 <__lesf2>:
c0025e41:	eb 82                	jmp    c0025dc5 <__eqsf2>

c0025e43 <__adddf3>:
c0025e43:	55                   	push   ebp
c0025e44:	89 e5                	mov    ebp,esp
c0025e46:	57                   	push   edi
c0025e47:	56                   	push   esi
c0025e48:	53                   	push   ebx
c0025e49:	83 ec 24             	sub    esp,0x24
c0025e4c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0025e4f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025e52:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025e55:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025e58:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025e5b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025e5e:	89 c8                	mov    eax,ecx
c0025e60:	89 ce                	mov    esi,ecx
c0025e62:	c1 fe 14             	sar    esi,0x14
c0025e65:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0025e68:	89 fb                	mov    ebx,edi
c0025e6a:	89 fa                	mov    edx,edi
c0025e6c:	c1 e2 0b             	shl    edx,0xb
c0025e6f:	c1 e0 0b             	shl    eax,0xb
c0025e72:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0025e77:	c1 eb 15             	shr    ebx,0x15
c0025e7a:	09 d8                	or     eax,ebx
c0025e7c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0025e7f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0025e82:	c1 fe 14             	sar    esi,0x14
c0025e85:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0025e88:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0025e8b:	89 f3                	mov    ebx,esi
c0025e8d:	c1 e3 0b             	shl    ebx,0xb
c0025e90:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0025e93:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0025e96:	c1 e3 0b             	shl    ebx,0xb
c0025e99:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0025e9f:	c1 ee 15             	shr    esi,0x15
c0025ea2:	09 f3                	or     ebx,esi
c0025ea4:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0025ea7:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0025eaa:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0025ead:	0f 88 5f 02 00 00    	js     c0026112 <__adddf3+0x2cf>
c0025eb3:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0025eb6:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0025eb9:	85 db                	test   ebx,ebx
c0025ebb:	0f 8e c7 00 00 00    	jle    c0025f88 <__adddf3+0x145>
c0025ec1:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0025ec8:	75 1a                	jne    c0025ee4 <__adddf3+0xa1>
c0025eca:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0025ecd:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0025ed0:	0f 84 b2 05 00 00    	je     c0026488 <__adddf3+0x645>
c0025ed6:	4b                   	dec    ebx
c0025ed7:	75 23                	jne    c0025efc <__adddf3+0xb9>
c0025ed9:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0025edc:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0025edf:	e9 99 00 00 00       	jmp    c0025f7d <__adddf3+0x13a>
c0025ee4:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0025ee7:	f7 d6                	not    esi
c0025ee9:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0025eef:	0f 84 93 05 00 00    	je     c0026488 <__adddf3+0x645>
c0025ef5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0025efc:	83 fb 1f             	cmp    ebx,0x1f
c0025eff:	7e 42                	jle    c0025f43 <__adddf3+0x100>
c0025f01:	83 fb 3f             	cmp    ebx,0x3f
c0025f04:	0f 8f 7e 05 00 00    	jg     c0026488 <__adddf3+0x645>
c0025f0a:	83 e3 1f             	and    ebx,0x1f
c0025f0d:	89 d9                	mov    ecx,ebx
c0025f0f:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0025f12:	d3 ef                	shr    edi,cl
c0025f14:	31 db                	xor    ebx,ebx
c0025f16:	85 c9                	test   ecx,ecx
c0025f18:	74 15                	je     c0025f2f <__adddf3+0xec>
c0025f1a:	be 20 00 00 00       	mov    esi,0x20
c0025f1f:	29 ce                	sub    esi,ecx
c0025f21:	89 f1                	mov    ecx,esi
c0025f23:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0025f26:	d3 e6                	shl    esi,cl
c0025f28:	31 db                	xor    ebx,ebx
c0025f2a:	85 f6                	test   esi,esi
c0025f2c:	0f 95 c3             	setne  bl
c0025f2f:	31 c9                	xor    ecx,ecx
c0025f31:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0025f35:	0f 95 c1             	setne  cl
c0025f38:	09 cf                	or     edi,ecx
c0025f3a:	09 fb                	or     ebx,edi
c0025f3c:	01 da                	add    edx,ebx
c0025f3e:	83 d0 00             	adc    eax,0x0
c0025f41:	eb 3a                	jmp    c0025f7d <__adddf3+0x13a>
c0025f43:	bf 20 00 00 00       	mov    edi,0x20
c0025f48:	29 df                	sub    edi,ebx
c0025f4a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0025f4d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0025f50:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0025f53:	d3 e6                	shl    esi,cl
c0025f55:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0025f58:	88 d9                	mov    cl,bl
c0025f5a:	d3 ef                	shr    edi,cl
c0025f5c:	09 fe                	or     esi,edi
c0025f5e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0025f61:	88 d9                	mov    cl,bl
c0025f63:	d3 ef                	shr    edi,cl
c0025f65:	89 fb                	mov    ebx,edi
c0025f67:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0025f6a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0025f6d:	d3 e7                	shl    edi,cl
c0025f6f:	85 ff                	test   edi,edi
c0025f71:	0f 95 c1             	setne  cl
c0025f74:	0f b6 c9             	movzx  ecx,cl
c0025f77:	09 ce                	or     esi,ecx
c0025f79:	01 f2                	add    edx,esi
c0025f7b:	11 d8                	adc    eax,ebx
c0025f7d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0025f80:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0025f83:	e9 52 01 00 00       	jmp    c00260da <__adddf3+0x297>
c0025f88:	0f 84 d5 00 00 00    	je     c0026063 <__adddf3+0x220>
c0025f8e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0025f91:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0025f94:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0025f97:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0025f9a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0025fa1:	75 20                	jne    c0025fc3 <__adddf3+0x180>
c0025fa3:	89 d6                	mov    esi,edx
c0025fa5:	09 c6                	or     esi,eax
c0025fa7:	0f 84 db 04 00 00    	je     c0026488 <__adddf3+0x645>
c0025fad:	4b                   	dec    ebx
c0025fae:	75 29                	jne    c0025fd9 <__adddf3+0x196>
c0025fb0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0025fb3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0025fb6:	01 d1                	add    ecx,edx
c0025fb8:	11 c6                	adc    esi,eax
c0025fba:	89 f0                	mov    eax,esi
c0025fbc:	89 ca                	mov    edx,ecx
c0025fbe:	e9 17 01 00 00       	jmp    c00260da <__adddf3+0x297>
c0025fc3:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0025fc6:	f7 d6                	not    esi
c0025fc8:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0025fce:	0f 84 b4 04 00 00    	je     c0026488 <__adddf3+0x645>
c0025fd4:	0d 00 00 00 80       	or     eax,0x80000000
c0025fd9:	83 fb 1f             	cmp    ebx,0x1f
c0025fdc:	7e 48                	jle    c0026026 <__adddf3+0x1e3>
c0025fde:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0025fe1:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0025fe4:	83 fb 3f             	cmp    ebx,0x3f
c0025fe7:	0f 8f 9b 04 00 00    	jg     c0026488 <__adddf3+0x645>
c0025fed:	83 e3 1f             	and    ebx,0x1f
c0025ff0:	89 d9                	mov    ecx,ebx
c0025ff2:	89 c7                	mov    edi,eax
c0025ff4:	d3 ef                	shr    edi,cl
c0025ff6:	31 db                	xor    ebx,ebx
c0025ff8:	85 c9                	test   ecx,ecx
c0025ffa:	74 12                	je     c002600e <__adddf3+0x1cb>
c0025ffc:	be 20 00 00 00       	mov    esi,0x20
c0026001:	29 ce                	sub    esi,ecx
c0026003:	89 f1                	mov    ecx,esi
c0026005:	d3 e0                	shl    eax,cl
c0026007:	31 db                	xor    ebx,ebx
c0026009:	85 c0                	test   eax,eax
c002600b:	0f 95 c3             	setne  bl
c002600e:	31 c0                	xor    eax,eax
c0026010:	85 d2                	test   edx,edx
c0026012:	0f 95 c0             	setne  al
c0026015:	09 c7                	or     edi,eax
c0026017:	09 fb                	or     ebx,edi
c0026019:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002601c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002601f:	01 da                	add    edx,ebx
c0026021:	83 d6 00             	adc    esi,0x0
c0026024:	eb 39                	jmp    c002605f <__adddf3+0x21c>
c0026026:	be 20 00 00 00       	mov    esi,0x20
c002602b:	29 de                	sub    esi,ebx
c002602d:	89 c7                	mov    edi,eax
c002602f:	89 f1                	mov    ecx,esi
c0026031:	d3 e7                	shl    edi,cl
c0026033:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0026036:	89 d7                	mov    edi,edx
c0026038:	88 d9                	mov    cl,bl
c002603a:	d3 ef                	shr    edi,cl
c002603c:	89 f9                	mov    ecx,edi
c002603e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026041:	09 cf                	or     edi,ecx
c0026043:	88 d9                	mov    cl,bl
c0026045:	d3 e8                	shr    eax,cl
c0026047:	89 f1                	mov    ecx,esi
c0026049:	d3 e2                	shl    edx,cl
c002604b:	85 d2                	test   edx,edx
c002604d:	0f 95 c2             	setne  dl
c0026050:	0f b6 d2             	movzx  edx,dl
c0026053:	09 d7                	or     edi,edx
c0026055:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026058:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002605b:	01 fa                	add    edx,edi
c002605d:	11 c6                	adc    esi,eax
c002605f:	89 f0                	mov    eax,esi
c0026061:	eb 77                	jmp    c00260da <__adddf3+0x297>
c0026063:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026066:	46                   	inc    esi
c0026067:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002606a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0026070:	75 41                	jne    c00260b3 <__adddf3+0x270>
c0026072:	89 d3                	mov    ebx,edx
c0026074:	09 c3                	or     ebx,eax
c0026076:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002607d:	75 27                	jne    c00260a6 <__adddf3+0x263>
c002607f:	85 db                	test   ebx,ebx
c0026081:	0f 84 fb 03 00 00    	je     c0026482 <__adddf3+0x63f>
c0026087:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002608a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002608d:	0f 84 f5 03 00 00    	je     c0026488 <__adddf3+0x645>
c0026093:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0026096:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0026099:	85 c0                	test   eax,eax
c002609b:	0f 89 91 03 00 00    	jns    c0026432 <__adddf3+0x5ef>
c00260a1:	e9 85 03 00 00       	jmp    c002642b <__adddf3+0x5e8>
c00260a6:	85 db                	test   ebx,ebx
c00260a8:	0f 85 da 03 00 00    	jne    c0026488 <__adddf3+0x645>
c00260ae:	e9 cf 03 00 00       	jmp    c0026482 <__adddf3+0x63f>
c00260b3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00260b6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00260b9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00260bc:	f7 d1                	not    ecx
c00260be:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00260c4:	0f 84 70 03 00 00    	je     c002643a <__adddf3+0x5f7>
c00260ca:	d1 ea                	shr    edx,1
c00260cc:	89 c1                	mov    ecx,eax
c00260ce:	c1 e1 1f             	shl    ecx,0x1f
c00260d1:	09 ca                	or     edx,ecx
c00260d3:	d1 e8                	shr    eax,1
c00260d5:	e9 6f 03 00 00       	jmp    c0026449 <__adddf3+0x606>
c00260da:	85 c0                	test   eax,eax
c00260dc:	0f 89 67 03 00 00    	jns    c0026449 <__adddf3+0x606>
c00260e2:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00260e5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00260e8:	f7 d1                	not    ecx
c00260ea:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00260f0:	0f 84 44 03 00 00    	je     c002643a <__adddf3+0x5f7>
c00260f6:	89 d1                	mov    ecx,edx
c00260f8:	d1 e9                	shr    ecx,1
c00260fa:	83 e2 01             	and    edx,0x1
c00260fd:	09 ca                	or     edx,ecx
c00260ff:	89 c1                	mov    ecx,eax
c0026101:	c1 e1 1f             	shl    ecx,0x1f
c0026104:	09 ca                	or     edx,ecx
c0026106:	d1 e8                	shr    eax,1
c0026108:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002610d:	e9 37 03 00 00       	jmp    c0026449 <__adddf3+0x606>
c0026112:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026115:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002611b:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c002611e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026121:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026127:	29 de                	sub    esi,ebx
c0026129:	85 f6                	test   esi,esi
c002612b:	0f 8e bd 00 00 00    	jle    c00261ee <__adddf3+0x3ab>
c0026131:	85 db                	test   ebx,ebx
c0026133:	75 17                	jne    c002614c <__adddf3+0x309>
c0026135:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026138:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002613b:	0f 84 47 03 00 00    	je     c0026488 <__adddf3+0x645>
c0026141:	4e                   	dec    esi
c0026142:	75 20                	jne    c0026164 <__adddf3+0x321>
c0026144:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0026147:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002614a:	eb 5b                	jmp    c00261a7 <__adddf3+0x364>
c002614c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002614f:	f7 d3                	not    ebx
c0026151:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026157:	0f 84 2b 03 00 00    	je     c0026488 <__adddf3+0x645>
c002615d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0026164:	83 fe 1f             	cmp    esi,0x1f
c0026167:	7e 49                	jle    c00261b2 <__adddf3+0x36f>
c0026169:	83 fe 3f             	cmp    esi,0x3f
c002616c:	0f 8f 16 03 00 00    	jg     c0026488 <__adddf3+0x645>
c0026172:	83 e6 1f             	and    esi,0x1f
c0026175:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026178:	89 f1                	mov    ecx,esi
c002617a:	d3 ef                	shr    edi,cl
c002617c:	31 db                	xor    ebx,ebx
c002617e:	85 f6                	test   esi,esi
c0026180:	74 13                	je     c0026195 <__adddf3+0x352>
c0026182:	b9 20 00 00 00       	mov    ecx,0x20
c0026187:	29 f1                	sub    ecx,esi
c0026189:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002618c:	d3 e6                	shl    esi,cl
c002618e:	31 db                	xor    ebx,ebx
c0026190:	85 f6                	test   esi,esi
c0026192:	0f 95 c3             	setne  bl
c0026195:	31 c9                	xor    ecx,ecx
c0026197:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002619b:	0f 95 c1             	setne  cl
c002619e:	09 cf                	or     edi,ecx
c00261a0:	09 fb                	or     ebx,edi
c00261a2:	29 da                	sub    edx,ebx
c00261a4:	83 d8 00             	sbb    eax,0x0
c00261a7:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00261aa:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00261ad:	e9 aa 01 00 00       	jmp    c002635c <__adddf3+0x519>
c00261b2:	bf 20 00 00 00       	mov    edi,0x20
c00261b7:	29 f7                	sub    edi,esi
c00261b9:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00261bc:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00261bf:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00261c2:	d3 e3                	shl    ebx,cl
c00261c4:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00261c7:	89 f1                	mov    ecx,esi
c00261c9:	d3 ef                	shr    edi,cl
c00261cb:	09 fb                	or     ebx,edi
c00261cd:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00261d0:	89 f1                	mov    ecx,esi
c00261d2:	d3 ef                	shr    edi,cl
c00261d4:	89 fe                	mov    esi,edi
c00261d6:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00261d9:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00261dc:	d3 e7                	shl    edi,cl
c00261de:	85 ff                	test   edi,edi
c00261e0:	0f 95 c1             	setne  cl
c00261e3:	0f b6 c9             	movzx  ecx,cl
c00261e6:	09 cb                	or     ebx,ecx
c00261e8:	29 da                	sub    edx,ebx
c00261ea:	19 f0                	sbb    eax,esi
c00261ec:	eb b9                	jmp    c00261a7 <__adddf3+0x364>
c00261ee:	0f 84 cd 00 00 00    	je     c00262c1 <__adddf3+0x47e>
c00261f4:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00261f7:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00261fa:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00261fd:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0026201:	75 1b                	jne    c002621e <__adddf3+0x3db>
c0026203:	89 d6                	mov    esi,edx
c0026205:	09 c6                	or     esi,eax
c0026207:	0f 84 7b 02 00 00    	je     c0026488 <__adddf3+0x645>
c002620d:	4b                   	dec    ebx
c002620e:	75 24                	jne    c0026234 <__adddf3+0x3f1>
c0026210:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026213:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026216:	29 d1                	sub    ecx,edx
c0026218:	19 c6                	sbb    esi,eax
c002621a:	89 ca                	mov    edx,ecx
c002621c:	eb 61                	jmp    c002627f <__adddf3+0x43c>
c002621e:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0026221:	f7 d6                	not    esi
c0026223:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026229:	0f 84 59 02 00 00    	je     c0026488 <__adddf3+0x645>
c002622f:	0d 00 00 00 80       	or     eax,0x80000000
c0026234:	83 fb 1f             	cmp    ebx,0x1f
c0026237:	7e 4d                	jle    c0026286 <__adddf3+0x443>
c0026239:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002623c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002623f:	83 fb 3f             	cmp    ebx,0x3f
c0026242:	0f 8f 40 02 00 00    	jg     c0026488 <__adddf3+0x645>
c0026248:	83 e3 1f             	and    ebx,0x1f
c002624b:	89 d9                	mov    ecx,ebx
c002624d:	89 c7                	mov    edi,eax
c002624f:	d3 ef                	shr    edi,cl
c0026251:	31 db                	xor    ebx,ebx
c0026253:	85 c9                	test   ecx,ecx
c0026255:	74 12                	je     c0026269 <__adddf3+0x426>
c0026257:	be 20 00 00 00       	mov    esi,0x20
c002625c:	29 ce                	sub    esi,ecx
c002625e:	89 f1                	mov    ecx,esi
c0026260:	d3 e0                	shl    eax,cl
c0026262:	31 db                	xor    ebx,ebx
c0026264:	85 c0                	test   eax,eax
c0026266:	0f 95 c3             	setne  bl
c0026269:	31 c0                	xor    eax,eax
c002626b:	85 d2                	test   edx,edx
c002626d:	0f 95 c0             	setne  al
c0026270:	09 c7                	or     edi,eax
c0026272:	09 fb                	or     ebx,edi
c0026274:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026277:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002627a:	29 da                	sub    edx,ebx
c002627c:	83 de 00             	sbb    esi,0x0
c002627f:	89 f0                	mov    eax,esi
c0026281:	e9 d6 00 00 00       	jmp    c002635c <__adddf3+0x519>
c0026286:	be 20 00 00 00       	mov    esi,0x20
c002628b:	29 de                	sub    esi,ebx
c002628d:	89 c7                	mov    edi,eax
c002628f:	89 f1                	mov    ecx,esi
c0026291:	d3 e7                	shl    edi,cl
c0026293:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0026296:	89 d7                	mov    edi,edx
c0026298:	88 d9                	mov    cl,bl
c002629a:	d3 ef                	shr    edi,cl
c002629c:	89 f9                	mov    ecx,edi
c002629e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00262a1:	09 cf                	or     edi,ecx
c00262a3:	88 d9                	mov    cl,bl
c00262a5:	d3 e8                	shr    eax,cl
c00262a7:	89 f1                	mov    ecx,esi
c00262a9:	d3 e2                	shl    edx,cl
c00262ab:	85 d2                	test   edx,edx
c00262ad:	0f 95 c2             	setne  dl
c00262b0:	0f b6 d2             	movzx  edx,dl
c00262b3:	09 d7                	or     edi,edx
c00262b5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00262b8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00262bb:	29 fa                	sub    edx,edi
c00262bd:	19 c6                	sbb    esi,eax
c00262bf:	eb be                	jmp    c002627f <__adddf3+0x43c>
c00262c1:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00262c4:	8d 5e 01             	lea    ebx,[esi+0x1]
c00262c7:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c00262cd:	75 6a                	jne    c0026339 <__adddf3+0x4f6>
c00262cf:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00262d3:	75 58                	jne    c002632d <__adddf3+0x4ea>
c00262d5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00262d8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00262db:	89 d6                	mov    esi,edx
c00262dd:	09 c6                	or     esi,eax
c00262df:	75 17                	jne    c00262f8 <__adddf3+0x4b5>
c00262e1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00262e4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00262e7:	85 db                	test   ebx,ebx
c00262e9:	0f 85 99 01 00 00    	jne    c0026488 <__adddf3+0x645>
c00262ef:	31 ff                	xor    edi,edi
c00262f1:	31 c9                	xor    ecx,ecx
c00262f3:	e9 90 01 00 00       	jmp    c0026488 <__adddf3+0x645>
c00262f8:	85 db                	test   ebx,ebx
c00262fa:	0f 84 88 01 00 00    	je     c0026488 <__adddf3+0x645>
c0026300:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0026303:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0026306:	85 c0                	test   eax,eax
c0026308:	79 10                	jns    c002631a <__adddf3+0x4d7>
c002630a:	31 c9                	xor    ecx,ecx
c002630c:	f7 da                	neg    edx
c002630e:	0f 95 c1             	setne  cl
c0026311:	01 c8                	add    eax,ecx
c0026313:	f7 d8                	neg    eax
c0026315:	e9 2f 01 00 00       	jmp    c0026449 <__adddf3+0x606>
c002631a:	31 ff                	xor    edi,edi
c002631c:	31 c9                	xor    ecx,ecx
c002631e:	89 c3                	mov    ebx,eax
c0026320:	09 d3                	or     ebx,edx
c0026322:	0f 84 60 01 00 00    	je     c0026488 <__adddf3+0x645>
c0026328:	e9 05 01 00 00       	jmp    c0026432 <__adddf3+0x5ef>
c002632d:	31 ff                	xor    edi,edi
c002632f:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0026334:	e9 4f 01 00 00       	jmp    c0026488 <__adddf3+0x645>
c0026339:	89 c1                	mov    ecx,eax
c002633b:	89 d0                	mov    eax,edx
c002633d:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0026340:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0026343:	89 ca                	mov    edx,ecx
c0026345:	85 c9                	test   ecx,ecx
c0026347:	79 2c                	jns    c0026375 <__adddf3+0x532>
c0026349:	31 c9                	xor    ecx,ecx
c002634b:	f7 d8                	neg    eax
c002634d:	0f 95 c1             	setne  cl
c0026350:	01 ca                	add    edx,ecx
c0026352:	f7 da                	neg    edx
c0026354:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0026357:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002635a:	eb 19                	jmp    c0026375 <__adddf3+0x532>
c002635c:	85 c0                	test   eax,eax
c002635e:	0f 89 e5 00 00 00    	jns    c0026449 <__adddf3+0x606>
c0026364:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026369:	89 c1                	mov    ecx,eax
c002636b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002636e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0026371:	89 d0                	mov    eax,edx
c0026373:	89 ca                	mov    edx,ecx
c0026375:	85 d2                	test   edx,edx
c0026377:	74 59                	je     c00263d2 <__adddf3+0x58f>
c0026379:	0f bd da             	bsr    ebx,edx
c002637c:	83 f3 1f             	xor    ebx,0x1f
c002637f:	88 d9                	mov    cl,bl
c0026381:	d3 e2                	shl    edx,cl
c0026383:	bf 20 00 00 00       	mov    edi,0x20
c0026388:	89 f9                	mov    ecx,edi
c002638a:	29 d9                	sub    ecx,ebx
c002638c:	89 c6                	mov    esi,eax
c002638e:	d3 ee                	shr    esi,cl
c0026390:	09 d6                	or     esi,edx
c0026392:	88 d9                	mov    cl,bl
c0026394:	d3 e0                	shl    eax,cl
c0026396:	89 c2                	mov    edx,eax
c0026398:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002639b:	25 ff 07 00 00       	and    eax,0x7ff
c00263a0:	39 d8                	cmp    eax,ebx
c00263a2:	7f 22                	jg     c00263c6 <__adddf3+0x583>
c00263a4:	29 c3                	sub    ebx,eax
c00263a6:	43                   	inc    ebx
c00263a7:	88 d9                	mov    cl,bl
c00263a9:	d3 ea                	shr    edx,cl
c00263ab:	29 df                	sub    edi,ebx
c00263ad:	89 f9                	mov    ecx,edi
c00263af:	89 f0                	mov    eax,esi
c00263b1:	d3 e0                	shl    eax,cl
c00263b3:	09 c2                	or     edx,eax
c00263b5:	89 f0                	mov    eax,esi
c00263b7:	88 d9                	mov    cl,bl
c00263b9:	d3 e8                	shr    eax,cl
c00263bb:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00263be:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c00263c4:	eb 6f                	jmp    c0026435 <__adddf3+0x5f2>
c00263c6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00263c9:	29 d8                	sub    eax,ebx
c00263cb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00263ce:	89 f0                	mov    eax,esi
c00263d0:	eb 59                	jmp    c002642b <__adddf3+0x5e8>
c00263d2:	85 c0                	test   eax,eax
c00263d4:	74 6a                	je     c0026440 <__adddf3+0x5fd>
c00263d6:	0f bd c8             	bsr    ecx,eax
c00263d9:	83 f1 1f             	xor    ecx,0x1f
c00263dc:	d3 e0                	shl    eax,cl
c00263de:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00263e1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00263e7:	83 c1 20             	add    ecx,0x20
c00263ea:	39 cb                	cmp    ebx,ecx
c00263ec:	7f 35                	jg     c0026423 <__adddf3+0x5e0>
c00263ee:	29 d9                	sub    ecx,ebx
c00263f0:	8d 71 01             	lea    esi,[ecx+0x1]
c00263f3:	83 fe 1f             	cmp    esi,0x1f
c00263f6:	7e 09                	jle    c0026401 <__adddf3+0x5be>
c00263f8:	83 e9 1f             	sub    ecx,0x1f
c00263fb:	d3 e8                	shr    eax,cl
c00263fd:	89 c3                	mov    ebx,eax
c00263ff:	eb 11                	jmp    c0026412 <__adddf3+0x5cf>
c0026401:	b9 20 00 00 00       	mov    ecx,0x20
c0026406:	29 f1                	sub    ecx,esi
c0026408:	89 c3                	mov    ebx,eax
c002640a:	d3 e3                	shl    ebx,cl
c002640c:	89 f1                	mov    ecx,esi
c002640e:	d3 e8                	shr    eax,cl
c0026410:	89 c2                	mov    edx,eax
c0026412:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026415:	25 00 f8 ff ff       	and    eax,0xfffff800
c002641a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002641d:	89 d0                	mov    eax,edx
c002641f:	89 da                	mov    edx,ebx
c0026421:	eb 26                	jmp    c0026449 <__adddf3+0x606>
c0026423:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026426:	29 cf                	sub    edi,ecx
c0026428:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002642b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026430:	eb 17                	jmp    c0026449 <__adddf3+0x606>
c0026432:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026435:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026438:	eb 0f                	jmp    c0026449 <__adddf3+0x606>
c002643a:	31 d2                	xor    edx,edx
c002643c:	31 c0                	xor    eax,eax
c002643e:	eb 09                	jmp    c0026449 <__adddf3+0x606>
c0026440:	89 c2                	mov    edx,eax
c0026442:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0026449:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002644c:	c1 e1 14             	shl    ecx,0x14
c002644f:	89 c3                	mov    ebx,eax
c0026451:	c1 eb 0b             	shr    ebx,0xb
c0026454:	09 d9                	or     ecx,ebx
c0026456:	89 d3                	mov    ebx,edx
c0026458:	c1 eb 0b             	shr    ebx,0xb
c002645b:	c1 e0 15             	shl    eax,0x15
c002645e:	09 d8                	or     eax,ebx
c0026460:	89 c7                	mov    edi,eax
c0026462:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0026468:	0f 95 c0             	setne  al
c002646b:	89 c6                	mov    esi,eax
c002646d:	09 f3                	or     ebx,esi
c002646f:	83 e3 01             	and    ebx,0x1
c0026472:	c1 ea 0a             	shr    edx,0xa
c0026475:	21 da                	and    edx,ebx
c0026477:	89 f8                	mov    eax,edi
c0026479:	01 d0                	add    eax,edx
c002647b:	83 d1 00             	adc    ecx,0x0
c002647e:	89 c7                	mov    edi,eax
c0026480:	eb 06                	jmp    c0026488 <__adddf3+0x645>
c0026482:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026485:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0026488:	89 f8                	mov    eax,edi
c002648a:	89 ca                	mov    edx,ecx
c002648c:	83 c4 24             	add    esp,0x24
c002648f:	5b                   	pop    ebx
c0026490:	5e                   	pop    esi
c0026491:	5f                   	pop    edi
c0026492:	5d                   	pop    ebp
c0026493:	c3                   	ret    

c0026494 <__subdf3>:
c0026494:	55                   	push   ebp
c0026495:	89 e5                	mov    ebp,esp
c0026497:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002649a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002649d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00264a3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00264a6:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00264a9:	5d                   	pop    ebp
c00264aa:	e9 94 f9 ff ff       	jmp    c0025e43 <__adddf3>

c00264af <__negdf2>:
c00264af:	55                   	push   ebp
c00264b0:	89 e5                	mov    ebp,esp
c00264b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00264b5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00264b8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00264be:	5d                   	pop    ebp
c00264bf:	c3                   	ret    

c00264c0 <__muldf3>:
c00264c0:	55                   	push   ebp
c00264c1:	89 e5                	mov    ebp,esp
c00264c3:	57                   	push   edi
c00264c4:	56                   	push   esi
c00264c5:	53                   	push   ebx
c00264c6:	83 ec 24             	sub    esp,0x24
c00264c9:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00264cc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00264cf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00264d2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00264d5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00264d8:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00264db:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00264de:	89 c8                	mov    eax,ecx
c00264e0:	c1 f8 14             	sar    eax,0x14
c00264e3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00264e6:	89 f8                	mov    eax,edi
c00264e8:	89 fb                	mov    ebx,edi
c00264ea:	c1 e3 0b             	shl    ebx,0xb
c00264ed:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c00264f0:	c1 e1 0b             	shl    ecx,0xb
c00264f3:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00264f9:	c1 e8 15             	shr    eax,0x15
c00264fc:	09 c1                	or     ecx,eax
c00264fe:	89 d6                	mov    esi,edx
c0026500:	89 d0                	mov    eax,edx
c0026502:	c1 f8 14             	sar    eax,0x14
c0026505:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0026508:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002650b:	89 c3                	mov    ebx,eax
c002650d:	c1 e3 0b             	shl    ebx,0xb
c0026510:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0026513:	c1 e6 0b             	shl    esi,0xb
c0026516:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c002651c:	c1 e8 15             	shr    eax,0x15
c002651f:	09 c6                	or     esi,eax
c0026521:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026524:	25 ff 07 00 00       	and    eax,0x7ff
c0026529:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002652c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002652f:	25 ff 07 00 00       	and    eax,0x7ff
c0026534:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0026537:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002653a:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c002653d:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0026544:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026547:	40                   	inc    eax
c0026548:	a9 fe 07 00 00       	test   eax,0x7fe
c002654d:	0f 85 8d 00 00 00    	jne    c00265e0 <__muldf3+0x120>
c0026553:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026556:	09 c8                	or     eax,ecx
c0026558:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c002655c:	74 44                	je     c00265a2 <__muldf3+0xe2>
c002655e:	85 c0                	test   eax,eax
c0026560:	0f 85 31 02 00 00    	jne    c0026797 <__muldf3+0x2d7>
c0026566:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026569:	40                   	inc    eax
c002656a:	a9 fe 07 00 00       	test   eax,0x7fe
c002656f:	75 13                	jne    c0026584 <__muldf3+0xc4>
c0026571:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026574:	09 f1                	or     ecx,esi
c0026576:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002657a:	74 22                	je     c002659e <__muldf3+0xde>
c002657c:	85 c9                	test   ecx,ecx
c002657e:	0f 85 0d 02 00 00    	jne    c0026791 <__muldf3+0x2d1>
c0026584:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0026588:	0f 89 09 02 00 00    	jns    c0026797 <__muldf3+0x2d7>
c002658e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026591:	05 00 00 00 80       	add    eax,0x80000000
c0026596:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026599:	e9 f9 01 00 00       	jmp    c0026797 <__muldf3+0x2d7>
c002659e:	85 c9                	test   ecx,ecx
c00265a0:	eb 2e                	jmp    c00265d0 <__muldf3+0x110>
c00265a2:	85 c0                	test   eax,eax
c00265a4:	74 20                	je     c00265c6 <__muldf3+0x106>
c00265a6:	8d 04 09             	lea    eax,[ecx+ecx*1]
c00265a9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00265ac:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00265af:	c1 ef 1f             	shr    edi,0x1f
c00265b2:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c00265b5:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c00265b8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00265bb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00265be:	09 f9                	or     ecx,edi
c00265c0:	78 1e                	js     c00265e0 <__muldf3+0x120>
c00265c2:	89 c3                	mov    ebx,eax
c00265c4:	eb e0                	jmp    c00265a6 <__muldf3+0xe6>
c00265c6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00265c9:	f7 d0                	not    eax
c00265cb:	a9 ff 07 00 00       	test   eax,0x7ff
c00265d0:	75 b2                	jne    c0026584 <__muldf3+0xc4>
c00265d2:	31 ff                	xor    edi,edi
c00265d4:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c00265db:	e9 b7 01 00 00       	jmp    c0026797 <__muldf3+0x2d7>
c00265e0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00265e3:	40                   	inc    eax
c00265e4:	a9 fe 07 00 00       	test   eax,0x7fe
c00265e9:	75 57                	jne    c0026642 <__muldf3+0x182>
c00265eb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00265ee:	09 f0                	or     eax,esi
c00265f0:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00265f4:	74 23                	je     c0026619 <__muldf3+0x159>
c00265f6:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00265fa:	0f 89 91 01 00 00    	jns    c0026791 <__muldf3+0x2d1>
c0026600:	85 c0                	test   eax,eax
c0026602:	0f 85 89 01 00 00    	jne    c0026791 <__muldf3+0x2d1>
c0026608:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c002660b:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0026611:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026614:	e9 7e 01 00 00       	jmp    c0026797 <__muldf3+0x2d7>
c0026619:	85 c0                	test   eax,eax
c002661b:	75 0c                	jne    c0026629 <__muldf3+0x169>
c002661d:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0026621:	0f 89 6a 01 00 00    	jns    c0026791 <__muldf3+0x2d1>
c0026627:	eb df                	jmp    c0026608 <__muldf3+0x148>
c0026629:	01 f6                	add    esi,esi
c002662b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002662e:	c1 ea 1f             	shr    edx,0x1f
c0026631:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026634:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0026637:	8d 43 ff             	lea    eax,[ebx-0x1]
c002663a:	09 d6                	or     esi,edx
c002663c:	78 04                	js     c0026642 <__muldf3+0x182>
c002663e:	89 c3                	mov    ebx,eax
c0026640:	eb e7                	jmp    c0026629 <__muldf3+0x169>
c0026642:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0026648:	81 ce 00 00 00 80    	or     esi,0x80000000
c002664e:	89 c8                	mov    eax,ecx
c0026650:	f7 e6                	mul    esi
c0026652:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0026655:	89 c7                	mov    edi,eax
c0026657:	89 c8                	mov    eax,ecx
c0026659:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c002665c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c002665f:	89 c1                	mov    ecx,eax
c0026661:	89 f0                	mov    eax,esi
c0026663:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0026666:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0026669:	89 c6                	mov    esi,eax
c002666b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002666e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0026671:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0026674:	31 c0                	xor    eax,eax
c0026676:	01 f1                	add    ecx,esi
c0026678:	0f 92 c0             	setb   al
c002667b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c002667e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0026681:	83 d6 00             	adc    esi,0x0
c0026684:	01 c7                	add    edi,eax
c0026686:	83 d6 00             	adc    esi,0x0
c0026689:	01 ca                	add    edx,ecx
c002668b:	0f 92 c1             	setb   cl
c002668e:	0f b6 c9             	movzx  ecx,cl
c0026691:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0026694:	83 d6 00             	adc    esi,0x0
c0026697:	01 cf                	add    edi,ecx
c0026699:	83 d6 00             	adc    esi,0x0
c002669c:	31 c9                	xor    ecx,ecx
c002669e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c00266a1:	0f 95 c1             	setne  cl
c00266a4:	09 cf                	or     edi,ecx
c00266a6:	85 f6                	test   esi,esi
c00266a8:	78 0c                	js     c00266b6 <__muldf3+0x1f6>
c00266aa:	01 f6                	add    esi,esi
c00266ac:	89 f8                	mov    eax,edi
c00266ae:	c1 e8 1f             	shr    eax,0x1f
c00266b1:	09 c6                	or     esi,eax
c00266b3:	01 ff                	add    edi,edi
c00266b5:	4b                   	dec    ebx
c00266b6:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c00266bc:	0f 8f 85 00 00 00    	jg     c0026747 <__muldf3+0x287>
c00266c2:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c00266c8:	85 db                	test   ebx,ebx
c00266ca:	0f 8f 84 00 00 00    	jg     c0026754 <__muldf3+0x294>
c00266d0:	83 fb cc             	cmp    ebx,0xffffffcc
c00266d3:	7c 79                	jl     c002674e <__muldf3+0x28e>
c00266d5:	ba 01 00 00 00       	mov    edx,0x1
c00266da:	29 da                	sub    edx,ebx
c00266dc:	81 ce 00 00 00 80    	or     esi,0x80000000
c00266e2:	83 fa 1f             	cmp    edx,0x1f
c00266e5:	7e 30                	jle    c0026717 <__muldf3+0x257>
c00266e7:	83 fa 20             	cmp    edx,0x20
c00266ea:	75 0b                	jne    c00266f7 <__muldf3+0x237>
c00266ec:	31 c0                	xor    eax,eax
c00266ee:	85 ff                	test   edi,edi
c00266f0:	0f 95 c0             	setne  al
c00266f3:	89 c7                	mov    edi,eax
c00266f5:	eb 1a                	jmp    c0026711 <__muldf3+0x251>
c00266f7:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c00266fa:	89 f0                	mov    eax,esi
c00266fc:	d3 e0                	shl    eax,cl
c00266fe:	09 f8                	or     eax,edi
c0026700:	0f 95 c0             	setne  al
c0026703:	0f b6 c0             	movzx  eax,al
c0026706:	89 c7                	mov    edi,eax
c0026708:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002670d:	29 d9                	sub    ecx,ebx
c002670f:	d3 ee                	shr    esi,cl
c0026711:	09 f7                	or     edi,esi
c0026713:	31 db                	xor    ebx,ebx
c0026715:	eb 3b                	jmp    c0026752 <__muldf3+0x292>
c0026717:	83 c3 1f             	add    ebx,0x1f
c002671a:	89 f0                	mov    eax,esi
c002671c:	88 d9                	mov    cl,bl
c002671e:	d3 e0                	shl    eax,cl
c0026720:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026723:	89 f8                	mov    eax,edi
c0026725:	88 d1                	mov    cl,dl
c0026727:	d3 e8                	shr    eax,cl
c0026729:	89 c1                	mov    ecx,eax
c002672b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002672e:	09 c8                	or     eax,ecx
c0026730:	88 d9                	mov    cl,bl
c0026732:	d3 e7                	shl    edi,cl
c0026734:	31 db                	xor    ebx,ebx
c0026736:	85 ff                	test   edi,edi
c0026738:	0f 95 c3             	setne  bl
c002673b:	89 df                	mov    edi,ebx
c002673d:	09 c7                	or     edi,eax
c002673f:	88 d1                	mov    cl,dl
c0026741:	d3 ee                	shr    esi,cl
c0026743:	31 db                	xor    ebx,ebx
c0026745:	eb 0d                	jmp    c0026754 <__muldf3+0x294>
c0026747:	bb ff 07 00 00       	mov    ebx,0x7ff
c002674c:	eb 02                	jmp    c0026750 <__muldf3+0x290>
c002674e:	31 db                	xor    ebx,ebx
c0026750:	31 ff                	xor    edi,edi
c0026752:	31 f6                	xor    esi,esi
c0026754:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026757:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c002675a:	25 00 f8 ff ff       	and    eax,0xfffff800
c002675f:	09 c3                	or     ebx,eax
c0026761:	c1 e3 14             	shl    ebx,0x14
c0026764:	89 f0                	mov    eax,esi
c0026766:	c1 e8 0b             	shr    eax,0xb
c0026769:	09 c3                	or     ebx,eax
c002676b:	89 f8                	mov    eax,edi
c002676d:	c1 e8 0b             	shr    eax,0xb
c0026770:	c1 e6 15             	shl    esi,0x15
c0026773:	09 c6                	or     esi,eax
c0026775:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c002677b:	0f 95 c1             	setne  cl
c002677e:	09 c8                	or     eax,ecx
c0026780:	83 e0 01             	and    eax,0x1
c0026783:	c1 ef 0a             	shr    edi,0xa
c0026786:	21 c7                	and    edi,eax
c0026788:	01 f7                	add    edi,esi
c002678a:	83 d3 00             	adc    ebx,0x0
c002678d:	89 da                	mov    edx,ebx
c002678f:	eb 03                	jmp    c0026794 <__muldf3+0x2d4>
c0026791:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0026794:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0026797:	89 f8                	mov    eax,edi
c0026799:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002679c:	83 c4 24             	add    esp,0x24
c002679f:	5b                   	pop    ebx
c00267a0:	5e                   	pop    esi
c00267a1:	5f                   	pop    edi
c00267a2:	5d                   	pop    ebp
c00267a3:	c3                   	ret    

c00267a4 <__divdf3>:
c00267a4:	55                   	push   ebp
c00267a5:	89 e5                	mov    ebp,esp
c00267a7:	57                   	push   edi
c00267a8:	56                   	push   esi
c00267a9:	53                   	push   ebx
c00267aa:	83 ec 2c             	sub    esp,0x2c
c00267ad:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00267b0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00267b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00267b6:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00267b9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00267bc:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00267bf:	89 ce                	mov    esi,ecx
c00267c1:	89 c8                	mov    eax,ecx
c00267c3:	c1 f8 14             	sar    eax,0x14
c00267c6:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00267c9:	89 f8                	mov    eax,edi
c00267cb:	89 fb                	mov    ebx,edi
c00267cd:	c1 e3 0b             	shl    ebx,0xb
c00267d0:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c00267d3:	c1 e6 0b             	shl    esi,0xb
c00267d6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00267dc:	c1 e8 15             	shr    eax,0x15
c00267df:	09 c6                	or     esi,eax
c00267e1:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c00267e4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00267e7:	89 c2                	mov    edx,eax
c00267e9:	c1 fa 14             	sar    edx,0x14
c00267ec:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00267ef:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00267f2:	89 de                	mov    esi,ebx
c00267f4:	c1 e6 0b             	shl    esi,0xb
c00267f7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00267fa:	c1 e0 0b             	shl    eax,0xb
c00267fd:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026802:	c1 eb 15             	shr    ebx,0x15
c0026805:	09 d8                	or     eax,ebx
c0026807:	89 c2                	mov    edx,eax
c0026809:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002680c:	25 ff 07 00 00       	and    eax,0x7ff
c0026811:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0026814:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026817:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002681d:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0026820:	29 d8                	sub    eax,ebx
c0026822:	05 ff 03 00 00       	add    eax,0x3ff
c0026827:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002682a:	46                   	inc    esi
c002682b:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0026831:	0f 85 a5 00 00 00    	jne    c00268dc <__divdf3+0x138>
c0026837:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c002683a:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c002683d:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0026841:	74 2a                	je     c002686d <__divdf3+0xc9>
c0026843:	85 f6                	test   esi,esi
c0026845:	0f 85 cc 02 00 00    	jne    c0026b17 <__divdf3+0x373>
c002684b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002684e:	40                   	inc    eax
c002684f:	a9 fe 07 00 00       	test   eax,0x7fe
c0026854:	75 26                	jne    c002687c <__divdf3+0xd8>
c0026856:	85 db                	test   ebx,ebx
c0026858:	74 22                	je     c002687c <__divdf3+0xd8>
c002685a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c002685d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0026860:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026863:	09 d0                	or     eax,edx
c0026865:	0f 85 ac 02 00 00    	jne    c0026b17 <__divdf3+0x373>
c002686b:	eb 63                	jmp    c00268d0 <__divdf3+0x12c>
c002686d:	85 f6                	test   esi,esi
c002686f:	75 22                	jne    c0026893 <__divdf3+0xef>
c0026871:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026874:	40                   	inc    eax
c0026875:	a9 fe 07 00 00       	test   eax,0x7fe
c002687a:	74 36                	je     c00268b2 <__divdf3+0x10e>
c002687c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026880:	0f 89 91 02 00 00    	jns    c0026b17 <__divdf3+0x373>
c0026886:	89 f8                	mov    eax,edi
c0026888:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002688e:	e9 80 02 00 00       	jmp    c0026b13 <__divdf3+0x36f>
c0026893:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026896:	01 f6                	add    esi,esi
c0026898:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002689b:	c1 ef 1f             	shr    edi,0x1f
c002689e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00268a1:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c00268a4:	8d 48 ff             	lea    ecx,[eax-0x1]
c00268a7:	09 f7                	or     edi,esi
c00268a9:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c00268ac:	78 2e                	js     c00268dc <__divdf3+0x138>
c00268ae:	89 c8                	mov    eax,ecx
c00268b0:	eb e1                	jmp    c0026893 <__divdf3+0xef>
c00268b2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00268b5:	09 d0                	or     eax,edx
c00268b7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00268bb:	74 0f                	je     c00268cc <__divdf3+0x128>
c00268bd:	85 c0                	test   eax,eax
c00268bf:	74 bb                	je     c002687c <__divdf3+0xd8>
c00268c1:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00268c4:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00268c7:	e9 4b 02 00 00       	jmp    c0026b17 <__divdf3+0x373>
c00268cc:	85 c0                	test   eax,eax
c00268ce:	75 ac                	jne    c002687c <__divdf3+0xd8>
c00268d0:	31 ff                	xor    edi,edi
c00268d2:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00268d7:	e9 3b 02 00 00       	jmp    c0026b17 <__divdf3+0x373>
c00268dc:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00268df:	8d 4f 01             	lea    ecx,[edi+0x1]
c00268e2:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c00268e8:	75 6b                	jne    c0026955 <__divdf3+0x1b1>
c00268ea:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00268ed:	09 d6                	or     esi,edx
c00268ef:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00268f3:	74 28                	je     c002691d <__divdf3+0x179>
c00268f5:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00268f8:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00268fb:	85 f6                	test   esi,esi
c00268fd:	0f 85 14 02 00 00    	jne    c0026b17 <__divdf3+0x373>
c0026903:	31 ff                	xor    edi,edi
c0026905:	31 c9                	xor    ecx,ecx
c0026907:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002690a:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002690d:	0f 89 04 02 00 00    	jns    c0026b17 <__divdf3+0x373>
c0026913:	b9 00 00 00 80       	mov    ecx,0x80000000
c0026918:	e9 fa 01 00 00       	jmp    c0026b17 <__divdf3+0x373>
c002691d:	85 f6                	test   esi,esi
c002691f:	75 1b                	jne    c002693c <__divdf3+0x198>
c0026921:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026924:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0026927:	25 00 00 00 80       	and    eax,0x80000000
c002692c:	31 c9                	xor    ecx,ecx
c002692e:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0026933:	89 cf                	mov    edi,ecx
c0026935:	89 c1                	mov    ecx,eax
c0026937:	e9 db 01 00 00       	jmp    c0026b17 <__divdf3+0x373>
c002693c:	01 d2                	add    edx,edx
c002693e:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0026941:	c1 eb 1f             	shr    ebx,0x1f
c0026944:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026947:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c002694a:	8d 48 01             	lea    ecx,[eax+0x1]
c002694d:	09 da                	or     edx,ebx
c002694f:	78 04                	js     c0026955 <__divdf3+0x1b1>
c0026951:	89 c8                	mov    eax,ecx
c0026953:	eb e7                	jmp    c002693c <__divdf3+0x198>
c0026955:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026958:	81 ce 00 00 00 80    	or     esi,0x80000000
c002695e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026964:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0026967:	39 d6                	cmp    esi,edx
c0026969:	77 0d                	ja     c0026978 <__divdf3+0x1d4>
c002696b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002696e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0026971:	72 1b                	jb     c002698e <__divdf3+0x1ea>
c0026973:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0026976:	75 16                	jne    c002698e <__divdf3+0x1ea>
c0026978:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002697b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002697e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0026981:	83 de 00             	sbb    esi,0x0
c0026984:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0026987:	ba 01 00 00 00       	mov    edx,0x1
c002698c:	eb 02                	jmp    c0026990 <__divdf3+0x1ec>
c002698e:	31 d2                	xor    edx,edx
c0026990:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0026997:	31 ff                	xor    edi,edi
c0026999:	01 ff                	add    edi,edi
c002699b:	89 d1                	mov    ecx,edx
c002699d:	c1 e9 1f             	shr    ecx,0x1f
c00269a0:	09 cf                	or     edi,ecx
c00269a2:	8d 1c 12             	lea    ebx,[edx+edx*1]
c00269a5:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c00269a8:	89 da                	mov    edx,ebx
c00269aa:	89 f3                	mov    ebx,esi
c00269ac:	8d 34 36             	lea    esi,[esi+esi*1]
c00269af:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00269b2:	c1 e9 1f             	shr    ecx,0x1f
c00269b5:	09 ce                	or     esi,ecx
c00269b7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00269ba:	01 c9                	add    ecx,ecx
c00269bc:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c00269bf:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00269c2:	85 db                	test   ebx,ebx
c00269c4:	78 29                	js     c00269ef <__divdf3+0x24b>
c00269c6:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c00269c9:	72 07                	jb     c00269d2 <__divdf3+0x22e>
c00269cb:	75 3c                	jne    c0026a09 <__divdf3+0x265>
c00269cd:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00269d0:	77 37                	ja     c0026a09 <__divdf3+0x265>
c00269d2:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00269d5:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c00269d8:	31 d2                	xor    edx,edx
c00269da:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c00269dd:	0f 97 c2             	seta   dl
c00269e0:	29 d6                	sub    esi,edx
c00269e2:	89 d9                	mov    ecx,ebx
c00269e4:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c00269e7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00269ea:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00269ed:	eb 17                	jmp    c0026a06 <__divdf3+0x262>
c00269ef:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00269f2:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00269f5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00269f8:	0f 97 c1             	seta   cl
c00269fb:	0f b6 c9             	movzx  ecx,cl
c00269fe:	29 ce                	sub    esi,ecx
c0026a00:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0026a03:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0026a06:	83 ca 01             	or     edx,0x1
c0026a09:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0026a0c:	75 8b                	jne    c0026999 <__divdf3+0x1f5>
c0026a0e:	c1 e7 09             	shl    edi,0x9
c0026a11:	89 d1                	mov    ecx,edx
c0026a13:	c1 e9 17             	shr    ecx,0x17
c0026a16:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026a19:	09 f3                	or     ebx,esi
c0026a1b:	0f 95 c3             	setne  bl
c0026a1e:	0f b6 db             	movzx  ebx,bl
c0026a21:	c1 e2 09             	shl    edx,0x9
c0026a24:	09 d3                	or     ebx,edx
c0026a26:	89 ca                	mov    edx,ecx
c0026a28:	09 fa                	or     edx,edi
c0026a2a:	78 0c                	js     c0026a38 <__divdf3+0x294>
c0026a2c:	01 d2                	add    edx,edx
c0026a2e:	89 d9                	mov    ecx,ebx
c0026a30:	c1 e9 1f             	shr    ecx,0x1f
c0026a33:	09 ca                	or     edx,ecx
c0026a35:	01 db                	add    ebx,ebx
c0026a37:	48                   	dec    eax
c0026a38:	3d fe 07 00 00       	cmp    eax,0x7fe
c0026a3d:	0f 8f 83 00 00 00    	jg     c0026ac6 <__divdf3+0x322>
c0026a43:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026a49:	85 c0                	test   eax,eax
c0026a4b:	0f 8f 82 00 00 00    	jg     c0026ad3 <__divdf3+0x32f>
c0026a51:	83 f8 cc             	cmp    eax,0xffffffcc
c0026a54:	7c 77                	jl     c0026acd <__divdf3+0x329>
c0026a56:	be 01 00 00 00       	mov    esi,0x1
c0026a5b:	29 c6                	sub    esi,eax
c0026a5d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026a63:	83 fe 1f             	cmp    esi,0x1f
c0026a66:	7e 2f                	jle    c0026a97 <__divdf3+0x2f3>
c0026a68:	83 fe 20             	cmp    esi,0x20
c0026a6b:	75 0a                	jne    c0026a77 <__divdf3+0x2d3>
c0026a6d:	85 db                	test   ebx,ebx
c0026a6f:	0f 95 c3             	setne  bl
c0026a72:	0f b6 db             	movzx  ebx,bl
c0026a75:	eb 1a                	jmp    c0026a91 <__divdf3+0x2ed>
c0026a77:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0026a7a:	89 d7                	mov    edi,edx
c0026a7c:	d3 e7                	shl    edi,cl
c0026a7e:	89 f9                	mov    ecx,edi
c0026a80:	09 d9                	or     ecx,ebx
c0026a82:	0f 95 c3             	setne  bl
c0026a85:	0f b6 db             	movzx  ebx,bl
c0026a88:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0026a8d:	29 c1                	sub    ecx,eax
c0026a8f:	d3 ea                	shr    edx,cl
c0026a91:	09 d3                	or     ebx,edx
c0026a93:	31 c0                	xor    eax,eax
c0026a95:	eb 3a                	jmp    c0026ad1 <__divdf3+0x32d>
c0026a97:	83 c0 1f             	add    eax,0x1f
c0026a9a:	89 d7                	mov    edi,edx
c0026a9c:	88 c1                	mov    cl,al
c0026a9e:	d3 e7                	shl    edi,cl
c0026aa0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026aa3:	89 df                	mov    edi,ebx
c0026aa5:	89 f1                	mov    ecx,esi
c0026aa7:	d3 ef                	shr    edi,cl
c0026aa9:	89 f9                	mov    ecx,edi
c0026aab:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0026aae:	09 cf                	or     edi,ecx
c0026ab0:	88 c1                	mov    cl,al
c0026ab2:	d3 e3                	shl    ebx,cl
c0026ab4:	85 db                	test   ebx,ebx
c0026ab6:	0f 95 c3             	setne  bl
c0026ab9:	0f b6 db             	movzx  ebx,bl
c0026abc:	09 fb                	or     ebx,edi
c0026abe:	89 f1                	mov    ecx,esi
c0026ac0:	d3 ea                	shr    edx,cl
c0026ac2:	31 c0                	xor    eax,eax
c0026ac4:	eb 0d                	jmp    c0026ad3 <__divdf3+0x32f>
c0026ac6:	b8 ff 07 00 00       	mov    eax,0x7ff
c0026acb:	eb 02                	jmp    c0026acf <__divdf3+0x32b>
c0026acd:	31 c0                	xor    eax,eax
c0026acf:	31 db                	xor    ebx,ebx
c0026ad1:	31 d2                	xor    edx,edx
c0026ad3:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0026ad6:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0026ad9:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0026adf:	09 c8                	or     eax,ecx
c0026ae1:	c1 e0 14             	shl    eax,0x14
c0026ae4:	89 d1                	mov    ecx,edx
c0026ae6:	c1 e9 0b             	shr    ecx,0xb
c0026ae9:	09 c8                	or     eax,ecx
c0026aeb:	89 c6                	mov    esi,eax
c0026aed:	89 d9                	mov    ecx,ebx
c0026aef:	c1 e9 0b             	shr    ecx,0xb
c0026af2:	c1 e2 15             	shl    edx,0x15
c0026af5:	09 ca                	or     edx,ecx
c0026af7:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0026afd:	0f 95 c0             	setne  al
c0026b00:	09 c1                	or     ecx,eax
c0026b02:	83 e1 01             	and    ecx,0x1
c0026b05:	c1 eb 0a             	shr    ebx,0xa
c0026b08:	21 cb                	and    ebx,ecx
c0026b0a:	01 d3                	add    ebx,edx
c0026b0c:	89 d8                	mov    eax,ebx
c0026b0e:	83 d6 00             	adc    esi,0x0
c0026b11:	89 f2                	mov    edx,esi
c0026b13:	89 c7                	mov    edi,eax
c0026b15:	89 d1                	mov    ecx,edx
c0026b17:	89 f8                	mov    eax,edi
c0026b19:	89 ca                	mov    edx,ecx
c0026b1b:	83 c4 2c             	add    esp,0x2c
c0026b1e:	5b                   	pop    ebx
c0026b1f:	5e                   	pop    esi
c0026b20:	5f                   	pop    edi
c0026b21:	5d                   	pop    ebp
c0026b22:	c3                   	ret    

c0026b23 <__floatsidf>:
c0026b23:	55                   	push   ebp
c0026b24:	89 e5                	mov    ebp,esp
c0026b26:	56                   	push   esi
c0026b27:	53                   	push   ebx
c0026b28:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026b2b:	85 db                	test   ebx,ebx
c0026b2d:	7e 15                	jle    c0026b44 <__floatsidf+0x21>
c0026b2f:	0f bd cb             	bsr    ecx,ebx
c0026b32:	83 f1 1f             	xor    ecx,0x1f
c0026b35:	d3 e3                	shl    ebx,cl
c0026b37:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0026b3d:	b8 1e 04 00 00       	mov    eax,0x41e
c0026b42:	eb 21                	jmp    c0026b65 <__floatsidf+0x42>
c0026b44:	b8 00 00 00 00       	mov    eax,0x0
c0026b49:	ba 00 00 00 00       	mov    edx,0x0
c0026b4e:	74 2a                	je     c0026b7a <__floatsidf+0x57>
c0026b50:	f7 db                	neg    ebx
c0026b52:	0f bd cb             	bsr    ecx,ebx
c0026b55:	83 f1 1f             	xor    ecx,0x1f
c0026b58:	d3 e3                	shl    ebx,cl
c0026b5a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0026b60:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0026b65:	29 c8                	sub    eax,ecx
c0026b67:	c1 e0 14             	shl    eax,0x14
c0026b6a:	89 c1                	mov    ecx,eax
c0026b6c:	89 de                	mov    esi,ebx
c0026b6e:	c1 ee 0b             	shr    esi,0xb
c0026b71:	09 f1                	or     ecx,esi
c0026b73:	89 ca                	mov    edx,ecx
c0026b75:	c1 e3 15             	shl    ebx,0x15
c0026b78:	89 d8                	mov    eax,ebx
c0026b7a:	5b                   	pop    ebx
c0026b7b:	5e                   	pop    esi
c0026b7c:	5d                   	pop    ebp
c0026b7d:	c3                   	ret    

c0026b7e <__floatunsidf>:
c0026b7e:	55                   	push   ebp
c0026b7f:	89 e5                	mov    ebp,esp
c0026b81:	56                   	push   esi
c0026b82:	53                   	push   ebx
c0026b83:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026b86:	85 db                	test   ebx,ebx
c0026b88:	74 2a                	je     c0026bb4 <__floatunsidf+0x36>
c0026b8a:	0f bd cb             	bsr    ecx,ebx
c0026b8d:	83 f1 1f             	xor    ecx,0x1f
c0026b90:	d3 e3                	shl    ebx,cl
c0026b92:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0026b98:	b8 1e 04 00 00       	mov    eax,0x41e
c0026b9d:	29 c8                	sub    eax,ecx
c0026b9f:	c1 e0 14             	shl    eax,0x14
c0026ba2:	89 c1                	mov    ecx,eax
c0026ba4:	89 de                	mov    esi,ebx
c0026ba6:	c1 ee 0b             	shr    esi,0xb
c0026ba9:	09 f1                	or     ecx,esi
c0026bab:	89 ca                	mov    edx,ecx
c0026bad:	c1 e3 15             	shl    ebx,0x15
c0026bb0:	89 d8                	mov    eax,ebx
c0026bb2:	eb 04                	jmp    c0026bb8 <__floatunsidf+0x3a>
c0026bb4:	31 c0                	xor    eax,eax
c0026bb6:	31 d2                	xor    edx,edx
c0026bb8:	5b                   	pop    ebx
c0026bb9:	5e                   	pop    esi
c0026bba:	5d                   	pop    ebp
c0026bbb:	c3                   	ret    

c0026bbc <__fixdfsi>:
c0026bbc:	55                   	push   ebp
c0026bbd:	89 e5                	mov    ebp,esp
c0026bbf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026bc2:	89 d1                	mov    ecx,edx
c0026bc4:	c1 e1 0b             	shl    ecx,0xb
c0026bc7:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0026bcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026bd0:	c1 e8 15             	shr    eax,0x15
c0026bd3:	09 c1                	or     ecx,eax
c0026bd5:	c1 fa 14             	sar    edx,0x14
c0026bd8:	78 1f                	js     c0026bf9 <__fixdfsi+0x3d>
c0026bda:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0026be0:	31 c0                	xor    eax,eax
c0026be2:	83 fa 1e             	cmp    edx,0x1e
c0026be5:	77 40                	ja     c0026c27 <__fixdfsi+0x6b>
c0026be7:	89 c8                	mov    eax,ecx
c0026be9:	0d 00 00 00 80       	or     eax,0x80000000
c0026bee:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026bf3:	29 d1                	sub    ecx,edx
c0026bf5:	d3 e8                	shr    eax,cl
c0026bf7:	eb 2e                	jmp    c0026c27 <__fixdfsi+0x6b>
c0026bf9:	31 c0                	xor    eax,eax
c0026bfb:	81 c2 01 04 00 00    	add    edx,0x401
c0026c01:	78 24                	js     c0026c27 <__fixdfsi+0x6b>
c0026c03:	83 fa 1e             	cmp    edx,0x1e
c0026c06:	7e 09                	jle    c0026c11 <__fixdfsi+0x55>
c0026c08:	83 fa 1f             	cmp    edx,0x1f
c0026c0b:	75 18                	jne    c0026c25 <__fixdfsi+0x69>
c0026c0d:	85 c9                	test   ecx,ecx
c0026c0f:	75 14                	jne    c0026c25 <__fixdfsi+0x69>
c0026c11:	89 c8                	mov    eax,ecx
c0026c13:	0d 00 00 00 80       	or     eax,0x80000000
c0026c18:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026c1d:	29 d1                	sub    ecx,edx
c0026c1f:	d3 e8                	shr    eax,cl
c0026c21:	f7 d8                	neg    eax
c0026c23:	eb 02                	jmp    c0026c27 <__fixdfsi+0x6b>
c0026c25:	31 c0                	xor    eax,eax
c0026c27:	5d                   	pop    ebp
c0026c28:	c3                   	ret    

c0026c29 <__fixunsdfsi>:
c0026c29:	55                   	push   ebp
c0026c2a:	89 e5                	mov    ebp,esp
c0026c2c:	53                   	push   ebx
c0026c2d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026c30:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026c33:	89 d3                	mov    ebx,edx
c0026c35:	c1 fb 14             	sar    ebx,0x14
c0026c38:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0026c3e:	31 c0                	xor    eax,eax
c0026c40:	83 fb 1f             	cmp    ebx,0x1f
c0026c43:	77 1d                	ja     c0026c62 <__fixunsdfsi+0x39>
c0026c45:	89 d0                	mov    eax,edx
c0026c47:	c1 e0 0b             	shl    eax,0xb
c0026c4a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026c4f:	c1 e9 15             	shr    ecx,0x15
c0026c52:	09 c8                	or     eax,ecx
c0026c54:	0d 00 00 00 80       	or     eax,0x80000000
c0026c59:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026c5e:	29 d9                	sub    ecx,ebx
c0026c60:	d3 e8                	shr    eax,cl
c0026c62:	5b                   	pop    ebx
c0026c63:	5d                   	pop    ebp
c0026c64:	c3                   	ret    

c0026c65 <__cmpdf2>:
c0026c65:	55                   	push   ebp
c0026c66:	89 e5                	mov    ebp,esp
c0026c68:	57                   	push   edi
c0026c69:	56                   	push   esi
c0026c6a:	53                   	push   ebx
c0026c6b:	83 ec 0c             	sub    esp,0xc
c0026c6e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0026c71:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026c74:	89 ca                	mov    edx,ecx
c0026c76:	c1 ea 14             	shr    edx,0x14
c0026c79:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0026c7f:	89 cb                	mov    ebx,ecx
c0026c81:	c1 fb 1f             	sar    ebx,0x1f
c0026c84:	31 da                	xor    edx,ebx
c0026c86:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026c89:	89 df                	mov    edi,ebx
c0026c8b:	c1 e7 0b             	shl    edi,0xb
c0026c8e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026c91:	c1 e1 0b             	shl    ecx,0xb
c0026c94:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0026c9a:	c1 eb 15             	shr    ebx,0x15
c0026c9d:	09 d9                	or     ecx,ebx
c0026c9f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0026ca2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0026ca5:	89 ce                	mov    esi,ecx
c0026ca7:	c1 ee 14             	shr    esi,0x14
c0026caa:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026cb0:	89 cb                	mov    ebx,ecx
c0026cb2:	c1 fb 1f             	sar    ebx,0x1f
c0026cb5:	31 de                	xor    esi,ebx
c0026cb7:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0026cba:	89 df                	mov    edi,ebx
c0026cbc:	c1 e7 0b             	shl    edi,0xb
c0026cbf:	c1 e1 0b             	shl    ecx,0xb
c0026cc2:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0026cc8:	c1 eb 15             	shr    ebx,0x15
c0026ccb:	09 d9                	or     ecx,ebx
c0026ccd:	89 d3                	mov    ebx,edx
c0026ccf:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0026cd5:	43                   	inc    ebx
c0026cd6:	83 fb 01             	cmp    ebx,0x1
c0026cd9:	77 08                	ja     c0026ce3 <__cmpdf2+0x7e>
c0026cdb:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026cde:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0026ce1:	75 68                	jne    c0026d4b <__cmpdf2+0xe6>
c0026ce3:	89 f3                	mov    ebx,esi
c0026ce5:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0026ceb:	43                   	inc    ebx
c0026cec:	83 fb 01             	cmp    ebx,0x1
c0026cef:	77 06                	ja     c0026cf7 <__cmpdf2+0x92>
c0026cf1:	89 fb                	mov    ebx,edi
c0026cf3:	09 cb                	or     ebx,ecx
c0026cf5:	75 54                	jne    c0026d4b <__cmpdf2+0xe6>
c0026cf7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026cfa:	09 f8                	or     eax,edi
c0026cfc:	09 c8                	or     eax,ecx
c0026cfe:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0026d01:	75 12                	jne    c0026d15 <__cmpdf2+0xb0>
c0026d03:	8d 42 01             	lea    eax,[edx+0x1]
c0026d06:	83 f8 01             	cmp    eax,0x1
c0026d09:	77 0a                	ja     c0026d15 <__cmpdf2+0xb0>
c0026d0b:	8d 5e 01             	lea    ebx,[esi+0x1]
c0026d0e:	31 c0                	xor    eax,eax
c0026d10:	83 fb 01             	cmp    ebx,0x1
c0026d13:	76 36                	jbe    c0026d4b <__cmpdf2+0xe6>
c0026d15:	b8 01 00 00 00       	mov    eax,0x1
c0026d1a:	39 f2                	cmp    edx,esi
c0026d1c:	7f 2d                	jg     c0026d4b <__cmpdf2+0xe6>
c0026d1e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0026d23:	7c 26                	jl     c0026d4b <__cmpdf2+0xe6>
c0026d25:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0026d28:	77 07                	ja     c0026d31 <__cmpdf2+0xcc>
c0026d2a:	72 16                	jb     c0026d42 <__cmpdf2+0xdd>
c0026d2c:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0026d2f:	76 0a                	jbe    c0026d3b <__cmpdf2+0xd6>
c0026d31:	89 d0                	mov    eax,edx
c0026d33:	c1 f8 1f             	sar    eax,0x1f
c0026d36:	83 c8 01             	or     eax,0x1
c0026d39:	eb 10                	jmp    c0026d4b <__cmpdf2+0xe6>
c0026d3b:	b8 00 00 00 00       	mov    eax,0x0
c0026d40:	73 09                	jae    c0026d4b <__cmpdf2+0xe6>
c0026d42:	89 d0                	mov    eax,edx
c0026d44:	c1 f8 1f             	sar    eax,0x1f
c0026d47:	83 e0 02             	and    eax,0x2
c0026d4a:	48                   	dec    eax
c0026d4b:	83 c4 0c             	add    esp,0xc
c0026d4e:	5b                   	pop    ebx
c0026d4f:	5e                   	pop    esi
c0026d50:	5f                   	pop    edi
c0026d51:	5d                   	pop    ebp
c0026d52:	c3                   	ret    

c0026d53 <__eqdf2>:
c0026d53:	55                   	push   ebp
c0026d54:	89 e5                	mov    ebp,esp
c0026d56:	50                   	push   eax
c0026d57:	6a 01                	push   0x1
c0026d59:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0026d5c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0026d5f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d62:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026d65:	e8 fb fe ff ff       	call   c0026c65 <__cmpdf2>
c0026d6a:	83 c4 18             	add    esp,0x18
c0026d6d:	c9                   	leave  
c0026d6e:	c3                   	ret    

c0026d6f <__nedf2>:
c0026d6f:	eb e2                	jmp    c0026d53 <__eqdf2>

c0026d71 <__gtdf2>:
c0026d71:	55                   	push   ebp
c0026d72:	89 e5                	mov    ebp,esp
c0026d74:	50                   	push   eax
c0026d75:	6a ff                	push   0xffffffff
c0026d77:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0026d7a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0026d7d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d80:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026d83:	e8 dd fe ff ff       	call   c0026c65 <__cmpdf2>
c0026d88:	83 c4 18             	add    esp,0x18
c0026d8b:	c9                   	leave  
c0026d8c:	c3                   	ret    

c0026d8d <__gedf2>:
c0026d8d:	eb e2                	jmp    c0026d71 <__gtdf2>

c0026d8f <__ltdf2>:
c0026d8f:	eb c2                	jmp    c0026d53 <__eqdf2>

c0026d91 <__ledf2>:
c0026d91:	eb c0                	jmp    c0026d53 <__eqdf2>

c0026d93 <__truncdfsf2>:
c0026d93:	55                   	push   ebp
c0026d94:	89 e5                	mov    ebp,esp
c0026d96:	57                   	push   edi
c0026d97:	56                   	push   esi
c0026d98:	53                   	push   ebx
c0026d99:	83 ec 0c             	sub    esp,0xc
c0026d9c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026d9f:	89 d1                	mov    ecx,edx
c0026da1:	c1 f9 14             	sar    ecx,0x14
c0026da4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026da7:	89 df                	mov    edi,ebx
c0026da9:	c1 e7 0b             	shl    edi,0xb
c0026dac:	89 d0                	mov    eax,edx
c0026dae:	c1 e0 0b             	shl    eax,0xb
c0026db1:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026db6:	c1 eb 15             	shr    ebx,0x15
c0026db9:	09 d8                	or     eax,ebx
c0026dbb:	89 cb                	mov    ebx,ecx
c0026dbd:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026dc3:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0026dc9:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0026dcf:	0f 86 9e 00 00 00    	jbe    c0026e73 <__truncdfsf2+0xe0>
c0026dd5:	85 db                	test   ebx,ebx
c0026dd7:	75 0a                	jne    c0026de3 <__truncdfsf2+0x50>
c0026dd9:	c1 fa 17             	sar    edx,0x17
c0026ddc:	30 d2                	xor    dl,dl
c0026dde:	e9 84 00 00 00       	jmp    c0026e67 <__truncdfsf2+0xd4>
c0026de3:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0026de9:	83 fe 83             	cmp    esi,0xffffff83
c0026dec:	7d 4b                	jge    c0026e39 <__truncdfsf2+0xa6>
c0026dee:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0026df3:	29 f1                	sub    ecx,esi
c0026df5:	83 f9 1f             	cmp    ecx,0x1f
c0026df8:	7f 6b                	jg     c0026e65 <__truncdfsf2+0xd2>
c0026dfa:	0d 00 00 00 80       	or     eax,0x80000000
c0026dff:	89 c3                	mov    ebx,eax
c0026e01:	d3 eb                	shr    ebx,cl
c0026e03:	be 01 00 00 00       	mov    esi,0x1
c0026e08:	d3 e6                	shl    esi,cl
c0026e0a:	4e                   	dec    esi
c0026e0b:	21 f0                	and    eax,esi
c0026e0d:	09 f8                	or     eax,edi
c0026e0f:	0f 95 c0             	setne  al
c0026e12:	0f b6 c0             	movzx  eax,al
c0026e15:	09 c3                	or     ebx,eax
c0026e17:	89 d9                	mov    ecx,ebx
c0026e19:	c1 e9 08             	shr    ecx,0x8
c0026e1c:	f6 c3 7f             	test   bl,0x7f
c0026e1f:	0f 95 c0             	setne  al
c0026e22:	09 c8                	or     eax,ecx
c0026e24:	83 e0 01             	and    eax,0x1
c0026e27:	c1 eb 07             	shr    ebx,0x7
c0026e2a:	21 c3                	and    ebx,eax
c0026e2c:	81 e2 00 00 00 80    	and    edx,0x80000000
c0026e32:	09 d1                	or     ecx,edx
c0026e34:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0026e37:	eb 76                	jmp    c0026eaf <__truncdfsf2+0x11c>
c0026e39:	83 c6 80             	add    esi,0xffffff80
c0026e3c:	7e 1d                	jle    c0026e5b <__truncdfsf2+0xc8>
c0026e3e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0026e44:	75 0b                	jne    c0026e51 <__truncdfsf2+0xbe>
c0026e46:	09 f8                	or     eax,edi
c0026e48:	74 09                	je     c0026e53 <__truncdfsf2+0xc0>
c0026e4a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0026e4f:	eb 02                	jmp    c0026e53 <__truncdfsf2+0xc0>
c0026e51:	31 c0                	xor    eax,eax
c0026e53:	c1 fa 17             	sar    edx,0x17
c0026e56:	80 ca ff             	or     dl,0xff
c0026e59:	eb 0e                	jmp    c0026e69 <__truncdfsf2+0xd6>
c0026e5b:	c1 fa 1f             	sar    edx,0x1f
c0026e5e:	c1 e2 08             	shl    edx,0x8
c0026e61:	09 ca                	or     edx,ecx
c0026e63:	eb 04                	jmp    c0026e69 <__truncdfsf2+0xd6>
c0026e65:	31 d2                	xor    edx,edx
c0026e67:	31 c0                	xor    eax,eax
c0026e69:	c1 e2 17             	shl    edx,0x17
c0026e6c:	c1 e8 08             	shr    eax,0x8
c0026e6f:	09 d0                	or     eax,edx
c0026e71:	eb 3c                	jmp    c0026eaf <__truncdfsf2+0x11c>
c0026e73:	81 e9 80 03 00 00    	sub    ecx,0x380
c0026e79:	89 ca                	mov    edx,ecx
c0026e7b:	c1 fa 0b             	sar    edx,0xb
c0026e7e:	c1 e2 08             	shl    edx,0x8
c0026e81:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0026e84:	31 db                	xor    ebx,ebx
c0026e86:	85 ff                	test   edi,edi
c0026e88:	0f 95 c3             	setne  bl
c0026e8b:	09 d8                	or     eax,ebx
c0026e8d:	89 c3                	mov    ebx,eax
c0026e8f:	c1 eb 08             	shr    ebx,0x8
c0026e92:	a8 7f                	test   al,0x7f
c0026e94:	0f 95 c2             	setne  dl
c0026e97:	89 d6                	mov    esi,edx
c0026e99:	09 de                	or     esi,ebx
c0026e9b:	83 e6 01             	and    esi,0x1
c0026e9e:	c1 e8 07             	shr    eax,0x7
c0026ea1:	21 f0                	and    eax,esi
c0026ea3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026ea6:	09 ca                	or     edx,ecx
c0026ea8:	c1 e2 17             	shl    edx,0x17
c0026eab:	09 da                	or     edx,ebx
c0026ead:	01 d0                	add    eax,edx
c0026eaf:	83 c4 0c             	add    esp,0xc
c0026eb2:	5b                   	pop    ebx
c0026eb3:	5e                   	pop    esi
c0026eb4:	5f                   	pop    edi
c0026eb5:	5d                   	pop    ebp
c0026eb6:	c3                   	ret    

c0026eb7 <__extendsfdf2>:
c0026eb7:	55                   	push   ebp
c0026eb8:	89 e5                	mov    ebp,esp
c0026eba:	57                   	push   edi
c0026ebb:	56                   	push   esi
c0026ebc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026ebf:	89 d1                	mov    ecx,edx
c0026ec1:	c1 f9 17             	sar    ecx,0x17
c0026ec4:	c1 e2 08             	shl    edx,0x8
c0026ec7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026ecd:	89 c8                	mov    eax,ecx
c0026ecf:	80 e4 f8             	and    ah,0xf8
c0026ed2:	8d 71 01             	lea    esi,[ecx+0x1]
c0026ed5:	81 e6 fe 00 00 00    	and    esi,0xfe
c0026edb:	75 27                	jne    c0026f04 <__extendsfdf2+0x4d>
c0026edd:	81 e1 ff 00 00 00    	and    ecx,0xff
c0026ee3:	75 18                	jne    c0026efd <__extendsfdf2+0x46>
c0026ee5:	85 d2                	test   edx,edx
c0026ee7:	74 20                	je     c0026f09 <__extendsfdf2+0x52>
c0026ee9:	41                   	inc    ecx
c0026eea:	01 d2                	add    edx,edx
c0026eec:	79 fb                	jns    c0026ee9 <__extendsfdf2+0x32>
c0026eee:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026ef4:	29 c8                	sub    eax,ecx
c0026ef6:	05 81 03 00 00       	add    eax,0x381
c0026efb:	eb 0c                	jmp    c0026f09 <__extendsfdf2+0x52>
c0026efd:	05 00 07 00 00       	add    eax,0x700
c0026f02:	eb 05                	jmp    c0026f09 <__extendsfdf2+0x52>
c0026f04:	05 80 03 00 00       	add    eax,0x380
c0026f09:	c1 e0 14             	shl    eax,0x14
c0026f0c:	89 c1                	mov    ecx,eax
c0026f0e:	89 d0                	mov    eax,edx
c0026f10:	c1 e8 0b             	shr    eax,0xb
c0026f13:	09 c1                	or     ecx,eax
c0026f15:	c1 e2 15             	shl    edx,0x15
c0026f18:	89 d0                	mov    eax,edx
c0026f1a:	89 ca                	mov    edx,ecx
c0026f1c:	5e                   	pop    esi
c0026f1d:	5f                   	pop    edi
c0026f1e:	5d                   	pop    ebp
c0026f1f:	c3                   	ret    

c0026f20 <fabs>:
c0026f20:	83 ec 0c             	sub    esp,0xc
c0026f23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f27:	89 04 24             	mov    DWORD PTR [esp],eax
c0026f2a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026f2e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026f33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0026f37:	dd 04 24             	fld    QWORD PTR [esp]
c0026f3a:	83 c4 0c             	add    esp,0xc
c0026f3d:	c3                   	ret    
c0026f3e:	66 90                	xchg   ax,ax

c0026f40 <lrint>:
c0026f40:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0026f44:	83 ec 04             	sub    esp,0x4
c0026f47:	db 1c 24             	fistp  DWORD PTR [esp]
c0026f4a:	58                   	pop    eax
c0026f4b:	c3                   	ret    

c0026f4c <lrintf>:
c0026f4c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0026f50:	83 ec 04             	sub    esp,0x4
c0026f53:	db 1c 24             	fistp  DWORD PTR [esp]
c0026f56:	58                   	pop    eax
c0026f57:	c3                   	ret    

Disassembly of section .init:

c0026f58 <_init>:
c0026f58:	55                   	push   ebp
c0026f59:	89 e5                	mov    ebp,esp
c0026f5b:	e8 b8 91 fd ff       	call   c0000118 <frame_dummy>
c0026f60:	e8 63 e0 ff ff       	call   c0024fc8 <__do_global_ctors_aux>
c0026f65:	5d                   	pop    ebp
c0026f66:	c3                   	ret    

Disassembly of section .fini:

c0026f67 <_fini>:
c0026f67:	55                   	push   ebp
c0026f68:	89 e5                	mov    ebp,esp
c0026f6a:	e8 39 91 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0026f6f:	5d                   	pop    ebp
c0026f70:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0026f72 <Computer::~Computer()>:
c0026f72:	83 ec 0c             	sub    esp,0xc
c0026f75:	ba 10 8a 02 c0       	mov    edx,0xc0028a10
c0026f7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f7e:	89 10                	mov    DWORD PTR [eax],edx
c0026f80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f84:	83 ec 0c             	sub    esp,0xc
c0026f87:	50                   	push   eax
c0026f88:	e8 bb c9 fe ff       	call   c0013948 <Device::~Device()>
c0026f8d:	83 c4 10             	add    esp,0x10
c0026f90:	90                   	nop
c0026f91:	83 c4 0c             	add    esp,0xc
c0026f94:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0026f96 <Computer::~Computer()>:
c0026f96:	83 ec 0c             	sub    esp,0xc
c0026f99:	83 ec 0c             	sub    esp,0xc
c0026f9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026fa0:	e8 cd ff ff ff       	call   c0026f72 <Computer::~Computer()>
c0026fa5:	83 c4 10             	add    esp,0x10
c0026fa8:	83 ec 08             	sub    esp,0x8
c0026fab:	68 ec 01 00 00       	push   0x1ec
c0026fb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026fb4:	e8 ee b5 fe ff       	call   c00125a7 <operator delete(void*, unsigned long)>
c0026fb9:	83 c4 10             	add    esp,0x10
c0026fbc:	83 c4 0c             	add    esp,0xc
c0026fbf:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0026fc0 <idleCommon()>:
c0026fc0:	83 ec 0c             	sub    esp,0xc
c0026fc3:	e8 68 5c ff ff       	call   c001cc30 <lockScheduler()>
c0026fc8:	e8 9f 5f ff ff       	call   c001cf6c <schedule()>
c0026fcd:	83 c4 0c             	add    esp,0xc
c0026fd0:	e9 5d 5c ff ff       	jmp    c001cc32 <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0026fd6 <LinkedList<UnixFile>::~LinkedList()>:
c0026fd6:	90                   	nop
c0026fd7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0026fd8 <LinkedList<UnixFile>::LinkedList()>:
c0026fd8:	83 ec 0c             	sub    esp,0xc
c0026fdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026fdf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0026fe5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026fe9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0026ff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ff4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0026ffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026fff:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027009:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027014:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002701b:	83 ec 0c             	sub    esp,0xc
c002701e:	68 6a 8c 02 c0       	push   0xc0028c6a
c0027023:	e8 5f b6 fe ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0027028:	83 c4 10             	add    esp,0x10
c002702b:	90                   	nop
c002702c:	83 c4 0c             	add    esp,0xc
c002702f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0027030 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0027030:	83 ec 0c             	sub    esp,0xc
c0027033:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0027038:	75 10                	jne    c002704a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002703a:	83 ec 0c             	sub    esp,0xc
c002703d:	68 84 8c 02 c0       	push   0xc0028c84
c0027042:	e8 5a 27 ff ff       	call   c00197a1 <Krnl::panic(char const*)>
c0027047:	83 c4 10             	add    esp,0x10
c002704a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002704e:	8b 00                	mov    eax,DWORD PTR [eax]
c0027050:	85 c0                	test   eax,eax
c0027052:	74 34                	je     c0027088 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0027054:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027058:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002705b:	85 c0                	test   eax,eax
c002705d:	74 29                	je     c0027088 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002705f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027063:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027066:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002706a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002706d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027071:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027075:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027078:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002707c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002707f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027086:	eb 65                	jmp    c00270ed <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0027088:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002708c:	8b 00                	mov    eax,DWORD PTR [eax]
c002708e:	85 c0                	test   eax,eax
c0027090:	75 4b                	jne    c00270dd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0027092:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027096:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027099:	85 c0                	test   eax,eax
c002709b:	75 40                	jne    c00270dd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002709d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00270a5:	89 10                	mov    DWORD PTR [eax],edx
c00270a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00270af:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00270b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00270b9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00270c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270c4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00270c7:	85 c0                	test   eax,eax
c00270c9:	74 22                	je     c00270ed <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00270cb:	83 ec 0c             	sub    esp,0xc
c00270ce:	68 a6 8c 02 c0       	push   0xc0028ca6
c00270d3:	e8 c9 26 ff ff       	call   c00197a1 <Krnl::panic(char const*)>
c00270d8:	83 c4 10             	add    esp,0x10
c00270db:	eb 10                	jmp    c00270ed <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00270dd:	83 ec 0c             	sub    esp,0xc
c00270e0:	68 b0 8c 02 c0       	push   0xc0028cb0
c00270e5:	e8 b7 26 ff ff       	call   c00197a1 <Krnl::panic(char const*)>
c00270ea:	83 c4 10             	add    esp,0x10
c00270ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270f1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00270f4:	8d 50 01             	lea    edx,[eax+0x1]
c00270f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270fb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00270fe:	90                   	nop
c00270ff:	83 c4 0c             	add    esp,0xc
c0027102:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0027104 <LinkedList<UnixFile>::getFirstElement()>:
c0027104:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027108:	8b 00                	mov    eax,DWORD PTR [eax]
c002710a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002710c <LinkedList<UnixFile>::removeFirst()>:
c002710c:	83 ec 0c             	sub    esp,0xc
c002710f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027113:	8b 00                	mov    eax,DWORD PTR [eax]
c0027115:	85 c0                	test   eax,eax
c0027117:	75 12                	jne    c002712b <LinkedList<UnixFile>::removeFirst()+0x1f>
c0027119:	83 ec 0c             	sub    esp,0xc
c002711c:	68 bc 8c 02 c0       	push   0xc0028cbc
c0027121:	e8 7b 26 ff ff       	call   c00197a1 <Krnl::panic(char const*)>
c0027126:	83 c4 10             	add    esp,0x10
c0027129:	eb 7e                	jmp    c00271a9 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002712b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002712f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027132:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027135:	85 c0                	test   eax,eax
c0027137:	74 10                	je     c0027149 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0027139:	83 ec 0c             	sub    esp,0xc
c002713c:	68 07 8d 02 c0       	push   0xc0028d07
c0027141:	e8 5b 26 ff ff       	call   c00197a1 <Krnl::panic(char const*)>
c0027146:	83 c4 10             	add    esp,0x10
c0027149:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002714d:	8b 00                	mov    eax,DWORD PTR [eax]
c002714f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027152:	85 c0                	test   eax,eax
c0027154:	75 33                	jne    c0027189 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0027156:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002715a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027164:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002716b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002716f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027172:	83 f8 01             	cmp    eax,0x1
c0027175:	74 21                	je     c0027198 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0027177:	83 ec 0c             	sub    esp,0xc
c002717a:	68 e0 8c 02 c0       	push   0xc0028ce0
c002717f:	e8 1d 26 ff ff       	call   c00197a1 <Krnl::panic(char const*)>
c0027184:	83 c4 10             	add    esp,0x10
c0027187:	eb 0f                	jmp    c0027198 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0027189:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002718d:	8b 00                	mov    eax,DWORD PTR [eax]
c002718f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0027192:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027196:	89 10                	mov    DWORD PTR [eax],edx
c0027198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002719c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002719f:	8d 50 ff             	lea    edx,[eax-0x1]
c00271a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271a6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00271a9:	83 c4 0c             	add    esp,0xc
c00271ac:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00271ae <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00271ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00271b2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00271b5:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00271b6 <DriverlessDevice::~DriverlessDevice()>:
c00271b6:	ba c4 93 02 c0       	mov    edx,0xc00293c4
c00271bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00271bf:	89 10                	mov    DWORD PTR [eax],edx
c00271c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00271c5:	50                   	push   eax
c00271c6:	e8 7d c7 fe ff       	call   c0013948 <Device::~Device()>
c00271cb:	83 c4 04             	add    esp,0x4
c00271ce:	90                   	nop
c00271cf:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00271d0 <DriverlessDevice::~DriverlessDevice()>:
c00271d0:	83 ec 0c             	sub    esp,0xc
c00271d3:	83 ec 0c             	sub    esp,0xc
c00271d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00271da:	e8 d7 ff ff ff       	call   c00271b6 <DriverlessDevice::~DriverlessDevice()>
c00271df:	83 c4 10             	add    esp,0x10
c00271e2:	83 ec 08             	sub    esp,0x8
c00271e5:	68 58 01 00 00       	push   0x158
c00271ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00271ee:	e8 b4 b3 fe ff       	call   c00125a7 <operator delete(void*, unsigned long)>
c00271f3:	83 c4 10             	add    esp,0x10
c00271f6:	83 c4 0c             	add    esp,0xc
c00271f9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00271fa <LinkedList<Device>::addElement(Device*)>:
c00271fa:	83 ec 0c             	sub    esp,0xc
c00271fd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0027202:	75 10                	jne    c0027214 <LinkedList<Device>::addElement(Device*)+0x1a>
c0027204:	83 ec 0c             	sub    esp,0xc
c0027207:	68 84 8c 02 c0       	push   0xc0028c84
c002720c:	e8 90 25 ff ff       	call   c00197a1 <Krnl::panic(char const*)>
c0027211:	83 c4 10             	add    esp,0x10
c0027214:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027218:	8b 00                	mov    eax,DWORD PTR [eax]
c002721a:	85 c0                	test   eax,eax
c002721c:	74 3a                	je     c0027258 <LinkedList<Device>::addElement(Device*)+0x5e>
c002721e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027222:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027225:	85 c0                	test   eax,eax
c0027227:	74 2f                	je     c0027258 <LinkedList<Device>::addElement(Device*)+0x5e>
c0027229:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002722d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027230:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027234:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002723a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002723e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027242:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027245:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027249:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002724c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0027256:	eb 68                	jmp    c00272c0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0027258:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002725c:	8b 00                	mov    eax,DWORD PTR [eax]
c002725e:	85 c0                	test   eax,eax
c0027260:	75 4e                	jne    c00272b0 <LinkedList<Device>::addElement(Device*)+0xb6>
c0027262:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027266:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027269:	85 c0                	test   eax,eax
c002726b:	75 43                	jne    c00272b0 <LinkedList<Device>::addElement(Device*)+0xb6>
c002726d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027271:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027275:	89 10                	mov    DWORD PTR [eax],edx
c0027277:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002727b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002727f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027282:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027286:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027289:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0027293:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027297:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002729a:	85 c0                	test   eax,eax
c002729c:	74 22                	je     c00272c0 <LinkedList<Device>::addElement(Device*)+0xc6>
c002729e:	83 ec 0c             	sub    esp,0xc
c00272a1:	68 a6 8c 02 c0       	push   0xc0028ca6
c00272a6:	e8 f6 24 ff ff       	call   c00197a1 <Krnl::panic(char const*)>
c00272ab:	83 c4 10             	add    esp,0x10
c00272ae:	eb 10                	jmp    c00272c0 <LinkedList<Device>::addElement(Device*)+0xc6>
c00272b0:	83 ec 0c             	sub    esp,0xc
c00272b3:	68 b0 8c 02 c0       	push   0xc0028cb0
c00272b8:	e8 e4 24 ff ff       	call   c00197a1 <Krnl::panic(char const*)>
c00272bd:	83 c4 10             	add    esp,0x10
c00272c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272c4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00272c7:	8d 50 01             	lea    edx,[eax+0x1]
c00272ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272ce:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00272d1:	90                   	nop
c00272d2:	83 c4 0c             	add    esp,0xc
c00272d5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00272d6 <LinkedList<Device>::LinkedList()>:
c00272d6:	83 ec 0c             	sub    esp,0xc
c00272d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272dd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00272e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272e7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00272ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272f2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00272f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272fd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027303:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027307:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002730e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027312:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027319:	83 ec 0c             	sub    esp,0xc
c002731c:	68 6a 8c 02 c0       	push   0xc0028c6a
c0027321:	e8 61 b3 fe ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0027326:	83 c4 10             	add    esp,0x10
c0027329:	90                   	nop
c002732a:	83 c4 0c             	add    esp,0xc
c002732d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002732e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002732e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027332:	8b 00                	mov    eax,DWORD PTR [eax]
c0027334:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0027336 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0027336:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002733a:	8b 00                	mov    eax,DWORD PTR [eax]
c002733c:	85 c0                	test   eax,eax
c002733e:	75 0e                	jne    c002734e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0027340:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027344:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027347:	85 c0                	test   eax,eax
c0027349:	75 03                	jne    c002734e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002734b:	b0 01                	mov    al,0x1
c002734d:	c3                   	ret    
c002734e:	b0 00                	mov    al,0x0
c0027350:	90                   	nop
c0027351:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0027352 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0027352:	83 ec 0c             	sub    esp,0xc
c0027355:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027359:	8b 00                	mov    eax,DWORD PTR [eax]
c002735b:	85 c0                	test   eax,eax
c002735d:	75 15                	jne    c0027374 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002735f:	83 ec 0c             	sub    esp,0xc
c0027362:	68 bc 8c 02 c0       	push   0xc0028cbc
c0027367:	e8 35 24 ff ff       	call   c00197a1 <Krnl::panic(char const*)>
c002736c:	83 c4 10             	add    esp,0x10
c002736f:	e9 88 00 00 00       	jmp    c00273fc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0027374:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027378:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002737b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002737e:	85 c0                	test   eax,eax
c0027380:	0f 95 c0             	setne  al
c0027383:	84 c0                	test   al,al
c0027385:	74 10                	je     c0027397 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0027387:	83 ec 0c             	sub    esp,0xc
c002738a:	68 07 8d 02 c0       	push   0xc0028d07
c002738f:	e8 0d 24 ff ff       	call   c00197a1 <Krnl::panic(char const*)>
c0027394:	83 c4 10             	add    esp,0x10
c0027397:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002739b:	8b 00                	mov    eax,DWORD PTR [eax]
c002739d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00273a0:	85 c0                	test   eax,eax
c00273a2:	0f 94 c0             	sete   al
c00273a5:	84 c0                	test   al,al
c00273a7:	74 33                	je     c00273dc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c00273a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273ad:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00273b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00273be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273c2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00273c5:	83 f8 01             	cmp    eax,0x1
c00273c8:	74 21                	je     c00273eb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00273ca:	83 ec 0c             	sub    esp,0xc
c00273cd:	68 e0 8c 02 c0       	push   0xc0028ce0
c00273d2:	e8 ca 23 ff ff       	call   c00197a1 <Krnl::panic(char const*)>
c00273d7:	83 c4 10             	add    esp,0x10
c00273da:	eb 0f                	jmp    c00273eb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00273dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00273e2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00273e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273e9:	89 10                	mov    DWORD PTR [eax],edx
c00273eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273ef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00273f2:	8d 50 ff             	lea    edx,[eax-0x1]
c00273f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273f9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00273fc:	83 c4 0c             	add    esp,0xc
c00273ff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0027400 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0027400:	83 ec 0c             	sub    esp,0xc
c0027403:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0027408:	75 10                	jne    c002741a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002740a:	83 ec 0c             	sub    esp,0xc
c002740d:	68 84 8c 02 c0       	push   0xc0028c84
c0027412:	e8 8a 23 ff ff       	call   c00197a1 <Krnl::panic(char const*)>
c0027417:	83 c4 10             	add    esp,0x10
c002741a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002741e:	8b 00                	mov    eax,DWORD PTR [eax]
c0027420:	85 c0                	test   eax,eax
c0027422:	74 34                	je     c0027458 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0027424:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027428:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002742b:	85 c0                	test   eax,eax
c002742d:	74 29                	je     c0027458 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002742f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027433:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027436:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002743a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002743d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027441:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027445:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002744c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002744f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0027456:	eb 65                	jmp    c00274bd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0027458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002745c:	8b 00                	mov    eax,DWORD PTR [eax]
c002745e:	85 c0                	test   eax,eax
c0027460:	75 4b                	jne    c00274ad <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0027462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027466:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027469:	85 c0                	test   eax,eax
c002746b:	75 40                	jne    c00274ad <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c002746d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027471:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027475:	89 10                	mov    DWORD PTR [eax],edx
c0027477:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002747b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002747f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027486:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027489:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0027490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027494:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027497:	85 c0                	test   eax,eax
c0027499:	74 22                	je     c00274bd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002749b:	83 ec 0c             	sub    esp,0xc
c002749e:	68 a6 8c 02 c0       	push   0xc0028ca6
c00274a3:	e8 f9 22 ff ff       	call   c00197a1 <Krnl::panic(char const*)>
c00274a8:	83 c4 10             	add    esp,0x10
c00274ab:	eb 10                	jmp    c00274bd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00274ad:	83 ec 0c             	sub    esp,0xc
c00274b0:	68 b0 8c 02 c0       	push   0xc0028cb0
c00274b5:	e8 e7 22 ff ff       	call   c00197a1 <Krnl::panic(char const*)>
c00274ba:	83 c4 10             	add    esp,0x10
c00274bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274c1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00274c4:	8d 50 01             	lea    edx,[eax+0x1]
c00274c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274cb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00274ce:	90                   	nop
c00274cf:	83 c4 0c             	add    esp,0xc
c00274d2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c00274d4 <ACPI::~ACPI()>:
c00274d4:	83 ec 0c             	sub    esp,0xc
c00274d7:	ba 68 9c 02 c0       	mov    edx,0xc0029c68
c00274dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274e0:	89 10                	mov    DWORD PTR [eax],edx
c00274e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274e6:	83 ec 0c             	sub    esp,0xc
c00274e9:	50                   	push   eax
c00274ea:	e8 59 c4 fe ff       	call   c0013948 <Device::~Device()>
c00274ef:	83 c4 10             	add    esp,0x10
c00274f2:	90                   	nop
c00274f3:	83 c4 0c             	add    esp,0xc
c00274f6:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c00274f8 <ACPI::~ACPI()>:
c00274f8:	83 ec 0c             	sub    esp,0xc
c00274fb:	83 ec 0c             	sub    esp,0xc
c00274fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027502:	e8 cd ff ff ff       	call   c00274d4 <ACPI::~ACPI()>
c0027507:	83 c4 10             	add    esp,0x10
c002750a:	83 ec 08             	sub    esp,0x8
c002750d:	68 68 22 00 00       	push   0x2268
c0027512:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027516:	e8 8c b0 fe ff       	call   c00125a7 <operator delete(void*, unsigned long)>
c002751b:	83 c4 10             	add    esp,0x10
c002751e:	83 c4 0c             	add    esp,0xc
c0027521:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0027522 <CPU::~CPU()>:
c0027522:	83 ec 0c             	sub    esp,0xc
c0027525:	ba 58 a0 02 c0       	mov    edx,0xc002a058
c002752a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002752e:	89 10                	mov    DWORD PTR [eax],edx
c0027530:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027534:	83 ec 0c             	sub    esp,0xc
c0027537:	50                   	push   eax
c0027538:	e8 0b c4 fe ff       	call   c0013948 <Device::~Device()>
c002753d:	83 c4 10             	add    esp,0x10
c0027540:	90                   	nop
c0027541:	83 c4 0c             	add    esp,0xc
c0027544:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0027546 <CPU::~CPU()>:
c0027546:	83 ec 0c             	sub    esp,0xc
c0027549:	83 ec 0c             	sub    esp,0xc
c002754c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027550:	e8 cd ff ff ff       	call   c0027522 <CPU::~CPU()>
c0027555:	83 c4 10             	add    esp,0x10
c0027558:	83 ec 08             	sub    esp,0x8
c002755b:	68 98 11 00 00       	push   0x1198
c0027560:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027564:	e8 3e b0 fe ff       	call   c00125a7 <operator delete(void*, unsigned long)>
c0027569:	83 c4 10             	add    esp,0x10
c002756c:	83 c4 0c             	add    esp,0xc
c002756f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0027570 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0027570:	90                   	nop
c0027571:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0027572 <ThreadControlBlock::ThreadControlBlock()>:
c0027572:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027576:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002757d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027581:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0027588:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002758c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0027593:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027597:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c002759e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00275a2:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00275a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00275aa:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c00275ae:	90                   	nop
c00275af:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00275b0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00275b0:	83 ec 0c             	sub    esp,0xc
c00275b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275b7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00275bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275c1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00275c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275cc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00275d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275d7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00275dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275e1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00275e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275ec:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00275f3:	83 ec 0c             	sub    esp,0xc
c00275f6:	68 6a 8c 02 c0       	push   0xc0028c6a
c00275fb:	e8 87 b0 fe ff       	call   c0012687 <Dbg::kprintf(char const*, ...)>
c0027600:	83 c4 10             	add    esp,0x10
c0027603:	90                   	nop
c0027604:	83 c4 0c             	add    esp,0xc
c0027607:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0027608 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0027608:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002760c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002760f:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0027610 <Vm::_FPUState::_FPUState()>:
c0027610:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027614:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c002761b:	90                   	nop
c002761c:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002761e <PCI::~PCI()>:
c002761e:	83 ec 0c             	sub    esp,0xc
c0027621:	ba e4 ae 02 c0       	mov    edx,0xc002aee4
c0027626:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002762a:	89 10                	mov    DWORD PTR [eax],edx
c002762c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027630:	83 ec 0c             	sub    esp,0xc
c0027633:	50                   	push   eax
c0027634:	e8 1f bd fe ff       	call   c0013358 <Bus::~Bus()>
c0027639:	83 c4 10             	add    esp,0x10
c002763c:	90                   	nop
c002763d:	83 c4 0c             	add    esp,0xc
c0027640:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0027642 <PCI::~PCI()>:
c0027642:	83 ec 0c             	sub    esp,0xc
c0027645:	83 ec 0c             	sub    esp,0xc
c0027648:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002764c:	e8 cd ff ff ff       	call   c002761e <PCI::~PCI()>
c0027651:	83 c4 10             	add    esp,0x10
c0027654:	83 ec 08             	sub    esp,0x8
c0027657:	68 58 01 00 00       	push   0x158
c002765c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027660:	e8 42 af fe ff       	call   c00125a7 <operator delete(void*, unsigned long)>
c0027665:	83 c4 10             	add    esp,0x10
c0027668:	83 c4 0c             	add    esp,0xc
c002766b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002766c <IDE::~IDE()>:
c002766c:	83 ec 0c             	sub    esp,0xc
c002766f:	ba 48 b1 02 c0       	mov    edx,0xc002b148
c0027674:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027678:	89 10                	mov    DWORD PTR [eax],edx
c002767a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002767e:	83 ec 0c             	sub    esp,0xc
c0027681:	50                   	push   eax
c0027682:	e8 b1 c7 fe ff       	call   c0013e38 <HardDiskController::~HardDiskController()>
c0027687:	83 c4 10             	add    esp,0x10
c002768a:	90                   	nop
c002768b:	83 c4 0c             	add    esp,0xc
c002768e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0027690 <IDE::~IDE()>:
c0027690:	83 ec 0c             	sub    esp,0xc
c0027693:	83 ec 0c             	sub    esp,0xc
c0027696:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002769a:	e8 cd ff ff ff       	call   c002766c <IDE::~IDE()>
c002769f:	83 c4 10             	add    esp,0x10
c00276a2:	83 ec 08             	sub    esp,0x8
c00276a5:	68 70 02 00 00       	push   0x270
c00276aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00276ae:	e8 f4 ae fe ff       	call   c00125a7 <operator delete(void*, unsigned long)>
c00276b3:	83 c4 10             	add    esp,0x10
c00276b6:	83 c4 0c             	add    esp,0xc
c00276b9:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00276ba <SATABus::~SATABus()>:
c00276ba:	83 ec 0c             	sub    esp,0xc
c00276bd:	ba 28 b2 02 c0       	mov    edx,0xc002b228
c00276c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276c6:	89 10                	mov    DWORD PTR [eax],edx
c00276c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276cc:	83 ec 0c             	sub    esp,0xc
c00276cf:	50                   	push   eax
c00276d0:	e8 63 c7 fe ff       	call   c0013e38 <HardDiskController::~HardDiskController()>
c00276d5:	83 c4 10             	add    esp,0x10
c00276d8:	90                   	nop
c00276d9:	83 c4 0c             	add    esp,0xc
c00276dc:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00276de <SATABus::~SATABus()>:
c00276de:	83 ec 0c             	sub    esp,0xc
c00276e1:	83 ec 0c             	sub    esp,0xc
c00276e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00276e8:	e8 cd ff ff ff       	call   c00276ba <SATABus::~SATABus()>
c00276ed:	83 c4 10             	add    esp,0x10
c00276f0:	83 ec 08             	sub    esp,0x8
c00276f3:	68 64 01 00 00       	push   0x164
c00276f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00276fc:	e8 a6 ae fe ff       	call   c00125a7 <operator delete(void*, unsigned long)>
c0027701:	83 c4 10             	add    esp,0x10
c0027704:	83 c4 0c             	add    esp,0xc
c0027707:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0027708 <ATA::~ATA()>:
c0027708:	83 ec 0c             	sub    esp,0xc
c002770b:	ba 68 b2 02 c0       	mov    edx,0xc002b268
c0027710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027714:	89 10                	mov    DWORD PTR [eax],edx
c0027716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002771a:	83 ec 0c             	sub    esp,0xc
c002771d:	50                   	push   eax
c002771e:	e8 f3 c7 fe ff       	call   c0013f16 <PhysicalDisk::~PhysicalDisk()>
c0027723:	83 c4 10             	add    esp,0x10
c0027726:	90                   	nop
c0027727:	83 c4 0c             	add    esp,0xc
c002772a:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002772c <ATA::~ATA()>:
c002772c:	83 ec 0c             	sub    esp,0xc
c002772f:	83 ec 0c             	sub    esp,0xc
c0027732:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027736:	e8 cd ff ff ff       	call   c0027708 <ATA::~ATA()>
c002773b:	83 c4 10             	add    esp,0x10
c002773e:	83 ec 08             	sub    esp,0x8
c0027741:	68 7c 01 00 00       	push   0x17c
c0027746:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002774a:	e8 58 ae fe ff       	call   c00125a7 <operator delete(void*, unsigned long)>
c002774f:	83 c4 10             	add    esp,0x10
c0027752:	83 c4 0c             	add    esp,0xc
c0027755:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0027756 <ATAPI::~ATAPI()>:
c0027756:	83 ec 0c             	sub    esp,0xc
c0027759:	ba d4 b2 02 c0       	mov    edx,0xc002b2d4
c002775e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027762:	89 10                	mov    DWORD PTR [eax],edx
c0027764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027768:	83 ec 0c             	sub    esp,0xc
c002776b:	50                   	push   eax
c002776c:	e8 a5 c7 fe ff       	call   c0013f16 <PhysicalDisk::~PhysicalDisk()>
c0027771:	83 c4 10             	add    esp,0x10
c0027774:	90                   	nop
c0027775:	83 c4 0c             	add    esp,0xc
c0027778:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c002777a <ATAPI::~ATAPI()>:
c002777a:	83 ec 0c             	sub    esp,0xc
c002777d:	83 ec 0c             	sub    esp,0xc
c0027780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027784:	e8 cd ff ff ff       	call   c0027756 <ATAPI::~ATAPI()>
c0027789:	83 c4 10             	add    esp,0x10
c002778c:	83 ec 08             	sub    esp,0x8
c002778f:	68 80 01 00 00       	push   0x180
c0027794:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027798:	e8 0a ae fe ff       	call   c00125a7 <operator delete(void*, unsigned long)>
c002779d:	83 c4 10             	add    esp,0x10
c00277a0:	83 c4 0c             	add    esp,0xc
c00277a3:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00277a4 <SATA::~SATA()>:
c00277a4:	83 ec 0c             	sub    esp,0xc
c00277a7:	ba f8 b3 02 c0       	mov    edx,0xc002b3f8
c00277ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277b0:	89 10                	mov    DWORD PTR [eax],edx
c00277b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277b6:	83 ec 0c             	sub    esp,0xc
c00277b9:	50                   	push   eax
c00277ba:	e8 57 c7 fe ff       	call   c0013f16 <PhysicalDisk::~PhysicalDisk()>
c00277bf:	83 c4 10             	add    esp,0x10
c00277c2:	90                   	nop
c00277c3:	83 c4 0c             	add    esp,0xc
c00277c6:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00277c8 <SATA::~SATA()>:
c00277c8:	83 ec 0c             	sub    esp,0xc
c00277cb:	83 ec 0c             	sub    esp,0xc
c00277ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00277d2:	e8 cd ff ff ff       	call   c00277a4 <SATA::~SATA()>
c00277d7:	83 c4 10             	add    esp,0x10
c00277da:	83 ec 08             	sub    esp,0x8
c00277dd:	68 74 01 00 00       	push   0x174
c00277e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00277e6:	e8 bc ad fe ff       	call   c00125a7 <operator delete(void*, unsigned long)>
c00277eb:	83 c4 10             	add    esp,0x10
c00277ee:	83 c4 0c             	add    esp,0xc
c00277f1:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c00277f2 <AVX::~AVX()>:
c00277f2:	83 ec 0c             	sub    esp,0xc
c00277f5:	ba 34 b4 02 c0       	mov    edx,0xc002b434
c00277fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277fe:	89 10                	mov    DWORD PTR [eax],edx
c0027800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027804:	83 ec 0c             	sub    esp,0xc
c0027807:	50                   	push   eax
c0027808:	e8 8d c7 fe ff       	call   c0013f9a <FPU::~FPU()>
c002780d:	83 c4 10             	add    esp,0x10
c0027810:	90                   	nop
c0027811:	83 c4 0c             	add    esp,0xc
c0027814:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0027816 <AVX::~AVX()>:
c0027816:	83 ec 0c             	sub    esp,0xc
c0027819:	83 ec 0c             	sub    esp,0xc
c002781c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027820:	e8 cd ff ff ff       	call   c00277f2 <AVX::~AVX()>
c0027825:	83 c4 10             	add    esp,0x10
c0027828:	83 ec 08             	sub    esp,0x8
c002782b:	68 58 01 00 00       	push   0x158
c0027830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027834:	e8 6e ad fe ff       	call   c00125a7 <operator delete(void*, unsigned long)>
c0027839:	83 c4 10             	add    esp,0x10
c002783c:	83 c4 0c             	add    esp,0xc
c002783f:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0027840 <MMX::~MMX()>:
c0027840:	83 ec 0c             	sub    esp,0xc
c0027843:	ba 74 b4 02 c0       	mov    edx,0xc002b474
c0027848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002784c:	89 10                	mov    DWORD PTR [eax],edx
c002784e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027852:	83 ec 0c             	sub    esp,0xc
c0027855:	50                   	push   eax
c0027856:	e8 3f c7 fe ff       	call   c0013f9a <FPU::~FPU()>
c002785b:	83 c4 10             	add    esp,0x10
c002785e:	90                   	nop
c002785f:	83 c4 0c             	add    esp,0xc
c0027862:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0027864 <MMX::~MMX()>:
c0027864:	83 ec 0c             	sub    esp,0xc
c0027867:	83 ec 0c             	sub    esp,0xc
c002786a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002786e:	e8 cd ff ff ff       	call   c0027840 <MMX::~MMX()>
c0027873:	83 c4 10             	add    esp,0x10
c0027876:	83 ec 08             	sub    esp,0x8
c0027879:	68 58 01 00 00       	push   0x158
c002787e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027882:	e8 20 ad fe ff       	call   c00125a7 <operator delete(void*, unsigned long)>
c0027887:	83 c4 10             	add    esp,0x10
c002788a:	83 c4 0c             	add    esp,0xc
c002788d:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c002788e <SSE::~SSE()>:
c002788e:	83 ec 0c             	sub    esp,0xc
c0027891:	ba b4 b4 02 c0       	mov    edx,0xc002b4b4
c0027896:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002789a:	89 10                	mov    DWORD PTR [eax],edx
c002789c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278a0:	83 ec 0c             	sub    esp,0xc
c00278a3:	50                   	push   eax
c00278a4:	e8 f1 c6 fe ff       	call   c0013f9a <FPU::~FPU()>
c00278a9:	83 c4 10             	add    esp,0x10
c00278ac:	90                   	nop
c00278ad:	83 c4 0c             	add    esp,0xc
c00278b0:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c00278b2 <SSE::~SSE()>:
c00278b2:	83 ec 0c             	sub    esp,0xc
c00278b5:	83 ec 0c             	sub    esp,0xc
c00278b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00278bc:	e8 cd ff ff ff       	call   c002788e <SSE::~SSE()>
c00278c1:	83 c4 10             	add    esp,0x10
c00278c4:	83 ec 08             	sub    esp,0x8
c00278c7:	68 58 01 00 00       	push   0x158
c00278cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00278d0:	e8 d2 ac fe ff       	call   c00125a7 <operator delete(void*, unsigned long)>
c00278d5:	83 c4 10             	add    esp,0x10
c00278d8:	83 c4 0c             	add    esp,0xc
c00278db:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c00278dc <x87::~x87()>:
c00278dc:	83 ec 0c             	sub    esp,0xc
c00278df:	ba f4 b4 02 c0       	mov    edx,0xc002b4f4
c00278e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278e8:	89 10                	mov    DWORD PTR [eax],edx
c00278ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278ee:	83 ec 0c             	sub    esp,0xc
c00278f1:	50                   	push   eax
c00278f2:	e8 a3 c6 fe ff       	call   c0013f9a <FPU::~FPU()>
c00278f7:	83 c4 10             	add    esp,0x10
c00278fa:	90                   	nop
c00278fb:	83 c4 0c             	add    esp,0xc
c00278fe:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0027900 <x87::~x87()>:
c0027900:	83 ec 0c             	sub    esp,0xc
c0027903:	83 ec 0c             	sub    esp,0xc
c0027906:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002790a:	e8 cd ff ff ff       	call   c00278dc <x87::~x87()>
c002790f:	83 c4 10             	add    esp,0x10
c0027912:	83 ec 08             	sub    esp,0x8
c0027915:	68 58 01 00 00       	push   0x158
c002791a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002791e:	e8 84 ac fe ff       	call   c00125a7 <operator delete(void*, unsigned long)>
c0027923:	83 c4 10             	add    esp,0x10
c0027926:	83 c4 0c             	add    esp,0xc
c0027929:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c002792a <IOAPIC::~IOAPIC()>:
c002792a:	83 ec 0c             	sub    esp,0xc
c002792d:	ba 4c b6 02 c0       	mov    edx,0xc002b64c
c0027932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027936:	89 10                	mov    DWORD PTR [eax],edx
c0027938:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002793c:	83 ec 0c             	sub    esp,0xc
c002793f:	50                   	push   eax
c0027940:	e8 03 c0 fe ff       	call   c0013948 <Device::~Device()>
c0027945:	83 c4 10             	add    esp,0x10
c0027948:	90                   	nop
c0027949:	83 c4 0c             	add    esp,0xc
c002794c:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002794e <IOAPIC::~IOAPIC()>:
c002794e:	83 ec 0c             	sub    esp,0xc
c0027951:	83 ec 0c             	sub    esp,0xc
c0027954:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027958:	e8 cd ff ff ff       	call   c002792a <IOAPIC::~IOAPIC()>
c002795d:	83 c4 10             	add    esp,0x10
c0027960:	83 ec 08             	sub    esp,0x8
c0027963:	68 68 01 00 00       	push   0x168
c0027968:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002796c:	e8 36 ac fe ff       	call   c00125a7 <operator delete(void*, unsigned long)>
c0027971:	83 c4 10             	add    esp,0x10
c0027974:	83 c4 0c             	add    esp,0xc
c0027977:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0027978 <APIC::~APIC()>:
c0027978:	83 ec 0c             	sub    esp,0xc
c002797b:	ba 04 b6 02 c0       	mov    edx,0xc002b604
c0027980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027984:	89 10                	mov    DWORD PTR [eax],edx
c0027986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002798a:	83 ec 0c             	sub    esp,0xc
c002798d:	50                   	push   eax
c002798e:	e8 d1 ca fe ff       	call   c0014464 <InterruptController::~InterruptController()>
c0027993:	83 c4 10             	add    esp,0x10
c0027996:	90                   	nop
c0027997:	83 c4 0c             	add    esp,0xc
c002799a:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c002799c <APIC::~APIC()>:
c002799c:	83 ec 0c             	sub    esp,0xc
c002799f:	83 ec 0c             	sub    esp,0xc
c00279a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00279a6:	e8 cd ff ff ff       	call   c0027978 <APIC::~APIC()>
c00279ab:	83 c4 10             	add    esp,0x10
c00279ae:	83 ec 08             	sub    esp,0x8
c00279b1:	68 58 21 00 00       	push   0x2158
c00279b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00279ba:	e8 e8 ab fe ff       	call   c00125a7 <operator delete(void*, unsigned long)>
c00279bf:	83 c4 10             	add    esp,0x10
c00279c2:	83 c4 0c             	add    esp,0xc
c00279c5:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c00279c6 <PIC::~PIC()>:
c00279c6:	83 ec 0c             	sub    esp,0xc
c00279c9:	ba 9c b6 02 c0       	mov    edx,0xc002b69c
c00279ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279d2:	89 10                	mov    DWORD PTR [eax],edx
c00279d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279d8:	83 ec 0c             	sub    esp,0xc
c00279db:	50                   	push   eax
c00279dc:	e8 83 ca fe ff       	call   c0014464 <InterruptController::~InterruptController()>
c00279e1:	83 c4 10             	add    esp,0x10
c00279e4:	90                   	nop
c00279e5:	83 c4 0c             	add    esp,0xc
c00279e8:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c00279ea <PIC::~PIC()>:
c00279ea:	83 ec 0c             	sub    esp,0xc
c00279ed:	83 ec 0c             	sub    esp,0xc
c00279f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00279f4:	e8 cd ff ff ff       	call   c00279c6 <PIC::~PIC()>
c00279f9:	83 c4 10             	add    esp,0x10
c00279fc:	83 ec 08             	sub    esp,0x8
c00279ff:	68 58 21 00 00       	push   0x2158
c0027a04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a08:	e8 9a ab fe ff       	call   c00125a7 <operator delete(void*, unsigned long)>
c0027a0d:	83 c4 10             	add    esp,0x10
c0027a10:	83 c4 0c             	add    esp,0xc
c0027a13:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0027a14 <APICTimer::~APICTimer()>:
c0027a14:	83 ec 0c             	sub    esp,0xc
c0027a17:	ba f0 b6 02 c0       	mov    edx,0xc002b6f0
c0027a1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a20:	89 10                	mov    DWORD PTR [eax],edx
c0027a22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a26:	83 ec 0c             	sub    esp,0xc
c0027a29:	50                   	push   eax
c0027a2a:	e8 35 e8 fe ff       	call   c0016264 <Timer::~Timer()>
c0027a2f:	83 c4 10             	add    esp,0x10
c0027a32:	90                   	nop
c0027a33:	83 c4 0c             	add    esp,0xc
c0027a36:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0027a38 <APICTimer::~APICTimer()>:
c0027a38:	83 ec 0c             	sub    esp,0xc
c0027a3b:	83 ec 0c             	sub    esp,0xc
c0027a3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a42:	e8 cd ff ff ff       	call   c0027a14 <APICTimer::~APICTimer()>
c0027a47:	83 c4 10             	add    esp,0x10
c0027a4a:	83 ec 08             	sub    esp,0x8
c0027a4d:	68 60 01 00 00       	push   0x160
c0027a52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a56:	e8 4c ab fe ff       	call   c00125a7 <operator delete(void*, unsigned long)>
c0027a5b:	83 c4 10             	add    esp,0x10
c0027a5e:	83 c4 0c             	add    esp,0xc
c0027a61:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0027a62 <PIT::~PIT()>:
c0027a62:	83 ec 0c             	sub    esp,0xc
c0027a65:	ba 40 b7 02 c0       	mov    edx,0xc002b740
c0027a6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a6e:	89 10                	mov    DWORD PTR [eax],edx
c0027a70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a74:	83 ec 0c             	sub    esp,0xc
c0027a77:	50                   	push   eax
c0027a78:	e8 e7 e7 fe ff       	call   c0016264 <Timer::~Timer()>
c0027a7d:	83 c4 10             	add    esp,0x10
c0027a80:	90                   	nop
c0027a81:	83 c4 0c             	add    esp,0xc
c0027a84:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0027a86 <PIT::~PIT()>:
c0027a86:	83 ec 0c             	sub    esp,0xc
c0027a89:	83 ec 0c             	sub    esp,0xc
c0027a8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a90:	e8 cd ff ff ff       	call   c0027a62 <PIT::~PIT()>
c0027a95:	83 c4 10             	add    esp,0x10
c0027a98:	83 ec 08             	sub    esp,0x8
c0027a9b:	68 5c 01 00 00       	push   0x15c
c0027aa0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027aa4:	e8 fe aa fe ff       	call   c00125a7 <operator delete(void*, unsigned long)>
c0027aa9:	83 c4 10             	add    esp,0x10
c0027aac:	83 c4 0c             	add    esp,0xc
c0027aaf:	c3                   	ret    
