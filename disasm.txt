
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 2f f9 00 00       	call   c000f94f <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 13 8f 02 00       	call   c0028f38 <_init>
c0000025:	c3                   	ret    
c0000026:	bb ce 9b 02 c0       	mov    ebx,0xc0029bce
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb dc 9b 02 c0    	cmp    ebx,0xc0029bdc
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 58 e6 02 c0       	mov    eax,0xc002e658
c0000049:	3d 58 e6 02 c0       	cmp    eax,0xc002e658
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 58 e6 02 c0       	push   0xc002e658
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 58 e6 02 c0       	mov    eax,0xc002e658
c0000075:	2d 58 e6 02 c0       	sub    eax,0xc002e658
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 58 e6 02 c0       	push   0xc002e658
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 88 ec 02 c0 00 	cmp    BYTE PTR ds:0xc002ec88,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb e4 9b 02 c0       	mov    ebx,0xc0029be4
c00000bb:	81 eb e0 9b 02 c0    	sub    ebx,0xc0029be0
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be e0 9b 02 c0       	mov    esi,0xc0029be0
c00000ca:	a1 8c ec 02 c0       	mov    eax,ds:0xc002ec8c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 8c ec 02 c0       	mov    ds:0xc002ec8c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 8c ec 02 c0       	mov    eax,ds:0xc002ec8c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 58 e6 02 c0       	push   0xc002e658
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 88 ec 02 c0 01 	mov    BYTE PTR ds:0xc002ec88,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 90 ec 02 c0       	push   0xc002ec90
c000012c:	68 58 e6 02 c0       	push   0xc002e658
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 5d d6 01 00       	call   c001da00 <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 8e 23 01 00       	call   c0012749 <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 3b d6 01 00       	call   c001da00 <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 e3 da 01 00       	call   c001dec7 <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 41 e1 01 00       	call   c001e52e <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 d0 f0 02 c0 	lgdtd  ds:0xc002f0d0
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 9f 40 01 00       	call   c0014681 <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 df de 00 00       	jmp    c000e52a <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 a8 ec 02 c0       	mov    ds:0xc002eca8,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 a8 ec 02 c0    	mov    DWORD PTR ds:0xc002eca8,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d a8 ec 02 c0    	mov    ebx,DWORD PTR ds:0xc002eca8
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 00 9c 02 c0 02 	test   BYTE PTR [edx-0x3ffd6400],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 00 9c 02 c0 01 	test   BYTE PTR [edx-0x3ffd6400],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 00 9c 02 c0 08 	test   BYTE PTR [edx-0x3ffd6400],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 00 9c 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6400],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 00 9c 02 c0 01 	test   BYTE PTR [edx-0x3ffd6400],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d c0 ec 02 c0    	mov    ecx,DWORD PTR ds:0xc002ecc0
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d c0 ec 02 c0    	mov    DWORD PTR ds:0xc002ecc0,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 c4 ec 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd133c]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 c4 ec 02 c0 	mov    DWORD PTR [eax*4-0x3ffd133c],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d c0 ec 02 c0    	mov    DWORD PTR ds:0xc002ecc0,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 ec ec 02 c0    	cmp    DWORD PTR ds:0xc002ecec,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d fc ec 02 c0    	mov    ecx,DWORD PTR ds:0xc002ecfc
c0000e38:	c7 42 0c f4 ec 02 c0 	mov    DWORD PTR [edx+0xc],0xc002ecf4
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 fc ec 02 c0    	mov    DWORD PTR ds:0xc002ecfc,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 ec ec 02 c0    	mov    DWORD PTR ds:0xc002ecec,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 c0 ec 02 c0 02 	test   BYTE PTR ds:0xc002ecc0,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 c0 ec 02 c0       	mov    eax,0xc002ecc0
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 cf e7 00 00       	call   c000f6e8 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 11 e7 00 00       	call   c000f6e8 <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 fb e6 00 00       	call   c000f6e8 <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 d7 e6 00 00       	call   c000f6e8 <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d c0 ec 02 c0    	mov    edi,DWORD PTR ds:0xc002ecc0
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 c0 ec 02 c0       	mov    eax,0xc002ecc0
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 c4 ec 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd133c]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 c4 ec 02 c0 	mov    DWORD PTR [edx*4-0x3ffd133c],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 f4 ec 02 c0 	lea    edx,[eax*8-0x3ffd130c]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 c0 ec 02 c0       	mov    eax,0xc002ecc0
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d 00 ed 02 c0    	mov    ebx,DWORD PTR ds:0xc002ed00
c00011ba:	81 fb f4 ec 02 c0    	cmp    ebx,0xc002ecf4
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d f4 ec 02 c0       	cmp    eax,0xc002ecf4
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d f0 ec 02 c0    	cmp    DWORD PTR ds:0xc002ecf0,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 fc ec 02 c0       	mov    ds:0xc002ecfc,eax
c00011f6:	a3 00 ed 02 c0       	mov    ds:0xc002ed00,eax
c00011fb:	a3 f0 ec 02 c0       	mov    ds:0xc002ecf0,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 f4 ec 02 c0 	mov    DWORD PTR [eax+0x8],0xc002ecf4
c0001209:	c7 40 0c f4 ec 02 c0 	mov    DWORD PTR [eax+0xc],0xc002ecf4
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 00 ed 02 c0       	mov    ds:0xc002ed00,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 f4 ec 02 c0 	mov    DWORD PTR [eax+0x8],0xc002ecf4
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 b8 ec 02 c0 	lea    ebp,[edx*4-0x3ffd1348]
c000125a:	8b 14 95 c0 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1340]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 c0 ec 02 c0 	lea    ecx,[edx*4-0x3ffd1340]
c0001275:	8b 14 95 c0 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1340]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd f4 ef 02 c0 	or     DWORD PTR [edi*4-0x3ffd100c],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 f4 ec 02 c0 	lea    eax,[eax*8-0x3ffd130c]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d fc ec 02 c0    	mov    DWORD PTR ds:0xc002ecfc,ecx
c000132f:	89 0d 00 ed 02 c0    	mov    DWORD PTR ds:0xc002ed00,ecx
c0001335:	c7 41 08 f4 ec 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002ecf4
c000133c:	c7 41 0c f4 ec 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002ecf4
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd ec ec 02 c0 	lea    edx,[ecx*8-0x3ffd1314]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d f4 ef 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd100c]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d f4 ef 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd100c]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 ec ec 02 c0 	lea    edx,[eax*4-0x3ffd1314]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d f4 ef 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd100c],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d fc ec 02 c0    	mov    DWORD PTR ds:0xc002ecfc,edi
c0001402:	89 3d 00 ed 02 c0    	mov    DWORD PTR ds:0xc002ed00,edi
c0001408:	c7 47 08 f4 ec 02 c0 	mov    DWORD PTR [edi+0x8],0xc002ecf4
c000140f:	c7 47 0c f4 ec 02 c0 	mov    DWORD PTR [edi+0xc],0xc002ecf4
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d f0 ec 02 c0    	mov    DWORD PTR ds:0xc002ecf0,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 ec ec 02 c0       	mov    eax,ds:0xc002ecec
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d ec ec 02 c0    	mov    DWORD PTR ds:0xc002ecec,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba c0 ec 02 c0       	mov    edx,0xc002ecc0
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d c0 ec 02 c0 00 	cmp    DWORD PTR ds:0xc002ecc0,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 c0 ec 02 c0       	mov    eax,0xc002ecc0
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d 14 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f014
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 14 f0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f014,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d 14 f0 02 c0    	mov    DWORD PTR ds:0xc002f014,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 ec ec 02 c0    	cmp    DWORD PTR ds:0xc002ecec,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d ec ec 02 c0    	mov    DWORD PTR ds:0xc002ecec,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d c0 ec 02 c0 00 	cmp    DWORD PTR ds:0xc002ecc0,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 c0 ec 02 c0       	mov    eax,0xc002ecc0
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 1c f0 02 c0    	push   DWORD PTR ds:0xc002f01c
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d c0 ec 02 c0 00 	cmp    DWORD PTR ds:0xc002ecc0,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 c0 ec 02 c0       	mov    eax,0xc002ecc0
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 1c f0 02 c0       	mov    eax,ds:0xc002f01c
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 c0 ec 02 c0       	mov    eax,0xc002ecc0
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d ec ec 02 c0 00 	cmp    DWORD PTR ds:0xc002ecec,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 c0 ec 02 c0       	mov    eax,0xc002ecc0
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 ec ec 02 c0       	mov    eax,ds:0xc002ecec
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 c4 ec 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd133c]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 f4 ec 02 c0       	mov    eax,0xc002ecf4
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d ec ef 02 c0       	cmp    eax,0xc002efec
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 10 f0 02 c0    	mov    esi,DWORD PTR ds:0xc002f010
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 24 f0 02 c0    	mov    esi,DWORD PTR ds:0xc002f024
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 34 f0 02 c0    	mov    esi,DWORD PTR ds:0xc002f034
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 c0 ec 02 c0       	mov    eax,0xc002ecc0
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 04 9d 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd62fc]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 c0 ec 02 c0       	mov    eax,ds:0xc002ecc0
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 c0 ec 02 c0       	mov    ds:0xc002ecc0,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d 04 f0 02 c0    	mov    DWORD PTR ds:0xc002f004,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d 08 f0 02 c0    	mov    DWORD PTR ds:0xc002f008,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d 0c f0 02 c0    	mov    DWORD PTR ds:0xc002f00c,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 14 f0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f014,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 80 27 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd880]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 8c f4 01 00       	jmp    c002107e <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 80 27 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd880]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 bd f4 01 00       	jmp    c00210c5 <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 80 27 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd880]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 e5 f4 01 00       	jmp    c002110c <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 8a 53 02 00       	call   c0027294 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 20 9e 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd61e0]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 20 9e 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd61e0]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba 20 9d 02 c0       	mov    edx,0xc0029d20
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba 40 9e 02 c0       	mov    edx,0xc0029e40
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba ac d1 02 c0       	mov    edx,0xc002d1ac
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba 4c 9e 02 c0       	mov    edx,0xc0029e4c
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba 30 9e 02 c0       	mov    edx,0xc0029e30
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 60 f0 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd0fa0]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 40 f0 02 c0    	mov    ax,ds:0xc002f040
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 40 f0 02 c0    	mov    ds:0xc002f040,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 87 41 02 00       	call   c0027294 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 35 4e 00 00       	call   c000845a <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 c7 4d 00 00       	call   c0008470 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 52 9e 02 c0       	mov    eax,0xc0029e52
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 48 46 00 00       	call   c0008487 <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad a0 9d 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6260]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 5b 9e 02 c0       	mov    eax,0xc0029e5b
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 1e 46 00 00       	call   c0008583 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 20 9e 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd61e0]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 fa 44 00 00       	call   c0008583 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 e1 44 00 00       	call   c0008583 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 0e 44 00 00       	call   c0008583 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 fb 43 00 00       	call   c0008583 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 52 2b 02 00       	call   c0027294 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba 30 9e 02 c0       	mov    edx,0xc0029e30
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba 20 9d 02 c0       	mov    edx,0xc0029d20
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba 30 9d 02 c0       	mov    edx,0xc0029d30
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 46 38 00 00       	call   c0008517 <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 60 f0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0fa0]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 60 f0 02 c0 	mov    DWORD PTR [edx*4-0x3ffd0fa0],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 a3 34 00 00       	call   c000845a <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 f4 30 00 00       	call   c0008470 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 f0 2a 00 00       	call   c000845a <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 2f 2a 00 00       	call   c0008470 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 19 15 02 00       	call   c0027294 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 ff 14 02 00       	call   c0027294 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 8b 24 00 00       	call   c000845a <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 02 24 00 00       	call   c0008470 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 6e 23 00 00       	call   c000845a <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 30 23 00 00       	call   c0008470 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 db 22 00 00       	call   c000845a <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 9f 22 00 00       	call   c0008470 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 80 1f 00 00       	call   c000845a <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 5d 1e 00 00       	call   c0008470 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 f8 1d 00 00       	call   c000845a <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 8f 1d 00 00       	call   c0008470 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 c3 1b 00 00       	call   c000845a <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 40 19 00 00       	call   c0008470 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 db 18 00 00       	call   c000845a <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 5e 18 00 00       	call   c0008470 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 02 18 00 00       	call   c000845a <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 7f 17 00 00       	call   c0008470 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 03 17 00 00       	call   c0008517 <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 77 9d 02 c0       	mov    eax,0xc0029d77
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 97 15 00 00       	call   c0008583 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 8e 14 00 00       	call   c0008487 <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 70 9d 02 c0       	mov    eax,0xc0029d70
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_forward>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 2c             	sub    esp,0x2c
c0007160:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0007164:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007168:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000716e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0007172:	89 d8                	mov    eax,ebx
c0007174:	e8 b1 b1 ff ff       	call   c000232a <validate>
c0007179:	89 c5                	mov    ebp,eax
c000717b:	85 c0                	test   eax,eax
c000717d:	0f 85 aa 01 00 00    	jne    c000732d <f_forward+0x1d4>
c0007183:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007187:	85 ed                	test   ebp,ebp
c0007189:	0f 85 9e 01 00 00    	jne    c000732d <f_forward+0x1d4>
c000718f:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007193:	0f 84 8f 01 00 00    	je     c0007328 <f_forward+0x1cf>
c0007199:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000719c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000719f:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071a2:	bf 00 00 00 00       	mov    edi,0x0
c00071a7:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071aa:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071ae:	89 d1                	mov    ecx,edx
c00071b0:	19 f9                	sbb    ecx,edi
c00071b2:	0f 83 cf 00 00 00    	jae    c0007287 <f_forward+0x12e>
c00071b8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071bc:	e9 c6 00 00 00       	jmp    c0007287 <f_forward+0x12e>
c00071c1:	50                   	push   eax
c00071c2:	50                   	push   eax
c00071c3:	6a 00                	push   0x0
c00071c5:	6a 00                	push   0x0
c00071c7:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071cb:	83 c4 10             	add    esp,0x10
c00071ce:	85 c0                	test   eax,eax
c00071d0:	0f 84 57 01 00 00    	je     c000732d <f_forward+0x1d4>
c00071d6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071d9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00071dd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00071e0:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c00071e4:	89 d7                	mov    edi,edx
c00071e6:	8d 4e ff             	lea    ecx,[esi-0x1]
c00071e9:	89 c6                	mov    esi,eax
c00071eb:	0f ac fe 09          	shrd   esi,edi,0x9
c00071ef:	21 ce                	and    esi,ecx
c00071f1:	89 c1                	mov    ecx,eax
c00071f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00071f9:	0f 84 98 00 00 00    	je     c0007297 <f_forward+0x13e>
c00071ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007203:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007206:	89 c8                	mov    eax,ecx
c0007208:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000720c:	e8 af ac ff ff       	call   c0001ec0 <clst2sect>
c0007211:	89 d7                	mov    edi,edx
c0007213:	09 c7                	or     edi,eax
c0007215:	0f 84 9e 00 00 00    	je     c00072b9 <f_forward+0x160>
c000721b:	31 ff                	xor    edi,edi
c000721d:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007220:	01 c6                	add    esi,eax
c0007222:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007226:	11 d7                	adc    edi,edx
c0007228:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000722b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000722e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007232:	39 fa                	cmp    edx,edi
c0007234:	0f 85 a2 00 00 00    	jne    c00072dc <f_forward+0x183>
c000723a:	39 f0                	cmp    eax,esi
c000723c:	0f 85 9a 00 00 00    	jne    c00072dc <f_forward+0x183>
c0007242:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007245:	ba 00 02 00 00       	mov    edx,0x200
c000724a:	25 ff 01 00 00       	and    eax,0x1ff
c000724f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007253:	29 c2                	sub    edx,eax
c0007255:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007258:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000725b:	39 d1                	cmp    ecx,edx
c000725d:	76 02                	jbe    c0007261 <f_forward+0x108>
c000725f:	89 d1                	mov    ecx,edx
c0007261:	8d 73 50             	lea    esi,[ebx+0x50]
c0007264:	52                   	push   edx
c0007265:	01 c6                	add    esi,eax
c0007267:	52                   	push   edx
c0007268:	51                   	push   ecx
c0007269:	56                   	push   esi
c000726a:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000726e:	83 c4 10             	add    esp,0x10
c0007271:	85 c0                	test   eax,eax
c0007273:	74 44                	je     c00072b9 <f_forward+0x160>
c0007275:	31 ff                	xor    edi,edi
c0007277:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000727a:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000727d:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007281:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007285:	01 07                	add    DWORD PTR [edi],eax
c0007287:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000728c:	0f 85 2f ff ff ff    	jne    c00071c1 <f_forward+0x68>
c0007292:	e9 96 00 00 00       	jmp    c000732d <f_forward+0x1d4>
c0007297:	85 f6                	test   esi,esi
c0007299:	0f 85 60 ff ff ff    	jne    c00071ff <f_forward+0xa6>
c000729f:	89 d7                	mov    edi,edx
c00072a1:	09 c7                	or     edi,eax
c00072a3:	75 05                	jne    c00072aa <f_forward+0x151>
c00072a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072a8:	eb 0a                	jmp    c00072b4 <f_forward+0x15b>
c00072aa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072ad:	89 d8                	mov    eax,ebx
c00072af:	e8 d9 bc ff ff       	call   c0002f8d <get_fat>
c00072b4:	83 f8 01             	cmp    eax,0x1
c00072b7:	77 0b                	ja     c00072c4 <f_forward+0x16b>
c00072b9:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072bd:	bd 02 00 00 00       	mov    ebp,0x2
c00072c2:	eb 69                	jmp    c000732d <f_forward+0x1d4>
c00072c4:	83 f8 ff             	cmp    eax,0xffffffff
c00072c7:	75 0b                	jne    c00072d4 <f_forward+0x17b>
c00072c9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00072cd:	bd 01 00 00 00       	mov    ebp,0x1
c00072d2:	eb 59                	jmp    c000732d <f_forward+0x1d4>
c00072d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00072d7:	e9 23 ff ff ff       	jmp    c00071ff <f_forward+0xa6>
c00072dc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00072e0:	79 20                	jns    c0007302 <f_forward+0x1a9>
c00072e2:	83 ec 0c             	sub    esp,0xc
c00072e5:	6a 01                	push   0x1
c00072e7:	52                   	push   edx
c00072e8:	50                   	push   eax
c00072e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072ed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00072f1:	50                   	push   eax
c00072f2:	e8 fb a8 ff ff       	call   c0001bf2 <disk_write>
c00072f7:	83 c4 20             	add    esp,0x20
c00072fa:	85 c0                	test   eax,eax
c00072fc:	75 cb                	jne    c00072c9 <f_forward+0x170>
c00072fe:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007302:	83 ec 0c             	sub    esp,0xc
c0007305:	6a 01                	push   0x1
c0007307:	57                   	push   edi
c0007308:	56                   	push   esi
c0007309:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000730d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007311:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007315:	50                   	push   eax
c0007316:	e8 c1 a8 ff ff       	call   c0001bdc <disk_read>
c000731b:	83 c4 20             	add    esp,0x20
c000731e:	85 c0                	test   eax,eax
c0007320:	0f 84 1c ff ff ff    	je     c0007242 <f_forward+0xe9>
c0007326:	eb a1                	jmp    c00072c9 <f_forward+0x170>
c0007328:	bd 07 00 00 00       	mov    ebp,0x7
c000732d:	83 c4 2c             	add    esp,0x2c
c0007330:	89 e8                	mov    eax,ebp
c0007332:	5b                   	pop    ebx
c0007333:	5e                   	pop    esi
c0007334:	5f                   	pop    edi
c0007335:	5d                   	pop    ebp
c0007336:	c3                   	ret    

c0007337 <f_mkfs>:
c0007337:	55                   	push   ebp
c0007338:	57                   	push   edi
c0007339:	56                   	push   esi
c000733a:	53                   	push   ebx
c000733b:	bb 0b 00 00 00       	mov    ebx,0xb
c0007340:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007346:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000734d:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007354:	e8 b0 ae ff ff       	call   c0002209 <get_ldnumber>
c0007359:	85 c0                	test   eax,eax
c000735b:	0f 88 ec 10 00 00    	js     c000844d <f_mkfs+0x1116>
c0007361:	8b 14 85 60 f0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0fa0]
c0007368:	85 d2                	test   edx,edx
c000736a:	74 03                	je     c000736f <f_mkfs+0x38>
c000736c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000736f:	85 f6                	test   esi,esi
c0007371:	75 05                	jne    c0007378 <f_mkfs+0x41>
c0007373:	be 60 9d 02 c0       	mov    esi,0xc0029d60
c0007378:	83 ec 0c             	sub    esp,0xc
c000737b:	0f b6 c0             	movzx  eax,al
c000737e:	bb 03 00 00 00       	mov    ebx,0x3
c0007383:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007387:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000738b:	e8 49 a8 ff ff       	call   c0001bd9 <disk_initialize>
c0007390:	83 c4 10             	add    esp,0x10
c0007393:	a8 01                	test   al,0x1
c0007395:	0f 85 b2 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c000739b:	bb 0a 00 00 00       	mov    ebx,0xa
c00073a0:	a8 04                	test   al,0x4
c00073a2:	0f 85 a5 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c00073a8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073ab:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073af:	85 c0                	test   eax,eax
c00073b1:	75 20                	jne    c00073d3 <f_mkfs+0x9c>
c00073b3:	51                   	push   ecx
c00073b4:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073b8:	50                   	push   eax
c00073b9:	6a 03                	push   0x3
c00073bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073bf:	e8 44 a8 ff ff       	call   c0001c08 <disk_ioctl>
c00073c4:	83 c4 10             	add    esp,0x10
c00073c7:	85 c0                	test   eax,eax
c00073c9:	74 08                	je     c00073d3 <f_mkfs+0x9c>
c00073cb:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073d3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00073d7:	8d 42 ff             	lea    eax,[edx-0x1]
c00073da:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00073df:	77 04                	ja     c00073e5 <f_mkfs+0xae>
c00073e1:	85 c2                	test   edx,eax
c00073e3:	74 08                	je     c00073ed <f_mkfs+0xb6>
c00073e5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073ed:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00073f0:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00073f4:	48                   	dec    eax
c00073f5:	3c 01                	cmp    al,0x1
c00073f7:	76 05                	jbe    c00073fe <f_mkfs+0xc7>
c00073f9:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00073fe:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007401:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007405:	48                   	dec    eax
c0007406:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000740b:	77 07                	ja     c0007414 <f_mkfs+0xdd>
c000740d:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007412:	74 08                	je     c000741c <f_mkfs+0xe5>
c0007414:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000741c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000741f:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007425:	77 07                	ja     c000742e <f_mkfs+0xf7>
c0007427:	8d 43 ff             	lea    eax,[ebx-0x1]
c000742a:	85 d8                	test   eax,ebx
c000742c:	74 02                	je     c0007430 <f_mkfs+0xf9>
c000742e:	31 db                	xor    ebx,ebx
c0007430:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000743b:	77 0a                	ja     c0007447 <f_mkfs+0x110>
c000743d:	bb 11 00 00 00       	mov    ebx,0x11
c0007442:	e9 06 10 00 00       	jmp    c000844d <f_mkfs+0x1116>
c0007447:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000744e:	8b 36                	mov    esi,DWORD PTR [esi]
c0007450:	85 ed                	test   ebp,ebp
c0007452:	75 1e                	jne    c0007472 <f_mkfs+0x13b>
c0007454:	83 ec 0c             	sub    esp,0xc
c0007457:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000745e:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007463:	50                   	push   eax
c0007464:	e8 f1 0f 00 00       	call   c000845a <ff_memalloc>
c0007469:	83 c4 10             	add    esp,0x10
c000746c:	89 c5                	mov    ebp,eax
c000746e:	85 c0                	test   eax,eax
c0007470:	74 cb                	je     c000743d <f_mkfs+0x106>
c0007472:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000747a:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007482:	52                   	push   edx
c0007483:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007487:	50                   	push   eax
c0007488:	6a 01                	push   0x1
c000748a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000748e:	e8 75 a7 ff ff       	call   c0001c08 <disk_ioctl>
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	85 c0                	test   eax,eax
c0007498:	0f 85 4a 0f 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000749e:	89 f1                	mov    ecx,esi
c00074a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074a8:	83 e1 0f             	and    ecx,0xf
c00074ab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074b3:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074b7:	83 e6 08             	and    esi,0x8
c00074ba:	75 56                	jne    c0007512 <f_mkfs+0x1db>
c00074bc:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074c0:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074c4:	83 ff 00             	cmp    edi,0x0
c00074c7:	76 20                	jbe    c00074e9 <f_mkfs+0x1b2>
c00074c9:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00074ce:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00074d6:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00074dc:	83 d7 ff             	adc    edi,0xffffffff
c00074df:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00074e3:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00074e7:	eb 21                	jmp    c000750a <f_mkfs+0x1d3>
c00074e9:	ba 3f 00 00 00       	mov    edx,0x3f
c00074ee:	39 f2                	cmp    edx,esi
c00074f0:	19 f8                	sbb    eax,edi
c00074f2:	73 1e                	jae    c0007512 <f_mkfs+0x1db>
c00074f4:	83 c6 c1             	add    esi,0xffffffc1
c00074f7:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00074ff:	83 d7 ff             	adc    edi,0xffffffff
c0007502:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007506:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000750a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007512:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007516:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000751a:	89 04 24             	mov    DWORD PTR [esp],eax
c000751d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007521:	31 c0                	xor    eax,eax
c0007523:	ba 7f 00 00 00       	mov    edx,0x7f
c0007528:	89 c7                	mov    edi,eax
c000752a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000752d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007531:	0f 83 c5 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c0007537:	89 df                	mov    edi,ebx
c0007539:	c1 ef 09             	shr    edi,0x9
c000753c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007540:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007547:	c1 ef 09             	shr    edi,0x9
c000754a:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000754f:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007553:	74 29                	je     c000757e <f_mkfs+0x247>
c0007555:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000755b:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007560:	0f 97 c2             	seta   dl
c0007563:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007566:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000756a:	0f 92 c0             	setb   al
c000756d:	08 c2                	or     dl,al
c000756f:	75 5b                	jne    c00075cc <f_mkfs+0x295>
c0007571:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007575:	83 e0 07             	and    eax,0x7
c0007578:	3c 04                	cmp    al,0x4
c000757a:	74 50                	je     c00075cc <f_mkfs+0x295>
c000757c:	eb 1b                	jmp    c0007599 <f_mkfs+0x262>
c000757e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007583:	0f 87 73 0a 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007589:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000758f:	76 08                	jbe    c0007599 <f_mkfs+0x262>
c0007591:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007599:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000759d:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075a1:	83 e0 01             	and    eax,0x1
c00075a4:	80 e1 02             	and    cl,0x2
c00075a7:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075ab:	74 0d                	je     c00075ba <f_mkfs+0x283>
c00075ad:	84 c0                	test   al,al
c00075af:	0f 84 53 09 00 00    	je     c0007f08 <f_mkfs+0xbd1>
c00075b5:	e9 12 08 00 00       	jmp    c0007dcc <f_mkfs+0xa95>
c00075ba:	bb 13 00 00 00       	mov    ebx,0x13
c00075bf:	84 c0                	test   al,al
c00075c1:	0f 85 05 08 00 00    	jne    c0007dcc <f_mkfs+0xa95>
c00075c7:	e9 39 0e 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c00075cc:	31 c0                	xor    eax,eax
c00075ce:	ba ff 0f 00 00       	mov    edx,0xfff
c00075d3:	89 c7                	mov    edi,eax
c00075d5:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075d8:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075dc:	0f 83 1a 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00075e2:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00075e8:	77 39                	ja     c0007623 <f_mkfs+0x2ec>
c00075ea:	ba ff ff 07 00       	mov    edx,0x7ffff
c00075ef:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00075f7:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075fa:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075fe:	73 08                	jae    c0007608 <f_mkfs+0x2d1>
c0007600:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007608:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000760d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007610:	b8 00 00 00 00       	mov    eax,0x0
c0007615:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007619:	73 08                	jae    c0007623 <f_mkfs+0x2ec>
c000761b:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000762b:	83 c0 20             	add    eax,0x20
c000762e:	83 d2 00             	adc    edx,0x0
c0007631:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007635:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000763d:	31 d2                	xor    edx,edx
c000763f:	31 ff                	xor    edi,edi
c0007641:	52                   	push   edx
c0007642:	89 fb                	mov    ebx,edi
c0007644:	50                   	push   eax
c0007645:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007649:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000764d:	e8 42 fc 01 00       	call   c0027294 <__udivdi3>
c0007652:	83 c4 10             	add    esp,0x10
c0007655:	c1 e0 02             	shl    eax,0x2
c0007658:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000765c:	05 07 02 00 00       	add    eax,0x207
c0007661:	89 f1                	mov    ecx,esi
c0007663:	c1 e8 09             	shr    eax,0x9
c0007666:	83 c1 ff             	add    ecx,0xffffffff
c0007669:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000766d:	83 d3 ff             	adc    ebx,0xffffffff
c0007670:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007674:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007678:	31 d2                	xor    edx,edx
c000767a:	01 c8                	add    eax,ecx
c000767c:	11 da                	adc    edx,ebx
c000767e:	89 c1                	mov    ecx,eax
c0007680:	f7 de                	neg    esi
c0007682:	89 d0                	mov    eax,edx
c0007684:	83 d7 00             	adc    edi,0x0
c0007687:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000768b:	f7 df                	neg    edi
c000768d:	21 f1                	and    ecx,esi
c000768f:	21 f8                	and    eax,edi
c0007691:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007695:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007699:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000769d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076a1:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076a8:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076ac:	0f ac d0 01          	shrd   eax,edx,0x1
c00076b0:	89 df                	mov    edi,ebx
c00076b2:	d1 ea                	shr    edx,1
c00076b4:	39 c1                	cmp    ecx,eax
c00076b6:	19 d7                	sbb    edi,edx
c00076b8:	0f 83 3e 09 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00076be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076c2:	31 d2                	xor    edx,edx
c00076c4:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00076c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076cc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00076d0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076d3:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00076d7:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00076db:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00076df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00076e3:	83 f8 0f             	cmp    eax,0xf
c00076e6:	0f 86 10 09 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c00076ec:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00076f4:	0f 87 02 09 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c00076fa:	31 d2                	xor    edx,edx
c00076fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007700:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007708:	83 c0 07             	add    eax,0x7
c000770b:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007713:	c1 e8 03             	shr    eax,0x3
c0007716:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000771d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007725:	c1 e0 09             	shl    eax,0x9
c0007728:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000772c:	48                   	dec    eax
c000772d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007731:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007735:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007739:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000773d:	31 d2                	xor    edx,edx
c000773f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007743:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000774a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000774e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007753:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007757:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000775b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000775f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007763:	31 ff                	xor    edi,edi
c0007765:	31 f6                	xor    esi,esi
c0007767:	31 db                	xor    ebx,ebx
c0007769:	85 ff                	test   edi,edi
c000776b:	74 05                	je     c0007772 <f_mkfs+0x43b>
c000776d:	4f                   	dec    edi
c000776e:	74 44                	je     c00077b4 <f_mkfs+0x47d>
c0007770:	eb 4f                	jmp    c00077c1 <f_mkfs+0x48a>
c0007772:	83 ec 0c             	sub    esp,0xc
c0007775:	0f b7 c3             	movzx  eax,bx
c0007778:	50                   	push   eax
c0007779:	e8 05 0e 00 00       	call   c0008583 <ff_wtoupper>
c000777e:	83 c4 10             	add    esp,0x10
c0007781:	89 c1                	mov    ecx,eax
c0007783:	8d 53 01             	lea    edx,[ebx+0x1]
c0007786:	66 39 c3             	cmp    bx,ax
c0007789:	75 3e                	jne    c00077c9 <f_mkfs+0x492>
c000778b:	be 01 00 00 00       	mov    esi,0x1
c0007790:	89 df                	mov    edi,ebx
c0007792:	66 01 f7             	add    di,si
c0007795:	75 07                	jne    c000779e <f_mkfs+0x467>
c0007797:	83 fe 7f             	cmp    esi,0x7f
c000779a:	77 31                	ja     c00077cd <f_mkfs+0x496>
c000779c:	eb 16                	jmp    c00077b4 <f_mkfs+0x47d>
c000779e:	83 ec 0c             	sub    esp,0xc
c00077a1:	0f b7 ff             	movzx  edi,di
c00077a4:	57                   	push   edi
c00077a5:	e8 d9 0d 00 00       	call   c0008583 <ff_wtoupper>
c00077aa:	83 c4 10             	add    esp,0x10
c00077ad:	39 c7                	cmp    edi,eax
c00077af:	75 e6                	jne    c0007797 <f_mkfs+0x460>
c00077b1:	46                   	inc    esi
c00077b2:	eb dc                	jmp    c0007790 <f_mkfs+0x459>
c00077b4:	31 c0                	xor    eax,eax
c00077b6:	89 d9                	mov    ecx,ebx
c00077b8:	4e                   	dec    esi
c00077b9:	0f 95 c0             	setne  al
c00077bc:	43                   	inc    ebx
c00077bd:	89 c7                	mov    edi,eax
c00077bf:	eb 14                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c1:	89 f1                	mov    ecx,esi
c00077c3:	01 f3                	add    ebx,esi
c00077c5:	31 ff                	xor    edi,edi
c00077c7:	eb 0c                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c9:	89 d3                	mov    ebx,edx
c00077cb:	eb 08                	jmp    c00077d5 <f_mkfs+0x49e>
c00077cd:	bf 02 00 00 00       	mov    edi,0x2
c00077d2:	83 c9 ff             	or     ecx,0xffffffff
c00077d5:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077dc:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00077e0:	0f b6 c1             	movzx  eax,cl
c00077e3:	e8 3a a9 ff ff       	call   c0002122 <xsum32>
c00077e8:	66 c1 e9 08          	shr    cx,0x8
c00077ec:	89 c2                	mov    edx,eax
c00077ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077f1:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00077f5:	0f b7 c1             	movzx  eax,cx
c00077f8:	e8 25 a9 ff ff       	call   c0002122 <xsum32>
c00077fd:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007802:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007806:	66 85 db             	test   bx,bx
c0007809:	74 1f                	je     c000782a <f_mkfs+0x4f3>
c000780b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780e:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007815:	83 c0 02             	add    eax,0x2
c0007818:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000781e:	39 c2                	cmp    edx,eax
c0007820:	74 08                	je     c000782a <f_mkfs+0x4f3>
c0007822:	89 04 24             	mov    DWORD PTR [esp],eax
c0007825:	e9 3f ff ff ff       	jmp    c0007769 <f_mkfs+0x432>
c000782a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782d:	83 ec 0c             	sub    esp,0xc
c0007830:	05 01 02 00 00       	add    eax,0x201
c0007835:	c1 e8 09             	shr    eax,0x9
c0007838:	50                   	push   eax
c0007839:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000783d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007841:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007845:	55                   	push   ebp
c0007846:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000784a:	e8 a3 a3 ff ff       	call   c0001bf2 <disk_write>
c000784f:	83 c4 20             	add    esp,0x20
c0007852:	85 c0                	test   eax,eax
c0007854:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007857:	0f 85 8b 0b 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000785d:	89 d0                	mov    eax,edx
c000785f:	31 d2                	xor    edx,edx
c0007861:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007865:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007869:	66 85 db             	test   bx,bx
c000786c:	74 04                	je     c0007872 <f_mkfs+0x53b>
c000786e:	31 c0                	xor    eax,eax
c0007870:	eb b0                	jmp    c0007822 <f_mkfs+0x4eb>
c0007872:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007876:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000787a:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000787e:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007884:	31 d2                	xor    edx,edx
c0007886:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007891:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007895:	c1 eb 09             	shr    ebx,0x9
c0007898:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000789f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078a3:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078ab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078af:	8d 70 01             	lea    esi,[eax+0x1]
c00078b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078ba:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078c1:	31 d2                	xor    edx,edx
c00078c3:	25 00 fe ff ff       	and    eax,0xfffffe00
c00078c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00078cb:	89 c1                	mov    ecx,eax
c00078cd:	89 e8                	mov    eax,ebp
c00078cf:	e8 e7 a3 ff ff       	call   c0001cbb <mem_set>
c00078d4:	31 c0                	xor    eax,eax
c00078d6:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078d9:	76 10                	jbe    c00078eb <f_mkfs+0x5b4>
c00078db:	83 fe 07             	cmp    esi,0x7
c00078de:	76 0b                	jbe    c00078eb <f_mkfs+0x5b4>
c00078e0:	40                   	inc    eax
c00078e1:	83 ee 08             	sub    esi,0x8
c00078e4:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00078e9:	eb eb                	jmp    c00078d6 <f_mkfs+0x59f>
c00078eb:	b2 01                	mov    dl,0x1
c00078ed:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00078f1:	85 f6                	test   esi,esi
c00078f3:	74 0c                	je     c0007901 <f_mkfs+0x5ca>
c00078f5:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078f8:	76 07                	jbe    c0007901 <f_mkfs+0x5ca>
c00078fa:	08 11                	or     BYTE PTR [ecx],dl
c00078fc:	4e                   	dec    esi
c00078fd:	d1 e2                	shl    edx,1
c00078ff:	eb f0                	jmp    c00078f1 <f_mkfs+0x5ba>
c0007901:	89 df                	mov    edi,ebx
c0007903:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007907:	76 04                	jbe    c000790d <f_mkfs+0x5d6>
c0007909:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000790d:	83 ec 0c             	sub    esp,0xc
c0007910:	57                   	push   edi
c0007911:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007915:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007919:	55                   	push   ebp
c000791a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000791e:	e8 cf a2 ff ff       	call   c0001bf2 <disk_write>
c0007923:	83 c4 20             	add    esp,0x20
c0007926:	85 c0                	test   eax,eax
c0007928:	0f 85 ba 0a 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000792e:	31 d2                	xor    edx,edx
c0007930:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007934:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007938:	29 fb                	sub    ebx,edi
c000793a:	0f 85 7a ff ff ff    	jne    c00078ba <f_mkfs+0x583>
c0007940:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007944:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000794c:	31 f6                	xor    esi,esi
c000794e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007952:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007955:	31 d2                	xor    edx,edx
c0007957:	89 e8                	mov    eax,ebp
c0007959:	e8 5d a3 ff ff       	call   c0001cbb <mem_set>
c000795e:	31 c9                	xor    ecx,ecx
c0007960:	85 db                	test   ebx,ebx
c0007962:	75 40                	jne    c00079a4 <f_mkfs+0x66d>
c0007964:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007969:	89 e8                	mov    eax,ebp
c000796b:	bb 02 00 00 00       	mov    ebx,0x2
c0007970:	e8 28 a3 ff ff       	call   c0001c9d <st_dword>
c0007975:	8d 45 04             	lea    eax,[ebp+0x4]
c0007978:	83 ca ff             	or     edx,0xffffffff
c000797b:	e8 1d a3 ff ff       	call   c0001c9d <st_dword>
c0007980:	b9 08 00 00 00       	mov    ecx,0x8
c0007985:	eb 1d                	jmp    c00079a4 <f_mkfs+0x66d>
c0007987:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000798a:	76 3b                	jbe    c00079c7 <f_mkfs+0x690>
c000798c:	43                   	inc    ebx
c000798d:	83 fe 01             	cmp    esi,0x1
c0007990:	89 da                	mov    edx,ebx
c0007992:	77 03                	ja     c0007997 <f_mkfs+0x660>
c0007994:	83 ca ff             	or     edx,0xffffffff
c0007997:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000799b:	4e                   	dec    esi
c000799c:	e8 fc a2 ff ff       	call   c0001c9d <st_dword>
c00079a1:	83 c1 04             	add    ecx,0x4
c00079a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079a8:	85 f6                	test   esi,esi
c00079aa:	75 db                	jne    c0007987 <f_mkfs+0x650>
c00079ac:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079b1:	77 14                	ja     c00079c7 <f_mkfs+0x690>
c00079b3:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079b7:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079be:	85 f6                	test   esi,esi
c00079c0:	74 05                	je     c00079c7 <f_mkfs+0x690>
c00079c2:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c5:	77 dd                	ja     c00079a4 <f_mkfs+0x66d>
c00079c7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00079cb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079cf:	39 cf                	cmp    edi,ecx
c00079d1:	76 02                	jbe    c00079d5 <f_mkfs+0x69e>
c00079d3:	89 cf                	mov    edi,ecx
c00079d5:	83 ec 0c             	sub    esp,0xc
c00079d8:	57                   	push   edi
c00079d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079e1:	55                   	push   ebp
c00079e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e6:	e8 07 a2 ff ff       	call   c0001bf2 <disk_write>
c00079eb:	83 c4 20             	add    esp,0x20
c00079ee:	85 c0                	test   eax,eax
c00079f0:	0f 85 f2 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00079f6:	31 d2                	xor    edx,edx
c00079f8:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00079fc:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a00:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a04:	0f 85 48 ff ff ff    	jne    c0007952 <f_mkfs+0x61b>
c0007a0a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a0d:	31 d2                	xor    edx,edx
c0007a0f:	89 e8                	mov    eax,ebp
c0007a11:	31 ff                	xor    edi,edi
c0007a13:	e8 a3 a2 ff ff       	call   c0001cbb <mem_set>
c0007a18:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a1b:	ba 02 00 00 00       	mov    edx,0x2
c0007a20:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a24:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a28:	e8 70 a2 ff ff       	call   c0001c9d <st_dword>
c0007a2d:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a30:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a34:	e8 64 a2 ff ff       	call   c0001c9d <st_dword>
c0007a39:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a3c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a40:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a44:	e8 54 a2 ff ff       	call   c0001c9d <st_dword>
c0007a49:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a54:	83 c2 02             	add    edx,0x2
c0007a57:	e8 41 a2 ff ff       	call   c0001c9d <st_dword>
c0007a5c:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a5f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a63:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007a67:	e8 31 a2 ff ff       	call   c0001c9d <st_dword>
c0007a6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a70:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a75:	89 c6                	mov    esi,eax
c0007a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a7b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a82:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007a86:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007a89:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a8d:	39 cb                	cmp    ebx,ecx
c0007a8f:	76 02                	jbe    c0007a93 <f_mkfs+0x75c>
c0007a91:	89 cb                	mov    ebx,ecx
c0007a93:	83 ec 0c             	sub    esp,0xc
c0007a96:	53                   	push   ebx
c0007a97:	57                   	push   edi
c0007a98:	56                   	push   esi
c0007a99:	55                   	push   ebp
c0007a9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a9e:	e8 4f a1 ff ff       	call   c0001bf2 <disk_write>
c0007aa3:	83 c4 20             	add    esp,0x20
c0007aa6:	85 c0                	test   eax,eax
c0007aa8:	0f 85 3a 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007aae:	31 d2                	xor    edx,edx
c0007ab0:	b9 00 02 00 00       	mov    ecx,0x200
c0007ab5:	89 e8                	mov    eax,ebp
c0007ab7:	e8 ff a1 ff ff       	call   c0001cbb <mem_set>
c0007abc:	31 d2                	xor    edx,edx
c0007abe:	01 de                	add    esi,ebx
c0007ac0:	11 d7                	adc    edi,edx
c0007ac2:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007ac5:	75 bf                	jne    c0007a86 <f_mkfs+0x74f>
c0007ac7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007acb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007acf:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007ad7:	b9 00 02 00 00       	mov    ecx,0x200
c0007adc:	31 d2                	xor    edx,edx
c0007ade:	89 e8                	mov    eax,ebp
c0007ae0:	e8 d6 a1 ff ff       	call   c0001cbb <mem_set>
c0007ae5:	b9 0b 00 00 00       	mov    ecx,0xb
c0007aea:	ba 40 9e 02 c0       	mov    edx,0xc0029e40
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 b0 a1 ff ff       	call   c0001ca6 <mem_cpy>
c0007af6:	8d 45 40             	lea    eax,[ebp+0x40]
c0007af9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007afd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b01:	e8 9a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b06:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b0a:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b0d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b11:	e8 8a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b16:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b19:	ba 20 00 00 00       	mov    edx,0x20
c0007b1e:	e8 7a a1 ff ff       	call   c0001c9d <st_dword>
c0007b23:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b2b:	e8 6d a1 ff ff       	call   c0001c9d <st_dword>
c0007b30:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b34:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b38:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b3c:	e8 5c a1 ff ff       	call   c0001c9d <st_dword>
c0007b41:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b44:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b48:	e8 50 a1 ff ff       	call   c0001c9d <st_dword>
c0007b4d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b51:	8d 50 02             	lea    edx,[eax+0x2]
c0007b54:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b57:	e8 41 a1 ff ff       	call   c0001c9d <st_dword>
c0007b5c:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b5f:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b64:	e8 34 a1 ff ff       	call   c0001c9d <st_dword>
c0007b69:	8d 45 68             	lea    eax,[ebp+0x68]
c0007b6c:	ba 00 01 00 00       	mov    edx,0x100
c0007b71:	e8 23 a1 ff ff       	call   c0001c99 <st_word>
c0007b76:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b7a:	b8 0a 00 00 00       	mov    eax,0xa
c0007b7f:	48                   	dec    eax
c0007b80:	74 05                	je     c0007b87 <f_mkfs+0x850>
c0007b82:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007b85:	eb f8                	jmp    c0007b7f <f_mkfs+0x848>
c0007b87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b8b:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007b8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b93:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007b97:	74 05                	je     c0007b9e <f_mkfs+0x867>
c0007b99:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007b9c:	eb f5                	jmp    c0007b93 <f_mkfs+0x85c>
c0007b9e:	8d 45 78             	lea    eax,[ebp+0x78]
c0007ba1:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ba6:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bac:	31 db                	xor    ebx,ebx
c0007bae:	e8 e6 a0 ff ff       	call   c0001c99 <st_word>
c0007bb3:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bbe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bc1:	e8 d3 a0 ff ff       	call   c0001c99 <st_word>
c0007bc6:	31 c9                	xor    ecx,ecx
c0007bc8:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007bcb:	83 f8 01             	cmp    eax,0x1
c0007bce:	76 13                	jbe    c0007be3 <f_mkfs+0x8ac>
c0007bd0:	83 f9 70             	cmp    ecx,0x70
c0007bd3:	74 0e                	je     c0007be3 <f_mkfs+0x8ac>
c0007bd5:	89 da                	mov    edx,ebx
c0007bd7:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007bdc:	e8 41 a5 ff ff       	call   c0002122 <xsum32>
c0007be1:	89 c3                	mov    ebx,eax
c0007be3:	41                   	inc    ecx
c0007be4:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007bea:	75 dc                	jne    c0007bc8 <f_mkfs+0x891>
c0007bec:	89 f0                	mov    eax,esi
c0007bee:	89 fa                	mov    edx,edi
c0007bf0:	83 c0 01             	add    eax,0x1
c0007bf3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007bf7:	83 d2 00             	adc    edx,0x0
c0007bfa:	83 ec 0c             	sub    esp,0xc
c0007bfd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c01:	6a 01                	push   0x1
c0007c03:	57                   	push   edi
c0007c04:	56                   	push   esi
c0007c05:	55                   	push   ebp
c0007c06:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c0a:	e8 e3 9f ff ff       	call   c0001bf2 <disk_write>
c0007c0f:	83 c4 20             	add    esp,0x20
c0007c12:	85 c0                	test   eax,eax
c0007c14:	0f 85 ce 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	b9 00 02 00 00       	mov    ecx,0x200
c0007c21:	89 e8                	mov    eax,ebp
c0007c23:	e8 93 a0 ff ff       	call   c0001cbb <mem_set>
c0007c28:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c2d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c30:	e8 64 a0 ff ff       	call   c0001c99 <st_word>
c0007c35:	89 f0                	mov    eax,esi
c0007c37:	89 fa                	mov    edx,edi
c0007c39:	83 c0 09             	add    eax,0x9
c0007c3c:	83 d2 00             	adc    edx,0x0
c0007c3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c42:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c46:	31 c9                	xor    ecx,ecx
c0007c48:	41                   	inc    ecx
c0007c49:	89 da                	mov    edx,ebx
c0007c4b:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c50:	e8 cd a4 ff ff       	call   c0002122 <xsum32>
c0007c55:	89 c3                	mov    ebx,eax
c0007c57:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c5d:	75 e9                	jne    c0007c48 <f_mkfs+0x911>
c0007c5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c63:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007c67:	83 c0 01             	add    eax,0x1
c0007c6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007c6e:	83 d2 00             	adc    edx,0x0
c0007c71:	83 ec 0c             	sub    esp,0xc
c0007c74:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c78:	6a 01                	push   0x1
c0007c7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c82:	55                   	push   ebp
c0007c83:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c87:	e8 66 9f ff ff       	call   c0001bf2 <disk_write>
c0007c8c:	83 c4 20             	add    esp,0x20
c0007c8f:	85 c0                	test   eax,eax
c0007c91:	0f 85 51 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c9b:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007c9f:	75 09                	jne    c0007caa <f_mkfs+0x973>
c0007ca1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ca4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ca8:	74 12                	je     c0007cbc <f_mkfs+0x985>
c0007caa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cb2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cb6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cba:	eb 8a                	jmp    c0007c46 <f_mkfs+0x90f>
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	b9 00 02 00 00       	mov    ecx,0x200
c0007cc3:	89 e8                	mov    eax,ebp
c0007cc5:	e8 f1 9f ff ff       	call   c0001cbb <mem_set>
c0007cca:	83 c6 0b             	add    esi,0xb
c0007ccd:	83 d7 00             	adc    edi,0x0
c0007cd0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007cd4:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007cd8:	31 c9                	xor    ecx,ecx
c0007cda:	41                   	inc    ecx
c0007cdb:	89 da                	mov    edx,ebx
c0007cdd:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007ce2:	e8 3b a4 ff ff       	call   c0002122 <xsum32>
c0007ce7:	89 c3                	mov    ebx,eax
c0007ce9:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007cef:	75 e9                	jne    c0007cda <f_mkfs+0x9a3>
c0007cf1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007cf4:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007cf8:	83 c6 01             	add    esi,0x1
c0007cfb:	83 d7 00             	adc    edi,0x0
c0007cfe:	83 ec 0c             	sub    esp,0xc
c0007d01:	6a 01                	push   0x1
c0007d03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d0b:	55                   	push   ebp
c0007d0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d10:	e8 dd 9e ff ff       	call   c0001bf2 <disk_write>
c0007d15:	83 c4 20             	add    esp,0x20
c0007d18:	85 c0                	test   eax,eax
c0007d1a:	0f 85 c8 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d20:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d24:	75 06                	jne    c0007d2c <f_mkfs+0x9f5>
c0007d26:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d2a:	74 09                	je     c0007d35 <f_mkfs+0x9fe>
c0007d2c:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d2f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d33:	eb a3                	jmp    c0007cd8 <f_mkfs+0x9a1>
c0007d35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d39:	89 da                	mov    edx,ebx
c0007d3b:	01 e8                	add    eax,ebp
c0007d3d:	e8 5b 9f ff ff       	call   c0001c9d <st_dword>
c0007d42:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d47:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d4f:	75 e4                	jne    c0007d35 <f_mkfs+0x9fe>
c0007d51:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d54:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d58:	83 c6 02             	add    esi,0x2
c0007d5b:	83 d7 00             	adc    edi,0x0
c0007d5e:	83 ec 0c             	sub    esp,0xc
c0007d61:	6a 01                	push   0x1
c0007d63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d6b:	55                   	push   ebp
c0007d6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d70:	e8 7d 9e ff ff       	call   c0001bf2 <disk_write>
c0007d75:	83 c4 20             	add    esp,0x20
c0007d78:	85 c0                	test   eax,eax
c0007d7a:	0f 85 68 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d80:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007d85:	74 0d                	je     c0007d94 <f_mkfs+0xa5d>
c0007d87:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007d8f:	e9 43 fd ff ff       	jmp    c0007ad7 <f_mkfs+0x7a0>
c0007d94:	b1 07                	mov    cl,0x7
c0007d96:	e9 e3 05 00 00       	jmp    c000837e <f_mkfs+0x1047>
c0007d9b:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007da0:	0f 85 4f 02 00 00    	jne    c0007ff5 <f_mkfs+0xcbe>
c0007da6:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007dab:	0f 86 22 02 00 00    	jbe    c0007fd3 <f_mkfs+0xc9c>
c0007db1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db6:	0f 85 81 06 00 00    	jne    c000843d <f_mkfs+0x1106>
c0007dbc:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc3:	83 f8 40             	cmp    eax,0x40
c0007dc6:	0f 87 51 06 00 00    	ja     c000841d <f_mkfs+0x10e6>
c0007dcc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007dd0:	85 ff                	test   edi,edi
c0007dd2:	75 1c                	jne    c0007df0 <f_mkfs+0xab9>
c0007dd4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007dd7:	ba 40 9d 02 c0       	mov    edx,0xc0029d40
c0007ddc:	c1 e9 0c             	shr    ecx,0xc
c0007ddf:	bf 01 00 00 00       	mov    edi,0x1
c0007de4:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007de7:	66 85 c0             	test   ax,ax
c0007dea:	0f 85 95 01 00 00    	jne    c0007f85 <f_mkfs+0xc4e>
c0007df0:	31 d2                	xor    edx,edx
c0007df2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007df5:	f7 f7                	div    edi
c0007df7:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dfc:	0f 86 95 01 00 00    	jbe    c0007f97 <f_mkfs+0xc60>
c0007e02:	83 c0 02             	add    eax,0x2
c0007e05:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e0a:	01 c0                	add    eax,eax
c0007e0c:	05 ff 01 00 00       	add    eax,0x1ff
c0007e11:	be 01 00 00 00       	mov    esi,0x1
c0007e16:	c1 e8 09             	shr    eax,0x9
c0007e19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e21:	c1 e0 05             	shl    eax,0x5
c0007e24:	c1 e8 09             	shr    eax,0x9
c0007e27:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e2b:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e30:	31 d2                	xor    edx,edx
c0007e32:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e36:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e3a:	89 f0                	mov    eax,esi
c0007e3c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e40:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e44:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e48:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e4c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e57:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e5b:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e5f:	31 db                	xor    ebx,ebx
c0007e61:	01 c8                	add    eax,ecx
c0007e63:	11 da                	adc    edx,ebx
c0007e65:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007e69:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007e6d:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007e71:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e75:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e79:	f7 da                	neg    edx
c0007e7b:	21 d1                	and    ecx,edx
c0007e7d:	29 d9                	sub    ecx,ebx
c0007e7f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e84:	0f 85 20 01 00 00    	jne    c0007faa <f_mkfs+0xc73>
c0007e8a:	31 db                	xor    ebx,ebx
c0007e8c:	01 ce                	add    esi,ecx
c0007e8e:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007e92:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007e96:	31 d2                	xor    edx,edx
c0007e98:	89 f8                	mov    eax,edi
c0007e9a:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007e9e:	c1 e0 04             	shl    eax,0x4
c0007ea1:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ea5:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ea9:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ead:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eb1:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eb4:	19 d3                	sbb    ebx,edx
c0007eb6:	0f 82 40 01 00 00    	jb     c0007ffc <f_mkfs+0xcc5>
c0007ebc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ebf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec3:	89 c8                	mov    eax,ecx
c0007ec5:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007eca:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ece:	29 f0                	sub    eax,esi
c0007ed0:	29 d0                	sub    eax,edx
c0007ed2:	31 d2                	xor    edx,edx
c0007ed4:	f7 f7                	div    edi
c0007ed6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007edb:	89 c3                	mov    ebx,eax
c0007edd:	0f 85 b8 fe ff ff    	jne    c0007d9b <f_mkfs+0xa64>
c0007ee3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007ee8:	0f 87 1d 01 00 00    	ja     c000800b <f_mkfs+0xcd4>
c0007eee:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ef3:	0f 85 03 01 00 00    	jne    c0007ffc <f_mkfs+0xcc5>
c0007ef9:	83 ff 01             	cmp    edi,0x1
c0007efc:	0f 86 fa 00 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c0007f02:	d1 ef                	shr    edi,1
c0007f04:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f08:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f0c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f0f:	85 db                	test   ebx,ebx
c0007f11:	75 2d                	jne    c0007f40 <f_mkfs+0xc09>
c0007f13:	89 cb                	mov    ebx,ecx
c0007f15:	ba 50 9d 02 c0       	mov    edx,0xc0029d50
c0007f1a:	c1 eb 11             	shr    ebx,0x11
c0007f1d:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f25:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f28:	66 85 c0             	test   ax,ax
c0007f2b:	74 11                	je     c0007f3e <f_mkfs+0xc07>
c0007f2d:	83 c2 02             	add    edx,0x2
c0007f30:	39 d8                	cmp    eax,ebx
c0007f32:	77 0a                	ja     c0007f3e <f_mkfs+0xc07>
c0007f34:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f38:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f3c:	eb e7                	jmp    c0007f25 <f_mkfs+0xbee>
c0007f3e:	31 db                	xor    ebx,ebx
c0007f40:	31 d2                	xor    edx,edx
c0007f42:	89 c8                	mov    eax,ecx
c0007f44:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f48:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f4f:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f54:	c1 ea 09             	shr    edx,0x9
c0007f57:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f5c:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f60:	0f 87 96 00 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007f66:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f6a:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f72:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f76:	be 20 00 00 00       	mov    esi,0x20
c0007f7b:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f80:	e9 a6 fe ff ff       	jmp    c0007e2b <f_mkfs+0xaf4>
c0007f85:	83 c2 02             	add    edx,0x2
c0007f88:	39 c8                	cmp    eax,ecx
c0007f8a:	0f 87 60 fe ff ff    	ja     c0007df0 <f_mkfs+0xab9>
c0007f90:	01 ff                	add    edi,edi
c0007f92:	e9 4d fe ff ff       	jmp    c0007de4 <f_mkfs+0xaad>
c0007f97:	8d 04 40             	lea    eax,[eax+eax*2]
c0007f9a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f9f:	40                   	inc    eax
c0007fa0:	d1 e8                	shr    eax,1
c0007fa2:	83 c0 03             	add    eax,0x3
c0007fa5:	e9 62 fe ff ff       	jmp    c0007e0c <f_mkfs+0xad5>
c0007faa:	31 d2                	xor    edx,edx
c0007fac:	89 c8                	mov    eax,ecx
c0007fae:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fb2:	85 d2                	test   edx,edx
c0007fb4:	74 0c                	je     c0007fc2 <f_mkfs+0xc8b>
c0007fb6:	49                   	dec    ecx
c0007fb7:	46                   	inc    esi
c0007fb8:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fbd:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007fc2:	89 c8                	mov    eax,ecx
c0007fc4:	31 d2                	xor    edx,edx
c0007fc6:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fca:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007fce:	e9 c3 fe ff ff       	jmp    c0007e96 <f_mkfs+0xb5f>
c0007fd3:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007fd8:	77 31                	ja     c000800b <f_mkfs+0xcd4>
c0007fda:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fdf:	75 1b                	jne    c0007ffc <f_mkfs+0xcc5>
c0007fe1:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007fe4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007fe8:	3d 80 00 00 00       	cmp    eax,0x80
c0007fed:	0f 86 d9 fd ff ff    	jbe    c0007dcc <f_mkfs+0xa95>
c0007ff3:	eb 07                	jmp    c0007ffc <f_mkfs+0xcc5>
c0007ff5:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007ffa:	76 0a                	jbe    c0008006 <f_mkfs+0xccf>
c0007ffc:	bb 0e 00 00 00       	mov    ebx,0xe
c0008001:	e9 ff 03 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c0008006:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000800b:	31 d2                	xor    edx,edx
c000800d:	b9 00 02 00 00       	mov    ecx,0x200
c0008012:	89 e8                	mov    eax,ebp
c0008014:	e8 a2 9c ff ff       	call   c0001cbb <mem_set>
c0008019:	b9 0b 00 00 00       	mov    ecx,0xb
c000801e:	ba 62 9e 02 c0       	mov    edx,0xc0029e62
c0008023:	89 e8                	mov    eax,ebp
c0008025:	e8 7c 9c ff ff       	call   c0001ca6 <mem_cpy>
c000802a:	8d 45 0b             	lea    eax,[ebp+0xb]
c000802d:	ba 00 02 00 00       	mov    edx,0x200
c0008032:	e8 62 9c ff ff       	call   c0001c99 <st_word>
c0008037:	89 f8                	mov    eax,edi
c0008039:	0f b7 d6             	movzx  edx,si
c000803c:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c000803f:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008042:	e8 52 9c ff ff       	call   c0001c99 <st_word>
c0008047:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c000804b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008050:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008053:	75 08                	jne    c000805d <f_mkfs+0xd26>
c0008055:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000805d:	8d 45 11             	lea    eax,[ebp+0x11]
c0008060:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008064:	e8 30 9c ff ff       	call   c0001c99 <st_word>
c0008069:	b8 ff ff 00 00       	mov    eax,0xffff
c000806e:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0008072:	39 d0                	cmp    eax,edx
c0008074:	b8 00 00 00 00       	mov    eax,0x0
c0008079:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c000807d:	72 0a                	jb     c0008089 <f_mkfs+0xd52>
c000807f:	8d 45 13             	lea    eax,[ebp+0x13]
c0008082:	e8 12 9c ff ff       	call   c0001c99 <st_word>
c0008087:	eb 08                	jmp    c0008091 <f_mkfs+0xd5a>
c0008089:	8d 45 20             	lea    eax,[ebp+0x20]
c000808c:	e8 0c 9c ff ff       	call   c0001c9d <st_dword>
c0008091:	8d 45 18             	lea    eax,[ebp+0x18]
c0008094:	ba 3f 00 00 00       	mov    edx,0x3f
c0008099:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c000809d:	e8 f7 9b ff ff       	call   c0001c99 <st_word>
c00080a2:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080a5:	ba ff 00 00 00       	mov    edx,0xff
c00080aa:	e8 ea 9b ff ff       	call   c0001c99 <st_word>
c00080af:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080b6:	e8 e2 9b ff ff       	call   c0001c9d <st_dword>
c00080bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c0:	75 57                	jne    c0008119 <f_mkfs+0xde2>
c00080c2:	8d 45 43             	lea    eax,[ebp+0x43]
c00080c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00080ca:	e8 ce 9b ff ff       	call   c0001c9d <st_dword>
c00080cf:	8d 45 24             	lea    eax,[ebp+0x24]
c00080d2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080d6:	e8 c2 9b ff ff       	call   c0001c9d <st_dword>
c00080db:	8d 45 2c             	lea    eax,[ebp+0x2c]
c00080de:	ba 02 00 00 00       	mov    edx,0x2
c00080e3:	e8 b5 9b ff ff       	call   c0001c9d <st_dword>
c00080e8:	8d 45 30             	lea    eax,[ebp+0x30]
c00080eb:	ba 01 00 00 00       	mov    edx,0x1
c00080f0:	e8 a4 9b ff ff       	call   c0001c99 <st_word>
c00080f5:	8d 45 32             	lea    eax,[ebp+0x32]
c00080f8:	ba 06 00 00 00       	mov    edx,0x6
c00080fd:	e8 97 9b ff ff       	call   c0001c99 <st_word>
c0008102:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008106:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000810a:	8d 45 47             	lea    eax,[ebp+0x47]
c000810d:	b9 13 00 00 00       	mov    ecx,0x13
c0008112:	ba 6e 9e 02 c0       	mov    edx,0xc0029e6e
c0008117:	eb 2f                	jmp    c0008148 <f_mkfs+0xe11>
c0008119:	8d 45 27             	lea    eax,[ebp+0x27]
c000811c:	ba 00 00 21 50       	mov    edx,0x50210000
c0008121:	e8 77 9b ff ff       	call   c0001c9d <st_dword>
c0008126:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000812b:	8d 45 16             	lea    eax,[ebp+0x16]
c000812e:	e8 66 9b ff ff       	call   c0001c99 <st_word>
c0008133:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008137:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000813b:	8d 45 2b             	lea    eax,[ebp+0x2b]
c000813e:	b9 13 00 00 00       	mov    ecx,0x13
c0008143:	ba 82 9e 02 c0       	mov    edx,0xc0029e82
c0008148:	e8 59 9b ff ff       	call   c0001ca6 <mem_cpy>
c000814d:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008153:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008158:	89 f0                	mov    eax,esi
c000815a:	e8 3a 9b ff ff       	call   c0001c99 <st_word>
c000815f:	83 ec 0c             	sub    esp,0xc
c0008162:	6a 01                	push   0x1
c0008164:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008168:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000816c:	55                   	push   ebp
c000816d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008171:	e8 7c 9a ff ff       	call   c0001bf2 <disk_write>
c0008176:	83 c4 20             	add    esp,0x20
c0008179:	85 c0                	test   eax,eax
c000817b:	0f 85 67 02 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0008181:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008186:	0f 85 b7 00 00 00    	jne    c0008243 <f_mkfs+0xf0c>
c000818c:	83 ec 0c             	sub    esp,0xc
c000818f:	6a 01                	push   0x1
c0008191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008195:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008199:	83 c0 06             	add    eax,0x6
c000819c:	83 d2 00             	adc    edx,0x0
c000819f:	52                   	push   edx
c00081a0:	50                   	push   eax
c00081a1:	55                   	push   ebp
c00081a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081a6:	e8 47 9a ff ff       	call   c0001bf2 <disk_write>
c00081ab:	83 c4 20             	add    esp,0x20
c00081ae:	b9 00 02 00 00       	mov    ecx,0x200
c00081b3:	31 d2                	xor    edx,edx
c00081b5:	89 e8                	mov    eax,ebp
c00081b7:	e8 ff 9a ff ff       	call   c0001cbb <mem_set>
c00081bc:	ba 52 52 61 41       	mov    edx,0x41615252
c00081c1:	89 e8                	mov    eax,ebp
c00081c3:	e8 d5 9a ff ff       	call   c0001c9d <st_dword>
c00081c8:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c00081ce:	ba 72 72 41 61       	mov    edx,0x61417272
c00081d3:	e8 c5 9a ff ff       	call   c0001c9d <st_dword>
c00081d8:	8d 53 ff             	lea    edx,[ebx-0x1]
c00081db:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c00081e1:	e8 b7 9a ff ff       	call   c0001c9d <st_dword>
c00081e6:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c00081ec:	ba 02 00 00 00       	mov    edx,0x2
c00081f1:	e8 a7 9a ff ff       	call   c0001c9d <st_dword>
c00081f6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00081fb:	89 f0                	mov    eax,esi
c00081fd:	e8 97 9a ff ff       	call   c0001c99 <st_word>
c0008202:	83 ec 0c             	sub    esp,0xc
c0008205:	6a 01                	push   0x1
c0008207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000820b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000820f:	83 c0 07             	add    eax,0x7
c0008212:	83 d2 00             	adc    edx,0x0
c0008215:	52                   	push   edx
c0008216:	50                   	push   eax
c0008217:	55                   	push   ebp
c0008218:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000821c:	e8 d1 99 ff ff       	call   c0001bf2 <disk_write>
c0008221:	83 c4 14             	add    esp,0x14
c0008224:	6a 01                	push   0x1
c0008226:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000822a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000822e:	83 c0 01             	add    eax,0x1
c0008231:	83 d2 00             	adc    edx,0x0
c0008234:	52                   	push   edx
c0008235:	50                   	push   eax
c0008236:	55                   	push   ebp
c0008237:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000823b:	e8 b2 99 ff ff       	call   c0001bf2 <disk_write>
c0008240:	83 c4 20             	add    esp,0x20
c0008243:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000824a:	31 d2                	xor    edx,edx
c000824c:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008252:	31 db                	xor    ebx,ebx
c0008254:	89 e8                	mov    eax,ebp
c0008256:	e8 60 9a ff ff       	call   c0001cbb <mem_set>
c000825b:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008260:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008267:	0f 94 c3             	sete   bl
c000826a:	4b                   	dec    ebx
c000826b:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008271:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008277:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000827c:	75 21                	jne    c000829f <f_mkfs+0xf68>
c000827e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008283:	89 e8                	mov    eax,ebp
c0008285:	e8 13 9a ff ff       	call   c0001c9d <st_dword>
c000828a:	8d 45 04             	lea    eax,[ebp+0x4]
c000828d:	83 ca ff             	or     edx,0xffffffff
c0008290:	e8 08 9a ff ff       	call   c0001c9d <st_dword>
c0008295:	8d 45 08             	lea    eax,[ebp+0x8]
c0008298:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000829d:	eb 04                	jmp    c00082a3 <f_mkfs+0xf6c>
c000829f:	89 da                	mov    edx,ebx
c00082a1:	89 e8                	mov    eax,ebp
c00082a3:	e8 f5 99 ff ff       	call   c0001c9d <st_dword>
c00082a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082b8:	39 ce                	cmp    esi,ecx
c00082ba:	76 02                	jbe    c00082be <f_mkfs+0xf87>
c00082bc:	89 ce                	mov    esi,ecx
c00082be:	83 ec 0c             	sub    esp,0xc
c00082c1:	56                   	push   esi
c00082c2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082c6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082ca:	55                   	push   ebp
c00082cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082cf:	e8 1e 99 ff ff       	call   c0001bf2 <disk_write>
c00082d4:	83 c4 20             	add    esp,0x20
c00082d7:	85 c0                	test   eax,eax
c00082d9:	0f 85 09 01 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00082df:	31 d2                	xor    edx,edx
c00082e1:	b9 00 02 00 00       	mov    ecx,0x200
c00082e6:	89 e8                	mov    eax,ebp
c00082e8:	e8 ce 99 ff ff       	call   c0001cbb <mem_set>
c00082ed:	31 d2                	xor    edx,edx
c00082ef:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00082f3:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00082f7:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00082fb:	75 b3                	jne    c00082b0 <f_mkfs+0xf79>
c00082fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008300:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008307:	40                   	inc    eax
c0008308:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000830c:	0f 87 65 ff ff ff    	ja     c0008277 <f_mkfs+0xf40>
c0008312:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008317:	74 04                	je     c000831d <f_mkfs+0xfe6>
c0008319:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000831d:	89 fb                	mov    ebx,edi
c000831f:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008323:	76 04                	jbe    c0008329 <f_mkfs+0xff2>
c0008325:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	53                   	push   ebx
c000832d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008331:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008335:	55                   	push   ebp
c0008336:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000833a:	e8 b3 98 ff ff       	call   c0001bf2 <disk_write>
c000833f:	83 c4 20             	add    esp,0x20
c0008342:	85 c0                	test   eax,eax
c0008344:	0f 85 9e 00 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000834a:	31 d2                	xor    edx,edx
c000834c:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008350:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008354:	29 df                	sub    edi,ebx
c0008356:	75 c5                	jne    c000831d <f_mkfs+0xfe6>
c0008358:	b1 0c                	mov    cl,0xc
c000835a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000835f:	74 1d                	je     c000837e <f_mkfs+0x1047>
c0008361:	b8 ff ff 00 00       	mov    eax,0xffff
c0008366:	b1 06                	mov    cl,0x6
c0008368:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000836c:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008370:	72 0c                	jb     c000837e <f_mkfs+0x1047>
c0008372:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008377:	0f 94 c1             	sete   cl
c000837a:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000837e:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008383:	75 4c                	jne    c00083d1 <f_mkfs+0x109a>
c0008385:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008389:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000838d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008394:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000839b:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083a6:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083b1:	0f b6 c9             	movzx  ecx,cl
c00083b4:	83 ec 0c             	sub    esp,0xc
c00083b7:	55                   	push   ebp
c00083b8:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083c3:	e8 2f c2 ff ff       	call   c00045f7 <create_partition>
c00083c8:	83 c4 10             	add    esp,0x10
c00083cb:	89 c3                	mov    ebx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	75 34                	jne    c0008405 <f_mkfs+0x10ce>
c00083d1:	31 db                	xor    ebx,ebx
c00083d3:	50                   	push   eax
c00083d4:	6a 00                	push   0x0
c00083d6:	6a 00                	push   0x0
c00083d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083dc:	e8 27 98 ff ff       	call   c0001c08 <disk_ioctl>
c00083e1:	83 c4 10             	add    esp,0x10
c00083e4:	85 c0                	test   eax,eax
c00083e6:	74 1d                	je     c0008405 <f_mkfs+0x10ce>
c00083e8:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00083f0:	75 0c                	jne    c00083fe <f_mkfs+0x10c7>
c00083f2:	83 ec 0c             	sub    esp,0xc
c00083f5:	55                   	push   ebp
c00083f6:	e8 75 00 00 00       	call   c0008470 <ff_memfree>
c00083fb:	83 c4 10             	add    esp,0x10
c00083fe:	bb 01 00 00 00       	mov    ebx,0x1
c0008403:	eb 48                	jmp    c000844d <f_mkfs+0x1116>
c0008405:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000840d:	75 3e                	jne    c000844d <f_mkfs+0x1116>
c000840f:	83 ec 0c             	sub    esp,0xc
c0008412:	55                   	push   ebp
c0008413:	e8 58 00 00 00       	call   c0008470 <ff_memfree>
c0008418:	83 c4 10             	add    esp,0x10
c000841b:	eb 30                	jmp    c000844d <f_mkfs+0x1116>
c000841d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008422:	0f 85 eb fa ff ff    	jne    c0007f13 <f_mkfs+0xbdc>
c0008428:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000842c:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008432:	0f 86 b8 f9 ff ff    	jbe    c0007df0 <f_mkfs+0xab9>
c0008438:	e9 bf fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000843d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008442:	0f 85 c0 fa ff ff    	jne    c0007f08 <f_mkfs+0xbd1>
c0008448:	e9 af fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000844d:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008453:	89 d8                	mov    eax,ebx
c0008455:	5b                   	pop    ebx
c0008456:	5e                   	pop    esi
c0008457:	5f                   	pop    edi
c0008458:	5d                   	pop    ebp
c0008459:	c3                   	ret    

c000845a <ff_memalloc>:
c000845a:	83 ec 0c             	sub    esp,0xc
c000845d:	83 ec 0c             	sub    esp,0xc
c0008460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008464:	e8 23 74 00 00       	call   c000f88c <malloc>
c0008469:	83 c4 10             	add    esp,0x10
c000846c:	83 c4 0c             	add    esp,0xc
c000846f:	c3                   	ret    

c0008470 <ff_memfree>:
c0008470:	83 ec 0c             	sub    esp,0xc
c0008473:	83 ec 0c             	sub    esp,0xc
c0008476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000847a:	e8 1d 74 00 00       	call   c000f89c <free>
c000847f:	83 c4 10             	add    esp,0x10
c0008482:	90                   	nop
c0008483:	83 c4 0c             	add    esp,0xc
c0008486:	c3                   	ret    

c0008487 <ff_uni2oem>:
c0008487:	83 ec 14             	sub    esp,0x14
c000848a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000848e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008492:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008499:	c7 44 24 0c a0 a1 02 c0 	mov    DWORD PTR [esp+0xc],0xc002a1a0
c00084a1:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084a6:	77 0b                	ja     c00084b3 <ff_uni2oem+0x2c>
c00084a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084ac:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084b1:	eb 5b                	jmp    c000850e <ff_uni2oem+0x87>
c00084b3:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084bb:	77 51                	ja     c000850e <ff_uni2oem+0x87>
c00084bd:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084c3:	75 49                	jne    c000850e <ff_uni2oem+0x87>
c00084c5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084cc:	eb 0b                	jmp    c00084d9 <ff_uni2oem+0x52>
c00084ce:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084d3:	40                   	inc    eax
c00084d4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084d9:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00084df:	77 1b                	ja     c00084fc <ff_uni2oem+0x75>
c00084e1:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00084e6:	01 c0                	add    eax,eax
c00084e8:	89 c2                	mov    edx,eax
c00084ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084ee:	01 d0                	add    eax,edx
c00084f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00084f3:	0f b7 c0             	movzx  eax,ax
c00084f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00084fa:	75 d2                	jne    c00084ce <ff_uni2oem+0x47>
c00084fc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008501:	83 e8 80             	sub    eax,0xffffff80
c0008504:	25 ff 00 00 00       	and    eax,0xff
c0008509:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000850e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008513:	83 c4 14             	add    esp,0x14
c0008516:	c3                   	ret    

c0008517 <ff_oem2uni>:
c0008517:	83 ec 18             	sub    esp,0x18
c000851a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000851e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008522:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008527:	66 89 04 24          	mov    WORD PTR [esp],ax
c000852b:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008532:	c7 44 24 10 a0 a1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a1a0
c000853a:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008540:	77 0b                	ja     c000854d <ff_oem2uni+0x36>
c0008542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008546:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000854b:	eb 2d                	jmp    c000857a <ff_oem2uni+0x63>
c000854d:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008553:	75 25                	jne    c000857a <ff_oem2uni+0x63>
c0008555:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000855c:	77 1c                	ja     c000857a <ff_oem2uni+0x63>
c000855e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008563:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008568:	01 c0                	add    eax,eax
c000856a:	89 c2                	mov    edx,eax
c000856c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008570:	01 d0                	add    eax,edx
c0008572:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008575:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000857a:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000857f:	83 c4 18             	add    esp,0x18
c0008582:	c3                   	ret    

c0008583 <ff_wtoupper>:
c0008583:	83 ec 10             	sub    esp,0x10
c0008586:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000858e:	0f 87 3e 01 00 00    	ja     c00086d2 <ff_wtoupper+0x14f>
c0008594:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008598:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000859d:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085a4:	77 07                	ja     c00085ad <ff_wtoupper+0x2a>
c00085a6:	b8 a0 9f 02 c0       	mov    eax,0xc0029fa0
c00085ab:	eb 05                	jmp    c00085b2 <ff_wtoupper+0x2f>
c00085ad:	b8 e0 9e 02 c0       	mov    eax,0xc0029ee0
c00085b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085ba:	8d 50 02             	lea    edx,[eax+0x2]
c00085bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085c1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085c4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00085c9:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00085cf:	0f 84 f4 00 00 00    	je     c00086c9 <ff_wtoupper+0x146>
c00085d5:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00085da:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00085df:	0f 82 e4 00 00 00    	jb     c00086c9 <ff_wtoupper+0x146>
c00085e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085e9:	8d 50 02             	lea    edx,[eax+0x2]
c00085ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085f3:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00085f8:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00085fd:	66 c1 e8 08          	shr    ax,0x8
c0008601:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008606:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000860d:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008612:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008617:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000861c:	01 ca                	add    edx,ecx
c000861e:	39 d0                	cmp    eax,edx
c0008620:	0f 8d 86 00 00 00    	jge    c00086ac <ff_wtoupper+0x129>
c0008626:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000862b:	83 f8 08             	cmp    eax,0x8
c000862e:	0f 87 94 00 00 00    	ja     c00086c8 <ff_wtoupper+0x145>
c0008634:	8b 04 85 a0 9e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6160]
c000863b:	ff e0                	jmp    eax
c000863d:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008642:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008647:	29 c2                	sub    edx,eax
c0008649:	89 d0                	mov    eax,edx
c000864b:	01 c0                	add    eax,eax
c000864d:	89 c2                	mov    edx,eax
c000864f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008653:	01 d0                	add    eax,edx
c0008655:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008658:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000865d:	eb 4b                	jmp    c00086aa <ff_wtoupper+0x127>
c000865f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008664:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008668:	83 e0 01             	and    eax,0x1
c000866b:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008670:	eb 38                	jmp    c00086aa <ff_wtoupper+0x127>
c0008672:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008678:	eb 30                	jmp    c00086aa <ff_wtoupper+0x127>
c000867a:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008680:	eb 28                	jmp    c00086aa <ff_wtoupper+0x127>
c0008682:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008688:	eb 20                	jmp    c00086aa <ff_wtoupper+0x127>
c000868a:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008690:	eb 18                	jmp    c00086aa <ff_wtoupper+0x127>
c0008692:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008698:	eb 10                	jmp    c00086aa <ff_wtoupper+0x127>
c000869a:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086a0:	eb 08                	jmp    c00086aa <ff_wtoupper+0x127>
c00086a2:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086a9:	90                   	nop
c00086aa:	eb 1c                	jmp    c00086c8 <ff_wtoupper+0x145>
c00086ac:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086b2:	0f 85 fe fe ff ff    	jne    c00085b6 <ff_wtoupper+0x33>
c00086b8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086bd:	01 c0                	add    eax,eax
c00086bf:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086c3:	e9 ee fe ff ff       	jmp    c00085b6 <ff_wtoupper+0x33>
c00086c8:	90                   	nop
c00086c9:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00086ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00086d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00086d6:	83 c4 10             	add    esp,0x10
c00086d9:	c3                   	ret    

c00086da <psrc_set_converter>:
c00086da:	56                   	push   esi
c00086db:	89 d6                	mov    esi,edx
c00086dd:	53                   	push   ebx
c00086de:	89 c3                	mov    ebx,eax
c00086e0:	83 ec 0c             	sub    esp,0xc
c00086e3:	52                   	push   edx
c00086e4:	50                   	push   eax
c00086e5:	e8 6f 55 00 00       	call   c000dc59 <sinc_set_converter>
c00086ea:	83 c4 10             	add    esp,0x10
c00086ed:	85 c0                	test   eax,eax
c00086ef:	74 25                	je     c0008716 <psrc_set_converter+0x3c>
c00086f1:	50                   	push   eax
c00086f2:	50                   	push   eax
c00086f3:	56                   	push   esi
c00086f4:	53                   	push   ebx
c00086f5:	e8 17 5d 00 00       	call   c000e411 <zoh_set_converter>
c00086fa:	83 c4 10             	add    esp,0x10
c00086fd:	85 c0                	test   eax,eax
c00086ff:	74 15                	je     c0008716 <psrc_set_converter+0x3c>
c0008701:	51                   	push   ecx
c0008702:	51                   	push   ecx
c0008703:	56                   	push   esi
c0008704:	53                   	push   ebx
c0008705:	e8 0f 11 00 00       	call   c0009819 <linear_set_converter>
c000870a:	83 c4 10             	add    esp,0x10
c000870d:	ba 0a 00 00 00       	mov    edx,0xa
c0008712:	85 c0                	test   eax,eax
c0008714:	75 02                	jne    c0008718 <psrc_set_converter+0x3e>
c0008716:	31 d2                	xor    edx,edx
c0008718:	89 d0                	mov    eax,edx
c000871a:	5a                   	pop    edx
c000871b:	5b                   	pop    ebx
c000871c:	5e                   	pop    esi
c000871d:	c3                   	ret    

c000871e <src_delete>:
c000871e:	53                   	push   ebx
c000871f:	83 ec 08             	sub    esp,0x8
c0008722:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008726:	85 db                	test   ebx,ebx
c0008728:	74 29                	je     c0008753 <src_delete+0x35>
c000872a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000872d:	85 c0                	test   eax,eax
c000872f:	74 0c                	je     c000873d <src_delete+0x1f>
c0008731:	83 ec 0c             	sub    esp,0xc
c0008734:	50                   	push   eax
c0008735:	e8 62 71 00 00       	call   c000f89c <free>
c000873a:	83 c4 10             	add    esp,0x10
c000873d:	50                   	push   eax
c000873e:	6a 3c                	push   0x3c
c0008740:	6a 00                	push   0x0
c0008742:	53                   	push   ebx
c0008743:	e8 08 80 ff ff       	call   c0000750 <memset>
c0008748:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000874b:	e8 4c 71 00 00       	call   c000f89c <free>
c0008750:	83 c4 10             	add    esp,0x10
c0008753:	31 c0                	xor    eax,eax
c0008755:	83 c4 08             	add    esp,0x8
c0008758:	5b                   	pop    ebx
c0008759:	c3                   	ret    

c000875a <src_process>:
c000875a:	55                   	push   ebp
c000875b:	57                   	push   edi
c000875c:	56                   	push   esi
c000875d:	53                   	push   ebx
c000875e:	83 ec 1c             	sub    esp,0x1c
c0008761:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008765:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008769:	85 ed                	test   ebp,ebp
c000876b:	0f 84 6f 01 00 00    	je     c00088e0 <src_process+0x186>
c0008771:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008775:	0f 84 6c 01 00 00    	je     c00088e7 <src_process+0x18d>
c000877b:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000877f:	0f 84 62 01 00 00    	je     c00088e7 <src_process+0x18d>
c0008785:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c000878c:	0f 85 5c 01 00 00    	jne    c00088ee <src_process+0x194>
c0008792:	85 db                	test   ebx,ebx
c0008794:	0f 84 5b 01 00 00    	je     c00088f5 <src_process+0x19b>
c000879a:	8b 33                	mov    esi,DWORD PTR [ebx]
c000879c:	85 f6                	test   esi,esi
c000879e:	0f 84 58 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087a4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087a7:	85 ff                	test   edi,edi
c00087a9:	0f 84 4d 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087af:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087b2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087bd:	68 00 00 70 3f       	push   0x3f700000
c00087c2:	6a 00                	push   0x0
c00087c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087cc:	e8 96 05 02 00       	call   c0028d67 <__ltdf2>
c00087d1:	83 c4 10             	add    esp,0x10
c00087d4:	85 c0                	test   eax,eax
c00087d6:	0f 88 27 01 00 00    	js     c0008903 <src_process+0x1a9>
c00087dc:	68 00 00 70 40       	push   0x40700000
c00087e1:	6a 00                	push   0x0
c00087e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087eb:	e8 59 05 02 00       	call   c0028d49 <__gtdf2>
c00087f0:	83 c4 10             	add    esp,0x10
c00087f3:	85 c0                	test   eax,eax
c00087f5:	0f 8f 08 01 00 00    	jg     c0008903 <src_process+0x1a9>
c00087fb:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00087ff:	79 07                	jns    c0008808 <src_process+0xae>
c0008801:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008808:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000880b:	85 c0                	test   eax,eax
c000880d:	79 50                	jns    c000885f <src_process+0x105>
c000880f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008816:	39 fe                	cmp    esi,edi
c0008818:	72 37                	jb     c0008851 <src_process+0xf7>
c000881a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008821:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008828:	68 00 00 70 3f       	push   0x3f700000
c000882d:	6a 00                	push   0x0
c000882f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008832:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008835:	e8 2d 05 02 00       	call   c0028d67 <__ltdf2>
c000883a:	83 c4 10             	add    esp,0x10
c000883d:	85 c0                	test   eax,eax
c000883f:	79 37                	jns    c0008878 <src_process+0x11e>
c0008841:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008845:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008849:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000884c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000884f:	eb 27                	jmp    c0008878 <src_process+0x11e>
c0008851:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008854:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008858:	8d 04 86             	lea    eax,[esi+eax*4]
c000885b:	39 c7                	cmp    edi,eax
c000885d:	eb 0d                	jmp    c000886c <src_process+0x112>
c000885f:	39 fe                	cmp    esi,edi
c0008861:	72 ee                	jb     c0008851 <src_process+0xf7>
c0008863:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008867:	8d 04 87             	lea    eax,[edi+eax*4]
c000886a:	39 c6                	cmp    esi,eax
c000886c:	73 ac                	jae    c000881a <src_process+0xc0>
c000886e:	b8 10 00 00 00       	mov    eax,0x10
c0008873:	e9 90 00 00 00       	jmp    c0008908 <src_process+0x1ae>
c0008878:	83 ec 10             	sub    esp,0x10
c000887b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000887e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008881:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008884:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008887:	e8 e0 fb 01 00       	call   c002846c <__subdf3>
c000888c:	83 c4 18             	add    esp,0x18
c000888f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008893:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008897:	52                   	push   edx
c0008898:	50                   	push   eax
c0008899:	e8 62 06 02 00       	call   c0028f00 <fabs>
c000889e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088a6:	83 c4 10             	add    esp,0x10
c00088a9:	68 af 03 d2 3c       	push   0x3cd203af
c00088ae:	68 16 56 e7 9e       	push   0x9ee75616
c00088b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088bb:	e8 a7 04 02 00       	call   c0028d67 <__ltdf2>
c00088c0:	83 c4 10             	add    esp,0x10
c00088c3:	85 c0                	test   eax,eax
c00088c5:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00088c9:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00088cd:	79 05                	jns    c00088d4 <src_process+0x17a>
c00088cf:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00088d2:	eb 03                	jmp    c00088d7 <src_process+0x17d>
c00088d4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00088d7:	83 c4 1c             	add    esp,0x1c
c00088da:	5b                   	pop    ebx
c00088db:	5e                   	pop    esi
c00088dc:	5f                   	pop    edi
c00088dd:	5d                   	pop    ebp
c00088de:	ff e0                	jmp    eax
c00088e0:	b8 02 00 00 00       	mov    eax,0x2
c00088e5:	eb 21                	jmp    c0008908 <src_process+0x1ae>
c00088e7:	b8 07 00 00 00       	mov    eax,0x7
c00088ec:	eb 1a                	jmp    c0008908 <src_process+0x1ae>
c00088ee:	b8 12 00 00 00       	mov    eax,0x12
c00088f3:	eb 13                	jmp    c0008908 <src_process+0x1ae>
c00088f5:	b8 03 00 00 00       	mov    eax,0x3
c00088fa:	eb 0c                	jmp    c0008908 <src_process+0x1ae>
c00088fc:	b8 04 00 00 00       	mov    eax,0x4
c0008901:	eb 05                	jmp    c0008908 <src_process+0x1ae>
c0008903:	b8 06 00 00 00       	mov    eax,0x6
c0008908:	83 c4 1c             	add    esp,0x1c
c000890b:	5b                   	pop    ebx
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	5d                   	pop    ebp
c000890f:	c3                   	ret    

c0008910 <src_callback_read>:
c0008910:	55                   	push   ebp
c0008911:	57                   	push   edi
c0008912:	56                   	push   esi
c0008913:	53                   	push   ebx
c0008914:	83 ec 3c             	sub    esp,0x3c
c0008917:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000891b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000891f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008923:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008927:	85 ed                	test   ebp,ebp
c0008929:	0f 8e 52 01 00 00    	jle    c0008a81 <src_callback_read+0x171>
c000892f:	85 db                	test   ebx,ebx
c0008931:	0f 84 4a 01 00 00    	je     c0008a81 <src_callback_read+0x171>
c0008937:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000893e:	74 0c                	je     c000894c <src_callback_read+0x3c>
c0008940:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008947:	e9 35 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000894c:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008950:	75 0c                	jne    c000895e <src_callback_read+0x4e>
c0008952:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008959:	e9 23 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000895e:	51                   	push   ecx
c000895f:	6a 24                	push   0x24
c0008961:	6a 00                	push   0x0
c0008963:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008967:	50                   	push   eax
c0008968:	e8 e3 7d ff ff       	call   c0000750 <memset>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	68 00 00 70 3f       	push   0x3f700000
c0008975:	6a 00                	push   0x0
c0008977:	57                   	push   edi
c0008978:	56                   	push   esi
c0008979:	e8 e9 03 02 00       	call   c0028d67 <__ltdf2>
c000897e:	83 c4 10             	add    esp,0x10
c0008981:	85 c0                	test   eax,eax
c0008983:	78 3e                	js     c00089c3 <src_callback_read+0xb3>
c0008985:	68 00 00 70 40       	push   0x40700000
c000898a:	6a 00                	push   0x0
c000898c:	57                   	push   edi
c000898d:	56                   	push   esi
c000898e:	e8 b6 03 02 00       	call   c0028d49 <__gtdf2>
c0008993:	83 c4 10             	add    esp,0x10
c0008996:	85 c0                	test   eax,eax
c0008998:	7f 29                	jg     c00089c3 <src_callback_read+0xb3>
c000899a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000899e:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089a6:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089aa:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089ad:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089b5:	31 f6                	xor    esi,esi
c00089b7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089be:	e9 97 00 00 00       	jmp    c0008a5a <src_callback_read+0x14a>
c00089c3:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089ca:	e9 b2 00 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c00089cf:	8d 44 24 04          	lea    eax,[esp+0x4]
c00089d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089d7:	52                   	push   edx
c00089d8:	52                   	push   edx
c00089d9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089dd:	50                   	push   eax
c00089de:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089e1:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00089e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00089e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00089ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	85 c0                	test   eax,eax
c00089f5:	75 08                	jne    c00089ff <src_callback_read+0xef>
c00089f7:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00089ff:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a06:	50                   	push   eax
c0008a07:	50                   	push   eax
c0008a08:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a0c:	50                   	push   eax
c0008a0d:	53                   	push   ebx
c0008a0e:	e8 47 fd ff ff       	call   c000875a <src_process>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a1d:	85 c0                	test   eax,eax
c0008a1f:	75 49                	jne    c0008a6a <src_callback_read+0x15a>
c0008a21:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a25:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a28:	89 f9                	mov    ecx,edi
c0008a2a:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a2e:	0f af ca             	imul   ecx,edx
c0008a31:	c1 e1 02             	shl    ecx,0x2
c0008a34:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a38:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a3c:	0f af d1             	imul   edx,ecx
c0008a3f:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a43:	c1 e2 02             	shl    edx,0x2
c0008a46:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a4a:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a4d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a52:	74 12                	je     c0008a66 <src_callback_read+0x156>
c0008a54:	39 d5                	cmp    ebp,edx
c0008a56:	7e 14                	jle    c0008a6c <src_callback_read+0x15c>
c0008a58:	89 d6                	mov    esi,edx
c0008a5a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a5f:	75 9e                	jne    c00089ff <src_callback_read+0xef>
c0008a61:	e9 69 ff ff ff       	jmp    c00089cf <src_callback_read+0xbf>
c0008a66:	85 c9                	test   ecx,ecx
c0008a68:	75 ea                	jne    c0008a54 <src_callback_read+0x144>
c0008a6a:	89 f2                	mov    edx,esi
c0008a6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008a70:	85 c0                	test   eax,eax
c0008a72:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a75:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a79:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a7c:	74 05                	je     c0008a83 <src_callback_read+0x173>
c0008a7e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a81:	31 d2                	xor    edx,edx
c0008a83:	83 c4 3c             	add    esp,0x3c
c0008a86:	89 d0                	mov    eax,edx
c0008a88:	5b                   	pop    ebx
c0008a89:	5e                   	pop    esi
c0008a8a:	5f                   	pop    edi
c0008a8b:	5d                   	pop    ebp
c0008a8c:	c3                   	ret    

c0008a8d <src_set_ratio>:
c0008a8d:	57                   	push   edi
c0008a8e:	ba 02 00 00 00       	mov    edx,0x2
c0008a93:	56                   	push   esi
c0008a94:	53                   	push   ebx
c0008a95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a9d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008aa1:	85 db                	test   ebx,ebx
c0008aa3:	74 4c                	je     c0008af1 <src_set_ratio+0x64>
c0008aa5:	ba 07 00 00 00       	mov    edx,0x7
c0008aaa:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008aae:	74 41                	je     c0008af1 <src_set_ratio+0x64>
c0008ab0:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008ab4:	74 3b                	je     c0008af1 <src_set_ratio+0x64>
c0008ab6:	68 00 00 70 3f       	push   0x3f700000
c0008abb:	6a 00                	push   0x0
c0008abd:	57                   	push   edi
c0008abe:	56                   	push   esi
c0008abf:	e8 a3 02 02 00       	call   c0028d67 <__ltdf2>
c0008ac4:	83 c4 10             	add    esp,0x10
c0008ac7:	ba 06 00 00 00       	mov    edx,0x6
c0008acc:	85 c0                	test   eax,eax
c0008ace:	78 21                	js     c0008af1 <src_set_ratio+0x64>
c0008ad0:	68 00 00 70 40       	push   0x40700000
c0008ad5:	6a 00                	push   0x0
c0008ad7:	57                   	push   edi
c0008ad8:	56                   	push   esi
c0008ad9:	e8 6b 02 02 00       	call   c0028d49 <__gtdf2>
c0008ade:	83 c4 10             	add    esp,0x10
c0008ae1:	ba 06 00 00 00       	mov    edx,0x6
c0008ae6:	85 c0                	test   eax,eax
c0008ae8:	7f 07                	jg     c0008af1 <src_set_ratio+0x64>
c0008aea:	89 33                	mov    DWORD PTR [ebx],esi
c0008aec:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008aef:	31 d2                	xor    edx,edx
c0008af1:	5b                   	pop    ebx
c0008af2:	89 d0                	mov    eax,edx
c0008af4:	5e                   	pop    esi
c0008af5:	5f                   	pop    edi
c0008af6:	c3                   	ret    

c0008af7 <src_get_channels>:
c0008af7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008afb:	b8 02 00 00 00       	mov    eax,0x2
c0008b00:	85 d2                	test   edx,edx
c0008b02:	74 14                	je     c0008b18 <src_get_channels+0x21>
c0008b04:	b8 07 00 00 00       	mov    eax,0x7
c0008b09:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b0d:	74 09                	je     c0008b18 <src_get_channels+0x21>
c0008b0f:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b13:	74 03                	je     c0008b18 <src_get_channels+0x21>
c0008b15:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b18:	c3                   	ret    

c0008b19 <src_reset>:
c0008b19:	53                   	push   ebx
c0008b1a:	b8 02 00 00 00       	mov    eax,0x2
c0008b1f:	83 ec 08             	sub    esp,0x8
c0008b22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b26:	85 db                	test   ebx,ebx
c0008b28:	74 36                	je     c0008b60 <src_reset+0x47>
c0008b2a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b2d:	85 c0                	test   eax,eax
c0008b2f:	74 09                	je     c0008b3a <src_reset+0x21>
c0008b31:	83 ec 0c             	sub    esp,0xc
c0008b34:	53                   	push   ebx
c0008b35:	ff d0                	call   eax
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	31 c0                	xor    eax,eax
c0008b3c:	31 d2                	xor    edx,edx
c0008b3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b41:	89 03                	mov    DWORD PTR [ebx],eax
c0008b43:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b46:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b49:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b50:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b5e:	31 c0                	xor    eax,eax
c0008b60:	83 c4 08             	add    esp,0x8
c0008b63:	5b                   	pop    ebx
c0008b64:	c3                   	ret    

c0008b65 <src_new>:
c0008b65:	57                   	push   edi
c0008b66:	56                   	push   esi
c0008b67:	53                   	push   ebx
c0008b68:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b6c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b70:	85 f6                	test   esi,esi
c0008b72:	74 73                	je     c0008be7 <src_new+0x82>
c0008b74:	85 ff                	test   edi,edi
c0008b76:	7f 08                	jg     c0008b80 <src_new+0x1b>
c0008b78:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b7e:	eb 1e                	jmp    c0008b9e <src_new+0x39>
c0008b80:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008b86:	50                   	push   eax
c0008b87:	50                   	push   eax
c0008b88:	6a 3c                	push   0x3c
c0008b8a:	6a 01                	push   0x1
c0008b8c:	e8 2b 6d 00 00       	call   c000f8bc <calloc>
c0008b91:	83 c4 10             	add    esp,0x10
c0008b94:	89 c3                	mov    ebx,eax
c0008b96:	85 c0                	test   eax,eax
c0008b98:	75 10                	jne    c0008baa <src_new+0x45>
c0008b9a:	85 f6                	test   esi,esi
c0008b9c:	75 04                	jne    c0008ba2 <src_new+0x3d>
c0008b9e:	31 db                	xor    ebx,ebx
c0008ba0:	eb 4b                	jmp    c0008bed <src_new+0x88>
c0008ba2:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008ba8:	eb 43                	jmp    c0008bed <src_new+0x88>
c0008baa:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bad:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bb8:	e8 1d fb ff ff       	call   c00086da <psrc_set_converter>
c0008bbd:	85 c0                	test   eax,eax
c0008bbf:	74 18                	je     c0008bd9 <src_new+0x74>
c0008bc1:	85 f6                	test   esi,esi
c0008bc3:	74 06                	je     c0008bcb <src_new+0x66>
c0008bc5:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008bcb:	83 ec 0c             	sub    esp,0xc
c0008bce:	53                   	push   ebx
c0008bcf:	31 db                	xor    ebx,ebx
c0008bd1:	e8 c6 6c 00 00       	call   c000f89c <free>
c0008bd6:	83 c4 10             	add    esp,0x10
c0008bd9:	83 ec 0c             	sub    esp,0xc
c0008bdc:	53                   	push   ebx
c0008bdd:	e8 37 ff ff ff       	call   c0008b19 <src_reset>
c0008be2:	83 c4 10             	add    esp,0x10
c0008be5:	eb 06                	jmp    c0008bed <src_new+0x88>
c0008be7:	85 ff                	test   edi,edi
c0008be9:	7f 9b                	jg     c0008b86 <src_new+0x21>
c0008beb:	eb b1                	jmp    c0008b9e <src_new+0x39>
c0008bed:	89 d8                	mov    eax,ebx
c0008bef:	5b                   	pop    ebx
c0008bf0:	5e                   	pop    esi
c0008bf1:	5f                   	pop    edi
c0008bf2:	c3                   	ret    

c0008bf3 <src_callback_new>:
c0008bf3:	56                   	push   esi
c0008bf4:	53                   	push   ebx
c0008bf5:	53                   	push   ebx
c0008bf6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008bfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bfe:	85 f6                	test   esi,esi
c0008c00:	75 0e                	jne    c0008c10 <src_callback_new+0x1d>
c0008c02:	31 db                	xor    ebx,ebx
c0008c04:	85 c0                	test   eax,eax
c0008c06:	74 47                	je     c0008c4f <src_callback_new+0x5c>
c0008c08:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c0e:	eb 3f                	jmp    c0008c4f <src_callback_new+0x5c>
c0008c10:	85 c0                	test   eax,eax
c0008c12:	74 06                	je     c0008c1a <src_callback_new+0x27>
c0008c14:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c1a:	51                   	push   ecx
c0008c1b:	50                   	push   eax
c0008c1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c24:	e8 3c ff ff ff       	call   c0008b65 <src_new>
c0008c29:	83 c4 10             	add    esp,0x10
c0008c2c:	89 c3                	mov    ebx,eax
c0008c2e:	85 c0                	test   eax,eax
c0008c30:	74 1d                	je     c0008c4f <src_callback_new+0x5c>
c0008c32:	83 ec 0c             	sub    esp,0xc
c0008c35:	50                   	push   eax
c0008c36:	e8 de fe ff ff       	call   c0008b19 <src_reset>
c0008c3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c3f:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c46:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c49:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c4c:	83 c4 10             	add    esp,0x10
c0008c4f:	89 d8                	mov    eax,ebx
c0008c51:	5a                   	pop    edx
c0008c52:	5b                   	pop    ebx
c0008c53:	5e                   	pop    esi
c0008c54:	c3                   	ret    

c0008c55 <src_get_name>:
c0008c55:	53                   	push   ebx
c0008c56:	83 ec 14             	sub    esp,0x14
c0008c59:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c5d:	53                   	push   ebx
c0008c5e:	e8 d0 4f 00 00       	call   c000dc33 <sinc_get_name>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	85 c0                	test   eax,eax
c0008c68:	75 1d                	jne    c0008c87 <src_get_name+0x32>
c0008c6a:	83 ec 0c             	sub    esp,0xc
c0008c6d:	53                   	push   ebx
c0008c6e:	e8 80 57 00 00       	call   c000e3f3 <zoh_get_name>
c0008c73:	83 c4 10             	add    esp,0x10
c0008c76:	85 c0                	test   eax,eax
c0008c78:	75 0d                	jne    c0008c87 <src_get_name+0x32>
c0008c7a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c7e:	83 c4 08             	add    esp,0x8
c0008c81:	5b                   	pop    ebx
c0008c82:	e9 74 0b 00 00       	jmp    c00097fb <linear_get_name>
c0008c87:	83 c4 08             	add    esp,0x8
c0008c8a:	5b                   	pop    ebx
c0008c8b:	c3                   	ret    

c0008c8c <src_get_description>:
c0008c8c:	53                   	push   ebx
c0008c8d:	83 ec 14             	sub    esp,0x14
c0008c90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c94:	53                   	push   ebx
c0008c95:	e8 ac 4f 00 00       	call   c000dc46 <sinc_get_description>
c0008c9a:	83 c4 10             	add    esp,0x10
c0008c9d:	85 c0                	test   eax,eax
c0008c9f:	75 1d                	jne    c0008cbe <src_get_description+0x32>
c0008ca1:	83 ec 0c             	sub    esp,0xc
c0008ca4:	53                   	push   ebx
c0008ca5:	e8 58 57 00 00       	call   c000e402 <zoh_get_description>
c0008caa:	83 c4 10             	add    esp,0x10
c0008cad:	85 c0                	test   eax,eax
c0008caf:	75 0d                	jne    c0008cbe <src_get_description+0x32>
c0008cb1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb5:	83 c4 08             	add    esp,0x8
c0008cb8:	5b                   	pop    ebx
c0008cb9:	e9 4c 0b 00 00       	jmp    c000980a <linear_get_description>
c0008cbe:	83 c4 08             	add    esp,0x8
c0008cc1:	5b                   	pop    ebx
c0008cc2:	c3                   	ret    

c0008cc3 <src_get_version>:
c0008cc3:	b8 a0 a2 02 c0       	mov    eax,0xc002a2a0
c0008cc8:	c3                   	ret    

c0008cc9 <src_is_valid_ratio>:
c0008cc9:	83 ec 1c             	sub    esp,0x1c
c0008ccc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cd4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cdc:	68 00 00 70 3f       	push   0x3f700000
c0008ce1:	6a 00                	push   0x0
c0008ce3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ceb:	e8 77 00 02 00       	call   c0028d67 <__ltdf2>
c0008cf0:	83 c4 10             	add    esp,0x10
c0008cf3:	31 d2                	xor    edx,edx
c0008cf5:	85 c0                	test   eax,eax
c0008cf7:	78 1e                	js     c0008d17 <src_is_valid_ratio+0x4e>
c0008cf9:	68 00 00 70 40       	push   0x40700000
c0008cfe:	6a 00                	push   0x0
c0008d00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d08:	e8 3c 00 02 00       	call   c0028d49 <__gtdf2>
c0008d0d:	31 d2                	xor    edx,edx
c0008d0f:	83 c4 10             	add    esp,0x10
c0008d12:	85 c0                	test   eax,eax
c0008d14:	0f 9e c2             	setle  dl
c0008d17:	89 d0                	mov    eax,edx
c0008d19:	83 c4 1c             	add    esp,0x1c
c0008d1c:	c3                   	ret    

c0008d1d <src_error>:
c0008d1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d21:	31 c0                	xor    eax,eax
c0008d23:	85 d2                	test   edx,edx
c0008d25:	74 03                	je     c0008d2a <src_error+0xd>
c0008d27:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d2a:	c3                   	ret    

c0008d2b <src_strerror>:
c0008d2b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d2f:	31 c0                	xor    eax,eax
c0008d31:	83 fa 17             	cmp    edx,0x17
c0008d34:	77 07                	ja     c0008d3d <src_strerror+0x12>
c0008d36:	8b 04 95 00 a7 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5900]
c0008d3d:	c3                   	ret    

c0008d3e <src_simple>:
c0008d3e:	56                   	push   esi
c0008d3f:	53                   	push   ebx
c0008d40:	83 ec 18             	sub    esp,0x18
c0008d43:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d47:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d4b:	50                   	push   eax
c0008d4c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d54:	e8 0c fe ff ff       	call   c0008b65 <src_new>
c0008d59:	83 c4 10             	add    esp,0x10
c0008d5c:	85 c0                	test   eax,eax
c0008d5e:	75 06                	jne    c0008d66 <src_simple+0x28>
c0008d60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d64:	eb 25                	jmp    c0008d8b <src_simple+0x4d>
c0008d66:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d6d:	89 c3                	mov    ebx,eax
c0008d6f:	50                   	push   eax
c0008d70:	50                   	push   eax
c0008d71:	56                   	push   esi
c0008d72:	53                   	push   ebx
c0008d73:	e8 e2 f9 ff ff       	call   c000875a <src_process>
c0008d78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d7f:	e8 9a f9 ff ff       	call   c000871e <src_delete>
c0008d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008d88:	83 c4 10             	add    esp,0x10
c0008d8b:	83 c4 14             	add    esp,0x14
c0008d8e:	5b                   	pop    ebx
c0008d8f:	5e                   	pop    esi
c0008d90:	c3                   	ret    

c0008d91 <src_short_to_float_array>:
c0008d91:	53                   	push   ebx
c0008d92:	83 ec 18             	sub    esp,0x18
c0008d95:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d99:	85 db                	test   ebx,ebx
c0008d9b:	74 54                	je     c0008df1 <src_short_to_float_array+0x60>
c0008d9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008da1:	4b                   	dec    ebx
c0008da2:	83 ec 0c             	sub    esp,0xc
c0008da5:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008da9:	50                   	push   eax
c0008daa:	e8 4c fd 01 00       	call   c0028afb <__floatsidf>
c0008daf:	83 c4 10             	add    esp,0x10
c0008db2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008db6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dba:	68 00 00 00 3f       	push   0x3f000000
c0008dbf:	6a 00                	push   0x0
c0008dc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc9:	e8 ca f6 01 00       	call   c0028498 <__muldf3>
c0008dce:	59                   	pop    ecx
c0008dcf:	59                   	pop    ecx
c0008dd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008dd4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008dd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ddc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de0:	e8 86 ff 01 00       	call   c0028d6b <__truncdfsf2>
c0008de5:	83 c4 10             	add    esp,0x10
c0008de8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008dec:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008def:	eb a8                	jmp    c0008d99 <src_short_to_float_array+0x8>
c0008df1:	83 c4 18             	add    esp,0x18
c0008df4:	5b                   	pop    ebx
c0008df5:	c3                   	ret    

c0008df6 <src_float_to_short_array>:
c0008df6:	56                   	push   esi
c0008df7:	53                   	push   ebx
c0008df8:	83 ec 14             	sub    esp,0x14
c0008dfb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008dff:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e03:	85 db                	test   ebx,ebx
c0008e05:	0f 84 a4 00 00 00    	je     c0008eaf <src_float_to_short_array+0xb9>
c0008e0b:	83 ec 0c             	sub    esp,0xc
c0008e0e:	4b                   	dec    ebx
c0008e0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e13:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e16:	e8 74 00 02 00       	call   c0028e8f <__extendsfdf2>
c0008e1b:	83 c4 10             	add    esp,0x10
c0008e1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e26:	68 00 00 e0 41       	push   0x41e00000
c0008e2b:	6a 00                	push   0x0
c0008e2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e35:	e8 5e f6 01 00       	call   c0028498 <__muldf3>
c0008e3a:	83 c4 10             	add    esp,0x10
c0008e3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e45:	68 ff ff df 41       	push   0x41dfffff
c0008e4a:	68 00 00 c0 ff       	push   0xffc00000
c0008e4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e57:	e8 09 ff 01 00       	call   c0028d65 <__gedf2>
c0008e5c:	83 c4 10             	add    esp,0x10
c0008e5f:	85 c0                	test   eax,eax
c0008e61:	78 08                	js     c0008e6b <src_float_to_short_array+0x75>
c0008e63:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008e69:	eb 98                	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e6b:	68 00 00 e0 c1       	push   0xc1e00000
c0008e70:	6a 00                	push   0x0
c0008e72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e7a:	e8 ea fe 01 00       	call   c0028d69 <__ledf2>
c0008e7f:	83 c4 10             	add    esp,0x10
c0008e82:	85 c0                	test   eax,eax
c0008e84:	7f 0b                	jg     c0008e91 <src_float_to_short_array+0x9b>
c0008e86:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008e8c:	e9 72 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e91:	50                   	push   eax
c0008e92:	50                   	push   eax
c0008e93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e9b:	e8 80 00 02 00       	call   c0028f20 <lrint>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	c1 f8 10             	sar    eax,0x10
c0008ea6:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008eaa:	e9 54 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008eaf:	83 c4 14             	add    esp,0x14
c0008eb2:	5b                   	pop    ebx
c0008eb3:	5e                   	pop    esi
c0008eb4:	c3                   	ret    

c0008eb5 <src_int_to_float_array>:
c0008eb5:	53                   	push   ebx
c0008eb6:	83 ec 18             	sub    esp,0x18
c0008eb9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ebd:	85 db                	test   ebx,ebx
c0008ebf:	74 52                	je     c0008f13 <src_int_to_float_array+0x5e>
c0008ec1:	83 ec 0c             	sub    esp,0xc
c0008ec4:	4b                   	dec    ebx
c0008ec5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ec9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ecc:	e8 2a fc 01 00       	call   c0028afb <__floatsidf>
c0008ed1:	83 c4 10             	add    esp,0x10
c0008ed4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ed8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008edc:	68 00 00 00 3e       	push   0x3e000000
c0008ee1:	6a 00                	push   0x0
c0008ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eeb:	e8 a8 f5 01 00       	call   c0028498 <__muldf3>
c0008ef0:	59                   	pop    ecx
c0008ef1:	59                   	pop    ecx
c0008ef2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ef6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008efa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008efe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f02:	e8 64 fe 01 00       	call   c0028d6b <__truncdfsf2>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f0e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f11:	eb aa                	jmp    c0008ebd <src_int_to_float_array+0x8>
c0008f13:	83 c4 18             	add    esp,0x18
c0008f16:	5b                   	pop    ebx
c0008f17:	c3                   	ret    

c0008f18 <src_float_to_int_array>:
c0008f18:	56                   	push   esi
c0008f19:	53                   	push   ebx
c0008f1a:	83 ec 14             	sub    esp,0x14
c0008f1d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f21:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f25:	85 db                	test   ebx,ebx
c0008f27:	0f 84 a2 00 00 00    	je     c0008fcf <src_float_to_int_array+0xb7>
c0008f2d:	83 ec 0c             	sub    esp,0xc
c0008f30:	4b                   	dec    ebx
c0008f31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f35:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f38:	e8 52 ff 01 00       	call   c0028e8f <__extendsfdf2>
c0008f3d:	83 c4 10             	add    esp,0x10
c0008f40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f48:	68 00 00 e0 41       	push   0x41e00000
c0008f4d:	6a 00                	push   0x0
c0008f4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f57:	e8 3c f5 01 00       	call   c0028498 <__muldf3>
c0008f5c:	83 c4 10             	add    esp,0x10
c0008f5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f67:	68 ff ff df 41       	push   0x41dfffff
c0008f6c:	68 00 00 c0 ff       	push   0xffc00000
c0008f71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f79:	e8 e7 fd 01 00       	call   c0028d65 <__gedf2>
c0008f7e:	83 c4 10             	add    esp,0x10
c0008f81:	85 c0                	test   eax,eax
c0008f83:	78 09                	js     c0008f8e <src_float_to_int_array+0x76>
c0008f85:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008f8c:	eb 97                	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008f8e:	68 00 00 e0 c1       	push   0xc1e00000
c0008f93:	6a 00                	push   0x0
c0008f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9d:	e8 c7 fd 01 00       	call   c0028d69 <__ledf2>
c0008fa2:	83 c4 10             	add    esp,0x10
c0008fa5:	85 c0                	test   eax,eax
c0008fa7:	7f 0c                	jg     c0008fb5 <src_float_to_int_array+0x9d>
c0008fa9:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fb0:	e9 70 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fb5:	50                   	push   eax
c0008fb6:	50                   	push   eax
c0008fb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbf:	e8 5c ff 01 00       	call   c0028f20 <lrint>
c0008fc4:	83 c4 10             	add    esp,0x10
c0008fc7:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008fca:	e9 56 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fcf:	83 c4 14             	add    esp,0x14
c0008fd2:	5b                   	pop    ebx
c0008fd3:	5e                   	pop    esi
c0008fd4:	c3                   	ret    

c0008fd5 <linear_vari_process>:
c0008fd5:	55                   	push   ebp
c0008fd6:	31 d2                	xor    edx,edx
c0008fd8:	57                   	push   edi
c0008fd9:	56                   	push   esi
c0008fda:	53                   	push   ebx
c0008fdb:	83 ec 3c             	sub    esp,0x3c
c0008fde:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008fe2:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008fe6:	0f 8e d3 07 00 00    	jle    c00097bf <linear_vari_process+0x7ea>
c0008fec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ff0:	ba 05 00 00 00       	mov    edx,0x5
c0008ff5:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008ff8:	85 db                	test   ebx,ebx
c0008ffa:	0f 84 bf 07 00 00    	je     c00097bf <linear_vari_process+0x7ea>
c0009000:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009003:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009007:	74 19                	je     c0009022 <linear_vari_process+0x4d>
c0009009:	31 d2                	xor    edx,edx
c000900b:	39 c2                	cmp    edx,eax
c000900d:	7d 0c                	jge    c000901b <linear_vari_process+0x46>
c000900f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009011:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009014:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009018:	42                   	inc    edx
c0009019:	eb f0                	jmp    c000900b <linear_vari_process+0x36>
c000901b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009022:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009025:	0f af d0             	imul   edx,eax
c0009028:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000902b:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000902f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009036:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009039:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009040:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009047:	8b 00                	mov    eax,DWORD PTR [eax]
c0009049:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000904d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009051:	68 00 00 70 3f       	push   0x3f700000
c0009056:	6a 00                	push   0x0
c0009058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000905c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009060:	e8 02 fd 01 00       	call   c0028d67 <__ltdf2>
c0009065:	83 c4 10             	add    esp,0x10
c0009068:	ba 16 00 00 00       	mov    edx,0x16
c000906d:	85 c0                	test   eax,eax
c000906f:	0f 88 4a 07 00 00    	js     c00097bf <linear_vari_process+0x7ea>
c0009075:	68 00 00 70 40       	push   0x40700000
c000907a:	6a 00                	push   0x0
c000907c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009084:	e8 c0 fc 01 00       	call   c0028d49 <__gtdf2>
c0009089:	83 c4 10             	add    esp,0x10
c000908c:	ba 16 00 00 00       	mov    edx,0x16
c0009091:	85 c0                	test   eax,eax
c0009093:	0f 8f 26 07 00 00    	jg     c00097bf <linear_vari_process+0x7ea>
c0009099:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000909d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090ab:	68 00 00 f0 3f       	push   0x3ff00000
c00090b0:	6a 00                	push   0x0
c00090b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ba:	e8 a8 fc 01 00       	call   c0028d67 <__ltdf2>
c00090bf:	83 c4 10             	add    esp,0x10
c00090c2:	85 c0                	test   eax,eax
c00090c4:	0f 89 89 02 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c00090ca:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c00090cd:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c00090d0:	0f 8d 7d 02 00 00    	jge    c0009353 <linear_vari_process+0x37e>
c00090d6:	83 ec 0c             	sub    esp,0xc
c00090d9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090dc:	e8 1a fa 01 00       	call   c0028afb <__floatsidf>
c00090e1:	83 c4 10             	add    esp,0x10
c00090e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00090e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00090eb:	68 00 00 f0 3f       	push   0x3ff00000
c00090f0:	6a 00                	push   0x0
c00090f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fa:	e8 1c ed 01 00       	call   c0027e1b <__adddf3>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009106:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000910a:	52                   	push   edx
c000910b:	50                   	push   eax
c000910c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009110:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009114:	e8 7f f3 01 00       	call   c0028498 <__muldf3>
c0009119:	5d                   	pop    ebp
c000911a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000911e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009122:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009125:	e8 d1 f9 01 00       	call   c0028afb <__floatsidf>
c000912a:	83 c4 10             	add    esp,0x10
c000912d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009131:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009135:	52                   	push   edx
c0009136:	50                   	push   eax
c0009137:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913f:	e8 d7 ec 01 00       	call   c0027e1b <__adddf3>
c0009144:	59                   	pop    ecx
c0009145:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009149:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000914d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009150:	e8 a6 f9 01 00       	call   c0028afb <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000915c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009166:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000916a:	e8 f6 fb 01 00       	call   c0028d65 <__gedf2>
c000916f:	83 c4 10             	add    esp,0x10
c0009172:	85 c0                	test   eax,eax
c0009174:	0f 89 d9 01 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c000917a:	85 ff                	test   edi,edi
c000917c:	0f 8e f4 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c0009182:	83 ec 10             	sub    esp,0x10
c0009185:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009188:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000918b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000918f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009192:	ff 30                	push   DWORD PTR [eax]
c0009194:	e8 d3 f2 01 00       	call   c002846c <__subdf3>
c0009199:	83 c4 18             	add    esp,0x18
c000919c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091a4:	52                   	push   edx
c00091a5:	50                   	push   eax
c00091a6:	e8 55 fd 01 00       	call   c0028f00 <fabs>
c00091ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091b3:	83 c4 10             	add    esp,0x10
c00091b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091bb:	68 23 42 92 0c       	push   0xc924223
c00091c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c8:	e8 7c fb 01 00       	call   c0028d49 <__gtdf2>
c00091cd:	83 c4 10             	add    esp,0x10
c00091d0:	85 c0                	test   eax,eax
c00091d2:	0f 8e 9e 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c00091d8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00091dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00091df:	8b 00                	mov    eax,DWORD PTR [eax]
c00091e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00091e8:	52                   	push   edx
c00091e9:	50                   	push   eax
c00091ea:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091ed:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091f0:	e8 77 f2 01 00       	call   c002846c <__subdf3>
c00091f5:	59                   	pop    ecx
c00091f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00091fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00091fe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009201:	e8 f5 f8 01 00       	call   c0028afb <__floatsidf>
c0009206:	83 c4 10             	add    esp,0x10
c0009209:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000920d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009211:	52                   	push   edx
c0009212:	50                   	push   eax
c0009213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000921b:	e8 78 f2 01 00       	call   c0028498 <__muldf3>
c0009220:	5f                   	pop    edi
c0009221:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009225:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009229:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000922c:	e8 ca f8 01 00       	call   c0028afb <__floatsidf>
c0009231:	83 c4 10             	add    esp,0x10
c0009234:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009238:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000923c:	52                   	push   edx
c000923d:	50                   	push   eax
c000923e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009246:	e8 31 f5 01 00       	call   c002877c <__divdf3>
c000924b:	83 c4 10             	add    esp,0x10
c000924e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009252:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009256:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009266:	e8 b0 eb 01 00       	call   c0027e1b <__adddf3>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009272:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009276:	31 ff                	xor    edi,edi
c0009278:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c000927b:	0f 8e 9d 00 00 00    	jle    c000931e <linear_vari_process+0x349>
c0009281:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009284:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009288:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000928b:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000928f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009292:	8b 06                	mov    eax,DWORD PTR [esi]
c0009294:	52                   	push   edx
c0009295:	52                   	push   edx
c0009296:	55                   	push   ebp
c0009297:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c000929a:	47                   	inc    edi
c000929b:	e8 10 e5 01 00       	call   c00277b0 <__subsf3>
c00092a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00092a3:	e8 e7 fb 01 00       	call   c0028e8f <__extendsfdf2>
c00092a8:	83 c4 10             	add    esp,0x10
c00092ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092c3:	e8 d0 f1 01 00       	call   c0028498 <__muldf3>
c00092c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00092cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00092d3:	e8 b7 fb 01 00       	call   c0028e8f <__extendsfdf2>
c00092d8:	83 c4 10             	add    esp,0x10
c00092db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092df:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092e3:	52                   	push   edx
c00092e4:	50                   	push   eax
c00092e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092ed:	e8 29 eb 01 00       	call   c0027e1b <__adddf3>
c00092f2:	59                   	pop    ecx
c00092f3:	5d                   	pop    ebp
c00092f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092f8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009300:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009304:	e8 62 fa 01 00       	call   c0028d6b <__truncdfsf2>
c0009309:	83 c4 10             	add    esp,0x10
c000930c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000930f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009313:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009316:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009319:	e9 5a ff ff ff       	jmp    c0009278 <linear_vari_process+0x2a3>
c000931e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009322:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009326:	68 00 00 f0 3f       	push   0x3ff00000
c000932b:	6a 00                	push   0x0
c000932d:	e8 4a f4 01 00       	call   c002877c <__divdf3>
c0009332:	83 c4 10             	add    esp,0x10
c0009335:	89 04 24             	mov    DWORD PTR [esp],eax
c0009338:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000933c:	52                   	push   edx
c000933d:	50                   	push   eax
c000933e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009346:	e8 d0 ea 01 00       	call   c0027e1b <__adddf3>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	e9 50 fd ff ff       	jmp    c00090a3 <linear_vari_process+0xce>
c0009353:	50                   	push   eax
c0009354:	50                   	push   eax
c0009355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009359:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935d:	e8 be fb 01 00       	call   c0028f20 <lrint>
c0009362:	83 ec 0c             	sub    esp,0xc
c0009365:	50                   	push   eax
c0009366:	e8 90 f7 01 00       	call   c0028afb <__floatsidf>
c000936b:	83 c4 10             	add    esp,0x10
c000936e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009372:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000937c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009380:	e8 e7 f0 01 00       	call   c002846c <__subdf3>
c0009385:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009389:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000938d:	83 c4 20             	add    esp,0x20
c0009390:	6a 00                	push   0x0
c0009392:	6a 00                	push   0x0
c0009394:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	e8 c6 f9 01 00       	call   c0028d67 <__ltdf2>
c00093a1:	83 c4 10             	add    esp,0x10
c00093a4:	85 c0                	test   eax,eax
c00093a6:	79 1e                	jns    c00093c6 <linear_vari_process+0x3f1>
c00093a8:	68 00 00 f0 3f       	push   0x3ff00000
c00093ad:	6a 00                	push   0x0
c00093af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b7:	e8 5f ea 01 00       	call   c0027e1b <__adddf3>
c00093bc:	83 c4 10             	add    esp,0x10
c00093bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00093c9:	83 ec 10             	sub    esp,0x10
c00093cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093dc:	e8 8b f0 01 00       	call   c002846c <__subdf3>
c00093e1:	83 c4 18             	add    esp,0x18
c00093e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093ec:	52                   	push   edx
c00093ed:	50                   	push   eax
c00093ee:	e8 2d fb 01 00       	call   c0028f20 <lrint>
c00093f3:	83 c4 10             	add    esp,0x10
c00093f6:	0f af f8             	imul   edi,eax
c00093f9:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00093fc:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00093ff:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009402:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009405:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009408:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000940c:	0f 8d 13 03 00 00    	jge    c0009725 <linear_vari_process+0x750>
c0009412:	83 ec 0c             	sub    esp,0xc
c0009415:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009418:	e8 de f6 01 00       	call   c0028afb <__floatsidf>
c000941d:	83 c4 10             	add    esp,0x10
c0009420:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009424:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009428:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000942c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009430:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009434:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009438:	e8 5b f0 01 00       	call   c0028498 <__muldf3>
c000943d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009440:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009444:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009448:	e8 ae f6 01 00       	call   c0028afb <__floatsidf>
c000944d:	83 c4 10             	add    esp,0x10
c0009450:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009454:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009458:	52                   	push   edx
c0009459:	50                   	push   eax
c000945a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009462:	e8 b4 e9 01 00       	call   c0027e1b <__adddf3>
c0009467:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	e8 84 f6 01 00       	call   c0028afb <__floatsidf>
c0009477:	83 c4 10             	add    esp,0x10
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	52                   	push   edx
c0009483:	50                   	push   eax
c0009484:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009488:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000948c:	e8 d6 f8 01 00       	call   c0028d67 <__ltdf2>
c0009491:	83 c4 10             	add    esp,0x10
c0009494:	85 c0                	test   eax,eax
c0009496:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000949a:	0f 89 85 02 00 00    	jns    c0009725 <linear_vari_process+0x750>
c00094a0:	85 c9                	test   ecx,ecx
c00094a2:	0f 8e f5 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094a8:	83 ec 10             	sub    esp,0x10
c00094ab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094ae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094b1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094b5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094b8:	ff 30                	push   DWORD PTR [eax]
c00094ba:	e8 ad ef 01 00       	call   c002846c <__subdf3>
c00094bf:	83 c4 18             	add    esp,0x18
c00094c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ca:	52                   	push   edx
c00094cb:	50                   	push   eax
c00094cc:	e8 2f fa 01 00       	call   c0028f00 <fabs>
c00094d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094d9:	83 c4 10             	add    esp,0x10
c00094dc:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00094e1:	68 23 42 92 0c       	push   0xc924223
c00094e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ee:	e8 56 f8 01 00       	call   c0028d49 <__gtdf2>
c00094f3:	83 c4 10             	add    esp,0x10
c00094f6:	85 c0                	test   eax,eax
c00094f8:	0f 8e 9f 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094fe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009502:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009505:	8b 00                	mov    eax,DWORD PTR [eax]
c0009507:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000950b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000950f:	52                   	push   edx
c0009510:	50                   	push   eax
c0009511:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009514:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009517:	e8 50 ef 01 00       	call   c002846c <__subdf3>
c000951c:	5f                   	pop    edi
c000951d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009521:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009525:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009528:	e8 ce f5 01 00       	call   c0028afb <__floatsidf>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009534:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009538:	52                   	push   edx
c0009539:	50                   	push   eax
c000953a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000953e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009542:	e8 51 ef 01 00       	call   c0028498 <__muldf3>
c0009547:	5d                   	pop    ebp
c0009548:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000954c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009550:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009553:	e8 a3 f5 01 00       	call   c0028afb <__floatsidf>
c0009558:	83 c4 10             	add    esp,0x10
c000955b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000955f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009563:	52                   	push   edx
c0009564:	50                   	push   eax
c0009565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009569:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000956d:	e8 0a f2 01 00       	call   c002877c <__divdf3>
c0009572:	83 c4 10             	add    esp,0x10
c0009575:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009579:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000957d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009581:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009585:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009589:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000958d:	e8 89 e8 01 00       	call   c0027e1b <__adddf3>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009599:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000959d:	31 ff                	xor    edi,edi
c000959f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095a2:	39 f8                	cmp    eax,edi
c00095a4:	0f 8e ac 00 00 00    	jle    c0009656 <linear_vari_process+0x681>
c00095aa:	8b 16                	mov    edx,DWORD PTR [esi]
c00095ac:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095af:	29 c1                	sub    ecx,eax
c00095b1:	89 c8                	mov    eax,ecx
c00095b3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095b6:	01 f8                	add    eax,edi
c00095b8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095bc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095bf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095c9:	51                   	push   ecx
c00095ca:	01 f8                	add    eax,edi
c00095cc:	51                   	push   ecx
c00095cd:	47                   	inc    edi
c00095ce:	55                   	push   ebp
c00095cf:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00095d2:	e8 d9 e1 01 00       	call   c00277b0 <__subsf3>
c00095d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00095da:	e8 b0 f8 01 00       	call   c0028e8f <__extendsfdf2>
c00095df:	83 c4 10             	add    esp,0x10
c00095e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095ea:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095ee:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095fa:	e8 99 ee 01 00       	call   c0028498 <__muldf3>
c00095ff:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000960a:	e8 80 f8 01 00       	call   c0028e8f <__extendsfdf2>
c000960f:	83 c4 10             	add    esp,0x10
c0009612:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009616:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000961a:	52                   	push   edx
c000961b:	50                   	push   eax
c000961c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009620:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009624:	e8 f2 e7 01 00       	call   c0027e1b <__adddf3>
c0009629:	5d                   	pop    ebp
c000962a:	59                   	pop    ecx
c000962b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000962f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009633:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009637:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963b:	e8 2b f7 01 00       	call   c0028d6b <__truncdfsf2>
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009647:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000964b:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000964e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009651:	e9 49 ff ff ff       	jmp    c000959f <linear_vari_process+0x5ca>
c0009656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965e:	68 00 00 f0 3f       	push   0x3ff00000
c0009663:	6a 00                	push   0x0
c0009665:	e8 12 f1 01 00       	call   c002877c <__divdf3>
c000966a:	83 c4 10             	add    esp,0x10
c000966d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009671:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009675:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009679:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000967d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009681:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009685:	e8 91 e7 01 00       	call   c0027e1b <__adddf3>
c000968a:	59                   	pop    ecx
c000968b:	5f                   	pop    edi
c000968c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009690:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	e8 7f f8 01 00       	call   c0028f20 <lrint>
c00096a1:	83 ec 0c             	sub    esp,0xc
c00096a4:	50                   	push   eax
c00096a5:	e8 51 f4 01 00       	call   c0028afb <__floatsidf>
c00096aa:	83 c4 10             	add    esp,0x10
c00096ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096b5:	52                   	push   edx
c00096b6:	50                   	push   eax
c00096b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bf:	e8 a8 ed 01 00       	call   c002846c <__subdf3>
c00096c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096cc:	83 c4 20             	add    esp,0x20
c00096cf:	6a 00                	push   0x0
c00096d1:	6a 00                	push   0x0
c00096d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096db:	e8 87 f6 01 00       	call   c0028d67 <__ltdf2>
c00096e0:	83 c4 10             	add    esp,0x10
c00096e3:	85 c0                	test   eax,eax
c00096e5:	79 1e                	jns    c0009705 <linear_vari_process+0x730>
c00096e7:	68 00 00 f0 3f       	push   0x3ff00000
c00096ec:	6a 00                	push   0x0
c00096ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f6:	e8 20 e7 01 00       	call   c0027e1b <__adddf3>
c00096fb:	83 c4 10             	add    esp,0x10
c00096fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0009701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009705:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009708:	83 ec 10             	sub    esp,0x10
c000970b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000970f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009713:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009717:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000971b:	e8 4c ed 01 00       	call   c002846c <__subdf3>
c0009720:	e9 bc fc ff ff       	jmp    c00093e1 <linear_vari_process+0x40c>
c0009725:	39 fd                	cmp    ebp,edi
c0009727:	7d 38                	jge    c0009761 <linear_vari_process+0x78c>
c0009729:	83 ec 0c             	sub    esp,0xc
c000972c:	89 f8                	mov    eax,edi
c000972e:	29 e8                	sub    eax,ebp
c0009730:	99                   	cdq    
c0009731:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009734:	50                   	push   eax
c0009735:	e8 c1 f3 01 00       	call   c0028afb <__floatsidf>
c000973a:	83 c4 10             	add    esp,0x10
c000973d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009741:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009745:	52                   	push   edx
c0009746:	50                   	push   eax
c0009747:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974f:	e8 c7 e6 01 00       	call   c0027e1b <__adddf3>
c0009754:	83 c4 10             	add    esp,0x10
c0009757:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000975a:	89 04 24             	mov    DWORD PTR [esp],eax
c000975d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009761:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009765:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009768:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000976c:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000976f:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009772:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009775:	85 c0                	test   eax,eax
c0009777:	7f 29                	jg     c00097a2 <linear_vari_process+0x7cd>
c0009779:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000977d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009785:	89 01                	mov    DWORD PTR [ecx],eax
c0009787:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000978a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000978d:	99                   	cdq    
c000978e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009791:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009794:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009797:	99                   	cdq    
c0009798:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000979b:	31 d2                	xor    edx,edx
c000979d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097a0:	eb 1d                	jmp    c00097bf <linear_vari_process+0x7ea>
c00097a2:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097a5:	31 d2                	xor    edx,edx
c00097a7:	29 c8                	sub    eax,ecx
c00097a9:	c1 e0 02             	shl    eax,0x2
c00097ac:	39 d1                	cmp    ecx,edx
c00097ae:	7e c9                	jle    c0009779 <linear_vari_process+0x7a4>
c00097b0:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097b2:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097b5:	83 c0 04             	add    eax,0x4
c00097b8:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097bc:	42                   	inc    edx
c00097bd:	eb ed                	jmp    c00097ac <linear_vari_process+0x7d7>
c00097bf:	83 c4 3c             	add    esp,0x3c
c00097c2:	89 d0                	mov    eax,edx
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <linear_reset>:
c00097c9:	83 ec 0c             	sub    esp,0xc
c00097cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00097d3:	85 c0                	test   eax,eax
c00097d5:	74 20                	je     c00097f7 <linear_reset+0x2e>
c00097d7:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00097da:	83 c0 1c             	add    eax,0x1c
c00097dd:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00097e0:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00097e7:	c1 e2 02             	shl    edx,0x2
c00097ea:	51                   	push   ecx
c00097eb:	52                   	push   edx
c00097ec:	6a 00                	push   0x0
c00097ee:	50                   	push   eax
c00097ef:	e8 5c 6f ff ff       	call   c0000750 <memset>
c00097f4:	83 c4 10             	add    esp,0x10
c00097f7:	83 c4 0c             	add    esp,0xc
c00097fa:	c3                   	ret    

c00097fb <linear_get_name>:
c00097fb:	31 c0                	xor    eax,eax
c00097fd:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009802:	75 05                	jne    c0009809 <linear_get_name+0xe>
c0009804:	b8 60 a7 02 c0       	mov    eax,0xc002a760
c0009809:	c3                   	ret    

c000980a <linear_get_description>:
c000980a:	31 c0                	xor    eax,eax
c000980c:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009811:	75 05                	jne    c0009818 <linear_get_description+0xe>
c0009813:	b8 74 a7 02 c0       	mov    eax,0xc002a774
c0009818:	c3                   	ret    

c0009819 <linear_set_converter>:
c0009819:	53                   	push   ebx
c000981a:	b8 0a 00 00 00       	mov    eax,0xa
c000981f:	83 ec 08             	sub    esp,0x8
c0009822:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009826:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000982b:	75 6e                	jne    c000989b <linear_set_converter+0x82>
c000982d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009830:	85 c0                	test   eax,eax
c0009832:	74 13                	je     c0009847 <linear_set_converter+0x2e>
c0009834:	83 ec 0c             	sub    esp,0xc
c0009837:	50                   	push   eax
c0009838:	e8 5f 60 00 00       	call   c000f89c <free>
c000983d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009844:	83 c4 10             	add    esp,0x10
c0009847:	50                   	push   eax
c0009848:	50                   	push   eax
c0009849:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000984c:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009853:	50                   	push   eax
c0009854:	6a 01                	push   0x1
c0009856:	e8 61 60 00 00       	call   c000f8bc <calloc>
c000985b:	83 c4 10             	add    esp,0x10
c000985e:	89 c2                	mov    edx,eax
c0009860:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009863:	85 d2                	test   edx,edx
c0009865:	b8 01 00 00 00       	mov    eax,0x1
c000986a:	74 2f                	je     c000989b <linear_set_converter+0x82>
c000986c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000986f:	83 ec 0c             	sub    esp,0xc
c0009872:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009875:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000987b:	c7 43 24 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008fd5
c0009882:	c7 43 20 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008fd5
c0009889:	c7 43 28 c9 97 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00097c9
c0009890:	53                   	push   ebx
c0009891:	e8 33 ff ff ff       	call   c00097c9 <linear_reset>
c0009896:	83 c4 10             	add    esp,0x10
c0009899:	31 c0                	xor    eax,eax
c000989b:	83 c4 08             	add    esp,0x8
c000989e:	5b                   	pop    ebx
c000989f:	c3                   	ret    

c00098a0 <int_to_fp>:
c00098a0:	c1 e0 0c             	shl    eax,0xc
c00098a3:	c3                   	ret    

c00098a4 <fp_to_int>:
c00098a4:	c1 f8 0c             	sar    eax,0xc
c00098a7:	c3                   	ret    

c00098a8 <fp_fraction_part>:
c00098a8:	25 ff 0f 00 00       	and    eax,0xfff
c00098ad:	c3                   	ret    

c00098ae <fp_to_double>:
c00098ae:	83 ec 1c             	sub    esp,0x1c
c00098b1:	e8 f2 ff ff ff       	call   c00098a8 <fp_fraction_part>
c00098b6:	83 ec 0c             	sub    esp,0xc
c00098b9:	50                   	push   eax
c00098ba:	e8 3c f2 01 00       	call   c0028afb <__floatsidf>
c00098bf:	83 c4 10             	add    esp,0x10
c00098c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ca:	68 00 00 30 3f       	push   0x3f300000
c00098cf:	6a 00                	push   0x0
c00098d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d9:	e8 ba eb 01 00       	call   c0028498 <__muldf3>
c00098de:	83 c4 2c             	add    esp,0x2c
c00098e1:	c3                   	ret    

c00098e2 <calc_output_single>:
c00098e2:	55                   	push   ebp
c00098e3:	57                   	push   edi
c00098e4:	56                   	push   esi
c00098e5:	89 c6                	mov    esi,eax
c00098e7:	53                   	push   ebx
c00098e8:	89 d3                	mov    ebx,edx
c00098ea:	83 ec 4c             	sub    esp,0x4c
c00098ed:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00098f1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00098f4:	e8 a7 ff ff ff       	call   c00098a0 <int_to_fp>
c00098f9:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00098fc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009900:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009904:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009908:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000990b:	99                   	cdq    
c000990c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009914:	f7 fb                	idiv   ebx
c0009916:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000991e:	89 da                	mov    edx,ebx
c0009920:	0f af d0             	imul   edx,eax
c0009923:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009927:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000992b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000992f:	29 c2                	sub    edx,eax
c0009931:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009938:	83 c5 04             	add    ebp,0x4
c000993b:	e8 6e ff ff ff       	call   c00098ae <fp_to_double>
c0009940:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009944:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000994c:	e8 53 ff ff ff       	call   c00098a4 <fp_to_int>
c0009951:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009954:	52                   	push   edx
c0009955:	52                   	push   edx
c0009956:	51                   	push   ecx
c0009957:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000995b:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000995f:	e8 4c de 01 00       	call   c00277b0 <__subsf3>
c0009964:	89 04 24             	mov    DWORD PTR [esp],eax
c0009967:	e8 23 f5 01 00       	call   c0028e8f <__extendsfdf2>
c000996c:	83 c4 10             	add    esp,0x10
c000996f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009977:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009983:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009987:	e8 0c eb 01 00       	call   c0028498 <__muldf3>
c000998c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009990:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009994:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009997:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000999b:	e8 ef f4 01 00       	call   c0028e8f <__extendsfdf2>
c00099a0:	83 c4 10             	add    esp,0x10
c00099a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099ab:	52                   	push   edx
c00099ac:	50                   	push   eax
c00099ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b5:	e8 61 e4 01 00       	call   c0027e1b <__adddf3>
c00099ba:	59                   	pop    ecx
c00099bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099c3:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00099c9:	e8 c1 f4 01 00       	call   c0028e8f <__extendsfdf2>
c00099ce:	83 c4 10             	add    esp,0x10
c00099d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099d9:	52                   	push   edx
c00099da:	50                   	push   eax
c00099db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099e3:	e8 b0 ea 01 00       	call   c0028498 <__muldf3>
c00099e8:	83 c4 10             	add    esp,0x10
c00099eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00099ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00099f3:	52                   	push   edx
c00099f4:	50                   	push   eax
c00099f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099fd:	e8 19 e4 01 00       	call   c0027e1b <__adddf3>
c0009a02:	83 c4 10             	add    esp,0x10
c0009a05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a0d:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a11:	0f 89 1d ff ff ff    	jns    c0009934 <calc_output_single+0x52>
c0009a17:	89 d9                	mov    ecx,ebx
c0009a19:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a1d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a21:	89 dd                	mov    ebp,ebx
c0009a23:	29 c8                	sub    eax,ecx
c0009a25:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a2d:	99                   	cdq    
c0009a2e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a36:	f7 fb                	idiv   ebx
c0009a38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a3c:	0f af e8             	imul   ebp,eax
c0009a3f:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a43:	01 cd                	add    ebp,ecx
c0009a45:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a48:	89 e8                	mov    eax,ebp
c0009a4a:	83 ee 04             	sub    esi,0x4
c0009a4d:	e8 5c fe ff ff       	call   c00098ae <fp_to_double>
c0009a52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a5a:	89 e8                	mov    eax,ebp
c0009a5c:	29 dd                	sub    ebp,ebx
c0009a5e:	e8 41 fe ff ff       	call   c00098a4 <fp_to_int>
c0009a63:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009a66:	52                   	push   edx
c0009a67:	52                   	push   edx
c0009a68:	51                   	push   ecx
c0009a69:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009a6d:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009a71:	e8 3a dd 01 00       	call   c00277b0 <__subsf3>
c0009a76:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a79:	e8 11 f4 01 00       	call   c0028e8f <__extendsfdf2>
c0009a7e:	83 c4 10             	add    esp,0x10
c0009a81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009a85:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009a89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a99:	e8 fa e9 01 00       	call   c0028498 <__muldf3>
c0009a9e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009aa2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009aa6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aa9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009aad:	e8 dd f3 01 00       	call   c0028e8f <__extendsfdf2>
c0009ab2:	83 c4 10             	add    esp,0x10
c0009ab5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ab9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009abd:	52                   	push   edx
c0009abe:	50                   	push   eax
c0009abf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac7:	e8 4f e3 01 00       	call   c0027e1b <__adddf3>
c0009acc:	59                   	pop    ecx
c0009acd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ad1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009ad5:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009adb:	e8 af f3 01 00       	call   c0028e8f <__extendsfdf2>
c0009ae0:	83 c4 10             	add    esp,0x10
c0009ae3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ae7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aeb:	52                   	push   edx
c0009aec:	50                   	push   eax
c0009aed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af5:	e8 9e e9 01 00       	call   c0028498 <__muldf3>
c0009afa:	83 c4 10             	add    esp,0x10
c0009afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b01:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b05:	52                   	push   edx
c0009b06:	50                   	push   eax
c0009b07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0f:	e8 07 e3 01 00       	call   c0027e1b <__adddf3>
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	85 ed                	test   ebp,ebp
c0009b19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b1d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b21:	0f 8f 21 ff ff ff    	jg     c0009a48 <calc_output_single+0x166>
c0009b27:	52                   	push   edx
c0009b28:	50                   	push   eax
c0009b29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b31:	e8 e5 e2 01 00       	call   c0027e1b <__adddf3>
c0009b36:	83 c4 5c             	add    esp,0x5c
c0009b39:	5b                   	pop    ebx
c0009b3a:	5e                   	pop    esi
c0009b3b:	5f                   	pop    edi
c0009b3c:	5d                   	pop    ebp
c0009b3d:	c3                   	ret    

c0009b3e <calc_output_stereo>:
c0009b3e:	55                   	push   ebp
c0009b3f:	89 cd                	mov    ebp,ecx
c0009b41:	57                   	push   edi
c0009b42:	56                   	push   esi
c0009b43:	53                   	push   ebx
c0009b44:	89 c3                	mov    ebx,eax
c0009b46:	83 ec 6c             	sub    esp,0x6c
c0009b49:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b4d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b54:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b5b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b5f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b63:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009b66:	e8 35 fd ff ff       	call   c00098a0 <int_to_fp>
c0009b6b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009b73:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b77:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009b7f:	29 c8                	sub    eax,ecx
c0009b81:	99                   	cdq    
c0009b82:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009b8a:	0f af d0             	imul   edx,eax
c0009b8d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009b90:	31 d2                	xor    edx,edx
c0009b92:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009b96:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b9a:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009b9d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009ba1:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009ba4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009ba8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bac:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009baf:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bb4:	29 c1                	sub    ecx,eax
c0009bb6:	31 c0                	xor    eax,eax
c0009bb8:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bc3:	83 c7 08             	add    edi,0x8
c0009bc6:	e8 e3 fc ff ff       	call   c00098ae <fp_to_double>
c0009bcb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009bcf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009bd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bd7:	e8 c8 fc ff ff       	call   c00098a4 <fp_to_int>
c0009bdc:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009bdf:	52                   	push   edx
c0009be0:	52                   	push   edx
c0009be1:	51                   	push   ecx
c0009be2:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009be6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009bea:	e8 c1 db 01 00       	call   c00277b0 <__subsf3>
c0009bef:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bf2:	e8 98 f2 01 00       	call   c0028e8f <__extendsfdf2>
c0009bf7:	83 c4 10             	add    esp,0x10
c0009bfa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009bfe:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c02:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c06:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c0a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c0e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c12:	e8 81 e8 01 00       	call   c0028498 <__muldf3>
c0009c17:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c1b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c1f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c22:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c26:	e8 64 f2 01 00       	call   c0028e8f <__extendsfdf2>
c0009c2b:	83 c4 10             	add    esp,0x10
c0009c2e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c32:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c36:	52                   	push   edx
c0009c37:	50                   	push   eax
c0009c38:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c3c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c40:	e8 d6 e1 01 00       	call   c0027e1b <__adddf3>
c0009c45:	59                   	pop    ecx
c0009c46:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c4a:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c4e:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c54:	e8 36 f2 01 00       	call   c0028e8f <__extendsfdf2>
c0009c59:	83 c4 10             	add    esp,0x10
c0009c5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c68:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c6c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c70:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c74:	e8 1f e8 01 00       	call   c0028498 <__muldf3>
c0009c79:	83 c4 10             	add    esp,0x10
c0009c7c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c80:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c84:	52                   	push   edx
c0009c85:	50                   	push   eax
c0009c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8e:	e8 88 e1 01 00       	call   c0027e1b <__adddf3>
c0009c93:	59                   	pop    ecx
c0009c94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c98:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009c9c:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ca2:	e8 e8 f1 01 00       	call   c0028e8f <__extendsfdf2>
c0009ca7:	83 c4 10             	add    esp,0x10
c0009caa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cae:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cb2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cb6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cbe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cc2:	e8 d1 e7 01 00       	call   c0028498 <__muldf3>
c0009cc7:	83 c4 10             	add    esp,0x10
c0009cca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009cce:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009cd2:	52                   	push   edx
c0009cd3:	50                   	push   eax
c0009cd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cdc:	e8 3a e1 01 00       	call   c0027e1b <__adddf3>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ce8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cec:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cf0:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009cf4:	0f 89 c5 fe ff ff    	jns    c0009bbf <calc_output_stereo+0x81>
c0009cfa:	29 e9                	sub    ecx,ebp
c0009cfc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d04:	29 c8                	sub    eax,ecx
c0009d06:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d0e:	99                   	cdq    
c0009d0f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d13:	31 d2                	xor    edx,edx
c0009d15:	0f af f8             	imul   edi,eax
c0009d18:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d1c:	40                   	inc    eax
c0009d1d:	01 cf                	add    edi,ecx
c0009d1f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d24:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d28:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d30:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d33:	31 c0                	xor    eax,eax
c0009d35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d39:	89 f8                	mov    eax,edi
c0009d3b:	83 eb 08             	sub    ebx,0x8
c0009d3e:	e8 6b fb ff ff       	call   c00098ae <fp_to_double>
c0009d43:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d4b:	89 f8                	mov    eax,edi
c0009d4d:	e8 52 fb ff ff       	call   c00098a4 <fp_to_int>
c0009d52:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d55:	52                   	push   edx
c0009d56:	52                   	push   edx
c0009d57:	55                   	push   ebp
c0009d58:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d5c:	e8 4f da 01 00       	call   c00277b0 <__subsf3>
c0009d61:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d64:	e8 26 f1 01 00       	call   c0028e8f <__extendsfdf2>
c0009d69:	83 c4 10             	add    esp,0x10
c0009d6c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d70:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d74:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d78:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d7c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d80:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d84:	e8 0f e7 01 00       	call   c0028498 <__muldf3>
c0009d89:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009d8c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009d90:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009d94:	e8 f6 f0 01 00       	call   c0028e8f <__extendsfdf2>
c0009d99:	83 c4 10             	add    esp,0x10
c0009d9c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009da0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009da4:	52                   	push   edx
c0009da5:	50                   	push   eax
c0009da6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009daa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dae:	e8 68 e0 01 00       	call   c0027e1b <__adddf3>
c0009db3:	59                   	pop    ecx
c0009db4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009db8:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dbc:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dc2:	e8 c8 f0 01 00       	call   c0028e8f <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dd2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dde:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009de2:	e8 b1 e6 01 00       	call   c0028498 <__muldf3>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009df2:	52                   	push   edx
c0009df3:	50                   	push   eax
c0009df4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009df8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009dfc:	e8 1a e0 01 00       	call   c0027e1b <__adddf3>
c0009e01:	5d                   	pop    ebp
c0009e02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e06:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e0a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e10:	e8 7a f0 01 00       	call   c0028e8f <__extendsfdf2>
c0009e15:	83 c4 10             	add    esp,0x10
c0009e18:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e1c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e30:	e8 63 e6 01 00       	call   c0028498 <__muldf3>
c0009e35:	83 c4 10             	add    esp,0x10
c0009e38:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e3c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e40:	52                   	push   edx
c0009e41:	50                   	push   eax
c0009e42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e4a:	e8 cc df 01 00       	call   c0027e1b <__adddf3>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e56:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e5a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e5e:	85 ff                	test   edi,edi
c0009e60:	0f 8f d3 fe ff ff    	jg     c0009d39 <calc_output_stereo+0x1fb>
c0009e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e76:	e8 a0 df 01 00       	call   c0027e1b <__adddf3>
c0009e7b:	83 c4 10             	add    esp,0x10
c0009e7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e96:	e8 fd e5 01 00       	call   c0028498 <__muldf3>
c0009e9b:	59                   	pop    ecx
c0009e9c:	5b                   	pop    ebx
c0009e9d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ea1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ea5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ea9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ead:	e8 b9 ee 01 00       	call   c0028d6b <__truncdfsf2>
c0009eb2:	83 c4 10             	add    esp,0x10
c0009eb5:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ebc:	89 03                	mov    DWORD PTR [ebx],eax
c0009ebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009eca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ece:	e8 48 df 01 00       	call   c0027e1b <__adddf3>
c0009ed3:	83 c4 10             	add    esp,0x10
c0009ed6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ede:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eee:	e8 a5 e5 01 00       	call   c0028498 <__muldf3>
c0009ef3:	5e                   	pop    esi
c0009ef4:	5f                   	pop    edi
c0009ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ef9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009efd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f05:	e8 61 ee 01 00       	call   c0028d6b <__truncdfsf2>
c0009f0a:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f11:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f14:	83 c4 7c             	add    esp,0x7c
c0009f17:	5b                   	pop    ebx
c0009f18:	5e                   	pop    esi
c0009f19:	5f                   	pop    edi
c0009f1a:	5d                   	pop    ebp
c0009f1b:	c3                   	ret    

c0009f1c <calc_output_quad>:
c0009f1c:	55                   	push   ebp
c0009f1d:	57                   	push   edi
c0009f1e:	56                   	push   esi
c0009f1f:	89 c6                	mov    esi,eax
c0009f21:	53                   	push   ebx
c0009f22:	83 ec 7c             	sub    esp,0x7c
c0009f25:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f29:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f2d:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f34:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f43:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f46:	e8 55 f9 ff ff       	call   c00098a0 <int_to_fp>
c0009f4b:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f4e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f55:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f59:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f5d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f61:	99                   	cdq    
c0009f62:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009f66:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f6a:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009f6d:	31 d2                	xor    edx,edx
c0009f6f:	0f af d8             	imul   ebx,eax
c0009f72:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009f7a:	0f af c7             	imul   eax,edi
c0009f7d:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009f81:	29 c1                	sub    ecx,eax
c0009f83:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009f8b:	31 c0                	xor    eax,eax
c0009f8d:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009f90:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009f94:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009f98:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f9c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fa0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fa4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fa8:	89 d8                	mov    eax,ebx
c0009faa:	83 c7 10             	add    edi,0x10
c0009fad:	e8 fc f8 ff ff       	call   c00098ae <fp_to_double>
c0009fb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fba:	89 d8                	mov    eax,ebx
c0009fbc:	e8 e3 f8 ff ff       	call   c00098a4 <fp_to_int>
c0009fc1:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fc5:	52                   	push   edx
c0009fc6:	52                   	push   edx
c0009fc7:	51                   	push   ecx
c0009fc8:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009fcc:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fd0:	e8 db d7 01 00       	call   c00277b0 <__subsf3>
c0009fd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd8:	e8 b2 ee 01 00       	call   c0028e8f <__extendsfdf2>
c0009fdd:	83 c4 10             	add    esp,0x10
c0009fe0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fe4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff8:	e8 9b e4 01 00       	call   c0028498 <__muldf3>
c0009ffd:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a001:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a005:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a008:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a00c:	e8 7e ee 01 00       	call   c0028e8f <__extendsfdf2>
c000a011:	83 c4 10             	add    esp,0x10
c000a014:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a018:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a01c:	52                   	push   edx
c000a01d:	50                   	push   eax
c000a01e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a022:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a026:	e8 f0 dd 01 00       	call   c0027e1b <__adddf3>
c000a02b:	59                   	pop    ecx
c000a02c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a030:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a034:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a03a:	e8 50 ee 01 00       	call   c0028e8f <__extendsfdf2>
c000a03f:	83 c4 10             	add    esp,0x10
c000a042:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a046:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a052:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a056:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05a:	e8 39 e4 01 00       	call   c0028498 <__muldf3>
c000a05f:	83 c4 10             	add    esp,0x10
c000a062:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a066:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a06a:	52                   	push   edx
c000a06b:	50                   	push   eax
c000a06c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a070:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a074:	e8 a2 dd 01 00       	call   c0027e1b <__adddf3>
c000a079:	59                   	pop    ecx
c000a07a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a07e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a082:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a088:	e8 02 ee 01 00       	call   c0028e8f <__extendsfdf2>
c000a08d:	83 c4 10             	add    esp,0x10
c000a090:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a094:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a8:	e8 eb e3 01 00       	call   c0028498 <__muldf3>
c000a0ad:	83 c4 10             	add    esp,0x10
c000a0b0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0b4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b8:	52                   	push   edx
c000a0b9:	50                   	push   eax
c000a0ba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0be:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c2:	e8 54 dd 01 00       	call   c0027e1b <__adddf3>
c000a0c7:	59                   	pop    ecx
c000a0c8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0cc:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a0d0:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a0d6:	e8 b4 ed 01 00       	call   c0028e8f <__extendsfdf2>
c000a0db:	83 c4 10             	add    esp,0x10
c000a0de:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ee:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f6:	e8 9d e3 01 00       	call   c0028498 <__muldf3>
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a102:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a106:	52                   	push   edx
c000a107:	50                   	push   eax
c000a108:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a10c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a110:	e8 06 dd 01 00       	call   c0027e1b <__adddf3>
c000a115:	59                   	pop    ecx
c000a116:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a11a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a11e:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a124:	e8 66 ed 01 00       	call   c0028e8f <__extendsfdf2>
c000a129:	83 c4 10             	add    esp,0x10
c000a12c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a130:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a140:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a144:	e8 4f e3 01 00       	call   c0028498 <__muldf3>
c000a149:	83 c4 10             	add    esp,0x10
c000a14c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a150:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a154:	52                   	push   edx
c000a155:	50                   	push   eax
c000a156:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15e:	e8 b8 dc 01 00       	call   c0027e1b <__adddf3>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a16a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a16e:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a172:	0f 89 30 fe ff ff    	jns    c0009fa8 <calc_output_quad+0x8c>
c000a178:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a17c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a180:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a184:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a188:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a190:	29 c8                	sub    eax,ecx
c000a192:	99                   	cdq    
c000a193:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a197:	31 d2                	xor    edx,edx
c000a199:	0f af d8             	imul   ebx,eax
c000a19c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1a0:	40                   	inc    eax
c000a1a1:	01 cb                	add    ebx,ecx
c000a1a3:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1a8:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1ac:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1b4:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1b7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1bf:	31 c0                	xor    eax,eax
c000a1c1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1c5:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a1c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1cd:	89 d8                	mov    eax,ebx
c000a1cf:	83 ee 10             	sub    esi,0x10
c000a1d2:	e8 d7 f6 ff ff       	call   c00098ae <fp_to_double>
c000a1d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1df:	89 d8                	mov    eax,ebx
c000a1e1:	e8 be f6 ff ff       	call   c00098a4 <fp_to_int>
c000a1e6:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a1ea:	52                   	push   edx
c000a1eb:	52                   	push   edx
c000a1ec:	57                   	push   edi
c000a1ed:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a1f1:	e8 ba d5 01 00       	call   c00277b0 <__subsf3>
c000a1f6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a1f9:	e8 91 ec 01 00       	call   c0028e8f <__extendsfdf2>
c000a1fe:	83 c4 10             	add    esp,0x10
c000a201:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a205:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a209:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a20d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a211:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a215:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a219:	e8 7a e2 01 00       	call   c0028498 <__muldf3>
c000a21e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a221:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a225:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a229:	e8 61 ec 01 00       	call   c0028e8f <__extendsfdf2>
c000a22e:	83 c4 10             	add    esp,0x10
c000a231:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a235:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a239:	52                   	push   edx
c000a23a:	50                   	push   eax
c000a23b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a23f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a243:	e8 d3 db 01 00       	call   c0027e1b <__adddf3>
c000a248:	59                   	pop    ecx
c000a249:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a24d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a251:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a257:	e8 33 ec 01 00       	call   c0028e8f <__extendsfdf2>
c000a25c:	83 c4 10             	add    esp,0x10
c000a25f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a263:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a273:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a277:	e8 1c e2 01 00       	call   c0028498 <__muldf3>
c000a27c:	83 c4 10             	add    esp,0x10
c000a27f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a283:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a287:	52                   	push   edx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a28d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a291:	e8 85 db 01 00       	call   c0027e1b <__adddf3>
c000a296:	5f                   	pop    edi
c000a297:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a29b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a29f:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2a5:	e8 e5 eb 01 00       	call   c0028e8f <__extendsfdf2>
c000a2aa:	83 c4 10             	add    esp,0x10
c000a2ad:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2b1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2bd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c5:	e8 ce e1 01 00       	call   c0028498 <__muldf3>
c000a2ca:	83 c4 10             	add    esp,0x10
c000a2cd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2d1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2d5:	52                   	push   edx
c000a2d6:	50                   	push   eax
c000a2d7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2db:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2df:	e8 37 db 01 00       	call   c0027e1b <__adddf3>
c000a2e4:	59                   	pop    ecx
c000a2e5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a2e9:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a2ed:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a2f3:	e8 97 eb 01 00       	call   c0028e8f <__extendsfdf2>
c000a2f8:	83 c4 10             	add    esp,0x10
c000a2fb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ff:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a307:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a30b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a30f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a313:	e8 80 e1 01 00       	call   c0028498 <__muldf3>
c000a318:	83 c4 10             	add    esp,0x10
c000a31b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a31f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a323:	52                   	push   edx
c000a324:	50                   	push   eax
c000a325:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a329:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a32d:	e8 e9 da 01 00       	call   c0027e1b <__adddf3>
c000a332:	5f                   	pop    edi
c000a333:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a337:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a33b:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a341:	e8 49 eb 01 00       	call   c0028e8f <__extendsfdf2>
c000a346:	83 c4 10             	add    esp,0x10
c000a349:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a34d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a351:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a355:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a359:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a35d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a361:	e8 32 e1 01 00       	call   c0028498 <__muldf3>
c000a366:	83 c4 10             	add    esp,0x10
c000a369:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a36d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a371:	52                   	push   edx
c000a372:	50                   	push   eax
c000a373:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a377:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a37b:	e8 9b da 01 00       	call   c0027e1b <__adddf3>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a387:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a38b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a38f:	85 db                	test   ebx,ebx
c000a391:	0f 8f 36 fe ff ff    	jg     c000a1cd <calc_output_quad+0x2b1>
c000a397:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a7:	e8 6f da 01 00       	call   c0027e1b <__adddf3>
c000a3ac:	83 c4 10             	add    esp,0x10
c000a3af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c7:	e8 cc e0 01 00       	call   c0028498 <__muldf3>
c000a3cc:	59                   	pop    ecx
c000a3cd:	5b                   	pop    ebx
c000a3ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3de:	e8 88 e9 01 00       	call   c0028d6b <__truncdfsf2>
c000a3e3:	83 c4 10             	add    esp,0x10
c000a3e6:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a3ed:	89 06                	mov    DWORD PTR [esi],eax
c000a3ef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3ff:	e8 17 da 01 00       	call   c0027e1b <__adddf3>
c000a404:	83 c4 10             	add    esp,0x10
c000a407:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a40b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a40f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41f:	e8 74 e0 01 00       	call   c0028498 <__muldf3>
c000a424:	5e                   	pop    esi
c000a425:	5f                   	pop    edi
c000a426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a42a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a432:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a436:	e8 30 e9 01 00       	call   c0028d6b <__truncdfsf2>
c000a43b:	83 c4 10             	add    esp,0x10
c000a43e:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a445:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a448:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a44c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a450:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a454:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a458:	e8 be d9 01 00       	call   c0027e1b <__adddf3>
c000a45d:	83 c4 10             	add    esp,0x10
c000a460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a478:	e8 1b e0 01 00       	call   c0028498 <__muldf3>
c000a47d:	5d                   	pop    ebp
c000a47e:	59                   	pop    ecx
c000a47f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a483:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48f:	e8 d7 e8 01 00       	call   c0028d6b <__truncdfsf2>
c000a494:	83 c4 10             	add    esp,0x10
c000a497:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a49e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4b1:	e8 65 d9 01 00       	call   c0027e1b <__adddf3>
c000a4b6:	83 c4 10             	add    esp,0x10
c000a4b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d1:	e8 c2 df 01 00       	call   c0028498 <__muldf3>
c000a4d6:	5b                   	pop    ebx
c000a4d7:	5e                   	pop    esi
c000a4d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e8:	e8 7e e8 01 00       	call   c0028d6b <__truncdfsf2>
c000a4ed:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a4f4:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a4f7:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a4fd:	5b                   	pop    ebx
c000a4fe:	5e                   	pop    esi
c000a4ff:	5f                   	pop    edi
c000a500:	5d                   	pop    ebp
c000a501:	c3                   	ret    

c000a502 <calc_output_hex>:
c000a502:	55                   	push   ebp
c000a503:	89 cd                	mov    ebp,ecx
c000a505:	57                   	push   edi
c000a506:	56                   	push   esi
c000a507:	53                   	push   ebx
c000a508:	89 c3                	mov    ebx,eax
c000a50a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a510:	89 14 24             	mov    DWORD PTR [esp],edx
c000a513:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a51a:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a521:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a525:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a529:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a52c:	e8 6f f3 ff ff       	call   c00098a0 <int_to_fp>
c000a531:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a534:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a538:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a53b:	29 c8                	sub    eax,ecx
c000a53d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a541:	99                   	cdq    
c000a542:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a54a:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a54d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a555:	0f af f8             	imul   edi,eax
c000a558:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a55b:	01 cf                	add    edi,ecx
c000a55d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a561:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a564:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a568:	0f af c2             	imul   eax,edx
c000a56b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a56f:	29 c1                	sub    ecx,eax
c000a571:	31 d2                	xor    edx,edx
c000a573:	31 c0                	xor    eax,eax
c000a575:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a580:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a584:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a588:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a58c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a590:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a594:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a598:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a59c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5a0:	89 f8                	mov    eax,edi
c000a5a2:	e8 07 f3 ff ff       	call   c00098ae <fp_to_double>
c000a5a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5af:	89 f8                	mov    eax,edi
c000a5b1:	e8 ee f2 ff ff       	call   c00098a4 <fp_to_int>
c000a5b6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5ba:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5bd:	52                   	push   edx
c000a5be:	52                   	push   edx
c000a5bf:	51                   	push   ecx
c000a5c0:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5c4:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a5cb:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a5cf:	e8 dc d1 01 00       	call   c00277b0 <__subsf3>
c000a5d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5d7:	e8 b3 e8 01 00       	call   c0028e8f <__extendsfdf2>
c000a5dc:	83 c4 10             	add    esp,0x10
c000a5df:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5e3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5ef:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f7:	e8 9c de 01 00       	call   c0028498 <__muldf3>
c000a5fc:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a600:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a604:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a607:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a60b:	e8 7f e8 01 00       	call   c0028e8f <__extendsfdf2>
c000a610:	83 c4 10             	add    esp,0x10
c000a613:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a617:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a61b:	52                   	push   edx
c000a61c:	50                   	push   eax
c000a61d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a625:	e8 f1 d7 01 00       	call   c0027e1b <__adddf3>
c000a62a:	59                   	pop    ecx
c000a62b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a62f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a633:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a639:	e8 51 e8 01 00       	call   c0028e8f <__extendsfdf2>
c000a63e:	83 c4 10             	add    esp,0x10
c000a641:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a645:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a651:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a655:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a659:	e8 3a de 01 00       	call   c0028498 <__muldf3>
c000a65e:	83 c4 10             	add    esp,0x10
c000a661:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a665:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a669:	52                   	push   edx
c000a66a:	50                   	push   eax
c000a66b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a66f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a673:	e8 a3 d7 01 00       	call   c0027e1b <__adddf3>
c000a678:	59                   	pop    ecx
c000a679:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a67d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a681:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a687:	e8 03 e8 01 00       	call   c0028e8f <__extendsfdf2>
c000a68c:	83 c4 10             	add    esp,0x10
c000a68f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a693:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a697:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a7:	e8 ec dd 01 00       	call   c0028498 <__muldf3>
c000a6ac:	83 c4 10             	add    esp,0x10
c000a6af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6b3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6b7:	52                   	push   edx
c000a6b8:	50                   	push   eax
c000a6b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6c1:	e8 55 d7 01 00       	call   c0027e1b <__adddf3>
c000a6c6:	59                   	pop    ecx
c000a6c7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a6cb:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a6cf:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a6d5:	e8 b5 e7 01 00       	call   c0028e8f <__extendsfdf2>
c000a6da:	83 c4 10             	add    esp,0x10
c000a6dd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6e1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ed:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f5:	e8 9e dd 01 00       	call   c0028498 <__muldf3>
c000a6fa:	83 c4 10             	add    esp,0x10
c000a6fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a701:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a705:	52                   	push   edx
c000a706:	50                   	push   eax
c000a707:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70f:	e8 07 d7 01 00       	call   c0027e1b <__adddf3>
c000a714:	59                   	pop    ecx
c000a715:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a719:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a71d:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a723:	e8 67 e7 01 00       	call   c0028e8f <__extendsfdf2>
c000a728:	83 c4 10             	add    esp,0x10
c000a72b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a72f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a733:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a737:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a73f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a743:	e8 50 dd 01 00       	call   c0028498 <__muldf3>
c000a748:	83 c4 10             	add    esp,0x10
c000a74b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a74f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a753:	52                   	push   edx
c000a754:	50                   	push   eax
c000a755:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a759:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a75d:	e8 b9 d6 01 00       	call   c0027e1b <__adddf3>
c000a762:	59                   	pop    ecx
c000a763:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a767:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a76b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a771:	e8 19 e7 01 00       	call   c0028e8f <__extendsfdf2>
c000a776:	83 c4 10             	add    esp,0x10
c000a779:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a77d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a781:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a785:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a789:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a78d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a791:	e8 02 dd 01 00       	call   c0028498 <__muldf3>
c000a796:	83 c4 10             	add    esp,0x10
c000a799:	83 c6 18             	add    esi,0x18
c000a79c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7a4:	52                   	push   edx
c000a7a5:	50                   	push   eax
c000a7a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ae:	e8 68 d6 01 00       	call   c0027e1b <__adddf3>
c000a7b3:	59                   	pop    ecx
c000a7b4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7b8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7bc:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7c2:	e8 c8 e6 01 00       	call   c0028e8f <__extendsfdf2>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7e2:	e8 b1 dc 01 00       	call   c0028498 <__muldf3>
c000a7e7:	83 c4 10             	add    esp,0x10
c000a7ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7f2:	52                   	push   edx
c000a7f3:	50                   	push   eax
c000a7f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7fc:	e8 1a d6 01 00       	call   c0027e1b <__adddf3>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a808:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a80c:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a80f:	0f 89 8b fd ff ff    	jns    c000a5a0 <calc_output_hex+0x9e>
c000a815:	31 f6                	xor    esi,esi
c000a817:	31 ff                	xor    edi,edi
c000a819:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a81d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a820:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a824:	29 e9                	sub    ecx,ebp
c000a826:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a82a:	29 c8                	sub    eax,ecx
c000a82c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a82f:	99                   	cdq    
c000a830:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a834:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a837:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a83b:	0f af e8             	imul   ebp,eax
c000a83e:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a842:	40                   	inc    eax
c000a843:	01 cd                	add    ebp,ecx
c000a845:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a84a:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a84e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a852:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a856:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a859:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a85d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a861:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a865:	89 e8                	mov    eax,ebp
c000a867:	e8 42 f0 ff ff       	call   c00098ae <fp_to_double>
c000a86c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a870:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a874:	89 e8                	mov    eax,ebp
c000a876:	e8 29 f0 ff ff       	call   c00098a4 <fp_to_int>
c000a87b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a87f:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a882:	52                   	push   edx
c000a883:	52                   	push   edx
c000a884:	51                   	push   ecx
c000a885:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a88c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a893:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a897:	e8 14 cf 01 00       	call   c00277b0 <__subsf3>
c000a89c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a89f:	e8 eb e5 01 00       	call   c0028e8f <__extendsfdf2>
c000a8a4:	83 c4 10             	add    esp,0x10
c000a8a7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ab:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bf:	e8 d4 db 01 00       	call   c0028498 <__muldf3>
c000a8c4:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a8cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8cf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a8d2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a8d6:	e8 b4 e5 01 00       	call   c0028e8f <__extendsfdf2>
c000a8db:	83 c4 10             	add    esp,0x10
c000a8de:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e6:	52                   	push   edx
c000a8e7:	50                   	push   eax
c000a8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8f0:	e8 26 d5 01 00       	call   c0027e1b <__adddf3>
c000a8f5:	59                   	pop    ecx
c000a8f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a8fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a8fe:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a904:	e8 86 e5 01 00       	call   c0028e8f <__extendsfdf2>
c000a909:	83 c4 10             	add    esp,0x10
c000a90c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a910:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a914:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a918:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a920:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a924:	e8 6f db 01 00       	call   c0028498 <__muldf3>
c000a929:	83 c4 10             	add    esp,0x10
c000a92c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a930:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a934:	52                   	push   edx
c000a935:	50                   	push   eax
c000a936:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93e:	e8 d8 d4 01 00       	call   c0027e1b <__adddf3>
c000a943:	59                   	pop    ecx
c000a944:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a948:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a94c:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a952:	e8 38 e5 01 00       	call   c0028e8f <__extendsfdf2>
c000a957:	83 c4 10             	add    esp,0x10
c000a95a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a95e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a962:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a96a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a96e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a972:	e8 21 db 01 00       	call   c0028498 <__muldf3>
c000a977:	83 c4 10             	add    esp,0x10
c000a97a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a97e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a982:	52                   	push   edx
c000a983:	50                   	push   eax
c000a984:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a988:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a98c:	e8 8a d4 01 00       	call   c0027e1b <__adddf3>
c000a991:	59                   	pop    ecx
c000a992:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a996:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a99a:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9a0:	e8 ea e4 01 00       	call   c0028e8f <__extendsfdf2>
c000a9a5:	83 c4 10             	add    esp,0x10
c000a9a8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9ac:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9bc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9c0:	e8 d3 da 01 00       	call   c0028498 <__muldf3>
c000a9c5:	83 c4 10             	add    esp,0x10
c000a9c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9d0:	52                   	push   edx
c000a9d1:	50                   	push   eax
c000a9d2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9da:	e8 3c d4 01 00       	call   c0027e1b <__adddf3>
c000a9df:	59                   	pop    ecx
c000a9e0:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a9e4:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a9e8:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a9ee:	e8 9c e4 01 00       	call   c0028e8f <__extendsfdf2>
c000a9f3:	83 c4 10             	add    esp,0x10
c000a9f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa06:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0e:	e8 85 da 01 00       	call   c0028498 <__muldf3>
c000aa13:	83 c4 10             	add    esp,0x10
c000aa16:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa1a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa1e:	52                   	push   edx
c000aa1f:	50                   	push   eax
c000aa20:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa24:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa28:	e8 ee d3 01 00       	call   c0027e1b <__adddf3>
c000aa2d:	59                   	pop    ecx
c000aa2e:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa32:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa36:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa3c:	e8 4e e4 01 00       	call   c0028e8f <__extendsfdf2>
c000aa41:	83 c4 10             	add    esp,0x10
c000aa44:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa48:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa54:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa58:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa5c:	e8 37 da 01 00       	call   c0028498 <__muldf3>
c000aa61:	83 c4 10             	add    esp,0x10
c000aa64:	83 eb 18             	sub    ebx,0x18
c000aa67:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa6b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa6f:	52                   	push   edx
c000aa70:	50                   	push   eax
c000aa71:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa75:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa79:	e8 9d d3 01 00       	call   c0027e1b <__adddf3>
c000aa7e:	59                   	pop    ecx
c000aa7f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aa83:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aa87:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aa8d:	e8 fd e3 01 00       	call   c0028e8f <__extendsfdf2>
c000aa92:	83 c4 10             	add    esp,0x10
c000aa95:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa99:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaa9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaad:	e8 e6 d9 01 00       	call   c0028498 <__muldf3>
c000aab2:	83 c4 10             	add    esp,0x10
c000aab5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aab9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aabd:	52                   	push   edx
c000aabe:	50                   	push   eax
c000aabf:	57                   	push   edi
c000aac0:	56                   	push   esi
c000aac1:	e8 55 d3 01 00       	call   c0027e1b <__adddf3>
c000aac6:	83 c4 10             	add    esp,0x10
c000aac9:	89 c6                	mov    esi,eax
c000aacb:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000aace:	89 d7                	mov    edi,edx
c000aad0:	85 ed                	test   ebp,ebp
c000aad2:	0f 8f 8d fd ff ff    	jg     c000a865 <calc_output_hex+0x363>
c000aad8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aadc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae8:	e8 2e d3 01 00       	call   c0027e1b <__adddf3>
c000aaed:	83 c4 10             	add    esp,0x10
c000aaf0:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaf3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaf7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aafb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab07:	e8 8c d9 01 00       	call   c0028498 <__muldf3>
c000ab0c:	59                   	pop    ecx
c000ab0d:	5b                   	pop    ebx
c000ab0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab16:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1e:	e8 48 e2 01 00       	call   c0028d6b <__truncdfsf2>
c000ab23:	83 c4 10             	add    esp,0x10
c000ab26:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab2d:	89 03                	mov    DWORD PTR [ebx],eax
c000ab2f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab33:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3f:	e8 d7 d2 01 00       	call   c0027e1b <__adddf3>
c000ab44:	83 c4 10             	add    esp,0x10
c000ab47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab4a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5e:	e8 35 d9 01 00       	call   c0028498 <__muldf3>
c000ab63:	5d                   	pop    ebp
c000ab64:	59                   	pop    ecx
c000ab65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab75:	e8 f1 e1 01 00       	call   c0028d6b <__truncdfsf2>
c000ab7a:	83 c4 10             	add    esp,0x10
c000ab7d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab84:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ab87:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab97:	e8 7f d2 01 00       	call   c0027e1b <__adddf3>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aba2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aba6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb6:	e8 dd d8 01 00       	call   c0028498 <__muldf3>
c000abbb:	5b                   	pop    ebx
c000abbc:	5d                   	pop    ebp
c000abbd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abc5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abc9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abcd:	e8 99 e1 01 00       	call   c0028d6b <__truncdfsf2>
c000abd2:	83 c4 10             	add    esp,0x10
c000abd5:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abdc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000abdf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abeb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abef:	e8 27 d2 01 00       	call   c0027e1b <__adddf3>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	89 04 24             	mov    DWORD PTR [esp],eax
c000abfa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abfe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0e:	e8 85 d8 01 00       	call   c0028498 <__muldf3>
c000ac13:	59                   	pop    ecx
c000ac14:	5b                   	pop    ebx
c000ac15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac25:	e8 41 e1 01 00       	call   c0028d6b <__truncdfsf2>
c000ac2a:	83 c4 10             	add    esp,0x10
c000ac2d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac34:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac47:	e8 cf d1 01 00       	call   c0027e1b <__adddf3>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac52:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac66:	e8 2d d8 01 00       	call   c0028498 <__muldf3>
c000ac6b:	5d                   	pop    ebp
c000ac6c:	59                   	pop    ecx
c000ac6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7d:	e8 e9 e0 01 00       	call   c0028d6b <__truncdfsf2>
c000ac82:	83 c4 10             	add    esp,0x10
c000ac85:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac8c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ac8f:	57                   	push   edi
c000ac90:	56                   	push   esi
c000ac91:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac95:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac99:	e8 7d d1 01 00       	call   c0027e1b <__adddf3>
c000ac9e:	83 c4 10             	add    esp,0x10
c000aca1:	89 04 24             	mov    DWORD PTR [esp],eax
c000aca4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aca8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb8:	e8 db d7 01 00       	call   c0028498 <__muldf3>
c000acbd:	5b                   	pop    ebx
c000acbe:	5e                   	pop    esi
c000acbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accf:	e8 97 e0 01 00       	call   c0028d6b <__truncdfsf2>
c000acd4:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000acdb:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000acde:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ace4:	5b                   	pop    ebx
c000ace5:	5e                   	pop    esi
c000ace6:	5f                   	pop    edi
c000ace7:	5d                   	pop    ebp
c000ace8:	c3                   	ret    

c000ace9 <sinc_reset>:
c000ace9:	56                   	push   esi
c000acea:	53                   	push   ebx
c000aceb:	51                   	push   ecx
c000acec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acf0:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000acf3:	85 db                	test   ebx,ebx
c000acf5:	74 59                	je     c000ad50 <sinc_reset+0x67>
c000acf7:	31 d2                	xor    edx,edx
c000acf9:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad00:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad03:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad06:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad0d:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad14:	31 c0                	xor    eax,eax
c000ad16:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad1c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad1f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad22:	52                   	push   edx
c000ad23:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad26:	c1 e0 02             	shl    eax,0x2
c000ad29:	50                   	push   eax
c000ad2a:	6a 00                	push   0x0
c000ad2c:	56                   	push   esi
c000ad2d:	e8 1e 5a ff ff       	call   c0000750 <memset>
c000ad32:	83 c4 0c             	add    esp,0xc
c000ad35:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad38:	c1 e0 02             	shl    eax,0x2
c000ad3b:	50                   	push   eax
c000ad3c:	68 aa 00 00 00       	push   0xaa
c000ad41:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad44:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad47:	50                   	push   eax
c000ad48:	e8 03 5a ff ff       	call   c0000750 <memset>
c000ad4d:	83 c4 10             	add    esp,0x10
c000ad50:	58                   	pop    eax
c000ad51:	5b                   	pop    ebx
c000ad52:	5e                   	pop    esi
c000ad53:	c3                   	ret    

c000ad54 <calc_output_multi>:
c000ad54:	55                   	push   ebp
c000ad55:	57                   	push   edi
c000ad56:	56                   	push   esi
c000ad57:	89 c6                	mov    esi,eax
c000ad59:	53                   	push   ebx
c000ad5a:	83 ec 4c             	sub    esp,0x4c
c000ad5d:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad61:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad65:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ad69:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ad6d:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ad71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ad75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ad79:	8d 46 44             	lea    eax,[esi+0x44]
c000ad7c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad7f:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ad85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ad89:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ad8c:	e8 0f eb ff ff       	call   c00098a0 <int_to_fp>
c000ad91:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ad94:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ad98:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ad9c:	99                   	cdq    
c000ad9d:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ada1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ada5:	0f af d0             	imul   edx,eax
c000ada8:	0f af c3             	imul   eax,ebx
c000adab:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adaf:	29 c1                	sub    ecx,eax
c000adb1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adb5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adb9:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adc0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adc4:	57                   	push   edi
c000adc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000adc9:	6a 00                	push   0x0
c000adcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adcf:	e8 7c 59 ff ff       	call   c0000750 <memset>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000addb:	89 df                	mov    edi,ebx
c000addd:	e8 cc ea ff ff       	call   c00098ae <fp_to_double>
c000ade2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ade6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000adea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000adee:	e8 b1 ea ff ff       	call   c00098a4 <fp_to_int>
c000adf3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000adf6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000adf9:	51                   	push   ecx
c000adfa:	51                   	push   ecx
c000adfb:	55                   	push   ebp
c000adfc:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae00:	e8 ab c9 01 00       	call   c00277b0 <__subsf3>
c000ae05:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae08:	e8 82 e0 01 00       	call   c0028e8f <__extendsfdf2>
c000ae0d:	83 c4 10             	add    esp,0x10
c000ae10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae14:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae28:	e8 6b d6 01 00       	call   c0028498 <__muldf3>
c000ae2d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae34:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae38:	e8 52 e0 01 00       	call   c0028e8f <__extendsfdf2>
c000ae3d:	83 c4 10             	add    esp,0x10
c000ae40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae48:	52                   	push   edx
c000ae49:	50                   	push   eax
c000ae4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae52:	e8 c4 cf 01 00       	call   c0027e1b <__adddf3>
c000ae57:	83 c4 10             	add    esp,0x10
c000ae5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae5e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae62:	89 f8                	mov    eax,edi
c000ae64:	b9 08 00 00 00       	mov    ecx,0x8
c000ae69:	99                   	cdq    
c000ae6a:	f7 f9                	idiv   ecx
c000ae6c:	4a                   	dec    edx
c000ae6d:	83 fa 06             	cmp    edx,0x6
c000ae70:	77 07                	ja     c000ae79 <calc_output_multi+0x125>
c000ae72:	ff 24 95 a4 a7 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd585c]
c000ae79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae7c:	4f                   	dec    edi
c000ae7d:	83 ec 0c             	sub    esp,0xc
c000ae80:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae87:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae92:	e8 f8 df 01 00       	call   c0028e8f <__extendsfdf2>
c000ae97:	83 c4 10             	add    esp,0x10
c000ae9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae9e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeb2:	e8 e1 d5 01 00       	call   c0028498 <__muldf3>
c000aeb7:	83 c4 10             	add    esp,0x10
c000aeba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aebe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec2:	52                   	push   edx
c000aec3:	50                   	push   eax
c000aec4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aec7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeca:	e8 4c cf 01 00       	call   c0027e1b <__adddf3>
c000aecf:	83 c4 10             	add    esp,0x10
c000aed2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aed5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aed8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aedb:	4f                   	dec    edi
c000aedc:	83 ec 0c             	sub    esp,0xc
c000aedf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aee2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeed:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aef1:	e8 99 df 01 00       	call   c0028e8f <__extendsfdf2>
c000aef6:	83 c4 10             	add    esp,0x10
c000aef9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aefd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af09:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af11:	e8 82 d5 01 00       	call   c0028498 <__muldf3>
c000af16:	83 c4 10             	add    esp,0x10
c000af19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af1d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af21:	52                   	push   edx
c000af22:	50                   	push   eax
c000af23:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af26:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af29:	e8 ed ce 01 00       	call   c0027e1b <__adddf3>
c000af2e:	83 c4 10             	add    esp,0x10
c000af31:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af34:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af37:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af3a:	4f                   	dec    edi
c000af3b:	83 ec 0c             	sub    esp,0xc
c000af3e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af45:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af4c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af50:	e8 3a df 01 00       	call   c0028e8f <__extendsfdf2>
c000af55:	83 c4 10             	add    esp,0x10
c000af58:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af68:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af70:	e8 23 d5 01 00       	call   c0028498 <__muldf3>
c000af75:	83 c4 10             	add    esp,0x10
c000af78:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af7c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af80:	52                   	push   edx
c000af81:	50                   	push   eax
c000af82:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af85:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af88:	e8 8e ce 01 00       	call   c0027e1b <__adddf3>
c000af8d:	83 c4 10             	add    esp,0x10
c000af90:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af93:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af96:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af99:	4f                   	dec    edi
c000af9a:	83 ec 0c             	sub    esp,0xc
c000af9d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afa0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afa4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afab:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afaf:	e8 db de 01 00       	call   c0028e8f <__extendsfdf2>
c000afb4:	83 c4 10             	add    esp,0x10
c000afb7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afbb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcf:	e8 c4 d4 01 00       	call   c0028498 <__muldf3>
c000afd4:	83 c4 10             	add    esp,0x10
c000afd7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afdb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afdf:	52                   	push   edx
c000afe0:	50                   	push   eax
c000afe1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afe4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afe7:	e8 2f ce 01 00       	call   c0027e1b <__adddf3>
c000afec:	83 c4 10             	add    esp,0x10
c000afef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aff2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aff5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aff8:	4f                   	dec    edi
c000aff9:	83 ec 0c             	sub    esp,0xc
c000affc:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b003:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b00a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b00e:	e8 7c de 01 00       	call   c0028e8f <__extendsfdf2>
c000b013:	83 c4 10             	add    esp,0x10
c000b016:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b01a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b01e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b022:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b026:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02e:	e8 65 d4 01 00       	call   c0028498 <__muldf3>
c000b033:	83 c4 10             	add    esp,0x10
c000b036:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b03a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b03e:	52                   	push   edx
c000b03f:	50                   	push   eax
c000b040:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b043:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b046:	e8 d0 cd 01 00       	call   c0027e1b <__adddf3>
c000b04b:	83 c4 10             	add    esp,0x10
c000b04e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b051:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b057:	4f                   	dec    edi
c000b058:	83 ec 0c             	sub    esp,0xc
c000b05b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b062:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b069:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06d:	e8 1d de 01 00       	call   c0028e8f <__extendsfdf2>
c000b072:	83 c4 10             	add    esp,0x10
c000b075:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b079:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b081:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b085:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b089:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b08d:	e8 06 d4 01 00       	call   c0028498 <__muldf3>
c000b092:	83 c4 10             	add    esp,0x10
c000b095:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b099:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b09d:	52                   	push   edx
c000b09e:	50                   	push   eax
c000b09f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a5:	e8 71 cd 01 00       	call   c0027e1b <__adddf3>
c000b0aa:	83 c4 10             	add    esp,0x10
c000b0ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0b0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b6:	4f                   	dec    edi
c000b0b7:	83 ec 0c             	sub    esp,0xc
c000b0ba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cc:	e8 be dd 01 00       	call   c0028e8f <__extendsfdf2>
c000b0d1:	83 c4 10             	add    esp,0x10
c000b0d4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0ec:	e8 a7 d3 01 00       	call   c0028498 <__muldf3>
c000b0f1:	83 c4 10             	add    esp,0x10
c000b0f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0fc:	52                   	push   edx
c000b0fd:	50                   	push   eax
c000b0fe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b101:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b104:	e8 12 cd 01 00       	call   c0027e1b <__adddf3>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b112:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 5f dd 01 00       	call   c0028e8f <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b137:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b147:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b14b:	e8 48 d3 01 00       	call   c0028498 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b157:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 b3 cc 01 00       	call   c0027e1b <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	85 ff                	test   edi,edi
c000b173:	0f 8f e9 fc ff ff    	jg     c000ae62 <calc_output_multi+0x10e>
c000b179:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b17d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b181:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b185:	0f 89 4c fc ff ff    	jns    c000add7 <calc_output_multi+0x83>
c000b18b:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b18f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b193:	29 c8                	sub    eax,ecx
c000b195:	99                   	cdq    
c000b196:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b19a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b19e:	0f af d0             	imul   edx,eax
c000b1a1:	40                   	inc    eax
c000b1a2:	01 d1                	add    ecx,edx
c000b1a4:	0f af c3             	imul   eax,ebx
c000b1a7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1ab:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1b2:	55                   	push   ebp
c000b1b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1b7:	6a 00                	push   0x0
c000b1b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1bd:	e8 8e 55 ff ff       	call   c0000750 <memset>
c000b1c2:	83 c4 10             	add    esp,0x10
c000b1c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1c9:	e8 e0 e6 ff ff       	call   c00098ae <fp_to_double>
c000b1ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b1d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1da:	e8 c5 e6 ff ff       	call   c00098a4 <fp_to_int>
c000b1df:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b1e2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b1e5:	57                   	push   edi
c000b1e6:	57                   	push   edi
c000b1e7:	89 df                	mov    edi,ebx
c000b1e9:	55                   	push   ebp
c000b1ea:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b1ee:	e8 bd c5 01 00       	call   c00277b0 <__subsf3>
c000b1f3:	89 04 24             	mov    DWORD PTR [esp],eax
c000b1f6:	e8 94 dc 01 00       	call   c0028e8f <__extendsfdf2>
c000b1fb:	83 c4 10             	add    esp,0x10
c000b1fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b202:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b206:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b212:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b216:	e8 7d d2 01 00       	call   c0028498 <__muldf3>
c000b21b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b21e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b222:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b226:	e8 64 dc 01 00       	call   c0028e8f <__extendsfdf2>
c000b22b:	83 c4 10             	add    esp,0x10
c000b22e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b232:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b236:	52                   	push   edx
c000b237:	50                   	push   eax
c000b238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b23c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b240:	e8 d6 cb 01 00       	call   c0027e1b <__adddf3>
c000b245:	83 c4 10             	add    esp,0x10
c000b248:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b24c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b250:	89 f8                	mov    eax,edi
c000b252:	b9 08 00 00 00       	mov    ecx,0x8
c000b257:	99                   	cdq    
c000b258:	f7 f9                	idiv   ecx
c000b25a:	4a                   	dec    edx
c000b25b:	83 fa 06             	cmp    edx,0x6
c000b25e:	77 07                	ja     c000b267 <calc_output_multi+0x513>
c000b260:	ff 24 95 c0 a7 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5840]
c000b267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b26b:	4f                   	dec    edi
c000b26c:	83 ec 0c             	sub    esp,0xc
c000b26f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b272:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b276:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b27d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b281:	e8 09 dc 01 00       	call   c0028e8f <__extendsfdf2>
c000b286:	83 c4 10             	add    esp,0x10
c000b289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b291:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b295:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b299:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b29d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a1:	e8 f2 d1 01 00       	call   c0028498 <__muldf3>
c000b2a6:	83 c4 10             	add    esp,0x10
c000b2a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2b1:	52                   	push   edx
c000b2b2:	50                   	push   eax
c000b2b3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2b6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2b9:	e8 5d cb 01 00       	call   c0027e1b <__adddf3>
c000b2be:	83 c4 10             	add    esp,0x10
c000b2c1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2c4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2cb:	4f                   	dec    edi
c000b2cc:	83 ec 0c             	sub    esp,0xc
c000b2cf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2dd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2e1:	e8 a9 db 01 00       	call   c0028e8f <__extendsfdf2>
c000b2e6:	83 c4 10             	add    esp,0x10
c000b2e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b301:	e8 92 d1 01 00       	call   c0028498 <__muldf3>
c000b306:	83 c4 10             	add    esp,0x10
c000b309:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b30d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b311:	52                   	push   edx
c000b312:	50                   	push   eax
c000b313:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b316:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b319:	e8 fd ca 01 00       	call   c0027e1b <__adddf3>
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b324:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b327:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b32b:	4f                   	dec    edi
c000b32c:	83 ec 0c             	sub    esp,0xc
c000b32f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b332:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b336:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b33d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b341:	e8 49 db 01 00       	call   c0028e8f <__extendsfdf2>
c000b346:	83 c4 10             	add    esp,0x10
c000b349:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b351:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b359:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b35d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b361:	e8 32 d1 01 00       	call   c0028498 <__muldf3>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b36d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b371:	52                   	push   edx
c000b372:	50                   	push   eax
c000b373:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b376:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b379:	e8 9d ca 01 00       	call   c0027e1b <__adddf3>
c000b37e:	83 c4 10             	add    esp,0x10
c000b381:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b384:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4f                   	dec    edi
c000b38c:	83 ec 0c             	sub    esp,0xc
c000b38f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b392:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b396:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b39d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3a1:	e8 e9 da 01 00       	call   c0028e8f <__extendsfdf2>
c000b3a6:	83 c4 10             	add    esp,0x10
c000b3a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3c1:	e8 d2 d0 01 00       	call   c0028498 <__muldf3>
c000b3c6:	83 c4 10             	add    esp,0x10
c000b3c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3d1:	52                   	push   edx
c000b3d2:	50                   	push   eax
c000b3d3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3d6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3d9:	e8 3d ca 01 00       	call   c0027e1b <__adddf3>
c000b3de:	83 c4 10             	add    esp,0x10
c000b3e1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3e4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3eb:	4f                   	dec    edi
c000b3ec:	83 ec 0c             	sub    esp,0xc
c000b3ef:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3f6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3fd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b401:	e8 89 da 01 00       	call   c0028e8f <__extendsfdf2>
c000b406:	83 c4 10             	add    esp,0x10
c000b409:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b411:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b415:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b419:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b41d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b421:	e8 72 d0 01 00       	call   c0028498 <__muldf3>
c000b426:	83 c4 10             	add    esp,0x10
c000b429:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b42d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b431:	52                   	push   edx
c000b432:	50                   	push   eax
c000b433:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b436:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b439:	e8 dd c9 01 00       	call   c0027e1b <__adddf3>
c000b43e:	83 c4 10             	add    esp,0x10
c000b441:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b444:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b44b:	4f                   	dec    edi
c000b44c:	83 ec 0c             	sub    esp,0xc
c000b44f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b452:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b456:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b45d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b461:	e8 29 da 01 00       	call   c0028e8f <__extendsfdf2>
c000b466:	83 c4 10             	add    esp,0x10
c000b469:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b479:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b47d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b481:	e8 12 d0 01 00       	call   c0028498 <__muldf3>
c000b486:	83 c4 10             	add    esp,0x10
c000b489:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b48d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b491:	52                   	push   edx
c000b492:	50                   	push   eax
c000b493:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b496:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b499:	e8 7d c9 01 00       	call   c0027e1b <__adddf3>
c000b49e:	83 c4 10             	add    esp,0x10
c000b4a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ab:	4f                   	dec    edi
c000b4ac:	83 ec 0c             	sub    esp,0xc
c000b4af:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4b6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4bd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4c1:	e8 c9 d9 01 00       	call   c0028e8f <__extendsfdf2>
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4e1:	e8 b2 cf 01 00       	call   c0028498 <__muldf3>
c000b4e6:	83 c4 10             	add    esp,0x10
c000b4e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4f1:	52                   	push   edx
c000b4f2:	50                   	push   eax
c000b4f3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4f6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4f9:	e8 1d c9 01 00       	call   c0027e1b <__adddf3>
c000b4fe:	83 c4 10             	add    esp,0x10
c000b501:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b504:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50b:	4f                   	dec    edi
c000b50c:	83 ec 0c             	sub    esp,0xc
c000b50f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b512:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b516:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b51d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b521:	e8 69 d9 01 00       	call   c0028e8f <__extendsfdf2>
c000b526:	83 c4 10             	add    esp,0x10
c000b529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b531:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b539:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b53d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b541:	e8 52 cf 01 00       	call   c0028498 <__muldf3>
c000b546:	83 c4 10             	add    esp,0x10
c000b549:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b54d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b551:	52                   	push   edx
c000b552:	50                   	push   eax
c000b553:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b556:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b559:	e8 bd c8 01 00       	call   c0027e1b <__adddf3>
c000b55e:	83 c4 10             	add    esp,0x10
c000b561:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b564:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b567:	85 ff                	test   edi,edi
c000b569:	0f 8f e1 fc ff ff    	jg     c000b250 <calc_output_multi+0x4fc>
c000b56f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b573:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b577:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b57b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b580:	0f 8f 3f fc ff ff    	jg     c000b1c5 <calc_output_multi+0x471>
c000b586:	be 08 00 00 00       	mov    esi,0x8
c000b58b:	89 d8                	mov    eax,ebx
c000b58d:	99                   	cdq    
c000b58e:	f7 fe                	idiv   esi
c000b590:	4a                   	dec    edx
c000b591:	83 fa 06             	cmp    edx,0x6
c000b594:	77 07                	ja     c000b59d <calc_output_multi+0x849>
c000b596:	ff 24 95 dc a7 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5824]
c000b59d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5a1:	4b                   	dec    ebx
c000b5a2:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5a6:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5b4:	e8 62 c8 01 00       	call   c0027e1b <__adddf3>
c000b5b9:	83 c4 10             	add    esp,0x10
c000b5bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d4:	e8 bf ce 01 00       	call   c0028498 <__muldf3>
c000b5d9:	5d                   	pop    ebp
c000b5da:	59                   	pop    ecx
c000b5db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5df:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	e8 7b d7 01 00       	call   c0028d6b <__truncdfsf2>
c000b5f0:	83 c4 10             	add    esp,0x10
c000b5f3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5f7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5fe:	4b                   	dec    ebx
c000b5ff:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b603:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b606:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b60a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b60e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b611:	e8 05 c8 01 00       	call   c0027e1b <__adddf3>
c000b616:	83 c4 10             	add    esp,0x10
c000b619:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b61d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b625:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b631:	e8 62 ce 01 00       	call   c0028498 <__muldf3>
c000b636:	59                   	pop    ecx
c000b637:	5f                   	pop    edi
c000b638:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b63c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b640:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b644:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b648:	e8 1e d7 01 00       	call   c0028d6b <__truncdfsf2>
c000b64d:	83 c4 10             	add    esp,0x10
c000b650:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b654:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b657:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b65b:	4b                   	dec    ebx
c000b65c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b660:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b663:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b667:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b66b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b66e:	e8 a8 c7 01 00       	call   c0027e1b <__adddf3>
c000b673:	83 c4 10             	add    esp,0x10
c000b676:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b67a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68e:	e8 05 ce 01 00       	call   c0028498 <__muldf3>
c000b693:	5f                   	pop    edi
c000b694:	5d                   	pop    ebp
c000b695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a5:	e8 c1 d6 01 00       	call   c0028d6b <__truncdfsf2>
c000b6aa:	83 c4 10             	add    esp,0x10
c000b6ad:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6b1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6b8:	4b                   	dec    ebx
c000b6b9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6bd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6c4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6c8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6cb:	e8 4b c7 01 00       	call   c0027e1b <__adddf3>
c000b6d0:	83 c4 10             	add    esp,0x10
c000b6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6eb:	e8 a8 cd 01 00       	call   c0028498 <__muldf3>
c000b6f0:	5d                   	pop    ebp
c000b6f1:	59                   	pop    ecx
c000b6f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b702:	e8 64 d6 01 00       	call   c0028d6b <__truncdfsf2>
c000b707:	83 c4 10             	add    esp,0x10
c000b70a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b70e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b711:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b715:	4b                   	dec    ebx
c000b716:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b71a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b71d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b721:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b725:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b728:	e8 ee c6 01 00       	call   c0027e1b <__adddf3>
c000b72d:	83 c4 10             	add    esp,0x10
c000b730:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b734:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b73c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b748:	e8 4b cd 01 00       	call   c0028498 <__muldf3>
c000b74d:	59                   	pop    ecx
c000b74e:	5f                   	pop    edi
c000b74f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b753:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b757:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75f:	e8 07 d6 01 00       	call   c0028d6b <__truncdfsf2>
c000b764:	83 c4 10             	add    esp,0x10
c000b767:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b76b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b76e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b772:	4b                   	dec    ebx
c000b773:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b777:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b77a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b77e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b782:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b785:	e8 91 c6 01 00       	call   c0027e1b <__adddf3>
c000b78a:	83 c4 10             	add    esp,0x10
c000b78d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b791:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b795:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b799:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a5:	e8 ee cc 01 00       	call   c0028498 <__muldf3>
c000b7aa:	5f                   	pop    edi
c000b7ab:	5d                   	pop    ebp
c000b7ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bc:	e8 aa d5 01 00       	call   c0028d6b <__truncdfsf2>
c000b7c1:	83 c4 10             	add    esp,0x10
c000b7c4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7c8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7cf:	4b                   	dec    ebx
c000b7d0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7d4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7db:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7df:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7e2:	e8 34 c6 01 00       	call   c0027e1b <__adddf3>
c000b7e7:	83 c4 10             	add    esp,0x10
c000b7ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b802:	e8 91 cc 01 00       	call   c0028498 <__muldf3>
c000b807:	5d                   	pop    ebp
c000b808:	59                   	pop    ecx
c000b809:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b80d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b811:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b815:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b819:	e8 4d d5 01 00       	call   c0028d6b <__truncdfsf2>
c000b81e:	83 c4 10             	add    esp,0x10
c000b821:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b825:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b82c:	4b                   	dec    ebx
c000b82d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b831:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b834:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b838:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b83c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b83f:	e8 d7 c5 01 00       	call   c0027e1b <__adddf3>
c000b844:	83 c4 10             	add    esp,0x10
c000b847:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b84b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b84f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85f:	e8 34 cc 01 00       	call   c0028498 <__muldf3>
c000b864:	59                   	pop    ecx
c000b865:	5f                   	pop    edi
c000b866:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b872:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b876:	e8 f0 d4 01 00       	call   c0028d6b <__truncdfsf2>
c000b87b:	83 c4 10             	add    esp,0x10
c000b87e:	85 db                	test   ebx,ebx
c000b880:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b884:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b887:	0f 8f fe fc ff ff    	jg     c000b58b <calc_output_multi+0x837>
c000b88d:	83 c4 4c             	add    esp,0x4c
c000b890:	5b                   	pop    ebx
c000b891:	5e                   	pop    esi
c000b892:	5f                   	pop    edi
c000b893:	5d                   	pop    ebp
c000b894:	c3                   	ret    

c000b895 <double_to_fp>:
c000b895:	83 ec 0c             	sub    esp,0xc
c000b898:	68 00 00 b0 40       	push   0x40b00000
c000b89d:	6a 00                	push   0x0
c000b89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a7:	e8 ec cb 01 00       	call   c0028498 <__muldf3>
c000b8ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8b0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8b4:	83 c4 1c             	add    esp,0x1c
c000b8b7:	e9 64 d6 01 00       	jmp    c0028f20 <lrint>

c000b8bc <prepare_data>:
c000b8bc:	55                   	push   ebp
c000b8bd:	57                   	push   edi
c000b8be:	56                   	push   esi
c000b8bf:	53                   	push   ebx
c000b8c0:	83 ec 1c             	sub    esp,0x1c
c000b8c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8cb:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b8cf:	0f 89 57 01 00 00    	jns    c000ba2c <prepare_data+0x170>
c000b8d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b8d8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b8db:	85 d2                	test   edx,edx
c000b8dd:	75 0d                	jne    c000b8ec <prepare_data+0x30>
c000b8df:	8d 14 36             	lea    edx,[esi+esi*1]
c000b8e2:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b8e5:	29 d0                	sub    eax,edx
c000b8e7:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b8ea:	eb 44                	jmp    c000b930 <prepare_data+0x74>
c000b8ec:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b8ef:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b8f2:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b8f5:	39 c1                	cmp    ecx,eax
c000b8f7:	7d 04                	jge    c000b8fd <prepare_data+0x41>
c000b8f9:	29 d0                	sub    eax,edx
c000b8fb:	eb 2d                	jmp    c000b92a <prepare_data+0x6e>
c000b8fd:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b903:	29 d7                	sub    edi,edx
c000b905:	01 f7                	add    edi,esi
c000b907:	51                   	push   ecx
c000b908:	29 f2                	sub    edx,esi
c000b90a:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b911:	8d 14 90             	lea    edx,[eax+edx*4]
c000b914:	51                   	push   ecx
c000b915:	52                   	push   edx
c000b916:	50                   	push   eax
c000b917:	e8 6c 4d ff ff       	call   c0000688 <memmove>
c000b91c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b91f:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b922:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b925:	29 f0                	sub    eax,esi
c000b927:	83 c4 10             	add    esp,0x10
c000b92a:	29 f0                	sub    eax,esi
c000b92c:	79 02                	jns    c000b930 <prepare_data+0x74>
c000b92e:	31 c0                	xor    eax,eax
c000b930:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b933:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b936:	29 ef                	sub    edi,ebp
c000b938:	39 c7                	cmp    edi,eax
c000b93a:	7e 02                	jle    c000b93e <prepare_data+0x82>
c000b93c:	89 c7                	mov    edi,eax
c000b93e:	89 f8                	mov    eax,edi
c000b940:	99                   	cdq    
c000b941:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b944:	b8 15 00 00 00       	mov    eax,0x15
c000b949:	29 d7                	sub    edi,edx
c000b94b:	0f 88 dd 00 00 00    	js     c000ba2e <prepare_data+0x172>
c000b951:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b954:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b957:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b95a:	0f 8f ce 00 00 00    	jg     c000ba2e <prepare_data+0x172>
c000b960:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b966:	50                   	push   eax
c000b967:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b96e:	50                   	push   eax
c000b96f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b973:	8b 00                	mov    eax,DWORD PTR [eax]
c000b975:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b978:	50                   	push   eax
c000b979:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b97c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b980:	50                   	push   eax
c000b981:	e8 c0 4c ff ff       	call   c0000646 <memcpy>
c000b986:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b989:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b98c:	01 fd                	add    ebp,edi
c000b98e:	01 f9                	add    ecx,edi
c000b990:	83 c4 10             	add    esp,0x10
c000b993:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b996:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b999:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b99c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9a0:	0f 85 86 00 00 00    	jne    c000ba2c <prepare_data+0x170>
c000b9a6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9a9:	89 e8                	mov    eax,ebp
c000b9ab:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9ae:	29 c8                	sub    eax,ecx
c000b9b0:	39 f8                	cmp    eax,edi
c000b9b2:	7d 78                	jge    c000ba2c <prepare_data+0x170>
c000b9b4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9b8:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9bc:	74 6e                	je     c000ba2c <prepare_data+0x170>
c000b9be:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9c1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9c5:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b9c8:	29 ef                	sub    edi,ebp
c000b9ca:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b9ce:	7c 29                	jl     c000b9f9 <prepare_data+0x13d>
c000b9d0:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b9d3:	29 f1                	sub    ecx,esi
c000b9d5:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9dc:	55                   	push   ebp
c000b9dd:	50                   	push   eax
c000b9de:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9e1:	50                   	push   eax
c000b9e2:	52                   	push   edx
c000b9e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e7:	e8 9c 4c ff ff       	call   c0000688 <memmove>
c000b9ec:	83 c4 10             	add    esp,0x10
c000b9ef:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b9f2:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b9f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b9fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b9ff:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba02:	83 c6 05             	add    esi,0x5
c000ba05:	78 07                	js     c000ba0e <prepare_data+0x152>
c000ba07:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0a:	39 cf                	cmp    edi,ecx
c000ba0c:	7e 04                	jle    c000ba12 <prepare_data+0x156>
c000ba0e:	89 ce                	mov    esi,ecx
c000ba10:	29 c6                	sub    esi,eax
c000ba12:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba15:	51                   	push   ecx
c000ba16:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba1d:	51                   	push   ecx
c000ba1e:	6a 00                	push   0x0
c000ba20:	50                   	push   eax
c000ba21:	e8 2a 4d ff ff       	call   c0000750 <memset>
c000ba26:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba29:	83 c4 10             	add    esp,0x10
c000ba2c:	31 c0                	xor    eax,eax
c000ba2e:	83 c4 1c             	add    esp,0x1c
c000ba31:	5b                   	pop    ebx
c000ba32:	5e                   	pop    esi
c000ba33:	5f                   	pop    edi
c000ba34:	5d                   	pop    ebp
c000ba35:	c3                   	ret    

c000ba36 <sinc_multichan_vari_process>:
c000ba36:	55                   	push   ebp
c000ba37:	ba 05 00 00 00       	mov    edx,0x5
c000ba3c:	57                   	push   edi
c000ba3d:	56                   	push   esi
c000ba3e:	53                   	push   ebx
c000ba3f:	83 ec 4c             	sub    esp,0x4c
c000ba42:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba46:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba4a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba4d:	85 db                	test   ebx,ebx
c000ba4f:	0f 84 9b 06 00 00    	je     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000ba55:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba58:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba5b:	0f af c5             	imul   eax,ebp
c000ba5e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba61:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba64:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ba6b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ba72:	0f af c5             	imul   eax,ebp
c000ba75:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ba78:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba7b:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba7d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba85:	68 00 00 70 3f       	push   0x3f700000
c000ba8a:	6a 00                	push   0x0
c000ba8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba94:	e8 ce d2 01 00       	call   c0028d67 <__ltdf2>
c000ba99:	83 c4 10             	add    esp,0x10
c000ba9c:	ba 16 00 00 00       	mov    edx,0x16
c000baa1:	85 c0                	test   eax,eax
c000baa3:	0f 88 47 06 00 00    	js     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000baa9:	68 00 00 70 40       	push   0x40700000
c000baae:	6a 00                	push   0x0
c000bab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab8:	e8 8c d2 01 00       	call   c0028d49 <__gtdf2>
c000babd:	83 c4 10             	add    esp,0x10
c000bac0:	ba 16 00 00 00       	mov    edx,0x16
c000bac5:	85 c0                	test   eax,eax
c000bac7:	0f 8f 23 06 00 00    	jg     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bacd:	83 ec 0c             	sub    esp,0xc
c000bad0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bad3:	e8 23 d0 01 00       	call   c0028afb <__floatsidf>
c000bad8:	83 c4 10             	add    esp,0x10
c000badb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000badf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bae3:	68 00 00 00 40       	push   0x40000000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baf2:	e8 24 c3 01 00       	call   c0027e1b <__adddf3>
c000baf7:	59                   	pop    ecx
c000baf8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bafc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb00:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb03:	e8 f3 cf 01 00       	call   c0028afb <__floatsidf>
c000bb08:	83 c4 10             	add    esp,0x10
c000bb0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb0f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb13:	52                   	push   edx
c000bb14:	50                   	push   eax
c000bb15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb1d:	e8 5a cc 01 00       	call   c002877c <__divdf3>
c000bb22:	83 c4 10             	add    esp,0x10
c000bb25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb2d:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb30:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb4b:	e8 f9 d1 01 00       	call   c0028d49 <__gtdf2>
c000bb50:	83 c4 10             	add    esp,0x10
c000bb53:	85 c0                	test   eax,eax
c000bb55:	7e 2d                	jle    c000bb84 <sinc_multichan_vari_process+0x14e>
c000bb57:	68 00 00 f0 3f       	push   0x3ff00000
c000bb5c:	6a 00                	push   0x0
c000bb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb66:	e8 fc d1 01 00       	call   c0028d67 <__ltdf2>
c000bb6b:	83 c4 10             	add    esp,0x10
c000bb6e:	85 c0                	test   eax,eax
c000bb70:	79 4d                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb82:	eb 1b                	jmp    c000bb9f <sinc_multichan_vari_process+0x169>
c000bb84:	68 00 00 f0 3f       	push   0x3ff00000
c000bb89:	6a 00                	push   0x0
c000bb8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb93:	e8 cf d1 01 00       	call   c0028d67 <__ltdf2>
c000bb98:	83 c4 10             	add    esp,0x10
c000bb9b:	85 c0                	test   eax,eax
c000bb9d:	79 20                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbaf:	e8 c8 cb 01 00       	call   c002877c <__divdf3>
c000bbb4:	83 c4 10             	add    esp,0x10
c000bbb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbbb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbbf:	50                   	push   eax
c000bbc0:	50                   	push   eax
c000bbc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc9:	e8 52 d3 01 00       	call   c0028f20 <lrint>
c000bbce:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bbd1:	40                   	inc    eax
c000bbd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbd6:	0f af c5             	imul   eax,ebp
c000bbd9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bbdd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bbe0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbe4:	58                   	pop    eax
c000bbe5:	5a                   	pop    edx
c000bbe6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbee:	e8 2d d3 01 00       	call   c0028f20 <lrint>
c000bbf3:	83 ec 0c             	sub    esp,0xc
c000bbf6:	50                   	push   eax
c000bbf7:	e8 ff ce 01 00       	call   c0028afb <__floatsidf>
c000bbfc:	83 c4 10             	add    esp,0x10
c000bbff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc03:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc07:	52                   	push   edx
c000bc08:	50                   	push   eax
c000bc09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc0d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc11:	e8 56 c8 01 00       	call   c002846c <__subdf3>
c000bc16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc1e:	83 c4 20             	add    esp,0x20
c000bc21:	6a 00                	push   0x0
c000bc23:	6a 00                	push   0x0
c000bc25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc2d:	e8 35 d1 01 00       	call   c0028d67 <__ltdf2>
c000bc32:	83 c4 10             	add    esp,0x10
c000bc35:	85 c0                	test   eax,eax
c000bc37:	79 1f                	jns    c000bc58 <sinc_multichan_vari_process+0x222>
c000bc39:	68 00 00 f0 3f       	push   0x3ff00000
c000bc3e:	6a 00                	push   0x0
c000bc40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc48:	e8 ce c1 01 00       	call   c0027e1b <__adddf3>
c000bc4d:	83 c4 10             	add    esp,0x10
c000bc50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc54:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc58:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc5b:	83 ec 10             	sub    esp,0x10
c000bc5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc75:	e8 f2 c7 01 00       	call   c002846c <__subdf3>
c000bc7a:	83 c4 18             	add    esp,0x18
c000bc7d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bc85:	52                   	push   edx
c000bc86:	50                   	push   eax
c000bc87:	e8 94 d2 01 00       	call   c0028f20 <lrint>
c000bc8c:	0f af e8             	imul   ebp,eax
c000bc8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc93:	01 e8                	add    eax,ebp
c000bc95:	99                   	cdq    
c000bc96:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bc99:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bc9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca4:	68 00 00 f0 3f       	push   0x3ff00000
c000bca9:	6a 00                	push   0x0
c000bcab:	e8 cc ca 01 00       	call   c002877c <__divdf3>
c000bcb0:	83 c4 10             	add    esp,0x10
c000bcb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcb7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcbb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcc0:	68 23 42 92 0c       	push   0xc924223
c000bcc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bccd:	e8 49 c1 01 00       	call   c0027e1b <__adddf3>
c000bcd2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bcd6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bcda:	83 c4 20             	add    esp,0x20
c000bcdd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bce5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bced:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bcf0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bcf3:	7d 50                	jge    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bcf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bcf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bcfb:	01 c8                	add    eax,ecx
c000bcfd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd00:	99                   	cdq    
c000bd01:	f7 f9                	idiv   ecx
c000bd03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd07:	7d 0c                	jge    c000bd15 <sinc_multichan_vari_process+0x2df>
c000bd09:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd0c:	85 ed                	test   ebp,ebp
c000bd0e:	79 6b                	jns    c000bd7b <sinc_multichan_vari_process+0x345>
c000bd10:	e9 e6 00 00 00       	jmp    c000bdfb <sinc_multichan_vari_process+0x3c5>
c000bd15:	50                   	push   eax
c000bd16:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd1a:	57                   	push   edi
c000bd1b:	53                   	push   ebx
c000bd1c:	e8 9b fb ff ff       	call   c000b8bc <prepare_data>
c000bd21:	83 c4 10             	add    esp,0x10
c000bd24:	89 c2                	mov    edx,eax
c000bd26:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd29:	85 c0                	test   eax,eax
c000bd2b:	0f 85 bf 03 00 00    	jne    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd31:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd34:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd37:	01 c8                	add    eax,ecx
c000bd39:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3c:	99                   	cdq    
c000bd3d:	f7 f9                	idiv   ecx
c000bd3f:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd43:	7c c4                	jl     c000bd09 <sinc_multichan_vari_process+0x2d3>
c000bd45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd4d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd50:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd5b:	89 06                	mov    DWORD PTR [esi],eax
c000bd5d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd60:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd63:	99                   	cdq    
c000bd64:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd67:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bd6a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd6d:	99                   	cdq    
c000bd6e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd71:	31 d2                	xor    edx,edx
c000bd73:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bd76:	e9 75 03 00 00       	jmp    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd7b:	83 ec 0c             	sub    esp,0xc
c000bd7e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bd81:	e8 75 cd 01 00       	call   c0028afb <__floatsidf>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd8d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd91:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd95:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bda1:	e8 75 c0 01 00       	call   c0027e1b <__adddf3>
c000bda6:	83 c4 10             	add    esp,0x10
c000bda9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdb1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdc1:	e8 55 c0 01 00       	call   c0027e1b <__adddf3>
c000bdc6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bdc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdd1:	e8 25 cd 01 00       	call   c0028afb <__floatsidf>
c000bdd6:	83 c4 10             	add    esp,0x10
c000bdd9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bddd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bde1:	52                   	push   edx
c000bde2:	50                   	push   eax
c000bde3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdeb:	e8 75 cf 01 00       	call   c0028d65 <__gedf2>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	85 c0                	test   eax,eax
c000bdf5:	0f 89 4a ff ff ff    	jns    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bdfb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bdff:	0f 8e ed 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be05:	83 ec 10             	sub    esp,0x10
c000be08:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be0b:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be0e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be11:	ff 36                	push   DWORD PTR [esi]
c000be13:	e8 54 c6 01 00       	call   c002846c <__subdf3>
c000be18:	83 c4 18             	add    esp,0x18
c000be1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be23:	52                   	push   edx
c000be24:	50                   	push   eax
c000be25:	e8 d6 d0 01 00       	call   c0028f00 <fabs>
c000be2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be2e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be3a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be47:	e8 fd ce 01 00       	call   c0028d49 <__gtdf2>
c000be4c:	83 c4 10             	add    esp,0x10
c000be4f:	85 c0                	test   eax,eax
c000be51:	0f 8e 9b 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be57:	8b 06                	mov    eax,DWORD PTR [esi]
c000be59:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be64:	52                   	push   edx
c000be65:	50                   	push   eax
c000be66:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be69:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be6c:	e8 fb c5 01 00       	call   c002846c <__subdf3>
c000be71:	59                   	pop    ecx
c000be72:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be76:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be7a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000be7d:	e8 79 cc 01 00       	call   c0028afb <__floatsidf>
c000be82:	83 c4 10             	add    esp,0x10
c000be85:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be89:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be8d:	52                   	push   edx
c000be8e:	50                   	push   eax
c000be8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be97:	e8 fc c5 01 00       	call   c0028498 <__muldf3>
c000be9c:	5d                   	pop    ebp
c000be9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bea1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bea5:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bea8:	e8 4e cc 01 00       	call   c0028afb <__floatsidf>
c000bead:	83 c4 10             	add    esp,0x10
c000beb0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beb4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb8:	52                   	push   edx
c000beb9:	50                   	push   eax
c000beba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bec2:	e8 b5 c8 01 00       	call   c002877c <__divdf3>
c000bec7:	83 c4 10             	add    esp,0x10
c000beca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bece:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bed2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bed6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bede:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bee2:	e8 34 bf 01 00       	call   c0027e1b <__adddf3>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000beee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bef2:	83 ec 0c             	sub    esp,0xc
c000bef5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bef8:	e8 fe cb 01 00       	call   c0028afb <__floatsidf>
c000befd:	83 c4 10             	add    esp,0x10
c000bf00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf18:	e8 4a ce 01 00       	call   c0028d67 <__ltdf2>
c000bf1d:	83 c4 10             	add    esp,0x10
c000bf20:	85 c0                	test   eax,eax
c000bf22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf26:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf2a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf2e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf32:	78 10                	js     c000bf44 <sinc_multichan_vari_process+0x50e>
c000bf34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf40:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf54:	e8 3f c5 01 00       	call   c0028498 <__muldf3>
c000bf59:	59                   	pop    ecx
c000bf5a:	5d                   	pop    ebp
c000bf5b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf5f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf6b:	e8 25 f9 ff ff       	call   c000b895 <double_to_fp>
c000bf70:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf74:	89 c5                	mov    ebp,eax
c000bf76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	e8 11 c5 01 00       	call   c0028498 <__muldf3>
c000bf87:	83 c4 18             	add    esp,0x18
c000bf8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bf8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bf92:	52                   	push   edx
c000bf93:	50                   	push   eax
c000bf94:	e8 fc f8 ff ff       	call   c000b895 <double_to_fp>
c000bf99:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bf9c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfa0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfa3:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfa6:	50                   	push   eax
c000bfa7:	50                   	push   eax
c000bfa8:	50                   	push   eax
c000bfa9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfac:	e8 4a cb 01 00       	call   c0028afb <__floatsidf>
c000bfb1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfb5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bfb9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfbd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc9:	e8 ae c7 01 00       	call   c002877c <__divdf3>
c000bfce:	83 c4 1c             	add    esp,0x1c
c000bfd1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bfd5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bfd9:	52                   	push   edx
c000bfda:	89 ea                	mov    edx,ebp
c000bfdc:	50                   	push   eax
c000bfdd:	89 d8                	mov    eax,ebx
c000bfdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bfe2:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bfe6:	e8 69 ed ff ff       	call   c000ad54 <calc_output_multi>
c000bfeb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bfee:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bff1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bffd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c001:	e8 76 c7 01 00       	call   c002877c <__divdf3>
c000c006:	83 c4 10             	add    esp,0x10
c000c009:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c00d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c011:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c015:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c019:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c01d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c021:	e8 f5 bd 01 00       	call   c0027e1b <__adddf3>
c000c026:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c02a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c02e:	83 c4 28             	add    esp,0x28
c000c031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c035:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c039:	e8 e2 ce 01 00       	call   c0028f20 <lrint>
c000c03e:	83 ec 0c             	sub    esp,0xc
c000c041:	50                   	push   eax
c000c042:	e8 b4 ca 01 00       	call   c0028afb <__floatsidf>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c04e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c052:	52                   	push   edx
c000c053:	50                   	push   eax
c000c054:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c058:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c05c:	e8 0b c4 01 00       	call   c002846c <__subdf3>
c000c061:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c065:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c069:	83 c4 20             	add    esp,0x20
c000c06c:	6a 00                	push   0x0
c000c06e:	6a 00                	push   0x0
c000c070:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c078:	e8 ea cc 01 00       	call   c0028d67 <__ltdf2>
c000c07d:	83 c4 10             	add    esp,0x10
c000c080:	85 c0                	test   eax,eax
c000c082:	79 20                	jns    c000c0a4 <sinc_multichan_vari_process+0x66e>
c000c084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c08c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c090:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c094:	e8 82 bd 01 00       	call   c0027e1b <__adddf3>
c000c099:	83 c4 10             	add    esp,0x10
c000c09c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0a4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0a7:	83 ec 10             	sub    esp,0x10
c000c0aa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0ae:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0c1:	e8 a6 c3 01 00       	call   c002846c <__subdf3>
c000c0c6:	83 c4 18             	add    esp,0x18
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0d1:	52                   	push   edx
c000c0d2:	50                   	push   eax
c000c0d3:	e8 48 ce 01 00       	call   c0028f20 <lrint>
c000c0d8:	0f af e8             	imul   ebp,eax
c000c0db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c0df:	83 c4 10             	add    esp,0x10
c000c0e2:	01 e8                	add    eax,ebp
c000c0e4:	99                   	cdq    
c000c0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c0eb:	e9 fd fb ff ff       	jmp    c000bced <sinc_multichan_vari_process+0x2b7>
c000c0f0:	83 c4 4c             	add    esp,0x4c
c000c0f3:	89 d0                	mov    eax,edx
c000c0f5:	5b                   	pop    ebx
c000c0f6:	5e                   	pop    esi
c000c0f7:	5f                   	pop    edi
c000c0f8:	5d                   	pop    ebp
c000c0f9:	c3                   	ret    

c000c0fa <sinc_hex_vari_process>:
c000c0fa:	55                   	push   ebp
c000c0fb:	ba 05 00 00 00       	mov    edx,0x5
c000c100:	57                   	push   edi
c000c101:	56                   	push   esi
c000c102:	53                   	push   ebx
c000c103:	83 ec 4c             	sub    esp,0x4c
c000c106:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c10a:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c10e:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c111:	85 db                	test   ebx,ebx
c000c113:	0f 84 9c 06 00 00    	je     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c119:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c11c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c11f:	0f af c7             	imul   eax,edi
c000c122:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c125:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c128:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c12f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c136:	0f af c7             	imul   eax,edi
c000c139:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c13c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c13f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c142:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c146:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c14a:	68 00 00 70 3f       	push   0x3f700000
c000c14f:	6a 00                	push   0x0
c000c151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c159:	e8 09 cc 01 00       	call   c0028d67 <__ltdf2>
c000c15e:	83 c4 10             	add    esp,0x10
c000c161:	ba 16 00 00 00       	mov    edx,0x16
c000c166:	85 c0                	test   eax,eax
c000c168:	0f 88 47 06 00 00    	js     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c16e:	68 00 00 70 40       	push   0x40700000
c000c173:	6a 00                	push   0x0
c000c175:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c17d:	e8 c7 cb 01 00       	call   c0028d49 <__gtdf2>
c000c182:	83 c4 10             	add    esp,0x10
c000c185:	ba 16 00 00 00       	mov    edx,0x16
c000c18a:	85 c0                	test   eax,eax
c000c18c:	0f 8f 23 06 00 00    	jg     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c198:	e8 5e c9 01 00       	call   c0028afb <__floatsidf>
c000c19d:	83 c4 10             	add    esp,0x10
c000c1a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1a8:	68 00 00 00 40       	push   0x40000000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b7:	e8 5f bc 01 00       	call   c0027e1b <__adddf3>
c000c1bc:	59                   	pop    ecx
c000c1bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1c1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1c5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1c8:	e8 2e c9 01 00       	call   c0028afb <__floatsidf>
c000c1cd:	83 c4 10             	add    esp,0x10
c000c1d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1d8:	52                   	push   edx
c000c1d9:	50                   	push   eax
c000c1da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1e2:	e8 95 c5 01 00       	call   c002877c <__divdf3>
c000c1e7:	83 c4 10             	add    esp,0x10
c000c1ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c1f5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c1f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c200:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c204:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c208:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c20c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c210:	e8 34 cb 01 00       	call   c0028d49 <__gtdf2>
c000c215:	83 c4 10             	add    esp,0x10
c000c218:	85 c0                	test   eax,eax
c000c21a:	7e 2d                	jle    c000c249 <sinc_hex_vari_process+0x14f>
c000c21c:	68 00 00 f0 3f       	push   0x3ff00000
c000c221:	6a 00                	push   0x0
c000c223:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c227:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c22b:	e8 37 cb 01 00       	call   c0028d67 <__ltdf2>
c000c230:	83 c4 10             	add    esp,0x10
c000c233:	85 c0                	test   eax,eax
c000c235:	79 4d                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c23f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c243:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c247:	eb 1b                	jmp    c000c264 <sinc_hex_vari_process+0x16a>
c000c249:	68 00 00 f0 3f       	push   0x3ff00000
c000c24e:	6a 00                	push   0x0
c000c250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c258:	e8 0a cb 01 00       	call   c0028d67 <__ltdf2>
c000c25d:	83 c4 10             	add    esp,0x10
c000c260:	85 c0                	test   eax,eax
c000c262:	79 20                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c264:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c268:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c26c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c270:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c274:	e8 03 c5 01 00       	call   c002877c <__divdf3>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c280:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c284:	50                   	push   eax
c000c285:	50                   	push   eax
c000c286:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28e:	e8 8d cc 01 00       	call   c0028f20 <lrint>
c000c293:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c296:	40                   	inc    eax
c000c297:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29b:	0f af c7             	imul   eax,edi
c000c29e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2a9:	58                   	pop    eax
c000c2aa:	5a                   	pop    edx
c000c2ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b3:	e8 68 cc 01 00       	call   c0028f20 <lrint>
c000c2b8:	83 ec 0c             	sub    esp,0xc
c000c2bb:	50                   	push   eax
c000c2bc:	e8 3a c8 01 00       	call   c0028afb <__floatsidf>
c000c2c1:	83 c4 10             	add    esp,0x10
c000c2c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2cc:	52                   	push   edx
c000c2cd:	50                   	push   eax
c000c2ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d6:	e8 91 c1 01 00       	call   c002846c <__subdf3>
c000c2db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2e3:	83 c4 20             	add    esp,0x20
c000c2e6:	6a 00                	push   0x0
c000c2e8:	6a 00                	push   0x0
c000c2ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2f2:	e8 70 ca 01 00       	call   c0028d67 <__ltdf2>
c000c2f7:	83 c4 10             	add    esp,0x10
c000c2fa:	85 c0                	test   eax,eax
c000c2fc:	79 1f                	jns    c000c31d <sinc_hex_vari_process+0x223>
c000c2fe:	68 00 00 f0 3f       	push   0x3ff00000
c000c303:	6a 00                	push   0x0
c000c305:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c309:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30d:	e8 09 bb 01 00       	call   c0027e1b <__adddf3>
c000c312:	83 c4 10             	add    esp,0x10
c000c315:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c319:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c31d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c320:	83 ec 10             	sub    esp,0x10
c000c323:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c327:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c32a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c32e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c332:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c336:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c33a:	e8 2d c1 01 00       	call   c002846c <__subdf3>
c000c33f:	83 c4 18             	add    esp,0x18
c000c342:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c346:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c34a:	52                   	push   edx
c000c34b:	50                   	push   eax
c000c34c:	e8 cf cb 01 00       	call   c0028f20 <lrint>
c000c351:	0f af f8             	imul   edi,eax
c000c354:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c358:	01 f8                	add    eax,edi
c000c35a:	99                   	cdq    
c000c35b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c35e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c361:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c365:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c369:	68 00 00 f0 3f       	push   0x3ff00000
c000c36e:	6a 00                	push   0x0
c000c370:	e8 07 c4 01 00       	call   c002877c <__divdf3>
c000c375:	83 c4 10             	add    esp,0x10
c000c378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c37c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c380:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c385:	68 23 42 92 0c       	push   0xc924223
c000c38a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c38e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c392:	e8 84 ba 01 00       	call   c0027e1b <__adddf3>
c000c397:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c39b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c39f:	83 c4 20             	add    esp,0x20
c000c3a2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3aa:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3b5:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3b8:	7d 50                	jge    c000c40a <sinc_hex_vari_process+0x310>
c000c3ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3c0:	01 c8                	add    eax,ecx
c000c3c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3c5:	99                   	cdq    
c000c3c6:	f7 f9                	idiv   ecx
c000c3c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c3cc:	7d 0c                	jge    c000c3da <sinc_hex_vari_process+0x2e0>
c000c3ce:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c3d1:	85 ff                	test   edi,edi
c000c3d3:	79 6c                	jns    c000c441 <sinc_hex_vari_process+0x347>
c000c3d5:	e9 e7 00 00 00       	jmp    c000c4c1 <sinc_hex_vari_process+0x3c7>
c000c3da:	50                   	push   eax
c000c3db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3df:	56                   	push   esi
c000c3e0:	53                   	push   ebx
c000c3e1:	e8 d6 f4 ff ff       	call   c000b8bc <prepare_data>
c000c3e6:	83 c4 10             	add    esp,0x10
c000c3e9:	89 c2                	mov    edx,eax
c000c3eb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c3ee:	85 c0                	test   eax,eax
c000c3f0:	0f 85 bf 03 00 00    	jne    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c3f6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fc:	01 c8                	add    eax,ecx
c000c3fe:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c401:	99                   	cdq    
c000c402:	f7 f9                	idiv   ecx
c000c404:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c408:	7c c4                	jl     c000c3ce <sinc_hex_vari_process+0x2d4>
c000c40a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c40e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c412:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c415:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c41c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c420:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c423:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c426:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c429:	99                   	cdq    
c000c42a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c42d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c430:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c433:	99                   	cdq    
c000c434:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c437:	31 d2                	xor    edx,edx
c000c439:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c43c:	e9 74 03 00 00       	jmp    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c441:	83 ec 0c             	sub    esp,0xc
c000c444:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c447:	e8 af c6 01 00       	call   c0028afb <__floatsidf>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c453:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c457:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c463:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c467:	e8 af b9 01 00       	call   c0027e1b <__adddf3>
c000c46c:	83 c4 10             	add    esp,0x10
c000c46f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c473:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c477:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c483:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c487:	e8 8f b9 01 00       	call   c0027e1b <__adddf3>
c000c48c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c48f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c493:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c497:	e8 5f c6 01 00       	call   c0028afb <__floatsidf>
c000c49c:	83 c4 10             	add    esp,0x10
c000c49f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4a7:	52                   	push   edx
c000c4a8:	50                   	push   eax
c000c4a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4b1:	e8 af c8 01 00       	call   c0028d65 <__gedf2>
c000c4b6:	83 c4 10             	add    esp,0x10
c000c4b9:	85 c0                	test   eax,eax
c000c4bb:	0f 89 49 ff ff ff    	jns    c000c40a <sinc_hex_vari_process+0x310>
c000c4c1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4c5:	0f 8e ef 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c4cb:	83 ec 10             	sub    esp,0x10
c000c4ce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c4d1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c4d4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c4d7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c4da:	e8 8d bf 01 00       	call   c002846c <__subdf3>
c000c4df:	83 c4 18             	add    esp,0x18
c000c4e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4ea:	52                   	push   edx
c000c4eb:	50                   	push   eax
c000c4ec:	e8 0f ca 01 00       	call   c0028f00 <fabs>
c000c4f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f9:	83 c4 10             	add    esp,0x10
c000c4fc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c501:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c506:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50e:	e8 36 c8 01 00       	call   c0028d49 <__gtdf2>
c000c513:	83 c4 10             	add    esp,0x10
c000c516:	85 c0                	test   eax,eax
c000c518:	0f 8e 9c 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c51e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c521:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c524:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c528:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c52c:	52                   	push   edx
c000c52d:	50                   	push   eax
c000c52e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c531:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c534:	e8 33 bf 01 00       	call   c002846c <__subdf3>
c000c539:	59                   	pop    ecx
c000c53a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c53e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c542:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c545:	e8 b1 c5 01 00       	call   c0028afb <__floatsidf>
c000c54a:	83 c4 10             	add    esp,0x10
c000c54d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c551:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c555:	52                   	push   edx
c000c556:	50                   	push   eax
c000c557:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55f:	e8 34 bf 01 00       	call   c0028498 <__muldf3>
c000c564:	5f                   	pop    edi
c000c565:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c569:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c56d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c570:	e8 86 c5 01 00       	call   c0028afb <__floatsidf>
c000c575:	83 c4 10             	add    esp,0x10
c000c578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c586:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c58a:	e8 ed c1 01 00       	call   c002877c <__divdf3>
c000c58f:	83 c4 10             	add    esp,0x10
c000c592:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c596:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c59a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5aa:	e8 6c b8 01 00       	call   c0027e1b <__adddf3>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5ba:	83 ec 0c             	sub    esp,0xc
c000c5bd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5c0:	e8 36 c5 01 00       	call   c0028afb <__floatsidf>
c000c5c5:	83 c4 10             	add    esp,0x10
c000c5c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5e0:	e8 82 c7 01 00       	call   c0028d67 <__ltdf2>
c000c5e5:	83 c4 10             	add    esp,0x10
c000c5e8:	85 c0                	test   eax,eax
c000c5ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c5ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c5f2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c5f6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c5fa:	78 10                	js     c000c60c <sinc_hex_vari_process+0x512>
c000c5fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c600:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c604:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c608:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c60c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c610:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c614:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c618:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c61c:	e8 77 be 01 00       	call   c0028498 <__muldf3>
c000c621:	59                   	pop    ecx
c000c622:	5f                   	pop    edi
c000c623:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c627:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c62b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c62f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c633:	e8 5d f2 ff ff       	call   c000b895 <double_to_fp>
c000c638:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c63c:	89 c7                	mov    edi,eax
c000c63e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c642:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	e8 49 be 01 00       	call   c0028498 <__muldf3>
c000c64f:	83 c4 18             	add    esp,0x18
c000c652:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c656:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c65a:	52                   	push   edx
c000c65b:	50                   	push   eax
c000c65c:	e8 34 f2 ff ff       	call   c000b895 <double_to_fp>
c000c661:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c664:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c668:	83 c4 0c             	add    esp,0xc
c000c66b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c66e:	8d 04 90             	lea    eax,[eax+edx*4]
c000c671:	50                   	push   eax
c000c672:	50                   	push   eax
c000c673:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c676:	e8 80 c4 01 00       	call   c0028afb <__floatsidf>
c000c67b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c67f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c683:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c687:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c693:	e8 e4 c0 01 00       	call   c002877c <__divdf3>
c000c698:	83 c4 18             	add    esp,0x18
c000c69b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c69f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6a3:	52                   	push   edx
c000c6a4:	89 fa                	mov    edx,edi
c000c6a6:	50                   	push   eax
c000c6a7:	89 d8                	mov    eax,ebx
c000c6a9:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6ad:	e8 50 de ff ff       	call   c000a502 <calc_output_hex>
c000c6b2:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c6:	e8 b1 c0 01 00       	call   c002877c <__divdf3>
c000c6cb:	83 c4 10             	add    esp,0x10
c000c6ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e6:	e8 30 b7 01 00       	call   c0027e1b <__adddf3>
c000c6eb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c6ef:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c6f3:	83 c4 18             	add    esp,0x18
c000c6f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fe:	e8 1d c8 01 00       	call   c0028f20 <lrint>
c000c703:	83 ec 0c             	sub    esp,0xc
c000c706:	50                   	push   eax
c000c707:	e8 ef c3 01 00       	call   c0028afb <__floatsidf>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c713:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c717:	52                   	push   edx
c000c718:	50                   	push   eax
c000c719:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c721:	e8 46 bd 01 00       	call   c002846c <__subdf3>
c000c726:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c72a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c72e:	83 c4 20             	add    esp,0x20
c000c731:	6a 00                	push   0x0
c000c733:	6a 00                	push   0x0
c000c735:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c739:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73d:	e8 25 c6 01 00       	call   c0028d67 <__ltdf2>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	85 c0                	test   eax,eax
c000c747:	79 20                	jns    c000c769 <sinc_hex_vari_process+0x66f>
c000c749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c74d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c755:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c759:	e8 bd b6 01 00       	call   c0027e1b <__adddf3>
c000c75e:	83 c4 10             	add    esp,0x10
c000c761:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c765:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c769:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c76c:	83 ec 10             	sub    esp,0x10
c000c76f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c773:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c782:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c786:	e8 e1 bc 01 00       	call   c002846c <__subdf3>
c000c78b:	83 c4 18             	add    esp,0x18
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c796:	52                   	push   edx
c000c797:	50                   	push   eax
c000c798:	e8 83 c7 01 00       	call   c0028f20 <lrint>
c000c79d:	0f af f8             	imul   edi,eax
c000c7a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7a4:	83 c4 10             	add    esp,0x10
c000c7a7:	01 f8                	add    eax,edi
c000c7a9:	99                   	cdq    
c000c7aa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ad:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7b0:	e9 fd fb ff ff       	jmp    c000c3b2 <sinc_hex_vari_process+0x2b8>
c000c7b5:	83 c4 4c             	add    esp,0x4c
c000c7b8:	89 d0                	mov    eax,edx
c000c7ba:	5b                   	pop    ebx
c000c7bb:	5e                   	pop    esi
c000c7bc:	5f                   	pop    edi
c000c7bd:	5d                   	pop    ebp
c000c7be:	c3                   	ret    

c000c7bf <sinc_quad_vari_process>:
c000c7bf:	55                   	push   ebp
c000c7c0:	ba 05 00 00 00       	mov    edx,0x5
c000c7c5:	57                   	push   edi
c000c7c6:	56                   	push   esi
c000c7c7:	53                   	push   ebx
c000c7c8:	83 ec 4c             	sub    esp,0x4c
c000c7cb:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c7cf:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c7d3:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c7d6:	85 db                	test   ebx,ebx
c000c7d8:	0f 84 9c 06 00 00    	je     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c7de:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c7e1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7e4:	0f af c7             	imul   eax,edi
c000c7e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c7ea:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c7ed:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c7f4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c7fb:	0f af c7             	imul   eax,edi
c000c7fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c801:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c804:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c807:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c80b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c80f:	68 00 00 70 3f       	push   0x3f700000
c000c814:	6a 00                	push   0x0
c000c816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81e:	e8 44 c5 01 00       	call   c0028d67 <__ltdf2>
c000c823:	83 c4 10             	add    esp,0x10
c000c826:	ba 16 00 00 00       	mov    edx,0x16
c000c82b:	85 c0                	test   eax,eax
c000c82d:	0f 88 47 06 00 00    	js     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c833:	68 00 00 70 40       	push   0x40700000
c000c838:	6a 00                	push   0x0
c000c83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c842:	e8 02 c5 01 00       	call   c0028d49 <__gtdf2>
c000c847:	83 c4 10             	add    esp,0x10
c000c84a:	ba 16 00 00 00       	mov    edx,0x16
c000c84f:	85 c0                	test   eax,eax
c000c851:	0f 8f 23 06 00 00    	jg     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c857:	83 ec 0c             	sub    esp,0xc
c000c85a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c85d:	e8 99 c2 01 00       	call   c0028afb <__floatsidf>
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c869:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c86d:	68 00 00 00 40       	push   0x40000000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c87c:	e8 9a b5 01 00       	call   c0027e1b <__adddf3>
c000c881:	59                   	pop    ecx
c000c882:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c886:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c88a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c88d:	e8 69 c2 01 00       	call   c0028afb <__floatsidf>
c000c892:	83 c4 10             	add    esp,0x10
c000c895:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c899:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c89d:	52                   	push   edx
c000c89e:	50                   	push   eax
c000c89f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a7:	e8 d0 be 01 00       	call   c002877c <__divdf3>
c000c8ac:	83 c4 10             	add    esp,0x10
c000c8af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8b3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8ba:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d5:	e8 6f c4 01 00       	call   c0028d49 <__gtdf2>
c000c8da:	83 c4 10             	add    esp,0x10
c000c8dd:	85 c0                	test   eax,eax
c000c8df:	7e 2d                	jle    c000c90e <sinc_quad_vari_process+0x14f>
c000c8e1:	68 00 00 f0 3f       	push   0x3ff00000
c000c8e6:	6a 00                	push   0x0
c000c8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8f0:	e8 72 c4 01 00       	call   c0028d67 <__ltdf2>
c000c8f5:	83 c4 10             	add    esp,0x10
c000c8f8:	85 c0                	test   eax,eax
c000c8fa:	79 4d                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c900:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c908:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c90c:	eb 1b                	jmp    c000c929 <sinc_quad_vari_process+0x16a>
c000c90e:	68 00 00 f0 3f       	push   0x3ff00000
c000c913:	6a 00                	push   0x0
c000c915:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c91d:	e8 45 c4 01 00       	call   c0028d67 <__ltdf2>
c000c922:	83 c4 10             	add    esp,0x10
c000c925:	85 c0                	test   eax,eax
c000c927:	79 20                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c929:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c92d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c931:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c935:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c939:	e8 3e be 01 00       	call   c002877c <__divdf3>
c000c93e:	83 c4 10             	add    esp,0x10
c000c941:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c945:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c949:	50                   	push   eax
c000c94a:	50                   	push   eax
c000c94b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c94f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c953:	e8 c8 c5 01 00       	call   c0028f20 <lrint>
c000c958:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c95b:	40                   	inc    eax
c000c95c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c960:	0f af c7             	imul   eax,edi
c000c963:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c96a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c96e:	58                   	pop    eax
c000c96f:	5a                   	pop    edx
c000c970:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c974:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c978:	e8 a3 c5 01 00       	call   c0028f20 <lrint>
c000c97d:	83 ec 0c             	sub    esp,0xc
c000c980:	50                   	push   eax
c000c981:	e8 75 c1 01 00       	call   c0028afb <__floatsidf>
c000c986:	83 c4 10             	add    esp,0x10
c000c989:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c98d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c991:	52                   	push   edx
c000c992:	50                   	push   eax
c000c993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c99b:	e8 cc ba 01 00       	call   c002846c <__subdf3>
c000c9a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a8:	83 c4 20             	add    esp,0x20
c000c9ab:	6a 00                	push   0x0
c000c9ad:	6a 00                	push   0x0
c000c9af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b7:	e8 ab c3 01 00       	call   c0028d67 <__ltdf2>
c000c9bc:	83 c4 10             	add    esp,0x10
c000c9bf:	85 c0                	test   eax,eax
c000c9c1:	79 1f                	jns    c000c9e2 <sinc_quad_vari_process+0x223>
c000c9c3:	68 00 00 f0 3f       	push   0x3ff00000
c000c9c8:	6a 00                	push   0x0
c000c9ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9d2:	e8 44 b4 01 00       	call   c0027e1b <__adddf3>
c000c9d7:	83 c4 10             	add    esp,0x10
c000c9da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9e2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9e5:	83 ec 10             	sub    esp,0x10
c000c9e8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9ec:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c9ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9ff:	e8 68 ba 01 00       	call   c002846c <__subdf3>
c000ca04:	83 c4 18             	add    esp,0x18
c000ca07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca0f:	52                   	push   edx
c000ca10:	50                   	push   eax
c000ca11:	e8 0a c5 01 00       	call   c0028f20 <lrint>
c000ca16:	0f af f8             	imul   edi,eax
c000ca19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca1d:	01 f8                	add    eax,edi
c000ca1f:	99                   	cdq    
c000ca20:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca23:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2e:	68 00 00 f0 3f       	push   0x3ff00000
c000ca33:	6a 00                	push   0x0
c000ca35:	e8 42 bd 01 00       	call   c002877c <__divdf3>
c000ca3a:	83 c4 10             	add    esp,0x10
c000ca3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca45:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca4a:	68 23 42 92 0c       	push   0xc924223
c000ca4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca57:	e8 bf b3 01 00       	call   c0027e1b <__adddf3>
c000ca5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca64:	83 c4 20             	add    esp,0x20
c000ca67:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ca6f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ca77:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca7a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ca7d:	7d 50                	jge    c000cacf <sinc_quad_vari_process+0x310>
c000ca7f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ca82:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ca85:	01 c8                	add    eax,ecx
c000ca87:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ca8a:	99                   	cdq    
c000ca8b:	f7 f9                	idiv   ecx
c000ca8d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ca91:	7d 0c                	jge    c000ca9f <sinc_quad_vari_process+0x2e0>
c000ca93:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000ca96:	85 ff                	test   edi,edi
c000ca98:	79 6c                	jns    c000cb06 <sinc_quad_vari_process+0x347>
c000ca9a:	e9 e7 00 00 00       	jmp    c000cb86 <sinc_quad_vari_process+0x3c7>
c000ca9f:	50                   	push   eax
c000caa0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000caa4:	56                   	push   esi
c000caa5:	53                   	push   ebx
c000caa6:	e8 11 ee ff ff       	call   c000b8bc <prepare_data>
c000caab:	83 c4 10             	add    esp,0x10
c000caae:	89 c2                	mov    edx,eax
c000cab0:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cab3:	85 c0                	test   eax,eax
c000cab5:	0f 85 bf 03 00 00    	jne    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cabb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabe:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cac1:	01 c8                	add    eax,ecx
c000cac3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac6:	99                   	cdq    
c000cac7:	f7 f9                	idiv   ecx
c000cac9:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacd:	7c c4                	jl     c000ca93 <sinc_quad_vari_process+0x2d4>
c000cacf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cad7:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cada:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cadd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cae1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cae5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cae8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000caeb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000caee:	99                   	cdq    
c000caef:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000caf2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000caf5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000caf8:	99                   	cdq    
c000caf9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cafc:	31 d2                	xor    edx,edx
c000cafe:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb01:	e9 74 03 00 00       	jmp    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cb06:	83 ec 0c             	sub    esp,0xc
c000cb09:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb0c:	e8 ea bf 01 00       	call   c0028afb <__floatsidf>
c000cb11:	83 c4 10             	add    esp,0x10
c000cb14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb18:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb2c:	e8 ea b2 01 00       	call   c0027e1b <__adddf3>
c000cb31:	83 c4 10             	add    esp,0x10
c000cb34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb38:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb4c:	e8 ca b2 01 00       	call   c0027e1b <__adddf3>
c000cb51:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb5c:	e8 9a bf 01 00       	call   c0028afb <__floatsidf>
c000cb61:	83 c4 10             	add    esp,0x10
c000cb64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb68:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb6c:	52                   	push   edx
c000cb6d:	50                   	push   eax
c000cb6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb76:	e8 ea c1 01 00       	call   c0028d65 <__gedf2>
c000cb7b:	83 c4 10             	add    esp,0x10
c000cb7e:	85 c0                	test   eax,eax
c000cb80:	0f 89 49 ff ff ff    	jns    c000cacf <sinc_quad_vari_process+0x310>
c000cb86:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cb8a:	0f 8e ef 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cb90:	83 ec 10             	sub    esp,0x10
c000cb93:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cb96:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cb99:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cb9c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cb9f:	e8 c8 b8 01 00       	call   c002846c <__subdf3>
c000cba4:	83 c4 18             	add    esp,0x18
c000cba7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbaf:	52                   	push   edx
c000cbb0:	50                   	push   eax
c000cbb1:	e8 4a c3 01 00       	call   c0028f00 <fabs>
c000cbb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbbe:	83 c4 10             	add    esp,0x10
c000cbc1:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cbc6:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cbcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbd3:	e8 71 c1 01 00       	call   c0028d49 <__gtdf2>
c000cbd8:	83 c4 10             	add    esp,0x10
c000cbdb:	85 c0                	test   eax,eax
c000cbdd:	0f 8e 9c 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cbe3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbe6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cbe9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cbed:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cbf1:	52                   	push   edx
c000cbf2:	50                   	push   eax
c000cbf3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbf6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbf9:	e8 6e b8 01 00       	call   c002846c <__subdf3>
c000cbfe:	59                   	pop    ecx
c000cbff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc03:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc07:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc0a:	e8 ec be 01 00       	call   c0028afb <__floatsidf>
c000cc0f:	83 c4 10             	add    esp,0x10
c000cc12:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc1a:	52                   	push   edx
c000cc1b:	50                   	push   eax
c000cc1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc24:	e8 6f b8 01 00       	call   c0028498 <__muldf3>
c000cc29:	5f                   	pop    edi
c000cc2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc2e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc35:	e8 c1 be 01 00       	call   c0028afb <__floatsidf>
c000cc3a:	83 c4 10             	add    esp,0x10
c000cc3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4f:	e8 28 bb 01 00       	call   c002877c <__divdf3>
c000cc54:	83 c4 10             	add    esp,0x10
c000cc57:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc5b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6f:	e8 a7 b1 01 00       	call   c0027e1b <__adddf3>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc7b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc7f:	83 ec 0c             	sub    esp,0xc
c000cc82:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cc85:	e8 71 be 01 00       	call   c0028afb <__floatsidf>
c000cc8a:	83 c4 10             	add    esp,0x10
c000cc8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca5:	e8 bd c0 01 00       	call   c0028d67 <__ltdf2>
c000ccaa:	83 c4 10             	add    esp,0x10
c000ccad:	85 c0                	test   eax,eax
c000ccaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccb3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccb7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccbb:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccbf:	78 10                	js     c000ccd1 <sinc_quad_vari_process+0x512>
c000ccc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ccc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cccd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ccd1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccdd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cce1:	e8 b2 b7 01 00       	call   c0028498 <__muldf3>
c000cce6:	59                   	pop    ecx
c000cce7:	5f                   	pop    edi
c000cce8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf8:	e8 98 eb ff ff       	call   c000b895 <double_to_fp>
c000ccfd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd01:	89 c7                	mov    edi,eax
c000cd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	e8 84 b7 01 00       	call   c0028498 <__muldf3>
c000cd14:	83 c4 18             	add    esp,0x18
c000cd17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd1b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd1f:	52                   	push   edx
c000cd20:	50                   	push   eax
c000cd21:	e8 6f eb ff ff       	call   c000b895 <double_to_fp>
c000cd26:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd29:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd2d:	83 c4 0c             	add    esp,0xc
c000cd30:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd33:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd36:	50                   	push   eax
c000cd37:	50                   	push   eax
c000cd38:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3b:	e8 bb bd 01 00       	call   c0028afb <__floatsidf>
c000cd40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd48:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd58:	e8 1f ba 01 00       	call   c002877c <__divdf3>
c000cd5d:	83 c4 18             	add    esp,0x18
c000cd60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd68:	52                   	push   edx
c000cd69:	89 fa                	mov    edx,edi
c000cd6b:	50                   	push   eax
c000cd6c:	89 d8                	mov    eax,ebx
c000cd6e:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cd72:	e8 a5 d1 ff ff       	call   c0009f1c <calc_output_quad>
c000cd77:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cd7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd8b:	e8 ec b9 01 00       	call   c002877c <__divdf3>
c000cd90:	83 c4 10             	add    esp,0x10
c000cd93:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd97:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cda3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cda7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdab:	e8 6b b0 01 00       	call   c0027e1b <__adddf3>
c000cdb0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdb4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdb8:	83 c4 18             	add    esp,0x18
c000cdbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdc3:	e8 58 c1 01 00       	call   c0028f20 <lrint>
c000cdc8:	83 ec 0c             	sub    esp,0xc
c000cdcb:	50                   	push   eax
c000cdcc:	e8 2a bd 01 00       	call   c0028afb <__floatsidf>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cddc:	52                   	push   edx
c000cddd:	50                   	push   eax
c000cdde:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde6:	e8 81 b6 01 00       	call   c002846c <__subdf3>
c000cdeb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdf3:	83 c4 20             	add    esp,0x20
c000cdf6:	6a 00                	push   0x0
c000cdf8:	6a 00                	push   0x0
c000cdfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce02:	e8 60 bf 01 00       	call   c0028d67 <__ltdf2>
c000ce07:	83 c4 10             	add    esp,0x10
c000ce0a:	85 c0                	test   eax,eax
c000ce0c:	79 20                	jns    c000ce2e <sinc_quad_vari_process+0x66f>
c000ce0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1e:	e8 f8 af 01 00       	call   c0027e1b <__adddf3>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce2e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce31:	83 ec 10             	sub    esp,0x10
c000ce34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce38:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce4b:	e8 1c b6 01 00       	call   c002846c <__subdf3>
c000ce50:	83 c4 18             	add    esp,0x18
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce5b:	52                   	push   edx
c000ce5c:	50                   	push   eax
c000ce5d:	e8 be c0 01 00       	call   c0028f20 <lrint>
c000ce62:	0f af f8             	imul   edi,eax
c000ce65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce69:	83 c4 10             	add    esp,0x10
c000ce6c:	01 f8                	add    eax,edi
c000ce6e:	99                   	cdq    
c000ce6f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ce72:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ce75:	e9 fd fb ff ff       	jmp    c000ca77 <sinc_quad_vari_process+0x2b8>
c000ce7a:	83 c4 4c             	add    esp,0x4c
c000ce7d:	89 d0                	mov    eax,edx
c000ce7f:	5b                   	pop    ebx
c000ce80:	5e                   	pop    esi
c000ce81:	5f                   	pop    edi
c000ce82:	5d                   	pop    ebp
c000ce83:	c3                   	ret    

c000ce84 <sinc_stereo_vari_process>:
c000ce84:	55                   	push   ebp
c000ce85:	ba 05 00 00 00       	mov    edx,0x5
c000ce8a:	57                   	push   edi
c000ce8b:	56                   	push   esi
c000ce8c:	53                   	push   ebx
c000ce8d:	83 ec 4c             	sub    esp,0x4c
c000ce90:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ce94:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ce98:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ce9b:	85 db                	test   ebx,ebx
c000ce9d:	0f 84 9c 06 00 00    	je     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cea3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cea6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cea9:	0f af c7             	imul   eax,edi
c000ceac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ceaf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceb2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ceb9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cec0:	0f af c7             	imul   eax,edi
c000cec3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cec6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cec9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cecc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ced0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ced4:	68 00 00 70 3f       	push   0x3f700000
c000ced9:	6a 00                	push   0x0
c000cedb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cee3:	e8 7f be 01 00       	call   c0028d67 <__ltdf2>
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	ba 16 00 00 00       	mov    edx,0x16
c000cef0:	85 c0                	test   eax,eax
c000cef2:	0f 88 47 06 00 00    	js     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cef8:	68 00 00 70 40       	push   0x40700000
c000cefd:	6a 00                	push   0x0
c000ceff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf07:	e8 3d be 01 00       	call   c0028d49 <__gtdf2>
c000cf0c:	83 c4 10             	add    esp,0x10
c000cf0f:	ba 16 00 00 00       	mov    edx,0x16
c000cf14:	85 c0                	test   eax,eax
c000cf16:	0f 8f 23 06 00 00    	jg     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cf1c:	83 ec 0c             	sub    esp,0xc
c000cf1f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf22:	e8 d4 bb 01 00       	call   c0028afb <__floatsidf>
c000cf27:	83 c4 10             	add    esp,0x10
c000cf2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf32:	68 00 00 00 40       	push   0x40000000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf41:	e8 d5 ae 01 00       	call   c0027e1b <__adddf3>
c000cf46:	59                   	pop    ecx
c000cf47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf4b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf4f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf52:	e8 a4 bb 01 00       	call   c0028afb <__floatsidf>
c000cf57:	83 c4 10             	add    esp,0x10
c000cf5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf62:	52                   	push   edx
c000cf63:	50                   	push   eax
c000cf64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf6c:	e8 0b b8 01 00       	call   c002877c <__divdf3>
c000cf71:	83 c4 10             	add    esp,0x10
c000cf74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf78:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf7c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cf7f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cf82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf9a:	e8 aa bd 01 00       	call   c0028d49 <__gtdf2>
c000cf9f:	83 c4 10             	add    esp,0x10
c000cfa2:	85 c0                	test   eax,eax
c000cfa4:	7e 2d                	jle    c000cfd3 <sinc_stereo_vari_process+0x14f>
c000cfa6:	68 00 00 f0 3f       	push   0x3ff00000
c000cfab:	6a 00                	push   0x0
c000cfad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb5:	e8 ad bd 01 00       	call   c0028d67 <__ltdf2>
c000cfba:	83 c4 10             	add    esp,0x10
c000cfbd:	85 c0                	test   eax,eax
c000cfbf:	79 4d                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfcd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfd1:	eb 1b                	jmp    c000cfee <sinc_stereo_vari_process+0x16a>
c000cfd3:	68 00 00 f0 3f       	push   0x3ff00000
c000cfd8:	6a 00                	push   0x0
c000cfda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfe2:	e8 80 bd 01 00       	call   c0028d67 <__ltdf2>
c000cfe7:	83 c4 10             	add    esp,0x10
c000cfea:	85 c0                	test   eax,eax
c000cfec:	79 20                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffe:	e8 79 b7 01 00       	call   c002877c <__divdf3>
c000d003:	83 c4 10             	add    esp,0x10
c000d006:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d00a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d00e:	50                   	push   eax
c000d00f:	50                   	push   eax
c000d010:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d014:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d018:	e8 03 bf 01 00       	call   c0028f20 <lrint>
c000d01d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d020:	40                   	inc    eax
c000d021:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d025:	0f af c7             	imul   eax,edi
c000d028:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d02c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d02f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d033:	58                   	pop    eax
c000d034:	5a                   	pop    edx
c000d035:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d039:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03d:	e8 de be 01 00       	call   c0028f20 <lrint>
c000d042:	83 ec 0c             	sub    esp,0xc
c000d045:	50                   	push   eax
c000d046:	e8 b0 ba 01 00       	call   c0028afb <__floatsidf>
c000d04b:	83 c4 10             	add    esp,0x10
c000d04e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d052:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d056:	52                   	push   edx
c000d057:	50                   	push   eax
c000d058:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d05c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d060:	e8 07 b4 01 00       	call   c002846c <__subdf3>
c000d065:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d069:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d06d:	83 c4 20             	add    esp,0x20
c000d070:	6a 00                	push   0x0
c000d072:	6a 00                	push   0x0
c000d074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d07c:	e8 e6 bc 01 00       	call   c0028d67 <__ltdf2>
c000d081:	83 c4 10             	add    esp,0x10
c000d084:	85 c0                	test   eax,eax
c000d086:	79 1f                	jns    c000d0a7 <sinc_stereo_vari_process+0x223>
c000d088:	68 00 00 f0 3f       	push   0x3ff00000
c000d08d:	6a 00                	push   0x0
c000d08f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d093:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d097:	e8 7f ad 01 00       	call   c0027e1b <__adddf3>
c000d09c:	83 c4 10             	add    esp,0x10
c000d09f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0a7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0aa:	83 ec 10             	sub    esp,0x10
c000d0ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0b1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c4:	e8 a3 b3 01 00       	call   c002846c <__subdf3>
c000d0c9:	83 c4 18             	add    esp,0x18
c000d0cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0d4:	52                   	push   edx
c000d0d5:	50                   	push   eax
c000d0d6:	e8 45 be 01 00       	call   c0028f20 <lrint>
c000d0db:	0f af f8             	imul   edi,eax
c000d0de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0e2:	01 f8                	add    eax,edi
c000d0e4:	99                   	cdq    
c000d0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0f3:	68 00 00 f0 3f       	push   0x3ff00000
c000d0f8:	6a 00                	push   0x0
c000d0fa:	e8 7d b6 01 00       	call   c002877c <__divdf3>
c000d0ff:	83 c4 10             	add    esp,0x10
c000d102:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d106:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d10a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d10f:	68 23 42 92 0c       	push   0xc924223
c000d114:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d118:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d11c:	e8 fa ac 01 00       	call   c0027e1b <__adddf3>
c000d121:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d125:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d129:	83 c4 20             	add    esp,0x20
c000d12c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d134:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d13c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d13f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d142:	7d 50                	jge    c000d194 <sinc_stereo_vari_process+0x310>
c000d144:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d147:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d14a:	01 c8                	add    eax,ecx
c000d14c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d14f:	99                   	cdq    
c000d150:	f7 f9                	idiv   ecx
c000d152:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d156:	7d 0c                	jge    c000d164 <sinc_stereo_vari_process+0x2e0>
c000d158:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d15b:	85 ff                	test   edi,edi
c000d15d:	79 6c                	jns    c000d1cb <sinc_stereo_vari_process+0x347>
c000d15f:	e9 e7 00 00 00       	jmp    c000d24b <sinc_stereo_vari_process+0x3c7>
c000d164:	50                   	push   eax
c000d165:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d169:	56                   	push   esi
c000d16a:	53                   	push   ebx
c000d16b:	e8 4c e7 ff ff       	call   c000b8bc <prepare_data>
c000d170:	83 c4 10             	add    esp,0x10
c000d173:	89 c2                	mov    edx,eax
c000d175:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d178:	85 c0                	test   eax,eax
c000d17a:	0f 85 bf 03 00 00    	jne    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d180:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d183:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d186:	01 c8                	add    eax,ecx
c000d188:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d18b:	99                   	cdq    
c000d18c:	f7 f9                	idiv   ecx
c000d18e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d192:	7c c4                	jl     c000d158 <sinc_stereo_vari_process+0x2d4>
c000d194:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d198:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d19c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d19f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1ad:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1b3:	99                   	cdq    
c000d1b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1bd:	99                   	cdq    
c000d1be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1c1:	31 d2                	xor    edx,edx
c000d1c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d1c6:	e9 74 03 00 00       	jmp    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d1cb:	83 ec 0c             	sub    esp,0xc
c000d1ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d1d1:	e8 25 b9 01 00       	call   c0028afb <__floatsidf>
c000d1d6:	83 c4 10             	add    esp,0x10
c000d1d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1dd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1f1:	e8 25 ac 01 00       	call   c0027e1b <__adddf3>
c000d1f6:	83 c4 10             	add    esp,0x10
c000d1f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d201:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d205:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d209:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d20d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d211:	e8 05 ac 01 00       	call   c0027e1b <__adddf3>
c000d216:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d219:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d21d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d221:	e8 d5 b8 01 00       	call   c0028afb <__floatsidf>
c000d226:	83 c4 10             	add    esp,0x10
c000d229:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d22d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d231:	52                   	push   edx
c000d232:	50                   	push   eax
c000d233:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d237:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d23b:	e8 25 bb 01 00       	call   c0028d65 <__gedf2>
c000d240:	83 c4 10             	add    esp,0x10
c000d243:	85 c0                	test   eax,eax
c000d245:	0f 89 49 ff ff ff    	jns    c000d194 <sinc_stereo_vari_process+0x310>
c000d24b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d24f:	0f 8e ef 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d255:	83 ec 10             	sub    esp,0x10
c000d258:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d25b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d25e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d261:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d264:	e8 03 b2 01 00       	call   c002846c <__subdf3>
c000d269:	83 c4 18             	add    esp,0x18
c000d26c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d270:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d274:	52                   	push   edx
c000d275:	50                   	push   eax
c000d276:	e8 85 bc 01 00       	call   c0028f00 <fabs>
c000d27b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d27f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d283:	83 c4 10             	add    esp,0x10
c000d286:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d28b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d290:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d294:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d298:	e8 ac ba 01 00       	call   c0028d49 <__gtdf2>
c000d29d:	83 c4 10             	add    esp,0x10
c000d2a0:	85 c0                	test   eax,eax
c000d2a2:	0f 8e 9c 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d2a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ab:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2b2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2b6:	52                   	push   edx
c000d2b7:	50                   	push   eax
c000d2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2be:	e8 a9 b1 01 00       	call   c002846c <__subdf3>
c000d2c3:	59                   	pop    ecx
c000d2c4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2c8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2cc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d2cf:	e8 27 b8 01 00       	call   c0028afb <__floatsidf>
c000d2d4:	83 c4 10             	add    esp,0x10
c000d2d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2df:	52                   	push   edx
c000d2e0:	50                   	push   eax
c000d2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e9:	e8 aa b1 01 00       	call   c0028498 <__muldf3>
c000d2ee:	5f                   	pop    edi
c000d2ef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2f3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2f7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d2fa:	e8 fc b7 01 00       	call   c0028afb <__floatsidf>
c000d2ff:	83 c4 10             	add    esp,0x10
c000d302:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d306:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d310:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d314:	e8 63 b4 01 00       	call   c002877c <__divdf3>
c000d319:	83 c4 10             	add    esp,0x10
c000d31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d32c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d330:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d334:	e8 e2 aa 01 00       	call   c0027e1b <__adddf3>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d344:	83 ec 0c             	sub    esp,0xc
c000d347:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d34a:	e8 ac b7 01 00       	call   c0028afb <__floatsidf>
c000d34f:	83 c4 10             	add    esp,0x10
c000d352:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d356:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d35a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d36a:	e8 f8 b9 01 00       	call   c0028d67 <__ltdf2>
c000d36f:	83 c4 10             	add    esp,0x10
c000d372:	85 c0                	test   eax,eax
c000d374:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d378:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d37c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d380:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d384:	78 10                	js     c000d396 <sinc_stereo_vari_process+0x512>
c000d386:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d38a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d38e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d392:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a6:	e8 ed b0 01 00       	call   c0028498 <__muldf3>
c000d3ab:	59                   	pop    ecx
c000d3ac:	5f                   	pop    edi
c000d3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3bd:	e8 d3 e4 ff ff       	call   c000b895 <double_to_fp>
c000d3c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3c6:	89 c7                	mov    edi,eax
c000d3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	e8 bf b0 01 00       	call   c0028498 <__muldf3>
c000d3d9:	83 c4 18             	add    esp,0x18
c000d3dc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d3e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d3e4:	52                   	push   edx
c000d3e5:	50                   	push   eax
c000d3e6:	e8 aa e4 ff ff       	call   c000b895 <double_to_fp>
c000d3eb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d3ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d3f2:	83 c4 0c             	add    esp,0xc
c000d3f5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d3f8:	8d 04 90             	lea    eax,[eax+edx*4]
c000d3fb:	50                   	push   eax
c000d3fc:	50                   	push   eax
c000d3fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d400:	e8 f6 b6 01 00       	call   c0028afb <__floatsidf>
c000d405:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d409:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d40d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d411:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d419:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d41d:	e8 5a b3 01 00       	call   c002877c <__divdf3>
c000d422:	83 c4 18             	add    esp,0x18
c000d425:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d42d:	52                   	push   edx
c000d42e:	89 fa                	mov    edx,edi
c000d430:	50                   	push   eax
c000d431:	89 d8                	mov    eax,ebx
c000d433:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d437:	e8 02 c7 ff ff       	call   c0009b3e <calc_output_stereo>
c000d43c:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d440:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d444:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d448:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d44c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d450:	e8 27 b3 01 00       	call   c002877c <__divdf3>
c000d455:	83 c4 10             	add    esp,0x10
c000d458:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d45c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d468:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d46c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d470:	e8 a6 a9 01 00       	call   c0027e1b <__adddf3>
c000d475:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d479:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d47d:	83 c4 18             	add    esp,0x18
c000d480:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d484:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d488:	e8 93 ba 01 00       	call   c0028f20 <lrint>
c000d48d:	83 ec 0c             	sub    esp,0xc
c000d490:	50                   	push   eax
c000d491:	e8 65 b6 01 00       	call   c0028afb <__floatsidf>
c000d496:	83 c4 10             	add    esp,0x10
c000d499:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d49d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4a1:	52                   	push   edx
c000d4a2:	50                   	push   eax
c000d4a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ab:	e8 bc af 01 00       	call   c002846c <__subdf3>
c000d4b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4b8:	83 c4 20             	add    esp,0x20
c000d4bb:	6a 00                	push   0x0
c000d4bd:	6a 00                	push   0x0
c000d4bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c7:	e8 9b b8 01 00       	call   c0028d67 <__ltdf2>
c000d4cc:	83 c4 10             	add    esp,0x10
c000d4cf:	85 c0                	test   eax,eax
c000d4d1:	79 20                	jns    c000d4f3 <sinc_stereo_vari_process+0x66f>
c000d4d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4e3:	e8 33 a9 01 00       	call   c0027e1b <__adddf3>
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4f3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d4f6:	83 ec 10             	sub    esp,0x10
c000d4f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d4fd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d508:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d50c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d510:	e8 57 af 01 00       	call   c002846c <__subdf3>
c000d515:	83 c4 18             	add    esp,0x18
c000d518:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d520:	52                   	push   edx
c000d521:	50                   	push   eax
c000d522:	e8 f9 b9 01 00       	call   c0028f20 <lrint>
c000d527:	0f af f8             	imul   edi,eax
c000d52a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d52e:	83 c4 10             	add    esp,0x10
c000d531:	01 f8                	add    eax,edi
c000d533:	99                   	cdq    
c000d534:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d537:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d53a:	e9 fd fb ff ff       	jmp    c000d13c <sinc_stereo_vari_process+0x2b8>
c000d53f:	83 c4 4c             	add    esp,0x4c
c000d542:	89 d0                	mov    eax,edx
c000d544:	5b                   	pop    ebx
c000d545:	5e                   	pop    esi
c000d546:	5f                   	pop    edi
c000d547:	5d                   	pop    ebp
c000d548:	c3                   	ret    

c000d549 <sinc_mono_vari_process>:
c000d549:	55                   	push   ebp
c000d54a:	ba 05 00 00 00       	mov    edx,0x5
c000d54f:	57                   	push   edi
c000d550:	56                   	push   esi
c000d551:	53                   	push   ebx
c000d552:	83 ec 4c             	sub    esp,0x4c
c000d555:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d559:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d55d:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d560:	85 db                	test   ebx,ebx
c000d562:	0f 84 c1 06 00 00    	je     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d56b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d56e:	0f af c7             	imul   eax,edi
c000d571:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d574:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d577:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d57e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d585:	0f af c7             	imul   eax,edi
c000d588:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d58b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d58f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d592:	8b 00                	mov    eax,DWORD PTR [eax]
c000d594:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d598:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d59c:	68 00 00 70 3f       	push   0x3f700000
c000d5a1:	6a 00                	push   0x0
c000d5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ab:	e8 b7 b7 01 00       	call   c0028d67 <__ltdf2>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	ba 16 00 00 00       	mov    edx,0x16
c000d5b8:	85 c0                	test   eax,eax
c000d5ba:	0f 88 69 06 00 00    	js     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5c0:	68 00 00 70 40       	push   0x40700000
c000d5c5:	6a 00                	push   0x0
c000d5c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cf:	e8 75 b7 01 00       	call   c0028d49 <__gtdf2>
c000d5d4:	83 c4 10             	add    esp,0x10
c000d5d7:	ba 16 00 00 00       	mov    edx,0x16
c000d5dc:	85 c0                	test   eax,eax
c000d5de:	0f 8f 45 06 00 00    	jg     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5e4:	83 ec 0c             	sub    esp,0xc
c000d5e7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d5ea:	e8 0c b5 01 00       	call   c0028afb <__floatsidf>
c000d5ef:	83 c4 10             	add    esp,0x10
c000d5f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d5fa:	68 00 00 00 40       	push   0x40000000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d605:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d609:	e8 0d a8 01 00       	call   c0027e1b <__adddf3>
c000d60e:	59                   	pop    ecx
c000d60f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d613:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d617:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d61a:	e8 dc b4 01 00       	call   c0028afb <__floatsidf>
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d626:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d62a:	52                   	push   edx
c000d62b:	50                   	push   eax
c000d62c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d630:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d634:	e8 43 b1 01 00       	call   c002877c <__divdf3>
c000d639:	83 c4 10             	add    esp,0x10
c000d63c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d640:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d644:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d647:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d64a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d64e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d652:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d662:	e8 e2 b6 01 00       	call   c0028d49 <__gtdf2>
c000d667:	83 c4 10             	add    esp,0x10
c000d66a:	85 c0                	test   eax,eax
c000d66c:	7e 2d                	jle    c000d69b <sinc_mono_vari_process+0x152>
c000d66e:	68 00 00 f0 3f       	push   0x3ff00000
c000d673:	6a 00                	push   0x0
c000d675:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d679:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d67d:	e8 e5 b6 01 00       	call   c0028d67 <__ltdf2>
c000d682:	83 c4 10             	add    esp,0x10
c000d685:	85 c0                	test   eax,eax
c000d687:	79 4d                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d68d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d691:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d695:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d699:	eb 1b                	jmp    c000d6b6 <sinc_mono_vari_process+0x16d>
c000d69b:	68 00 00 f0 3f       	push   0x3ff00000
c000d6a0:	6a 00                	push   0x0
c000d6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6aa:	e8 b8 b6 01 00       	call   c0028d67 <__ltdf2>
c000d6af:	83 c4 10             	add    esp,0x10
c000d6b2:	85 c0                	test   eax,eax
c000d6b4:	79 20                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d6b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6ba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c6:	e8 b1 b0 01 00       	call   c002877c <__divdf3>
c000d6cb:	83 c4 10             	add    esp,0x10
c000d6ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6d6:	50                   	push   eax
c000d6d7:	50                   	push   eax
c000d6d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6e0:	e8 3b b8 01 00       	call   c0028f20 <lrint>
c000d6e5:	40                   	inc    eax
c000d6e6:	0f af c7             	imul   eax,edi
c000d6e9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d6ed:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d6f1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d6f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d6f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ff:	58                   	pop    eax
c000d700:	5a                   	pop    edx
c000d701:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d705:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d709:	e8 12 b8 01 00       	call   c0028f20 <lrint>
c000d70e:	83 ec 0c             	sub    esp,0xc
c000d711:	50                   	push   eax
c000d712:	e8 e4 b3 01 00       	call   c0028afb <__floatsidf>
c000d717:	83 c4 10             	add    esp,0x10
c000d71a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d71e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d722:	52                   	push   edx
c000d723:	50                   	push   eax
c000d724:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d728:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d72c:	e8 3b ad 01 00       	call   c002846c <__subdf3>
c000d731:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d735:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d739:	83 c4 20             	add    esp,0x20
c000d73c:	6a 00                	push   0x0
c000d73e:	6a 00                	push   0x0
c000d740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d748:	e8 1a b6 01 00       	call   c0028d67 <__ltdf2>
c000d74d:	83 c4 10             	add    esp,0x10
c000d750:	85 c0                	test   eax,eax
c000d752:	79 1f                	jns    c000d773 <sinc_mono_vari_process+0x22a>
c000d754:	68 00 00 f0 3f       	push   0x3ff00000
c000d759:	6a 00                	push   0x0
c000d75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d75f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d763:	e8 b3 a6 01 00       	call   c0027e1b <__adddf3>
c000d768:	83 c4 10             	add    esp,0x10
c000d76b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d76f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d773:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d776:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d779:	83 ec 10             	sub    esp,0x10
c000d77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d784:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d788:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78c:	e8 db ac 01 00       	call   c002846c <__subdf3>
c000d791:	83 c4 18             	add    esp,0x18
c000d794:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d798:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d79c:	52                   	push   edx
c000d79d:	50                   	push   eax
c000d79e:	e8 7d b7 01 00       	call   c0028f20 <lrint>
c000d7a3:	0f af f8             	imul   edi,eax
c000d7a6:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7a9:	31 ff                	xor    edi,edi
c000d7ab:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7b0:	99                   	cdq    
c000d7b1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7b4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bf:	55                   	push   ebp
c000d7c0:	57                   	push   edi
c000d7c1:	e8 b6 af 01 00       	call   c002877c <__divdf3>
c000d7c6:	83 c4 10             	add    esp,0x10
c000d7c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7d1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d7d6:	68 23 42 92 0c       	push   0xc924223
c000d7db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e3:	e8 33 a6 01 00       	call   c0027e1b <__adddf3>
c000d7e8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d7ec:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d7f0:	83 c4 20             	add    esp,0x20
c000d7f3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d7f7:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d7fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d7fe:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d801:	7d 54                	jge    c000d857 <sinc_mono_vari_process+0x30e>
c000d803:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d806:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d809:	01 c8                	add    eax,ecx
c000d80b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d80e:	99                   	cdq    
c000d80f:	f7 f9                	idiv   ecx
c000d811:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d815:	7d 0c                	jge    c000d823 <sinc_mono_vari_process+0x2da>
c000d817:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d81a:	85 ff                	test   edi,edi
c000d81c:	79 73                	jns    c000d891 <sinc_mono_vari_process+0x348>
c000d81e:	e9 ee 00 00 00       	jmp    c000d911 <sinc_mono_vari_process+0x3c8>
c000d823:	50                   	push   eax
c000d824:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d828:	56                   	push   esi
c000d829:	53                   	push   ebx
c000d82a:	e8 8d e0 ff ff       	call   c000b8bc <prepare_data>
c000d82f:	89 c2                	mov    edx,eax
c000d831:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d835:	83 c4 10             	add    esp,0x10
c000d838:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d83b:	85 d2                	test   edx,edx
c000d83d:	0f 85 e6 03 00 00    	jne    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d843:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d846:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d849:	01 c8                	add    eax,ecx
c000d84b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d84e:	99                   	cdq    
c000d84f:	f7 f9                	idiv   ecx
c000d851:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d855:	7c c0                	jl     c000d817 <sinc_mono_vari_process+0x2ce>
c000d857:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d85b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d85f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d863:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d866:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d871:	89 01                	mov    DWORD PTR [ecx],eax
c000d873:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d876:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d879:	99                   	cdq    
c000d87a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d87d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d880:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d883:	99                   	cdq    
c000d884:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d887:	31 d2                	xor    edx,edx
c000d889:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d88c:	e9 98 03 00 00       	jmp    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d891:	83 ec 0c             	sub    esp,0xc
c000d894:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d897:	e8 5f b2 01 00       	call   c0028afb <__floatsidf>
c000d89c:	83 c4 10             	add    esp,0x10
c000d89f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b7:	e8 5f a5 01 00       	call   c0027e1b <__adddf3>
c000d8bc:	83 c4 10             	add    esp,0x10
c000d8bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d7:	e8 3f a5 01 00       	call   c0027e1b <__adddf3>
c000d8dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8e7:	e8 0f b2 01 00       	call   c0028afb <__floatsidf>
c000d8ec:	83 c4 10             	add    esp,0x10
c000d8ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8f7:	52                   	push   edx
c000d8f8:	50                   	push   eax
c000d8f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d901:	e8 43 b4 01 00       	call   c0028d49 <__gtdf2>
c000d906:	83 c4 10             	add    esp,0x10
c000d909:	85 c0                	test   eax,eax
c000d90b:	0f 8f 46 ff ff ff    	jg     c000d857 <sinc_mono_vari_process+0x30e>
c000d911:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d915:	0f 8e f5 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d91b:	83 ec 10             	sub    esp,0x10
c000d91e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d921:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d924:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d928:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d92b:	ff 30                	push   DWORD PTR [eax]
c000d92d:	e8 3a ab 01 00       	call   c002846c <__subdf3>
c000d932:	83 c4 18             	add    esp,0x18
c000d935:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d939:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d93d:	52                   	push   edx
c000d93e:	50                   	push   eax
c000d93f:	e8 bc b5 01 00       	call   c0028f00 <fabs>
c000d944:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d948:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d94c:	83 c4 10             	add    esp,0x10
c000d94f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d954:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d959:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d961:	e8 e3 b3 01 00       	call   c0028d49 <__gtdf2>
c000d966:	83 c4 10             	add    esp,0x10
c000d969:	85 c0                	test   eax,eax
c000d96b:	0f 8e 9f 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d971:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d975:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d978:	8b 00                	mov    eax,DWORD PTR [eax]
c000d97a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d97e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d982:	52                   	push   edx
c000d983:	50                   	push   eax
c000d984:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d987:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d98a:	e8 dd aa 01 00       	call   c002846c <__subdf3>
c000d98f:	5f                   	pop    edi
c000d990:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d994:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d998:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d99b:	e8 5b b1 01 00       	call   c0028afb <__floatsidf>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9ab:	52                   	push   edx
c000d9ac:	50                   	push   eax
c000d9ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b5:	e8 de aa 01 00       	call   c0028498 <__muldf3>
c000d9ba:	5d                   	pop    ebp
c000d9bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9c3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9c6:	e8 30 b1 01 00       	call   c0028afb <__floatsidf>
c000d9cb:	83 c4 10             	add    esp,0x10
c000d9ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9d6:	52                   	push   edx
c000d9d7:	50                   	push   eax
c000d9d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9e0:	e8 97 ad 01 00       	call   c002877c <__divdf3>
c000d9e5:	83 c4 10             	add    esp,0x10
c000d9e8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da00:	e8 16 a4 01 00       	call   c0027e1b <__adddf3>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da0c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da10:	83 ec 0c             	sub    esp,0xc
c000da13:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da16:	e8 e0 b0 01 00       	call   c0028afb <__floatsidf>
c000da1b:	83 c4 10             	add    esp,0x10
c000da1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da36:	e8 2c b3 01 00       	call   c0028d67 <__ltdf2>
c000da3b:	83 c4 10             	add    esp,0x10
c000da3e:	85 c0                	test   eax,eax
c000da40:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da44:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da48:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da4c:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da50:	78 10                	js     c000da62 <sinc_mono_vari_process+0x519>
c000da52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da5a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da5e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da72:	e8 21 aa 01 00       	call   c0028498 <__muldf3>
c000da77:	59                   	pop    ecx
c000da78:	5f                   	pop    edi
c000da79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da89:	e8 07 de ff ff       	call   c000b895 <double_to_fp>
c000da8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da92:	89 c7                	mov    edi,eax
c000da94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000da9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000daa0:	e8 f3 a9 01 00       	call   c0028498 <__muldf3>
c000daa5:	83 c4 18             	add    esp,0x18
c000daa8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dab0:	52                   	push   edx
c000dab1:	50                   	push   eax
c000dab2:	e8 de dd ff ff       	call   c000b895 <double_to_fp>
c000dab7:	83 ec 0c             	sub    esp,0xc
c000daba:	89 c5                	mov    ebp,eax
c000dabc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dabf:	e8 37 b0 01 00       	call   c0028afb <__floatsidf>
c000dac4:	83 c4 10             	add    esp,0x10
c000dac7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dacb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dacf:	52                   	push   edx
c000dad0:	50                   	push   eax
c000dad1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad9:	e8 9e ac 01 00       	call   c002877c <__divdf3>
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	89 e9                	mov    ecx,ebp
c000dae3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dae7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000daeb:	89 d8                	mov    eax,ebx
c000daed:	89 fa                	mov    edx,edi
c000daef:	e8 ee bd ff ff       	call   c00098e2 <calc_output_single>
c000daf4:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000daf7:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000dafa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dafe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db02:	52                   	push   edx
c000db03:	50                   	push   eax
c000db04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db0c:	e8 87 a9 01 00       	call   c0028498 <__muldf3>
c000db11:	59                   	pop    ecx
c000db12:	59                   	pop    ecx
c000db13:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db17:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db1b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db23:	e8 43 b2 01 00       	call   c0028d6b <__truncdfsf2>
c000db28:	83 c4 10             	add    esp,0x10
c000db2b:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db2e:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db31:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db41:	e8 36 ac 01 00       	call   c002877c <__divdf3>
c000db46:	83 c4 10             	add    esp,0x10
c000db49:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db4d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db61:	e8 b5 a2 01 00       	call   c0027e1b <__adddf3>
c000db66:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000db6a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000db6e:	83 c4 18             	add    esp,0x18
c000db71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db79:	e8 a2 b3 01 00       	call   c0028f20 <lrint>
c000db7e:	83 ec 0c             	sub    esp,0xc
c000db81:	50                   	push   eax
c000db82:	e8 74 af 01 00       	call   c0028afb <__floatsidf>
c000db87:	83 c4 10             	add    esp,0x10
c000db8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db92:	52                   	push   edx
c000db93:	50                   	push   eax
c000db94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9c:	e8 cb a8 01 00       	call   c002846c <__subdf3>
c000dba1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dba5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dba9:	83 c4 20             	add    esp,0x20
c000dbac:	6a 00                	push   0x0
c000dbae:	6a 00                	push   0x0
c000dbb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb8:	e8 aa b1 01 00       	call   c0028d67 <__ltdf2>
c000dbbd:	83 c4 10             	add    esp,0x10
c000dbc0:	85 c0                	test   eax,eax
c000dbc2:	79 20                	jns    c000dbe4 <sinc_mono_vari_process+0x69b>
c000dbc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd4:	e8 42 a2 01 00       	call   c0027e1b <__adddf3>
c000dbd9:	83 c4 10             	add    esp,0x10
c000dbdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbe0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbe4:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dbe7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dbea:	83 ec 10             	sub    esp,0x10
c000dbed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbf9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbfd:	e8 6a a8 01 00       	call   c002846c <__subdf3>
c000dc02:	83 c4 18             	add    esp,0x18
c000dc05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc09:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc0d:	52                   	push   edx
c000dc0e:	50                   	push   eax
c000dc0f:	e8 0c b3 01 00       	call   c0028f20 <lrint>
c000dc14:	83 c4 10             	add    esp,0x10
c000dc17:	0f af f8             	imul   edi,eax
c000dc1a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc1d:	99                   	cdq    
c000dc1e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc21:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc24:	e9 d2 fb ff ff       	jmp    c000d7fb <sinc_mono_vari_process+0x2b2>
c000dc29:	83 c4 4c             	add    esp,0x4c
c000dc2c:	89 d0                	mov    eax,edx
c000dc2e:	5b                   	pop    ebx
c000dc2f:	5e                   	pop    esi
c000dc30:	5f                   	pop    edi
c000dc31:	5d                   	pop    ebp
c000dc32:	c3                   	ret    

c000dc33 <sinc_get_name>:
c000dc33:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc37:	31 c0                	xor    eax,eax
c000dc39:	83 fa 02             	cmp    edx,0x2
c000dc3c:	77 07                	ja     c000dc45 <sinc_get_name+0x12>
c000dc3e:	8b 04 95 04 a8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd57fc]
c000dc45:	c3                   	ret    

c000dc46 <sinc_get_description>:
c000dc46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc4a:	31 c0                	xor    eax,eax
c000dc4c:	83 fa 02             	cmp    edx,0x2
c000dc4f:	77 07                	ja     c000dc58 <sinc_get_description+0x12>
c000dc51:	8b 04 95 f8 a7 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5808]
c000dc58:	c3                   	ret    

c000dc59 <sinc_set_converter>:
c000dc59:	53                   	push   ebx
c000dc5a:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc60:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dc67:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dc6a:	85 c0                	test   eax,eax
c000dc6c:	74 13                	je     c000dc81 <sinc_set_converter+0x28>
c000dc6e:	83 ec 0c             	sub    esp,0xc
c000dc71:	50                   	push   eax
c000dc72:	e8 25 1c 00 00       	call   c000f89c <free>
c000dc77:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dc7e:	83 c4 10             	add    esp,0x10
c000dc81:	50                   	push   eax
c000dc82:	68 44 08 00 00       	push   0x844
c000dc87:	6a 00                	push   0x0
c000dc89:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dc8d:	50                   	push   eax
c000dc8e:	e8 bd 2a ff ff       	call   c0000750 <memset>
c000dc93:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dc96:	83 c4 10             	add    esp,0x10
c000dc99:	b8 0b 00 00 00       	mov    eax,0xb
c000dc9e:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dca4:	7f 6e                	jg     c000dd14 <sinc_set_converter+0xbb>
c000dca6:	83 fa 01             	cmp    edx,0x1
c000dca9:	75 10                	jne    c000dcbb <sinc_set_converter+0x62>
c000dcab:	c7 43 24 49 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d549
c000dcb2:	c7 43 20 49 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d549
c000dcb9:	eb 4d                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcbb:	83 fa 02             	cmp    edx,0x2
c000dcbe:	75 10                	jne    c000dcd0 <sinc_set_converter+0x77>
c000dcc0:	c7 43 24 84 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ce84
c000dcc7:	c7 43 20 84 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ce84
c000dcce:	eb 38                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcd0:	83 fa 04             	cmp    edx,0x4
c000dcd3:	75 10                	jne    c000dce5 <sinc_set_converter+0x8c>
c000dcd5:	c7 43 24 bf c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7bf
c000dcdc:	c7 43 20 bf c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7bf
c000dce3:	eb 23                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dce5:	83 fa 06             	cmp    edx,0x6
c000dce8:	75 10                	jne    c000dcfa <sinc_set_converter+0xa1>
c000dcea:	c7 43 24 fa c0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c0fa
c000dcf1:	c7 43 20 fa c0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c0fa
c000dcf8:	eb 0e                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcfa:	c7 43 24 36 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba36
c000dd01:	c7 43 20 36 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba36
c000dd08:	c7 43 28 e9 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ace9
c000dd0f:	b8 0a 00 00 00       	mov    eax,0xa
c000dd14:	81 c4 58 08 00 00    	add    esp,0x858
c000dd1a:	5b                   	pop    ebx
c000dd1b:	c3                   	ret    

c000dd1c <zoh_vari_process>:
c000dd1c:	55                   	push   ebp
c000dd1d:	31 d2                	xor    edx,edx
c000dd1f:	57                   	push   edi
c000dd20:	56                   	push   esi
c000dd21:	53                   	push   ebx
c000dd22:	83 ec 3c             	sub    esp,0x3c
c000dd25:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd29:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd2d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd31:	0f 8e 80 06 00 00    	jle    c000e3b7 <zoh_vari_process+0x69b>
c000dd37:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd3a:	ba 05 00 00 00       	mov    edx,0x5
c000dd3f:	85 db                	test   ebx,ebx
c000dd41:	0f 84 70 06 00 00    	je     c000e3b7 <zoh_vari_process+0x69b>
c000dd47:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd4a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd4e:	74 19                	je     c000dd69 <zoh_vari_process+0x4d>
c000dd50:	31 d2                	xor    edx,edx
c000dd52:	39 c2                	cmp    edx,eax
c000dd54:	7d 0c                	jge    c000dd62 <zoh_vari_process+0x46>
c000dd56:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd58:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd5b:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd5f:	42                   	inc    edx
c000dd60:	eb f0                	jmp    c000dd52 <zoh_vari_process+0x36>
c000dd62:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dd69:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dd6c:	0f af d0             	imul   edx,eax
c000dd6f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dd72:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dd76:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dd7d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dd80:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dd87:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dd8a:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd94:	68 00 00 70 3f       	push   0x3f700000
c000dd99:	6a 00                	push   0x0
c000dd9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda3:	e8 bf af 01 00       	call   c0028d67 <__ltdf2>
c000dda8:	83 c4 10             	add    esp,0x10
c000ddab:	ba 16 00 00 00       	mov    edx,0x16
c000ddb0:	85 c0                	test   eax,eax
c000ddb2:	0f 88 ff 05 00 00    	js     c000e3b7 <zoh_vari_process+0x69b>
c000ddb8:	68 00 00 70 40       	push   0x40700000
c000ddbd:	6a 00                	push   0x0
c000ddbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc7:	e8 7d af 01 00       	call   c0028d49 <__gtdf2>
c000ddcc:	83 c4 10             	add    esp,0x10
c000ddcf:	ba 16 00 00 00       	mov    edx,0x16
c000ddd4:	85 c0                	test   eax,eax
c000ddd6:	0f 8f db 05 00 00    	jg     c000e3b7 <zoh_vari_process+0x69b>
c000dddc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dddf:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dde2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dde6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddea:	68 00 00 f0 3f       	push   0x3ff00000
c000ddef:	6a 00                	push   0x0
c000ddf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf9:	e8 69 af 01 00       	call   c0028d67 <__ltdf2>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	85 c0                	test   eax,eax
c000de03:	0f 89 da 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000de09:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de0c:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de0f:	0f 8d ce 01 00 00    	jge    c000dfe3 <zoh_vari_process+0x2c7>
c000de15:	83 ec 0c             	sub    esp,0xc
c000de18:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de1b:	e8 db ac 01 00       	call   c0028afb <__floatsidf>
c000de20:	83 c4 10             	add    esp,0x10
c000de23:	89 04 24             	mov    DWORD PTR [esp],eax
c000de26:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de3a:	e8 59 a6 01 00       	call   c0028498 <__muldf3>
c000de3f:	59                   	pop    ecx
c000de40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de44:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de48:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de4b:	e8 ab ac 01 00       	call   c0028afb <__floatsidf>
c000de50:	83 c4 10             	add    esp,0x10
c000de53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de57:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de5b:	52                   	push   edx
c000de5c:	50                   	push   eax
c000de5d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de61:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de65:	e8 b1 9f 01 00       	call   c0027e1b <__adddf3>
c000de6a:	59                   	pop    ecx
c000de6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de6f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de73:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de76:	e8 80 ac 01 00       	call   c0028afb <__floatsidf>
c000de7b:	83 c4 10             	add    esp,0x10
c000de7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de86:	52                   	push   edx
c000de87:	50                   	push   eax
c000de88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de90:	e8 d0 ae 01 00       	call   c0028d65 <__gedf2>
c000de95:	83 c4 10             	add    esp,0x10
c000de98:	85 c0                	test   eax,eax
c000de9a:	0f 89 43 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000dea0:	85 ed                	test   ebp,ebp
c000dea2:	0f 8e ec 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000dea8:	83 ec 10             	sub    esp,0x10
c000deab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000deae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deb1:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deb4:	ff 37                	push   DWORD PTR [edi]
c000deb6:	e8 b1 a5 01 00       	call   c002846c <__subdf3>
c000debb:	83 c4 18             	add    esp,0x18
c000debe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dec6:	52                   	push   edx
c000dec7:	50                   	push   eax
c000dec8:	e8 33 b0 01 00       	call   c0028f00 <fabs>
c000decd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ded1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ded5:	83 c4 10             	add    esp,0x10
c000ded8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dedd:	68 23 42 92 0c       	push   0xc924223
c000dee2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deea:	e8 5a ae 01 00       	call   c0028d49 <__gtdf2>
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	85 c0                	test   eax,eax
c000def4:	0f 8e 9a 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000defa:	8b 07                	mov    eax,DWORD PTR [edi]
c000defc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000deff:	89 04 24             	mov    DWORD PTR [esp],eax
c000df02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df06:	52                   	push   edx
c000df07:	50                   	push   eax
c000df08:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df0b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df0e:	e8 59 a5 01 00       	call   c002846c <__subdf3>
c000df13:	59                   	pop    ecx
c000df14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df18:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df1c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df1f:	e8 d7 ab 01 00       	call   c0028afb <__floatsidf>
c000df24:	83 c4 10             	add    esp,0x10
c000df27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df2b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df2f:	52                   	push   edx
c000df30:	50                   	push   eax
c000df31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df39:	e8 5a a5 01 00       	call   c0028498 <__muldf3>
c000df3e:	5d                   	pop    ebp
c000df3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df47:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df4a:	e8 ac ab 01 00       	call   c0028afb <__floatsidf>
c000df4f:	83 c4 10             	add    esp,0x10
c000df52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df56:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df5a:	52                   	push   edx
c000df5b:	50                   	push   eax
c000df5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df64:	e8 13 a8 01 00       	call   c002877c <__divdf3>
c000df69:	83 c4 10             	add    esp,0x10
c000df6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df78:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df84:	e8 92 9e 01 00       	call   c0027e1b <__adddf3>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df94:	31 c0                	xor    eax,eax
c000df96:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000df99:	7e 13                	jle    c000dfae <zoh_vari_process+0x292>
c000df9b:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000df9f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfa2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfa5:	40                   	inc    eax
c000dfa6:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfa9:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfac:	eb e8                	jmp    c000df96 <zoh_vari_process+0x27a>
c000dfae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb6:	68 00 00 f0 3f       	push   0x3ff00000
c000dfbb:	6a 00                	push   0x0
c000dfbd:	e8 ba a7 01 00       	call   c002877c <__divdf3>
c000dfc2:	83 c4 10             	add    esp,0x10
c000dfc5:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfc8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dfcc:	52                   	push   edx
c000dfcd:	50                   	push   eax
c000dfce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd6:	e8 40 9e 01 00       	call   c0027e1b <__adddf3>
c000dfdb:	83 c4 10             	add    esp,0x10
c000dfde:	e9 ff fd ff ff       	jmp    c000dde2 <zoh_vari_process+0xc6>
c000dfe3:	55                   	push   ebp
c000dfe4:	55                   	push   ebp
c000dfe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfed:	e8 2e af 01 00       	call   c0028f20 <lrint>
c000dff2:	83 ec 0c             	sub    esp,0xc
c000dff5:	50                   	push   eax
c000dff6:	e8 00 ab 01 00       	call   c0028afb <__floatsidf>
c000dffb:	83 c4 10             	add    esp,0x10
c000dffe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e002:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e00c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e010:	e8 57 a4 01 00       	call   c002846c <__subdf3>
c000e015:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e019:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e01d:	83 c4 20             	add    esp,0x20
c000e020:	6a 00                	push   0x0
c000e022:	6a 00                	push   0x0
c000e024:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e02c:	e8 36 ad 01 00       	call   c0028d67 <__ltdf2>
c000e031:	83 c4 10             	add    esp,0x10
c000e034:	85 c0                	test   eax,eax
c000e036:	79 1e                	jns    c000e056 <zoh_vari_process+0x33a>
c000e038:	68 00 00 f0 3f       	push   0x3ff00000
c000e03d:	6a 00                	push   0x0
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e047:	e8 cf 9d 01 00       	call   c0027e1b <__adddf3>
c000e04c:	83 c4 10             	add    esp,0x10
c000e04f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e052:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e056:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e059:	83 ec 10             	sub    esp,0x10
c000e05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e064:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e068:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e06c:	e8 fb a3 01 00       	call   c002846c <__subdf3>
c000e071:	83 c4 18             	add    esp,0x18
c000e074:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e078:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e07c:	52                   	push   edx
c000e07d:	50                   	push   eax
c000e07e:	e8 9d ae 01 00       	call   c0028f20 <lrint>
c000e083:	83 c4 10             	add    esp,0x10
c000e086:	0f af e8             	imul   ebp,eax
c000e089:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e08c:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e08f:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e093:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e096:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e099:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e09d:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0a0:	0f 8d 7a 02 00 00    	jge    c000e320 <zoh_vari_process+0x604>
c000e0a6:	83 ec 0c             	sub    esp,0xc
c000e0a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ac:	e8 4a aa 01 00       	call   c0028afb <__floatsidf>
c000e0b1:	83 c4 10             	add    esp,0x10
c000e0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0bc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0cc:	e8 c7 a3 01 00       	call   c0028498 <__muldf3>
c000e0d1:	59                   	pop    ecx
c000e0d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0d6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0de:	e8 18 aa 01 00       	call   c0028afb <__floatsidf>
c000e0e3:	83 c4 10             	add    esp,0x10
c000e0e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0ee:	52                   	push   edx
c000e0ef:	50                   	push   eax
c000e0f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f8:	e8 1e 9d 01 00       	call   c0027e1b <__adddf3>
c000e0fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e100:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e104:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e108:	e8 ee a9 01 00       	call   c0028afb <__floatsidf>
c000e10d:	83 c4 10             	add    esp,0x10
c000e110:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e114:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e118:	52                   	push   edx
c000e119:	50                   	push   eax
c000e11a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e11e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e122:	e8 42 ac 01 00       	call   c0028d69 <__ledf2>
c000e127:	83 c4 10             	add    esp,0x10
c000e12a:	85 c0                	test   eax,eax
c000e12c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e130:	0f 8f ea 01 00 00    	jg     c000e320 <zoh_vari_process+0x604>
c000e136:	85 c9                	test   ecx,ecx
c000e138:	0f 8e ed 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e13e:	83 ec 10             	sub    esp,0x10
c000e141:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e144:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e147:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e14a:	ff 37                	push   DWORD PTR [edi]
c000e14c:	e8 1b a3 01 00       	call   c002846c <__subdf3>
c000e151:	83 c4 18             	add    esp,0x18
c000e154:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e158:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e15c:	52                   	push   edx
c000e15d:	50                   	push   eax
c000e15e:	e8 9d ad 01 00       	call   c0028f00 <fabs>
c000e163:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e167:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e173:	68 23 42 92 0c       	push   0xc924223
c000e178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e17c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e180:	e8 c4 ab 01 00       	call   c0028d49 <__gtdf2>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	85 c0                	test   eax,eax
c000e18a:	0f 8e 9b 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e190:	8b 07                	mov    eax,DWORD PTR [edi]
c000e192:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e19d:	52                   	push   edx
c000e19e:	50                   	push   eax
c000e19f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1a2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1a5:	e8 c2 a2 01 00       	call   c002846c <__subdf3>
c000e1aa:	5d                   	pop    ebp
c000e1ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1af:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1b3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1b6:	e8 40 a9 01 00       	call   c0028afb <__floatsidf>
c000e1bb:	83 c4 10             	add    esp,0x10
c000e1be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1c6:	52                   	push   edx
c000e1c7:	50                   	push   eax
c000e1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1d0:	e8 c3 a2 01 00       	call   c0028498 <__muldf3>
c000e1d5:	59                   	pop    ecx
c000e1d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1da:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1de:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e1e1:	e8 15 a9 01 00       	call   c0028afb <__floatsidf>
c000e1e6:	83 c4 10             	add    esp,0x10
c000e1e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1f1:	52                   	push   edx
c000e1f2:	50                   	push   eax
c000e1f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1fb:	e8 7c a5 01 00       	call   c002877c <__divdf3>
c000e200:	83 c4 10             	add    esp,0x10
c000e203:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e207:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e20b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e20f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21b:	e8 fb 9b 01 00       	call   c0027e1b <__adddf3>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e227:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e22b:	31 d2                	xor    edx,edx
c000e22d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e230:	39 d0                	cmp    eax,edx
c000e232:	7e 1d                	jle    c000e251 <zoh_vari_process+0x535>
c000e234:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e237:	29 c1                	sub    ecx,eax
c000e239:	89 c8                	mov    eax,ecx
c000e23b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e23d:	01 d0                	add    eax,edx
c000e23f:	42                   	inc    edx
c000e240:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e243:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e246:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e249:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e24c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e24f:	eb dc                	jmp    c000e22d <zoh_vari_process+0x511>
c000e251:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e255:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e259:	68 00 00 f0 3f       	push   0x3ff00000
c000e25e:	6a 00                	push   0x0
c000e260:	e8 17 a5 01 00       	call   c002877c <__divdf3>
c000e265:	83 c4 10             	add    esp,0x10
c000e268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e26c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e270:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e274:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e27c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e280:	e8 96 9b 01 00       	call   c0027e1b <__adddf3>
c000e285:	5d                   	pop    ebp
c000e286:	59                   	pop    ecx
c000e287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e28b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e28f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e293:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e297:	e8 84 ac 01 00       	call   c0028f20 <lrint>
c000e29c:	83 ec 0c             	sub    esp,0xc
c000e29f:	50                   	push   eax
c000e2a0:	e8 56 a8 01 00       	call   c0028afb <__floatsidf>
c000e2a5:	83 c4 10             	add    esp,0x10
c000e2a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b0:	52                   	push   edx
c000e2b1:	50                   	push   eax
c000e2b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2ba:	e8 ad a1 01 00       	call   c002846c <__subdf3>
c000e2bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2c7:	83 c4 20             	add    esp,0x20
c000e2ca:	6a 00                	push   0x0
c000e2cc:	6a 00                	push   0x0
c000e2ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d6:	e8 8c aa 01 00       	call   c0028d67 <__ltdf2>
c000e2db:	83 c4 10             	add    esp,0x10
c000e2de:	85 c0                	test   eax,eax
c000e2e0:	79 1e                	jns    c000e300 <zoh_vari_process+0x5e4>
c000e2e2:	68 00 00 f0 3f       	push   0x3ff00000
c000e2e7:	6a 00                	push   0x0
c000e2e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2f1:	e8 25 9b 01 00       	call   c0027e1b <__adddf3>
c000e2f6:	83 c4 10             	add    esp,0x10
c000e2f9:	89 04 24             	mov    DWORD PTR [esp],eax
c000e2fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e300:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e303:	83 ec 10             	sub    esp,0x10
c000e306:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e312:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e316:	e8 51 a1 01 00       	call   c002846c <__subdf3>
c000e31b:	e9 51 fd ff ff       	jmp    c000e071 <zoh_vari_process+0x355>
c000e320:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e324:	7d 3a                	jge    c000e360 <zoh_vari_process+0x644>
c000e326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32a:	83 ec 0c             	sub    esp,0xc
c000e32d:	29 e8                	sub    eax,ebp
c000e32f:	99                   	cdq    
c000e330:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e333:	50                   	push   eax
c000e334:	e8 c2 a7 01 00       	call   c0028afb <__floatsidf>
c000e339:	83 c4 10             	add    esp,0x10
c000e33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e344:	52                   	push   edx
c000e345:	50                   	push   eax
c000e346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34e:	e8 c8 9a 01 00       	call   c0027e1b <__adddf3>
c000e353:	83 c4 10             	add    esp,0x10
c000e356:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e359:	89 04 24             	mov    DWORD PTR [esp],eax
c000e35c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e360:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e363:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e367:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e36a:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e36d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e370:	85 c0                	test   eax,eax
c000e372:	7f 25                	jg     c000e399 <zoh_vari_process+0x67d>
c000e374:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e378:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e37c:	89 07                	mov    DWORD PTR [edi],eax
c000e37e:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e381:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e384:	99                   	cdq    
c000e385:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e388:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e38b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e38e:	99                   	cdq    
c000e38f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e392:	31 d2                	xor    edx,edx
c000e394:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e397:	eb 1e                	jmp    c000e3b7 <zoh_vari_process+0x69b>
c000e399:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e39c:	31 d2                	xor    edx,edx
c000e39e:	29 c8                	sub    eax,ecx
c000e3a0:	c1 e0 02             	shl    eax,0x2
c000e3a3:	39 d1                	cmp    ecx,edx
c000e3a5:	7e cd                	jle    c000e374 <zoh_vari_process+0x658>
c000e3a7:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3a9:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3ad:	83 c0 04             	add    eax,0x4
c000e3b0:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3b4:	42                   	inc    edx
c000e3b5:	eb ec                	jmp    c000e3a3 <zoh_vari_process+0x687>
c000e3b7:	83 c4 3c             	add    esp,0x3c
c000e3ba:	89 d0                	mov    eax,edx
c000e3bc:	5b                   	pop    ebx
c000e3bd:	5e                   	pop    esi
c000e3be:	5f                   	pop    edi
c000e3bf:	5d                   	pop    ebp
c000e3c0:	c3                   	ret    

c000e3c1 <zoh_reset>:
c000e3c1:	83 ec 0c             	sub    esp,0xc
c000e3c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3c8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e3cb:	85 c0                	test   eax,eax
c000e3cd:	74 20                	je     c000e3ef <zoh_reset+0x2e>
c000e3cf:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e3d2:	83 c0 1c             	add    eax,0x1c
c000e3d5:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e3d8:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e3df:	c1 e2 02             	shl    edx,0x2
c000e3e2:	51                   	push   ecx
c000e3e3:	52                   	push   edx
c000e3e4:	6a 00                	push   0x0
c000e3e6:	50                   	push   eax
c000e3e7:	e8 64 23 ff ff       	call   c0000750 <memset>
c000e3ec:	83 c4 10             	add    esp,0x10
c000e3ef:	83 c4 0c             	add    esp,0xc
c000e3f2:	c3                   	ret    

c000e3f3 <zoh_get_name>:
c000e3f3:	31 c0                	xor    eax,eax
c000e3f5:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e3fa:	75 05                	jne    c000e401 <zoh_get_name+0xe>
c000e3fc:	b8 1e a9 02 c0       	mov    eax,0xc002a91e
c000e401:	c3                   	ret    

c000e402 <zoh_get_description>:
c000e402:	31 c0                	xor    eax,eax
c000e404:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e409:	75 05                	jne    c000e410 <zoh_get_description+0xe>
c000e40b:	b8 2f a9 02 c0       	mov    eax,0xc002a92f
c000e410:	c3                   	ret    

c000e411 <zoh_set_converter>:
c000e411:	53                   	push   ebx
c000e412:	b8 0a 00 00 00       	mov    eax,0xa
c000e417:	83 ec 08             	sub    esp,0x8
c000e41a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e41e:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e423:	75 6e                	jne    c000e493 <zoh_set_converter+0x82>
c000e425:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e428:	85 c0                	test   eax,eax
c000e42a:	74 13                	je     c000e43f <zoh_set_converter+0x2e>
c000e42c:	83 ec 0c             	sub    esp,0xc
c000e42f:	50                   	push   eax
c000e430:	e8 67 14 00 00       	call   c000f89c <free>
c000e435:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e43c:	83 c4 10             	add    esp,0x10
c000e43f:	50                   	push   eax
c000e440:	50                   	push   eax
c000e441:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e444:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e44b:	50                   	push   eax
c000e44c:	6a 01                	push   0x1
c000e44e:	e8 69 14 00 00       	call   c000f8bc <calloc>
c000e453:	83 c4 10             	add    esp,0x10
c000e456:	89 c2                	mov    edx,eax
c000e458:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e45b:	85 d2                	test   edx,edx
c000e45d:	b8 01 00 00 00       	mov    eax,0x1
c000e462:	74 2f                	je     c000e493 <zoh_set_converter+0x82>
c000e464:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e467:	83 ec 0c             	sub    esp,0xc
c000e46a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e46d:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e473:	c7 43 24 1c dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd1c
c000e47a:	c7 43 20 1c dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd1c
c000e481:	c7 43 28 c1 e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3c1
c000e488:	53                   	push   ebx
c000e489:	e8 33 ff ff ff       	call   c000e3c1 <zoh_reset>
c000e48e:	83 c4 10             	add    esp,0x10
c000e491:	31 c0                	xor    eax,eax
c000e493:	83 c4 08             	add    esp,0x8
c000e496:	5b                   	pop    ebx
c000e497:	c3                   	ret    

c000e498 <CPU::current()>:
c000e498:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c000e49d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4a3:	c3                   	ret    

c000e4a4 <operator new(unsigned long)>:
c000e4a4:	e9 e3 13 00 00       	jmp    c000f88c <malloc>

c000e4a9 <operator delete(void*)>:
c000e4a9:	e9 fe 13 00 00       	jmp    c000f8ac <rfree>

c000e4ae <disableIRQs()>:
c000e4ae:	fa                   	cli    
c000e4af:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c000e4b5:	c3                   	ret    

c000e4b6 <enableIRQs()>:
c000e4b6:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c000e4bb:	48                   	dec    eax
c000e4bc:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c000e4c1:	75 01                	jne    c000e4c4 <enableIRQs()+0xe>
c000e4c3:	fb                   	sti    
c000e4c4:	c3                   	ret    

c000e4c5 <lockScheduler()>:
c000e4c5:	fa                   	cli    
c000e4c6:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c000e4cc:	c3                   	ret    

c000e4cd <unlockScheduler()>:
c000e4cd:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c000e4d2:	48                   	dec    eax
c000e4d3:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c000e4d8:	75 01                	jne    c000e4db <unlockScheduler()+0xe>
c000e4da:	fb                   	sti    
c000e4db:	c3                   	ret    

c000e4dc <lockStuff()>:
c000e4dc:	fa                   	cli    
c000e4dd:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c000e4e3:	ff 05 e4 25 03 c0    	inc    DWORD PTR ds:0xc00325e4
c000e4e9:	c3                   	ret    

c000e4ea <unlockStuff()>:
c000e4ea:	83 ec 0c             	sub    esp,0xc
c000e4ed:	a1 e4 25 03 c0       	mov    eax,ds:0xc00325e4
c000e4f2:	48                   	dec    eax
c000e4f3:	a3 e4 25 03 c0       	mov    ds:0xc00325e4,eax
c000e4f8:	75 18                	jne    c000e512 <unlockStuff()+0x28>
c000e4fa:	83 3d e0 25 03 c0 00 	cmp    DWORD PTR ds:0xc00325e0,0x0
c000e501:	74 0f                	je     c000e512 <unlockStuff()+0x28>
c000e503:	c7 05 e0 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00325e0,0x0
c000e50d:	e8 42 fc 00 00       	call   c001e154 <schedule()>
c000e512:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c000e517:	48                   	dec    eax
c000e518:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c000e51d:	75 01                	jne    c000e520 <unlockStuff()+0x36>
c000e51f:	fb                   	sti    
c000e520:	83 c4 0c             	add    esp,0xc
c000e523:	c3                   	ret    

c000e524 <Virt::getAKernelVAS()>:
c000e524:	a1 30 f2 02 c0       	mov    eax,ds:0xc002f230
c000e529:	c3                   	ret    

c000e52a <__not_memcpy>:
c000e52a:	57                   	push   edi
c000e52b:	56                   	push   esi
c000e52c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e530:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e534:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e538:	89 c7                	mov    edi,eax
c000e53a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e53c:	5e                   	pop    esi
c000e53d:	5f                   	pop    edi
c000e53e:	c3                   	ret    

c000e53f <Krnl::resolveCompatibilitySymbol(char*)>:
c000e53f:	83 ec 0c             	sub    esp,0xc
c000e542:	83 ec 08             	sub    esp,0x8
c000e545:	68 66 a9 02 c0       	push   0xc002a966
c000e54a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e54e:	e8 45 23 ff ff       	call   c0000898 <strcmp>
c000e553:	83 c4 10             	add    esp,0x10
c000e556:	85 c0                	test   eax,eax
c000e558:	0f 94 c0             	sete   al
c000e55b:	84 c0                	test   al,al
c000e55d:	74 0a                	je     c000e569 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e55f:	b8 c8 f0 02 c0       	mov    eax,0xc002f0c8
c000e564:	e9 e3 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e569:	83 ec 08             	sub    esp,0x8
c000e56c:	68 6f a9 02 c0       	push   0xc002a96f
c000e571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e575:	e8 1e 23 ff ff       	call   c0000898 <strcmp>
c000e57a:	83 c4 10             	add    esp,0x10
c000e57d:	85 c0                	test   eax,eax
c000e57f:	0f 94 c0             	sete   al
c000e582:	84 c0                	test   al,al
c000e584:	74 0a                	je     c000e590 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e586:	b8 94 72 02 c0       	mov    eax,0xc0027294
c000e58b:	e9 bc 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e590:	83 ec 08             	sub    esp,0x8
c000e593:	68 79 a9 02 c0       	push   0xc002a979
c000e598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59c:	e8 f7 22 ff ff       	call   c0000898 <strcmp>
c000e5a1:	83 c4 10             	add    esp,0x10
c000e5a4:	85 c0                	test   eax,eax
c000e5a6:	0f 94 c0             	sete   al
c000e5a9:	84 c0                	test   al,al
c000e5ab:	74 0a                	je     c000e5b7 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e5ad:	b8 c8 6f 02 c0       	mov    eax,0xc0026fc8
c000e5b2:	e9 95 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b7:	83 ec 08             	sub    esp,0x8
c000e5ba:	68 82 a9 02 c0       	push   0xc002a982
c000e5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c3:	e8 d0 22 ff ff       	call   c0000898 <strcmp>
c000e5c8:	83 c4 10             	add    esp,0x10
c000e5cb:	85 c0                	test   eax,eax
c000e5cd:	0f 94 c0             	sete   al
c000e5d0:	84 c0                	test   al,al
c000e5d2:	74 07                	je     c000e5db <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e5d4:	b8 94 73 02 c0       	mov    eax,0xc0027394
c000e5d9:	eb 71                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5db:	83 ec 08             	sub    esp,0x8
c000e5de:	68 8c a9 02 c0       	push   0xc002a98c
c000e5e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e7:	e8 ac 22 ff ff       	call   c0000898 <strcmp>
c000e5ec:	83 c4 10             	add    esp,0x10
c000e5ef:	85 c0                	test   eax,eax
c000e5f1:	0f 94 c0             	sete   al
c000e5f4:	84 c0                	test   al,al
c000e5f6:	74 07                	je     c000e5ff <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5f8:	b8 14 71 02 c0       	mov    eax,0xc0027114
c000e5fd:	eb 4d                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5ff:	83 ec 08             	sub    esp,0x8
c000e602:	68 95 a9 02 c0       	push   0xc002a995
c000e607:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e60b:	e8 88 22 ff ff       	call   c0000898 <strcmp>
c000e610:	83 c4 10             	add    esp,0x10
c000e613:	85 c0                	test   eax,eax
c000e615:	0f 94 c0             	sete   al
c000e618:	84 c0                	test   al,al
c000e61a:	74 07                	je     c000e623 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e61c:	b8 cc f0 02 c0       	mov    eax,0xc002f0cc
c000e621:	eb 29                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e623:	83 ec 08             	sub    esp,0x8
c000e626:	68 a2 a9 02 c0       	push   0xc002a9a2
c000e62b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e62f:	e8 64 22 ff ff       	call   c0000898 <strcmp>
c000e634:	83 c4 10             	add    esp,0x10
c000e637:	85 c0                	test   eax,eax
c000e639:	0f 94 c0             	sete   al
c000e63c:	84 c0                	test   al,al
c000e63e:	74 07                	je     c000e647 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e640:	b8 cd f0 02 c0       	mov    eax,0xc002f0cd
c000e645:	eb 05                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e647:	b8 00 00 00 00       	mov    eax,0x0
c000e64c:	83 c4 0c             	add    esp,0xc
c000e64f:	c3                   	ret    

c000e650 <Computer::close(int, int, void*)>:
c000e650:	57                   	push   edi
c000e651:	56                   	push   esi
c000e652:	53                   	push   ebx
c000e653:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e657:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e65b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e65f:	83 ec 0c             	sub    esp,0xc
c000e662:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e668:	e8 c1 58 00 00       	call   c0013f2e <Device::closeAll()>
c000e66d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e673:	83 c4 10             	add    esp,0x10
c000e676:	8b 10                	mov    edx,DWORD PTR [eax]
c000e678:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e67c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e684:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e688:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e68c:	5b                   	pop    ebx
c000e68d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e690:	5e                   	pop    esi
c000e691:	5f                   	pop    edi
c000e692:	ff e0                	jmp    eax

c000e694 <Krnl::firstTask()>:
c000e694:	53                   	push   ebx
c000e695:	83 ec 14             	sub    esp,0x14
c000e698:	fb                   	sti    
c000e699:	68 3f 07 00 00       	push   0x73f
c000e69e:	e8 e9 11 00 00       	call   c000f88c <malloc>
c000e6a3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6aa:	89 c3                	mov    ebx,eax
c000e6ac:	ff 35 10 26 03 c0    	push   DWORD PTR ds:0xc0032610
c000e6b2:	68 af a9 02 c0       	push   0xc002a9af
c000e6b7:	6a 01                	push   0x1
c000e6b9:	50                   	push   eax
c000e6ba:	e8 59 f6 00 00       	call   c001dd18 <Process::Process(bool, char const*, Process*, char**)>
c000e6bf:	83 c4 20             	add    esp,0x20
c000e6c2:	68 ff 00 00 00       	push   0xff
c000e6c7:	6a 00                	push   0x0
c000e6c9:	68 1f f2 00 c0       	push   0xc000f21f
c000e6ce:	53                   	push   ebx
c000e6cf:	e8 3c f8 00 00       	call   c001df10 <Process::createThread(void (*)(void*), void*, int)>
c000e6d4:	6a 7a                	push   0x7a
c000e6d6:	6a 00                	push   0x0
c000e6d8:	68 8e e9 01 c0       	push   0xc001e98e
c000e6dd:	ff 35 10 26 03 c0    	push   DWORD PTR ds:0xc0032610
c000e6e3:	e8 28 f8 00 00       	call   c001df10 <Process::createThread(void (*)(void*), void*, int)>
c000e6e8:	83 c4 20             	add    esp,0x20
c000e6eb:	a3 c8 25 03 c0       	mov    ds:0xc00325c8,eax
c000e6f0:	c6 05 cd f0 02 c0 01 	mov    BYTE PTR ds:0xc002f0cd,0x1
c000e6f7:	e8 c9 06 01 00       	call   c001edc5 <Vm::initialise8086()>
c000e6fc:	e8 f5 45 00 00       	call   c0012cf6 <Fs::initVFS()>
c000e701:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c000e706:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e70c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e70e:	6a 00                	push   0x0
c000e710:	6a 00                	push   0x0
c000e712:	6a 00                	push   0x0
c000e714:	50                   	push   eax
c000e715:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e718:	e8 88 de 00 00       	call   c001c5a5 <Sys::loadSyscalls()>
c000e71d:	e8 46 bb 00 00       	call   c001a268 <Krnl::loadSystemEnv()>
c000e722:	83 c4 0c             	add    esp,0xc
c000e725:	6a 3a                	push   0x3a
c000e727:	68 bc a9 02 c0       	push   0xc002a9bc
c000e72c:	68 c5 a9 02 c0       	push   0xc002a9c5
c000e731:	e8 21 ca 00 00       	call   c001b157 <Reg::readIntWithDefault(char*, char*, int)>
c000e736:	89 04 24             	mov    DWORD PTR [esp],eax
c000e739:	e8 a8 50 00 00       	call   c00137e6 <User::loadClockSettings(int)>
c000e73e:	58                   	pop    eax
c000e73f:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c000e744:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e74a:	e8 9f 57 00 00       	call   c0013eee <Device::loadDriversForAll()>
c000e74f:	e8 60 b6 00 00       	call   c0019db4 <Krnl::startCPUs()>
c000e754:	5a                   	pop    edx
c000e755:	8b 1d c8 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f0c8
c000e75b:	59                   	pop    ecx
c000e75c:	6a 01                	push   0x1
c000e75e:	68 cd a9 02 c0       	push   0xc002a9cd
c000e763:	e8 0d f0 00 00       	call   c001d775 <Thr::loadDLL(char const*, bool)>
c000e768:	5a                   	pop    edx
c000e769:	59                   	pop    ecx
c000e76a:	53                   	push   ebx
c000e76b:	50                   	push   eax
c000e76c:	e8 2f f2 00 00       	call   c001d9a0 <Thr::executeDLL(unsigned long, void*)>
c000e771:	83 c4 10             	add    esp,0x10
c000e774:	83 ec 0c             	sub    esp,0xc
c000e777:	6a 02                	push   0x2
c000e779:	e8 d5 fb 00 00       	call   c001e353 <blockTask(TaskState)>
c000e77e:	83 c4 10             	add    esp,0x10
c000e781:	eb f1                	jmp    c000e774 <Krnl::firstTask()+0xe0>
c000e783:	90                   	nop

c000e784 <Computer::Computer()>:
c000e784:	83 ec 0c             	sub    esp,0xc
c000e787:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e78b:	83 ec 08             	sub    esp,0x8
c000e78e:	68 e9 a9 02 c0       	push   0xc002a9e9
c000e793:	50                   	push   eax
c000e794:	e8 0f 58 00 00       	call   c0013fa8 <Device::Device(char const*)>
c000e799:	83 c4 10             	add    esp,0x10
c000e79c:	ba 88 ab 02 c0       	mov    edx,0xc002ab88
c000e7a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a5:	89 10                	mov    DWORD PTR [eax],edx
c000e7a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ab:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e7b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b9:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e7c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c7:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e7cd:	83 ca 04             	or     edx,0x4
c000e7d0:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e7d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7e0:	0f b6 d0             	movzx  edx,al
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7f8:	0f b6 d0             	movzx  edx,al
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e808:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e80e:	8d 50 01             	lea    edx,[eax+0x1]
c000e811:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e815:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e81b:	0f b6 d0             	movzx  edx,al
c000e81e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e822:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e826:	83 e1 3f             	and    ecx,0x3f
c000e829:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e82d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e831:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e837:	0f b6 d0             	movzx  edx,al
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e849:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e84f:	0f b6 d0             	movzx  edx,al
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e85b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e865:	8d 50 01             	lea    edx,[eax+0x1]
c000e868:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e86c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e872:	0f b6 d0             	movzx  edx,al
c000e875:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e879:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e87d:	83 e1 3f             	and    ecx,0x3f
c000e880:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e888:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e88e:	0f b6 d0             	movzx  edx,al
c000e891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e895:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e89c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8a6:	0f b6 d0             	movzx  edx,al
c000e8a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ad:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8bc:	8d 50 01             	lea    edx,[eax+0x1]
c000e8bf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8c3:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8c9:	0f b6 d0             	movzx  edx,al
c000e8cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8d0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8d4:	83 e1 3f             	and    ecx,0x3f
c000e8d7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8db:	90                   	nop
c000e8dc:	83 c4 0c             	add    esp,0xc
c000e8df:	c3                   	ret    

c000e8e0 <Computer::setBootMessage(char const*)>:
c000e8e0:	c3                   	ret    
c000e8e1:	90                   	nop

c000e8e2 <Computer::detectFeatures()>:
c000e8e2:	55                   	push   ebp
c000e8e3:	57                   	push   edi
c000e8e4:	56                   	push   esi
c000e8e5:	53                   	push   ebx
c000e8e6:	83 ec 1c             	sub    esp,0x1c
c000e8e9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8ed:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8f7:	e8 e8 19 ff ff       	call   c00002e4 <detectCPUID>
c000e8fc:	85 c0                	test   eax,eax
c000e8fe:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e904:	0f 95 c2             	setne  dl
c000e907:	83 e0 fd             	and    eax,0xfffffffd
c000e90a:	d1 e2                	shl    edx,1
c000e90c:	09 d0                	or     eax,edx
c000e90e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e914:	a8 02                	test   al,0x2
c000e916:	75 46                	jne    c000e95e <Computer::detectFeatures()+0x7c>
c000e918:	f6 05 e1 f0 02 c0 04 	test   BYTE PTR ds:0xc002f0e1,0x4
c000e91f:	74 07                	je     c000e928 <Computer::detectFeatures()+0x46>
c000e921:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e928:	e8 29 86 01 00       	call   c0026f56 <x87Detect>
c000e92d:	83 e0 01             	and    eax,0x1
c000e930:	c1 e0 04             	shl    eax,0x4
c000e933:	88 c2                	mov    dl,al
c000e935:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e93b:	83 e0 ef             	and    eax,0xffffffef
c000e93e:	09 d0                	or     eax,edx
c000e940:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e946:	a8 10                	test   al,0x10
c000e948:	0f 85 2a 01 00 00    	jne    c000ea78 <Computer::detectFeatures()+0x196>
c000e94e:	84 c0                	test   al,al
c000e950:	0f 88 45 01 00 00    	js     c000ea9b <Computer::detectFeatures()+0x1b9>
c000e956:	83 c4 1c             	add    esp,0x1c
c000e959:	5b                   	pop    ebx
c000e95a:	5e                   	pop    esi
c000e95b:	5f                   	pop    edi
c000e95c:	5d                   	pop    ebp
c000e95d:	c3                   	ret    
c000e95e:	83 ec 0c             	sub    esp,0xc
c000e961:	6a 20                	push   0x20
c000e963:	e8 5c a1 00 00       	call   c0018ac4 <CPU::cpuidCheckEDX(unsigned int)>
c000e968:	83 e0 01             	and    eax,0x1
c000e96b:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e972:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e978:	83 e0 f7             	and    eax,0xfffffff7
c000e97b:	09 d0                	or     eax,edx
c000e97d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e983:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e98a:	e8 35 a1 00 00       	call   c0018ac4 <CPU::cpuidCheckEDX(unsigned int)>
c000e98f:	83 e0 01             	and    eax,0x1
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e99a:	83 e0 fe             	and    eax,0xfffffffe
c000e99d:	09 d0                	or     eax,edx
c000e99f:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9a5:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e9ac:	e8 13 a1 00 00       	call   c0018ac4 <CPU::cpuidCheckEDX(unsigned int)>
c000e9b1:	c1 e0 07             	shl    eax,0x7
c000e9b4:	88 c2                	mov    dl,al
c000e9b6:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9bc:	83 e0 7f             	and    eax,0x7f
c000e9bf:	09 d0                	or     eax,edx
c000e9c1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9c7:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e9ce:	e8 f1 a0 00 00       	call   c0018ac4 <CPU::cpuidCheckEDX(unsigned int)>
c000e9d3:	83 c4 10             	add    esp,0x10
c000e9d6:	83 e0 01             	and    eax,0x1
c000e9d9:	c1 e0 05             	shl    eax,0x5
c000e9dc:	88 c2                	mov    dl,al
c000e9de:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9e4:	83 e0 df             	and    eax,0xffffffdf
c000e9e7:	09 d0                	or     eax,edx
c000e9e9:	f7 05 e0 f0 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002f0e0,0x401
c000e9f3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9f9:	0f 84 c2 00 00 00    	je     c000eac1 <Computer::detectFeatures()+0x1df>
c000e9ff:	83 e0 fe             	and    eax,0xfffffffe
c000ea02:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea08:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea0e:	88 c2                	mov    dl,al
c000ea10:	83 e2 09             	and    edx,0x9
c000ea13:	fe ca                	dec    dl
c000ea15:	75 09                	jne    c000ea20 <Computer::detectFeatures()+0x13e>
c000ea17:	83 e0 fe             	and    eax,0xfffffffe
c000ea1a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea20:	83 ec 0c             	sub    esp,0xc
c000ea23:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea27:	50                   	push   eax
c000ea28:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea2c:	55                   	push   ebp
c000ea2d:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea31:	57                   	push   edi
c000ea32:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea36:	56                   	push   esi
c000ea37:	68 00 00 00 80       	push   0x80000000
c000ea3c:	e8 ff 9f 00 00       	call   c0018a40 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea41:	83 c4 20             	add    esp,0x20
c000ea44:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea4b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea4f:	0f 86 c3 fe ff ff    	jbe    c000e918 <Computer::detectFeatures()+0x36>
c000ea55:	83 ec 0c             	sub    esp,0xc
c000ea58:	50                   	push   eax
c000ea59:	55                   	push   ebp
c000ea5a:	57                   	push   edi
c000ea5b:	56                   	push   esi
c000ea5c:	68 01 00 00 80       	push   0x80000001
c000ea61:	e8 da 9f 00 00       	call   c0018a40 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea66:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea70:	83 c4 20             	add    esp,0x20
c000ea73:	e9 a0 fe ff ff       	jmp    c000e918 <Computer::detectFeatures()+0x36>
c000ea78:	e8 93 84 01 00       	call   c0026f10 <absolutelyNoChanceInHell>
c000ea7d:	88 c2                	mov    dl,al
c000ea7f:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea85:	c1 e2 07             	shl    edx,0x7
c000ea88:	83 e0 7f             	and    eax,0x7f
c000ea8b:	09 d0                	or     eax,edx
c000ea8d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea93:	84 c0                	test   al,al
c000ea95:	0f 89 bb fe ff ff    	jns    c000e956 <Computer::detectFeatures()+0x74>
c000ea9b:	e8 50 84 01 00       	call   c0026ef0 <avxDetect>
c000eaa0:	83 e0 01             	and    eax,0x1
c000eaa3:	c1 e0 05             	shl    eax,0x5
c000eaa6:	88 c2                	mov    dl,al
c000eaa8:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eaae:	83 e0 df             	and    eax,0xffffffdf
c000eab1:	09 d0                	or     eax,edx
c000eab3:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eab9:	83 c4 1c             	add    esp,0x1c
c000eabc:	5b                   	pop    ebx
c000eabd:	5e                   	pop    esi
c000eabe:	5f                   	pop    edi
c000eabf:	5d                   	pop    ebp
c000eac0:	c3                   	ret    
c000eac1:	83 ec 0c             	sub    esp,0xc
c000eac4:	68 00 02 00 00       	push   0x200
c000eac9:	e8 f6 9f 00 00       	call   c0018ac4 <CPU::cpuidCheckEDX(unsigned int)>
c000eace:	83 c4 10             	add    esp,0x10
c000ead1:	83 e0 01             	and    eax,0x1
c000ead4:	88 c2                	mov    dl,al
c000ead6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eadc:	83 e0 fe             	and    eax,0xfffffffe
c000eadf:	09 d0                	or     eax,edx
c000eae1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eae7:	e9 1c ff ff ff       	jmp    c000ea08 <Computer::detectFeatures()+0x126>

c000eaec <Computer::displayFeatures()>:
c000eaec:	53                   	push   ebx
c000eaed:	83 ec 14             	sub    esp,0x14
c000eaf0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaf4:	68 f9 a9 02 c0       	push   0xc002a9f9
c000eaf9:	e8 6d 3e 00 00       	call   c001296b <Dbg::kprintf(char const*, ...)>
c000eafe:	83 c4 10             	add    esp,0x10
c000eb01:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eb08:	0f 85 73 02 00 00    	jne    c000ed81 <Computer::displayFeatures()+0x295>
c000eb0e:	b8 f6 a9 02 c0       	mov    eax,0xc002a9f6
c000eb13:	83 ec 08             	sub    esp,0x8
c000eb16:	50                   	push   eax
c000eb17:	68 0c aa 02 c0       	push   0xc002aa0c
c000eb1c:	e8 4a 3e 00 00       	call   c001296b <Dbg::kprintf(char const*, ...)>
c000eb21:	83 c4 10             	add    esp,0x10
c000eb24:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eb2b:	0f 85 8c 02 00 00    	jne    c000edbd <Computer::displayFeatures()+0x2d1>
c000eb31:	b8 f6 a9 02 c0       	mov    eax,0xc002a9f6
c000eb36:	83 ec 08             	sub    esp,0x8
c000eb39:	50                   	push   eax
c000eb3a:	68 1d aa 02 c0       	push   0xc002aa1d
c000eb3f:	e8 27 3e 00 00       	call   c001296b <Dbg::kprintf(char const*, ...)>
c000eb44:	83 c4 10             	add    esp,0x10
c000eb47:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb4e:	0f 85 5f 02 00 00    	jne    c000edb3 <Computer::displayFeatures()+0x2c7>
c000eb54:	b8 f6 a9 02 c0       	mov    eax,0xc002a9f6
c000eb59:	83 ec 08             	sub    esp,0x8
c000eb5c:	50                   	push   eax
c000eb5d:	68 2e aa 02 c0       	push   0xc002aa2e
c000eb62:	e8 04 3e 00 00       	call   c001296b <Dbg::kprintf(char const*, ...)>
c000eb67:	83 c4 10             	add    esp,0x10
c000eb6a:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb71:	0f 85 32 02 00 00    	jne    c000eda9 <Computer::displayFeatures()+0x2bd>
c000eb77:	b8 f6 a9 02 c0       	mov    eax,0xc002a9f6
c000eb7c:	83 ec 08             	sub    esp,0x8
c000eb7f:	50                   	push   eax
c000eb80:	68 3f aa 02 c0       	push   0xc002aa3f
c000eb85:	e8 e1 3d 00 00       	call   c001296b <Dbg::kprintf(char const*, ...)>
c000eb8a:	83 c4 10             	add    esp,0x10
c000eb8d:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb94:	0f 85 05 02 00 00    	jne    c000ed9f <Computer::displayFeatures()+0x2b3>
c000eb9a:	b8 f6 a9 02 c0       	mov    eax,0xc002a9f6
c000eb9f:	83 ec 08             	sub    esp,0x8
c000eba2:	50                   	push   eax
c000eba3:	68 50 aa 02 c0       	push   0xc002aa50
c000eba8:	e8 be 3d 00 00       	call   c001296b <Dbg::kprintf(char const*, ...)>
c000ebad:	83 c4 10             	add    esp,0x10
c000ebb0:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000ebb7:	0f 85 d8 01 00 00    	jne    c000ed95 <Computer::displayFeatures()+0x2a9>
c000ebbd:	b8 f6 a9 02 c0       	mov    eax,0xc002a9f6
c000ebc2:	83 ec 08             	sub    esp,0x8
c000ebc5:	50                   	push   eax
c000ebc6:	68 61 aa 02 c0       	push   0xc002aa61
c000ebcb:	e8 9b 3d 00 00       	call   c001296b <Dbg::kprintf(char const*, ...)>
c000ebd0:	83 c4 10             	add    esp,0x10
c000ebd3:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000ebda:	0f 85 ab 01 00 00    	jne    c000ed8b <Computer::displayFeatures()+0x29f>
c000ebe0:	b8 f6 a9 02 c0       	mov    eax,0xc002a9f6
c000ebe5:	83 ec 08             	sub    esp,0x8
c000ebe8:	50                   	push   eax
c000ebe9:	68 72 aa 02 c0       	push   0xc002aa72
c000ebee:	e8 78 3d 00 00       	call   c001296b <Dbg::kprintf(char const*, ...)>
c000ebf3:	83 c4 10             	add    esp,0x10
c000ebf6:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebfd:	0f 88 1b 02 00 00    	js     c000ee1e <Computer::displayFeatures()+0x332>
c000ec03:	b8 f6 a9 02 c0       	mov    eax,0xc002a9f6
c000ec08:	83 ec 08             	sub    esp,0x8
c000ec0b:	50                   	push   eax
c000ec0c:	68 83 aa 02 c0       	push   0xc002aa83
c000ec11:	e8 55 3d 00 00       	call   c001296b <Dbg::kprintf(char const*, ...)>
c000ec16:	83 c4 10             	add    esp,0x10
c000ec19:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ec20:	0f 85 a1 01 00 00    	jne    c000edc7 <Computer::displayFeatures()+0x2db>
c000ec26:	b8 f6 a9 02 c0       	mov    eax,0xc002a9f6
c000ec2b:	83 ec 08             	sub    esp,0x8
c000ec2e:	50                   	push   eax
c000ec2f:	68 94 aa 02 c0       	push   0xc002aa94
c000ec34:	e8 32 3d 00 00       	call   c001296b <Dbg::kprintf(char const*, ...)>
c000ec39:	83 c4 10             	add    esp,0x10
c000ec3c:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ec43:	0f 85 cb 01 00 00    	jne    c000ee14 <Computer::displayFeatures()+0x328>
c000ec49:	b8 f6 a9 02 c0       	mov    eax,0xc002a9f6
c000ec4e:	83 ec 08             	sub    esp,0x8
c000ec51:	50                   	push   eax
c000ec52:	68 a5 aa 02 c0       	push   0xc002aaa5
c000ec57:	e8 0f 3d 00 00       	call   c001296b <Dbg::kprintf(char const*, ...)>
c000ec5c:	83 c4 10             	add    esp,0x10
c000ec5f:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec66:	0f 85 9e 01 00 00    	jne    c000ee0a <Computer::displayFeatures()+0x31e>
c000ec6c:	b8 f6 a9 02 c0       	mov    eax,0xc002a9f6
c000ec71:	83 ec 08             	sub    esp,0x8
c000ec74:	50                   	push   eax
c000ec75:	68 b6 aa 02 c0       	push   0xc002aab6
c000ec7a:	e8 ec 3c 00 00       	call   c001296b <Dbg::kprintf(char const*, ...)>
c000ec7f:	83 c4 10             	add    esp,0x10
c000ec82:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec89:	0f 85 71 01 00 00    	jne    c000ee00 <Computer::displayFeatures()+0x314>
c000ec8f:	b8 f6 a9 02 c0       	mov    eax,0xc002a9f6
c000ec94:	83 ec 08             	sub    esp,0x8
c000ec97:	50                   	push   eax
c000ec98:	68 c7 aa 02 c0       	push   0xc002aac7
c000ec9d:	e8 c9 3c 00 00       	call   c001296b <Dbg::kprintf(char const*, ...)>
c000eca2:	83 c4 10             	add    esp,0x10
c000eca5:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ecac:	0f 85 44 01 00 00    	jne    c000edf6 <Computer::displayFeatures()+0x30a>
c000ecb2:	b8 f6 a9 02 c0       	mov    eax,0xc002a9f6
c000ecb7:	83 ec 08             	sub    esp,0x8
c000ecba:	50                   	push   eax
c000ecbb:	68 d8 aa 02 c0       	push   0xc002aad8
c000ecc0:	e8 a6 3c 00 00       	call   c001296b <Dbg::kprintf(char const*, ...)>
c000ecc5:	83 c4 10             	add    esp,0x10
c000ecc8:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000eccf:	0f 85 17 01 00 00    	jne    c000edec <Computer::displayFeatures()+0x300>
c000ecd5:	b8 f6 a9 02 c0       	mov    eax,0xc002a9f6
c000ecda:	83 ec 08             	sub    esp,0x8
c000ecdd:	50                   	push   eax
c000ecde:	68 e9 aa 02 c0       	push   0xc002aae9
c000ece3:	e8 83 3c 00 00       	call   c001296b <Dbg::kprintf(char const*, ...)>
c000ece8:	83 c4 10             	add    esp,0x10
c000eceb:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ecf2:	0f 85 ea 00 00 00    	jne    c000ede2 <Computer::displayFeatures()+0x2f6>
c000ecf8:	b8 f6 a9 02 c0       	mov    eax,0xc002a9f6
c000ecfd:	83 ec 08             	sub    esp,0x8
c000ed00:	50                   	push   eax
c000ed01:	68 fa aa 02 c0       	push   0xc002aafa
c000ed06:	e8 60 3c 00 00       	call   c001296b <Dbg::kprintf(char const*, ...)>
c000ed0b:	83 c4 10             	add    esp,0x10
c000ed0e:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000ed15:	0f 88 0d 01 00 00    	js     c000ee28 <Computer::displayFeatures()+0x33c>
c000ed1b:	b8 f6 a9 02 c0       	mov    eax,0xc002a9f6
c000ed20:	83 ec 08             	sub    esp,0x8
c000ed23:	50                   	push   eax
c000ed24:	68 0b ab 02 c0       	push   0xc002ab0b
c000ed29:	e8 3d 3c 00 00       	call   c001296b <Dbg::kprintf(char const*, ...)>
c000ed2e:	83 c4 10             	add    esp,0x10
c000ed31:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ed38:	0f 85 9a 00 00 00    	jne    c000edd8 <Computer::displayFeatures()+0x2ec>
c000ed3e:	b8 f6 a9 02 c0       	mov    eax,0xc002a9f6
c000ed43:	83 ec 08             	sub    esp,0x8
c000ed46:	50                   	push   eax
c000ed47:	68 1c ab 02 c0       	push   0xc002ab1c
c000ed4c:	e8 1a 3c 00 00       	call   c001296b <Dbg::kprintf(char const*, ...)>
c000ed51:	83 c4 10             	add    esp,0x10
c000ed54:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed5b:	75 74                	jne    c000edd1 <Computer::displayFeatures()+0x2e5>
c000ed5d:	b8 f6 a9 02 c0       	mov    eax,0xc002a9f6
c000ed62:	83 ec 08             	sub    esp,0x8
c000ed65:	50                   	push   eax
c000ed66:	68 2d ab 02 c0       	push   0xc002ab2d
c000ed6b:	e8 fb 3b 00 00       	call   c001296b <Dbg::kprintf(char const*, ...)>
c000ed70:	c7 44 24 20 30 c5 02 c0 	mov    DWORD PTR [esp+0x20],0xc002c530
c000ed78:	83 c4 18             	add    esp,0x18
c000ed7b:	5b                   	pop    ebx
c000ed7c:	e9 ea 3b 00 00       	jmp    c001296b <Dbg::kprintf(char const*, ...)>
c000ed81:	b8 f2 a9 02 c0       	mov    eax,0xc002a9f2
c000ed86:	e9 88 fd ff ff       	jmp    c000eb13 <Computer::displayFeatures()+0x27>
c000ed8b:	b8 f2 a9 02 c0       	mov    eax,0xc002a9f2
c000ed90:	e9 50 fe ff ff       	jmp    c000ebe5 <Computer::displayFeatures()+0xf9>
c000ed95:	b8 f2 a9 02 c0       	mov    eax,0xc002a9f2
c000ed9a:	e9 23 fe ff ff       	jmp    c000ebc2 <Computer::displayFeatures()+0xd6>
c000ed9f:	b8 f2 a9 02 c0       	mov    eax,0xc002a9f2
c000eda4:	e9 f6 fd ff ff       	jmp    c000eb9f <Computer::displayFeatures()+0xb3>
c000eda9:	b8 f2 a9 02 c0       	mov    eax,0xc002a9f2
c000edae:	e9 c9 fd ff ff       	jmp    c000eb7c <Computer::displayFeatures()+0x90>
c000edb3:	b8 f2 a9 02 c0       	mov    eax,0xc002a9f2
c000edb8:	e9 9c fd ff ff       	jmp    c000eb59 <Computer::displayFeatures()+0x6d>
c000edbd:	b8 f2 a9 02 c0       	mov    eax,0xc002a9f2
c000edc2:	e9 6f fd ff ff       	jmp    c000eb36 <Computer::displayFeatures()+0x4a>
c000edc7:	b8 f2 a9 02 c0       	mov    eax,0xc002a9f2
c000edcc:	e9 5a fe ff ff       	jmp    c000ec2b <Computer::displayFeatures()+0x13f>
c000edd1:	b8 f2 a9 02 c0       	mov    eax,0xc002a9f2
c000edd6:	eb 8a                	jmp    c000ed62 <Computer::displayFeatures()+0x276>
c000edd8:	b8 f2 a9 02 c0       	mov    eax,0xc002a9f2
c000eddd:	e9 61 ff ff ff       	jmp    c000ed43 <Computer::displayFeatures()+0x257>
c000ede2:	b8 f2 a9 02 c0       	mov    eax,0xc002a9f2
c000ede7:	e9 11 ff ff ff       	jmp    c000ecfd <Computer::displayFeatures()+0x211>
c000edec:	b8 f2 a9 02 c0       	mov    eax,0xc002a9f2
c000edf1:	e9 e4 fe ff ff       	jmp    c000ecda <Computer::displayFeatures()+0x1ee>
c000edf6:	b8 f2 a9 02 c0       	mov    eax,0xc002a9f2
c000edfb:	e9 b7 fe ff ff       	jmp    c000ecb7 <Computer::displayFeatures()+0x1cb>
c000ee00:	b8 f2 a9 02 c0       	mov    eax,0xc002a9f2
c000ee05:	e9 8a fe ff ff       	jmp    c000ec94 <Computer::displayFeatures()+0x1a8>
c000ee0a:	b8 f2 a9 02 c0       	mov    eax,0xc002a9f2
c000ee0f:	e9 5d fe ff ff       	jmp    c000ec71 <Computer::displayFeatures()+0x185>
c000ee14:	b8 f2 a9 02 c0       	mov    eax,0xc002a9f2
c000ee19:	e9 30 fe ff ff       	jmp    c000ec4e <Computer::displayFeatures()+0x162>
c000ee1e:	b8 f2 a9 02 c0       	mov    eax,0xc002a9f2
c000ee23:	e9 e0 fd ff ff       	jmp    c000ec08 <Computer::displayFeatures()+0x11c>
c000ee28:	b8 f2 a9 02 c0       	mov    eax,0xc002a9f2
c000ee2d:	e9 ee fe ff ff       	jmp    c000ed20 <Computer::displayFeatures()+0x234>

c000ee32 <Computer::rdmsr(unsigned int)>:
c000ee32:	83 ec 0c             	sub    esp,0xc
c000ee35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee39:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee40:	74 0a                	je     c000ee4c <Computer::rdmsr(unsigned int)+0x1a>
c000ee42:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee46:	0f 32                	rdmsr  
c000ee48:	83 c4 0c             	add    esp,0xc
c000ee4b:	c3                   	ret    
c000ee4c:	83 ec 0c             	sub    esp,0xc
c000ee4f:	68 3e ab 02 c0       	push   0xc002ab3e
c000ee54:	e8 48 b5 00 00       	call   c001a3a1 <Krnl::panic(char const*)>
c000ee59:	83 c4 10             	add    esp,0x10
c000ee5c:	eb e4                	jmp    c000ee42 <Computer::rdmsr(unsigned int)+0x10>

c000ee5e <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee5e:	57                   	push   edi
c000ee5f:	56                   	push   esi
c000ee60:	52                   	push   edx
c000ee61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee65:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee6d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee74:	74 0e                	je     c000ee84 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee76:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee7a:	89 f0                	mov    eax,esi
c000ee7c:	89 fa                	mov    edx,edi
c000ee7e:	0f 30                	wrmsr  
c000ee80:	58                   	pop    eax
c000ee81:	5e                   	pop    esi
c000ee82:	5f                   	pop    edi
c000ee83:	c3                   	ret    
c000ee84:	83 ec 0c             	sub    esp,0xc
c000ee87:	68 44 ab 02 c0       	push   0xc002ab44
c000ee8c:	e8 10 b5 00 00       	call   c001a3a1 <Krnl::panic(char const*)>
c000ee91:	83 c4 10             	add    esp,0x10
c000ee94:	eb e0                	jmp    c000ee76 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee96 <Computer::nmiEnabled()>:
c000ee96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee9a:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000eea0:	c3                   	ret    
c000eea1:	90                   	nop

c000eea2 <Computer::readCMOS(unsigned char)>:
c000eea2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eea6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eead:	19 c0                	sbb    eax,eax
c000eeaf:	83 e0 80             	and    eax,0xffffff80
c000eeb2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000eeb6:	e6 70                	out    0x70,al
c000eeb8:	e4 71                	in     al,0x71
c000eeba:	c3                   	ret    
c000eebb:	90                   	nop

c000eebc <Computer::enableNMI(bool)>:
c000eebc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eec0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eec4:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000eeca:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000eed2:	eb ce                	jmp    c000eea2 <Computer::readCMOS(unsigned char)>

c000eed4 <Computer::open(int, int, void*)>:
c000eed4:	56                   	push   esi
c000eed5:	53                   	push   ebx
c000eed6:	83 ec 10             	sub    esp,0x10
c000eed9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eedd:	f6 05 e0 f0 02 c0 04 	test   BYTE PTR ds:0xc002f0e0,0x4
c000eee4:	68 64 12 00 00       	push   0x1264
c000eee9:	0f 94 05 00 e0 02 c0 	sete   BYTE PTR ds:0xc002e000
c000eef0:	e8 97 09 00 00       	call   c000f88c <malloc>
c000eef5:	89 04 24             	mov    DWORD PTR [esp],eax
c000eef8:	89 c6                	mov    esi,eax
c000eefa:	e8 01 8f 00 00       	call   c0017e00 <ACPI::ACPI()>
c000eeff:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ef05:	58                   	pop    eax
c000ef06:	5a                   	pop    edx
c000ef07:	56                   	push   esi
c000ef08:	53                   	push   ebx
c000ef09:	e8 96 4e 00 00       	call   c0013da4 <Device::addChild(Device*)>
c000ef0e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef11:	e8 cc f9 ff ff       	call   c000e8e2 <Computer::detectFeatures()>
c000ef16:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef19:	e8 ce fb ff ff       	call   c000eaec <Computer::displayFeatures()>
c000ef1e:	59                   	pop    ecx
c000ef1f:	5e                   	pop    esi
c000ef20:	6a 01                	push   0x1
c000ef22:	53                   	push   ebx
c000ef23:	e8 94 ff ff ff       	call   c000eebc <Computer::enableNMI(bool)>
c000ef28:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ef2f:	e8 58 09 00 00       	call   c000f88c <malloc>
c000ef34:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef37:	89 c6                	mov    esi,eax
c000ef39:	e8 3e 9c 00 00       	call   c0018b7c <CPU::CPU()>
c000ef3e:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ef44:	58                   	pop    eax
c000ef45:	5a                   	pop    edx
c000ef46:	56                   	push   esi
c000ef47:	53                   	push   ebx
c000ef48:	e8 57 4e 00 00       	call   c0013da4 <Device::addChild(Device*)>
c000ef4d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef53:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef59:	6a 00                	push   0x0
c000ef5b:	6a 00                	push   0x0
c000ef5d:	50                   	push   eax
c000ef5e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef61:	83 c4 20             	add    esp,0x20
c000ef64:	e8 e3 53 00 00       	call   c001434c <setupFPU()>
c000ef69:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef6f:	85 c0                	test   eax,eax
c000ef71:	74 1f                	je     c000ef92 <Computer::open(int, int, void*)+0xbe>
c000ef73:	83 ec 08             	sub    esp,0x8
c000ef76:	50                   	push   eax
c000ef77:	53                   	push   ebx
c000ef78:	e8 27 4e 00 00       	call   c0013da4 <Device::addChild(Device*)>
c000ef7d:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef83:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef85:	6a 00                	push   0x0
c000ef87:	6a 00                	push   0x0
c000ef89:	6a 00                	push   0x0
c000ef8b:	50                   	push   eax
c000ef8c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef8f:	83 c4 20             	add    esp,0x20
c000ef92:	83 ec 0c             	sub    esp,0xc
c000ef95:	68 94 e6 00 c0       	push   0xc000e694
c000ef9a:	e8 93 f0 00 00       	call   c001e032 <setupMultitasking(void (*)())>
c000ef9f:	83 c4 14             	add    esp,0x14
c000efa2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000efa7:	5b                   	pop    ebx
c000efa8:	5e                   	pop    esi
c000efa9:	c3                   	ret    

c000efaa <Computer::disableNMI()>:
c000efaa:	6a 00                	push   0x0
c000efac:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000efb0:	e8 07 ff ff ff       	call   c000eebc <Computer::enableNMI(bool)>
c000efb5:	58                   	pop    eax
c000efb6:	5a                   	pop    edx
c000efb7:	c3                   	ret    

c000efb8 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000efb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000efbc:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000efc3:	19 c0                	sbb    eax,eax
c000efc5:	83 e0 80             	and    eax,0xffffff80
c000efc8:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000efcc:	e6 70                	out    0x70,al
c000efce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efd2:	e6 71                	out    0x71,al
c000efd4:	c3                   	ret    
c000efd5:	90                   	nop

c000efd6 <Computer::handleNMI()>:
c000efd6:	56                   	push   esi
c000efd7:	53                   	push   ebx
c000efd8:	83 ec 10             	sub    esp,0x10
c000efdb:	e4 92                	in     al,0x92
c000efdd:	89 c6                	mov    esi,eax
c000efdf:	e4 61                	in     al,0x61
c000efe1:	68 4a ab 02 c0       	push   0xc002ab4a
c000efe6:	88 c3                	mov    bl,al
c000efe8:	e8 7e 39 00 00       	call   c001296b <Dbg::kprintf(char const*, ...)>
c000efed:	83 c4 10             	add    esp,0x10
c000eff0:	83 e6 10             	and    esi,0x10
c000eff3:	75 0d                	jne    c000f002 <Computer::handleNMI()+0x2c>
c000eff5:	f6 c3 40             	test   bl,0x40
c000eff8:	75 1d                	jne    c000f017 <Computer::handleNMI()+0x41>
c000effa:	84 db                	test   bl,bl
c000effc:	78 2d                	js     c000f02b <Computer::handleNMI()+0x55>
c000effe:	58                   	pop    eax
c000efff:	5b                   	pop    ebx
c000f000:	5e                   	pop    esi
c000f001:	c3                   	ret    
c000f002:	83 ec 0c             	sub    esp,0xc
c000f005:	68 5b ab 02 c0       	push   0xc002ab5b
c000f00a:	e8 92 b3 00 00       	call   c001a3a1 <Krnl::panic(char const*)>
c000f00f:	83 c4 10             	add    esp,0x10
c000f012:	f6 c3 40             	test   bl,0x40
c000f015:	74 e3                	je     c000effa <Computer::handleNMI()+0x24>
c000f017:	83 ec 0c             	sub    esp,0xc
c000f01a:	68 68 ab 02 c0       	push   0xc002ab68
c000f01f:	e8 7d b3 00 00       	call   c001a3a1 <Krnl::panic(char const*)>
c000f024:	83 c4 10             	add    esp,0x10
c000f027:	84 db                	test   bl,bl
c000f029:	79 d3                	jns    c000effe <Computer::handleNMI()+0x28>
c000f02b:	c7 44 24 10 72 ab 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ab72
c000f033:	5a                   	pop    edx
c000f034:	5b                   	pop    ebx
c000f035:	5e                   	pop    esi
c000f036:	e9 66 b3 00 00       	jmp    c001a3a1 <Krnl::panic(char const*)>
c000f03b:	90                   	nop

c000f03c <Computer::setDiskActivityLight(int, bool)>:
c000f03c:	56                   	push   esi
c000f03d:	53                   	push   ebx
c000f03e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f042:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f047:	77 1b                	ja     c000f064 <Computer::setDiskActivityLight(int, bool)+0x28>
c000f049:	e4 92                	in     al,0x92
c000f04b:	bb 40 00 00 00       	mov    ebx,0x40
c000f050:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f054:	89 da                	mov    edx,ebx
c000f056:	d3 e2                	shl    edx,cl
c000f058:	89 f1                	mov    ecx,esi
c000f05a:	f7 d2                	not    edx
c000f05c:	d3 e3                	shl    ebx,cl
c000f05e:	21 d0                	and    eax,edx
c000f060:	09 d8                	or     eax,ebx
c000f062:	e6 92                	out    0x92,al
c000f064:	5b                   	pop    ebx
c000f065:	5e                   	pop    esi
c000f066:	c3                   	ret    
c000f067:	90                   	nop

c000f068 <GDTEntry::setBase(unsigned int)>:
c000f068:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f06c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f070:	89 c1                	mov    ecx,eax
c000f072:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f076:	c1 e9 10             	shr    ecx,0x10
c000f079:	c1 e8 18             	shr    eax,0x18
c000f07c:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f07f:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f082:	c3                   	ret    
c000f083:	90                   	nop

c000f084 <GDTEntry::setLimit(unsigned int)>:
c000f084:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f088:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f08c:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f08f:	66 89 01             	mov    WORD PTR [ecx],ax
c000f092:	83 e2 f0             	and    edx,0xfffffff0
c000f095:	c1 e8 10             	shr    eax,0x10
c000f098:	83 e0 0f             	and    eax,0xf
c000f09b:	09 d0                	or     eax,edx
c000f09d:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f0a0:	c3                   	ret    
c000f0a1:	90                   	nop

c000f0a2 <GDT::GDT()>:
c000f0a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0a6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0b6:	90                   	nop
c000f0b7:	c3                   	ret    

c000f0b8 <GDT::addEntry(GDTEntry)>:
c000f0b8:	53                   	push   ebx
c000f0b9:	83 ec 0c             	sub    esp,0xc
c000f0bc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f0c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f0c2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f0c9:	52                   	push   edx
c000f0ca:	50                   	push   eax
c000f0cb:	68 ac ab 02 c0       	push   0xc002abac
c000f0d0:	e8 96 38 00 00       	call   c001296b <Dbg::kprintf(char const*, ...)>
c000f0d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f0d7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f0db:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f0df:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f0e3:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f0e7:	8d 50 01             	lea    edx,[eax+0x1]
c000f0ea:	c1 e0 03             	shl    eax,0x3
c000f0ed:	89 13                	mov    DWORD PTR [ebx],edx
c000f0ef:	83 c4 18             	add    esp,0x18
c000f0f2:	5b                   	pop    ebx
c000f0f3:	c3                   	ret    

c000f0f4 <GDT::getNumberOfEntries()>:
c000f0f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0f8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0fa:	c3                   	ret    
c000f0fb:	90                   	nop

c000f0fc <GDT::flush()>:
c000f0fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f100:	8b 10                	mov    edx,DWORD PTR [eax]
c000f102:	83 c0 04             	add    eax,0x4
c000f105:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f10c:	a3 d2 f0 02 c0       	mov    ds:0xc002f0d2,eax
c000f111:	66 89 15 d0 f0 02 c0 	mov    WORD PTR ds:0xc002f0d0,dx
c000f118:	e9 33 13 ff ff       	jmp    c0000450 <loadGDT>
c000f11d:	90                   	nop

c000f11e <GDT::setup()>:
c000f11e:	55                   	push   ebp
c000f11f:	57                   	push   edi
c000f120:	56                   	push   esi
c000f121:	53                   	push   ebx
c000f122:	83 ec 3c             	sub    esp,0x3c
c000f125:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f129:	6a 00                	push   0x0
c000f12b:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f12f:	53                   	push   ebx
c000f130:	e8 33 ff ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c000f135:	6a 00                	push   0x0
c000f137:	53                   	push   ebx
c000f138:	e8 47 ff ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c000f13d:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f145:	6a 00                	push   0x0
c000f147:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f14b:	53                   	push   ebx
c000f14c:	e8 17 ff ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c000f151:	68 ff ff ff 00       	push   0xffffff
c000f156:	53                   	push   ebx
c000f157:	e8 28 ff ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c000f15c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f160:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f165:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f16a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f16e:	83 c4 20             	add    esp,0x20
c000f171:	6a 00                	push   0x0
c000f173:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f177:	53                   	push   ebx
c000f178:	e8 eb fe ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c000f17d:	68 ff ff ff 00       	push   0xffffff
c000f182:	53                   	push   ebx
c000f183:	e8 fc fe ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c000f188:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f18c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f190:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f194:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f198:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f19c:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f1a1:	0d 00 92 c0 00       	or     eax,0xc09200
c000f1a6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f1aa:	89 d8                	mov    eax,ebx
c000f1ac:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f1b0:	80 cc 60             	or     ah,0x60
c000f1b3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f1b7:	83 c4 0c             	add    esp,0xc
c000f1ba:	89 f8                	mov    eax,edi
c000f1bc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f1c0:	80 cc 60             	or     ah,0x60
c000f1c3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f1c7:	89 c7                	mov    edi,eax
c000f1c9:	55                   	push   ebp
c000f1ca:	e8 e9 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f1cf:	83 c4 0c             	add    esp,0xc
c000f1d2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1d6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1da:	55                   	push   ebp
c000f1db:	e8 d8 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f1e0:	83 c4 0c             	add    esp,0xc
c000f1e3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1e7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1eb:	55                   	push   ebp
c000f1ec:	e8 c7 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f1f1:	83 c4 0c             	add    esp,0xc
c000f1f4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1f8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1fc:	53                   	push   ebx
c000f1fd:	51                   	push   ecx
c000f1fe:	55                   	push   ebp
c000f1ff:	e8 b4 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f204:	83 c4 0c             	add    esp,0xc
c000f207:	57                   	push   edi
c000f208:	56                   	push   esi
c000f209:	55                   	push   ebp
c000f20a:	e8 a9 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f20f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f212:	e8 e5 fe ff ff       	call   c000f0fc <GDT::flush()>
c000f217:	83 c4 4c             	add    esp,0x4c
c000f21a:	5b                   	pop    ebx
c000f21b:	5e                   	pop    esi
c000f21c:	5f                   	pop    edi
c000f21d:	5d                   	pop    ebp
c000f21e:	c3                   	ret    

c000f21f <idleFunction(void*)>:
c000f21f:	53                   	push   ebx
c000f220:	83 ec 08             	sub    esp,0x8
c000f223:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c000f228:	48                   	dec    eax
c000f229:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c000f22e:	75 01                	jne    c000f231 <idleFunction(void*)+0x12>
c000f230:	fb                   	sti    
c000f231:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c000f236:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f23c:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f243:	74 3c                	je     c000f281 <idleFunction(void*)+0x62>
c000f245:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f24c:	74 33                	je     c000f281 <idleFunction(void*)+0x62>
c000f24e:	31 db                	xor    ebx,ebx
c000f250:	52                   	push   edx
c000f251:	52                   	push   edx
c000f252:	68 e1 00 00 00       	push   0xe1
c000f257:	50                   	push   eax
c000f258:	e8 d5 fb ff ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c000f25d:	53                   	push   ebx
c000f25e:	83 e0 02             	and    eax,0x2
c000f261:	50                   	push   eax
c000f262:	68 e1 00 00 00       	push   0xe1
c000f267:	ff 35 c8 f0 02 c0    	push   DWORD PTR ds:0xc002f0c8
c000f26d:	e8 ec fb ff ff       	call   c000ee5e <Computer::wrmsr(unsigned int, unsigned long long)>
c000f272:	83 c4 20             	add    esp,0x20
c000f275:	e8 05 10 ff ff       	call   c000027f <doTPAUSE>
c000f27a:	e8 21 9d 01 00       	call   c0028fa0 <idleCommon()>
c000f27f:	eb f4                	jmp    c000f275 <idleFunction(void*)+0x56>
c000f281:	fb                   	sti    
c000f282:	f4                   	hlt    
c000f283:	e8 18 9d 01 00       	call   c0028fa0 <idleCommon()>
c000f288:	eb f7                	jmp    c000f281 <idleFunction(void*)+0x62>

c000f28a <IDTEntry::IDTEntry(bool)>:
c000f28a:	83 ec 04             	sub    esp,0x4
c000f28d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f291:	88 04 24             	mov    BYTE PTR [esp],al
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f29e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2a2:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f2a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2aa:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2ad:	83 e2 f0             	and    edx,0xfffffff0
c000f2b0:	83 ca 0e             	or     edx,0xe
c000f2b3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ba:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2bd:	83 e2 ef             	and    edx,0xffffffef
c000f2c0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2c3:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f2c7:	74 04                	je     c000f2cd <IDTEntry::IDTEntry(bool)+0x43>
c000f2c9:	b2 03                	mov    dl,0x3
c000f2cb:	eb 02                	jmp    c000f2cf <IDTEntry::IDTEntry(bool)+0x45>
c000f2cd:	b2 00                	mov    dl,0x0
c000f2cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2d3:	83 e2 03             	and    edx,0x3
c000f2d6:	88 d1                	mov    cl,dl
c000f2d8:	c1 e1 05             	shl    ecx,0x5
c000f2db:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2de:	83 e2 9f             	and    edx,0xffffff9f
c000f2e1:	09 ca                	or     edx,ecx
c000f2e3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ea:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2ed:	83 ca 80             	or     edx,0xffffff80
c000f2f0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2f3:	90                   	nop
c000f2f4:	83 c4 04             	add    esp,0x4
c000f2f7:	c3                   	ret    

c000f2f8 <IDTEntry::setOffset(unsigned int)>:
c000f2f8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f300:	66 89 02             	mov    WORD PTR [edx],ax
c000f303:	c1 e8 10             	shr    eax,0x10
c000f306:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f30a:	c3                   	ret    
c000f30b:	90                   	nop

c000f30c <IDT::IDT()>:
c000f30c:	90                   	nop
c000f30d:	c3                   	ret    

c000f30e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f30e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f312:	83 c0 30             	add    eax,0x30
c000f315:	c3                   	ret    

c000f316 <IDT::addEntry(IDTEntry, int)>:
c000f316:	53                   	push   ebx
c000f317:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f31b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f31f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f323:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f327:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f32a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f32e:	5b                   	pop    ebx
c000f32f:	c3                   	ret    

c000f330 <IDT::addEntry(int, void (*)(), bool)>:
c000f330:	53                   	push   ebx
c000f331:	83 ec 10             	sub    esp,0x10
c000f334:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f339:	50                   	push   eax
c000f33a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f33e:	53                   	push   ebx
c000f33f:	e8 46 ff ff ff       	call   c000f28a <IDTEntry::IDTEntry(bool)>
c000f344:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f348:	53                   	push   ebx
c000f349:	e8 aa ff ff ff       	call   c000f2f8 <IDTEntry::setOffset(unsigned int)>
c000f34e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f352:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f356:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f35a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f35e:	e8 b3 ff ff ff       	call   c000f316 <IDT::addEntry(IDTEntry, int)>
c000f363:	83 c4 30             	add    esp,0x30
c000f366:	5b                   	pop    ebx
c000f367:	c3                   	ret    

c000f368 <IDT::flush()>:
c000f368:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f36c:	66 c7 05 d8 f0 02 c0 ff 07 	mov    WORD PTR ds:0xc002f0d8,0x7ff
c000f375:	a3 da f0 02 c0       	mov    ds:0xc002f0da,eax
c000f37a:	0f 01 1d d8 f0 02 c0 	lidtd  ds:0xc002f0d8
c000f381:	c3                   	ret    

c000f382 <IDT::setup()>:
c000f382:	57                   	push   edi
c000f383:	56                   	push   esi
c000f384:	53                   	push   ebx
c000f385:	83 ec 10             	sub    esp,0x10
c000f388:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f38c:	6a 00                	push   0x0
c000f38e:	68 70 04 00 c0       	push   0xc0000470
c000f393:	6a 00                	push   0x0
c000f395:	53                   	push   ebx
c000f396:	e8 95 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f39b:	6a 00                	push   0x0
c000f39d:	68 80 04 00 c0       	push   0xc0000480
c000f3a2:	6a 01                	push   0x1
c000f3a4:	53                   	push   ebx
c000f3a5:	e8 86 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3aa:	83 c4 20             	add    esp,0x20
c000f3ad:	6a 00                	push   0x0
c000f3af:	68 8a 04 00 c0       	push   0xc000048a
c000f3b4:	6a 02                	push   0x2
c000f3b6:	53                   	push   ebx
c000f3b7:	e8 74 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3bc:	6a 00                	push   0x0
c000f3be:	68 94 04 00 c0       	push   0xc0000494
c000f3c3:	6a 03                	push   0x3
c000f3c5:	53                   	push   ebx
c000f3c6:	e8 65 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3cb:	83 c4 20             	add    esp,0x20
c000f3ce:	6a 00                	push   0x0
c000f3d0:	68 9e 04 00 c0       	push   0xc000049e
c000f3d5:	6a 04                	push   0x4
c000f3d7:	53                   	push   ebx
c000f3d8:	e8 53 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3dd:	6a 00                	push   0x0
c000f3df:	68 a8 04 00 c0       	push   0xc00004a8
c000f3e4:	6a 05                	push   0x5
c000f3e6:	53                   	push   ebx
c000f3e7:	e8 44 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3ec:	83 c4 20             	add    esp,0x20
c000f3ef:	6a 00                	push   0x0
c000f3f1:	68 b2 04 00 c0       	push   0xc00004b2
c000f3f6:	6a 06                	push   0x6
c000f3f8:	53                   	push   ebx
c000f3f9:	e8 32 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3fe:	6a 00                	push   0x0
c000f400:	68 bc 04 00 c0       	push   0xc00004bc
c000f405:	6a 07                	push   0x7
c000f407:	53                   	push   ebx
c000f408:	e8 23 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f40d:	83 c4 20             	add    esp,0x20
c000f410:	6a 00                	push   0x0
c000f412:	68 c6 04 00 c0       	push   0xc00004c6
c000f417:	6a 08                	push   0x8
c000f419:	53                   	push   ebx
c000f41a:	e8 11 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f41f:	6a 00                	push   0x0
c000f421:	68 ce 04 00 c0       	push   0xc00004ce
c000f426:	6a 09                	push   0x9
c000f428:	53                   	push   ebx
c000f429:	e8 02 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f42e:	83 c4 20             	add    esp,0x20
c000f431:	6a 00                	push   0x0
c000f433:	68 d8 04 00 c0       	push   0xc00004d8
c000f438:	6a 0a                	push   0xa
c000f43a:	53                   	push   ebx
c000f43b:	e8 f0 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f440:	6a 00                	push   0x0
c000f442:	68 e0 04 00 c0       	push   0xc00004e0
c000f447:	6a 0b                	push   0xb
c000f449:	53                   	push   ebx
c000f44a:	e8 e1 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f44f:	83 c4 20             	add    esp,0x20
c000f452:	6a 00                	push   0x0
c000f454:	68 e8 04 00 c0       	push   0xc00004e8
c000f459:	6a 0c                	push   0xc
c000f45b:	53                   	push   ebx
c000f45c:	e8 cf fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f461:	6a 00                	push   0x0
c000f463:	68 f0 04 00 c0       	push   0xc00004f0
c000f468:	6a 0d                	push   0xd
c000f46a:	53                   	push   ebx
c000f46b:	e8 c0 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f470:	83 c4 20             	add    esp,0x20
c000f473:	6a 00                	push   0x0
c000f475:	68 f8 04 00 c0       	push   0xc00004f8
c000f47a:	6a 0e                	push   0xe
c000f47c:	53                   	push   ebx
c000f47d:	e8 ae fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f482:	6a 00                	push   0x0
c000f484:	68 00 05 00 c0       	push   0xc0000500
c000f489:	6a 0f                	push   0xf
c000f48b:	53                   	push   ebx
c000f48c:	e8 9f fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f491:	83 c4 20             	add    esp,0x20
c000f494:	6a 00                	push   0x0
c000f496:	68 0a 05 00 c0       	push   0xc000050a
c000f49b:	6a 10                	push   0x10
c000f49d:	53                   	push   ebx
c000f49e:	e8 8d fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4a3:	6a 00                	push   0x0
c000f4a5:	68 14 05 00 c0       	push   0xc0000514
c000f4aa:	6a 11                	push   0x11
c000f4ac:	53                   	push   ebx
c000f4ad:	e8 7e fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4b2:	83 c4 20             	add    esp,0x20
c000f4b5:	6a 00                	push   0x0
c000f4b7:	68 1e 05 00 c0       	push   0xc000051e
c000f4bc:	6a 12                	push   0x12
c000f4be:	53                   	push   ebx
c000f4bf:	e8 6c fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4c4:	6a 01                	push   0x1
c000f4c6:	68 b8 05 00 c0       	push   0xc00005b8
c000f4cb:	6a 60                	push   0x60
c000f4cd:	53                   	push   ebx
c000f4ce:	e8 5d fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4d3:	83 c4 20             	add    esp,0x20
c000f4d6:	6a 00                	push   0x0
c000f4d8:	68 bf 05 00 c0       	push   0xc00005bf
c000f4dd:	6a 20                	push   0x20
c000f4df:	53                   	push   ebx
c000f4e0:	e8 4b fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4e5:	6a 00                	push   0x0
c000f4e7:	68 aa 05 00 c0       	push   0xc00005aa
c000f4ec:	6a 21                	push   0x21
c000f4ee:	53                   	push   ebx
c000f4ef:	e8 3c fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4f4:	83 c4 20             	add    esp,0x20
c000f4f7:	6a 00                	push   0x0
c000f4f9:	68 b1 05 00 c0       	push   0xc00005b1
c000f4fe:	6a 22                	push   0x22
c000f500:	53                   	push   ebx
c000f501:	e8 2a fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f506:	6a 00                	push   0x0
c000f508:	68 28 05 00 c0       	push   0xc0000528
c000f50d:	6a 23                	push   0x23
c000f50f:	53                   	push   ebx
c000f510:	e8 1b fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f515:	83 c4 20             	add    esp,0x20
c000f518:	6a 00                	push   0x0
c000f51a:	68 32 05 00 c0       	push   0xc0000532
c000f51f:	6a 24                	push   0x24
c000f521:	53                   	push   ebx
c000f522:	e8 09 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f527:	6a 00                	push   0x0
c000f529:	68 3c 05 00 c0       	push   0xc000053c
c000f52e:	6a 25                	push   0x25
c000f530:	53                   	push   ebx
c000f531:	e8 fa fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f536:	83 c4 20             	add    esp,0x20
c000f539:	6a 00                	push   0x0
c000f53b:	68 46 05 00 c0       	push   0xc0000546
c000f540:	6a 26                	push   0x26
c000f542:	53                   	push   ebx
c000f543:	e8 e8 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f548:	6a 00                	push   0x0
c000f54a:	68 50 05 00 c0       	push   0xc0000550
c000f54f:	6a 27                	push   0x27
c000f551:	53                   	push   ebx
c000f552:	e8 d9 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f557:	83 c4 20             	add    esp,0x20
c000f55a:	6a 00                	push   0x0
c000f55c:	68 5a 05 00 c0       	push   0xc000055a
c000f561:	6a 28                	push   0x28
c000f563:	53                   	push   ebx
c000f564:	e8 c7 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f569:	6a 00                	push   0x0
c000f56b:	68 64 05 00 c0       	push   0xc0000564
c000f570:	6a 29                	push   0x29
c000f572:	53                   	push   ebx
c000f573:	e8 b8 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f578:	83 c4 20             	add    esp,0x20
c000f57b:	6a 00                	push   0x0
c000f57d:	68 6e 05 00 c0       	push   0xc000056e
c000f582:	6a 2a                	push   0x2a
c000f584:	53                   	push   ebx
c000f585:	e8 a6 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f58a:	6a 00                	push   0x0
c000f58c:	68 78 05 00 c0       	push   0xc0000578
c000f591:	6a 2b                	push   0x2b
c000f593:	53                   	push   ebx
c000f594:	e8 97 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f599:	83 c4 20             	add    esp,0x20
c000f59c:	6a 00                	push   0x0
c000f59e:	68 82 05 00 c0       	push   0xc0000582
c000f5a3:	6a 2c                	push   0x2c
c000f5a5:	53                   	push   ebx
c000f5a6:	e8 85 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5ab:	6a 00                	push   0x0
c000f5ad:	68 8c 05 00 c0       	push   0xc000058c
c000f5b2:	6a 2d                	push   0x2d
c000f5b4:	53                   	push   ebx
c000f5b5:	e8 76 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5ba:	83 c4 20             	add    esp,0x20
c000f5bd:	6a 00                	push   0x0
c000f5bf:	68 96 05 00 c0       	push   0xc0000596
c000f5c4:	6a 2e                	push   0x2e
c000f5c6:	53                   	push   ebx
c000f5c7:	e8 64 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5cc:	6a 00                	push   0x0
c000f5ce:	68 a0 05 00 c0       	push   0xc00005a0
c000f5d3:	6a 2f                	push   0x2f
c000f5d5:	53                   	push   ebx
c000f5d6:	e8 55 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5db:	83 c4 20             	add    esp,0x20
c000f5de:	6a 00                	push   0x0
c000f5e0:	68 f6 05 00 c0       	push   0xc00005f6
c000f5e5:	6a 30                	push   0x30
c000f5e7:	53                   	push   ebx
c000f5e8:	e8 43 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5ed:	6a 00                	push   0x0
c000f5ef:	68 00 06 00 c0       	push   0xc0000600
c000f5f4:	6a 31                	push   0x31
c000f5f6:	53                   	push   ebx
c000f5f7:	e8 34 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5fc:	83 c4 20             	add    esp,0x20
c000f5ff:	6a 00                	push   0x0
c000f601:	68 0a 06 00 c0       	push   0xc000060a
c000f606:	6a 32                	push   0x32
c000f608:	53                   	push   ebx
c000f609:	e8 22 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f60e:	6a 00                	push   0x0
c000f610:	68 14 06 00 c0       	push   0xc0000614
c000f615:	6a 33                	push   0x33
c000f617:	53                   	push   ebx
c000f618:	e8 13 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f61d:	83 c4 20             	add    esp,0x20
c000f620:	6a 00                	push   0x0
c000f622:	68 1e 06 00 c0       	push   0xc000061e
c000f627:	6a 34                	push   0x34
c000f629:	53                   	push   ebx
c000f62a:	e8 01 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f62f:	6a 00                	push   0x0
c000f631:	68 28 06 00 c0       	push   0xc0000628
c000f636:	6a 35                	push   0x35
c000f638:	53                   	push   ebx
c000f639:	e8 f2 fc ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f63e:	83 c4 20             	add    esp,0x20
c000f641:	6a 00                	push   0x0
c000f643:	68 32 06 00 c0       	push   0xc0000632
c000f648:	6a 36                	push   0x36
c000f64a:	53                   	push   ebx
c000f64b:	e8 e0 fc ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f650:	6a 00                	push   0x0
c000f652:	68 3c 06 00 c0       	push   0xc000063c
c000f657:	6a 37                	push   0x37
c000f659:	53                   	push   ebx
c000f65a:	e8 d1 fc ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f65f:	83 c4 1c             	add    esp,0x1c
c000f662:	6a 03                	push   0x3
c000f664:	6a 02                	push   0x2
c000f666:	ff 35 30 f2 02 c0    	push   DWORD PTR ds:0xc002f230
c000f66c:	e8 2d 28 00 00       	call   c0011e9e <VAS::allocatePages(int, int)>
c000f671:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f678:	89 c6                	mov    esi,eax
c000f67a:	e8 0d 02 00 00       	call   c000f88c <malloc>
c000f67f:	81 c6 00 20 00 00    	add    esi,0x2000
c000f685:	89 04 24             	mov    DWORD PTR [esp],eax
c000f688:	89 c7                	mov    edi,eax
c000f68a:	e8 07 18 00 00       	call   c0010e96 <TSS::TSS()>
c000f68f:	83 c4 0c             	add    esp,0xc
c000f692:	68 c6 04 00 c0       	push   0xc00004c6
c000f697:	56                   	push   esi
c000f698:	57                   	push   edi
c000f699:	e8 38 18 00 00       	call   c0010ed6 <TSS::setup(unsigned long, unsigned long)>
c000f69e:	89 c6                	mov    esi,eax
c000f6a0:	58                   	pop    eax
c000f6a1:	5a                   	pop    edx
c000f6a2:	6a 00                	push   0x0
c000f6a4:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f6a8:	50                   	push   eax
c000f6a9:	e8 dc fb ff ff       	call   c000f28a <IDTEntry::IDTEntry(bool)>
c000f6ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f6b2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f6b7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f6be:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f6c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f6c8:	80 ce 05             	or     dh,0x5
c000f6cb:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f6ce:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f6d2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f6d6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f6d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f6dc:	e8 87 fc ff ff       	call   c000f368 <IDT::flush()>
c000f6e1:	83 c4 20             	add    esp,0x20
c000f6e4:	5b                   	pop    ebx
c000f6e5:	5e                   	pop    esi
c000f6e6:	5f                   	pop    edi
c000f6e7:	c3                   	ret    

c000f6e8 <sbrk>:
c000f6e8:	55                   	push   ebp
c000f6e9:	57                   	push   edi
c000f6ea:	56                   	push   esi
c000f6eb:	53                   	push   ebx
c000f6ec:	83 ec 1c             	sub    esp,0x1c
c000f6ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6f3:	85 c0                	test   eax,eax
c000f6f5:	74 3e                	je     c000f735 <sbrk+0x4d>
c000f6f7:	78 43                	js     c000f73c <sbrk+0x54>
c000f6f9:	8b 15 c8 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f0c8
c000f6ff:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f705:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f70b:	83 e2 01             	and    edx,0x1
c000f70e:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f712:	8b 0d 80 de 02 c0    	mov    ecx,DWORD PTR ds:0xc002de80
c000f718:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f71c:	05 ff 0f 00 00       	add    eax,0xfff
c000f721:	89 c2                	mov    edx,eax
c000f723:	78 2f                	js     c000f754 <sbrk+0x6c>
c000f725:	c1 fa 0c             	sar    edx,0xc
c000f728:	89 d7                	mov    edi,edx
c000f72a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f72e:	be 00 00 00 00       	mov    esi,0x0
c000f733:	eb 36                	jmp    c000f76b <sbrk+0x83>
c000f735:	a1 80 de 02 c0       	mov    eax,ds:0xc002de80
c000f73a:	eb 73                	jmp    c000f7af <sbrk+0xc7>
c000f73c:	83 ec 08             	sub    esp,0x8
c000f73f:	50                   	push   eax
c000f740:	68 c8 ab 02 c0       	push   0xc002abc8
c000f745:	e8 21 32 00 00       	call   c001296b <Dbg::kprintf(char const*, ...)>
c000f74a:	83 c4 10             	add    esp,0x10
c000f74d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f752:	eb 5b                	jmp    c000f7af <sbrk+0xc7>
c000f754:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f75a:	eb c9                	jmp    c000f725 <sbrk+0x3d>
c000f75c:	81 05 80 de 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002de80,0x1000
c000f766:	46                   	inc    esi
c000f767:	39 f7                	cmp    edi,esi
c000f769:	74 33                	je     c000f79e <sbrk+0xb6>
c000f76b:	8b 1d 30 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f230
c000f771:	8b 2d 80 de 02 c0    	mov    ebp,DWORD PTR ds:0xc002de80
c000f777:	e8 b1 04 00 00       	call   c000fc2d <Phys::allocatePage()>
c000f77c:	68 01 0c 00 00       	push   0xc01
c000f781:	55                   	push   ebp
c000f782:	50                   	push   eax
c000f783:	53                   	push   ebx
c000f784:	e8 13 26 00 00       	call   c0011d9c <VAS::mapPage(unsigned long, unsigned long, int)>
c000f789:	83 c4 10             	add    esp,0x10
c000f78c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f791:	74 c9                	je     c000f75c <sbrk+0x74>
c000f793:	8b 1d 80 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002de80
c000f799:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f79c:	eb be                	jmp    c000f75c <sbrk+0x74>
c000f79e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f7a3:	75 12                	jne    c000f7b7 <sbrk+0xcf>
c000f7a5:	0f 20 d8             	mov    eax,cr3
c000f7a8:	0f 22 d8             	mov    cr3,eax
c000f7ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f7af:	83 c4 1c             	add    esp,0x1c
c000f7b2:	5b                   	pop    ebx
c000f7b3:	5e                   	pop    esi
c000f7b4:	5f                   	pop    edi
c000f7b5:	5d                   	pop    ebp
c000f7b6:	c3                   	ret    
c000f7b7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f7bb:	89 cb                	mov    ebx,ecx
c000f7bd:	c1 eb 0a             	shr    ebx,0xa
c000f7c0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f7c6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f7cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7d0:	c1 e0 0c             	shl    eax,0xc
c000f7d3:	01 c8                	add    eax,ecx
c000f7d5:	c1 e8 0a             	shr    eax,0xa
c000f7d8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f7dd:	2d 00 00 40 00       	sub    eax,0x400000
c000f7e2:	39 c3                	cmp    ebx,eax
c000f7e4:	77 c5                	ja     c000f7ab <sbrk+0xc3>
c000f7e6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f7e9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f7ef:	39 d8                	cmp    eax,ebx
c000f7f1:	73 f3                	jae    c000f7e6 <sbrk+0xfe>
c000f7f3:	eb b6                	jmp    c000f7ab <sbrk+0xc3>

c000f7f5 <mmap>:
c000f7f5:	83 ec 18             	sub    esp,0x18
c000f7f8:	68 f8 ab 02 c0       	push   0xc002abf8
c000f7fd:	e8 9f ab 00 00       	call   c001a3a1 <Krnl::panic(char const*)>
c000f802:	b8 00 00 00 00       	mov    eax,0x0
c000f807:	83 c4 1c             	add    esp,0x1c
c000f80a:	c3                   	ret    

c000f80b <munmap>:
c000f80b:	83 ec 18             	sub    esp,0x18
c000f80e:	68 fd ab 02 c0       	push   0xc002abfd
c000f813:	e8 89 ab 00 00       	call   c001a3a1 <Krnl::panic(char const*)>
c000f818:	b8 00 00 00 00       	mov    eax,0x0
c000f81d:	83 c4 1c             	add    esp,0x1c
c000f820:	c3                   	ret    

c000f821 <liballoc_lock()>:
c000f821:	fa                   	cli    
c000f822:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c000f828:	b8 00 00 00 00       	mov    eax,0x0
c000f82d:	c3                   	ret    

c000f82e <liballoc_unlock()>:
c000f82e:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c000f833:	48                   	dec    eax
c000f834:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c000f839:	75 01                	jne    c000f83c <liballoc_unlock()+0xe>
c000f83b:	fb                   	sti    
c000f83c:	b8 00 00 00 00       	mov    eax,0x0
c000f841:	c3                   	ret    

c000f842 <liballoc_alloc(int)>:
c000f842:	83 ec 10             	sub    esp,0x10
c000f845:	68 01 08 00 00       	push   0x801
c000f84a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f84e:	ff 35 30 f2 02 c0    	push   DWORD PTR ds:0xc002f230
c000f854:	e8 45 26 00 00       	call   c0011e9e <VAS::allocatePages(int, int)>
c000f859:	83 c4 1c             	add    esp,0x1c
c000f85c:	c3                   	ret    

c000f85d <liballoc_free(void*, int)>:
c000f85d:	83 ec 14             	sub    esp,0x14
c000f860:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f864:	ff 35 30 f2 02 c0    	push   DWORD PTR ds:0xc002f230
c000f86a:	e8 d9 22 00 00       	call   c0011b48 <VAS::freeAllocatedPages(unsigned long)>
c000f86f:	b8 00 00 00 00       	mov    eax,0x0
c000f874:	83 c4 1c             	add    esp,0x1c
c000f877:	c3                   	ret    

c000f878 <realloc>:
c000f878:	83 ec 14             	sub    esp,0x14
c000f87b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f87f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f883:	e8 a4 1d ff ff       	call   c000162c <dlrealloc>
c000f888:	83 c4 1c             	add    esp,0x1c
c000f88b:	c3                   	ret    

c000f88c <malloc>:
c000f88c:	83 ec 18             	sub    esp,0x18
c000f88f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f893:	e8 57 18 ff ff       	call   c00010ef <dlmalloc>
c000f898:	83 c4 1c             	add    esp,0x1c
c000f89b:	c3                   	ret    

c000f89c <free>:
c000f89c:	83 ec 18             	sub    esp,0x18
c000f89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8a3:	e8 ec 14 ff ff       	call   c0000d94 <dlfree>
c000f8a8:	83 c4 1c             	add    esp,0x1c
c000f8ab:	c3                   	ret    

c000f8ac <rfree>:
c000f8ac:	83 ec 18             	sub    esp,0x18
c000f8af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8b3:	e8 dc 14 ff ff       	call   c0000d94 <dlfree>
c000f8b8:	83 c4 1c             	add    esp,0x1c
c000f8bb:	c3                   	ret    

c000f8bc <calloc>:
c000f8bc:	56                   	push   esi
c000f8bd:	53                   	push   ebx
c000f8be:	83 ec 10             	sub    esp,0x10
c000f8c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f8c5:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f8ca:	53                   	push   ebx
c000f8cb:	e8 bc ff ff ff       	call   c000f88c <malloc>
c000f8d0:	89 c6                	mov    esi,eax
c000f8d2:	83 c4 0c             	add    esp,0xc
c000f8d5:	53                   	push   ebx
c000f8d6:	6a 00                	push   0x0
c000f8d8:	50                   	push   eax
c000f8d9:	e8 72 0e ff ff       	call   c0000750 <memset>
c000f8de:	89 f0                	mov    eax,esi
c000f8e0:	83 c4 14             	add    esp,0x14
c000f8e3:	5b                   	pop    ebx
c000f8e4:	5e                   	pop    esi
c000f8e5:	c3                   	ret    

c000f8e6 <Krnl::setBootMessage(char const*)>:
c000f8e6:	57                   	push   edi
c000f8e7:	56                   	push   esi
c000f8e8:	53                   	push   ebx
c000f8e9:	81 ec a4 00 00 00    	sub    esp,0xa4
c000f8ef:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000f8f6:	6a 00                	push   0x0
c000f8f8:	6a 00                	push   0x0
c000f8fa:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000f8fe:	56                   	push   esi
c000f8ff:	e8 4c 0e ff ff       	call   c0000750 <memset>
c000f904:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f907:	e8 60 0e ff ff       	call   c000076c <strlen>
c000f90c:	ba 50 00 00 00       	mov    edx,0x50
c000f911:	83 c4 10             	add    esp,0x10
c000f914:	29 c2                	sub    edx,eax
c000f916:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c000f91a:	d1 ea                	shr    edx,1
c000f91c:	84 c0                	test   al,al
c000f91e:	74 19                	je     c000f939 <Krnl::setBootMessage(char const*)+0x53>
c000f920:	01 d2                	add    edx,edx
c000f922:	43                   	inc    ebx
c000f923:	01 f2                	add    edx,esi
c000f925:	80 cc 0f             	or     ah,0xf
c000f928:	83 c2 02             	add    edx,0x2
c000f92b:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f92f:	43                   	inc    ebx
c000f930:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c000f935:	84 c0                	test   al,al
c000f937:	75 ec                	jne    c000f925 <Krnl::setBootMessage(char const*)+0x3f>
c000f939:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000f93e:	b9 9e 00 00 00       	mov    ecx,0x9e
c000f943:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f945:	81 c4 a0 00 00 00    	add    esp,0xa0
c000f94b:	5b                   	pop    ebx
c000f94c:	5e                   	pop    esi
c000f94d:	5f                   	pop    edi
c000f94e:	c3                   	ret    

c000f94f <kernel_main>:
c000f94f:	57                   	push   edi
c000f950:	bf f9 03 00 00       	mov    edi,0x3f9
c000f955:	56                   	push   esi
c000f956:	89 fa                	mov    edx,edi
c000f958:	53                   	push   ebx
c000f959:	31 f6                	xor    esi,esi
c000f95b:	83 ec 2c             	sub    esp,0x2c
c000f95e:	89 f0                	mov    eax,esi
c000f960:	ee                   	out    dx,al
c000f961:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f966:	b0 80                	mov    al,0x80
c000f968:	89 da                	mov    edx,ebx
c000f96a:	ee                   	out    dx,al
c000f96b:	b1 03                	mov    cl,0x3
c000f96d:	ba f8 03 00 00       	mov    edx,0x3f8
c000f972:	88 c8                	mov    al,cl
c000f974:	ee                   	out    dx,al
c000f975:	89 f0                	mov    eax,esi
c000f977:	89 fa                	mov    edx,edi
c000f979:	ee                   	out    dx,al
c000f97a:	88 c8                	mov    al,cl
c000f97c:	89 da                	mov    edx,ebx
c000f97e:	ee                   	out    dx,al
c000f97f:	b0 c7                	mov    al,0xc7
c000f981:	ba fa 03 00 00       	mov    edx,0x3fa
c000f986:	ee                   	out    dx,al
c000f987:	b0 0b                	mov    al,0xb
c000f989:	ba fc 03 00 00       	mov    edx,0x3fc
c000f98e:	ee                   	out    dx,al
c000f98f:	68 04 ac 02 c0       	push   0xc002ac04
c000f994:	e8 d2 2f 00 00       	call   c001296b <Dbg::kprintf(char const*, ...)>
c000f999:	e8 10 09 00 00       	call   c00102ae <installVgaTextImplementation()>
c000f99e:	0f b6 05 a0 de 02 c0 	movzx  eax,BYTE PTR ds:0xc002dea0
c000f9a5:	83 c4 10             	add    esp,0x10
c000f9a8:	84 c0                	test   al,al
c000f9aa:	74 6c                	je     c000fa18 <kernel_main+0xc9>
c000f9ac:	31 db                	xor    ebx,ebx
c000f9ae:	bf 0a 00 00 00       	mov    edi,0xa
c000f9b3:	be 05 00 00 00       	mov    esi,0x5
c000f9b8:	31 c9                	xor    ecx,ecx
c000f9ba:	eb 2a                	jmp    c000f9e6 <kernel_main+0x97>
c000f9bc:	3c 0d                	cmp    al,0xd
c000f9be:	74 1a                	je     c000f9da <kernel_main+0x8b>
c000f9c0:	3c 0a                	cmp    al,0xa
c000f9c2:	74 40                	je     c000fa04 <kernel_main+0xb5>
c000f9c4:	8d 14 b6             	lea    edx,[esi+esi*4]
c000f9c7:	80 cc 0e             	or     ah,0xe
c000f9ca:	c1 e2 04             	shl    edx,0x4
c000f9cd:	01 ca                	add    edx,ecx
c000f9cf:	41                   	inc    ecx
c000f9d0:	01 fa                	add    edx,edi
c000f9d2:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f9da:	43                   	inc    ebx
c000f9db:	0f b6 83 a0 de 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd2160]
c000f9e2:	84 c0                	test   al,al
c000f9e4:	74 32                	je     c000fa18 <kernel_main+0xc9>
c000f9e6:	80 b9 d6 de 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd212a],0xdb
c000f9ed:	75 cd                	jne    c000f9bc <kernel_main+0x6d>
c000f9ef:	0f b6 91 d5 de 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd212b]
c000f9f6:	83 e2 fe             	and    edx,0xfffffffe
c000f9f9:	81 fa ba 00 00 00    	cmp    edx,0xba
c000f9ff:	75 bb                	jne    c000f9bc <kernel_main+0x6d>
c000fa01:	47                   	inc    edi
c000fa02:	eb b8                	jmp    c000f9bc <kernel_main+0x6d>
c000fa04:	43                   	inc    ebx
c000fa05:	46                   	inc    esi
c000fa06:	31 c9                	xor    ecx,ecx
c000fa08:	0f b6 83 a0 de 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd2160]
c000fa0f:	bf 0a 00 00 00       	mov    edi,0xa
c000fa14:	84 c0                	test   al,al
c000fa16:	75 ce                	jne    c000f9e6 <kernel_main+0x97>
c000fa18:	83 ec 0c             	sub    esp,0xc
c000fa1b:	68 1b ac 02 c0       	push   0xc002ac1b
c000fa20:	e8 c1 fe ff ff       	call   c000f8e6 <Krnl::setBootMessage(char const*)>
c000fa25:	a1 00 05 00 00       	mov    eax,ds:0x500
c000fa2a:	a3 e0 f0 02 c0       	mov    ds:0xc002f0e0,eax
c000fa2f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fa34:	05 ff 0f 00 00       	add    eax,0xfff
c000fa39:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fa3e:	89 04 24             	mov    DWORD PTR [esp],eax
c000fa41:	e8 30 03 00 00       	call   c000fd76 <Phys::physicalMemorySetup(unsigned int)>
c000fa46:	e8 d9 1c 00 00       	call   c0011724 <Virt::virtualMemorySetup()>
c000fa4b:	58                   	pop    eax
c000fa4c:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fa50:	53                   	push   ebx
c000fa51:	e8 1a 1f 00 00       	call   c0011970 <VAS::VAS()>
c000fa56:	89 1d 30 f2 02 c0    	mov    DWORD PTR ds:0xc002f230,ebx
c000fa5c:	e8 bf 05 ff ff       	call   c0000020 <callGlobalConstructors>
c000fa61:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fa68:	e8 1f fe ff ff       	call   c000f88c <malloc>
c000fa6d:	89 04 24             	mov    DWORD PTR [esp],eax
c000fa70:	89 c6                	mov    esi,eax
c000fa72:	e8 0d ed ff ff       	call   c000e784 <Computer::Computer()>
c000fa77:	6a 00                	push   0x0
c000fa79:	89 35 c8 f0 02 c0    	mov    DWORD PTR ds:0xc002f0c8,esi
c000fa7f:	6a 00                	push   0x0
c000fa81:	6a 00                	push   0x0
c000fa83:	56                   	push   esi
c000fa84:	e8 4b f4 ff ff       	call   c000eed4 <Computer::open(int, int, void*)>
c000fa89:	83 c4 14             	add    esp,0x14
c000fa8c:	53                   	push   ebx
c000fa8d:	e8 8e 21 00 00       	call   c0011c20 <VAS::~VAS()>
c000fa92:	83 c4 30             	add    esp,0x30
c000fa95:	5b                   	pop    ebx
c000fa96:	5e                   	pop    esi
c000fa97:	5f                   	pop    edi
c000fa98:	c3                   	ret    

c000fa99 <Phys::allocateDMA(unsigned long)>:
c000fa99:	55                   	push   ebp
c000fa9a:	31 d2                	xor    edx,edx
c000fa9c:	57                   	push   edi
c000fa9d:	31 ed                	xor    ebp,ebp
c000fa9f:	56                   	push   esi
c000faa0:	31 c9                	xor    ecx,ecx
c000faa2:	53                   	push   ebx
c000faa3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000faa7:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000faad:	31 c0                	xor    eax,eax
c000faaf:	c1 ee 0c             	shr    esi,0xc
c000fab2:	eb 17                	jmp    c000facb <Phys::allocateDMA(unsigned long)+0x32>
c000fab4:	85 c9                	test   ecx,ecx
c000fab6:	75 04                	jne    c000fabc <Phys::allocateDMA(unsigned long)+0x23>
c000fab8:	89 d5                	mov    ebp,edx
c000faba:	89 d0                	mov    eax,edx
c000fabc:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fabf:	39 de                	cmp    esi,ebx
c000fac1:	74 20                	je     c000fae3 <Phys::allocateDMA(unsigned long)+0x4a>
c000fac3:	42                   	inc    edx
c000fac4:	89 d9                	mov    ecx,ebx
c000fac6:	83 fa 2f             	cmp    edx,0x2f
c000fac9:	7f 11                	jg     c000fadc <Phys::allocateDMA(unsigned long)+0x43>
c000facb:	80 ba 20 f1 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd0ee0],0x0
c000fad2:	74 e0                	je     c000fab4 <Phys::allocateDMA(unsigned long)+0x1b>
c000fad4:	31 c9                	xor    ecx,ecx
c000fad6:	42                   	inc    edx
c000fad7:	83 fa 2f             	cmp    edx,0x2f
c000fada:	7e ef                	jle    c000facb <Phys::allocateDMA(unsigned long)+0x32>
c000fadc:	5b                   	pop    ebx
c000fadd:	31 c0                	xor    eax,eax
c000fadf:	5e                   	pop    esi
c000fae0:	5f                   	pop    edi
c000fae1:	5d                   	pop    ebp
c000fae2:	c3                   	ret    
c000fae3:	8d 14 30             	lea    edx,[eax+esi*1]
c000fae6:	89 d7                	mov    edi,edx
c000fae8:	4f                   	dec    edi
c000fae9:	79 03                	jns    c000faee <Phys::allocateDMA(unsigned long)+0x55>
c000faeb:	8d 7a 0e             	lea    edi,[edx+0xe]
c000faee:	c1 ff 04             	sar    edi,0x4
c000faf1:	89 c2                	mov    edx,eax
c000faf3:	c1 fa 04             	sar    edx,0x4
c000faf6:	39 fa                	cmp    edx,edi
c000faf8:	75 2f                	jne    c000fb29 <Phys::allocateDMA(unsigned long)+0x90>
c000fafa:	85 db                	test   ebx,ebx
c000fafc:	74 1a                	je     c000fb18 <Phys::allocateDMA(unsigned long)+0x7f>
c000fafe:	be 20 f1 02 c0       	mov    esi,0xc002f120
c000fb03:	8d 90 20 f1 02 c0    	lea    edx,[eax-0x3ffd0ee0]
c000fb09:	f7 d6                	not    esi
c000fb0b:	29 c6                	sub    esi,eax
c000fb0d:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fb10:	42                   	inc    edx
c000fb11:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fb14:	39 d9                	cmp    ecx,ebx
c000fb16:	7f f5                	jg     c000fb0d <Phys::allocateDMA(unsigned long)+0x74>
c000fb18:	85 ff                	test   edi,edi
c000fb1a:	74 13                	je     c000fb2f <Phys::allocateDMA(unsigned long)+0x96>
c000fb1c:	5b                   	pop    ebx
c000fb1d:	05 50 20 0c 00       	add    eax,0xc2050
c000fb22:	5e                   	pop    esi
c000fb23:	c1 e0 0c             	shl    eax,0xc
c000fb26:	5f                   	pop    edi
c000fb27:	5d                   	pop    ebp
c000fb28:	c3                   	ret    
c000fb29:	89 ea                	mov    edx,ebp
c000fb2b:	31 c9                	xor    ecx,ecx
c000fb2d:	eb a7                	jmp    c000fad6 <Phys::allocateDMA(unsigned long)+0x3d>
c000fb2f:	5b                   	pop    ebx
c000fb30:	c1 e0 0c             	shl    eax,0xc
c000fb33:	5e                   	pop    esi
c000fb34:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fb39:	5f                   	pop    edi
c000fb3a:	5d                   	pop    ebp
c000fb3b:	c3                   	ret    

c000fb3c <Phys::freeDMA(unsigned long, unsigned long)>:
c000fb3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fb40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fb44:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fb4a:	c1 e9 0c             	shr    ecx,0xc
c000fb4d:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fb52:	76 25                	jbe    c000fb79 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fb54:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fb59:	c1 e8 0c             	shr    eax,0xc
c000fb5c:	8d 50 10             	lea    edx,[eax+0x10]
c000fb5f:	85 c9                	test   ecx,ecx
c000fb61:	74 15                	je     c000fb78 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fb63:	8d 82 20 f1 02 c0    	lea    eax,[edx-0x3ffd0ee0]
c000fb69:	8d 94 11 20 f1 02 c0 	lea    edx,[ecx+edx*1-0x3ffd0ee0]
c000fb70:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fb73:	40                   	inc    eax
c000fb74:	39 d0                	cmp    eax,edx
c000fb76:	75 f8                	jne    c000fb70 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fb78:	c3                   	ret    
c000fb79:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fb7f:	c1 ea 0c             	shr    edx,0xc
c000fb82:	eb db                	jmp    c000fb5f <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fb84 <Phys::setPageState(unsigned long, bool)>:
c000fb84:	56                   	push   esi
c000fb85:	ba 01 00 00 00       	mov    edx,0x1
c000fb8a:	53                   	push   ebx
c000fb8b:	8b 35 e4 df 02 c0    	mov    esi,DWORD PTR ds:0xc002dfe4
c000fb91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fb95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fb99:	89 c8                	mov    eax,ecx
c000fb9b:	83 e1 07             	and    ecx,0x7
c000fb9e:	c1 e8 03             	shr    eax,0x3
c000fba1:	d3 e3                	shl    ebx,cl
c000fba3:	01 c6                	add    esi,eax
c000fba5:	d3 e2                	shl    edx,cl
c000fba7:	f7 d2                	not    edx
c000fba9:	20 16                	and    BYTE PTR [esi],dl
c000fbab:	03 05 e4 df 02 c0    	add    eax,DWORD PTR ds:0xc002dfe4
c000fbb1:	08 18                	or     BYTE PTR [eax],bl
c000fbb3:	5b                   	pop    ebx
c000fbb4:	5e                   	pop    esi
c000fbb5:	c3                   	ret    

c000fbb6 <Phys::getPageState(unsigned long)>:
c000fbb6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fbba:	8b 15 e4 df 02 c0    	mov    edx,DWORD PTR ds:0xc002dfe4
c000fbc0:	89 c8                	mov    eax,ecx
c000fbc2:	83 e1 07             	and    ecx,0x7
c000fbc5:	c1 e8 03             	shr    eax,0x3
c000fbc8:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fbcc:	d3 f8                	sar    eax,cl
c000fbce:	83 e0 01             	and    eax,0x1
c000fbd1:	c3                   	ret    

c000fbd2 <Phys::freePage(unsigned long)>:
c000fbd2:	53                   	push   ebx
c000fbd3:	83 ec 08             	sub    esp,0x8
c000fbd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fbda:	3d ff ff 07 00       	cmp    eax,0x7ffff
c000fbdf:	76 3a                	jbe    c000fc1b <Phys::freePage(unsigned long)+0x49>
c000fbe1:	c1 e8 0c             	shr    eax,0xc
c000fbe4:	50                   	push   eax
c000fbe5:	89 c3                	mov    ebx,eax
c000fbe7:	e8 ca ff ff ff       	call   c000fbb6 <Phys::getPageState(unsigned long)>
c000fbec:	5a                   	pop    edx
c000fbed:	84 c0                	test   al,al
c000fbef:	74 19                	je     c000fc0a <Phys::freePage(unsigned long)+0x38>
c000fbf1:	83 ec 08             	sub    esp,0x8
c000fbf4:	ff 0d 10 f1 02 c0    	dec    DWORD PTR ds:0xc002f110
c000fbfa:	6a 00                	push   0x0
c000fbfc:	53                   	push   ebx
c000fbfd:	e8 82 ff ff ff       	call   c000fb84 <Phys::setPageState(unsigned long, bool)>
c000fc02:	83 c4 10             	add    esp,0x10
c000fc05:	83 c4 08             	add    esp,0x8
c000fc08:	5b                   	pop    ebx
c000fc09:	c3                   	ret    
c000fc0a:	c7 44 24 10 32 ac 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ac32
c000fc12:	83 c4 08             	add    esp,0x8
c000fc15:	5b                   	pop    ebx
c000fc16:	e9 86 a7 00 00       	jmp    c001a3a1 <Krnl::panic(char const*)>
c000fc1b:	68 00 10 00 00       	push   0x1000
c000fc20:	50                   	push   eax
c000fc21:	e8 16 ff ff ff       	call   c000fb3c <Phys::freeDMA(unsigned long, unsigned long)>
c000fc26:	59                   	pop    ecx
c000fc27:	5b                   	pop    ebx
c000fc28:	83 c4 08             	add    esp,0x8
c000fc2b:	5b                   	pop    ebx
c000fc2c:	c3                   	ret    

c000fc2d <Phys::allocatePage()>:
c000fc2d:	56                   	push   esi
c000fc2e:	53                   	push   ebx
c000fc2f:	51                   	push   ecx
c000fc30:	8b 35 04 f1 02 c0    	mov    esi,DWORD PTR ds:0xc002f104
c000fc36:	89 f3                	mov    ebx,esi
c000fc38:	eb 0a                	jmp    c000fc44 <Phys::allocatePage()+0x17>
c000fc3a:	89 1d 04 f1 02 c0    	mov    DWORD PTR ds:0xc002f104,ebx
c000fc40:	39 de                	cmp    esi,ebx
c000fc42:	74 24                	je     c000fc68 <Phys::allocatePage()+0x3b>
c000fc44:	53                   	push   ebx
c000fc45:	e8 6c ff ff ff       	call   c000fbb6 <Phys::getPageState(unsigned long)>
c000fc4a:	5a                   	pop    edx
c000fc4b:	84 c0                	test   al,al
c000fc4d:	74 77                	je     c000fcc6 <Phys::allocatePage()+0x99>
c000fc4f:	43                   	inc    ebx
c000fc50:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fc56:	75 e2                	jne    c000fc3a <Phys::allocatePage()+0xd>
c000fc58:	31 db                	xor    ebx,ebx
c000fc5a:	c7 05 04 f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f104,0x0
c000fc64:	39 de                	cmp    esi,ebx
c000fc66:	75 dc                	jne    c000fc44 <Phys::allocatePage()+0x17>
c000fc68:	83 ec 0c             	sub    esp,0xc
c000fc6b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fc70:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fc73:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000fc79:	e8 1a 2a 00 00       	call   c0012698 <VAS::scanForEviction()>
c000fc7e:	83 c4 10             	add    esp,0x10
c000fc81:	85 c0                	test   eax,eax
c000fc83:	75 59                	jne    c000fcde <Phys::allocatePage()+0xb1>
c000fc85:	83 ec 0c             	sub    esp,0xc
c000fc88:	68 48 ac 02 c0       	push   0xc002ac48
c000fc8d:	e8 d9 2c 00 00       	call   c001296b <Dbg::kprintf(char const*, ...)>
c000fc92:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000fc99:	e8 fb fd ff ff       	call   c000fa99 <Phys::allocateDMA(unsigned long)>
c000fc9e:	83 c4 10             	add    esp,0x10
c000fca1:	85 c0                	test   eax,eax
c000fca3:	75 39                	jne    c000fcde <Phys::allocatePage()+0xb1>
c000fca5:	83 ec 0c             	sub    esp,0xc
c000fca8:	68 59 ac 02 c0       	push   0xc002ac59
c000fcad:	e8 ef a6 00 00       	call   c001a3a1 <Krnl::panic(char const*)>
c000fcb2:	83 c4 10             	add    esp,0x10
c000fcb5:	8b 1d 04 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f104
c000fcbb:	53                   	push   ebx
c000fcbc:	e8 f5 fe ff ff       	call   c000fbb6 <Phys::getPageState(unsigned long)>
c000fcc1:	5a                   	pop    edx
c000fcc2:	84 c0                	test   al,al
c000fcc4:	75 89                	jne    c000fc4f <Phys::allocatePage()+0x22>
c000fcc6:	6a 01                	push   0x1
c000fcc8:	53                   	push   ebx
c000fcc9:	e8 b6 fe ff ff       	call   c000fb84 <Phys::setPageState(unsigned long, bool)>
c000fcce:	a1 04 f1 02 c0       	mov    eax,ds:0xc002f104
c000fcd3:	59                   	pop    ecx
c000fcd4:	ff 05 10 f1 02 c0    	inc    DWORD PTR ds:0xc002f110
c000fcda:	c1 e0 0c             	shl    eax,0xc
c000fcdd:	5b                   	pop    ebx
c000fcde:	5a                   	pop    edx
c000fcdf:	5b                   	pop    ebx
c000fce0:	5e                   	pop    esi
c000fce1:	c3                   	ret    

c000fce2 <Phys::allocateContiguousPages(int)>:
c000fce2:	57                   	push   edi
c000fce3:	56                   	push   esi
c000fce4:	53                   	push   ebx
c000fce5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fce9:	fa                   	cli    
c000fcea:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c000fcf0:	31 db                	xor    ebx,ebx
c000fcf2:	85 db                	test   ebx,ebx
c000fcf4:	75 11                	jne    c000fd07 <Phys::allocateContiguousPages(int)+0x25>
c000fcf6:	e8 32 ff ff ff       	call   c000fc2d <Phys::allocatePage()>
c000fcfb:	83 fe 01             	cmp    esi,0x1
c000fcfe:	89 c7                	mov    edi,eax
c000fd00:	74 21                	je     c000fd23 <Phys::allocateContiguousPages(int)+0x41>
c000fd02:	bb 01 00 00 00       	mov    ebx,0x1
c000fd07:	e8 21 ff ff ff       	call   c000fc2d <Phys::allocatePage()>
c000fd0c:	89 da                	mov    edx,ebx
c000fd0e:	c1 e2 0c             	shl    edx,0xc
c000fd11:	01 fa                	add    edx,edi
c000fd13:	39 c2                	cmp    edx,eax
c000fd15:	74 20                	je     c000fd37 <Phys::allocateContiguousPages(int)+0x55>
c000fd17:	bb 01 00 00 00       	mov    ebx,0x1
c000fd1c:	89 c7                	mov    edi,eax
c000fd1e:	83 fe 01             	cmp    esi,0x1
c000fd21:	75 e4                	jne    c000fd07 <Phys::allocateContiguousPages(int)+0x25>
c000fd23:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c000fd28:	48                   	dec    eax
c000fd29:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c000fd2e:	75 01                	jne    c000fd31 <Phys::allocateContiguousPages(int)+0x4f>
c000fd30:	fb                   	sti    
c000fd31:	89 f8                	mov    eax,edi
c000fd33:	5b                   	pop    ebx
c000fd34:	5e                   	pop    esi
c000fd35:	5f                   	pop    edi
c000fd36:	c3                   	ret    
c000fd37:	43                   	inc    ebx
c000fd38:	39 f3                	cmp    ebx,esi
c000fd3a:	75 b6                	jne    c000fcf2 <Phys::allocateContiguousPages(int)+0x10>
c000fd3c:	eb e5                	jmp    c000fd23 <Phys::allocateContiguousPages(int)+0x41>

c000fd3e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fd3e:	56                   	push   esi
c000fd3f:	53                   	push   ebx
c000fd40:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fd44:	39 1d 08 f1 02 c0    	cmp    DWORD PTR ds:0xc002f108,ebx
c000fd4a:	73 06                	jae    c000fd52 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fd4c:	89 1d 08 f1 02 c0    	mov    DWORD PTR ds:0xc002f108,ebx
c000fd52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fd56:	c1 eb 0c             	shr    ebx,0xc
c000fd59:	c1 e8 0c             	shr    eax,0xc
c000fd5c:	39 d8                	cmp    eax,ebx
c000fd5e:	73 13                	jae    c000fd73 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fd60:	6a 00                	push   0x0
c000fd62:	8d 70 01             	lea    esi,[eax+0x1]
c000fd65:	50                   	push   eax
c000fd66:	e8 19 fe ff ff       	call   c000fb84 <Phys::setPageState(unsigned long, bool)>
c000fd6b:	5a                   	pop    edx
c000fd6c:	89 f0                	mov    eax,esi
c000fd6e:	59                   	pop    ecx
c000fd6f:	39 f3                	cmp    ebx,esi
c000fd71:	75 ed                	jne    c000fd60 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fd73:	5b                   	pop    ebx
c000fd74:	5e                   	pop    esi
c000fd75:	c3                   	ret    

c000fd76 <Phys::physicalMemorySetup(unsigned int)>:
c000fd76:	55                   	push   ebp
c000fd77:	57                   	push   edi
c000fd78:	56                   	push   esi
c000fd79:	53                   	push   ebx
c000fd7a:	31 db                	xor    ebx,ebx
c000fd7c:	83 ec 40             	sub    esp,0x40
c000fd7f:	6a 30                	push   0x30
c000fd81:	6a 00                	push   0x0
c000fd83:	68 20 f1 02 c0       	push   0xc002f120
c000fd88:	e8 c3 09 ff ff       	call   c0000750 <memset>
c000fd8d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fd91:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fd96:	05 00 10 00 00       	add    eax,0x1000
c000fd9b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fd9f:	83 c4 10             	add    esp,0x10
c000fda2:	83 ec 08             	sub    esp,0x8
c000fda5:	6a 01                	push   0x1
c000fda7:	53                   	push   ebx
c000fda8:	43                   	inc    ebx
c000fda9:	e8 d6 fd ff ff       	call   c000fb84 <Phys::setPageState(unsigned long, bool)>
c000fdae:	83 c4 10             	add    esp,0x10
c000fdb1:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fdb7:	75 e9                	jne    c000fda2 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000fdb9:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fdc0:	66 85 c0             	test   ax,ax
c000fdc3:	0f 84 8e 01 00 00    	je     c000ff57 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000fdc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fdcd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fdd5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fdd9:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fdde:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fde2:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fdea:	eb 15                	jmp    c000fe01 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000fdec:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fdf0:	83 c3 18             	add    ebx,0x18
c000fdf3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fdf7:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fdfb:	0f 84 66 01 00 00    	je     c000ff67 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fe01:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fe04:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fe07:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fe0a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fe0e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fe12:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fe14:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fe17:	01 f0                	add    eax,esi
c000fe19:	55                   	push   ebp
c000fe1a:	11 fa                	adc    edx,edi
c000fe1c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fe20:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fe24:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fe28:	56                   	push   esi
c000fe29:	68 94 ac 02 c0       	push   0xc002ac94
c000fe2e:	e8 38 2b 00 00       	call   c001296b <Dbg::kprintf(char const*, ...)>
c000fe33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fe37:	83 c4 10             	add    esp,0x10
c000fe3a:	09 f8                	or     eax,edi
c000fe3c:	0f 85 25 01 00 00    	jne    c000ff67 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fe42:	4d                   	dec    ebp
c000fe43:	75 a7                	jne    c000fdec <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fe45:	ba 00 00 08 00       	mov    edx,0x80000
c000fe4a:	89 c1                	mov    ecx,eax
c000fe4c:	39 f2                	cmp    edx,esi
c000fe4e:	19 f9                	sbb    ecx,edi
c000fe50:	0f 82 a7 00 00 00    	jb     c000fefd <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fe56:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fe5a:	89 c1                	mov    ecx,eax
c000fe5c:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fe60:	0f 83 97 00 00 00    	jae    c000fefd <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fe66:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fe6b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fe6f:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fe73:	39 fa                	cmp    edx,edi
c000fe75:	19 e8                	sbb    eax,ebp
c000fe77:	0f 82 14 01 00 00    	jb     c000ff91 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000fe7d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fe81:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fe85:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000fe8b:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fe90:	83 d5 ff             	adc    ebp,0xffffffff
c000fe93:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000fe97:	31 c0                	xor    eax,eax
c000fe99:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000fe9d:	39 fa                	cmp    edx,edi
c000fe9f:	89 c1                	mov    ecx,eax
c000fea1:	19 e9                	sbb    ecx,ebp
c000fea3:	0f 83 43 ff ff ff    	jae    c000fdec <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fea9:	be 00 00 08 00       	mov    esi,0x80000
c000feae:	50                   	push   eax
c000feaf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000feb3:	57                   	push   edi
c000feb4:	56                   	push   esi
c000feb5:	68 b8 ac 02 c0       	push   0xc002acb8
c000feba:	e8 ac 2a 00 00       	call   c001296b <Dbg::kprintf(char const*, ...)>
c000febf:	5a                   	pop    edx
c000fec0:	59                   	pop    ecx
c000fec1:	57                   	push   edi
c000fec2:	56                   	push   esi
c000fec3:	e8 76 fe ff ff       	call   c000fd3e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fec8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fecc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fed0:	83 c4 0c             	add    esp,0xc
c000fed3:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fed7:	03 05 14 f1 02 c0    	add    eax,DWORD PTR ds:0xc002f114
c000fedd:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fee4:	a3 14 f1 02 c0       	mov    ds:0xc002f114,eax
c000fee9:	52                   	push   edx
c000feea:	50                   	push   eax
c000feeb:	68 75 ac 02 c0       	push   0xc002ac75
c000fef0:	e8 76 2a 00 00       	call   c001296b <Dbg::kprintf(char const*, ...)>
c000fef5:	83 c4 10             	add    esp,0x10
c000fef8:	e9 ef fe ff ff       	jmp    c000fdec <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fefd:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000ff01:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ff05:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ff09:	39 ea                	cmp    edx,ebp
c000ff0b:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000ff0f:	0f 82 d7 fe ff ff    	jb     c000fdec <Phys::physicalMemorySetup(unsigned int)+0x76>
c000ff15:	ba ff 1f 00 00       	mov    edx,0x1fff
c000ff1a:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000ff1e:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000ff22:	0f 83 c4 fe ff ff    	jae    c000fdec <Phys::physicalMemorySetup(unsigned int)+0x76>
c000ff28:	39 ee                	cmp    esi,ebp
c000ff2a:	89 f8                	mov    eax,edi
c000ff2c:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000ff30:	0f 83 78 ff ff ff    	jae    c000feae <Phys::physicalMemorySetup(unsigned int)+0x138>
c000ff36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ff3a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ff3e:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ff42:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000ff46:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000ff4a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ff4e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ff52:	e9 57 ff ff ff       	jmp    c000feae <Phys::physicalMemorySetup(unsigned int)+0x138>
c000ff57:	83 ec 0c             	sub    esp,0xc
c000ff5a:	68 67 ac 02 c0       	push   0xc002ac67
c000ff5f:	e8 3d a4 00 00       	call   c001a3a1 <Krnl::panic(char const*)>
c000ff64:	83 c4 10             	add    esp,0x10
c000ff67:	bb 40 01 00 00       	mov    ebx,0x140
c000ff6c:	83 ec 08             	sub    esp,0x8
c000ff6f:	6a 00                	push   0x0
c000ff71:	53                   	push   ebx
c000ff72:	43                   	inc    ebx
c000ff73:	e8 0c fc ff ff       	call   c000fb84 <Phys::setPageState(unsigned long, bool)>
c000ff78:	ff 05 14 f1 02 c0    	inc    DWORD PTR ds:0xc002f114
c000ff7e:	83 c4 10             	add    esp,0x10
c000ff81:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000ff87:	75 e3                	jne    c000ff6c <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c000ff89:	83 c4 3c             	add    esp,0x3c
c000ff8c:	5b                   	pop    ebx
c000ff8d:	5e                   	pop    esi
c000ff8e:	5f                   	pop    edi
c000ff8f:	5d                   	pop    ebp
c000ff90:	c3                   	ret    
c000ff91:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000ff99:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ffa1:	e9 d7 fe ff ff       	jmp    c000fe7d <Phys::physicalMemorySetup(unsigned int)+0x107>

c000ffa6 <Pipe::isAtty()>:
c000ffa6:	31 c0                	xor    eax,eax
c000ffa8:	c3                   	ret    
c000ffa9:	90                   	nop

c000ffaa <Pipe::~Pipe()>:
c000ffaa:	83 ec 0c             	sub    esp,0xc
c000ffad:	ba 24 ad 02 c0       	mov    edx,0xc002ad24
c000ffb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffb6:	89 10                	mov    DWORD PTR [eax],edx
c000ffb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffbc:	83 ec 0c             	sub    esp,0xc
c000ffbf:	50                   	push   eax
c000ffc0:	e8 3f 13 00 00       	call   c0011304 <UnixFile::~UnixFile()>
c000ffc5:	83 c4 10             	add    esp,0x10
c000ffc8:	90                   	nop
c000ffc9:	83 c4 0c             	add    esp,0xc
c000ffcc:	c3                   	ret    
c000ffcd:	90                   	nop

c000ffce <Pipe::~Pipe()>:
c000ffce:	83 ec 0c             	sub    esp,0xc
c000ffd1:	83 ec 0c             	sub    esp,0xc
c000ffd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffd8:	e8 cd ff ff ff       	call   c000ffaa <Pipe::~Pipe()>
c000ffdd:	83 c4 10             	add    esp,0x10
c000ffe0:	83 ec 08             	sub    esp,0x8
c000ffe3:	6a 20                	push   0x20
c000ffe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffe9:	e8 9d 28 00 00       	call   c001288b <operator delete(void*, unsigned long)>
c000ffee:	83 c4 10             	add    esp,0x10
c000fff1:	83 c4 0c             	add    esp,0xc
c000fff4:	c3                   	ret    
c000fff5:	90                   	nop

c000fff6 <Pipe::read(unsigned long long, void*, int*)>:
c000fff6:	55                   	push   ebp
c000fff7:	57                   	push   edi
c000fff8:	56                   	push   esi
c000fff9:	53                   	push   ebx
c000fffa:	83 ec 1c             	sub    esp,0x1c
c000fffd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010001:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010005:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010009:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c001000c:	89 c8                	mov    eax,ecx
c001000e:	99                   	cdq    
c001000f:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0010013:	74 24                	je     c0010039 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0010015:	39 f9                	cmp    ecx,edi
c0010017:	89 d1                	mov    ecx,edx
c0010019:	19 f1                	sbb    ecx,esi
c001001b:	73 1c                	jae    c0010039 <Pipe::read(unsigned long long, void*, int*)+0x43>
c001001d:	fa                   	cli    
c001001e:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c0010024:	e8 2b e1 00 00       	call   c001e154 <schedule()>
c0010029:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001002e:	48                   	dec    eax
c001002f:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c0010034:	75 d3                	jne    c0010009 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010036:	fb                   	sti    
c0010037:	eb d0                	jmp    c0010009 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010039:	39 f8                	cmp    eax,edi
c001003b:	89 d1                	mov    ecx,edx
c001003d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010040:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0010044:	19 f1                	sbb    ecx,esi
c0010046:	73 07                	jae    c001004f <Pipe::read(unsigned long long, void*, int*)+0x59>
c0010048:	89 04 24             	mov    DWORD PTR [esp],eax
c001004b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001004f:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0010052:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0010055:	29 f7                	sub    edi,esi
c0010057:	89 f8                	mov    eax,edi
c0010059:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001005d:	99                   	cdq    
c001005e:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0010061:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010065:	19 d0                	sbb    eax,edx
c0010067:	73 07                	jae    c0010070 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0010069:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001006c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010070:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c0010073:	89 ea                	mov    edx,ebp
c0010075:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0010079:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001007e:	74 0d                	je     c001008d <Pipe::read(unsigned long long, void*, int*)+0x97>
c0010080:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010083:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0010087:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001008b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001008d:	85 d2                	test   edx,edx
c001008f:	74 11                	je     c00100a2 <Pipe::read(unsigned long long, void*, int*)+0xac>
c0010091:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010095:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0010098:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001009c:	89 d1                	mov    ecx,edx
c001009e:	89 c7                	mov    edi,eax
c00100a0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00100a2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00100a5:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00100a8:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00100ab:	99                   	cdq    
c00100ac:	89 f7                	mov    edi,esi
c00100ae:	03 04 24             	add    eax,DWORD PTR [esp]
c00100b1:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00100b5:	c1 ff 1f             	sar    edi,0x1f
c00100b8:	57                   	push   edi
c00100b9:	56                   	push   esi
c00100ba:	52                   	push   edx
c00100bb:	50                   	push   eax
c00100bc:	e8 d3 72 01 00       	call   c0027394 <__umoddi3>
c00100c1:	83 c4 10             	add    esp,0x10
c00100c4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00100c7:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00100cc:	75 10                	jne    c00100de <Pipe::read(unsigned long long, void*, int*)+0xe8>
c00100ce:	83 ec 0c             	sub    esp,0xc
c00100d1:	68 e1 ac 02 c0       	push   0xc002ace1
c00100d6:	e8 c6 a2 00 00       	call   c001a3a1 <Krnl::panic(char const*)>
c00100db:	83 c4 10             	add    esp,0x10
c00100de:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00100e2:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00100e5:	89 10                	mov    DWORD PTR [eax],edx
c00100e7:	83 c4 1c             	add    esp,0x1c
c00100ea:	31 c0                	xor    eax,eax
c00100ec:	5b                   	pop    ebx
c00100ed:	5e                   	pop    esi
c00100ee:	5f                   	pop    edi
c00100ef:	5d                   	pop    ebp
c00100f0:	c3                   	ret    
c00100f1:	90                   	nop

c00100f2 <Pipe::write(unsigned long long, void*, int*)>:
c00100f2:	55                   	push   ebp
c00100f3:	57                   	push   edi
c00100f4:	56                   	push   esi
c00100f5:	53                   	push   ebx
c00100f6:	83 ec 1c             	sub    esp,0x1c
c00100f9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00100fd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010101:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0010104:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010108:	89 04 24             	mov    DWORD PTR [esp],eax
c001010b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001010f:	89 d8                	mov    eax,ebx
c0010111:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0010114:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0010118:	89 d6                	mov    esi,edx
c001011a:	89 d7                	mov    edi,edx
c001011c:	c1 ff 1f             	sar    edi,0x1f
c001011f:	03 34 24             	add    esi,DWORD PTR [esp]
c0010122:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0010126:	c1 f8 1f             	sar    eax,0x1f
c0010129:	39 f3                	cmp    ebx,esi
c001012b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001012f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010133:	19 f8                	sbb    eax,edi
c0010135:	b8 01 00 00 00       	mov    eax,0x1
c001013a:	72 6e                	jb     c00101aa <Pipe::write(unsigned long long, void*, int*)+0xb8>
c001013c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001013f:	01 d0                	add    eax,edx
c0010141:	99                   	cdq    
c0010142:	f7 fb                	idiv   ebx
c0010144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010148:	29 d3                	sub    ebx,edx
c001014a:	89 d7                	mov    edi,edx
c001014c:	89 de                	mov    esi,ebx
c001014e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0010151:	c1 fb 1f             	sar    ebx,0x1f
c0010154:	39 f2                	cmp    edx,esi
c0010156:	19 d8                	sbb    eax,ebx
c0010158:	b8 00 00 00 00       	mov    eax,0x0
c001015d:	72 04                	jb     c0010163 <Pipe::write(unsigned long long, void*, int*)+0x71>
c001015f:	89 d0                	mov    eax,edx
c0010161:	29 f0                	sub    eax,esi
c0010163:	89 d3                	mov    ebx,edx
c0010165:	29 c3                	sub    ebx,eax
c0010167:	74 0b                	je     c0010174 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0010169:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c001016c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0010170:	89 d9                	mov    ecx,ebx
c0010172:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010174:	85 c0                	test   eax,eax
c0010176:	74 0d                	je     c0010185 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0010178:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001017c:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001017f:	89 de                	mov    esi,ebx
c0010181:	89 c1                	mov    ecx,eax
c0010183:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010185:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0010188:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001018d:	75 10                	jne    c001019f <Pipe::write(unsigned long long, void*, int*)+0xad>
c001018f:	83 ec 0c             	sub    esp,0xc
c0010192:	68 fd ac 02 c0       	push   0xc002acfd
c0010197:	e8 05 a2 00 00       	call   c001a3a1 <Krnl::panic(char const*)>
c001019c:	83 c4 10             	add    esp,0x10
c001019f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00101a3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00101a6:	89 08                	mov    DWORD PTR [eax],ecx
c00101a8:	31 c0                	xor    eax,eax
c00101aa:	83 c4 1c             	add    esp,0x1c
c00101ad:	5b                   	pop    ebx
c00101ae:	5e                   	pop    esi
c00101af:	5f                   	pop    edi
c00101b0:	5d                   	pop    ebp
c00101b1:	c3                   	ret    

c00101b2 <Pipe::Pipe(int)>:
c00101b2:	83 ec 0c             	sub    esp,0xc
c00101b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101b9:	83 ec 08             	sub    esp,0x8
c00101bc:	6a 00                	push   0x0
c00101be:	50                   	push   eax
c00101bf:	e8 5e 0f 00 00       	call   c0011122 <UnixFile::UnixFile(int)>
c00101c4:	83 c4 10             	add    esp,0x10
c00101c7:	ba 24 ad 02 c0       	mov    edx,0xc002ad24
c00101cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101d0:	89 10                	mov    DWORD PTR [eax],edx
c00101d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101d6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00101da:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00101dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101e1:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00101e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101ec:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00101f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00101f7:	83 ec 0c             	sub    esp,0xc
c00101fa:	50                   	push   eax
c00101fb:	e8 8c f6 ff ff       	call   c000f88c <malloc>
c0010200:	83 c4 10             	add    esp,0x10
c0010203:	89 c2                	mov    edx,eax
c0010205:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010209:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001020c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010210:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010214:	90                   	nop
c0010215:	83 c4 0c             	add    esp,0xc
c0010218:	c3                   	ret    
c0010219:	90                   	nop

c001021a <VgaText::isAtty()>:
c001021a:	b0 01                	mov    al,0x1
c001021c:	c3                   	ret    
c001021d:	90                   	nop

c001021e <VgaText::~VgaText()>:
c001021e:	83 ec 0c             	sub    esp,0xc
c0010221:	ba e0 ad 02 c0       	mov    edx,0xc002ade0
c0010226:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001022a:	89 10                	mov    DWORD PTR [eax],edx
c001022c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010230:	83 ec 0c             	sub    esp,0xc
c0010233:	50                   	push   eax
c0010234:	e8 cb 10 00 00       	call   c0011304 <UnixFile::~UnixFile()>
c0010239:	83 c4 10             	add    esp,0x10
c001023c:	90                   	nop
c001023d:	83 c4 0c             	add    esp,0xc
c0010240:	c3                   	ret    
c0010241:	90                   	nop

c0010242 <VgaText::~VgaText()>:
c0010242:	83 ec 0c             	sub    esp,0xc
c0010245:	83 ec 0c             	sub    esp,0xc
c0010248:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001024c:	e8 cd ff ff ff       	call   c001021e <VgaText::~VgaText()>
c0010251:	83 c4 10             	add    esp,0x10
c0010254:	83 ec 08             	sub    esp,0x8
c0010257:	68 c4 02 00 00       	push   0x2c4
c001025c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010260:	e8 26 26 00 00       	call   c001288b <operator delete(void*, unsigned long)>
c0010265:	83 c4 10             	add    esp,0x10
c0010268:	83 c4 0c             	add    esp,0xc
c001026b:	c3                   	ret    

c001026c <VgaText::read(unsigned long long, void*, int*)>:
c001026c:	83 ec 10             	sub    esp,0x10
c001026f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010273:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010277:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001027b:	e8 a0 5b 00 00       	call   c0015e20 <readKeyboard(VgaText*, char*, unsigned long)>
c0010280:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010284:	89 02                	mov    DWORD PTR [edx],eax
c0010286:	31 c0                	xor    eax,eax
c0010288:	83 c4 1c             	add    esp,0x1c
c001028b:	c3                   	ret    

c001028c <setTerminalScrollLock(bool)>:
c001028c:	c3                   	ret    

c001028d <addToTerminalCycle(VgaText*)>:
c001028d:	8b 15 80 f1 02 c0    	mov    edx,DWORD PTR ds:0xc002f180
c0010293:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010297:	85 d2                	test   edx,edx
c0010299:	75 09                	jne    c00102a4 <addToTerminalCycle(VgaText*)+0x17>
c001029b:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c001029e:	a3 80 f1 02 c0       	mov    ds:0xc002f180,eax
c00102a3:	c3                   	ret    
c00102a4:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c00102a7:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00102aa:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c00102ad:	c3                   	ret    

c00102ae <installVgaTextImplementation()>:
c00102ae:	83 ec 10             	sub    esp,0x10
c00102b1:	6a 20                	push   0x20
c00102b3:	6a 00                	push   0x0
c00102b5:	68 60 f1 02 c0       	push   0xc002f160
c00102ba:	e8 91 04 ff ff       	call   c0000750 <memset>
c00102bf:	83 c4 1c             	add    esp,0x1c
c00102c2:	c3                   	ret    

c00102c3 <scrollTerminalScrollLock(int)>:
c00102c3:	c3                   	ret    

c00102c4 <VgaText::updateTitle()>:
c00102c4:	53                   	push   ebx
c00102c5:	31 c0                	xor    eax,eax
c00102c7:	83 ec 58             	sub    esp,0x58
c00102ca:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00102ce:	89 e1                	mov    ecx,esp
c00102d0:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c00102d4:	40                   	inc    eax
c00102d5:	83 f8 50             	cmp    eax,0x50
c00102d8:	75 f6                	jne    c00102d0 <VgaText::updateTitle()+0xc>
c00102da:	31 c0                	xor    eax,eax
c00102dc:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c00102e3:	84 db                	test   bl,bl
c00102e5:	74 06                	je     c00102ed <VgaText::updateTitle()+0x29>
c00102e7:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c00102ea:	40                   	inc    eax
c00102eb:	eb ef                	jmp    c00102dc <VgaText::updateTitle()+0x18>
c00102ed:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c00102f0:	85 c0                	test   eax,eax
c00102f2:	74 09                	je     c00102fd <VgaText::updateTitle()+0x39>
c00102f4:	53                   	push   ebx
c00102f5:	53                   	push   ebx
c00102f6:	51                   	push   ecx
c00102f7:	52                   	push   edx
c00102f8:	ff d0                	call   eax
c00102fa:	83 c4 10             	add    esp,0x10
c00102fd:	83 c4 58             	add    esp,0x58
c0010300:	5b                   	pop    ebx
c0010301:	c3                   	ret    

c0010302 <VgaText::load()>:
c0010302:	53                   	push   ebx
c0010303:	31 c0                	xor    eax,eax
c0010305:	83 ec 58             	sub    esp,0x58
c0010308:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001030c:	89 e2                	mov    edx,esp
c001030e:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010312:	40                   	inc    eax
c0010313:	83 f8 50             	cmp    eax,0x50
c0010316:	75 f6                	jne    c001030e <VgaText::load()+0xc>
c0010318:	31 c0                	xor    eax,eax
c001031a:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c0010321:	84 c9                	test   cl,cl
c0010323:	74 06                	je     c001032b <VgaText::load()+0x29>
c0010325:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010328:	40                   	inc    eax
c0010329:	eb ef                	jmp    c001031a <VgaText::load()+0x18>
c001032b:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c001032e:	85 c0                	test   eax,eax
c0010330:	74 09                	je     c001033b <VgaText::load()+0x39>
c0010332:	51                   	push   ecx
c0010333:	51                   	push   ecx
c0010334:	52                   	push   edx
c0010335:	53                   	push   ebx
c0010336:	ff d0                	call   eax
c0010338:	83 c4 10             	add    esp,0x10
c001033b:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c001033e:	85 c0                	test   eax,eax
c0010340:	74 09                	je     c001034b <VgaText::load()+0x49>
c0010342:	83 ec 0c             	sub    esp,0xc
c0010345:	53                   	push   ebx
c0010346:	ff d0                	call   eax
c0010348:	83 c4 10             	add    esp,0x10
c001034b:	83 c4 58             	add    esp,0x58
c001034e:	5b                   	pop    ebx
c001034f:	c3                   	ret    

c0010350 <VgaText::updateCursor()>:
c0010350:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010354:	39 05 84 f1 02 c0    	cmp    DWORD PTR ds:0xc002f184,eax
c001035a:	75 09                	jne    c0010365 <VgaText::updateCursor()+0x15>
c001035c:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c001035f:	85 c0                	test   eax,eax
c0010361:	74 02                	je     c0010365 <VgaText::updateCursor()+0x15>
c0010363:	ff e0                	jmp    eax
c0010365:	c3                   	ret    

c0010366 <VgaText::showCursor(bool)>:
c0010366:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001036a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001036e:	88 50 20             	mov    BYTE PTR [eax+0x20],dl
c0010371:	c3                   	ret    

c0010372 <VgaText::disableBlink(bool)>:
c0010372:	56                   	push   esi
c0010373:	53                   	push   ebx
c0010374:	51                   	push   ecx
c0010375:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010379:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001037d:	39 1d 84 f1 02 c0    	cmp    DWORD PTR ds:0xc002f184,ebx
c0010383:	75 15                	jne    c001039a <VgaText::disableBlink(bool)+0x28>
c0010385:	8b 43 78             	mov    eax,DWORD PTR [ebx+0x78]
c0010388:	85 c0                	test   eax,eax
c001038a:	74 0e                	je     c001039a <VgaText::disableBlink(bool)+0x28>
c001038c:	89 f1                	mov    ecx,esi
c001038e:	52                   	push   edx
c001038f:	52                   	push   edx
c0010390:	0f b6 d1             	movzx  edx,cl
c0010393:	52                   	push   edx
c0010394:	53                   	push   ebx
c0010395:	ff d0                	call   eax
c0010397:	83 c4 10             	add    esp,0x10
c001039a:	89 f0                	mov    eax,esi
c001039c:	83 f0 01             	xor    eax,0x1
c001039f:	88 43 21             	mov    BYTE PTR [ebx+0x21],al
c00103a2:	58                   	pop    eax
c00103a3:	5b                   	pop    ebx
c00103a4:	5e                   	pop    esi
c00103a5:	c3                   	ret    

c00103a6 <VgaText::doANSI_SGR(int)>:
c00103a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103ae:	85 d2                	test   edx,edx
c00103b0:	75 0b                	jne    c00103bd <VgaText::doANSI_SGR(int)+0x17>
c00103b2:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00103b5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00103b8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00103bb:	eb 59                	jmp    c0010416 <VgaText::doANSI_SGR(int)+0x70>
c00103bd:	83 fa 07             	cmp    edx,0x7
c00103c0:	75 0b                	jne    c00103cd <VgaText::doANSI_SGR(int)+0x27>
c00103c2:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00103c5:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00103c8:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00103cb:	eb 49                	jmp    c0010416 <VgaText::doANSI_SGR(int)+0x70>
c00103cd:	83 fa 1b             	cmp    edx,0x1b
c00103d0:	74 e0                	je     c00103b2 <VgaText::doANSI_SGR(int)+0xc>
c00103d2:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00103d5:	83 f9 07             	cmp    ecx,0x7
c00103d8:	77 09                	ja     c00103e3 <VgaText::doANSI_SGR(int)+0x3d>
c00103da:	8b 14 8d 20 e0 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd1fe0]
c00103e1:	eb 20                	jmp    c0010403 <VgaText::doANSI_SGR(int)+0x5d>
c00103e3:	8d 4a d8             	lea    ecx,[edx-0x28]
c00103e6:	83 f9 07             	cmp    ecx,0x7
c00103e9:	77 09                	ja     c00103f4 <VgaText::doANSI_SGR(int)+0x4e>
c00103eb:	8b 14 8d 20 e0 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd1fe0]
c00103f2:	eb 22                	jmp    c0010416 <VgaText::doANSI_SGR(int)+0x70>
c00103f4:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00103f7:	83 f9 07             	cmp    ecx,0x7
c00103fa:	77 0b                	ja     c0010407 <VgaText::doANSI_SGR(int)+0x61>
c00103fc:	8b 14 95 d8 de 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2128]
c0010403:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010406:	c3                   	ret    
c0010407:	8d 4a 9c             	lea    ecx,[edx-0x64]
c001040a:	83 f9 07             	cmp    ecx,0x7
c001040d:	77 0a                	ja     c0010419 <VgaText::doANSI_SGR(int)+0x73>
c001040f:	8b 14 95 b0 de 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2150]
c0010416:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010419:	c3                   	ret    

c001041a <VgaText::setDefaultBgColour(VgaColour)>:
c001041a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001041e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010422:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010425:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010428:	c3                   	ret    
c0010429:	90                   	nop

c001042a <VgaText::setDefaultFgColour(VgaColour)>:
c001042a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001042e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010432:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0010435:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010438:	c3                   	ret    
c0010439:	90                   	nop

c001043a <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c001043a:	53                   	push   ebx
c001043b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001043f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010443:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010447:	51                   	push   ecx
c0010448:	e8 cd ff ff ff       	call   c001041a <VgaText::setDefaultBgColour(VgaColour)>
c001044d:	58                   	pop    eax
c001044e:	5a                   	pop    edx
c001044f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010453:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010457:	5b                   	pop    ebx
c0010458:	eb d0                	jmp    c001042a <VgaText::setDefaultFgColour(VgaColour)>

c001045a <VgaText::setTitleTextColour(VgaColour)>:
c001045a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001045e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010462:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0010465:	e9 5a fe ff ff       	jmp    c00102c4 <VgaText::updateTitle()>

c001046a <VgaText::setTitleColour(VgaColour)>:
c001046a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001046e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010472:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010475:	e9 4a fe ff ff       	jmp    c00102c4 <VgaText::updateTitle()>

c001047a <VgaText::setTitle(char*)>:
c001047a:	53                   	push   ebx
c001047b:	83 ec 10             	sub    esp,0x10
c001047e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010482:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010486:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c001048c:	50                   	push   eax
c001048d:	e8 7a 03 ff ff       	call   c000080c <strcpy>
c0010492:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010496:	83 c4 18             	add    esp,0x18
c0010499:	5b                   	pop    ebx
c001049a:	e9 25 fe ff ff       	jmp    c00102c4 <VgaText::updateTitle()>
c001049f:	90                   	nop

c00104a0 <VgaText::combineColours(unsigned char, unsigned char)>:
c00104a0:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00104a4:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00104a9:	83 e0 0f             	and    eax,0xf
c00104ac:	c1 e2 04             	shl    edx,0x4
c00104af:	09 d0                	or     eax,edx
c00104b1:	c3                   	ret    

c00104b2 <VgaText::scrollScreen()>:
c00104b2:	55                   	push   ebp
c00104b3:	b9 01 00 00 00       	mov    ecx,0x1
c00104b8:	57                   	push   edi
c00104b9:	56                   	push   esi
c00104ba:	53                   	push   ebx
c00104bb:	83 ec 0c             	sub    esp,0xc
c00104be:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00104c2:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00104c8:	31 ff                	xor    edi,edi
c00104ca:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00104cd:	83 f9 17             	cmp    ecx,0x17
c00104d0:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c00104d3:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c00104da:	75 27                	jne    c0010503 <VgaText::scrollScreen()+0x51>
c00104dc:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00104df:	01 f5                	add    ebp,esi
c00104e1:	f7 c7 01 00 00 00    	test   edi,0x1
c00104e7:	74 16                	je     c00104ff <VgaText::scrollScreen()+0x4d>
c00104e9:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00104ed:	50                   	push   eax
c00104ee:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00104f2:	50                   	push   eax
c00104f3:	e8 a8 ff ff ff       	call   c00104a0 <VgaText::combineColours(unsigned char, unsigned char)>
c00104f8:	5a                   	pop    edx
c00104f9:	5a                   	pop    edx
c00104fa:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c00104fd:	eb 04                	jmp    c0010503 <VgaText::scrollScreen()+0x51>
c00104ff:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c0010503:	47                   	inc    edi
c0010504:	46                   	inc    esi
c0010505:	81 ff a0 00 00 00    	cmp    edi,0xa0
c001050b:	75 bd                	jne    c00104ca <VgaText::scrollScreen()+0x18>
c001050d:	41                   	inc    ecx
c001050e:	83 f9 18             	cmp    ecx,0x18
c0010511:	75 af                	jne    c00104c2 <VgaText::scrollScreen()+0x10>
c0010513:	39 1d 84 f1 02 c0    	cmp    DWORD PTR ds:0xc002f184,ebx
c0010519:	75 1b                	jne    c0010536 <VgaText::scrollScreen()+0x84>
c001051b:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c001051f:	74 05                	je     c0010526 <VgaText::scrollScreen()+0x74>
c0010521:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0010524:	eb 10                	jmp    c0010536 <VgaText::scrollScreen()+0x84>
c0010526:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c0010529:	85 c0                	test   eax,eax
c001052b:	74 09                	je     c0010536 <VgaText::scrollScreen()+0x84>
c001052d:	83 ec 0c             	sub    esp,0xc
c0010530:	53                   	push   ebx
c0010531:	ff d0                	call   eax
c0010533:	83 c4 10             	add    esp,0x10
c0010536:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001053a:	83 c4 0c             	add    esp,0xc
c001053d:	5b                   	pop    ebx
c001053e:	5e                   	pop    esi
c001053f:	5f                   	pop    edi
c0010540:	5d                   	pop    ebp
c0010541:	e9 0a fe ff ff       	jmp    c0010350 <VgaText::updateCursor()>

c0010546 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010546:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001054b:	c1 e0 08             	shl    eax,0x8
c001054e:	89 c2                	mov    edx,eax
c0010550:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010555:	09 d0                	or     eax,edx
c0010557:	c3                   	ret    

c0010558 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010558:	56                   	push   esi
c0010559:	53                   	push   ebx
c001055a:	51                   	push   ecx
c001055b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001055f:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010564:	50                   	push   eax
c0010565:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001056a:	50                   	push   eax
c001056b:	e8 30 ff ff ff       	call   c00104a0 <VgaText::combineColours(unsigned char, unsigned char)>
c0010570:	5b                   	pop    ebx
c0010571:	0f b6 c0             	movzx  eax,al
c0010574:	5e                   	pop    esi
c0010575:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c001057a:	50                   	push   eax
c001057b:	53                   	push   ebx
c001057c:	e8 c5 ff ff ff       	call   c0010546 <VgaText::combineCharAndColour(char, unsigned char)>
c0010581:	5a                   	pop    edx
c0010582:	5e                   	pop    esi
c0010583:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c0010586:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c001058c:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010590:	0f b7 d2             	movzx  edx,dx
c0010593:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c0010597:	39 0d 84 f1 02 c0    	cmp    DWORD PTR ds:0xc002f184,ecx
c001059d:	75 10                	jne    c00105af <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c001059f:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c00105a2:	85 c0                	test   eax,eax
c00105a4:	74 09                	je     c00105af <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c00105a6:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00105aa:	5a                   	pop    edx
c00105ab:	5b                   	pop    ebx
c00105ac:	5e                   	pop    esi
c00105ad:	ff e0                	jmp    eax
c00105af:	58                   	pop    eax
c00105b0:	5b                   	pop    ebx
c00105b1:	5e                   	pop    esi
c00105b2:	c3                   	ret    
c00105b3:	90                   	nop

c00105b4 <VgaText::getCursorX()>:
c00105b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105b8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00105bb:	c3                   	ret    

c00105bc <VgaText::getCursorY()>:
c00105bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105c0:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00105c3:	c3                   	ret    

c00105c4 <VgaText::setCursor(int, int)>:
c00105c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00105cc:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00105cf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00105d3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00105d6:	e9 75 fd ff ff       	jmp    c0010350 <VgaText::updateCursor()>
c00105db:	90                   	nop

c00105dc <VgaText::setCursorX(int)>:
c00105dc:	83 ec 10             	sub    esp,0x10
c00105df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00105e3:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00105e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105ea:	50                   	push   eax
c00105eb:	e8 d4 ff ff ff       	call   c00105c4 <VgaText::setCursor(int, int)>
c00105f0:	83 c4 1c             	add    esp,0x1c
c00105f3:	c3                   	ret    

c00105f4 <VgaText::setCursorY(int)>:
c00105f4:	83 ec 10             	sub    esp,0x10
c00105f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00105fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105ff:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0010602:	50                   	push   eax
c0010603:	e8 bc ff ff ff       	call   c00105c4 <VgaText::setCursor(int, int)>
c0010608:	83 c4 1c             	add    esp,0x1c
c001060b:	c3                   	ret    

c001060c <VgaText::incrementCursor(bool)>:
c001060c:	56                   	push   esi
c001060d:	53                   	push   ebx
c001060e:	51                   	push   ecx
c001060f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010613:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010617:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001061a:	40                   	inc    eax
c001061b:	83 f8 50             	cmp    eax,0x50
c001061e:	74 05                	je     c0010625 <VgaText::incrementCursor(bool)+0x19>
c0010620:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0010623:	eb 24                	jmp    c0010649 <VgaText::incrementCursor(bool)+0x3d>
c0010625:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010628:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001062f:	8d 50 01             	lea    edx,[eax+0x1]
c0010632:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010635:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010638:	75 0f                	jne    c0010649 <VgaText::incrementCursor(bool)+0x3d>
c001063a:	83 ec 0c             	sub    esp,0xc
c001063d:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010640:	53                   	push   ebx
c0010641:	e8 6c fe ff ff       	call   c00104b2 <VgaText::scrollScreen()>
c0010646:	83 c4 10             	add    esp,0x10
c0010649:	89 f0                	mov    eax,esi
c001064b:	84 c0                	test   al,al
c001064d:	74 0c                	je     c001065b <VgaText::incrementCursor(bool)+0x4f>
c001064f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010653:	5a                   	pop    edx
c0010654:	5b                   	pop    ebx
c0010655:	5e                   	pop    esi
c0010656:	e9 f5 fc ff ff       	jmp    c0010350 <VgaText::updateCursor()>
c001065b:	58                   	pop    eax
c001065c:	5b                   	pop    ebx
c001065d:	5e                   	pop    esi
c001065e:	c3                   	ret    
c001065f:	90                   	nop

c0010660 <VgaText::decrementCursor(bool)>:
c0010660:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010664:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010668:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001066b:	85 c0                	test   eax,eax
c001066d:	74 04                	je     c0010673 <VgaText::decrementCursor(bool)+0x13>
c001066f:	48                   	dec    eax
c0010670:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0010673:	84 c9                	test   cl,cl
c0010675:	74 09                	je     c0010680 <VgaText::decrementCursor(bool)+0x20>
c0010677:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001067b:	e9 d0 fc ff ff       	jmp    c0010350 <VgaText::updateCursor()>
c0010680:	c3                   	ret    
c0010681:	90                   	nop

c0010682 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010682:	53                   	push   ebx
c0010683:	83 ec 08             	sub    esp,0x8
c0010686:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001068a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001068e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010692:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010696:	3c 07                	cmp    al,0x7
c0010698:	75 2a                	jne    c00106c4 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c001069a:	a1 38 f2 02 c0       	mov    eax,ds:0xc002f238
c001069f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00106a7:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c00106af:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c00106b7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00106bb:	83 c4 08             	add    esp,0x8
c00106be:	5b                   	pop    ebx
c00106bf:	e9 b4 30 00 00       	jmp    c0013778 <Buzzer::beep(int, int, bool)>
c00106c4:	3c 0d                	cmp    al,0xd
c00106c6:	75 09                	jne    c00106d1 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c00106c8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00106cf:	eb 2c                	jmp    c00106fd <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c00106d1:	3c 0a                	cmp    al,0xa
c00106d3:	75 31                	jne    c0010706 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c00106d5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00106d8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00106df:	8d 50 01             	lea    edx,[eax+0x1]
c00106e2:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00106e5:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00106e8:	75 0f                	jne    c00106f9 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c00106ea:	83 ec 0c             	sub    esp,0xc
c00106ed:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00106f0:	53                   	push   ebx
c00106f1:	e8 bc fd ff ff       	call   c00104b2 <VgaText::scrollScreen()>
c00106f6:	83 c4 10             	add    esp,0x10
c00106f9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00106fd:	83 c4 08             	add    esp,0x8
c0010700:	5b                   	pop    ebx
c0010701:	e9 4a fc ff ff       	jmp    c0010350 <VgaText::updateCursor()>
c0010706:	3c 08                	cmp    al,0x8
c0010708:	75 25                	jne    c001072f <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c001070a:	50                   	push   eax
c001070b:	50                   	push   eax
c001070c:	6a 01                	push   0x1
c001070e:	53                   	push   ebx
c001070f:	e8 4c ff ff ff       	call   c0010660 <VgaText::decrementCursor(bool)>
c0010714:	5a                   	pop    edx
c0010715:	59                   	pop    ecx
c0010716:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010719:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001071c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001071f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010722:	6a 20                	push   0x20
c0010724:	53                   	push   ebx
c0010725:	e8 2e fe ff ff       	call   c0010558 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001072a:	83 c4 28             	add    esp,0x28
c001072d:	5b                   	pop    ebx
c001072e:	c3                   	ret    
c001072f:	83 ec 08             	sub    esp,0x8
c0010732:	0f be c0             	movsx  eax,al
c0010735:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010738:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001073b:	51                   	push   ecx
c001073c:	52                   	push   edx
c001073d:	50                   	push   eax
c001073e:	53                   	push   ebx
c001073f:	e8 14 fe ff ff       	call   c0010558 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010744:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010748:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010750:	83 c4 28             	add    esp,0x28
c0010753:	5b                   	pop    ebx
c0010754:	e9 b3 fe ff ff       	jmp    c001060c <VgaText::incrementCursor(bool)>
c0010759:	90                   	nop

c001075a <VgaText::isShowingCursor()>:
c001075a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001075e:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0010761:	c3                   	ret    

c0010762 <VgaText::isBlinkDisabled()>:
c0010762:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010766:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0010769:	83 f0 01             	xor    eax,0x1
c001076c:	c3                   	ret    
c001076d:	90                   	nop

c001076e <VgaText::setCursorHeight(int)>:
c001076e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010772:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010776:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010779:	0f b6 40 20          	movzx  eax,BYTE PTR [eax+0x20]
c001077d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010781:	e9 e0 fb ff ff       	jmp    c0010366 <VgaText::showCursor(bool)>

c0010786 <VgaText::getCursorHeight()>:
c0010786:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001078a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001078d:	c3                   	ret    

c001078e <setActiveTerminal(VgaText*)>:
c001078e:	53                   	push   ebx
c001078f:	83 ec 08             	sub    esp,0x8
c0010792:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010796:	85 db                	test   ebx,ebx
c0010798:	75 11                	jne    c00107ab <setActiveTerminal(VgaText*)+0x1d>
c001079a:	c7 44 24 10 38 ad 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ad38
c00107a2:	83 c4 08             	add    esp,0x8
c00107a5:	5b                   	pop    ebx
c00107a6:	e9 f6 9b 00 00       	jmp    c001a3a1 <Krnl::panic(char const*)>
c00107ab:	50                   	push   eax
c00107ac:	50                   	push   eax
c00107ad:	53                   	push   ebx
c00107ae:	68 46 ad 02 c0       	push   0xc002ad46
c00107b3:	e8 b3 21 00 00       	call   c001296b <Dbg::kprintf(char const*, ...)>
c00107b8:	a1 84 f1 02 c0       	mov    eax,ds:0xc002f184
c00107bd:	83 c4 10             	add    esp,0x10
c00107c0:	85 c0                	test   eax,eax
c00107c2:	74 0c                	je     c00107d0 <setActiveTerminal(VgaText*)+0x42>
c00107c4:	83 ec 0c             	sub    esp,0xc
c00107c7:	50                   	push   eax
c00107c8:	e8 83 fb ff ff       	call   c0010350 <VgaText::updateCursor()>
c00107cd:	83 c4 10             	add    esp,0x10
c00107d0:	89 1d 84 f1 02 c0    	mov    DWORD PTR ds:0xc002f184,ebx
c00107d6:	51                   	push   ecx
c00107d7:	51                   	push   ecx
c00107d8:	53                   	push   ebx
c00107d9:	68 5e ad 02 c0       	push   0xc002ad5e
c00107de:	e8 88 21 00 00       	call   c001296b <Dbg::kprintf(char const*, ...)>
c00107e3:	83 c4 0c             	add    esp,0xc
c00107e6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00107e9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00107ec:	53                   	push   ebx
c00107ed:	e8 d2 fd ff ff       	call   c00105c4 <VgaText::setCursor(int, int)>
c00107f2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00107f5:	e8 68 ff ff ff       	call   c0010762 <VgaText::isBlinkDisabled()>
c00107fa:	5a                   	pop    edx
c00107fb:	0f b6 c0             	movzx  eax,al
c00107fe:	59                   	pop    ecx
c00107ff:	50                   	push   eax
c0010800:	53                   	push   ebx
c0010801:	e8 6c fb ff ff       	call   c0010372 <VgaText::disableBlink(bool)>
c0010806:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010809:	e8 78 ff ff ff       	call   c0010786 <VgaText::getCursorHeight()>
c001080e:	5a                   	pop    edx
c001080f:	59                   	pop    ecx
c0010810:	50                   	push   eax
c0010811:	53                   	push   ebx
c0010812:	e8 57 ff ff ff       	call   c001076e <VgaText::setCursorHeight(int)>
c0010817:	83 c4 10             	add    esp,0x10
c001081a:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c001081e:	75 07                	jne    c0010827 <setActiveTerminal(VgaText*)+0x99>
c0010820:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c0010827:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001082b:	83 c4 08             	add    esp,0x8
c001082e:	5b                   	pop    ebx
c001082f:	e9 ce fa ff ff       	jmp    c0010302 <VgaText::load()>

c0010834 <doTerminalCycle()>:
c0010834:	83 ec 18             	sub    esp,0x18
c0010837:	a1 80 f1 02 c0       	mov    eax,ds:0xc002f180
c001083c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001083f:	50                   	push   eax
c0010840:	a3 80 f1 02 c0       	mov    ds:0xc002f180,eax
c0010845:	e8 44 ff ff ff       	call   c001078e <setActiveTerminal(VgaText*)>
c001084a:	83 c4 1c             	add    esp,0x1c
c001084d:	c3                   	ret    

c001084e <VgaText::doUpdate()>:
c001084e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010852:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c0010855:	85 c0                	test   eax,eax
c0010857:	74 02                	je     c001085b <VgaText::doUpdate()+0xd>
c0010859:	ff e0                	jmp    eax
c001085b:	c3                   	ret    

c001085c <VgaText::puts(char const*, VgaColour, VgaColour)>:
c001085c:	55                   	push   ebp
c001085d:	31 ed                	xor    ebp,ebp
c001085f:	57                   	push   edi
c0010860:	56                   	push   esi
c0010861:	53                   	push   ebx
c0010862:	83 ec 1c             	sub    esp,0x1c
c0010865:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010869:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001086e:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010875:	50                   	push   eax
c0010876:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001087b:	50                   	push   eax
c001087c:	e8 1f fc ff ff       	call   c00104a0 <VgaText::combineColours(unsigned char, unsigned char)>
c0010881:	59                   	pop    ecx
c0010882:	0f b6 c0             	movzx  eax,al
c0010885:	5e                   	pop    esi
c0010886:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001088b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001088f:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010892:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010896:	0f b7 f6             	movzx  esi,si
c0010899:	01 f6                	add    esi,esi
c001089b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001089e:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00108a1:	84 c0                	test   al,al
c00108a3:	0f 84 fd 00 00 00    	je     c00109a6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c00108a9:	3c 0d                	cmp    al,0xd
c00108ab:	75 0c                	jne    c00108b9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c00108ad:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00108b4:	e9 e7 00 00 00       	jmp    c00109a0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c00108b9:	3c 0a                	cmp    al,0xa
c00108bb:	75 47                	jne    c0010904 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c00108bd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00108c0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00108c7:	8d 48 01             	lea    ecx,[eax+0x1]
c00108ca:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00108cd:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c00108d0:	75 0f                	jne    c00108e1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c00108d2:	83 ec 0c             	sub    esp,0xc
c00108d5:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00108d8:	53                   	push   ebx
c00108d9:	e8 d4 fb ff ff       	call   c00104b2 <VgaText::scrollScreen()>
c00108de:	83 c4 10             	add    esp,0x10
c00108e1:	83 ec 0c             	sub    esp,0xc
c00108e4:	31 ed                	xor    ebp,ebp
c00108e6:	53                   	push   ebx
c00108e7:	e8 64 fa ff ff       	call   c0010350 <VgaText::updateCursor()>
c00108ec:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00108f1:	83 c4 10             	add    esp,0x10
c00108f4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00108f7:	0f b7 f6             	movzx  esi,si
c00108fa:	01 f6                	add    esi,esi
c00108fc:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00108ff:	e9 9c 00 00 00       	jmp    c00109a0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010904:	3c 08                	cmp    al,0x8
c0010906:	75 35                	jne    c001093d <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c0010908:	56                   	push   esi
c0010909:	56                   	push   esi
c001090a:	6a 01                	push   0x1
c001090c:	53                   	push   ebx
c001090d:	e8 4e fd ff ff       	call   c0010660 <VgaText::decrementCursor(bool)>
c0010912:	58                   	pop    eax
c0010913:	5a                   	pop    edx
c0010914:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010917:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001091a:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001091d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010920:	6a 20                	push   0x20
c0010922:	53                   	push   ebx
c0010923:	e8 30 fc ff ff       	call   c0010558 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010928:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001092d:	83 c4 20             	add    esp,0x20
c0010930:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010933:	0f b7 f6             	movzx  esi,si
c0010936:	01 f6                	add    esi,esi
c0010938:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001093b:	eb 63                	jmp    c00109a0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c001093d:	51                   	push   ecx
c001093e:	51                   	push   ecx
c001093f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010943:	50                   	push   eax
c0010944:	e8 fd fb ff ff       	call   c0010546 <VgaText::combineCharAndColour(char, unsigned char)>
c0010949:	83 c4 10             	add    esp,0x10
c001094c:	66 89 06             	mov    WORD PTR [esi],ax
c001094f:	39 1d 84 f1 02 c0    	cmp    DWORD PTR ds:0xc002f184,ebx
c0010955:	75 21                	jne    c0010978 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010957:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c001095a:	85 c0                	test   eax,eax
c001095c:	74 1a                	je     c0010978 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c001095e:	52                   	push   edx
c001095f:	52                   	push   edx
c0010960:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010963:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010966:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001096a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001096e:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010971:	51                   	push   ecx
c0010972:	53                   	push   ebx
c0010973:	ff d0                	call   eax
c0010975:	83 c4 20             	add    esp,0x20
c0010978:	83 c6 02             	add    esi,0x2
c001097b:	50                   	push   eax
c001097c:	50                   	push   eax
c001097d:	6a 00                	push   0x0
c001097f:	53                   	push   ebx
c0010980:	e8 87 fc ff ff       	call   c001060c <VgaText::incrementCursor(bool)>
c0010985:	83 c4 10             	add    esp,0x10
c0010988:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c001098c:	75 0d                	jne    c001099b <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c001098e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010993:	0f b7 f6             	movzx  esi,si
c0010996:	01 f6                	add    esi,esi
c0010998:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001099b:	bd 01 00 00 00       	mov    ebp,0x1
c00109a0:	47                   	inc    edi
c00109a1:	e9 f8 fe ff ff       	jmp    c001089e <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c00109a6:	83 ec 0c             	sub    esp,0xc
c00109a9:	53                   	push   ebx
c00109aa:	e8 a1 f9 ff ff       	call   c0010350 <VgaText::updateCursor()>
c00109af:	83 c4 10             	add    esp,0x10
c00109b2:	89 e8                	mov    eax,ebp
c00109b4:	84 c0                	test   al,al
c00109b6:	74 0c                	je     c00109c4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c00109b8:	83 ec 0c             	sub    esp,0xc
c00109bb:	53                   	push   ebx
c00109bc:	e8 8d fe ff ff       	call   c001084e <VgaText::doUpdate()>
c00109c1:	83 c4 10             	add    esp,0x10
c00109c4:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00109cb:	83 c4 1c             	add    esp,0x1c
c00109ce:	5b                   	pop    ebx
c00109cf:	5e                   	pop    esi
c00109d0:	5f                   	pop    edi
c00109d1:	5d                   	pop    ebp
c00109d2:	c3                   	ret    
c00109d3:	90                   	nop

c00109d4 <VgaText::clearScreen()>:
c00109d4:	57                   	push   edi
c00109d5:	56                   	push   esi
c00109d6:	31 f6                	xor    esi,esi
c00109d8:	53                   	push   ebx
c00109d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00109dd:	52                   	push   edx
c00109de:	6a 00                	push   0x0
c00109e0:	6a 00                	push   0x0
c00109e2:	53                   	push   ebx
c00109e3:	e8 dc fb ff ff       	call   c00105c4 <VgaText::setCursor(int, int)>
c00109e8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00109ef:	83 c4 10             	add    esp,0x10
c00109f2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00109f5:	7e 20                	jle    c0010a17 <VgaText::clearScreen()+0x43>
c00109f7:	31 ff                	xor    edi,edi
c00109f9:	50                   	push   eax
c00109fa:	50                   	push   eax
c00109fb:	56                   	push   esi
c00109fc:	57                   	push   edi
c00109fd:	47                   	inc    edi
c00109fe:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010a01:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010a04:	6a 20                	push   0x20
c0010a06:	53                   	push   ebx
c0010a07:	e8 4c fb ff ff       	call   c0010558 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010a0c:	83 c4 20             	add    esp,0x20
c0010a0f:	83 ff 50             	cmp    edi,0x50
c0010a12:	75 e5                	jne    c00109f9 <VgaText::clearScreen()+0x25>
c0010a14:	46                   	inc    esi
c0010a15:	eb db                	jmp    c00109f2 <VgaText::clearScreen()+0x1e>
c0010a17:	83 ec 0c             	sub    esp,0xc
c0010a1a:	53                   	push   ebx
c0010a1b:	e8 2e fe ff ff       	call   c001084e <VgaText::doUpdate()>
c0010a20:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010a27:	83 c4 10             	add    esp,0x10
c0010a2a:	5b                   	pop    ebx
c0010a2b:	5e                   	pop    esi
c0010a2c:	5f                   	pop    edi
c0010a2d:	c3                   	ret    

c0010a2e <VgaText::putchar(char)>:
c0010a2e:	56                   	push   esi
c0010a2f:	53                   	push   ebx
c0010a30:	83 ec 14             	sub    esp,0x14
c0010a33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010a37:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010a3b:	3c 5b                	cmp    al,0x5b
c0010a3d:	75 18                	jne    c0010a57 <VgaText::putchar(char)+0x29>
c0010a3f:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0010a43:	74 1f                	je     c0010a64 <VgaText::putchar(char)+0x36>
c0010a45:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0010a4b:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0010a52:	e9 bd 00 00 00       	jmp    c0010b14 <VgaText::putchar(char)+0xe6>
c0010a57:	3c 1b                	cmp    al,0x1b
c0010a59:	75 09                	jne    c0010a64 <VgaText::putchar(char)+0x36>
c0010a5b:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0010a5f:	e9 b0 00 00 00       	jmp    c0010b14 <VgaText::putchar(char)+0xe6>
c0010a64:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0010a67:	84 c9                	test   cl,cl
c0010a69:	0f 84 92 00 00 00    	je     c0010b01 <VgaText::putchar(char)+0xd3>
c0010a6f:	8d 50 c0             	lea    edx,[eax-0x40]
c0010a72:	80 fa 3e             	cmp    dl,0x3e
c0010a75:	77 76                	ja     c0010aed <VgaText::putchar(char)+0xbf>
c0010a77:	3c 6d                	cmp    al,0x6d
c0010a79:	75 47                	jne    c0010ac2 <VgaText::putchar(char)+0x94>
c0010a7b:	31 f6                	xor    esi,esi
c0010a7d:	31 d2                	xor    edx,edx
c0010a7f:	31 c0                	xor    eax,eax
c0010a81:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010a84:	7e 2d                	jle    c0010ab3 <VgaText::putchar(char)+0x85>
c0010a86:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0010a8b:	80 fa 3b             	cmp    dl,0x3b
c0010a8e:	75 17                	jne    c0010aa7 <VgaText::putchar(char)+0x79>
c0010a90:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010a94:	50                   	push   eax
c0010a95:	53                   	push   ebx
c0010a96:	e8 0b f9 ff ff       	call   c00103a6 <VgaText::doANSI_SGR(int)>
c0010a9b:	59                   	pop    ecx
c0010a9c:	31 d2                	xor    edx,edx
c0010a9e:	58                   	pop    eax
c0010a9f:	31 c0                	xor    eax,eax
c0010aa1:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010aa5:	eb 09                	jmp    c0010ab0 <VgaText::putchar(char)+0x82>
c0010aa7:	6b c0 0a             	imul   eax,eax,0xa
c0010aaa:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010aae:	88 ca                	mov    dl,cl
c0010ab0:	46                   	inc    esi
c0010ab1:	eb ce                	jmp    c0010a81 <VgaText::putchar(char)+0x53>
c0010ab3:	84 d2                	test   dl,dl
c0010ab5:	74 2e                	je     c0010ae5 <VgaText::putchar(char)+0xb7>
c0010ab7:	50                   	push   eax
c0010ab8:	53                   	push   ebx
c0010ab9:	e8 e8 f8 ff ff       	call   c00103a6 <VgaText::doANSI_SGR(int)>
c0010abe:	58                   	pop    eax
c0010abf:	5a                   	pop    edx
c0010ac0:	eb 23                	jmp    c0010ae5 <VgaText::putchar(char)+0xb7>
c0010ac2:	3c 4a                	cmp    al,0x4a
c0010ac4:	75 1f                	jne    c0010ae5 <VgaText::putchar(char)+0xb7>
c0010ac6:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0010aca:	75 19                	jne    c0010ae5 <VgaText::putchar(char)+0xb7>
c0010acc:	83 ec 0c             	sub    esp,0xc
c0010acf:	53                   	push   ebx
c0010ad0:	e8 ff fe ff ff       	call   c00109d4 <VgaText::clearScreen()>
c0010ad5:	83 c4 0c             	add    esp,0xc
c0010ad8:	6a 00                	push   0x0
c0010ada:	6a 00                	push   0x0
c0010adc:	53                   	push   ebx
c0010add:	e8 e2 fa ff ff       	call   c00105c4 <VgaText::setCursor(int, int)>
c0010ae2:	83 c4 10             	add    esp,0x10
c0010ae5:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0010aeb:	eb 27                	jmp    c0010b14 <VgaText::putchar(char)+0xe6>
c0010aed:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0010af0:	83 fa 0e             	cmp    edx,0xe
c0010af3:	7f 1f                	jg     c0010b14 <VgaText::putchar(char)+0xe6>
c0010af5:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010af8:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0010afb:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0010aff:	eb 13                	jmp    c0010b14 <VgaText::putchar(char)+0xe6>
c0010b01:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010b04:	0f be c0             	movsx  eax,al
c0010b07:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010b0a:	50                   	push   eax
c0010b0b:	53                   	push   ebx
c0010b0c:	e8 71 fb ff ff       	call   c0010682 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010b11:	83 c4 10             	add    esp,0x10
c0010b14:	83 c4 14             	add    esp,0x14
c0010b17:	5b                   	pop    ebx
c0010b18:	5e                   	pop    esi
c0010b19:	c3                   	ret    

c0010b1a <VgaText::putx(unsigned int)>:
c0010b1a:	57                   	push   edi
c0010b1b:	b9 11 00 00 00       	mov    ecx,0x11
c0010b20:	56                   	push   esi
c0010b21:	be 7a ad 02 c0       	mov    esi,0xc002ad7a
c0010b26:	53                   	push   ebx
c0010b27:	83 ec 20             	sub    esp,0x20
c0010b2a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010b2e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010b32:	fc                   	cld    
c0010b33:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010b35:	be 08 00 00 00       	mov    esi,0x8
c0010b3a:	50                   	push   eax
c0010b3b:	50                   	push   eax
c0010b3c:	89 d8                	mov    eax,ebx
c0010b3e:	c1 e3 04             	shl    ebx,0x4
c0010b41:	c1 e8 1c             	shr    eax,0x1c
c0010b44:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010b49:	50                   	push   eax
c0010b4a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010b4e:	e8 db fe ff ff       	call   c0010a2e <VgaText::putchar(char)>
c0010b53:	83 c4 10             	add    esp,0x10
c0010b56:	4e                   	dec    esi
c0010b57:	75 e1                	jne    c0010b3a <VgaText::putx(unsigned int)+0x20>
c0010b59:	83 c4 20             	add    esp,0x20
c0010b5c:	5b                   	pop    ebx
c0010b5d:	5e                   	pop    esi
c0010b5e:	5f                   	pop    edi
c0010b5f:	c3                   	ret    

c0010b60 <VgaText::puts(char const*)>:
c0010b60:	53                   	push   ebx
c0010b61:	83 ec 08             	sub    esp,0x8
c0010b64:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010b68:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010b6b:	84 c0                	test   al,al
c0010b6d:	74 12                	je     c0010b81 <VgaText::puts(char const*)+0x21>
c0010b6f:	43                   	inc    ebx
c0010b70:	51                   	push   ecx
c0010b71:	51                   	push   ecx
c0010b72:	50                   	push   eax
c0010b73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b77:	e8 b2 fe ff ff       	call   c0010a2e <VgaText::putchar(char)>
c0010b7c:	83 c4 10             	add    esp,0x10
c0010b7f:	eb e7                	jmp    c0010b68 <VgaText::puts(char const*)+0x8>
c0010b81:	83 c4 08             	add    esp,0x8
c0010b84:	5b                   	pop    ebx
c0010b85:	c3                   	ret    

c0010b86 <VgaText::VgaText(char const*)>:
c0010b86:	57                   	push   edi
c0010b87:	56                   	push   esi
c0010b88:	53                   	push   ebx
c0010b89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b8d:	83 ec 08             	sub    esp,0x8
c0010b90:	6a 00                	push   0x0
c0010b92:	50                   	push   eax
c0010b93:	e8 8a 05 00 00       	call   c0011122 <UnixFile::UnixFile(int)>
c0010b98:	83 c4 10             	add    esp,0x10
c0010b9b:	ba e0 ad 02 c0       	mov    edx,0xc002ade0
c0010ba0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ba4:	89 10                	mov    DWORD PTR [eax],edx
c0010ba6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010baa:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0010bb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bb5:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0010bbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bc0:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0010bc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bc8:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0010bcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bd0:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0010bd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bdb:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0010be2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010be6:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0010bed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bf1:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0010bf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bfc:	8d 50 60             	lea    edx,[eax+0x60]
c0010bff:	bb 60 f1 02 c0       	mov    ebx,0xc002f160
c0010c04:	b8 08 00 00 00       	mov    eax,0x8
c0010c09:	fc                   	cld    
c0010c0a:	89 d7                	mov    edi,edx
c0010c0c:	89 de                	mov    esi,ebx
c0010c0e:	89 c1                	mov    ecx,eax
c0010c10:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010c12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c16:	05 82 00 00 00       	add    eax,0x82
c0010c1b:	83 ec 08             	sub    esp,0x8
c0010c1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c22:	50                   	push   eax
c0010c23:	e8 e4 fb fe ff       	call   c000080c <strcpy>
c0010c28:	83 c4 10             	add    esp,0x10
c0010c2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c2f:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c0010c36:	83 ec 0c             	sub    esp,0xc
c0010c39:	6a 01                	push   0x1
c0010c3b:	e8 25 09 00 00       	call   c0011565 <Virt::allocateKernelVirtualPages(int)>
c0010c40:	83 c4 10             	add    esp,0x10
c0010c43:	89 c2                	mov    edx,eax
c0010c45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c49:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010c4c:	8b 1d 30 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f230
c0010c52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c56:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010c59:	89 c6                	mov    esi,eax
c0010c5b:	e8 cd ef ff ff       	call   c000fc2d <Phys::allocatePage()>
c0010c60:	6a 05                	push   0x5
c0010c62:	56                   	push   esi
c0010c63:	50                   	push   eax
c0010c64:	53                   	push   ebx
c0010c65:	e8 32 11 00 00       	call   c0011d9c <VAS::mapPage(unsigned long, unsigned long, int)>
c0010c6a:	83 c4 10             	add    esp,0x10
c0010c6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c71:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010c74:	83 ec 04             	sub    esp,0x4
c0010c77:	68 00 0f 00 00       	push   0xf00
c0010c7c:	6a 00                	push   0x0
c0010c7e:	50                   	push   eax
c0010c7f:	e8 cc fa fe ff       	call   c0000750 <memset>
c0010c84:	83 c4 10             	add    esp,0x10
c0010c87:	83 ec 04             	sub    esp,0x4
c0010c8a:	6a 00                	push   0x0
c0010c8c:	6a 07                	push   0x7
c0010c8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c92:	e8 a3 f7 ff ff       	call   c001043a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010c97:	83 c4 10             	add    esp,0x10
c0010c9a:	83 ec 08             	sub    esp,0x8
c0010c9d:	6a 02                	push   0x2
c0010c9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ca3:	e8 c6 fa ff ff       	call   c001076e <VgaText::setCursorHeight(int)>
c0010ca8:	83 c4 10             	add    esp,0x10
c0010cab:	83 ec 04             	sub    esp,0x4
c0010cae:	6a 00                	push   0x0
c0010cb0:	6a 00                	push   0x0
c0010cb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010cb6:	e8 09 f9 ff ff       	call   c00105c4 <VgaText::setCursor(int, int)>
c0010cbb:	83 c4 10             	add    esp,0x10
c0010cbe:	83 ec 08             	sub    esp,0x8
c0010cc1:	6a 01                	push   0x1
c0010cc3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010cc7:	e8 9a f6 ff ff       	call   c0010366 <VgaText::showCursor(bool)>
c0010ccc:	83 c4 10             	add    esp,0x10
c0010ccf:	83 ec 08             	sub    esp,0x8
c0010cd2:	6a 01                	push   0x1
c0010cd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010cd8:	e8 95 f6 ff ff       	call   c0010372 <VgaText::disableBlink(bool)>
c0010cdd:	83 c4 10             	add    esp,0x10
c0010ce0:	83 ec 0c             	sub    esp,0xc
c0010ce3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ce7:	e8 e8 fc ff ff       	call   c00109d4 <VgaText::clearScreen()>
c0010cec:	83 c4 10             	add    esp,0x10
c0010cef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cf3:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0010cf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cfb:	05 02 01 00 00       	add    eax,0x102
c0010d00:	83 ec 04             	sub    esp,0x4
c0010d03:	68 96 00 00 00       	push   0x96
c0010d08:	6a 00                	push   0x0
c0010d0a:	50                   	push   eax
c0010d0b:	e8 40 fa fe ff       	call   c0000750 <memset>
c0010d10:	83 c4 10             	add    esp,0x10
c0010d13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d17:	05 98 01 00 00       	add    eax,0x198
c0010d1c:	83 ec 04             	sub    esp,0x4
c0010d1f:	68 2c 01 00 00       	push   0x12c
c0010d24:	6a 00                	push   0x0
c0010d26:	50                   	push   eax
c0010d27:	e8 24 fa fe ff       	call   c0000750 <memset>
c0010d2c:	83 c4 10             	add    esp,0x10
c0010d2f:	90                   	nop
c0010d30:	5b                   	pop    ebx
c0010d31:	5e                   	pop    esi
c0010d32:	5f                   	pop    edi
c0010d33:	c3                   	ret    

c0010d34 <VgaText::receiveKey(unsigned char)>:
c0010d34:	55                   	push   ebp
c0010d35:	57                   	push   edi
c0010d36:	56                   	push   esi
c0010d37:	53                   	push   ebx
c0010d38:	83 ec 1c             	sub    esp,0x1c
c0010d3b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010d3f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010d43:	84 db                	test   bl,bl
c0010d45:	0f 84 c9 00 00 00    	je     c0010e14 <VgaText::receiveKey(unsigned char)+0xe0>
c0010d4b:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c0010d51:	80 fb 08             	cmp    bl,0x8
c0010d54:	75 2c                	jne    c0010d82 <VgaText::receiveKey(unsigned char)+0x4e>
c0010d56:	83 ec 0c             	sub    esp,0xc
c0010d59:	57                   	push   edi
c0010d5a:	e8 0d fa fe ff       	call   c000076c <strlen>
c0010d5f:	83 c4 10             	add    esp,0x10
c0010d62:	85 c0                	test   eax,eax
c0010d64:	74 41                	je     c0010da7 <VgaText::receiveKey(unsigned char)+0x73>
c0010d66:	50                   	push   eax
c0010d67:	50                   	push   eax
c0010d68:	6a 08                	push   0x8
c0010d6a:	56                   	push   esi
c0010d6b:	e8 be fc ff ff       	call   c0010a2e <VgaText::putchar(char)>
c0010d70:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010d73:	e8 f4 f9 fe ff       	call   c000076c <strlen>
c0010d78:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c0010d80:	eb 22                	jmp    c0010da4 <VgaText::receiveKey(unsigned char)+0x70>
c0010d82:	0f be c3             	movsx  eax,bl
c0010d85:	52                   	push   edx
c0010d86:	52                   	push   edx
c0010d87:	50                   	push   eax
c0010d88:	56                   	push   esi
c0010d89:	e8 a0 fc ff ff       	call   c0010a2e <VgaText::putchar(char)>
c0010d8e:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010d92:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010d97:	59                   	pop    ecx
c0010d98:	5d                   	pop    ebp
c0010d99:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010d9d:	50                   	push   eax
c0010d9e:	57                   	push   edi
c0010d9f:	e8 a8 fb fe ff       	call   c000094c <strcat>
c0010da4:	83 c4 10             	add    esp,0x10
c0010da7:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0010dae:	75 05                	jne    c0010db5 <VgaText::receiveKey(unsigned char)+0x81>
c0010db0:	80 fb 0a             	cmp    bl,0xa
c0010db3:	75 53                	jne    c0010e08 <VgaText::receiveKey(unsigned char)+0xd4>
c0010db5:	83 ec 0c             	sub    esp,0xc
c0010db8:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0010dbe:	53                   	push   ebx
c0010dbf:	e8 a8 f9 fe ff       	call   c000076c <strlen>
c0010dc4:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010dc7:	89 c5                	mov    ebp,eax
c0010dc9:	e8 9e f9 fe ff       	call   c000076c <strlen>
c0010dce:	83 c4 10             	add    esp,0x10
c0010dd1:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010dd5:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010dda:	76 10                	jbe    c0010dec <VgaText::receiveKey(unsigned char)+0xb8>
c0010ddc:	83 ec 0c             	sub    esp,0xc
c0010ddf:	68 8b ad 02 c0       	push   0xc002ad8b
c0010de4:	e8 b8 95 00 00       	call   c001a3a1 <Krnl::panic(char const*)>
c0010de9:	83 c4 10             	add    esp,0x10
c0010dec:	50                   	push   eax
c0010ded:	50                   	push   eax
c0010dee:	57                   	push   edi
c0010def:	53                   	push   ebx
c0010df0:	e8 57 fb fe ff       	call   c000094c <strcat>
c0010df5:	83 c4 0c             	add    esp,0xc
c0010df8:	68 96 00 00 00       	push   0x96
c0010dfd:	6a 00                	push   0x0
c0010dff:	57                   	push   edi
c0010e00:	e8 4b f9 fe ff       	call   c0000750 <memset>
c0010e05:	83 c4 10             	add    esp,0x10
c0010e08:	83 ec 0c             	sub    esp,0xc
c0010e0b:	56                   	push   esi
c0010e0c:	e8 3d fa ff ff       	call   c001084e <VgaText::doUpdate()>
c0010e11:	83 c4 10             	add    esp,0x10
c0010e14:	83 c4 1c             	add    esp,0x1c
c0010e17:	5b                   	pop    ebx
c0010e18:	5e                   	pop    esi
c0010e19:	5f                   	pop    edi
c0010e1a:	5d                   	pop    ebp
c0010e1b:	c3                   	ret    

c0010e1c <VgaText::write(unsigned long long, void*, int*)>:
c0010e1c:	55                   	push   ebp
c0010e1d:	57                   	push   edi
c0010e1e:	56                   	push   esi
c0010e1f:	53                   	push   ebx
c0010e20:	83 ec 0c             	sub    esp,0xc
c0010e23:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010e27:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010e2b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010e2f:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0010e36:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010e39:	39 eb                	cmp    ebx,ebp
c0010e3b:	74 13                	je     c0010e50 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010e3d:	43                   	inc    ebx
c0010e3e:	50                   	push   eax
c0010e3f:	50                   	push   eax
c0010e40:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010e44:	50                   	push   eax
c0010e45:	56                   	push   esi
c0010e46:	e8 e3 fb ff ff       	call   c0010a2e <VgaText::putchar(char)>
c0010e4b:	83 c4 10             	add    esp,0x10
c0010e4e:	eb e9                	jmp    c0010e39 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010e50:	83 ec 0c             	sub    esp,0xc
c0010e53:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0010e5a:	56                   	push   esi
c0010e5b:	e8 ee f9 ff ff       	call   c001084e <VgaText::doUpdate()>
c0010e60:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010e64:	89 38                	mov    DWORD PTR [eax],edi
c0010e66:	83 c4 1c             	add    esp,0x1c
c0010e69:	31 c0                	xor    eax,eax
c0010e6b:	5b                   	pop    ebx
c0010e6c:	5e                   	pop    esi
c0010e6d:	5f                   	pop    edi
c0010e6e:	5d                   	pop    ebp
c0010e6f:	c3                   	ret    

c0010e70 <newTerminal(char*)>:
c0010e70:	83 ec 28             	sub    esp,0x28
c0010e73:	68 c4 02 00 00       	push   0x2c4
c0010e78:	e8 0f ea ff ff       	call   c000f88c <malloc>
c0010e7d:	5a                   	pop    edx
c0010e7e:	59                   	pop    ecx
c0010e7f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010e83:	50                   	push   eax
c0010e84:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010e88:	e8 f9 fc ff ff       	call   c0010b86 <VgaText::VgaText(char const*)>
c0010e8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010e91:	83 c4 2c             	add    esp,0x2c
c0010e94:	c3                   	ret    
c0010e95:	90                   	nop

c0010e96 <TSS::TSS()>:
c0010e96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e9a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010ea1:	90                   	nop
c0010ea2:	c3                   	ret    
c0010ea3:	90                   	nop

c0010ea4 <TSS::setESP(unsigned long)>:
c0010ea4:	55                   	push   ebp
c0010ea5:	89 e5                	mov    ebp,esp
c0010ea7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010eaa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ead:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010eb0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010eb3:	90                   	nop
c0010eb4:	5d                   	pop    ebp
c0010eb5:	c3                   	ret    

c0010eb6 <TSS::flush()>:
c0010eb6:	55                   	push   ebp
c0010eb7:	89 e5                	mov    ebp,esp
c0010eb9:	83 ec 10             	sub    esp,0x10
c0010ebc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ebf:	8b 00                	mov    eax,DWORD PTR [eax]
c0010ec1:	83 c8 03             	or     eax,0x3
c0010ec4:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010ec8:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010ecc:	66 89 d0             	mov    ax,dx
c0010ecf:	0f 00 d8             	ltr    ax
c0010ed2:	90                   	nop
c0010ed3:	c9                   	leave  
c0010ed4:	c3                   	ret    
c0010ed5:	90                   	nop

c0010ed6 <TSS::setup(unsigned long, unsigned long)>:
c0010ed6:	55                   	push   ebp
c0010ed7:	89 e5                	mov    ebp,esp
c0010ed9:	83 ec 18             	sub    esp,0x18
c0010edc:	83 ec 0c             	sub    esp,0xc
c0010edf:	6a 68                	push   0x68
c0010ee1:	e8 a6 e9 ff ff       	call   c000f88c <malloc>
c0010ee6:	83 c4 10             	add    esp,0x10
c0010ee9:	89 c2                	mov    edx,eax
c0010eeb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010eee:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010ef1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ef4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ef7:	83 ec 04             	sub    esp,0x4
c0010efa:	6a 68                	push   0x68
c0010efc:	6a 00                	push   0x0
c0010efe:	50                   	push   eax
c0010eff:	e8 4c f8 fe ff       	call   c0000750 <memset>
c0010f04:	83 c4 10             	add    esp,0x10
c0010f07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f0d:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010f13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f19:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010f1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f22:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f25:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010f28:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010f2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f31:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010f37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f3d:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010f43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f49:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010f4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f52:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f55:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0010f5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f61:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0010f67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f6d:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010f73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f79:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010f7c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010f7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f82:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f85:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010f88:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010f8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f91:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010f98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f9b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f9e:	0f 20 da             	mov    edx,cr3
c0010fa1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0010fa4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0010fa7:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010faa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010fad:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fb0:	83 ec 08             	sub    esp,0x8
c0010fb3:	50                   	push   eax
c0010fb4:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010fb7:	50                   	push   eax
c0010fb8:	e8 ab e0 ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c0010fbd:	83 c4 10             	add    esp,0x10
c0010fc0:	83 ec 08             	sub    esp,0x8
c0010fc3:	6a 68                	push   0x68
c0010fc5:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010fc8:	50                   	push   eax
c0010fc9:	e8 b6 e0 ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c0010fce:	83 c4 10             	add    esp,0x10
c0010fd1:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0010fd5:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010fd8:	83 e0 0f             	and    eax,0xf
c0010fdb:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010fde:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010fe1:	83 c8 40             	or     eax,0x40
c0010fe4:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010fe7:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c0010fec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010ff2:	05 78 01 00 00       	add    eax,0x178
c0010ff7:	83 ec 04             	sub    esp,0x4
c0010ffa:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010ffd:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0011000:	50                   	push   eax
c0011001:	e8 b2 e0 ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c0011006:	83 c4 10             	add    esp,0x10
c0011009:	89 c2                	mov    edx,eax
c001100b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001100e:	89 10                	mov    DWORD PTR [eax],edx
c0011010:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c0011015:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001101b:	05 78 01 00 00       	add    eax,0x178
c0011020:	83 ec 0c             	sub    esp,0xc
c0011023:	50                   	push   eax
c0011024:	e8 d3 e0 ff ff       	call   c000f0fc <GDT::flush()>
c0011029:	83 c4 10             	add    esp,0x10
c001102c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001102f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011031:	83 ec 08             	sub    esp,0x8
c0011034:	50                   	push   eax
c0011035:	68 f4 ad 02 c0       	push   0xc002adf4
c001103a:	e8 2c 19 00 00       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001103f:	83 c4 10             	add    esp,0x10
c0011042:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011045:	8b 00                	mov    eax,DWORD PTR [eax]
c0011047:	c9                   	leave  
c0011048:	c3                   	ret    
c0011049:	90                   	nop

c001104a <ReservedFilename::read(unsigned long long, void*, int*)>:
c001104a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001104e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011052:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011055:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001105a:	75 08                	jne    c0011064 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c001105c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011062:	eb 38                	jmp    c001109c <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011064:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011069:	75 17                	jne    c0011082 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c001106b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011070:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011073:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011079:	8b 10                	mov    edx,DWORD PTR [eax]
c001107b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001107f:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011082:	89 c1                	mov    ecx,eax
c0011084:	83 e1 fd             	and    ecx,0xfffffffd
c0011087:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c001108d:	74 cd                	je     c001105c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001108f:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011094:	83 e0 ef             	and    eax,0xffffffef
c0011097:	83 f8 08             	cmp    eax,0x8
c001109a:	76 c0                	jbe    c001105c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001109c:	31 c0                	xor    eax,eax
c001109e:	c3                   	ret    
c001109f:	90                   	nop

c00110a0 <ReservedFilename::isAtty()>:
c00110a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110a4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00110a7:	31 c0                	xor    eax,eax
c00110a9:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00110af:	74 09                	je     c00110ba <ReservedFilename::isAtty()+0x1a>
c00110b1:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00110b7:	0f 94 c0             	sete   al
c00110ba:	c3                   	ret    
c00110bb:	90                   	nop

c00110bc <ReservedFilename::write(unsigned long long, void*, int*)>:
c00110bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110c0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00110c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00110cb:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00110d0:	75 08                	jne    c00110da <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00110d2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00110d8:	eb 3d                	jmp    c0011117 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00110da:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00110df:	75 17                	jne    c00110f8 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00110e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110e6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00110e9:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00110ef:	8b 10                	mov    edx,DWORD PTR [eax]
c00110f1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00110f5:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00110f8:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00110fd:	75 04                	jne    c0011103 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00110ff:	89 0a                	mov    DWORD PTR [edx],ecx
c0011101:	eb 14                	jmp    c0011117 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011103:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011108:	74 c8                	je     c00110d2 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001110a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001110f:	83 e0 ef             	and    eax,0xffffffef
c0011112:	83 f8 08             	cmp    eax,0x8
c0011115:	76 bb                	jbe    c00110d2 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011117:	31 c0                	xor    eax,eax
c0011119:	c3                   	ret    

c001111a <UnixFile::getFileDescriptor()>:
c001111a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001111e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011121:	c3                   	ret    

c0011122 <UnixFile::UnixFile(int)>:
c0011122:	53                   	push   ebx
c0011123:	83 ec 28             	sub    esp,0x28
c0011126:	ba e0 ae 02 c0       	mov    edx,0xc002aee0
c001112b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001112f:	89 10                	mov    DWORD PTR [eax],edx
c0011131:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011139:	0f 8f 8c 01 00 00    	jg     c00112cb <UnixFile::UnixFile(int)+0x1a9>
c001113f:	a1 60 e0 02 c0       	mov    eax,ds:0xc002e060
c0011144:	8d 50 01             	lea    edx,[eax+0x1]
c0011147:	89 15 60 e0 02 c0    	mov    DWORD PTR ds:0xc002e060,edx
c001114d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011151:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011154:	83 ec 08             	sub    esp,0x8
c0011157:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001115b:	68 18 f2 02 c0       	push   0xc002f218
c0011160:	e8 b7 7e 01 00       	call   c002901c <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011165:	83 c4 10             	add    esp,0x10
c0011168:	a0 14 f2 02 c0       	mov    al,ds:0xc002f214
c001116d:	83 f0 01             	xor    eax,0x1
c0011170:	84 c0                	test   al,al
c0011172:	0f 84 54 01 00 00    	je     c00112cc <UnixFile::UnixFile(int)+0x1aa>
c0011178:	c6 05 14 f2 02 c0 01 	mov    BYTE PTR ds:0xc002f214,0x1
c001117f:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011187:	83 ec 0c             	sub    esp,0xc
c001118a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001118e:	e8 f9 e6 ff ff       	call   c000f88c <malloc>
c0011193:	83 c4 10             	add    esp,0x10
c0011196:	89 c3                	mov    ebx,eax
c0011198:	83 ec 08             	sub    esp,0x8
c001119b:	68 03 ff ff 0f       	push   0xfffff03
c00111a0:	53                   	push   ebx
c00111a1:	e8 2c 01 00 00       	call   c00112d2 <ReservedFilename::ReservedFilename(int)>
c00111a6:	83 c4 10             	add    esp,0x10
c00111a9:	89 1d 0c f2 02 c0    	mov    DWORD PTR ds:0xc002f20c,ebx
c00111af:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00111b7:	83 ec 0c             	sub    esp,0xc
c00111ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111be:	e8 c9 e6 ff ff       	call   c000f88c <malloc>
c00111c3:	83 c4 10             	add    esp,0x10
c00111c6:	89 c3                	mov    ebx,eax
c00111c8:	83 ec 08             	sub    esp,0x8
c00111cb:	68 01 ff ff 0f       	push   0xfffff01
c00111d0:	53                   	push   ebx
c00111d1:	e8 fc 00 00 00       	call   c00112d2 <ReservedFilename::ReservedFilename(int)>
c00111d6:	83 c4 10             	add    esp,0x10
c00111d9:	89 1d 10 f2 02 c0    	mov    DWORD PTR ds:0xc002f210,ebx
c00111df:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00111e7:	83 ec 0c             	sub    esp,0xc
c00111ea:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00111ee:	e8 99 e6 ff ff       	call   c000f88c <malloc>
c00111f3:	83 c4 10             	add    esp,0x10
c00111f6:	89 c3                	mov    ebx,eax
c00111f8:	83 ec 08             	sub    esp,0x8
c00111fb:	68 00 ff ff 0f       	push   0xfffff00
c0011200:	53                   	push   ebx
c0011201:	e8 cc 00 00 00       	call   c00112d2 <ReservedFilename::ReservedFilename(int)>
c0011206:	83 c4 10             	add    esp,0x10
c0011209:	89 1d 04 f2 02 c0    	mov    DWORD PTR ds:0xc002f204,ebx
c001120f:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011217:	83 ec 0c             	sub    esp,0xc
c001121a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001121e:	e8 69 e6 ff ff       	call   c000f88c <malloc>
c0011223:	83 c4 10             	add    esp,0x10
c0011226:	89 c3                	mov    ebx,eax
c0011228:	83 ec 08             	sub    esp,0x8
c001122b:	68 02 ff ff 0f       	push   0xfffff02
c0011230:	53                   	push   ebx
c0011231:	e8 9c 00 00 00       	call   c00112d2 <ReservedFilename::ReservedFilename(int)>
c0011236:	83 c4 10             	add    esp,0x10
c0011239:	89 1d 08 f2 02 c0    	mov    DWORD PTR ds:0xc002f208,ebx
c001123f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011247:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c001124c:	7f 7e                	jg     c00112cc <UnixFile::UnixFile(int)+0x1aa>
c001124e:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011256:	83 ec 0c             	sub    esp,0xc
c0011259:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001125d:	e8 2a e6 ff ff       	call   c000f88c <malloc>
c0011262:	83 c4 10             	add    esp,0x10
c0011265:	89 c3                	mov    ebx,eax
c0011267:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001126b:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011270:	83 ec 08             	sub    esp,0x8
c0011273:	50                   	push   eax
c0011274:	53                   	push   ebx
c0011275:	e8 58 00 00 00       	call   c00112d2 <ReservedFilename::ReservedFilename(int)>
c001127a:	83 c4 10             	add    esp,0x10
c001127d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011281:	89 1c 85 e0 f1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0e20],ebx
c0011288:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0011290:	83 ec 0c             	sub    esp,0xc
c0011293:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011297:	e8 f0 e5 ff ff       	call   c000f88c <malloc>
c001129c:	83 c4 10             	add    esp,0x10
c001129f:	89 c3                	mov    ebx,eax
c00112a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00112a5:	05 20 ff ff 0f       	add    eax,0xfffff20
c00112aa:	83 ec 08             	sub    esp,0x8
c00112ad:	50                   	push   eax
c00112ae:	53                   	push   ebx
c00112af:	e8 1e 00 00 00       	call   c00112d2 <ReservedFilename::ReservedFilename(int)>
c00112b4:	83 c4 10             	add    esp,0x10
c00112b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00112bb:	89 1c 85 a0 f1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0e60],ebx
c00112c2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00112c6:	e9 7c ff ff ff       	jmp    c0011247 <UnixFile::UnixFile(int)+0x125>
c00112cb:	90                   	nop
c00112cc:	83 c4 28             	add    esp,0x28
c00112cf:	5b                   	pop    ebx
c00112d0:	c3                   	ret    
c00112d1:	90                   	nop

c00112d2 <ReservedFilename::ReservedFilename(int)>:
c00112d2:	83 ec 0c             	sub    esp,0xc
c00112d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112d9:	83 ec 08             	sub    esp,0x8
c00112dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112e0:	50                   	push   eax
c00112e1:	e8 3c fe ff ff       	call   c0011122 <UnixFile::UnixFile(int)>
c00112e6:	83 c4 10             	add    esp,0x10
c00112e9:	ba fc ae 02 c0       	mov    edx,0xc002aefc
c00112ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112f2:	89 10                	mov    DWORD PTR [eax],edx
c00112f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112f8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00112fc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00112ff:	90                   	nop
c0011300:	83 c4 0c             	add    esp,0xc
c0011303:	c3                   	ret    

c0011304 <UnixFile::~UnixFile()>:
c0011304:	83 ec 1c             	sub    esp,0x1c
c0011307:	ba e0 ae 02 c0       	mov    edx,0xc002aee0
c001130c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011310:	89 10                	mov    DWORD PTR [eax],edx
c0011312:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011316:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011319:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c001131e:	7f 73                	jg     c0011393 <UnixFile::~UnixFile()+0x8f>
c0011320:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011328:	83 ec 0c             	sub    esp,0xc
c001132b:	68 18 f2 02 c0       	push   0xc002f218
c0011330:	e8 bb 7d 01 00       	call   c00290f0 <LinkedList<UnixFile>::getFirstElement()>
c0011335:	83 c4 10             	add    esp,0x10
c0011338:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001133c:	83 ec 0c             	sub    esp,0xc
c001133f:	68 18 f2 02 c0       	push   0xc002f218
c0011344:	e8 af 7d 01 00       	call   c00290f8 <LinkedList<UnixFile>::removeFirst()>
c0011349:	83 c4 10             	add    esp,0x10
c001134c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011350:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011354:	74 40                	je     c0011396 <UnixFile::~UnixFile()+0x92>
c0011356:	83 ec 08             	sub    esp,0x8
c0011359:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001135d:	68 18 f2 02 c0       	push   0xc002f218
c0011362:	e8 b5 7c 01 00       	call   c002901c <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011367:	83 c4 10             	add    esp,0x10
c001136a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001136e:	8d 50 01             	lea    edx,[eax+0x1]
c0011371:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011375:	3d 88 13 00 00       	cmp    eax,0x1388
c001137a:	0f 94 c0             	sete   al
c001137d:	84 c0                	test   al,al
c001137f:	74 a7                	je     c0011328 <UnixFile::~UnixFile()+0x24>
c0011381:	83 ec 0c             	sub    esp,0xc
c0011384:	68 b8 ae 02 c0       	push   0xc002aeb8
c0011389:	e8 13 90 00 00       	call   c001a3a1 <Krnl::panic(char const*)>
c001138e:	83 c4 10             	add    esp,0x10
c0011391:	eb 95                	jmp    c0011328 <UnixFile::~UnixFile()+0x24>
c0011393:	90                   	nop
c0011394:	eb 01                	jmp    c0011397 <UnixFile::~UnixFile()+0x93>
c0011396:	90                   	nop
c0011397:	90                   	nop
c0011398:	83 c4 1c             	add    esp,0x1c
c001139b:	c3                   	ret    

c001139c <UnixFile::~UnixFile()>:
c001139c:	83 ec 0c             	sub    esp,0xc
c001139f:	83 ec 0c             	sub    esp,0xc
c00113a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113a6:	e8 59 ff ff ff       	call   c0011304 <UnixFile::~UnixFile()>
c00113ab:	83 c4 10             	add    esp,0x10
c00113ae:	83 ec 08             	sub    esp,0x8
c00113b1:	6a 0c                	push   0xc
c00113b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113b7:	e8 cf 14 00 00       	call   c001288b <operator delete(void*, unsigned long)>
c00113bc:	83 c4 10             	add    esp,0x10
c00113bf:	83 c4 0c             	add    esp,0xc
c00113c2:	c3                   	ret    
c00113c3:	90                   	nop

c00113c4 <ReservedFilename::~ReservedFilename()>:
c00113c4:	83 ec 0c             	sub    esp,0xc
c00113c7:	ba fc ae 02 c0       	mov    edx,0xc002aefc
c00113cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113d0:	89 10                	mov    DWORD PTR [eax],edx
c00113d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113d6:	83 ec 0c             	sub    esp,0xc
c00113d9:	50                   	push   eax
c00113da:	e8 25 ff ff ff       	call   c0011304 <UnixFile::~UnixFile()>
c00113df:	83 c4 10             	add    esp,0x10
c00113e2:	90                   	nop
c00113e3:	83 c4 0c             	add    esp,0xc
c00113e6:	c3                   	ret    
c00113e7:	90                   	nop

c00113e8 <ReservedFilename::~ReservedFilename()>:
c00113e8:	83 ec 0c             	sub    esp,0xc
c00113eb:	83 ec 0c             	sub    esp,0xc
c00113ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113f2:	e8 cd ff ff ff       	call   c00113c4 <ReservedFilename::~ReservedFilename()>
c00113f7:	83 c4 10             	add    esp,0x10
c00113fa:	83 ec 08             	sub    esp,0x8
c00113fd:	6a 0c                	push   0xc
c00113ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011403:	e8 83 14 00 00       	call   c001288b <operator delete(void*, unsigned long)>
c0011408:	83 c4 10             	add    esp,0x10
c001140b:	83 c4 0c             	add    esp,0xc
c001140e:	c3                   	ret    

c001140f <getFromFileDescriptor(int)>:
c001140f:	53                   	push   ebx
c0011410:	83 ec 08             	sub    esp,0x8
c0011413:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011417:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c001141d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011423:	7f 2c                	jg     c0011451 <getFromFileDescriptor(int)+0x42>
c0011425:	83 ec 0c             	sub    esp,0xc
c0011428:	68 18 f2 02 c0       	push   0xc002f218
c001142d:	e8 be 7c 01 00       	call   c00290f0 <LinkedList<UnixFile>::getFirstElement()>
c0011432:	83 c4 10             	add    esp,0x10
c0011435:	85 c0                	test   eax,eax
c0011437:	75 04                	jne    c001143d <getFromFileDescriptor(int)+0x2e>
c0011439:	31 c0                	xor    eax,eax
c001143b:	eb 6e                	jmp    c00114ab <getFromFileDescriptor(int)+0x9c>
c001143d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011440:	74 69                	je     c00114ab <getFromFileDescriptor(int)+0x9c>
c0011442:	52                   	push   edx
c0011443:	52                   	push   edx
c0011444:	50                   	push   eax
c0011445:	68 18 f2 02 c0       	push   0xc002f218
c001144a:	e8 4b 7d 01 00       	call   c002919a <LinkedList<UnixFile>::getNext(UnixFile*)>
c001144f:	eb e1                	jmp    c0011432 <getFromFileDescriptor(int)+0x23>
c0011451:	a1 0c f2 02 c0       	mov    eax,ds:0xc002f20c
c0011456:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c001145c:	74 4d                	je     c00114ab <getFromFileDescriptor(int)+0x9c>
c001145e:	a1 10 f2 02 c0       	mov    eax,ds:0xc002f210
c0011463:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011469:	74 40                	je     c00114ab <getFromFileDescriptor(int)+0x9c>
c001146b:	a1 08 f2 02 c0       	mov    eax,ds:0xc002f208
c0011470:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011476:	74 33                	je     c00114ab <getFromFileDescriptor(int)+0x9c>
c0011478:	a1 04 f2 02 c0       	mov    eax,ds:0xc002f204
c001147d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011483:	74 26                	je     c00114ab <getFromFileDescriptor(int)+0x9c>
c0011485:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c001148b:	83 f8 08             	cmp    eax,0x8
c001148e:	77 09                	ja     c0011499 <getFromFileDescriptor(int)+0x8a>
c0011490:	8b 04 85 e0 f1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0e20]
c0011497:	eb 12                	jmp    c00114ab <getFromFileDescriptor(int)+0x9c>
c0011499:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c001149f:	83 fb 08             	cmp    ebx,0x8
c00114a2:	77 95                	ja     c0011439 <getFromFileDescriptor(int)+0x2a>
c00114a4:	8b 04 9d a0 f1 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd0e60]
c00114ab:	83 c4 08             	add    esp,0x8
c00114ae:	5b                   	pop    ebx
c00114af:	c3                   	ret    

c00114b0 <__static_initialization_and_destruction_0(int, int)>:
c00114b0:	83 ec 0c             	sub    esp,0xc
c00114b3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00114b8:	75 34                	jne    c00114ee <__static_initialization_and_destruction_0(int, int)+0x3e>
c00114ba:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00114c2:	75 2a                	jne    c00114ee <__static_initialization_and_destruction_0(int, int)+0x3e>
c00114c4:	83 ec 0c             	sub    esp,0xc
c00114c7:	68 18 f2 02 c0       	push   0xc002f218
c00114cc:	e8 f3 7a 01 00       	call   c0028fc4 <LinkedList<UnixFile>::LinkedList()>
c00114d1:	83 c4 10             	add    esp,0x10
c00114d4:	83 ec 04             	sub    esp,0x4
c00114d7:	68 7c de 02 c0       	push   0xc002de7c
c00114dc:	68 18 f2 02 c0       	push   0xc002f218
c00114e1:	68 c2 8f 02 c0       	push   0xc0028fc2
c00114e6:	e8 1a 13 00 00       	call   c0012805 <__cxa_atexit>
c00114eb:	83 c4 10             	add    esp,0x10
c00114ee:	90                   	nop
c00114ef:	83 c4 0c             	add    esp,0xc
c00114f2:	c3                   	ret    

c00114f3 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00114f3:	83 ec 0c             	sub    esp,0xc
c00114f6:	83 ec 08             	sub    esp,0x8
c00114f9:	68 ff ff 00 00       	push   0xffff
c00114fe:	6a 01                	push   0x1
c0011500:	e8 ab ff ff ff       	call   c00114b0 <__static_initialization_and_destruction_0(int, int)>
c0011505:	83 c4 10             	add    esp,0x10
c0011508:	83 c4 0c             	add    esp,0xc
c001150b:	c3                   	ret    

c001150c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c001150c:	53                   	push   ebx
c001150d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011511:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011515:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c001151b:	89 c8                	mov    eax,ecx
c001151d:	d1 e8                	shr    eax,1
c001151f:	03 05 68 e0 02 c0    	add    eax,DWORD PTR ds:0xc002e068
c0011525:	83 e1 01             	and    ecx,0x1
c0011528:	8a 10                	mov    dl,BYTE PTR [eax]
c001152a:	75 09                	jne    c0011535 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c001152c:	83 e2 f0             	and    edx,0xfffffff0
c001152f:	09 da                	or     edx,ebx
c0011531:	88 10                	mov    BYTE PTR [eax],dl
c0011533:	5b                   	pop    ebx
c0011534:	c3                   	ret    
c0011535:	c1 e3 04             	shl    ebx,0x4
c0011538:	83 e2 0f             	and    edx,0xf
c001153b:	09 da                	or     edx,ebx
c001153d:	88 10                	mov    BYTE PTR [eax],dl
c001153f:	5b                   	pop    ebx
c0011540:	c3                   	ret    

c0011541 <Virt::getPageState(unsigned long)>:
c0011541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011545:	8b 0d 68 e0 02 c0    	mov    ecx,DWORD PTR ds:0xc002e068
c001154b:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011551:	89 d0                	mov    eax,edx
c0011553:	d1 e8                	shr    eax,1
c0011555:	83 e2 01             	and    edx,0x1
c0011558:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c001155b:	75 04                	jne    c0011561 <Virt::getPageState(unsigned long)+0x20>
c001155d:	83 e0 0f             	and    eax,0xf
c0011560:	c3                   	ret    
c0011561:	c0 e8 04             	shr    al,0x4
c0011564:	c3                   	ret    

c0011565 <Virt::allocateKernelVirtualPages(int)>:
c0011565:	55                   	push   ebp
c0011566:	31 ed                	xor    ebp,ebp
c0011568:	57                   	push   edi
c0011569:	56                   	push   esi
c001156a:	53                   	push   ebx
c001156b:	31 db                	xor    ebx,ebx
c001156d:	83 ec 1c             	sub    esp,0x1c
c0011570:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011574:	8b 3d 64 e0 02 c0    	mov    edi,DWORD PTR ds:0xc002e064
c001157a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001157f:	57                   	push   edi
c0011580:	e8 bc ff ff ff       	call   c0011541 <Virt::getPageState(unsigned long)>
c0011585:	5a                   	pop    edx
c0011586:	84 c0                	test   al,al
c0011588:	75 3a                	jne    c00115c4 <Virt::allocateKernelVirtualPages(int)+0x5f>
c001158a:	85 db                	test   ebx,ebx
c001158c:	75 02                	jne    c0011590 <Virt::allocateKernelVirtualPages(int)+0x2b>
c001158e:	89 fd                	mov    ebp,edi
c0011590:	43                   	inc    ebx
c0011591:	39 f3                	cmp    ebx,esi
c0011593:	74 5a                	je     c00115ef <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011595:	47                   	inc    edi
c0011596:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c001159c:	76 31                	jbe    c00115cf <Virt::allocateKernelVirtualPages(int)+0x6a>
c001159e:	c7 05 64 e0 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002e064,0xc8000
c00115a8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00115ad:	75 28                	jne    c00115d7 <Virt::allocateKernelVirtualPages(int)+0x72>
c00115af:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00115b4:	bf 00 80 0c 00       	mov    edi,0xc8000
c00115b9:	57                   	push   edi
c00115ba:	e8 82 ff ff ff       	call   c0011541 <Virt::getPageState(unsigned long)>
c00115bf:	5a                   	pop    edx
c00115c0:	84 c0                	test   al,al
c00115c2:	74 c6                	je     c001158a <Virt::allocateKernelVirtualPages(int)+0x25>
c00115c4:	31 db                	xor    ebx,ebx
c00115c6:	47                   	inc    edi
c00115c7:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00115cd:	77 cf                	ja     c001159e <Virt::allocateKernelVirtualPages(int)+0x39>
c00115cf:	89 3d 64 e0 02 c0    	mov    DWORD PTR ds:0xc002e064,edi
c00115d5:	eb a8                	jmp    c001157f <Virt::allocateKernelVirtualPages(int)+0x1a>
c00115d7:	83 ec 0c             	sub    esp,0xc
c00115da:	68 10 af 02 c0       	push   0xc002af10
c00115df:	e8 bd 8d 00 00       	call   c001a3a1 <Krnl::panic(char const*)>
c00115e4:	8b 3d 64 e0 02 c0    	mov    edi,DWORD PTR ds:0xc002e064
c00115ea:	83 c4 10             	add    esp,0x10
c00115ed:	eb 90                	jmp    c001157f <Virt::allocateKernelVirtualPages(int)+0x1a>
c00115ef:	89 2d 64 e0 02 c0    	mov    DWORD PTR ds:0xc002e064,ebp
c00115f5:	4b                   	dec    ebx
c00115f6:	74 5f                	je     c0011657 <Virt::allocateKernelVirtualPages(int)+0xf2>
c00115f8:	85 f6                	test   esi,esi
c00115fa:	74 3d                	je     c0011639 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00115fc:	89 e8                	mov    eax,ebp
c00115fe:	31 db                	xor    ebx,ebx
c0011600:	8d 7e ff             	lea    edi,[esi-0x1]
c0011603:	eb 14                	jmp    c0011619 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011605:	6a 01                	push   0x1
c0011607:	43                   	inc    ebx
c0011608:	50                   	push   eax
c0011609:	e8 fe fe ff ff       	call   c001150c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001160e:	58                   	pop    eax
c001160f:	39 f3                	cmp    ebx,esi
c0011611:	5a                   	pop    edx
c0011612:	74 25                	je     c0011639 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011614:	a1 64 e0 02 c0       	mov    eax,ds:0xc002e064
c0011619:	8d 50 01             	lea    edx,[eax+0x1]
c001161c:	85 db                	test   ebx,ebx
c001161e:	89 15 64 e0 02 c0    	mov    DWORD PTR ds:0xc002e064,edx
c0011624:	74 20                	je     c0011646 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011626:	39 df                	cmp    edi,ebx
c0011628:	75 db                	jne    c0011605 <Virt::allocateKernelVirtualPages(int)+0xa0>
c001162a:	6a 03                	push   0x3
c001162c:	43                   	inc    ebx
c001162d:	50                   	push   eax
c001162e:	e8 d9 fe ff ff       	call   c001150c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011633:	59                   	pop    ecx
c0011634:	39 f3                	cmp    ebx,esi
c0011636:	58                   	pop    eax
c0011637:	75 db                	jne    c0011614 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011639:	83 c4 1c             	add    esp,0x1c
c001163c:	89 e8                	mov    eax,ebp
c001163e:	5b                   	pop    ebx
c001163f:	c1 e0 0c             	shl    eax,0xc
c0011642:	5e                   	pop    esi
c0011643:	5f                   	pop    edi
c0011644:	5d                   	pop    ebp
c0011645:	c3                   	ret    
c0011646:	6a 02                	push   0x2
c0011648:	bb 01 00 00 00       	mov    ebx,0x1
c001164d:	50                   	push   eax
c001164e:	e8 b9 fe ff ff       	call   c001150c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011653:	58                   	pop    eax
c0011654:	5a                   	pop    edx
c0011655:	eb bd                	jmp    c0011614 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011657:	6a 04                	push   0x4
c0011659:	8d 45 01             	lea    eax,[ebp+0x1]
c001165c:	55                   	push   ebp
c001165d:	a3 64 e0 02 c0       	mov    ds:0xc002e064,eax
c0011662:	e8 a5 fe ff ff       	call   c001150c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011667:	59                   	pop    ecx
c0011668:	89 e8                	mov    eax,ebp
c001166a:	5b                   	pop    ebx
c001166b:	c1 e0 0c             	shl    eax,0xc
c001166e:	83 c4 1c             	add    esp,0x1c
c0011671:	5b                   	pop    ebx
c0011672:	5e                   	pop    esi
c0011673:	5f                   	pop    edi
c0011674:	5d                   	pop    ebp
c0011675:	c3                   	ret    

c0011676 <Virt::freeSwapfilePage(unsigned long)>:
c0011676:	53                   	push   ebx
c0011677:	8b 15 2c f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f22c
c001167d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011681:	b8 01 00 00 00       	mov    eax,0x1
c0011686:	89 cb                	mov    ebx,ecx
c0011688:	d3 e0                	shl    eax,cl
c001168a:	c1 eb 05             	shr    ebx,0x5
c001168d:	f7 d0                	not    eax
c001168f:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011692:	5b                   	pop    ebx
c0011693:	c3                   	ret    

c0011694 <Virt::swapIDToSector(unsigned long)>:
c0011694:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011698:	0f af 05 6c e0 02 c0 	imul   eax,DWORD PTR ds:0xc002e06c
c001169f:	03 05 74 e0 02 c0    	add    eax,DWORD PTR ds:0xc002e074
c00116a5:	c3                   	ret    

c00116a6 <Virt::allocateSwapfilePage()>:
c00116a6:	55                   	push   ebp
c00116a7:	31 d2                	xor    edx,edx
c00116a9:	57                   	push   edi
c00116aa:	56                   	push   esi
c00116ab:	53                   	push   ebx
c00116ac:	83 ec 0c             	sub    esp,0xc
c00116af:	8b 0d 6c e0 02 c0    	mov    ecx,DWORD PTR ds:0xc002e06c
c00116b5:	a1 70 e0 02 c0       	mov    eax,ds:0xc002e070
c00116ba:	f7 f1                	div    ecx
c00116bc:	39 0d 70 e0 02 c0    	cmp    DWORD PTR ds:0xc002e070,ecx
c00116c2:	72 2d                	jb     c00116f1 <Virt::allocateSwapfilePage()+0x4b>
c00116c4:	8b 35 2c f2 02 c0    	mov    esi,DWORD PTR ds:0xc002f22c
c00116ca:	8b 16                	mov    edx,DWORD PTR [esi]
c00116cc:	f6 c2 01             	test   dl,0x1
c00116cf:	74 3c                	je     c001170d <Virt::allocateSwapfilePage()+0x67>
c00116d1:	31 c9                	xor    ecx,ecx
c00116d3:	bf 01 00 00 00       	mov    edi,0x1
c00116d8:	eb 12                	jmp    c00116ec <Virt::allocateSwapfilePage()+0x46>
c00116da:	89 fd                	mov    ebp,edi
c00116dc:	89 ca                	mov    edx,ecx
c00116de:	d3 e5                	shl    ebp,cl
c00116e0:	c1 ea 05             	shr    edx,0x5
c00116e3:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00116e6:	8b 13                	mov    edx,DWORD PTR [ebx]
c00116e8:	85 ea                	test   edx,ebp
c00116ea:	74 2a                	je     c0011716 <Virt::allocateSwapfilePage()+0x70>
c00116ec:	41                   	inc    ecx
c00116ed:	39 c8                	cmp    eax,ecx
c00116ef:	77 e9                	ja     c00116da <Virt::allocateSwapfilePage()+0x34>
c00116f1:	83 ec 0c             	sub    esp,0xc
c00116f4:	68 97 b0 02 c0       	push   0xc002b097
c00116f9:	e8 a3 8c 00 00       	call   c001a3a1 <Krnl::panic(char const*)>
c00116fe:	83 c4 10             	add    esp,0x10
c0011701:	31 c9                	xor    ecx,ecx
c0011703:	83 c4 0c             	add    esp,0xc
c0011706:	89 c8                	mov    eax,ecx
c0011708:	5b                   	pop    ebx
c0011709:	5e                   	pop    esi
c001170a:	5f                   	pop    edi
c001170b:	5d                   	pop    ebp
c001170c:	c3                   	ret    
c001170d:	89 f3                	mov    ebx,esi
c001170f:	bd 01 00 00 00       	mov    ebp,0x1
c0011714:	31 c9                	xor    ecx,ecx
c0011716:	09 ea                	or     edx,ebp
c0011718:	89 c8                	mov    eax,ecx
c001171a:	89 13                	mov    DWORD PTR [ebx],edx
c001171c:	83 c4 0c             	add    esp,0xc
c001171f:	5b                   	pop    ebx
c0011720:	5e                   	pop    esi
c0011721:	5f                   	pop    edi
c0011722:	5d                   	pop    ebp
c0011723:	c3                   	ret    

c0011724 <Virt::virtualMemorySetup()>:
c0011724:	53                   	push   ebx
c0011725:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001172a:	83 ec 08             	sub    esp,0x8
c001172d:	6a 0f                	push   0xf
c001172f:	53                   	push   ebx
c0011730:	43                   	inc    ebx
c0011731:	e8 d6 fd ff ff       	call   c001150c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011736:	59                   	pop    ecx
c0011737:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001173d:	58                   	pop    eax
c001173e:	75 ed                	jne    c001172d <Virt::virtualMemorySetup()+0x9>
c0011740:	83 ec 08             	sub    esp,0x8
c0011743:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011748:	68 00 00 00 c8       	push   0xc8000000
c001174d:	68 ae b0 02 c0       	push   0xc002b0ae
c0011752:	e8 14 12 00 00       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0011757:	58                   	pop    eax
c0011758:	5a                   	pop    edx
c0011759:	68 00 f0 ff ef       	push   0xeffff000
c001175e:	68 c2 b0 02 c0       	push   0xc002b0c2
c0011763:	e8 03 12 00 00       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0011768:	83 c4 10             	add    esp,0x10
c001176b:	83 ec 08             	sub    esp,0x8
c001176e:	6a 00                	push   0x0
c0011770:	53                   	push   ebx
c0011771:	43                   	inc    ebx
c0011772:	e8 95 fd ff ff       	call   c001150c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011777:	83 c4 10             	add    esp,0x10
c001177a:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011780:	75 e9                	jne    c001176b <Virt::virtualMemorySetup()+0x47>
c0011782:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011787:	83 ec 08             	sub    esp,0x8
c001178a:	6a 0f                	push   0xf
c001178c:	53                   	push   ebx
c001178d:	43                   	inc    ebx
c001178e:	e8 79 fd ff ff       	call   c001150c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011793:	83 c4 10             	add    esp,0x10
c0011796:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c001179c:	75 e9                	jne    c0011787 <Virt::virtualMemorySetup()+0x63>
c001179e:	83 c4 08             	add    esp,0x8
c00117a1:	5b                   	pop    ebx
c00117a2:	c3                   	ret    

c00117a3 <Virt::setupPageSwapping(int)>:
c00117a3:	57                   	push   edi
c00117a4:	56                   	push   esi
c00117a5:	53                   	push   ebx
c00117a6:	83 ec 1c             	sub    esp,0x1c
c00117a9:	68 d6 b0 02 c0       	push   0xc002b0d6
c00117ae:	e8 b8 11 00 00       	call   c001296b <Dbg::kprintf(char const*, ...)>
c00117b3:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00117ba:	e8 cd e0 ff ff       	call   c000f88c <malloc>
c00117bf:	83 c4 0c             	add    esp,0xc
c00117c2:	89 c6                	mov    esi,eax
c00117c4:	ff 35 10 26 03 c0    	push   DWORD PTR ds:0xc0032610
c00117ca:	68 ea b0 02 c0       	push   0xc002b0ea
c00117cf:	50                   	push   eax
c00117d0:	e8 f5 16 00 00       	call   c0012eca <File::File(char const*, Process*)>
c00117d5:	89 34 24             	mov    DWORD PTR [esp],esi
c00117d8:	e8 c9 18 00 00       	call   c00130a6 <File::unlink()>
c00117dd:	59                   	pop    ecx
c00117de:	5b                   	pop    ebx
c00117df:	6a 12                	push   0x12
c00117e1:	56                   	push   esi
c00117e2:	e8 47 17 00 00       	call   c0012f2e <File::open(FileOpenMode)>
c00117e7:	83 c4 10             	add    esp,0x10
c00117ea:	85 c0                	test   eax,eax
c00117ec:	0f 85 5b 01 00 00    	jne    c001194d <Virt::setupPageSwapping(int)+0x1aa>
c00117f2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00117f6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00117fe:	c1 e3 08             	shl    ebx,0x8
c0011801:	83 ec 0c             	sub    esp,0xc
c0011804:	68 00 00 01 00       	push   0x10000
c0011809:	e8 7e e0 ff ff       	call   c000f88c <malloc>
c001180e:	83 c4 0c             	add    esp,0xc
c0011811:	89 c7                	mov    edi,eax
c0011813:	68 00 00 01 00       	push   0x10000
c0011818:	68 ee 00 00 00       	push   0xee
c001181d:	50                   	push   eax
c001181e:	e8 2d ef fe ff       	call   c0000750 <memset>
c0011823:	83 c4 10             	add    esp,0x10
c0011826:	85 db                	test   ebx,ebx
c0011828:	79 03                	jns    c001182d <Virt::setupPageSwapping(int)+0x8a>
c001182a:	83 c3 0f             	add    ebx,0xf
c001182d:	c1 fb 04             	sar    ebx,0x4
c0011830:	4b                   	dec    ebx
c0011831:	83 fb ff             	cmp    ebx,0xffffffff
c0011834:	74 4f                	je     c0011885 <Virt::setupPageSwapping(int)+0xe2>
c0011836:	83 ec 0c             	sub    esp,0xc
c0011839:	8b 06                	mov    eax,DWORD PTR [esi]
c001183b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001183f:	52                   	push   edx
c0011840:	57                   	push   edi
c0011841:	6a 00                	push   0x0
c0011843:	68 00 00 01 00       	push   0x10000
c0011848:	56                   	push   esi
c0011849:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001184c:	83 c4 20             	add    esp,0x20
c001184f:	85 c0                	test   eax,eax
c0011851:	0f 85 e0 00 00 00    	jne    c0011937 <Virt::setupPageSwapping(int)+0x194>
c0011857:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001185b:	3d 00 00 01 00       	cmp    eax,0x10000
c0011860:	74 ce                	je     c0011830 <Virt::setupPageSwapping(int)+0x8d>
c0011862:	83 ec 08             	sub    esp,0x8
c0011865:	4b                   	dec    ebx
c0011866:	50                   	push   eax
c0011867:	68 3d b1 02 c0       	push   0xc002b13d
c001186c:	e8 fa 10 00 00       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0011871:	c7 04 24 46 b1 02 c0 	mov    DWORD PTR [esp],0xc002b146
c0011878:	e8 24 8b 00 00       	call   c001a3a1 <Krnl::panic(char const*)>
c001187d:	83 c4 10             	add    esp,0x10
c0011880:	83 fb ff             	cmp    ebx,0xffffffff
c0011883:	75 b1                	jne    c0011836 <Virt::setupPageSwapping(int)+0x93>
c0011885:	83 ec 0c             	sub    esp,0xc
c0011888:	56                   	push   esi
c0011889:	e8 fe 16 00 00       	call   c0012f8c <File::close()>
c001188e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011891:	e8 16 e0 ff ff       	call   c000f8ac <rfree>
c0011896:	83 c4 10             	add    esp,0x10
c0011899:	85 f6                	test   esi,esi
c001189b:	74 0c                	je     c00118a9 <Virt::setupPageSwapping(int)+0x106>
c001189d:	83 ec 0c             	sub    esp,0xc
c00118a0:	8b 06                	mov    eax,DWORD PTR [esi]
c00118a2:	56                   	push   esi
c00118a3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00118a6:	83 c4 10             	add    esp,0x10
c00118a9:	83 ec 08             	sub    esp,0x8
c00118ac:	a1 c8 f6 02 c0       	mov    eax,ds:0xc002f6c8
c00118b1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00118b7:	8b 10                	mov    edx,DWORD PTR [eax]
c00118b9:	68 ea b0 02 c0       	push   0xc002b0ea
c00118be:	50                   	push   eax
c00118bf:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c00118c2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00118c6:	c6 05 78 e0 02 c0 43 	mov    BYTE PTR ds:0xc002e078,0x43
c00118cd:	c1 e2 0b             	shl    edx,0xb
c00118d0:	a3 74 e0 02 c0       	mov    ds:0xc002e074,eax
c00118d5:	89 15 70 e0 02 c0    	mov    DWORD PTR ds:0xc002e070,edx
c00118db:	c7 05 6c e0 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002e06c,0x8
c00118e5:	c1 ea 08             	shr    edx,0x8
c00118e8:	89 14 24             	mov    DWORD PTR [esp],edx
c00118eb:	e8 9c df ff ff       	call   c000f88c <malloc>
c00118f0:	83 c4 0c             	add    esp,0xc
c00118f3:	89 c1                	mov    ecx,eax
c00118f5:	a3 2c f2 02 c0       	mov    ds:0xc002f22c,eax
c00118fa:	31 d2                	xor    edx,edx
c00118fc:	a1 70 e0 02 c0       	mov    eax,ds:0xc002e070
c0011901:	f7 35 6c e0 02 c0    	div    DWORD PTR ds:0xc002e06c
c0011907:	c1 e8 05             	shr    eax,0x5
c001190a:	50                   	push   eax
c001190b:	6a 00                	push   0x0
c001190d:	51                   	push   ecx
c001190e:	e8 3d ee fe ff       	call   c0000750 <memset>
c0011913:	58                   	pop    eax
c0011914:	a1 70 e0 02 c0       	mov    eax,ds:0xc002e070
c0011919:	5a                   	pop    edx
c001191a:	31 d2                	xor    edx,edx
c001191c:	f7 35 6c e0 02 c0    	div    DWORD PTR ds:0xc002e06c
c0011922:	c1 e8 05             	shr    eax,0x5
c0011925:	50                   	push   eax
c0011926:	68 4c b1 02 c0       	push   0xc002b14c
c001192b:	e8 3b 10 00 00       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0011930:	83 c4 20             	add    esp,0x20
c0011933:	5b                   	pop    ebx
c0011934:	5e                   	pop    esi
c0011935:	5f                   	pop    edi
c0011936:	c3                   	ret    
c0011937:	83 ec 08             	sub    esp,0x8
c001193a:	50                   	push   eax
c001193b:	68 25 b1 02 c0       	push   0xc002b125
c0011940:	e8 26 10 00 00       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0011945:	83 c4 10             	add    esp,0x10
c0011948:	e9 0a ff ff ff       	jmp    c0011857 <Virt::setupPageSwapping(int)+0xb4>
c001194d:	83 ec 08             	sub    esp,0x8
c0011950:	50                   	push   eax
c0011951:	68 01 b1 02 c0       	push   0xc002b101
c0011956:	e8 10 10 00 00       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001195b:	c7 04 24 0a b1 02 c0 	mov    DWORD PTR [esp],0xc002b10a
c0011962:	e8 3a 8a 00 00       	call   c001a3a1 <Krnl::panic(char const*)>
c0011967:	83 c4 10             	add    esp,0x10
c001196a:	e9 83 fe ff ff       	jmp    c00117f2 <Virt::setupPageSwapping(int)+0x4f>
c001196f:	90                   	nop

c0011970 <VAS::VAS()>:
c0011970:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011974:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001197b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001197f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011986:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001198a:	a3 30 f2 02 c0       	mov    ds:0xc002f230,eax
c001198f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011993:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011997:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001199b:	c6 00 01             	mov    BYTE PTR [eax],0x1
c001199e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00119a2:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c00119a9:	90                   	nop
c00119aa:	c3                   	ret    
c00119ab:	90                   	nop

c00119ac <VAS::VAS(VAS*)>:
c00119ac:	83 ec 0c             	sub    esp,0xc
c00119af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119b3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00119ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119be:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00119c5:	83 ec 0c             	sub    esp,0xc
c00119c8:	68 30 af 02 c0       	push   0xc002af30
c00119cd:	e8 cf 89 00 00       	call   c001a3a1 <Krnl::panic(char const*)>
c00119d2:	83 c4 10             	add    esp,0x10
c00119d5:	90                   	nop
c00119d6:	83 c4 0c             	add    esp,0xc
c00119d9:	c3                   	ret    

c00119da <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00119da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119de:	89 c2                	mov    edx,eax
c00119e0:	c1 e8 0a             	shr    eax,0xa
c00119e3:	c1 ea 16             	shr    edx,0x16
c00119e6:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00119eb:	19 c9                	sbb    ecx,ecx
c00119ed:	c1 e2 0c             	shl    edx,0xc
c00119f0:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00119f6:	25 fc 0f 00 00       	and    eax,0xffc
c00119fb:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011a02:	01 d0                	add    eax,edx
c0011a04:	c3                   	ret    
c0011a05:	90                   	nop

c0011a06 <VAS::getPageTableEntry(unsigned long)>:
c0011a06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011a0a:	89 ca                	mov    edx,ecx
c0011a0c:	c1 e9 0a             	shr    ecx,0xa
c0011a0f:	c1 ea 16             	shr    edx,0x16
c0011a12:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011a18:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011a1e:	c1 e0 0c             	shl    eax,0xc
c0011a21:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011a24:	c3                   	ret    

c0011a25 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011a25:	57                   	push   edi
c0011a26:	56                   	push   esi
c0011a27:	be 01 00 00 00       	mov    esi,0x1
c0011a2c:	53                   	push   ebx
c0011a2d:	83 ec 10             	sub    esp,0x10
c0011a30:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011a34:	c1 eb 0c             	shr    ebx,0xc
c0011a37:	eb 3f                	jmp    c0011a78 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011a39:	83 ec 08             	sub    esp,0x8
c0011a3c:	57                   	push   edi
c0011a3d:	ff 35 30 f2 02 c0    	push   DWORD PTR ds:0xc002f230
c0011a43:	e8 be ff ff ff       	call   c0011a06 <VAS::getPageTableEntry(unsigned long)>
c0011a48:	83 c4 10             	add    esp,0x10
c0011a4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a4d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011a51:	f6 c4 04             	test   ah,0x4
c0011a54:	75 5f                	jne    c0011ab5 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011a56:	80 fa 04             	cmp    dl,0x4
c0011a59:	74 78                	je     c0011ad3 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011a5b:	80 fa 02             	cmp    dl,0x2
c0011a5e:	0f 84 88 00 00 00    	je     c0011aec <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011a64:	80 fa 03             	cmp    dl,0x3
c0011a67:	0f 84 ad 00 00 00    	je     c0011b1a <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011a6d:	fe ca                	dec    dl
c0011a6f:	0f 84 92 00 00 00    	je     c0011b07 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011a75:	43                   	inc    ebx
c0011a76:	31 f6                	xor    esi,esi
c0011a78:	53                   	push   ebx
c0011a79:	89 df                	mov    edi,ebx
c0011a7b:	e8 c1 fa ff ff       	call   c0011541 <Virt::getPageState(unsigned long)>
c0011a80:	c1 e7 0c             	shl    edi,0xc
c0011a83:	59                   	pop    ecx
c0011a84:	84 c0                	test   al,al
c0011a86:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011a8a:	75 ad                	jne    c0011a39 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011a8c:	83 ec 0c             	sub    esp,0xc
c0011a8f:	68 67 b1 02 c0       	push   0xc002b167
c0011a94:	e8 08 89 00 00       	call   c001a3a1 <Krnl::panic(char const*)>
c0011a99:	58                   	pop    eax
c0011a9a:	5a                   	pop    edx
c0011a9b:	57                   	push   edi
c0011a9c:	ff 35 30 f2 02 c0    	push   DWORD PTR ds:0xc002f230
c0011aa2:	e8 5f ff ff ff       	call   c0011a06 <VAS::getPageTableEntry(unsigned long)>
c0011aa7:	83 c4 10             	add    esp,0x10
c0011aaa:	8b 00                	mov    eax,DWORD PTR [eax]
c0011aac:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011ab0:	f6 c4 04             	test   ah,0x4
c0011ab3:	74 c0                	je     c0011a75 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011ab5:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011ab9:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011abe:	83 ec 0c             	sub    esp,0xc
c0011ac1:	50                   	push   eax
c0011ac2:	e8 0b e1 ff ff       	call   c000fbd2 <Phys::freePage(unsigned long)>
c0011ac7:	83 c4 10             	add    esp,0x10
c0011aca:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011ace:	80 fa 04             	cmp    dl,0x4
c0011ad1:	75 88                	jne    c0011a5b <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011ad3:	89 f0                	mov    eax,esi
c0011ad5:	84 c0                	test   al,al
c0011ad7:	75 47                	jne    c0011b20 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011ad9:	c7 44 24 20 54 af 02 c0 	mov    DWORD PTR [esp+0x20],0xc002af54
c0011ae1:	83 c4 10             	add    esp,0x10
c0011ae4:	5b                   	pop    ebx
c0011ae5:	5e                   	pop    esi
c0011ae6:	5f                   	pop    edi
c0011ae7:	e9 b5 88 00 00       	jmp    c001a3a1 <Krnl::panic(char const*)>
c0011aec:	89 f0                	mov    eax,esi
c0011aee:	84 c0                	test   al,al
c0011af0:	75 15                	jne    c0011b07 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011af2:	83 ec 0c             	sub    esp,0xc
c0011af5:	68 83 b1 02 c0       	push   0xc002b183
c0011afa:	e8 a2 88 00 00       	call   c001a3a1 <Krnl::panic(char const*)>
c0011aff:	83 c4 10             	add    esp,0x10
c0011b02:	e9 6e ff ff ff       	jmp    c0011a75 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011b07:	83 ec 08             	sub    esp,0x8
c0011b0a:	6a 00                	push   0x0
c0011b0c:	53                   	push   ebx
c0011b0d:	e8 fa f9 ff ff       	call   c001150c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b12:	83 c4 10             	add    esp,0x10
c0011b15:	e9 5b ff ff ff       	jmp    c0011a75 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011b1a:	89 f0                	mov    eax,esi
c0011b1c:	84 c0                	test   al,al
c0011b1e:	75 15                	jne    c0011b35 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011b20:	83 ec 08             	sub    esp,0x8
c0011b23:	6a 00                	push   0x0
c0011b25:	53                   	push   ebx
c0011b26:	e8 e1 f9 ff ff       	call   c001150c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b2b:	83 c4 10             	add    esp,0x10
c0011b2e:	83 c4 10             	add    esp,0x10
c0011b31:	5b                   	pop    ebx
c0011b32:	5e                   	pop    esi
c0011b33:	5f                   	pop    edi
c0011b34:	c3                   	ret    
c0011b35:	c7 44 24 20 9f b1 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b19f
c0011b3d:	83 c4 10             	add    esp,0x10
c0011b40:	5b                   	pop    ebx
c0011b41:	5e                   	pop    esi
c0011b42:	5f                   	pop    edi
c0011b43:	e9 59 88 00 00       	jmp    c001a3a1 <Krnl::panic(char const*)>

c0011b48 <VAS::freeAllocatedPages(unsigned long)>:
c0011b48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b4c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011b50:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011b54:	74 09                	je     c0011b5f <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011b56:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011b5a:	e9 c6 fe ff ff       	jmp    c0011a25 <Virt::freeKernelVirtualPages(unsigned long)>
c0011b5f:	c7 44 24 04 78 af 02 c0 	mov    DWORD PTR [esp+0x4],0xc002af78
c0011b67:	e9 ff 0d 00 00       	jmp    c001296b <Dbg::kprintf(char const*, ...)>

c0011b6c <VAS::virtualToPhysical(unsigned long)>:
c0011b6c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011b70:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011b74:	e8 8d fe ff ff       	call   c0011a06 <VAS::getPageTableEntry(unsigned long)>
c0011b79:	5a                   	pop    edx
c0011b7a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b7c:	59                   	pop    ecx
c0011b7d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011b82:	c3                   	ret    
c0011b83:	90                   	nop

c0011b84 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011b84:	55                   	push   ebp
c0011b85:	57                   	push   edi
c0011b86:	56                   	push   esi
c0011b87:	53                   	push   ebx
c0011b88:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011b8c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011b90:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011b94:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011b98:	85 db                	test   ebx,ebx
c0011b9a:	7e 22                	jle    c0011bbe <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011b9c:	c1 e3 0c             	shl    ebx,0xc
c0011b9f:	01 f3                	add    ebx,esi
c0011ba1:	56                   	push   esi
c0011ba2:	81 c6 00 10 00 00    	add    esi,0x1000
c0011ba8:	55                   	push   ebp
c0011ba9:	e8 58 fe ff ff       	call   c0011a06 <VAS::getPageTableEntry(unsigned long)>
c0011bae:	5a                   	pop    edx
c0011baf:	59                   	pop    ecx
c0011bb0:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011bb2:	21 f9                	and    ecx,edi
c0011bb4:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011bb8:	39 f3                	cmp    ebx,esi
c0011bba:	89 08                	mov    DWORD PTR [eax],ecx
c0011bbc:	75 e3                	jne    c0011ba1 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011bbe:	5b                   	pop    ebx
c0011bbf:	5e                   	pop    esi
c0011bc0:	5f                   	pop    edi
c0011bc1:	5d                   	pop    ebp
c0011bc2:	c3                   	ret    
c0011bc3:	90                   	nop

c0011bc4 <VAS::setToWriteCombining(unsigned long, int)>:
c0011bc4:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c0011bc9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011bcf:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011bd6:	75 01                	jne    c0011bd9 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011bd8:	c3                   	ret    
c0011bd9:	68 80 00 00 00       	push   0x80
c0011bde:	6a ff                	push   0xffffffff
c0011be0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011be4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011be8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011bec:	e8 93 ff ff ff       	call   c0011b84 <VAS::reflagRange(unsigned long, int, int, int)>
c0011bf1:	83 c4 14             	add    esp,0x14
c0011bf4:	c3                   	ret    
c0011bf5:	90                   	nop

c0011bf6 <VAS::mapOtherVASIn(bool, VAS*)>:
c0011bf6:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011bfb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011bff:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0011c02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c06:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0011c09:	19 c0                	sbb    eax,eax
c0011c0b:	83 ca 03             	or     edx,0x3
c0011c0e:	83 e0 fc             	and    eax,0xfffffffc
c0011c11:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011c18:	0f 20 d8             	mov    eax,cr3
c0011c1b:	0f 22 d8             	mov    cr3,eax
c0011c1e:	c3                   	ret    
c0011c1f:	90                   	nop

c0011c20 <VAS::~VAS()>:
c0011c20:	83 ec 2c             	sub    esp,0x2c
c0011c23:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011c2b:	fa                   	cli    
c0011c2c:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c0011c31:	40                   	inc    eax
c0011c32:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c0011c37:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011c3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c3e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011c41:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011c47:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011c4b:	6a 01                	push   0x1
c0011c4d:	50                   	push   eax
c0011c4e:	e8 a3 ff ff ff       	call   c0011bf6 <VAS::mapOtherVASIn(bool, VAS*)>
c0011c53:	83 c4 0c             	add    esp,0xc
c0011c56:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011c5e:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011c66:	0f 8f d4 00 00 00    	jg     c0011d40 <VAS::~VAS()+0x120>
c0011c6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011c70:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011c73:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011c77:	c1 e2 02             	shl    edx,0x2
c0011c7a:	01 d0                	add    eax,edx
c0011c7c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c86:	83 e0 01             	and    eax,0x1
c0011c89:	0f 84 a8 00 00 00    	je     c0011d37 <VAS::~VAS()+0x117>
c0011c8f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011c97:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011c9f:	7f 72                	jg     c0011d13 <VAS::~VAS()+0xf3>
c0011ca1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011ca5:	c1 e0 0a             	shl    eax,0xa
c0011ca8:	89 c2                	mov    edx,eax
c0011caa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011cae:	01 d0                	add    eax,edx
c0011cb0:	c1 e0 0c             	shl    eax,0xc
c0011cb3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011cb7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011cbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cbe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011cc1:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011cc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0011ccb:	6a 01                	push   0x1
c0011ccd:	50                   	push   eax
c0011cce:	e8 07 fd ff ff       	call   c00119da <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011cd3:	83 c4 0c             	add    esp,0xc
c0011cd6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011cda:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011cde:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ce0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011ce4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ce8:	25 01 04 00 00       	and    eax,0x401
c0011ced:	3d 01 04 00 00       	cmp    eax,0x401
c0011cf2:	75 19                	jne    c0011d0d <VAS::~VAS()+0xed>
c0011cf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cf8:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011cfd:	83 ec 0c             	sub    esp,0xc
c0011d00:	50                   	push   eax
c0011d01:	e8 cc de ff ff       	call   c000fbd2 <Phys::freePage(unsigned long)>
c0011d06:	83 c4 10             	add    esp,0x10
c0011d09:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011d0d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011d11:	eb 84                	jmp    c0011c97 <VAS::~VAS()+0x77>
c0011d13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d17:	25 00 04 00 00       	and    eax,0x400
c0011d1c:	74 19                	je     c0011d37 <VAS::~VAS()+0x117>
c0011d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d22:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011d27:	83 ec 0c             	sub    esp,0xc
c0011d2a:	50                   	push   eax
c0011d2b:	e8 a2 de ff ff       	call   c000fbd2 <Phys::freePage(unsigned long)>
c0011d30:	83 c4 10             	add    esp,0x10
c0011d33:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011d37:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011d3b:	e9 1e ff ff ff       	jmp    c0011c5e <VAS::~VAS()+0x3e>
c0011d40:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d44:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011d47:	83 ec 0c             	sub    esp,0xc
c0011d4a:	50                   	push   eax
c0011d4b:	e8 d5 fc ff ff       	call   c0011a25 <Virt::freeKernelVirtualPages(unsigned long)>
c0011d50:	83 c4 10             	add    esp,0x10
c0011d53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d57:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011d5a:	83 ec 0c             	sub    esp,0xc
c0011d5d:	50                   	push   eax
c0011d5e:	e8 6f de ff ff       	call   c000fbd2 <Phys::freePage(unsigned long)>
c0011d63:	83 c4 10             	add    esp,0x10
c0011d66:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011d6a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011d6e:	c1 e0 02             	shl    eax,0x2
c0011d71:	83 ec 08             	sub    esp,0x8
c0011d74:	50                   	push   eax
c0011d75:	68 9c af 02 c0       	push   0xc002af9c
c0011d7a:	e8 ec 0b 00 00       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0011d7f:	83 c4 10             	add    esp,0x10
c0011d82:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c0011d87:	48                   	dec    eax
c0011d88:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c0011d8d:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c0011d92:	85 c0                	test   eax,eax
c0011d94:	75 01                	jne    c0011d97 <VAS::~VAS()+0x177>
c0011d96:	fb                   	sti    
c0011d97:	90                   	nop
c0011d98:	83 c4 2c             	add    esp,0x2c
c0011d9b:	c3                   	ret    

c0011d9c <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011d9c:	55                   	push   ebp
c0011d9d:	57                   	push   edi
c0011d9e:	56                   	push   esi
c0011d9f:	53                   	push   ebx
c0011da0:	83 ec 1c             	sub    esp,0x1c
c0011da3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011da7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011dab:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011db1:	77 08                	ja     c0011dbb <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011db3:	0f 20 d8             	mov    eax,cr3
c0011db6:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0011db9:	75 47                	jne    c0011e02 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011dbb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011dbf:	09 d8                	or     eax,ebx
c0011dc1:	a9 ff 0f 00 00       	test   eax,0xfff
c0011dc6:	75 57                	jne    c0011e1f <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011dc8:	89 de                	mov    esi,ebx
c0011dca:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011dcd:	c1 ee 16             	shr    esi,0x16
c0011dd0:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011dd7:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011ddb:	74 54                	je     c0011e31 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011ddd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011de1:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011de7:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011deb:	c1 e6 0c             	shl    esi,0xc
c0011dee:	c1 eb 0a             	shr    ebx,0xa
c0011df1:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011df7:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011dfa:	83 c4 1c             	add    esp,0x1c
c0011dfd:	5b                   	pop    ebx
c0011dfe:	5e                   	pop    esi
c0011dff:	5f                   	pop    edi
c0011e00:	5d                   	pop    ebp
c0011e01:	c3                   	ret    
c0011e02:	83 ec 0c             	sub    esp,0xc
c0011e05:	68 bc af 02 c0       	push   0xc002afbc
c0011e0a:	e8 5c 0b 00 00       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0011e0f:	83 c4 10             	add    esp,0x10
c0011e12:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e16:	09 d8                	or     eax,ebx
c0011e18:	a9 ff 0f 00 00       	test   eax,0xfff
c0011e1d:	74 a9                	je     c0011dc8 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011e1f:	83 ec 0c             	sub    esp,0xc
c0011e22:	68 24 b0 02 c0       	push   0xc002b024
c0011e27:	e8 75 85 00 00       	call   c001a3a1 <Krnl::panic(char const*)>
c0011e2c:	83 c4 10             	add    esp,0x10
c0011e2f:	eb 97                	jmp    c0011dc8 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011e31:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011e35:	e8 f3 dd ff ff       	call   c000fc2d <Phys::allocatePage()>
c0011e3a:	83 ec 0c             	sub    esp,0xc
c0011e3d:	89 c5                	mov    ebp,eax
c0011e3f:	8b 0d 30 f2 02 c0    	mov    ecx,DWORD PTR ds:0xc002f230
c0011e45:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011e49:	6a 01                	push   0x1
c0011e4b:	e8 15 f7 ff ff       	call   c0011565 <Virt::allocateKernelVirtualPages(int)>
c0011e50:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011e57:	6a 01                	push   0x1
c0011e59:	50                   	push   eax
c0011e5a:	55                   	push   ebp
c0011e5b:	81 cd 07 04 00 00    	or     ebp,0x407
c0011e61:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011e65:	51                   	push   ecx
c0011e66:	e8 27 02 00 00       	call   c0012092 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e6b:	83 c4 1c             	add    esp,0x1c
c0011e6e:	68 00 10 00 00       	push   0x1000
c0011e73:	6a 00                	push   0x0
c0011e75:	50                   	push   eax
c0011e76:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011e7a:	e8 d1 e8 fe ff       	call   c0000750 <memset>
c0011e7f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011e83:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011e86:	e8 9a fb ff ff       	call   c0011a25 <Virt::freeKernelVirtualPages(unsigned long)>
c0011e8b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011e8f:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011e92:	83 c4 10             	add    esp,0x10
c0011e95:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011e98:	e9 40 ff ff ff       	jmp    c0011ddd <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0011e9d:	90                   	nop

c0011e9e <VAS::allocatePages(int, int)>:
c0011e9e:	55                   	push   ebp
c0011e9f:	57                   	push   edi
c0011ea0:	56                   	push   esi
c0011ea1:	53                   	push   ebx
c0011ea2:	83 ec 1c             	sub    esp,0x1c
c0011ea5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011ea9:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c0011eae:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011eb4:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011eba:	83 e0 01             	and    eax,0x1
c0011ebd:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011ec1:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011ec5:	0f 85 cc 00 00 00    	jne    c0011f97 <VAS::allocatePages(int, int)+0xf9>
c0011ecb:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011ece:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011ed2:	85 c0                	test   eax,eax
c0011ed4:	0f 84 a1 00 00 00    	je     c0011f7b <VAS::allocatePages(int, int)+0xdd>
c0011eda:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011ede:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ee2:	c1 e6 0c             	shl    esi,0xc
c0011ee5:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011ee9:	85 c0                	test   eax,eax
c0011eeb:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011eee:	7e 33                	jle    c0011f23 <VAS::allocatePages(int, int)+0x85>
c0011ef0:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011ef4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011ef8:	81 cd 00 04 00 00    	or     ebp,0x400
c0011efe:	e8 2a dd ff ff       	call   c000fc2d <Phys::allocatePage()>
c0011f03:	55                   	push   ebp
c0011f04:	53                   	push   ebx
c0011f05:	50                   	push   eax
c0011f06:	57                   	push   edi
c0011f07:	e8 90 fe ff ff       	call   c0011d9c <VAS::mapPage(unsigned long, unsigned long, int)>
c0011f0c:	83 c4 10             	add    esp,0x10
c0011f0f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011f14:	74 03                	je     c0011f19 <VAS::allocatePages(int, int)+0x7b>
c0011f16:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011f19:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011f1f:	39 de                	cmp    esi,ebx
c0011f21:	75 db                	jne    c0011efe <VAS::allocatePages(int, int)+0x60>
c0011f23:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011f28:	75 12                	jne    c0011f3c <VAS::allocatePages(int, int)+0x9e>
c0011f2a:	0f 20 d8             	mov    eax,cr3
c0011f2d:	0f 22 d8             	mov    cr3,eax
c0011f30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f34:	83 c4 1c             	add    esp,0x1c
c0011f37:	5b                   	pop    ebx
c0011f38:	5e                   	pop    esi
c0011f39:	5f                   	pop    edi
c0011f3a:	5d                   	pop    ebp
c0011f3b:	c3                   	ret    
c0011f3c:	c1 ee 0a             	shr    esi,0xa
c0011f3f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011f43:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011f49:	c1 eb 0a             	shr    ebx,0xa
c0011f4c:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011f52:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011f58:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011f5e:	39 c3                	cmp    ebx,eax
c0011f60:	77 ce                	ja     c0011f30 <VAS::allocatePages(int, int)+0x92>
c0011f62:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011f65:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011f6b:	39 d8                	cmp    eax,ebx
c0011f6d:	73 f3                	jae    c0011f62 <VAS::allocatePages(int, int)+0xc4>
c0011f6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f73:	83 c4 1c             	add    esp,0x1c
c0011f76:	5b                   	pop    ebx
c0011f77:	5e                   	pop    esi
c0011f78:	5f                   	pop    edi
c0011f79:	5d                   	pop    ebp
c0011f7a:	c3                   	ret    
c0011f7b:	83 ec 0c             	sub    esp,0xc
c0011f7e:	68 48 b0 02 c0       	push   0xc002b048
c0011f83:	e8 19 84 00 00       	call   c001a3a1 <Krnl::panic(char const*)>
c0011f88:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011f8b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011f8f:	83 c4 10             	add    esp,0x10
c0011f92:	e9 43 ff ff ff       	jmp    c0011eda <VAS::allocatePages(int, int)+0x3c>
c0011f97:	83 ec 0c             	sub    esp,0xc
c0011f9a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011f9e:	e8 c2 f5 ff ff       	call   c0011565 <Virt::allocateKernelVirtualPages(int)>
c0011fa3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011fa7:	83 c4 10             	add    esp,0x10
c0011faa:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011faf:	0f 87 9b 00 00 00    	ja     c0012050 <VAS::allocatePages(int, int)+0x1b2>
c0011fb5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011fb9:	85 d2                	test   edx,edx
c0011fbb:	7e 3c                	jle    c0011ff9 <VAS::allocatePages(int, int)+0x15b>
c0011fbd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011fc1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011fc5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011fc9:	c1 e5 0c             	shl    ebp,0xc
c0011fcc:	81 ce 00 04 00 00    	or     esi,0x400
c0011fd2:	01 dd                	add    ebp,ebx
c0011fd4:	e8 54 dc ff ff       	call   c000fc2d <Phys::allocatePage()>
c0011fd9:	56                   	push   esi
c0011fda:	53                   	push   ebx
c0011fdb:	50                   	push   eax
c0011fdc:	57                   	push   edi
c0011fdd:	e8 ba fd ff ff       	call   c0011d9c <VAS::mapPage(unsigned long, unsigned long, int)>
c0011fe2:	83 c4 10             	add    esp,0x10
c0011fe5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011fea:	74 03                	je     c0011fef <VAS::allocatePages(int, int)+0x151>
c0011fec:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011fef:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ff5:	39 dd                	cmp    ebp,ebx
c0011ff7:	75 db                	jne    c0011fd4 <VAS::allocatePages(int, int)+0x136>
c0011ff9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ffe:	0f 84 26 ff ff ff    	je     c0011f2a <VAS::allocatePages(int, int)+0x8c>
c0012004:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012008:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001200c:	89 d3                	mov    ebx,edx
c001200e:	c1 e0 0c             	shl    eax,0xc
c0012011:	c1 eb 0a             	shr    ebx,0xa
c0012014:	01 d0                	add    eax,edx
c0012016:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001201c:	c1 e8 0a             	shr    eax,0xa
c001201f:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012025:	25 00 f0 ff ff       	and    eax,0xfffff000
c001202a:	2d 00 00 40 00       	sub    eax,0x400000
c001202f:	39 c3                	cmp    ebx,eax
c0012031:	0f 87 f9 fe ff ff    	ja     c0011f30 <VAS::allocatePages(int, int)+0x92>
c0012037:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001203a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012040:	39 d8                	cmp    eax,ebx
c0012042:	73 f3                	jae    c0012037 <VAS::allocatePages(int, int)+0x199>
c0012044:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012048:	83 c4 1c             	add    esp,0x1c
c001204b:	5b                   	pop    ebx
c001204c:	5e                   	pop    esi
c001204d:	5f                   	pop    edi
c001204e:	5d                   	pop    ebp
c001204f:	c3                   	ret    
c0012050:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c0012055:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001205b:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0012062:	0f 84 4d ff ff ff    	je     c0011fb5 <VAS::allocatePages(int, int)+0x117>
c0012068:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0012070:	e9 40 ff ff ff       	jmp    c0011fb5 <VAS::allocatePages(int, int)+0x117>
c0012075:	90                   	nop

c0012076 <VAS::setCPUSpecific(unsigned long)>:
c0012076:	83 ec 0c             	sub    esp,0xc
c0012079:	6a 05                	push   0x5
c001207b:	68 00 00 40 c2       	push   0xc2400000
c0012080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012088:	e8 0f fd ff ff       	call   c0011d9c <VAS::mapPage(unsigned long, unsigned long, int)>
c001208d:	83 c4 1c             	add    esp,0x1c
c0012090:	c3                   	ret    
c0012091:	90                   	nop

c0012092 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012092:	55                   	push   ebp
c0012093:	57                   	push   edi
c0012094:	56                   	push   esi
c0012095:	53                   	push   ebx
c0012096:	83 ec 1c             	sub    esp,0x1c
c0012099:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c001209e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00120a2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00120a8:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00120ac:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c00120b2:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00120b6:	83 e0 01             	and    eax,0x1
c00120b9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00120bd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00120c1:	85 c0                	test   eax,eax
c00120c3:	7e 39                	jle    c00120fe <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c00120c5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00120c9:	89 f3                	mov    ebx,esi
c00120cb:	c1 e0 0c             	shl    eax,0xc
c00120ce:	01 f0                	add    eax,esi
c00120d0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00120d4:	55                   	push   ebp
c00120d5:	53                   	push   ebx
c00120d6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00120da:	29 f0                	sub    eax,esi
c00120dc:	01 d8                	add    eax,ebx
c00120de:	50                   	push   eax
c00120df:	57                   	push   edi
c00120e0:	e8 b7 fc ff ff       	call   c0011d9c <VAS::mapPage(unsigned long, unsigned long, int)>
c00120e5:	83 c4 10             	add    esp,0x10
c00120e8:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00120ed:	74 03                	je     c00120f2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c00120ef:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00120f2:	81 c3 00 10 00 00    	add    ebx,0x1000
c00120f8:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c00120fc:	75 d6                	jne    c00120d4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c00120fe:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012103:	75 10                	jne    c0012115 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0012105:	0f 20 d8             	mov    eax,cr3
c0012108:	0f 22 d8             	mov    cr3,eax
c001210b:	83 c4 1c             	add    esp,0x1c
c001210e:	89 f0                	mov    eax,esi
c0012110:	5b                   	pop    ebx
c0012111:	5e                   	pop    esi
c0012112:	5f                   	pop    edi
c0012113:	5d                   	pop    ebp
c0012114:	c3                   	ret    
c0012115:	89 f3                	mov    ebx,esi
c0012117:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001211b:	c1 eb 0a             	shr    ebx,0xa
c001211e:	c1 e0 0c             	shl    eax,0xc
c0012121:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012127:	01 f0                	add    eax,esi
c0012129:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001212f:	c1 e8 0a             	shr    eax,0xa
c0012132:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012137:	2d 00 00 40 00       	sub    eax,0x400000
c001213c:	39 c3                	cmp    ebx,eax
c001213e:	77 cb                	ja     c001210b <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0012140:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012143:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012149:	39 d8                	cmp    eax,ebx
c001214b:	73 f3                	jae    c0012140 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c001214d:	83 c4 1c             	add    esp,0x1c
c0012150:	89 f0                	mov    eax,esi
c0012152:	5b                   	pop    ebx
c0012153:	5e                   	pop    esi
c0012154:	5f                   	pop    edi
c0012155:	5d                   	pop    ebp
c0012156:	c3                   	ret    
c0012157:	90                   	nop

c0012158 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012158:	55                   	push   ebp
c0012159:	57                   	push   edi
c001215a:	56                   	push   esi
c001215b:	53                   	push   ebx
c001215c:	83 ec 1c             	sub    esp,0x1c
c001215f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012163:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012167:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c001216b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001216f:	a9 ff 0f 00 00       	test   eax,0xfff
c0012174:	75 4a                	jne    c00121c0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012176:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001217a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001217d:	c1 eb 16             	shr    ebx,0x16
c0012180:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012187:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c001218b:	74 4d                	je     c00121da <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c001218d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012191:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012195:	c1 e8 0a             	shr    eax,0xa
c0012198:	80 fa 01             	cmp    dl,0x1
c001219b:	19 d2                	sbb    edx,edx
c001219d:	c1 e3 0c             	shl    ebx,0xc
c00121a0:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c00121a4:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c00121aa:	25 fc 0f 00 00       	and    eax,0xffc
c00121af:	01 d8                	add    eax,ebx
c00121b1:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c00121b8:	83 c4 1c             	add    esp,0x1c
c00121bb:	5b                   	pop    ebx
c00121bc:	5e                   	pop    esi
c00121bd:	5f                   	pop    edi
c00121be:	5d                   	pop    ebp
c00121bf:	c3                   	ret    
c00121c0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00121c4:	83 ec 0c             	sub    esp,0xc
c00121c7:	68 74 b0 02 c0       	push   0xc002b074
c00121cc:	e8 d0 81 00 00       	call   c001a3a1 <Krnl::panic(char const*)>
c00121d1:	83 c4 10             	add    esp,0x10
c00121d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00121d8:	eb 9c                	jmp    c0012176 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c00121da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00121de:	e8 4a da ff ff       	call   c000fc2d <Phys::allocatePage()>
c00121e3:	83 ec 0c             	sub    esp,0xc
c00121e6:	89 c5                	mov    ebp,eax
c00121e8:	8b 0d 30 f2 02 c0    	mov    ecx,DWORD PTR ds:0xc002f230
c00121ee:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00121f2:	6a 01                	push   0x1
c00121f4:	e8 6c f3 ff ff       	call   c0011565 <Virt::allocateKernelVirtualPages(int)>
c00121f9:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012200:	6a 01                	push   0x1
c0012202:	50                   	push   eax
c0012203:	55                   	push   ebp
c0012204:	81 cd 07 04 00 00    	or     ebp,0x407
c001220a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001220e:	51                   	push   ecx
c001220f:	e8 7e fe ff ff       	call   c0012092 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012214:	83 c4 1c             	add    esp,0x1c
c0012217:	68 00 10 00 00       	push   0x1000
c001221c:	6a 00                	push   0x0
c001221e:	50                   	push   eax
c001221f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012223:	e8 28 e5 fe ff       	call   c0000750 <memset>
c0012228:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001222c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001222f:	e8 f1 f7 ff ff       	call   c0011a25 <Virt::freeKernelVirtualPages(unsigned long)>
c0012234:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012237:	83 c4 10             	add    esp,0x10
c001223a:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c001223d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012241:	e9 47 ff ff ff       	jmp    c001218d <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0012246 <VAS::VAS(bool)>:
c0012246:	53                   	push   ebx
c0012247:	83 ec 28             	sub    esp,0x28
c001224a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001224e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012252:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012256:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001225d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012261:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012268:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001226c:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012270:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012273:	e8 b5 d9 ff ff       	call   c000fc2d <Phys::allocatePage()>
c0012278:	89 c2                	mov    edx,eax
c001227a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001227e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0012281:	8b 1d 30 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f230
c0012287:	83 ec 0c             	sub    esp,0xc
c001228a:	6a 01                	push   0x1
c001228c:	e8 d4 f2 ff ff       	call   c0011565 <Virt::allocateKernelVirtualPages(int)>
c0012291:	83 c4 10             	add    esp,0x10
c0012294:	89 c2                	mov    edx,eax
c0012296:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001229a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001229d:	83 ec 0c             	sub    esp,0xc
c00122a0:	6a 03                	push   0x3
c00122a2:	6a 01                	push   0x1
c00122a4:	52                   	push   edx
c00122a5:	50                   	push   eax
c00122a6:	53                   	push   ebx
c00122a7:	e8 e6 fd ff ff       	call   c0012092 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00122ac:	83 c4 20             	add    esp,0x20
c00122af:	89 c2                	mov    edx,eax
c00122b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122b5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00122b8:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00122c0:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c00122c8:	7f 1c                	jg     c00122e6 <VAS::VAS(bool)+0xa0>
c00122ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122ce:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00122d1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00122d5:	c1 e2 02             	shl    edx,0x2
c00122d8:	01 d0                	add    eax,edx
c00122da:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00122e0:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00122e4:	eb da                	jmp    c00122c0 <VAS::VAS(bool)+0x7a>
c00122e6:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00122ee:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00122f6:	7f 7a                	jg     c0012372 <VAS::VAS(bool)+0x12c>
c00122f8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00122fc:	2d 00 02 00 00       	sub    eax,0x200
c0012301:	c1 e0 0c             	shl    eax,0xc
c0012304:	83 c8 03             	or     eax,0x3
c0012307:	89 c2                	mov    edx,eax
c0012309:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c001230e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012314:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001231a:	83 e0 10             	and    eax,0x10
c001231d:	84 c0                	test   al,al
c001231f:	74 07                	je     c0012328 <VAS::VAS(bool)+0xe2>
c0012321:	b8 00 01 00 00       	mov    eax,0x100
c0012326:	eb 05                	jmp    c001232d <VAS::VAS(bool)+0xe7>
c0012328:	b8 00 00 00 00       	mov    eax,0x0
c001232d:	09 d0                	or     eax,edx
c001232f:	89 c1                	mov    ecx,eax
c0012331:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012335:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012338:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001233c:	c1 e2 02             	shl    edx,0x2
c001233f:	01 d0                	add    eax,edx
c0012341:	89 ca                	mov    edx,ecx
c0012343:	89 10                	mov    DWORD PTR [eax],edx
c0012345:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012349:	2d 40 03 00 00       	sub    eax,0x340
c001234e:	83 f8 7f             	cmp    eax,0x7f
c0012351:	77 16                	ja     c0012369 <VAS::VAS(bool)+0x123>
c0012353:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012357:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001235a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001235e:	c1 e2 02             	shl    edx,0x2
c0012361:	01 d0                	add    eax,edx
c0012363:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012369:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001236d:	e9 7c ff ff ff       	jmp    c00122ee <VAS::VAS(bool)+0xa8>
c0012372:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c0012377:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001237d:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012383:	83 e0 10             	and    eax,0x10
c0012386:	84 c0                	test   al,al
c0012388:	74 07                	je     c0012391 <VAS::VAS(bool)+0x14b>
c001238a:	b8 03 41 00 00       	mov    eax,0x4103
c001238f:	eb 05                	jmp    c0012396 <VAS::VAS(bool)+0x150>
c0012391:	b8 03 40 00 00       	mov    eax,0x4003
c0012396:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001239a:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c001239d:	81 c2 20 0c 00 00    	add    edx,0xc20
c00123a3:	89 02                	mov    DWORD PTR [edx],eax
c00123a5:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c00123aa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00123b0:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00123b6:	83 ec 08             	sub    esp,0x8
c00123b9:	50                   	push   eax
c00123ba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00123be:	e8 b3 fc ff ff       	call   c0012076 <VAS::setCPUSpecific(unsigned long)>
c00123c3:	83 c4 10             	add    esp,0x10
c00123c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123ca:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00123cd:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c00123d2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00123d8:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00123de:	83 e0 10             	and    eax,0x10
c00123e1:	84 c0                	test   al,al
c00123e3:	74 07                	je     c00123ec <VAS::VAS(bool)+0x1a6>
c00123e5:	b8 00 01 00 00       	mov    eax,0x100
c00123ea:	eb 05                	jmp    c00123f1 <VAS::VAS(bool)+0x1ab>
c00123ec:	b8 00 00 00 00       	mov    eax,0x0
c00123f1:	09 c2                	or     edx,eax
c00123f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123f7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00123fa:	05 fc 0f 00 00       	add    eax,0xffc
c00123ff:	83 ca 03             	or     edx,0x3
c0012402:	89 10                	mov    DWORD PTR [eax],edx
c0012404:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c0012409:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001240f:	83 ec 0c             	sub    esp,0xc
c0012412:	50                   	push   eax
c0012413:	e8 8c 1c 00 00       	call   c00140a4 <Device::getName()>
c0012418:	83 c4 10             	add    esp,0x10
c001241b:	83 ec 08             	sub    esp,0x8
c001241e:	68 b9 b1 02 c0       	push   0xc002b1b9
c0012423:	50                   	push   eax
c0012424:	e8 6f e4 fe ff       	call   c0000898 <strcmp>
c0012429:	83 c4 10             	add    esp,0x10
c001242c:	85 c0                	test   eax,eax
c001242e:	0f 94 c0             	sete   al
c0012431:	84 c0                	test   al,al
c0012433:	0f 84 87 00 00 00    	je     c00124c0 <VAS::VAS(bool)+0x27a>
c0012439:	fa                   	cli    
c001243a:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001243f:	40                   	inc    eax
c0012440:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c0012445:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c001244a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012450:	05 7c 09 00 00       	add    eax,0x97c
c0012455:	83 ec 0c             	sub    esp,0xc
c0012458:	50                   	push   eax
c0012459:	e8 b0 ce ff ff       	call   c000f30e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001245e:	83 c4 10             	add    esp,0x10
c0012461:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012466:	89 c3                	mov    ebx,eax
c0012468:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c001246d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012473:	05 7c 09 00 00       	add    eax,0x97c
c0012478:	83 ec 0c             	sub    esp,0xc
c001247b:	50                   	push   eax
c001247c:	e8 8d ce ff ff       	call   c000f30e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012481:	83 c4 10             	add    esp,0x10
c0012484:	83 ec 08             	sub    esp,0x8
c0012487:	50                   	push   eax
c0012488:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001248c:	e8 75 f5 ff ff       	call   c0011a06 <VAS::getPageTableEntry(unsigned long)>
c0012491:	83 c4 10             	add    esp,0x10
c0012494:	8b 00                	mov    eax,DWORD PTR [eax]
c0012496:	25 00 f0 ff ff       	and    eax,0xfffff000
c001249b:	6a 11                	push   0x11
c001249d:	53                   	push   ebx
c001249e:	50                   	push   eax
c001249f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00124a3:	e8 f4 f8 ff ff       	call   c0011d9c <VAS::mapPage(unsigned long, unsigned long, int)>
c00124a8:	83 c4 10             	add    esp,0x10
c00124ab:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c00124b0:	48                   	dec    eax
c00124b1:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c00124b6:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c00124bb:	85 c0                	test   eax,eax
c00124bd:	75 01                	jne    c00124c0 <VAS::VAS(bool)+0x27a>
c00124bf:	fb                   	sti    
c00124c0:	90                   	nop
c00124c1:	83 c4 28             	add    esp,0x28
c00124c4:	5b                   	pop    ebx
c00124c5:	c3                   	ret    

c00124c6 <VAS::evict(unsigned long)>:
c00124c6:	55                   	push   ebp
c00124c7:	57                   	push   edi
c00124c8:	56                   	push   esi
c00124c9:	53                   	push   ebx
c00124ca:	83 ec 1c             	sub    esp,0x1c
c00124cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124d1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00124d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00124d9:	e8 c8 f1 ff ff       	call   c00116a6 <Virt::allocateSwapfilePage()>
c00124de:	89 c7                	mov    edi,eax
c00124e0:	a1 6c e0 02 c0       	mov    eax,ds:0xc002e06c
c00124e5:	85 c0                	test   eax,eax
c00124e7:	7e 3d                	jle    c0012526 <VAS::evict(unsigned long)+0x60>
c00124e9:	89 ee                	mov    esi,ebp
c00124eb:	31 db                	xor    ebx,ebx
c00124ed:	83 ec 0c             	sub    esp,0xc
c00124f0:	57                   	push   edi
c00124f1:	e8 9e f1 ff ff       	call   c0011694 <Virt::swapIDToSector(unsigned long)>
c00124f6:	89 34 24             	mov    DWORD PTR [esp],esi
c00124f9:	01 d8                	add    eax,ebx
c00124fb:	6a 01                	push   0x1
c00124fd:	31 d2                	xor    edx,edx
c00124ff:	43                   	inc    ebx
c0012500:	52                   	push   edx
c0012501:	81 c6 00 02 00 00    	add    esi,0x200
c0012507:	50                   	push   eax
c0012508:	0f be 05 78 e0 02 c0 	movsx  eax,BYTE PTR ds:0xc002e078
c001250f:	ff 34 85 bc f5 02 c0 	push   DWORD PTR [eax*4-0x3ffd0a44]
c0012516:	e8 39 3e 00 00       	call   c0016354 <LogicalDisk::write(unsigned long long, int, void*)>
c001251b:	83 c4 20             	add    esp,0x20
c001251e:	39 1d 6c e0 02 c0    	cmp    DWORD PTR ds:0xc002e06c,ebx
c0012524:	7f c7                	jg     c00124ed <VAS::evict(unsigned long)+0x27>
c0012526:	83 ec 08             	sub    esp,0x8
c0012529:	c1 e7 0b             	shl    edi,0xb
c001252c:	55                   	push   ebp
c001252d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012531:	e8 d0 f4 ff ff       	call   c0011a06 <VAS::getPageTableEntry(unsigned long)>
c0012536:	83 c4 0c             	add    esp,0xc
c0012539:	8b 10                	mov    edx,DWORD PTR [eax]
c001253b:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012541:	09 d7                	or     edi,edx
c0012543:	89 38                	mov    DWORD PTR [eax],edi
c0012545:	a1 28 f2 02 c0       	mov    eax,ds:0xc002f228
c001254a:	40                   	inc    eax
c001254b:	a3 28 f2 02 c0       	mov    ds:0xc002f228,eax
c0012550:	0f 20 da             	mov    edx,cr3
c0012553:	0f 22 da             	mov    cr3,edx
c0012556:	50                   	push   eax
c0012557:	55                   	push   ebp
c0012558:	68 c7 b1 02 c0       	push   0xc002b1c7
c001255d:	e8 09 04 00 00       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0012562:	a1 24 f2 02 c0       	mov    eax,ds:0xc002f224
c0012567:	c7 44 24 40 dc b1 02 c0 	mov    DWORD PTR [esp+0x40],0xc002b1dc
c001256f:	8d 50 01             	lea    edx,[eax+0x1]
c0012572:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012576:	89 15 24 f2 02 c0    	mov    DWORD PTR ds:0xc002f224,edx
c001257c:	83 c4 2c             	add    esp,0x2c
c001257f:	5b                   	pop    ebx
c0012580:	5e                   	pop    esi
c0012581:	5f                   	pop    edi
c0012582:	5d                   	pop    ebp
c0012583:	e9 e3 03 00 00       	jmp    c001296b <Dbg::kprintf(char const*, ...)>

c0012588 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012588:	55                   	push   ebp
c0012589:	57                   	push   edi
c001258a:	56                   	push   esi
c001258b:	53                   	push   ebx
c001258c:	83 ec 0c             	sub    esp,0xc
c001258f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0012593:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012599:	0f 84 dc 00 00 00    	je     c001267b <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c001259f:	56                   	push   esi
c00125a0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00125a4:	e8 5d f4 ff ff       	call   c0011a06 <VAS::getPageTableEntry(unsigned long)>
c00125a9:	5b                   	pop    ebx
c00125aa:	85 c0                	test   eax,eax
c00125ac:	5f                   	pop    edi
c00125ad:	89 c3                	mov    ebx,eax
c00125af:	0f 84 c6 00 00 00    	je     c001267b <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c00125b5:	8b 38                	mov    edi,DWORD PTR [eax]
c00125b7:	31 c0                	xor    eax,eax
c00125b9:	89 fa                	mov    edx,edi
c00125bb:	81 e2 01 04 00 00    	and    edx,0x401
c00125c1:	81 fa 00 04 00 00    	cmp    edx,0x400
c00125c7:	0f 85 b0 00 00 00    	jne    c001267d <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c00125cd:	e8 5b d6 ff ff       	call   c000fc2d <Phys::allocatePage()>
c00125d2:	c1 ef 0b             	shr    edi,0xb
c00125d5:	8b 13                	mov    edx,DWORD PTR [ebx]
c00125d7:	81 e2 ff 0f 00 00    	and    edx,0xfff
c00125dd:	09 c2                	or     edx,eax
c00125df:	81 ca 01 08 00 00    	or     edx,0x801
c00125e5:	89 13                	mov    DWORD PTR [ebx],edx
c00125e7:	8b 0d 6c e0 02 c0    	mov    ecx,DWORD PTR ds:0xc002e06c
c00125ed:	85 c9                	test   ecx,ecx
c00125ef:	7e 3d                	jle    c001262e <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c00125f1:	89 f5                	mov    ebp,esi
c00125f3:	31 db                	xor    ebx,ebx
c00125f5:	83 ec 0c             	sub    esp,0xc
c00125f8:	57                   	push   edi
c00125f9:	e8 96 f0 ff ff       	call   c0011694 <Virt::swapIDToSector(unsigned long)>
c00125fe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012601:	01 d8                	add    eax,ebx
c0012603:	6a 01                	push   0x1
c0012605:	31 d2                	xor    edx,edx
c0012607:	43                   	inc    ebx
c0012608:	52                   	push   edx
c0012609:	81 c5 00 02 00 00    	add    ebp,0x200
c001260f:	50                   	push   eax
c0012610:	0f be 05 78 e0 02 c0 	movsx  eax,BYTE PTR ds:0xc002e078
c0012617:	ff 34 85 bc f5 02 c0 	push   DWORD PTR [eax*4-0x3ffd0a44]
c001261e:	e8 c5 3c 00 00       	call   c00162e8 <LogicalDisk::read(unsigned long long, int, void*)>
c0012623:	83 c4 20             	add    esp,0x20
c0012626:	39 1d 6c e0 02 c0    	cmp    DWORD PTR ds:0xc002e06c,ebx
c001262c:	7f c7                	jg     c00125f5 <VAS::tryLoadBackOffDisk(unsigned long)+0x6d>
c001262e:	a1 28 f2 02 c0       	mov    eax,ds:0xc002f228
c0012633:	48                   	dec    eax
c0012634:	52                   	push   edx
c0012635:	a3 28 f2 02 c0       	mov    ds:0xc002f228,eax
c001263a:	50                   	push   eax
c001263b:	56                   	push   esi
c001263c:	68 ed b1 02 c0       	push   0xc002b1ed
c0012641:	e8 25 03 00 00       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0012646:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012649:	e8 28 f0 ff ff       	call   c0011676 <Virt::freeSwapfilePage(unsigned long)>
c001264e:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c0012653:	83 c4 10             	add    esp,0x10
c0012656:	48                   	dec    eax
c0012657:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001265c:	85 c0                	test   eax,eax
c001265e:	75 01                	jne    c0012661 <VAS::tryLoadBackOffDisk(unsigned long)+0xd9>
c0012660:	fb                   	sti    
c0012661:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012665:	25 ff 0f 00 00       	and    eax,0xfff
c001266a:	3d e0 0f 00 00       	cmp    eax,0xfe0
c001266f:	77 14                	ja     c0012685 <VAS::tryLoadBackOffDisk(unsigned long)+0xfd>
c0012671:	0f 20 d8             	mov    eax,cr3
c0012674:	0f 22 d8             	mov    cr3,eax
c0012677:	b0 01                	mov    al,0x1
c0012679:	eb 02                	jmp    c001267d <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c001267b:	31 c0                	xor    eax,eax
c001267d:	83 c4 0c             	add    esp,0xc
c0012680:	5b                   	pop    ebx
c0012681:	5e                   	pop    esi
c0012682:	5f                   	pop    edi
c0012683:	5d                   	pop    ebp
c0012684:	c3                   	ret    
c0012685:	83 ec 0c             	sub    esp,0xc
c0012688:	68 02 b2 02 c0       	push   0xc002b202
c001268d:	e8 d9 02 00 00       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0012692:	83 c4 10             	add    esp,0x10
c0012695:	eb da                	jmp    c0012671 <VAS::tryLoadBackOffDisk(unsigned long)+0xe9>
c0012697:	90                   	nop

c0012698 <VAS::scanForEviction()>:
c0012698:	57                   	push   edi
c0012699:	56                   	push   esi
c001269a:	53                   	push   ebx
c001269b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001269f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00126a2:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00126a8:	75 0e                	jne    c00126b8 <VAS::scanForEviction()+0x20>
c00126aa:	89 da                	mov    edx,ebx
c00126ac:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00126af:	c1 ea 16             	shr    edx,0x16
c00126b2:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00126b6:	74 48                	je     c0012700 <VAS::scanForEviction()+0x68>
c00126b8:	53                   	push   ebx
c00126b9:	56                   	push   esi
c00126ba:	e8 47 f3 ff ff       	call   c0011a06 <VAS::getPageTableEntry(unsigned long)>
c00126bf:	5a                   	pop    edx
c00126c0:	8b 38                	mov    edi,DWORD PTR [eax]
c00126c2:	59                   	pop    ecx
c00126c3:	89 fa                	mov    edx,edi
c00126c5:	81 e2 00 0c 00 00    	and    edx,0xc00
c00126cb:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c00126d1:	74 3d                	je     c0012710 <VAS::scanForEviction()+0x78>
c00126d3:	81 c3 00 10 00 00    	add    ebx,0x1000
c00126d9:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c00126df:	76 2a                	jbe    c001270b <VAS::scanForEviction()+0x73>
c00126e1:	31 db                	xor    ebx,ebx
c00126e3:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c00126ea:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00126f0:	75 c6                	jne    c00126b8 <VAS::scanForEviction()+0x20>
c00126f2:	89 da                	mov    edx,ebx
c00126f4:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00126f7:	c1 ea 16             	shr    edx,0x16
c00126fa:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00126fe:	75 b8                	jne    c00126b8 <VAS::scanForEviction()+0x20>
c0012700:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012706:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012709:	eb 97                	jmp    c00126a2 <VAS::scanForEviction()+0xa>
c001270b:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c001270e:	eb 92                	jmp    c00126a2 <VAS::scanForEviction()+0xa>
c0012710:	f7 c7 01 00 00 00    	test   edi,0x1
c0012716:	74 bb                	je     c00126d3 <VAS::scanForEviction()+0x3b>
c0012718:	f7 c7 20 00 00 00    	test   edi,0x20
c001271e:	74 0a                	je     c001272a <VAS::scanForEviction()+0x92>
c0012720:	83 e7 df             	and    edi,0xffffffdf
c0012723:	89 38                	mov    DWORD PTR [eax],edi
c0012725:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012728:	eb a9                	jmp    c00126d3 <VAS::scanForEviction()+0x3b>
c001272a:	83 ec 08             	sub    esp,0x8
c001272d:	53                   	push   ebx
c001272e:	56                   	push   esi
c001272f:	e8 92 fd ff ff       	call   c00124c6 <VAS::evict(unsigned long)>
c0012734:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c001273b:	83 c4 10             	add    esp,0x10
c001273e:	89 f8                	mov    eax,edi
c0012740:	5b                   	pop    ebx
c0012741:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012746:	5e                   	pop    esi
c0012747:	5f                   	pop    edi
c0012748:	c3                   	ret    

c0012749 <mapVASFirstTime>:
c0012749:	55                   	push   ebp
c001274a:	57                   	push   edi
c001274b:	56                   	push   esi
c001274c:	53                   	push   ebx
c001274d:	83 ec 0c             	sub    esp,0xc
c0012750:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012755:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012758:	4a                   	dec    edx
c0012759:	0f 84 8e 00 00 00    	je     c00127ed <mapVASFirstTime+0xa4>
c001275f:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012762:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012765:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c001276a:	c1 e5 15             	shl    ebp,0x15
c001276d:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012772:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012778:	29 eb                	sub    ebx,ebp
c001277a:	29 ee                	sub    esi,ebp
c001277c:	e8 ac d4 ff ff       	call   c000fc2d <Phys::allocatePage()>
c0012781:	83 ec 0c             	sub    esp,0xc
c0012784:	68 03 04 00 00       	push   0x403
c0012789:	6a 01                	push   0x1
c001278b:	53                   	push   ebx
c001278c:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012792:	50                   	push   eax
c0012793:	57                   	push   edi
c0012794:	e8 f9 f8 ff ff       	call   c0012092 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012799:	83 c4 20             	add    esp,0x20
c001279c:	39 f3                	cmp    ebx,esi
c001279e:	75 dc                	jne    c001277c <mapVASFirstTime+0x33>
c00127a0:	be 00 f0 ff 01       	mov    esi,0x1fff000
c00127a5:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c00127aa:	29 ee                	sub    esi,ebp
c00127ac:	29 e8                	sub    eax,ebp
c00127ae:	89 c5                	mov    ebp,eax
c00127b0:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c00127b4:	19 db                	sbb    ebx,ebx
c00127b6:	e8 72 d4 ff ff       	call   c000fc2d <Phys::allocatePage()>
c00127bb:	83 e3 04             	and    ebx,0x4
c00127be:	83 ec 0c             	sub    esp,0xc
c00127c1:	81 c3 03 04 00 00    	add    ebx,0x403
c00127c7:	53                   	push   ebx
c00127c8:	6a 01                	push   0x1
c00127ca:	56                   	push   esi
c00127cb:	81 ee 00 10 00 00    	sub    esi,0x1000
c00127d1:	50                   	push   eax
c00127d2:	57                   	push   edi
c00127d3:	e8 ba f8 ff ff       	call   c0012092 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00127d8:	83 c4 20             	add    esp,0x20
c00127db:	39 f5                	cmp    ebp,esi
c00127dd:	75 d1                	jne    c00127b0 <mapVASFirstTime+0x67>
c00127df:	0f 20 d8             	mov    eax,cr3
c00127e2:	0f 22 d8             	mov    cr3,eax
c00127e5:	83 c4 0c             	add    esp,0xc
c00127e8:	5b                   	pop    ebx
c00127e9:	5e                   	pop    esi
c00127ea:	5f                   	pop    edi
c00127eb:	5d                   	pop    ebp
c00127ec:	c3                   	ret    
c00127ed:	83 ec 0c             	sub    esp,0xc
c00127f0:	68 12 b2 02 c0       	push   0xc002b212
c00127f5:	e8 71 01 00 00       	call   c001296b <Dbg::kprintf(char const*, ...)>
c00127fa:	83 c4 10             	add    esp,0x10
c00127fd:	83 c4 0c             	add    esp,0xc
c0012800:	5b                   	pop    ebx
c0012801:	5e                   	pop    esi
c0012802:	5f                   	pop    edi
c0012803:	5d                   	pop    ebp
c0012804:	c3                   	ret    

c0012805 <__cxa_atexit>:
c0012805:	31 c0                	xor    eax,eax
c0012807:	c3                   	ret    

c0012808 <__cxa_finalize>:
c0012808:	c3                   	ret    

c0012809 <__stack_chk_fail>:
c0012809:	55                   	push   ebp
c001280a:	89 e5                	mov    ebp,esp
c001280c:	83 ec 14             	sub    esp,0x14
c001280f:	68 2b b2 02 c0       	push   0xc002b22b
c0012814:	e8 52 01 00 00       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0012819:	58                   	pop    eax
c001281a:	5a                   	pop    edx
c001281b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001281e:	68 7b b2 02 c0       	push   0xc002b27b
c0012823:	e8 43 01 00 00       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0012828:	59                   	pop    ecx
c0012829:	58                   	pop    eax
c001282a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001282d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012830:	68 7b b2 02 c0       	push   0xc002b27b
c0012835:	e8 31 01 00 00       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001283a:	5a                   	pop    edx
c001283b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001283e:	59                   	pop    ecx
c001283f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012841:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012844:	68 7b b2 02 c0       	push   0xc002b27b
c0012849:	e8 1d 01 00 00       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001284e:	5a                   	pop    edx
c001284f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012852:	59                   	pop    ecx
c0012853:	8b 00                	mov    eax,DWORD PTR [eax]
c0012855:	8b 00                	mov    eax,DWORD PTR [eax]
c0012857:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001285a:	68 7b b2 02 c0       	push   0xc002b27b
c001285f:	e8 07 01 00 00       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0012864:	c7 04 24 83 b2 02 c0 	mov    DWORD PTR [esp],0xc002b283
c001286b:	e8 31 7b 00 00       	call   c001a3a1 <Krnl::panic(char const*)>
c0012870:	83 c4 10             	add    esp,0x10
c0012873:	c9                   	leave  
c0012874:	c3                   	ret    

c0012875 <__cxa_pure_virtual>:
c0012875:	83 ec 18             	sub    esp,0x18
c0012878:	68 9b b2 02 c0       	push   0xc002b29b
c001287d:	e8 1f 7b 00 00       	call   c001a3a1 <Krnl::panic(char const*)>
c0012882:	83 c4 1c             	add    esp,0x1c
c0012885:	c3                   	ret    

c0012886 <operator new[](unsigned long)>:
c0012886:	e9 01 d0 ff ff       	jmp    c000f88c <malloc>

c001288b <operator delete(void*, unsigned long)>:
c001288b:	e9 1c d0 ff ff       	jmp    c000f8ac <rfree>

c0012890 <operator delete[](void*)>:
c0012890:	e9 17 d0 ff ff       	jmp    c000f8ac <rfree>

c0012895 <operator delete[](void*, unsigned long)>:
c0012895:	e9 12 d0 ff ff       	jmp    c000f8ac <rfree>

c001289a <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c001289a:	57                   	push   edi
c001289b:	b9 3f 00 00 00       	mov    ecx,0x3f
c00128a0:	56                   	push   esi
c00128a1:	be b0 b2 02 c0       	mov    esi,0xc002b2b0
c00128a6:	53                   	push   ebx
c00128a7:	83 ec 40             	sub    esp,0x40
c00128aa:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00128ae:	8d 7c 24 01          	lea    edi,[esp+0x1]
c00128b2:	fc                   	cld    
c00128b3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00128b5:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c00128b9:	83 f9 3e             	cmp    ecx,0x3e
c00128bc:	7e 05                	jle    c00128c3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c00128be:	b9 3e 00 00 00       	mov    ecx,0x3e
c00128c3:	89 df                	mov    edi,ebx
c00128c5:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00128c9:	eb 02                	jmp    c00128cd <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c00128cb:	89 c7                	mov    edi,eax
c00128cd:	31 d2                	xor    edx,edx
c00128cf:	46                   	inc    esi
c00128d0:	89 f8                	mov    eax,edi
c00128d2:	f7 f1                	div    ecx
c00128d4:	39 cf                	cmp    edi,ecx
c00128d6:	73 f3                	jae    c00128cb <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c00128d8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00128db:	eb 02                	jmp    c00128df <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c00128dd:	89 c3                	mov    ebx,eax
c00128df:	31 d2                	xor    edx,edx
c00128e1:	4e                   	dec    esi
c00128e2:	89 d8                	mov    eax,ebx
c00128e4:	f7 f1                	div    ecx
c00128e6:	39 cb                	cmp    ebx,ecx
c00128e8:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c00128ec:	88 16                	mov    BYTE PTR [esi],dl
c00128ee:	73 ed                	jae    c00128dd <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c00128f0:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00128f4:	83 c4 40             	add    esp,0x40
c00128f7:	5b                   	pop    ebx
c00128f8:	5e                   	pop    esi
c00128f9:	5f                   	pop    edi
c00128fa:	c3                   	ret    

c00128fb <Dbg::logc(char)>:
c00128fb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00128ff:	ba fd 03 00 00       	mov    edx,0x3fd
c0012904:	ec                   	in     al,dx
c0012905:	a8 20                	test   al,0x20
c0012907:	74 fb                	je     c0012904 <Dbg::logc(char)+0x9>
c0012909:	ba f8 03 00 00       	mov    edx,0x3f8
c001290e:	88 c8                	mov    al,cl
c0012910:	ee                   	out    dx,al
c0012911:	c3                   	ret    

c0012912 <Dbg::logs(char*)>:
c0012912:	53                   	push   ebx
c0012913:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012917:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001291a:	84 c0                	test   al,al
c001291c:	74 0f                	je     c001292d <Dbg::logs(char*)+0x1b>
c001291e:	50                   	push   eax
c001291f:	43                   	inc    ebx
c0012920:	e8 d6 ff ff ff       	call   c00128fb <Dbg::logc(char)>
c0012925:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012928:	5a                   	pop    edx
c0012929:	84 c0                	test   al,al
c001292b:	75 f1                	jne    c001291e <Dbg::logs(char*)+0xc>
c001292d:	5b                   	pop    ebx
c001292e:	c3                   	ret    

c001292f <Dbg::logWriteInt(unsigned int)>:
c001292f:	83 ec 10             	sub    esp,0x10
c0012932:	6a 0a                	push   0xa
c0012934:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012938:	50                   	push   eax
c0012939:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001293d:	e8 58 ff ff ff       	call   c001289a <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012942:	50                   	push   eax
c0012943:	e8 ca ff ff ff       	call   c0012912 <Dbg::logs(char*)>
c0012948:	83 c4 20             	add    esp,0x20
c001294b:	c3                   	ret    

c001294c <Dbg::logWriteIntBase(unsigned int, int)>:
c001294c:	83 ec 10             	sub    esp,0x10
c001294f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012953:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012957:	50                   	push   eax
c0012958:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001295c:	e8 39 ff ff ff       	call   c001289a <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012961:	50                   	push   eax
c0012962:	e8 ab ff ff ff       	call   c0012912 <Dbg::logs(char*)>
c0012967:	83 c4 20             	add    esp,0x20
c001296a:	c3                   	ret    

c001296b <Dbg::kprintf(char const*, ...)>:
c001296b:	55                   	push   ebp
c001296c:	57                   	push   edi
c001296d:	56                   	push   esi
c001296e:	53                   	push   ebx
c001296f:	83 ec 0c             	sub    esp,0xc
c0012972:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012976:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001297a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001297e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012981:	84 c0                	test   al,al
c0012983:	74 4a                	je     c00129cf <Dbg::kprintf(char const*, ...)+0x64>
c0012985:	31 db                	xor    ebx,ebx
c0012987:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001298a:	3c 25                	cmp    al,0x25
c001298c:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c001298f:	0f 85 e4 00 00 00    	jne    c0012a79 <Dbg::kprintf(char const*, ...)+0x10e>
c0012995:	83 c3 02             	add    ebx,0x2
c0012998:	8a 07                	mov    al,BYTE PTR [edi]
c001299a:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c001299d:	83 e8 25             	sub    eax,0x25
c00129a0:	3c 53                	cmp    al,0x53
c00129a2:	0f 87 ba 00 00 00    	ja     c0012a62 <Dbg::kprintf(char const*, ...)+0xf7>
c00129a8:	0f b6 c0             	movzx  eax,al
c00129ab:	ff 24 85 f0 b2 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd4d10]
c00129b2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00129b6:	89 c8                	mov    eax,ecx
c00129b8:	83 c1 04             	add    ecx,0x4
c00129bb:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00129bf:	ff 30                	push   DWORD PTR [eax]
c00129c1:	e8 4c ff ff ff       	call   c0012912 <Dbg::logs(char*)>
c00129c6:	58                   	pop    eax
c00129c7:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00129cb:	84 c0                	test   al,al
c00129cd:	75 b8                	jne    c0012987 <Dbg::kprintf(char const*, ...)+0x1c>
c00129cf:	83 c4 0c             	add    esp,0xc
c00129d2:	5b                   	pop    ebx
c00129d3:	5e                   	pop    esi
c00129d4:	5f                   	pop    edi
c00129d5:	5d                   	pop    ebp
c00129d6:	c3                   	ret    
c00129d7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00129db:	89 d0                	mov    eax,edx
c00129dd:	83 c2 04             	add    edx,0x4
c00129e0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00129e4:	ff 30                	push   DWORD PTR [eax]
c00129e6:	e8 44 ff ff ff       	call   c001292f <Dbg::logWriteInt(unsigned int)>
c00129eb:	58                   	pop    eax
c00129ec:	eb d9                	jmp    c00129c7 <Dbg::kprintf(char const*, ...)+0x5c>
c00129ee:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00129f2:	89 d0                	mov    eax,edx
c00129f4:	83 c2 04             	add    edx,0x4
c00129f7:	0f be 00             	movsx  eax,BYTE PTR [eax]
c00129fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00129fe:	50                   	push   eax
c00129ff:	e8 f7 fe ff ff       	call   c00128fb <Dbg::logc(char)>
c0012a04:	58                   	pop    eax
c0012a05:	eb c0                	jmp    c00129c7 <Dbg::kprintf(char const*, ...)+0x5c>
c0012a07:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012a0b:	89 c8                	mov    eax,ecx
c0012a0d:	83 c1 04             	add    ecx,0x4
c0012a10:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012a14:	ff 30                	push   DWORD PTR [eax]
c0012a16:	e8 14 ff ff ff       	call   c001292f <Dbg::logWriteInt(unsigned int)>
c0012a1b:	5f                   	pop    edi
c0012a1c:	eb a9                	jmp    c00129c7 <Dbg::kprintf(char const*, ...)+0x5c>
c0012a1e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012a22:	89 c8                	mov    eax,ecx
c0012a24:	83 c1 04             	add    ecx,0x4
c0012a27:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012a2b:	6a 10                	push   0x10
c0012a2d:	ff 30                	push   DWORD PTR [eax]
c0012a2f:	e8 18 ff ff ff       	call   c001294c <Dbg::logWriteIntBase(unsigned int, int)>
c0012a34:	59                   	pop    ecx
c0012a35:	5f                   	pop    edi
c0012a36:	eb 8f                	jmp    c00129c7 <Dbg::kprintf(char const*, ...)+0x5c>
c0012a38:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012a3c:	89 d0                	mov    eax,edx
c0012a3e:	83 c2 08             	add    edx,0x8
c0012a41:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012a45:	6a 10                	push   0x10
c0012a47:	ff 30                	push   DWORD PTR [eax]
c0012a49:	e8 fe fe ff ff       	call   c001294c <Dbg::logWriteIntBase(unsigned int, int)>
c0012a4e:	58                   	pop    eax
c0012a4f:	5a                   	pop    edx
c0012a50:	e9 72 ff ff ff       	jmp    c00129c7 <Dbg::kprintf(char const*, ...)+0x5c>
c0012a55:	6a 25                	push   0x25
c0012a57:	e8 9f fe ff ff       	call   c00128fb <Dbg::logc(char)>
c0012a5c:	58                   	pop    eax
c0012a5d:	e9 65 ff ff ff       	jmp    c00129c7 <Dbg::kprintf(char const*, ...)+0x5c>
c0012a62:	6a 25                	push   0x25
c0012a64:	e8 92 fe ff ff       	call   c00128fb <Dbg::logc(char)>
c0012a69:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012a6c:	50                   	push   eax
c0012a6d:	e8 89 fe ff ff       	call   c00128fb <Dbg::logc(char)>
c0012a72:	5a                   	pop    edx
c0012a73:	59                   	pop    ecx
c0012a74:	e9 4e ff ff ff       	jmp    c00129c7 <Dbg::kprintf(char const*, ...)+0x5c>
c0012a79:	50                   	push   eax
c0012a7a:	89 eb                	mov    ebx,ebp
c0012a7c:	e8 7a fe ff ff       	call   c00128fb <Dbg::logc(char)>
c0012a81:	89 fd                	mov    ebp,edi
c0012a83:	58                   	pop    eax
c0012a84:	e9 3e ff ff ff       	jmp    c00129c7 <Dbg::kprintf(char const*, ...)+0x5c>
c0012a89:	90                   	nop

c0012a8a <File::read(unsigned long long, void*, int*)>:
c0012a8a:	53                   	push   ebx
c0012a8b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a8f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012a93:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012a9a:	3c 19                	cmp    al,0x19
c0012a9c:	77 35                	ja     c0012ad3 <File::read(unsigned long long, void*, int*)+0x49>
c0012a9e:	8b 04 85 c0 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0940]
c0012aa5:	85 c0                	test   eax,eax
c0012aa7:	74 2a                	je     c0012ad3 <File::read(unsigned long long, void*, int*)+0x49>
c0012aa9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012aaf:	85 c0                	test   eax,eax
c0012ab1:	74 20                	je     c0012ad3 <File::read(unsigned long long, void*, int*)+0x49>
c0012ab3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ab7:	74 21                	je     c0012ada <File::read(unsigned long long, void*, int*)+0x50>
c0012ab9:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012abb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012abf:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012ac5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012ac9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012acd:	5b                   	pop    ebx
c0012ace:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012ad1:	ff e0                	jmp    eax
c0012ad3:	b8 0b 00 00 00       	mov    eax,0xb
c0012ad8:	eb 05                	jmp    c0012adf <File::read(unsigned long long, void*, int*)+0x55>
c0012ada:	b8 05 00 00 00       	mov    eax,0x5
c0012adf:	5b                   	pop    ebx
c0012ae0:	c3                   	ret    
c0012ae1:	90                   	nop

c0012ae2 <File::write(unsigned long long, void*, int*)>:
c0012ae2:	53                   	push   ebx
c0012ae3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012ae7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012aeb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012af2:	3c 19                	cmp    al,0x19
c0012af4:	77 35                	ja     c0012b2b <File::write(unsigned long long, void*, int*)+0x49>
c0012af6:	8b 04 85 c0 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0940]
c0012afd:	85 c0                	test   eax,eax
c0012aff:	74 2a                	je     c0012b2b <File::write(unsigned long long, void*, int*)+0x49>
c0012b01:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012b07:	85 c0                	test   eax,eax
c0012b09:	74 20                	je     c0012b2b <File::write(unsigned long long, void*, int*)+0x49>
c0012b0b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012b0f:	74 21                	je     c0012b32 <File::write(unsigned long long, void*, int*)+0x50>
c0012b11:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012b13:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012b17:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012b1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012b21:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012b25:	5b                   	pop    ebx
c0012b26:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012b29:	ff e0                	jmp    eax
c0012b2b:	b8 0b 00 00 00       	mov    eax,0xb
c0012b30:	eb 05                	jmp    c0012b37 <File::write(unsigned long long, void*, int*)+0x55>
c0012b32:	b8 05 00 00 00       	mov    eax,0x5
c0012b37:	5b                   	pop    ebx
c0012b38:	c3                   	ret    
c0012b39:	90                   	nop

c0012b3a <Directory::read(unsigned long long, void*, int*)>:
c0012b3a:	53                   	push   ebx
c0012b3b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012b3f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012b43:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012b4a:	3c 19                	cmp    al,0x19
c0012b4c:	77 35                	ja     c0012b83 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012b4e:	8b 04 85 c0 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0940]
c0012b55:	85 c0                	test   eax,eax
c0012b57:	74 2a                	je     c0012b83 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012b59:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012b5f:	85 c0                	test   eax,eax
c0012b61:	74 20                	je     c0012b83 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012b63:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012b67:	74 21                	je     c0012b8a <Directory::read(unsigned long long, void*, int*)+0x50>
c0012b69:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012b6b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012b6f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012b75:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012b79:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012b7d:	5b                   	pop    ebx
c0012b7e:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012b81:	ff e0                	jmp    eax
c0012b83:	b8 0b 00 00 00       	mov    eax,0xb
c0012b88:	eb 05                	jmp    c0012b8f <Directory::read(unsigned long long, void*, int*)+0x55>
c0012b8a:	b8 05 00 00 00       	mov    eax,0x5
c0012b8f:	5b                   	pop    ebx
c0012b90:	c3                   	ret    
c0012b91:	90                   	nop

c0012b92 <Directory::write(unsigned long long, void*, int*)>:
c0012b92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b96:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012b9d:	b8 0b 00 00 00       	mov    eax,0xb
c0012ba2:	80 fa 19             	cmp    dl,0x19
c0012ba5:	77 18                	ja     c0012bbf <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012ba7:	8b 14 95 c0 f6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0940]
c0012bae:	85 d2                	test   edx,edx
c0012bb0:	74 0d                	je     c0012bbf <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012bb2:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012bb9:	19 c0                	sbb    eax,eax
c0012bbb:	83 e0 0a             	and    eax,0xa
c0012bbe:	40                   	inc    eax
c0012bbf:	c3                   	ret    

c0012bc0 <File::isAtty()>:
c0012bc0:	31 c0                	xor    eax,eax
c0012bc2:	c3                   	ret    
c0012bc3:	90                   	nop

c0012bc4 <Directory::isAtty()>:
c0012bc4:	31 c0                	xor    eax,eax
c0012bc6:	c3                   	ret    
c0012bc7:	90                   	nop

c0012bc8 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012bc8:	b8 0a 00 00 00       	mov    eax,0xa
c0012bcd:	c3                   	ret    

c0012bce <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012bce:	b8 0a 00 00 00       	mov    eax,0xa
c0012bd3:	c3                   	ret    

c0012bd4 <Filesystem::getFileFirstSector(char const*)>:
c0012bd4:	31 c0                	xor    eax,eax
c0012bd6:	31 d2                	xor    edx,edx
c0012bd8:	c3                   	ret    
c0012bd9:	90                   	nop

c0012bda <File::~File()>:
c0012bda:	83 ec 0c             	sub    esp,0xc
c0012bdd:	ba b0 b4 02 c0       	mov    edx,0xc002b4b0
c0012be2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012be6:	89 10                	mov    DWORD PTR [eax],edx
c0012be8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bec:	83 ec 0c             	sub    esp,0xc
c0012bef:	50                   	push   eax
c0012bf0:	e8 0f e7 ff ff       	call   c0011304 <UnixFile::~UnixFile()>
c0012bf5:	83 c4 10             	add    esp,0x10
c0012bf8:	90                   	nop
c0012bf9:	83 c4 0c             	add    esp,0xc
c0012bfc:	c3                   	ret    
c0012bfd:	90                   	nop

c0012bfe <File::~File()>:
c0012bfe:	83 ec 0c             	sub    esp,0xc
c0012c01:	83 ec 0c             	sub    esp,0xc
c0012c04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c08:	e8 cd ff ff ff       	call   c0012bda <File::~File()>
c0012c0d:	83 c4 10             	add    esp,0x10
c0012c10:	83 ec 08             	sub    esp,0x8
c0012c13:	68 14 01 00 00       	push   0x114
c0012c18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c1c:	e8 6a fc ff ff       	call   c001288b <operator delete(void*, unsigned long)>
c0012c21:	83 c4 10             	add    esp,0x10
c0012c24:	83 c4 0c             	add    esp,0xc
c0012c27:	c3                   	ret    

c0012c28 <Directory::~Directory()>:
c0012c28:	83 ec 0c             	sub    esp,0xc
c0012c2b:	ba cc b4 02 c0       	mov    edx,0xc002b4cc
c0012c30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c34:	89 10                	mov    DWORD PTR [eax],edx
c0012c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c3a:	83 ec 0c             	sub    esp,0xc
c0012c3d:	50                   	push   eax
c0012c3e:	e8 c1 e6 ff ff       	call   c0011304 <UnixFile::~UnixFile()>
c0012c43:	83 c4 10             	add    esp,0x10
c0012c46:	90                   	nop
c0012c47:	83 c4 0c             	add    esp,0xc
c0012c4a:	c3                   	ret    
c0012c4b:	90                   	nop

c0012c4c <Directory::~Directory()>:
c0012c4c:	83 ec 0c             	sub    esp,0xc
c0012c4f:	83 ec 0c             	sub    esp,0xc
c0012c52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c56:	e8 cd ff ff ff       	call   c0012c28 <Directory::~Directory()>
c0012c5b:	83 c4 10             	add    esp,0x10
c0012c5e:	83 ec 08             	sub    esp,0x8
c0012c61:	68 14 01 00 00       	push   0x114
c0012c66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c6a:	e8 1c fc ff ff       	call   c001288b <operator delete(void*, unsigned long)>
c0012c6f:	83 c4 10             	add    esp,0x10
c0012c72:	83 c4 0c             	add    esp,0xc
c0012c75:	c3                   	ret    

c0012c76 <Filesystem::Filesystem()>:
c0012c76:	ba 48 b4 02 c0       	mov    edx,0xc002b448
c0012c7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c7f:	89 10                	mov    DWORD PTR [eax],edx
c0012c81:	8b 15 34 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f234
c0012c87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c8b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012c8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c92:	a3 34 f2 02 c0       	mov    ds:0xc002f234,eax
c0012c97:	90                   	nop
c0012c98:	c3                   	ret    
c0012c99:	90                   	nop

c0012c9a <Filesystem::~Filesystem()>:
c0012c9a:	ba 48 b4 02 c0       	mov    edx,0xc002b448
c0012c9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ca3:	89 10                	mov    DWORD PTR [eax],edx
c0012ca5:	90                   	nop
c0012ca6:	c3                   	ret    
c0012ca7:	90                   	nop

c0012ca8 <Filesystem::~Filesystem()>:
c0012ca8:	83 ec 0c             	sub    esp,0xc
c0012cab:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012caf:	e8 e6 ff ff ff       	call   c0012c9a <Filesystem::~Filesystem()>
c0012cb4:	83 c4 04             	add    esp,0x4
c0012cb7:	83 ec 08             	sub    esp,0x8
c0012cba:	6a 08                	push   0x8
c0012cbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cc0:	e8 c6 fb ff ff       	call   c001288b <operator delete(void*, unsigned long)>
c0012cc5:	83 c4 10             	add    esp,0x10
c0012cc8:	83 c4 0c             	add    esp,0xc
c0012ccb:	c3                   	ret    

c0012ccc <Fs::getcwd(Process*, char*, int)>:
c0012ccc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012cd0:	31 c0                	xor    eax,eax
c0012cd2:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012cd5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012cd9:	7d 15                	jge    c0012cf0 <Fs::getcwd(Process*, char*, int)+0x24>
c0012cdb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012cdf:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012ce6:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012ce9:	84 c9                	test   cl,cl
c0012ceb:	74 06                	je     c0012cf3 <Fs::getcwd(Process*, char*, int)+0x27>
c0012ced:	40                   	inc    eax
c0012cee:	eb e2                	jmp    c0012cd2 <Fs::getcwd(Process*, char*, int)+0x6>
c0012cf0:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012cf3:	31 c0                	xor    eax,eax
c0012cf5:	c3                   	ret    

c0012cf6 <Fs::initVFS()>:
c0012cf6:	83 ec 18             	sub    esp,0x18
c0012cf9:	6a 08                	push   0x8
c0012cfb:	e8 8c cb ff ff       	call   c000f88c <malloc>
c0012d00:	89 04 24             	mov    DWORD PTR [esp],eax
c0012d03:	e8 08 e5 00 00       	call   c0021210 <FAT::FAT()>
c0012d08:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012d0f:	e8 78 cb ff ff       	call   c000f88c <malloc>
c0012d14:	89 04 24             	mov    DWORD PTR [esp],eax
c0012d17:	e8 30 f7 00 00       	call   c002244c <ISO9660::ISO9660()>
c0012d1c:	83 c4 1c             	add    esp,0x1c
c0012d1f:	c3                   	ret    

c0012d20 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012d20:	55                   	push   ebp
c0012d21:	57                   	push   edi
c0012d22:	56                   	push   esi
c0012d23:	53                   	push   ebx
c0012d24:	81 ec 10 04 00 00    	sub    esp,0x410
c0012d2a:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012d31:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012d38:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012d3f:	68 00 04 00 00       	push   0x400
c0012d44:	6a 00                	push   0x0
c0012d46:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012d4a:	56                   	push   esi
c0012d4b:	e8 00 da fe ff       	call   c0000750 <memset>
c0012d50:	83 c4 10             	add    esp,0x10
c0012d53:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012d57:	75 0b                	jne    c0012d64 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012d59:	50                   	push   eax
c0012d5a:	50                   	push   eax
c0012d5b:	57                   	push   edi
c0012d5c:	56                   	push   esi
c0012d5d:	e8 aa da fe ff       	call   c000080c <strcpy>
c0012d62:	eb 41                	jmp    c0012da5 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012d64:	8a 07                	mov    al,BYTE PTR [edi]
c0012d66:	3c 5c                	cmp    al,0x5c
c0012d68:	74 04                	je     c0012d6e <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012d6a:	3c 2f                	cmp    al,0x2f
c0012d6c:	75 18                	jne    c0012d86 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012d6e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012d71:	3c 60                	cmp    al,0x60
c0012d73:	7e 03                	jle    c0012d78 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012d75:	83 e8 20             	sub    eax,0x20
c0012d78:	88 04 24             	mov    BYTE PTR [esp],al
c0012d7b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012d82:	50                   	push   eax
c0012d83:	50                   	push   eax
c0012d84:	eb 18                	jmp    c0012d9e <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012d86:	50                   	push   eax
c0012d87:	50                   	push   eax
c0012d88:	55                   	push   ebp
c0012d89:	56                   	push   esi
c0012d8a:	e8 7d da fe ff       	call   c000080c <strcpy>
c0012d8f:	5a                   	pop    edx
c0012d90:	59                   	pop    ecx
c0012d91:	68 2d cc 02 c0       	push   0xc002cc2d
c0012d96:	56                   	push   esi
c0012d97:	e8 b0 db fe ff       	call   c000094c <strcat>
c0012d9c:	5d                   	pop    ebp
c0012d9d:	58                   	pop    eax
c0012d9e:	57                   	push   edi
c0012d9f:	56                   	push   esi
c0012da0:	e8 a7 db fe ff       	call   c000094c <strcat>
c0012da5:	83 c4 10             	add    esp,0x10
c0012da8:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012dab:	3c 60                	cmp    al,0x60
c0012dad:	7e 03                	jle    c0012db2 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012daf:	83 e8 20             	sub    eax,0x20
c0012db2:	88 04 24             	mov    BYTE PTR [esp],al
c0012db5:	88 03                	mov    BYTE PTR [ebx],al
c0012db7:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012dbe:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012dc4:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012dc8:	bf 03 00 00 00       	mov    edi,0x3
c0012dcd:	b8 03 00 00 00       	mov    eax,0x3
c0012dd2:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012dd5:	84 d2                	test   dl,dl
c0012dd7:	0f 84 91 00 00 00    	je     c0012e6e <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012ddd:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012de0:	80 fa 5c             	cmp    dl,0x5c
c0012de3:	74 05                	je     c0012dea <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012de5:	80 fa 2f             	cmp    dl,0x2f
c0012de8:	75 12                	jne    c0012dfc <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012dea:	89 c5                	mov    ebp,eax
c0012dec:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012df1:	74 09                	je     c0012dfc <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012df3:	40                   	inc    eax
c0012df4:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012df8:	89 cf                	mov    edi,ecx
c0012dfa:	eb d6                	jmp    c0012dd2 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012dfc:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012e01:	75 5b                	jne    c0012e5e <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012e03:	80 fa 2e             	cmp    dl,0x2e
c0012e06:	75 56                	jne    c0012e5e <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012e08:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012e0c:	74 19                	je     c0012e27 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012e0e:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012e13:	74 53                	je     c0012e68 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012e15:	89 f9                	mov    ecx,edi
c0012e17:	41                   	inc    ecx
c0012e18:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012e1b:	80 fa 2f             	cmp    dl,0x2f
c0012e1e:	74 f7                	je     c0012e17 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012e20:	80 fa 5c             	cmp    dl,0x5c
c0012e23:	74 f2                	je     c0012e17 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012e25:	eb d1                	jmp    c0012df8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012e27:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012e2c:	74 3a                	je     c0012e68 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012e2e:	83 f8 03             	cmp    eax,0x3
c0012e31:	74 c5                	je     c0012df8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012e33:	41                   	inc    ecx
c0012e34:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012e37:	80 fa 2f             	cmp    dl,0x2f
c0012e3a:	74 f7                	je     c0012e33 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012e3c:	80 fa 5c             	cmp    dl,0x5c
c0012e3f:	74 f2                	je     c0012e33 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012e41:	48                   	dec    eax
c0012e42:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012e46:	75 06                	jne    c0012e4e <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012e48:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012e4c:	eb f3                	jmp    c0012e41 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012e4e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012e52:	74 07                	je     c0012e5b <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012e54:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012e58:	48                   	dec    eax
c0012e59:	eb f3                	jmp    c0012e4e <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012e5b:	40                   	inc    eax
c0012e5c:	eb 9a                	jmp    c0012df8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012e5e:	80 fa 2f             	cmp    dl,0x2f
c0012e61:	74 95                	je     c0012df8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012e63:	80 fa 5c             	cmp    dl,0x5c
c0012e66:	74 90                	je     c0012df8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012e68:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012e6b:	40                   	inc    eax
c0012e6c:	eb 8a                	jmp    c0012df8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012e6e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012e72:	83 ec 0c             	sub    esp,0xc
c0012e75:	53                   	push   ebx
c0012e76:	e8 f1 d8 fe ff       	call   c000076c <strlen>
c0012e7b:	83 c4 10             	add    esp,0x10
c0012e7e:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012e83:	75 26                	jne    c0012eab <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012e85:	83 ec 0c             	sub    esp,0xc
c0012e88:	53                   	push   ebx
c0012e89:	e8 de d8 fe ff       	call   c000076c <strlen>
c0012e8e:	83 c4 10             	add    esp,0x10
c0012e91:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012e96:	74 26                	je     c0012ebe <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012e98:	83 ec 0c             	sub    esp,0xc
c0012e9b:	53                   	push   ebx
c0012e9c:	e8 cb d8 fe ff       	call   c000076c <strlen>
c0012ea1:	83 c4 10             	add    esp,0x10
c0012ea4:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012ea9:	eb c7                	jmp    c0012e72 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012eab:	83 ec 0c             	sub    esp,0xc
c0012eae:	53                   	push   ebx
c0012eaf:	e8 b8 d8 fe ff       	call   c000076c <strlen>
c0012eb4:	83 c4 10             	add    esp,0x10
c0012eb7:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012ebc:	74 c7                	je     c0012e85 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012ebe:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012ec4:	5b                   	pop    ebx
c0012ec5:	5e                   	pop    esi
c0012ec6:	5f                   	pop    edi
c0012ec7:	5d                   	pop    ebp
c0012ec8:	c3                   	ret    
c0012ec9:	90                   	nop

c0012eca <File::File(char const*, Process*)>:
c0012eca:	83 ec 0c             	sub    esp,0xc
c0012ecd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ed1:	83 ec 08             	sub    esp,0x8
c0012ed4:	6a 00                	push   0x0
c0012ed6:	50                   	push   eax
c0012ed7:	e8 46 e2 ff ff       	call   c0011122 <UnixFile::UnixFile(int)>
c0012edc:	83 c4 10             	add    esp,0x10
c0012edf:	ba b0 b4 02 c0       	mov    edx,0xc002b4b0
c0012ee4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ee8:	89 10                	mov    DWORD PTR [eax],edx
c0012eea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012eee:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012ef4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ef8:	83 c0 0d             	add    eax,0xd
c0012efb:	83 ec 04             	sub    esp,0x4
c0012efe:	52                   	push   edx
c0012eff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f03:	50                   	push   eax
c0012f04:	e8 17 fe ff ff       	call   c0012d20 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012f09:	83 c4 10             	add    esp,0x10
c0012f0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f10:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012f13:	8d 50 bf             	lea    edx,[eax-0x41]
c0012f16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f1a:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012f20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f24:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012f28:	90                   	nop
c0012f29:	83 c4 0c             	add    esp,0xc
c0012f2c:	c3                   	ret    
c0012f2d:	90                   	nop

c0012f2e <File::open(FileOpenMode)>:
c0012f2e:	53                   	push   ebx
c0012f2f:	b8 0b 00 00 00       	mov    eax,0xb
c0012f34:	83 ec 08             	sub    esp,0x8
c0012f37:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012f3b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012f42:	80 fa 19             	cmp    dl,0x19
c0012f45:	77 40                	ja     c0012f87 <File::open(FileOpenMode)+0x59>
c0012f47:	8b 14 95 c0 f6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0940]
c0012f4e:	85 d2                	test   edx,edx
c0012f50:	74 35                	je     c0012f87 <File::open(FileOpenMode)+0x59>
c0012f52:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012f58:	85 d2                	test   edx,edx
c0012f5a:	74 2b                	je     c0012f87 <File::open(FileOpenMode)+0x59>
c0012f5c:	b8 06 00 00 00       	mov    eax,0x6
c0012f61:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012f65:	75 20                	jne    c0012f87 <File::open(FileOpenMode)+0x59>
c0012f67:	8b 02                	mov    eax,DWORD PTR [edx]
c0012f69:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012f6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012f73:	51                   	push   ecx
c0012f74:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012f77:	51                   	push   ecx
c0012f78:	52                   	push   edx
c0012f79:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012f7c:	83 c4 10             	add    esp,0x10
c0012f7f:	85 c0                	test   eax,eax
c0012f81:	75 04                	jne    c0012f87 <File::open(FileOpenMode)+0x59>
c0012f83:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012f87:	83 c4 08             	add    esp,0x8
c0012f8a:	5b                   	pop    ebx
c0012f8b:	c3                   	ret    

c0012f8c <File::close()>:
c0012f8c:	53                   	push   ebx
c0012f8d:	b8 0b 00 00 00       	mov    eax,0xb
c0012f92:	83 ec 08             	sub    esp,0x8
c0012f95:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012f99:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012fa0:	80 fa 19             	cmp    dl,0x19
c0012fa3:	77 41                	ja     c0012fe6 <File::close()+0x5a>
c0012fa5:	8b 1c 95 c0 f6 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd0940]
c0012fac:	85 db                	test   ebx,ebx
c0012fae:	74 36                	je     c0012fe6 <File::close()+0x5a>
c0012fb0:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012fb7:	74 2d                	je     c0012fe6 <File::close()+0x5a>
c0012fb9:	b8 05 00 00 00       	mov    eax,0x5
c0012fbe:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012fc2:	74 22                	je     c0012fe6 <File::close()+0x5a>
c0012fc4:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012fc8:	8b 04 95 c0 f6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0940]
c0012fcf:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012fd5:	53                   	push   ebx
c0012fd6:	53                   	push   ebx
c0012fd7:	8b 10                	mov    edx,DWORD PTR [eax]
c0012fd9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012fdf:	50                   	push   eax
c0012fe0:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012fe3:	83 c4 10             	add    esp,0x10
c0012fe6:	83 c4 08             	add    esp,0x8
c0012fe9:	5b                   	pop    ebx
c0012fea:	c3                   	ret    
c0012feb:	90                   	nop

c0012fec <File::seek(unsigned long long)>:
c0012fec:	56                   	push   esi
c0012fed:	53                   	push   ebx
c0012fee:	b8 0b 00 00 00       	mov    eax,0xb
c0012ff3:	51                   	push   ecx
c0012ff4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012ff8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012ffc:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0013003:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013007:	80 fa 19             	cmp    dl,0x19
c001300a:	77 31                	ja     c001303d <File::seek(unsigned long long)+0x51>
c001300c:	8b 14 95 c0 f6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0940]
c0013013:	85 d2                	test   edx,edx
c0013015:	74 26                	je     c001303d <File::seek(unsigned long long)+0x51>
c0013017:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001301d:	85 d2                	test   edx,edx
c001301f:	74 1c                	je     c001303d <File::seek(unsigned long long)+0x51>
c0013021:	b8 05 00 00 00       	mov    eax,0x5
c0013026:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001302a:	74 11                	je     c001303d <File::seek(unsigned long long)+0x51>
c001302c:	8b 02                	mov    eax,DWORD PTR [edx]
c001302e:	53                   	push   ebx
c001302f:	51                   	push   ecx
c0013030:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0013036:	52                   	push   edx
c0013037:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001303a:	83 c4 10             	add    esp,0x10
c001303d:	5a                   	pop    edx
c001303e:	5b                   	pop    ebx
c001303f:	5e                   	pop    esi
c0013040:	c3                   	ret    
c0013041:	90                   	nop

c0013042 <File::tell(unsigned long long*)>:
c0013042:	83 ec 0c             	sub    esp,0xc
c0013045:	b8 0b 00 00 00       	mov    eax,0xb
c001304a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001304e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013055:	80 fa 19             	cmp    dl,0x19
c0013058:	77 34                	ja     c001308e <File::tell(unsigned long long*)+0x4c>
c001305a:	8b 14 95 c0 f6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0940]
c0013061:	85 d2                	test   edx,edx
c0013063:	74 29                	je     c001308e <File::tell(unsigned long long*)+0x4c>
c0013065:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001306b:	85 d2                	test   edx,edx
c001306d:	74 1f                	je     c001308e <File::tell(unsigned long long*)+0x4c>
c001306f:	b8 05 00 00 00       	mov    eax,0x5
c0013074:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013078:	74 14                	je     c001308e <File::tell(unsigned long long*)+0x4c>
c001307a:	50                   	push   eax
c001307b:	8b 02                	mov    eax,DWORD PTR [edx]
c001307d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013081:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013087:	52                   	push   edx
c0013088:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001308b:	83 c4 10             	add    esp,0x10
c001308e:	83 c4 0c             	add    esp,0xc
c0013091:	c3                   	ret    

c0013092 <File::rewind()>:
c0013092:	83 ec 10             	sub    esp,0x10
c0013095:	6a 00                	push   0x0
c0013097:	6a 00                	push   0x0
c0013099:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001309d:	e8 4a ff ff ff       	call   c0012fec <File::seek(unsigned long long)>
c00130a2:	83 c4 1c             	add    esp,0x1c
c00130a5:	c3                   	ret    

c00130a6 <File::unlink()>:
c00130a6:	83 ec 0c             	sub    esp,0xc
c00130a9:	b8 0b 00 00 00       	mov    eax,0xb
c00130ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00130b2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00130b9:	80 f9 19             	cmp    cl,0x19
c00130bc:	77 2f                	ja     c00130ed <File::unlink()+0x47>
c00130be:	8b 0c 8d c0 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0940]
c00130c5:	85 c9                	test   ecx,ecx
c00130c7:	74 24                	je     c00130ed <File::unlink()+0x47>
c00130c9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00130cf:	85 c9                	test   ecx,ecx
c00130d1:	74 1a                	je     c00130ed <File::unlink()+0x47>
c00130d3:	b8 06 00 00 00       	mov    eax,0x6
c00130d8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130dc:	75 0f                	jne    c00130ed <File::unlink()+0x47>
c00130de:	83 c2 0d             	add    edx,0xd
c00130e1:	50                   	push   eax
c00130e2:	50                   	push   eax
c00130e3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00130e5:	52                   	push   edx
c00130e6:	51                   	push   ecx
c00130e7:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00130ea:	83 c4 10             	add    esp,0x10
c00130ed:	83 c4 0c             	add    esp,0xc
c00130f0:	c3                   	ret    
c00130f1:	90                   	nop

c00130f2 <File::rename(char const*)>:
c00130f2:	83 ec 0c             	sub    esp,0xc
c00130f5:	b8 0b 00 00 00       	mov    eax,0xb
c00130fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00130fe:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013105:	80 f9 19             	cmp    cl,0x19
c0013108:	77 32                	ja     c001313c <File::rename(char const*)+0x4a>
c001310a:	8b 0c 8d c0 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0940]
c0013111:	85 c9                	test   ecx,ecx
c0013113:	74 27                	je     c001313c <File::rename(char const*)+0x4a>
c0013115:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001311b:	85 c9                	test   ecx,ecx
c001311d:	74 1d                	je     c001313c <File::rename(char const*)+0x4a>
c001311f:	b8 06 00 00 00       	mov    eax,0x6
c0013124:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013128:	75 12                	jne    c001313c <File::rename(char const*)+0x4a>
c001312a:	83 c2 0d             	add    edx,0xd
c001312d:	50                   	push   eax
c001312e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013130:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013134:	52                   	push   edx
c0013135:	51                   	push   ecx
c0013136:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013139:	83 c4 10             	add    esp,0x10
c001313c:	83 c4 0c             	add    esp,0xc
c001313f:	c3                   	ret    

c0013140 <File::chfatattr(unsigned char, unsigned char)>:
c0013140:	57                   	push   edi
c0013141:	b8 0b 00 00 00       	mov    eax,0xb
c0013146:	56                   	push   esi
c0013147:	53                   	push   ebx
c0013148:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001314c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013150:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013157:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001315b:	80 f9 19             	cmp    cl,0x19
c001315e:	77 37                	ja     c0013197 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013160:	8b 0c 8d c0 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0940]
c0013167:	85 c9                	test   ecx,ecx
c0013169:	74 2c                	je     c0013197 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001316b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013171:	85 c9                	test   ecx,ecx
c0013173:	74 22                	je     c0013197 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013175:	b8 06 00 00 00       	mov    eax,0x6
c001317a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001317e:	75 17                	jne    c0013197 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013180:	8b 39                	mov    edi,DWORD PTR [ecx]
c0013182:	89 f0                	mov    eax,esi
c0013184:	83 c2 0d             	add    edx,0xd
c0013187:	0f b6 f0             	movzx  esi,al
c001318a:	0f b6 db             	movzx  ebx,bl
c001318d:	56                   	push   esi
c001318e:	53                   	push   ebx
c001318f:	52                   	push   edx
c0013190:	51                   	push   ecx
c0013191:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0013194:	83 c4 10             	add    esp,0x10
c0013197:	5b                   	pop    ebx
c0013198:	5e                   	pop    esi
c0013199:	5f                   	pop    edi
c001319a:	c3                   	ret    
c001319b:	90                   	nop

c001319c <File::exists()>:
c001319c:	83 ec 0c             	sub    esp,0xc
c001319f:	31 c0                	xor    eax,eax
c00131a1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00131a5:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00131ac:	80 f9 19             	cmp    cl,0x19
c00131af:	77 24                	ja     c00131d5 <File::exists()+0x39>
c00131b1:	8b 0c 8d c0 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0940]
c00131b8:	85 c9                	test   ecx,ecx
c00131ba:	74 19                	je     c00131d5 <File::exists()+0x39>
c00131bc:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00131c2:	85 c9                	test   ecx,ecx
c00131c4:	74 0f                	je     c00131d5 <File::exists()+0x39>
c00131c6:	83 c2 0d             	add    edx,0xd
c00131c9:	50                   	push   eax
c00131ca:	50                   	push   eax
c00131cb:	8b 01                	mov    eax,DWORD PTR [ecx]
c00131cd:	52                   	push   edx
c00131ce:	51                   	push   ecx
c00131cf:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00131d2:	83 c4 10             	add    esp,0x10
c00131d5:	83 c4 0c             	add    esp,0xc
c00131d8:	c3                   	ret    
c00131d9:	90                   	nop

c00131da <File::stat(unsigned long long*, bool*)>:
c00131da:	56                   	push   esi
c00131db:	53                   	push   ebx
c00131dc:	50                   	push   eax
c00131dd:	b8 0b 00 00 00       	mov    eax,0xb
c00131e2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00131e6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00131ea:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00131f1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00131f5:	80 f9 19             	cmp    cl,0x19
c00131f8:	77 3d                	ja     c0013237 <File::stat(unsigned long long*, bool*)+0x5d>
c00131fa:	8b 0c 8d c0 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0940]
c0013201:	85 c9                	test   ecx,ecx
c0013203:	74 32                	je     c0013237 <File::stat(unsigned long long*, bool*)+0x5d>
c0013205:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001320b:	85 c9                	test   ecx,ecx
c001320d:	74 28                	je     c0013237 <File::stat(unsigned long long*, bool*)+0x5d>
c001320f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013211:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013215:	74 13                	je     c001322a <File::stat(unsigned long long*, bool*)+0x50>
c0013217:	83 ec 04             	sub    esp,0x4
c001321a:	56                   	push   esi
c001321b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013221:	51                   	push   ecx
c0013222:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0013225:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013228:	eb 0a                	jmp    c0013234 <File::stat(unsigned long long*, bool*)+0x5a>
c001322a:	53                   	push   ebx
c001322b:	83 c2 0d             	add    edx,0xd
c001322e:	56                   	push   esi
c001322f:	52                   	push   edx
c0013230:	51                   	push   ecx
c0013231:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0013234:	83 c4 10             	add    esp,0x10
c0013237:	5a                   	pop    edx
c0013238:	5b                   	pop    ebx
c0013239:	5e                   	pop    esi
c001323a:	c3                   	ret    

c001323b <Fs::setcwd(Process*, char*)>:
c001323b:	55                   	push   ebp
c001323c:	57                   	push   edi
c001323d:	56                   	push   esi
c001323e:	53                   	push   ebx
c001323f:	81 ec 20 02 00 00    	sub    esp,0x220
c0013245:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c001324c:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0013252:	57                   	push   edi
c0013253:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001325a:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c001325e:	56                   	push   esi
c001325f:	e8 bc fa ff ff       	call   c0012d20 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013264:	89 34 24             	mov    DWORD PTR [esp],esi
c0013267:	e8 00 d5 fe ff       	call   c000076c <strlen>
c001326c:	83 c4 10             	add    esp,0x10
c001326f:	83 f8 02             	cmp    eax,0x2
c0013272:	77 17                	ja     c001328b <Fs::setcwd(Process*, char*)+0x50>
c0013274:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0013279:	83 e8 41             	sub    eax,0x41
c001327c:	83 f8 19             	cmp    eax,0x19
c001327f:	76 24                	jbe    c00132a5 <Fs::setcwd(Process*, char*)+0x6a>
c0013281:	b8 03 00 00 00       	mov    eax,0x3
c0013286:	e9 e0 00 00 00       	jmp    c001336b <Fs::setcwd(Process*, char*)+0x130>
c001328b:	83 ec 0c             	sub    esp,0xc
c001328e:	56                   	push   esi
c001328f:	e8 d8 d4 fe ff       	call   c000076c <strlen>
c0013294:	83 c4 10             	add    esp,0x10
c0013297:	83 f8 03             	cmp    eax,0x3
c001329a:	75 34                	jne    c00132d0 <Fs::setcwd(Process*, char*)+0x95>
c001329c:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00132a1:	75 2d                	jne    c00132d0 <Fs::setcwd(Process*, char*)+0x95>
c00132a3:	eb cf                	jmp    c0013274 <Fs::setcwd(Process*, char*)+0x39>
c00132a5:	8b 14 85 c0 f6 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0940]
c00132ac:	b8 05 00 00 00       	mov    eax,0x5
c00132b1:	85 d2                	test   edx,edx
c00132b3:	0f 84 b2 00 00 00    	je     c001336b <Fs::setcwd(Process*, char*)+0x130>
c00132b9:	b8 06 00 00 00       	mov    eax,0x6
c00132be:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00132c5:	0f 85 92 00 00 00    	jne    c001335d <Fs::setcwd(Process*, char*)+0x122>
c00132cb:	e9 9b 00 00 00       	jmp    c001336b <Fs::setcwd(Process*, char*)+0x130>
c00132d0:	83 ec 0c             	sub    esp,0xc
c00132d3:	68 14 01 00 00       	push   0x114
c00132d8:	e8 af c5 ff ff       	call   c000f88c <malloc>
c00132dd:	83 c4 0c             	add    esp,0xc
c00132e0:	89 c3                	mov    ebx,eax
c00132e2:	55                   	push   ebp
c00132e3:	56                   	push   esi
c00132e4:	50                   	push   eax
c00132e5:	e8 e0 fb ff ff       	call   c0012eca <File::File(char const*, Process*)>
c00132ea:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00132ef:	83 c4 0c             	add    esp,0xc
c00132f2:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00132f6:	50                   	push   eax
c00132f7:	8d 44 24 10          	lea    eax,[esp+0x10]
c00132fb:	50                   	push   eax
c00132fc:	53                   	push   ebx
c00132fd:	e8 d8 fe ff ff       	call   c00131da <File::stat(unsigned long long*, bool*)>
c0013302:	83 c4 10             	add    esp,0x10
c0013305:	83 f8 02             	cmp    eax,0x2
c0013308:	74 04                	je     c001330e <Fs::setcwd(Process*, char*)+0xd3>
c001330a:	85 c0                	test   eax,eax
c001330c:	74 1c                	je     c001332a <Fs::setcwd(Process*, char*)+0xef>
c001330e:	b8 01 00 00 00       	mov    eax,0x1
c0013313:	85 db                	test   ebx,ebx
c0013315:	74 54                	je     c001336b <Fs::setcwd(Process*, char*)+0x130>
c0013317:	83 ec 0c             	sub    esp,0xc
c001331a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001331c:	53                   	push   ebx
c001331d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013320:	83 c4 10             	add    esp,0x10
c0013323:	b8 01 00 00 00       	mov    eax,0x1
c0013328:	eb 41                	jmp    c001336b <Fs::setcwd(Process*, char*)+0x130>
c001332a:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001332f:	75 1c                	jne    c001334d <Fs::setcwd(Process*, char*)+0x112>
c0013331:	b8 02 00 00 00       	mov    eax,0x2
c0013336:	85 db                	test   ebx,ebx
c0013338:	74 31                	je     c001336b <Fs::setcwd(Process*, char*)+0x130>
c001333a:	83 ec 0c             	sub    esp,0xc
c001333d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001333f:	53                   	push   ebx
c0013340:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013343:	83 c4 10             	add    esp,0x10
c0013346:	b8 02 00 00 00       	mov    eax,0x2
c001334b:	eb 1e                	jmp    c001336b <Fs::setcwd(Process*, char*)+0x130>
c001334d:	85 db                	test   ebx,ebx
c001334f:	74 0c                	je     c001335d <Fs::setcwd(Process*, char*)+0x122>
c0013351:	83 ec 0c             	sub    esp,0xc
c0013354:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013356:	53                   	push   ebx
c0013357:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001335a:	83 c4 10             	add    esp,0x10
c001335d:	50                   	push   eax
c001335e:	50                   	push   eax
c001335f:	56                   	push   esi
c0013360:	57                   	push   edi
c0013361:	e8 a6 d4 fe ff       	call   c000080c <strcpy>
c0013366:	83 c4 10             	add    esp,0x10
c0013369:	31 c0                	xor    eax,eax
c001336b:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013371:	5b                   	pop    ebx
c0013372:	5e                   	pop    esi
c0013373:	5f                   	pop    edi
c0013374:	5d                   	pop    ebp
c0013375:	c3                   	ret    

c0013376 <Directory::Directory(char const*, Process*)>:
c0013376:	83 ec 0c             	sub    esp,0xc
c0013379:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001337d:	83 ec 08             	sub    esp,0x8
c0013380:	6a 00                	push   0x0
c0013382:	50                   	push   eax
c0013383:	e8 9a dd ff ff       	call   c0011122 <UnixFile::UnixFile(int)>
c0013388:	83 c4 10             	add    esp,0x10
c001338b:	ba cc b4 02 c0       	mov    edx,0xc002b4cc
c0013390:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013394:	89 10                	mov    DWORD PTR [eax],edx
c0013396:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001339a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00133a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133a4:	83 c0 0d             	add    eax,0xd
c00133a7:	83 ec 04             	sub    esp,0x4
c00133aa:	52                   	push   edx
c00133ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133af:	50                   	push   eax
c00133b0:	e8 6b f9 ff ff       	call   c0012d20 <Fs::standardiseFiles(char*, char const*, char const*)>
c00133b5:	83 c4 10             	add    esp,0x10
c00133b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133bc:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00133bf:	8d 50 bf             	lea    edx,[eax-0x41]
c00133c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133c6:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00133cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133d0:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00133d4:	90                   	nop
c00133d5:	83 c4 0c             	add    esp,0xc
c00133d8:	c3                   	ret    
c00133d9:	90                   	nop

c00133da <Directory::open()>:
c00133da:	53                   	push   ebx
c00133db:	b8 0b 00 00 00       	mov    eax,0xb
c00133e0:	83 ec 08             	sub    esp,0x8
c00133e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00133e7:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00133ee:	80 fa 19             	cmp    dl,0x19
c00133f1:	77 3d                	ja     c0013430 <Directory::open()+0x56>
c00133f3:	8b 14 95 c0 f6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0940]
c00133fa:	85 d2                	test   edx,edx
c00133fc:	74 32                	je     c0013430 <Directory::open()+0x56>
c00133fe:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013404:	85 d2                	test   edx,edx
c0013406:	74 28                	je     c0013430 <Directory::open()+0x56>
c0013408:	b8 06 00 00 00       	mov    eax,0x6
c001340d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013411:	75 1d                	jne    c0013430 <Directory::open()+0x56>
c0013413:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013419:	50                   	push   eax
c001341a:	8b 02                	mov    eax,DWORD PTR [edx]
c001341c:	51                   	push   ecx
c001341d:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013420:	51                   	push   ecx
c0013421:	52                   	push   edx
c0013422:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013425:	83 c4 10             	add    esp,0x10
c0013428:	85 c0                	test   eax,eax
c001342a:	75 04                	jne    c0013430 <Directory::open()+0x56>
c001342c:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013430:	83 c4 08             	add    esp,0x8
c0013433:	5b                   	pop    ebx
c0013434:	c3                   	ret    
c0013435:	90                   	nop

c0013436 <Directory::close()>:
c0013436:	53                   	push   ebx
c0013437:	b8 0b 00 00 00       	mov    eax,0xb
c001343c:	83 ec 08             	sub    esp,0x8
c001343f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013443:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001344a:	80 fa 19             	cmp    dl,0x19
c001344d:	77 41                	ja     c0013490 <Directory::close()+0x5a>
c001344f:	8b 1c 95 c0 f6 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd0940]
c0013456:	85 db                	test   ebx,ebx
c0013458:	74 36                	je     c0013490 <Directory::close()+0x5a>
c001345a:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013461:	74 2d                	je     c0013490 <Directory::close()+0x5a>
c0013463:	b8 05 00 00 00       	mov    eax,0x5
c0013468:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001346c:	74 22                	je     c0013490 <Directory::close()+0x5a>
c001346e:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013472:	8b 04 95 c0 f6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0940]
c0013479:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001347f:	53                   	push   ebx
c0013480:	53                   	push   ebx
c0013481:	8b 10                	mov    edx,DWORD PTR [eax]
c0013483:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013489:	50                   	push   eax
c001348a:	ff 52 20             	call   DWORD PTR [edx+0x20]
c001348d:	83 c4 10             	add    esp,0x10
c0013490:	83 c4 08             	add    esp,0x8
c0013493:	5b                   	pop    ebx
c0013494:	c3                   	ret    
c0013495:	90                   	nop

c0013496 <Directory::unlink()>:
c0013496:	83 ec 0c             	sub    esp,0xc
c0013499:	b8 0b 00 00 00       	mov    eax,0xb
c001349e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00134a2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00134a9:	80 f9 19             	cmp    cl,0x19
c00134ac:	77 2f                	ja     c00134dd <Directory::unlink()+0x47>
c00134ae:	8b 0c 8d c0 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0940]
c00134b5:	85 c9                	test   ecx,ecx
c00134b7:	74 24                	je     c00134dd <Directory::unlink()+0x47>
c00134b9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00134bf:	85 c9                	test   ecx,ecx
c00134c1:	74 1a                	je     c00134dd <Directory::unlink()+0x47>
c00134c3:	b8 06 00 00 00       	mov    eax,0x6
c00134c8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00134cc:	75 0f                	jne    c00134dd <Directory::unlink()+0x47>
c00134ce:	83 c2 0d             	add    edx,0xd
c00134d1:	50                   	push   eax
c00134d2:	50                   	push   eax
c00134d3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00134d5:	52                   	push   edx
c00134d6:	51                   	push   ecx
c00134d7:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00134da:	83 c4 10             	add    esp,0x10
c00134dd:	83 c4 0c             	add    esp,0xc
c00134e0:	c3                   	ret    
c00134e1:	90                   	nop

c00134e2 <Directory::rename(char const*)>:
c00134e2:	83 ec 0c             	sub    esp,0xc
c00134e5:	b8 0b 00 00 00       	mov    eax,0xb
c00134ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00134ee:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00134f5:	80 f9 19             	cmp    cl,0x19
c00134f8:	77 32                	ja     c001352c <Directory::rename(char const*)+0x4a>
c00134fa:	8b 0c 8d c0 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0940]
c0013501:	85 c9                	test   ecx,ecx
c0013503:	74 27                	je     c001352c <Directory::rename(char const*)+0x4a>
c0013505:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001350b:	85 c9                	test   ecx,ecx
c001350d:	74 1d                	je     c001352c <Directory::rename(char const*)+0x4a>
c001350f:	b8 06 00 00 00       	mov    eax,0x6
c0013514:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013518:	75 12                	jne    c001352c <Directory::rename(char const*)+0x4a>
c001351a:	83 c2 0d             	add    edx,0xd
c001351d:	50                   	push   eax
c001351e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013520:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013524:	52                   	push   edx
c0013525:	51                   	push   ecx
c0013526:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013529:	83 c4 10             	add    esp,0x10
c001352c:	83 c4 0c             	add    esp,0xc
c001352f:	c3                   	ret    

c0013530 <Directory::exists()>:
c0013530:	83 ec 0c             	sub    esp,0xc
c0013533:	31 c0                	xor    eax,eax
c0013535:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013539:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013540:	80 f9 19             	cmp    cl,0x19
c0013543:	77 24                	ja     c0013569 <Directory::exists()+0x39>
c0013545:	8b 0c 8d c0 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0940]
c001354c:	85 c9                	test   ecx,ecx
c001354e:	74 19                	je     c0013569 <Directory::exists()+0x39>
c0013550:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013556:	85 c9                	test   ecx,ecx
c0013558:	74 0f                	je     c0013569 <Directory::exists()+0x39>
c001355a:	83 c2 0d             	add    edx,0xd
c001355d:	50                   	push   eax
c001355e:	50                   	push   eax
c001355f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013561:	52                   	push   edx
c0013562:	51                   	push   ecx
c0013563:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013566:	83 c4 10             	add    esp,0x10
c0013569:	83 c4 0c             	add    esp,0xc
c001356c:	c3                   	ret    
c001356d:	90                   	nop

c001356e <Directory::read(dirent*)>:
c001356e:	83 ec 1c             	sub    esp,0x1c
c0013571:	b8 0b 00 00 00       	mov    eax,0xb
c0013576:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001357a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013581:	80 fa 19             	cmp    dl,0x19
c0013584:	77 30                	ja     c00135b6 <Directory::read(dirent*)+0x48>
c0013586:	8b 14 95 c0 f6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0940]
c001358d:	85 d2                	test   edx,edx
c001358f:	74 25                	je     c00135b6 <Directory::read(dirent*)+0x48>
c0013591:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013598:	74 1c                	je     c00135b6 <Directory::read(dirent*)+0x48>
c001359a:	83 ec 0c             	sub    esp,0xc
c001359d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001359f:	8d 54 24 18          	lea    edx,[esp+0x18]
c00135a3:	52                   	push   edx
c00135a4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00135a8:	6a 00                	push   0x0
c00135aa:	68 10 01 00 00       	push   0x110
c00135af:	51                   	push   ecx
c00135b0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00135b3:	83 c4 20             	add    esp,0x20
c00135b6:	83 c4 1c             	add    esp,0x1c
c00135b9:	c3                   	ret    

c00135ba <Directory::create()>:
c00135ba:	83 ec 0c             	sub    esp,0xc
c00135bd:	b8 0b 00 00 00       	mov    eax,0xb
c00135c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00135c6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00135cd:	80 f9 19             	cmp    cl,0x19
c00135d0:	77 2f                	ja     c0013601 <Directory::create()+0x47>
c00135d2:	8b 0c 8d c0 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0940]
c00135d9:	85 c9                	test   ecx,ecx
c00135db:	74 24                	je     c0013601 <Directory::create()+0x47>
c00135dd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00135e3:	85 c9                	test   ecx,ecx
c00135e5:	74 1a                	je     c0013601 <Directory::create()+0x47>
c00135e7:	b8 06 00 00 00       	mov    eax,0x6
c00135ec:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00135f0:	75 0f                	jne    c0013601 <Directory::create()+0x47>
c00135f2:	83 c2 0d             	add    edx,0xd
c00135f5:	50                   	push   eax
c00135f6:	50                   	push   eax
c00135f7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00135f9:	52                   	push   edx
c00135fa:	51                   	push   ecx
c00135fb:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00135fe:	83 c4 10             	add    esp,0x10
c0013601:	83 c4 0c             	add    esp,0xc
c0013604:	c3                   	ret    
c0013605:	90                   	nop

c0013606 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013606:	b8 0a 00 00 00       	mov    eax,0xa
c001360b:	c3                   	ret    

c001360c <Bus::Bus(char const*)>:
c001360c:	83 ec 0c             	sub    esp,0xc
c001360f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013613:	83 ec 08             	sub    esp,0x8
c0013616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001361a:	50                   	push   eax
c001361b:	e8 88 09 00 00       	call   c0013fa8 <Device::Device(char const*)>
c0013620:	83 c4 10             	add    esp,0x10
c0013623:	ba e8 b4 02 c0       	mov    edx,0xc002b4e8
c0013628:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001362c:	89 10                	mov    DWORD PTR [eax],edx
c001362e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013632:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c001363c:	90                   	nop
c001363d:	83 c4 0c             	add    esp,0xc
c0013640:	c3                   	ret    
c0013641:	90                   	nop

c0013642 <Bus::~Bus()>:
c0013642:	83 ec 0c             	sub    esp,0xc
c0013645:	ba e8 b4 02 c0       	mov    edx,0xc002b4e8
c001364a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001364e:	89 10                	mov    DWORD PTR [eax],edx
c0013650:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013654:	83 ec 0c             	sub    esp,0xc
c0013657:	50                   	push   eax
c0013658:	e8 15 06 00 00       	call   c0013c72 <Device::~Device()>
c001365d:	83 c4 10             	add    esp,0x10
c0013660:	90                   	nop
c0013661:	83 c4 0c             	add    esp,0xc
c0013664:	c3                   	ret    
c0013665:	90                   	nop

c0013666 <Bus::~Bus()>:
c0013666:	83 ec 0c             	sub    esp,0xc
c0013669:	83 ec 0c             	sub    esp,0xc
c001366c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013670:	e8 cd ff ff ff       	call   c0013642 <Bus::~Bus()>
c0013675:	83 c4 10             	add    esp,0x10
c0013678:	83 ec 08             	sub    esp,0x8
c001367b:	68 58 01 00 00       	push   0x158
c0013680:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013684:	e8 02 f2 ff ff       	call   c001288b <operator delete(void*, unsigned long)>
c0013689:	83 c4 10             	add    esp,0x10
c001368c:	83 c4 0c             	add    esp,0xc
c001368f:	c3                   	ret    

c0013690 <Buzzer::Buzzer(char const*)>:
c0013690:	83 ec 0c             	sub    esp,0xc
c0013693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013697:	83 ec 08             	sub    esp,0x8
c001369a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001369e:	50                   	push   eax
c001369f:	e8 04 09 00 00       	call   c0013fa8 <Device::Device(char const*)>
c00136a4:	83 c4 10             	add    esp,0x10
c00136a7:	ba 14 b5 02 c0       	mov    edx,0xc002b514
c00136ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136b0:	89 10                	mov    DWORD PTR [eax],edx
c00136b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136b6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00136c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136c4:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c00136ce:	90                   	nop
c00136cf:	83 c4 0c             	add    esp,0xc
c00136d2:	c3                   	ret    
c00136d3:	90                   	nop

c00136d4 <Buzzer::~Buzzer()>:
c00136d4:	83 ec 0c             	sub    esp,0xc
c00136d7:	ba 14 b5 02 c0       	mov    edx,0xc002b514
c00136dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136e0:	89 10                	mov    DWORD PTR [eax],edx
c00136e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136e6:	83 ec 0c             	sub    esp,0xc
c00136e9:	50                   	push   eax
c00136ea:	e8 83 05 00 00       	call   c0013c72 <Device::~Device()>
c00136ef:	83 c4 10             	add    esp,0x10
c00136f2:	90                   	nop
c00136f3:	83 c4 0c             	add    esp,0xc
c00136f6:	c3                   	ret    
c00136f7:	90                   	nop

c00136f8 <Buzzer::~Buzzer()>:
c00136f8:	83 ec 0c             	sub    esp,0xc
c00136fb:	83 ec 0c             	sub    esp,0xc
c00136fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013702:	e8 cd ff ff ff       	call   c00136d4 <Buzzer::~Buzzer()>
c0013707:	83 c4 10             	add    esp,0x10
c001370a:	83 ec 08             	sub    esp,0x8
c001370d:	68 5c 01 00 00       	push   0x15c
c0013712:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013716:	e8 70 f1 ff ff       	call   c001288b <operator delete(void*, unsigned long)>
c001371b:	83 c4 10             	add    esp,0x10
c001371e:	83 c4 0c             	add    esp,0xc
c0013721:	c3                   	ret    

c0013722 <Buzzer::stop()>:
c0013722:	83 ec 14             	sub    esp,0x14
c0013725:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013729:	8b 10                	mov    edx,DWORD PTR [eax]
c001372b:	6a 00                	push   0x0
c001372d:	50                   	push   eax
c001372e:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013731:	83 c4 1c             	add    esp,0x1c
c0013734:	c3                   	ret    

c0013735 <beepThread(void*)>:
c0013735:	53                   	push   ebx
c0013736:	83 ec 08             	sub    esp,0x8
c0013739:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001373e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013742:	48                   	dec    eax
c0013743:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c0013748:	75 01                	jne    c001374b <beepThread(void*)+0x16>
c001374a:	fb                   	sti    
c001374b:	50                   	push   eax
c001374c:	50                   	push   eax
c001374d:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013752:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013758:	52                   	push   edx
c0013759:	50                   	push   eax
c001375a:	e8 f8 ac 00 00       	call   c001e457 <nanoSleep(unsigned long long)>
c001375f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013762:	e8 bb ff ff ff       	call   c0013722 <Buzzer::stop()>
c0013767:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c001376f:	83 c4 18             	add    esp,0x18
c0013772:	5b                   	pop    ebx
c0013773:	e9 db ab 00 00       	jmp    c001e353 <blockTask(TaskState)>

c0013778 <Buzzer::beep(int, int, bool)>:
c0013778:	57                   	push   edi
c0013779:	56                   	push   esi
c001377a:	53                   	push   ebx
c001377b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001377f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013783:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013787:	52                   	push   edx
c0013788:	52                   	push   edx
c0013789:	8b 06                	mov    eax,DWORD PTR [esi]
c001378b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001378f:	56                   	push   esi
c0013790:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013793:	83 c4 10             	add    esp,0x10
c0013796:	89 f8                	mov    eax,edi
c0013798:	84 c0                	test   al,al
c001379a:	74 1f                	je     c00137bb <Buzzer::beep(int, int, bool)+0x43>
c001379c:	50                   	push   eax
c001379d:	50                   	push   eax
c001379e:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c00137a4:	99                   	cdq    
c00137a5:	52                   	push   edx
c00137a6:	50                   	push   eax
c00137a7:	e8 ab ac 00 00       	call   c001e457 <nanoSleep(unsigned long long)>
c00137ac:	83 c4 10             	add    esp,0x10
c00137af:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00137b3:	5b                   	pop    ebx
c00137b4:	5e                   	pop    esi
c00137b5:	5f                   	pop    edi
c00137b6:	e9 67 ff ff ff       	jmp    c0013722 <Buzzer::stop()>
c00137bb:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c00137c1:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c00137c6:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c00137ce:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00137d2:	c7 44 24 14 35 37 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013735
c00137da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00137de:	5b                   	pop    ebx
c00137df:	5e                   	pop    esi
c00137e0:	5f                   	pop    edi
c00137e1:	e9 2a a7 00 00       	jmp    c001df10 <Process::createThread(void (*)(void*), void*, int)>

c00137e6 <User::loadClockSettings(int)>:
c00137e6:	53                   	push   ebx
c00137e7:	83 ec 14             	sub    esp,0x14
c00137ea:	68 14 01 00 00       	push   0x114
c00137ef:	e8 98 c0 ff ff       	call   c000f88c <malloc>
c00137f4:	83 c4 0c             	add    esp,0xc
c00137f7:	89 c3                	mov    ebx,eax
c00137f9:	ff 35 10 26 03 c0    	push   DWORD PTR ds:0xc0032610
c00137ff:	68 3c b5 02 c0       	push   0xc002b53c
c0013804:	50                   	push   eax
c0013805:	e8 c0 f6 ff ff       	call   c0012eca <File::File(char const*, Process*)>
c001380a:	58                   	pop    eax
c001380b:	5a                   	pop    edx
c001380c:	6a 01                	push   0x1
c001380e:	53                   	push   ebx
c001380f:	e8 1a f7 ff ff       	call   c0012f2e <File::open(FileOpenMode)>
c0013814:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013817:	e8 70 f7 ff ff       	call   c0012f8c <File::close()>
c001381c:	83 c4 10             	add    esp,0x10
c001381f:	85 db                	test   ebx,ebx
c0013821:	74 0f                	je     c0013832 <User::loadClockSettings(int)+0x4c>
c0013823:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013825:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013829:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001382c:	83 c4 08             	add    esp,0x8
c001382f:	5b                   	pop    ebx
c0013830:	ff e0                	jmp    eax
c0013832:	83 c4 08             	add    esp,0x8
c0013835:	5b                   	pop    ebx
c0013836:	c3                   	ret    
c0013837:	90                   	nop

c0013838 <Clock::Clock(char const*)>:
c0013838:	83 ec 0c             	sub    esp,0xc
c001383b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001383f:	83 ec 08             	sub    esp,0x8
c0013842:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013846:	50                   	push   eax
c0013847:	e8 5c 07 00 00       	call   c0013fa8 <Device::Device(char const*)>
c001384c:	83 c4 10             	add    esp,0x10
c001384f:	ba 64 b5 02 c0       	mov    edx,0xc002b564
c0013854:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013858:	89 10                	mov    DWORD PTR [eax],edx
c001385a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001385e:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013868:	90                   	nop
c0013869:	83 c4 0c             	add    esp,0xc
c001386c:	c3                   	ret    
c001386d:	90                   	nop

c001386e <Clock::~Clock()>:
c001386e:	83 ec 0c             	sub    esp,0xc
c0013871:	ba 64 b5 02 c0       	mov    edx,0xc002b564
c0013876:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001387a:	89 10                	mov    DWORD PTR [eax],edx
c001387c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013880:	83 ec 0c             	sub    esp,0xc
c0013883:	50                   	push   eax
c0013884:	e8 e9 03 00 00       	call   c0013c72 <Device::~Device()>
c0013889:	83 c4 10             	add    esp,0x10
c001388c:	90                   	nop
c001388d:	83 c4 0c             	add    esp,0xc
c0013890:	c3                   	ret    
c0013891:	90                   	nop

c0013892 <Clock::~Clock()>:
c0013892:	83 ec 0c             	sub    esp,0xc
c0013895:	83 ec 0c             	sub    esp,0xc
c0013898:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001389c:	e8 cd ff ff ff       	call   c001386e <Clock::~Clock()>
c00138a1:	83 c4 10             	add    esp,0x10
c00138a4:	83 ec 08             	sub    esp,0x8
c00138a7:	68 58 01 00 00       	push   0x158
c00138ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138b0:	e8 d6 ef ff ff       	call   c001288b <operator delete(void*, unsigned long)>
c00138b5:	83 c4 10             	add    esp,0x10
c00138b8:	83 c4 0c             	add    esp,0xc
c00138bb:	c3                   	ret    

c00138bc <Clock::timeInSecondsLocal()>:
c00138bc:	53                   	push   ebx
c00138bd:	83 ec 14             	sub    esp,0x14
c00138c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00138c4:	8b 10                	mov    edx,DWORD PTR [eax]
c00138c6:	50                   	push   eax
c00138c7:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00138ca:	0f b6 0d 3c f2 02 c0 	movzx  ecx,BYTE PTR ds:0xc002f23c
c00138d1:	03 0d 40 f2 02 c0    	add    ecx,DWORD PTR ds:0xc002f240
c00138d7:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00138dd:	89 cb                	mov    ebx,ecx
c00138df:	c1 fb 1f             	sar    ebx,0x1f
c00138e2:	01 c8                	add    eax,ecx
c00138e4:	11 da                	adc    edx,ebx
c00138e6:	83 c4 10             	add    esp,0x10
c00138e9:	31 c9                	xor    ecx,ecx
c00138eb:	80 3d 3d f2 02 c0 00 	cmp    BYTE PTR ds:0xc002f23d,0x0
c00138f2:	74 05                	je     c00138f9 <Clock::timeInSecondsLocal()+0x3d>
c00138f4:	b9 08 07 00 00       	mov    ecx,0x708
c00138f9:	31 db                	xor    ebx,ebx
c00138fb:	01 c8                	add    eax,ecx
c00138fd:	11 da                	adc    edx,ebx
c00138ff:	83 c4 08             	add    esp,0x8
c0013902:	5b                   	pop    ebx
c0013903:	c3                   	ret    

c0013904 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013904:	57                   	push   edi
c0013905:	56                   	push   esi
c0013906:	53                   	push   ebx
c0013907:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001390b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001390f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013911:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013915:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013918:	0f b6 05 3c f2 02 c0 	movzx  eax,BYTE PTR ds:0xc002f23c
c001391f:	03 05 40 f2 02 c0    	add    eax,DWORD PTR ds:0xc002f240
c0013925:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c001392b:	99                   	cdq    
c001392c:	29 c6                	sub    esi,eax
c001392e:	19 d7                	sbb    edi,edx
c0013930:	89 f0                	mov    eax,esi
c0013932:	89 fa                	mov    edx,edi
c0013934:	31 f6                	xor    esi,esi
c0013936:	80 3d 3d f2 02 c0 00 	cmp    BYTE PTR ds:0xc002f23d,0x0
c001393d:	74 05                	je     c0013944 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c001393f:	be 08 07 00 00       	mov    esi,0x708
c0013944:	31 ff                	xor    edi,edi
c0013946:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001394a:	29 f0                	sub    eax,esi
c001394c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013950:	19 fa                	sbb    edx,edi
c0013952:	89 d8                	mov    eax,ebx
c0013954:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013958:	5b                   	pop    ebx
c0013959:	5e                   	pop    esi
c001395a:	5f                   	pop    edi
c001395b:	ff e0                	jmp    eax

c001395d <datetimeToSeconds(datetime_t)>:
c001395d:	55                   	push   ebp
c001395e:	57                   	push   edi
c001395f:	56                   	push   esi
c0013960:	53                   	push   ebx
c0013961:	83 ec 14             	sub    esp,0x14
c0013964:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013968:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001396c:	89 d3                	mov    ebx,edx
c001396e:	0f b6 c6             	movzx  eax,dh
c0013971:	c1 eb 10             	shr    ebx,0x10
c0013974:	48                   	dec    eax
c0013975:	66 81 eb 6c 07       	sub    bx,0x76c
c001397a:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001397e:	0f b6 f5             	movzx  esi,ch
c0013981:	89 cf                	mov    edi,ecx
c0013983:	6b f6 3c             	imul   esi,esi,0x3c
c0013986:	c1 ef 10             	shr    edi,0x10
c0013989:	0f b6 c9             	movzx  ecx,cl
c001398c:	89 f8                	mov    eax,edi
c001398e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013994:	0f b6 f8             	movzx  edi,al
c0013997:	0f b6 d2             	movzx  edx,dl
c001399a:	01 fe                	add    esi,edi
c001399c:	01 f1                	add    ecx,esi
c001399e:	0f b7 f3             	movzx  esi,bx
c00139a1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00139a5:	c1 f9 1f             	sar    ecx,0x1f
c00139a8:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c00139ad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00139b1:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c00139b6:	8b 0c 8d a0 b5 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4a60]
c00139bd:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c00139c1:	76 29                	jbe    c00139ec <datetimeToSeconds(datetime_t)+0x8f>
c00139c3:	f6 c3 03             	test   bl,0x3
c00139c6:	75 24                	jne    c00139ec <datetimeToSeconds(datetime_t)+0x8f>
c00139c8:	31 d2                	xor    edx,edx
c00139ca:	bf 64 00 00 00       	mov    edi,0x64
c00139cf:	89 d8                	mov    eax,ebx
c00139d1:	66 f7 f7             	div    di
c00139d4:	66 85 d2             	test   dx,dx
c00139d7:	75 12                	jne    c00139eb <datetimeToSeconds(datetime_t)+0x8e>
c00139d9:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c00139df:	bf 90 01 00 00       	mov    edi,0x190
c00139e4:	99                   	cdq    
c00139e5:	f7 ff                	idiv   edi
c00139e7:	85 d2                	test   edx,edx
c00139e9:	75 01                	jne    c00139ec <datetimeToSeconds(datetime_t)+0x8f>
c00139eb:	41                   	inc    ecx
c00139ec:	66 83 fb 46          	cmp    bx,0x46
c00139f0:	76 45                	jbe    c0013a37 <datetimeToSeconds(datetime_t)+0xda>
c00139f2:	bb 46 00 00 00       	mov    ebx,0x46
c00139f7:	bf 64 00 00 00       	mov    edi,0x64
c00139fc:	bd 90 01 00 00       	mov    ebp,0x190
c0013a01:	b8 6d 01 00 00       	mov    eax,0x16d
c0013a06:	f6 c3 03             	test   bl,0x3
c0013a09:	75 23                	jne    c0013a2e <datetimeToSeconds(datetime_t)+0xd1>
c0013a0b:	89 d8                	mov    eax,ebx
c0013a0d:	99                   	cdq    
c0013a0e:	f7 ff                	idiv   edi
c0013a10:	b8 6e 01 00 00       	mov    eax,0x16e
c0013a15:	85 d2                	test   edx,edx
c0013a17:	75 15                	jne    c0013a2e <datetimeToSeconds(datetime_t)+0xd1>
c0013a19:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013a1f:	99                   	cdq    
c0013a20:	f7 fd                	idiv   ebp
c0013a22:	83 fa 01             	cmp    edx,0x1
c0013a25:	19 c0                	sbb    eax,eax
c0013a27:	f7 d0                	not    eax
c0013a29:	05 6e 01 00 00       	add    eax,0x16e
c0013a2e:	01 c1                	add    ecx,eax
c0013a30:	43                   	inc    ebx
c0013a31:	39 f3                	cmp    ebx,esi
c0013a33:	7c cc                	jl     c0013a01 <datetimeToSeconds(datetime_t)+0xa4>
c0013a35:	eb 35                	jmp    c0013a6c <datetimeToSeconds(datetime_t)+0x10f>
c0013a37:	74 33                	je     c0013a6c <datetimeToSeconds(datetime_t)+0x10f>
c0013a39:	b8 45 00 00 00       	mov    eax,0x45
c0013a3e:	89 c2                	mov    edx,eax
c0013a40:	83 e2 03             	and    edx,0x3
c0013a43:	39 f0                	cmp    eax,esi
c0013a45:	7e 0f                	jle    c0013a56 <datetimeToSeconds(datetime_t)+0xf9>
c0013a47:	83 fa 01             	cmp    edx,0x1
c0013a4a:	19 d2                	sbb    edx,edx
c0013a4c:	48                   	dec    eax
c0013a4d:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013a54:	eb e8                	jmp    c0013a3e <datetimeToSeconds(datetime_t)+0xe1>
c0013a56:	b8 6d 01 00 00       	mov    eax,0x16d
c0013a5b:	85 d2                	test   edx,edx
c0013a5d:	75 0b                	jne    c0013a6a <datetimeToSeconds(datetime_t)+0x10d>
c0013a5f:	66 83 fb 01          	cmp    bx,0x1
c0013a63:	19 c0                	sbb    eax,eax
c0013a65:	05 6e 01 00 00       	add    eax,0x16e
c0013a6a:	29 c1                	sub    ecx,eax
c0013a6c:	b8 80 51 01 00       	mov    eax,0x15180
c0013a71:	f7 e9                	imul   ecx
c0013a73:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013a77:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013a7b:	83 c4 14             	add    esp,0x14
c0013a7e:	5b                   	pop    ebx
c0013a7f:	5e                   	pop    esi
c0013a80:	5f                   	pop    edi
c0013a81:	5d                   	pop    ebp
c0013a82:	c3                   	ret    
c0013a83:	90                   	nop

c0013a84 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013a84:	57                   	push   edi
c0013a85:	56                   	push   esi
c0013a86:	53                   	push   ebx
c0013a87:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013a8b:	8b 06                	mov    eax,DWORD PTR [esi]
c0013a8d:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013a90:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013a94:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013a98:	e8 c0 fe ff ff       	call   c001395d <datetimeToSeconds(datetime_t)>
c0013a9d:	59                   	pop    ecx
c0013a9e:	0f b6 0d 3c f2 02 c0 	movzx  ecx,BYTE PTR ds:0xc002f23c
c0013aa5:	5b                   	pop    ebx
c0013aa6:	03 0d 40 f2 02 c0    	add    ecx,DWORD PTR ds:0xc002f240
c0013aac:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013ab2:	89 cb                	mov    ebx,ecx
c0013ab4:	c1 fb 1f             	sar    ebx,0x1f
c0013ab7:	29 c8                	sub    eax,ecx
c0013ab9:	19 da                	sbb    edx,ebx
c0013abb:	31 c9                	xor    ecx,ecx
c0013abd:	80 3d 3d f2 02 c0 00 	cmp    BYTE PTR ds:0xc002f23d,0x0
c0013ac4:	74 05                	je     c0013acb <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013ac6:	b9 08 07 00 00       	mov    ecx,0x708
c0013acb:	31 db                	xor    ebx,ebx
c0013acd:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013ad1:	29 c8                	sub    eax,ecx
c0013ad3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013ad7:	19 da                	sbb    edx,ebx
c0013ad9:	89 f8                	mov    eax,edi
c0013adb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013adf:	5b                   	pop    ebx
c0013ae0:	5e                   	pop    esi
c0013ae1:	5f                   	pop    edi
c0013ae2:	ff e0                	jmp    eax

c0013ae4 <secondsToDatetime(unsigned long long)>:
c0013ae4:	55                   	push   ebp
c0013ae5:	57                   	push   edi
c0013ae6:	56                   	push   esi
c0013ae7:	53                   	push   ebx
c0013ae8:	83 ec 1c             	sub    esp,0x1c
c0013aeb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013aef:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013af3:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013af7:	6a 00                	push   0x0
c0013af9:	68 80 51 01 00       	push   0x15180
c0013afe:	55                   	push   ebp
c0013aff:	57                   	push   edi
c0013b00:	e8 8f 37 01 00       	call   c0027294 <__udivdi3>
c0013b05:	83 c4 10             	add    esp,0x10
c0013b08:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013b0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013b12:	6a 00                	push   0x0
c0013b14:	68 80 51 01 00       	push   0x15180
c0013b19:	55                   	push   ebp
c0013b1a:	57                   	push   edi
c0013b1b:	bf 10 0e 00 00       	mov    edi,0xe10
c0013b20:	e8 6f 38 01 00       	call   c0027394 <__umoddi3>
c0013b25:	83 c4 10             	add    esp,0x10
c0013b28:	99                   	cdq    
c0013b29:	f7 ff                	idiv   edi
c0013b2b:	bf 3c 00 00 00       	mov    edi,0x3c
c0013b30:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013b33:	89 d0                	mov    eax,edx
c0013b35:	99                   	cdq    
c0013b36:	f7 ff                	idiv   edi
c0013b38:	85 db                	test   ebx,ebx
c0013b3a:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013b3d:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013b40:	79 11                	jns    c0013b53 <secondsToDatetime(unsigned long long)+0x6f>
c0013b42:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013b46:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013b4c:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013b51:	eb 07                	jmp    c0013b5a <secondsToDatetime(unsigned long long)+0x76>
c0013b53:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013b58:	89 d8                	mov    eax,ebx
c0013b5a:	bf b4 05 00 00       	mov    edi,0x5b4
c0013b5f:	99                   	cdq    
c0013b60:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013b65:	f7 f9                	idiv   ecx
c0013b67:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013b6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013b70:	31 d2                	xor    edx,edx
c0013b72:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013b7a:	01 c3                	add    ebx,eax
c0013b7c:	89 d8                	mov    eax,ebx
c0013b7e:	f7 f1                	div    ecx
c0013b80:	31 d2                	xor    edx,edx
c0013b82:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013b85:	89 d8                	mov    eax,ebx
c0013b87:	f7 f7                	div    edi
c0013b89:	31 d2                	xor    edx,edx
c0013b8b:	29 c1                	sub    ecx,eax
c0013b8d:	89 d8                	mov    eax,ebx
c0013b8f:	f7 f5                	div    ebp
c0013b91:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013b96:	29 c1                	sub    ecx,eax
c0013b98:	31 d2                	xor    edx,edx
c0013b9a:	89 c8                	mov    eax,ecx
c0013b9c:	f7 f5                	div    ebp
c0013b9e:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013ba3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013ba7:	31 d2                	xor    edx,edx
c0013ba9:	89 c8                	mov    eax,ecx
c0013bab:	f7 f5                	div    ebp
c0013bad:	31 d2                	xor    edx,edx
c0013baf:	01 c3                	add    ebx,eax
c0013bb1:	89 c8                	mov    eax,ecx
c0013bb3:	f7 f7                	div    edi
c0013bb5:	bf 99 00 00 00       	mov    edi,0x99
c0013bba:	29 c3                	sub    ebx,eax
c0013bbc:	31 d2                	xor    edx,edx
c0013bbe:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013bc6:	29 c3                	sub    ebx,eax
c0013bc8:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013bcb:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013bce:	bb 05 00 00 00       	mov    ebx,0x5
c0013bd3:	83 c1 02             	add    ecx,0x2
c0013bd6:	89 c8                	mov    eax,ecx
c0013bd8:	f7 f7                	div    edi
c0013bda:	31 d2                	xor    edx,edx
c0013bdc:	89 c7                	mov    edi,eax
c0013bde:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013be4:	83 c0 02             	add    eax,0x2
c0013be7:	f7 f3                	div    ebx
c0013be9:	89 eb                	mov    ebx,ebp
c0013beb:	29 c3                	sub    ebx,eax
c0013bed:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013bf3:	88 1e                	mov    BYTE PTR [esi],bl
c0013bf5:	19 c0                	sbb    eax,eax
c0013bf7:	31 d2                	xor    edx,edx
c0013bf9:	83 e0 0c             	and    eax,0xc
c0013bfc:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013c00:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013c08:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013c0c:	83 f9 01             	cmp    ecx,0x1
c0013c0f:	0f 96 c2             	setbe  dl
c0013c12:	41                   	inc    ecx
c0013c13:	01 d0                	add    eax,edx
c0013c15:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013c18:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013c1c:	83 c4 1c             	add    esp,0x1c
c0013c1f:	89 f0                	mov    eax,esi
c0013c21:	5b                   	pop    ebx
c0013c22:	5e                   	pop    esi
c0013c23:	5f                   	pop    edi
c0013c24:	5d                   	pop    ebp
c0013c25:	c2 04 00             	ret    0x4

c0013c28 <Clock::timeInDatetimeLocal()>:
c0013c28:	53                   	push   ebx
c0013c29:	83 ec 14             	sub    esp,0x14
c0013c2c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c30:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013c34:	e8 83 fc ff ff       	call   c00138bc <Clock::timeInSecondsLocal()>
c0013c39:	83 c4 0c             	add    esp,0xc
c0013c3c:	52                   	push   edx
c0013c3d:	50                   	push   eax
c0013c3e:	53                   	push   ebx
c0013c3f:	e8 a0 fe ff ff       	call   c0013ae4 <secondsToDatetime(unsigned long long)>
c0013c44:	89 d8                	mov    eax,ebx
c0013c46:	83 c4 14             	add    esp,0x14
c0013c49:	5b                   	pop    ebx
c0013c4a:	c2 04 00             	ret    0x4
c0013c4d:	90                   	nop

c0013c4e <Device::hibernate()>:
c0013c4e:	c3                   	ret    
c0013c4f:	90                   	nop

c0013c50 <Device::wake()>:
c0013c50:	c3                   	ret    
c0013c51:	90                   	nop

c0013c52 <Device::detect()>:
c0013c52:	c3                   	ret    
c0013c53:	90                   	nop

c0013c54 <Device::disableLegacy()>:
c0013c54:	c3                   	ret    
c0013c55:	90                   	nop

c0013c56 <Device::powerSaving(PowerSavingLevel)>:
c0013c56:	c3                   	ret    
c0013c57:	90                   	nop

c0013c58 <DriverlessDevice::close(int, int, void*)>:
c0013c58:	31 c0                	xor    eax,eax
c0013c5a:	c3                   	ret    
c0013c5b:	90                   	nop

c0013c5c <DriverlessDevice::detect()>:
c0013c5c:	c3                   	ret    
c0013c5d:	90                   	nop

c0013c5e <DriverlessDevice::open(int, int, void*)>:
c0013c5e:	83 ec 18             	sub    esp,0x18
c0013c61:	68 d0 b5 02 c0       	push   0xc002b5d0
c0013c66:	e8 36 67 00 00       	call   c001a3a1 <Krnl::panic(char const*)>
c0013c6b:	83 c8 ff             	or     eax,0xffffffff
c0013c6e:	83 c4 1c             	add    esp,0x1c
c0013c71:	c3                   	ret    

c0013c72 <Device::~Device()>:
c0013c72:	ba 30 b6 02 c0       	mov    edx,0xc002b630
c0013c77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013c7b:	89 10                	mov    DWORD PTR [eax],edx
c0013c7d:	90                   	nop
c0013c7e:	c3                   	ret    
c0013c7f:	90                   	nop

c0013c80 <Device::~Device()>:
c0013c80:	83 ec 0c             	sub    esp,0xc
c0013c83:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013c87:	e8 e6 ff ff ff       	call   c0013c72 <Device::~Device()>
c0013c8c:	83 c4 04             	add    esp,0x4
c0013c8f:	83 ec 08             	sub    esp,0x8
c0013c92:	68 58 01 00 00       	push   0x158
c0013c97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c9b:	e8 eb eb ff ff       	call   c001288b <operator delete(void*, unsigned long)>
c0013ca0:	83 c4 10             	add    esp,0x10
c0013ca3:	83 c4 0c             	add    esp,0xc
c0013ca6:	c3                   	ret    
c0013ca7:	90                   	nop

c0013ca8 <Device::findAndLoadDriver()>:
c0013ca8:	c7 44 24 04 ee b5 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b5ee
c0013cb0:	e9 b6 ec ff ff       	jmp    c001296b <Dbg::kprintf(char const*, ...)>
c0013cb5:	90                   	nop

c0013cb6 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013cb6:	57                   	push   edi
c0013cb7:	b9 09 00 00 00       	mov    ecx,0x9
c0013cbc:	56                   	push   esi
c0013cbd:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013cc1:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013cc5:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013ccf:	81 c7 18 01 00 00    	add    edi,0x118
c0013cd5:	fc                   	cld    
c0013cd6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013cd8:	5e                   	pop    esi
c0013cd9:	5f                   	pop    edi
c0013cda:	c3                   	ret    
c0013cdb:	90                   	nop

c0013cdc <Device::preOpenACPI(void*, char*, char*)>:
c0013cdc:	57                   	push   edi
c0013cdd:	b9 1e 00 00 00       	mov    ecx,0x1e
c0013ce2:	56                   	push   esi
c0013ce3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013ce7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013ceb:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0013cf5:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0013cfb:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0013d01:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013d05:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013d07:	b9 0e 00 00 00       	mov    ecx,0xe
c0013d0c:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0013d12:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013d16:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013d18:	5e                   	pop    esi
c0013d19:	5f                   	pop    edi
c0013d1a:	c3                   	ret    
c0013d1b:	90                   	nop

c0013d1c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013d1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013d20:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013d25:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013d2c:	75 0b                	jne    c0013d39 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013d2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0013d30:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013d34:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013d37:	eb 1e                	jmp    c0013d57 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013d39:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c0013d3e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013d44:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013d4a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013d4c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013d50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013d54:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013d57:	ff e0                	jmp    eax
c0013d59:	90                   	nop

c0013d5a <Device::getParent()>:
c0013d5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013d5e:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0013d64:	c3                   	ret    
c0013d65:	90                   	nop

c0013d66 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013d66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013d6a:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013d6f:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013d76:	75 0b                	jne    c0013d83 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013d78:	8b 00                	mov    eax,DWORD PTR [eax]
c0013d7a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013d7e:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013d81:	eb 1e                	jmp    c0013da1 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013d83:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c0013d88:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013d8e:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013d94:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013d96:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013d9a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013d9e:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013da1:	ff e0                	jmp    eax
c0013da3:	90                   	nop

c0013da4 <Device::addChild(Device*)>:
c0013da4:	53                   	push   ebx
c0013da5:	83 ec 08             	sub    esp,0x8
c0013da8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013dac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013db0:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013db6:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013dbc:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013dbe:	85 d2                	test   edx,edx
c0013dc0:	74 04                	je     c0013dc6 <Device::addChild(Device*)+0x22>
c0013dc2:	89 d3                	mov    ebx,edx
c0013dc4:	eb f6                	jmp    c0013dbc <Device::addChild(Device*)+0x18>
c0013dc6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013dc9:	83 ec 0c             	sub    esp,0xc
c0013dcc:	6a 08                	push   0x8
c0013dce:	e8 b9 ba ff ff       	call   c000f88c <malloc>
c0013dd3:	89 03                	mov    DWORD PTR [ebx],eax
c0013dd5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013ddb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013de2:	83 c4 18             	add    esp,0x18
c0013de5:	5b                   	pop    ebx
c0013de6:	c3                   	ret    
c0013de7:	90                   	nop

c0013de8 <Device::removeAllChildren()>:
c0013de8:	56                   	push   esi
c0013de9:	53                   	push   ebx
c0013dea:	52                   	push   edx
c0013deb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013def:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013df5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013df8:	74 17                	je     c0013e11 <Device::removeAllChildren()+0x29>
c0013dfa:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013dfd:	85 c0                	test   eax,eax
c0013dff:	74 0c                	je     c0013e0d <Device::removeAllChildren()+0x25>
c0013e01:	83 ec 0c             	sub    esp,0xc
c0013e04:	8b 10                	mov    edx,DWORD PTR [eax]
c0013e06:	50                   	push   eax
c0013e07:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013e0a:	83 c4 10             	add    esp,0x10
c0013e0d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e0f:	eb e4                	jmp    c0013df5 <Device::removeAllChildren()+0xd>
c0013e11:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013e17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013e1d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013e23:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013e2a:	58                   	pop    eax
c0013e2b:	5b                   	pop    ebx
c0013e2c:	5e                   	pop    esi
c0013e2d:	c3                   	ret    

c0013e2e <Device::hibernateAll()>:
c0013e2e:	53                   	push   ebx
c0013e2f:	83 ec 14             	sub    esp,0x14
c0013e32:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013e36:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e38:	53                   	push   ebx
c0013e39:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013e3c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e42:	83 c4 10             	add    esp,0x10
c0013e45:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e48:	74 0f                	je     c0013e59 <Device::hibernateAll()+0x2b>
c0013e4a:	83 ec 0c             	sub    esp,0xc
c0013e4d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e50:	e8 d9 ff ff ff       	call   c0013e2e <Device::hibernateAll()>
c0013e55:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e57:	eb e9                	jmp    c0013e42 <Device::hibernateAll()+0x14>
c0013e59:	83 c4 08             	add    esp,0x8
c0013e5c:	5b                   	pop    ebx
c0013e5d:	c3                   	ret    

c0013e5e <Device::wakeAll()>:
c0013e5e:	53                   	push   ebx
c0013e5f:	83 ec 14             	sub    esp,0x14
c0013e62:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013e66:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e68:	53                   	push   ebx
c0013e69:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013e6c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e72:	83 c4 10             	add    esp,0x10
c0013e75:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e78:	74 0f                	je     c0013e89 <Device::wakeAll()+0x2b>
c0013e7a:	83 ec 0c             	sub    esp,0xc
c0013e7d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e80:	e8 d9 ff ff ff       	call   c0013e5e <Device::wakeAll()>
c0013e85:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e87:	eb e9                	jmp    c0013e72 <Device::wakeAll()+0x14>
c0013e89:	83 c4 08             	add    esp,0x8
c0013e8c:	5b                   	pop    ebx
c0013e8d:	c3                   	ret    

c0013e8e <Device::detectAll()>:
c0013e8e:	53                   	push   ebx
c0013e8f:	83 ec 14             	sub    esp,0x14
c0013e92:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013e96:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e98:	53                   	push   ebx
c0013e99:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013e9c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ea2:	83 c4 10             	add    esp,0x10
c0013ea5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ea8:	74 0f                	je     c0013eb9 <Device::detectAll()+0x2b>
c0013eaa:	83 ec 0c             	sub    esp,0xc
c0013ead:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013eb0:	e8 d9 ff ff ff       	call   c0013e8e <Device::detectAll()>
c0013eb5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013eb7:	eb e9                	jmp    c0013ea2 <Device::detectAll()+0x14>
c0013eb9:	83 c4 08             	add    esp,0x8
c0013ebc:	5b                   	pop    ebx
c0013ebd:	c3                   	ret    

c0013ebe <Device::disableLegacyAll()>:
c0013ebe:	53                   	push   ebx
c0013ebf:	83 ec 14             	sub    esp,0x14
c0013ec2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ec6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ec8:	53                   	push   ebx
c0013ec9:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013ecc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ed2:	83 c4 10             	add    esp,0x10
c0013ed5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ed8:	74 0f                	je     c0013ee9 <Device::disableLegacyAll()+0x2b>
c0013eda:	83 ec 0c             	sub    esp,0xc
c0013edd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013ee0:	e8 d9 ff ff ff       	call   c0013ebe <Device::disableLegacyAll()>
c0013ee5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ee7:	eb e9                	jmp    c0013ed2 <Device::disableLegacyAll()+0x14>
c0013ee9:	83 c4 08             	add    esp,0x8
c0013eec:	5b                   	pop    ebx
c0013eed:	c3                   	ret    

c0013eee <Device::loadDriversForAll()>:
c0013eee:	53                   	push   ebx
c0013eef:	83 ec 08             	sub    esp,0x8
c0013ef2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013ef6:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c0013efd:	75 0c                	jne    c0013f0b <Device::loadDriversForAll()+0x1d>
c0013eff:	83 ec 0c             	sub    esp,0xc
c0013f02:	53                   	push   ebx
c0013f03:	e8 a0 fd ff ff       	call   c0013ca8 <Device::findAndLoadDriver()>
c0013f08:	83 c4 10             	add    esp,0x10
c0013f0b:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013f11:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013f14:	74 12                	je     c0013f28 <Device::loadDriversForAll()+0x3a>
c0013f16:	83 ec 0c             	sub    esp,0xc
c0013f19:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013f1c:	e8 cd ff ff ff       	call   c0013eee <Device::loadDriversForAll()>
c0013f21:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013f23:	83 c4 10             	add    esp,0x10
c0013f26:	eb e9                	jmp    c0013f11 <Device::loadDriversForAll()+0x23>
c0013f28:	83 c4 08             	add    esp,0x8
c0013f2b:	5b                   	pop    ebx
c0013f2c:	c3                   	ret    
c0013f2d:	90                   	nop

c0013f2e <Device::closeAll()>:
c0013f2e:	53                   	push   ebx
c0013f2f:	83 ec 08             	sub    esp,0x8
c0013f32:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013f36:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f38:	6a 00                	push   0x0
c0013f3a:	6a 00                	push   0x0
c0013f3c:	6a 00                	push   0x0
c0013f3e:	53                   	push   ebx
c0013f3f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013f42:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013f48:	83 c4 10             	add    esp,0x10
c0013f4b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013f4e:	74 0f                	je     c0013f5f <Device::closeAll()+0x31>
c0013f50:	83 ec 0c             	sub    esp,0xc
c0013f53:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013f56:	e8 d3 ff ff ff       	call   c0013f2e <Device::closeAll()>
c0013f5b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013f5d:	eb e9                	jmp    c0013f48 <Device::closeAll()+0x1a>
c0013f5f:	83 c4 08             	add    esp,0x8
c0013f62:	5b                   	pop    ebx
c0013f63:	c3                   	ret    

c0013f64 <Device::powerSavingAll(PowerSavingLevel)>:
c0013f64:	56                   	push   esi
c0013f65:	53                   	push   ebx
c0013f66:	83 ec 0c             	sub    esp,0xc
c0013f69:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013f6d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013f71:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f73:	56                   	push   esi
c0013f74:	53                   	push   ebx
c0013f75:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013f78:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013f7e:	83 c4 10             	add    esp,0x10
c0013f81:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013f84:	74 0f                	je     c0013f95 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013f86:	52                   	push   edx
c0013f87:	52                   	push   edx
c0013f88:	56                   	push   esi
c0013f89:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013f8c:	e8 d3 ff ff ff       	call   c0013f64 <Device::powerSavingAll(PowerSavingLevel)>
c0013f91:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013f93:	eb e9                	jmp    c0013f7e <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013f95:	58                   	pop    eax
c0013f96:	5b                   	pop    ebx
c0013f97:	5e                   	pop    esi
c0013f98:	c3                   	ret    
c0013f99:	90                   	nop

c0013f9a <Device::setName(char const*)>:
c0013f9a:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013fa2:	e9 65 c8 fe ff       	jmp    c000080c <strcpy>
c0013fa7:	90                   	nop

c0013fa8 <Device::Device(char const*)>:
c0013fa8:	83 ec 1c             	sub    esp,0x1c
c0013fab:	ba 30 b6 02 c0       	mov    edx,0xc002b630
c0013fb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fb4:	89 10                	mov    DWORD PTR [eax],edx
c0013fb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fba:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013fc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fc8:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013fd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fd6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013fe0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fe4:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013fee:	83 ec 08             	sub    esp,0x8
c0013ff1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ff5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ff9:	e8 9c ff ff ff       	call   c0013f9a <Device::setName(char const*)>
c0013ffe:	83 c4 10             	add    esp,0x10
c0014001:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0014009:	83 ec 0c             	sub    esp,0xc
c001400c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014010:	e8 77 b8 ff ff       	call   c000f88c <malloc>
c0014015:	83 c4 10             	add    esp,0x10
c0014018:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001401e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014025:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014029:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c001402f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014033:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014039:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001403f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014043:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014049:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014050:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014054:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c001405b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001405f:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0014066:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001406a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014074:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014078:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014082:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014086:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014094:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c001409e:	90                   	nop
c001409f:	83 c4 1c             	add    esp,0x1c
c00140a2:	c3                   	ret    
c00140a3:	90                   	nop

c00140a4 <Device::getName()>:
c00140a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00140a8:	05 d0 00 00 00       	add    eax,0xd0
c00140ad:	c3                   	ret    

c00140ae <DriverlessDevice::DriverlessDevice(char const*)>:
c00140ae:	83 ec 0c             	sub    esp,0xc
c00140b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140b5:	83 ec 08             	sub    esp,0x8
c00140b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140bc:	50                   	push   eax
c00140bd:	e8 e6 fe ff ff       	call   c0013fa8 <Device::Device(char const*)>
c00140c2:	83 c4 10             	add    esp,0x10
c00140c5:	ba 5c b6 02 c0       	mov    edx,0xc002b65c
c00140ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140ce:	89 10                	mov    DWORD PTR [eax],edx
c00140d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140d4:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c00140de:	90                   	nop
c00140df:	83 c4 0c             	add    esp,0xc
c00140e2:	c3                   	ret    
c00140e3:	90                   	nop

c00140e4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c00140e4:	57                   	push   edi
c00140e5:	56                   	push   esi
c00140e6:	53                   	push   ebx
c00140e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00140eb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00140ef:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00140f3:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c00140f9:	75 0c                	jne    c0014107 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c00140fb:	52                   	push   edx
c00140fc:	52                   	push   edx
c00140fd:	53                   	push   ebx
c00140fe:	56                   	push   esi
c00140ff:	e8 e2 50 01 00       	call   c00291e6 <LinkedList<Device>::addElement(Device*)>
c0014104:	83 c4 10             	add    esp,0x10
c0014107:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001410d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014110:	74 12                	je     c0014124 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0014112:	50                   	push   eax
c0014113:	57                   	push   edi
c0014114:	56                   	push   esi
c0014115:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014118:	e8 c7 ff ff ff       	call   c00140e4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001411d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001411f:	83 c4 10             	add    esp,0x10
c0014122:	eb e9                	jmp    c001410d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0014124:	5b                   	pop    ebx
c0014125:	5e                   	pop    esi
c0014126:	5f                   	pop    edi
c0014127:	c3                   	ret    

c0014128 <getDevicesOfType(DeviceType)>:
c0014128:	53                   	push   ebx
c0014129:	83 ec 14             	sub    esp,0x14
c001412c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014130:	53                   	push   ebx
c0014131:	e8 8c 51 01 00       	call   c00292c2 <LinkedList<Device>::LinkedList()>
c0014136:	83 c4 0c             	add    esp,0xc
c0014139:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001413d:	53                   	push   ebx
c001413e:	ff 35 c8 f0 02 c0    	push   DWORD PTR ds:0xc002f0c8
c0014144:	e8 9b ff ff ff       	call   c00140e4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014149:	89 d8                	mov    eax,ebx
c001414b:	83 c4 18             	add    esp,0x18
c001414e:	5b                   	pop    ebx
c001414f:	c2 04 00             	ret    0x4

c0014152 <HardDiskController::HardDiskController(char const*)>:
c0014152:	83 ec 0c             	sub    esp,0xc
c0014155:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014159:	83 ec 08             	sub    esp,0x8
c001415c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014160:	50                   	push   eax
c0014161:	e8 42 fe ff ff       	call   c0013fa8 <Device::Device(char const*)>
c0014166:	83 c4 10             	add    esp,0x10
c0014169:	ba 88 b6 02 c0       	mov    edx,0xc002b688
c001416e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014172:	89 10                	mov    DWORD PTR [eax],edx
c0014174:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014178:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0014182:	90                   	nop
c0014183:	83 c4 0c             	add    esp,0xc
c0014186:	c3                   	ret    
c0014187:	90                   	nop

c0014188 <HardDiskController::~HardDiskController()>:
c0014188:	83 ec 0c             	sub    esp,0xc
c001418b:	ba 88 b6 02 c0       	mov    edx,0xc002b688
c0014190:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014194:	89 10                	mov    DWORD PTR [eax],edx
c0014196:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001419a:	83 ec 0c             	sub    esp,0xc
c001419d:	50                   	push   eax
c001419e:	e8 cf fa ff ff       	call   c0013c72 <Device::~Device()>
c00141a3:	83 c4 10             	add    esp,0x10
c00141a6:	90                   	nop
c00141a7:	83 c4 0c             	add    esp,0xc
c00141aa:	c3                   	ret    
c00141ab:	90                   	nop

c00141ac <HardDiskController::~HardDiskController()>:
c00141ac:	83 ec 0c             	sub    esp,0xc
c00141af:	83 ec 0c             	sub    esp,0xc
c00141b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141b6:	e8 cd ff ff ff       	call   c0014188 <HardDiskController::~HardDiskController()>
c00141bb:	83 c4 10             	add    esp,0x10
c00141be:	83 ec 08             	sub    esp,0x8
c00141c1:	68 58 01 00 00       	push   0x158
c00141c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141ca:	e8 bc e6 ff ff       	call   c001288b <operator delete(void*, unsigned long)>
c00141cf:	83 c4 10             	add    esp,0x10
c00141d2:	83 c4 0c             	add    esp,0xc
c00141d5:	c3                   	ret    

c00141d6 <PhysicalDisk::eject()>:
c00141d6:	83 ec 18             	sub    esp,0x18
c00141d9:	68 ac b6 02 c0       	push   0xc002b6ac
c00141de:	e8 88 e7 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c00141e3:	83 c8 ff             	or     eax,0xffffffff
c00141e6:	83 c4 1c             	add    esp,0x1c
c00141e9:	c3                   	ret    

c00141ea <PhysicalDisk::PhysicalDisk(char const*, int)>:
c00141ea:	83 ec 0c             	sub    esp,0xc
c00141ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141f1:	83 ec 08             	sub    esp,0x8
c00141f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141f8:	50                   	push   eax
c00141f9:	e8 aa fd ff ff       	call   c0013fa8 <Device::Device(char const*)>
c00141fe:	83 c4 10             	add    esp,0x10
c0014201:	ba dc b6 02 c0       	mov    edx,0xc002b6dc
c0014206:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001420a:	89 10                	mov    DWORD PTR [eax],edx
c001420c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014210:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014217:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001421b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0014222:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014226:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014234:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014238:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001423e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014242:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001424c:	90                   	nop
c001424d:	83 c4 0c             	add    esp,0xc
c0014250:	c3                   	ret    
c0014251:	90                   	nop

c0014252 <PhysicalDisk::startCache()>:
c0014252:	56                   	push   esi
c0014253:	53                   	push   ebx
c0014254:	83 ec 10             	sub    esp,0x10
c0014257:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001425b:	6a 44                	push   0x44
c001425d:	e8 2a b6 ff ff       	call   c000f88c <malloc>
c0014262:	89 c6                	mov    esi,eax
c0014264:	58                   	pop    eax
c0014265:	5a                   	pop    edx
c0014266:	53                   	push   ebx
c0014267:	56                   	push   esi
c0014268:	e8 a9 28 00 00       	call   c0016b16 <VCache::VCache(PhysicalDisk*)>
c001426d:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0014273:	83 c4 14             	add    esp,0x14
c0014276:	5b                   	pop    ebx
c0014277:	5e                   	pop    esi
c0014278:	c3                   	ret    
c0014279:	90                   	nop

c001427a <PhysicalDisk::~PhysicalDisk()>:
c001427a:	83 ec 0c             	sub    esp,0xc
c001427d:	ba dc b6 02 c0       	mov    edx,0xc002b6dc
c0014282:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014286:	89 10                	mov    DWORD PTR [eax],edx
c0014288:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001428c:	83 ec 0c             	sub    esp,0xc
c001428f:	50                   	push   eax
c0014290:	e8 dd f9 ff ff       	call   c0013c72 <Device::~Device()>
c0014295:	83 c4 10             	add    esp,0x10
c0014298:	90                   	nop
c0014299:	83 c4 0c             	add    esp,0xc
c001429c:	c3                   	ret    
c001429d:	90                   	nop

c001429e <PhysicalDisk::~PhysicalDisk()>:
c001429e:	83 ec 0c             	sub    esp,0xc
c00142a1:	83 ec 0c             	sub    esp,0xc
c00142a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00142a8:	e8 cd ff ff ff       	call   c001427a <PhysicalDisk::~PhysicalDisk()>
c00142ad:	83 c4 10             	add    esp,0x10
c00142b0:	83 ec 08             	sub    esp,0x8
c00142b3:	68 6c 01 00 00       	push   0x16c
c00142b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00142bc:	e8 ca e5 ff ff       	call   c001288b <operator delete(void*, unsigned long)>
c00142c1:	83 c4 10             	add    esp,0x10
c00142c4:	83 c4 0c             	add    esp,0xc
c00142c7:	c3                   	ret    

c00142c8 <FPU::FPU(char const*)>:
c00142c8:	83 ec 0c             	sub    esp,0xc
c00142cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142cf:	83 ec 08             	sub    esp,0x8
c00142d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00142d6:	50                   	push   eax
c00142d7:	e8 cc fc ff ff       	call   c0013fa8 <Device::Device(char const*)>
c00142dc:	83 c4 10             	add    esp,0x10
c00142df:	ba 20 b7 02 c0       	mov    edx,0xc002b720
c00142e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142e8:	89 10                	mov    DWORD PTR [eax],edx
c00142ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142ee:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c00142f8:	90                   	nop
c00142f9:	83 c4 0c             	add    esp,0xc
c00142fc:	c3                   	ret    
c00142fd:	90                   	nop

c00142fe <FPU::~FPU()>:
c00142fe:	83 ec 0c             	sub    esp,0xc
c0014301:	ba 20 b7 02 c0       	mov    edx,0xc002b720
c0014306:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001430a:	89 10                	mov    DWORD PTR [eax],edx
c001430c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014310:	83 ec 0c             	sub    esp,0xc
c0014313:	50                   	push   eax
c0014314:	e8 59 f9 ff ff       	call   c0013c72 <Device::~Device()>
c0014319:	83 c4 10             	add    esp,0x10
c001431c:	90                   	nop
c001431d:	83 c4 0c             	add    esp,0xc
c0014320:	c3                   	ret    
c0014321:	90                   	nop

c0014322 <FPU::~FPU()>:
c0014322:	83 ec 0c             	sub    esp,0xc
c0014325:	83 ec 0c             	sub    esp,0xc
c0014328:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001432c:	e8 cd ff ff ff       	call   c00142fe <FPU::~FPU()>
c0014331:	83 c4 10             	add    esp,0x10
c0014334:	83 ec 08             	sub    esp,0x8
c0014337:	68 58 01 00 00       	push   0x158
c001433c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014340:	e8 46 e5 ff ff       	call   c001288b <operator delete(void*, unsigned long)>
c0014345:	83 c4 10             	add    esp,0x10
c0014348:	83 c4 0c             	add    esp,0xc
c001434b:	c3                   	ret    

c001434c <setupFPU()>:
c001434c:	53                   	push   ebx
c001434d:	83 ec 08             	sub    esp,0x8
c0014350:	8b 15 c8 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f0c8
c0014356:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c001435d:	74 19                	je     c0014378 <setupFPU()+0x2c>
c001435f:	83 ec 0c             	sub    esp,0xc
c0014362:	68 58 01 00 00       	push   0x158
c0014367:	e8 20 b5 ff ff       	call   c000f88c <malloc>
c001436c:	89 c3                	mov    ebx,eax
c001436e:	89 04 24             	mov    DWORD PTR [esp],eax
c0014371:	e8 a2 1a 01 00       	call   c0025e18 <AVX::AVX()>
c0014376:	eb 5b                	jmp    c00143d3 <setupFPU()+0x87>
c0014378:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001437e:	84 c0                	test   al,al
c0014380:	79 19                	jns    c001439b <setupFPU()+0x4f>
c0014382:	83 ec 0c             	sub    esp,0xc
c0014385:	68 58 01 00 00       	push   0x158
c001438a:	e8 fd b4 ff ff       	call   c000f88c <malloc>
c001438f:	89 c3                	mov    ebx,eax
c0014391:	89 04 24             	mov    DWORD PTR [esp],eax
c0014394:	e8 a5 1b 01 00       	call   c0025f3e <SSE::SSE()>
c0014399:	eb 38                	jmp    c00143d3 <setupFPU()+0x87>
c001439b:	a8 20                	test   al,0x20
c001439d:	74 19                	je     c00143b8 <setupFPU()+0x6c>
c001439f:	83 ec 0c             	sub    esp,0xc
c00143a2:	68 58 01 00 00       	push   0x158
c00143a7:	e8 e0 b4 ff ff       	call   c000f88c <malloc>
c00143ac:	89 c3                	mov    ebx,eax
c00143ae:	89 04 24             	mov    DWORD PTR [esp],eax
c00143b1:	e8 f2 1a 01 00       	call   c0025ea8 <MMX::MMX()>
c00143b6:	eb 1b                	jmp    c00143d3 <setupFPU()+0x87>
c00143b8:	a8 10                	test   al,0x10
c00143ba:	74 1c                	je     c00143d8 <setupFPU()+0x8c>
c00143bc:	83 ec 0c             	sub    esp,0xc
c00143bf:	68 58 01 00 00       	push   0x158
c00143c4:	e8 c3 b4 ff ff       	call   c000f88c <malloc>
c00143c9:	89 c3                	mov    ebx,eax
c00143cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00143ce:	e8 f9 1b 01 00       	call   c0025fcc <x87::x87()>
c00143d3:	83 c4 10             	add    esp,0x10
c00143d6:	eb 24                	jmp    c00143fc <setupFPU()+0xb0>
c00143d8:	83 e0 ef             	and    eax,0xffffffef
c00143db:	83 ec 0c             	sub    esp,0xc
c00143de:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00143e4:	68 0c b7 02 c0       	push   0xc002b70c
c00143e9:	e8 7d e5 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c00143ee:	0f 20 c0             	mov    eax,cr0
c00143f1:	83 c8 04             	or     eax,0x4
c00143f4:	0f 22 c0             	mov    cr0,eax
c00143f7:	31 db                	xor    ebx,ebx
c00143f9:	83 c4 10             	add    esp,0x10
c00143fc:	89 d8                	mov    eax,ebx
c00143fe:	83 c4 08             	add    esp,0x8
c0014401:	5b                   	pop    ebx
c0014402:	c3                   	ret    
c0014403:	90                   	nop

c0014404 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014404:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014408:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001440c:	c1 e0 04             	shl    eax,0x4
c001440f:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014413:	8d 50 10             	lea    edx,[eax+0x10]
c0014416:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c001441c:	74 08                	je     c0014426 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c001441e:	83 c0 04             	add    eax,0x4
c0014421:	39 d0                	cmp    eax,edx
c0014423:	75 f1                	jne    c0014416 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014425:	c3                   	ret    
c0014426:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014430:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001443a:	eb e2                	jmp    c001441e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c001443c <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c001443c:	57                   	push   edi
c001443d:	31 c0                	xor    eax,eax
c001443f:	56                   	push   esi
c0014440:	53                   	push   ebx
c0014441:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014445:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014449:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001444d:	89 da                	mov    edx,ebx
c001444f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014453:	c1 e2 04             	shl    edx,0x4
c0014456:	01 ca                	add    edx,ecx
c0014458:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014460:	74 16                	je     c0014478 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014462:	40                   	inc    eax
c0014463:	83 f8 04             	cmp    eax,0x4
c0014466:	75 f0                	jne    c0014458 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014468:	c7 44 24 10 50 b7 02 c0 	mov    DWORD PTR [esp+0x10],0xc002b750
c0014470:	5b                   	pop    ebx
c0014471:	5e                   	pop    esi
c0014472:	5f                   	pop    edi
c0014473:	e9 29 5f 00 00       	jmp    c001a3a1 <Krnl::panic(char const*)>
c0014478:	8d 04 98             	lea    eax,[eax+ebx*4]
c001447b:	8d 04 81             	lea    eax,[ecx+eax*4]
c001447e:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014484:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c001448a:	5b                   	pop    ebx
c001448b:	5e                   	pop    esi
c001448c:	5f                   	pop    edi
c001448d:	c3                   	ret    

c001448e <doubleFault(regs*, void*)>:
c001448e:	55                   	push   ebp
c001448f:	89 e5                	mov    ebp,esp
c0014491:	83 ec 08             	sub    esp,0x8
c0014494:	83 ec 0c             	sub    esp,0xc
c0014497:	68 8b b7 02 c0       	push   0xc002b78b
c001449c:	e8 00 5f 00 00       	call   c001a3a1 <Krnl::panic(char const*)>
c00144a1:	83 c4 10             	add    esp,0x10
c00144a4:	90                   	nop
c00144a5:	c9                   	leave  
c00144a6:	c3                   	ret    
c00144a7:	90                   	nop

c00144a8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00144a8:	56                   	push   esi
c00144a9:	53                   	push   ebx
c00144aa:	50                   	push   eax
c00144ab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00144af:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00144b3:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00144b8:	75 35                	jne    c00144ef <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c00144ba:	8d 43 20             	lea    eax,[ebx+0x20]
c00144bd:	31 d2                	xor    edx,edx
c00144bf:	89 c1                	mov    ecx,eax
c00144c1:	c1 e1 04             	shl    ecx,0x4
c00144c4:	01 f1                	add    ecx,esi
c00144c6:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c00144ce:	74 3e                	je     c001450e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c00144d0:	42                   	inc    edx
c00144d1:	83 fa 04             	cmp    edx,0x4
c00144d4:	75 f0                	jne    c00144c6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c00144d6:	83 ec 0c             	sub    esp,0xc
c00144d9:	68 d0 b7 02 c0       	push   0xc002b7d0
c00144de:	e8 be 5e 00 00       	call   c001a3a1 <Krnl::panic(char const*)>
c00144e3:	83 c4 10             	add    esp,0x10
c00144e6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00144eb:	5a                   	pop    edx
c00144ec:	5b                   	pop    ebx
c00144ed:	5e                   	pop    esi
c00144ee:	c3                   	ret    
c00144ef:	83 ec 0c             	sub    esp,0xc
c00144f2:	56                   	push   esi
c00144f3:	e8 ac fb ff ff       	call   c00140a4 <Device::getName()>
c00144f8:	83 c4 10             	add    esp,0x10
c00144fb:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00144fe:	75 ba                	jne    c00144ba <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014500:	83 fb 0f             	cmp    ebx,0xf
c0014503:	7f 29                	jg     c001452e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014505:	0f b6 9b 20 e3 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd1ce0]
c001450c:	eb ac                	jmp    c00144ba <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001450e:	8d 04 82             	lea    eax,[edx+eax*4]
c0014511:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014515:	8d 04 86             	lea    eax,[esi+eax*4]
c0014518:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001451e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014522:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014528:	89 d8                	mov    eax,ebx
c001452a:	5a                   	pop    edx
c001452b:	5b                   	pop    ebx
c001452c:	5e                   	pop    esi
c001452d:	c3                   	ret    
c001452e:	83 ec 0c             	sub    esp,0xc
c0014531:	68 98 b7 02 c0       	push   0xc002b798
c0014536:	e8 66 5e 00 00       	call   c001a3a1 <Krnl::panic(char const*)>
c001453b:	83 c4 10             	add    esp,0x10
c001453e:	e9 77 ff ff ff       	jmp    c00144ba <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014543:	90                   	nop

c0014544 <InterruptController::clearAllHandlers(int, bool)>:
c0014544:	56                   	push   esi
c0014545:	53                   	push   ebx
c0014546:	52                   	push   edx
c0014547:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001454b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001454f:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014554:	75 61                	jne    c00145b7 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014556:	8d 46 20             	lea    eax,[esi+0x20]
c0014559:	c1 e6 04             	shl    esi,0x4
c001455c:	c1 e0 04             	shl    eax,0x4
c001455f:	01 de                	add    esi,ebx
c0014561:	01 d8                	add    eax,ebx
c0014563:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c001456d:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014577:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014581:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001458b:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014595:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c001459f:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c00145a9:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c00145b3:	58                   	pop    eax
c00145b4:	5b                   	pop    ebx
c00145b5:	5e                   	pop    esi
c00145b6:	c3                   	ret    
c00145b7:	83 ec 0c             	sub    esp,0xc
c00145ba:	53                   	push   ebx
c00145bb:	e8 e4 fa ff ff       	call   c00140a4 <Device::getName()>
c00145c0:	83 c4 10             	add    esp,0x10
c00145c3:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00145c6:	75 8e                	jne    c0014556 <InterruptController::clearAllHandlers(int, bool)+0x12>
c00145c8:	83 fe 0f             	cmp    esi,0xf
c00145cb:	7f 09                	jg     c00145d6 <InterruptController::clearAllHandlers(int, bool)+0x92>
c00145cd:	0f b6 b6 20 e3 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd1ce0]
c00145d4:	eb 80                	jmp    c0014556 <InterruptController::clearAllHandlers(int, bool)+0x12>
c00145d6:	83 ec 0c             	sub    esp,0xc
c00145d9:	68 0c b8 02 c0       	push   0xc002b80c
c00145de:	e8 be 5d 00 00       	call   c001a3a1 <Krnl::panic(char const*)>
c00145e3:	83 c4 10             	add    esp,0x10
c00145e6:	e9 6b ff ff ff       	jmp    c0014556 <InterruptController::clearAllHandlers(int, bool)+0x12>
c00145eb:	90                   	nop

c00145ec <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c00145ec:	56                   	push   esi
c00145ed:	53                   	push   ebx
c00145ee:	52                   	push   edx
c00145ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00145f3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00145f7:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00145fc:	75 3a                	jne    c0014638 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c00145fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014602:	8d 50 20             	lea    edx,[eax+0x20]
c0014605:	c1 e2 04             	shl    edx,0x4
c0014608:	8d 04 16             	lea    eax,[esi+edx*1]
c001460b:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c001460f:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014615:	74 0b                	je     c0014622 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014617:	83 c0 04             	add    eax,0x4
c001461a:	39 d0                	cmp    eax,edx
c001461c:	75 f1                	jne    c001460f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c001461e:	58                   	pop    eax
c001461f:	5b                   	pop    ebx
c0014620:	5e                   	pop    esi
c0014621:	c3                   	ret    
c0014622:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001462c:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014636:	eb df                	jmp    c0014617 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014638:	83 ec 0c             	sub    esp,0xc
c001463b:	56                   	push   esi
c001463c:	e8 63 fa ff ff       	call   c00140a4 <Device::getName()>
c0014641:	83 c4 10             	add    esp,0x10
c0014644:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014647:	75 b5                	jne    c00145fe <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014649:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001464e:	7f 11                	jg     c0014661 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014650:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014654:	0f b6 80 20 e3 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd1ce0]
c001465b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001465f:	eb 9d                	jmp    c00145fe <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014661:	83 ec 0c             	sub    esp,0xc
c0014664:	68 0c b8 02 c0       	push   0xc002b80c
c0014669:	e8 33 5d 00 00       	call   c001a3a1 <Krnl::panic(char const*)>
c001466e:	83 c4 10             	add    esp,0x10
c0014671:	eb 8b                	jmp    c00145fe <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014673 <nmiHandler(regs*, void*)>:
c0014673:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c0014678:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001467c:	e9 55 a9 ff ff       	jmp    c000efd6 <Computer::handleNMI()>

c0014681 <int_handler>:
c0014681:	55                   	push   ebp
c0014682:	57                   	push   edi
c0014683:	56                   	push   esi
c0014684:	53                   	push   ebx
c0014685:	83 ec 0c             	sub    esp,0xc
c0014688:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001468c:	80 3d 04 1c 03 c0 00 	cmp    BYTE PTR ds:0xc0031c04,0x0
c0014693:	74 0b                	je     c00146a0 <int_handler+0x1f>
c0014695:	fa                   	cli    
c0014696:	f4                   	hlt    
c0014697:	80 3d 04 1c 03 c0 00 	cmp    BYTE PTR ds:0xc0031c04,0x0
c001469e:	75 f5                	jne    c0014695 <int_handler+0x14>
c00146a0:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c00146a5:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c00146a8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00146ae:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c00146b4:	8d 43 e0             	lea    eax,[ebx-0x20]
c00146b7:	83 f8 17             	cmp    eax,0x17
c00146ba:	77 13                	ja     c00146cf <int_handler+0x4e>
c00146bc:	83 ec 08             	sub    esp,0x8
c00146bf:	8b 17                	mov    edx,DWORD PTR [edi]
c00146c1:	8d 43 e0             	lea    eax,[ebx-0x20]
c00146c4:	0f b6 c0             	movzx  eax,al
c00146c7:	50                   	push   eax
c00146c8:	57                   	push   edi
c00146c9:	ff 52 38             	call   DWORD PTR [edx+0x38]
c00146cc:	83 c4 10             	add    esp,0x10
c00146cf:	83 c3 15             	add    ebx,0x15
c00146d2:	c1 e3 04             	shl    ebx,0x4
c00146d5:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c00146d9:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c00146e0:	31 db                	xor    ebx,ebx
c00146e2:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c00146e6:	85 c0                	test   eax,eax
c00146e8:	74 13                	je     c00146fd <int_handler+0x7c>
c00146ea:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00146ed:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c00146f1:	74 1c                	je     c001470f <int_handler+0x8e>
c00146f3:	83 ec 08             	sub    esp,0x8
c00146f6:	52                   	push   edx
c00146f7:	56                   	push   esi
c00146f8:	ff d0                	call   eax
c00146fa:	83 c4 10             	add    esp,0x10
c00146fd:	43                   	inc    ebx
c00146fe:	83 fb 04             	cmp    ebx,0x4
c0014701:	75 df                	jne    c00146e2 <int_handler+0x61>
c0014703:	83 c4 0c             	add    esp,0xc
c0014706:	31 c0                	xor    eax,eax
c0014708:	5b                   	pop    ebx
c0014709:	31 d2                	xor    edx,edx
c001470b:	5e                   	pop    esi
c001470c:	5f                   	pop    edi
c001470d:	5d                   	pop    ebp
c001470e:	c3                   	ret    
c001470f:	83 ec 08             	sub    esp,0x8
c0014712:	52                   	push   edx
c0014713:	56                   	push   esi
c0014714:	ff d0                	call   eax
c0014716:	83 c4 10             	add    esp,0x10
c0014719:	83 c4 0c             	add    esp,0xc
c001471c:	5b                   	pop    ebx
c001471d:	5e                   	pop    esi
c001471e:	5f                   	pop    edi
c001471f:	5d                   	pop    ebp
c0014720:	c3                   	ret    
c0014721:	90                   	nop

c0014722 <InterruptController::InterruptController(char const*)>:
c0014722:	83 ec 1c             	sub    esp,0x1c
c0014725:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014729:	83 ec 08             	sub    esp,0x8
c001472c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014730:	50                   	push   eax
c0014731:	e8 72 f8 ff ff       	call   c0013fa8 <Device::Device(char const*)>
c0014736:	83 c4 10             	add    esp,0x10
c0014739:	ba cc ba 02 c0       	mov    edx,0xc002bacc
c001473e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014742:	89 10                	mov    DWORD PTR [eax],edx
c0014744:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014748:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014752:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001475a:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014762:	7f 5e                	jg     c00147c2 <InterruptController::InterruptController(char const*)+0xa0>
c0014764:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001476c:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014771:	7f 49                	jg     c00147bc <InterruptController::InterruptController(char const*)+0x9a>
c0014773:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014777:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001477b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014782:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014786:	01 ca                	add    edx,ecx
c0014788:	83 c2 54             	add    edx,0x54
c001478b:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014793:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014797:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001479b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00147a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00147a6:	01 ca                	add    edx,ecx
c00147a8:	81 c2 54 04 00 00    	add    edx,0x454
c00147ae:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00147b6:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00147ba:	eb b0                	jmp    c001476c <InterruptController::InterruptController(char const*)+0x4a>
c00147bc:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00147c0:	eb 98                	jmp    c001475a <InterruptController::InterruptController(char const*)+0x38>
c00147c2:	90                   	nop
c00147c3:	83 c4 1c             	add    esp,0x1c
c00147c6:	c3                   	ret    
c00147c7:	90                   	nop

c00147c8 <InterruptController::~InterruptController()>:
c00147c8:	83 ec 0c             	sub    esp,0xc
c00147cb:	ba cc ba 02 c0       	mov    edx,0xc002bacc
c00147d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147d4:	89 10                	mov    DWORD PTR [eax],edx
c00147d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147da:	83 ec 0c             	sub    esp,0xc
c00147dd:	50                   	push   eax
c00147de:	e8 8f f4 ff ff       	call   c0013c72 <Device::~Device()>
c00147e3:	83 c4 10             	add    esp,0x10
c00147e6:	90                   	nop
c00147e7:	83 c4 0c             	add    esp,0xc
c00147ea:	c3                   	ret    
c00147eb:	90                   	nop

c00147ec <InterruptController::~InterruptController()>:
c00147ec:	83 ec 0c             	sub    esp,0xc
c00147ef:	83 ec 0c             	sub    esp,0xc
c00147f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147f6:	e8 cd ff ff ff       	call   c00147c8 <InterruptController::~InterruptController()>
c00147fb:	83 c4 10             	add    esp,0x10
c00147fe:	83 ec 08             	sub    esp,0x8
c0014801:	68 58 21 00 00       	push   0x2158
c0014806:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001480a:	e8 7c e0 ff ff       	call   c001288b <operator delete(void*, unsigned long)>
c001480f:	83 c4 10             	add    esp,0x10
c0014812:	83 c4 0c             	add    esp,0xc
c0014815:	c3                   	ret    

c0014816 <displayDebugInfo(regs*)>:
c0014816:	55                   	push   ebp
c0014817:	57                   	push   edi
c0014818:	56                   	push   esi
c0014819:	53                   	push   ebx
c001481a:	83 ec 24             	sub    esp,0x24
c001481d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014821:	0f 20 c2             	mov    edx,cr0
c0014824:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014828:	0f 20 d7             	mov    edi,cr2
c001482b:	0f 20 de             	mov    esi,cr3
c001482e:	0f 20 e5             	mov    ebp,cr4
c0014831:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014834:	68 46 b8 02 c0       	push   0xc002b846
c0014839:	e8 2d e1 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001483e:	59                   	pop    ecx
c001483f:	58                   	pop    eax
c0014840:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014843:	68 51 b8 02 c0       	push   0xc002b851
c0014848:	e8 1e e1 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001484d:	58                   	pop    eax
c001484e:	5a                   	pop    edx
c001484f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014852:	68 5c b8 02 c0       	push   0xc002b85c
c0014857:	e8 0f e1 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001485c:	59                   	pop    ecx
c001485d:	58                   	pop    eax
c001485e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014861:	68 67 b8 02 c0       	push   0xc002b867
c0014866:	e8 00 e1 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001486b:	58                   	pop    eax
c001486c:	5a                   	pop    edx
c001486d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014870:	68 72 b8 02 c0       	push   0xc002b872
c0014875:	e8 f1 e0 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001487a:	59                   	pop    ecx
c001487b:	58                   	pop    eax
c001487c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c001487f:	68 7d b8 02 c0       	push   0xc002b87d
c0014884:	e8 e2 e0 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0014889:	58                   	pop    eax
c001488a:	5a                   	pop    edx
c001488b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001488e:	68 88 b8 02 c0       	push   0xc002b888
c0014893:	e8 d3 e0 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0014898:	59                   	pop    ecx
c0014899:	58                   	pop    eax
c001489a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001489d:	68 93 b8 02 c0       	push   0xc002b893
c00148a2:	e8 c4 e0 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c00148a7:	58                   	pop    eax
c00148a8:	5a                   	pop    edx
c00148a9:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00148ac:	68 9e b8 02 c0       	push   0xc002b89e
c00148b1:	e8 b5 e0 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c00148b6:	59                   	pop    ecx
c00148b7:	58                   	pop    eax
c00148b8:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00148bb:	68 ad b8 02 c0       	push   0xc002b8ad
c00148c0:	e8 a6 e0 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c00148c5:	58                   	pop    eax
c00148c6:	5a                   	pop    edx
c00148c7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00148ca:	68 b8 b8 02 c0       	push   0xc002b8b8
c00148cf:	e8 97 e0 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c00148d4:	59                   	pop    ecx
c00148d5:	58                   	pop    eax
c00148d6:	57                   	push   edi
c00148d7:	68 c3 b8 02 c0       	push   0xc002b8c3
c00148dc:	e8 8a e0 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c00148e1:	58                   	pop    eax
c00148e2:	5a                   	pop    edx
c00148e3:	56                   	push   esi
c00148e4:	68 ce b8 02 c0       	push   0xc002b8ce
c00148e9:	e8 7d e0 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c00148ee:	59                   	pop    ecx
c00148ef:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c00148f4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148fa:	e8 8f be ff ff       	call   c001078e <setActiveTerminal(VgaText*)>
c00148ff:	58                   	pop    eax
c0014900:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014903:	5a                   	pop    edx
c0014904:	c1 e0 05             	shl    eax,0x5
c0014907:	05 80 e0 02 c0       	add    eax,0xc002e080
c001490c:	50                   	push   eax
c001490d:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014912:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014918:	e8 43 c2 ff ff       	call   c0010b60 <VgaText::puts(char const*)>
c001491d:	59                   	pop    ecx
c001491e:	58                   	pop    eax
c001491f:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014924:	68 d9 b8 02 c0       	push   0xc002b8d9
c0014929:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001492f:	e8 2c c2 ff ff       	call   c0010b60 <VgaText::puts(char const*)>
c0014934:	58                   	pop    eax
c0014935:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001493a:	5a                   	pop    edx
c001493b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001493e:	83 c0 0c             	add    eax,0xc
c0014941:	50                   	push   eax
c0014942:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014947:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001494d:	e8 0e c2 ff ff       	call   c0010b60 <VgaText::puts(char const*)>
c0014952:	59                   	pop    ecx
c0014953:	58                   	pop    eax
c0014954:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014959:	68 e2 b8 02 c0       	push   0xc002b8e2
c001495e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014964:	e8 f7 c1 ff ff       	call   c0010b60 <VgaText::puts(char const*)>
c0014969:	58                   	pop    eax
c001496a:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001496f:	5a                   	pop    edx
c0014970:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014973:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014979:	e8 9c c1 ff ff       	call   c0010b1a <VgaText::putx(unsigned int)>
c001497e:	59                   	pop    ecx
c001497f:	58                   	pop    eax
c0014980:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014985:	68 ea b8 02 c0       	push   0xc002b8ea
c001498a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014990:	e8 cb c1 ff ff       	call   c0010b60 <VgaText::puts(char const*)>
c0014995:	58                   	pop    eax
c0014996:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001499b:	5a                   	pop    edx
c001499c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001499f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149a5:	e8 70 c1 ff ff       	call   c0010b1a <VgaText::putx(unsigned int)>
c00149aa:	59                   	pop    ecx
c00149ab:	58                   	pop    eax
c00149ac:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c00149b1:	68 f2 b8 02 c0       	push   0xc002b8f2
c00149b6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149bc:	e8 9f c1 ff ff       	call   c0010b60 <VgaText::puts(char const*)>
c00149c1:	58                   	pop    eax
c00149c2:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c00149c7:	5a                   	pop    edx
c00149c8:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00149cb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149d1:	e8 44 c1 ff ff       	call   c0010b1a <VgaText::putx(unsigned int)>
c00149d6:	59                   	pop    ecx
c00149d7:	58                   	pop    eax
c00149d8:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c00149dd:	68 fa b8 02 c0       	push   0xc002b8fa
c00149e2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149e8:	e8 73 c1 ff ff       	call   c0010b60 <VgaText::puts(char const*)>
c00149ed:	58                   	pop    eax
c00149ee:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c00149f3:	5a                   	pop    edx
c00149f4:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00149f7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149fd:	e8 18 c1 ff ff       	call   c0010b1a <VgaText::putx(unsigned int)>
c0014a02:	59                   	pop    ecx
c0014a03:	58                   	pop    eax
c0014a04:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014a09:	68 02 b9 02 c0       	push   0xc002b902
c0014a0e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a14:	e8 47 c1 ff ff       	call   c0010b60 <VgaText::puts(char const*)>
c0014a19:	58                   	pop    eax
c0014a1a:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014a1f:	5a                   	pop    edx
c0014a20:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014a23:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a29:	e8 ec c0 ff ff       	call   c0010b1a <VgaText::putx(unsigned int)>
c0014a2e:	59                   	pop    ecx
c0014a2f:	58                   	pop    eax
c0014a30:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014a35:	68 0a b9 02 c0       	push   0xc002b90a
c0014a3a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a40:	e8 1b c1 ff ff       	call   c0010b60 <VgaText::puts(char const*)>
c0014a45:	58                   	pop    eax
c0014a46:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014a4b:	5a                   	pop    edx
c0014a4c:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014a4f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a55:	e8 c0 c0 ff ff       	call   c0010b1a <VgaText::putx(unsigned int)>
c0014a5a:	59                   	pop    ecx
c0014a5b:	58                   	pop    eax
c0014a5c:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014a61:	68 12 b9 02 c0       	push   0xc002b912
c0014a66:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a6c:	e8 ef c0 ff ff       	call   c0010b60 <VgaText::puts(char const*)>
c0014a71:	58                   	pop    eax
c0014a72:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014a77:	5a                   	pop    edx
c0014a78:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014a7c:	52                   	push   edx
c0014a7d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a83:	e8 92 c0 ff ff       	call   c0010b1a <VgaText::putx(unsigned int)>
c0014a88:	59                   	pop    ecx
c0014a89:	58                   	pop    eax
c0014a8a:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014a8f:	68 1b b9 02 c0       	push   0xc002b91b
c0014a94:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a9a:	e8 c1 c0 ff ff       	call   c0010b60 <VgaText::puts(char const*)>
c0014a9f:	58                   	pop    eax
c0014aa0:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014aa5:	5a                   	pop    edx
c0014aa6:	57                   	push   edi
c0014aa7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014aad:	e8 68 c0 ff ff       	call   c0010b1a <VgaText::putx(unsigned int)>
c0014ab2:	59                   	pop    ecx
c0014ab3:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014ab8:	5f                   	pop    edi
c0014ab9:	68 23 b9 02 c0       	push   0xc002b923
c0014abe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ac4:	e8 97 c0 ff ff       	call   c0010b60 <VgaText::puts(char const*)>
c0014ac9:	58                   	pop    eax
c0014aca:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014acf:	5a                   	pop    edx
c0014ad0:	56                   	push   esi
c0014ad1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ad7:	e8 3e c0 ff ff       	call   c0010b1a <VgaText::putx(unsigned int)>
c0014adc:	59                   	pop    ecx
c0014add:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014ae2:	5e                   	pop    esi
c0014ae3:	68 2b b9 02 c0       	push   0xc002b92b
c0014ae8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014aee:	e8 6d c0 ff ff       	call   c0010b60 <VgaText::puts(char const*)>
c0014af3:	5f                   	pop    edi
c0014af4:	58                   	pop    eax
c0014af5:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014afa:	55                   	push   ebp
c0014afb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b01:	e8 14 c0 ff ff       	call   c0010b1a <VgaText::putx(unsigned int)>
c0014b06:	58                   	pop    eax
c0014b07:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014b0c:	5a                   	pop    edx
c0014b0d:	68 33 b9 02 c0       	push   0xc002b933
c0014b12:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b18:	e8 43 c0 ff ff       	call   c0010b60 <VgaText::puts(char const*)>
c0014b1d:	0f 21 c0             	mov    eax,db0
c0014b20:	59                   	pop    ecx
c0014b21:	5e                   	pop    esi
c0014b22:	50                   	push   eax
c0014b23:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014b28:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b2e:	e8 e7 bf ff ff       	call   c0010b1a <VgaText::putx(unsigned int)>
c0014b33:	5f                   	pop    edi
c0014b34:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014b39:	5d                   	pop    ebp
c0014b3a:	68 3c b9 02 c0       	push   0xc002b93c
c0014b3f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b45:	e8 16 c0 ff ff       	call   c0010b60 <VgaText::puts(char const*)>
c0014b4a:	0f 21 c8             	mov    eax,db1
c0014b4d:	5a                   	pop    edx
c0014b4e:	59                   	pop    ecx
c0014b4f:	50                   	push   eax
c0014b50:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014b55:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b5b:	e8 ba bf ff ff       	call   c0010b1a <VgaText::putx(unsigned int)>
c0014b60:	5e                   	pop    esi
c0014b61:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014b66:	5f                   	pop    edi
c0014b67:	68 44 b9 02 c0       	push   0xc002b944
c0014b6c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b72:	e8 e9 bf ff ff       	call   c0010b60 <VgaText::puts(char const*)>
c0014b77:	0f 21 d0             	mov    eax,db2
c0014b7a:	5d                   	pop    ebp
c0014b7b:	5a                   	pop    edx
c0014b7c:	50                   	push   eax
c0014b7d:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014b82:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b88:	e8 8d bf ff ff       	call   c0010b1a <VgaText::putx(unsigned int)>
c0014b8d:	59                   	pop    ecx
c0014b8e:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014b93:	5e                   	pop    esi
c0014b94:	68 4c b9 02 c0       	push   0xc002b94c
c0014b99:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b9f:	e8 bc bf ff ff       	call   c0010b60 <VgaText::puts(char const*)>
c0014ba4:	0f 21 d8             	mov    eax,db3
c0014ba7:	5f                   	pop    edi
c0014ba8:	5d                   	pop    ebp
c0014ba9:	50                   	push   eax
c0014baa:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014baf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bb5:	e8 60 bf ff ff       	call   c0010b1a <VgaText::putx(unsigned int)>
c0014bba:	58                   	pop    eax
c0014bbb:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014bc0:	5a                   	pop    edx
c0014bc1:	68 54 b9 02 c0       	push   0xc002b954
c0014bc6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bcc:	e8 8f bf ff ff       	call   c0010b60 <VgaText::puts(char const*)>
c0014bd1:	0f 21 f0             	mov    eax,db6
c0014bd4:	59                   	pop    ecx
c0014bd5:	5e                   	pop    esi
c0014bd6:	50                   	push   eax
c0014bd7:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014bdc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014be2:	e8 33 bf ff ff       	call   c0010b1a <VgaText::putx(unsigned int)>
c0014be7:	5f                   	pop    edi
c0014be8:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014bed:	5d                   	pop    ebp
c0014bee:	68 5c b9 02 c0       	push   0xc002b95c
c0014bf3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bf9:	e8 62 bf ff ff       	call   c0010b60 <VgaText::puts(char const*)>
c0014bfe:	0f 21 f8             	mov    eax,db7
c0014c01:	5a                   	pop    edx
c0014c02:	59                   	pop    ecx
c0014c03:	50                   	push   eax
c0014c04:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014c09:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c0f:	e8 06 bf ff ff       	call   c0010b1a <VgaText::putx(unsigned int)>
c0014c14:	5e                   	pop    esi
c0014c15:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014c18:	e8 07 8b 00 00       	call   c001d724 <Thr::getDriverNameFromAddress(unsigned long)>
c0014c1d:	83 c4 10             	add    esp,0x10
c0014c20:	85 c0                	test   eax,eax
c0014c22:	74 7d                	je     c0014ca1 <displayDebugInfo(regs*)+0x48b>
c0014c24:	89 c6                	mov    esi,eax
c0014c26:	50                   	push   eax
c0014c27:	50                   	push   eax
c0014c28:	56                   	push   esi
c0014c29:	68 64 b9 02 c0       	push   0xc002b964
c0014c2e:	e8 38 dd ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0014c33:	5a                   	pop    edx
c0014c34:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014c39:	59                   	pop    ecx
c0014c3a:	68 72 b9 02 c0       	push   0xc002b972
c0014c3f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c45:	e8 16 bf ff ff       	call   c0010b60 <VgaText::puts(char const*)>
c0014c4a:	5f                   	pop    edi
c0014c4b:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014c50:	5d                   	pop    ebp
c0014c51:	56                   	push   esi
c0014c52:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c58:	e8 03 bf ff ff       	call   c0010b60 <VgaText::puts(char const*)>
c0014c5d:	58                   	pop    eax
c0014c5e:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014c63:	5a                   	pop    edx
c0014c64:	68 7e b9 02 c0       	push   0xc002b97e
c0014c69:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c6f:	e8 ec be ff ff       	call   c0010b60 <VgaText::puts(char const*)>
c0014c74:	59                   	pop    ecx
c0014c75:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014c7a:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0014c80:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014c83:	e8 d3 8a 00 00       	call   c001d75b <Thr::getDriverOffsetFromAddress(unsigned long)>
c0014c88:	5b                   	pop    ebx
c0014c89:	5d                   	pop    ebp
c0014c8a:	50                   	push   eax
c0014c8b:	57                   	push   edi
c0014c8c:	e8 89 be ff ff       	call   c0010b1a <VgaText::putx(unsigned int)>
c0014c91:	58                   	pop    eax
c0014c92:	5a                   	pop    edx
c0014c93:	56                   	push   esi
c0014c94:	68 8a b9 02 c0       	push   0xc002b98a
c0014c99:	e8 cd dc ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0014c9e:	83 c4 10             	add    esp,0x10
c0014ca1:	fa                   	cli    
c0014ca2:	f4                   	hlt    
c0014ca3:	eb fe                	jmp    c0014ca3 <displayDebugInfo(regs*)+0x48d>

c0014ca5 <x87EmulHandler(regs*, void*)>:
c0014ca5:	83 ec 0c             	sub    esp,0xc
c0014ca8:	0f 20 c2             	mov    edx,cr0
c0014cab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014cb0:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0014cb4:	75 4b                	jne    c0014d01 <x87EmulHandler(regs*, void*)+0x5c>
c0014cb6:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c0014cbb:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c0014cc1:	85 c0                	test   eax,eax
c0014cc3:	74 05                	je     c0014cca <x87EmulHandler(regs*, void*)+0x25>
c0014cc5:	83 e2 08             	and    edx,0x8
c0014cc8:	75 17                	jne    c0014ce1 <x87EmulHandler(regs*, void*)+0x3c>
c0014cca:	83 ec 0c             	sub    esp,0xc
c0014ccd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014cd1:	e8 45 af 00 00       	call   c001fc1b <Vm::x87Handler(regs*)>
c0014cd6:	83 c4 10             	add    esp,0x10
c0014cd9:	84 c0                	test   al,al
c0014cdb:	74 24                	je     c0014d01 <x87EmulHandler(regs*, void*)+0x5c>
c0014cdd:	83 c4 0c             	add    esp,0xc
c0014ce0:	c3                   	ret    
c0014ce1:	83 ec 0c             	sub    esp,0xc
c0014ce4:	68 b0 b9 02 c0       	push   0xc002b9b0
c0014ce9:	e8 7d dc ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0014cee:	0f 06                	clts   
c0014cf0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014cf5:	83 c4 10             	add    esp,0x10
c0014cf8:	a3 48 f2 02 c0       	mov    ds:0xc002f248,eax
c0014cfd:	83 c4 0c             	add    esp,0xc
c0014d00:	c3                   	ret    
c0014d01:	83 ec 0c             	sub    esp,0xc
c0014d04:	68 9a b9 02 c0       	push   0xc002b99a
c0014d09:	e8 5d dc ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0014d0e:	5a                   	pop    edx
c0014d0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d13:	e8 fe fa ff ff       	call   c0014816 <displayDebugInfo(regs*)>

c0014d18 <gpFault(regs*, void*)>:
c0014d18:	53                   	push   ebx
c0014d19:	83 ec 14             	sub    esp,0x14
c0014d1c:	c7 05 44 f2 02 c0 f4 f0 01 c0 	mov    DWORD PTR ds:0xc002f244,0xc001f0f4
c0014d26:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014d2a:	53                   	push   ebx
c0014d2b:	e8 c4 a3 00 00       	call   c001f0f4 <Vm::faultHandler(regs*)>
c0014d30:	83 c4 10             	add    esp,0x10
c0014d33:	84 c0                	test   al,al
c0014d35:	74 05                	je     c0014d3c <gpFault(regs*, void*)+0x24>
c0014d37:	83 c4 08             	add    esp,0x8
c0014d3a:	5b                   	pop    ebx
c0014d3b:	c3                   	ret    
c0014d3c:	83 ec 0c             	sub    esp,0xc
c0014d3f:	68 bd b9 02 c0       	push   0xc002b9bd
c0014d44:	e8 22 dc ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0014d49:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014d4c:	e8 c5 fa ff ff       	call   c0014816 <displayDebugInfo(regs*)>

c0014d51 <pgFault(regs*, void*)>:
c0014d51:	83 ec 18             	sub    esp,0x18
c0014d54:	68 d8 b9 02 c0       	push   0xc002b9d8
c0014d59:	e8 0d dc ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0014d5e:	58                   	pop    eax
c0014d5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d63:	e8 ae fa ff ff       	call   c0014816 <displayDebugInfo(regs*)>

c0014d68 <otherISRHandler(regs*, void*)>:
c0014d68:	53                   	push   ebx
c0014d69:	83 ec 0c             	sub    esp,0xc
c0014d6c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014d70:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014d73:	50                   	push   eax
c0014d74:	50                   	push   eax
c0014d75:	68 e5 b9 02 c0       	push   0xc002b9e5
c0014d7a:	e8 ec db ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0014d7f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014d82:	e8 8f fa ff ff       	call   c0014816 <displayDebugInfo(regs*)>

c0014d87 <opcodeFault(regs*, void*)>:
c0014d87:	55                   	push   ebp
c0014d88:	89 e5                	mov    ebp,esp
c0014d8a:	56                   	push   esi
c0014d8b:	53                   	push   ebx
c0014d8c:	83 ec 40             	sub    esp,0x40
c0014d8f:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c0014d94:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014d9a:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014da0:	84 c0                	test   al,al
c0014da2:	74 24                	je     c0014dc8 <opcodeFault(regs*, void*)+0x41>
c0014da4:	83 ec 0c             	sub    esp,0xc
c0014da7:	68 04 ba 02 c0       	push   0xc002ba04
c0014dac:	e8 ba db ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0014db1:	83 c4 10             	add    esp,0x10
c0014db4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014db7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014dba:	8d 50 19             	lea    edx,[eax+0x19]
c0014dbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dc0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014dc3:	e9 d5 05 00 00       	jmp    c001539d <opcodeFault(regs*, void*)+0x616>
c0014dc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dcb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014dce:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014dd1:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014dd5:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014dd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ddc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ddf:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014de2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014de5:	8a 00                	mov    al,BYTE PTR [eax]
c0014de7:	3c f0                	cmp    al,0xf0
c0014de9:	75 17                	jne    c0014e02 <opcodeFault(regs*, void*)+0x7b>
c0014deb:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014dee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014df1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014df4:	8d 50 01             	lea    edx,[eax+0x1]
c0014df7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dfa:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014dfd:	e9 da 00 00 00       	jmp    c0014edc <opcodeFault(regs*, void*)+0x155>
c0014e02:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e05:	8a 00                	mov    al,BYTE PTR [eax]
c0014e07:	3c f2                	cmp    al,0xf2
c0014e09:	74 09                	je     c0014e14 <opcodeFault(regs*, void*)+0x8d>
c0014e0b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e0e:	8a 00                	mov    al,BYTE PTR [eax]
c0014e10:	3c f3                	cmp    al,0xf3
c0014e12:	75 1b                	jne    c0014e2f <opcodeFault(regs*, void*)+0xa8>
c0014e14:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014e18:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014e1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e1e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e21:	8d 50 01             	lea    edx,[eax+0x1]
c0014e24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e27:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e2a:	e9 ad 00 00 00       	jmp    c0014edc <opcodeFault(regs*, void*)+0x155>
c0014e2f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e32:	8a 00                	mov    al,BYTE PTR [eax]
c0014e34:	3c 66                	cmp    al,0x66
c0014e36:	75 1f                	jne    c0014e57 <opcodeFault(regs*, void*)+0xd0>
c0014e38:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014e3c:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014e40:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014e43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e46:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e49:	8d 50 01             	lea    edx,[eax+0x1]
c0014e4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e4f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e52:	e9 85 00 00 00       	jmp    c0014edc <opcodeFault(regs*, void*)+0x155>
c0014e57:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e5a:	8a 00                	mov    al,BYTE PTR [eax]
c0014e5c:	3c 67                	cmp    al,0x67
c0014e5e:	75 18                	jne    c0014e78 <opcodeFault(regs*, void*)+0xf1>
c0014e60:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014e64:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014e67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e6a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e6d:	8d 50 01             	lea    edx,[eax+0x1]
c0014e70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e73:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e76:	eb 64                	jmp    c0014edc <opcodeFault(regs*, void*)+0x155>
c0014e78:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e7b:	8a 00                	mov    al,BYTE PTR [eax]
c0014e7d:	3c 2e                	cmp    al,0x2e
c0014e7f:	74 09                	je     c0014e8a <opcodeFault(regs*, void*)+0x103>
c0014e81:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e84:	8a 00                	mov    al,BYTE PTR [eax]
c0014e86:	3c 3e                	cmp    al,0x3e
c0014e88:	75 18                	jne    c0014ea2 <opcodeFault(regs*, void*)+0x11b>
c0014e8a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014e8e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014e91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e94:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e97:	8d 50 01             	lea    edx,[eax+0x1]
c0014e9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e9d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ea0:	eb 3a                	jmp    c0014edc <opcodeFault(regs*, void*)+0x155>
c0014ea2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ea5:	8a 00                	mov    al,BYTE PTR [eax]
c0014ea7:	3c 36                	cmp    al,0x36
c0014ea9:	74 1b                	je     c0014ec6 <opcodeFault(regs*, void*)+0x13f>
c0014eab:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014eae:	8a 00                	mov    al,BYTE PTR [eax]
c0014eb0:	3c 26                	cmp    al,0x26
c0014eb2:	74 12                	je     c0014ec6 <opcodeFault(regs*, void*)+0x13f>
c0014eb4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014eb7:	8a 00                	mov    al,BYTE PTR [eax]
c0014eb9:	3c 64                	cmp    al,0x64
c0014ebb:	74 09                	je     c0014ec6 <opcodeFault(regs*, void*)+0x13f>
c0014ebd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ec0:	8a 00                	mov    al,BYTE PTR [eax]
c0014ec2:	3c 65                	cmp    al,0x65
c0014ec4:	75 16                	jne    c0014edc <opcodeFault(regs*, void*)+0x155>
c0014ec6:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014eca:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ecd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ed0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ed3:	8d 50 01             	lea    edx,[eax+0x1]
c0014ed6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ed9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014edc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014edf:	8a 00                	mov    al,BYTE PTR [eax]
c0014ee1:	3c 0f                	cmp    al,0xf
c0014ee3:	0f 85 ad 00 00 00    	jne    c0014f96 <opcodeFault(regs*, void*)+0x20f>
c0014ee9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014eec:	40                   	inc    eax
c0014eed:	8a 00                	mov    al,BYTE PTR [eax]
c0014eef:	3c c2                	cmp    al,0xc2
c0014ef1:	74 0e                	je     c0014f01 <opcodeFault(regs*, void*)+0x17a>
c0014ef3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ef6:	40                   	inc    eax
c0014ef7:	8a 00                	mov    al,BYTE PTR [eax]
c0014ef9:	3c c3                	cmp    al,0xc3
c0014efb:	0f 85 95 00 00 00    	jne    c0014f96 <opcodeFault(regs*, void*)+0x20f>
c0014f01:	83 ec 0c             	sub    esp,0xc
c0014f04:	68 27 ba 02 c0       	push   0xc002ba27
c0014f09:	e8 5d da ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0014f0e:	83 c4 10             	add    esp,0x10
c0014f11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f14:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f17:	8d 50 01             	lea    edx,[eax+0x1]
c0014f1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f1d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f20:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014f23:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f26:	8a 00                	mov    al,BYTE PTR [eax]
c0014f28:	8d 50 fe             	lea    edx,[eax-0x2]
c0014f2b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f2e:	88 10                	mov    BYTE PTR [eax],dl
c0014f30:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014f33:	50                   	push   eax
c0014f34:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014f37:	50                   	push   eax
c0014f38:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014f3b:	50                   	push   eax
c0014f3c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014f3f:	e8 2a 4b 00 00       	call   c0019a6e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014f44:	83 c4 10             	add    esp,0x10
c0014f47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f4a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f4d:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014f50:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014f53:	01 d0                	add    eax,edx
c0014f55:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014f58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f5b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f5e:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014f61:	48                   	dec    eax
c0014f62:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014f65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f68:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014f6b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f71:	83 ec 04             	sub    esp,0x4
c0014f74:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014f77:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014f7a:	50                   	push   eax
c0014f7b:	e8 34 b2 fe ff       	call   c00001b4 <voodooXADD>
c0014f80:	83 c4 10             	add    esp,0x10
c0014f83:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014f86:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014f89:	01 c2                	add    edx,eax
c0014f8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f8e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f91:	e9 07 04 00 00       	jmp    c001539d <opcodeFault(regs*, void*)+0x616>
c0014f96:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f99:	8a 00                	mov    al,BYTE PTR [eax]
c0014f9b:	3c 0f                	cmp    al,0xf
c0014f9d:	0f 85 8b 01 00 00    	jne    c001512e <opcodeFault(regs*, void*)+0x3a7>
c0014fa3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fa6:	40                   	inc    eax
c0014fa7:	8a 00                	mov    al,BYTE PTR [eax]
c0014fa9:	3c c7                	cmp    al,0xc7
c0014fab:	0f 86 7d 01 00 00    	jbe    c001512e <opcodeFault(regs*, void*)+0x3a7>
c0014fb1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fb4:	40                   	inc    eax
c0014fb5:	8a 00                	mov    al,BYTE PTR [eax]
c0014fb7:	3c cf                	cmp    al,0xcf
c0014fb9:	0f 87 6f 01 00 00    	ja     c001512e <opcodeFault(regs*, void*)+0x3a7>
c0014fbf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fc2:	40                   	inc    eax
c0014fc3:	8a 00                	mov    al,BYTE PTR [eax]
c0014fc5:	83 c0 38             	add    eax,0x38
c0014fc8:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014fcb:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014fcf:	75 0b                	jne    c0014fdc <opcodeFault(regs*, void*)+0x255>
c0014fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fd4:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014fd7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014fda:	eb 75                	jmp    c0015051 <opcodeFault(regs*, void*)+0x2ca>
c0014fdc:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014fe0:	75 0b                	jne    c0014fed <opcodeFault(regs*, void*)+0x266>
c0014fe2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fe5:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014fe8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014feb:	eb 64                	jmp    c0015051 <opcodeFault(regs*, void*)+0x2ca>
c0014fed:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014ff1:	75 0b                	jne    c0014ffe <opcodeFault(regs*, void*)+0x277>
c0014ff3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ff6:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014ff9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014ffc:	eb 53                	jmp    c0015051 <opcodeFault(regs*, void*)+0x2ca>
c0014ffe:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015002:	75 0b                	jne    c001500f <opcodeFault(regs*, void*)+0x288>
c0015004:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015007:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001500a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001500d:	eb 42                	jmp    c0015051 <opcodeFault(regs*, void*)+0x2ca>
c001500f:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015013:	75 0b                	jne    c0015020 <opcodeFault(regs*, void*)+0x299>
c0015015:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015018:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001501b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001501e:	eb 31                	jmp    c0015051 <opcodeFault(regs*, void*)+0x2ca>
c0015020:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015024:	75 0b                	jne    c0015031 <opcodeFault(regs*, void*)+0x2aa>
c0015026:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015029:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001502c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001502f:	eb 20                	jmp    c0015051 <opcodeFault(regs*, void*)+0x2ca>
c0015031:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015035:	75 0b                	jne    c0015042 <opcodeFault(regs*, void*)+0x2bb>
c0015037:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001503a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001503d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015040:	eb 0f                	jmp    c0015051 <opcodeFault(regs*, void*)+0x2ca>
c0015042:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015046:	75 09                	jne    c0015051 <opcodeFault(regs*, void*)+0x2ca>
c0015048:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001504b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001504e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015051:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0015055:	74 10                	je     c0015067 <opcodeFault(regs*, void*)+0x2e0>
c0015057:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c001505e:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0015065:	eb 2d                	jmp    c0015094 <opcodeFault(regs*, void*)+0x30d>
c0015067:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001506a:	c1 e0 18             	shl    eax,0x18
c001506d:	89 c2                	mov    edx,eax
c001506f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015072:	c1 e0 08             	shl    eax,0x8
c0015075:	25 00 00 ff 00       	and    eax,0xff0000
c001507a:	09 c2                	or     edx,eax
c001507c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001507f:	c1 e8 08             	shr    eax,0x8
c0015082:	25 00 ff 00 00       	and    eax,0xff00
c0015087:	09 c2                	or     edx,eax
c0015089:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001508c:	c1 e8 18             	shr    eax,0x18
c001508f:	09 d0                	or     eax,edx
c0015091:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015094:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015098:	75 0b                	jne    c00150a5 <opcodeFault(regs*, void*)+0x31e>
c001509a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001509d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00150a0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00150a3:	eb 75                	jmp    c001511a <opcodeFault(regs*, void*)+0x393>
c00150a5:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00150a9:	75 0b                	jne    c00150b6 <opcodeFault(regs*, void*)+0x32f>
c00150ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150ae:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00150b1:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00150b4:	eb 64                	jmp    c001511a <opcodeFault(regs*, void*)+0x393>
c00150b6:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00150ba:	75 0b                	jne    c00150c7 <opcodeFault(regs*, void*)+0x340>
c00150bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150bf:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00150c2:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00150c5:	eb 53                	jmp    c001511a <opcodeFault(regs*, void*)+0x393>
c00150c7:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00150cb:	75 0b                	jne    c00150d8 <opcodeFault(regs*, void*)+0x351>
c00150cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150d0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00150d3:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00150d6:	eb 42                	jmp    c001511a <opcodeFault(regs*, void*)+0x393>
c00150d8:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00150dc:	75 0b                	jne    c00150e9 <opcodeFault(regs*, void*)+0x362>
c00150de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150e1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00150e4:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00150e7:	eb 31                	jmp    c001511a <opcodeFault(regs*, void*)+0x393>
c00150e9:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00150ed:	75 0b                	jne    c00150fa <opcodeFault(regs*, void*)+0x373>
c00150ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150f2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00150f5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00150f8:	eb 20                	jmp    c001511a <opcodeFault(regs*, void*)+0x393>
c00150fa:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00150fe:	75 0b                	jne    c001510b <opcodeFault(regs*, void*)+0x384>
c0015100:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015103:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015106:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0015109:	eb 0f                	jmp    c001511a <opcodeFault(regs*, void*)+0x393>
c001510b:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001510f:	75 09                	jne    c001511a <opcodeFault(regs*, void*)+0x393>
c0015111:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015114:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015117:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001511a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001511d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015120:	8d 50 02             	lea    edx,[eax+0x2]
c0015123:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015126:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015129:	e9 6f 02 00 00       	jmp    c001539d <opcodeFault(regs*, void*)+0x616>
c001512e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015131:	8a 00                	mov    al,BYTE PTR [eax]
c0015133:	3c 0f                	cmp    al,0xf
c0015135:	0f 85 8d 01 00 00    	jne    c00152c8 <opcodeFault(regs*, void*)+0x541>
c001513b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001513e:	40                   	inc    eax
c001513f:	8a 00                	mov    al,BYTE PTR [eax]
c0015141:	3c c7                	cmp    al,0xc7
c0015143:	0f 85 7f 01 00 00    	jne    c00152c8 <opcodeFault(regs*, void*)+0x541>
c0015149:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001514c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001514f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015152:	8d 50 01             	lea    edx,[eax+0x1]
c0015155:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015158:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001515b:	8d 45 ba             	lea    eax,[ebp-0x46]
c001515e:	50                   	push   eax
c001515f:	8d 45 bb             	lea    eax,[ebp-0x45]
c0015162:	50                   	push   eax
c0015163:	8d 45 bc             	lea    eax,[ebp-0x44]
c0015166:	50                   	push   eax
c0015167:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001516a:	e8 ff 48 00 00       	call   c0019a6e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001516f:	83 c4 10             	add    esp,0x10
c0015172:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0015175:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0015178:	83 f0 01             	xor    eax,0x1
c001517b:	84 c0                	test   al,al
c001517d:	0f 84 45 01 00 00    	je     c00152c8 <opcodeFault(regs*, void*)+0x541>
c0015183:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0015186:	3c 01                	cmp    al,0x1
c0015188:	0f 85 3a 01 00 00    	jne    c00152c8 <opcodeFault(regs*, void*)+0x541>
c001518e:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0015191:	83 f0 01             	xor    eax,0x1
c0015194:	84 c0                	test   al,al
c0015196:	0f 84 2c 01 00 00    	je     c00152c8 <opcodeFault(regs*, void*)+0x541>
c001519c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001519f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00151a2:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00151a5:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c00151ac:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00151af:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00151b2:	89 c2                	mov    edx,eax
c00151b4:	b8 00 00 00 00       	mov    eax,0x0
c00151b9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00151bc:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00151bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151c2:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00151c5:	ba 00 00 00 00       	mov    edx,0x0
c00151ca:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c00151cd:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c00151d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151d3:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00151d6:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00151d9:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00151e0:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00151e3:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00151e6:	89 c2                	mov    edx,eax
c00151e8:	b8 00 00 00 00       	mov    eax,0x0
c00151ed:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00151f0:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00151f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151f6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00151f9:	ba 00 00 00 00       	mov    edx,0x0
c00151fe:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0015201:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015204:	fa                   	cli    
c0015205:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001520a:	40                   	inc    eax
c001520b:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c0015210:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015213:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015216:	8b 00                	mov    eax,DWORD PTR [eax]
c0015218:	89 c1                	mov    ecx,eax
c001521a:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c001521d:	89 cb                	mov    ebx,ecx
c001521f:	89 d0                	mov    eax,edx
c0015221:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0015224:	89 c6                	mov    esi,eax
c0015226:	89 f0                	mov    eax,esi
c0015228:	09 d8                	or     eax,ebx
c001522a:	85 c0                	test   eax,eax
c001522c:	75 21                	jne    c001524f <opcodeFault(regs*, void*)+0x4c8>
c001522e:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0015231:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015234:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015237:	89 01                	mov    DWORD PTR [ecx],eax
c0015239:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001523c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001523f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015242:	83 c8 40             	or     eax,0x40
c0015245:	89 c2                	mov    edx,eax
c0015247:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001524a:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001524d:	eb 3e                	jmp    c001528d <opcodeFault(regs*, void*)+0x506>
c001524f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015252:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015255:	8b 00                	mov    eax,DWORD PTR [eax]
c0015257:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001525a:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001525d:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0015260:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015263:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015266:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015269:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001526c:	89 d0                	mov    eax,edx
c001526e:	31 d2                	xor    edx,edx
c0015270:	89 c3                	mov    ebx,eax
c0015272:	89 d6                	mov    esi,edx
c0015274:	89 da                	mov    edx,ebx
c0015276:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015279:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001527c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001527f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015282:	83 e0 bf             	and    eax,0xffffffbf
c0015285:	89 c2                	mov    edx,eax
c0015287:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001528a:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001528d:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c0015292:	48                   	dec    eax
c0015293:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c0015298:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001529d:	85 c0                	test   eax,eax
c001529f:	75 01                	jne    c00152a2 <opcodeFault(regs*, void*)+0x51b>
c00152a1:	fb                   	sti    
c00152a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152a5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152a8:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c00152ab:	01 c2                	add    edx,eax
c00152ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152b0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152b3:	83 ec 0c             	sub    esp,0xc
c00152b6:	68 36 ba 02 c0       	push   0xc002ba36
c00152bb:	e8 ab d6 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c00152c0:	83 c4 10             	add    esp,0x10
c00152c3:	e9 d5 00 00 00       	jmp    c001539d <opcodeFault(regs*, void*)+0x616>
c00152c8:	83 ec 0c             	sub    esp,0xc
c00152cb:	68 49 ba 02 c0       	push   0xc002ba49
c00152d0:	e8 96 d6 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c00152d5:	83 c4 10             	add    esp,0x10
c00152d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152db:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00152de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152e1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00152e4:	c1 e0 04             	shl    eax,0x4
c00152e7:	01 d0                	add    eax,edx
c00152e9:	83 c0 03             	add    eax,0x3
c00152ec:	8a 00                	mov    al,BYTE PTR [eax]
c00152ee:	0f b6 d8             	movzx  ebx,al
c00152f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152f4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00152f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152fa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00152fd:	c1 e0 04             	shl    eax,0x4
c0015300:	01 d0                	add    eax,edx
c0015302:	83 c0 02             	add    eax,0x2
c0015305:	8a 00                	mov    al,BYTE PTR [eax]
c0015307:	0f b6 c8             	movzx  ecx,al
c001530a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001530d:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015310:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015313:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015316:	c1 e0 04             	shl    eax,0x4
c0015319:	01 d0                	add    eax,edx
c001531b:	40                   	inc    eax
c001531c:	8a 00                	mov    al,BYTE PTR [eax]
c001531e:	0f b6 d0             	movzx  edx,al
c0015321:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015324:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0015327:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001532a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001532d:	c1 e0 04             	shl    eax,0x4
c0015330:	01 f0                	add    eax,esi
c0015332:	8a 00                	mov    al,BYTE PTR [eax]
c0015334:	0f b6 c0             	movzx  eax,al
c0015337:	83 ec 0c             	sub    esp,0xc
c001533a:	53                   	push   ebx
c001533b:	51                   	push   ecx
c001533c:	52                   	push   edx
c001533d:	50                   	push   eax
c001533e:	68 5c ba 02 c0       	push   0xc002ba5c
c0015343:	e8 23 d6 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0015348:	83 c4 20             	add    esp,0x20
c001534b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001534e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015351:	83 c0 03             	add    eax,0x3
c0015354:	8a 00                	mov    al,BYTE PTR [eax]
c0015356:	0f b6 d8             	movzx  ebx,al
c0015359:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001535c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001535f:	83 c0 02             	add    eax,0x2
c0015362:	8a 00                	mov    al,BYTE PTR [eax]
c0015364:	0f b6 c8             	movzx  ecx,al
c0015367:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001536a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001536d:	40                   	inc    eax
c001536e:	8a 00                	mov    al,BYTE PTR [eax]
c0015370:	0f b6 d0             	movzx  edx,al
c0015373:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015376:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015379:	8a 00                	mov    al,BYTE PTR [eax]
c001537b:	0f b6 c0             	movzx  eax,al
c001537e:	83 ec 0c             	sub    esp,0xc
c0015381:	53                   	push   ebx
c0015382:	51                   	push   ecx
c0015383:	52                   	push   edx
c0015384:	50                   	push   eax
c0015385:	68 84 ba 02 c0       	push   0xc002ba84
c001538a:	e8 dc d5 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001538f:	83 c4 20             	add    esp,0x20
c0015392:	83 ec 0c             	sub    esp,0xc
c0015395:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015398:	e8 79 f4 ff ff       	call   c0014816 <displayDebugInfo(regs*)>
c001539d:	8d 65 f8             	lea    esp,[ebp-0x8]
c00153a0:	5b                   	pop    ebx
c00153a1:	5e                   	pop    esi
c00153a2:	5d                   	pop    ebp
c00153a3:	c3                   	ret    

c00153a4 <displayProgramFault(char const*)>:
c00153a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153a9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00153ac:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00153b2:	85 c0                	test   eax,eax
c00153b4:	74 15                	je     c00153cb <displayProgramFault(char const*)+0x27>
c00153b6:	83 ec 0c             	sub    esp,0xc
c00153b9:	6a 04                	push   0x4
c00153bb:	6a 0f                	push   0xf
c00153bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00153c1:	50                   	push   eax
c00153c2:	e8 95 b4 ff ff       	call   c001085c <VgaText::puts(char const*, VgaColour, VgaColour)>
c00153c7:	83 c4 1c             	add    esp,0x1c
c00153ca:	c3                   	ret    
c00153cb:	c3                   	ret    

c00153cc <setupInterruptController()>:
c00153cc:	55                   	push   ebp
c00153cd:	89 e5                	mov    ebp,esp
c00153cf:	53                   	push   ebx
c00153d0:	83 ec 24             	sub    esp,0x24
c00153d3:	b8 00 00 00 00       	mov    eax,0x0
c00153d8:	85 c0                	test   eax,eax
c00153da:	0f 95 c0             	setne  al
c00153dd:	84 c0                	test   al,al
c00153df:	74 5b                	je     c001543c <setupInterruptController()+0x70>
c00153e1:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c00153e8:	83 ec 0c             	sub    esp,0xc
c00153eb:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c00153ee:	e8 99 a4 ff ff       	call   c000f88c <malloc>
c00153f3:	83 c4 10             	add    esp,0x10
c00153f6:	89 c3                	mov    ebx,eax
c00153f8:	83 ec 0c             	sub    esp,0xc
c00153fb:	53                   	push   ebx
c00153fc:	e8 09 0e 01 00       	call   c002620a <APIC::APIC()>
c0015401:	83 c4 10             	add    esp,0x10
c0015404:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015407:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001540a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001540d:	8b 00                	mov    eax,DWORD PTR [eax]
c001540f:	83 c0 08             	add    eax,0x8
c0015412:	8b 00                	mov    eax,DWORD PTR [eax]
c0015414:	6a 00                	push   0x0
c0015416:	6a 00                	push   0x0
c0015418:	6a 00                	push   0x0
c001541a:	52                   	push   edx
c001541b:	ff d0                	call   eax
c001541d:	83 c4 10             	add    esp,0x10
c0015420:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c0015425:	83 ec 08             	sub    esp,0x8
c0015428:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001542b:	50                   	push   eax
c001542c:	e8 73 e9 ff ff       	call   c0013da4 <Device::addChild(Device*)>
c0015431:	83 c4 10             	add    esp,0x10
c0015434:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015437:	e9 89 03 00 00       	jmp    c00157c5 <setupInterruptController()+0x3f9>
c001543c:	a0 40 1a 03 c0       	mov    al,ds:0xc0031a40
c0015441:	84 c0                	test   al,al
c0015443:	75 24                	jne    c0015469 <setupInterruptController()+0x9d>
c0015445:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c001544a:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0015450:	83 e2 fe             	and    edx,0xfffffffe
c0015453:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0015459:	83 ec 0c             	sub    esp,0xc
c001545c:	68 a9 ba 02 c0       	push   0xc002baa9
c0015461:	e8 05 d5 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0015466:	83 c4 10             	add    esp,0x10
c0015469:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c001546e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015474:	83 e0 01             	and    eax,0x1
c0015477:	84 c0                	test   al,al
c0015479:	0f 95 c0             	setne  al
c001547c:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001547f:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015486:	83 ec 0c             	sub    esp,0xc
c0015489:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001548c:	e8 fb a3 ff ff       	call   c000f88c <malloc>
c0015491:	83 c4 10             	add    esp,0x10
c0015494:	89 c3                	mov    ebx,eax
c0015496:	83 ec 0c             	sub    esp,0xc
c0015499:	53                   	push   ebx
c001549a:	e8 c3 12 01 00       	call   c0026762 <PIC::PIC()>
c001549f:	83 c4 10             	add    esp,0x10
c00154a2:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00154a5:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00154a8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00154ad:	83 c0 08             	add    eax,0x8
c00154b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00154b2:	6a 00                	push   0x0
c00154b4:	6a 00                	push   0x0
c00154b6:	6a 00                	push   0x0
c00154b8:	52                   	push   edx
c00154b9:	ff d0                	call   eax
c00154bb:	83 c4 10             	add    esp,0x10
c00154be:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c00154c2:	74 73                	je     c0015537 <setupInterruptController()+0x16b>
c00154c4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00154c7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00154cc:	83 c0 0c             	add    eax,0xc
c00154cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00154d1:	6a 00                	push   0x0
c00154d3:	6a 00                	push   0x0
c00154d5:	6a 00                	push   0x0
c00154d7:	52                   	push   edx
c00154d8:	ff d0                	call   eax
c00154da:	83 c4 10             	add    esp,0x10
c00154dd:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00154e1:	74 15                	je     c00154f8 <setupInterruptController()+0x12c>
c00154e3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00154e8:	83 c0 04             	add    eax,0x4
c00154eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00154ed:	83 ec 0c             	sub    esp,0xc
c00154f0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154f3:	ff d0                	call   eax
c00154f5:	83 c4 10             	add    esp,0x10
c00154f8:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c00154ff:	83 ec 0c             	sub    esp,0xc
c0015502:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015505:	e8 82 a3 ff ff       	call   c000f88c <malloc>
c001550a:	83 c4 10             	add    esp,0x10
c001550d:	89 c3                	mov    ebx,eax
c001550f:	83 ec 0c             	sub    esp,0xc
c0015512:	53                   	push   ebx
c0015513:	e8 f2 0c 01 00       	call   c002620a <APIC::APIC()>
c0015518:	83 c4 10             	add    esp,0x10
c001551b:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001551e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015521:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015524:	8b 00                	mov    eax,DWORD PTR [eax]
c0015526:	83 c0 08             	add    eax,0x8
c0015529:	8b 00                	mov    eax,DWORD PTR [eax]
c001552b:	6a 00                	push   0x0
c001552d:	6a 00                	push   0x0
c001552f:	6a 00                	push   0x0
c0015531:	52                   	push   edx
c0015532:	ff d0                	call   eax
c0015534:	83 c4 10             	add    esp,0x10
c0015537:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c001553c:	83 ec 08             	sub    esp,0x8
c001553f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015542:	50                   	push   eax
c0015543:	e8 5c e8 ff ff       	call   c0013da4 <Device::addChild(Device*)>
c0015548:	83 c4 10             	add    esp,0x10
c001554b:	c7 05 48 f2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f248,0x0
c0015555:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015558:	8b 00                	mov    eax,DWORD PTR [eax]
c001555a:	83 c0 24             	add    eax,0x24
c001555d:	8b 00                	mov    eax,DWORD PTR [eax]
c001555f:	6a 00                	push   0x0
c0015561:	68 68 4d 01 c0       	push   0xc0014d68
c0015566:	6a 00                	push   0x0
c0015568:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001556b:	ff d0                	call   eax
c001556d:	83 c4 10             	add    esp,0x10
c0015570:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015573:	8b 00                	mov    eax,DWORD PTR [eax]
c0015575:	83 c0 24             	add    eax,0x24
c0015578:	8b 00                	mov    eax,DWORD PTR [eax]
c001557a:	6a 00                	push   0x0
c001557c:	68 68 4d 01 c0       	push   0xc0014d68
c0015581:	6a 01                	push   0x1
c0015583:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015586:	ff d0                	call   eax
c0015588:	83 c4 10             	add    esp,0x10
c001558b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001558e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015590:	83 c0 24             	add    eax,0x24
c0015593:	8b 00                	mov    eax,DWORD PTR [eax]
c0015595:	6a 00                	push   0x0
c0015597:	68 73 46 01 c0       	push   0xc0014673
c001559c:	6a 02                	push   0x2
c001559e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155a1:	ff d0                	call   eax
c00155a3:	83 c4 10             	add    esp,0x10
c00155a6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00155ab:	83 c0 24             	add    eax,0x24
c00155ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00155b0:	6a 00                	push   0x0
c00155b2:	68 68 4d 01 c0       	push   0xc0014d68
c00155b7:	6a 03                	push   0x3
c00155b9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155bc:	ff d0                	call   eax
c00155be:	83 c4 10             	add    esp,0x10
c00155c1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00155c6:	83 c0 24             	add    eax,0x24
c00155c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00155cb:	6a 00                	push   0x0
c00155cd:	68 68 4d 01 c0       	push   0xc0014d68
c00155d2:	6a 04                	push   0x4
c00155d4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155d7:	ff d0                	call   eax
c00155d9:	83 c4 10             	add    esp,0x10
c00155dc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155df:	8b 00                	mov    eax,DWORD PTR [eax]
c00155e1:	83 c0 24             	add    eax,0x24
c00155e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00155e6:	6a 00                	push   0x0
c00155e8:	68 68 4d 01 c0       	push   0xc0014d68
c00155ed:	6a 05                	push   0x5
c00155ef:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155f2:	ff d0                	call   eax
c00155f4:	83 c4 10             	add    esp,0x10
c00155f7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00155fc:	83 c0 24             	add    eax,0x24
c00155ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0015601:	6a 00                	push   0x0
c0015603:	68 87 4d 01 c0       	push   0xc0014d87
c0015608:	6a 06                	push   0x6
c001560a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001560d:	ff d0                	call   eax
c001560f:	83 c4 10             	add    esp,0x10
c0015612:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015615:	8b 00                	mov    eax,DWORD PTR [eax]
c0015617:	83 c0 24             	add    eax,0x24
c001561a:	8b 00                	mov    eax,DWORD PTR [eax]
c001561c:	6a 00                	push   0x0
c001561e:	68 a5 4c 01 c0       	push   0xc0014ca5
c0015623:	6a 07                	push   0x7
c0015625:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015628:	ff d0                	call   eax
c001562a:	83 c4 10             	add    esp,0x10
c001562d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015630:	8b 00                	mov    eax,DWORD PTR [eax]
c0015632:	83 c0 24             	add    eax,0x24
c0015635:	8b 00                	mov    eax,DWORD PTR [eax]
c0015637:	6a 00                	push   0x0
c0015639:	68 8e 44 01 c0       	push   0xc001448e
c001563e:	6a 08                	push   0x8
c0015640:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015643:	ff d0                	call   eax
c0015645:	83 c4 10             	add    esp,0x10
c0015648:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001564b:	8b 00                	mov    eax,DWORD PTR [eax]
c001564d:	83 c0 24             	add    eax,0x24
c0015650:	8b 00                	mov    eax,DWORD PTR [eax]
c0015652:	6a 00                	push   0x0
c0015654:	68 68 4d 01 c0       	push   0xc0014d68
c0015659:	6a 09                	push   0x9
c001565b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001565e:	ff d0                	call   eax
c0015660:	83 c4 10             	add    esp,0x10
c0015663:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015666:	8b 00                	mov    eax,DWORD PTR [eax]
c0015668:	83 c0 24             	add    eax,0x24
c001566b:	8b 00                	mov    eax,DWORD PTR [eax]
c001566d:	6a 00                	push   0x0
c001566f:	68 68 4d 01 c0       	push   0xc0014d68
c0015674:	6a 0a                	push   0xa
c0015676:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015679:	ff d0                	call   eax
c001567b:	83 c4 10             	add    esp,0x10
c001567e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015681:	8b 00                	mov    eax,DWORD PTR [eax]
c0015683:	83 c0 24             	add    eax,0x24
c0015686:	8b 00                	mov    eax,DWORD PTR [eax]
c0015688:	6a 00                	push   0x0
c001568a:	68 68 4d 01 c0       	push   0xc0014d68
c001568f:	6a 0b                	push   0xb
c0015691:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015694:	ff d0                	call   eax
c0015696:	83 c4 10             	add    esp,0x10
c0015699:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001569c:	8b 00                	mov    eax,DWORD PTR [eax]
c001569e:	83 c0 24             	add    eax,0x24
c00156a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00156a3:	6a 00                	push   0x0
c00156a5:	68 68 4d 01 c0       	push   0xc0014d68
c00156aa:	6a 0c                	push   0xc
c00156ac:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156af:	ff d0                	call   eax
c00156b1:	83 c4 10             	add    esp,0x10
c00156b4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00156b9:	83 c0 24             	add    eax,0x24
c00156bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00156be:	6a 00                	push   0x0
c00156c0:	68 18 4d 01 c0       	push   0xc0014d18
c00156c5:	6a 0d                	push   0xd
c00156c7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156ca:	ff d0                	call   eax
c00156cc:	83 c4 10             	add    esp,0x10
c00156cf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00156d4:	83 c0 24             	add    eax,0x24
c00156d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00156d9:	6a 00                	push   0x0
c00156db:	68 51 4d 01 c0       	push   0xc0014d51
c00156e0:	6a 0e                	push   0xe
c00156e2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156e5:	ff d0                	call   eax
c00156e7:	83 c4 10             	add    esp,0x10
c00156ea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00156ef:	83 c0 24             	add    eax,0x24
c00156f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00156f4:	6a 00                	push   0x0
c00156f6:	68 68 4d 01 c0       	push   0xc0014d68
c00156fb:	6a 0f                	push   0xf
c00156fd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015700:	ff d0                	call   eax
c0015702:	83 c4 10             	add    esp,0x10
c0015705:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015708:	8b 00                	mov    eax,DWORD PTR [eax]
c001570a:	83 c0 24             	add    eax,0x24
c001570d:	8b 00                	mov    eax,DWORD PTR [eax]
c001570f:	6a 00                	push   0x0
c0015711:	68 68 4d 01 c0       	push   0xc0014d68
c0015716:	6a 10                	push   0x10
c0015718:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001571b:	ff d0                	call   eax
c001571d:	83 c4 10             	add    esp,0x10
c0015720:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015723:	8b 00                	mov    eax,DWORD PTR [eax]
c0015725:	83 c0 24             	add    eax,0x24
c0015728:	8b 00                	mov    eax,DWORD PTR [eax]
c001572a:	6a 00                	push   0x0
c001572c:	68 68 4d 01 c0       	push   0xc0014d68
c0015731:	6a 11                	push   0x11
c0015733:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015736:	ff d0                	call   eax
c0015738:	83 c4 10             	add    esp,0x10
c001573b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001573e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015740:	83 c0 24             	add    eax,0x24
c0015743:	8b 00                	mov    eax,DWORD PTR [eax]
c0015745:	6a 00                	push   0x0
c0015747:	68 68 4d 01 c0       	push   0xc0014d68
c001574c:	6a 12                	push   0x12
c001574e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015751:	ff d0                	call   eax
c0015753:	83 c4 10             	add    esp,0x10
c0015756:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015759:	8b 00                	mov    eax,DWORD PTR [eax]
c001575b:	83 c0 24             	add    eax,0x24
c001575e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015760:	6a 00                	push   0x0
c0015762:	68 68 4d 01 c0       	push   0xc0014d68
c0015767:	6a 13                	push   0x13
c0015769:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001576c:	ff d0                	call   eax
c001576e:	83 c4 10             	add    esp,0x10
c0015771:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015774:	8b 00                	mov    eax,DWORD PTR [eax]
c0015776:	83 c0 24             	add    eax,0x24
c0015779:	8b 00                	mov    eax,DWORD PTR [eax]
c001577b:	6a 00                	push   0x0
c001577d:	68 68 4d 01 c0       	push   0xc0014d68
c0015782:	6a 14                	push   0x14
c0015784:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015787:	ff d0                	call   eax
c0015789:	83 c4 10             	add    esp,0x10
c001578c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001578f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015791:	83 c0 24             	add    eax,0x24
c0015794:	8b 00                	mov    eax,DWORD PTR [eax]
c0015796:	6a 00                	push   0x0
c0015798:	68 68 4d 01 c0       	push   0xc0014d68
c001579d:	6a 1e                	push   0x1e
c001579f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157a2:	ff d0                	call   eax
c00157a4:	83 c4 10             	add    esp,0x10
c00157a7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00157ac:	83 c0 24             	add    eax,0x24
c00157af:	8b 00                	mov    eax,DWORD PTR [eax]
c00157b1:	6a 00                	push   0x0
c00157b3:	68 9a c7 01 c0       	push   0xc001c79a
c00157b8:	6a 60                	push   0x60
c00157ba:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157bd:	ff d0                	call   eax
c00157bf:	83 c4 10             	add    esp,0x10
c00157c2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157c5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00157c8:	c9                   	leave  
c00157c9:	c3                   	ret    

c00157ca <InterruptController::convertLegacyIRQNumber(int)>:
c00157ca:	55                   	push   ebp
c00157cb:	89 e5                	mov    ebp,esp
c00157cd:	83 ec 08             	sub    esp,0x8
c00157d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d3:	83 ec 0c             	sub    esp,0xc
c00157d6:	50                   	push   eax
c00157d7:	e8 c8 e8 ff ff       	call   c00140a4 <Device::getName()>
c00157dc:	83 c4 10             	add    esp,0x10
c00157df:	8a 00                	mov    al,BYTE PTR [eax]
c00157e1:	3c 41                	cmp    al,0x41
c00157e3:	0f 94 c0             	sete   al
c00157e6:	84 c0                	test   al,al
c00157e8:	74 28                	je     c0015812 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00157ea:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00157ee:	7f 12                	jg     c0015802 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c00157f0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00157f3:	05 20 e3 02 c0       	add    eax,0xc002e320
c00157f8:	8a 00                	mov    al,BYTE PTR [eax]
c00157fa:	0f b6 c0             	movzx  eax,al
c00157fd:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015800:	eb 10                	jmp    c0015812 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015802:	83 ec 0c             	sub    esp,0xc
c0015805:	68 98 b7 02 c0       	push   0xc002b798
c001580a:	e8 92 4b 00 00       	call   c001a3a1 <Krnl::panic(char const*)>
c001580f:	83 c4 10             	add    esp,0x10
c0015812:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015815:	c9                   	leave  
c0015816:	c3                   	ret    
c0015817:	90                   	nop

c0015818 <startGUI(void*)>:
c0015818:	55                   	push   ebp
c0015819:	89 e5                	mov    ebp,esp
c001581b:	53                   	push   ebx
c001581c:	83 ec 04             	sub    esp,0x4
c001581f:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c0015824:	48                   	dec    eax
c0015825:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001582a:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001582f:	85 c0                	test   eax,eax
c0015831:	75 01                	jne    c0015834 <startGUI(void*)+0x1c>
c0015833:	fb                   	sti    
c0015834:	8b 1d c8 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f0c8
c001583a:	83 ec 08             	sub    esp,0x8
c001583d:	6a 01                	push   0x1
c001583f:	68 0c bb 02 c0       	push   0xc002bb0c
c0015844:	e8 2c 7f 00 00       	call   c001d775 <Thr::loadDLL(char const*, bool)>
c0015849:	83 c4 10             	add    esp,0x10
c001584c:	83 ec 08             	sub    esp,0x8
c001584f:	53                   	push   ebx
c0015850:	50                   	push   eax
c0015851:	e8 4a 81 00 00       	call   c001d9a0 <Thr::executeDLL(unsigned long, void*)>
c0015856:	83 c4 10             	add    esp,0x10
c0015859:	8b 1d c8 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f0c8
c001585f:	83 ec 08             	sub    esp,0x8
c0015862:	6a 01                	push   0x1
c0015864:	68 26 bb 02 c0       	push   0xc002bb26
c0015869:	e8 07 7f 00 00       	call   c001d775 <Thr::loadDLL(char const*, bool)>
c001586e:	83 c4 10             	add    esp,0x10
c0015871:	83 ec 08             	sub    esp,0x8
c0015874:	53                   	push   ebx
c0015875:	50                   	push   eax
c0015876:	e8 25 81 00 00       	call   c001d9a0 <Thr::executeDLL(unsigned long, void*)>
c001587b:	83 c4 10             	add    esp,0x10
c001587e:	90                   	nop
c001587f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015882:	c9                   	leave  
c0015883:	c3                   	ret    

c0015884 <startGUIVESA(void*)>:
c0015884:	55                   	push   ebp
c0015885:	89 e5                	mov    ebp,esp
c0015887:	53                   	push   ebx
c0015888:	83 ec 04             	sub    esp,0x4
c001588b:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c0015890:	48                   	dec    eax
c0015891:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c0015896:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001589b:	85 c0                	test   eax,eax
c001589d:	75 01                	jne    c00158a0 <startGUIVESA(void*)+0x1c>
c001589f:	fb                   	sti    
c00158a0:	8b 1d c8 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f0c8
c00158a6:	83 ec 08             	sub    esp,0x8
c00158a9:	6a 01                	push   0x1
c00158ab:	68 40 bb 02 c0       	push   0xc002bb40
c00158b0:	e8 c0 7e 00 00       	call   c001d775 <Thr::loadDLL(char const*, bool)>
c00158b5:	83 c4 10             	add    esp,0x10
c00158b8:	83 ec 08             	sub    esp,0x8
c00158bb:	53                   	push   ebx
c00158bc:	50                   	push   eax
c00158bd:	e8 de 80 00 00       	call   c001d9a0 <Thr::executeDLL(unsigned long, void*)>
c00158c2:	83 c4 10             	add    esp,0x10
c00158c5:	8b 1d c8 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f0c8
c00158cb:	83 ec 08             	sub    esp,0x8
c00158ce:	6a 01                	push   0x1
c00158d0:	68 26 bb 02 c0       	push   0xc002bb26
c00158d5:	e8 9b 7e 00 00       	call   c001d775 <Thr::loadDLL(char const*, bool)>
c00158da:	83 c4 10             	add    esp,0x10
c00158dd:	83 ec 08             	sub    esp,0x8
c00158e0:	53                   	push   ebx
c00158e1:	50                   	push   eax
c00158e2:	e8 b9 80 00 00       	call   c001d9a0 <Thr::executeDLL(unsigned long, void*)>
c00158e7:	83 c4 10             	add    esp,0x10
c00158ea:	90                   	nop
c00158eb:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00158ee:	c9                   	leave  
c00158ef:	c3                   	ret    

c00158f0 <sendKeyToTerminal(unsigned char)>:
c00158f0:	55                   	push   ebp
c00158f1:	89 e5                	mov    ebp,esp
c00158f3:	83 ec 28             	sub    esp,0x28
c00158f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158f9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00158fc:	a1 84 f1 02 c0       	mov    eax,ds:0xc002f184
c0015901:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015905:	83 ec 08             	sub    esp,0x8
c0015908:	52                   	push   edx
c0015909:	50                   	push   eax
c001590a:	e8 25 b4 ff ff       	call   c0010d34 <VgaText::receiveKey(unsigned char)>
c001590f:	83 c4 10             	add    esp,0x10
c0015912:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015916:	0f 85 8f 00 00 00    	jne    c00159ab <sendKeyToTerminal(unsigned char)+0xbb>
c001591c:	fa                   	cli    
c001591d:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c0015922:	40                   	inc    eax
c0015923:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c0015928:	a1 e4 25 03 c0       	mov    eax,ds:0xc00325e4
c001592d:	40                   	inc    eax
c001592e:	a3 e4 25 03 c0       	mov    ds:0xc00325e4,eax
c0015933:	a1 60 f2 02 c0       	mov    eax,ds:0xc002f260
c0015938:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001593b:	c7 05 60 f2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f260,0x0
c0015945:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015949:	74 1f                	je     c001596a <sendKeyToTerminal(unsigned char)+0x7a>
c001594b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001594e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015951:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015954:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015957:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001595a:	83 ec 0c             	sub    esp,0xc
c001595d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015960:	e8 b3 8c 00 00       	call   c001e618 <unblockTask(ThreadControlBlock*)>
c0015965:	83 c4 10             	add    esp,0x10
c0015968:	eb db                	jmp    c0015945 <sendKeyToTerminal(unsigned char)+0x55>
c001596a:	a1 e4 25 03 c0       	mov    eax,ds:0xc00325e4
c001596f:	48                   	dec    eax
c0015970:	a3 e4 25 03 c0       	mov    ds:0xc00325e4,eax
c0015975:	a1 e4 25 03 c0       	mov    eax,ds:0xc00325e4
c001597a:	85 c0                	test   eax,eax
c001597c:	75 18                	jne    c0015996 <sendKeyToTerminal(unsigned char)+0xa6>
c001597e:	a1 e0 25 03 c0       	mov    eax,ds:0xc00325e0
c0015983:	85 c0                	test   eax,eax
c0015985:	74 0f                	je     c0015996 <sendKeyToTerminal(unsigned char)+0xa6>
c0015987:	c7 05 e0 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00325e0,0x0
c0015991:	e8 be 87 00 00       	call   c001e154 <schedule()>
c0015996:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001599b:	48                   	dec    eax
c001599c:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c00159a1:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c00159a6:	85 c0                	test   eax,eax
c00159a8:	75 01                	jne    c00159ab <sendKeyToTerminal(unsigned char)+0xbb>
c00159aa:	fb                   	sti    
c00159ab:	90                   	nop
c00159ac:	c9                   	leave  
c00159ad:	c3                   	ret    

c00159ae <sendKeyboardToken(KeyboardToken)>:
c00159ae:	55                   	push   ebp
c00159af:	89 e5                	mov    ebp,esp
c00159b1:	83 ec 18             	sub    esp,0x18
c00159b4:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c00159b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159ba:	0f b7 c0             	movzx  eax,ax
c00159bd:	83 f2 01             	xor    edx,0x1
c00159c0:	88 90 80 f2 02 c0    	mov    BYTE PTR [eax-0x3ffd0d80],dl
c00159c6:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c00159cb:	85 c0                	test   eax,eax
c00159cd:	74 24                	je     c00159f3 <sendKeyboardToken(KeyboardToken)+0x45>
c00159cf:	8b 0d 68 f2 02 c0    	mov    ecx,DWORD PTR ds:0xc002f268
c00159d5:	83 ec 04             	sub    esp,0x4
c00159d8:	68 80 f2 02 c0       	push   0xc002f280
c00159dd:	83 ec 08             	sub    esp,0x8
c00159e0:	89 e2                	mov    edx,esp
c00159e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159e5:	89 02                	mov    DWORD PTR [edx],eax
c00159e7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00159ea:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c00159ee:	ff d1                	call   ecx
c00159f0:	83 c4 10             	add    esp,0x10
c00159f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159f6:	66 3d 03 02          	cmp    ax,0x203
c00159fa:	75 07                	jne    c0015a03 <sendKeyboardToken(KeyboardToken)+0x55>
c00159fc:	a0 80 f3 02 c0       	mov    al,ds:0xc002f380
c0015a01:	84 c0                	test   al,al
c0015a03:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015a07:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015a0a:	a0 88 f6 02 c0       	mov    al,ds:0xc002f688
c0015a0f:	38 c2                	cmp    dl,al
c0015a11:	74 1c                	je     c0015a2f <sendKeyboardToken(KeyboardToken)+0x81>
c0015a13:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015a16:	a2 88 f6 02 c0       	mov    ds:0xc002f688,al
c0015a1b:	a0 88 f6 02 c0       	mov    al,ds:0xc002f688
c0015a20:	0f b6 c0             	movzx  eax,al
c0015a23:	83 ec 0c             	sub    esp,0xc
c0015a26:	50                   	push   eax
c0015a27:	e8 60 a8 ff ff       	call   c001028c <setTerminalScrollLock(bool)>
c0015a2c:	83 c4 10             	add    esp,0x10
c0015a2f:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015a32:	84 c0                	test   al,al
c0015a34:	0f 84 ae 00 00 00    	je     c0015ae8 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015a3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a3d:	66 3d 10 03          	cmp    ax,0x310
c0015a41:	75 06                	jne    c0015a49 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015a43:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015a49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a4c:	66 3d 11 03          	cmp    ax,0x311
c0015a50:	75 06                	jne    c0015a58 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015a52:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015a58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a5b:	66 3d 12 03          	cmp    ax,0x312
c0015a5f:	75 06                	jne    c0015a67 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015a61:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015a67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a6a:	66 3d 13 03          	cmp    ax,0x313
c0015a6e:	75 06                	jne    c0015a76 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015a70:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015a76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a79:	66 3d 14 03          	cmp    ax,0x314
c0015a7d:	75 06                	jne    c0015a85 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015a7f:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015a85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a88:	66 3d 15 03          	cmp    ax,0x315
c0015a8c:	75 06                	jne    c0015a94 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015a8e:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015a94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a97:	66 3d 16 03          	cmp    ax,0x316
c0015a9b:	75 06                	jne    c0015aa3 <sendKeyboardToken(KeyboardToken)+0xf5>
c0015a9d:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015aa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aa6:	66 3d 17 03          	cmp    ax,0x317
c0015aaa:	75 06                	jne    c0015ab2 <sendKeyboardToken(KeyboardToken)+0x104>
c0015aac:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015ab2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ab5:	66 3d 18 03          	cmp    ax,0x318
c0015ab9:	75 06                	jne    c0015ac1 <sendKeyboardToken(KeyboardToken)+0x113>
c0015abb:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015ac1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ac4:	66 3d 19 03          	cmp    ax,0x319
c0015ac8:	75 06                	jne    c0015ad0 <sendKeyboardToken(KeyboardToken)+0x122>
c0015aca:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015ad0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ad3:	66 3d 1a 03          	cmp    ax,0x31a
c0015ad7:	0f 85 c9 00 00 00    	jne    c0015ba6 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015add:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015ae3:	e9 be 00 00 00       	jmp    c0015ba6 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015ae8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aeb:	66 3d 10 03          	cmp    ax,0x310
c0015aef:	75 0a                	jne    c0015afb <sendKeyboardToken(KeyboardToken)+0x14d>
c0015af1:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015af7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015afb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015afe:	66 3d 11 03          	cmp    ax,0x311
c0015b02:	75 0a                	jne    c0015b0e <sendKeyboardToken(KeyboardToken)+0x160>
c0015b04:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015b0a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b11:	66 3d 12 03          	cmp    ax,0x312
c0015b15:	75 0a                	jne    c0015b21 <sendKeyboardToken(KeyboardToken)+0x173>
c0015b17:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015b1d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b24:	66 3d 13 03          	cmp    ax,0x313
c0015b28:	75 0a                	jne    c0015b34 <sendKeyboardToken(KeyboardToken)+0x186>
c0015b2a:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015b30:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b37:	66 3d 14 03          	cmp    ax,0x314
c0015b3b:	75 0a                	jne    c0015b47 <sendKeyboardToken(KeyboardToken)+0x199>
c0015b3d:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015b43:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b4a:	66 3d 15 03          	cmp    ax,0x315
c0015b4e:	75 0a                	jne    c0015b5a <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015b50:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015b56:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b5d:	66 3d 16 03          	cmp    ax,0x316
c0015b61:	75 0a                	jne    c0015b6d <sendKeyboardToken(KeyboardToken)+0x1bf>
c0015b63:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015b69:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b70:	66 3d 17 03          	cmp    ax,0x317
c0015b74:	75 0a                	jne    c0015b80 <sendKeyboardToken(KeyboardToken)+0x1d2>
c0015b76:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015b7c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b83:	66 3d 18 03          	cmp    ax,0x318
c0015b87:	75 0a                	jne    c0015b93 <sendKeyboardToken(KeyboardToken)+0x1e5>
c0015b89:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015b8f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b96:	66 3d 19 03          	cmp    ax,0x319
c0015b9a:	75 0a                	jne    c0015ba6 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015b9c:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015ba2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ba6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ba9:	66 3d 00 02          	cmp    ax,0x200
c0015bad:	75 2c                	jne    c0015bdb <sendKeyboardToken(KeyboardToken)+0x22d>
c0015baf:	a0 80 f6 02 c0       	mov    al,ds:0xc002f680
c0015bb4:	83 f0 01             	xor    eax,0x1
c0015bb7:	84 c0                	test   al,al
c0015bb9:	74 20                	je     c0015bdb <sendKeyboardToken(KeyboardToken)+0x22d>
c0015bbb:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0015bc0:	6a 01                	push   0x1
c0015bc2:	6a 00                	push   0x0
c0015bc4:	68 18 58 01 c0       	push   0xc0015818
c0015bc9:	50                   	push   eax
c0015bca:	e8 41 83 00 00       	call   c001df10 <Process::createThread(void (*)(void*), void*, int)>
c0015bcf:	83 c4 10             	add    esp,0x10
c0015bd2:	c6 05 80 f6 02 c0 01 	mov    BYTE PTR ds:0xc002f680,0x1
c0015bd9:	eb 33                	jmp    c0015c0e <sendKeyboardToken(KeyboardToken)+0x260>
c0015bdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bde:	66 3d 01 02          	cmp    ax,0x201
c0015be2:	75 2a                	jne    c0015c0e <sendKeyboardToken(KeyboardToken)+0x260>
c0015be4:	a0 80 f6 02 c0       	mov    al,ds:0xc002f680
c0015be9:	83 f0 01             	xor    eax,0x1
c0015bec:	84 c0                	test   al,al
c0015bee:	74 1e                	je     c0015c0e <sendKeyboardToken(KeyboardToken)+0x260>
c0015bf0:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0015bf5:	6a 01                	push   0x1
c0015bf7:	6a 00                	push   0x0
c0015bf9:	68 84 58 01 c0       	push   0xc0015884
c0015bfe:	50                   	push   eax
c0015bff:	e8 0c 83 00 00       	call   c001df10 <Process::createThread(void (*)(void*), void*, int)>
c0015c04:	83 c4 10             	add    esp,0x10
c0015c07:	c6 05 80 f6 02 c0 01 	mov    BYTE PTR ds:0xc002f680,0x1
c0015c0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c11:	66 3d 1d 03          	cmp    ax,0x31d
c0015c15:	75 06                	jne    c0015c1d <sendKeyboardToken(KeyboardToken)+0x26f>
c0015c17:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015c1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c20:	66 3d 1c 03          	cmp    ax,0x31c
c0015c24:	75 06                	jne    c0015c2c <sendKeyboardToken(KeyboardToken)+0x27e>
c0015c26:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015c2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c2f:	66 3d 1b 03          	cmp    ax,0x31b
c0015c33:	75 06                	jne    c0015c3b <sendKeyboardToken(KeyboardToken)+0x28d>
c0015c35:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015c3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c3e:	66 3d 1e 03          	cmp    ax,0x31e
c0015c42:	75 06                	jne    c0015c4a <sendKeyboardToken(KeyboardToken)+0x29c>
c0015c44:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015c4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c4d:	66 3d 1f 03          	cmp    ax,0x31f
c0015c51:	75 06                	jne    c0015c59 <sendKeyboardToken(KeyboardToken)+0x2ab>
c0015c53:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015c59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c5c:	66 3d 1a 03          	cmp    ax,0x31a
c0015c60:	75 06                	jne    c0015c68 <sendKeyboardToken(KeyboardToken)+0x2ba>
c0015c62:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015c68:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015c6c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015c6f:	83 f0 01             	xor    eax,0x1
c0015c72:	84 c0                	test   al,al
c0015c74:	74 77                	je     c0015ced <sendKeyboardToken(KeyboardToken)+0x33f>
c0015c76:	a0 81 f3 02 c0       	mov    al,ds:0xc002f381
c0015c7b:	84 c0                	test   al,al
c0015c7d:	74 41                	je     c0015cc0 <sendKeyboardToken(KeyboardToken)+0x312>
c0015c7f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015c83:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015c87:	74 2b                	je     c0015cb4 <sendKeyboardToken(KeyboardToken)+0x306>
c0015c89:	8b 15 84 f6 02 c0    	mov    edx,DWORD PTR ds:0xc002f684
c0015c8f:	89 d0                	mov    eax,edx
c0015c91:	c1 e0 02             	shl    eax,0x2
c0015c94:	01 d0                	add    eax,edx
c0015c96:	01 c0                	add    eax,eax
c0015c98:	a3 84 f6 02 c0       	mov    ds:0xc002f684,eax
c0015c9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ca0:	0f b7 c0             	movzx  eax,ax
c0015ca3:	8d 50 d0             	lea    edx,[eax-0x30]
c0015ca6:	a1 84 f6 02 c0       	mov    eax,ds:0xc002f684
c0015cab:	01 d0                	add    eax,edx
c0015cad:	a3 84 f6 02 c0       	mov    ds:0xc002f684,eax
c0015cb2:	eb 6d                	jmp    c0015d21 <sendKeyboardToken(KeyboardToken)+0x373>
c0015cb4:	c7 05 84 f6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f684,0x0
c0015cbe:	eb 61                	jmp    c0015d21 <sendKeyboardToken(KeyboardToken)+0x373>
c0015cc0:	a1 84 f6 02 c0       	mov    eax,ds:0xc002f684
c0015cc5:	85 c0                	test   eax,eax
c0015cc7:	74 18                	je     c0015ce1 <sendKeyboardToken(KeyboardToken)+0x333>
c0015cc9:	a1 84 f6 02 c0       	mov    eax,ds:0xc002f684
c0015cce:	0f b6 c0             	movzx  eax,al
c0015cd1:	83 ec 0c             	sub    esp,0xc
c0015cd4:	50                   	push   eax
c0015cd5:	e8 16 fc ff ff       	call   c00158f0 <sendKeyToTerminal(unsigned char)>
c0015cda:	83 c4 10             	add    esp,0x10
c0015cdd:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015ce1:	c7 05 84 f6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f684,0x0
c0015ceb:	eb 34                	jmp    c0015d21 <sendKeyboardToken(KeyboardToken)+0x373>
c0015ced:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cf0:	66 3d 01 01          	cmp    ax,0x101
c0015cf4:	75 2b                	jne    c0015d21 <sendKeyboardToken(KeyboardToken)+0x373>
c0015cf6:	a1 84 f6 02 c0       	mov    eax,ds:0xc002f684
c0015cfb:	85 c0                	test   eax,eax
c0015cfd:	74 18                	je     c0015d17 <sendKeyboardToken(KeyboardToken)+0x369>
c0015cff:	a1 84 f6 02 c0       	mov    eax,ds:0xc002f684
c0015d04:	0f b6 c0             	movzx  eax,al
c0015d07:	83 ec 0c             	sub    esp,0xc
c0015d0a:	50                   	push   eax
c0015d0b:	e8 e0 fb ff ff       	call   c00158f0 <sendKeyToTerminal(unsigned char)>
c0015d10:	83 c4 10             	add    esp,0x10
c0015d13:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015d17:	c7 05 84 f6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f684,0x0
c0015d21:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015d24:	83 f0 01             	xor    eax,0x1
c0015d27:	84 c0                	test   al,al
c0015d29:	74 4c                	je     c0015d77 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015d2b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015d2e:	83 f0 01             	xor    eax,0x1
c0015d31:	84 c0                	test   al,al
c0015d33:	74 42                	je     c0015d77 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015d35:	a0 80 f3 02 c0       	mov    al,ds:0xc002f380
c0015d3a:	83 f0 01             	xor    eax,0x1
c0015d3d:	84 c0                	test   al,al
c0015d3f:	74 36                	je     c0015d77 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015d41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d44:	66 83 f8 1f          	cmp    ax,0x1f
c0015d48:	76 09                	jbe    c0015d53 <sendKeyboardToken(KeyboardToken)+0x3a5>
c0015d4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d4d:	66 83 f8 7e          	cmp    ax,0x7e
c0015d51:	76 12                	jbe    c0015d65 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015d53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d56:	66 83 f8 0a          	cmp    ax,0xa
c0015d5a:	74 09                	je     c0015d65 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015d5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d5f:	66 83 f8 08          	cmp    ax,0x8
c0015d63:	75 12                	jne    c0015d77 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015d65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d68:	0f b6 c0             	movzx  eax,al
c0015d6b:	83 ec 0c             	sub    esp,0xc
c0015d6e:	50                   	push   eax
c0015d6f:	e8 7c fb ff ff       	call   c00158f0 <sendKeyToTerminal(unsigned char)>
c0015d74:	83 c4 10             	add    esp,0x10
c0015d77:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015d7a:	83 f0 01             	xor    eax,0x1
c0015d7d:	84 c0                	test   al,al
c0015d7f:	74 4f                	je     c0015dd0 <sendKeyboardToken(KeyboardToken)+0x422>
c0015d81:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015d84:	83 f0 01             	xor    eax,0x1
c0015d87:	84 c0                	test   al,al
c0015d89:	74 45                	je     c0015dd0 <sendKeyboardToken(KeyboardToken)+0x422>
c0015d8b:	a0 80 f3 02 c0       	mov    al,ds:0xc002f380
c0015d90:	84 c0                	test   al,al
c0015d92:	74 3c                	je     c0015dd0 <sendKeyboardToken(KeyboardToken)+0x422>
c0015d94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d97:	66 83 f8 3f          	cmp    ax,0x3f
c0015d9b:	76 33                	jbe    c0015dd0 <sendKeyboardToken(KeyboardToken)+0x422>
c0015d9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015da0:	66 83 f8 7f          	cmp    ax,0x7f
c0015da4:	77 2a                	ja     c0015dd0 <sendKeyboardToken(KeyboardToken)+0x422>
c0015da6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015da9:	88 c2                	mov    dl,al
c0015dab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dae:	66 83 f8 5f          	cmp    ax,0x5f
c0015db2:	76 04                	jbe    c0015db8 <sendKeyboardToken(KeyboardToken)+0x40a>
c0015db4:	b0 20                	mov    al,0x20
c0015db6:	eb 02                	jmp    c0015dba <sendKeyboardToken(KeyboardToken)+0x40c>
c0015db8:	b0 00                	mov    al,0x0
c0015dba:	29 c2                	sub    edx,eax
c0015dbc:	88 d0                	mov    al,dl
c0015dbe:	83 e8 40             	sub    eax,0x40
c0015dc1:	0f b6 c0             	movzx  eax,al
c0015dc4:	83 ec 0c             	sub    esp,0xc
c0015dc7:	50                   	push   eax
c0015dc8:	e8 23 fb ff ff       	call   c00158f0 <sendKeyToTerminal(unsigned char)>
c0015dcd:	83 c4 10             	add    esp,0x10
c0015dd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dd3:	66 3d 00 03          	cmp    ax,0x300
c0015dd7:	75 0f                	jne    c0015de8 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015dd9:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015ddc:	83 f0 01             	xor    eax,0x1
c0015ddf:	84 c0                	test   al,al
c0015de1:	74 05                	je     c0015de8 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015de3:	e8 4c aa ff ff       	call   c0010834 <doTerminalCycle()>
c0015de8:	90                   	nop
c0015de9:	c9                   	leave  
c0015dea:	c3                   	ret    

c0015deb <clearInternalKeybuffer(VgaText*)>:
c0015deb:	55                   	push   ebp
c0015dec:	89 e5                	mov    ebp,esp
c0015dee:	83 ec 08             	sub    esp,0x8
c0015df1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015df4:	05 98 01 00 00       	add    eax,0x198
c0015df9:	83 ec 0c             	sub    esp,0xc
c0015dfc:	50                   	push   eax
c0015dfd:	e8 6a a9 fe ff       	call   c000076c <strlen>
c0015e02:	83 c4 10             	add    esp,0x10
c0015e05:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015e08:	81 c2 98 01 00 00    	add    edx,0x198
c0015e0e:	83 ec 04             	sub    esp,0x4
c0015e11:	50                   	push   eax
c0015e12:	6a 00                	push   0x0
c0015e14:	52                   	push   edx
c0015e15:	e8 36 a9 fe ff       	call   c0000750 <memset>
c0015e1a:	83 c4 10             	add    esp,0x10
c0015e1d:	90                   	nop
c0015e1e:	c9                   	leave  
c0015e1f:	c3                   	ret    

c0015e20 <readKeyboard(VgaText*, char*, unsigned long)>:
c0015e20:	55                   	push   ebp
c0015e21:	89 e5                	mov    ebp,esp
c0015e23:	83 ec 18             	sub    esp,0x18
c0015e26:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c0015e2b:	85 c0                	test   eax,eax
c0015e2d:	74 2a                	je     c0015e59 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0015e2f:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0015e35:	8b 0d 68 f2 02 c0    	mov    ecx,DWORD PTR ds:0xc002f268
c0015e3b:	83 ec 04             	sub    esp,0x4
c0015e3e:	68 80 f2 02 c0       	push   0xc002f280
c0015e43:	83 ec 08             	sub    esp,0x8
c0015e46:	89 e2                	mov    edx,esp
c0015e48:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015e4b:	89 02                	mov    DWORD PTR [edx],eax
c0015e4d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015e50:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015e54:	ff d1                	call   ecx
c0015e56:	83 c4 10             	add    esp,0x10
c0015e59:	83 ec 0c             	sub    esp,0xc
c0015e5c:	68 5b bb 02 c0       	push   0xc002bb5b
c0015e61:	e8 05 cb ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0015e66:	83 c4 10             	add    esp,0x10
c0015e69:	fb                   	sti    
c0015e6a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015e71:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015e75:	0f 84 a1 00 00 00    	je     c0015f1c <readKeyboard(VgaText*, char*, unsigned long)+0xfc>
c0015e7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e7e:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015e84:	84 c0                	test   al,al
c0015e86:	75 28                	jne    c0015eb0 <readKeyboard(VgaText*, char*, unsigned long)+0x90>
c0015e88:	fa                   	cli    
c0015e89:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c0015e8e:	40                   	inc    eax
c0015e8f:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c0015e94:	e8 bb 82 00 00       	call   c001e154 <schedule()>
c0015e99:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c0015e9e:	48                   	dec    eax
c0015e9f:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c0015ea4:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c0015ea9:	85 c0                	test   eax,eax
c0015eab:	75 ce                	jne    c0015e7b <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c0015ead:	fb                   	sti    
c0015eae:	eb cb                	jmp    c0015e7b <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c0015eb0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015eb3:	8d 50 01             	lea    edx,[eax+0x1]
c0015eb6:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015eb9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015ebc:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0015ec2:	88 10                	mov    BYTE PTR [eax],dl
c0015ec4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ec7:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015ecd:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015ed0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ed3:	05 98 01 00 00       	add    eax,0x198
c0015ed8:	83 ec 0c             	sub    esp,0xc
c0015edb:	50                   	push   eax
c0015edc:	e8 8b a8 fe ff       	call   c000076c <strlen>
c0015ee1:	83 c4 10             	add    esp,0x10
c0015ee4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015ee7:	81 c2 98 01 00 00    	add    edx,0x198
c0015eed:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015ef0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015ef3:	81 c2 98 01 00 00    	add    edx,0x198
c0015ef9:	83 ec 04             	sub    esp,0x4
c0015efc:	50                   	push   eax
c0015efd:	51                   	push   ecx
c0015efe:	52                   	push   edx
c0015eff:	e8 84 a7 fe ff       	call   c0000688 <memmove>
c0015f04:	83 c4 10             	add    esp,0x10
c0015f07:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015f0a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015f0d:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015f11:	0f 85 5a ff ff ff    	jne    c0015e71 <readKeyboard(VgaText*, char*, unsigned long)+0x51>
c0015f17:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015f1a:	eb 03                	jmp    c0015f1f <readKeyboard(VgaText*, char*, unsigned long)+0xff>
c0015f1c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015f1f:	c9                   	leave  
c0015f20:	c3                   	ret    
c0015f21:	90                   	nop

c0015f22 <Keyboard::Keyboard(char const*)>:
c0015f22:	83 ec 0c             	sub    esp,0xc
c0015f25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f29:	83 ec 08             	sub    esp,0x8
c0015f2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f30:	50                   	push   eax
c0015f31:	e8 72 e0 ff ff       	call   c0013fa8 <Device::Device(char const*)>
c0015f36:	83 c4 10             	add    esp,0x10
c0015f39:	ba 7c bb 02 c0       	mov    edx,0xc002bb7c
c0015f3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f42:	89 10                	mov    DWORD PTR [eax],edx
c0015f44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f48:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015f52:	c6 05 64 f2 02 c0 01 	mov    BYTE PTR ds:0xc002f264,0x1
c0015f59:	90                   	nop
c0015f5a:	83 c4 0c             	add    esp,0xc
c0015f5d:	c3                   	ret    

c0015f5e <Keyboard::~Keyboard()>:
c0015f5e:	83 ec 0c             	sub    esp,0xc
c0015f61:	ba 7c bb 02 c0       	mov    edx,0xc002bb7c
c0015f66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f6a:	89 10                	mov    DWORD PTR [eax],edx
c0015f6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f70:	83 ec 0c             	sub    esp,0xc
c0015f73:	50                   	push   eax
c0015f74:	e8 f9 dc ff ff       	call   c0013c72 <Device::~Device()>
c0015f79:	83 c4 10             	add    esp,0x10
c0015f7c:	90                   	nop
c0015f7d:	83 c4 0c             	add    esp,0xc
c0015f80:	c3                   	ret    
c0015f81:	90                   	nop

c0015f82 <Keyboard::~Keyboard()>:
c0015f82:	83 ec 0c             	sub    esp,0xc
c0015f85:	83 ec 0c             	sub    esp,0xc
c0015f88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f8c:	e8 cd ff ff ff       	call   c0015f5e <Keyboard::~Keyboard()>
c0015f91:	83 c4 10             	add    esp,0x10
c0015f94:	83 ec 08             	sub    esp,0x8
c0015f97:	68 5c 01 00 00       	push   0x15c
c0015f9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015fa0:	e8 e6 c8 ff ff       	call   c001288b <operator delete(void*, unsigned long)>
c0015fa5:	83 c4 10             	add    esp,0x10
c0015fa8:	83 c4 0c             	add    esp,0xc
c0015fab:	c3                   	ret    

c0015fac <LogicalDisk::close(int, int, void*)>:
c0015fac:	83 c8 ff             	or     eax,0xffffffff
c0015faf:	c3                   	ret    

c0015fb0 <LogicalDisk::~LogicalDisk()>:
c0015fb0:	83 ec 0c             	sub    esp,0xc
c0015fb3:	ba 2c bc 02 c0       	mov    edx,0xc002bc2c
c0015fb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fbc:	89 10                	mov    DWORD PTR [eax],edx
c0015fbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fc2:	83 ec 0c             	sub    esp,0xc
c0015fc5:	50                   	push   eax
c0015fc6:	e8 a7 dc ff ff       	call   c0013c72 <Device::~Device()>
c0015fcb:	83 c4 10             	add    esp,0x10
c0015fce:	90                   	nop
c0015fcf:	83 c4 0c             	add    esp,0xc
c0015fd2:	c3                   	ret    
c0015fd3:	90                   	nop

c0015fd4 <LogicalDisk::~LogicalDisk()>:
c0015fd4:	83 ec 0c             	sub    esp,0xc
c0015fd7:	83 ec 0c             	sub    esp,0xc
c0015fda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015fde:	e8 cd ff ff ff       	call   c0015fb0 <LogicalDisk::~LogicalDisk()>
c0015fe3:	83 c4 10             	add    esp,0x10
c0015fe6:	83 ec 08             	sub    esp,0x8
c0015fe9:	68 74 01 00 00       	push   0x174
c0015fee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015ff2:	e8 94 c8 ff ff       	call   c001288b <operator delete(void*, unsigned long)>
c0015ff7:	83 c4 10             	add    esp,0x10
c0015ffa:	83 c4 0c             	add    esp,0xc
c0015ffd:	c3                   	ret    

c0015ffe <LogicalDisk::open(int, int, void*)>:
c0015ffe:	83 ec 18             	sub    esp,0x18
c0016001:	68 a8 bb 02 c0       	push   0xc002bba8
c0016006:	e8 96 43 00 00       	call   c001a3a1 <Krnl::panic(char const*)>
c001600b:	83 c8 ff             	or     eax,0xffffffff
c001600e:	83 c4 1c             	add    esp,0x1c
c0016011:	c3                   	ret    

c0016012 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0016012:	53                   	push   ebx
c0016013:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016017:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001601b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001601f:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0016025:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c001602b:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0016031:	77 10                	ja     c0016043 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0016033:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0016039:	89 d3                	mov    ebx,edx
c001603b:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0016041:	72 05                	jb     c0016048 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0016043:	83 c8 ff             	or     eax,0xffffffff
c0016046:	89 c2                	mov    edx,eax
c0016048:	5b                   	pop    ebx
c0016049:	c3                   	ret    

c001604a <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001604a:	56                   	push   esi
c001604b:	83 c8 ff             	or     eax,0xffffffff
c001604e:	53                   	push   ebx
c001604f:	89 c2                	mov    edx,eax
c0016051:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016055:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0016059:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001605d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016063:	77 27                	ja     c001608c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016065:	89 d8                	mov    eax,ebx
c0016067:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001606d:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0016073:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016078:	89 c2                	mov    edx,eax
c001607a:	73 10                	jae    c001608c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001607c:	89 c8                	mov    eax,ecx
c001607e:	89 da                	mov    edx,ebx
c0016080:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0016086:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001608c:	5b                   	pop    ebx
c001608d:	5e                   	pop    esi
c001608e:	c3                   	ret    
c001608f:	90                   	nop

c0016090 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016090:	83 ec 1c             	sub    esp,0x1c
c0016093:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016097:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001609b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001609f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00160a3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00160a7:	89 04 24             	mov    DWORD PTR [esp],eax
c00160aa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00160ae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00160b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00160b6:	83 ec 08             	sub    esp,0x8
c00160b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00160bd:	50                   	push   eax
c00160be:	e8 e5 de ff ff       	call   c0013fa8 <Device::Device(char const*)>
c00160c3:	83 c4 10             	add    esp,0x10
c00160c6:	ba 2c bc 02 c0       	mov    edx,0xc002bc2c
c00160cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00160cf:	89 10                	mov    DWORD PTR [eax],edx
c00160d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00160d5:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00160dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00160e0:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00160e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00160eb:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00160f5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00160f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00160fd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016101:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0016107:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001610d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016111:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016114:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016118:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001611e:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0016124:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016128:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001612c:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0016132:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016136:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016140:	90                   	nop
c0016141:	83 c4 1c             	add    esp,0x1c
c0016144:	c3                   	ret    
c0016145:	90                   	nop

c0016146 <LogicalDisk::assignDriveLetter()>:
c0016146:	55                   	push   ebp
c0016147:	57                   	push   edi
c0016148:	56                   	push   esi
c0016149:	53                   	push   ebx
c001614a:	83 ec 14             	sub    esp,0x14
c001614d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016151:	8b 3d a0 f6 02 c0    	mov    edi,DWORD PTR ds:0xc002f6a0
c0016157:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001615d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0016161:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0016167:	8b 3d a4 f6 02 c0    	mov    edi,DWORD PTR ds:0xc002f6a4
c001616d:	3c 01                	cmp    al,0x1
c001616f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0016173:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016177:	19 c0                	sbb    eax,eax
c0016179:	83 e0 02             	and    eax,0x2
c001617c:	83 c0 41             	add    eax,0x41
c001617f:	0f be e8             	movsx  ebp,al
c0016182:	3c 43                	cmp    al,0x43
c0016184:	75 10                	jne    c0016196 <LogicalDisk::assignDriveLetter()+0x50>
c0016186:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001618d:	75 5d                	jne    c00161ec <LogicalDisk::assignDriveLetter()+0xa6>
c001618f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0016194:	75 56                	jne    c00161ec <LogicalDisk::assignDriveLetter()+0xa6>
c0016196:	8d 75 bf             	lea    esi,[ebp-0x41]
c0016199:	ba 01 00 00 00       	mov    edx,0x1
c001619e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00161a2:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00161a6:	d3 e2                	shl    edx,cl
c00161a8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00161ac:	89 d7                	mov    edi,edx
c00161ae:	89 d6                	mov    esi,edx
c00161b0:	c1 ff 1f             	sar    edi,0x1f
c00161b3:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c00161b7:	21 f9                	and    ecx,edi
c00161b9:	09 d1                	or     ecx,edx
c00161bb:	75 2f                	jne    c00161ec <LogicalDisk::assignDriveLetter()+0xa6>
c00161bd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00161c1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00161c5:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00161cb:	09 f2                	or     edx,esi
c00161cd:	89 15 a0 f6 02 c0    	mov    DWORD PTR ds:0xc002f6a0,edx
c00161d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00161d7:	09 fa                	or     edx,edi
c00161d9:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00161dd:	89 15 a4 f6 02 c0    	mov    DWORD PTR ds:0xc002f6a4,edx
c00161e3:	89 1c bd c0 f6 02 c0 	mov    DWORD PTR [edi*4-0x3ffd0940],ebx
c00161ea:	eb 08                	jmp    c00161f4 <LogicalDisk::assignDriveLetter()+0xae>
c00161ec:	45                   	inc    ebp
c00161ed:	40                   	inc    eax
c00161ee:	3c 5b                	cmp    al,0x5b
c00161f0:	75 90                	jne    c0016182 <LogicalDisk::assignDriveLetter()+0x3c>
c00161f2:	31 c0                	xor    eax,eax
c00161f4:	83 c4 14             	add    esp,0x14
c00161f7:	5b                   	pop    ebx
c00161f8:	5e                   	pop    esi
c00161f9:	5f                   	pop    edi
c00161fa:	5d                   	pop    ebp
c00161fb:	c3                   	ret    

c00161fc <LogicalDisk::mount()>:
c00161fc:	56                   	push   esi
c00161fd:	53                   	push   ebx
c00161fe:	50                   	push   eax
c00161ff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016203:	8b 1d 34 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f234
c0016209:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0016213:	85 db                	test   ebx,ebx
c0016215:	74 50                	je     c0016267 <LogicalDisk::mount()+0x6b>
c0016217:	50                   	push   eax
c0016218:	50                   	push   eax
c0016219:	ff 35 e8 25 03 c0    	push   DWORD PTR ds:0xc00325e8
c001621f:	68 cc bb 02 c0       	push   0xc002bbcc
c0016224:	e8 42 c7 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0016229:	83 c4 0c             	add    esp,0xc
c001622c:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0016233:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016235:	83 e8 41             	sub    eax,0x41
c0016238:	50                   	push   eax
c0016239:	56                   	push   esi
c001623a:	53                   	push   ebx
c001623b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001623e:	83 c4 10             	add    esp,0x10
c0016241:	84 c0                	test   al,al
c0016243:	74 08                	je     c001624d <LogicalDisk::mount()+0x51>
c0016245:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c001624b:	eb 1c                	jmp    c0016269 <LogicalDisk::mount()+0x6d>
c001624d:	51                   	push   ecx
c001624e:	51                   	push   ecx
c001624f:	ff 35 e8 25 03 c0    	push   DWORD PTR ds:0xc00325e8
c0016255:	68 e7 bb 02 c0       	push   0xc002bbe7
c001625a:	e8 0c c7 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001625f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016262:	83 c4 10             	add    esp,0x10
c0016265:	eb ac                	jmp    c0016213 <LogicalDisk::mount()+0x17>
c0016267:	31 c0                	xor    eax,eax
c0016269:	5a                   	pop    edx
c001626a:	5b                   	pop    ebx
c001626b:	5e                   	pop    esi
c001626c:	c3                   	ret    
c001626d:	90                   	nop

c001626e <LogicalDisk::unmount()>:
c001626e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016272:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001627c:	c3                   	ret    
c001627d:	90                   	nop

c001627e <LogicalDisk::eject()>:
c001627e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016282:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016288:	8b 10                	mov    edx,DWORD PTR [eax]
c001628a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001628e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0016291:	90                   	nop

c0016292 <LogicalDisk::unassignDriveLetter()>:
c0016292:	57                   	push   edi
c0016293:	56                   	push   esi
c0016294:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016298:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001629f:	84 c9                	test   cl,cl
c00162a1:	75 0f                	jne    c00162b2 <LogicalDisk::unassignDriveLetter()+0x20>
c00162a3:	c7 44 24 0c 02 bc 02 c0 	mov    DWORD PTR [esp+0xc],0xc002bc02
c00162ab:	5e                   	pop    esi
c00162ac:	5f                   	pop    edi
c00162ad:	e9 ef 40 00 00       	jmp    c001a3a1 <Krnl::panic(char const*)>
c00162b2:	83 e9 41             	sub    ecx,0x41
c00162b5:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00162bc:	b8 01 00 00 00       	mov    eax,0x1
c00162c1:	c7 04 8d c0 f6 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd0940],0x0
c00162cc:	d3 e0                	shl    eax,cl
c00162ce:	89 c7                	mov    edi,eax
c00162d0:	f7 d0                	not    eax
c00162d2:	c1 ff 1f             	sar    edi,0x1f
c00162d5:	21 05 a0 f6 02 c0    	and    DWORD PTR ds:0xc002f6a0,eax
c00162db:	89 fe                	mov    esi,edi
c00162dd:	f7 d6                	not    esi
c00162df:	21 35 a4 f6 02 c0    	and    DWORD PTR ds:0xc002f6a4,esi
c00162e5:	5e                   	pop    esi
c00162e6:	5f                   	pop    edi
c00162e7:	c3                   	ret    

c00162e8 <LogicalDisk::read(unsigned long long, int, void*)>:
c00162e8:	57                   	push   edi
c00162e9:	56                   	push   esi
c00162ea:	53                   	push   ebx
c00162eb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00162ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00162f3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00162f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00162fb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016301:	77 41                	ja     c0016344 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016303:	99                   	cdq    
c0016304:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001630a:	01 c8                	add    eax,ecx
c001630c:	11 da                	adc    edx,ebx
c001630e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016314:	19 d7                	sbb    edi,edx
c0016316:	72 33                	jb     c001634b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0016318:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001631e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016324:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016328:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001632c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016332:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016338:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001633c:	5b                   	pop    ebx
c001633d:	5e                   	pop    esi
c001633e:	5f                   	pop    edi
c001633f:	e9 ec 0a 00 00       	jmp    c0016e30 <VCache::read(unsigned long long, int, void*)>
c0016344:	b8 05 00 00 00       	mov    eax,0x5
c0016349:	eb 05                	jmp    c0016350 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001634b:	b8 07 00 00 00       	mov    eax,0x7
c0016350:	5b                   	pop    ebx
c0016351:	5e                   	pop    esi
c0016352:	5f                   	pop    edi
c0016353:	c3                   	ret    

c0016354 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016354:	57                   	push   edi
c0016355:	56                   	push   esi
c0016356:	53                   	push   ebx
c0016357:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001635b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001635f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016363:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016367:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001636d:	77 41                	ja     c00163b0 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001636f:	99                   	cdq    
c0016370:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016376:	01 c8                	add    eax,ecx
c0016378:	11 da                	adc    edx,ebx
c001637a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016380:	19 d7                	sbb    edi,edx
c0016382:	72 33                	jb     c00163b7 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016384:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001638a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016390:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016394:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016398:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001639e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00163a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00163a8:	5b                   	pop    ebx
c00163a9:	5e                   	pop    esi
c00163aa:	5f                   	pop    edi
c00163ab:	e9 96 09 00 00       	jmp    c0016d46 <VCache::write(unsigned long long, int, void*)>
c00163b0:	b8 05 00 00 00       	mov    eax,0x5
c00163b5:	eb 05                	jmp    c00163bc <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00163b7:	b8 07 00 00 00       	mov    eax,0x7
c00163bc:	5b                   	pop    ebx
c00163bd:	5e                   	pop    esi
c00163be:	5f                   	pop    edi
c00163bf:	c3                   	ret    

c00163c0 <Mouse::Mouse(char const*)>:
c00163c0:	83 ec 0c             	sub    esp,0xc
c00163c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163c7:	83 ec 08             	sub    esp,0x8
c00163ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163ce:	50                   	push   eax
c00163cf:	e8 d4 db ff ff       	call   c0013fa8 <Device::Device(char const*)>
c00163d4:	83 c4 10             	add    esp,0x10
c00163d7:	ba 58 bc 02 c0       	mov    edx,0xc002bc58
c00163dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163e0:	89 10                	mov    DWORD PTR [eax],edx
c00163e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163e6:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00163f0:	90                   	nop
c00163f1:	83 c4 0c             	add    esp,0xc
c00163f4:	c3                   	ret    
c00163f5:	90                   	nop

c00163f6 <Mouse::~Mouse()>:
c00163f6:	83 ec 0c             	sub    esp,0xc
c00163f9:	ba 58 bc 02 c0       	mov    edx,0xc002bc58
c00163fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016402:	89 10                	mov    DWORD PTR [eax],edx
c0016404:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016408:	83 ec 0c             	sub    esp,0xc
c001640b:	50                   	push   eax
c001640c:	e8 61 d8 ff ff       	call   c0013c72 <Device::~Device()>
c0016411:	83 c4 10             	add    esp,0x10
c0016414:	90                   	nop
c0016415:	83 c4 0c             	add    esp,0xc
c0016418:	c3                   	ret    
c0016419:	90                   	nop

c001641a <Mouse::~Mouse()>:
c001641a:	83 ec 0c             	sub    esp,0xc
c001641d:	83 ec 0c             	sub    esp,0xc
c0016420:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016424:	e8 cd ff ff ff       	call   c00163f6 <Mouse::~Mouse()>
c0016429:	83 c4 10             	add    esp,0x10
c001642c:	83 ec 08             	sub    esp,0x8
c001642f:	68 58 01 00 00       	push   0x158
c0016434:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016438:	e8 4e c4 ff ff       	call   c001288b <operator delete(void*, unsigned long)>
c001643d:	83 c4 10             	add    esp,0x10
c0016440:	83 c4 0c             	add    esp,0xc
c0016443:	c3                   	ret    

c0016444 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016444:	55                   	push   ebp
c0016445:	57                   	push   edi
c0016446:	56                   	push   esi
c0016447:	53                   	push   ebx
c0016448:	81 ec 20 01 00 00    	sub    esp,0x120
c001644e:	8b b4 24 38 01 00 00 	mov    esi,DWORD PTR [esp+0x138]
c0016455:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001645c:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0016463:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c001646a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001646e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016472:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016476:	56                   	push   esi
c0016477:	68 7c bc 02 c0       	push   0xc002bc7c
c001647c:	e8 ea c4 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0016481:	58                   	pop    eax
c0016482:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016489:	e8 16 dc ff ff       	call   c00140a4 <Device::getName()>
c001648e:	5a                   	pop    edx
c001648f:	59                   	pop    ecx
c0016490:	50                   	push   eax
c0016491:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c0016495:	53                   	push   ebx
c0016496:	e8 71 a3 fe ff       	call   c000080c <strcpy>
c001649b:	5d                   	pop    ebp
c001649c:	58                   	pop    eax
c001649d:	68 ad bc 02 c0       	push   0xc002bcad
c00164a2:	53                   	push   ebx
c00164a3:	e8 a4 a4 fe ff       	call   c000094c <strcat>
c00164a8:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00164af:	e8 d8 93 ff ff       	call   c000f88c <malloc>
c00164b4:	83 c4 0c             	add    esp,0xc
c00164b7:	89 c5                	mov    ebp,eax
c00164b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00164bd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00164c1:	57                   	push   edi
c00164c2:	56                   	push   esi
c00164c3:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00164ca:	53                   	push   ebx
c00164cb:	50                   	push   eax
c00164cc:	e8 bf fb ff ff       	call   c0016090 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00164d1:	83 c4 14             	add    esp,0x14
c00164d4:	55                   	push   ebp
c00164d5:	e8 6c fc ff ff       	call   c0016146 <LogicalDisk::assignDriveLetter()>
c00164da:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00164dd:	0f be d8             	movsx  ebx,al
c00164e0:	e8 17 fd ff ff       	call   c00161fc <LogicalDisk::mount()>
c00164e5:	58                   	pop    eax
c00164e6:	5a                   	pop    edx
c00164e7:	55                   	push   ebp
c00164e8:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00164ef:	e8 b0 d8 ff ff       	call   c0013da4 <Device::addChild(Device*)>
c00164f4:	59                   	pop    ecx
c00164f5:	5e                   	pop    esi
c00164f6:	53                   	push   ebx
c00164f7:	68 b8 bc 02 c0       	push   0xc002bcb8
c00164fc:	e8 6a c4 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0016501:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016507:	5b                   	pop    ebx
c0016508:	5e                   	pop    esi
c0016509:	5f                   	pop    edi
c001650a:	5d                   	pop    ebp
c001650b:	c3                   	ret    

c001650c <createPartitionsForDisk(PhysicalDisk*)>:
c001650c:	55                   	push   ebp
c001650d:	57                   	push   edi
c001650e:	56                   	push   esi
c001650f:	53                   	push   ebx
c0016510:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016516:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001651d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016523:	3d 00 02 00 00       	cmp    eax,0x200
c0016528:	74 27                	je     c0016551 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001652a:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016530:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016536:	83 ec 10             	sub    esp,0x10
c0016539:	0f a4 f7 0a          	shld   edi,esi,0xa
c001653d:	99                   	cdq    
c001653e:	c1 e6 0a             	shl    esi,0xa
c0016541:	52                   	push   edx
c0016542:	89 fd                	mov    ebp,edi
c0016544:	50                   	push   eax
c0016545:	55                   	push   ebp
c0016546:	56                   	push   esi
c0016547:	e8 48 0d 01 00       	call   c0027294 <__udivdi3>
c001654c:	e9 b1 00 00 00       	jmp    c0016602 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016551:	83 ec 0c             	sub    esp,0xc
c0016554:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016556:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001655a:	56                   	push   esi
c001655b:	6a 01                	push   0x1
c001655d:	6a 00                	push   0x0
c001655f:	6a 00                	push   0x0
c0016561:	53                   	push   ebx
c0016562:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016565:	83 c4 20             	add    esp,0x20
c0016568:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016570:	75 0a                	jne    c001657c <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016572:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001657a:	74 2c                	je     c00165a8 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001657c:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016582:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016588:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001658e:	83 ec 10             	sub    esp,0x10
c0016591:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016595:	89 f7                	mov    edi,esi
c0016597:	c1 e0 0a             	shl    eax,0xa
c001659a:	c1 ff 1f             	sar    edi,0x1f
c001659d:	57                   	push   edi
c001659e:	56                   	push   esi
c001659f:	52                   	push   edx
c00165a0:	50                   	push   eax
c00165a1:	e8 ee 0c 01 00       	call   c0027294 <__udivdi3>
c00165a6:	eb 5a                	jmp    c0016602 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00165a8:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00165af:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00165b6:	83 e1 7f             	and    ecx,0x7f
c00165b9:	83 e0 7f             	and    eax,0x7f
c00165bc:	01 c1                	add    ecx,eax
c00165be:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00165c5:	83 e0 7f             	and    eax,0x7f
c00165c8:	01 c1                	add    ecx,eax
c00165ca:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00165d1:	83 e0 7f             	and    eax,0x7f
c00165d4:	00 c1                	add    cl,al
c00165d6:	74 41                	je     c0016619 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00165d8:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00165de:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00165e4:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00165ea:	83 ec 10             	sub    esp,0x10
c00165ed:	0f a4 c2 0a          	shld   edx,eax,0xa
c00165f1:	89 f7                	mov    edi,esi
c00165f3:	c1 e0 0a             	shl    eax,0xa
c00165f6:	c1 ff 1f             	sar    edi,0x1f
c00165f9:	57                   	push   edi
c00165fa:	56                   	push   esi
c00165fb:	52                   	push   edx
c00165fc:	50                   	push   eax
c00165fd:	e8 92 0c 01 00       	call   c0027294 <__udivdi3>
c0016602:	83 c4 14             	add    esp,0x14
c0016605:	52                   	push   edx
c0016606:	50                   	push   eax
c0016607:	6a 00                	push   0x0
c0016609:	6a 00                	push   0x0
c001660b:	53                   	push   ebx
c001660c:	e8 33 fe ff ff       	call   c0016444 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016611:	83 c4 20             	add    esp,0x20
c0016614:	e9 79 01 00 00       	jmp    c0016792 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016619:	89 f0                	mov    eax,esi
c001661b:	31 f6                	xor    esi,esi
c001661d:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016624:	75 02                	jne    c0016628 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016626:	89 f1                	mov    ecx,esi
c0016628:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001662f:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016636:	c1 e2 08             	shl    edx,0x8
c0016639:	c1 e7 10             	shl    edi,0x10
c001663c:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016644:	09 fa                	or     edx,edi
c0016646:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c001664e:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016655:	83 c0 10             	add    eax,0x10
c0016658:	09 fa                	or     edx,edi
c001665a:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016661:	c1 e7 18             	shl    edi,0x18
c0016664:	09 fa                	or     edx,edi
c0016666:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c001666d:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016671:	c1 e7 10             	shl    edi,0x10
c0016674:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001667b:	c1 e2 08             	shl    edx,0x8
c001667e:	09 fa                	or     edx,edi
c0016680:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016687:	09 fa                	or     edx,edi
c0016689:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016690:	c1 e7 18             	shl    edi,0x18
c0016693:	09 fa                	or     edx,edi
c0016695:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016699:	46                   	inc    esi
c001669a:	83 fe 04             	cmp    esi,0x4
c001669d:	0f 85 7a ff ff ff    	jne    c001661d <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00166a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166a7:	83 f0 01             	xor    eax,0x1
c00166aa:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00166ae:	75 57                	jne    c0016707 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00166b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00166b4:	83 f0 01             	xor    eax,0x1
c00166b7:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00166bb:	75 4a                	jne    c0016707 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00166bd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00166c1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00166c9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00166d1:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00166d7:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00166dd:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00166e3:	0f a4 c2 0a          	shld   edx,eax,0xa
c00166e7:	89 f7                	mov    edi,esi
c00166e9:	c1 e0 0a             	shl    eax,0xa
c00166ec:	c1 ff 1f             	sar    edi,0x1f
c00166ef:	57                   	push   edi
c00166f0:	56                   	push   esi
c00166f1:	52                   	push   edx
c00166f2:	50                   	push   eax
c00166f3:	e8 9c 0b 01 00       	call   c0027294 <__udivdi3>
c00166f8:	83 c4 10             	add    esp,0x10
c00166fb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00166ff:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016703:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016707:	84 c9                	test   cl,cl
c0016709:	74 53                	je     c001675e <createPartitionsForDisk(PhysicalDisk*)+0x252>
c001670b:	0f b6 c9             	movzx  ecx,cl
c001670e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016712:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016716:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001671a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001671e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016722:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016726:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c001672a:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c001672e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016732:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016736:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001673a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001673e:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016742:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016746:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c001674a:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c001674e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016752:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016756:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c001675a:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c001675e:	31 ed                	xor    ebp,ebp
c0016760:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016764:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016768:	89 f8                	mov    eax,edi
c001676a:	09 f0                	or     eax,esi
c001676c:	74 1e                	je     c001678c <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001676e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016772:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016776:	89 d1                	mov    ecx,edx
c0016778:	09 c1                	or     ecx,eax
c001677a:	74 10                	je     c001678c <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001677c:	83 ec 0c             	sub    esp,0xc
c001677f:	57                   	push   edi
c0016780:	56                   	push   esi
c0016781:	52                   	push   edx
c0016782:	50                   	push   eax
c0016783:	53                   	push   ebx
c0016784:	e8 bb fc ff ff       	call   c0016444 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016789:	83 c4 20             	add    esp,0x20
c001678c:	45                   	inc    ebp
c001678d:	83 fd 04             	cmp    ebp,0x4
c0016790:	75 ce                	jne    c0016760 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016792:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016798:	5b                   	pop    ebx
c0016799:	5e                   	pop    esi
c001679a:	5f                   	pop    edi
c001679b:	5d                   	pop    ebp
c001679c:	c3                   	ret    
c001679d:	90                   	nop

c001679e <Serial::Serial(char const*)>:
c001679e:	83 ec 0c             	sub    esp,0xc
c00167a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167a5:	83 ec 08             	sub    esp,0x8
c00167a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167ac:	50                   	push   eax
c00167ad:	e8 f6 d7 ff ff       	call   c0013fa8 <Device::Device(char const*)>
c00167b2:	83 c4 10             	add    esp,0x10
c00167b5:	ba e4 bc 02 c0       	mov    edx,0xc002bce4
c00167ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167be:	89 10                	mov    DWORD PTR [eax],edx
c00167c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167c4:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c00167ce:	90                   	nop
c00167cf:	83 c4 0c             	add    esp,0xc
c00167d2:	c3                   	ret    
c00167d3:	90                   	nop

c00167d4 <Serial::~Serial()>:
c00167d4:	83 ec 0c             	sub    esp,0xc
c00167d7:	ba e4 bc 02 c0       	mov    edx,0xc002bce4
c00167dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167e0:	89 10                	mov    DWORD PTR [eax],edx
c00167e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167e6:	83 ec 0c             	sub    esp,0xc
c00167e9:	50                   	push   eax
c00167ea:	e8 83 d4 ff ff       	call   c0013c72 <Device::~Device()>
c00167ef:	83 c4 10             	add    esp,0x10
c00167f2:	90                   	nop
c00167f3:	83 c4 0c             	add    esp,0xc
c00167f6:	c3                   	ret    
c00167f7:	90                   	nop

c00167f8 <Serial::~Serial()>:
c00167f8:	83 ec 0c             	sub    esp,0xc
c00167fb:	83 ec 0c             	sub    esp,0xc
c00167fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016802:	e8 cd ff ff ff       	call   c00167d4 <Serial::~Serial()>
c0016807:	83 c4 10             	add    esp,0x10
c001680a:	83 ec 08             	sub    esp,0x8
c001680d:	68 58 01 00 00       	push   0x158
c0016812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016816:	e8 70 c0 ff ff       	call   c001288b <operator delete(void*, unsigned long)>
c001681b:	83 c4 10             	add    esp,0x10
c001681e:	83 c4 0c             	add    esp,0xc
c0016821:	c3                   	ret    

c0016822 <Timer::Timer(char const*)>:
c0016822:	83 ec 0c             	sub    esp,0xc
c0016825:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016829:	83 ec 08             	sub    esp,0x8
c001682c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016830:	50                   	push   eax
c0016831:	e8 72 d7 ff ff       	call   c0013fa8 <Device::Device(char const*)>
c0016836:	83 c4 10             	add    esp,0x10
c0016839:	ba 28 bd 02 c0       	mov    edx,0xc002bd28
c001683e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016842:	89 10                	mov    DWORD PTR [eax],edx
c0016844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016848:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016852:	90                   	nop
c0016853:	83 c4 0c             	add    esp,0xc
c0016856:	c3                   	ret    
c0016857:	90                   	nop

c0016858 <Timer::~Timer()>:
c0016858:	83 ec 0c             	sub    esp,0xc
c001685b:	ba 28 bd 02 c0       	mov    edx,0xc002bd28
c0016860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016864:	89 10                	mov    DWORD PTR [eax],edx
c0016866:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001686a:	83 ec 0c             	sub    esp,0xc
c001686d:	50                   	push   eax
c001686e:	e8 ff d3 ff ff       	call   c0013c72 <Device::~Device()>
c0016873:	83 c4 10             	add    esp,0x10
c0016876:	90                   	nop
c0016877:	83 c4 0c             	add    esp,0xc
c001687a:	c3                   	ret    
c001687b:	90                   	nop

c001687c <Timer::~Timer()>:
c001687c:	83 ec 0c             	sub    esp,0xc
c001687f:	83 ec 0c             	sub    esp,0xc
c0016882:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016886:	e8 cd ff ff ff       	call   c0016858 <Timer::~Timer()>
c001688b:	83 c4 10             	add    esp,0x10
c001688e:	83 ec 08             	sub    esp,0x8
c0016891:	68 5c 01 00 00       	push   0x15c
c0016896:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001689a:	e8 ec bf ff ff       	call   c001288b <operator delete(void*, unsigned long)>
c001689f:	83 c4 10             	add    esp,0x10
c00168a2:	83 c4 0c             	add    esp,0xc
c00168a5:	c3                   	ret    

c00168a6 <Timer::read()>:
c00168a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00168aa:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00168b0:	c3                   	ret    

c00168b1 <timerHandler(unsigned long long)>:
c00168b1:	55                   	push   ebp
c00168b2:	57                   	push   edi
c00168b3:	56                   	push   esi
c00168b4:	53                   	push   ebx
c00168b5:	83 ec 0c             	sub    esp,0xc
c00168b8:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00168bc:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00168c0:	01 35 30 f7 02 c0    	add    DWORD PTR ds:0xc002f730,esi
c00168c6:	11 3d 34 f7 02 c0    	adc    DWORD PTR ds:0xc002f734,edi
c00168cc:	80 3d cd f0 02 c0 00 	cmp    BYTE PTR ds:0xc002f0cd,0x0
c00168d3:	0f 84 42 01 00 00    	je     c0016a1b <timerHandler(unsigned long long)+0x16a>
c00168d9:	fa                   	cli    
c00168da:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c00168e0:	83 ec 0c             	sub    esp,0xc
c00168e3:	ff 05 e4 25 03 c0    	inc    DWORD PTR ds:0xc00325e4
c00168e9:	68 f8 25 03 c0       	push   0xc00325f8
c00168ee:	e8 27 2a 01 00       	call   c002931a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00168f3:	83 c4 10             	add    esp,0x10
c00168f6:	84 c0                	test   al,al
c00168f8:	0f 85 a2 00 00 00    	jne    c00169a0 <timerHandler(unsigned long long)+0xef>
c00168fe:	83 ec 0c             	sub    esp,0xc
c0016901:	68 f8 25 03 c0       	push   0xc00325f8
c0016906:	e8 2b 2a 01 00       	call   c0029336 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001690b:	83 c4 10             	add    esp,0x10
c001690e:	89 c3                	mov    ebx,eax
c0016910:	83 ec 0c             	sub    esp,0xc
c0016913:	68 f8 25 03 c0       	push   0xc00325f8
c0016918:	e8 19 2a 01 00       	call   c0029336 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001691d:	c7 04 24 f8 25 03 c0 	mov    DWORD PTR [esp],0xc00325f8
c0016924:	89 c5                	mov    ebp,eax
c0016926:	e8 13 2a 01 00       	call   c002933e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001692b:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c001692e:	83 c4 10             	add    esp,0x10
c0016931:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016934:	39 15 30 f7 02 c0    	cmp    DWORD PTR ds:0xc002f730,edx
c001693a:	a1 34 f7 02 c0       	mov    eax,ds:0xc002f734
c001693f:	19 c8                	sbb    eax,ecx
c0016941:	72 21                	jb     c0016964 <timerHandler(unsigned long long)+0xb3>
c0016943:	83 ec 0c             	sub    esp,0xc
c0016946:	55                   	push   ebp
c0016947:	e8 cc 7c 00 00       	call   c001e618 <unblockTask(ThreadControlBlock*)>
c001694c:	83 c4 10             	add    esp,0x10
c001694f:	39 eb                	cmp    ebx,ebp
c0016951:	75 21                	jne    c0016974 <timerHandler(unsigned long long)+0xc3>
c0016953:	83 ec 0c             	sub    esp,0xc
c0016956:	68 f8 25 03 c0       	push   0xc00325f8
c001695b:	e8 d6 29 01 00       	call   c0029336 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016960:	89 c3                	mov    ebx,eax
c0016962:	eb 0d                	jmp    c0016971 <timerHandler(unsigned long long)+0xc0>
c0016964:	50                   	push   eax
c0016965:	50                   	push   eax
c0016966:	55                   	push   ebp
c0016967:	68 f8 25 03 c0       	push   0xc00325f8
c001696c:	e8 7b 2a 01 00       	call   c00293ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016971:	83 c4 10             	add    esp,0x10
c0016974:	83 ec 0c             	sub    esp,0xc
c0016977:	68 f8 25 03 c0       	push   0xc00325f8
c001697c:	e8 99 29 01 00       	call   c002931a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016981:	83 c4 10             	add    esp,0x10
c0016984:	84 c0                	test   al,al
c0016986:	75 18                	jne    c00169a0 <timerHandler(unsigned long long)+0xef>
c0016988:	83 ec 0c             	sub    esp,0xc
c001698b:	68 f8 25 03 c0       	push   0xc00325f8
c0016990:	e8 a1 29 01 00       	call   c0029336 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016995:	83 c4 10             	add    esp,0x10
c0016998:	39 d8                	cmp    eax,ebx
c001699a:	0f 85 70 ff ff ff    	jne    c0016910 <timerHandler(unsigned long long)+0x5f>
c00169a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00169a5:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c00169a9:	74 3d                	je     c00169e8 <timerHandler(unsigned long long)+0x137>
c00169ab:	80 3d cc f0 02 c0 00 	cmp    BYTE PTR ds:0xc002f0cc,0x0
c00169b2:	74 34                	je     c00169e8 <timerHandler(unsigned long long)+0x137>
c00169b4:	fa                   	cli    
c00169b5:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c00169bb:	31 d2                	xor    edx,edx
c00169bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00169c2:	89 f9                	mov    ecx,edi
c00169c4:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c00169c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00169cc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00169cf:	39 c6                	cmp    esi,eax
c00169d1:	19 d1                	sbb    ecx,edx
c00169d3:	72 05                	jb     c00169da <timerHandler(unsigned long long)+0x129>
c00169d5:	e8 7a 77 00 00       	call   c001e154 <schedule()>
c00169da:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c00169df:	48                   	dec    eax
c00169e0:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c00169e5:	75 01                	jne    c00169e8 <timerHandler(unsigned long long)+0x137>
c00169e7:	fb                   	sti    
c00169e8:	a1 e4 25 03 c0       	mov    eax,ds:0xc00325e4
c00169ed:	48                   	dec    eax
c00169ee:	a3 e4 25 03 c0       	mov    ds:0xc00325e4,eax
c00169f3:	75 18                	jne    c0016a0d <timerHandler(unsigned long long)+0x15c>
c00169f5:	83 3d e0 25 03 c0 00 	cmp    DWORD PTR ds:0xc00325e0,0x0
c00169fc:	74 0f                	je     c0016a0d <timerHandler(unsigned long long)+0x15c>
c00169fe:	c7 05 e0 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00325e0,0x0
c0016a08:	e8 47 77 00 00       	call   c001e154 <schedule()>
c0016a0d:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c0016a12:	48                   	dec    eax
c0016a13:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c0016a18:	75 01                	jne    c0016a1b <timerHandler(unsigned long long)+0x16a>
c0016a1a:	fb                   	sti    
c0016a1b:	83 c4 0c             	add    esp,0xc
c0016a1e:	5b                   	pop    ebx
c0016a1f:	5e                   	pop    esi
c0016a20:	5f                   	pop    edi
c0016a21:	5d                   	pop    ebp
c0016a22:	c3                   	ret    

c0016a23 <setupTimer(int)>:
c0016a23:	57                   	push   edi
c0016a24:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c0016a29:	56                   	push   esi
c0016a2a:	53                   	push   ebx
c0016a2b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016a2f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016a35:	83 ec 0c             	sub    esp,0xc
c0016a38:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016a3e:	e8 61 d6 ff ff       	call   c00140a4 <Device::getName()>
c0016a43:	83 c4 10             	add    esp,0x10
c0016a46:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016a49:	0f 85 8d 00 00 00    	jne    c0016adc <setupTimer(int)+0xb9>
c0016a4f:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c0016a54:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016a5b:	74 7f                	je     c0016adc <setupTimer(int)+0xb9>
c0016a5d:	83 ec 0c             	sub    esp,0xc
c0016a60:	68 5c 01 00 00       	push   0x15c
c0016a65:	e8 22 8e ff ff       	call   c000f88c <malloc>
c0016a6a:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a6d:	89 c3                	mov    ebx,eax
c0016a6f:	e8 f8 03 01 00       	call   c0026e6c <PIT::PIT()>
c0016a74:	59                   	pop    ecx
c0016a75:	5f                   	pop    edi
c0016a76:	53                   	push   ebx
c0016a77:	ff 35 c8 f0 02 c0    	push   DWORD PTR ds:0xc002f0c8
c0016a7d:	e8 22 d3 ff ff       	call   c0013da4 <Device::addChild(Device*)>
c0016a82:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a84:	6a 00                	push   0x0
c0016a86:	6a 00                	push   0x0
c0016a88:	56                   	push   esi
c0016a89:	53                   	push   ebx
c0016a8a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016a8d:	83 c4 14             	add    esp,0x14
c0016a90:	68 60 01 00 00       	push   0x160
c0016a95:	e8 f2 8d ff ff       	call   c000f88c <malloc>
c0016a9a:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a9d:	89 c7                	mov    edi,eax
c0016a9f:	e8 78 02 01 00       	call   c0026d1c <APICTimer::APICTimer()>
c0016aa4:	6a 00                	push   0x0
c0016aa6:	6a 00                	push   0x0
c0016aa8:	56                   	push   esi
c0016aa9:	57                   	push   edi
c0016aaa:	e8 6f 01 01 00       	call   c0026c1e <APICTimer::open(int, int, void*)>
c0016aaf:	83 c4 20             	add    esp,0x20
c0016ab2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016ab4:	6a 00                	push   0x0
c0016ab6:	6a 00                	push   0x0
c0016ab8:	6a 00                	push   0x0
c0016aba:	53                   	push   ebx
c0016abb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016abe:	58                   	pop    eax
c0016abf:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c0016ac4:	5a                   	pop    edx
c0016ac5:	57                   	push   edi
c0016ac6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016acc:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016ad2:	e8 cd d2 ff ff       	call   c0013da4 <Device::addChild(Device*)>
c0016ad7:	83 c4 10             	add    esp,0x10
c0016ada:	eb 33                	jmp    c0016b0f <setupTimer(int)+0xec>
c0016adc:	83 ec 0c             	sub    esp,0xc
c0016adf:	68 5c 01 00 00       	push   0x15c
c0016ae4:	e8 a3 8d ff ff       	call   c000f88c <malloc>
c0016ae9:	89 04 24             	mov    DWORD PTR [esp],eax
c0016aec:	89 c3                	mov    ebx,eax
c0016aee:	e8 79 03 01 00       	call   c0026e6c <PIT::PIT()>
c0016af3:	58                   	pop    eax
c0016af4:	5a                   	pop    edx
c0016af5:	53                   	push   ebx
c0016af6:	ff 35 c8 f0 02 c0    	push   DWORD PTR ds:0xc002f0c8
c0016afc:	e8 a3 d2 ff ff       	call   c0013da4 <Device::addChild(Device*)>
c0016b01:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b03:	6a 00                	push   0x0
c0016b05:	6a 00                	push   0x0
c0016b07:	56                   	push   esi
c0016b08:	53                   	push   ebx
c0016b09:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016b0c:	83 c4 20             	add    esp,0x20
c0016b0f:	89 d8                	mov    eax,ebx
c0016b11:	5b                   	pop    ebx
c0016b12:	5e                   	pop    esi
c0016b13:	5f                   	pop    edi
c0016b14:	c3                   	ret    
c0016b15:	90                   	nop

c0016b16 <VCache::VCache(PhysicalDisk*)>:
c0016b16:	53                   	push   ebx
c0016b17:	83 ec 18             	sub    esp,0x18
c0016b1a:	ba 58 bd 02 c0       	mov    edx,0xc002bd58
c0016b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b23:	89 10                	mov    DWORD PTR [eax],edx
c0016b25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b29:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016b30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b34:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016b3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b3f:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016b46:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016b4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b51:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016b58:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016b5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b63:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016b6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b6e:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016b72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b76:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016b7d:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016b84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b88:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016b8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b90:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016b94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b98:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016b9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ba0:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016ba7:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016baf:	83 ec 0c             	sub    esp,0xc
c0016bb2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016bb6:	e8 d1 8c ff ff       	call   c000f88c <malloc>
c0016bbb:	83 c4 10             	add    esp,0x10
c0016bbe:	89 c3                	mov    ebx,eax
c0016bc0:	83 ec 0c             	sub    esp,0xc
c0016bc3:	53                   	push   ebx
c0016bc4:	e8 35 73 00 00       	call   c001defe <Mutex::Mutex()>
c0016bc9:	83 c4 10             	add    esp,0x10
c0016bcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bd0:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bd7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016bdb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016bde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016be2:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016be9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016bed:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016bf3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bf7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016bfa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016bfe:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016c04:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016c0a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016c0e:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016c11:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016c14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c18:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016c1c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016c20:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016c26:	05 00 01 00 00       	add    eax,0x100
c0016c2b:	c1 e0 04             	shl    eax,0x4
c0016c2e:	83 ec 0c             	sub    esp,0xc
c0016c31:	50                   	push   eax
c0016c32:	e8 55 8c ff ff       	call   c000f88c <malloc>
c0016c37:	83 c4 10             	add    esp,0x10
c0016c3a:	89 c2                	mov    edx,eax
c0016c3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c40:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016c43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c47:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016c4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c52:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016c56:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016c5a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016c60:	c1 e0 07             	shl    eax,0x7
c0016c63:	83 ec 0c             	sub    esp,0xc
c0016c66:	50                   	push   eax
c0016c67:	e8 20 8c ff ff       	call   c000f88c <malloc>
c0016c6c:	83 c4 10             	add    esp,0x10
c0016c6f:	89 c2                	mov    edx,eax
c0016c71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c75:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016c78:	90                   	nop
c0016c79:	83 c4 18             	add    esp,0x18
c0016c7c:	5b                   	pop    ebx
c0016c7d:	c3                   	ret    

c0016c7e <VCache::invalidateReadBuffer()>:
c0016c7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c82:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0016c88:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016c8c:	c3                   	ret    
c0016c8d:	90                   	nop

c0016c8e <VCache::writeWriteBuffer()>:
c0016c8e:	53                   	push   ebx
c0016c8f:	83 ec 14             	sub    esp,0x14
c0016c92:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016c96:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016c99:	8b 10                	mov    edx,DWORD PTR [eax]
c0016c9b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016c9e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016ca1:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016ca4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016ca7:	50                   	push   eax
c0016ca8:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016cab:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016cb2:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016cb9:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016cbd:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016cc4:	83 c4 28             	add    esp,0x28
c0016cc7:	5b                   	pop    ebx
c0016cc8:	c3                   	ret    
c0016cc9:	90                   	nop

c0016cca <VCache::~VCache()>:
c0016cca:	83 ec 0c             	sub    esp,0xc
c0016ccd:	ba 58 bd 02 c0       	mov    edx,0xc002bd58
c0016cd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cd6:	89 10                	mov    DWORD PTR [eax],edx
c0016cd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cdc:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016cdf:	84 c0                	test   al,al
c0016ce1:	74 0f                	je     c0016cf2 <VCache::~VCache()+0x28>
c0016ce3:	83 ec 0c             	sub    esp,0xc
c0016ce6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cea:	e8 9f ff ff ff       	call   c0016c8e <VCache::writeWriteBuffer()>
c0016cef:	83 c4 10             	add    esp,0x10
c0016cf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cf6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016cf9:	83 ec 0c             	sub    esp,0xc
c0016cfc:	50                   	push   eax
c0016cfd:	e8 9a 8b ff ff       	call   c000f89c <free>
c0016d02:	83 c4 10             	add    esp,0x10
c0016d05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d09:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016d0c:	83 ec 0c             	sub    esp,0xc
c0016d0f:	50                   	push   eax
c0016d10:	e8 87 8b ff ff       	call   c000f89c <free>
c0016d15:	83 c4 10             	add    esp,0x10
c0016d18:	90                   	nop
c0016d19:	83 c4 0c             	add    esp,0xc
c0016d1c:	c3                   	ret    
c0016d1d:	90                   	nop

c0016d1e <VCache::~VCache()>:
c0016d1e:	83 ec 0c             	sub    esp,0xc
c0016d21:	83 ec 0c             	sub    esp,0xc
c0016d24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d28:	e8 9d ff ff ff       	call   c0016cca <VCache::~VCache()>
c0016d2d:	83 c4 10             	add    esp,0x10
c0016d30:	83 ec 08             	sub    esp,0x8
c0016d33:	6a 44                	push   0x44
c0016d35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d39:	e8 4d bb ff ff       	call   c001288b <operator delete(void*, unsigned long)>
c0016d3e:	83 c4 10             	add    esp,0x10
c0016d41:	83 c4 0c             	add    esp,0xc
c0016d44:	c3                   	ret    
c0016d45:	90                   	nop

c0016d46 <VCache::write(unsigned long long, int, void*)>:
c0016d46:	55                   	push   ebp
c0016d47:	57                   	push   edi
c0016d48:	56                   	push   esi
c0016d49:	53                   	push   ebx
c0016d4a:	83 ec 18             	sub    esp,0x18
c0016d4d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016d51:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016d55:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016d59:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016d5c:	e8 2b 77 00 00       	call   c001e48c <Semaphore::acquire()>
c0016d61:	83 c4 10             	add    esp,0x10
c0016d64:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016d68:	74 0c                	je     c0016d76 <VCache::write(unsigned long long, int, void*)+0x30>
c0016d6a:	83 ec 0c             	sub    esp,0xc
c0016d6d:	53                   	push   ebx
c0016d6e:	e8 0b ff ff ff       	call   c0016c7e <VCache::invalidateReadBuffer()>
c0016d73:	83 c4 10             	add    esp,0x10
c0016d76:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016d7a:	74 5c                	je     c0016dd8 <VCache::write(unsigned long long, int, void*)+0x92>
c0016d7c:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0016d7f:	89 e8                	mov    eax,ebp
c0016d81:	99                   	cdq    
c0016d82:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016d85:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016d88:	89 c1                	mov    ecx,eax
c0016d8a:	89 d0                	mov    eax,edx
c0016d8c:	31 f1                	xor    ecx,esi
c0016d8e:	31 f8                	xor    eax,edi
c0016d90:	09 c1                	or     ecx,eax
c0016d92:	75 38                	jne    c0016dcc <VCache::write(unsigned long long, int, void*)+0x86>
c0016d94:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0016d99:	75 31                	jne    c0016dcc <VCache::write(unsigned long long, int, void*)+0x86>
c0016d9b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016d9e:	89 ef                	mov    edi,ebp
c0016da0:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016da6:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016daa:	0f af f9             	imul   edi,ecx
c0016dad:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0016db0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016db2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016db5:	40                   	inc    eax
c0016db6:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016db9:	83 c0 80             	add    eax,0xffffff80
c0016dbc:	75 5c                	jne    c0016e1a <VCache::write(unsigned long long, int, void*)+0xd4>
c0016dbe:	83 ec 0c             	sub    esp,0xc
c0016dc1:	53                   	push   ebx
c0016dc2:	e8 c7 fe ff ff       	call   c0016c8e <VCache::writeWriteBuffer()>
c0016dc7:	83 c4 10             	add    esp,0x10
c0016dca:	eb 4e                	jmp    c0016e1a <VCache::write(unsigned long long, int, void*)+0xd4>
c0016dcc:	83 ec 0c             	sub    esp,0xc
c0016dcf:	53                   	push   ebx
c0016dd0:	e8 b9 fe ff ff       	call   c0016c8e <VCache::writeWriteBuffer()>
c0016dd5:	83 c4 10             	add    esp,0x10
c0016dd8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016ddb:	83 7c 24 2c 7f       	cmp    DWORD PTR [esp+0x2c],0x7f
c0016de0:	7f 22                	jg     c0016e04 <VCache::write(unsigned long long, int, void*)+0xbe>
c0016de2:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016de5:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016de8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016dec:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016df0:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c0016df3:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0016df6:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016dfc:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016e00:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e02:	eb 16                	jmp    c0016e1a <VCache::write(unsigned long long, int, void*)+0xd4>
c0016e04:	83 ec 0c             	sub    esp,0xc
c0016e07:	8b 10                	mov    edx,DWORD PTR [eax]
c0016e09:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016e0d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016e11:	57                   	push   edi
c0016e12:	56                   	push   esi
c0016e13:	50                   	push   eax
c0016e14:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016e17:	83 c4 20             	add    esp,0x20
c0016e1a:	83 ec 0c             	sub    esp,0xc
c0016e1d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016e20:	e8 a1 7d 00 00       	call   c001ebc6 <Semaphore::release()>
c0016e25:	83 c4 1c             	add    esp,0x1c
c0016e28:	31 c0                	xor    eax,eax
c0016e2a:	5b                   	pop    ebx
c0016e2b:	5e                   	pop    esi
c0016e2c:	5f                   	pop    edi
c0016e2d:	5d                   	pop    ebp
c0016e2e:	c3                   	ret    
c0016e2f:	90                   	nop

c0016e30 <VCache::read(unsigned long long, int, void*)>:
c0016e30:	55                   	push   ebp
c0016e31:	57                   	push   edi
c0016e32:	56                   	push   esi
c0016e33:	53                   	push   ebx
c0016e34:	83 ec 28             	sub    esp,0x28
c0016e37:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016e3b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016e3f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016e43:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016e47:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016e4a:	e8 3d 76 00 00       	call   c001e48c <Semaphore::acquire()>
c0016e4f:	83 c4 10             	add    esp,0x10
c0016e52:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016e56:	74 0c                	je     c0016e64 <VCache::read(unsigned long long, int, void*)+0x34>
c0016e58:	83 ec 0c             	sub    esp,0xc
c0016e5b:	53                   	push   ebx
c0016e5c:	e8 2d fe ff ff       	call   c0016c8e <VCache::writeWriteBuffer()>
c0016e61:	83 c4 10             	add    esp,0x10
c0016e64:	83 fd 01             	cmp    ebp,0x1
c0016e67:	0f 85 80 00 00 00    	jne    c0016eed <VCache::read(unsigned long long, int, void*)+0xbd>
c0016e6d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016e70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016e74:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016e7b:	75 70                	jne    c0016eed <VCache::read(unsigned long long, int, void*)+0xbd>
c0016e7d:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0016e80:	89 e9                	mov    ecx,ebp
c0016e82:	f7 d9                	neg    ecx
c0016e84:	89 c8                	mov    eax,ecx
c0016e86:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016e8a:	c1 f8 1f             	sar    eax,0x1f
c0016e8d:	21 f1                	and    ecx,esi
c0016e8f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e93:	89 c8                	mov    eax,ecx
c0016e95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016e99:	21 f9                	and    ecx,edi
c0016e9b:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016e9f:	89 ca                	mov    edx,ecx
c0016ea1:	74 0a                	je     c0016ead <VCache::read(unsigned long long, int, void*)+0x7d>
c0016ea3:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0016ea6:	75 05                	jne    c0016ead <VCache::read(unsigned long long, int, void*)+0x7d>
c0016ea8:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0016eab:	74 23                	je     c0016ed0 <VCache::read(unsigned long long, int, void*)+0xa0>
c0016ead:	83 ec 0c             	sub    esp,0xc
c0016eb0:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016eb4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016eb8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0016ebb:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0016ebe:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0016ec0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016ec3:	55                   	push   ebp
c0016ec4:	52                   	push   edx
c0016ec5:	50                   	push   eax
c0016ec6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016eca:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016ecd:	83 c4 20             	add    esp,0x20
c0016ed0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016ed3:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016ed7:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016edd:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016ee0:	48                   	dec    eax
c0016ee1:	21 c6                	and    esi,eax
c0016ee3:	0f af f1             	imul   esi,ecx
c0016ee6:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0016ee9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016eeb:	eb 1d                	jmp    c0016f0a <VCache::read(unsigned long long, int, void*)+0xda>
c0016eed:	83 ec 0c             	sub    esp,0xc
c0016ef0:	53                   	push   ebx
c0016ef1:	e8 88 fd ff ff       	call   c0016c7e <VCache::invalidateReadBuffer()>
c0016ef6:	5a                   	pop    edx
c0016ef7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016efa:	8b 10                	mov    edx,DWORD PTR [eax]
c0016efc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016f00:	55                   	push   ebp
c0016f01:	57                   	push   edi
c0016f02:	56                   	push   esi
c0016f03:	50                   	push   eax
c0016f04:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016f07:	83 c4 20             	add    esp,0x20
c0016f0a:	83 ec 0c             	sub    esp,0xc
c0016f0d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016f10:	e8 b1 7c 00 00       	call   c001ebc6 <Semaphore::release()>
c0016f15:	83 c4 2c             	add    esp,0x2c
c0016f18:	31 c0                	xor    eax,eax
c0016f1a:	5b                   	pop    ebx
c0016f1b:	5e                   	pop    esi
c0016f1c:	5f                   	pop    edi
c0016f1d:	5d                   	pop    ebp
c0016f1e:	c3                   	ret    
c0016f1f:	90                   	nop

c0016f20 <Video::putrect(int, int, int, int, unsigned int)>:
c0016f20:	55                   	push   ebp
c0016f21:	57                   	push   edi
c0016f22:	56                   	push   esi
c0016f23:	53                   	push   ebx
c0016f24:	83 ec 1c             	sub    esp,0x1c
c0016f27:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016f2b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016f2f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016f33:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016f37:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f3f:	01 df                	add    edi,ebx
c0016f41:	39 fb                	cmp    ebx,edi
c0016f43:	7d 1f                	jge    c0016f64 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016f45:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016f49:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016f4d:	7d 12                	jge    c0016f61 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016f4f:	8b 16                	mov    edx,DWORD PTR [esi]
c0016f51:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016f55:	53                   	push   ebx
c0016f56:	55                   	push   ebp
c0016f57:	45                   	inc    ebp
c0016f58:	56                   	push   esi
c0016f59:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016f5c:	83 c4 10             	add    esp,0x10
c0016f5f:	eb e8                	jmp    c0016f49 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016f61:	43                   	inc    ebx
c0016f62:	eb dd                	jmp    c0016f41 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016f64:	83 c4 1c             	add    esp,0x1c
c0016f67:	5b                   	pop    ebx
c0016f68:	5e                   	pop    esi
c0016f69:	5f                   	pop    edi
c0016f6a:	5d                   	pop    ebp
c0016f6b:	c3                   	ret    

c0016f6c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016f6c:	55                   	push   ebp
c0016f6d:	57                   	push   edi
c0016f6e:	31 ff                	xor    edi,edi
c0016f70:	56                   	push   esi
c0016f71:	53                   	push   ebx
c0016f72:	83 ec 1c             	sub    esp,0x1c
c0016f75:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016f79:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016f7d:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016f84:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016f89:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016f8d:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016f91:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016f95:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016f98:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016f9c:	01 f9                	add    ecx,edi
c0016f9e:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016fa2:	7d 2f                	jge    c0016fd3 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016fa4:	31 f6                	xor    esi,esi
c0016fa6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016faa:	01 f2                	add    edx,esi
c0016fac:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016fb0:	7d 1a                	jge    c0016fcc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016fb2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016fb5:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016fb8:	46                   	inc    esi
c0016fb9:	51                   	push   ecx
c0016fba:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016fbe:	52                   	push   edx
c0016fbf:	55                   	push   ebp
c0016fc0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016fc3:	83 c4 10             	add    esp,0x10
c0016fc6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016fca:	eb da                	jmp    c0016fa6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016fcc:	47                   	inc    edi
c0016fcd:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016fd1:	eb c5                	jmp    c0016f98 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016fd3:	83 c4 1c             	add    esp,0x1c
c0016fd6:	5b                   	pop    ebx
c0016fd7:	5e                   	pop    esi
c0016fd8:	5f                   	pop    edi
c0016fd9:	5d                   	pop    ebp
c0016fda:	c3                   	ret    
c0016fdb:	90                   	nop

c0016fdc <Video::blit(unsigned int*, int, int, int, int)>:
c0016fdc:	55                   	push   ebp
c0016fdd:	57                   	push   edi
c0016fde:	56                   	push   esi
c0016fdf:	53                   	push   ebx
c0016fe0:	83 ec 1c             	sub    esp,0x1c
c0016fe3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016fe7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016feb:	85 c0                	test   eax,eax
c0016fed:	79 02                	jns    c0016ff1 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016fef:	31 c0                	xor    eax,eax
c0016ff1:	c1 e0 02             	shl    eax,0x2
c0016ff4:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016ff8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ffc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017000:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0017004:	39 d8                	cmp    eax,ebx
c0017006:	7e 49                	jle    c0017051 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017008:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001700e:	7c 41                	jl     c0017051 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017010:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0017014:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017018:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001701c:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0017020:	39 f9                	cmp    ecx,edi
c0017022:	7e 22                	jle    c0017046 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0017024:	83 c5 04             	add    ebp,0x4
c0017027:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001702d:	7c 14                	jl     c0017043 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c001702f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017031:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0017034:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017038:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001703c:	56                   	push   esi
c001703d:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0017040:	83 c4 10             	add    esp,0x10
c0017043:	47                   	inc    edi
c0017044:	eb d2                	jmp    c0017018 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0017046:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001704a:	43                   	inc    ebx
c001704b:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001704f:	eb ab                	jmp    c0016ffc <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0017051:	83 c4 1c             	add    esp,0x1c
c0017054:	5b                   	pop    ebx
c0017055:	5e                   	pop    esi
c0017056:	5f                   	pop    edi
c0017057:	5d                   	pop    ebp
c0017058:	c3                   	ret    
c0017059:	90                   	nop

c001705a <Video::clearScreen(unsigned int)>:
c001705a:	57                   	push   edi
c001705b:	56                   	push   esi
c001705c:	53                   	push   ebx
c001705d:	31 db                	xor    ebx,ebx
c001705f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017063:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017069:	7e 1f                	jle    c001708a <Video::clearScreen(unsigned int)+0x30>
c001706b:	31 ff                	xor    edi,edi
c001706d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017073:	7e 12                	jle    c0017087 <Video::clearScreen(unsigned int)+0x2d>
c0017075:	8b 06                	mov    eax,DWORD PTR [esi]
c0017077:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001707b:	53                   	push   ebx
c001707c:	57                   	push   edi
c001707d:	47                   	inc    edi
c001707e:	56                   	push   esi
c001707f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017082:	83 c4 10             	add    esp,0x10
c0017085:	eb e6                	jmp    c001706d <Video::clearScreen(unsigned int)+0x13>
c0017087:	43                   	inc    ebx
c0017088:	eb d9                	jmp    c0017063 <Video::clearScreen(unsigned int)+0x9>
c001708a:	5b                   	pop    ebx
c001708b:	5e                   	pop    esi
c001708c:	5f                   	pop    edi
c001708d:	c3                   	ret    

c001708e <Video::putpixel(int, int, unsigned int)>:
c001708e:	c7 44 24 04 60 bd 02 c0 	mov    DWORD PTR [esp+0x4],0xc002bd60
c0017096:	e9 06 33 00 00       	jmp    c001a3a1 <Krnl::panic(char const*)>
c001709b:	90                   	nop

c001709c <Video::Video(char const*)>:
c001709c:	83 ec 0c             	sub    esp,0xc
c001709f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170a3:	83 ec 08             	sub    esp,0x8
c00170a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00170aa:	50                   	push   eax
c00170ab:	e8 f8 ce ff ff       	call   c0013fa8 <Device::Device(char const*)>
c00170b0:	83 c4 10             	add    esp,0x10
c00170b3:	ba e4 bd 02 c0       	mov    edx,0xc002bde4
c00170b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170bc:	89 10                	mov    DWORD PTR [eax],edx
c00170be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170c2:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00170cc:	90                   	nop
c00170cd:	83 c4 0c             	add    esp,0xc
c00170d0:	c3                   	ret    
c00170d1:	90                   	nop

c00170d2 <Video::~Video()>:
c00170d2:	83 ec 0c             	sub    esp,0xc
c00170d5:	ba e4 bd 02 c0       	mov    edx,0xc002bde4
c00170da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170de:	89 10                	mov    DWORD PTR [eax],edx
c00170e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170e4:	83 ec 0c             	sub    esp,0xc
c00170e7:	50                   	push   eax
c00170e8:	e8 85 cb ff ff       	call   c0013c72 <Device::~Device()>
c00170ed:	83 c4 10             	add    esp,0x10
c00170f0:	90                   	nop
c00170f1:	83 c4 0c             	add    esp,0xc
c00170f4:	c3                   	ret    
c00170f5:	90                   	nop

c00170f6 <Video::~Video()>:
c00170f6:	83 ec 0c             	sub    esp,0xc
c00170f9:	83 ec 0c             	sub    esp,0xc
c00170fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017100:	e8 cd ff ff ff       	call   c00170d2 <Video::~Video()>
c0017105:	83 c4 10             	add    esp,0x10
c0017108:	83 ec 08             	sub    esp,0x8
c001710b:	68 64 01 00 00       	push   0x164
c0017110:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017114:	e8 72 b7 ff ff       	call   c001288b <operator delete(void*, unsigned long)>
c0017119:	83 c4 10             	add    esp,0x10
c001711c:	83 c4 0c             	add    esp,0xc
c001711f:	c3                   	ret    

c0017120 <Video::isMonochrome()>:
c0017120:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017124:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001712a:	c3                   	ret    
c001712b:	90                   	nop

c001712c <Video::getWidth()>:
c001712c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017130:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0017136:	c3                   	ret    
c0017137:	90                   	nop

c0017138 <Video::getHeight()>:
c0017138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001713c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017142:	c3                   	ret    
c0017143:	90                   	nop

c0017144 <Video::drawCursor(int, int, unsigned char*, int)>:
c0017144:	55                   	push   ebp
c0017145:	57                   	push   edi
c0017146:	56                   	push   esi
c0017147:	53                   	push   ebx
c0017148:	83 ec 2c             	sub    esp,0x2c
c001714b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001714f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017153:	83 f8 01             	cmp    eax,0x1
c0017156:	19 c9                	sbb    ecx,ecx
c0017158:	31 db                	xor    ebx,ebx
c001715a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001715e:	89 cd                	mov    ebp,ecx
c0017160:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0017168:	f7 d5                	not    ebp
c001716a:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0017170:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017174:	01 d8                	add    eax,ebx
c0017176:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001717a:	56                   	push   esi
c001717b:	e8 b8 ff ff ff       	call   c0017138 <Video::getHeight()>
c0017180:	59                   	pop    ecx
c0017181:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0017185:	7e 70                	jle    c00171f7 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0017187:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001718b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001718f:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0017192:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017196:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001719a:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00171a1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00171a5:	89 f8                	mov    eax,edi
c00171a7:	83 c0 20             	add    eax,0x20
c00171aa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00171ae:	56                   	push   esi
c00171af:	e8 78 ff ff ff       	call   c001712c <Video::getWidth()>
c00171b4:	5a                   	pop    edx
c00171b5:	39 c7                	cmp    edi,eax
c00171b7:	7d 34                	jge    c00171ed <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00171b9:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00171be:	74 05                	je     c00171c5 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00171c0:	8b 06                	mov    eax,DWORD PTR [esi]
c00171c2:	55                   	push   ebp
c00171c3:	eb 0d                	jmp    c00171d2 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00171c5:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00171ca:	74 12                	je     c00171de <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00171cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00171ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00171d2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00171d6:	57                   	push   edi
c00171d7:	56                   	push   esi
c00171d8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00171db:	83 c4 10             	add    esp,0x10
c00171de:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00171e2:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00171e6:	47                   	inc    edi
c00171e7:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00171eb:	75 c1                	jne    c00171ae <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00171ed:	43                   	inc    ebx
c00171ee:	83 fb 20             	cmp    ebx,0x20
c00171f1:	0f 85 79 ff ff ff    	jne    c0017170 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00171f7:	83 c4 2c             	add    esp,0x2c
c00171fa:	5b                   	pop    ebx
c00171fb:	5e                   	pop    esi
c00171fc:	5f                   	pop    edi
c00171fd:	5d                   	pop    ebp
c00171fe:	c3                   	ret    
c00171ff:	90                   	nop

c0017200 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0017200:	55                   	push   ebp
c0017201:	57                   	push   edi
c0017202:	56                   	push   esi
c0017203:	53                   	push   ebx
c0017204:	83 ec 28             	sub    esp,0x28
c0017207:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001720b:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c001720f:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0017213:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0017217:	c1 e7 08             	shl    edi,0x8
c001721a:	01 c7                	add    edi,eax
c001721c:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0017220:	c1 e0 08             	shl    eax,0x8
c0017223:	01 d0                	add    eax,edx
c0017225:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017229:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001722d:	0f af c7             	imul   eax,edi
c0017230:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0017237:	50                   	push   eax
c0017238:	e8 4f 86 ff ff       	call   c000f88c <malloc>
c001723d:	83 c4 10             	add    esp,0x10
c0017240:	89 c5                	mov    ebp,eax
c0017242:	85 c0                	test   eax,eax
c0017244:	75 15                	jne    c001725b <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0017246:	83 ec 0c             	sub    esp,0xc
c0017249:	68 81 bd 02 c0       	push   0xc002bd81
c001724e:	e8 18 b7 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0017253:	83 c4 10             	add    esp,0x10
c0017256:	e9 1c 01 00 00       	jmp    c0017377 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001725b:	be 12 00 00 00       	mov    esi,0x12
c0017260:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017264:	74 11                	je     c0017277 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0017266:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c001726a:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c001726e:	c1 fe 03             	sar    esi,0x3
c0017271:	0f af f0             	imul   esi,eax
c0017274:	83 c6 12             	add    esi,0x12
c0017277:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c001727b:	74 04                	je     c0017281 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c001727d:	85 ff                	test   edi,edi
c001727f:	75 12                	jne    c0017293 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0017281:	83 ec 0c             	sub    esp,0xc
c0017284:	68 98 bd 02 c0       	push   0xc002bd98
c0017289:	e8 dd b6 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001728e:	e9 ce 00 00 00       	jmp    c0017361 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0017293:	52                   	push   edx
c0017294:	52                   	push   edx
c0017295:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0017299:	50                   	push   eax
c001729a:	68 ad bd 02 c0       	push   0xc002bdad
c001729f:	e8 c7 b6 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c00172a4:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c00172a8:	83 c4 10             	add    esp,0x10
c00172ab:	80 fa 02             	cmp    dl,0x2
c00172ae:	0f 85 98 00 00 00    	jne    c001734c <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c00172b4:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c00172b9:	75 10                	jne    c00172cb <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00172bb:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00172bf:	75 0a                	jne    c00172cb <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00172c1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00172c4:	83 e8 18             	sub    eax,0x18
c00172c7:	a8 f7                	test   al,0xf7
c00172c9:	74 0a                	je     c00172d5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c00172cb:	83 ec 0c             	sub    esp,0xc
c00172ce:	68 ba bd 02 c0       	push   0xc002bdba
c00172d3:	eb 7f                	jmp    c0017354 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c00172d5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00172dd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00172e5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00172e9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00172f1:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00172f5:	75 0c                	jne    c0017303 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c00172f7:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c00172fc:	c1 e0 18             	shl    eax,0x18
c00172ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017303:	41                   	inc    ecx
c0017304:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0017309:	c1 e2 10             	shl    edx,0x10
c001730c:	89 d0                	mov    eax,edx
c001730e:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0017313:	c1 e2 08             	shl    edx,0x8
c0017316:	09 c2                	or     edx,eax
c0017318:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c001731c:	09 c2                	or     edx,eax
c001731e:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0017322:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c0017326:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001732a:	c1 f8 03             	sar    eax,0x3
c001732d:	01 c6                	add    esi,eax
c001732f:	89 c8                	mov    eax,ecx
c0017331:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0017335:	39 c7                	cmp    edi,eax
c0017337:	7f b0                	jg     c00172e9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0017339:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001733d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017341:	39 14 24             	cmp    DWORD PTR [esp],edx
c0017344:	7e 22                	jle    c0017368 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0017346:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001734a:	eb 99                	jmp    c00172e5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c001734c:	50                   	push   eax
c001734d:	50                   	push   eax
c001734e:	52                   	push   edx
c001734f:	68 c8 bd 02 c0       	push   0xc002bdc8
c0017354:	e8 12 b6 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0017359:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001735c:	e8 3b 85 ff ff       	call   c000f89c <free>
c0017361:	83 c4 10             	add    esp,0x10
c0017364:	31 ed                	xor    ebp,ebp
c0017366:	eb 0f                	jmp    c0017377 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017368:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001736c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001736f:	89 38                	mov    DWORD PTR [eax],edi
c0017371:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017375:	89 08                	mov    DWORD PTR [eax],ecx
c0017377:	83 c4 1c             	add    esp,0x1c
c001737a:	89 e8                	mov    eax,ebp
c001737c:	5b                   	pop    ebx
c001737d:	5e                   	pop    esi
c001737e:	5f                   	pop    edi
c001737f:	5d                   	pop    ebp
c0017380:	c3                   	ret    
c0017381:	90                   	nop

c0017382 <Video::putTGA(int, int, unsigned char*, int)>:
c0017382:	55                   	push   ebp
c0017383:	57                   	push   edi
c0017384:	56                   	push   esi
c0017385:	53                   	push   ebx
c0017386:	83 ec 28             	sub    esp,0x28
c0017389:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001738d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017391:	50                   	push   eax
c0017392:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017396:	50                   	push   eax
c0017397:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001739b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001739f:	56                   	push   esi
c00173a0:	e8 5b fe ff ff       	call   c0017200 <Video::tgaParse(unsigned char*, int, int*, int*)>
c00173a5:	83 c4 20             	add    esp,0x20
c00173a8:	85 c0                	test   eax,eax
c00173aa:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00173ae:	74 35                	je     c00173e5 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00173b0:	89 c7                	mov    edi,eax
c00173b2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00173b6:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00173ba:	39 d8                	cmp    eax,ebx
c00173bc:	7e 27                	jle    c00173e5 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00173be:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00173c2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00173c6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00173ca:	39 e8                	cmp    eax,ebp
c00173cc:	7e 14                	jle    c00173e2 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00173ce:	8b 06                	mov    eax,DWORD PTR [esi]
c00173d0:	83 c7 04             	add    edi,0x4
c00173d3:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00173d6:	53                   	push   ebx
c00173d7:	55                   	push   ebp
c00173d8:	45                   	inc    ebp
c00173d9:	56                   	push   esi
c00173da:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00173dd:	83 c4 10             	add    esp,0x10
c00173e0:	eb e0                	jmp    c00173c2 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00173e2:	43                   	inc    ebx
c00173e3:	eb cd                	jmp    c00173b2 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00173e5:	83 c4 1c             	add    esp,0x1c
c00173e8:	5b                   	pop    ebx
c00173e9:	5e                   	pop    esi
c00173ea:	5f                   	pop    edi
c00173eb:	5d                   	pop    ebp
c00173ec:	c3                   	ret    
c00173ed:	90                   	nop

c00173ee <ACPI::close(int, int, void*)>:
c00173ee:	83 ec 1c             	sub    esp,0x1c
c00173f1:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00173f9:	74 0a                	je     c0017405 <ACPI::close(int, int, void*)+0x17>
c00173fb:	b8 00 00 00 00       	mov    eax,0x0
c0017400:	e9 9a 00 00 00       	jmp    c001749f <ACPI::close(int, int, void*)+0xb1>
c0017405:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001740a:	75 37                	jne    c0017443 <ACPI::close(int, int, void*)+0x55>
c001740c:	83 ec 0c             	sub    esp,0xc
c001740f:	68 24 be 02 c0       	push   0xc002be24
c0017414:	e8 52 b5 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0017419:	83 c4 10             	add    esp,0x10
c001741c:	a1 68 17 03 c0       	mov    eax,ds:0xc0031768
c0017421:	85 c0                	test   eax,eax
c0017423:	74 07                	je     c001742c <ACPI::close(int, int, void*)+0x3e>
c0017425:	a1 68 17 03 c0       	mov    eax,ds:0xc0031768
c001742a:	ff d0                	call   eax
c001742c:	83 ec 0c             	sub    esp,0xc
c001742f:	68 3c bf 02 c0       	push   0xc002bf3c
c0017434:	e8 68 2f 00 00       	call   c001a3a1 <Krnl::panic(char const*)>
c0017439:	83 c4 10             	add    esp,0x10
c001743c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017441:	eb 5c                	jmp    c001749f <ACPI::close(int, int, void*)+0xb1>
c0017443:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0017448:	75 50                	jne    c001749a <ACPI::close(int, int, void*)+0xac>
c001744a:	a1 64 17 03 c0       	mov    eax,ds:0xc0031764
c001744f:	85 c0                	test   eax,eax
c0017451:	74 07                	je     c001745a <ACPI::close(int, int, void*)+0x6c>
c0017453:	a1 64 17 03 c0       	mov    eax,ds:0xc0031764
c0017458:	ff d0                	call   eax
c001745a:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001745f:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017464:	83 e0 02             	and    eax,0x2
c0017467:	74 1c                	je     c0017485 <ACPI::close(int, int, void*)+0x97>
c0017469:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017470:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017474:	89 c2                	mov    edx,eax
c0017476:	ec                   	in     al,dx
c0017477:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001747b:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001747f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017483:	eb da                	jmp    c001745f <ACPI::close(int, int, void*)+0x71>
c0017485:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001748c:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0017491:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017495:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017499:	ee                   	out    dx,al
c001749a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001749f:	83 c4 1c             	add    esp,0x1c
c00174a2:	c3                   	ret    

c00174a3 <findRSDP()>:
c00174a3:	83 ec 1c             	sub    esp,0x1c
c00174a6:	83 ec 0c             	sub    esp,0xc
c00174a9:	68 31 be 02 c0       	push   0xc002be31
c00174ae:	e8 b8 b4 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c00174b3:	83 c4 10             	add    esp,0x10
c00174b6:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c00174bb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00174c1:	83 e0 04             	and    eax,0x4
c00174c4:	84 c0                	test   al,al
c00174c6:	75 07                	jne    c00174cf <findRSDP()+0x2c>
c00174c8:	b8 00 00 00 00       	mov    eax,0x0
c00174cd:	eb 6a                	jmp    c0017539 <findRSDP()+0x96>
c00174cf:	a1 14 f1 02 c0       	mov    eax,ds:0xc002f114
c00174d4:	3d ff 07 00 00       	cmp    eax,0x7ff
c00174d9:	7f 1b                	jg     c00174f6 <findRSDP()+0x53>
c00174db:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c00174e0:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00174e6:	83 e2 fb             	and    edx,0xfffffffb
c00174e9:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00174ef:	b8 00 00 00 00       	mov    eax,0x0
c00174f4:	eb 43                	jmp    c0017539 <findRSDP()+0x96>
c00174f6:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00174fe:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017506:	77 2c                	ja     c0017534 <findRSDP()+0x91>
c0017508:	83 ec 04             	sub    esp,0x4
c001750b:	6a 08                	push   0x8
c001750d:	68 3f be 02 c0       	push   0xc002be3f
c0017512:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017516:	e8 31 91 fe ff       	call   c000064c <memcmp>
c001751b:	83 c4 10             	add    esp,0x10
c001751e:	85 c0                	test   eax,eax
c0017520:	0f 94 c0             	sete   al
c0017523:	84 c0                	test   al,al
c0017525:	74 06                	je     c001752d <findRSDP()+0x8a>
c0017527:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001752b:	eb 0c                	jmp    c0017539 <findRSDP()+0x96>
c001752d:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017532:	eb ca                	jmp    c00174fe <findRSDP()+0x5b>
c0017534:	b8 00 00 00 00       	mov    eax,0x0
c0017539:	83 c4 1c             	add    esp,0x1c
c001753c:	c3                   	ret    

c001753d <loadACPITables(unsigned char*)>:
c001753d:	57                   	push   edi
c001753e:	56                   	push   esi
c001753f:	53                   	push   ebx
c0017540:	83 ec 60             	sub    esp,0x60
c0017543:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c0017548:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001754e:	83 e0 04             	and    eax,0x4
c0017551:	84 c0                	test   al,al
c0017553:	0f 84 33 02 00 00    	je     c001778c <loadACPITables(unsigned char*)+0x24f>
c0017559:	a0 80 19 03 c0       	mov    al,ds:0xc0031980
c001755e:	84 c0                	test   al,al
c0017560:	74 75                	je     c00175d7 <loadACPITables(unsigned char*)+0x9a>
c0017562:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017566:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001756a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001756e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017571:	83 e8 24             	sub    eax,0x24
c0017574:	c1 e8 03             	shr    eax,0x3
c0017577:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001757b:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0017583:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017587:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c001758b:	0f 8d b2 00 00 00    	jge    c0017643 <loadACPITables(unsigned char*)+0x106>
c0017591:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017595:	83 c0 24             	add    eax,0x24
c0017598:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001759c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00175a0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00175a4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00175a8:	c1 e0 03             	shl    eax,0x3
c00175ab:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c00175af:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00175b3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00175b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00175b8:	89 c1                	mov    ecx,eax
c00175ba:	a1 6c 17 03 c0       	mov    eax,ds:0xc003176c
c00175bf:	8d 50 01             	lea    edx,[eax+0x1]
c00175c2:	89 15 6c 17 03 c0    	mov    DWORD PTR ds:0xc003176c,edx
c00175c8:	89 ca                	mov    edx,ecx
c00175ca:	89 14 c5 84 17 03 c0 	mov    DWORD PTR [eax*8-0x3ffce87c],edx
c00175d1:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c00175d5:	eb ac                	jmp    c0017583 <loadACPITables(unsigned char*)+0x46>
c00175d7:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00175db:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00175df:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00175e3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00175e6:	83 e8 24             	sub    eax,0x24
c00175e9:	c1 e8 02             	shr    eax,0x2
c00175ec:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00175f0:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00175f8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00175fc:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0017600:	7d 41                	jge    c0017643 <loadACPITables(unsigned char*)+0x106>
c0017602:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017606:	83 c0 24             	add    eax,0x24
c0017609:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001760d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017611:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017615:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017619:	c1 e0 02             	shl    eax,0x2
c001761c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017620:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017624:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017626:	a1 6c 17 03 c0       	mov    eax,ds:0xc003176c
c001762b:	8d 50 01             	lea    edx,[eax+0x1]
c001762e:	89 15 6c 17 03 c0    	mov    DWORD PTR ds:0xc003176c,edx
c0017634:	89 ca                	mov    edx,ecx
c0017636:	89 14 c5 84 17 03 c0 	mov    DWORD PTR [eax*8-0x3ffce87c],edx
c001763d:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0017641:	eb b5                	jmp    c00175f8 <loadACPITables(unsigned char*)+0xbb>
c0017643:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c001764b:	a1 6c 17 03 c0       	mov    eax,ds:0xc003176c
c0017650:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0017654:	0f 8d 33 01 00 00    	jge    c001778d <loadACPITables(unsigned char*)+0x250>
c001765a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001765e:	8b 04 c5 84 17 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffce87c]
c0017665:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017669:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001766d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017671:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017675:	25 ff 0f 00 00       	and    eax,0xfff
c001767a:	89 c6                	mov    esi,eax
c001767c:	8b 1d 30 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f230
c0017682:	83 ec 0c             	sub    esp,0xc
c0017685:	6a 01                	push   0x1
c0017687:	e8 d9 9e ff ff       	call   c0011565 <Virt::allocateKernelVirtualPages(int)>
c001768c:	83 c4 10             	add    esp,0x10
c001768f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017693:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017699:	83 ec 0c             	sub    esp,0xc
c001769c:	6a 01                	push   0x1
c001769e:	6a 01                	push   0x1
c00176a0:	50                   	push   eax
c00176a1:	52                   	push   edx
c00176a2:	53                   	push   ebx
c00176a3:	e8 ea a9 ff ff       	call   c0012092 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00176a8:	83 c4 20             	add    esp,0x20
c00176ab:	09 f0                	or     eax,esi
c00176ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00176b1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00176b5:	c1 e0 03             	shl    eax,0x3
c00176b8:	05 80 17 03 c0       	add    eax,0xc0031780
c00176bd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00176c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00176c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00176c9:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c00176d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00176d5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00176d9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00176dd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00176e1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00176e5:	89 c6                	mov    esi,eax
c00176e7:	89 d7                	mov    edi,edx
c00176e9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00176eb:	89 c8                	mov    eax,ecx
c00176ed:	89 fa                	mov    edx,edi
c00176ef:	89 f3                	mov    ebx,esi
c00176f1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00176f5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00176f9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00176fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017701:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017704:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017708:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001770c:	05 00 10 00 00       	add    eax,0x1000
c0017711:	c1 e8 0c             	shr    eax,0xc
c0017714:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017718:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001771c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017720:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017724:	25 ff 0f 00 00       	and    eax,0xfff
c0017729:	89 c6                	mov    esi,eax
c001772b:	8b 1d 30 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f230
c0017731:	83 ec 0c             	sub    esp,0xc
c0017734:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017738:	e8 28 9e ff ff       	call   c0011565 <Virt::allocateKernelVirtualPages(int)>
c001773d:	83 c4 10             	add    esp,0x10
c0017740:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017744:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001774a:	83 ec 0c             	sub    esp,0xc
c001774d:	6a 01                	push   0x1
c001774f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017753:	50                   	push   eax
c0017754:	52                   	push   edx
c0017755:	53                   	push   ebx
c0017756:	e8 37 a9 ff ff       	call   c0012092 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001775b:	83 c4 20             	add    esp,0x20
c001775e:	09 f0                	or     eax,esi
c0017760:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017764:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017768:	83 ec 0c             	sub    esp,0xc
c001776b:	50                   	push   eax
c001776c:	e8 b4 a2 ff ff       	call   c0011a25 <Virt::freeKernelVirtualPages(unsigned long)>
c0017771:	83 c4 10             	add    esp,0x10
c0017774:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017778:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001777c:	89 14 c5 84 17 03 c0 	mov    DWORD PTR [eax*8-0x3ffce87c],edx
c0017783:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0017787:	e9 bf fe ff ff       	jmp    c001764b <loadACPITables(unsigned char*)+0x10e>
c001778c:	90                   	nop
c001778d:	83 c4 60             	add    esp,0x60
c0017790:	5b                   	pop    ebx
c0017791:	5e                   	pop    esi
c0017792:	5f                   	pop    edi
c0017793:	c3                   	ret    

c0017794 <findRSDT(unsigned char*)>:
c0017794:	57                   	push   edi
c0017795:	56                   	push   esi
c0017796:	53                   	push   ebx
c0017797:	83 ec 50             	sub    esp,0x50
c001779a:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c001779f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00177a5:	83 e0 04             	and    eax,0x4
c00177a8:	84 c0                	test   al,al
c00177aa:	75 0a                	jne    c00177b6 <findRSDT(unsigned char*)+0x22>
c00177ac:	b8 00 00 00 00       	mov    eax,0x0
c00177b1:	e9 21 01 00 00       	jmp    c00178d7 <findRSDT(unsigned char*)+0x143>
c00177b6:	89 e0                	mov    eax,esp
c00177b8:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00177bc:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00177c0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00177c4:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c00177cc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00177d0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00177d4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00177d8:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00177dc:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00177e0:	89 c6                	mov    esi,eax
c00177e2:	89 d7                	mov    edi,edx
c00177e4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00177e6:	89 c8                	mov    eax,ecx
c00177e8:	89 fa                	mov    edx,edi
c00177ea:	89 f3                	mov    ebx,esi
c00177ec:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00177f0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00177f4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00177f8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00177fc:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0017800:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0017808:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001780c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017810:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017814:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017818:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001781c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017820:	25 ff 0f 00 00       	and    eax,0xfff
c0017825:	89 c6                	mov    esi,eax
c0017827:	8b 1d 30 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f230
c001782d:	83 ec 0c             	sub    esp,0xc
c0017830:	6a 02                	push   0x2
c0017832:	e8 2e 9d ff ff       	call   c0011565 <Virt::allocateKernelVirtualPages(int)>
c0017837:	83 c4 10             	add    esp,0x10
c001783a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001783e:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017844:	83 ec 0c             	sub    esp,0xc
c0017847:	6a 01                	push   0x1
c0017849:	6a 02                	push   0x2
c001784b:	50                   	push   eax
c001784c:	52                   	push   edx
c001784d:	53                   	push   ebx
c001784e:	e8 3f a8 ff ff       	call   c0012092 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017853:	83 c4 20             	add    esp,0x20
c0017856:	09 f0                	or     eax,esi
c0017858:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001785c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017860:	25 ff 0f 00 00       	and    eax,0xfff
c0017865:	89 c6                	mov    esi,eax
c0017867:	8b 1d 30 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f230
c001786d:	83 ec 0c             	sub    esp,0xc
c0017870:	6a 02                	push   0x2
c0017872:	e8 ee 9c ff ff       	call   c0011565 <Virt::allocateKernelVirtualPages(int)>
c0017877:	83 c4 10             	add    esp,0x10
c001787a:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001787e:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017884:	83 ec 0c             	sub    esp,0xc
c0017887:	6a 01                	push   0x1
c0017889:	6a 02                	push   0x2
c001788b:	50                   	push   eax
c001788c:	52                   	push   edx
c001788d:	53                   	push   ebx
c001788e:	e8 ff a7 ff ff       	call   c0012092 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017893:	83 c4 20             	add    esp,0x20
c0017896:	09 f0                	or     eax,esi
c0017898:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001789c:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00178a1:	75 11                	jne    c00178b4 <findRSDT(unsigned char*)+0x120>
c00178a3:	c6 05 80 19 03 c0 00 	mov    BYTE PTR ds:0xc0031980,0x0
c00178aa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00178ae:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00178b2:	eb 1f                	jmp    c00178d3 <findRSDT(unsigned char*)+0x13f>
c00178b4:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c00178b9:	75 11                	jne    c00178cc <findRSDT(unsigned char*)+0x138>
c00178bb:	c6 05 80 19 03 c0 01 	mov    BYTE PTR ds:0xc0031980,0x1
c00178c2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00178c6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00178ca:	eb 07                	jmp    c00178d3 <findRSDT(unsigned char*)+0x13f>
c00178cc:	b8 00 00 00 00       	mov    eax,0x0
c00178d1:	eb 04                	jmp    c00178d7 <findRSDT(unsigned char*)+0x143>
c00178d3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00178d7:	83 c4 50             	add    esp,0x50
c00178da:	5b                   	pop    ebx
c00178db:	5e                   	pop    esi
c00178dc:	5f                   	pop    edi
c00178dd:	c3                   	ret    

c00178de <findDataTable(unsigned char*, char*)>:
c00178de:	83 ec 1c             	sub    esp,0x1c
c00178e1:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c00178e6:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00178ec:	83 e0 04             	and    eax,0x4
c00178ef:	84 c0                	test   al,al
c00178f1:	75 07                	jne    c00178fa <findDataTable(unsigned char*, char*)+0x1c>
c00178f3:	b8 00 00 00 00       	mov    eax,0x0
c00178f8:	eb 7c                	jmp    c0017976 <findDataTable(unsigned char*, char*)+0x98>
c00178fa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017902:	a1 6c 17 03 c0       	mov    eax,ds:0xc003176c
c0017907:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001790b:	7d 3a                	jge    c0017947 <findDataTable(unsigned char*, char*)+0x69>
c001790d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017911:	c1 e0 03             	shl    eax,0x3
c0017914:	05 80 17 03 c0       	add    eax,0xc0031780
c0017919:	83 ec 04             	sub    esp,0x4
c001791c:	6a 04                	push   0x4
c001791e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017922:	50                   	push   eax
c0017923:	e8 24 8d fe ff       	call   c000064c <memcmp>
c0017928:	83 c4 10             	add    esp,0x10
c001792b:	85 c0                	test   eax,eax
c001792d:	0f 94 c0             	sete   al
c0017930:	84 c0                	test   al,al
c0017932:	74 0d                	je     c0017941 <findDataTable(unsigned char*, char*)+0x63>
c0017934:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017938:	8b 04 c5 84 17 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffce87c]
c001793f:	eb 35                	jmp    c0017976 <findDataTable(unsigned char*, char*)+0x98>
c0017941:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017945:	eb bb                	jmp    c0017902 <findDataTable(unsigned char*, char*)+0x24>
c0017947:	a0 80 19 03 c0       	mov    al,ds:0xc0031980
c001794c:	84 c0                	test   al,al
c001794e:	74 07                	je     c0017957 <findDataTable(unsigned char*, char*)+0x79>
c0017950:	b8 58 00 00 00       	mov    eax,0x58
c0017955:	eb 05                	jmp    c001795c <findDataTable(unsigned char*, char*)+0x7e>
c0017957:	b8 52 00 00 00       	mov    eax,0x52
c001795c:	83 ec 04             	sub    esp,0x4
c001795f:	50                   	push   eax
c0017960:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017964:	68 60 bf 02 c0       	push   0xc002bf60
c0017969:	e8 fd af ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001796e:	83 c4 10             	add    esp,0x10
c0017971:	b8 00 00 00 00       	mov    eax,0x0
c0017976:	83 c4 1c             	add    esp,0x1c
c0017979:	c3                   	ret    

c001797a <scanMADT()>:
c001797a:	53                   	push   ebx
c001797b:	83 ec 38             	sub    esp,0x38
c001797e:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c0017983:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017989:	83 e0 04             	and    eax,0x4
c001798c:	84 c0                	test   al,al
c001798e:	0f 84 63 04 00 00    	je     c0017df7 <scanMADT()+0x47d>
c0017994:	e8 0a fb ff ff       	call   c00174a3 <findRSDP()>
c0017999:	a3 8c 19 03 c0       	mov    ds:0xc003198c,eax
c001799e:	a1 8c 19 03 c0       	mov    eax,ds:0xc003198c
c00179a3:	85 c0                	test   eax,eax
c00179a5:	75 19                	jne    c00179c0 <scanMADT()+0x46>
c00179a7:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c00179ac:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00179b2:	83 e2 fb             	and    edx,0xfffffffb
c00179b5:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00179bb:	e9 3b 04 00 00       	jmp    c0017dfb <scanMADT()+0x481>
c00179c0:	a1 8c 19 03 c0       	mov    eax,ds:0xc003198c
c00179c5:	83 ec 0c             	sub    esp,0xc
c00179c8:	50                   	push   eax
c00179c9:	e8 c6 fd ff ff       	call   c0017794 <findRSDT(unsigned char*)>
c00179ce:	83 c4 10             	add    esp,0x10
c00179d1:	a3 88 19 03 c0       	mov    ds:0xc0031988,eax
c00179d6:	a1 88 19 03 c0       	mov    eax,ds:0xc0031988
c00179db:	85 c0                	test   eax,eax
c00179dd:	75 19                	jne    c00179f8 <scanMADT()+0x7e>
c00179df:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c00179e4:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00179ea:	83 e2 fb             	and    edx,0xfffffffb
c00179ed:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00179f3:	e9 03 04 00 00       	jmp    c0017dfb <scanMADT()+0x481>
c00179f8:	a1 88 19 03 c0       	mov    eax,ds:0xc0031988
c00179fd:	83 ec 0c             	sub    esp,0xc
c0017a00:	50                   	push   eax
c0017a01:	e8 37 fb ff ff       	call   c001753d <loadACPITables(unsigned char*)>
c0017a06:	83 c4 10             	add    esp,0x10
c0017a09:	a1 88 19 03 c0       	mov    eax,ds:0xc0031988
c0017a0e:	83 ec 08             	sub    esp,0x8
c0017a11:	68 48 be 02 c0       	push   0xc002be48
c0017a16:	50                   	push   eax
c0017a17:	e8 c2 fe ff ff       	call   c00178de <findDataTable(unsigned char*, char*)>
c0017a1c:	83 c4 10             	add    esp,0x10
c0017a1f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017a23:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017a28:	75 19                	jne    c0017a43 <scanMADT()+0xc9>
c0017a2a:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c0017a2f:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017a35:	83 e2 fe             	and    edx,0xfffffffe
c0017a38:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017a3e:	e9 b8 03 00 00       	jmp    c0017dfb <scanMADT()+0x481>
c0017a43:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017a4b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a4f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a52:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017a56:	0f 87 9f 03 00 00    	ja     c0017dfb <scanMADT()+0x481>
c0017a5c:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017a64:	0f 87 91 03 00 00    	ja     c0017dfb <scanMADT()+0x481>
c0017a6a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a6e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017a72:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a76:	8d 50 01             	lea    edx,[eax+0x1]
c0017a79:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a7d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a81:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017a85:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017a89:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a8d:	8d 50 01             	lea    edx,[eax+0x1]
c0017a90:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a94:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a98:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017a9c:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017aa0:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017aa5:	0f 86 4f 03 00 00    	jbe    c0017dfa <scanMADT()+0x480>
c0017aab:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017ab0:	75 57                	jne    c0017b09 <scanMADT()+0x18f>
c0017ab2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ab6:	8d 50 01             	lea    edx,[eax+0x1]
c0017ab9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017abd:	8a 15 80 1b 03 c0    	mov    dl,BYTE PTR ds:0xc0031b80
c0017ac3:	0f b6 d2             	movzx  edx,dl
c0017ac6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017aca:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017ace:	88 82 c0 1b 03 c0    	mov    BYTE PTR [edx-0x3ffce440],al
c0017ad4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ad8:	8d 50 01             	lea    edx,[eax+0x1]
c0017adb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017adf:	8a 15 80 1b 03 c0    	mov    dl,BYTE PTR ds:0xc0031b80
c0017ae5:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017ae8:	88 0d 80 1b 03 c0    	mov    BYTE PTR ds:0xc0031b80,cl
c0017aee:	0f b6 d2             	movzx  edx,dl
c0017af1:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017af5:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017af9:	88 82 a0 1b 03 c0    	mov    BYTE PTR [edx-0x3ffce460],al
c0017aff:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017b04:	e9 da 02 00 00       	jmp    c0017de3 <scanMADT()+0x469>
c0017b09:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017b0e:	0f 85 14 01 00 00    	jne    c0017c28 <scanMADT()+0x2ae>
c0017b14:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b18:	8d 50 01             	lea    edx,[eax+0x1]
c0017b1b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017b1f:	8a 15 40 1a 03 c0    	mov    dl,BYTE PTR ds:0xc0031a40
c0017b25:	0f b6 d2             	movzx  edx,dl
c0017b28:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017b2c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017b30:	88 82 60 1a 03 c0    	mov    BYTE PTR [edx-0x3ffce5a0],al
c0017b36:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017b3a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b42:	01 d0                	add    eax,edx
c0017b44:	83 c0 2c             	add    eax,0x2c
c0017b47:	8a 00                	mov    al,BYTE PTR [eax]
c0017b49:	0f b6 d0             	movzx  edx,al
c0017b4c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b50:	8d 48 01             	lea    ecx,[eax+0x1]
c0017b53:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b57:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017b5b:	0f b6 c0             	movzx  eax,al
c0017b5e:	c1 e0 08             	shl    eax,0x8
c0017b61:	89 d1                	mov    ecx,edx
c0017b63:	09 c1                	or     ecx,eax
c0017b65:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b69:	8d 50 02             	lea    edx,[eax+0x2]
c0017b6c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b70:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017b74:	0f b6 c0             	movzx  eax,al
c0017b77:	c1 e0 10             	shl    eax,0x10
c0017b7a:	09 c1                	or     ecx,eax
c0017b7c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b80:	8d 50 03             	lea    edx,[eax+0x3]
c0017b83:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b87:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017b8b:	0f b6 c0             	movzx  eax,al
c0017b8e:	c1 e0 18             	shl    eax,0x18
c0017b91:	09 c1                	or     ecx,eax
c0017b93:	89 ca                	mov    edx,ecx
c0017b95:	a0 40 1a 03 c0       	mov    al,ds:0xc0031a40
c0017b9a:	0f b6 c0             	movzx  eax,al
c0017b9d:	89 14 85 80 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce580],edx
c0017ba4:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017ba9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017bad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bb1:	01 d0                	add    eax,edx
c0017bb3:	83 c0 2c             	add    eax,0x2c
c0017bb6:	8a 00                	mov    al,BYTE PTR [eax]
c0017bb8:	0f b6 d0             	movzx  edx,al
c0017bbb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bbf:	8d 48 01             	lea    ecx,[eax+0x1]
c0017bc2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bc6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017bca:	0f b6 c0             	movzx  eax,al
c0017bcd:	c1 e0 08             	shl    eax,0x8
c0017bd0:	89 d1                	mov    ecx,edx
c0017bd2:	09 c1                	or     ecx,eax
c0017bd4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bd8:	8d 50 02             	lea    edx,[eax+0x2]
c0017bdb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bdf:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017be3:	0f b6 c0             	movzx  eax,al
c0017be6:	c1 e0 10             	shl    eax,0x10
c0017be9:	09 c1                	or     ecx,eax
c0017beb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bef:	8d 50 03             	lea    edx,[eax+0x3]
c0017bf2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bf6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017bfa:	0f b6 c0             	movzx  eax,al
c0017bfd:	c1 e0 18             	shl    eax,0x18
c0017c00:	09 c1                	or     ecx,eax
c0017c02:	89 ca                	mov    edx,ecx
c0017c04:	a0 40 1a 03 c0       	mov    al,ds:0xc0031a40
c0017c09:	0f b6 c0             	movzx  eax,al
c0017c0c:	89 14 85 00 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce500],edx
c0017c13:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017c18:	a0 40 1a 03 c0       	mov    al,ds:0xc0031a40
c0017c1d:	40                   	inc    eax
c0017c1e:	a2 40 1a 03 c0       	mov    ds:0xc0031a40,al
c0017c23:	e9 bb 01 00 00       	jmp    c0017de3 <scanMADT()+0x469>
c0017c28:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017c2d:	0f 85 e9 00 00 00    	jne    c0017d1c <scanMADT()+0x3a2>
c0017c33:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c37:	8d 50 01             	lea    edx,[eax+0x1]
c0017c3a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017c3e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c42:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017c46:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017c4a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c4e:	8d 50 01             	lea    edx,[eax+0x1]
c0017c51:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017c55:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c59:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017c5d:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017c61:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c65:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c69:	01 d0                	add    eax,edx
c0017c6b:	83 c0 2c             	add    eax,0x2c
c0017c6e:	8a 00                	mov    al,BYTE PTR [eax]
c0017c70:	0f b6 d0             	movzx  edx,al
c0017c73:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c77:	8d 48 01             	lea    ecx,[eax+0x1]
c0017c7a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c7e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017c82:	0f b6 c0             	movzx  eax,al
c0017c85:	c1 e0 08             	shl    eax,0x8
c0017c88:	89 d1                	mov    ecx,edx
c0017c8a:	09 c1                	or     ecx,eax
c0017c8c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c90:	8d 50 02             	lea    edx,[eax+0x2]
c0017c93:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c97:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017c9b:	0f b6 c0             	movzx  eax,al
c0017c9e:	c1 e0 10             	shl    eax,0x10
c0017ca1:	09 c1                	or     ecx,eax
c0017ca3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ca7:	8d 50 03             	lea    edx,[eax+0x3]
c0017caa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017cae:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017cb2:	0f b6 c0             	movzx  eax,al
c0017cb5:	c1 e0 18             	shl    eax,0x18
c0017cb8:	09 c8                	or     eax,ecx
c0017cba:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017cbe:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017cc3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017cc7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ccb:	01 d0                	add    eax,edx
c0017ccd:	83 c0 2c             	add    eax,0x2c
c0017cd0:	8a 00                	mov    al,BYTE PTR [eax]
c0017cd2:	0f b6 c0             	movzx  eax,al
c0017cd5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017cd9:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017cdc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ce0:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017ce4:	0f b6 d2             	movzx  edx,dl
c0017ce7:	c1 e2 08             	shl    edx,0x8
c0017cea:	09 d0                	or     eax,edx
c0017cec:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017cf1:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017cf6:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017cfb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017cff:	88 90 20 e3 02 c0    	mov    BYTE PTR [eax-0x3ffd1ce0],dl
c0017d05:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017d0a:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017d0f:	66 89 84 12 20 1a 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffce5e0],ax
c0017d17:	e9 c7 00 00 00       	jmp    c0017de3 <scanMADT()+0x469>
c0017d1c:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017d21:	0f 85 b0 00 00 00    	jne    c0017dd7 <scanMADT()+0x45d>
c0017d27:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d2b:	8d 50 01             	lea    edx,[eax+0x1]
c0017d2e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017d32:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d36:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017d3a:	0f b6 c0             	movzx  eax,al
c0017d3d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017d41:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d45:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d49:	01 d0                	add    eax,edx
c0017d4b:	83 c0 2c             	add    eax,0x2c
c0017d4e:	8a 00                	mov    al,BYTE PTR [eax]
c0017d50:	0f b6 d0             	movzx  edx,al
c0017d53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d57:	8d 48 01             	lea    ecx,[eax+0x1]
c0017d5a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d5e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017d62:	0f b6 c0             	movzx  eax,al
c0017d65:	c1 e0 08             	shl    eax,0x8
c0017d68:	09 d0                	or     eax,edx
c0017d6a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017d6e:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017d73:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d77:	8d 50 01             	lea    edx,[eax+0x1]
c0017d7a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017d7e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d82:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017d86:	0f b6 c0             	movzx  eax,al
c0017d89:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017d8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d91:	c1 e0 08             	shl    eax,0x8
c0017d94:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017d98:	89 c1                	mov    ecx,eax
c0017d9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d9e:	c1 e0 18             	shl    eax,0x18
c0017da1:	89 c3                	mov    ebx,eax
c0017da3:	a1 90 19 03 c0       	mov    eax,ds:0xc0031990
c0017da8:	8d 50 01             	lea    edx,[eax+0x1]
c0017dab:	89 15 90 19 03 c0    	mov    DWORD PTR ds:0xc0031990,edx
c0017db1:	09 d9                	or     ecx,ebx
c0017db3:	89 ca                	mov    edx,ecx
c0017db5:	89 14 85 a0 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce660],edx
c0017dbc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017dc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017dc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017dc8:	68 90 bf 02 c0       	push   0xc002bf90
c0017dcd:	e8 99 ab ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0017dd2:	83 c4 10             	add    esp,0x10
c0017dd5:	eb 0c                	jmp    c0017de3 <scanMADT()+0x469>
c0017dd7:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017ddc:	75 05                	jne    c0017de3 <scanMADT()+0x469>
c0017dde:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017de3:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017de8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017dec:	01 d0                	add    eax,edx
c0017dee:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017df2:	e9 54 fc ff ff       	jmp    c0017a4b <scanMADT()+0xd1>
c0017df7:	90                   	nop
c0017df8:	eb 01                	jmp    c0017dfb <scanMADT()+0x481>
c0017dfa:	90                   	nop
c0017dfb:	83 c4 38             	add    esp,0x38
c0017dfe:	5b                   	pop    ebx
c0017dff:	c3                   	ret    

c0017e00 <ACPI::ACPI()>:
c0017e00:	83 ec 0c             	sub    esp,0xc
c0017e03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e07:	83 ec 08             	sub    esp,0x8
c0017e0a:	68 4d be 02 c0       	push   0xc002be4d
c0017e0f:	50                   	push   eax
c0017e10:	e8 93 c1 ff ff       	call   c0013fa8 <Device::Device(char const*)>
c0017e15:	83 c4 10             	add    esp,0x10
c0017e18:	ba 2c c0 02 c0       	mov    edx,0xc002c02c
c0017e1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e21:	89 10                	mov    DWORD PTR [eax],edx
c0017e23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e27:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017e2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e32:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017e3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e40:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017e4a:	e8 2b fb ff ff       	call   c001797a <scanMADT()>
c0017e4f:	90                   	nop
c0017e50:	83 c4 0c             	add    esp,0xc
c0017e53:	c3                   	ret    

c0017e54 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017e54:	83 ec 2c             	sub    esp,0x2c
c0017e57:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017e5b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017e5f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017e63:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017e67:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017e6c:	88 d0                	mov    al,dl
c0017e6e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017e72:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017e77:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017e7f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e83:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017e89:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017e8d:	0f 8d 97 00 00 00    	jge    c0017f2a <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017e93:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e97:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e9b:	83 c2 2a             	add    edx,0x2a
c0017e9e:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017ea2:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017ea7:	75 78                	jne    c0017f21 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017ea9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ead:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017eb1:	83 c2 2a             	add    edx,0x2a
c0017eb4:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017eb8:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017ebc:	75 63                	jne    c0017f21 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017ebe:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017ec3:	74 3a                	je     c0017eff <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017ec5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ec9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017ecd:	83 c2 2a             	add    edx,0x2a
c0017ed0:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017ed4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ed8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017edb:	39 c2                	cmp    edx,eax
c0017edd:	74 10                	je     c0017eef <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017edf:	83 ec 0c             	sub    esp,0xc
c0017ee2:	68 cc bf 02 c0       	push   0xc002bfcc
c0017ee7:	e8 b5 24 00 00       	call   c001a3a1 <Krnl::panic(char const*)>
c0017eec:	83 c4 10             	add    esp,0x10
c0017eef:	83 ec 0c             	sub    esp,0xc
c0017ef2:	68 52 be 02 c0       	push   0xc002be52
c0017ef7:	e8 a5 24 00 00       	call   c001a3a1 <Krnl::panic(char const*)>
c0017efc:	83 c4 10             	add    esp,0x10
c0017eff:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017f03:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017f07:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017f0b:	83 c2 2a             	add    edx,0x2a
c0017f0e:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017f12:	8b 02                	mov    eax,DWORD PTR [edx]
c0017f14:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017f17:	89 01                	mov    DWORD PTR [ecx],eax
c0017f19:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017f1c:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017f21:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017f25:	e9 55 ff ff ff       	jmp    c0017e7f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017f2a:	90                   	nop
c0017f2b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017f2f:	83 c4 2c             	add    esp,0x2c
c0017f32:	c2 04 00             	ret    0x4
c0017f35:	90                   	nop

c0017f36 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017f36:	83 ec 1c             	sub    esp,0x1c
c0017f39:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f3d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017f41:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017f45:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017f4a:	88 c8                	mov    al,cl
c0017f4c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017f50:	88 d0                	mov    al,dl
c0017f52:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017f56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f5a:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017f60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f64:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017f67:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017f6b:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017f6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f73:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017f79:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017f7d:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017f80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017f84:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017f89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f8d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017f93:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017f97:	8d 48 01             	lea    ecx,[eax+0x1]
c0017f9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f9e:	83 c2 2a             	add    edx,0x2a
c0017fa1:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017fa5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fa9:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017faf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fb3:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017fb6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017fba:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017fbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fc2:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017fc8:	8d 50 01             	lea    edx,[eax+0x1]
c0017fcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fcf:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0017fd5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fd9:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017fdf:	3d 00 02 00 00       	cmp    eax,0x200
c0017fe4:	75 10                	jne    c0017ff6 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0017fe6:	83 ec 0c             	sub    esp,0xc
c0017fe9:	68 61 be 02 c0       	push   0xc002be61
c0017fee:	e8 ae 23 00 00       	call   c001a3a1 <Krnl::panic(char const*)>
c0017ff3:	83 c4 10             	add    esp,0x10
c0017ff6:	90                   	nop
c0017ff7:	83 c4 1c             	add    esp,0x1c
c0017ffa:	c3                   	ret    
c0017ffb:	90                   	nop

c0017ffc <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017ffc:	b8 00 00 00 00       	mov    eax,0x0
c0018001:	c3                   	ret    

c0018002 <ACPI::detectPCI()>:
c0018002:	53                   	push   ebx
c0018003:	83 ec 28             	sub    esp,0x28
c0018006:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001800b:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0018010:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c0018015:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001801b:	83 e0 04             	and    eax,0x4
c001801e:	84 c0                	test   al,al
c0018020:	74 2b                	je     c001804d <ACPI::detectPCI()+0x4b>
c0018022:	a1 88 19 03 c0       	mov    eax,ds:0xc0031988
c0018027:	83 ec 08             	sub    esp,0x8
c001802a:	68 7e be 02 c0       	push   0xc002be7e
c001802f:	50                   	push   eax
c0018030:	e8 a9 f8 ff ff       	call   c00178de <findDataTable(unsigned char*, char*)>
c0018035:	83 c4 10             	add    esp,0x10
c0018038:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001803c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0018041:	74 0a                	je     c001804d <ACPI::detectPCI()+0x4b>
c0018043:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018048:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001804d:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c0018055:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018059:	8a 00                	mov    al,BYTE PTR [eax]
c001805b:	3c 01                	cmp    al,0x1
c001805d:	75 0c                	jne    c001806b <ACPI::detectPCI()+0x69>
c001805f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018064:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0018069:	eb 26                	jmp    c0018091 <ACPI::detectPCI()+0x8f>
c001806b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001806f:	8a 00                	mov    al,BYTE PTR [eax]
c0018071:	3c 02                	cmp    al,0x2
c0018073:	75 1c                	jne    c0018091 <ACPI::detectPCI()+0x8f>
c0018075:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001807a:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c001807f:	74 10                	je     c0018091 <ACPI::detectPCI()+0x8f>
c0018081:	83 ec 0c             	sub    esp,0xc
c0018084:	68 fc bf 02 c0       	push   0xc002bffc
c0018089:	e8 13 23 00 00       	call   c001a3a1 <Krnl::panic(char const*)>
c001808e:	83 c4 10             	add    esp,0x10
c0018091:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0018095:	83 f0 01             	xor    eax,0x1
c0018098:	84 c0                	test   al,al
c001809a:	74 3f                	je     c00180db <ACPI::detectPCI()+0xd9>
c001809c:	e8 af 80 fe ff       	call   c0000150 <manualPCIProbe>
c00180a1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00180a5:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00180aa:	75 0c                	jne    c00180b8 <ACPI::detectPCI()+0xb6>
c00180ac:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00180b1:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c00180b6:	eb 23                	jmp    c00180db <ACPI::detectPCI()+0xd9>
c00180b8:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c00180bd:	75 1c                	jne    c00180db <ACPI::detectPCI()+0xd9>
c00180bf:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00180c4:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c00180c9:	74 10                	je     c00180db <ACPI::detectPCI()+0xd9>
c00180cb:	83 ec 0c             	sub    esp,0xc
c00180ce:	68 fc bf 02 c0       	push   0xc002bffc
c00180d3:	e8 c9 22 00 00       	call   c001a3a1 <Krnl::panic(char const*)>
c00180d8:	83 c4 10             	add    esp,0x10
c00180db:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00180e0:	74 0d                	je     c00180ef <ACPI::detectPCI()+0xed>
c00180e2:	8a 44 24 1e          	mov    al,BYTE PTR [esp+0x1e]
c00180e6:	83 f0 01             	xor    eax,0x1
c00180e9:	0f b6 c0             	movzx  eax,al
c00180ec:	40                   	inc    eax
c00180ed:	eb 05                	jmp    c00180f4 <ACPI::detectPCI()+0xf2>
c00180ef:	b8 00 00 00 00       	mov    eax,0x0
c00180f4:	83 ec 08             	sub    esp,0x8
c00180f7:	50                   	push   eax
c00180f8:	68 83 be 02 c0       	push   0xc002be83
c00180fd:	e8 69 a8 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0018102:	83 c4 10             	add    esp,0x10
c0018105:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001810a:	74 69                	je     c0018175 <ACPI::detectPCI()+0x173>
c001810c:	c7 44 24 08 5c 01 00 00 	mov    DWORD PTR [esp+0x8],0x15c
c0018114:	83 ec 0c             	sub    esp,0xc
c0018117:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001811b:	e8 6c 77 ff ff       	call   c000f88c <malloc>
c0018120:	83 c4 10             	add    esp,0x10
c0018123:	89 c3                	mov    ebx,eax
c0018125:	83 ec 0c             	sub    esp,0xc
c0018128:	53                   	push   ebx
c0018129:	e8 0e ac 00 00       	call   c0022d3c <PCI::PCI()>
c001812e:	83 c4 10             	add    esp,0x10
c0018131:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0018135:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018139:	83 ec 08             	sub    esp,0x8
c001813c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018140:	50                   	push   eax
c0018141:	e8 5e bc ff ff       	call   c0013da4 <Device::addChild(Device*)>
c0018146:	83 c4 10             	add    esp,0x10
c0018149:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001814d:	8b 00                	mov    eax,DWORD PTR [eax]
c001814f:	83 c0 08             	add    eax,0x8
c0018152:	8b 00                	mov    eax,DWORD PTR [eax]
c0018154:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0018159:	74 07                	je     c0018162 <ACPI::detectPCI()+0x160>
c001815b:	ba 01 00 00 00       	mov    edx,0x1
c0018160:	eb 05                	jmp    c0018167 <ACPI::detectPCI()+0x165>
c0018162:	ba 02 00 00 00       	mov    edx,0x2
c0018167:	6a 00                	push   0x0
c0018169:	6a 00                	push   0x0
c001816b:	52                   	push   edx
c001816c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018170:	ff d0                	call   eax
c0018172:	83 c4 10             	add    esp,0x10
c0018175:	90                   	nop
c0018176:	83 c4 28             	add    esp,0x28
c0018179:	5b                   	pop    ebx
c001817a:	c3                   	ret    
c001817b:	90                   	nop

c001817c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001817c:	83 ec 1c             	sub    esp,0x1c
c001817f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018183:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0018186:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001818a:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c001818f:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018194:	83 ec 08             	sub    esp,0x8
c0018197:	52                   	push   edx
c0018198:	50                   	push   eax
c0018199:	e8 04 6d ff ff       	call   c000eea2 <Computer::readCMOS(unsigned char)>
c001819e:	83 c4 10             	add    esp,0x10
c00181a1:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00181a5:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c00181aa:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00181af:	83 ec 04             	sub    esp,0x4
c00181b2:	6a 01                	push   0x1
c00181b4:	52                   	push   edx
c00181b5:	50                   	push   eax
c00181b6:	e8 fd 6d ff ff       	call   c000efb8 <Computer::writeCMOS(unsigned char, unsigned char)>
c00181bb:	83 c4 10             	add    esp,0x10
c00181be:	90                   	nop
c00181bf:	83 c4 1c             	add    esp,0x1c
c00181c2:	c3                   	ret    
c00181c3:	90                   	nop

c00181c4 <ACPI::sleep()>:
c00181c4:	83 ec 0c             	sub    esp,0xc
c00181c7:	a1 60 17 03 c0       	mov    eax,ds:0xc0031760
c00181cc:	85 c0                	test   eax,eax
c00181ce:	74 07                	je     c00181d7 <ACPI::sleep()+0x13>
c00181d0:	a1 60 17 03 c0       	mov    eax,ds:0xc0031760
c00181d5:	ff d0                	call   eax
c00181d7:	90                   	nop
c00181d8:	83 c4 0c             	add    esp,0xc
c00181db:	c3                   	ret    

c00181dc <ACPI::open(int, int, void*)>:
c00181dc:	57                   	push   edi
c00181dd:	56                   	push   esi
c00181de:	53                   	push   ebx
c00181df:	81 ec 60 01 00 00    	sub    esp,0x160
c00181e5:	83 ec 0c             	sub    esp,0xc
c00181e8:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c00181ef:	e8 0e fe ff ff       	call   c0018002 <ACPI::detectPCI()>
c00181f4:	83 c4 10             	add    esp,0x10
c00181f7:	83 ec 0c             	sub    esp,0xc
c00181fa:	68 8c be 02 c0       	push   0xc002be8c
c00181ff:	e8 fa 4a 00 00       	call   c001ccfe <Thr::loadKernelSymbolTable(char const*)>
c0018204:	83 c4 10             	add    esp,0x10
c0018207:	83 ec 04             	sub    esp,0x4
c001820a:	6a 0c                	push   0xc
c001820c:	68 aa be 02 c0       	push   0xc002beaa
c0018211:	68 bb be 02 c0       	push   0xc002bebb
c0018216:	e8 3c 2f 00 00       	call   c001b157 <Reg::readIntWithDefault(char*, char*, int)>
c001821b:	83 c4 10             	add    esp,0x10
c001821e:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0018225:	83 ec 0c             	sub    esp,0xc
c0018228:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c001822f:	e8 6f 95 ff ff       	call   c00117a3 <Virt::setupPageSwapping(int)>
c0018234:	83 c4 10             	add    esp,0x10
c0018237:	8b 1d c8 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f0c8
c001823d:	83 ec 08             	sub    esp,0x8
c0018240:	6a 01                	push   0x1
c0018242:	68 c2 be 02 c0       	push   0xc002bec2
c0018247:	e8 29 55 00 00       	call   c001d775 <Thr::loadDLL(char const*, bool)>
c001824c:	83 c4 10             	add    esp,0x10
c001824f:	83 ec 08             	sub    esp,0x8
c0018252:	53                   	push   ebx
c0018253:	50                   	push   eax
c0018254:	e8 47 57 00 00       	call   c001d9a0 <Thr::executeDLL(unsigned long, void*)>
c0018259:	83 c4 10             	add    esp,0x10
c001825c:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0018263:	83 ec 08             	sub    esp,0x8
c0018266:	6a 12                	push   0x12
c0018268:	50                   	push   eax
c0018269:	e8 ba be ff ff       	call   c0014128 <getDevicesOfType(DeviceType)>
c001826e:	83 c4 0c             	add    esp,0xc
c0018271:	83 ec 0c             	sub    esp,0xc
c0018274:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001827b:	50                   	push   eax
c001827c:	e8 8f 12 01 00       	call   c0029510 <LinkedList<Device>::isEmpty()>
c0018281:	83 c4 10             	add    esp,0x10
c0018284:	83 f0 01             	xor    eax,0x1
c0018287:	84 c0                	test   al,al
c0018289:	0f 84 43 01 00 00    	je     c00183d2 <ACPI::open(int, int, void*)+0x1f6>
c001828f:	83 ec 0c             	sub    esp,0xc
c0018292:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018299:	50                   	push   eax
c001829a:	e8 8d 12 01 00       	call   c002952c <LinkedList<Device>::getFirstElement()>
c001829f:	83 c4 10             	add    esp,0x10
c00182a2:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c00182a9:	83 ec 0c             	sub    esp,0xc
c00182ac:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00182b3:	50                   	push   eax
c00182b4:	e8 7b 12 01 00       	call   c0029534 <LinkedList<Device>::removeFirst()>
c00182b9:	83 c4 10             	add    esp,0x10
c00182bc:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c00182c3:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c00182ca:	8b 94 24 54 01 00 00 	mov    edx,DWORD PTR [esp+0x154]
c00182d1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00182d5:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c00182db:	ba 09 00 00 00       	mov    edx,0x9
c00182e0:	fc                   	cld    
c00182e1:	89 c7                	mov    edi,eax
c00182e3:	89 de                	mov    esi,ebx
c00182e5:	89 d1                	mov    ecx,edx
c00182e7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00182e9:	83 ec 08             	sub    esp,0x8
c00182ec:	8d 44 24 38          	lea    eax,[esp+0x38]
c00182f0:	50                   	push   eax
c00182f1:	83 ec 24             	sub    esp,0x24
c00182f4:	89 e0                	mov    eax,esp
c00182f6:	89 c3                	mov    ebx,eax
c00182f8:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00182fc:	ba 09 00 00 00       	mov    edx,0x9
c0018301:	89 df                	mov    edi,ebx
c0018303:	89 c6                	mov    esi,eax
c0018305:	89 d1                	mov    ecx,edx
c0018307:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018309:	e8 2e af 00 00       	call   c002323c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c001830e:	83 c4 30             	add    esp,0x30
c0018311:	89 84 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],eax
c0018318:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0018320:	0f 84 4b ff ff ff    	je     c0018271 <ACPI::open(int, int, void*)+0x95>
c0018326:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0018331:	83 ec 0c             	sub    esp,0xc
c0018334:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001833b:	e8 4c 75 ff ff       	call   c000f88c <malloc>
c0018340:	83 c4 10             	add    esp,0x10
c0018343:	89 c3                	mov    ebx,eax
c0018345:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001834a:	83 ec 04             	sub    esp,0x4
c001834d:	50                   	push   eax
c001834e:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0018355:	53                   	push   ebx
c0018356:	e8 6f ab ff ff       	call   c0012eca <File::File(char const*, Process*)>
c001835b:	83 c4 10             	add    esp,0x10
c001835e:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0018365:	83 ec 0c             	sub    esp,0xc
c0018368:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001836f:	e8 28 ae ff ff       	call   c001319c <File::exists()>
c0018374:	83 c4 10             	add    esp,0x10
c0018377:	84 c0                	test   al,al
c0018379:	74 27                	je     c00183a2 <ACPI::open(int, int, void*)+0x1c6>
c001837b:	83 ec 08             	sub    esp,0x8
c001837e:	6a 01                	push   0x1
c0018380:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0018387:	e8 e9 53 00 00       	call   c001d775 <Thr::loadDLL(char const*, bool)>
c001838c:	83 c4 10             	add    esp,0x10
c001838f:	83 ec 08             	sub    esp,0x8
c0018392:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0018399:	50                   	push   eax
c001839a:	e8 01 56 00 00       	call   c001d9a0 <Thr::executeDLL(unsigned long, void*)>
c001839f:	83 c4 10             	add    esp,0x10
c00183a2:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00183aa:	0f 84 c1 fe ff ff    	je     c0018271 <ACPI::open(int, int, void*)+0x95>
c00183b0:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c00183b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00183b9:	83 c0 08             	add    eax,0x8
c00183bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00183be:	83 ec 0c             	sub    esp,0xc
c00183c1:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00183c8:	ff d0                	call   eax
c00183ca:	83 c4 10             	add    esp,0x10
c00183cd:	e9 9f fe ff ff       	jmp    c0018271 <ACPI::open(int, int, void*)+0x95>
c00183d2:	83 ec 0c             	sub    esp,0xc
c00183d5:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00183dc:	50                   	push   eax
c00183dd:	e8 2c 11 01 00       	call   c002950e <LinkedList<Device>::~LinkedList()>
c00183e2:	83 c4 10             	add    esp,0x10
c00183e5:	8b 1d c8 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f0c8
c00183eb:	83 ec 08             	sub    esp,0x8
c00183ee:	6a 01                	push   0x1
c00183f0:	68 dd be 02 c0       	push   0xc002bedd
c00183f5:	e8 7b 53 00 00       	call   c001d775 <Thr::loadDLL(char const*, bool)>
c00183fa:	83 c4 10             	add    esp,0x10
c00183fd:	83 ec 08             	sub    esp,0x8
c0018400:	53                   	push   ebx
c0018401:	50                   	push   eax
c0018402:	e8 99 55 00 00       	call   c001d9a0 <Thr::executeDLL(unsigned long, void*)>
c0018407:	83 c4 10             	add    esp,0x10
c001840a:	8b 1d c8 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f0c8
c0018410:	83 ec 08             	sub    esp,0x8
c0018413:	6a 01                	push   0x1
c0018415:	68 fa be 02 c0       	push   0xc002befa
c001841a:	e8 56 53 00 00       	call   c001d775 <Thr::loadDLL(char const*, bool)>
c001841f:	83 c4 10             	add    esp,0x10
c0018422:	83 ec 08             	sub    esp,0x8
c0018425:	53                   	push   ebx
c0018426:	50                   	push   eax
c0018427:	e8 74 55 00 00       	call   c001d9a0 <Thr::executeDLL(unsigned long, void*)>
c001842c:	83 c4 10             	add    esp,0x10
c001842f:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c0018434:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001843a:	83 e0 04             	and    eax,0x4
c001843d:	84 c0                	test   al,al
c001843f:	0f 84 fd 00 00 00    	je     c0018542 <ACPI::open(int, int, void*)+0x366>
c0018445:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0018450:	83 ec 0c             	sub    esp,0xc
c0018453:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c001845a:	e8 2d 74 ff ff       	call   c000f88c <malloc>
c001845f:	83 c4 10             	add    esp,0x10
c0018462:	89 c3                	mov    ebx,eax
c0018464:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0018469:	83 ec 04             	sub    esp,0x4
c001846c:	50                   	push   eax
c001846d:	68 17 bf 02 c0       	push   0xc002bf17
c0018472:	53                   	push   ebx
c0018473:	e8 52 aa ff ff       	call   c0012eca <File::File(char const*, Process*)>
c0018478:	83 c4 10             	add    esp,0x10
c001847b:	89 9c 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],ebx
c0018482:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001848a:	74 1a                	je     c00184a6 <ACPI::open(int, int, void*)+0x2ca>
c001848c:	83 ec 0c             	sub    esp,0xc
c001848f:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0018496:	e8 01 ad ff ff       	call   c001319c <File::exists()>
c001849b:	83 c4 10             	add    esp,0x10
c001849e:	84 c0                	test   al,al
c00184a0:	74 04                	je     c00184a6 <ACPI::open(int, int, void*)+0x2ca>
c00184a2:	b0 01                	mov    al,0x1
c00184a4:	eb 02                	jmp    c00184a8 <ACPI::open(int, int, void*)+0x2cc>
c00184a6:	b0 00                	mov    al,0x0
c00184a8:	84 c0                	test   al,al
c00184aa:	74 25                	je     c00184d1 <ACPI::open(int, int, void*)+0x2f5>
c00184ac:	83 ec 08             	sub    esp,0x8
c00184af:	6a 01                	push   0x1
c00184b1:	68 17 bf 02 c0       	push   0xc002bf17
c00184b6:	e8 ba 52 00 00       	call   c001d775 <Thr::loadDLL(char const*, bool)>
c00184bb:	83 c4 10             	add    esp,0x10
c00184be:	83 ec 08             	sub    esp,0x8
c00184c1:	ff b4 24 78 01 00 00 	push   DWORD PTR [esp+0x178]
c00184c8:	50                   	push   eax
c00184c9:	e8 d2 54 00 00       	call   c001d9a0 <Thr::executeDLL(unsigned long, void*)>
c00184ce:	83 c4 10             	add    esp,0x10
c00184d1:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00184d9:	74 27                	je     c0018502 <ACPI::open(int, int, void*)+0x326>
c00184db:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00184e3:	74 1d                	je     c0018502 <ACPI::open(int, int, void*)+0x326>
c00184e5:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c00184ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00184ee:	83 c0 08             	add    eax,0x8
c00184f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00184f3:	83 ec 0c             	sub    esp,0xc
c00184f6:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00184fd:	ff d0                	call   eax
c00184ff:	83 c4 10             	add    esp,0x10
c0018502:	a1 88 19 03 c0       	mov    eax,ds:0xc0031988
c0018507:	83 ec 08             	sub    esp,0x8
c001850a:	68 34 bf 02 c0       	push   0xc002bf34
c001850f:	50                   	push   eax
c0018510:	e8 c9 f3 ff ff       	call   c00178de <findDataTable(unsigned char*, char*)>
c0018515:	83 c4 10             	add    esp,0x10
c0018518:	89 84 24 44 01 00 00 	mov    DWORD PTR [esp+0x144],eax
c001851f:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c0018527:	74 19                	je     c0018542 <ACPI::open(int, int, void*)+0x366>
c0018529:	83 ec 08             	sub    esp,0x8
c001852c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0018533:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c001853a:	e8 3d fc ff ff       	call   c001817c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001853f:	83 c4 10             	add    esp,0x10
c0018542:	b8 00 00 00 00       	mov    eax,0x0
c0018547:	81 c4 60 01 00 00    	add    esp,0x160
c001854d:	5b                   	pop    ebx
c001854e:	5e                   	pop    esi
c001854f:	5f                   	pop    edi
c0018550:	c3                   	ret    
c0018551:	90                   	nop

c0018552 <CPU::close(int, int, void*)>:
c0018552:	31 c0                	xor    eax,eax
c0018554:	c3                   	ret    
c0018555:	90                   	nop

c0018556 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018556:	55                   	push   ebp
c0018557:	57                   	push   edi
c0018558:	56                   	push   esi
c0018559:	53                   	push   ebx
c001855a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001855e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018562:	89 ce                	mov    esi,ecx
c0018564:	89 d5                	mov    ebp,edx
c0018566:	80 f9 04             	cmp    cl,0x4
c0018569:	75 28                	jne    c0018593 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c001856b:	8d 42 f9             	lea    eax,[edx-0x7]
c001856e:	3c 03                	cmp    al,0x3
c0018570:	0f 86 63 01 00 00    	jbe    c00186d9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018576:	80 fa 03             	cmp    dl,0x3
c0018579:	0f 84 5a 01 00 00    	je     c00186d9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001857f:	8d 7a f2             	lea    edi,[edx-0xe]
c0018582:	b8 f0 e4 02 c0       	mov    eax,0xc002e4f0
c0018587:	89 fb                	mov    ebx,edi
c0018589:	80 fb 01             	cmp    bl,0x1
c001858c:	77 4e                	ja     c00185dc <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c001858e:	e9 52 01 00 00       	jmp    c00186e5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018593:	80 f9 05             	cmp    cl,0x5
c0018596:	75 4d                	jne    c00185e5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018598:	b8 00 e5 02 c0       	mov    eax,0xc002e500
c001859d:	80 fa 03             	cmp    dl,0x3
c00185a0:	0f 86 3f 01 00 00    	jbe    c00186e5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185a6:	8d 7a fa             	lea    edi,[edx-0x6]
c00185a9:	b8 10 e5 02 c0       	mov    eax,0xc002e510
c00185ae:	89 fb                	mov    ebx,edi
c00185b0:	80 fb 01             	cmp    bl,0x1
c00185b3:	0f 86 2c 01 00 00    	jbe    c00186e5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185b9:	b8 20 e5 02 c0       	mov    eax,0xc002e520
c00185be:	80 fa 08             	cmp    dl,0x8
c00185c1:	0f 84 1e 01 00 00    	je     c00186e5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185c7:	89 d7                	mov    edi,edx
c00185c9:	b8 30 e5 02 c0       	mov    eax,0xc002e530
c00185ce:	83 e7 fb             	and    edi,0xfffffffb
c00185d1:	89 fb                	mov    ebx,edi
c00185d3:	80 fb 09             	cmp    bl,0x9
c00185d6:	0f 84 09 01 00 00    	je     c00186e5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185dc:	31 c0                	xor    eax,eax
c00185de:	89 eb                	mov    ebx,ebp
c00185e0:	0f b6 fb             	movzx  edi,bl
c00185e3:	eb 30                	jmp    c0018615 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00185e5:	31 c0                	xor    eax,eax
c00185e7:	80 f9 06             	cmp    cl,0x6
c00185ea:	75 f2                	jne    c00185de <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00185ec:	80 fa 0a             	cmp    dl,0xa
c00185ef:	77 ed                	ja     c00185de <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00185f1:	bf de 05 00 00       	mov    edi,0x5de
c00185f6:	0f a3 d7             	bt     edi,edx
c00185f9:	73 e3                	jae    c00185de <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00185fb:	b8 40 e5 02 c0       	mov    eax,0xc002e540
c0018600:	e9 e0 00 00 00       	jmp    c00186e5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018605:	39 c7                	cmp    edi,eax
c0018607:	0f 84 d3 00 00 00    	je     c00186e0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001860d:	40                   	inc    eax
c001860e:	3d d0 00 00 00       	cmp    eax,0xd0
c0018613:	74 09                	je     c001861e <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018615:	89 f3                	mov    ebx,esi
c0018617:	80 fb 0f             	cmp    bl,0xf
c001861a:	75 f1                	jne    c001860d <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c001861c:	eb e7                	jmp    c0018605 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c001861e:	80 f9 10             	cmp    cl,0x10
c0018621:	75 14                	jne    c0018637 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018623:	8d 42 fc             	lea    eax,[edx-0x4]
c0018626:	83 e0 fb             	and    eax,0xfffffffb
c0018629:	3c 02                	cmp    al,0x2
c001862b:	76 34                	jbe    c0018661 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c001862d:	b8 42 c3 02 c0       	mov    eax,0xc002c342
c0018632:	80 fa 02             	cmp    dl,0x2
c0018635:	eb 24                	jmp    c001865b <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018637:	80 f9 11             	cmp    cl,0x11
c001863a:	75 13                	jne    c001864f <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c001863c:	b8 42 c3 02 c0       	mov    eax,0xc002c342
c0018641:	80 fa 03             	cmp    dl,0x3
c0018644:	0f 85 9b 00 00 00    	jne    c00186e5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001864a:	e9 91 00 00 00       	jmp    c00186e0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001864f:	80 f9 12             	cmp    cl,0x12
c0018652:	75 14                	jne    c0018668 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018654:	b8 42 c3 02 c0       	mov    eax,0xc002c342
c0018659:	fe ca                	dec    dl
c001865b:	0f 85 84 00 00 00    	jne    c00186e5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018661:	b8 60 e5 02 c0       	mov    eax,0xc002e560
c0018666:	eb 7d                	jmp    c00186e5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018668:	80 f9 14             	cmp    cl,0x14
c001866b:	75 12                	jne    c001867f <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c001866d:	4a                   	dec    edx
c001866e:	b8 42 c3 02 c0       	mov    eax,0xc002c342
c0018673:	80 fa 01             	cmp    dl,0x1
c0018676:	77 6d                	ja     c00186e5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018678:	b8 70 e5 02 c0       	mov    eax,0xc002e570
c001867d:	eb 66                	jmp    c00186e5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001867f:	80 f9 15             	cmp    cl,0x15
c0018682:	75 31                	jne    c00186b5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018684:	b8 80 e5 02 c0       	mov    eax,0xc002e580
c0018689:	80 fa 01             	cmp    dl,0x1
c001868c:	74 57                	je     c00186e5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001868e:	b8 42 c3 02 c0       	mov    eax,0xc002c342
c0018693:	80 fa 13             	cmp    dl,0x13
c0018696:	76 0c                	jbe    c00186a4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018698:	80 fa 30             	cmp    dl,0x30
c001869b:	75 48                	jne    c00186e5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001869d:	b8 a0 e5 02 c0       	mov    eax,0xc002e5a0
c00186a2:	eb 41                	jmp    c00186e5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186a4:	b9 04 00 09 00       	mov    ecx,0x90004
c00186a9:	0f a3 d1             	bt     ecx,edx
c00186ac:	73 37                	jae    c00186e5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186ae:	b8 90 e5 02 c0       	mov    eax,0xc002e590
c00186b3:	eb 30                	jmp    c00186e5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186b5:	b8 42 c3 02 c0       	mov    eax,0xc002c342
c00186ba:	80 f9 16             	cmp    cl,0x16
c00186bd:	75 26                	jne    c00186e5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186bf:	b8 b0 e5 02 c0       	mov    eax,0xc002e5b0
c00186c4:	84 d2                	test   dl,dl
c00186c6:	74 1d                	je     c00186e5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186c8:	b8 42 c3 02 c0       	mov    eax,0xc002c342
c00186cd:	80 fa 30             	cmp    dl,0x30
c00186d0:	75 13                	jne    c00186e5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186d2:	b8 c0 e5 02 c0       	mov    eax,0xc002e5c0
c00186d7:	eb 0c                	jmp    c00186e5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186d9:	b8 e0 e4 02 c0       	mov    eax,0xc002e4e0
c00186de:	eb 05                	jmp    c00186e5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186e0:	b8 50 e5 02 c0       	mov    eax,0xc002e550
c00186e5:	5b                   	pop    ebx
c00186e6:	5e                   	pop    esi
c00186e7:	5f                   	pop    edi
c00186e8:	5d                   	pop    ebp
c00186e9:	c3                   	ret    

c00186ea <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00186ea:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00186ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00186f2:	80 f9 04             	cmp    cl,0x4
c00186f5:	75 6b                	jne    c0018762 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c00186f7:	b8 40 e3 02 c0       	mov    eax,0xc002e340
c00186fc:	80 fa 01             	cmp    dl,0x1
c00186ff:	0f 86 92 02 00 00    	jbe    c0018997 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018705:	b8 50 e3 02 c0       	mov    eax,0xc002e350
c001870a:	80 fa 02             	cmp    dl,0x2
c001870d:	0f 84 84 02 00 00    	je     c0018997 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018713:	b8 60 e3 02 c0       	mov    eax,0xc002e360
c0018718:	80 fa 03             	cmp    dl,0x3
c001871b:	0f 84 76 02 00 00    	je     c0018997 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018721:	b8 70 e3 02 c0       	mov    eax,0xc002e370
c0018726:	80 fa 04             	cmp    dl,0x4
c0018729:	0f 84 68 02 00 00    	je     c0018997 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001872f:	b8 80 e3 02 c0       	mov    eax,0xc002e380
c0018734:	80 fa 05             	cmp    dl,0x5
c0018737:	0f 84 5a 02 00 00    	je     c0018997 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001873d:	b8 60 e3 02 c0       	mov    eax,0xc002e360
c0018742:	80 fa 07             	cmp    dl,0x7
c0018745:	0f 84 4c 02 00 00    	je     c0018997 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001874b:	83 ea 08             	sub    edx,0x8
c001874e:	b8 42 c3 02 c0       	mov    eax,0xc002c342
c0018753:	80 fa 01             	cmp    dl,0x1
c0018756:	0f 87 3b 02 00 00    	ja     c0018997 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001875c:	b8 90 e3 02 c0       	mov    eax,0xc002e390
c0018761:	c3                   	ret    
c0018762:	80 f9 05             	cmp    cl,0x5
c0018765:	75 45                	jne    c00187ac <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018767:	8d 4a ff             	lea    ecx,[edx-0x1]
c001876a:	b8 a0 e3 02 c0       	mov    eax,0xc002e3a0
c001876f:	80 f9 02             	cmp    cl,0x2
c0018772:	0f 86 1f 02 00 00    	jbe    c0018997 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018778:	80 fa 04             	cmp    dl,0x4
c001877b:	0f 84 f3 01 00 00    	je     c0018974 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018781:	80 fa 07             	cmp    dl,0x7
c0018784:	0f 84 0d 02 00 00    	je     c0018997 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001878a:	b8 b0 e3 02 c0       	mov    eax,0xc002e3b0
c001878f:	80 fa 08             	cmp    dl,0x8
c0018792:	0f 84 ff 01 00 00    	je     c0018997 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018798:	b8 42 c3 02 c0       	mov    eax,0xc002c342
c001879d:	80 fa 09             	cmp    dl,0x9
c00187a0:	0f 85 f1 01 00 00    	jne    c0018997 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187a6:	b8 c0 e3 02 c0       	mov    eax,0xc002e3c0
c00187ab:	c3                   	ret    
c00187ac:	80 f9 06             	cmp    cl,0x6
c00187af:	0f 85 85 01 00 00    	jne    c001893a <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c00187b5:	b8 d0 e3 02 c0       	mov    eax,0xc002e3d0
c00187ba:	80 fa 01             	cmp    dl,0x1
c00187bd:	0f 84 d4 01 00 00    	je     c0018997 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187c3:	8d 42 fb             	lea    eax,[edx-0x5]
c00187c6:	3c 01                	cmp    al,0x1
c00187c8:	0f 86 ac 01 00 00    	jbe    c001897a <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00187ce:	80 fa 03             	cmp    dl,0x3
c00187d1:	0f 84 a3 01 00 00    	je     c001897a <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00187d7:	8d 4a f9             	lea    ecx,[edx-0x7]
c00187da:	b8 f0 e3 02 c0       	mov    eax,0xc002e3f0
c00187df:	80 f9 01             	cmp    cl,0x1
c00187e2:	0f 86 af 01 00 00    	jbe    c0018997 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187e8:	80 fa 09             	cmp    dl,0x9
c00187eb:	0f 84 8f 01 00 00    	je     c0018980 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c00187f1:	8d 4a f6             	lea    ecx,[edx-0xa]
c00187f4:	80 f9 01             	cmp    cl,0x1
c00187f7:	0f 86 9a 01 00 00    	jbe    c0018997 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187fd:	b8 00 e4 02 c0       	mov    eax,0xc002e400
c0018802:	80 fa 0d             	cmp    dl,0xd
c0018805:	0f 84 8c 01 00 00    	je     c0018997 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001880b:	b8 10 e4 02 c0       	mov    eax,0xc002e410
c0018810:	80 fa 0e             	cmp    dl,0xe
c0018813:	0f 84 7e 01 00 00    	je     c0018997 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018819:	b8 20 e4 02 c0       	mov    eax,0xc002e420
c001881e:	80 fa 0f             	cmp    dl,0xf
c0018821:	0f 84 70 01 00 00    	je     c0018997 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018827:	b8 00 e4 02 c0       	mov    eax,0xc002e400
c001882c:	80 fa 15             	cmp    dl,0x15
c001882f:	0f 84 62 01 00 00    	je     c0018997 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018835:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018838:	b8 20 e4 02 c0       	mov    eax,0xc002e420
c001883d:	80 f9 01             	cmp    cl,0x1
c0018840:	0f 86 51 01 00 00    	jbe    c0018997 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018846:	80 fa 1a             	cmp    dl,0x1a
c0018849:	0f 84 37 01 00 00    	je     c0018986 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c001884f:	80 fa 1c             	cmp    dl,0x1c
c0018852:	0f 84 34 01 00 00    	je     c001898c <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018858:	80 fa 1d             	cmp    dl,0x1d
c001885b:	0f 84 36 01 00 00    	je     c0018997 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018861:	b8 50 e4 02 c0       	mov    eax,0xc002e450
c0018866:	80 fa 25             	cmp    dl,0x25
c0018869:	0f 84 28 01 00 00    	je     c0018997 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001886f:	8d 4a da             	lea    ecx,[edx-0x26]
c0018872:	b8 40 e4 02 c0       	mov    eax,0xc002e440
c0018877:	80 f9 01             	cmp    cl,0x1
c001887a:	0f 86 17 01 00 00    	jbe    c0018997 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018880:	b8 60 e4 02 c0       	mov    eax,0xc002e460
c0018885:	80 fa 2a             	cmp    dl,0x2a
c0018888:	0f 84 09 01 00 00    	je     c0018997 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001888e:	b8 50 e4 02 c0       	mov    eax,0xc002e450
c0018893:	80 fa 2c             	cmp    dl,0x2c
c0018896:	0f 84 fb 00 00 00    	je     c0018997 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001889c:	b8 60 e4 02 c0       	mov    eax,0xc002e460
c00188a1:	80 fa 2d             	cmp    dl,0x2d
c00188a4:	0f 84 ed 00 00 00    	je     c0018997 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188aa:	b8 30 e4 02 c0       	mov    eax,0xc002e430
c00188af:	80 fa 2e             	cmp    dl,0x2e
c00188b2:	0f 84 df 00 00 00    	je     c0018997 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188b8:	b8 50 e4 02 c0       	mov    eax,0xc002e450
c00188bd:	80 fa 2f             	cmp    dl,0x2f
c00188c0:	0f 84 d1 00 00 00    	je     c0018997 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188c6:	8d 4a cb             	lea    ecx,[edx-0x35]
c00188c9:	b8 40 e4 02 c0       	mov    eax,0xc002e440
c00188ce:	80 f9 01             	cmp    cl,0x1
c00188d1:	0f 86 c0 00 00 00    	jbe    c0018997 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188d7:	b8 70 e4 02 c0       	mov    eax,0xc002e470
c00188dc:	80 fa 37             	cmp    dl,0x37
c00188df:	0f 84 b2 00 00 00    	je     c0018997 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188e5:	b8 80 e4 02 c0       	mov    eax,0xc002e480
c00188ea:	80 fa 3a             	cmp    dl,0x3a
c00188ed:	0f 84 a4 00 00 00    	je     c0018997 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188f3:	b8 90 e4 02 c0       	mov    eax,0xc002e490
c00188f8:	80 fa 3c             	cmp    dl,0x3c
c00188fb:	0f 84 96 00 00 00    	je     c0018997 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018901:	b8 a0 e4 02 c0       	mov    eax,0xc002e4a0
c0018906:	80 fa 3d             	cmp    dl,0x3d
c0018909:	0f 84 88 00 00 00    	je     c0018997 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001890f:	b8 80 e4 02 c0       	mov    eax,0xc002e480
c0018914:	80 fa 3e             	cmp    dl,0x3e
c0018917:	74 7e                	je     c0018997 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018919:	8d 42 bb             	lea    eax,[edx-0x45]
c001891c:	3c 01                	cmp    al,0x1
c001891e:	76 72                	jbe    c0018992 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018920:	80 fa 3f             	cmp    dl,0x3f
c0018923:	74 6d                	je     c0018992 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018925:	80 fa 4a             	cmp    dl,0x4a
c0018928:	74 0a                	je     c0018934 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c001892a:	b8 42 c3 02 c0       	mov    eax,0xc002c342
c001892f:	80 fa 4d             	cmp    dl,0x4d
c0018932:	75 63                	jne    c0018997 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018934:	b8 70 e4 02 c0       	mov    eax,0xc002e470
c0018939:	c3                   	ret    
c001893a:	b8 42 c3 02 c0       	mov    eax,0xc002c342
c001893f:	80 f9 0b             	cmp    cl,0xb
c0018942:	75 0a                	jne    c001894e <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018944:	fe ca                	dec    dl
c0018946:	75 4f                	jne    c0018997 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018948:	b8 b0 e4 02 c0       	mov    eax,0xc002e4b0
c001894d:	c3                   	ret    
c001894e:	80 f9 0f             	cmp    cl,0xf
c0018951:	75 44                	jne    c0018997 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018953:	b8 c0 e4 02 c0       	mov    eax,0xc002e4c0
c0018958:	80 fa 02             	cmp    dl,0x2
c001895b:	76 3a                	jbe    c0018997 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001895d:	8d 42 fd             	lea    eax,[edx-0x3]
c0018960:	3c 01                	cmp    al,0x1
c0018962:	76 0a                	jbe    c001896e <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018964:	b8 42 c3 02 c0       	mov    eax,0xc002c342
c0018969:	80 fa 06             	cmp    dl,0x6
c001896c:	75 29                	jne    c0018997 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001896e:	b8 d0 e4 02 c0       	mov    eax,0xc002e4d0
c0018973:	c3                   	ret    
c0018974:	b8 b0 e3 02 c0       	mov    eax,0xc002e3b0
c0018979:	c3                   	ret    
c001897a:	b8 e0 e3 02 c0       	mov    eax,0xc002e3e0
c001897f:	c3                   	ret    
c0018980:	b8 00 e4 02 c0       	mov    eax,0xc002e400
c0018985:	c3                   	ret    
c0018986:	b8 30 e4 02 c0       	mov    eax,0xc002e430
c001898b:	c3                   	ret    
c001898c:	b8 40 e4 02 c0       	mov    eax,0xc002e440
c0018991:	c3                   	ret    
c0018992:	b8 90 e4 02 c0       	mov    eax,0xc002e490
c0018997:	c3                   	ret    

c0018998 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018998:	60                   	pusha  
c0018999:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001899d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00189a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00189a5:	9c                   	pushf  
c00189a6:	fa                   	cli    
c00189a7:	0f 09                	wbinvd 
c00189a9:	0f 30                	wrmsr  
c00189ab:	9d                   	popf   
c00189ac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00189b0:	89 02                	mov    DWORD PTR [edx],eax
c00189b2:	61                   	popa   
c00189b3:	c3                   	ret    

c00189b4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c00189b4:	60                   	pusha  
c00189b5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00189b9:	9c                   	pushf  
c00189ba:	fa                   	cli    
c00189bb:	0f 09                	wbinvd 
c00189bd:	31 c0                	xor    eax,eax
c00189bf:	31 d2                	xor    edx,edx
c00189c1:	0f 32                	rdmsr  
c00189c3:	9d                   	popf   
c00189c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00189c8:	89 02                	mov    DWORD PTR [edx],eax
c00189ca:	61                   	popa   
c00189cb:	c3                   	ret    

c00189cc <CPU::AMD_K6_writeback(int, int, int)>:
c00189cc:	56                   	push   esi
c00189cd:	53                   	push   ebx
c00189ce:	83 ec 10             	sub    esp,0x10
c00189d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189d5:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c00189da:	75 5d                	jne    c0018a39 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00189dc:	83 f8 08             	cmp    eax,0x8
c00189df:	75 09                	jne    c00189ea <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c00189e1:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c00189e6:	7e 13                	jle    c00189fb <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00189e8:	eb 30                	jmp    c0018a1a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00189ea:	83 f8 06             	cmp    eax,0x6
c00189ed:	7c 4a                	jl     c0018a39 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00189ef:	83 f8 07             	cmp    eax,0x7
c00189f2:	7e 07                	jle    c00189fb <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00189f4:	83 f8 09             	cmp    eax,0x9
c00189f7:	74 21                	je     c0018a1a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00189f9:	eb 3e                	jmp    c0018a39 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00189fb:	89 e6                	mov    esi,esp
c00189fd:	8b 1d 08 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f108
c0018a03:	56                   	push   esi
c0018a04:	c1 eb 15             	shr    ebx,0x15
c0018a07:	68 82 00 00 c0       	push   0xc0000082
c0018a0c:	83 e3 7e             	and    ebx,0x7e
c0018a0f:	e8 a0 ff ff ff       	call   c00189b4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018a14:	56                   	push   esi
c0018a15:	6a 00                	push   0x0
c0018a17:	53                   	push   ebx
c0018a18:	eb 12                	jmp    c0018a2c <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018a1a:	89 e3                	mov    ebx,esp
c0018a1c:	53                   	push   ebx
c0018a1d:	68 82 00 00 c0       	push   0xc0000082
c0018a22:	e8 8d ff ff ff       	call   c00189b4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018a27:	53                   	push   ebx
c0018a28:	6a 00                	push   0x0
c0018a2a:	6a 00                	push   0x0
c0018a2c:	68 82 00 00 c0       	push   0xc0000082
c0018a31:	e8 62 ff ff ff       	call   c0018998 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018a36:	83 c4 18             	add    esp,0x18
c0018a39:	83 c4 10             	add    esp,0x10
c0018a3c:	5b                   	pop    ebx
c0018a3d:	5e                   	pop    esi
c0018a3e:	c3                   	ret    
c0018a3f:	90                   	nop

c0018a40 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018a40:	55                   	push   ebp
c0018a41:	57                   	push   edi
c0018a42:	56                   	push   esi
c0018a43:	53                   	push   ebx
c0018a44:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018a48:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018a4c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018a50:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018a54:	39 05 e0 e5 02 c0    	cmp    DWORD PTR ds:0xc002e5e0,eax
c0018a5a:	75 23                	jne    c0018a7f <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018a5c:	a1 ec 1b 03 c0       	mov    eax,ds:0xc0031bec
c0018a61:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018a65:	89 06                	mov    DWORD PTR [esi],eax
c0018a67:	a1 e8 1b 03 c0       	mov    eax,ds:0xc0031be8
c0018a6c:	89 07                	mov    DWORD PTR [edi],eax
c0018a6e:	a1 e4 1b 03 c0       	mov    eax,ds:0xc0031be4
c0018a73:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018a76:	a1 e0 1b 03 c0       	mov    eax,ds:0xc0031be0
c0018a7b:	89 02                	mov    DWORD PTR [edx],eax
c0018a7d:	eb 3f                	jmp    c0018abe <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018a7f:	31 c9                	xor    ecx,ecx
c0018a81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018a85:	0f a2                	cpuid  
c0018a87:	89 06                	mov    DWORD PTR [esi],eax
c0018a89:	89 1f                	mov    DWORD PTR [edi],ebx
c0018a8b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018a8f:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018a92:	89 10                	mov    DWORD PTR [eax],edx
c0018a94:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018a98:	a3 e0 e5 02 c0       	mov    ds:0xc002e5e0,eax
c0018a9d:	8b 06                	mov    eax,DWORD PTR [esi]
c0018a9f:	a3 ec 1b 03 c0       	mov    ds:0xc0031bec,eax
c0018aa4:	8b 07                	mov    eax,DWORD PTR [edi]
c0018aa6:	a3 e8 1b 03 c0       	mov    ds:0xc0031be8,eax
c0018aab:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018aae:	a3 e4 1b 03 c0       	mov    ds:0xc0031be4,eax
c0018ab3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018ab7:	8b 00                	mov    eax,DWORD PTR [eax]
c0018ab9:	a3 e0 1b 03 c0       	mov    ds:0xc0031be0,eax
c0018abe:	5b                   	pop    ebx
c0018abf:	5e                   	pop    esi
c0018ac0:	5f                   	pop    edi
c0018ac1:	5d                   	pop    ebp
c0018ac2:	c3                   	ret    
c0018ac3:	90                   	nop

c0018ac4 <CPU::cpuidCheckEDX(unsigned int)>:
c0018ac4:	83 ec 10             	sub    esp,0x10
c0018ac7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018acb:	50                   	push   eax
c0018acc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ad0:	50                   	push   eax
c0018ad1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ad5:	50                   	push   eax
c0018ad6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ada:	50                   	push   eax
c0018adb:	6a 01                	push   0x1
c0018add:	e8 5e ff ff ff       	call   c0018a40 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018ae2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ae6:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018aea:	0f 95 c0             	setne  al
c0018aed:	83 c4 24             	add    esp,0x24
c0018af0:	c3                   	ret    
c0018af1:	90                   	nop

c0018af2 <CPU::cpuidCheckECX(unsigned int)>:
c0018af2:	83 ec 10             	sub    esp,0x10
c0018af5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018af9:	50                   	push   eax
c0018afa:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018afe:	50                   	push   eax
c0018aff:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b03:	50                   	push   eax
c0018b04:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b08:	50                   	push   eax
c0018b09:	6a 01                	push   0x1
c0018b0b:	e8 30 ff ff ff       	call   c0018a40 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018b10:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018b14:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018b18:	0f 95 c0             	setne  al
c0018b1b:	83 c4 24             	add    esp,0x24
c0018b1e:	c3                   	ret    
c0018b1f:	90                   	nop

c0018b20 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018b20:	83 ec 10             	sub    esp,0x10
c0018b23:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b27:	50                   	push   eax
c0018b28:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b2c:	50                   	push   eax
c0018b2d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b31:	50                   	push   eax
c0018b32:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b36:	50                   	push   eax
c0018b37:	6a 07                	push   0x7
c0018b39:	e8 02 ff ff ff       	call   c0018a40 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018b3e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018b42:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018b46:	0f 95 c0             	setne  al
c0018b49:	83 c4 24             	add    esp,0x24
c0018b4c:	c3                   	ret    
c0018b4d:	90                   	nop

c0018b4e <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018b4e:	83 ec 10             	sub    esp,0x10
c0018b51:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b55:	50                   	push   eax
c0018b56:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b5a:	50                   	push   eax
c0018b5b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b5f:	50                   	push   eax
c0018b60:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b64:	50                   	push   eax
c0018b65:	6a 07                	push   0x7
c0018b67:	e8 d4 fe ff ff       	call   c0018a40 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018b6c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018b70:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018b74:	0f 95 c0             	setne  al
c0018b77:	83 c4 24             	add    esp,0x24
c0018b7a:	c3                   	ret    
c0018b7b:	90                   	nop

c0018b7c <CPU::CPU()>:
c0018b7c:	83 ec 0c             	sub    esp,0xc
c0018b7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b83:	83 ec 08             	sub    esp,0x8
c0018b86:	68 42 c3 02 c0       	push   0xc002c342
c0018b8b:	50                   	push   eax
c0018b8c:	e8 17 b4 ff ff       	call   c0013fa8 <Device::Device(char const*)>
c0018b91:	83 c4 10             	add    esp,0x10
c0018b94:	ba 1c c4 02 c0       	mov    edx,0xc002c41c
c0018b99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b9d:	89 10                	mov    DWORD PTR [eax],edx
c0018b9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ba3:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018bad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018bb1:	05 78 01 00 00       	add    eax,0x178
c0018bb6:	83 ec 0c             	sub    esp,0xc
c0018bb9:	50                   	push   eax
c0018bba:	e8 e3 64 ff ff       	call   c000f0a2 <GDT::GDT()>
c0018bbf:	83 c4 10             	add    esp,0x10
c0018bc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018bc6:	05 7c 09 00 00       	add    eax,0x97c
c0018bcb:	83 ec 0c             	sub    esp,0xc
c0018bce:	50                   	push   eax
c0018bcf:	e8 38 67 ff ff       	call   c000f30c <IDT::IDT()>
c0018bd4:	83 c4 10             	add    esp,0x10
c0018bd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018bdb:	05 7c 11 00 00       	add    eax,0x117c
c0018be0:	83 ec 0c             	sub    esp,0xc
c0018be3:	50                   	push   eax
c0018be4:	e8 ad 82 ff ff       	call   c0010e96 <TSS::TSS()>
c0018be9:	83 c4 10             	add    esp,0x10
c0018bec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018bf0:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018bf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018bfb:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018c05:	90                   	nop
c0018c06:	83 c4 0c             	add    esp,0xc
c0018c09:	c3                   	ret    

c0018c0a <CPU::displayFeatures()>:
c0018c0a:	53                   	push   ebx
c0018c0b:	83 ec 10             	sub    esp,0x10
c0018c0e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018c12:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018c18:	68 50 c0 02 c0       	push   0xc002c050
c0018c1d:	e8 49 9d ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0018c22:	59                   	pop    ecx
c0018c23:	58                   	pop    eax
c0018c24:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018c2a:	50                   	push   eax
c0018c2b:	68 61 c0 02 c0       	push   0xc002c061
c0018c30:	e8 36 9d ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0018c35:	58                   	pop    eax
c0018c36:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018c3c:	5a                   	pop    edx
c0018c3d:	c1 e8 0e             	shr    eax,0xe
c0018c40:	0f b6 c0             	movzx  eax,al
c0018c43:	50                   	push   eax
c0018c44:	68 72 c0 02 c0       	push   0xc002c072
c0018c49:	e8 1d 9d ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0018c4e:	59                   	pop    ecx
c0018c4f:	58                   	pop    eax
c0018c50:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018c56:	66 c1 e8 06          	shr    ax,0x6
c0018c5a:	0f b6 c0             	movzx  eax,al
c0018c5d:	50                   	push   eax
c0018c5e:	68 83 c0 02 c0       	push   0xc002c083
c0018c63:	e8 03 9d ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0018c68:	c7 04 24 30 c5 02 c0 	mov    DWORD PTR [esp],0xc002c530
c0018c6f:	e8 f7 9c ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0018c74:	83 c4 10             	add    esp,0x10
c0018c77:	b8 f6 a9 02 c0       	mov    eax,0xc002a9f6
c0018c7c:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018c83:	74 05                	je     c0018c8a <CPU::displayFeatures()+0x80>
c0018c85:	b8 f2 a9 02 c0       	mov    eax,0xc002a9f2
c0018c8a:	52                   	push   edx
c0018c8b:	52                   	push   edx
c0018c8c:	50                   	push   eax
c0018c8d:	68 94 c0 02 c0       	push   0xc002c094
c0018c92:	e8 d4 9c ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0018c97:	83 c4 10             	add    esp,0x10
c0018c9a:	b8 f2 a9 02 c0       	mov    eax,0xc002a9f2
c0018c9f:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018ca6:	78 05                	js     c0018cad <CPU::displayFeatures()+0xa3>
c0018ca8:	b8 f6 a9 02 c0       	mov    eax,0xc002a9f6
c0018cad:	51                   	push   ecx
c0018cae:	51                   	push   ecx
c0018caf:	50                   	push   eax
c0018cb0:	68 ab c0 02 c0       	push   0xc002c0ab
c0018cb5:	e8 b1 9c ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0018cba:	83 c4 10             	add    esp,0x10
c0018cbd:	b8 f2 a9 02 c0       	mov    eax,0xc002a9f2
c0018cc2:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018cc9:	75 05                	jne    c0018cd0 <CPU::displayFeatures()+0xc6>
c0018ccb:	b8 f6 a9 02 c0       	mov    eax,0xc002a9f6
c0018cd0:	52                   	push   edx
c0018cd1:	52                   	push   edx
c0018cd2:	50                   	push   eax
c0018cd3:	68 c2 c0 02 c0       	push   0xc002c0c2
c0018cd8:	e8 8e 9c ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0018cdd:	83 c4 10             	add    esp,0x10
c0018ce0:	b8 f2 a9 02 c0       	mov    eax,0xc002a9f2
c0018ce5:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018cec:	75 05                	jne    c0018cf3 <CPU::displayFeatures()+0xe9>
c0018cee:	b8 f6 a9 02 c0       	mov    eax,0xc002a9f6
c0018cf3:	51                   	push   ecx
c0018cf4:	51                   	push   ecx
c0018cf5:	50                   	push   eax
c0018cf6:	68 d9 c0 02 c0       	push   0xc002c0d9
c0018cfb:	e8 6b 9c ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0018d00:	83 c4 10             	add    esp,0x10
c0018d03:	b8 f2 a9 02 c0       	mov    eax,0xc002a9f2
c0018d08:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018d0f:	75 05                	jne    c0018d16 <CPU::displayFeatures()+0x10c>
c0018d11:	b8 f6 a9 02 c0       	mov    eax,0xc002a9f6
c0018d16:	52                   	push   edx
c0018d17:	52                   	push   edx
c0018d18:	50                   	push   eax
c0018d19:	68 f0 c0 02 c0       	push   0xc002c0f0
c0018d1e:	e8 48 9c ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0018d23:	83 c4 10             	add    esp,0x10
c0018d26:	b8 f2 a9 02 c0       	mov    eax,0xc002a9f2
c0018d2b:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018d32:	75 05                	jne    c0018d39 <CPU::displayFeatures()+0x12f>
c0018d34:	b8 f6 a9 02 c0       	mov    eax,0xc002a9f6
c0018d39:	51                   	push   ecx
c0018d3a:	51                   	push   ecx
c0018d3b:	50                   	push   eax
c0018d3c:	68 07 c1 02 c0       	push   0xc002c107
c0018d41:	e8 25 9c ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0018d46:	83 c4 10             	add    esp,0x10
c0018d49:	b8 f2 a9 02 c0       	mov    eax,0xc002a9f2
c0018d4e:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018d55:	75 05                	jne    c0018d5c <CPU::displayFeatures()+0x152>
c0018d57:	b8 f6 a9 02 c0       	mov    eax,0xc002a9f6
c0018d5c:	52                   	push   edx
c0018d5d:	52                   	push   edx
c0018d5e:	50                   	push   eax
c0018d5f:	68 1e c1 02 c0       	push   0xc002c11e
c0018d64:	e8 02 9c ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0018d69:	83 c4 10             	add    esp,0x10
c0018d6c:	b8 f2 a9 02 c0       	mov    eax,0xc002a9f2
c0018d71:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018d78:	75 05                	jne    c0018d7f <CPU::displayFeatures()+0x175>
c0018d7a:	b8 f6 a9 02 c0       	mov    eax,0xc002a9f6
c0018d7f:	51                   	push   ecx
c0018d80:	51                   	push   ecx
c0018d81:	50                   	push   eax
c0018d82:	68 35 c1 02 c0       	push   0xc002c135
c0018d87:	e8 df 9b ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0018d8c:	83 c4 10             	add    esp,0x10
c0018d8f:	b8 f2 a9 02 c0       	mov    eax,0xc002a9f2
c0018d94:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018d9b:	75 05                	jne    c0018da2 <CPU::displayFeatures()+0x198>
c0018d9d:	b8 f6 a9 02 c0       	mov    eax,0xc002a9f6
c0018da2:	52                   	push   edx
c0018da3:	52                   	push   edx
c0018da4:	50                   	push   eax
c0018da5:	68 4c c1 02 c0       	push   0xc002c14c
c0018daa:	e8 bc 9b ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0018daf:	83 c4 10             	add    esp,0x10
c0018db2:	b8 f2 a9 02 c0       	mov    eax,0xc002a9f2
c0018db7:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0018dbe:	75 05                	jne    c0018dc5 <CPU::displayFeatures()+0x1bb>
c0018dc0:	b8 f6 a9 02 c0       	mov    eax,0xc002a9f6
c0018dc5:	51                   	push   ecx
c0018dc6:	51                   	push   ecx
c0018dc7:	50                   	push   eax
c0018dc8:	68 63 c1 02 c0       	push   0xc002c163
c0018dcd:	e8 99 9b ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0018dd2:	83 c4 10             	add    esp,0x10
c0018dd5:	b8 f2 a9 02 c0       	mov    eax,0xc002a9f2
c0018dda:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018de1:	75 05                	jne    c0018de8 <CPU::displayFeatures()+0x1de>
c0018de3:	b8 f6 a9 02 c0       	mov    eax,0xc002a9f6
c0018de8:	52                   	push   edx
c0018de9:	52                   	push   edx
c0018dea:	50                   	push   eax
c0018deb:	68 7a c1 02 c0       	push   0xc002c17a
c0018df0:	e8 76 9b ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0018df5:	83 c4 10             	add    esp,0x10
c0018df8:	b8 f2 a9 02 c0       	mov    eax,0xc002a9f2
c0018dfd:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0018e04:	75 05                	jne    c0018e0b <CPU::displayFeatures()+0x201>
c0018e06:	b8 f6 a9 02 c0       	mov    eax,0xc002a9f6
c0018e0b:	51                   	push   ecx
c0018e0c:	51                   	push   ecx
c0018e0d:	50                   	push   eax
c0018e0e:	68 91 c1 02 c0       	push   0xc002c191
c0018e13:	e8 53 9b ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0018e18:	83 c4 10             	add    esp,0x10
c0018e1b:	b8 f2 a9 02 c0       	mov    eax,0xc002a9f2
c0018e20:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0018e27:	75 05                	jne    c0018e2e <CPU::displayFeatures()+0x224>
c0018e29:	b8 f6 a9 02 c0       	mov    eax,0xc002a9f6
c0018e2e:	52                   	push   edx
c0018e2f:	52                   	push   edx
c0018e30:	50                   	push   eax
c0018e31:	68 a8 c1 02 c0       	push   0xc002c1a8
c0018e36:	e8 30 9b ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0018e3b:	83 c4 10             	add    esp,0x10
c0018e3e:	b8 f2 a9 02 c0       	mov    eax,0xc002a9f2
c0018e43:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0018e4a:	78 05                	js     c0018e51 <CPU::displayFeatures()+0x247>
c0018e4c:	b8 f6 a9 02 c0       	mov    eax,0xc002a9f6
c0018e51:	51                   	push   ecx
c0018e52:	51                   	push   ecx
c0018e53:	50                   	push   eax
c0018e54:	68 bf c1 02 c0       	push   0xc002c1bf
c0018e59:	e8 0d 9b ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0018e5e:	83 c4 10             	add    esp,0x10
c0018e61:	b8 f2 a9 02 c0       	mov    eax,0xc002a9f2
c0018e66:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0018e6d:	75 05                	jne    c0018e74 <CPU::displayFeatures()+0x26a>
c0018e6f:	b8 f6 a9 02 c0       	mov    eax,0xc002a9f6
c0018e74:	52                   	push   edx
c0018e75:	52                   	push   edx
c0018e76:	50                   	push   eax
c0018e77:	68 d6 c1 02 c0       	push   0xc002c1d6
c0018e7c:	e8 ea 9a ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0018e81:	83 c4 18             	add    esp,0x18
c0018e84:	5b                   	pop    ebx
c0018e85:	c3                   	ret    

c0018e86 <CPU::detectFeatures()>:
c0018e86:	55                   	push   ebp
c0018e87:	57                   	push   edi
c0018e88:	56                   	push   esi
c0018e89:	53                   	push   ebx
c0018e8a:	83 ec 50             	sub    esp,0x50
c0018e8d:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018e91:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018e9b:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018ea2:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0018ea8:	6a 0d                	push   0xd
c0018eaa:	6a 00                	push   0x0
c0018eac:	55                   	push   ebp
c0018ead:	e8 9e 78 fe ff       	call   c0000750 <memset>
c0018eb2:	83 c4 10             	add    esp,0x10
c0018eb5:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c0018eba:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018ec1:	0f 84 22 09 00 00    	je     c00197e9 <CPU::detectFeatures()+0x963>
c0018ec7:	83 ec 0c             	sub    esp,0xc
c0018eca:	89 ef                	mov    edi,ebp
c0018ecc:	6a 10                	push   0x10
c0018ece:	e8 f1 fb ff ff       	call   c0018ac4 <CPU::cpuidCheckEDX(unsigned int)>
c0018ed3:	83 e0 01             	and    eax,0x1
c0018ed6:	8d 14 00             	lea    edx,[eax+eax*1]
c0018ed9:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018edf:	83 e0 fd             	and    eax,0xfffffffd
c0018ee2:	09 d0                	or     eax,edx
c0018ee4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018eea:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018ef1:	e8 ce fb ff ff       	call   c0018ac4 <CPU::cpuidCheckEDX(unsigned int)>
c0018ef6:	83 e0 01             	and    eax,0x1
c0018ef9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018f00:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018f06:	83 e0 fb             	and    eax,0xfffffffb
c0018f09:	09 d0                	or     eax,edx
c0018f0b:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018f11:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018f18:	e8 a7 fb ff ff       	call   c0018ac4 <CPU::cpuidCheckEDX(unsigned int)>
c0018f1d:	83 e0 01             	and    eax,0x1
c0018f20:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018f27:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018f2d:	83 e0 f7             	and    eax,0xfffffff7
c0018f30:	09 d0                	or     eax,edx
c0018f32:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018f38:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018f3f:	e8 80 fb ff ff       	call   c0018ac4 <CPU::cpuidCheckEDX(unsigned int)>
c0018f44:	83 e0 01             	and    eax,0x1
c0018f47:	c1 e0 04             	shl    eax,0x4
c0018f4a:	88 c2                	mov    dl,al
c0018f4c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018f52:	83 e0 ef             	and    eax,0xffffffef
c0018f55:	09 d0                	or     eax,edx
c0018f57:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018f5d:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018f64:	e8 5b fb ff ff       	call   c0018ac4 <CPU::cpuidCheckEDX(unsigned int)>
c0018f69:	83 e0 01             	and    eax,0x1
c0018f6c:	c1 e0 05             	shl    eax,0x5
c0018f6f:	88 c2                	mov    dl,al
c0018f71:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018f77:	83 e0 df             	and    eax,0xffffffdf
c0018f7a:	09 d0                	or     eax,edx
c0018f7c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018f82:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018f89:	e8 36 fb ff ff       	call   c0018ac4 <CPU::cpuidCheckEDX(unsigned int)>
c0018f8e:	83 e0 01             	and    eax,0x1
c0018f91:	8d 14 00             	lea    edx,[eax+eax*1]
c0018f94:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018f9a:	83 e0 fd             	and    eax,0xfffffffd
c0018f9d:	09 d0                	or     eax,edx
c0018f9f:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018fa5:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018fac:	e8 13 fb ff ff       	call   c0018ac4 <CPU::cpuidCheckEDX(unsigned int)>
c0018fb1:	83 e0 01             	and    eax,0x1
c0018fb4:	c1 e0 06             	shl    eax,0x6
c0018fb7:	88 c2                	mov    dl,al
c0018fb9:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018fbf:	83 e0 bf             	and    eax,0xffffffbf
c0018fc2:	09 d0                	or     eax,edx
c0018fc4:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018fca:	58                   	pop    eax
c0018fcb:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018fcf:	50                   	push   eax
c0018fd0:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018fd4:	50                   	push   eax
c0018fd5:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018fd9:	56                   	push   esi
c0018fda:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018fde:	50                   	push   eax
c0018fdf:	6a 00                	push   0x0
c0018fe1:	e8 5a fa ff ff       	call   c0018a40 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018fe6:	b8 04 00 00 00       	mov    eax,0x4
c0018feb:	89 c1                	mov    ecx,eax
c0018fed:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018fef:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0018ff5:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0018ff9:	89 c1                	mov    ecx,eax
c0018ffb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018ffd:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0019003:	8d 74 24 38          	lea    esi,[esp+0x38]
c0019007:	89 c1                	mov    ecx,eax
c0019009:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001900b:	83 c4 18             	add    esp,0x18
c001900e:	68 ed c1 02 c0       	push   0xc002c1ed
c0019013:	55                   	push   ebp
c0019014:	e8 7f 78 fe ff       	call   c0000898 <strcmp>
c0019019:	83 c4 10             	add    esp,0x10
c001901c:	85 c0                	test   eax,eax
c001901e:	75 0f                	jne    c001902f <CPU::detectFeatures()+0x1a9>
c0019020:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001902a:	e9 22 02 00 00       	jmp    c0019251 <CPU::detectFeatures()+0x3cb>
c001902f:	50                   	push   eax
c0019030:	50                   	push   eax
c0019031:	68 fa c1 02 c0       	push   0xc002c1fa
c0019036:	55                   	push   ebp
c0019037:	e8 5c 78 fe ff       	call   c0000898 <strcmp>
c001903c:	83 c4 10             	add    esp,0x10
c001903f:	85 c0                	test   eax,eax
c0019041:	74 dd                	je     c0019020 <CPU::detectFeatures()+0x19a>
c0019043:	50                   	push   eax
c0019044:	50                   	push   eax
c0019045:	68 07 c2 02 c0       	push   0xc002c207
c001904a:	55                   	push   ebp
c001904b:	e8 48 78 fe ff       	call   c0000898 <strcmp>
c0019050:	83 c4 10             	add    esp,0x10
c0019053:	85 c0                	test   eax,eax
c0019055:	74 2a                	je     c0019081 <CPU::detectFeatures()+0x1fb>
c0019057:	50                   	push   eax
c0019058:	50                   	push   eax
c0019059:	68 14 c2 02 c0       	push   0xc002c214
c001905e:	55                   	push   ebp
c001905f:	e8 34 78 fe ff       	call   c0000898 <strcmp>
c0019064:	83 c4 10             	add    esp,0x10
c0019067:	85 c0                	test   eax,eax
c0019069:	74 16                	je     c0019081 <CPU::detectFeatures()+0x1fb>
c001906b:	50                   	push   eax
c001906c:	50                   	push   eax
c001906d:	68 21 c2 02 c0       	push   0xc002c221
c0019072:	55                   	push   ebp
c0019073:	e8 20 78 fe ff       	call   c0000898 <strcmp>
c0019078:	83 c4 10             	add    esp,0x10
c001907b:	85 c0                	test   eax,eax
c001907d:	74 48                	je     c00190c7 <CPU::detectFeatures()+0x241>
c001907f:	eb 0f                	jmp    c0019090 <CPU::detectFeatures()+0x20a>
c0019081:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001908b:	e9 c1 01 00 00       	jmp    c0019251 <CPU::detectFeatures()+0x3cb>
c0019090:	50                   	push   eax
c0019091:	50                   	push   eax
c0019092:	68 2e c2 02 c0       	push   0xc002c22e
c0019097:	55                   	push   ebp
c0019098:	e8 fb 77 fe ff       	call   c0000898 <strcmp>
c001909d:	83 c4 10             	add    esp,0x10
c00190a0:	85 c0                	test   eax,eax
c00190a2:	74 23                	je     c00190c7 <CPU::detectFeatures()+0x241>
c00190a4:	57                   	push   edi
c00190a5:	57                   	push   edi
c00190a6:	68 3b c2 02 c0       	push   0xc002c23b
c00190ab:	55                   	push   ebp
c00190ac:	e8 e7 77 fe ff       	call   c0000898 <strcmp>
c00190b1:	83 c4 10             	add    esp,0x10
c00190b4:	85 c0                	test   eax,eax
c00190b6:	75 1e                	jne    c00190d6 <CPU::detectFeatures()+0x250>
c00190b8:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00190c2:	e9 8a 01 00 00       	jmp    c0019251 <CPU::detectFeatures()+0x3cb>
c00190c7:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00190d1:	e9 7b 01 00 00       	jmp    c0019251 <CPU::detectFeatures()+0x3cb>
c00190d6:	56                   	push   esi
c00190d7:	56                   	push   esi
c00190d8:	68 48 c2 02 c0       	push   0xc002c248
c00190dd:	55                   	push   ebp
c00190de:	e8 b5 77 fe ff       	call   c0000898 <strcmp>
c00190e3:	83 c4 10             	add    esp,0x10
c00190e6:	85 c0                	test   eax,eax
c00190e8:	75 0f                	jne    c00190f9 <CPU::detectFeatures()+0x273>
c00190ea:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00190f4:	e9 58 01 00 00       	jmp    c0019251 <CPU::detectFeatures()+0x3cb>
c00190f9:	51                   	push   ecx
c00190fa:	51                   	push   ecx
c00190fb:	68 07 c2 02 c0       	push   0xc002c207
c0019100:	55                   	push   ebp
c0019101:	e8 92 77 fe ff       	call   c0000898 <strcmp>
c0019106:	83 c4 10             	add    esp,0x10
c0019109:	85 c0                	test   eax,eax
c001910b:	75 0f                	jne    c001911c <CPU::detectFeatures()+0x296>
c001910d:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0019117:	e9 35 01 00 00       	jmp    c0019251 <CPU::detectFeatures()+0x3cb>
c001911c:	52                   	push   edx
c001911d:	52                   	push   edx
c001911e:	68 55 c2 02 c0       	push   0xc002c255
c0019123:	55                   	push   ebp
c0019124:	e8 6f 77 fe ff       	call   c0000898 <strcmp>
c0019129:	83 c4 10             	add    esp,0x10
c001912c:	85 c0                	test   eax,eax
c001912e:	75 0f                	jne    c001913f <CPU::detectFeatures()+0x2b9>
c0019130:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001913a:	e9 12 01 00 00       	jmp    c0019251 <CPU::detectFeatures()+0x3cb>
c001913f:	50                   	push   eax
c0019140:	50                   	push   eax
c0019141:	68 62 c2 02 c0       	push   0xc002c262
c0019146:	55                   	push   ebp
c0019147:	e8 4c 77 fe ff       	call   c0000898 <strcmp>
c001914c:	83 c4 10             	add    esp,0x10
c001914f:	85 c0                	test   eax,eax
c0019151:	75 0f                	jne    c0019162 <CPU::detectFeatures()+0x2dc>
c0019153:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001915d:	e9 ef 00 00 00       	jmp    c0019251 <CPU::detectFeatures()+0x3cb>
c0019162:	50                   	push   eax
c0019163:	50                   	push   eax
c0019164:	68 6f c2 02 c0       	push   0xc002c26f
c0019169:	55                   	push   ebp
c001916a:	e8 29 77 fe ff       	call   c0000898 <strcmp>
c001916f:	83 c4 10             	add    esp,0x10
c0019172:	85 c0                	test   eax,eax
c0019174:	75 0f                	jne    c0019185 <CPU::detectFeatures()+0x2ff>
c0019176:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0019180:	e9 cc 00 00 00       	jmp    c0019251 <CPU::detectFeatures()+0x3cb>
c0019185:	50                   	push   eax
c0019186:	50                   	push   eax
c0019187:	68 7c c2 02 c0       	push   0xc002c27c
c001918c:	55                   	push   ebp
c001918d:	e8 06 77 fe ff       	call   c0000898 <strcmp>
c0019192:	83 c4 10             	add    esp,0x10
c0019195:	85 c0                	test   eax,eax
c0019197:	75 0f                	jne    c00191a8 <CPU::detectFeatures()+0x322>
c0019199:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00191a3:	e9 a9 00 00 00       	jmp    c0019251 <CPU::detectFeatures()+0x3cb>
c00191a8:	50                   	push   eax
c00191a9:	50                   	push   eax
c00191aa:	68 89 c2 02 c0       	push   0xc002c289
c00191af:	55                   	push   ebp
c00191b0:	e8 e3 76 fe ff       	call   c0000898 <strcmp>
c00191b5:	83 c4 10             	add    esp,0x10
c00191b8:	85 c0                	test   eax,eax
c00191ba:	75 0f                	jne    c00191cb <CPU::detectFeatures()+0x345>
c00191bc:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00191c6:	e9 86 00 00 00       	jmp    c0019251 <CPU::detectFeatures()+0x3cb>
c00191cb:	50                   	push   eax
c00191cc:	50                   	push   eax
c00191cd:	68 96 c2 02 c0       	push   0xc002c296
c00191d2:	55                   	push   ebp
c00191d3:	e8 c0 76 fe ff       	call   c0000898 <strcmp>
c00191d8:	83 c4 10             	add    esp,0x10
c00191db:	85 c0                	test   eax,eax
c00191dd:	75 0c                	jne    c00191eb <CPU::detectFeatures()+0x365>
c00191df:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00191e9:	eb 66                	jmp    c0019251 <CPU::detectFeatures()+0x3cb>
c00191eb:	50                   	push   eax
c00191ec:	50                   	push   eax
c00191ed:	68 a3 c2 02 c0       	push   0xc002c2a3
c00191f2:	55                   	push   ebp
c00191f3:	e8 a0 76 fe ff       	call   c0000898 <strcmp>
c00191f8:	83 c4 10             	add    esp,0x10
c00191fb:	85 c0                	test   eax,eax
c00191fd:	75 0c                	jne    c001920b <CPU::detectFeatures()+0x385>
c00191ff:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0019209:	eb 46                	jmp    c0019251 <CPU::detectFeatures()+0x3cb>
c001920b:	57                   	push   edi
c001920c:	57                   	push   edi
c001920d:	68 b0 c2 02 c0       	push   0xc002c2b0
c0019212:	55                   	push   ebp
c0019213:	e8 80 76 fe ff       	call   c0000898 <strcmp>
c0019218:	83 c4 10             	add    esp,0x10
c001921b:	85 c0                	test   eax,eax
c001921d:	74 e0                	je     c00191ff <CPU::detectFeatures()+0x379>
c001921f:	56                   	push   esi
c0019220:	56                   	push   esi
c0019221:	68 bd c2 02 c0       	push   0xc002c2bd
c0019226:	55                   	push   ebp
c0019227:	e8 6c 76 fe ff       	call   c0000898 <strcmp>
c001922c:	83 c4 10             	add    esp,0x10
c001922f:	85 c0                	test   eax,eax
c0019231:	74 cc                	je     c00191ff <CPU::detectFeatures()+0x379>
c0019233:	51                   	push   ecx
c0019234:	51                   	push   ecx
c0019235:	68 ca c2 02 c0       	push   0xc002c2ca
c001923a:	55                   	push   ebp
c001923b:	e8 58 76 fe ff       	call   c0000898 <strcmp>
c0019240:	83 c4 10             	add    esp,0x10
c0019243:	85 c0                	test   eax,eax
c0019245:	74 b8                	je     c00191ff <CPU::detectFeatures()+0x379>
c0019247:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0019251:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0019256:	0f 86 be 00 00 00    	jbe    c001931a <CPU::detectFeatures()+0x494>
c001925c:	83 ec 0c             	sub    esp,0xc
c001925f:	68 80 00 00 00       	push   0x80
c0019264:	e8 b7 f8 ff ff       	call   c0018b20 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019269:	83 e0 01             	and    eax,0x1
c001926c:	c1 e0 06             	shl    eax,0x6
c001926f:	88 c2                	mov    dl,al
c0019271:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019277:	83 e0 bf             	and    eax,0xffffffbf
c001927a:	09 d0                	or     eax,edx
c001927c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019282:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0019289:	e8 92 f8 ff ff       	call   c0018b20 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001928e:	83 e0 01             	and    eax,0x1
c0019291:	c1 e0 04             	shl    eax,0x4
c0019294:	88 c2                	mov    dl,al
c0019296:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001929c:	83 e0 ef             	and    eax,0xffffffef
c001929f:	09 d0                	or     eax,edx
c00192a1:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00192a7:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00192ae:	e8 6d f8 ff ff       	call   c0018b20 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00192b3:	c1 e0 07             	shl    eax,0x7
c00192b6:	88 c2                	mov    dl,al
c00192b8:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00192be:	83 e0 7f             	and    eax,0x7f
c00192c1:	09 d0                	or     eax,edx
c00192c3:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00192c9:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00192d0:	e8 79 f8 ff ff       	call   c0018b4e <CPU::cpuidCheckExtendedECX(unsigned int)>
c00192d5:	83 e0 01             	and    eax,0x1
c00192d8:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00192df:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00192e5:	83 e0 f7             	and    eax,0xfffffff7
c00192e8:	09 d0                	or     eax,edx
c00192ea:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00192f0:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00192f7:	e8 52 f8 ff ff       	call   c0018b4e <CPU::cpuidCheckExtendedECX(unsigned int)>
c00192fc:	83 c4 10             	add    esp,0x10
c00192ff:	83 e0 01             	and    eax,0x1
c0019302:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019309:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001930f:	83 e0 fb             	and    eax,0xfffffffb
c0019312:	09 d0                	or     eax,edx
c0019314:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001931a:	83 ec 0c             	sub    esp,0xc
c001931d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019321:	50                   	push   eax
c0019322:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019326:	50                   	push   eax
c0019327:	8d 74 24 28          	lea    esi,[esp+0x28]
c001932b:	56                   	push   esi
c001932c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019330:	50                   	push   eax
c0019331:	6a 01                	push   0x1
c0019333:	e8 08 f7 ff ff       	call   c0018a40 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019338:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001933c:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019342:	88 ca                	mov    dl,cl
c0019344:	83 e0 f0             	and    eax,0xfffffff0
c0019347:	83 e2 0f             	and    edx,0xf
c001934a:	09 d0                	or     eax,edx
c001934c:	88 ca                	mov    dl,cl
c001934e:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0019354:	c0 ea 04             	shr    dl,0x4
c0019357:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c001935b:	0f b6 c2             	movzx  eax,dl
c001935e:	83 c4 20             	add    esp,0x20
c0019361:	c1 e0 06             	shl    eax,0x6
c0019364:	89 c7                	mov    edi,eax
c0019366:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001936c:	66 25 3f c0          	and    ax,0xc03f
c0019370:	09 f8                	or     eax,edi
c0019372:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019379:	89 c8                	mov    eax,ecx
c001937b:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0019382:	c1 e8 08             	shr    eax,0x8
c0019385:	83 e5 3f             	and    ebp,0x3f
c0019388:	83 e0 0f             	and    eax,0xf
c001938b:	89 c7                	mov    edi,eax
c001938d:	c1 e7 06             	shl    edi,0x6
c0019390:	09 ef                	or     edi,ebp
c0019392:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0019399:	89 fa                	mov    edx,edi
c001939b:	83 e5 c0             	and    ebp,0xffffffc0
c001939e:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00193a4:	88 c2                	mov    dl,al
c00193a6:	c0 ea 02             	shr    dl,0x2
c00193a9:	89 d7                	mov    edi,edx
c00193ab:	09 ef                	or     edi,ebp
c00193ad:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00193b3:	89 fa                	mov    edx,edi
c00193b5:	83 e5 cf             	and    ebp,0xffffffcf
c00193b8:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00193be:	89 cf                	mov    edi,ecx
c00193c0:	c1 ef 0c             	shr    edi,0xc
c00193c3:	83 e7 03             	and    edi,0x3
c00193c6:	c1 e7 04             	shl    edi,0x4
c00193c9:	09 ef                	or     edi,ebp
c00193cb:	3c 06                	cmp    al,0x6
c00193cd:	89 fa                	mov    edx,edi
c00193cf:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00193d5:	74 04                	je     c00193db <CPU::detectFeatures()+0x555>
c00193d7:	3c 0f                	cmp    al,0xf
c00193d9:	75 5c                	jne    c0019437 <CPU::detectFeatures()+0x5b1>
c00193db:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00193df:	89 cf                	mov    edi,ecx
c00193e1:	c1 ef 10             	shr    edi,0x10
c00193e4:	c1 e7 04             	shl    edi,0x4
c00193e7:	09 fa                	or     edx,edi
c00193e9:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c00193ef:	0f b6 d2             	movzx  edx,dl
c00193f2:	66 81 e7 3f c0       	and    di,0xc03f
c00193f7:	c1 e2 06             	shl    edx,0x6
c00193fa:	09 fa                	or     edx,edi
c00193fc:	3c 0f                	cmp    al,0xf
c00193fe:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0019405:	75 30                	jne    c0019437 <CPU::detectFeatures()+0x5b1>
c0019407:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c001940d:	c1 e9 14             	shr    ecx,0x14
c0019410:	83 e0 3f             	and    eax,0x3f
c0019413:	83 c1 0f             	add    ecx,0xf
c0019416:	88 ca                	mov    dl,cl
c0019418:	c0 e9 02             	shr    cl,0x2
c001941b:	c1 e2 06             	shl    edx,0x6
c001941e:	09 d0                	or     eax,edx
c0019420:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0019426:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c001942c:	83 e0 c0             	and    eax,0xffffffc0
c001942f:	09 c1                	or     ecx,eax
c0019431:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0019437:	83 ec 0c             	sub    esp,0xc
c001943a:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019441:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019445:	50                   	push   eax
c0019446:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001944a:	55                   	push   ebp
c001944b:	56                   	push   esi
c001944c:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0019450:	57                   	push   edi
c0019451:	68 00 00 00 80       	push   0x80000000
c0019456:	e8 e5 f5 ff ff       	call   c0018a40 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001945b:	83 c4 20             	add    esp,0x20
c001945e:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0019466:	76 22                	jbe    c001948a <CPU::detectFeatures()+0x604>
c0019468:	83 ec 0c             	sub    esp,0xc
c001946b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001946f:	50                   	push   eax
c0019470:	55                   	push   ebp
c0019471:	56                   	push   esi
c0019472:	57                   	push   edi
c0019473:	68 01 00 00 80       	push   0x80000001
c0019478:	e8 c3 f5 ff ff       	call   c0018a40 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001947d:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0019487:	83 c4 20             	add    esp,0x20
c001948a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0019490:	83 f8 01             	cmp    eax,0x1
c0019493:	75 6f                	jne    c0019504 <CPU::detectFeatures()+0x67e>
c0019495:	51                   	push   ecx
c0019496:	51                   	push   ecx
c0019497:	68 d6 c2 02 c0       	push   0xc002c2d6
c001949c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00194a0:	56                   	push   esi
c00194a1:	e8 66 73 fe ff       	call   c000080c <strcpy>
c00194a6:	5f                   	pop    edi
c00194a7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00194ad:	5d                   	pop    ebp
c00194ae:	66 c1 e8 06          	shr    ax,0x6
c00194b2:	0f b6 c0             	movzx  eax,al
c00194b5:	50                   	push   eax
c00194b6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00194bc:	c1 e8 0e             	shr    eax,0xe
c00194bf:	0f b6 c0             	movzx  eax,al
c00194c2:	50                   	push   eax
c00194c3:	e8 22 f2 ff ff       	call   c00186ea <CPU::lookupIntelName(unsigned char, unsigned char)>
c00194c8:	5a                   	pop    edx
c00194c9:	59                   	pop    ecx
c00194ca:	50                   	push   eax
c00194cb:	56                   	push   esi
c00194cc:	e8 7b 74 fe ff       	call   c000094c <strcat>
c00194d1:	5f                   	pop    edi
c00194d2:	5d                   	pop    ebp
c00194d3:	56                   	push   esi
c00194d4:	53                   	push   ebx
c00194d5:	e8 c0 aa ff ff       	call   c0013f9a <Device::setName(char const*)>
c00194da:	58                   	pop    eax
c00194db:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00194e1:	5a                   	pop    edx
c00194e2:	68 dd c2 02 c0       	push   0xc002c2dd
c00194e7:	50                   	push   eax
c00194e8:	e8 ab 73 fe ff       	call   c0000898 <strcmp>
c00194ed:	83 c4 10             	add    esp,0x10
c00194f0:	85 c0                	test   eax,eax
c00194f2:	0f 85 71 03 00 00    	jne    c0019869 <CPU::detectFeatures()+0x9e3>
c00194f8:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00194ff:	e9 65 03 00 00       	jmp    c0019869 <CPU::detectFeatures()+0x9e3>
c0019504:	83 f8 02             	cmp    eax,0x2
c0019507:	0f 85 b5 00 00 00    	jne    c00195c2 <CPU::detectFeatures()+0x73c>
c001950d:	57                   	push   edi
c001950e:	57                   	push   edi
c001950f:	68 ef c2 02 c0       	push   0xc002c2ef
c0019514:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019518:	56                   	push   esi
c0019519:	e8 ee 72 fe ff       	call   c000080c <strcpy>
c001951e:	5d                   	pop    ebp
c001951f:	58                   	pop    eax
c0019520:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019526:	66 c1 e8 06          	shr    ax,0x6
c001952a:	0f b6 c0             	movzx  eax,al
c001952d:	50                   	push   eax
c001952e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019534:	c1 e8 0e             	shr    eax,0xe
c0019537:	0f b6 c0             	movzx  eax,al
c001953a:	50                   	push   eax
c001953b:	e8 16 f0 ff ff       	call   c0018556 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019540:	5a                   	pop    edx
c0019541:	59                   	pop    ecx
c0019542:	50                   	push   eax
c0019543:	56                   	push   esi
c0019544:	e8 03 74 fe ff       	call   c000094c <strcat>
c0019549:	5f                   	pop    edi
c001954a:	5d                   	pop    ebp
c001954b:	56                   	push   esi
c001954c:	53                   	push   ebx
c001954d:	e8 48 aa ff ff       	call   c0013f9a <Device::setName(char const*)>
c0019552:	58                   	pop    eax
c0019553:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019559:	5a                   	pop    edx
c001955a:	68 f4 c2 02 c0       	push   0xc002c2f4
c001955f:	50                   	push   eax
c0019560:	e8 33 73 fe ff       	call   c0000898 <strcmp>
c0019565:	83 c4 10             	add    esp,0x10
c0019568:	85 c0                	test   eax,eax
c001956a:	75 20                	jne    c001958c <CPU::detectFeatures()+0x706>
c001956c:	8b 15 c8 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f0c8
c0019572:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0019578:	a8 01                	test   al,0x1
c001957a:	74 10                	je     c001958c <CPU::detectFeatures()+0x706>
c001957c:	83 e0 fe             	and    eax,0xfffffffe
c001957f:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019585:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c001958c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019592:	c1 e8 0e             	shr    eax,0xe
c0019595:	3c 05                	cmp    al,0x5
c0019597:	0f 85 cc 02 00 00    	jne    c0019869 <CPU::detectFeatures()+0x9e3>
c001959d:	56                   	push   esi
c001959e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00195a4:	83 e0 0f             	and    eax,0xf
c00195a7:	50                   	push   eax
c00195a8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00195ae:	66 c1 e8 06          	shr    ax,0x6
c00195b2:	0f b6 c0             	movzx  eax,al
c00195b5:	50                   	push   eax
c00195b6:	6a 05                	push   0x5
c00195b8:	e8 0f f4 ff ff       	call   c00189cc <CPU::AMD_K6_writeback(int, int, int)>
c00195bd:	e9 1f 02 00 00       	jmp    c00197e1 <CPU::detectFeatures()+0x95b>
c00195c2:	8d 50 fd             	lea    edx,[eax-0x3]
c00195c5:	83 fa 01             	cmp    edx,0x1
c00195c8:	76 09                	jbe    c00195d3 <CPU::detectFeatures()+0x74d>
c00195ca:	83 f8 06             	cmp    eax,0x6
c00195cd:	0f 85 91 01 00 00    	jne    c0019764 <CPU::detectFeatures()+0x8de>
c00195d3:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00195d9:	c1 ea 0e             	shr    edx,0xe
c00195dc:	80 fa 05             	cmp    dl,0x5
c00195df:	75 7b                	jne    c001965c <CPU::detectFeatures()+0x7d6>
c00195e1:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00195e7:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00195ec:	66 81 fa 00 01       	cmp    dx,0x100
c00195f1:	75 0c                	jne    c00195ff <CPU::detectFeatures()+0x779>
c00195f3:	51                   	push   ecx
c00195f4:	51                   	push   ecx
c00195f5:	68 fb c2 02 c0       	push   0xc002c2fb
c00195fa:	e9 dc 01 00 00       	jmp    c00197db <CPU::detectFeatures()+0x955>
c00195ff:	66 81 fa 00 02       	cmp    dx,0x200
c0019604:	75 0c                	jne    c0019612 <CPU::detectFeatures()+0x78c>
c0019606:	52                   	push   edx
c0019607:	52                   	push   edx
c0019608:	68 0e c3 02 c0       	push   0xc002c30e
c001960d:	e9 c9 01 00 00       	jmp    c00197db <CPU::detectFeatures()+0x955>
c0019612:	66 81 fa 40 02       	cmp    dx,0x240
c0019617:	75 0c                	jne    c0019625 <CPU::detectFeatures()+0x79f>
c0019619:	50                   	push   eax
c001961a:	50                   	push   eax
c001961b:	68 20 c3 02 c0       	push   0xc002c320
c0019620:	e9 b6 01 00 00       	jmp    c00197db <CPU::detectFeatures()+0x955>
c0019625:	83 f8 06             	cmp    eax,0x6
c0019628:	75 0c                	jne    c0019636 <CPU::detectFeatures()+0x7b0>
c001962a:	50                   	push   eax
c001962b:	50                   	push   eax
c001962c:	68 32 c3 02 c0       	push   0xc002c332
c0019631:	e9 a5 01 00 00       	jmp    c00197db <CPU::detectFeatures()+0x955>
c0019636:	83 f8 04             	cmp    eax,0x4
c0019639:	75 0c                	jne    c0019647 <CPU::detectFeatures()+0x7c1>
c001963b:	50                   	push   eax
c001963c:	50                   	push   eax
c001963d:	68 3e c3 02 c0       	push   0xc002c33e
c0019642:	e9 94 01 00 00       	jmp    c00197db <CPU::detectFeatures()+0x955>
c0019647:	83 f8 03             	cmp    eax,0x3
c001964a:	0f 85 19 02 00 00    	jne    c0019869 <CPU::detectFeatures()+0x9e3>
c0019650:	50                   	push   eax
c0019651:	50                   	push   eax
c0019652:	68 46 c3 02 c0       	push   0xc002c346
c0019657:	e9 7f 01 00 00       	jmp    c00197db <CPU::detectFeatures()+0x955>
c001965c:	80 fa 06             	cmp    dl,0x6
c001965f:	0f 85 db 00 00 00    	jne    c0019740 <CPU::detectFeatures()+0x8ba>
c0019665:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001966b:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019670:	66 81 fa 80 01       	cmp    dx,0x180
c0019675:	75 0c                	jne    c0019683 <CPU::detectFeatures()+0x7fd>
c0019677:	50                   	push   eax
c0019678:	50                   	push   eax
c0019679:	68 51 c3 02 c0       	push   0xc002c351
c001967e:	e9 58 01 00 00       	jmp    c00197db <CPU::detectFeatures()+0x955>
c0019683:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019689:	66 f7 c1 80 ff       	test   cx,0xff80
c001968e:	75 0c                	jne    c001969c <CPU::detectFeatures()+0x816>
c0019690:	50                   	push   eax
c0019691:	50                   	push   eax
c0019692:	68 61 c3 02 c0       	push   0xc002c361
c0019697:	e9 3f 01 00 00       	jmp    c00197db <CPU::detectFeatures()+0x955>
c001969c:	66 81 fa 40 02       	cmp    dx,0x240
c00196a1:	75 0c                	jne    c00196af <CPU::detectFeatures()+0x829>
c00196a3:	55                   	push   ebp
c00196a4:	55                   	push   ebp
c00196a5:	68 68 c3 02 c0       	push   0xc002c368
c00196aa:	e9 2c 01 00 00       	jmp    c00197db <CPU::detectFeatures()+0x955>
c00196af:	66 81 fa 80 02       	cmp    dx,0x280
c00196b4:	75 0c                	jne    c00196c2 <CPU::detectFeatures()+0x83c>
c00196b6:	57                   	push   edi
c00196b7:	57                   	push   edi
c00196b8:	68 71 c3 02 c0       	push   0xc002c371
c00196bd:	e9 19 01 00 00       	jmp    c00197db <CPU::detectFeatures()+0x955>
c00196c2:	66 81 fa 40 03       	cmp    dx,0x340
c00196c7:	74 ed                	je     c00196b6 <CPU::detectFeatures()+0x830>
c00196c9:	66 81 fa c0 03       	cmp    dx,0x3c0
c00196ce:	75 0c                	jne    c00196dc <CPU::detectFeatures()+0x856>
c00196d0:	56                   	push   esi
c00196d1:	56                   	push   esi
c00196d2:	68 78 c3 02 c0       	push   0xc002c378
c00196d7:	e9 ff 00 00 00       	jmp    c00197db <CPU::detectFeatures()+0x955>
c00196dc:	83 f8 06             	cmp    eax,0x6
c00196df:	0f 84 45 ff ff ff    	je     c001962a <CPU::detectFeatures()+0x7a4>
c00196e5:	83 f8 04             	cmp    eax,0x4
c00196e8:	0f 84 4d ff ff ff    	je     c001963b <CPU::detectFeatures()+0x7b5>
c00196ee:	83 f8 03             	cmp    eax,0x3
c00196f1:	0f 85 72 01 00 00    	jne    c0019869 <CPU::detectFeatures()+0x9e3>
c00196f7:	51                   	push   ecx
c00196f8:	51                   	push   ecx
c00196f9:	68 81 c3 02 c0       	push   0xc002c381
c00196fe:	53                   	push   ebx
c00196ff:	e8 96 a8 ff ff       	call   c0013f9a <Device::setName(char const*)>
c0019704:	b1 c1                	mov    cl,0xc1
c0019706:	88 c8                	mov    al,cl
c0019708:	e6 22                	out    0x22,al
c001970a:	e4 23                	in     al,0x23
c001970c:	88 c2                	mov    dl,al
c001970e:	88 c8                	mov    al,cl
c0019710:	e6 22                	out    0x22,al
c0019712:	88 d0                	mov    al,dl
c0019714:	83 c8 10             	or     eax,0x10
c0019717:	e6 23                	out    0x23,al
c0019719:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019720:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019723:	89 d0                	mov    eax,edx
c0019725:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c001972b:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c001972f:	40                   	inc    eax
c0019730:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019736:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001973b:	e9 a1 00 00 00       	jmp    c00197e1 <CPU::detectFeatures()+0x95b>
c0019740:	83 f8 06             	cmp    eax,0x6
c0019743:	0f 84 e1 fe ff ff    	je     c001962a <CPU::detectFeatures()+0x7a4>
c0019749:	83 f8 04             	cmp    eax,0x4
c001974c:	0f 84 e9 fe ff ff    	je     c001963b <CPU::detectFeatures()+0x7b5>
c0019752:	83 f8 03             	cmp    eax,0x3
c0019755:	0f 85 0e 01 00 00    	jne    c0019869 <CPU::detectFeatures()+0x9e3>
c001975b:	52                   	push   edx
c001975c:	52                   	push   edx
c001975d:	68 8c c3 02 c0       	push   0xc002c38c
c0019762:	eb 77                	jmp    c00197db <CPU::detectFeatures()+0x955>
c0019764:	83 f8 07             	cmp    eax,0x7
c0019767:	75 09                	jne    c0019772 <CPU::detectFeatures()+0x8ec>
c0019769:	50                   	push   eax
c001976a:	50                   	push   eax
c001976b:	68 96 c3 02 c0       	push   0xc002c396
c0019770:	eb 69                	jmp    c00197db <CPU::detectFeatures()+0x955>
c0019772:	83 f8 0a             	cmp    eax,0xa
c0019775:	75 09                	jne    c0019780 <CPU::detectFeatures()+0x8fa>
c0019777:	50                   	push   eax
c0019778:	50                   	push   eax
c0019779:	68 a1 c3 02 c0       	push   0xc002c3a1
c001977e:	eb 5b                	jmp    c00197db <CPU::detectFeatures()+0x955>
c0019780:	83 f8 0b             	cmp    eax,0xb
c0019783:	75 09                	jne    c001978e <CPU::detectFeatures()+0x908>
c0019785:	50                   	push   eax
c0019786:	50                   	push   eax
c0019787:	68 a9 c3 02 c0       	push   0xc002c3a9
c001978c:	eb 4d                	jmp    c00197db <CPU::detectFeatures()+0x955>
c001978e:	83 f8 08             	cmp    eax,0x8
c0019791:	75 09                	jne    c001979c <CPU::detectFeatures()+0x916>
c0019793:	50                   	push   eax
c0019794:	50                   	push   eax
c0019795:	68 b2 c3 02 c0       	push   0xc002c3b2
c001979a:	eb 3f                	jmp    c00197db <CPU::detectFeatures()+0x955>
c001979c:	83 f8 09             	cmp    eax,0x9
c001979f:	75 09                	jne    c00197aa <CPU::detectFeatures()+0x924>
c00197a1:	50                   	push   eax
c00197a2:	50                   	push   eax
c00197a3:	68 ba c3 02 c0       	push   0xc002c3ba
c00197a8:	eb 31                	jmp    c00197db <CPU::detectFeatures()+0x955>
c00197aa:	83 f8 05             	cmp    eax,0x5
c00197ad:	75 09                	jne    c00197b8 <CPU::detectFeatures()+0x932>
c00197af:	50                   	push   eax
c00197b0:	50                   	push   eax
c00197b1:	68 c2 c3 02 c0       	push   0xc002c3c2
c00197b6:	eb 23                	jmp    c00197db <CPU::detectFeatures()+0x955>
c00197b8:	83 f8 0c             	cmp    eax,0xc
c00197bb:	75 09                	jne    c00197c6 <CPU::detectFeatures()+0x940>
c00197bd:	55                   	push   ebp
c00197be:	55                   	push   ebp
c00197bf:	68 d0 c3 02 c0       	push   0xc002c3d0
c00197c4:	eb 15                	jmp    c00197db <CPU::detectFeatures()+0x955>
c00197c6:	83 f8 0d             	cmp    eax,0xd
c00197c9:	75 09                	jne    c00197d4 <CPU::detectFeatures()+0x94e>
c00197cb:	57                   	push   edi
c00197cc:	57                   	push   edi
c00197cd:	68 db c3 02 c0       	push   0xc002c3db
c00197d2:	eb 07                	jmp    c00197db <CPU::detectFeatures()+0x955>
c00197d4:	56                   	push   esi
c00197d5:	56                   	push   esi
c00197d6:	68 ef c3 02 c0       	push   0xc002c3ef
c00197db:	53                   	push   ebx
c00197dc:	e8 b9 a7 ff ff       	call   c0013f9a <Device::setName(char const*)>
c00197e1:	83 c4 10             	add    esp,0x10
c00197e4:	e9 80 00 00 00       	jmp    c0019869 <CPU::detectFeatures()+0x9e3>
c00197e9:	51                   	push   ecx
c00197ea:	51                   	push   ecx
c00197eb:	68 3b c2 02 c0       	push   0xc002c23b
c00197f0:	55                   	push   ebp
c00197f1:	e8 16 70 fe ff       	call   c000080c <strcpy>
c00197f6:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019800:	e8 a9 6a fe ff       	call   c00002ae <is486>
c0019805:	83 c4 10             	add    esp,0x10
c0019808:	85 c0                	test   eax,eax
c001980a:	74 2b                	je     c0019837 <CPU::detectFeatures()+0x9b1>
c001980c:	52                   	push   edx
c001980d:	52                   	push   edx
c001980e:	68 fb c3 02 c0       	push   0xc002c3fb
c0019813:	53                   	push   ebx
c0019814:	e8 81 a7 ff ff       	call   c0013f9a <Device::setName(char const*)>
c0019819:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019820:	0f 20 c0             	mov    eax,cr0
c0019823:	83 e0 14             	and    eax,0x14
c0019826:	83 c4 10             	add    esp,0x10
c0019829:	83 f8 04             	cmp    eax,0x4
c001982c:	75 1f                	jne    c001984d <CPU::detectFeatures()+0x9c7>
c001982e:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019835:	eb 32                	jmp    c0019869 <CPU::detectFeatures()+0x9e3>
c0019837:	50                   	push   eax
c0019838:	50                   	push   eax
c0019839:	68 06 c4 02 c0       	push   0xc002c406
c001983e:	53                   	push   ebx
c001983f:	e8 56 a7 ff ff       	call   c0013f9a <Device::setName(char const*)>
c0019844:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c001984b:	eb d3                	jmp    c0019820 <CPU::detectFeatures()+0x99a>
c001984d:	e8 37 6a fe ff       	call   c0000289 <hasLegacyFPU>
c0019852:	83 e0 01             	and    eax,0x1
c0019855:	8d 14 00             	lea    edx,[eax+eax*1]
c0019858:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001985e:	83 e0 fd             	and    eax,0xfffffffd
c0019861:	09 d0                	or     eax,edx
c0019863:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019869:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019870:	83 c4 4c             	add    esp,0x4c
c0019873:	5b                   	pop    ebx
c0019874:	5e                   	pop    esi
c0019875:	5f                   	pop    edi
c0019876:	5d                   	pop    ebp
c0019877:	c3                   	ret    

c0019878 <CPU::setupSMEP()>:
c0019878:	0f 20 e0             	mov    eax,cr4
c001987b:	0d 00 00 10 00       	or     eax,0x100000
c0019880:	0f 22 e0             	mov    cr4,eax
c0019883:	c3                   	ret    

c0019884 <CPU::setupUMIP()>:
c0019884:	0f 20 e0             	mov    eax,cr4
c0019887:	80 cc 08             	or     ah,0x8
c001988a:	0f 22 e0             	mov    cr4,eax
c001988d:	c3                   	ret    

c001988e <CPU::setupTSC()>:
c001988e:	0f 20 e0             	mov    eax,cr4
c0019891:	83 c8 04             	or     eax,0x4
c0019894:	0f 22 e0             	mov    cr4,eax
c0019897:	c3                   	ret    

c0019898 <CPU::setupLargePages()>:
c0019898:	0f 20 e0             	mov    eax,cr4
c001989b:	83 c8 10             	or     eax,0x10
c001989e:	0f 22 e0             	mov    cr4,eax
c00198a1:	c3                   	ret    

c00198a2 <CPU::setupPAT()>:
c00198a2:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c00198a7:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00198ae:	74 2c                	je     c00198dc <CPU::setupPAT()+0x3a>
c00198b0:	53                   	push   ebx
c00198b1:	83 ec 10             	sub    esp,0x10
c00198b4:	68 77 02 00 00       	push   0x277
c00198b9:	50                   	push   eax
c00198ba:	e8 73 55 ff ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c00198bf:	83 e2 f8             	and    edx,0xfffffff8
c00198c2:	83 ca 01             	or     edx,0x1
c00198c5:	52                   	push   edx
c00198c6:	50                   	push   eax
c00198c7:	68 77 02 00 00       	push   0x277
c00198cc:	ff 35 c8 f0 02 c0    	push   DWORD PTR ds:0xc002f0c8
c00198d2:	e8 87 55 ff ff       	call   c000ee5e <Computer::wrmsr(unsigned int, unsigned long long)>
c00198d7:	83 c4 28             	add    esp,0x28
c00198da:	5b                   	pop    ebx
c00198db:	c3                   	ret    
c00198dc:	c3                   	ret    
c00198dd:	90                   	nop

c00198de <CPU::setupMTRR()>:
c00198de:	c3                   	ret    
c00198df:	90                   	nop

c00198e0 <CPU::setupGlobalPages()>:
c00198e0:	0f 20 e0             	mov    eax,cr4
c00198e3:	0c 80                	or     al,0x80
c00198e5:	0f 22 e0             	mov    cr4,eax
c00198e8:	c3                   	ret    
c00198e9:	90                   	nop

c00198ea <CPU::allowUsermodeDataAccess()>:
c00198ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00198ee:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00198f5:	74 03                	je     c00198fa <CPU::allowUsermodeDataAccess()+0x10>
c00198f7:	0f 01 cb             	stac   
c00198fa:	c3                   	ret    
c00198fb:	90                   	nop

c00198fc <CPU::prohibitUsermodeDataAccess()>:
c00198fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019900:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019907:	74 03                	je     c001990c <CPU::prohibitUsermodeDataAccess()+0x10>
c0019909:	0f 01 ca             	clac   
c001990c:	c3                   	ret    
c001990d:	90                   	nop

c001990e <CPU::setupSMAP()>:
c001990e:	0f 20 e0             	mov    eax,cr4
c0019911:	0d 00 00 20 00       	or     eax,0x200000
c0019916:	0f 22 e0             	mov    cr4,eax
c0019919:	eb e1                	jmp    c00198fc <CPU::prohibitUsermodeDataAccess()>
c001991b:	90                   	nop

c001991c <CPU::setupFeatures()>:
c001991c:	83 ec 0c             	sub    esp,0xc
c001991f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019923:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c001992a:	74 07                	je     c0019933 <CPU::setupFeatures()+0x17>
c001992c:	52                   	push   edx
c001992d:	e8 46 ff ff ff       	call   c0019878 <CPU::setupSMEP()>
c0019932:	58                   	pop    eax
c0019933:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c001993a:	74 07                	je     c0019943 <CPU::setupFeatures()+0x27>
c001993c:	52                   	push   edx
c001993d:	e8 cc ff ff ff       	call   c001990e <CPU::setupSMAP()>
c0019942:	58                   	pop    eax
c0019943:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c001994a:	74 07                	je     c0019953 <CPU::setupFeatures()+0x37>
c001994c:	52                   	push   edx
c001994d:	e8 32 ff ff ff       	call   c0019884 <CPU::setupUMIP()>
c0019952:	58                   	pop    eax
c0019953:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c001995a:	74 07                	je     c0019963 <CPU::setupFeatures()+0x47>
c001995c:	52                   	push   edx
c001995d:	e8 2c ff ff ff       	call   c001988e <CPU::setupTSC()>
c0019962:	58                   	pop    eax
c0019963:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c001996a:	74 07                	je     c0019973 <CPU::setupFeatures()+0x57>
c001996c:	52                   	push   edx
c001996d:	e8 26 ff ff ff       	call   c0019898 <CPU::setupLargePages()>
c0019972:	59                   	pop    ecx
c0019973:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c001997a:	74 07                	je     c0019983 <CPU::setupFeatures()+0x67>
c001997c:	52                   	push   edx
c001997d:	e8 5e ff ff ff       	call   c00198e0 <CPU::setupGlobalPages()>
c0019982:	58                   	pop    eax
c0019983:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c001998a:	74 0c                	je     c0019998 <CPU::setupFeatures()+0x7c>
c001998c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019990:	83 c4 0c             	add    esp,0xc
c0019993:	e9 0a ff ff ff       	jmp    c00198a2 <CPU::setupPAT()>
c0019998:	83 c4 0c             	add    esp,0xc
c001999b:	c3                   	ret    

c001999c <CPU::open(int, int, void*)>:
c001999c:	57                   	push   edi
c001999d:	56                   	push   esi
c001999e:	53                   	push   ebx
c001999f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00199a3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00199a7:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00199ad:	83 ec 0c             	sub    esp,0xc
c00199b0:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00199b6:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00199bc:	50                   	push   eax
c00199bd:	e8 5c 57 ff ff       	call   c000f11e <GDT::setup()>
c00199c2:	83 c4 0c             	add    esp,0xc
c00199c5:	6a 00                	push   0x0
c00199c7:	68 ef be ad de       	push   0xdeadbeef
c00199cc:	57                   	push   edi
c00199cd:	e8 04 75 ff ff       	call   c0010ed6 <TSS::setup(unsigned long, unsigned long)>
c00199d2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00199d5:	e8 dc 74 ff ff       	call   c0010eb6 <TSS::flush()>
c00199da:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00199e0:	89 04 24             	mov    DWORD PTR [esp],eax
c00199e3:	e8 9a 59 ff ff       	call   c000f382 <IDT::setup()>
c00199e8:	b8 00 04 00 00       	mov    eax,0x400
c00199ed:	0f 23 f8             	mov    db7,eax
c00199f0:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00199fa:	e8 2e 62 ff ff       	call   c000fc2d <Phys::allocatePage()>
c00199ff:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019a05:	89 30                	mov    DWORD PTR [eax],esi
c0019a07:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019a0d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019a10:	58                   	pop    eax
c0019a11:	5a                   	pop    edx
c0019a12:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019a18:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019a1c:	e8 55 86 ff ff       	call   c0012076 <VAS::setCPUSpecific(unsigned long)>
c0019a21:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019a24:	e8 5d f4 ff ff       	call   c0018e86 <CPU::detectFeatures()>
c0019a29:	e8 9e b9 ff ff       	call   c00153cc <setupInterruptController()>
c0019a2e:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019a34:	a1 e0 f0 02 c0       	mov    eax,ds:0xc002f0e0
c0019a39:	83 e0 10             	and    eax,0x10
c0019a3c:	83 f8 01             	cmp    eax,0x1
c0019a3f:	19 c0                	sbb    eax,eax
c0019a41:	83 e0 46             	and    eax,0x46
c0019a44:	83 c0 1e             	add    eax,0x1e
c0019a47:	89 04 24             	mov    DWORD PTR [esp],eax
c0019a4a:	e8 d4 cf ff ff       	call   c0016a23 <setupTimer(int)>
c0019a4f:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019a55:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019a58:	e8 bf fe ff ff       	call   c001991c <CPU::setupFeatures()>
c0019a5d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019a60:	e8 a5 f1 ff ff       	call   c0018c0a <CPU::displayFeatures()>
c0019a65:	83 c4 10             	add    esp,0x10
c0019a68:	31 c0                	xor    eax,eax
c0019a6a:	5b                   	pop    ebx
c0019a6b:	5e                   	pop    esi
c0019a6c:	5f                   	pop    edi
c0019a6d:	c3                   	ret    

c0019a6e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019a6e:	57                   	push   edi
c0019a6f:	56                   	push   esi
c0019a70:	53                   	push   ebx
c0019a71:	51                   	push   ecx
c0019a72:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019a76:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019a79:	0f 02 c0             	lar    eax,ax
c0019a7c:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019a7f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019a83:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019a86:	88 ca                	mov    dl,cl
c0019a88:	c0 ea 06             	shr    dl,0x6
c0019a8b:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019a8f:	89 ca                	mov    edx,ecx
c0019a91:	66 c1 ea 03          	shr    dx,0x3
c0019a95:	83 e2 07             	and    edx,0x7
c0019a98:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019a9d:	88 17                	mov    BYTE PTR [edi],dl
c0019a9f:	0f 84 a6 01 00 00    	je     c0019c4b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019aa5:	83 e1 07             	and    ecx,0x7
c0019aa8:	80 f9 04             	cmp    cl,0x4
c0019aab:	0f 84 98 00 00 00    	je     c0019b49 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019ab1:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019ab6:	0f 95 c0             	setne  al
c0019ab9:	80 f9 05             	cmp    cl,0x5
c0019abc:	0f 95 c2             	setne  dl
c0019abf:	08 c2                	or     dl,al
c0019ac1:	74 79                	je     c0019b3c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019ac3:	84 c9                	test   cl,cl
c0019ac5:	75 05                	jne    c0019acc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019ac7:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019aca:	eb 3c                	jmp    c0019b08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019acc:	80 f9 01             	cmp    cl,0x1
c0019acf:	75 05                	jne    c0019ad6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019ad1:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019ad4:	eb 32                	jmp    c0019b08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019ad6:	80 f9 02             	cmp    cl,0x2
c0019ad9:	75 05                	jne    c0019ae0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019adb:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019ade:	eb 28                	jmp    c0019b08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019ae0:	31 c0                	xor    eax,eax
c0019ae2:	80 f9 03             	cmp    cl,0x3
c0019ae5:	75 05                	jne    c0019aec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019ae7:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019aea:	eb 1c                	jmp    c0019b08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019aec:	80 f9 05             	cmp    cl,0x5
c0019aef:	75 05                	jne    c0019af6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019af1:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019af4:	eb 12                	jmp    c0019b08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019af6:	80 f9 06             	cmp    cl,0x6
c0019af9:	75 05                	jne    c0019b00 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019afb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019afe:	eb 08                	jmp    c0019b08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019b00:	80 f9 07             	cmp    cl,0x7
c0019b03:	75 03                	jne    c0019b08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019b05:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019b08:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019b0d:	75 10                	jne    c0019b1f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019b0f:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019b13:	b9 03 00 00 00       	mov    ecx,0x3
c0019b18:	01 d0                	add    eax,edx
c0019b1a:	e9 37 01 00 00       	jmp    c0019c56 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019b1f:	b9 02 00 00 00       	mov    ecx,0x2
c0019b24:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019b29:	0f 85 27 01 00 00    	jne    c0019c56 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019b2f:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019b32:	b9 06 00 00 00       	mov    ecx,0x6
c0019b37:	e9 1a 01 00 00       	jmp    c0019c56 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019b3c:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019b3f:	b9 06 00 00 00       	mov    ecx,0x6
c0019b44:	e9 0f 01 00 00       	jmp    c0019c58 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019b49:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019b4c:	88 ca                	mov    dl,cl
c0019b4e:	c0 ea 06             	shr    dl,0x6
c0019b51:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019b55:	89 ca                	mov    edx,ecx
c0019b57:	66 c1 ea 03          	shr    dx,0x3
c0019b5b:	83 e2 07             	and    edx,0x7
c0019b5e:	80 e1 07             	and    cl,0x7
c0019b61:	75 05                	jne    c0019b68 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019b63:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019b66:	eb 4c                	jmp    c0019bb4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019b68:	80 f9 01             	cmp    cl,0x1
c0019b6b:	75 05                	jne    c0019b72 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019b6d:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019b70:	eb 42                	jmp    c0019bb4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019b72:	80 f9 02             	cmp    cl,0x2
c0019b75:	75 05                	jne    c0019b7c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019b77:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019b7a:	eb 38                	jmp    c0019bb4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019b7c:	80 f9 03             	cmp    cl,0x3
c0019b7f:	75 05                	jne    c0019b86 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019b81:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019b84:	eb 2e                	jmp    c0019bb4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019b86:	80 f9 04             	cmp    cl,0x4
c0019b89:	75 12                	jne    c0019b9d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019b8b:	f6 c4 60             	test   ah,0x60
c0019b8e:	75 08                	jne    c0019b98 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019b90:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019b93:	8d 78 14             	lea    edi,[eax+0x14]
c0019b96:	eb 1c                	jmp    c0019bb4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019b98:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019b9b:	eb 17                	jmp    c0019bb4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019b9d:	80 f9 05             	cmp    cl,0x5
c0019ba0:	75 05                	jne    c0019ba7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019ba2:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019ba5:	eb 0d                	jmp    c0019bb4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ba7:	80 f9 06             	cmp    cl,0x6
c0019baa:	75 05                	jne    c0019bb1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019bac:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019baf:	eb 03                	jmp    c0019bb4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019bb1:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019bb4:	84 d2                	test   dl,dl
c0019bb6:	75 05                	jne    c0019bbd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019bb8:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019bbb:	eb 3c                	jmp    c0019bf9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019bbd:	80 fa 01             	cmp    dl,0x1
c0019bc0:	75 05                	jne    c0019bc7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019bc2:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019bc5:	eb 32                	jmp    c0019bf9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019bc7:	80 fa 02             	cmp    dl,0x2
c0019bca:	75 05                	jne    c0019bd1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019bcc:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019bcf:	eb 28                	jmp    c0019bf9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019bd1:	80 fa 03             	cmp    dl,0x3
c0019bd4:	75 05                	jne    c0019bdb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019bd6:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019bd9:	eb 1e                	jmp    c0019bf9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019bdb:	31 c0                	xor    eax,eax
c0019bdd:	80 fa 04             	cmp    dl,0x4
c0019be0:	74 17                	je     c0019bf9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019be2:	80 fa 05             	cmp    dl,0x5
c0019be5:	75 05                	jne    c0019bec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019be7:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019bea:	eb 0d                	jmp    c0019bf9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019bec:	80 fa 06             	cmp    dl,0x6
c0019bef:	75 05                	jne    c0019bf6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019bf1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019bf4:	eb 03                	jmp    c0019bf9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019bf6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019bf9:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019bfe:	0f 94 c2             	sete   dl
c0019c01:	80 f9 05             	cmp    cl,0x5
c0019c04:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019c08:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019c0d:	d3 e0                	shl    eax,cl
c0019c0f:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019c13:	74 0a                	je     c0019c1f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019c15:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019c18:	b9 07 00 00 00       	mov    ecx,0x7
c0019c1d:	eb 37                	jmp    c0019c56 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019c1f:	01 f8                	add    eax,edi
c0019c21:	b9 03 00 00 00       	mov    ecx,0x3
c0019c26:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019c2b:	74 2b                	je     c0019c58 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019c2d:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019c32:	75 0d                	jne    c0019c41 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019c34:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019c38:	01 c8                	add    eax,ecx
c0019c3a:	b9 04 00 00 00       	mov    ecx,0x4
c0019c3f:	eb 17                	jmp    c0019c58 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019c41:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019c44:	b9 07 00 00 00       	mov    ecx,0x7
c0019c49:	eb 0d                	jmp    c0019c58 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019c4b:	b9 02 00 00 00       	mov    ecx,0x2
c0019c50:	b2 01                	mov    dl,0x1
c0019c52:	31 c0                	xor    eax,eax
c0019c54:	eb 02                	jmp    c0019c58 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019c56:	31 d2                	xor    edx,edx
c0019c58:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019c5c:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019c5e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019c62:	88 11                	mov    BYTE PTR [ecx],dl
c0019c64:	5a                   	pop    edx
c0019c65:	5b                   	pop    ebx
c0019c66:	5e                   	pop    esi
c0019c67:	5f                   	pop    edi
c0019c68:	c3                   	ret    

c0019c69 <Krnl::smpEntry()>:
c0019c69:	eb fe                	jmp    c0019c69 <Krnl::smpEntry()>

c0019c6b <Krnl::startCPU(int)>:
c0019c6b:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c0019c70:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019c77:	0f 84 36 01 00 00    	je     c0019db3 <Krnl::startCPU(int)+0x148>
c0019c7d:	53                   	push   ebx
c0019c7e:	83 ec 10             	sub    esp,0x10
c0019c81:	fa                   	cli    
c0019c82:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c0019c88:	6a 1b                	push   0x1b
c0019c8a:	ff 35 c8 f0 02 c0    	push   DWORD PTR ds:0xc002f0c8
c0019c90:	e8 9d 51 ff ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c0019c95:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019c9a:	89 c3                	mov    ebx,eax
c0019c9c:	58                   	pop    eax
c0019c9d:	5a                   	pop    edx
c0019c9e:	53                   	push   ebx
c0019c9f:	68 40 c4 02 c0       	push   0xc002c440
c0019ca4:	e8 c2 8c ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0019ca9:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019cb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019cb7:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019cc1:	c1 e0 18             	shl    eax,0x18
c0019cc4:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019cca:	83 c4 10             	add    esp,0x10
c0019ccd:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019cd3:	09 c2                	or     edx,eax
c0019cd5:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019cdb:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019ce1:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019ce7:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019ced:	80 cd c5             	or     ch,0xc5
c0019cf0:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019cf6:	f3 90                	pause  
c0019cf8:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019cfa:	0f ba e1 0c          	bt     ecx,0xc
c0019cfe:	72 f6                	jb     c0019cf6 <Krnl::startCPU(int)+0x8b>
c0019d00:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019d06:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019d0c:	09 c1                	or     ecx,eax
c0019d0e:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019d14:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019d1a:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019d20:	80 cd 85             	or     ch,0x85
c0019d23:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019d29:	f3 90                	pause  
c0019d2b:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019d2d:	0f ba e1 0c          	bt     ecx,0xc
c0019d31:	72 f6                	jb     c0019d29 <Krnl::startCPU(int)+0xbe>
c0019d33:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019d3d:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019d43:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019d49:	09 c1                	or     ecx,eax
c0019d4b:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019d51:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019d57:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019d5d:	81 c9 02 06 00 00    	or     ecx,0x602
c0019d63:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019d69:	f3 90                	pause  
c0019d6b:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019d6d:	0f ba e1 0c          	bt     ecx,0xc
c0019d71:	72 f6                	jb     c0019d69 <Krnl::startCPU(int)+0xfe>
c0019d73:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019d7d:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019d83:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019d89:	09 c8                	or     eax,ecx
c0019d8b:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019d91:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019d97:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019d9c:	0d 02 06 00 00       	or     eax,0x602
c0019da1:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019da7:	f3 90                	pause  
c0019da9:	8b 02                	mov    eax,DWORD PTR [edx]
c0019dab:	0f ba e0 0c          	bt     eax,0xc
c0019daf:	72 f6                	jb     c0019da7 <Krnl::startCPU(int)+0x13c>
c0019db1:	eb fe                	jmp    c0019db1 <Krnl::startCPU(int)+0x146>
c0019db3:	c3                   	ret    

c0019db4 <Krnl::startCPUs()>:
c0019db4:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c0019db9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019dbf:	88 c2                	mov    dl,al
c0019dc1:	83 e2 0a             	and    edx,0xa
c0019dc4:	80 fa 0a             	cmp    dl,0xa
c0019dc7:	75 09                	jne    c0019dd2 <Krnl::startCPUs()+0x1e>
c0019dc9:	a8 01                	test   al,0x1
c0019dcb:	74 05                	je     c0019dd2 <Krnl::startCPUs()+0x1e>
c0019dcd:	e9 c9 63 fe ff       	jmp    c000019b <prepareTramp>
c0019dd2:	c3                   	ret    
c0019dd3:	90                   	nop

c0019dd4 <EnvVarContainer::getEnv(char const*)>:
c0019dd4:	57                   	push   edi
c0019dd5:	56                   	push   esi
c0019dd6:	53                   	push   ebx
c0019dd7:	31 db                	xor    ebx,ebx
c0019dd9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019ddd:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019ddf:	7e 2b                	jle    c0019e0c <EnvVarContainer::getEnv(char const*)+0x38>
c0019de1:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019de8:	50                   	push   eax
c0019de9:	50                   	push   eax
c0019dea:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019ded:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019df0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019df4:	e8 9f 6a fe ff       	call   c0000898 <strcmp>
c0019df9:	83 c4 10             	add    esp,0x10
c0019dfc:	85 c0                	test   eax,eax
c0019dfe:	75 09                	jne    c0019e09 <EnvVarContainer::getEnv(char const*)+0x35>
c0019e00:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019e03:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019e07:	eb 05                	jmp    c0019e0e <EnvVarContainer::getEnv(char const*)+0x3a>
c0019e09:	43                   	inc    ebx
c0019e0a:	eb d1                	jmp    c0019ddd <EnvVarContainer::getEnv(char const*)+0x9>
c0019e0c:	31 c0                	xor    eax,eax
c0019e0e:	5b                   	pop    ebx
c0019e0f:	5e                   	pop    esi
c0019e10:	5f                   	pop    edi
c0019e11:	c3                   	ret    

c0019e12 <EnvVarContainer::setEnv(char const*, char const*)>:
c0019e12:	55                   	push   ebp
c0019e13:	57                   	push   edi
c0019e14:	56                   	push   esi
c0019e15:	53                   	push   ebx
c0019e16:	83 ec 28             	sub    esp,0x28
c0019e19:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0019e1d:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0019e21:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0019e25:	56                   	push   esi
c0019e26:	e8 41 69 fe ff       	call   c000076c <strlen>
c0019e2b:	40                   	inc    eax
c0019e2c:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e2f:	e8 58 5a ff ff       	call   c000f88c <malloc>
c0019e34:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019e3b:	e8 2c 69 fe ff       	call   c000076c <strlen>
c0019e40:	40                   	inc    eax
c0019e41:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e44:	e8 43 5a ff ff       	call   c000f88c <malloc>
c0019e49:	89 34 24             	mov    DWORD PTR [esp],esi
c0019e4c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019e50:	e8 17 69 fe ff       	call   c000076c <strlen>
c0019e55:	83 c4 0c             	add    esp,0xc
c0019e58:	40                   	inc    eax
c0019e59:	50                   	push   eax
c0019e5a:	6a 00                	push   0x0
c0019e5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019e60:	e8 eb 68 fe ff       	call   c0000750 <memset>
c0019e65:	89 34 24             	mov    DWORD PTR [esp],esi
c0019e68:	e8 ff 68 fe ff       	call   c000076c <strlen>
c0019e6d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019e71:	8d 48 01             	lea    ecx,[eax+0x1]
c0019e74:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019e76:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e79:	89 de                	mov    esi,ebx
c0019e7b:	e8 ec 68 fe ff       	call   c000076c <strlen>
c0019e80:	83 c4 0c             	add    esp,0xc
c0019e83:	40                   	inc    eax
c0019e84:	50                   	push   eax
c0019e85:	6a 00                	push   0x0
c0019e87:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019e8b:	e8 c0 68 fe ff       	call   c0000750 <memset>
c0019e90:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e93:	e8 d4 68 fe ff       	call   c000076c <strlen>
c0019e98:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019e9c:	8d 48 01             	lea    ecx,[eax+0x1]
c0019e9f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019ea1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019ea4:	40                   	inc    eax
c0019ea5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019ea8:	c1 e0 03             	shl    eax,0x3
c0019eab:	5a                   	pop    edx
c0019eac:	59                   	pop    ecx
c0019ead:	50                   	push   eax
c0019eae:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019eb1:	e8 c2 59 ff ff       	call   c000f878 <realloc>
c0019eb6:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019eba:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019ebd:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019ec0:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019ec4:	b9 08 00 00 00       	mov    ecx,0x8
c0019ec9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019ecb:	83 c4 2c             	add    esp,0x2c
c0019ece:	5b                   	pop    ebx
c0019ecf:	5e                   	pop    esi
c0019ed0:	5f                   	pop    edi
c0019ed1:	5d                   	pop    ebp
c0019ed2:	c3                   	ret    
c0019ed3:	90                   	nop

c0019ed4 <EnvVarContainer::deleteEnv(char const*)>:
c0019ed4:	c3                   	ret    
c0019ed5:	90                   	nop

c0019ed6 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0019ed6:	55                   	push   ebp
c0019ed7:	57                   	push   edi
c0019ed8:	56                   	push   esi
c0019ed9:	53                   	push   ebx
c0019eda:	81 ec 38 01 00 00    	sub    esp,0x138
c0019ee0:	8b 9c 24 4c 01 00 00 	mov    ebx,DWORD PTR [esp+0x14c]
c0019ee7:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0019eee:	68 14 01 00 00       	push   0x114
c0019ef3:	e8 94 59 ff ff       	call   c000f88c <malloc>
c0019ef8:	83 c4 0c             	add    esp,0xc
c0019efb:	89 c5                	mov    ebp,eax
c0019efd:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0019f00:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019f07:	50                   	push   eax
c0019f08:	e8 bd 8f ff ff       	call   c0012eca <File::File(char const*, Process*)>
c0019f0d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019f10:	e8 87 92 ff ff       	call   c001319c <File::exists()>
c0019f15:	83 c4 10             	add    esp,0x10
c0019f18:	84 c0                	test   al,al
c0019f1a:	75 32                	jne    c0019f4e <EnvVarContainer::loadFrom(char const*, char const*)+0x78>
c0019f1c:	51                   	push   ecx
c0019f1d:	51                   	push   ecx
c0019f1e:	6a 12                	push   0x12
c0019f20:	55                   	push   ebp
c0019f21:	e8 08 90 ff ff       	call   c0012f2e <File::open(FileOpenMode)>
c0019f26:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019f29:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0019f2c:	89 34 24             	mov    DWORD PTR [esp],esi
c0019f2f:	e8 38 68 fe ff       	call   c000076c <strlen>
c0019f34:	5a                   	pop    edx
c0019f35:	31 d2                	xor    edx,edx
c0019f37:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019f3b:	51                   	push   ecx
c0019f3c:	56                   	push   esi
c0019f3d:	52                   	push   edx
c0019f3e:	50                   	push   eax
c0019f3f:	55                   	push   ebp
c0019f40:	ff d7                	call   edi
c0019f42:	83 c4 14             	add    esp,0x14
c0019f45:	55                   	push   ebp
c0019f46:	e8 41 90 ff ff       	call   c0012f8c <File::close()>
c0019f4b:	83 c4 10             	add    esp,0x10
c0019f4e:	31 f6                	xor    esi,esi
c0019f50:	50                   	push   eax
c0019f51:	68 00 01 00 00       	push   0x100
c0019f56:	6a 00                	push   0x0
c0019f58:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019f5c:	50                   	push   eax
c0019f5d:	e8 ee 67 fe ff       	call   c0000750 <memset>
c0019f62:	58                   	pop    eax
c0019f63:	5a                   	pop    edx
c0019f64:	6a 01                	push   0x1
c0019f66:	55                   	push   ebp
c0019f67:	e8 c2 8f ff ff       	call   c0012f2e <File::open(FileOpenMode)>
c0019f6c:	83 c4 10             	add    esp,0x10
c0019f6f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019f77:	83 ec 0c             	sub    esp,0xc
c0019f7a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019f7d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019f81:	51                   	push   ecx
c0019f82:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019f86:	52                   	push   edx
c0019f87:	6a 00                	push   0x0
c0019f89:	6a 01                	push   0x1
c0019f8b:	55                   	push   ebp
c0019f8c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019f8f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019f93:	83 c4 20             	add    esp,0x20
c0019f96:	3c 0d                	cmp    al,0xd
c0019f98:	0f 84 16 01 00 00    	je     c001a0b4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c0019f9e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019fa3:	0f 84 fc 00 00 00    	je     c001a0a5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019fa9:	3c 0a                	cmp    al,0xa
c0019fab:	74 13                	je     c0019fc0 <EnvVarContainer::loadFrom(char const*, char const*)+0xea>
c0019fad:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019fb2:	74 0c                	je     c0019fc0 <EnvVarContainer::loadFrom(char const*, char const*)+0xea>
c0019fb4:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0019fba:	0f 8e e5 00 00 00    	jle    c001a0a5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019fc0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019fc4:	83 ec 0c             	sub    esp,0xc
c0019fc7:	8d 78 01             	lea    edi,[eax+0x1]
c0019fca:	57                   	push   edi
c0019fcb:	e8 bc 58 ff ff       	call   c000f88c <malloc>
c0019fd0:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0019fd4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019fd8:	8d 56 04             	lea    edx,[esi+0x4]
c0019fdb:	89 14 24             	mov    DWORD PTR [esp],edx
c0019fde:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019fe2:	e8 a5 58 ff ff       	call   c000f88c <malloc>
c0019fe7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019feb:	83 c4 0c             	add    esp,0xc
c0019fee:	57                   	push   edi
c0019fef:	6a 00                	push   0x0
c0019ff1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019ff5:	e8 56 67 fe ff       	call   c0000750 <memset>
c0019ffa:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019ffe:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a002:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001a006:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a008:	83 c4 0c             	add    esp,0xc
c001a00b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a00f:	52                   	push   edx
c001a010:	6a 00                	push   0x0
c001a012:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a016:	e8 35 67 fe ff       	call   c0000750 <memset>
c001a01b:	8d 74 24 30          	lea    esi,[esp+0x30]
c001a01f:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001a023:	89 34 24             	mov    DWORD PTR [esp],esi
c001a026:	e8 41 67 fe ff       	call   c000076c <strlen>
c001a02b:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001a02f:	89 c1                	mov    ecx,eax
c001a031:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a033:	5e                   	pop    esi
c001a034:	5f                   	pop    edi
c001a035:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a039:	68 51 c4 02 c0       	push   0xc002c451
c001a03e:	e8 28 89 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001a043:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a045:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c001a048:	40                   	inc    eax
c001a049:	83 c4 10             	add    esp,0x10
c001a04c:	89 03                	mov    DWORD PTR [ebx],eax
c001a04e:	85 d2                	test   edx,edx
c001a050:	75 0c                	jne    c001a05e <EnvVarContainer::loadFrom(char const*, char const*)+0x188>
c001a052:	83 ec 0c             	sub    esp,0xc
c001a055:	6a 08                	push   0x8
c001a057:	e8 30 58 ff ff       	call   c000f88c <malloc>
c001a05c:	eb 0c                	jmp    c001a06a <EnvVarContainer::loadFrom(char const*, char const*)+0x194>
c001a05e:	c1 e0 03             	shl    eax,0x3
c001a061:	51                   	push   ecx
c001a062:	51                   	push   ecx
c001a063:	50                   	push   eax
c001a064:	52                   	push   edx
c001a065:	e8 0e 58 ff ff       	call   c000f878 <realloc>
c001a06a:	83 c4 10             	add    esp,0x10
c001a06d:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a070:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a072:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001a075:	8d 74 24 18          	lea    esi,[esp+0x18]
c001a079:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001a07d:	b9 08 00 00 00       	mov    ecx,0x8
c001a082:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a084:	31 f6                	xor    esi,esi
c001a086:	52                   	push   edx
c001a087:	68 00 01 00 00       	push   0x100
c001a08c:	6a 00                	push   0x0
c001a08e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a092:	50                   	push   eax
c001a093:	e8 b8 66 fe ff       	call   c0000750 <memset>
c001a098:	83 c4 10             	add    esp,0x10
c001a09b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a0a3:	eb 0f                	jmp    c001a0b4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a0a5:	3c 3d                	cmp    al,0x3d
c001a0a7:	74 07                	je     c001a0b0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1da>
c001a0a9:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c001a0ad:	46                   	inc    esi
c001a0ae:	eb 04                	jmp    c001a0b4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a0b0:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001a0b4:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a0b9:	0f 85 b8 fe ff ff    	jne    c0019f77 <EnvVarContainer::loadFrom(char const*, char const*)+0xa1>
c001a0bf:	50                   	push   eax
c001a0c0:	50                   	push   eax
c001a0c1:	ff 33                	push   DWORD PTR [ebx]
c001a0c3:	68 5f c4 02 c0       	push   0xc002c45f
c001a0c8:	e8 9e 88 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001a0cd:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a0d3:	5b                   	pop    ebx
c001a0d4:	5e                   	pop    esi
c001a0d5:	5f                   	pop    edi
c001a0d6:	5d                   	pop    ebp
c001a0d7:	c3                   	ret    

c001a0d8 <EnvVarContainer::__loadSystem()>:
c001a0d8:	83 ec 10             	sub    esp,0x10
c001a0db:	68 00 e6 02 c0       	push   0xc002e600
c001a0e0:	68 8a c4 02 c0       	push   0xc002c48a
c001a0e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a0e9:	e8 e8 fd ff ff       	call   c0019ed6 <EnvVarContainer::loadFrom(char const*, char const*)>
c001a0ee:	83 c4 1c             	add    esp,0x1c
c001a0f1:	c3                   	ret    

c001a0f2 <EnvVarContainer::__loadUser()>:
c001a0f2:	c3                   	ret    
c001a0f3:	90                   	nop

c001a0f4 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a0f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0f8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a0fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a102:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a106:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a109:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a10d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a114:	90                   	nop
c001a115:	c3                   	ret    

c001a116 <EnvVarContainer::~EnvVarContainer()>:
c001a116:	83 ec 0c             	sub    esp,0xc
c001a119:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a11d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a120:	85 c0                	test   eax,eax
c001a122:	74 1d                	je     c001a141 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a128:	8b 00                	mov    eax,DWORD PTR [eax]
c001a12a:	85 c0                	test   eax,eax
c001a12c:	74 13                	je     c001a141 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a12e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a132:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a135:	83 ec 0c             	sub    esp,0xc
c001a138:	50                   	push   eax
c001a139:	e8 5e 57 ff ff       	call   c000f89c <free>
c001a13e:	83 c4 10             	add    esp,0x10
c001a141:	90                   	nop
c001a142:	83 c4 0c             	add    esp,0xc
c001a145:	c3                   	ret    

c001a146 <Krnl::getEnv(Process*, char const*)>:
c001a146:	53                   	push   ebx
c001a147:	83 ec 08             	sub    esp,0x8
c001a14a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a14e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a152:	39 05 10 26 03 c0    	cmp    DWORD PTR ds:0xc0032610,eax
c001a158:	74 04                	je     c001a15e <Krnl::getEnv(Process*, char const*)+0x18>
c001a15a:	85 c0                	test   eax,eax
c001a15c:	75 0b                	jne    c001a169 <Krnl::getEnv(Process*, char const*)+0x23>
c001a15e:	a1 f4 1b 03 c0       	mov    eax,ds:0xc0031bf4
c001a163:	85 c0                	test   eax,eax
c001a165:	75 19                	jne    c001a180 <Krnl::getEnv(Process*, char const*)+0x3a>
c001a167:	eb 27                	jmp    c001a190 <Krnl::getEnv(Process*, char const*)+0x4a>
c001a169:	52                   	push   edx
c001a16a:	52                   	push   edx
c001a16b:	53                   	push   ebx
c001a16c:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a172:	e8 5d fc ff ff       	call   c0019dd4 <EnvVarContainer::getEnv(char const*)>
c001a177:	83 c4 10             	add    esp,0x10
c001a17a:	85 c0                	test   eax,eax
c001a17c:	75 28                	jne    c001a1a6 <Krnl::getEnv(Process*, char const*)+0x60>
c001a17e:	eb de                	jmp    c001a15e <Krnl::getEnv(Process*, char const*)+0x18>
c001a180:	52                   	push   edx
c001a181:	52                   	push   edx
c001a182:	53                   	push   ebx
c001a183:	50                   	push   eax
c001a184:	e8 4b fc ff ff       	call   c0019dd4 <EnvVarContainer::getEnv(char const*)>
c001a189:	83 c4 10             	add    esp,0x10
c001a18c:	85 c0                	test   eax,eax
c001a18e:	75 16                	jne    c001a1a6 <Krnl::getEnv(Process*, char const*)+0x60>
c001a190:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a194:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c001a199:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a19d:	83 c4 08             	add    esp,0x8
c001a1a0:	5b                   	pop    ebx
c001a1a1:	e9 2e fc ff ff       	jmp    c0019dd4 <EnvVarContainer::getEnv(char const*)>
c001a1a6:	83 c4 08             	add    esp,0x8
c001a1a9:	5b                   	pop    ebx
c001a1aa:	c3                   	ret    

c001a1ab <Krnl::setEnvSystem(char const*, char const*)>:
c001a1ab:	83 ec 10             	sub    esp,0x10
c001a1ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a1b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a1b6:	ff 35 f8 1b 03 c0    	push   DWORD PTR ds:0xc0031bf8
c001a1bc:	e8 51 fc ff ff       	call   c0019e12 <EnvVarContainer::setEnv(char const*, char const*)>
c001a1c1:	83 c4 1c             	add    esp,0x1c
c001a1c4:	c3                   	ret    

c001a1c5 <Krnl::setEnvUser(char const*, char const*)>:
c001a1c5:	a1 f4 1b 03 c0       	mov    eax,ds:0xc0031bf4
c001a1ca:	85 c0                	test   eax,eax
c001a1cc:	74 15                	je     c001a1e3 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a1ce:	83 ec 10             	sub    esp,0x10
c001a1d1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a1d5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a1d9:	50                   	push   eax
c001a1da:	e8 33 fc ff ff       	call   c0019e12 <EnvVarContainer::setEnv(char const*, char const*)>
c001a1df:	83 c4 1c             	add    esp,0x1c
c001a1e2:	c3                   	ret    
c001a1e3:	c3                   	ret    

c001a1e4 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a1e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1e8:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a1ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a1f2:	e9 1b fc ff ff       	jmp    c0019e12 <EnvVarContainer::setEnv(char const*, char const*)>

c001a1f7 <Krnl::deleteEnvSystem(char const*)>:
c001a1f7:	c3                   	ret    

c001a1f8 <Krnl::deleteEnvUser(char const*)>:
c001a1f8:	c3                   	ret    

c001a1f9 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a1f9:	c3                   	ret    

c001a1fa <Krnl::newProcessEnv(Process*)>:
c001a1fa:	83 ec 28             	sub    esp,0x28
c001a1fd:	6a 0c                	push   0xc
c001a1ff:	e8 88 56 ff ff       	call   c000f88c <malloc>
c001a204:	5a                   	pop    edx
c001a205:	59                   	pop    ecx
c001a206:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a20a:	50                   	push   eax
c001a20b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a20f:	e8 e0 fe ff ff       	call   c001a0f4 <EnvVarContainer::EnvVarContainer(Process*)>
c001a214:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a218:	83 c4 2c             	add    esp,0x2c
c001a21b:	c3                   	ret    

c001a21c <Krnl::copyProcessEnv(Process*, Process*)>:
c001a21c:	57                   	push   edi
c001a21d:	56                   	push   esi
c001a21e:	53                   	push   ebx
c001a21f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a223:	83 ec 0c             	sub    esp,0xc
c001a226:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c001a22c:	6a 0c                	push   0xc
c001a22e:	e8 59 56 ff ff       	call   c000f88c <malloc>
c001a233:	89 c3                	mov    ebx,eax
c001a235:	58                   	pop    eax
c001a236:	5a                   	pop    edx
c001a237:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a23b:	53                   	push   ebx
c001a23c:	e8 b3 fe ff ff       	call   c001a0f4 <EnvVarContainer::EnvVarContainer(Process*)>
c001a241:	8b 07                	mov    eax,DWORD PTR [edi]
c001a243:	89 03                	mov    DWORD PTR [ebx],eax
c001a245:	c1 e0 03             	shl    eax,0x3
c001a248:	89 04 24             	mov    DWORD PTR [esp],eax
c001a24b:	e8 3c 56 ff ff       	call   c000f88c <malloc>
c001a250:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a253:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001a255:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001a258:	c1 e1 03             	shl    ecx,0x3
c001a25b:	89 c7                	mov    edi,eax
c001a25d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a25f:	83 c4 10             	add    esp,0x10
c001a262:	89 d8                	mov    eax,ebx
c001a264:	5b                   	pop    ebx
c001a265:	5e                   	pop    esi
c001a266:	5f                   	pop    edi
c001a267:	c3                   	ret    

c001a268 <Krnl::loadSystemEnv()>:
c001a268:	53                   	push   ebx
c001a269:	83 ec 14             	sub    esp,0x14
c001a26c:	6a 0c                	push   0xc
c001a26e:	e8 19 56 ff ff       	call   c000f88c <malloc>
c001a273:	89 c3                	mov    ebx,eax
c001a275:	58                   	pop    eax
c001a276:	5a                   	pop    edx
c001a277:	ff 35 10 26 03 c0    	push   DWORD PTR ds:0xc0032610
c001a27d:	53                   	push   ebx
c001a27e:	e8 71 fe ff ff       	call   c001a0f4 <EnvVarContainer::EnvVarContainer(Process*)>
c001a283:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a286:	89 1d f8 1b 03 c0    	mov    DWORD PTR ds:0xc0031bf8,ebx
c001a28c:	e8 47 fe ff ff       	call   c001a0d8 <EnvVarContainer::__loadSystem()>
c001a291:	83 c4 18             	add    esp,0x18
c001a294:	5b                   	pop    ebx
c001a295:	c3                   	ret    

c001a296 <Krnl::loadUserEnv()>:
c001a296:	53                   	push   ebx
c001a297:	83 ec 14             	sub    esp,0x14
c001a29a:	6a 0c                	push   0xc
c001a29c:	e8 eb 55 ff ff       	call   c000f88c <malloc>
c001a2a1:	89 c3                	mov    ebx,eax
c001a2a3:	58                   	pop    eax
c001a2a4:	5a                   	pop    edx
c001a2a5:	ff 35 10 26 03 c0    	push   DWORD PTR ds:0xc0032610
c001a2ab:	53                   	push   ebx
c001a2ac:	e8 43 fe ff ff       	call   c001a0f4 <EnvVarContainer::EnvVarContainer(Process*)>
c001a2b1:	89 1d f4 1b 03 c0    	mov    DWORD PTR ds:0xc0031bf4,ebx
c001a2b7:	83 c4 18             	add    esp,0x18
c001a2ba:	5b                   	pop    ebx
c001a2bb:	c3                   	ret    

c001a2bc <Krnl::flushEnv()>:
c001a2bc:	c3                   	ret    

c001a2bd <Krnl::getProcessTotalEnvCount(Process*)>:
c001a2bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2c1:	8b 15 f4 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031bf4
c001a2c7:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a2cd:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c001a2d2:	8b 00                	mov    eax,DWORD PTR [eax]
c001a2d4:	03 01                	add    eax,DWORD PTR [ecx]
c001a2d6:	85 d2                	test   edx,edx
c001a2d8:	74 02                	je     c001a2dc <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a2da:	03 02                	add    eax,DWORD PTR [edx]
c001a2dc:	c3                   	ret    

c001a2dd <Krnl::getProcessEnvPair(Process*, int)>:
c001a2dd:	57                   	push   edi
c001a2de:	8b 0d f4 1b 03 c0    	mov    ecx,DWORD PTR ds:0xc0031bf4
c001a2e4:	56                   	push   esi
c001a2e5:	85 c9                	test   ecx,ecx
c001a2e7:	53                   	push   ebx
c001a2e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a2ec:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a2f0:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a2f6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a2fa:	8b 02                	mov    eax,DWORD PTR [edx]
c001a2fc:	75 47                	jne    c001a345 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a2fe:	39 c3                	cmp    ebx,eax
c001a300:	7c 47                	jl     c001a349 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a302:	8b 15 f8 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031bf8
c001a308:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a30a:	01 c1                	add    ecx,eax
c001a30c:	39 d9                	cmp    ecx,ebx
c001a30e:	7e 6c                	jle    c001a37c <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a310:	51                   	push   ecx
c001a311:	89 d9                	mov    ecx,ebx
c001a313:	29 c1                	sub    ecx,eax
c001a315:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a318:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a31c:	53                   	push   ebx
c001a31d:	68 ac c4 02 c0       	push   0xc002c4ac
c001a322:	e8 44 86 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001a327:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a32d:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a32f:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c001a334:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a337:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a33b:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a33e:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a341:	89 06                	mov    DWORD PTR [esi],eax
c001a343:	eb 51                	jmp    c001a396 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a345:	39 c3                	cmp    ebx,eax
c001a347:	7d 05                	jge    c001a34e <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a349:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a34c:	eb 20                	jmp    c001a36e <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a34e:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a350:	8d 14 07             	lea    edx,[edi+eax*1]
c001a353:	39 da                	cmp    edx,ebx
c001a355:	7e 04                	jle    c001a35b <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a357:	29 c3                	sub    ebx,eax
c001a359:	eb 10                	jmp    c001a36b <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a35b:	8b 0d f8 1b 03 c0    	mov    ecx,DWORD PTR ds:0xc0031bf8
c001a361:	03 11                	add    edx,DWORD PTR [ecx]
c001a363:	39 da                	cmp    edx,ebx
c001a365:	7e 15                	jle    c001a37c <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a367:	29 c3                	sub    ebx,eax
c001a369:	29 fb                	sub    ebx,edi
c001a36b:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a36e:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a372:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a375:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a378:	89 06                	mov    DWORD PTR [esi],eax
c001a37a:	eb 1d                	jmp    c001a399 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a37c:	83 ec 0c             	sub    esp,0xc
c001a37f:	68 c0 c4 02 c0       	push   0xc002c4c0
c001a384:	e8 18 00 00 00       	call   c001a3a1 <Krnl::panic(char const*)>
c001a389:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a38f:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a396:	83 c4 10             	add    esp,0x10
c001a399:	89 f0                	mov    eax,esi
c001a39b:	5b                   	pop    ebx
c001a39c:	5e                   	pop    esi
c001a39d:	5f                   	pop    edi
c001a39e:	c2 04 00             	ret    0x4

c001a3a1 <Krnl::panic(char const*)>:
c001a3a1:	55                   	push   ebp
c001a3a2:	89 e5                	mov    ebp,esp
c001a3a4:	53                   	push   ebx
c001a3a5:	83 ec 0c             	sub    esp,0xc
c001a3a8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a3ab:	fa                   	cli    
c001a3ac:	c6 05 04 1c 03 c0 01 	mov    BYTE PTR ds:0xc0031c04,0x1
c001a3b3:	53                   	push   ebx
c001a3b4:	c6 05 00 e0 02 c0 00 	mov    BYTE PTR ds:0xc002e000,0x0
c001a3bb:	68 da c4 02 c0       	push   0xc002c4da
c001a3c0:	e8 a6 85 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001a3c5:	58                   	pop    eax
c001a3c6:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001a3cb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3d1:	e8 b8 63 ff ff       	call   c001078e <setActiveTerminal(VgaText*)>
c001a3d6:	83 c4 0c             	add    esp,0xc
c001a3d9:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001a3de:	6a 01                	push   0x1
c001a3e0:	6a 0f                	push   0xf
c001a3e2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3e8:	e8 4d 60 ff ff       	call   c001043a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a3ed:	58                   	pop    eax
c001a3ee:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001a3f3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3f9:	e8 d6 65 ff ff       	call   c00109d4 <VgaText::clearScreen()>
c001a3fe:	58                   	pop    eax
c001a3ff:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001a404:	5a                   	pop    edx
c001a405:	68 f3 c4 02 c0       	push   0xc002c4f3
c001a40a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a410:	e8 4b 67 ff ff       	call   c0010b60 <VgaText::puts(char const*)>
c001a415:	59                   	pop    ecx
c001a416:	58                   	pop    eax
c001a417:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001a41c:	68 98 c5 02 c0       	push   0xc002c598
c001a421:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a427:	e8 34 67 ff ff       	call   c0010b60 <VgaText::puts(char const*)>
c001a42c:	58                   	pop    eax
c001a42d:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001a432:	5a                   	pop    edx
c001a433:	68 0f c5 02 c0       	push   0xc002c50f
c001a438:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a43e:	e8 1d 67 ff ff       	call   c0010b60 <VgaText::puts(char const*)>
c001a443:	59                   	pop    ecx
c001a444:	58                   	pop    eax
c001a445:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001a44a:	53                   	push   ebx
c001a44b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a451:	e8 0a 67 ff ff       	call   c0010b60 <VgaText::puts(char const*)>
c001a456:	58                   	pop    eax
c001a457:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001a45c:	5a                   	pop    edx
c001a45d:	68 2f c5 02 c0       	push   0xc002c52f
c001a462:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a468:	e8 f3 66 ff ff       	call   c0010b60 <VgaText::puts(char const*)>
c001a46d:	a1 00 1c 03 c0       	mov    eax,ds:0xc0031c00
c001a472:	83 c4 10             	add    esp,0x10
c001a475:	85 c0                	test   eax,eax
c001a477:	74 02                	je     c001a47b <Krnl::panic(char const*)+0xda>
c001a479:	ff d0                	call   eax
c001a47b:	83 ec 0c             	sub    esp,0xc
c001a47e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a481:	e8 9e 32 00 00       	call   c001d724 <Thr::getDriverNameFromAddress(unsigned long)>
c001a486:	83 c4 10             	add    esp,0x10
c001a489:	89 c3                	mov    ebx,eax
c001a48b:	85 c0                	test   eax,eax
c001a48d:	0f 84 50 02 00 00    	je     c001a6e3 <Krnl::panic(char const*)+0x342>
c001a493:	83 ec 08             	sub    esp,0x8
c001a496:	8b 15 10 26 03 c0    	mov    edx,DWORD PTR ds:0xc0032610
c001a49c:	68 d4 c5 02 c0       	push   0xc002c5d4
c001a4a1:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a4a7:	e8 b4 66 ff ff       	call   c0010b60 <VgaText::puts(char const*)>
c001a4ac:	58                   	pop    eax
c001a4ad:	5a                   	pop    edx
c001a4ae:	8b 15 10 26 03 c0    	mov    edx,DWORD PTR ds:0xc0032610
c001a4b4:	68 0f c5 02 c0       	push   0xc002c50f
c001a4b9:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a4bf:	e8 9c 66 ff ff       	call   c0010b60 <VgaText::puts(char const*)>
c001a4c4:	59                   	pop    ecx
c001a4c5:	58                   	pop    eax
c001a4c6:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001a4cb:	53                   	push   ebx
c001a4cc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4d2:	e8 89 66 ff ff       	call   c0010b60 <VgaText::puts(char const*)>
c001a4d7:	83 c4 10             	add    esp,0x10
c001a4da:	83 ec 08             	sub    esp,0x8
c001a4dd:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001a4e2:	68 2e c5 02 c0       	push   0xc002c52e
c001a4e7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4ed:	e8 6e 66 ff ff       	call   c0010b60 <VgaText::puts(char const*)>
c001a4f2:	58                   	pop    eax
c001a4f3:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001a4f8:	5a                   	pop    edx
c001a4f9:	68 2c c6 02 c0       	push   0xc002c62c
c001a4fe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a504:	e8 57 66 ff ff       	call   c0010b60 <VgaText::puts(char const*)>
c001a509:	59                   	pop    ecx
c001a50a:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001a50f:	5b                   	pop    ebx
c001a510:	68 6c c6 02 c0       	push   0xc002c66c
c001a515:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a51b:	e8 40 66 ff ff       	call   c0010b60 <VgaText::puts(char const*)>
c001a520:	58                   	pop    eax
c001a521:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001a526:	5a                   	pop    edx
c001a527:	68 1a c5 02 c0       	push   0xc002c51a
c001a52c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a532:	e8 29 66 ff ff       	call   c0010b60 <VgaText::puts(char const*)>
c001a537:	59                   	pop    ecx
c001a538:	5b                   	pop    ebx
c001a539:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a53c:	68 32 c5 02 c0       	push   0xc002c532
c001a541:	e8 25 84 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001a546:	58                   	pop    eax
c001a547:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a54a:	5a                   	pop    edx
c001a54b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a54e:	68 3b c5 02 c0       	push   0xc002c53b
c001a553:	e8 13 84 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001a558:	59                   	pop    ecx
c001a559:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a55c:	5b                   	pop    ebx
c001a55d:	8b 00                	mov    eax,DWORD PTR [eax]
c001a55f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a562:	68 44 c5 02 c0       	push   0xc002c544
c001a567:	e8 ff 83 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001a56c:	58                   	pop    eax
c001a56d:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001a572:	5a                   	pop    edx
c001a573:	68 b0 c6 02 c0       	push   0xc002c6b0
c001a578:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a57e:	e8 dd 65 ff ff       	call   c0010b60 <VgaText::puts(char const*)>
c001a583:	59                   	pop    ecx
c001a584:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001a589:	5b                   	pop    ebx
c001a58a:	68 4d c5 02 c0       	push   0xc002c54d
c001a58f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a595:	e8 c6 65 ff ff       	call   c0010b60 <VgaText::puts(char const*)>
c001a59a:	0f 20 c0             	mov    eax,cr0
c001a59d:	5a                   	pop    edx
c001a59e:	59                   	pop    ecx
c001a59f:	50                   	push   eax
c001a5a0:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001a5a5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5ab:	e8 6a 65 ff ff       	call   c0010b1a <VgaText::putx(unsigned int)>
c001a5b0:	5b                   	pop    ebx
c001a5b1:	58                   	pop    eax
c001a5b2:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001a5b7:	68 57 c5 02 c0       	push   0xc002c557
c001a5bc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5c2:	e8 99 65 ff ff       	call   c0010b60 <VgaText::puts(char const*)>
c001a5c7:	0f 20 d0             	mov    eax,cr2
c001a5ca:	5a                   	pop    edx
c001a5cb:	59                   	pop    ecx
c001a5cc:	50                   	push   eax
c001a5cd:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001a5d2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5d8:	e8 3d 65 ff ff       	call   c0010b1a <VgaText::putx(unsigned int)>
c001a5dd:	5b                   	pop    ebx
c001a5de:	58                   	pop    eax
c001a5df:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001a5e4:	68 61 c5 02 c0       	push   0xc002c561
c001a5e9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5ef:	e8 6c 65 ff ff       	call   c0010b60 <VgaText::puts(char const*)>
c001a5f4:	0f 20 d8             	mov    eax,cr3
c001a5f7:	5a                   	pop    edx
c001a5f8:	59                   	pop    ecx
c001a5f9:	50                   	push   eax
c001a5fa:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001a5ff:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a605:	e8 10 65 ff ff       	call   c0010b1a <VgaText::putx(unsigned int)>
c001a60a:	5b                   	pop    ebx
c001a60b:	58                   	pop    eax
c001a60c:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001a611:	68 74 c5 02 c0       	push   0xc002c574
c001a616:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a61c:	e8 3f 65 ff ff       	call   c0010b60 <VgaText::puts(char const*)>
c001a621:	0f 20 e0             	mov    eax,cr4
c001a624:	5a                   	pop    edx
c001a625:	59                   	pop    ecx
c001a626:	50                   	push   eax
c001a627:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001a62c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a632:	e8 e3 64 ff ff       	call   c0010b1a <VgaText::putx(unsigned int)>
c001a637:	5b                   	pop    ebx
c001a638:	58                   	pop    eax
c001a639:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001a63e:	68 7e c5 02 c0       	push   0xc002c57e
c001a643:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a649:	e8 12 65 ff ff       	call   c0010b60 <VgaText::puts(char const*)>
c001a64e:	5a                   	pop    edx
c001a64f:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001a654:	59                   	pop    ecx
c001a655:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a65b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a65e:	50                   	push   eax
c001a65f:	e8 b6 64 ff ff       	call   c0010b1a <VgaText::putx(unsigned int)>
c001a664:	5b                   	pop    ebx
c001a665:	58                   	pop    eax
c001a666:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001a66b:	68 4b d4 02 c0       	push   0xc002d44b
c001a670:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a676:	e8 e5 64 ff ff       	call   c0010b60 <VgaText::puts(char const*)>
c001a67b:	5a                   	pop    edx
c001a67c:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001a681:	59                   	pop    ecx
c001a682:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a688:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a68b:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a68e:	50                   	push   eax
c001a68f:	e8 86 64 ff ff       	call   c0010b1a <VgaText::putx(unsigned int)>
c001a694:	5b                   	pop    ebx
c001a695:	58                   	pop    eax
c001a696:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001a69b:	68 4b d4 02 c0       	push   0xc002d44b
c001a6a0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6a6:	e8 b5 64 ff ff       	call   c0010b60 <VgaText::puts(char const*)>
c001a6ab:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001a6b0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a6b3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a6b9:	8b 12                	mov    edx,DWORD PTR [edx]
c001a6bb:	59                   	pop    ecx
c001a6bc:	5b                   	pop    ebx
c001a6bd:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a6c0:	50                   	push   eax
c001a6c1:	e8 54 64 ff ff       	call   c0010b1a <VgaText::putx(unsigned int)>
c001a6c6:	83 c4 10             	add    esp,0x10
c001a6c9:	b2 fe                	mov    dl,0xfe
c001a6cb:	e4 60                	in     al,0x60
c001a6cd:	3c 1c                	cmp    al,0x1c
c001a6cf:	74 04                	je     c001a6d5 <Krnl::panic(char const*)+0x334>
c001a6d1:	3c 5a                	cmp    al,0x5a
c001a6d3:	75 f6                	jne    c001a6cb <Krnl::panic(char const*)+0x32a>
c001a6d5:	e4 64                	in     al,0x64
c001a6d7:	a8 02                	test   al,0x2
c001a6d9:	75 fa                	jne    c001a6d5 <Krnl::panic(char const*)+0x334>
c001a6db:	88 d0                	mov    al,dl
c001a6dd:	e6 64                	out    0x64,al
c001a6df:	fa                   	cli    
c001a6e0:	f4                   	hlt    
c001a6e1:	eb e8                	jmp    c001a6cb <Krnl::panic(char const*)+0x32a>
c001a6e3:	50                   	push   eax
c001a6e4:	50                   	push   eax
c001a6e5:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001a6ea:	68 00 c6 02 c0       	push   0xc002c600
c001a6ef:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6f5:	e8 66 64 ff ff       	call   c0010b60 <VgaText::puts(char const*)>
c001a6fa:	58                   	pop    eax
c001a6fb:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001a700:	5a                   	pop    edx
c001a701:	68 0f c5 02 c0       	push   0xc002c50f
c001a706:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a70c:	e8 4f 64 ff ff       	call   c0010b60 <VgaText::puts(char const*)>
c001a711:	59                   	pop    ecx
c001a712:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a717:	5b                   	pop    ebx
c001a718:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a71b:	83 c0 0c             	add    eax,0xc
c001a71e:	50                   	push   eax
c001a71f:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001a724:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a72a:	e8 31 64 ff ff       	call   c0010b60 <VgaText::puts(char const*)>
c001a72f:	83 c4 10             	add    esp,0x10
c001a732:	e9 a3 fd ff ff       	jmp    c001a4da <Krnl::panic(char const*)+0x139>

c001a737 <Net::switchEndian16(unsigned short)>:
c001a737:	83 ec 04             	sub    esp,0x4
c001a73a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a73e:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a742:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a746:	c1 f8 08             	sar    eax,0x8
c001a749:	89 c2                	mov    edx,eax
c001a74b:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a74f:	c1 e0 08             	shl    eax,0x8
c001a752:	09 d0                	or     eax,edx
c001a754:	83 c4 04             	add    esp,0x4
c001a757:	c3                   	ret    

c001a758 <Net::switchEndian32(unsigned int)>:
c001a758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a75c:	c1 e8 18             	shr    eax,0x18
c001a75f:	89 c2                	mov    edx,eax
c001a761:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a765:	c1 e0 08             	shl    eax,0x8
c001a768:	25 00 00 ff 00       	and    eax,0xff0000
c001a76d:	09 c2                	or     edx,eax
c001a76f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a773:	c1 e8 08             	shr    eax,0x8
c001a776:	25 00 ff 00 00       	and    eax,0xff00
c001a77b:	09 c2                	or     edx,eax
c001a77d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a781:	c1 e0 18             	shl    eax,0x18
c001a784:	09 d0                	or     eax,edx
c001a786:	c3                   	ret    

c001a787 <Net::crc32Calc(unsigned char*, int)>:
c001a787:	83 ec 10             	sub    esp,0x10
c001a78a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a78f:	75 07                	jne    c001a798 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a791:	b8 00 00 00 00       	mov    eax,0x0
c001a796:	eb 7c                	jmp    c001a814 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a798:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a79d:	7f 07                	jg     c001a7a6 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a79f:	b8 00 00 00 00       	mov    eax,0x0
c001a7a4:	eb 6e                	jmp    c001a814 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a7a6:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a7ae:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a7b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a7ba:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a7be:	7d 4e                	jge    c001a80e <Net::crc32Calc(unsigned char*, int)+0x87>
c001a7c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a7c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a7c8:	01 d0                	add    eax,edx
c001a7ca:	8a 00                	mov    al,BYTE PTR [eax]
c001a7cc:	0f b6 c0             	movzx  eax,al
c001a7cf:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a7d3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a7db:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a7e0:	7f 26                	jg     c001a808 <Net::crc32Calc(unsigned char*, int)+0x81>
c001a7e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7e6:	83 e0 01             	and    eax,0x1
c001a7e9:	74 0d                	je     c001a7f8 <Net::crc32Calc(unsigned char*, int)+0x71>
c001a7eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7ef:	d1 e8                	shr    eax,1
c001a7f1:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a7f6:	eb 06                	jmp    c001a7fe <Net::crc32Calc(unsigned char*, int)+0x77>
c001a7f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7fc:	d1 e8                	shr    eax,1
c001a7fe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a802:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a806:	eb d3                	jmp    c001a7db <Net::crc32Calc(unsigned char*, int)+0x54>
c001a808:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a80c:	eb a8                	jmp    c001a7b6 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a80e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a812:	f7 d0                	not    eax
c001a814:	83 c4 10             	add    esp,0x10
c001a817:	c3                   	ret    

c001a818 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a818:	57                   	push   edi
c001a819:	56                   	push   esi
c001a81a:	53                   	push   ebx
c001a81b:	83 ec 60             	sub    esp,0x60
c001a81e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a825:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a829:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001a831:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001a836:	7f 1a                	jg     c001a852 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001a838:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a83f:	8d 50 01             	lea    edx,[eax+0x1]
c001a842:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a849:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a84c:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001a850:	eb df                	jmp    c001a831 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001a852:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a859:	8d 50 01             	lea    edx,[eax+0x1]
c001a85c:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a863:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a866:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a86d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a871:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001a875:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a879:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001a881:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a885:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a889:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a88d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a891:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a895:	89 c6                	mov    esi,eax
c001a897:	89 d7                	mov    edi,edx
c001a899:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a89b:	89 c8                	mov    eax,ecx
c001a89d:	89 fa                	mov    edx,edi
c001a89f:	89 f3                	mov    ebx,esi
c001a8a1:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a8a5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a8a9:	89 04 24             	mov    DWORD PTR [esp],eax
c001a8ac:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a8b4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a8bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a8bf:	8d 44 24 78          	lea    eax,[esp+0x78]
c001a8c3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a8c7:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a8cf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a8d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a8d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a8db:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a8df:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a8e3:	89 c6                	mov    esi,eax
c001a8e5:	89 d7                	mov    edi,edx
c001a8e7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a8e9:	89 c8                	mov    eax,ecx
c001a8eb:	89 fa                	mov    edx,edi
c001a8ed:	89 f3                	mov    ebx,esi
c001a8ef:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a8f3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a8f7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a8fb:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a903:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a90a:	0f b7 c0             	movzx  eax,ax
c001a90d:	c1 f8 08             	sar    eax,0x8
c001a910:	89 c1                	mov    ecx,eax
c001a912:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a919:	8d 50 01             	lea    edx,[eax+0x1]
c001a91c:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a923:	88 ca                	mov    dl,cl
c001a925:	88 10                	mov    BYTE PTR [eax],dl
c001a927:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a92e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a935:	8d 48 01             	lea    ecx,[eax+0x1]
c001a938:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001a93f:	88 10                	mov    BYTE PTR [eax],dl
c001a941:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a945:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001a949:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001a950:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001a954:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001a958:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001a95c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a960:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a964:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a968:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a96c:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a970:	89 c6                	mov    esi,eax
c001a972:	89 d7                	mov    edi,edx
c001a974:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a976:	89 c8                	mov    eax,ecx
c001a978:	89 fa                	mov    edx,edi
c001a97a:	89 f3                	mov    ebx,esi
c001a97c:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a980:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a984:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a988:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a98c:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001a993:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a99a:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001a99e:	50                   	push   eax
c001a99f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a9a3:	e8 df fd ff ff       	call   c001a787 <Net::crc32Calc(unsigned char*, int)>
c001a9a8:	83 c4 08             	add    esp,0x8
c001a9ab:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a9af:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a9b3:	c1 e8 18             	shr    eax,0x18
c001a9b6:	89 c1                	mov    ecx,eax
c001a9b8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a9bf:	8d 50 01             	lea    edx,[eax+0x1]
c001a9c2:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a9c9:	88 ca                	mov    dl,cl
c001a9cb:	88 10                	mov    BYTE PTR [eax],dl
c001a9cd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a9d1:	c1 e8 10             	shr    eax,0x10
c001a9d4:	89 c1                	mov    ecx,eax
c001a9d6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a9dd:	8d 50 01             	lea    edx,[eax+0x1]
c001a9e0:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a9e7:	88 ca                	mov    dl,cl
c001a9e9:	88 10                	mov    BYTE PTR [eax],dl
c001a9eb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a9ef:	c1 e8 08             	shr    eax,0x8
c001a9f2:	89 c1                	mov    ecx,eax
c001a9f4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a9fb:	8d 50 01             	lea    edx,[eax+0x1]
c001a9fe:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001aa05:	88 ca                	mov    dl,cl
c001aa07:	88 10                	mov    BYTE PTR [eax],dl
c001aa09:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001aa10:	8d 50 01             	lea    edx,[eax+0x1]
c001aa13:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001aa1a:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001aa1e:	88 10                	mov    BYTE PTR [eax],dl
c001aa20:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001aa24:	83 c4 60             	add    esp,0x60
c001aa27:	5b                   	pop    ebx
c001aa28:	5e                   	pop    esi
c001aa29:	5f                   	pop    edi
c001aa2a:	c3                   	ret    

c001aa2b <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001aa2b:	57                   	push   edi
c001aa2c:	56                   	push   esi
c001aa2d:	53                   	push   ebx
c001aa2e:	83 ec 70             	sub    esp,0x70
c001aa31:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aa38:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001aa3c:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001aa44:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001aa4b:	83 c0 0e             	add    eax,0xe
c001aa4e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001aa52:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aa59:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001aa5d:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001aa65:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aa69:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001aa6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aa71:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001aa75:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001aa79:	89 c6                	mov    esi,eax
c001aa7b:	89 d7                	mov    edi,edx
c001aa7d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aa7f:	89 c8                	mov    eax,ecx
c001aa81:	89 fa                	mov    edx,edi
c001aa83:	89 f3                	mov    ebx,esi
c001aa85:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001aa89:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001aa8d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aa91:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001aa99:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001aaa0:	83 c0 08             	add    eax,0x8
c001aaa3:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001aaa7:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aaae:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001aab2:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001aaba:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001aabe:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001aac2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001aac6:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001aaca:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001aace:	89 c6                	mov    esi,eax
c001aad0:	89 d7                	mov    edi,edx
c001aad2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aad4:	89 c8                	mov    eax,ecx
c001aad6:	89 fa                	mov    edx,edi
c001aad8:	89 f3                	mov    ebx,esi
c001aada:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001aade:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001aae2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001aae6:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001aaee:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aaf5:	8d 50 01             	lea    edx,[eax+0x1]
c001aaf8:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001aaff:	8a 00                	mov    al,BYTE PTR [eax]
c001ab01:	0f b6 c0             	movzx  eax,al
c001ab04:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001ab09:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ab10:	8d 50 01             	lea    edx,[eax+0x1]
c001ab13:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ab1a:	8a 00                	mov    al,BYTE PTR [eax]
c001ab1c:	0f b6 c0             	movzx  eax,al
c001ab1f:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001ab24:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001ab29:	c1 e0 08             	shl    eax,0x8
c001ab2c:	89 c2                	mov    edx,eax
c001ab2e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ab32:	09 d0                	or     eax,edx
c001ab34:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001ab3b:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001ab3f:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001ab47:	75 46                	jne    c001ab8f <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001ab49:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ab50:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ab53:	66 3d dc 05          	cmp    ax,0x5dc
c001ab57:	77 16                	ja     c001ab6f <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001ab59:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ab60:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ab63:	0f b7 c0             	movzx  eax,ax
c001ab66:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001ab6d:	eb 20                	jmp    c001ab8f <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001ab6f:	83 ec 0c             	sub    esp,0xc
c001ab72:	68 d8 c6 02 c0       	push   0xc002c6d8
c001ab77:	e8 ef 7d ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001ab7c:	83 c4 10             	add    esp,0x10
c001ab7f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ab86:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001ab8a:	e9 17 01 00 00       	jmp    c001aca6 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001ab8f:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ab96:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001ab9d:	8b 12                	mov    edx,DWORD PTR [edx]
c001ab9f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001aba3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001abaa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001abae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001abb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001abb6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001abba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001abbe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001abc2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001abc6:	89 c6                	mov    esi,eax
c001abc8:	89 d7                	mov    edi,edx
c001abca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001abcc:	89 c8                	mov    eax,ecx
c001abce:	89 fa                	mov    edx,edi
c001abd0:	89 f3                	mov    ebx,esi
c001abd2:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001abd6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001abda:	89 04 24             	mov    DWORD PTR [esp],eax
c001abdd:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001abe4:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001abeb:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001abf2:	8d 50 01             	lea    edx,[eax+0x1]
c001abf5:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001abfc:	8a 00                	mov    al,BYTE PTR [eax]
c001abfe:	0f b6 c0             	movzx  eax,al
c001ac01:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001ac05:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ac0c:	8d 50 01             	lea    edx,[eax+0x1]
c001ac0f:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ac16:	8a 00                	mov    al,BYTE PTR [eax]
c001ac18:	0f b6 c0             	movzx  eax,al
c001ac1b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001ac1f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ac26:	8d 50 01             	lea    edx,[eax+0x1]
c001ac29:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ac30:	8a 00                	mov    al,BYTE PTR [eax]
c001ac32:	0f b6 c0             	movzx  eax,al
c001ac35:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001ac39:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ac40:	8d 50 01             	lea    edx,[eax+0x1]
c001ac43:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ac4a:	8a 00                	mov    al,BYTE PTR [eax]
c001ac4c:	0f b6 c0             	movzx  eax,al
c001ac4f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001ac53:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001ac57:	c1 e0 18             	shl    eax,0x18
c001ac5a:	89 c2                	mov    edx,eax
c001ac5c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001ac60:	c1 e0 10             	shl    eax,0x10
c001ac63:	09 c2                	or     edx,eax
c001ac65:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001ac69:	c1 e0 08             	shl    eax,0x8
c001ac6c:	09 d0                	or     eax,edx
c001ac6e:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001ac72:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001ac76:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ac7d:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001ac81:	83 e8 04             	sub    eax,0x4
c001ac84:	83 ec 08             	sub    esp,0x8
c001ac87:	50                   	push   eax
c001ac88:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001ac8c:	e8 f6 fa ff ff       	call   c001a787 <Net::crc32Calc(unsigned char*, int)>
c001ac91:	83 c4 10             	add    esp,0x10
c001ac94:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001ac98:	0f 94 c2             	sete   dl
c001ac9b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001aca2:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001aca5:	90                   	nop
c001aca6:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001acad:	83 c4 70             	add    esp,0x70
c001acb0:	5b                   	pop    ebx
c001acb1:	5e                   	pop    esi
c001acb2:	5f                   	pop    edi
c001acb3:	c2 04 00             	ret    0x4

c001acb6 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001acb6:	55                   	push   ebp
c001acb7:	57                   	push   edi
c001acb8:	56                   	push   esi
c001acb9:	53                   	push   ebx
c001acba:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001acc0:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001acc7:	8a 1e                	mov    bl,BYTE PTR [esi]
c001acc9:	8d 6e 01             	lea    ebp,[esi+0x1]
c001accc:	80 fb 40             	cmp    bl,0x40
c001accf:	75 1b                	jne    c001acec <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001acd1:	8a 16                	mov    dl,BYTE PTR [esi]
c001acd3:	84 d2                	test   dl,dl
c001acd5:	0f 84 f1 00 00 00    	je     c001adcc <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001acdb:	8d 46 01             	lea    eax,[esi+0x1]
c001acde:	80 fa 3a             	cmp    dl,0x3a
c001ace1:	74 04                	je     c001ace7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001ace3:	89 c6                	mov    esi,eax
c001ace5:	eb ea                	jmp    c001acd1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001ace7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001acea:	89 c6                	mov    esi,eax
c001acec:	50                   	push   eax
c001aced:	6a 40                	push   0x40
c001acef:	6a 00                	push   0x0
c001acf1:	8d 44 24 24          	lea    eax,[esp+0x24]
c001acf5:	50                   	push   eax
c001acf6:	e8 55 5a fe ff       	call   c0000750 <memset>
c001acfb:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ad02:	31 c0                	xor    eax,eax
c001ad04:	83 c4 10             	add    esp,0x10
c001ad07:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ad09:	84 c9                	test   cl,cl
c001ad0b:	0f 84 bb 00 00 00    	je     c001adcc <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad11:	3d c7 00 00 00       	cmp    eax,0xc7
c001ad16:	0f 8f b0 00 00 00    	jg     c001adcc <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad1c:	80 f9 0a             	cmp    cl,0xa
c001ad1f:	0f 85 98 00 00 00    	jne    c001adbd <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001ad25:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001ad2a:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001ad2e:	a8 df                	test   al,0xdf
c001ad30:	0f 94 c1             	sete   cl
c001ad33:	3c 23                	cmp    al,0x23
c001ad35:	0f 94 c2             	sete   dl
c001ad38:	08 d1                	or     cl,dl
c001ad3a:	75 4a                	jne    c001ad86 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad3c:	8d 50 f7             	lea    edx,[eax-0x9]
c001ad3f:	80 fa 01             	cmp    dl,0x1
c001ad42:	76 42                	jbe    c001ad86 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad44:	3c 5b                	cmp    al,0x5b
c001ad46:	75 42                	jne    c001ad8a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001ad48:	80 fb 40             	cmp    bl,0x40
c001ad4b:	75 39                	jne    c001ad86 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad4d:	83 ec 0c             	sub    esp,0xc
c001ad50:	8d 54 24 65          	lea    edx,[esp+0x65]
c001ad54:	52                   	push   edx
c001ad55:	e8 12 5a fe ff       	call   c000076c <strlen>
c001ad5a:	83 c4 10             	add    esp,0x10
c001ad5d:	83 f8 3f             	cmp    eax,0x3f
c001ad60:	77 6a                	ja     c001adcc <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad62:	50                   	push   eax
c001ad63:	50                   	push   eax
c001ad64:	8d 54 24 61          	lea    edx,[esp+0x61]
c001ad68:	52                   	push   edx
c001ad69:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ad6d:	52                   	push   edx
c001ad6e:	e8 99 5a fe ff       	call   c000080c <strcpy>
c001ad73:	58                   	pop    eax
c001ad74:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ad78:	52                   	push   edx
c001ad79:	e8 ee 59 fe ff       	call   c000076c <strlen>
c001ad7e:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001ad83:	83 c4 10             	add    esp,0x10
c001ad86:	31 d2                	xor    edx,edx
c001ad88:	eb 3a                	jmp    c001adc4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001ad8a:	80 fb 40             	cmp    bl,0x40
c001ad8d:	74 06                	je     c001ad95 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001ad8f:	8d 44 24 58          	lea    eax,[esp+0x58]
c001ad93:	eb 20                	jmp    c001adb5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001ad95:	50                   	push   eax
c001ad96:	50                   	push   eax
c001ad97:	55                   	push   ebp
c001ad98:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ad9c:	50                   	push   eax
c001ad9d:	e8 f6 5a fe ff       	call   c0000898 <strcmp>
c001ada2:	83 c4 10             	add    esp,0x10
c001ada5:	85 c0                	test   eax,eax
c001ada7:	75 dd                	jne    c001ad86 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ada9:	eb e4                	jmp    c001ad8f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001adab:	8d 50 01             	lea    edx,[eax+0x1]
c001adae:	80 f9 3d             	cmp    cl,0x3d
c001adb1:	74 1d                	je     c001add0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001adb3:	89 d0                	mov    eax,edx
c001adb5:	8a 08                	mov    cl,BYTE PTR [eax]
c001adb7:	84 c9                	test   cl,cl
c001adb9:	75 f0                	jne    c001adab <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001adbb:	eb 0f                	jmp    c001adcc <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001adbd:	8d 50 01             	lea    edx,[eax+0x1]
c001adc0:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001adc4:	47                   	inc    edi
c001adc5:	89 d0                	mov    eax,edx
c001adc7:	e9 3b ff ff ff       	jmp    c001ad07 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001adcc:	31 c0                	xor    eax,eax
c001adce:	eb 33                	jmp    c001ae03 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001add0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001add4:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001add7:	50                   	push   eax
c001add8:	50                   	push   eax
c001add9:	8d 44 24 60          	lea    eax,[esp+0x60]
c001addd:	50                   	push   eax
c001adde:	56                   	push   esi
c001addf:	e8 b4 5a fe ff       	call   c0000898 <strcmp>
c001ade4:	83 c4 10             	add    esp,0x10
c001ade7:	85 c0                	test   eax,eax
c001ade9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001aded:	75 97                	jne    c001ad86 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001adef:	51                   	push   ecx
c001adf0:	51                   	push   ecx
c001adf1:	52                   	push   edx
c001adf2:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001adf9:	e8 0e 5a fe ff       	call   c000080c <strcpy>
c001adfe:	83 c4 10             	add    esp,0x10
c001ae01:	b0 01                	mov    al,0x1
c001ae03:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ae09:	5b                   	pop    ebx
c001ae0a:	5e                   	pop    esi
c001ae0b:	5f                   	pop    edi
c001ae0c:	5d                   	pop    ebp
c001ae0d:	c3                   	ret    

c001ae0e <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001ae0e:	57                   	push   edi
c001ae0f:	56                   	push   esi
c001ae10:	53                   	push   ebx
c001ae11:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ae17:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001ae1e:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001ae25:	53                   	push   ebx
c001ae26:	e8 41 59 fe ff       	call   c000076c <strlen>
c001ae2b:	89 34 24             	mov    DWORD PTR [esp],esi
c001ae2e:	89 c7                	mov    edi,eax
c001ae30:	e8 37 59 fe ff       	call   c000076c <strlen>
c001ae35:	83 c4 10             	add    esp,0x10
c001ae38:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001ae3c:	3d ff 00 00 00       	cmp    eax,0xff
c001ae41:	0f 87 d3 00 00 00    	ja     c001af1a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ae47:	57                   	push   edi
c001ae48:	57                   	push   edi
c001ae49:	56                   	push   esi
c001ae4a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001ae4e:	56                   	push   esi
c001ae4f:	e8 b8 59 fe ff       	call   c000080c <strcpy>
c001ae54:	58                   	pop    eax
c001ae55:	5a                   	pop    edx
c001ae56:	68 2d cc 02 c0       	push   0xc002cc2d
c001ae5b:	56                   	push   esi
c001ae5c:	e8 eb 5a fe ff       	call   c000094c <strcat>
c001ae61:	59                   	pop    ecx
c001ae62:	5f                   	pop    edi
c001ae63:	53                   	push   ebx
c001ae64:	56                   	push   esi
c001ae65:	e8 e2 5a fe ff       	call   c000094c <strcat>
c001ae6a:	58                   	pop    eax
c001ae6b:	5a                   	pop    edx
c001ae6c:	68 24 c7 02 c0       	push   0xc002c724
c001ae71:	56                   	push   esi
c001ae72:	e8 d5 5a fe ff       	call   c000094c <strcat>
c001ae77:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ae7e:	e8 09 4a ff ff       	call   c000f88c <malloc>
c001ae83:	83 c4 0c             	add    esp,0xc
c001ae86:	89 c3                	mov    ebx,eax
c001ae88:	ff 35 10 26 03 c0    	push   DWORD PTR ds:0xc0032610
c001ae8e:	56                   	push   esi
c001ae8f:	50                   	push   eax
c001ae90:	e8 35 80 ff ff       	call   c0012eca <File::File(char const*, Process*)>
c001ae95:	83 c4 10             	add    esp,0x10
c001ae98:	85 db                	test   ebx,ebx
c001ae9a:	74 7e                	je     c001af1a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ae9c:	51                   	push   ecx
c001ae9d:	51                   	push   ecx
c001ae9e:	6a 01                	push   0x1
c001aea0:	53                   	push   ebx
c001aea1:	e8 88 80 ff ff       	call   c0012f2e <File::open(FileOpenMode)>
c001aea6:	83 c4 10             	add    esp,0x10
c001aea9:	85 c0                	test   eax,eax
c001aeab:	74 08                	je     c001aeb5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001aead:	83 ec 0c             	sub    esp,0xc
c001aeb0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aeb2:	53                   	push   ebx
c001aeb3:	eb 5f                	jmp    c001af14 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001aeb5:	52                   	push   edx
c001aeb6:	8d 44 24 17          	lea    eax,[esp+0x17]
c001aeba:	50                   	push   eax
c001aebb:	8d 44 24 20          	lea    eax,[esp+0x20]
c001aebf:	50                   	push   eax
c001aec0:	53                   	push   ebx
c001aec1:	e8 14 83 ff ff       	call   c00131da <File::stat(unsigned long long*, bool*)>
c001aec6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001aeca:	83 c4 10             	add    esp,0x10
c001aecd:	89 c1                	mov    ecx,eax
c001aecf:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001aed3:	74 31                	je     c001af06 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001aed5:	83 ec 0c             	sub    esp,0xc
c001aed8:	50                   	push   eax
c001aed9:	e8 ae 49 ff ff       	call   c000f88c <malloc>
c001aede:	89 c6                	mov    esi,eax
c001aee0:	58                   	pop    eax
c001aee1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aee3:	8d 54 24 20          	lea    edx,[esp+0x20]
c001aee7:	52                   	push   edx
c001aee8:	56                   	push   esi
c001aee9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001aeed:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001aef1:	53                   	push   ebx
c001aef2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001aef5:	83 c4 20             	add    esp,0x20
c001aef8:	85 c0                	test   eax,eax
c001aefa:	75 0a                	jne    c001af06 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001aefc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af00:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001af04:	74 18                	je     c001af1e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001af06:	83 ec 0c             	sub    esp,0xc
c001af09:	53                   	push   ebx
c001af0a:	e8 7d 80 ff ff       	call   c0012f8c <File::close()>
c001af0f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af11:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af14:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001af17:	83 c4 10             	add    esp,0x10
c001af1a:	31 c0                	xor    eax,eax
c001af1c:	eb 3b                	jmp    c001af59 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001af1e:	83 ec 0c             	sub    esp,0xc
c001af21:	53                   	push   ebx
c001af22:	e8 65 80 ff ff       	call   c0012f8c <File::close()>
c001af27:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af2c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001af2f:	83 c4 0c             	add    esp,0xc
c001af32:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001af39:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001af40:	56                   	push   esi
c001af41:	e8 70 fd ff ff       	call   c001acb6 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001af46:	89 34 24             	mov    DWORD PTR [esp],esi
c001af49:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001af4d:	e8 4a 49 ff ff       	call   c000f89c <free>
c001af52:	83 c4 10             	add    esp,0x10
c001af55:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001af59:	81 c4 20 01 00 00    	add    esp,0x120
c001af5f:	5b                   	pop    ebx
c001af60:	5e                   	pop    esi
c001af61:	5f                   	pop    edi
c001af62:	c3                   	ret    

c001af63 <Reg::getLine(char*, char*, char*)>:
c001af63:	57                   	push   edi
c001af64:	56                   	push   esi
c001af65:	53                   	push   ebx
c001af66:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001af6a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001af6e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001af72:	57                   	push   edi
c001af73:	56                   	push   esi
c001af74:	53                   	push   ebx
c001af75:	68 29 c7 02 c0       	push   0xc002c729
c001af7a:	e8 8f fe ff ff       	call   c001ae0e <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001af7f:	83 c4 10             	add    esp,0x10
c001af82:	84 c0                	test   al,al
c001af84:	75 10                	jne    c001af96 <Reg::getLine(char*, char*, char*)+0x33>
c001af86:	57                   	push   edi
c001af87:	56                   	push   esi
c001af88:	53                   	push   ebx
c001af89:	68 4e c7 02 c0       	push   0xc002c74e
c001af8e:	e8 7b fe ff ff       	call   c001ae0e <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001af93:	83 c4 10             	add    esp,0x10
c001af96:	5b                   	pop    ebx
c001af97:	5e                   	pop    esi
c001af98:	5f                   	pop    edi
c001af99:	c3                   	ret    

c001af9a <Reg::readInt(char*, char*, int*)>:
c001af9a:	55                   	push   ebp
c001af9b:	57                   	push   edi
c001af9c:	56                   	push   esi
c001af9d:	53                   	push   ebx
c001af9e:	81 ec f0 00 00 00    	sub    esp,0xf0
c001afa4:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001afa8:	57                   	push   edi
c001afa9:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001afb0:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001afb7:	e8 a7 ff ff ff       	call   c001af63 <Reg::getLine(char*, char*, char*)>
c001afbc:	83 c4 10             	add    esp,0x10
c001afbf:	84 c0                	test   al,al
c001afc1:	0f 84 b3 00 00 00    	je     c001b07a <Reg::readInt(char*, char*, int*)+0xe0>
c001afc7:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001afcb:	80 fa 2b             	cmp    dl,0x2b
c001afce:	74 0c                	je     c001afdc <Reg::readInt(char*, char*, int*)+0x42>
c001afd0:	80 fa 2d             	cmp    dl,0x2d
c001afd3:	75 0e                	jne    c001afe3 <Reg::readInt(char*, char*, int*)+0x49>
c001afd5:	ba 01 00 00 00       	mov    edx,0x1
c001afda:	eb 0b                	jmp    c001afe7 <Reg::readInt(char*, char*, int*)+0x4d>
c001afdc:	ba 01 00 00 00       	mov    edx,0x1
c001afe1:	eb 02                	jmp    c001afe5 <Reg::readInt(char*, char*, int*)+0x4b>
c001afe3:	31 d2                	xor    edx,edx
c001afe5:	31 c0                	xor    eax,eax
c001afe7:	be 0a 00 00 00       	mov    esi,0xa
c001afec:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001aff1:	75 20                	jne    c001b013 <Reg::readInt(char*, char*, int*)+0x79>
c001aff3:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001aff7:	80 f9 78             	cmp    cl,0x78
c001affa:	75 0a                	jne    c001b006 <Reg::readInt(char*, char*, int*)+0x6c>
c001affc:	83 c2 02             	add    edx,0x2
c001afff:	be 10 00 00 00       	mov    esi,0x10
c001b004:	eb 0d                	jmp    c001b013 <Reg::readInt(char*, char*, int*)+0x79>
c001b006:	80 f9 62             	cmp    cl,0x62
c001b009:	75 08                	jne    c001b013 <Reg::readInt(char*, char*, int*)+0x79>
c001b00b:	83 c2 02             	add    edx,0x2
c001b00e:	be 02 00 00 00       	mov    esi,0x2
c001b013:	01 d7                	add    edi,edx
c001b015:	31 d2                	xor    edx,edx
c001b017:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b019:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b01d:	80 fb 0d             	cmp    bl,0xd
c001b020:	0f 94 c3             	sete   bl
c001b023:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b028:	0f 94 c1             	sete   cl
c001b02b:	08 cb                	or     bl,cl
c001b02d:	75 3a                	jne    c001b069 <Reg::readInt(char*, char*, int*)+0xcf>
c001b02f:	0f af d6             	imul   edx,esi
c001b032:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b037:	83 fe 10             	cmp    esi,0x10
c001b03a:	75 26                	jne    c001b062 <Reg::readInt(char*, char*, int*)+0xc8>
c001b03c:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b040:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b043:	89 e9                	mov    ecx,ebp
c001b045:	80 f9 05             	cmp    cl,0x5
c001b048:	77 06                	ja     c001b050 <Reg::readInt(char*, char*, int*)+0xb6>
c001b04a:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b04e:	eb 16                	jmp    c001b066 <Reg::readInt(char*, char*, int*)+0xcc>
c001b050:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b054:	83 e9 61             	sub    ecx,0x61
c001b057:	80 f9 05             	cmp    cl,0x5
c001b05a:	77 06                	ja     c001b062 <Reg::readInt(char*, char*, int*)+0xc8>
c001b05c:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b060:	eb 04                	jmp    c001b066 <Reg::readInt(char*, char*, int*)+0xcc>
c001b062:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b066:	47                   	inc    edi
c001b067:	eb ae                	jmp    c001b017 <Reg::readInt(char*, char*, int*)+0x7d>
c001b069:	84 c0                	test   al,al
c001b06b:	74 02                	je     c001b06f <Reg::readInt(char*, char*, int*)+0xd5>
c001b06d:	f7 da                	neg    edx
c001b06f:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b076:	89 10                	mov    DWORD PTR [eax],edx
c001b078:	88 d8                	mov    al,bl
c001b07a:	81 c4 ec 00 00 00    	add    esp,0xec
c001b080:	5b                   	pop    ebx
c001b081:	5e                   	pop    esi
c001b082:	5f                   	pop    edi
c001b083:	5d                   	pop    ebp
c001b084:	c3                   	ret    

c001b085 <Reg::readString(char*, char*, char*, int)>:
c001b085:	57                   	push   edi
c001b086:	56                   	push   esi
c001b087:	53                   	push   ebx
c001b088:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b08e:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b095:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b099:	57                   	push   edi
c001b09a:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b0a1:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b0a8:	e8 b6 fe ff ff       	call   c001af63 <Reg::getLine(char*, char*, char*)>
c001b0ad:	83 c4 10             	add    esp,0x10
c001b0b0:	89 c6                	mov    esi,eax
c001b0b2:	84 c0                	test   al,al
c001b0b4:	74 44                	je     c001b0fa <Reg::readString(char*, char*, char*, int)+0x75>
c001b0b6:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b0bd:	31 c0                	xor    eax,eax
c001b0bf:	4a                   	dec    edx
c001b0c0:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b0c3:	84 c9                	test   cl,cl
c001b0c5:	74 0f                	je     c001b0d6 <Reg::readString(char*, char*, char*, int)+0x51>
c001b0c7:	39 c2                	cmp    edx,eax
c001b0c9:	7e 0b                	jle    c001b0d6 <Reg::readString(char*, char*, char*, int)+0x51>
c001b0cb:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b0ce:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b0d3:	40                   	inc    eax
c001b0d4:	eb ea                	jmp    c001b0c0 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b0d6:	83 ec 0c             	sub    esp,0xc
c001b0d9:	53                   	push   ebx
c001b0da:	e8 8d 56 fe ff       	call   c000076c <strlen>
c001b0df:	83 c4 10             	add    esp,0x10
c001b0e2:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b0e7:	75 11                	jne    c001b0fa <Reg::readString(char*, char*, char*, int)+0x75>
c001b0e9:	83 ec 0c             	sub    esp,0xc
c001b0ec:	53                   	push   ebx
c001b0ed:	e8 7a 56 fe ff       	call   c000076c <strlen>
c001b0f2:	83 c4 10             	add    esp,0x10
c001b0f5:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b0fa:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b100:	89 f0                	mov    eax,esi
c001b102:	5b                   	pop    ebx
c001b103:	5e                   	pop    esi
c001b104:	5f                   	pop    edi
c001b105:	c3                   	ret    

c001b106 <Reg::readBool(char*, char*, bool*)>:
c001b106:	83 ec 20             	sub    esp,0x20
c001b109:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b10d:	50                   	push   eax
c001b10e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b112:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b116:	e8 7f fe ff ff       	call   c001af9a <Reg::readInt(char*, char*, int*)>
c001b11b:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b120:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b124:	0f 95 02             	setne  BYTE PTR [edx]
c001b127:	83 c4 2c             	add    esp,0x2c
c001b12a:	c3                   	ret    

c001b12b <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b12b:	53                   	push   ebx
c001b12c:	83 ec 1c             	sub    esp,0x1c
c001b12f:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b133:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b137:	50                   	push   eax
c001b138:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b13c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b140:	e8 c1 ff ff ff       	call   c001b106 <Reg::readBool(char*, char*, bool*)>
c001b145:	83 c4 10             	add    esp,0x10
c001b148:	84 c0                	test   al,al
c001b14a:	74 04                	je     c001b150 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b14c:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b150:	88 d8                	mov    al,bl
c001b152:	83 c4 18             	add    esp,0x18
c001b155:	5b                   	pop    ebx
c001b156:	c3                   	ret    

c001b157 <Reg::readIntWithDefault(char*, char*, int)>:
c001b157:	53                   	push   ebx
c001b158:	83 ec 1c             	sub    esp,0x1c
c001b15b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b15f:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b163:	50                   	push   eax
c001b164:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b168:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b16c:	e8 29 fe ff ff       	call   c001af9a <Reg::readInt(char*, char*, int*)>
c001b171:	83 c4 10             	add    esp,0x10
c001b174:	84 c0                	test   al,al
c001b176:	74 04                	je     c001b17c <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b178:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b17c:	89 d8                	mov    eax,ebx
c001b17e:	83 c4 18             	add    esp,0x18
c001b181:	5b                   	pop    ebx
c001b182:	c3                   	ret    

c001b183 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b183:	57                   	push   edi
c001b184:	56                   	push   esi
c001b185:	56                   	push   esi
c001b186:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b18a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b18e:	56                   	push   esi
c001b18f:	57                   	push   edi
c001b190:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b194:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b198:	e8 e8 fe ff ff       	call   c001b085 <Reg::readString(char*, char*, char*, int)>
c001b19d:	83 c4 10             	add    esp,0x10
c001b1a0:	84 c0                	test   al,al
c001b1a2:	75 1a                	jne    c001b1be <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001b1a4:	51                   	push   ecx
c001b1a5:	56                   	push   esi
c001b1a6:	6a 00                	push   0x0
c001b1a8:	57                   	push   edi
c001b1a9:	e8 a2 55 fe ff       	call   c0000750 <memset>
c001b1ae:	8d 4e ff             	lea    ecx,[esi-0x1]
c001b1b1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b1b5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b1b7:	83 c4 10             	add    esp,0x10
c001b1ba:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b1be:	89 f8                	mov    eax,edi
c001b1c0:	5a                   	pop    edx
c001b1c1:	5e                   	pop    esi
c001b1c2:	5f                   	pop    edi
c001b1c3:	c3                   	ret    

c001b1c4 <Sys::eject(regs*)>:
c001b1c4:	83 ec 0c             	sub    esp,0xc
c001b1c7:	83 ca ff             	or     edx,0xffffffff
c001b1ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1ce:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b1d1:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b1d6:	83 e9 41             	sub    ecx,0x41
c001b1d9:	83 f9 19             	cmp    ecx,0x19
c001b1dc:	77 18                	ja     c001b1f6 <Sys::eject(regs*)+0x32>
c001b1de:	8b 0c 8d c0 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0940]
c001b1e5:	85 c9                	test   ecx,ecx
c001b1e7:	74 0d                	je     c001b1f6 <Sys::eject(regs*)+0x32>
c001b1e9:	83 ec 0c             	sub    esp,0xc
c001b1ec:	51                   	push   ecx
c001b1ed:	e8 8c b0 ff ff       	call   c001627e <LogicalDisk::eject()>
c001b1f2:	83 c4 10             	add    esp,0x10
c001b1f5:	99                   	cdq    
c001b1f6:	83 c4 0c             	add    esp,0xc
c001b1f9:	c3                   	ret    

c001b1fa <Sys::exit(regs*)>:
c001b1fa:	83 ec 18             	sub    esp,0x18
c001b1fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b201:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b204:	e8 7e 38 00 00       	call   c001ea87 <terminateTask(int)>
c001b209:	83 c8 ff             	or     eax,0xffffffff
c001b20c:	83 c4 1c             	add    esp,0x1c
c001b20f:	89 c2                	mov    edx,eax
c001b211:	c3                   	ret    

c001b212 <Sys::getCwd(regs*)>:
c001b212:	83 ec 10             	sub    esp,0x10
c001b215:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b219:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b21c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b21f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b224:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b227:	e8 a0 7a ff ff       	call   c0012ccc <Fs::getcwd(Process*, char*, int)>
c001b22c:	83 c4 1c             	add    esp,0x1c
c001b22f:	99                   	cdq    
c001b230:	c3                   	ret    

c001b231 <Sys::getPID(regs*)>:
c001b231:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b236:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b239:	8b 00                	mov    eax,DWORD PTR [eax]
c001b23b:	99                   	cdq    
c001b23c:	c3                   	ret    

c001b23d <Sys::getRAMData(regs*)>:
c001b23d:	8b 0d 14 f1 02 c0    	mov    ecx,DWORD PTR ds:0xc002f114
c001b243:	6b 05 10 f1 02 c0 64 	imul   eax,DWORD PTR ds:0xc002f110,0x64
c001b24a:	99                   	cdq    
c001b24b:	f7 f9                	idiv   ecx
c001b24d:	c1 e0 18             	shl    eax,0x18
c001b250:	09 c8                	or     eax,ecx
c001b252:	99                   	cdq    
c001b253:	c3                   	ret    

c001b254 <Sys::getVGAPtr(regs*)>:
c001b254:	55                   	push   ebp
c001b255:	57                   	push   edi
c001b256:	56                   	push   esi
c001b257:	53                   	push   ebx
c001b258:	83 ec 18             	sub    esp,0x18
c001b25b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b25f:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001b262:	e8 02 33 00 00       	call   c001e569 <Thr::processFromPID(int)>
c001b267:	83 c4 10             	add    esp,0x10
c001b26a:	89 c1                	mov    ecx,eax
c001b26c:	b8 01 00 00 00       	mov    eax,0x1
c001b271:	85 c9                	test   ecx,ecx
c001b273:	74 59                	je     c001b2ce <Sys::getVGAPtr(regs*)+0x7a>
c001b275:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001b27b:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001b27f:	74 0c                	je     c001b28d <Sys::getVGAPtr(regs*)+0x39>
c001b281:	83 ec 0c             	sub    esp,0xc
c001b284:	53                   	push   ebx
c001b285:	e8 04 55 ff ff       	call   c001078e <setActiveTerminal(VgaText*)>
c001b28a:	83 c4 10             	add    esp,0x10
c001b28d:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001b290:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001b293:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001b298:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b29a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001b29d:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b2a0:	81 c3 82 00 00 00    	add    ebx,0x82
c001b2a6:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001b2ac:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b2af:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001b2b2:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001b2b8:	50                   	push   eax
c001b2b9:	50                   	push   eax
c001b2ba:	53                   	push   ebx
c001b2bb:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b2be:	05 a8 0f 00 00       	add    eax,0xfa8
c001b2c3:	50                   	push   eax
c001b2c4:	e8 43 55 fe ff       	call   c000080c <strcpy>
c001b2c9:	83 c4 10             	add    esp,0x10
c001b2cc:	31 c0                	xor    eax,eax
c001b2ce:	83 c4 0c             	add    esp,0xc
c001b2d1:	31 d2                	xor    edx,edx
c001b2d3:	5b                   	pop    ebx
c001b2d4:	5e                   	pop    esi
c001b2d5:	5f                   	pop    edi
c001b2d6:	5d                   	pop    ebp
c001b2d7:	c3                   	ret    

c001b2d8 <Sys::loadDLL(regs*)>:
c001b2d8:	56                   	push   esi
c001b2d9:	53                   	push   ebx
c001b2da:	31 d2                	xor    edx,edx
c001b2dc:	51                   	push   ecx
c001b2dd:	b8 01 00 00 00       	mov    eax,0x1
c001b2e2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b2e6:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b2ea:	0f 84 8c 00 00 00    	je     c001b37c <Sys::loadDLL(regs*)+0xa4>
c001b2f0:	83 ec 0c             	sub    esp,0xc
c001b2f3:	68 14 01 00 00       	push   0x114
c001b2f8:	e8 8f 45 ff ff       	call   c000f88c <malloc>
c001b2fd:	83 c4 0c             	add    esp,0xc
c001b300:	89 c3                	mov    ebx,eax
c001b302:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b307:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b30a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b30d:	53                   	push   ebx
c001b30e:	e8 b7 7b ff ff       	call   c0012eca <File::File(char const*, Process*)>
c001b313:	83 c4 10             	add    esp,0x10
c001b316:	31 d2                	xor    edx,edx
c001b318:	b8 02 00 00 00       	mov    eax,0x2
c001b31d:	85 db                	test   ebx,ebx
c001b31f:	74 5b                	je     c001b37c <Sys::loadDLL(regs*)+0xa4>
c001b321:	83 ec 0c             	sub    esp,0xc
c001b324:	53                   	push   ebx
c001b325:	e8 72 7e ff ff       	call   c001319c <File::exists()>
c001b32a:	83 c4 10             	add    esp,0x10
c001b32d:	84 c0                	test   al,al
c001b32f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b331:	75 11                	jne    c001b344 <Sys::loadDLL(regs*)+0x6c>
c001b333:	83 ec 0c             	sub    esp,0xc
c001b336:	53                   	push   ebx
c001b337:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b33a:	83 c4 10             	add    esp,0x10
c001b33d:	b8 03 00 00 00       	mov    eax,0x3
c001b342:	eb 36                	jmp    c001b37a <Sys::loadDLL(regs*)+0xa2>
c001b344:	83 ec 0c             	sub    esp,0xc
c001b347:	53                   	push   ebx
c001b348:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b34b:	58                   	pop    eax
c001b34c:	5a                   	pop    edx
c001b34d:	6a 00                	push   0x0
c001b34f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b352:	e8 1e 24 00 00       	call   c001d775 <Thr::loadDLL(char const*, bool)>
c001b357:	83 c4 10             	add    esp,0x10
c001b35a:	89 c1                	mov    ecx,eax
c001b35c:	31 d2                	xor    edx,edx
c001b35e:	b8 04 00 00 00       	mov    eax,0x4
c001b363:	85 c9                	test   ecx,ecx
c001b365:	74 15                	je     c001b37c <Sys::loadDLL(regs*)+0xa4>
c001b367:	53                   	push   ebx
c001b368:	53                   	push   ebx
c001b369:	ff 35 c8 f0 02 c0    	push   DWORD PTR ds:0xc002f0c8
c001b36f:	51                   	push   ecx
c001b370:	e8 2b 26 00 00       	call   c001d9a0 <Thr::executeDLL(unsigned long, void*)>
c001b375:	83 c4 10             	add    esp,0x10
c001b378:	31 c0                	xor    eax,eax
c001b37a:	31 d2                	xor    edx,edx
c001b37c:	59                   	pop    ecx
c001b37d:	5b                   	pop    ebx
c001b37e:	5e                   	pop    esi
c001b37f:	c3                   	ret    

c001b380 <Sys::read(regs*)>:
c001b380:	57                   	push   edi
c001b381:	56                   	push   esi
c001b382:	53                   	push   ebx
c001b383:	83 ec 10             	sub    esp,0x10
c001b386:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b38a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b38d:	83 f8 02             	cmp    eax,0x2
c001b390:	77 10                	ja     c001b3a2 <Sys::read(regs*)+0x22>
c001b392:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b397:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b39a:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b3a0:	eb 0e                	jmp    c001b3b0 <Sys::read(regs*)+0x30>
c001b3a2:	83 ec 0c             	sub    esp,0xc
c001b3a5:	50                   	push   eax
c001b3a6:	e8 64 60 ff ff       	call   c001140f <getFromFileDescriptor(int)>
c001b3ab:	83 c4 10             	add    esp,0x10
c001b3ae:	89 c1                	mov    ecx,eax
c001b3b0:	83 c8 ff             	or     eax,0xffffffff
c001b3b3:	85 c9                	test   ecx,ecx
c001b3b5:	89 c2                	mov    edx,eax
c001b3b7:	74 28                	je     c001b3e1 <Sys::read(regs*)+0x61>
c001b3b9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b3c1:	31 ff                	xor    edi,edi
c001b3c3:	83 ec 0c             	sub    esp,0xc
c001b3c6:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b3c8:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b3cc:	52                   	push   edx
c001b3cd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b3d0:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b3d3:	57                   	push   edi
c001b3d4:	56                   	push   esi
c001b3d5:	51                   	push   ecx
c001b3d6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b3d9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b3dd:	83 c4 20             	add    esp,0x20
c001b3e0:	99                   	cdq    
c001b3e1:	83 c4 10             	add    esp,0x10
c001b3e4:	5b                   	pop    ebx
c001b3e5:	5e                   	pop    esi
c001b3e6:	5f                   	pop    edi
c001b3e7:	c3                   	ret    

c001b3e8 <Sys::sbrk(regs*)>:
c001b3e8:	56                   	push   esi
c001b3e9:	53                   	push   ebx
c001b3ea:	50                   	push   eax
c001b3eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3f0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b3f4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b3f7:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b3fa:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b400:	85 db                	test   ebx,ebx
c001b402:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b405:	74 02                	je     c001b409 <Sys::sbrk(regs*)+0x21>
c001b407:	79 06                	jns    c001b40f <Sys::sbrk(regs*)+0x27>
c001b409:	89 f0                	mov    eax,esi
c001b40b:	31 d2                	xor    edx,edx
c001b40d:	eb 2a                	jmp    c001b439 <Sys::sbrk(regs*)+0x51>
c001b40f:	83 c8 ff             	or     eax,0xffffffff
c001b412:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b418:	89 c2                	mov    edx,eax
c001b41a:	77 1d                	ja     c001b439 <Sys::sbrk(regs*)+0x51>
c001b41c:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b422:	50                   	push   eax
c001b423:	c1 ea 0c             	shr    edx,0xc
c001b426:	68 07 0c 00 00       	push   0xc07
c001b42b:	52                   	push   edx
c001b42c:	51                   	push   ecx
c001b42d:	e8 6c 6a ff ff       	call   c0011e9e <VAS::allocatePages(int, int)>
c001b432:	89 f0                	mov    eax,esi
c001b434:	31 d2                	xor    edx,edx
c001b436:	83 c4 10             	add    esp,0x10
c001b439:	59                   	pop    ecx
c001b43a:	5b                   	pop    ebx
c001b43b:	5e                   	pop    esi
c001b43c:	c3                   	ret    

c001b43d <Sys::setCwd(regs*)>:
c001b43d:	83 ec 14             	sub    esp,0x14
c001b440:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b444:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b447:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b44c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b44f:	e8 e7 7d ff ff       	call   c001323b <Fs::setcwd(Process*, char*)>
c001b454:	83 c4 1c             	add    esp,0x1c
c001b457:	99                   	cdq    
c001b458:	c3                   	ret    

c001b459 <Sys::setTime(regs*)>:
c001b459:	55                   	push   ebp
c001b45a:	31 d2                	xor    edx,edx
c001b45c:	57                   	push   edi
c001b45d:	bf 18 00 00 00       	mov    edi,0x18
c001b462:	56                   	push   esi
c001b463:	53                   	push   ebx
c001b464:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b469:	83 ec 30             	sub    esp,0x30
c001b46c:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b470:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b473:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b476:	f7 f3                	div    ebx
c001b478:	89 d6                	mov    esi,edx
c001b47a:	31 d2                	xor    edx,edx
c001b47c:	f7 f3                	div    ebx
c001b47e:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b481:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b485:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b48a:	31 d2                	xor    edx,edx
c001b48c:	f7 f3                	div    ebx
c001b48e:	31 d2                	xor    edx,edx
c001b490:	bb 0c 00 00 00       	mov    ebx,0xc
c001b495:	f7 f7                	div    edi
c001b497:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b49a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b49e:	0f b7 cd             	movzx  ecx,bp
c001b4a1:	56                   	push   esi
c001b4a2:	89 c7                	mov    edi,eax
c001b4a4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b4a8:	c1 e6 10             	shl    esi,0x10
c001b4ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b4af:	83 e7 1f             	and    edi,0x1f
c001b4b2:	51                   	push   ecx
c001b4b3:	47                   	inc    edi
c001b4b4:	c1 e8 05             	shr    eax,0x5
c001b4b7:	31 d2                	xor    edx,edx
c001b4b9:	f7 f3                	div    ebx
c001b4bb:	31 db                	xor    ebx,ebx
c001b4bd:	52                   	push   edx
c001b4be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b4c2:	57                   	push   edi
c001b4c3:	68 69 c7 02 c0       	push   0xc002c769
c001b4c8:	e8 9e 74 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001b4cd:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b4d1:	89 f8                	mov    eax,edi
c001b4d3:	31 c9                	xor    ecx,ecx
c001b4d5:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b4d9:	88 c1                	mov    cl,al
c001b4db:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b4e1:	88 d5                	mov    ch,dl
c001b4e3:	c1 e0 10             	shl    eax,0x10
c001b4e6:	0f b7 d1             	movzx  edx,cx
c001b4e9:	09 c2                	or     edx,eax
c001b4eb:	89 d8                	mov    eax,ebx
c001b4ed:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b4f2:	09 f0                	or     eax,esi
c001b4f4:	89 c3                	mov    ebx,eax
c001b4f6:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b4fa:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b4fe:	83 c4 18             	add    esp,0x18
c001b501:	53                   	push   ebx
c001b502:	52                   	push   edx
c001b503:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b507:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b50b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b50f:	e8 49 84 ff ff       	call   c001395d <datetimeToSeconds(datetime_t)>
c001b514:	83 c4 0c             	add    esp,0xc
c001b517:	52                   	push   edx
c001b518:	50                   	push   eax
c001b519:	56                   	push   esi
c001b51a:	e8 c5 85 ff ff       	call   c0013ae4 <secondsToDatetime(unsigned long long)>
c001b51f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b523:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b527:	51                   	push   ecx
c001b528:	89 d6                	mov    esi,edx
c001b52a:	51                   	push   ecx
c001b52b:	c1 ee 10             	shr    esi,0x10
c001b52e:	89 f3                	mov    ebx,esi
c001b530:	0f b6 f3             	movzx  esi,bl
c001b533:	56                   	push   esi
c001b534:	0f b6 f6             	movzx  esi,dh
c001b537:	0f b6 d2             	movzx  edx,dl
c001b53a:	56                   	push   esi
c001b53b:	52                   	push   edx
c001b53c:	89 c2                	mov    edx,eax
c001b53e:	c1 ea 10             	shr    edx,0x10
c001b541:	52                   	push   edx
c001b542:	0f b6 d4             	movzx  edx,ah
c001b545:	0f b6 c0             	movzx  eax,al
c001b548:	52                   	push   edx
c001b549:	50                   	push   eax
c001b54a:	68 85 c7 02 c0       	push   0xc002c785
c001b54f:	e8 17 74 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001b554:	83 c4 2c             	add    esp,0x2c
c001b557:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c001b55c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b560:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b564:	53                   	push   ebx
c001b565:	51                   	push   ecx
c001b566:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b56c:	e8 13 85 ff ff       	call   c0013a84 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b571:	83 f0 01             	xor    eax,0x1
c001b574:	31 d2                	xor    edx,edx
c001b576:	0f b6 c0             	movzx  eax,al
c001b579:	83 c4 3c             	add    esp,0x3c
c001b57c:	5b                   	pop    ebx
c001b57d:	5e                   	pop    esi
c001b57e:	5f                   	pop    edi
c001b57f:	5d                   	pop    ebp
c001b580:	c3                   	ret    

c001b581 <Sys::timezone(regs*)>:
c001b581:	53                   	push   ebx
c001b582:	83 ec 08             	sub    esp,0x8
c001b585:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b589:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b58d:	75 17                	jne    c001b5a6 <Sys::timezone(regs*)+0x25>
c001b58f:	83 ec 0c             	sub    esp,0xc
c001b592:	68 a1 c7 02 c0       	push   0xc002c7a1
c001b597:	e8 cf 73 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001b59c:	83 c8 ff             	or     eax,0xffffffff
c001b59f:	83 c4 10             	add    esp,0x10
c001b5a2:	89 c2                	mov    edx,eax
c001b5a4:	eb 20                	jmp    c001b5c6 <Sys::timezone(regs*)+0x45>
c001b5a6:	83 ec 0c             	sub    esp,0xc
c001b5a9:	68 d9 c7 02 c0       	push   0xc002c7d9
c001b5ae:	e8 b8 73 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001b5b3:	58                   	pop    eax
c001b5b4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b5b7:	e8 2a 82 ff ff       	call   c00137e6 <User::loadClockSettings(int)>
c001b5bc:	83 c4 10             	add    esp,0x10
c001b5bf:	b8 01 00 00 00       	mov    eax,0x1
c001b5c4:	31 d2                	xor    edx,edx
c001b5c6:	83 c4 08             	add    esp,0x8
c001b5c9:	5b                   	pop    ebx
c001b5ca:	c3                   	ret    

c001b5cb <Sys::write(regs*)>:
c001b5cb:	57                   	push   edi
c001b5cc:	56                   	push   esi
c001b5cd:	53                   	push   ebx
c001b5ce:	83 ec 10             	sub    esp,0x10
c001b5d1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b5d5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b5d8:	83 f8 02             	cmp    eax,0x2
c001b5db:	77 10                	ja     c001b5ed <Sys::write(regs*)+0x22>
c001b5dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5e2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b5e5:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b5eb:	eb 0e                	jmp    c001b5fb <Sys::write(regs*)+0x30>
c001b5ed:	83 ec 0c             	sub    esp,0xc
c001b5f0:	50                   	push   eax
c001b5f1:	e8 19 5e ff ff       	call   c001140f <getFromFileDescriptor(int)>
c001b5f6:	83 c4 10             	add    esp,0x10
c001b5f9:	89 c1                	mov    ecx,eax
c001b5fb:	83 c8 ff             	or     eax,0xffffffff
c001b5fe:	85 c9                	test   ecx,ecx
c001b600:	89 c2                	mov    edx,eax
c001b602:	74 28                	je     c001b62c <Sys::write(regs*)+0x61>
c001b604:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b60c:	31 ff                	xor    edi,edi
c001b60e:	83 ec 0c             	sub    esp,0xc
c001b611:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b613:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b617:	52                   	push   edx
c001b618:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b61b:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b61e:	57                   	push   edi
c001b61f:	56                   	push   esi
c001b620:	51                   	push   ecx
c001b621:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b624:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b628:	83 c4 20             	add    esp,0x20
c001b62b:	99                   	cdq    
c001b62c:	83 c4 10             	add    esp,0x10
c001b62f:	5b                   	pop    ebx
c001b630:	5e                   	pop    esi
c001b631:	5f                   	pop    edi
c001b632:	c3                   	ret    

c001b633 <Sys::wsbe(regs*)>:
c001b633:	57                   	push   edi
c001b634:	b9 0b 00 00 00       	mov    ecx,0xb
c001b639:	56                   	push   esi
c001b63a:	be 18 c8 02 c0       	mov    esi,0xc002c818
c001b63f:	53                   	push   ebx
c001b640:	83 ec 30             	sub    esp,0x30
c001b643:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b647:	fc                   	cld    
c001b648:	83 ec 0c             	sub    esp,0xc
c001b64b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b64d:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b651:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b656:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b659:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b65f:	8b 06                	mov    eax,DWORD PTR [esi]
c001b661:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b664:	57                   	push   edi
c001b665:	e8 02 51 fe ff       	call   c000076c <strlen>
c001b66a:	5a                   	pop    edx
c001b66b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b66f:	52                   	push   edx
c001b670:	31 d2                	xor    edx,edx
c001b672:	57                   	push   edi
c001b673:	52                   	push   edx
c001b674:	50                   	push   eax
c001b675:	56                   	push   esi
c001b676:	ff d3                	call   ebx
c001b678:	83 c4 14             	add    esp,0x14
c001b67b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b67f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b682:	e8 00 34 00 00       	call   c001ea87 <terminateTask(int)>
c001b687:	83 c4 40             	add    esp,0x40
c001b68a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b68f:	5b                   	pop    ebx
c001b690:	31 d2                	xor    edx,edx
c001b692:	5e                   	pop    esi
c001b693:	5f                   	pop    edi
c001b694:	c3                   	ret    

c001b695 <Sys::yield(regs*)>:
c001b695:	57                   	push   edi
c001b696:	56                   	push   esi
c001b697:	53                   	push   ebx
c001b698:	fa                   	cli    
c001b699:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c001b69f:	e8 b0 2a 00 00       	call   c001e154 <schedule()>
c001b6a4:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001b6a9:	48                   	dec    eax
c001b6aa:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001b6af:	75 01                	jne    c001b6b2 <Sys::yield(regs*)+0x1d>
c001b6b1:	fb                   	sti    
c001b6b2:	8b 35 30 f7 02 c0    	mov    esi,DWORD PTR ds:0xc002f730
c001b6b8:	8b 3d 34 f7 02 c0    	mov    edi,DWORD PTR ds:0xc002f734
c001b6be:	89 f0                	mov    eax,esi
c001b6c0:	89 fb                	mov    ebx,edi
c001b6c2:	89 f1                	mov    ecx,esi
c001b6c4:	c1 e0 07             	shl    eax,0x7
c001b6c7:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b6cb:	25 80 30 0f 00       	and    eax,0xf3080
c001b6d0:	c1 eb 17             	shr    ebx,0x17
c001b6d3:	31 c8                	xor    eax,ecx
c001b6d5:	89 da                	mov    edx,ebx
c001b6d7:	5b                   	pop    ebx
c001b6d8:	5e                   	pop    esi
c001b6d9:	5f                   	pop    edi
c001b6da:	c3                   	ret    

c001b6db <sysCallSeekDir(regs*)>:
c001b6db:	31 c0                	xor    eax,eax
c001b6dd:	31 d2                	xor    edx,edx
c001b6df:	c3                   	ret    

c001b6e0 <sysCallTellDir(regs*)>:
c001b6e0:	31 c0                	xor    eax,eax
c001b6e2:	31 d2                	xor    edx,edx
c001b6e4:	c3                   	ret    

c001b6e5 <sysCallVerify(regs*)>:
c001b6e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b6e9:	31 d2                	xor    edx,edx
c001b6eb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b6ee:	c3                   	ret    

c001b6ef <sysFormatDisk(regs*)>:
c001b6ef:	56                   	push   esi
c001b6f0:	53                   	push   ebx
c001b6f1:	53                   	push   ebx
c001b6f2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b6f6:	8b 1d 34 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f234
c001b6fc:	eb 25                	jmp    c001b723 <sysFormatDisk(regs*)+0x34>
c001b6fe:	83 ec 0c             	sub    esp,0xc
c001b701:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b704:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b706:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b709:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b70c:	50                   	push   eax
c001b70d:	ff 34 85 c0 f6 02 c0 	push   DWORD PTR [eax*4-0x3ffd0940]
c001b714:	53                   	push   ebx
c001b715:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b718:	83 c4 20             	add    esp,0x20
c001b71b:	83 f8 08             	cmp    eax,0x8
c001b71e:	75 12                	jne    c001b732 <sysFormatDisk(regs*)+0x43>
c001b720:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b723:	85 db                	test   ebx,ebx
c001b725:	75 d7                	jne    c001b6fe <sysFormatDisk(regs*)+0xf>
c001b727:	59                   	pop    ecx
c001b728:	b8 03 00 00 00       	mov    eax,0x3
c001b72d:	31 d2                	xor    edx,edx
c001b72f:	5b                   	pop    ebx
c001b730:	5e                   	pop    esi
c001b731:	c3                   	ret    
c001b732:	85 c0                	test   eax,eax
c001b734:	74 1b                	je     c001b751 <sysFormatDisk(regs*)+0x62>
c001b736:	83 f8 09             	cmp    eax,0x9
c001b739:	74 0b                	je     c001b746 <sysFormatDisk(regs*)+0x57>
c001b73b:	59                   	pop    ecx
c001b73c:	b8 02 00 00 00       	mov    eax,0x2
c001b741:	31 d2                	xor    edx,edx
c001b743:	5b                   	pop    ebx
c001b744:	5e                   	pop    esi
c001b745:	c3                   	ret    
c001b746:	59                   	pop    ecx
c001b747:	b8 01 00 00 00       	mov    eax,0x1
c001b74c:	31 d2                	xor    edx,edx
c001b74e:	5b                   	pop    ebx
c001b74f:	5e                   	pop    esi
c001b750:	c3                   	ret    
c001b751:	59                   	pop    ecx
c001b752:	31 c0                	xor    eax,eax
c001b754:	31 d2                	xor    edx,edx
c001b756:	5b                   	pop    ebx
c001b757:	5e                   	pop    esi
c001b758:	c3                   	ret    

c001b759 <sysSetDiskVolumeLabel(regs*)>:
c001b759:	56                   	push   esi
c001b75a:	53                   	push   ebx
c001b75b:	53                   	push   ebx
c001b75c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b760:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b763:	83 f8 19             	cmp    eax,0x19
c001b766:	77 29                	ja     c001b791 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b768:	8b 0c 85 c0 f6 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd0940]
c001b76f:	85 c9                	test   ecx,ecx
c001b771:	74 1e                	je     c001b791 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b773:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b776:	85 d2                	test   edx,edx
c001b778:	74 17                	je     c001b791 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b77a:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b780:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b782:	52                   	push   edx
c001b783:	50                   	push   eax
c001b784:	51                   	push   ecx
c001b785:	53                   	push   ebx
c001b786:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b789:	83 c4 10             	add    esp,0x10
c001b78c:	99                   	cdq    
c001b78d:	59                   	pop    ecx
c001b78e:	5b                   	pop    ebx
c001b78f:	5e                   	pop    esi
c001b790:	c3                   	ret    
c001b791:	59                   	pop    ecx
c001b792:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b797:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b79c:	5b                   	pop    ebx
c001b79d:	5e                   	pop    esi
c001b79e:	c3                   	ret    

c001b79f <sysGetDiskVolumeLabel(regs*)>:
c001b79f:	57                   	push   edi
c001b7a0:	56                   	push   esi
c001b7a1:	53                   	push   ebx
c001b7a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7a6:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b7a9:	83 fa 19             	cmp    edx,0x19
c001b7ac:	77 34                	ja     c001b7e2 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7ae:	8b 0c 95 c0 f6 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd0940]
c001b7b5:	85 c9                	test   ecx,ecx
c001b7b7:	74 29                	je     c001b7e2 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7b9:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b7bc:	85 db                	test   ebx,ebx
c001b7be:	74 22                	je     c001b7e2 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7c0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b7c3:	85 c0                	test   eax,eax
c001b7c5:	74 1b                	je     c001b7e2 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7c7:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b7cd:	83 ec 0c             	sub    esp,0xc
c001b7d0:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b7d2:	50                   	push   eax
c001b7d3:	53                   	push   ebx
c001b7d4:	52                   	push   edx
c001b7d5:	51                   	push   ecx
c001b7d6:	56                   	push   esi
c001b7d7:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b7da:	83 c4 20             	add    esp,0x20
c001b7dd:	99                   	cdq    
c001b7de:	5b                   	pop    ebx
c001b7df:	5e                   	pop    esi
c001b7e0:	5f                   	pop    edi
c001b7e1:	c3                   	ret    
c001b7e2:	5b                   	pop    ebx
c001b7e3:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b7e8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b7ed:	5e                   	pop    esi
c001b7ee:	5f                   	pop    edi
c001b7ef:	c3                   	ret    

c001b7f0 <sysShutdown(regs*)>:
c001b7f0:	83 ec 0c             	sub    esp,0xc
c001b7f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7f7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b7fa:	85 c0                	test   eax,eax
c001b7fc:	74 18                	je     c001b816 <sysShutdown(regs*)+0x26>
c001b7fe:	83 f8 01             	cmp    eax,0x1
c001b801:	74 38                	je     c001b83b <sysShutdown(regs*)+0x4b>
c001b803:	83 f8 02             	cmp    eax,0x2
c001b806:	74 24                	je     c001b82c <sysShutdown(regs*)+0x3c>
c001b808:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b80d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b812:	83 c4 0c             	add    esp,0xc
c001b815:	c3                   	ret    
c001b816:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c001b81b:	8b 10                	mov    edx,DWORD PTR [eax]
c001b81d:	6a 00                	push   0x0
c001b81f:	6a 00                	push   0x0
c001b821:	6a 00                	push   0x0
c001b823:	50                   	push   eax
c001b824:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b827:	83 c4 10             	add    esp,0x10
c001b82a:	eb dc                	jmp    c001b808 <sysShutdown(regs*)+0x18>
c001b82c:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c001b831:	8b 10                	mov    edx,DWORD PTR [eax]
c001b833:	6a 00                	push   0x0
c001b835:	6a 00                	push   0x0
c001b837:	6a 01                	push   0x1
c001b839:	eb e8                	jmp    c001b823 <sysShutdown(regs*)+0x33>
c001b83b:	a1 60 17 03 c0       	mov    eax,ds:0xc0031760
c001b840:	85 c0                	test   eax,eax
c001b842:	74 02                	je     c001b846 <sysShutdown(regs*)+0x56>
c001b844:	ff d0                	call   eax
c001b846:	31 c0                	xor    eax,eax
c001b848:	31 d2                	xor    edx,edx
c001b84a:	83 c4 0c             	add    esp,0xc
c001b84d:	c3                   	ret    

c001b84e <sysCallRealpath(regs*)>:
c001b84e:	83 ec 0c             	sub    esp,0xc
c001b851:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b855:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b858:	85 d2                	test   edx,edx
c001b85a:	74 07                	je     c001b863 <sysCallRealpath(regs*)+0x15>
c001b85c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b85f:	85 c0                	test   eax,eax
c001b861:	75 0b                	jne    c001b86e <sysCallRealpath(regs*)+0x20>
c001b863:	b8 01 00 00 00       	mov    eax,0x1
c001b868:	31 d2                	xor    edx,edx
c001b86a:	83 c4 0c             	add    esp,0xc
c001b86d:	c3                   	ret    
c001b86e:	51                   	push   ecx
c001b86f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b875:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b878:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b87e:	51                   	push   ecx
c001b87f:	52                   	push   edx
c001b880:	50                   	push   eax
c001b881:	e8 9a 74 ff ff       	call   c0012d20 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b886:	83 c4 10             	add    esp,0x10
c001b889:	31 c0                	xor    eax,eax
c001b88b:	31 d2                	xor    edx,edx
c001b88d:	83 c4 0c             	add    esp,0xc
c001b890:	c3                   	ret    

c001b891 <sysCallGetArgc(regs*)>:
c001b891:	83 ec 14             	sub    esp,0x14
c001b894:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b899:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b89c:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001b8a2:	68 44 c8 02 c0       	push   0xc002c844
c001b8a7:	e8 bf 70 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001b8ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8b1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8b4:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b8ba:	83 c4 1c             	add    esp,0x1c
c001b8bd:	99                   	cdq    
c001b8be:	c3                   	ret    

c001b8bf <sysCallReadDir(regs*)>:
c001b8bf:	53                   	push   ebx
c001b8c0:	83 ec 18             	sub    esp,0x18
c001b8c3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b8c7:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b8ca:	83 f8 02             	cmp    eax,0x2
c001b8cd:	76 53                	jbe    c001b922 <sysCallReadDir(regs*)+0x63>
c001b8cf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b8d2:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b8d8:	77 4f                	ja     c001b929 <sysCallReadDir(regs*)+0x6a>
c001b8da:	83 ec 0c             	sub    esp,0xc
c001b8dd:	50                   	push   eax
c001b8de:	e8 2c 5b ff ff       	call   c001140f <getFromFileDescriptor(int)>
c001b8e3:	83 c4 10             	add    esp,0x10
c001b8e6:	85 c0                	test   eax,eax
c001b8e8:	74 50                	je     c001b93a <sysCallReadDir(regs*)+0x7b>
c001b8ea:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b8f2:	83 ec 0c             	sub    esp,0xc
c001b8f5:	8b 10                	mov    edx,DWORD PTR [eax]
c001b8f7:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b8fb:	51                   	push   ecx
c001b8fc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b8ff:	6a 00                	push   0x0
c001b901:	68 10 01 00 00       	push   0x110
c001b906:	50                   	push   eax
c001b907:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b90a:	83 c4 20             	add    esp,0x20
c001b90d:	85 c0                	test   eax,eax
c001b90f:	74 38                	je     c001b949 <sysCallReadDir(regs*)+0x8a>
c001b911:	83 f8 07             	cmp    eax,0x7
c001b914:	74 0c                	je     c001b922 <sysCallReadDir(regs*)+0x63>
c001b916:	b8 02 00 00 00       	mov    eax,0x2
c001b91b:	31 d2                	xor    edx,edx
c001b91d:	83 c4 18             	add    esp,0x18
c001b920:	5b                   	pop    ebx
c001b921:	c3                   	ret    
c001b922:	b8 01 00 00 00       	mov    eax,0x1
c001b927:	eb f2                	jmp    c001b91b <sysCallReadDir(regs*)+0x5c>
c001b929:	83 ec 08             	sub    esp,0x8
c001b92c:	52                   	push   edx
c001b92d:	68 68 c9 02 c0       	push   0xc002c968
c001b932:	e8 34 70 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001b937:	83 c4 10             	add    esp,0x10
c001b93a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b93f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b944:	83 c4 18             	add    esp,0x18
c001b947:	5b                   	pop    ebx
c001b948:	c3                   	ret    
c001b949:	31 c0                	xor    eax,eax
c001b94b:	eb ce                	jmp    c001b91b <sysCallReadDir(regs*)+0x5c>

c001b94d <sysCallIsATTY(regs*)>:
c001b94d:	83 ec 0c             	sub    esp,0xc
c001b950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b954:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b957:	83 f8 02             	cmp    eax,0x2
c001b95a:	76 07                	jbe    c001b963 <sysCallIsATTY(regs*)+0x16>
c001b95c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b961:	75 26                	jne    c001b989 <sysCallIsATTY(regs*)+0x3c>
c001b963:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b968:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b96b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b971:	85 c0                	test   eax,eax
c001b973:	74 24                	je     c001b999 <sysCallIsATTY(regs*)+0x4c>
c001b975:	83 ec 0c             	sub    esp,0xc
c001b978:	8b 10                	mov    edx,DWORD PTR [eax]
c001b97a:	50                   	push   eax
c001b97b:	ff 12                	call   DWORD PTR [edx]
c001b97d:	31 d2                	xor    edx,edx
c001b97f:	0f b6 c0             	movzx  eax,al
c001b982:	83 c4 10             	add    esp,0x10
c001b985:	83 c4 0c             	add    esp,0xc
c001b988:	c3                   	ret    
c001b989:	83 ec 0c             	sub    esp,0xc
c001b98c:	50                   	push   eax
c001b98d:	e8 7d 5a ff ff       	call   c001140f <getFromFileDescriptor(int)>
c001b992:	83 c4 10             	add    esp,0x10
c001b995:	85 c0                	test   eax,eax
c001b997:	75 dc                	jne    c001b975 <sysCallIsATTY(regs*)+0x28>
c001b999:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b99e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b9a3:	83 c4 0c             	add    esp,0xc
c001b9a6:	c3                   	ret    

c001b9a7 <sysCallSeek(regs*)>:
c001b9a7:	53                   	push   ebx
c001b9a8:	83 ec 08             	sub    esp,0x8
c001b9ab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b9af:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b9b2:	83 f8 02             	cmp    eax,0x2
c001b9b5:	76 4a                	jbe    c001ba01 <sysCallSeek(regs*)+0x5a>
c001b9b7:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b9bc:	77 32                	ja     c001b9f0 <sysCallSeek(regs*)+0x49>
c001b9be:	83 ec 0c             	sub    esp,0xc
c001b9c1:	50                   	push   eax
c001b9c2:	e8 48 5a ff ff       	call   c001140f <getFromFileDescriptor(int)>
c001b9c7:	83 c4 0c             	add    esp,0xc
c001b9ca:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b9cd:	31 db                	xor    ebx,ebx
c001b9cf:	53                   	push   ebx
c001b9d0:	51                   	push   ecx
c001b9d1:	50                   	push   eax
c001b9d2:	e8 15 76 ff ff       	call   c0012fec <File::seek(unsigned long long)>
c001b9d7:	83 c4 10             	add    esp,0x10
c001b9da:	85 c0                	test   eax,eax
c001b9dc:	0f 95 c0             	setne  al
c001b9df:	31 d2                	xor    edx,edx
c001b9e1:	0f b6 c0             	movzx  eax,al
c001b9e4:	f7 d8                	neg    eax
c001b9e6:	83 d2 00             	adc    edx,0x0
c001b9e9:	83 c4 08             	add    esp,0x8
c001b9ec:	f7 da                	neg    edx
c001b9ee:	5b                   	pop    ebx
c001b9ef:	c3                   	ret    
c001b9f0:	83 ec 08             	sub    esp,0x8
c001b9f3:	50                   	push   eax
c001b9f4:	68 4f c8 02 c0       	push   0xc002c84f
c001b9f9:	e8 6d 6f ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001b9fe:	83 c4 10             	add    esp,0x10
c001ba01:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba06:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba0b:	83 c4 08             	add    esp,0x8
c001ba0e:	5b                   	pop    ebx
c001ba0f:	c3                   	ret    

c001ba10 <sysCallTell(regs*)>:
c001ba10:	53                   	push   ebx
c001ba11:	83 ec 08             	sub    esp,0x8
c001ba14:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba18:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba1b:	83 f8 02             	cmp    eax,0x2
c001ba1e:	76 5e                	jbe    c001ba7e <sysCallTell(regs*)+0x6e>
c001ba20:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba25:	77 2d                	ja     c001ba54 <sysCallTell(regs*)+0x44>
c001ba27:	83 ec 0c             	sub    esp,0xc
c001ba2a:	50                   	push   eax
c001ba2b:	e8 df 59 ff ff       	call   c001140f <getFromFileDescriptor(int)>
c001ba30:	5a                   	pop    edx
c001ba31:	59                   	pop    ecx
c001ba32:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001ba35:	50                   	push   eax
c001ba36:	e8 07 76 ff ff       	call   c0013042 <File::tell(unsigned long long*)>
c001ba3b:	83 c4 10             	add    esp,0x10
c001ba3e:	85 c0                	test   eax,eax
c001ba40:	0f 95 c0             	setne  al
c001ba43:	31 d2                	xor    edx,edx
c001ba45:	0f b6 c0             	movzx  eax,al
c001ba48:	f7 d8                	neg    eax
c001ba4a:	83 d2 00             	adc    edx,0x0
c001ba4d:	83 c4 08             	add    esp,0x8
c001ba50:	f7 da                	neg    edx
c001ba52:	5b                   	pop    ebx
c001ba53:	c3                   	ret    
c001ba54:	83 ec 08             	sub    esp,0x8
c001ba57:	50                   	push   eax
c001ba58:	68 69 c8 02 c0       	push   0xc002c869
c001ba5d:	e8 09 6f ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001ba62:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001ba65:	83 c4 10             	add    esp,0x10
c001ba68:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ba6e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba75:	31 d2                	xor    edx,edx
c001ba77:	31 c0                	xor    eax,eax
c001ba79:	83 c4 08             	add    esp,0x8
c001ba7c:	5b                   	pop    ebx
c001ba7d:	c3                   	ret    
c001ba7e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba83:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba88:	83 c4 08             	add    esp,0x8
c001ba8b:	5b                   	pop    ebx
c001ba8c:	c3                   	ret    

c001ba8d <sysCallSize(regs*)>:
c001ba8d:	53                   	push   ebx
c001ba8e:	83 ec 18             	sub    esp,0x18
c001ba91:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ba95:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba98:	83 f8 02             	cmp    eax,0x2
c001ba9b:	76 64                	jbe    c001bb01 <sysCallSize(regs*)+0x74>
c001ba9d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001baa2:	77 33                	ja     c001bad7 <sysCallSize(regs*)+0x4a>
c001baa4:	83 ec 0c             	sub    esp,0xc
c001baa7:	50                   	push   eax
c001baa8:	e8 62 59 ff ff       	call   c001140f <getFromFileDescriptor(int)>
c001baad:	83 c4 0c             	add    esp,0xc
c001bab0:	8d 54 24 13          	lea    edx,[esp+0x13]
c001bab4:	52                   	push   edx
c001bab5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bab8:	50                   	push   eax
c001bab9:	e8 1c 77 ff ff       	call   c00131da <File::stat(unsigned long long*, bool*)>
c001babe:	83 c4 10             	add    esp,0x10
c001bac1:	85 c0                	test   eax,eax
c001bac3:	0f 95 c0             	setne  al
c001bac6:	31 d2                	xor    edx,edx
c001bac8:	0f b6 c0             	movzx  eax,al
c001bacb:	f7 d8                	neg    eax
c001bacd:	83 d2 00             	adc    edx,0x0
c001bad0:	83 c4 18             	add    esp,0x18
c001bad3:	f7 da                	neg    edx
c001bad5:	5b                   	pop    ebx
c001bad6:	c3                   	ret    
c001bad7:	83 ec 08             	sub    esp,0x8
c001bada:	50                   	push   eax
c001badb:	68 83 c8 02 c0       	push   0xc002c883
c001bae0:	e8 86 6e ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001bae5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bae8:	83 c4 10             	add    esp,0x10
c001baeb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001baf1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001baf8:	31 d2                	xor    edx,edx
c001bafa:	31 c0                	xor    eax,eax
c001bafc:	83 c4 18             	add    esp,0x18
c001baff:	5b                   	pop    ebx
c001bb00:	c3                   	ret    
c001bb01:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb06:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb0b:	83 c4 18             	add    esp,0x18
c001bb0e:	5b                   	pop    ebx
c001bb0f:	c3                   	ret    

c001bb10 <sysCallSizeFromFilename(regs*)>:
c001bb10:	57                   	push   edi
c001bb11:	56                   	push   esi
c001bb12:	53                   	push   ebx
c001bb13:	83 ec 20             	sub    esp,0x20
c001bb16:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bb1a:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001bb1d:	83 fb 02             	cmp    ebx,0x2
c001bb20:	0f 86 99 00 00 00    	jbe    c001bbbf <sysCallSizeFromFilename(regs*)+0xaf>
c001bb26:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001bb2c:	77 65                	ja     c001bb93 <sysCallSizeFromFilename(regs*)+0x83>
c001bb2e:	83 ec 0c             	sub    esp,0xc
c001bb31:	68 14 01 00 00       	push   0x114
c001bb36:	e8 51 3d ff ff       	call   c000f88c <malloc>
c001bb3b:	83 c4 0c             	add    esp,0xc
c001bb3e:	89 c6                	mov    esi,eax
c001bb40:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb45:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb48:	53                   	push   ebx
c001bb49:	56                   	push   esi
c001bb4a:	e8 7b 73 ff ff       	call   c0012eca <File::File(char const*, Process*)>
c001bb4f:	83 c4 0c             	add    esp,0xc
c001bb52:	8d 44 24 23          	lea    eax,[esp+0x23]
c001bb56:	50                   	push   eax
c001bb57:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001bb5a:	56                   	push   esi
c001bb5b:	e8 7a 76 ff ff       	call   c00131da <File::stat(unsigned long long*, bool*)>
c001bb60:	83 c4 10             	add    esp,0x10
c001bb63:	85 f6                	test   esi,esi
c001bb65:	74 14                	je     c001bb7b <sysCallSizeFromFilename(regs*)+0x6b>
c001bb67:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb6b:	8b 16                	mov    edx,DWORD PTR [esi]
c001bb6d:	83 ec 0c             	sub    esp,0xc
c001bb70:	56                   	push   esi
c001bb71:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bb74:	83 c4 10             	add    esp,0x10
c001bb77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb7b:	85 c0                	test   eax,eax
c001bb7d:	0f 95 c0             	setne  al
c001bb80:	31 d2                	xor    edx,edx
c001bb82:	0f b6 c0             	movzx  eax,al
c001bb85:	f7 d8                	neg    eax
c001bb87:	83 d2 00             	adc    edx,0x0
c001bb8a:	83 c4 20             	add    esp,0x20
c001bb8d:	f7 da                	neg    edx
c001bb8f:	5b                   	pop    ebx
c001bb90:	5e                   	pop    esi
c001bb91:	5f                   	pop    edi
c001bb92:	c3                   	ret    
c001bb93:	83 ec 08             	sub    esp,0x8
c001bb96:	53                   	push   ebx
c001bb97:	68 83 c8 02 c0       	push   0xc002c883
c001bb9c:	e8 ca 6d ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001bba1:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bba4:	83 c4 10             	add    esp,0x10
c001bba7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bbad:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bbb4:	31 d2                	xor    edx,edx
c001bbb6:	83 c4 20             	add    esp,0x20
c001bbb9:	31 c0                	xor    eax,eax
c001bbbb:	5b                   	pop    ebx
c001bbbc:	5e                   	pop    esi
c001bbbd:	5f                   	pop    edi
c001bbbe:	c3                   	ret    
c001bbbf:	83 c4 20             	add    esp,0x20
c001bbc2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bbc7:	5b                   	pop    ebx
c001bbc8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bbcd:	5e                   	pop    esi
c001bbce:	5f                   	pop    edi
c001bbcf:	c3                   	ret    

c001bbd0 <sysCallClose(regs*)>:
c001bbd0:	53                   	push   ebx
c001bbd1:	83 ec 08             	sub    esp,0x8
c001bbd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbd8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bbdb:	83 f8 02             	cmp    eax,0x2
c001bbde:	76 50                	jbe    c001bc30 <sysCallClose(regs*)+0x60>
c001bbe0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bbe5:	74 58                	je     c001bc3f <sysCallClose(regs*)+0x6f>
c001bbe7:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bbec:	74 60                	je     c001bc4e <sysCallClose(regs*)+0x7e>
c001bbee:	77 2f                	ja     c001bc1f <sysCallClose(regs*)+0x4f>
c001bbf0:	83 ec 0c             	sub    esp,0xc
c001bbf3:	50                   	push   eax
c001bbf4:	e8 16 58 ff ff       	call   c001140f <getFromFileDescriptor(int)>
c001bbf9:	89 c3                	mov    ebx,eax
c001bbfb:	89 04 24             	mov    DWORD PTR [esp],eax
c001bbfe:	e8 89 73 ff ff       	call   c0012f8c <File::close()>
c001bc03:	83 c4 10             	add    esp,0x10
c001bc06:	85 db                	test   ebx,ebx
c001bc08:	74 0c                	je     c001bc16 <sysCallClose(regs*)+0x46>
c001bc0a:	83 ec 0c             	sub    esp,0xc
c001bc0d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc0f:	53                   	push   ebx
c001bc10:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bc13:	83 c4 10             	add    esp,0x10
c001bc16:	31 c0                	xor    eax,eax
c001bc18:	31 d2                	xor    edx,edx
c001bc1a:	83 c4 08             	add    esp,0x8
c001bc1d:	5b                   	pop    ebx
c001bc1e:	c3                   	ret    
c001bc1f:	83 ec 08             	sub    esp,0x8
c001bc22:	50                   	push   eax
c001bc23:	68 8c c9 02 c0       	push   0xc002c98c
c001bc28:	e8 3e 6d ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001bc2d:	83 c4 10             	add    esp,0x10
c001bc30:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc35:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc3a:	83 c4 08             	add    esp,0x8
c001bc3d:	5b                   	pop    ebx
c001bc3e:	c3                   	ret    
c001bc3f:	83 ec 0c             	sub    esp,0xc
c001bc42:	68 9e c8 02 c0       	push   0xc002c89e
c001bc47:	e8 1f 6d ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001bc4c:	eb c5                	jmp    c001bc13 <sysCallClose(regs*)+0x43>
c001bc4e:	83 ec 0c             	sub    esp,0xc
c001bc51:	68 ac c8 02 c0       	push   0xc002c8ac
c001bc56:	eb ef                	jmp    c001bc47 <sysCallClose(regs*)+0x77>

c001bc58 <sysCallOpenDir(regs*)>:
c001bc58:	56                   	push   esi
c001bc59:	53                   	push   ebx
c001bc5a:	53                   	push   ebx
c001bc5b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bc5f:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bc62:	85 f6                	test   esi,esi
c001bc64:	74 59                	je     c001bcbf <sysCallOpenDir(regs*)+0x67>
c001bc66:	83 ec 0c             	sub    esp,0xc
c001bc69:	68 14 01 00 00       	push   0x114
c001bc6e:	e8 19 3c ff ff       	call   c000f88c <malloc>
c001bc73:	83 c4 0c             	add    esp,0xc
c001bc76:	89 c6                	mov    esi,eax
c001bc78:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc7d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bc80:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc83:	56                   	push   esi
c001bc84:	e8 ed 76 ff ff       	call   c0013376 <Directory::Directory(char const*, Process*)>
c001bc89:	83 c4 10             	add    esp,0x10
c001bc8c:	85 f6                	test   esi,esi
c001bc8e:	74 2f                	je     c001bcbf <sysCallOpenDir(regs*)+0x67>
c001bc90:	83 ec 0c             	sub    esp,0xc
c001bc93:	56                   	push   esi
c001bc94:	e8 41 77 ff ff       	call   c00133da <Directory::open()>
c001bc99:	83 c4 10             	add    esp,0x10
c001bc9c:	85 c0                	test   eax,eax
c001bc9e:	75 1f                	jne    c001bcbf <sysCallOpenDir(regs*)+0x67>
c001bca0:	83 ec 0c             	sub    esp,0xc
c001bca3:	56                   	push   esi
c001bca4:	e8 71 54 ff ff       	call   c001111a <UnixFile::getFileDescriptor()>
c001bca9:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bcac:	83 c4 10             	add    esp,0x10
c001bcaf:	89 02                	mov    DWORD PTR [edx],eax
c001bcb1:	c1 f8 1f             	sar    eax,0x1f
c001bcb4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bcb7:	31 c0                	xor    eax,eax
c001bcb9:	59                   	pop    ecx
c001bcba:	31 d2                	xor    edx,edx
c001bcbc:	5b                   	pop    ebx
c001bcbd:	5e                   	pop    esi
c001bcbe:	c3                   	ret    
c001bcbf:	59                   	pop    ecx
c001bcc0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bcc5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bcca:	5b                   	pop    ebx
c001bccb:	5e                   	pop    esi
c001bccc:	c3                   	ret    

c001bccd <sysCallCloseDir(regs*)>:
c001bccd:	53                   	push   ebx
c001bcce:	83 ec 08             	sub    esp,0x8
c001bcd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcd5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bcd8:	83 f8 02             	cmp    eax,0x2
c001bcdb:	76 47                	jbe    c001bd24 <sysCallCloseDir(regs*)+0x57>
c001bcdd:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bce2:	77 2f                	ja     c001bd13 <sysCallCloseDir(regs*)+0x46>
c001bce4:	83 ec 0c             	sub    esp,0xc
c001bce7:	50                   	push   eax
c001bce8:	e8 22 57 ff ff       	call   c001140f <getFromFileDescriptor(int)>
c001bced:	89 c3                	mov    ebx,eax
c001bcef:	89 04 24             	mov    DWORD PTR [esp],eax
c001bcf2:	e8 3f 77 ff ff       	call   c0013436 <Directory::close()>
c001bcf7:	83 c4 10             	add    esp,0x10
c001bcfa:	85 db                	test   ebx,ebx
c001bcfc:	74 0c                	je     c001bd0a <sysCallCloseDir(regs*)+0x3d>
c001bcfe:	83 ec 0c             	sub    esp,0xc
c001bd01:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd03:	53                   	push   ebx
c001bd04:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bd07:	83 c4 10             	add    esp,0x10
c001bd0a:	31 c0                	xor    eax,eax
c001bd0c:	31 d2                	xor    edx,edx
c001bd0e:	83 c4 08             	add    esp,0x8
c001bd11:	5b                   	pop    ebx
c001bd12:	c3                   	ret    
c001bd13:	83 ec 08             	sub    esp,0x8
c001bd16:	50                   	push   eax
c001bd17:	68 b4 c9 02 c0       	push   0xc002c9b4
c001bd1c:	e8 4a 6c ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001bd21:	83 c4 10             	add    esp,0x10
c001bd24:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd29:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd2e:	83 c4 08             	add    esp,0x8
c001bd31:	5b                   	pop    ebx
c001bd32:	c3                   	ret    

c001bd33 <sysCallMakeDir(regs*)>:
c001bd33:	56                   	push   esi
c001bd34:	53                   	push   ebx
c001bd35:	83 ec 10             	sub    esp,0x10
c001bd38:	68 14 01 00 00       	push   0x114
c001bd3d:	e8 4a 3b ff ff       	call   c000f88c <malloc>
c001bd42:	83 c4 0c             	add    esp,0xc
c001bd45:	89 c3                	mov    ebx,eax
c001bd47:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd4c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd4f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bd53:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bd56:	53                   	push   ebx
c001bd57:	e8 1a 76 ff ff       	call   c0013376 <Directory::Directory(char const*, Process*)>
c001bd5c:	83 c4 10             	add    esp,0x10
c001bd5f:	85 db                	test   ebx,ebx
c001bd61:	74 32                	je     c001bd95 <sysCallMakeDir(regs*)+0x62>
c001bd63:	83 ec 0c             	sub    esp,0xc
c001bd66:	53                   	push   ebx
c001bd67:	e8 4e 78 ff ff       	call   c00135ba <Directory::create()>
c001bd6c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd6f:	89 c6                	mov    esi,eax
c001bd71:	e8 c0 76 ff ff       	call   c0013436 <Directory::close()>
c001bd76:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd7b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bd7e:	83 c4 10             	add    esp,0x10
c001bd81:	31 c0                	xor    eax,eax
c001bd83:	59                   	pop    ecx
c001bd84:	85 f6                	test   esi,esi
c001bd86:	5b                   	pop    ebx
c001bd87:	0f 95 c0             	setne  al
c001bd8a:	5e                   	pop    esi
c001bd8b:	31 d2                	xor    edx,edx
c001bd8d:	f7 d8                	neg    eax
c001bd8f:	83 d2 00             	adc    edx,0x0
c001bd92:	f7 da                	neg    edx
c001bd94:	c3                   	ret    
c001bd95:	59                   	pop    ecx
c001bd96:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd9b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bda0:	5b                   	pop    ebx
c001bda1:	5e                   	pop    esi
c001bda2:	c3                   	ret    

c001bda3 <sysCallWait(regs*)>:
c001bda3:	83 ec 10             	sub    esp,0x10
c001bda6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bdaa:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001bdad:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bdb0:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001bdb3:	e8 c8 25 00 00       	call   c001e380 <waitTask(int, int*, int)>
c001bdb8:	83 c4 1c             	add    esp,0x1c
c001bdbb:	99                   	cdq    
c001bdbc:	c3                   	ret    

c001bdbd <sysCallNotImpl(regs*)>:
c001bdbd:	83 ec 18             	sub    esp,0x18
c001bdc0:	68 ba c8 02 c0       	push   0xc002c8ba
c001bdc5:	e8 d7 e5 ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c001bdca:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bdcf:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bdd4:	83 c4 1c             	add    esp,0x1c
c001bdd7:	c3                   	ret    

c001bdd8 <sysPanic(regs*)>:
c001bdd8:	83 ec 18             	sub    esp,0x18
c001bddb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bddf:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bde2:	e8 ba e5 ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c001bde7:	c7 04 24 d4 c8 02 c0 	mov    DWORD PTR [esp],0xc002c8d4
c001bdee:	e8 ae e5 ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c001bdf3:	b8 01 00 00 00       	mov    eax,0x1
c001bdf8:	31 d2                	xor    edx,edx
c001bdfa:	83 c4 1c             	add    esp,0x1c
c001bdfd:	c3                   	ret    

c001bdfe <sysCallRmdir(regs*)>:
c001bdfe:	56                   	push   esi
c001bdff:	53                   	push   ebx
c001be00:	83 ec 20             	sub    esp,0x20
c001be03:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001be07:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001be0a:	68 14 01 00 00       	push   0x114
c001be0f:	e8 78 3a ff ff       	call   c000f88c <malloc>
c001be14:	83 c4 0c             	add    esp,0xc
c001be17:	89 c3                	mov    ebx,eax
c001be19:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be1e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be21:	56                   	push   esi
c001be22:	53                   	push   ebx
c001be23:	e8 a2 70 ff ff       	call   c0012eca <File::File(char const*, Process*)>
c001be28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be2b:	e8 76 72 ff ff       	call   c00130a6 <File::unlink()>
c001be30:	83 c4 10             	add    esp,0x10
c001be33:	85 db                	test   ebx,ebx
c001be35:	74 14                	je     c001be4b <sysCallRmdir(regs*)+0x4d>
c001be37:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be3b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001be3d:	83 ec 0c             	sub    esp,0xc
c001be40:	53                   	push   ebx
c001be41:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001be44:	83 c4 10             	add    esp,0x10
c001be47:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be4b:	85 c0                	test   eax,eax
c001be4d:	0f 95 c0             	setne  al
c001be50:	31 d2                	xor    edx,edx
c001be52:	0f b6 c0             	movzx  eax,al
c001be55:	f7 d8                	neg    eax
c001be57:	83 d2 00             	adc    edx,0x0
c001be5a:	83 c4 14             	add    esp,0x14
c001be5d:	f7 da                	neg    edx
c001be5f:	5b                   	pop    ebx
c001be60:	5e                   	pop    esi
c001be61:	c3                   	ret    

c001be62 <sysCallUnlink(regs*)>:
c001be62:	56                   	push   esi
c001be63:	53                   	push   ebx
c001be64:	83 ec 20             	sub    esp,0x20
c001be67:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001be6b:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001be6e:	68 14 01 00 00       	push   0x114
c001be73:	e8 14 3a ff ff       	call   c000f88c <malloc>
c001be78:	83 c4 0c             	add    esp,0xc
c001be7b:	89 c3                	mov    ebx,eax
c001be7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be82:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be85:	56                   	push   esi
c001be86:	53                   	push   ebx
c001be87:	e8 3e 70 ff ff       	call   c0012eca <File::File(char const*, Process*)>
c001be8c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be8f:	e8 12 72 ff ff       	call   c00130a6 <File::unlink()>
c001be94:	83 c4 10             	add    esp,0x10
c001be97:	85 db                	test   ebx,ebx
c001be99:	74 14                	je     c001beaf <sysCallUnlink(regs*)+0x4d>
c001be9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be9f:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bea1:	83 ec 0c             	sub    esp,0xc
c001bea4:	53                   	push   ebx
c001bea5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bea8:	83 c4 10             	add    esp,0x10
c001beab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001beaf:	85 c0                	test   eax,eax
c001beb1:	0f 95 c0             	setne  al
c001beb4:	31 d2                	xor    edx,edx
c001beb6:	0f b6 c0             	movzx  eax,al
c001beb9:	f7 d8                	neg    eax
c001bebb:	83 d2 00             	adc    edx,0x0
c001bebe:	83 c4 14             	add    esp,0x14
c001bec1:	f7 da                	neg    edx
c001bec3:	5b                   	pop    ebx
c001bec4:	5e                   	pop    esi
c001bec5:	c3                   	ret    

c001bec6 <sysCallGetArgv(regs*)>:
c001bec6:	83 ec 0c             	sub    esp,0xc
c001bec9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001becd:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bed0:	85 c0                	test   eax,eax
c001bed2:	78 2b                	js     c001beff <sysCallGetArgv(regs*)+0x39>
c001bed4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001beda:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bedd:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001bee3:	7d 1a                	jge    c001beff <sysCallGetArgv(regs*)+0x39>
c001bee5:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001beec:	85 c0                	test   eax,eax
c001beee:	74 17                	je     c001bf07 <sysCallGetArgv(regs*)+0x41>
c001bef0:	83 ec 08             	sub    esp,0x8
c001bef3:	50                   	push   eax
c001bef4:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bef7:	e8 10 49 fe ff       	call   c000080c <strcpy>
c001befc:	83 c4 10             	add    esp,0x10
c001beff:	31 c0                	xor    eax,eax
c001bf01:	31 d2                	xor    edx,edx
c001bf03:	83 c4 0c             	add    esp,0xc
c001bf06:	c3                   	ret    
c001bf07:	b8 01 00 00 00       	mov    eax,0x1
c001bf0c:	31 d2                	xor    edx,edx
c001bf0e:	83 c4 0c             	add    esp,0xc
c001bf11:	c3                   	ret    

c001bf12 <sysCallTTYName(regs*)>:
c001bf12:	56                   	push   esi
c001bf13:	53                   	push   ebx
c001bf14:	53                   	push   ebx
c001bf15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bf19:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001bf1c:	85 c0                	test   eax,eax
c001bf1e:	74 5f                	je     c001bf7f <sysCallTTYName(regs*)+0x6d>
c001bf20:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bf23:	83 f8 02             	cmp    eax,0x2
c001bf26:	77 3e                	ja     c001bf66 <sysCallTTYName(regs*)+0x54>
c001bf28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf2d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bf30:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001bf36:	85 db                	test   ebx,ebx
c001bf38:	74 45                	je     c001bf7f <sysCallTTYName(regs*)+0x6d>
c001bf3a:	83 ec 0c             	sub    esp,0xc
c001bf3d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bf3f:	53                   	push   ebx
c001bf40:	ff 10                	call   DWORD PTR [eax]
c001bf42:	83 c4 10             	add    esp,0x10
c001bf45:	84 c0                	test   al,al
c001bf47:	74 41                	je     c001bf8a <sysCallTTYName(regs*)+0x78>
c001bf49:	83 ec 08             	sub    esp,0x8
c001bf4c:	81 c3 82 00 00 00    	add    ebx,0x82
c001bf52:	53                   	push   ebx
c001bf53:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bf56:	e8 b1 48 fe ff       	call   c000080c <strcpy>
c001bf5b:	83 c4 10             	add    esp,0x10
c001bf5e:	31 c0                	xor    eax,eax
c001bf60:	59                   	pop    ecx
c001bf61:	31 d2                	xor    edx,edx
c001bf63:	5b                   	pop    ebx
c001bf64:	5e                   	pop    esi
c001bf65:	c3                   	ret    
c001bf66:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bf6b:	74 bb                	je     c001bf28 <sysCallTTYName(regs*)+0x16>
c001bf6d:	83 ec 0c             	sub    esp,0xc
c001bf70:	50                   	push   eax
c001bf71:	e8 99 54 ff ff       	call   c001140f <getFromFileDescriptor(int)>
c001bf76:	83 c4 10             	add    esp,0x10
c001bf79:	89 c3                	mov    ebx,eax
c001bf7b:	85 db                	test   ebx,ebx
c001bf7d:	75 bb                	jne    c001bf3a <sysCallTTYName(regs*)+0x28>
c001bf7f:	59                   	pop    ecx
c001bf80:	b8 01 00 00 00       	mov    eax,0x1
c001bf85:	31 d2                	xor    edx,edx
c001bf87:	5b                   	pop    ebx
c001bf88:	5e                   	pop    esi
c001bf89:	c3                   	ret    
c001bf8a:	59                   	pop    ecx
c001bf8b:	b8 02 00 00 00       	mov    eax,0x2
c001bf90:	31 d2                	xor    edx,edx
c001bf92:	5b                   	pop    ebx
c001bf93:	5e                   	pop    esi
c001bf94:	c3                   	ret    

c001bf95 <sysCallUSleep(regs*)>:
c001bf95:	83 ec 14             	sub    esp,0x14
c001bf98:	b8 e8 03 00 00       	mov    eax,0x3e8
c001bf9d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bfa1:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001bfa8:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001bfab:	01 ca                	add    edx,ecx
c001bfad:	52                   	push   edx
c001bfae:	50                   	push   eax
c001bfaf:	e8 a3 24 00 00       	call   c001e457 <nanoSleep(unsigned long long)>
c001bfb4:	31 c0                	xor    eax,eax
c001bfb6:	31 d2                	xor    edx,edx
c001bfb8:	83 c4 1c             	add    esp,0x1c
c001bfbb:	c3                   	ret    

c001bfbc <sysCallSpawn(regs*)>:
c001bfbc:	56                   	push   esi
c001bfbd:	53                   	push   ebx
c001bfbe:	50                   	push   eax
c001bfbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bfc3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001bfc6:	85 c0                	test   eax,eax
c001bfc8:	75 08                	jne    c001bfd2 <sysCallSpawn(regs*)+0x16>
c001bfca:	59                   	pop    ecx
c001bfcb:	31 c0                	xor    eax,eax
c001bfcd:	31 d2                	xor    edx,edx
c001bfcf:	5b                   	pop    ebx
c001bfd0:	5e                   	pop    esi
c001bfd1:	c3                   	ret    
c001bfd2:	83 ec 08             	sub    esp,0x8
c001bfd5:	50                   	push   eax
c001bfd6:	68 e3 c8 02 c0       	push   0xc002c8e3
c001bfdb:	e8 8b 69 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001bfe0:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c001bfe7:	e8 a0 38 ff ff       	call   c000f88c <malloc>
c001bfec:	83 c4 10             	add    esp,0x10
c001bfef:	89 c6                	mov    esi,eax
c001bff1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001bff4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bff7:	85 c0                	test   eax,eax
c001bff9:	75 32                	jne    c001c02d <sysCallSpawn(regs*)+0x71>
c001bffb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c000:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c003:	52                   	push   edx
c001c004:	50                   	push   eax
c001c005:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c008:	56                   	push   esi
c001c009:	e8 26 1b 00 00       	call   c001db34 <Process::Process(char const*, Process*, char**)>
c001c00e:	83 c4 10             	add    esp,0x10
c001c011:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c018:	75 b0                	jne    c001bfca <sysCallSpawn(regs*)+0xe>
c001c01a:	83 ec 0c             	sub    esp,0xc
c001c01d:	56                   	push   esi
c001c01e:	e8 f3 1f 00 00       	call   c001e016 <Process::createUserThread()>
c001c023:	8b 06                	mov    eax,DWORD PTR [esi]
c001c025:	83 c4 10             	add    esp,0x10
c001c028:	99                   	cdq    
c001c029:	59                   	pop    ecx
c001c02a:	5b                   	pop    ebx
c001c02b:	5e                   	pop    esi
c001c02c:	c3                   	ret    
c001c02d:	31 c0                	xor    eax,eax
c001c02f:	eb d2                	jmp    c001c003 <sysCallSpawn(regs*)+0x47>

c001c031 <sysCallGetEnv(regs*)>:
c001c031:	55                   	push   ebp
c001c032:	57                   	push   edi
c001c033:	56                   	push   esi
c001c034:	53                   	push   ebx
c001c035:	83 ec 28             	sub    esp,0x28
c001c038:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c03c:	68 f1 c8 02 c0       	push   0xc002c8f1
c001c041:	e8 25 69 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001c046:	5f                   	pop    edi
c001c047:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c04a:	5d                   	pop    ebp
c001c04b:	53                   	push   ebx
c001c04c:	68 1e cc 02 c0       	push   0xc002cc1e
c001c051:	e8 15 69 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001c056:	58                   	pop    eax
c001c057:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c05a:	5a                   	pop    edx
c001c05b:	57                   	push   edi
c001c05c:	68 fa c8 02 c0       	push   0xc002c8fa
c001c061:	e8 05 69 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001c066:	59                   	pop    ecx
c001c067:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c06c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c06f:	e8 49 e2 ff ff       	call   c001a2bd <Krnl::getProcessTotalEnvCount(Process*)>
c001c074:	5a                   	pop    edx
c001c075:	89 c5                	mov    ebp,eax
c001c077:	59                   	pop    ecx
c001c078:	50                   	push   eax
c001c079:	68 04 c9 02 c0       	push   0xc002c904
c001c07e:	e8 e8 68 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001c083:	83 c4 10             	add    esp,0x10
c001c086:	39 ef                	cmp    edi,ebp
c001c088:	7c 15                	jl     c001c09f <sysCallGetEnv(regs*)+0x6e>
c001c08a:	85 db                	test   ebx,ebx
c001c08c:	75 0c                	jne    c001c09a <sysCallGetEnv(regs*)+0x69>
c001c08e:	83 c4 1c             	add    esp,0x1c
c001c091:	31 c0                	xor    eax,eax
c001c093:	5b                   	pop    ebx
c001c094:	31 d2                	xor    edx,edx
c001c096:	5e                   	pop    esi
c001c097:	5f                   	pop    edi
c001c098:	5d                   	pop    ebp
c001c099:	c3                   	ret    
c001c09a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c09d:	eb ef                	jmp    c001c08e <sysCallGetEnv(regs*)+0x5d>
c001c09f:	83 ec 0c             	sub    esp,0xc
c001c0a2:	68 10 c9 02 c0       	push   0xc002c910
c001c0a7:	e8 bf 68 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001c0ac:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c0b0:	83 c4 0c             	add    esp,0xc
c001c0b3:	57                   	push   edi
c001c0b4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c0ba:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c0bd:	50                   	push   eax
c001c0be:	e8 1a e2 ff ff       	call   c001a2dd <Krnl::getProcessEnvPair(Process*, int)>
c001c0c3:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c0c7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c0cb:	68 cf cc 02 c0       	push   0xc002cccf
c001c0d0:	e8 96 68 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001c0d5:	83 c4 10             	add    esp,0x10
c001c0d8:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c0db:	85 f6                	test   esi,esi
c001c0dd:	75 47                	jne    c001c126 <sysCallGetEnv(regs*)+0xf5>
c001c0df:	83 ec 0c             	sub    esp,0xc
c001c0e2:	55                   	push   ebp
c001c0e3:	e8 84 46 fe ff       	call   c000076c <strlen>
c001c0e8:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c0eb:	89 c3                	mov    ebx,eax
c001c0ed:	e8 7a 46 fe ff       	call   c000076c <strlen>
c001c0f2:	5a                   	pop    edx
c001c0f3:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c0f7:	59                   	pop    ecx
c001c0f8:	50                   	push   eax
c001c0f9:	68 13 c9 02 c0       	push   0xc002c913
c001c0fe:	e8 68 68 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001c103:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c106:	e8 61 46 fe ff       	call   c000076c <strlen>
c001c10b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c10e:	89 c3                	mov    ebx,eax
c001c110:	e8 57 46 fe ff       	call   c000076c <strlen>
c001c115:	83 c4 10             	add    esp,0x10
c001c118:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c11c:	83 c4 1c             	add    esp,0x1c
c001c11f:	31 d2                	xor    edx,edx
c001c121:	5b                   	pop    ebx
c001c122:	5e                   	pop    esi
c001c123:	5f                   	pop    edi
c001c124:	5d                   	pop    ebp
c001c125:	c3                   	ret    
c001c126:	83 ec 0c             	sub    esp,0xc
c001c129:	68 e9 cc 02 c0       	push   0xc002cce9
c001c12e:	e8 38 68 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001c133:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c136:	58                   	pop    eax
c001c137:	5a                   	pop    edx
c001c138:	55                   	push   ebp
c001c139:	53                   	push   ebx
c001c13a:	e8 cd 46 fe ff       	call   c000080c <strcpy>
c001c13f:	59                   	pop    ecx
c001c140:	5e                   	pop    esi
c001c141:	68 1d c9 02 c0       	push   0xc002c91d
c001c146:	53                   	push   ebx
c001c147:	e8 00 48 fe ff       	call   c000094c <strcat>
c001c14c:	5d                   	pop    ebp
c001c14d:	58                   	pop    eax
c001c14e:	57                   	push   edi
c001c14f:	53                   	push   ebx
c001c150:	e8 f7 47 fe ff       	call   c000094c <strcat>
c001c155:	c7 04 24 03 cd 02 c0 	mov    DWORD PTR [esp],0xc002cd03
c001c15c:	e8 0a 68 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001c161:	83 c4 10             	add    esp,0x10
c001c164:	e9 25 ff ff ff       	jmp    c001c08e <sysCallGetEnv(regs*)+0x5d>

c001c169 <sysAppSettings(regs*)>:
c001c169:	57                   	push   edi
c001c16a:	56                   	push   esi
c001c16b:	56                   	push   esi
c001c16c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c170:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c173:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001c179:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c17e:	66 3d c0 09          	cmp    ax,0x9c0
c001c182:	75 2e                	jne    c001c1b2 <sysAppSettings(regs*)+0x49>
c001c184:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001c18a:	83 e0 1f             	and    eax,0x1f
c001c18d:	3c 01                	cmp    al,0x1
c001c18f:	74 2c                	je     c001c1bd <sysAppSettings(regs*)+0x54>
c001c191:	3c 07                	cmp    al,0x7
c001c193:	0f 84 b3 00 00 00    	je     c001c24c <sysAppSettings(regs*)+0xe3>
c001c199:	84 c0                	test   al,al
c001c19b:	0f 84 d2 00 00 00    	je     c001c273 <sysAppSettings(regs*)+0x10a>
c001c1a1:	3c 08                	cmp    al,0x8
c001c1a3:	74 63                	je     c001c208 <sysAppSettings(regs*)+0x9f>
c001c1a5:	59                   	pop    ecx
c001c1a6:	0f b6 c0             	movzx  eax,al
c001c1a9:	5e                   	pop    esi
c001c1aa:	05 e8 03 00 00       	add    eax,0x3e8
c001c1af:	5f                   	pop    edi
c001c1b0:	99                   	cdq    
c001c1b1:	c3                   	ret    
c001c1b2:	b8 01 00 00 00       	mov    eax,0x1
c001c1b7:	59                   	pop    ecx
c001c1b8:	31 d2                	xor    edx,edx
c001c1ba:	5e                   	pop    esi
c001c1bb:	5f                   	pop    edi
c001c1bc:	c3                   	ret    
c001c1bd:	50                   	push   eax
c001c1be:	68 00 01 00 00       	push   0x100
c001c1c3:	6a 00                	push   0x0
c001c1c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1ca:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1cd:	83 c0 0c             	add    eax,0xc
c001c1d0:	50                   	push   eax
c001c1d1:	e8 7a 45 fe ff       	call   c0000750 <memset>
c001c1d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1db:	b9 ff 00 00 00       	mov    ecx,0xff
c001c1e0:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001c1e3:	83 c7 0c             	add    edi,0xc
c001c1e6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c1e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1ed:	5a                   	pop    edx
c001c1ee:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1f1:	59                   	pop    ecx
c001c1f2:	8d 50 0c             	lea    edx,[eax+0xc]
c001c1f5:	52                   	push   edx
c001c1f6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c1fc:	e8 79 42 ff ff       	call   c001047a <VgaText::setTitle(char*)>
c001c201:	83 c4 10             	add    esp,0x10
c001c204:	31 c0                	xor    eax,eax
c001c206:	eb af                	jmp    c001c1b7 <sysAppSettings(regs*)+0x4e>
c001c208:	83 ec 08             	sub    esp,0x8
c001c20b:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c211:	83 e0 0f             	and    eax,0xf
c001c214:	50                   	push   eax
c001c215:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c21a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c21d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c223:	e8 42 42 ff ff       	call   c001046a <VgaText::setTitleColour(VgaColour)>
c001c228:	5f                   	pop    edi
c001c229:	58                   	pop    eax
c001c22a:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c230:	c1 e8 04             	shr    eax,0x4
c001c233:	83 e0 0f             	and    eax,0xf
c001c236:	50                   	push   eax
c001c237:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c23c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c23f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c245:	e8 10 42 ff ff       	call   c001045a <VgaText::setTitleTextColour(VgaColour)>
c001c24a:	eb b5                	jmp    c001c201 <sysAppSettings(regs*)+0x98>
c001c24c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c251:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c254:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c25a:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001c260:	c0 e8 06             	shr    al,0x6
c001c263:	83 e0 01             	and    eax,0x1
c001c266:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001c26c:	31 c0                	xor    eax,eax
c001c26e:	e9 44 ff ff ff       	jmp    c001c1b7 <sysAppSettings(regs*)+0x4e>
c001c273:	b8 02 00 00 00       	mov    eax,0x2
c001c278:	e9 3a ff ff ff       	jmp    c001c1b7 <sysAppSettings(regs*)+0x4e>

c001c27d <sysSetFatAttrib(regs*)>:
c001c27d:	57                   	push   edi
c001c27e:	56                   	push   esi
c001c27f:	53                   	push   ebx
c001c280:	83 ec 1c             	sub    esp,0x1c
c001c283:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c287:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c28a:	68 14 01 00 00       	push   0x114
c001c28f:	e8 f8 35 ff ff       	call   c000f88c <malloc>
c001c294:	83 c4 0c             	add    esp,0xc
c001c297:	89 c3                	mov    ebx,eax
c001c299:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c29e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c2a1:	57                   	push   edi
c001c2a2:	53                   	push   ebx
c001c2a3:	e8 22 6c ff ff       	call   c0012eca <File::File(char const*, Process*)>
c001c2a8:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c2ab:	83 c4 0c             	add    esp,0xc
c001c2ae:	0f b6 d4             	movzx  edx,ah
c001c2b1:	0f b6 c0             	movzx  eax,al
c001c2b4:	52                   	push   edx
c001c2b5:	50                   	push   eax
c001c2b6:	53                   	push   ebx
c001c2b7:	e8 84 6e ff ff       	call   c0013140 <File::chfatattr(unsigned char, unsigned char)>
c001c2bc:	83 c4 10             	add    esp,0x10
c001c2bf:	85 db                	test   ebx,ebx
c001c2c1:	74 14                	je     c001c2d7 <sysSetFatAttrib(regs*)+0x5a>
c001c2c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c2c7:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c2c9:	83 ec 0c             	sub    esp,0xc
c001c2cc:	53                   	push   ebx
c001c2cd:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c2d0:	83 c4 10             	add    esp,0x10
c001c2d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c2d7:	85 c0                	test   eax,eax
c001c2d9:	0f 95 c0             	setne  al
c001c2dc:	31 d2                	xor    edx,edx
c001c2de:	0f b6 c0             	movzx  eax,al
c001c2e1:	f7 d8                	neg    eax
c001c2e3:	83 d2 00             	adc    edx,0x0
c001c2e6:	83 c4 10             	add    esp,0x10
c001c2e9:	f7 da                	neg    edx
c001c2eb:	5b                   	pop    ebx
c001c2ec:	5e                   	pop    esi
c001c2ed:	5f                   	pop    edi
c001c2ee:	c3                   	ret    

c001c2ef <sysPipe(regs*)>:
c001c2ef:	57                   	push   edi
c001c2f0:	56                   	push   esi
c001c2f1:	53                   	push   ebx
c001c2f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2f6:	83 ec 0c             	sub    esp,0xc
c001c2f9:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c2fc:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c2ff:	6a 20                	push   0x20
c001c301:	e8 86 35 ff ff       	call   c000f88c <malloc>
c001c306:	89 c3                	mov    ebx,eax
c001c308:	58                   	pop    eax
c001c309:	5a                   	pop    edx
c001c30a:	68 00 50 00 00       	push   0x5000
c001c30f:	53                   	push   ebx
c001c310:	e8 9d 3e ff ff       	call   c00101b2 <Pipe::Pipe(int)>
c001c315:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c318:	e8 fd 4d ff ff       	call   c001111a <UnixFile::getFileDescriptor()>
c001c31d:	89 07                	mov    DWORD PTR [edi],eax
c001c31f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c322:	e8 f3 4d ff ff       	call   c001111a <UnixFile::getFileDescriptor()>
c001c327:	83 c4 10             	add    esp,0x10
c001c32a:	89 06                	mov    DWORD PTR [esi],eax
c001c32c:	31 d2                	xor    edx,edx
c001c32e:	5b                   	pop    ebx
c001c32f:	31 c0                	xor    eax,eax
c001c331:	5e                   	pop    esi
c001c332:	5f                   	pop    edi
c001c333:	c3                   	ret    

c001c334 <sysGetUnixTime(regs*)>:
c001c334:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c001c339:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c33f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c343:	e9 74 75 ff ff       	jmp    c00138bc <Clock::timeInSecondsLocal()>

c001c348 <string_ends_with(char const*, char const*)>:
c001c348:	57                   	push   edi
c001c349:	56                   	push   esi
c001c34a:	53                   	push   ebx
c001c34b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c34f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c353:	83 ec 0c             	sub    esp,0xc
c001c356:	53                   	push   ebx
c001c357:	e8 10 44 fe ff       	call   c000076c <strlen>
c001c35c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c35f:	89 c6                	mov    esi,eax
c001c361:	e8 06 44 fe ff       	call   c000076c <strlen>
c001c366:	83 c4 10             	add    esp,0x10
c001c369:	39 c6                	cmp    esi,eax
c001c36b:	7d 06                	jge    c001c373 <string_ends_with(char const*, char const*)+0x2b>
c001c36d:	5b                   	pop    ebx
c001c36e:	31 c0                	xor    eax,eax
c001c370:	5e                   	pop    esi
c001c371:	5f                   	pop    edi
c001c372:	c3                   	ret    
c001c373:	83 ec 08             	sub    esp,0x8
c001c376:	29 c6                	sub    esi,eax
c001c378:	57                   	push   edi
c001c379:	01 f3                	add    ebx,esi
c001c37b:	53                   	push   ebx
c001c37c:	e8 17 45 fe ff       	call   c0000898 <strcmp>
c001c381:	83 c4 10             	add    esp,0x10
c001c384:	85 c0                	test   eax,eax
c001c386:	5b                   	pop    ebx
c001c387:	0f 94 c0             	sete   al
c001c38a:	5e                   	pop    esi
c001c38b:	0f b6 c0             	movzx  eax,al
c001c38e:	5f                   	pop    edi
c001c38f:	c3                   	ret    

c001c390 <sysCallOpen(regs*)>:
c001c390:	56                   	push   esi
c001c391:	53                   	push   ebx
c001c392:	81 ec 04 01 00 00    	sub    esp,0x104
c001c398:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c39f:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c3a2:	85 c9                	test   ecx,ecx
c001c3a4:	0f 84 b3 00 00 00    	je     c001c45d <sysCallOpen(regs*)+0xcd>
c001c3aa:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c3ad:	85 c0                	test   eax,eax
c001c3af:	0f 84 a8 00 00 00    	je     c001c45d <sysCallOpen(regs*)+0xcd>
c001c3b5:	52                   	push   edx
c001c3b6:	68 1f c9 02 c0       	push   0xc002c91f
c001c3bb:	50                   	push   eax
c001c3bc:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c3c0:	56                   	push   esi
c001c3c1:	e8 5a 69 ff ff       	call   c0012d20 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c3c6:	89 34 24             	mov    DWORD PTR [esp],esi
c001c3c9:	e8 9e 43 fe ff       	call   c000076c <strlen>
c001c3ce:	83 c4 10             	add    esp,0x10
c001c3d1:	48                   	dec    eax
c001c3d2:	74 1d                	je     c001c3f1 <sysCallOpen(regs*)+0x61>
c001c3d4:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c3d7:	eb 0f                	jmp    c001c3e8 <sysCallOpen(regs*)+0x58>
c001c3d9:	80 fa 3a             	cmp    dl,0x3a
c001c3dc:	74 0f                	je     c001c3ed <sysCallOpen(regs*)+0x5d>
c001c3de:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c3e2:	48                   	dec    eax
c001c3e3:	74 0c                	je     c001c3f1 <sysCallOpen(regs*)+0x61>
c001c3e5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c3e8:	80 fa 2e             	cmp    dl,0x2e
c001c3eb:	75 ec                	jne    c001c3d9 <sysCallOpen(regs*)+0x49>
c001c3ed:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c3f1:	83 ec 08             	sub    esp,0x8
c001c3f4:	68 23 c9 02 c0       	push   0xc002c923
c001c3f9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c3fc:	e8 47 ff ff ff       	call   c001c348 <string_ends_with(char const*, char const*)>
c001c401:	83 c4 10             	add    esp,0x10
c001c404:	85 c0                	test   eax,eax
c001c406:	75 17                	jne    c001c41f <sysCallOpen(regs*)+0x8f>
c001c408:	83 ec 08             	sub    esp,0x8
c001c40b:	68 44 c9 02 c0       	push   0xc002c944
c001c410:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c413:	e8 30 ff ff ff       	call   c001c348 <string_ends_with(char const*, char const*)>
c001c418:	83 c4 10             	add    esp,0x10
c001c41b:	85 c0                	test   eax,eax
c001c41d:	74 51                	je     c001c470 <sysCallOpen(regs*)+0xe0>
c001c41f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c422:	83 ec 08             	sub    esp,0x8
c001c425:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c42b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c432:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c435:	ff 30                	push   DWORD PTR [eax]
c001c437:	68 28 c9 02 c0       	push   0xc002c928
c001c43c:	e8 2a 65 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001c441:	c7 04 24 37 c9 02 c0 	mov    DWORD PTR [esp],0xc002c937
c001c448:	e8 1e 65 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001c44d:	83 c4 10             	add    esp,0x10
c001c450:	81 c4 04 01 00 00    	add    esp,0x104
c001c456:	31 c0                	xor    eax,eax
c001c458:	31 d2                	xor    edx,edx
c001c45a:	5b                   	pop    ebx
c001c45b:	5e                   	pop    esi
c001c45c:	c3                   	ret    
c001c45d:	81 c4 04 01 00 00    	add    esp,0x104
c001c463:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c468:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c46d:	5b                   	pop    ebx
c001c46e:	5e                   	pop    esi
c001c46f:	c3                   	ret    
c001c470:	83 ec 08             	sub    esp,0x8
c001c473:	68 24 c9 02 c0       	push   0xc002c924
c001c478:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c47b:	e8 18 44 fe ff       	call   c0000898 <strcmp>
c001c480:	83 c4 10             	add    esp,0x10
c001c483:	85 c0                	test   eax,eax
c001c485:	74 98                	je     c001c41f <sysCallOpen(regs*)+0x8f>
c001c487:	83 ec 08             	sub    esp,0x8
c001c48a:	68 23 c9 02 c0       	push   0xc002c923
c001c48f:	56                   	push   esi
c001c490:	e8 b3 fe ff ff       	call   c001c348 <string_ends_with(char const*, char const*)>
c001c495:	83 c4 10             	add    esp,0x10
c001c498:	85 c0                	test   eax,eax
c001c49a:	75 83                	jne    c001c41f <sysCallOpen(regs*)+0x8f>
c001c49c:	83 ec 08             	sub    esp,0x8
c001c49f:	68 49 c9 02 c0       	push   0xc002c949
c001c4a4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4a7:	e8 9c fe ff ff       	call   c001c348 <string_ends_with(char const*, char const*)>
c001c4ac:	83 c4 10             	add    esp,0x10
c001c4af:	85 c0                	test   eax,eax
c001c4b1:	0f 85 d9 00 00 00    	jne    c001c590 <sysCallOpen(regs*)+0x200>
c001c4b7:	83 ec 08             	sub    esp,0x8
c001c4ba:	68 4e c9 02 c0       	push   0xc002c94e
c001c4bf:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4c2:	e8 81 fe ff ff       	call   c001c348 <string_ends_with(char const*, char const*)>
c001c4c7:	83 c4 10             	add    esp,0x10
c001c4ca:	85 c0                	test   eax,eax
c001c4cc:	0f 85 be 00 00 00    	jne    c001c590 <sysCallOpen(regs*)+0x200>
c001c4d2:	83 ec 08             	sub    esp,0x8
c001c4d5:	68 4a c9 02 c0       	push   0xc002c94a
c001c4da:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4dd:	e8 b6 43 fe ff       	call   c0000898 <strcmp>
c001c4e2:	83 c4 10             	add    esp,0x10
c001c4e5:	85 c0                	test   eax,eax
c001c4e7:	0f 84 a3 00 00 00    	je     c001c590 <sysCallOpen(regs*)+0x200>
c001c4ed:	83 ec 08             	sub    esp,0x8
c001c4f0:	68 49 c9 02 c0       	push   0xc002c949
c001c4f5:	56                   	push   esi
c001c4f6:	e8 4d fe ff ff       	call   c001c348 <string_ends_with(char const*, char const*)>
c001c4fb:	83 c4 10             	add    esp,0x10
c001c4fe:	85 c0                	test   eax,eax
c001c500:	0f 85 8a 00 00 00    	jne    c001c590 <sysCallOpen(regs*)+0x200>
c001c506:	83 ec 0c             	sub    esp,0xc
c001c509:	68 14 01 00 00       	push   0x114
c001c50e:	e8 79 33 ff ff       	call   c000f88c <malloc>
c001c513:	83 c4 0c             	add    esp,0xc
c001c516:	89 c6                	mov    esi,eax
c001c518:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c51d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c520:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c523:	56                   	push   esi
c001c524:	e8 a1 69 ff ff       	call   c0012eca <File::File(char const*, Process*)>
c001c529:	83 c4 10             	add    esp,0x10
c001c52c:	85 f6                	test   esi,esi
c001c52e:	0f 84 29 ff ff ff    	je     c001c45d <sysCallOpen(regs*)+0xcd>
c001c534:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c537:	0f b6 c2             	movzx  eax,dl
c001c53a:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c53d:	89 d0                	mov    eax,edx
c001c53f:	83 e0 01             	and    eax,0x1
c001c542:	f6 c2 02             	test   dl,0x2
c001c545:	74 03                	je     c001c54a <sysCallOpen(regs*)+0x1ba>
c001c547:	83 c8 02             	or     eax,0x2
c001c54a:	f6 c2 04             	test   dl,0x4
c001c54d:	74 03                	je     c001c552 <sysCallOpen(regs*)+0x1c2>
c001c54f:	83 c8 04             	or     eax,0x4
c001c552:	f6 c2 08             	test   dl,0x8
c001c555:	74 03                	je     c001c55a <sysCallOpen(regs*)+0x1ca>
c001c557:	83 c8 0a             	or     eax,0xa
c001c55a:	83 e2 10             	and    edx,0x10
c001c55d:	74 03                	je     c001c562 <sysCallOpen(regs*)+0x1d2>
c001c55f:	83 c8 12             	or     eax,0x12
c001c562:	83 ec 08             	sub    esp,0x8
c001c565:	50                   	push   eax
c001c566:	56                   	push   esi
c001c567:	e8 c2 69 ff ff       	call   c0012f2e <File::open(FileOpenMode)>
c001c56c:	83 c4 10             	add    esp,0x10
c001c56f:	85 c0                	test   eax,eax
c001c571:	0f 85 e6 fe ff ff    	jne    c001c45d <sysCallOpen(regs*)+0xcd>
c001c577:	83 ec 0c             	sub    esp,0xc
c001c57a:	56                   	push   esi
c001c57b:	e8 9a 4b ff ff       	call   c001111a <UnixFile::getFileDescriptor()>
c001c580:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c583:	89 02                	mov    DWORD PTR [edx],eax
c001c585:	c1 f8 1f             	sar    eax,0x1f
c001c588:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c58b:	e9 bd fe ff ff       	jmp    c001c44d <sysCallOpen(regs*)+0xbd>
c001c590:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c593:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c599:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c5a0:	e9 ab fe ff ff       	jmp    c001c450 <sysCallOpen(regs*)+0xc0>

c001c5a5 <Sys::loadSyscalls()>:
c001c5a5:	c7 05 20 1c 03 c0 95 b6 01 c0 	mov    DWORD PTR ds:0xc0031c20,0xc001b695
c001c5af:	c7 05 24 1c 03 c0 fa b1 01 c0 	mov    DWORD PTR ds:0xc0031c24,0xc001b1fa
c001c5b9:	c7 05 28 1c 03 c0 e8 b3 01 c0 	mov    DWORD PTR ds:0xc0031c28,0xc001b3e8
c001c5c3:	c7 05 2c 1c 03 c0 cb b5 01 c0 	mov    DWORD PTR ds:0xc0031c2c,0xc001b5cb
c001c5cd:	c7 05 30 1c 03 c0 80 b3 01 c0 	mov    DWORD PTR ds:0xc0031c30,0xc001b380
c001c5d7:	c7 05 34 1c 03 c0 31 b2 01 c0 	mov    DWORD PTR ds:0xc0031c34,0xc001b231
c001c5e1:	c7 05 38 1c 03 c0 12 b2 01 c0 	mov    DWORD PTR ds:0xc0031c38,0xc001b212
c001c5eb:	c7 05 3c 1c 03 c0 3d b4 01 c0 	mov    DWORD PTR ds:0xc0031c3c,0xc001b43d
c001c5f5:	c7 05 44 1c 03 c0 d0 bb 01 c0 	mov    DWORD PTR ds:0xc0031c44,0xc001bbd0
c001c5ff:	c7 05 40 1c 03 c0 90 c3 01 c0 	mov    DWORD PTR ds:0xc0031c40,0xc001c390
c001c609:	c7 05 48 1c 03 c0 58 bc 01 c0 	mov    DWORD PTR ds:0xc0031c48,0xc001bc58
c001c613:	c7 05 4c 1c 03 c0 bf b8 01 c0 	mov    DWORD PTR ds:0xc0031c4c,0xc001b8bf
c001c61d:	c7 05 50 1c 03 c0 db b6 01 c0 	mov    DWORD PTR ds:0xc0031c50,0xc001b6db
c001c627:	c7 05 54 1c 03 c0 e0 b6 01 c0 	mov    DWORD PTR ds:0xc0031c54,0xc001b6e0
c001c631:	c7 05 58 1c 03 c0 33 bd 01 c0 	mov    DWORD PTR ds:0xc0031c58,0xc001bd33
c001c63b:	c7 05 5c 1c 03 c0 cd bc 01 c0 	mov    DWORD PTR ds:0xc0031c5c,0xc001bccd
c001c645:	c7 05 60 1c 03 c0 a7 b9 01 c0 	mov    DWORD PTR ds:0xc0031c60,0xc001b9a7
c001c64f:	c7 05 64 1c 03 c0 10 ba 01 c0 	mov    DWORD PTR ds:0xc0031c64,0xc001ba10
c001c659:	c7 05 68 1c 03 c0 8d ba 01 c0 	mov    DWORD PTR ds:0xc0031c68,0xc001ba8d
c001c663:	c7 05 6c 1c 03 c0 e5 b6 01 c0 	mov    DWORD PTR ds:0xc0031c6c,0xc001b6e5
c001c66d:	c7 05 70 1c 03 c0 a3 bd 01 c0 	mov    DWORD PTR ds:0xc0031c70,0xc001bda3
c001c677:	c7 05 74 1c 03 c0 bd bd 01 c0 	mov    DWORD PTR ds:0xc0031c74,0xc001bdbd
c001c681:	c7 05 78 1c 03 c0 bd bd 01 c0 	mov    DWORD PTR ds:0xc0031c78,0xc001bdbd
c001c68b:	c7 05 7c 1c 03 c0 fe bd 01 c0 	mov    DWORD PTR ds:0xc0031c7c,0xc001bdfe
c001c695:	c7 05 80 1c 03 c0 62 be 01 c0 	mov    DWORD PTR ds:0xc0031c80,0xc001be62
c001c69f:	c7 05 84 1c 03 c0 91 b8 01 c0 	mov    DWORD PTR ds:0xc0031c84,0xc001b891
c001c6a9:	c7 05 88 1c 03 c0 c6 be 01 c0 	mov    DWORD PTR ds:0xc0031c88,0xc001bec6
c001c6b3:	c7 05 8c 1c 03 c0 4e b8 01 c0 	mov    DWORD PTR ds:0xc0031c8c,0xc001b84e
c001c6bd:	c7 05 90 1c 03 c0 12 bf 01 c0 	mov    DWORD PTR ds:0xc0031c90,0xc001bf12
c001c6c7:	c7 05 94 1c 03 c0 4d b9 01 c0 	mov    DWORD PTR ds:0xc0031c94,0xc001b94d
c001c6d1:	c7 05 98 1c 03 c0 95 bf 01 c0 	mov    DWORD PTR ds:0xc0031c98,0xc001bf95
c001c6db:	c7 05 9c 1c 03 c0 10 bb 01 c0 	mov    DWORD PTR ds:0xc0031c9c,0xc001bb10
c001c6e5:	c7 05 a0 1c 03 c0 bc bf 01 c0 	mov    DWORD PTR ds:0xc0031ca0,0xc001bfbc
c001c6ef:	c7 05 a4 1c 03 c0 31 c0 01 c0 	mov    DWORD PTR ds:0xc0031ca4,0xc001c031
c001c6f9:	c7 05 a8 1c 03 c0 69 c1 01 c0 	mov    DWORD PTR ds:0xc0031ca8,0xc001c169
c001c703:	c7 05 ac 1c 03 c0 ef b6 01 c0 	mov    DWORD PTR ds:0xc0031cac,0xc001b6ef
c001c70d:	c7 05 b0 1c 03 c0 59 b7 01 c0 	mov    DWORD PTR ds:0xc0031cb0,0xc001b759
c001c717:	c7 05 b4 1c 03 c0 9f b7 01 c0 	mov    DWORD PTR ds:0xc0031cb4,0xc001b79f
c001c721:	c7 05 b8 1c 03 c0 7d c2 01 c0 	mov    DWORD PTR ds:0xc0031cb8,0xc001c27d
c001c72b:	c7 05 bc 1c 03 c0 d8 bd 01 c0 	mov    DWORD PTR ds:0xc0031cbc,0xc001bdd8
c001c735:	c7 05 c0 1c 03 c0 f0 b7 01 c0 	mov    DWORD PTR ds:0xc0031cc0,0xc001b7f0
c001c73f:	c7 05 c4 1c 03 c0 ef c2 01 c0 	mov    DWORD PTR ds:0xc0031cc4,0xc001c2ef
c001c749:	c7 05 c8 1c 03 c0 34 c3 01 c0 	mov    DWORD PTR ds:0xc0031cc8,0xc001c334
c001c753:	c7 05 cc 1c 03 c0 d8 b2 01 c0 	mov    DWORD PTR ds:0xc0031ccc,0xc001b2d8
c001c75d:	c7 05 d0 1c 03 c0 59 b4 01 c0 	mov    DWORD PTR ds:0xc0031cd0,0xc001b459
c001c767:	c7 05 d4 1c 03 c0 81 b5 01 c0 	mov    DWORD PTR ds:0xc0031cd4,0xc001b581
c001c771:	c7 05 d8 1c 03 c0 c4 b1 01 c0 	mov    DWORD PTR ds:0xc0031cd8,0xc001b1c4
c001c77b:	c7 05 dc 1c 03 c0 33 b6 01 c0 	mov    DWORD PTR ds:0xc0031cdc,0xc001b633
c001c785:	c7 05 e0 1c 03 c0 3d b2 01 c0 	mov    DWORD PTR ds:0xc0031ce0,0xc001b23d
c001c78f:	c7 05 e4 1c 03 c0 54 b2 01 c0 	mov    DWORD PTR ds:0xc0031ce4,0xc001b254
c001c799:	c3                   	ret    

c001c79a <Sys::systemCall(regs*, void*)>:
c001c79a:	53                   	push   ebx
c001c79b:	83 ec 08             	sub    esp,0x8
c001c79e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c7a2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c7a5:	83 f8 7f             	cmp    eax,0x7f
c001c7a8:	77 16                	ja     c001c7c0 <Sys::systemCall(regs*, void*)+0x26>
c001c7aa:	8b 14 85 20 1c 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce3e0]
c001c7b1:	85 d2                	test   edx,edx
c001c7b3:	74 0b                	je     c001c7c0 <Sys::systemCall(regs*, void*)+0x26>
c001c7b5:	83 ec 0c             	sub    esp,0xc
c001c7b8:	53                   	push   ebx
c001c7b9:	ff d2                	call   edx
c001c7bb:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c7be:	eb 0d                	jmp    c001c7cd <Sys::systemCall(regs*, void*)+0x33>
c001c7c0:	52                   	push   edx
c001c7c1:	52                   	push   edx
c001c7c2:	50                   	push   eax
c001c7c3:	68 53 c9 02 c0       	push   0xc002c953
c001c7c8:	e8 9e 61 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001c7cd:	83 c4 10             	add    esp,0x10
c001c7d0:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c7d5:	31 d2                	xor    edx,edx
c001c7d7:	83 c4 08             	add    esp,0x8
c001c7da:	5b                   	pop    ebx
c001c7db:	c3                   	ret    

c001c7dc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c7dc:	55                   	push   ebp
c001c7dd:	57                   	push   edi
c001c7de:	56                   	push   esi
c001c7df:	53                   	push   ebx
c001c7e0:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c7e6:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c7ed:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c7f4:	85 c0                	test   eax,eax
c001c7f6:	0f 95 c1             	setne  cl
c001c7f9:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c801:	0f 94 c2             	sete   dl
c001c804:	84 d1                	test   cl,dl
c001c806:	74 23                	je     c001c82b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c808:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c80e:	74 1b                	je     c001c82b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c810:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c816:	89 da                	mov    edx,ebx
c001c818:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c81e:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c824:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c82b:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001c832:	05 ff 0f 00 00       	add    eax,0xfff
c001c837:	83 ec 0c             	sub    esp,0xc
c001c83a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c83e:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001c844:	c1 e8 0c             	shr    eax,0xc
c001c847:	89 fe                	mov    esi,edi
c001c849:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c84d:	c1 ee 0c             	shr    esi,0xc
c001c850:	6a 01                	push   0x1
c001c852:	e8 0e 4d ff ff       	call   c0011565 <Virt::allocateKernelVirtualPages(int)>
c001c857:	89 c5                	mov    ebp,eax
c001c859:	58                   	pop    eax
c001c85a:	5a                   	pop    edx
c001c85b:	56                   	push   esi
c001c85c:	68 d7 c9 02 c0       	push   0xc002c9d7
c001c861:	e8 05 61 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001c866:	59                   	pop    ecx
c001c867:	58                   	pop    eax
c001c868:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c86c:	68 e9 c9 02 c0       	push   0xc002c9e9
c001c871:	e8 f5 60 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001c876:	83 c4 10             	add    esp,0x10
c001c879:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001c87f:	0f 86 31 01 00 00    	jbe    c001c9b6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001c885:	c1 e6 0c             	shl    esi,0xc
c001c888:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c88b:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001c88e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c892:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001c899:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c89c:	01 df                	add    edi,ebx
c001c89e:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001c8a1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001c8a5:	0f 84 08 01 00 00    	je     c001c9b3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001c8ab:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001c8b1:	76 05                	jbe    c001c8b8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001c8b3:	bf 00 10 00 00       	mov    edi,0x1000
c001c8b8:	83 ec 0c             	sub    esp,0xc
c001c8bb:	31 d2                	xor    edx,edx
c001c8bd:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c8c4:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c8c6:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c8ca:	50                   	push   eax
c001c8cb:	8d 74 24 30          	lea    esi,[esp+0x30]
c001c8cf:	56                   	push   esi
c001c8d0:	52                   	push   edx
c001c8d1:	57                   	push   edi
c001c8d2:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c8d9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c8dc:	83 c4 20             	add    esp,0x20
c001c8df:	85 c0                	test   eax,eax
c001c8e1:	74 0a                	je     c001c8ed <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001c8e3:	53                   	push   ebx
c001c8e4:	53                   	push   ebx
c001c8e5:	50                   	push   eax
c001c8e6:	68 fb c9 02 c0       	push   0xc002c9fb
c001c8eb:	eb 0f                	jmp    c001c8fc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001c8ed:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001c8f1:	74 20                	je     c001c913 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001c8f3:	51                   	push   ecx
c001c8f4:	51                   	push   ecx
c001c8f5:	6a 00                	push   0x0
c001c8f7:	68 26 ca 02 c0       	push   0xc002ca26
c001c8fc:	e8 6a 60 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001c901:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c904:	e8 1c 51 ff ff       	call   c0011a25 <Virt::freeKernelVirtualPages(unsigned long)>
c001c909:	83 c4 10             	add    esp,0x10
c001c90c:	31 c0                	xor    eax,eax
c001c90e:	e9 68 01 00 00       	jmp    c001ca7b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001c913:	fa                   	cli    
c001c914:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c001c91a:	e8 0e 33 ff ff       	call   c000fc2d <Phys::allocatePage()>
c001c91f:	6a 07                	push   0x7
c001c921:	89 c7                	mov    edi,eax
c001c923:	55                   	push   ebp
c001c924:	50                   	push   eax
c001c925:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c92a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c92d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c933:	e8 64 54 ff ff       	call   c0011d9c <VAS::mapPage(unsigned long, unsigned long, int)>
c001c938:	83 c4 0c             	add    esp,0xc
c001c93b:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c942:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c948:	6a 00                	push   0x0
c001c94a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c94f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c952:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c958:	e8 99 52 ff ff       	call   c0011bf6 <VAS::mapOtherVASIn(bool, VAS*)>
c001c95d:	58                   	pop    eax
c001c95e:	5a                   	pop    edx
c001c95f:	68 07 0c 00 00       	push   0xc07
c001c964:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c968:	57                   	push   edi
c001c969:	89 ef                	mov    edi,ebp
c001c96b:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c972:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c978:	6a 00                	push   0x0
c001c97a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c97f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c982:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c988:	e8 cb 57 ff ff       	call   c0012158 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c98d:	b9 00 10 00 00       	mov    ecx,0x1000
c001c992:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c994:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001c999:	83 c4 20             	add    esp,0x20
c001c99c:	48                   	dec    eax
c001c99d:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001c9a2:	85 c0                	test   eax,eax
c001c9a4:	75 01                	jne    c001c9a7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c9a6:	fb                   	sti    
c001c9a7:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001c9ae:	e9 df fe ff ff       	jmp    c001c892 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001c9b3:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001c9b6:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c9be:	0f 86 a9 00 00 00    	jbe    c001ca6d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c9c4:	fa                   	cli    
c001c9c5:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c001c9cb:	51                   	push   ecx
c001c9cc:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c9d3:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9d9:	6a 00                	push   0x0
c001c9db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9e0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9e3:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9e9:	e8 08 52 ff ff       	call   c0011bf6 <VAS::mapOtherVASIn(bool, VAS*)>
c001c9ee:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c9f2:	c1 e6 0c             	shl    esi,0xc
c001c9f5:	01 de                	add    esi,ebx
c001c9f7:	83 c4 10             	add    esp,0x10
c001c9fa:	39 de                	cmp    esi,ebx
c001c9fc:	74 61                	je     c001ca5f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001c9fe:	e8 2a 32 ff ff       	call   c000fc2d <Phys::allocatePage()>
c001ca03:	6a 07                	push   0x7
c001ca05:	89 c7                	mov    edi,eax
c001ca07:	55                   	push   ebp
c001ca08:	50                   	push   eax
c001ca09:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca0e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca11:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca17:	e8 80 53 ff ff       	call   c0011d9c <VAS::mapPage(unsigned long, unsigned long, int)>
c001ca1c:	58                   	pop    eax
c001ca1d:	5a                   	pop    edx
c001ca1e:	68 07 0c 00 00       	push   0xc07
c001ca23:	53                   	push   ebx
c001ca24:	81 c3 00 10 00 00    	add    ebx,0x1000
c001ca2a:	57                   	push   edi
c001ca2b:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001ca32:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca38:	6a 00                	push   0x0
c001ca3a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca3f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca42:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca48:	e8 0b 57 ff ff       	call   c0012158 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ca4d:	83 c4 1c             	add    esp,0x1c
c001ca50:	68 00 10 00 00       	push   0x1000
c001ca55:	6a 00                	push   0x0
c001ca57:	55                   	push   ebp
c001ca58:	e8 f3 3c fe ff       	call   c0000750 <memset>
c001ca5d:	eb 98                	jmp    c001c9f7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001ca5f:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001ca64:	48                   	dec    eax
c001ca65:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001ca6a:	75 01                	jne    c001ca6d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001ca6c:	fb                   	sti    
c001ca6d:	83 ec 0c             	sub    esp,0xc
c001ca70:	55                   	push   ebp
c001ca71:	e8 af 4f ff ff       	call   c0011a25 <Virt::freeKernelVirtualPages(unsigned long)>
c001ca76:	83 c4 10             	add    esp,0x10
c001ca79:	b0 01                	mov    al,0x1
c001ca7b:	81 c4 2c 10 00 00    	add    esp,0x102c
c001ca81:	5b                   	pop    ebx
c001ca82:	5e                   	pop    esi
c001ca83:	5f                   	pop    edi
c001ca84:	5d                   	pop    ebp
c001ca85:	c3                   	ret    

c001ca86 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001ca86:	55                   	push   ebp
c001ca87:	57                   	push   edi
c001ca88:	56                   	push   esi
c001ca89:	53                   	push   ebx
c001ca8a:	83 ec 48             	sub    esp,0x48
c001ca8d:	68 14 01 00 00       	push   0x114
c001ca92:	e8 f5 2d ff ff       	call   c000f88c <malloc>
c001ca97:	83 c4 0c             	add    esp,0xc
c001ca9a:	89 c6                	mov    esi,eax
c001ca9c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001caa0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001caa4:	50                   	push   eax
c001caa5:	e8 20 64 ff ff       	call   c0012eca <File::File(char const*, Process*)>
c001caaa:	58                   	pop    eax
c001caab:	5a                   	pop    edx
c001caac:	6a 01                	push   0x1
c001caae:	56                   	push   esi
c001caaf:	e8 7a 64 ff ff       	call   c0012f2e <File::open(FileOpenMode)>
c001cab4:	83 c4 10             	add    esp,0x10
c001cab7:	85 c0                	test   eax,eax
c001cab9:	0f 85 47 01 00 00    	jne    c001cc06 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cabf:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001cac7:	83 ec 0c             	sub    esp,0xc
c001caca:	6a 34                	push   0x34
c001cacc:	e8 bb 2d ff ff       	call   c000f88c <malloc>
c001cad1:	89 c3                	mov    ebx,eax
c001cad3:	58                   	pop    eax
c001cad4:	8b 06                	mov    eax,DWORD PTR [esi]
c001cad6:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001cada:	57                   	push   edi
c001cadb:	53                   	push   ebx
c001cadc:	6a 00                	push   0x0
c001cade:	6a 34                	push   0x34
c001cae0:	56                   	push   esi
c001cae1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cae4:	83 c4 20             	add    esp,0x20
c001cae7:	85 c0                	test   eax,eax
c001cae9:	0f 85 17 01 00 00    	jne    c001cc06 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001caef:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001caf5:	0f 85 0b 01 00 00    	jne    c001cc06 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cafb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001cafe:	85 c0                	test   eax,eax
c001cb00:	0f 84 00 01 00 00    	je     c001cc06 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb06:	31 d2                	xor    edx,edx
c001cb08:	55                   	push   ebp
c001cb09:	52                   	push   edx
c001cb0a:	50                   	push   eax
c001cb0b:	56                   	push   esi
c001cb0c:	e8 db 64 ff ff       	call   c0012fec <File::seek(unsigned long long)>
c001cb11:	83 c4 10             	add    esp,0x10
c001cb14:	85 c0                	test   eax,eax
c001cb16:	0f 85 ea 00 00 00    	jne    c001cc06 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb1c:	83 ec 0c             	sub    esp,0xc
c001cb1f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001cb22:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cb26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cb2a:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cb2e:	0f af c2             	imul   eax,edx
c001cb31:	50                   	push   eax
c001cb32:	e8 55 2d ff ff       	call   c000f88c <malloc>
c001cb37:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cb39:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cb3d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cb40:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cb44:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cb48:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cb4c:	0f af c2             	imul   eax,edx
c001cb4f:	99                   	cdq    
c001cb50:	52                   	push   edx
c001cb51:	50                   	push   eax
c001cb52:	56                   	push   esi
c001cb53:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb56:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001cb59:	83 c4 20             	add    esp,0x20
c001cb5c:	85 c0                	test   eax,eax
c001cb5e:	0f 84 a2 00 00 00    	je     c001cc06 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb64:	31 d2                	xor    edx,edx
c001cb66:	51                   	push   ecx
c001cb67:	52                   	push   edx
c001cb68:	50                   	push   eax
c001cb69:	56                   	push   esi
c001cb6a:	e8 7d 64 ff ff       	call   c0012fec <File::seek(unsigned long long)>
c001cb6f:	83 c4 10             	add    esp,0x10
c001cb72:	85 c0                	test   eax,eax
c001cb74:	0f 85 8c 00 00 00    	jne    c001cc06 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb7a:	83 ec 0c             	sub    esp,0xc
c001cb7d:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cb81:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cb85:	31 ed                	xor    ebp,ebp
c001cb87:	0f af c2             	imul   eax,edx
c001cb8a:	50                   	push   eax
c001cb8b:	e8 fc 2c ff ff       	call   c000f88c <malloc>
c001cb90:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cb92:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cb96:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cb99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb9d:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cba1:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cba5:	0f af c2             	imul   eax,edx
c001cba8:	99                   	cdq    
c001cba9:	52                   	push   edx
c001cbaa:	50                   	push   eax
c001cbab:	56                   	push   esi
c001cbac:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cbaf:	83 c4 20             	add    esp,0x20
c001cbb2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cbba:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cbbe:	0f 86 80 00 00 00    	jbe    c001cc44 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cbc4:	0f b7 fd             	movzx  edi,bp
c001cbc7:	c1 e7 05             	shl    edi,0x5
c001cbca:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cbce:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cbd1:	75 6b                	jne    c001cc3e <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cbd3:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cbd6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cbda:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cbdd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cbe1:	52                   	push   edx
c001cbe2:	31 d2                	xor    edx,edx
c001cbe4:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cbe7:	52                   	push   edx
c001cbe8:	50                   	push   eax
c001cbe9:	56                   	push   esi
c001cbea:	e8 fd 63 ff ff       	call   c0012fec <File::seek(unsigned long long)>
c001cbef:	83 c4 10             	add    esp,0x10
c001cbf2:	85 c0                	test   eax,eax
c001cbf4:	74 17                	je     c001cc0d <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001cbf6:	83 ec 0c             	sub    esp,0xc
c001cbf9:	68 52 ca 02 c0       	push   0xc002ca52
c001cbfe:	e8 68 5d ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001cc03:	83 c4 10             	add    esp,0x10
c001cc06:	31 c0                	xor    eax,eax
c001cc08:	e9 87 00 00 00       	jmp    c001cc94 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cc0d:	83 ec 0c             	sub    esp,0xc
c001cc10:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cc13:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cc16:	50                   	push   eax
c001cc17:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cc1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cc1f:	56                   	push   esi
c001cc20:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cc24:	e8 b3 fb ff ff       	call   c001c7dc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cc29:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cc2d:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cc31:	83 c4 20             	add    esp,0x20
c001cc34:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cc38:	73 04                	jae    c001cc3e <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cc3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cc3e:	45                   	inc    ebp
c001cc3f:	e9 76 ff ff ff       	jmp    c001cbba <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cc44:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cc48:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cc4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cc50:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001cc56:	83 ec 0c             	sub    esp,0xc
c001cc59:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001cc5f:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cc64:	05 00 10 00 00       	add    eax,0x1000
c001cc69:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cc6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc70:	e8 27 2c ff ff       	call   c000f89c <free>
c001cc75:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cc78:	e8 1f 2c ff ff       	call   c000f89c <free>
c001cc7d:	58                   	pop    eax
c001cc7e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc82:	e8 15 2c ff ff       	call   c000f89c <free>
c001cc87:	89 34 24             	mov    DWORD PTR [esp],esi
c001cc8a:	e8 fd 62 ff ff       	call   c0012f8c <File::close()>
c001cc8f:	83 c4 10             	add    esp,0x10
c001cc92:	b0 01                	mov    al,0x1
c001cc94:	83 c4 3c             	add    esp,0x3c
c001cc97:	5b                   	pop    ebx
c001cc98:	5e                   	pop    esi
c001cc99:	5f                   	pop    edi
c001cc9a:	5d                   	pop    ebp
c001cc9b:	c3                   	ret    

c001cc9c <Thr::runtimeReferenceHelper()>:
c001cc9c:	83 ec 18             	sub    esp,0x18
c001cc9f:	68 5a ca 02 c0       	push   0xc002ca5a
c001cca4:	e8 c2 5c ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001cca9:	fa                   	cli    
c001ccaa:	83 c4 10             	add    esp,0x10
c001ccad:	eb fe                	jmp    c001ccad <Thr::runtimeReferenceHelper()+0x11>

c001ccaf <Thr::getAddressOfKernelSymbol(char const*)>:
c001ccaf:	57                   	push   edi
c001ccb0:	56                   	push   esi
c001ccb1:	53                   	push   ebx
c001ccb2:	31 db                	xor    ebx,ebx
c001ccb4:	39 1d c0 25 03 c0    	cmp    DWORD PTR ds:0xc00325c0,ebx
c001ccba:	7e 3c                	jle    c001ccf8 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001ccbc:	8b 34 9d 40 25 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcdac0]
c001ccc3:	31 ff                	xor    edi,edi
c001ccc5:	39 3c 9d 40 24 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcdbc0],edi
c001cccc:	7e 27                	jle    c001ccf5 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001ccce:	50                   	push   eax
c001cccf:	50                   	push   eax
c001ccd0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ccd4:	8b 06                	mov    eax,DWORD PTR [esi]
c001ccd6:	03 04 9d c0 24 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcdb40]
c001ccdd:	50                   	push   eax
c001ccde:	e8 b5 3b fe ff       	call   c0000898 <strcmp>
c001cce3:	83 c4 10             	add    esp,0x10
c001cce6:	85 c0                	test   eax,eax
c001cce8:	75 05                	jne    c001ccef <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001ccea:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cced:	eb 0b                	jmp    c001ccfa <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001ccef:	83 c6 10             	add    esi,0x10
c001ccf2:	47                   	inc    edi
c001ccf3:	eb d0                	jmp    c001ccc5 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001ccf5:	43                   	inc    ebx
c001ccf6:	eb bc                	jmp    c001ccb4 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001ccf8:	31 c0                	xor    eax,eax
c001ccfa:	5b                   	pop    ebx
c001ccfb:	5e                   	pop    esi
c001ccfc:	5f                   	pop    edi
c001ccfd:	c3                   	ret    

c001ccfe <Thr::loadKernelSymbolTable(char const*)>:
c001ccfe:	55                   	push   ebp
c001ccff:	57                   	push   edi
c001cd00:	56                   	push   esi
c001cd01:	53                   	push   ebx
c001cd02:	83 ec 68             	sub    esp,0x68
c001cd05:	8b 35 10 26 03 c0    	mov    esi,DWORD PTR ds:0xc0032610
c001cd0b:	68 14 01 00 00       	push   0x114
c001cd10:	e8 77 2b ff ff       	call   c000f88c <malloc>
c001cd15:	83 c4 0c             	add    esp,0xc
c001cd18:	89 c3                	mov    ebx,eax
c001cd1a:	56                   	push   esi
c001cd1b:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cd1f:	50                   	push   eax
c001cd20:	e8 a5 61 ff ff       	call   c0012eca <File::File(char const*, Process*)>
c001cd25:	5e                   	pop    esi
c001cd26:	5f                   	pop    edi
c001cd27:	6a 01                	push   0x1
c001cd29:	53                   	push   ebx
c001cd2a:	e8 ff 61 ff ff       	call   c0012f2e <File::open(FileOpenMode)>
c001cd2f:	83 c4 10             	add    esp,0x10
c001cd32:	85 c0                	test   eax,eax
c001cd34:	74 0a                	je     c001cd40 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cd36:	83 ec 0c             	sub    esp,0xc
c001cd39:	68 7c ca 02 c0       	push   0xc002ca7c
c001cd3e:	eb 34                	jmp    c001cd74 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cd40:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001cd48:	83 ec 0c             	sub    esp,0xc
c001cd4b:	6a 34                	push   0x34
c001cd4d:	e8 3a 2b ff ff       	call   c000f88c <malloc>
c001cd52:	59                   	pop    ecx
c001cd53:	89 c7                	mov    edi,eax
c001cd55:	8d 74 24 34          	lea    esi,[esp+0x34]
c001cd59:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd5b:	56                   	push   esi
c001cd5c:	57                   	push   edi
c001cd5d:	6a 00                	push   0x0
c001cd5f:	6a 34                	push   0x34
c001cd61:	53                   	push   ebx
c001cd62:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cd65:	83 c4 20             	add    esp,0x20
c001cd68:	85 c0                	test   eax,eax
c001cd6a:	74 17                	je     c001cd83 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001cd6c:	83 ec 0c             	sub    esp,0xc
c001cd6f:	68 93 ca 02 c0       	push   0xc002ca93
c001cd74:	e8 28 d6 ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c001cd79:	83 c4 10             	add    esp,0x10
c001cd7c:	31 c0                	xor    eax,eax
c001cd7e:	e9 31 02 00 00       	jmp    c001cfb4 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001cd83:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cd89:	75 e1                	jne    c001cd6c <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd8b:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cd8e:	85 c0                	test   eax,eax
c001cd90:	74 da                	je     c001cd6c <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd92:	52                   	push   edx
c001cd93:	31 d2                	xor    edx,edx
c001cd95:	52                   	push   edx
c001cd96:	50                   	push   eax
c001cd97:	53                   	push   ebx
c001cd98:	e8 4f 62 ff ff       	call   c0012fec <File::seek(unsigned long long)>
c001cd9d:	83 c4 10             	add    esp,0x10
c001cda0:	85 c0                	test   eax,eax
c001cda2:	75 c8                	jne    c001cd6c <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cda4:	83 ec 0c             	sub    esp,0xc
c001cda7:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cdab:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cdaf:	31 ed                	xor    ebp,ebp
c001cdb1:	0f af c2             	imul   eax,edx
c001cdb4:	50                   	push   eax
c001cdb5:	e8 d2 2a ff ff       	call   c000f88c <malloc>
c001cdba:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cdbc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cdc0:	89 34 24             	mov    DWORD PTR [esp],esi
c001cdc3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cdc7:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cdcb:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cdcf:	0f af c2             	imul   eax,edx
c001cdd2:	99                   	cdq    
c001cdd3:	52                   	push   edx
c001cdd4:	50                   	push   eax
c001cdd5:	53                   	push   ebx
c001cdd6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cdd9:	83 c4 20             	add    esp,0x20
c001cddc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cde4:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cdec:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cdf4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cdfc:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001ce00:	0f 86 aa 00 00 00    	jbe    c001ceb0 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001ce06:	0f b7 f5             	movzx  esi,bp
c001ce09:	6b f6 28             	imul   esi,esi,0x28
c001ce0c:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ce10:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ce13:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ce17:	50                   	push   eax
c001ce18:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ce1c:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001ce20:	8b 16                	mov    edx,DWORD PTR [esi]
c001ce22:	6b c0 28             	imul   eax,eax,0x28
c001ce25:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001ce29:	89 d0                	mov    eax,edx
c001ce2b:	31 d2                	xor    edx,edx
c001ce2d:	52                   	push   edx
c001ce2e:	50                   	push   eax
c001ce2f:	53                   	push   ebx
c001ce30:	e8 b7 61 ff ff       	call   c0012fec <File::seek(unsigned long long)>
c001ce35:	83 c4 0c             	add    esp,0xc
c001ce38:	6a 20                	push   0x20
c001ce3a:	6a 00                	push   0x0
c001ce3c:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ce40:	52                   	push   edx
c001ce41:	e8 0a 39 fe ff       	call   c0000750 <memset>
c001ce46:	58                   	pop    eax
c001ce47:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce49:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001ce4d:	51                   	push   ecx
c001ce4e:	8d 54 24 40          	lea    edx,[esp+0x40]
c001ce52:	52                   	push   edx
c001ce53:	6a 00                	push   0x0
c001ce55:	6a 1f                	push   0x1f
c001ce57:	53                   	push   ebx
c001ce58:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce5b:	83 c4 18             	add    esp,0x18
c001ce5e:	68 aa ca 02 c0       	push   0xc002caaa
c001ce63:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ce67:	52                   	push   edx
c001ce68:	e8 2b 3a fe ff       	call   c0000898 <strcmp>
c001ce6d:	83 c4 10             	add    esp,0x10
c001ce70:	85 c0                	test   eax,eax
c001ce72:	75 0f                	jne    c001ce83 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001ce74:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ce77:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ce7b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ce83:	50                   	push   eax
c001ce84:	50                   	push   eax
c001ce85:	68 b2 ca 02 c0       	push   0xc002cab2
c001ce8a:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001ce8e:	50                   	push   eax
c001ce8f:	e8 04 3a fe ff       	call   c0000898 <strcmp>
c001ce94:	83 c4 10             	add    esp,0x10
c001ce97:	85 c0                	test   eax,eax
c001ce99:	75 0f                	jne    c001ceaa <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001ce9b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ce9e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cea2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cea6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ceaa:	45                   	inc    ebp
c001ceab:	e9 4c ff ff ff       	jmp    c001cdfc <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001ceb0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ceb5:	75 10                	jne    c001cec7 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001ceb7:	83 ec 0c             	sub    esp,0xc
c001ceba:	68 ba ca 02 c0       	push   0xc002caba
c001cebf:	e8 dd d4 ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c001cec4:	83 c4 10             	add    esp,0x10
c001cec7:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001cecc:	75 10                	jne    c001cede <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001cece:	83 ec 0c             	sub    esp,0xc
c001ced1:	68 ba ca 02 c0       	push   0xc002caba
c001ced6:	e8 c6 d4 ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c001cedb:	83 c4 10             	add    esp,0x10
c001cede:	31 d2                	xor    edx,edx
c001cee0:	50                   	push   eax
c001cee1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cee5:	52                   	push   edx
c001cee6:	50                   	push   eax
c001cee7:	53                   	push   ebx
c001cee8:	e8 ff 60 ff ff       	call   c0012fec <File::seek(unsigned long long)>
c001ceed:	5a                   	pop    edx
c001ceee:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cef2:	e8 95 29 ff ff       	call   c000f88c <malloc>
c001cef7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cefb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ceff:	31 c9                	xor    ecx,ecx
c001cf01:	5e                   	pop    esi
c001cf02:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf04:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001cf08:	55                   	push   ebp
c001cf09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf0d:	51                   	push   ecx
c001cf0e:	52                   	push   edx
c001cf0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cf13:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001cf17:	53                   	push   ebx
c001cf18:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf1b:	83 c4 14             	add    esp,0x14
c001cf1e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cf22:	e8 65 29 ff ff       	call   c000f88c <malloc>
c001cf27:	89 c6                	mov    esi,eax
c001cf29:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf2b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf2e:	56                   	push   esi
c001cf2f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cf33:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cf37:	51                   	push   ecx
c001cf38:	52                   	push   edx
c001cf39:	53                   	push   ebx
c001cf3a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf3d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf41:	8b 15 c0 25 03 c0    	mov    edx,DWORD PTR ds:0xc00325c0
c001cf47:	83 c4 1c             	add    esp,0x1c
c001cf4a:	c1 e8 04             	shr    eax,0x4
c001cf4d:	89 04 95 40 24 03 c0 	mov    DWORD PTR [edx*4-0x3ffcdbc0],eax
c001cf54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cf58:	31 d2                	xor    edx,edx
c001cf5a:	52                   	push   edx
c001cf5b:	50                   	push   eax
c001cf5c:	53                   	push   ebx
c001cf5d:	e8 8a 60 ff ff       	call   c0012fec <File::seek(unsigned long long)>
c001cf62:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cf64:	31 d2                	xor    edx,edx
c001cf66:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf69:	56                   	push   esi
c001cf6a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cf6e:	52                   	push   edx
c001cf6f:	50                   	push   eax
c001cf70:	53                   	push   ebx
c001cf71:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cf74:	83 c4 14             	add    esp,0x14
c001cf77:	53                   	push   ebx
c001cf78:	e8 0f 60 ff ff       	call   c0012f8c <File::close()>
c001cf7d:	5d                   	pop    ebp
c001cf7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf82:	e8 15 29 ff ff       	call   c000f89c <free>
c001cf87:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cf8a:	e8 0d 29 ff ff       	call   c000f89c <free>
c001cf8f:	a1 c0 25 03 c0       	mov    eax,ds:0xc00325c0
c001cf94:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cf98:	8d 50 01             	lea    edx,[eax+0x1]
c001cf9b:	89 0c 85 40 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdac0],ecx
c001cfa2:	89 34 85 c0 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb40],esi
c001cfa9:	89 15 c0 25 03 c0    	mov    DWORD PTR ds:0xc00325c0,edx
c001cfaf:	83 c4 10             	add    esp,0x10
c001cfb2:	b0 01                	mov    al,0x1
c001cfb4:	83 c4 5c             	add    esp,0x5c
c001cfb7:	5b                   	pop    ebx
c001cfb8:	5e                   	pop    esi
c001cfb9:	5f                   	pop    edi
c001cfba:	5d                   	pop    ebp
c001cfbb:	c3                   	ret    

c001cfbc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001cfbc:	55                   	push   ebp
c001cfbd:	57                   	push   edi
c001cfbe:	56                   	push   esi
c001cfbf:	53                   	push   ebx
c001cfc0:	81 ec 68 03 00 00    	sub    esp,0x368
c001cfc6:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001cfcd:	8b 1d 10 26 03 c0    	mov    ebx,DWORD PTR ds:0xc0032610
c001cfd3:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001cfd7:	68 14 01 00 00       	push   0x114
c001cfdc:	e8 ab 28 ff ff       	call   c000f88c <malloc>
c001cfe1:	83 c4 0c             	add    esp,0xc
c001cfe4:	89 c5                	mov    ebp,eax
c001cfe6:	53                   	push   ebx
c001cfe7:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001cfee:	50                   	push   eax
c001cfef:	e8 d6 5e ff ff       	call   c0012eca <File::File(char const*, Process*)>
c001cff4:	5e                   	pop    esi
c001cff5:	5f                   	pop    edi
c001cff6:	6a 01                	push   0x1
c001cff8:	55                   	push   ebp
c001cff9:	e8 30 5f ff ff       	call   c0012f2e <File::open(FileOpenMode)>
c001cffe:	83 c4 10             	add    esp,0x10
c001d001:	85 c0                	test   eax,eax
c001d003:	0f 85 a7 06 00 00    	jne    c001d6b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d009:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001d011:	83 ec 0c             	sub    esp,0xc
c001d014:	6a 34                	push   0x34
c001d016:	e8 71 28 ff ff       	call   c000f88c <malloc>
c001d01b:	5b                   	pop    ebx
c001d01c:	89 c7                	mov    edi,eax
c001d01e:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d022:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d025:	53                   	push   ebx
c001d026:	57                   	push   edi
c001d027:	6a 00                	push   0x0
c001d029:	6a 34                	push   0x34
c001d02b:	55                   	push   ebp
c001d02c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d02f:	83 c4 20             	add    esp,0x20
c001d032:	85 c0                	test   eax,eax
c001d034:	0f 85 76 06 00 00    	jne    c001d6b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d03a:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d040:	0f 85 6a 06 00 00    	jne    c001d6b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d046:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d049:	85 c0                	test   eax,eax
c001d04b:	0f 84 5f 06 00 00    	je     c001d6b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d051:	31 d2                	xor    edx,edx
c001d053:	51                   	push   ecx
c001d054:	52                   	push   edx
c001d055:	50                   	push   eax
c001d056:	55                   	push   ebp
c001d057:	e8 90 5f ff ff       	call   c0012fec <File::seek(unsigned long long)>
c001d05c:	83 c4 10             	add    esp,0x10
c001d05f:	85 c0                	test   eax,eax
c001d061:	0f 85 49 06 00 00    	jne    c001d6b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d067:	83 ec 0c             	sub    esp,0xc
c001d06a:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d06d:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d071:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d075:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d079:	0f af c2             	imul   eax,edx
c001d07c:	50                   	push   eax
c001d07d:	e8 0a 28 ff ff       	call   c000f88c <malloc>
c001d082:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d085:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d089:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d08c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d090:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d094:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d098:	0f af c2             	imul   eax,edx
c001d09b:	99                   	cdq    
c001d09c:	52                   	push   edx
c001d09d:	50                   	push   eax
c001d09e:	55                   	push   ebp
c001d09f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d0a2:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d0a5:	83 c4 20             	add    esp,0x20
c001d0a8:	85 c0                	test   eax,eax
c001d0aa:	0f 84 00 06 00 00    	je     c001d6b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d0b0:	52                   	push   edx
c001d0b1:	31 d2                	xor    edx,edx
c001d0b3:	52                   	push   edx
c001d0b4:	50                   	push   eax
c001d0b5:	55                   	push   ebp
c001d0b6:	e8 31 5f ff ff       	call   c0012fec <File::seek(unsigned long long)>
c001d0bb:	83 c4 10             	add    esp,0x10
c001d0be:	85 c0                	test   eax,eax
c001d0c0:	0f 85 ea 05 00 00    	jne    c001d6b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d0c6:	83 ec 0c             	sub    esp,0xc
c001d0c9:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d0cd:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d0d1:	31 f6                	xor    esi,esi
c001d0d3:	0f af c2             	imul   eax,edx
c001d0d6:	50                   	push   eax
c001d0d7:	e8 b0 27 ff ff       	call   c000f88c <malloc>
c001d0dc:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d0df:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d0e3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d0e6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d0ea:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d0ee:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d0f2:	0f af c2             	imul   eax,edx
c001d0f5:	99                   	cdq    
c001d0f6:	52                   	push   edx
c001d0f7:	50                   	push   eax
c001d0f8:	55                   	push   ebp
c001d0f9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d0fc:	83 c4 20             	add    esp,0x20
c001d0ff:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d103:	0f 86 8a 00 00 00    	jbe    c001d193 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d109:	0f b7 de             	movzx  ebx,si
c001d10c:	c1 e3 05             	shl    ebx,0x5
c001d10f:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d113:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d116:	75 75                	jne    c001d18d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d118:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d11b:	31 d2                	xor    edx,edx
c001d11d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d121:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d124:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d128:	50                   	push   eax
c001d129:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d12c:	52                   	push   edx
c001d12d:	50                   	push   eax
c001d12e:	55                   	push   ebp
c001d12f:	e8 b8 5e ff ff       	call   c0012fec <File::seek(unsigned long long)>
c001d134:	83 c4 10             	add    esp,0x10
c001d137:	85 c0                	test   eax,eax
c001d139:	0f 85 71 05 00 00    	jne    c001d6b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d13f:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d146:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d149:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d14d:	31 d2                	xor    edx,edx
c001d14f:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d153:	83 ec 0c             	sub    esp,0xc
c001d156:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d15a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d161:	50                   	push   eax
c001d162:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d166:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d16a:	52                   	push   edx
c001d16b:	50                   	push   eax
c001d16c:	55                   	push   ebp
c001d16d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d170:	83 c4 1c             	add    esp,0x1c
c001d173:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d176:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d179:	50                   	push   eax
c001d17a:	6a 00                	push   0x0
c001d17c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d180:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d184:	50                   	push   eax
c001d185:	e8 c6 35 fe ff       	call   c0000750 <memset>
c001d18a:	83 c4 10             	add    esp,0x10
c001d18d:	46                   	inc    esi
c001d18e:	e9 6c ff ff ff       	jmp    c001d0ff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d193:	53                   	push   ebx
c001d194:	31 db                	xor    ebx,ebx
c001d196:	68 00 01 00 00       	push   0x100
c001d19b:	6a 00                	push   0x0
c001d19d:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d1a1:	50                   	push   eax
c001d1a2:	e8 a9 35 fe ff       	call   c0000750 <memset>
c001d1a7:	83 c4 0c             	add    esp,0xc
c001d1aa:	68 00 01 00 00       	push   0x100
c001d1af:	6a 00                	push   0x0
c001d1b1:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d1b8:	50                   	push   eax
c001d1b9:	e8 92 35 fe ff       	call   c0000750 <memset>
c001d1be:	83 c4 10             	add    esp,0x10
c001d1c1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d1c9:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d1d1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d1d9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d1e1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d1e9:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d1ed:	0f 86 30 01 00 00    	jbe    c001d323 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d1f3:	0f b7 f3             	movzx  esi,bx
c001d1f6:	6b f6 28             	imul   esi,esi,0x28
c001d1f9:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d1fd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d200:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d204:	52                   	push   edx
c001d205:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d209:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d20d:	8b 06                	mov    eax,DWORD PTR [esi]
c001d20f:	6b d2 28             	imul   edx,edx,0x28
c001d212:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d216:	31 d2                	xor    edx,edx
c001d218:	52                   	push   edx
c001d219:	50                   	push   eax
c001d21a:	55                   	push   ebp
c001d21b:	e8 cc 5d ff ff       	call   c0012fec <File::seek(unsigned long long)>
c001d220:	83 c4 0c             	add    esp,0xc
c001d223:	6a 20                	push   0x20
c001d225:	6a 00                	push   0x0
c001d227:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d22e:	51                   	push   ecx
c001d22f:	e8 1c 35 fe ff       	call   c0000750 <memset>
c001d234:	59                   	pop    ecx
c001d235:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d238:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d23c:	52                   	push   edx
c001d23d:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d244:	51                   	push   ecx
c001d245:	6a 00                	push   0x0
c001d247:	6a 1f                	push   0x1f
c001d249:	55                   	push   ebp
c001d24a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d24d:	83 c4 1c             	add    esp,0x1c
c001d250:	6a 09                	push   0x9
c001d252:	68 d4 ca 02 c0       	push   0xc002cad4
c001d257:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d25e:	51                   	push   ecx
c001d25f:	e8 e8 33 fe ff       	call   c000064c <memcmp>
c001d264:	83 c4 10             	add    esp,0x10
c001d267:	85 c0                	test   eax,eax
c001d269:	75 21                	jne    c001d28c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d26b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d26f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d273:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d277:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d27b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d27e:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d285:	89 d0                	mov    eax,edx
c001d287:	40                   	inc    eax
c001d288:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d28c:	50                   	push   eax
c001d28d:	6a 09                	push   0x9
c001d28f:	68 de ca 02 c0       	push   0xc002cade
c001d294:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d29b:	50                   	push   eax
c001d29c:	e8 ab 33 fe ff       	call   c000064c <memcmp>
c001d2a1:	83 c4 10             	add    esp,0x10
c001d2a4:	85 c0                	test   eax,eax
c001d2a6:	75 21                	jne    c001d2c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d2a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d2ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d2b0:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d2b4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d2b8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d2bb:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d2c2:	89 d0                	mov    eax,edx
c001d2c4:	40                   	inc    eax
c001d2c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d2c9:	50                   	push   eax
c001d2ca:	50                   	push   eax
c001d2cb:	68 aa ca 02 c0       	push   0xc002caaa
c001d2d0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2d7:	50                   	push   eax
c001d2d8:	e8 bb 35 fe ff       	call   c0000898 <strcmp>
c001d2dd:	83 c4 10             	add    esp,0x10
c001d2e0:	85 c0                	test   eax,eax
c001d2e2:	75 0f                	jne    c001d2f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d2e4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d2e7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d2eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d2ef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d2f3:	50                   	push   eax
c001d2f4:	50                   	push   eax
c001d2f5:	68 b2 ca 02 c0       	push   0xc002cab2
c001d2fa:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d301:	50                   	push   eax
c001d302:	e8 91 35 fe ff       	call   c0000898 <strcmp>
c001d307:	83 c4 10             	add    esp,0x10
c001d30a:	85 c0                	test   eax,eax
c001d30c:	75 0f                	jne    c001d31d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d30e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d311:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d315:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d319:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d31d:	43                   	inc    ebx
c001d31e:	e9 c6 fe ff ff       	jmp    c001d1e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d323:	31 d2                	xor    edx,edx
c001d325:	50                   	push   eax
c001d326:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d32a:	52                   	push   edx
c001d32b:	50                   	push   eax
c001d32c:	55                   	push   ebp
c001d32d:	e8 ba 5c ff ff       	call   c0012fec <File::seek(unsigned long long)>
c001d332:	58                   	pop    eax
c001d333:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d337:	e8 50 25 ff ff       	call   c000f88c <malloc>
c001d33c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d33f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d343:	31 d2                	xor    edx,edx
c001d345:	58                   	pop    eax
c001d346:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d34a:	53                   	push   ebx
c001d34b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d34f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d353:	52                   	push   edx
c001d354:	50                   	push   eax
c001d355:	55                   	push   ebp
c001d356:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d359:	83 c4 14             	add    esp,0x14
c001d35c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d360:	e8 27 25 ff ff       	call   c000f88c <malloc>
c001d365:	31 d2                	xor    edx,edx
c001d367:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d36b:	83 c4 0c             	add    esp,0xc
c001d36e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d372:	52                   	push   edx
c001d373:	50                   	push   eax
c001d374:	55                   	push   ebp
c001d375:	e8 72 5c ff ff       	call   c0012fec <File::seek(unsigned long long)>
c001d37a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d37d:	31 d2                	xor    edx,edx
c001d37f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d382:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d386:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d38a:	52                   	push   edx
c001d38b:	50                   	push   eax
c001d38c:	55                   	push   ebp
c001d38d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d390:	83 c4 20             	add    esp,0x20
c001d393:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d39b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d39f:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d3a3:	0f 84 0b 03 00 00    	je     c001d6b4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001d3a9:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d3b0:	31 d2                	xor    edx,edx
c001d3b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d3b6:	c1 e8 03             	shr    eax,0x3
c001d3b9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d3bd:	51                   	push   ecx
c001d3be:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d3c2:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d3c6:	52                   	push   edx
c001d3c7:	50                   	push   eax
c001d3c8:	55                   	push   ebp
c001d3c9:	e8 1e 5c ff ff       	call   c0012fec <File::seek(unsigned long long)>
c001d3ce:	5b                   	pop    ebx
c001d3cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3d3:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d3da:	e8 ad 24 ff ff       	call   c000f88c <malloc>
c001d3df:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d3e2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d3e6:	31 d2                	xor    edx,edx
c001d3e8:	5e                   	pop    esi
c001d3e9:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d3ed:	50                   	push   eax
c001d3ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3f2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d3f6:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d3fd:	52                   	push   edx
c001d3fe:	50                   	push   eax
c001d3ff:	55                   	push   ebp
c001d400:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d403:	83 c4 20             	add    esp,0x20
c001d406:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d40e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d412:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d416:	0f 8d 7c 02 00 00    	jge    c001d698 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001d41c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d420:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d424:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d429:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d42c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d430:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d434:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d438:	89 d8                	mov    eax,ebx
c001d43a:	c1 e8 08             	shr    eax,0x8
c001d43d:	89 c6                	mov    esi,eax
c001d43f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d443:	c1 e6 04             	shl    esi,0x4
c001d446:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d44a:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d44d:	85 d2                	test   edx,edx
c001d44f:	0f 85 bf 00 00 00    	jne    c001d514 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d455:	83 ec 0c             	sub    esp,0xc
c001d458:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d45c:	03 06                	add    eax,DWORD PTR [esi]
c001d45e:	50                   	push   eax
c001d45f:	e8 4b f8 ff ff       	call   c001ccaf <Thr::getAddressOfKernelSymbol(char const*)>
c001d464:	83 c4 10             	add    esp,0x10
c001d467:	89 c2                	mov    edx,eax
c001d469:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d46e:	85 c0                	test   eax,eax
c001d470:	0f 85 9e 00 00 00    	jne    c001d514 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d476:	83 ec 0c             	sub    esp,0xc
c001d479:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d47d:	03 06                	add    eax,DWORD PTR [esi]
c001d47f:	50                   	push   eax
c001d480:	e8 ba 10 ff ff       	call   c000e53f <Krnl::resolveCompatibilitySymbol(char*)>
c001d485:	83 c4 10             	add    esp,0x10
c001d488:	89 c2                	mov    edx,eax
c001d48a:	85 c0                	test   eax,eax
c001d48c:	0f 85 82 00 00 00    	jne    c001d514 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d492:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d496:	50                   	push   eax
c001d497:	50                   	push   eax
c001d498:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d49c:	03 06                	add    eax,DWORD PTR [esi]
c001d49e:	50                   	push   eax
c001d49f:	68 e8 ca 02 c0       	push   0xc002cae8
c001d4a4:	e8 c2 54 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001d4a9:	58                   	pop    eax
c001d4aa:	5a                   	pop    edx
c001d4ab:	68 02 cb 02 c0       	push   0xc002cb02
c001d4b0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4b7:	50                   	push   eax
c001d4b8:	e8 4f 33 fe ff       	call   c000080c <strcpy>
c001d4bd:	59                   	pop    ecx
c001d4be:	58                   	pop    eax
c001d4bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4c3:	03 06                	add    eax,DWORD PTR [esi]
c001d4c5:	50                   	push   eax
c001d4c6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4cd:	50                   	push   eax
c001d4ce:	e8 79 34 fe ff       	call   c000094c <strcat>
c001d4d3:	58                   	pop    eax
c001d4d4:	5a                   	pop    edx
c001d4d5:	68 98 cb 02 c0       	push   0xc002cb98
c001d4da:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4e1:	50                   	push   eax
c001d4e2:	e8 65 34 fe ff       	call   c000094c <strcat>
c001d4e7:	83 c4 10             	add    esp,0x10
c001d4ea:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d4ef:	0f 84 5d 01 00 00    	je     c001d652 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d4f5:	83 ec 0c             	sub    esp,0xc
c001d4f8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4ff:	50                   	push   eax
c001d500:	e8 9c ce ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c001d505:	83 c4 10             	add    esp,0x10
c001d508:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d50c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d510:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d514:	80 fb 01             	cmp    bl,0x1
c001d517:	0f 85 88 00 00 00    	jne    c001d5a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001d51d:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d524:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d528:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d52c:	01 ce                	add    esi,ecx
c001d52e:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d534:	0f 94 c0             	sete   al
c001d537:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d53d:	0f 94 c3             	sete   bl
c001d540:	09 c3                	or     ebx,eax
c001d542:	8b 06                	mov    eax,DWORD PTR [esi]
c001d544:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d549:	74 41                	je     c001d58c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001d54b:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d54e:	84 db                	test   bl,bl
c001d550:	75 15                	jne    c001d567 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001d552:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d556:	66 83 f8 0c          	cmp    ax,0xc
c001d55a:	76 05                	jbe    c001d561 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001d55c:	b8 0c 00 00 00       	mov    eax,0xc
c001d561:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d565:	76 37                	jbe    c001d59e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d567:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d56b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d570:	0f 84 dc 00 00 00    	je     c001d652 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d576:	83 ec 0c             	sub    esp,0xc
c001d579:	68 19 cb 02 c0       	push   0xc002cb19
c001d57e:	e8 1e ce ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c001d583:	83 c4 10             	add    esp,0x10
c001d586:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d58a:	eb 12                	jmp    c001d59e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d58c:	01 c1                	add    ecx,eax
c001d58e:	84 db                	test   bl,bl
c001d590:	75 0c                	jne    c001d59e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d592:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d596:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d59a:	77 02                	ja     c001d59e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d59c:	01 d1                	add    ecx,edx
c001d59e:	89 0e                	mov    DWORD PTR [esi],ecx
c001d5a0:	e9 ea 00 00 00       	jmp    c001d68f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d5a5:	80 fb 02             	cmp    bl,0x2
c001d5a8:	75 7c                	jne    c001d626 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001d5aa:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d5b1:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d5b5:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d5b9:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d5bf:	74 20                	je     c001d5e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d5c1:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d5c7:	74 18                	je     c001d5e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d5c9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d5cd:	b9 0a 00 00 00       	mov    ecx,0xa
c001d5d2:	66 83 f8 0e          	cmp    ax,0xe
c001d5d6:	77 03                	ja     c001d5db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001d5d8:	8d 48 fc             	lea    ecx,[eax-0x4]
c001d5db:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001d5df:	76 1f                	jbe    c001d600 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001d5e1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d5e5:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d5ea:	74 66                	je     c001d652 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d5ec:	83 ec 0c             	sub    esp,0xc
c001d5ef:	68 35 cb 02 c0       	push   0xc002cb35
c001d5f4:	e8 a8 cd ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c001d5f9:	83 c4 10             	add    esp,0x10
c001d5fc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d600:	8b 06                	mov    eax,DWORD PTR [esi]
c001d602:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d607:	74 13                	je     c001d61c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001d609:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d60d:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d614:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d618:	01 c8                	add    eax,ecx
c001d61a:	eb 04                	jmp    c001d620 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001d61c:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d620:	01 c2                	add    edx,eax
c001d622:	89 16                	mov    DWORD PTR [esi],edx
c001d624:	eb 69                	jmp    c001d68f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d626:	0f b6 db             	movzx  ebx,bl
c001d629:	50                   	push   eax
c001d62a:	50                   	push   eax
c001d62b:	53                   	push   ebx
c001d62c:	68 51 cb 02 c0       	push   0xc002cb51
c001d631:	e8 35 53 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001d636:	83 c4 10             	add    esp,0x10
c001d639:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d63e:	74 12                	je     c001d652 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d640:	83 ec 0c             	sub    esp,0xc
c001d643:	68 5c cb 02 c0       	push   0xc002cb5c
c001d648:	e8 54 cd ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c001d64d:	83 c4 10             	add    esp,0x10
c001d650:	eb 3d                	jmp    c001d68f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d652:	83 ec 0c             	sub    esp,0xc
c001d655:	55                   	push   ebp
c001d656:	e8 31 59 ff ff       	call   c0012f8c <File::close()>
c001d65b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d65e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d661:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d664:	59                   	pop    ecx
c001d665:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d669:	e8 2e 22 ff ff       	call   c000f89c <free>
c001d66e:	5b                   	pop    ebx
c001d66f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d673:	e8 24 22 ff ff       	call   c000f89c <free>
c001d678:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d67b:	e8 1c 22 ff ff       	call   c000f89c <free>
c001d680:	5e                   	pop    esi
c001d681:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d685:	e8 12 22 ff ff       	call   c000f89c <free>
c001d68a:	83 c4 10             	add    esp,0x10
c001d68d:	eb 21                	jmp    c001d6b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d68f:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d693:	e9 76 fd ff ff       	jmp    c001d40e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d698:	83 ec 0c             	sub    esp,0xc
c001d69b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d69f:	e8 f8 21 ff ff       	call   c000f89c <free>
c001d6a4:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d6a8:	83 c4 10             	add    esp,0x10
c001d6ab:	e9 eb fc ff ff       	jmp    c001d39b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d6b0:	31 c0                	xor    eax,eax
c001d6b2:	eb 33                	jmp    c001d6e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001d6b4:	83 ec 0c             	sub    esp,0xc
c001d6b7:	55                   	push   ebp
c001d6b8:	e8 cf 58 ff ff       	call   c0012f8c <File::close()>
c001d6bd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d6c0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d6c3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d6c6:	58                   	pop    eax
c001d6c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d6cb:	e8 cc 21 ff ff       	call   c000f89c <free>
c001d6d0:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d6d3:	e8 c4 21 ff ff       	call   c000f89c <free>
c001d6d8:	5a                   	pop    edx
c001d6d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d6dd:	e8 ba 21 ff ff       	call   c000f89c <free>
c001d6e2:	83 c4 10             	add    esp,0x10
c001d6e5:	b0 01                	mov    al,0x1
c001d6e7:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d6ed:	5b                   	pop    ebx
c001d6ee:	5e                   	pop    esi
c001d6ef:	5f                   	pop    edi
c001d6f0:	5d                   	pop    ebp
c001d6f1:	c3                   	ret    

c001d6f2 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d6f2:	56                   	push   esi
c001d6f3:	31 d2                	xor    edx,edx
c001d6f5:	53                   	push   ebx
c001d6f6:	8b 1d 20 1e 03 c0    	mov    ebx,DWORD PTR ds:0xc0031e20
c001d6fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d700:	39 d3                	cmp    ebx,edx
c001d702:	7e 1b                	jle    c001d71f <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d704:	8b 04 95 40 20 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcdfc0]
c001d70b:	39 c8                	cmp    eax,ecx
c001d70d:	77 0d                	ja     c001d71c <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d70f:	8b 34 95 40 1e 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffce1c0]
c001d716:	01 c6                	add    esi,eax
c001d718:	39 ce                	cmp    esi,ecx
c001d71a:	77 05                	ja     c001d721 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d71c:	42                   	inc    edx
c001d71d:	eb e1                	jmp    c001d700 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d71f:	31 c0                	xor    eax,eax
c001d721:	5b                   	pop    ebx
c001d722:	5e                   	pop    esi
c001d723:	c3                   	ret    

c001d724 <Thr::getDriverNameFromAddress(unsigned long)>:
c001d724:	53                   	push   ebx
c001d725:	31 c0                	xor    eax,eax
c001d727:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d72b:	8b 1d 20 1e 03 c0    	mov    ebx,DWORD PTR ds:0xc0031e20
c001d731:	39 c3                	cmp    ebx,eax
c001d733:	7e 22                	jle    c001d757 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d735:	8b 14 85 40 20 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcdfc0]
c001d73c:	39 ca                	cmp    edx,ecx
c001d73e:	77 14                	ja     c001d754 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d740:	03 14 85 40 1e 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffce1c0]
c001d747:	39 ca                	cmp    edx,ecx
c001d749:	76 09                	jbe    c001d754 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d74b:	8b 04 85 40 22 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcddc0]
c001d752:	eb 05                	jmp    c001d759 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d754:	40                   	inc    eax
c001d755:	eb da                	jmp    c001d731 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d757:	31 c0                	xor    eax,eax
c001d759:	5b                   	pop    ebx
c001d75a:	c3                   	ret    

c001d75b <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d75b:	53                   	push   ebx
c001d75c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d760:	53                   	push   ebx
c001d761:	e8 8c ff ff ff       	call   c001d6f2 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d766:	5a                   	pop    edx
c001d767:	31 d2                	xor    edx,edx
c001d769:	85 c0                	test   eax,eax
c001d76b:	74 04                	je     c001d771 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d76d:	89 da                	mov    edx,ebx
c001d76f:	29 c2                	sub    edx,eax
c001d771:	89 d0                	mov    eax,edx
c001d773:	5b                   	pop    ebx
c001d774:	c3                   	ret    

c001d775 <Thr::loadDLL(char const*, bool)>:
c001d775:	55                   	push   ebp
c001d776:	57                   	push   edi
c001d777:	56                   	push   esi
c001d778:	53                   	push   ebx
c001d779:	81 ec 34 01 00 00    	sub    esp,0x134
c001d77f:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d786:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001d78d:	56                   	push   esi
c001d78e:	68 74 cb 02 c0       	push   0xc002cb74
c001d793:	e8 d3 51 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001d798:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d79f:	e8 e8 20 ff ff       	call   c000f88c <malloc>
c001d7a4:	83 c4 0c             	add    esp,0xc
c001d7a7:	89 c3                	mov    ebx,eax
c001d7a9:	ff 35 10 26 03 c0    	push   DWORD PTR ds:0xc0032610
c001d7af:	56                   	push   esi
c001d7b0:	50                   	push   eax
c001d7b1:	e8 14 57 ff ff       	call   c0012eca <File::File(char const*, Process*)>
c001d7b6:	83 c4 10             	add    esp,0x10
c001d7b9:	85 db                	test   ebx,ebx
c001d7bb:	75 3c                	jne    c001d7f9 <Thr::loadDLL(char const*, bool)+0x84>
c001d7bd:	89 f8                	mov    eax,edi
c001d7bf:	84 c0                	test   al,al
c001d7c1:	0f 84 cc 01 00 00    	je     c001d993 <Thr::loadDLL(char const*, bool)+0x21e>
c001d7c7:	55                   	push   ebp
c001d7c8:	55                   	push   ebp
c001d7c9:	68 85 cb 02 c0       	push   0xc002cb85
c001d7ce:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001d7d2:	55                   	push   ebp
c001d7d3:	e8 34 30 fe ff       	call   c000080c <strcpy>
c001d7d8:	58                   	pop    eax
c001d7d9:	5a                   	pop    edx
c001d7da:	56                   	push   esi
c001d7db:	55                   	push   ebp
c001d7dc:	e8 6b 31 fe ff       	call   c000094c <strcat>
c001d7e1:	59                   	pop    ecx
c001d7e2:	58                   	pop    eax
c001d7e3:	68 98 cb 02 c0       	push   0xc002cb98
c001d7e8:	55                   	push   ebp
c001d7e9:	e8 5e 31 fe ff       	call   c000094c <strcat>
c001d7ee:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d7f1:	e8 ab cb ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c001d7f6:	83 c4 10             	add    esp,0x10
c001d7f9:	51                   	push   ecx
c001d7fa:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d7fe:	50                   	push   eax
c001d7ff:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d803:	50                   	push   eax
c001d804:	53                   	push   ebx
c001d805:	e8 d0 59 ff ff       	call   c00131da <File::stat(unsigned long long*, bool*)>
c001d80a:	83 c4 10             	add    esp,0x10
c001d80d:	85 db                	test   ebx,ebx
c001d80f:	74 0c                	je     c001d81d <Thr::loadDLL(char const*, bool)+0xa8>
c001d811:	83 ec 0c             	sub    esp,0xc
c001d814:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d816:	53                   	push   ebx
c001d817:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d81a:	83 c4 10             	add    esp,0x10
c001d81d:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d822:	75 0a                	jne    c001d82e <Thr::loadDLL(char const*, bool)+0xb9>
c001d824:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d828:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d82c:	75 3c                	jne    c001d86a <Thr::loadDLL(char const*, bool)+0xf5>
c001d82e:	89 f8                	mov    eax,edi
c001d830:	84 c0                	test   al,al
c001d832:	0f 84 43 01 00 00    	je     c001d97b <Thr::loadDLL(char const*, bool)+0x206>
c001d838:	51                   	push   ecx
c001d839:	51                   	push   ecx
c001d83a:	68 85 cb 02 c0       	push   0xc002cb85
c001d83f:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d843:	53                   	push   ebx
c001d844:	e8 c3 2f fe ff       	call   c000080c <strcpy>
c001d849:	5d                   	pop    ebp
c001d84a:	58                   	pop    eax
c001d84b:	56                   	push   esi
c001d84c:	53                   	push   ebx
c001d84d:	e8 fa 30 fe ff       	call   c000094c <strcat>
c001d852:	58                   	pop    eax
c001d853:	5a                   	pop    edx
c001d854:	68 98 cb 02 c0       	push   0xc002cb98
c001d859:	53                   	push   ebx
c001d85a:	e8 ed 30 fe ff       	call   c000094c <strcat>
c001d85f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d862:	e8 3a cb ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c001d867:	83 c4 10             	add    esp,0x10
c001d86a:	52                   	push   edx
c001d86b:	6a 03                	push   0x3
c001d86d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d871:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d875:	05 ff 0f 00 00       	add    eax,0xfff
c001d87a:	83 d2 00             	adc    edx,0x0
c001d87d:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d881:	50                   	push   eax
c001d882:	ff 35 30 f2 02 c0    	push   DWORD PTR ds:0xc002f230
c001d888:	e8 11 46 ff ff       	call   c0011e9e <VAS::allocatePages(int, int)>
c001d88d:	59                   	pop    ecx
c001d88e:	89 c3                	mov    ebx,eax
c001d890:	5d                   	pop    ebp
c001d891:	50                   	push   eax
c001d892:	68 9a cb 02 c0       	push   0xc002cb9a
c001d897:	e8 cf 50 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001d89c:	89 34 24             	mov    DWORD PTR [esp],esi
c001d89f:	e8 c8 2e fe ff       	call   c000076c <strlen>
c001d8a4:	8b 2d 20 1e 03 c0    	mov    ebp,DWORD PTR ds:0xc0031e20
c001d8aa:	40                   	inc    eax
c001d8ab:	89 04 24             	mov    DWORD PTR [esp],eax
c001d8ae:	e8 d9 1f ff ff       	call   c000f88c <malloc>
c001d8b3:	89 04 ad 40 22 03 c0 	mov    DWORD PTR [ebp*4-0x3ffcddc0],eax
c001d8ba:	58                   	pop    eax
c001d8bb:	a1 20 1e 03 c0       	mov    eax,ds:0xc0031e20
c001d8c0:	5a                   	pop    edx
c001d8c1:	56                   	push   esi
c001d8c2:	ff 34 85 40 22 03 c0 	push   DWORD PTR [eax*4-0x3ffcddc0]
c001d8c9:	e8 3e 2f fe ff       	call   c000080c <strcpy>
c001d8ce:	a1 20 1e 03 c0       	mov    eax,ds:0xc0031e20
c001d8d3:	8d 50 01             	lea    edx,[eax+0x1]
c001d8d6:	89 1c 85 40 20 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdfc0],ebx
c001d8dd:	89 15 20 1e 03 c0    	mov    DWORD PTR ds:0xc0031e20,edx
c001d8e3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d8e7:	83 c4 0c             	add    esp,0xc
c001d8ea:	89 14 85 40 1e 03 c0 	mov    DWORD PTR [eax*4-0x3ffce1c0],edx
c001d8f1:	6a 01                	push   0x1
c001d8f3:	53                   	push   ebx
c001d8f4:	56                   	push   esi
c001d8f5:	e8 c2 f6 ff ff       	call   c001cfbc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d8fa:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d8fe:	83 c4 10             	add    esp,0x10
c001d901:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d906:	0f 85 83 00 00 00    	jne    c001d98f <Thr::loadDLL(char const*, bool)+0x21a>
c001d90c:	89 f8                	mov    eax,edi
c001d90e:	84 c0                	test   al,al
c001d910:	74 6d                	je     c001d97f <Thr::loadDLL(char const*, bool)+0x20a>
c001d912:	83 ec 0c             	sub    esp,0xc
c001d915:	68 a7 cb 02 c0       	push   0xc002cba7
c001d91a:	e8 82 ca ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c001d91f:	83 c4 10             	add    esp,0x10
c001d922:	eb 5b                	jmp    c001d97f <Thr::loadDLL(char const*, bool)+0x20a>
c001d924:	89 ee                	mov    esi,ebp
c001d926:	50                   	push   eax
c001d927:	c1 e6 0c             	shl    esi,0xc
c001d92a:	50                   	push   eax
c001d92b:	01 de                	add    esi,ebx
c001d92d:	56                   	push   esi
c001d92e:	ff 35 30 f2 02 c0    	push   DWORD PTR ds:0xc002f230
c001d934:	e8 cd 40 ff ff       	call   c0011a06 <VAS::getPageTableEntry(unsigned long)>
c001d939:	83 c4 10             	add    esp,0x10
c001d93c:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d93f:	75 0c                	jne    c001d94d <Thr::loadDLL(char const*, bool)+0x1d8>
c001d941:	83 ec 0c             	sub    esp,0xc
c001d944:	56                   	push   esi
c001d945:	e8 88 22 ff ff       	call   c000fbd2 <Phys::freePage(unsigned long)>
c001d94a:	83 c4 10             	add    esp,0x10
c001d94d:	45                   	inc    ebp
c001d94e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d952:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d956:	05 ff 0f 00 00       	add    eax,0xfff
c001d95b:	bf 00 00 00 00       	mov    edi,0x0
c001d960:	83 d2 00             	adc    edx,0x0
c001d963:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d967:	c1 ea 0c             	shr    edx,0xc
c001d96a:	39 c5                	cmp    ebp,eax
c001d96c:	89 d1                	mov    ecx,edx
c001d96e:	89 f8                	mov    eax,edi
c001d970:	19 c8                	sbb    eax,ecx
c001d972:	72 b0                	jb     c001d924 <Thr::loadDLL(char const*, bool)+0x1af>
c001d974:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d979:	75 18                	jne    c001d993 <Thr::loadDLL(char const*, bool)+0x21e>
c001d97b:	31 db                	xor    ebx,ebx
c001d97d:	eb 14                	jmp    c001d993 <Thr::loadDLL(char const*, bool)+0x21e>
c001d97f:	83 ec 0c             	sub    esp,0xc
c001d982:	68 c6 cb 02 c0       	push   0xc002cbc6
c001d987:	e8 15 ca ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c001d98c:	83 c4 10             	add    esp,0x10
c001d98f:	31 ed                	xor    ebp,ebp
c001d991:	eb bb                	jmp    c001d94e <Thr::loadDLL(char const*, bool)+0x1d9>
c001d993:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d999:	89 d8                	mov    eax,ebx
c001d99b:	5b                   	pop    ebx
c001d99c:	5e                   	pop    esi
c001d99d:	5f                   	pop    edi
c001d99e:	5d                   	pop    ebp
c001d99f:	c3                   	ret    

c001d9a0 <Thr::executeDLL(unsigned long, void*)>:
c001d9a0:	56                   	push   esi
c001d9a1:	53                   	push   ebx
c001d9a2:	52                   	push   edx
c001d9a3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d9a7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d9ab:	85 db                	test   ebx,ebx
c001d9ad:	75 10                	jne    c001d9bf <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d9af:	83 ec 0c             	sub    esp,0xc
c001d9b2:	68 e2 cb 02 c0       	push   0xc002cbe2
c001d9b7:	e8 e5 c9 ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c001d9bc:	83 c4 10             	add    esp,0x10
c001d9bf:	50                   	push   eax
c001d9c0:	50                   	push   eax
c001d9c1:	53                   	push   ebx
c001d9c2:	68 0c cc 02 c0       	push   0xc002cc0c
c001d9c7:	e8 9f 4f ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001d9cc:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d9d0:	89 d8                	mov    eax,ebx
c001d9d2:	83 c4 14             	add    esp,0x14
c001d9d5:	5b                   	pop    ebx
c001d9d6:	5e                   	pop    esi
c001d9d7:	ff e0                	jmp    eax
c001d9d9:	90                   	nop

c001d9da <userModeEntryPoint(void*)>:
c001d9da:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001d9df:	48                   	dec    eax
c001d9e0:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001d9e5:	75 01                	jne    c001d9e8 <userModeEntryPoint(void*)+0xe>
c001d9e7:	fb                   	sti    
c001d9e8:	fb                   	sti    
c001d9e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d9ee:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d9f1:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d9f7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d9fb:	e9 2a 29 fe ff       	jmp    c000032a <goToUsermode>

c001da00 <changeTSS>:
c001da00:	83 ec 14             	sub    esp,0x14
c001da03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da08:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001da0b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001da10:	c1 e2 15             	shl    edx,0x15
c001da13:	29 d0                	sub    eax,edx
c001da15:	50                   	push   eax
c001da16:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c001da1b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001da21:	05 7c 11 00 00       	add    eax,0x117c
c001da26:	50                   	push   eax
c001da27:	e8 78 34 ff ff       	call   c0010ea4 <TSS::setESP(unsigned long)>
c001da2c:	83 c4 1c             	add    esp,0x1c
c001da2f:	c3                   	ret    

c001da30 <switchToThread(ThreadControlBlock*)>:
c001da30:	57                   	push   edi
c001da31:	a1 e4 25 03 c0       	mov    eax,ds:0xc00325e4
c001da36:	56                   	push   esi
c001da37:	85 c0                	test   eax,eax
c001da39:	53                   	push   ebx
c001da3a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001da3e:	0f 85 88 00 00 00    	jne    c001dacc <switchToThread(ThreadControlBlock*)+0x9c>
c001da44:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001da47:	3c ff                	cmp    al,0xff
c001da49:	74 7d                	je     c001dac8 <switchToThread(ThreadControlBlock*)+0x98>
c001da4b:	0f b6 d0             	movzx  edx,al
c001da4e:	b8 84 03 00 00       	mov    eax,0x384
c001da53:	29 d0                	sub    eax,edx
c001da55:	c1 e0 10             	shl    eax,0x10
c001da58:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001da5b:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001da5e:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c001da63:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001da69:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001da70:	74 4a                	je     c001dabc <switchToThread(ThreadControlBlock*)+0x8c>
c001da72:	0f 31                	rdtsc  
c001da74:	a3 28 26 03 c0       	mov    ds:0xc0032628,eax
c001da79:	89 c6                	mov    esi,eax
c001da7b:	89 d7                	mov    edi,edx
c001da7d:	2b 35 18 26 03 c0    	sub    esi,DWORD PTR ds:0xc0032618
c001da83:	89 15 2c 26 03 c0    	mov    DWORD PTR ds:0xc003262c,edx
c001da89:	1b 3d 1c 26 03 c0    	sbb    edi,DWORD PTR ds:0xc003261c
c001da8f:	89 35 20 26 03 c0    	mov    DWORD PTR ds:0xc0032620,esi
c001da95:	a3 18 26 03 c0       	mov    ds:0xc0032618,eax
c001da9a:	89 3d 24 26 03 c0    	mov    DWORD PTR ds:0xc0032624,edi
c001daa0:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001daa6:	89 15 1c 26 03 c0    	mov    DWORD PTR ds:0xc003261c,edx
c001daac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001daaf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001dab2:	01 c6                	add    esi,eax
c001dab4:	11 d7                	adc    edi,edx
c001dab6:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001dab9:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001dabc:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001dac0:	5b                   	pop    ebx
c001dac1:	5e                   	pop    esi
c001dac2:	5f                   	pop    edi
c001dac3:	e9 9a 28 fe ff       	jmp    c0000362 <switchToThreadASM>
c001dac8:	31 c0                	xor    eax,eax
c001daca:	eb 8f                	jmp    c001da5b <switchToThread(ThreadControlBlock*)+0x2b>
c001dacc:	5b                   	pop    ebx
c001dacd:	c7 05 e0 25 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00325e0,0x1
c001dad7:	5e                   	pop    esi
c001dad8:	5f                   	pop    edi
c001dad9:	c3                   	ret    

c001dada <Process::addArgs(char**)>:
c001dada:	57                   	push   edi
c001dadb:	56                   	push   esi
c001dadc:	53                   	push   ebx
c001dadd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dae1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001dae5:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001daef:	85 ff                	test   edi,edi
c001daf1:	74 3d                	je     c001db30 <Process::addArgs(char**)+0x56>
c001daf3:	8b 07                	mov    eax,DWORD PTR [edi]
c001daf5:	85 c0                	test   eax,eax
c001daf7:	74 37                	je     c001db30 <Process::addArgs(char**)+0x56>
c001daf9:	31 db                	xor    ebx,ebx
c001dafb:	83 ec 0c             	sub    esp,0xc
c001dafe:	50                   	push   eax
c001daff:	e8 68 2c fe ff       	call   c000076c <strlen>
c001db04:	40                   	inc    eax
c001db05:	89 04 24             	mov    DWORD PTR [esp],eax
c001db08:	e8 7f 1d ff ff       	call   c000f88c <malloc>
c001db0d:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001db14:	5a                   	pop    edx
c001db15:	59                   	pop    ecx
c001db16:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001db19:	43                   	inc    ebx
c001db1a:	50                   	push   eax
c001db1b:	e8 ec 2c fe ff       	call   c000080c <strcpy>
c001db20:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001db26:	83 c4 10             	add    esp,0x10
c001db29:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001db2c:	85 c0                	test   eax,eax
c001db2e:	75 cb                	jne    c001dafb <Process::addArgs(char**)+0x21>
c001db30:	5b                   	pop    ebx
c001db31:	5e                   	pop    esi
c001db32:	5f                   	pop    edi
c001db33:	c3                   	ret    

c001db34 <Process::Process(char const*, Process*, char**)>:
c001db34:	56                   	push   esi
c001db35:	53                   	push   ebx
c001db36:	83 ec 14             	sub    esp,0x14
c001db39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db3d:	05 0c 02 00 00       	add    eax,0x20c
c001db42:	bb 07 00 00 00       	mov    ebx,0x7
c001db47:	89 c6                	mov    esi,eax
c001db49:	85 db                	test   ebx,ebx
c001db4b:	78 12                	js     c001db5f <Process::Process(char const*, Process*, char**)+0x2b>
c001db4d:	83 ec 0c             	sub    esp,0xc
c001db50:	56                   	push   esi
c001db51:	e8 dc ba 00 00       	call   c0029632 <ThreadControlBlock::ThreadControlBlock()>
c001db56:	83 c4 10             	add    esp,0x10
c001db59:	83 c6 63             	add    esi,0x63
c001db5c:	4b                   	dec    ebx
c001db5d:	eb ea                	jmp    c001db49 <Process::Process(char const*, Process*, char**)+0x15>
c001db5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db63:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001db6a:	83 ec 0c             	sub    esp,0xc
c001db6d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db71:	e8 84 c6 ff ff       	call   c001a1fa <Krnl::newProcessEnv(Process*)>
c001db76:	83 c4 10             	add    esp,0x10
c001db79:	89 c2                	mov    edx,eax
c001db7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db7f:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001db85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db89:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001db92:	a1 50 e6 02 c0       	mov    eax,ds:0xc002e650
c001db97:	8d 50 01             	lea    edx,[eax+0x1]
c001db9a:	89 15 50 e6 02 c0    	mov    DWORD PTR ds:0xc002e650,edx
c001dba0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dba4:	89 02                	mov    DWORD PTR [edx],eax
c001dba6:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001dbae:	83 ec 0c             	sub    esp,0xc
c001dbb1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001dbb5:	e8 d2 1c ff ff       	call   c000f88c <malloc>
c001dbba:	83 c4 10             	add    esp,0x10
c001dbbd:	89 c3                	mov    ebx,eax
c001dbbf:	83 ec 08             	sub    esp,0x8
c001dbc2:	6a 00                	push   0x0
c001dbc4:	53                   	push   ebx
c001dbc5:	e8 7c 46 ff ff       	call   c0012246 <VAS::VAS(bool)>
c001dbca:	83 c4 10             	add    esp,0x10
c001dbcd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbd1:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dbd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbdb:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dbe5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbe9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dbed:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dbf3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbf7:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dbfd:	85 c0                	test   eax,eax
c001dbff:	74 42                	je     c001dc43 <Process::Process(char const*, Process*, char**)+0x10f>
c001dc01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc05:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dc0b:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dc11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc15:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dc1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc1f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dc25:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dc2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc2f:	05 0c 01 00 00       	add    eax,0x10c
c001dc34:	83 ec 08             	sub    esp,0x8
c001dc37:	52                   	push   edx
c001dc38:	50                   	push   eax
c001dc39:	e8 ce 2b fe ff       	call   c000080c <strcpy>
c001dc3e:	83 c4 10             	add    esp,0x10
c001dc41:	eb 63                	jmp    c001dca6 <Process::Process(char const*, Process*, char**)+0x172>
c001dc43:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001dc4b:	83 ec 0c             	sub    esp,0xc
c001dc4e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001dc52:	e8 35 1c ff ff       	call   c000f88c <malloc>
c001dc57:	83 c4 10             	add    esp,0x10
c001dc5a:	89 c3                	mov    ebx,eax
c001dc5c:	83 ec 08             	sub    esp,0x8
c001dc5f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc63:	53                   	push   ebx
c001dc64:	e8 1d 2f ff ff       	call   c0010b86 <VgaText::VgaText(char const*)>
c001dc69:	83 c4 10             	add    esp,0x10
c001dc6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc70:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dc76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc7a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dc80:	83 ec 0c             	sub    esp,0xc
c001dc83:	50                   	push   eax
c001dc84:	e8 04 26 ff ff       	call   c001028d <addToTerminalCycle(VgaText*)>
c001dc89:	83 c4 10             	add    esp,0x10
c001dc8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc90:	05 0c 01 00 00       	add    eax,0x10c
c001dc95:	83 ec 08             	sub    esp,0x8
c001dc98:	68 2b cc 02 c0       	push   0xc002cc2b
c001dc9d:	50                   	push   eax
c001dc9e:	e8 69 2b fe ff       	call   c000080c <strcpy>
c001dca3:	83 c4 10             	add    esp,0x10
c001dca6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dcaa:	83 c0 0c             	add    eax,0xc
c001dcad:	83 ec 08             	sub    esp,0x8
c001dcb0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dcb4:	50                   	push   eax
c001dcb5:	e8 52 2b fe ff       	call   c000080c <strcpy>
c001dcba:	83 c4 10             	add    esp,0x10
c001dcbd:	83 ec 08             	sub    esp,0x8
c001dcc0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dcc4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dcc8:	e8 0d fe ff ff       	call   c001dada <Process::addArgs(char**)>
c001dccd:	83 c4 10             	add    esp,0x10
c001dcd0:	83 ec 08             	sub    esp,0x8
c001dcd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dcd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dcdb:	e8 a6 ed ff ff       	call   c001ca86 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001dce0:	83 c4 10             	add    esp,0x10
c001dce3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dce7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dceb:	83 f0 01             	xor    eax,0x1
c001dcee:	88 c2                	mov    dl,al
c001dcf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dcf4:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001dcfa:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dcff:	83 ec 08             	sub    esp,0x8
c001dd02:	50                   	push   eax
c001dd03:	68 58 cd 02 c0       	push   0xc002cd58
c001dd08:	e8 5e 4c ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001dd0d:	83 c4 10             	add    esp,0x10
c001dd10:	90                   	nop
c001dd11:	83 c4 14             	add    esp,0x14
c001dd14:	5b                   	pop    ebx
c001dd15:	5e                   	pop    esi
c001dd16:	c3                   	ret    
c001dd17:	90                   	nop

c001dd18 <Process::Process(bool, char const*, Process*, char**)>:
c001dd18:	56                   	push   esi
c001dd19:	53                   	push   ebx
c001dd1a:	83 ec 24             	sub    esp,0x24
c001dd1d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dd21:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dd25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd29:	05 0c 02 00 00       	add    eax,0x20c
c001dd2e:	bb 07 00 00 00       	mov    ebx,0x7
c001dd33:	89 c6                	mov    esi,eax
c001dd35:	85 db                	test   ebx,ebx
c001dd37:	78 12                	js     c001dd4b <Process::Process(bool, char const*, Process*, char**)+0x33>
c001dd39:	83 ec 0c             	sub    esp,0xc
c001dd3c:	56                   	push   esi
c001dd3d:	e8 f0 b8 00 00       	call   c0029632 <ThreadControlBlock::ThreadControlBlock()>
c001dd42:	83 c4 10             	add    esp,0x10
c001dd45:	83 c6 63             	add    esi,0x63
c001dd48:	4b                   	dec    ebx
c001dd49:	eb ea                	jmp    c001dd35 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001dd4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd4f:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dd56:	83 ec 0c             	sub    esp,0xc
c001dd59:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dd5d:	e8 98 c4 ff ff       	call   c001a1fa <Krnl::newProcessEnv(Process*)>
c001dd62:	83 c4 10             	add    esp,0x10
c001dd65:	89 c2                	mov    edx,eax
c001dd67:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd6b:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dd71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd75:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dd7e:	a1 50 e6 02 c0       	mov    eax,ds:0xc002e650
c001dd83:	8d 50 01             	lea    edx,[eax+0x1]
c001dd86:	89 15 50 e6 02 c0    	mov    DWORD PTR ds:0xc002e650,edx
c001dd8c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dd90:	89 02                	mov    DWORD PTR [edx],eax
c001dd92:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001dd9a:	83 ec 0c             	sub    esp,0xc
c001dd9d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001dda1:	e8 e6 1a ff ff       	call   c000f88c <malloc>
c001dda6:	83 c4 10             	add    esp,0x10
c001dda9:	89 c3                	mov    ebx,eax
c001ddab:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ddb0:	83 ec 08             	sub    esp,0x8
c001ddb3:	50                   	push   eax
c001ddb4:	53                   	push   ebx
c001ddb5:	e8 8c 44 ff ff       	call   c0012246 <VAS::VAS(bool)>
c001ddba:	83 c4 10             	add    esp,0x10
c001ddbd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddc1:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001ddc7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddcb:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001ddd5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddd9:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dddd:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dde3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dde7:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dded:	85 c0                	test   eax,eax
c001ddef:	74 42                	je     c001de33 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001ddf1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddf5:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ddfb:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001de01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de05:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001de0b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de0f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001de15:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001de1b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de1f:	05 0c 01 00 00       	add    eax,0x10c
c001de24:	83 ec 08             	sub    esp,0x8
c001de27:	52                   	push   edx
c001de28:	50                   	push   eax
c001de29:	e8 de 29 fe ff       	call   c000080c <strcpy>
c001de2e:	83 c4 10             	add    esp,0x10
c001de31:	eb 63                	jmp    c001de96 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001de33:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001de3b:	83 ec 0c             	sub    esp,0xc
c001de3e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001de42:	e8 45 1a ff ff       	call   c000f88c <malloc>
c001de47:	83 c4 10             	add    esp,0x10
c001de4a:	89 c3                	mov    ebx,eax
c001de4c:	83 ec 08             	sub    esp,0x8
c001de4f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001de53:	53                   	push   ebx
c001de54:	e8 2d 2d ff ff       	call   c0010b86 <VgaText::VgaText(char const*)>
c001de59:	83 c4 10             	add    esp,0x10
c001de5c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de60:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001de66:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de6a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001de70:	83 ec 0c             	sub    esp,0xc
c001de73:	50                   	push   eax
c001de74:	e8 14 24 ff ff       	call   c001028d <addToTerminalCycle(VgaText*)>
c001de79:	83 c4 10             	add    esp,0x10
c001de7c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de80:	05 0c 01 00 00       	add    eax,0x10c
c001de85:	83 ec 08             	sub    esp,0x8
c001de88:	68 2b cc 02 c0       	push   0xc002cc2b
c001de8d:	50                   	push   eax
c001de8e:	e8 79 29 fe ff       	call   c000080c <strcpy>
c001de93:	83 c4 10             	add    esp,0x10
c001de96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de9a:	83 c0 0c             	add    eax,0xc
c001de9d:	83 ec 08             	sub    esp,0x8
c001dea0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dea4:	50                   	push   eax
c001dea5:	e8 62 29 fe ff       	call   c000080c <strcpy>
c001deaa:	83 c4 10             	add    esp,0x10
c001dead:	83 ec 08             	sub    esp,0x8
c001deb0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001deb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001deb8:	e8 1d fc ff ff       	call   c001dada <Process::addArgs(char**)>
c001debd:	83 c4 10             	add    esp,0x10
c001dec0:	90                   	nop
c001dec1:	83 c4 24             	add    esp,0x24
c001dec4:	5b                   	pop    ebx
c001dec5:	5e                   	pop    esi
c001dec6:	c3                   	ret    

c001dec7 <taskStartupFunction>:
c001dec7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001decc:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001decf:	c3                   	ret    

c001ded0 <Semaphore::Semaphore(int)>:
c001ded0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ded4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ded8:	89 10                	mov    DWORD PTR [eax],edx
c001deda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dede:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001dee5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dee9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001def0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001def4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001defb:	90                   	nop
c001defc:	c3                   	ret    
c001defd:	90                   	nop

c001defe <Mutex::Mutex()>:
c001defe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df02:	6a 01                	push   0x1
c001df04:	50                   	push   eax
c001df05:	e8 c6 ff ff ff       	call   c001ded0 <Semaphore::Semaphore(int)>
c001df0a:	83 c4 08             	add    esp,0x8
c001df0d:	90                   	nop
c001df0e:	c3                   	ret    
c001df0f:	90                   	nop

c001df10 <Process::createThread(void (*)(void*), void*, int)>:
c001df10:	55                   	push   ebp
c001df11:	31 c9                	xor    ecx,ecx
c001df13:	57                   	push   edi
c001df14:	56                   	push   esi
c001df15:	53                   	push   ebx
c001df16:	83 ec 1c             	sub    esp,0x1c
c001df19:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001df1d:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001df24:	89 f2                	mov    edx,esi
c001df26:	0f b7 c2             	movzx  eax,dx
c001df29:	83 e2 01             	and    edx,0x1
c001df2c:	74 16                	je     c001df44 <Process::createThread(void (*)(void*), void*, int)+0x34>
c001df2e:	d1 f8                	sar    eax,1
c001df30:	41                   	inc    ecx
c001df31:	89 c2                	mov    edx,eax
c001df33:	83 f9 10             	cmp    ecx,0x10
c001df36:	75 ee                	jne    c001df26 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001df38:	83 c4 1c             	add    esp,0x1c
c001df3b:	31 db                	xor    ebx,ebx
c001df3d:	89 d8                	mov    eax,ebx
c001df3f:	5b                   	pop    ebx
c001df40:	5e                   	pop    esi
c001df41:	5f                   	pop    edi
c001df42:	5d                   	pop    ebp
c001df43:	c3                   	ret    
c001df44:	b8 01 00 00 00       	mov    eax,0x1
c001df49:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001df4c:	d3 e0                	shl    eax,cl
c001df4e:	09 c6                	or     esi,eax
c001df50:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001df53:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001df5a:	89 c6                	mov    esi,eax
c001df5c:	c1 e6 05             	shl    esi,0x5
c001df5f:	01 f0                	add    eax,esi
c001df61:	01 d8                	add    eax,ebx
c001df63:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001df6a:	75 0a                	jne    c001df76 <Process::createThread(void (*)(void*), void*, int)+0x66>
c001df6c:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001df76:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001df7c:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001df80:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001df83:	01 ca                	add    edx,ecx
c001df85:	83 ec 08             	sub    esp,0x8
c001df88:	89 d0                	mov    eax,edx
c001df8a:	c1 e0 05             	shl    eax,0x5
c001df8d:	01 d0                	add    eax,edx
c001df8f:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001df93:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001df97:	01 d8                	add    eax,ebx
c001df99:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001df9f:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001dfa5:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001dfab:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001dfb1:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001dfb7:	89 cd                	mov    ebp,ecx
c001dfb9:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001dfbd:	f7 dd                	neg    ebp
c001dfbf:	c1 e5 15             	shl    ebp,0x15
c001dfc2:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001dfc8:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001dfce:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001dfd8:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001dfde:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001dfe8:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001dff2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dff6:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001dffd:	53                   	push   ebx
c001dffe:	68 04 26 03 c0       	push   0xc0032604
c001e003:	e8 e4 b3 00 00       	call   c00293ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e008:	89 d8                	mov    eax,ebx
c001e00a:	83 c4 10             	add    esp,0x10
c001e00d:	83 c4 1c             	add    esp,0x1c
c001e010:	5b                   	pop    ebx
c001e011:	5e                   	pop    esi
c001e012:	5f                   	pop    edi
c001e013:	5d                   	pop    ebp
c001e014:	c3                   	ret    
c001e015:	90                   	nop

c001e016 <Process::createUserThread()>:
c001e016:	83 ec 0c             	sub    esp,0xc
c001e019:	68 80 00 00 00       	push   0x80
c001e01e:	6a 00                	push   0x0
c001e020:	68 da d9 01 c0       	push   0xc001d9da
c001e025:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e029:	e8 e2 fe ff ff       	call   c001df10 <Process::createThread(void (*)(void*), void*, int)>
c001e02e:	83 c4 1c             	add    esp,0x1c
c001e031:	c3                   	ret    

c001e032 <setupMultitasking(void (*)())>:
c001e032:	56                   	push   esi
c001e033:	53                   	push   ebx
c001e034:	51                   	push   ecx
c001e035:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e039:	eb 10                	jmp    c001e04b <setupMultitasking(void (*)())+0x19>
c001e03b:	83 ec 0c             	sub    esp,0xc
c001e03e:	68 04 26 03 c0       	push   0xc0032604
c001e043:	e8 f6 b2 00 00       	call   c002933e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e048:	83 c4 10             	add    esp,0x10
c001e04b:	83 ec 0c             	sub    esp,0xc
c001e04e:	68 04 26 03 c0       	push   0xc0032604
c001e053:	e8 c2 b2 00 00       	call   c002931a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e058:	83 c4 10             	add    esp,0x10
c001e05b:	84 c0                	test   al,al
c001e05d:	74 dc                	je     c001e03b <setupMultitasking(void (*)())+0x9>
c001e05f:	83 ec 0c             	sub    esp,0xc
c001e062:	68 3f 07 00 00       	push   0x73f
c001e067:	e8 20 18 ff ff       	call   c000f88c <malloc>
c001e06c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e073:	89 c3                	mov    ebx,eax
c001e075:	6a 00                	push   0x0
c001e077:	68 2f cc 02 c0       	push   0xc002cc2f
c001e07c:	6a 01                	push   0x1
c001e07e:	50                   	push   eax
c001e07f:	e8 94 fc ff ff       	call   c001dd18 <Process::Process(bool, char const*, Process*, char**)>
c001e084:	83 c4 18             	add    esp,0x18
c001e087:	89 1d 10 26 03 c0    	mov    DWORD PTR ds:0xc0032610,ebx
c001e08d:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e093:	68 80 cd 02 c0       	push   0xc002cd80
c001e098:	e8 ce 48 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001e09d:	58                   	pop    eax
c001e09e:	5a                   	pop    edx
c001e09f:	6a 63                	push   0x63
c001e0a1:	68 b4 cd 02 c0       	push   0xc002cdb4
c001e0a6:	e8 c0 48 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001e0ab:	59                   	pop    ecx
c001e0ac:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e0b2:	e8 d7 26 ff ff       	call   c001078e <setActiveTerminal(VgaText*)>
c001e0b7:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e0bf:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001e0c9:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e0cf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001e0d2:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e0dc:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e0e2:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e0e8:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e0f2:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e0fc:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e106:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e10c:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e116:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e11c:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e126:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e12c:	58                   	pop    eax
c001e12d:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e133:	5a                   	pop    edx
c001e134:	68 2b cc 02 c0       	push   0xc002cc2b
c001e139:	50                   	push   eax
c001e13a:	e8 cd 26 fe ff       	call   c000080c <strcpy>
c001e13f:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e146:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e14a:	83 c4 14             	add    esp,0x14
c001e14d:	5b                   	pop    ebx
c001e14e:	5e                   	pop    esi
c001e14f:	e9 00 22 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e154 <schedule()>:
c001e154:	a1 e4 25 03 c0       	mov    eax,ds:0xc00325e4
c001e159:	85 c0                	test   eax,eax
c001e15b:	74 0b                	je     c001e168 <schedule()+0x14>
c001e15d:	c7 05 e0 25 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00325e0,0x1
c001e167:	c3                   	ret    
c001e168:	53                   	push   ebx
c001e169:	83 ec 14             	sub    esp,0x14
c001e16c:	68 04 26 03 c0       	push   0xc0032604
c001e171:	e8 a4 b1 00 00       	call   c002931a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e176:	83 c4 10             	add    esp,0x10
c001e179:	84 c0                	test   al,al
c001e17b:	75 38                	jne    c001e1b5 <schedule()+0x61>
c001e17d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e182:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e185:	4a                   	dec    edx
c001e186:	74 32                	je     c001e1ba <schedule()+0x66>
c001e188:	83 ec 0c             	sub    esp,0xc
c001e18b:	68 04 26 03 c0       	push   0xc0032604
c001e190:	e8 a1 b1 00 00       	call   c0029336 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e195:	c7 04 24 04 26 03 c0 	mov    DWORD PTR [esp],0xc0032604
c001e19c:	89 c3                	mov    ebx,eax
c001e19e:	e8 9b b1 00 00       	call   c002933e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e1a3:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e1aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e1ad:	e8 7e f8 ff ff       	call   c001da30 <switchToThread(ThreadControlBlock*)>
c001e1b2:	83 c4 10             	add    esp,0x10
c001e1b5:	83 c4 08             	add    esp,0x8
c001e1b8:	5b                   	pop    ebx
c001e1b9:	c3                   	ret    
c001e1ba:	83 ec 08             	sub    esp,0x8
c001e1bd:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e1c4:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e1ca:	68 04 26 03 c0       	push   0xc0032604
c001e1cf:	e8 18 b2 00 00       	call   c00293ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e1d4:	83 c4 10             	add    esp,0x10
c001e1d7:	eb af                	jmp    c001e188 <schedule()+0x34>
c001e1d9:	90                   	nop

c001e1da <Semaphore::tryAcquire()>:
c001e1da:	53                   	push   ebx
c001e1db:	83 ec 08             	sub    esp,0x8
c001e1de:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e1e2:	fa                   	cli    
c001e1e3:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001e1e8:	8d 50 01             	lea    edx,[eax+0x1]
c001e1eb:	89 15 e8 25 03 c0    	mov    DWORD PTR ds:0xc00325e8,edx
c001e1f1:	8b 15 e4 25 03 c0    	mov    edx,DWORD PTR ds:0xc00325e4
c001e1f7:	8d 5a 01             	lea    ebx,[edx+0x1]
c001e1fa:	89 1d e4 25 03 c0    	mov    DWORD PTR ds:0xc00325e4,ebx
c001e200:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001e203:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001e205:	7c 2a                	jl     c001e231 <Semaphore::tryAcquire()+0x57>
c001e207:	89 15 e4 25 03 c0    	mov    DWORD PTR ds:0xc00325e4,edx
c001e20d:	85 d2                	test   edx,edx
c001e20f:	75 0a                	jne    c001e21b <Semaphore::tryAcquire()+0x41>
c001e211:	8b 15 e0 25 03 c0    	mov    edx,DWORD PTR ds:0xc00325e0
c001e217:	85 d2                	test   edx,edx
c001e219:	75 5b                	jne    c001e276 <Semaphore::tryAcquire()+0x9c>
c001e21b:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001e220:	85 c0                	test   eax,eax
c001e222:	74 07                	je     c001e22b <Semaphore::tryAcquire()+0x51>
c001e224:	31 c0                	xor    eax,eax
c001e226:	83 c4 08             	add    esp,0x8
c001e229:	5b                   	pop    ebx
c001e22a:	c3                   	ret    
c001e22b:	fb                   	sti    
c001e22c:	83 c4 08             	add    esp,0x8
c001e22f:	5b                   	pop    ebx
c001e230:	c3                   	ret    
c001e231:	43                   	inc    ebx
c001e232:	89 15 e4 25 03 c0    	mov    DWORD PTR ds:0xc00325e4,edx
c001e238:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001e23b:	85 d2                	test   edx,edx
c001e23d:	75 1f                	jne    c001e25e <Semaphore::tryAcquire()+0x84>
c001e23f:	8b 0d e0 25 03 c0    	mov    ecx,DWORD PTR ds:0xc00325e0
c001e245:	85 c9                	test   ecx,ecx
c001e247:	74 15                	je     c001e25e <Semaphore::tryAcquire()+0x84>
c001e249:	c7 05 e0 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00325e0,0x0
c001e253:	e8 fc fe ff ff       	call   c001e154 <schedule()>
c001e258:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001e25d:	48                   	dec    eax
c001e25e:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001e263:	85 c0                	test   eax,eax
c001e265:	75 08                	jne    c001e26f <Semaphore::tryAcquire()+0x95>
c001e267:	fb                   	sti    
c001e268:	b0 01                	mov    al,0x1
c001e26a:	83 c4 08             	add    esp,0x8
c001e26d:	5b                   	pop    ebx
c001e26e:	c3                   	ret    
c001e26f:	b0 01                	mov    al,0x1
c001e271:	83 c4 08             	add    esp,0x8
c001e274:	5b                   	pop    ebx
c001e275:	c3                   	ret    
c001e276:	c7 05 e0 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00325e0,0x0
c001e280:	e8 cf fe ff ff       	call   c001e154 <schedule()>
c001e285:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001e28a:	48                   	dec    eax
c001e28b:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001e290:	85 c0                	test   eax,eax
c001e292:	75 90                	jne    c001e224 <Semaphore::tryAcquire()+0x4a>
c001e294:	eb 95                	jmp    c001e22b <Semaphore::tryAcquire()+0x51>

c001e296 <Semaphore::assertLocked(char const*)>:
c001e296:	83 ec 0c             	sub    esp,0xc
c001e299:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e29d:	fa                   	cli    
c001e29e:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c001e2a4:	a1 e4 25 03 c0       	mov    eax,ds:0xc00325e4
c001e2a9:	8d 48 01             	lea    ecx,[eax+0x1]
c001e2ac:	89 0d e4 25 03 c0    	mov    DWORD PTR ds:0xc00325e4,ecx
c001e2b2:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001e2b4:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001e2b7:	7c 24                	jl     c001e2dd <Semaphore::assertLocked(char const*)+0x47>
c001e2b9:	a3 e4 25 03 c0       	mov    ds:0xc00325e4,eax
c001e2be:	85 c0                	test   eax,eax
c001e2c0:	75 09                	jne    c001e2cb <Semaphore::assertLocked(char const*)+0x35>
c001e2c2:	a1 e0 25 03 c0       	mov    eax,ds:0xc00325e0
c001e2c7:	85 c0                	test   eax,eax
c001e2c9:	75 29                	jne    c001e2f4 <Semaphore::assertLocked(char const*)+0x5e>
c001e2cb:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001e2d0:	48                   	dec    eax
c001e2d1:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001e2d6:	75 01                	jne    c001e2d9 <Semaphore::assertLocked(char const*)+0x43>
c001e2d8:	fb                   	sti    
c001e2d9:	83 c4 0c             	add    esp,0xc
c001e2dc:	c3                   	ret    
c001e2dd:	83 ec 0c             	sub    esp,0xc
c001e2e0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001e2e4:	e8 b8 c0 ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c001e2e9:	a1 e4 25 03 c0       	mov    eax,ds:0xc00325e4
c001e2ee:	83 c4 10             	add    esp,0x10
c001e2f1:	48                   	dec    eax
c001e2f2:	eb c5                	jmp    c001e2b9 <Semaphore::assertLocked(char const*)+0x23>
c001e2f4:	c7 05 e0 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00325e0,0x0
c001e2fe:	e8 51 fe ff ff       	call   c001e154 <schedule()>
c001e303:	eb c6                	jmp    c001e2cb <Semaphore::assertLocked(char const*)+0x35>

c001e305 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e305:	83 ec 14             	sub    esp,0x14
c001e308:	ff 35 e8 25 03 c0    	push   DWORD PTR ds:0xc00325e8
c001e30e:	68 d8 cd 02 c0       	push   0xc002cdd8
c001e313:	e8 53 46 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001e318:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e31d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e321:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e324:	e8 2b fe ff ff       	call   c001e154 <schedule()>
c001e329:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001e32e:	83 c4 10             	add    esp,0x10
c001e331:	48                   	dec    eax
c001e332:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001e337:	85 c0                	test   eax,eax
c001e339:	75 06                	jne    c001e341 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x3c>
c001e33b:	fb                   	sti    
c001e33c:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001e341:	83 ec 08             	sub    esp,0x8
c001e344:	50                   	push   eax
c001e345:	68 0c ce 02 c0       	push   0xc002ce0c
c001e34a:	e8 1c 46 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001e34f:	83 c4 1c             	add    esp,0x1c
c001e352:	c3                   	ret    

c001e353 <blockTask(TaskState)>:
c001e353:	83 ec 0c             	sub    esp,0xc
c001e356:	fa                   	cli    
c001e357:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c001e35d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e361:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e366:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e369:	e8 e6 fd ff ff       	call   c001e154 <schedule()>
c001e36e:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001e373:	48                   	dec    eax
c001e374:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001e379:	75 01                	jne    c001e37c <blockTask(TaskState)+0x29>
c001e37b:	fb                   	sti    
c001e37c:	83 c4 0c             	add    esp,0xc
c001e37f:	c3                   	ret    

c001e380 <waitTask(int, int*, int)>:
c001e380:	83 ec 18             	sub    esp,0x18
c001e383:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e388:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e38c:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e38f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e393:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e398:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e39b:	6a 07                	push   0x7
c001e39d:	e8 b1 ff ff ff       	call   c001e353 <blockTask(TaskState)>
c001e3a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e3a7:	83 c4 10             	add    esp,0x10
c001e3aa:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e3ad:	85 d2                	test   edx,edx
c001e3af:	74 0a                	je     c001e3bb <waitTask(int, int*, int)+0x3b>
c001e3b1:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e3b4:	89 02                	mov    DWORD PTR [edx],eax
c001e3b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e3bb:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e3be:	83 c4 0c             	add    esp,0xc
c001e3c1:	c3                   	ret    

c001e3c2 <nanoSleepUntil(unsigned long long)>:
c001e3c2:	83 ec 0c             	sub    esp,0xc
c001e3c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e3cd:	3b 05 30 f7 02 c0    	cmp    eax,DWORD PTR ds:0xc002f730
c001e3d3:	89 d1                	mov    ecx,edx
c001e3d5:	1b 0d 34 f7 02 c0    	sbb    ecx,DWORD PTR ds:0xc002f734
c001e3db:	73 04                	jae    c001e3e1 <nanoSleepUntil(unsigned long long)+0x1f>
c001e3dd:	83 c4 0c             	add    esp,0xc
c001e3e0:	c3                   	ret    
c001e3e1:	fa                   	cli    
c001e3e2:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c001e3e8:	83 ec 08             	sub    esp,0x8
c001e3eb:	ff 05 e4 25 03 c0    	inc    DWORD PTR ds:0xc00325e4
c001e3f1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e3f7:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e3fa:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e3fd:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e403:	68 f8 25 03 c0       	push   0xc00325f8
c001e408:	e8 df af 00 00       	call   c00293ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e40d:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e414:	e8 3a ff ff ff       	call   c001e353 <blockTask(TaskState)>
c001e419:	a1 e4 25 03 c0       	mov    eax,ds:0xc00325e4
c001e41e:	83 c4 10             	add    esp,0x10
c001e421:	48                   	dec    eax
c001e422:	a3 e4 25 03 c0       	mov    ds:0xc00325e4,eax
c001e427:	85 c0                	test   eax,eax
c001e429:	75 09                	jne    c001e434 <nanoSleepUntil(unsigned long long)+0x72>
c001e42b:	a1 e0 25 03 c0       	mov    eax,ds:0xc00325e0
c001e430:	85 c0                	test   eax,eax
c001e432:	75 12                	jne    c001e446 <nanoSleepUntil(unsigned long long)+0x84>
c001e434:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001e439:	48                   	dec    eax
c001e43a:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001e43f:	75 9c                	jne    c001e3dd <nanoSleepUntil(unsigned long long)+0x1b>
c001e441:	fb                   	sti    
c001e442:	83 c4 0c             	add    esp,0xc
c001e445:	c3                   	ret    
c001e446:	c7 05 e0 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00325e0,0x0
c001e450:	e8 ff fc ff ff       	call   c001e154 <schedule()>
c001e455:	eb dd                	jmp    c001e434 <nanoSleepUntil(unsigned long long)+0x72>

c001e457 <nanoSleep(unsigned long long)>:
c001e457:	a1 30 f7 02 c0       	mov    eax,ds:0xc002f730
c001e45c:	8b 15 34 f7 02 c0    	mov    edx,DWORD PTR ds:0xc002f734
c001e462:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e466:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e46a:	e9 53 ff ff ff       	jmp    c001e3c2 <nanoSleepUntil(unsigned long long)>

c001e46f <sleep(unsigned long long)>:
c001e46f:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e477:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e47c:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e480:	01 ca                	add    edx,ecx
c001e482:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e486:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e48a:	eb cb                	jmp    c001e457 <nanoSleep(unsigned long long)>

c001e48c <Semaphore::acquire()>:
c001e48c:	83 ec 0c             	sub    esp,0xc
c001e48f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e493:	fa                   	cli    
c001e494:	a1 e4 25 03 c0       	mov    eax,ds:0xc00325e4
c001e499:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c001e49f:	8d 48 01             	lea    ecx,[eax+0x1]
c001e4a2:	89 0d e4 25 03 c0    	mov    DWORD PTR ds:0xc00325e4,ecx
c001e4a8:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001e4ab:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001e4ad:	7d 28                	jge    c001e4d7 <Semaphore::acquire()+0x4b>
c001e4af:	41                   	inc    ecx
c001e4b0:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001e4b3:	a3 e4 25 03 c0       	mov    ds:0xc00325e4,eax
c001e4b8:	85 c0                	test   eax,eax
c001e4ba:	75 09                	jne    c001e4c5 <Semaphore::acquire()+0x39>
c001e4bc:	a1 e0 25 03 c0       	mov    eax,ds:0xc00325e0
c001e4c1:	85 c0                	test   eax,eax
c001e4c3:	75 4e                	jne    c001e513 <Semaphore::acquire()+0x87>
c001e4c5:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001e4ca:	48                   	dec    eax
c001e4cb:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001e4d0:	75 01                	jne    c001e4d3 <Semaphore::acquire()+0x47>
c001e4d2:	fb                   	sti    
c001e4d3:	83 c4 0c             	add    esp,0xc
c001e4d6:	c3                   	ret    
c001e4d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e4dc:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e4e3:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e4e6:	85 c9                	test   ecx,ecx
c001e4e8:	74 3a                	je     c001e524 <Semaphore::acquire()+0x98>
c001e4ea:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001e4ed:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e4f3:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001e4f6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e4fb:	83 ec 0c             	sub    esp,0xc
c001e4fe:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001e501:	6a 05                	push   0x5
c001e503:	e8 4b fe ff ff       	call   c001e353 <blockTask(TaskState)>
c001e508:	a1 e4 25 03 c0       	mov    eax,ds:0xc00325e4
c001e50d:	83 c4 10             	add    esp,0x10
c001e510:	48                   	dec    eax
c001e511:	eb a0                	jmp    c001e4b3 <Semaphore::acquire()+0x27>
c001e513:	c7 05 e0 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00325e0,0x0
c001e51d:	e8 32 fc ff ff       	call   c001e154 <schedule()>
c001e522:	eb a1                	jmp    c001e4c5 <Semaphore::acquire()+0x39>
c001e524:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e529:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e52c:	eb c8                	jmp    c001e4f6 <Semaphore::acquire()+0x6a>

c001e52e <taskReturned>:
c001e52e:	83 ec 18             	sub    esp,0x18
c001e531:	68 40 ce 02 c0       	push   0xc002ce40
c001e536:	e8 66 be ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c001e53b:	83 c4 10             	add    esp,0x10
c001e53e:	83 ec 0c             	sub    esp,0xc
c001e541:	6a 02                	push   0x2
c001e543:	e8 0b fe ff ff       	call   c001e353 <blockTask(TaskState)>
c001e548:	fa                   	cli    
c001e549:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c001e54f:	e8 00 fc ff ff       	call   c001e154 <schedule()>
c001e554:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001e559:	83 c4 10             	add    esp,0x10
c001e55c:	48                   	dec    eax
c001e55d:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001e562:	85 c0                	test   eax,eax
c001e564:	75 d8                	jne    c001e53e <taskReturned+0x10>
c001e566:	fb                   	sti    
c001e567:	eb d5                	jmp    c001e53e <taskReturned+0x10>

c001e569 <Thr::processFromPID(int)>:
c001e569:	57                   	push   edi
c001e56a:	56                   	push   esi
c001e56b:	53                   	push   ebx
c001e56c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e570:	83 ec 0c             	sub    esp,0xc
c001e573:	68 36 cc 02 c0       	push   0xc002cc36
c001e578:	e8 ee 43 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001e57d:	fa                   	cli    
c001e57e:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c001e584:	c7 04 24 04 26 03 c0 	mov    DWORD PTR [esp],0xc0032604
c001e58b:	e8 a6 ad 00 00       	call   c0029336 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e590:	83 c4 10             	add    esp,0x10
c001e593:	89 c7                	mov    edi,eax
c001e595:	eb 14                	jmp    c001e5ab <Thr::processFromPID(int)+0x42>
c001e597:	83 ec 0c             	sub    esp,0xc
c001e59a:	68 04 26 03 c0       	push   0xc0032604
c001e59f:	e8 92 ad 00 00       	call   c0029336 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e5a4:	83 c4 10             	add    esp,0x10
c001e5a7:	39 f8                	cmp    eax,edi
c001e5a9:	74 49                	je     c001e5f4 <Thr::processFromPID(int)+0x8b>
c001e5ab:	83 ec 0c             	sub    esp,0xc
c001e5ae:	68 04 26 03 c0       	push   0xc0032604
c001e5b3:	e8 7e ad 00 00       	call   c0029336 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e5b8:	c7 04 24 04 26 03 c0 	mov    DWORD PTR [esp],0xc0032604
c001e5bf:	89 c3                	mov    ebx,eax
c001e5c1:	e8 78 ad 00 00       	call   c002933e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e5c6:	58                   	pop    eax
c001e5c7:	5a                   	pop    edx
c001e5c8:	53                   	push   ebx
c001e5c9:	68 04 26 03 c0       	push   0xc0032604
c001e5ce:	e8 19 ae 00 00       	call   c00293ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e5d3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e5d6:	83 c4 10             	add    esp,0x10
c001e5d9:	39 30                	cmp    DWORD PTR [eax],esi
c001e5db:	75 ba                	jne    c001e597 <Thr::processFromPID(int)+0x2e>
c001e5dd:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001e5e2:	48                   	dec    eax
c001e5e3:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001e5e8:	74 07                	je     c001e5f1 <Thr::processFromPID(int)+0x88>
c001e5ea:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e5ed:	5b                   	pop    ebx
c001e5ee:	5e                   	pop    esi
c001e5ef:	5f                   	pop    edi
c001e5f0:	c3                   	ret    
c001e5f1:	fb                   	sti    
c001e5f2:	eb f6                	jmp    c001e5ea <Thr::processFromPID(int)+0x81>
c001e5f4:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001e5f9:	48                   	dec    eax
c001e5fa:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001e5ff:	75 01                	jne    c001e602 <Thr::processFromPID(int)+0x99>
c001e601:	fb                   	sti    
c001e602:	83 ec 0c             	sub    esp,0xc
c001e605:	68 51 cc 02 c0       	push   0xc002cc51
c001e60a:	e8 5c 43 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001e60f:	83 c4 10             	add    esp,0x10
c001e612:	31 c0                	xor    eax,eax
c001e614:	5b                   	pop    ebx
c001e615:	5e                   	pop    esi
c001e616:	5f                   	pop    edi
c001e617:	c3                   	ret    

c001e618 <unblockTask(ThreadControlBlock*)>:
c001e618:	53                   	push   ebx
c001e619:	83 ec 08             	sub    esp,0x8
c001e61c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e620:	fa                   	cli    
c001e621:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c001e627:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e62a:	85 c0                	test   eax,eax
c001e62c:	74 66                	je     c001e694 <unblockTask(ThreadControlBlock*)+0x7c>
c001e62e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e631:	48                   	dec    eax
c001e632:	74 31                	je     c001e665 <unblockTask(ThreadControlBlock*)+0x4d>
c001e634:	83 ec 0c             	sub    esp,0xc
c001e637:	68 04 26 03 c0       	push   0xc0032604
c001e63c:	e8 f5 ac 00 00       	call   c0029336 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e641:	83 c4 10             	add    esp,0x10
c001e644:	85 c0                	test   eax,eax
c001e646:	75 17                	jne    c001e65f <unblockTask(ThreadControlBlock*)+0x47>
c001e648:	eb 68                	jmp    c001e6b2 <unblockTask(ThreadControlBlock*)+0x9a>
c001e64a:	83 ec 08             	sub    esp,0x8
c001e64d:	50                   	push   eax
c001e64e:	68 04 26 03 c0       	push   0xc0032604
c001e653:	e8 7c b0 00 00       	call   c00296d4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e658:	83 c4 10             	add    esp,0x10
c001e65b:	85 c0                	test   eax,eax
c001e65d:	74 53                	je     c001e6b2 <unblockTask(ThreadControlBlock*)+0x9a>
c001e65f:	39 c3                	cmp    ebx,eax
c001e661:	75 e7                	jne    c001e64a <unblockTask(ThreadControlBlock*)+0x32>
c001e663:	eb 1c                	jmp    c001e681 <unblockTask(ThreadControlBlock*)+0x69>
c001e665:	83 ec 0c             	sub    esp,0xc
c001e668:	68 30 cf 02 c0       	push   0xc002cf30
c001e66d:	e8 f9 42 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001e672:	c7 04 24 bc ce 02 c0 	mov    DWORD PTR [esp],0xc002cebc
c001e679:	e8 ed 42 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001e67e:	83 c4 10             	add    esp,0x10
c001e681:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001e686:	48                   	dec    eax
c001e687:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001e68c:	75 01                	jne    c001e68f <unblockTask(ThreadControlBlock*)+0x77>
c001e68e:	fb                   	sti    
c001e68f:	83 c4 08             	add    esp,0x8
c001e692:	5b                   	pop    ebx
c001e693:	c3                   	ret    
c001e694:	83 ec 0c             	sub    esp,0xc
c001e697:	68 74 ce 02 c0       	push   0xc002ce74
c001e69c:	e8 ca 42 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001e6a1:	c7 04 24 bc ce 02 c0 	mov    DWORD PTR [esp],0xc002cebc
c001e6a8:	e8 be 42 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001e6ad:	83 c4 10             	add    esp,0x10
c001e6b0:	eb cf                	jmp    c001e681 <unblockTask(ThreadControlBlock*)+0x69>
c001e6b2:	83 ec 08             	sub    esp,0x8
c001e6b5:	53                   	push   ebx
c001e6b6:	68 04 26 03 c0       	push   0xc0032604
c001e6bb:	e8 2c ad 00 00       	call   c00293ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e6c0:	83 c4 10             	add    esp,0x10
c001e6c3:	eb bc                	jmp    c001e681 <unblockTask(ThreadControlBlock*)+0x69>

c001e6c5 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e6c5:	55                   	push   ebp
c001e6c6:	57                   	push   edi
c001e6c7:	56                   	push   esi
c001e6c8:	53                   	push   ebx
c001e6c9:	83 ec 1c             	sub    esp,0x1c
c001e6cc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e6d0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e6d3:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e6d9:	85 ff                	test   edi,edi
c001e6db:	7e 20                	jle    c001e6fd <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e6dd:	31 f6                	xor    esi,esi
c001e6df:	83 ec 0c             	sub    esp,0xc
c001e6e2:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e6e9:	46                   	inc    esi
c001e6ea:	e8 ad 11 ff ff       	call   c000f89c <free>
c001e6ef:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e6f2:	83 c4 10             	add    esp,0x10
c001e6f5:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e6fb:	7f e2                	jg     c001e6df <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e6fd:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e707:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e70c:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e70f:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e712:	d3 c0                	rol    eax,cl
c001e714:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e71b:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e71e:	89 f7                	mov    edi,esi
c001e720:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e728:	0f 85 74 01 00 00    	jne    c001e8a2 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e72e:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e734:	85 ed                	test   ebp,ebp
c001e736:	74 1b                	je     c001e753 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e738:	83 ec 0c             	sub    esp,0xc
c001e73b:	55                   	push   ebp
c001e73c:	e8 d5 b9 ff ff       	call   c001a116 <EnvVarContainer::~EnvVarContainer()>
c001e741:	59                   	pop    ecx
c001e742:	5e                   	pop    esi
c001e743:	6a 0c                	push   0xc
c001e745:	55                   	push   ebp
c001e746:	e8 40 41 ff ff       	call   c001288b <operator delete(void*, unsigned long)>
c001e74b:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e74e:	83 c4 10             	add    esp,0x10
c001e751:	89 f7                	mov    edi,esi
c001e753:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e759:	85 c0                	test   eax,eax
c001e75b:	0f 84 aa 00 00 00    	je     c001e80b <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e761:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e764:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e768:	31 c9                	xor    ecx,ecx
c001e76a:	eb 10                	jmp    c001e77c <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e76c:	41                   	inc    ecx
c001e76d:	83 f9 10             	cmp    ecx,0x10
c001e770:	0f 84 95 00 00 00    	je     c001e80b <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e776:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e77c:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e783:	d3 fa                	sar    edx,cl
c001e785:	83 e2 01             	and    edx,0x1
c001e788:	74 e2                	je     c001e76c <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e78a:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e78d:	01 ca                	add    edx,ecx
c001e78f:	89 d5                	mov    ebp,edx
c001e791:	c1 e5 05             	shl    ebp,0x5
c001e794:	01 ea                	add    edx,ebp
c001e796:	01 d0                	add    eax,edx
c001e798:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e79e:	83 fd 07             	cmp    ebp,0x7
c001e7a1:	75 c9                	jne    c001e76c <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e7a3:	05 40 02 00 00       	add    eax,0x240
c001e7a8:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e7ab:	83 fd ff             	cmp    ebp,0xffffffff
c001e7ae:	0f 8c 08 01 00 00    	jl     c001e8bc <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e7b4:	0f 84 b9 01 00 00    	je     c001e973 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e7ba:	85 ed                	test   ebp,ebp
c001e7bc:	0f 84 a0 01 00 00    	je     c001e962 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e7c2:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e7c4:	75 a6                	jne    c001e76c <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e7c6:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e7cc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e7d0:	01 d0                	add    eax,edx
c001e7d2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e7d6:	83 ec 0c             	sub    esp,0xc
c001e7d9:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e7df:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e7e2:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e7e8:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e7ef:	50                   	push   eax
c001e7f0:	e8 23 fe ff ff       	call   c001e618 <unblockTask(ThreadControlBlock*)>
c001e7f5:	83 c4 10             	add    esp,0x10
c001e7f8:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e7fb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e7ff:	89 f7                	mov    edi,esi
c001e801:	41                   	inc    ecx
c001e802:	83 f9 10             	cmp    ecx,0x10
c001e805:	0f 85 6b ff ff ff    	jne    c001e776 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e80b:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e811:	85 c0                	test   eax,eax
c001e813:	74 5d                	je     c001e872 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e815:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e81b:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e821:	74 4f                	je     c001e872 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e823:	83 ec 0c             	sub    esp,0xc
c001e826:	68 04 26 03 c0       	push   0xc0032604
c001e82b:	e8 06 ab 00 00       	call   c0029336 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e830:	c7 04 24 04 26 03 c0 	mov    DWORD PTR [esp],0xc0032604
c001e837:	89 c7                	mov    edi,eax
c001e839:	e8 dc aa 00 00       	call   c002931a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e83e:	83 c4 10             	add    esp,0x10
c001e841:	84 c0                	test   al,al
c001e843:	0f 84 e4 00 00 00    	je     c001e92d <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e849:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e84c:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e852:	85 d2                	test   edx,edx
c001e854:	74 0f                	je     c001e865 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e856:	83 ec 0c             	sub    esp,0xc
c001e859:	8b 02                	mov    eax,DWORD PTR [edx]
c001e85b:	52                   	push   edx
c001e85c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e85f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e862:	83 c4 10             	add    esp,0x10
c001e865:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e86f:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e872:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e878:	85 db                	test   ebx,ebx
c001e87a:	74 16                	je     c001e892 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e87c:	83 ec 0c             	sub    esp,0xc
c001e87f:	53                   	push   ebx
c001e880:	e8 9b 33 ff ff       	call   c0011c20 <VAS::~VAS()>
c001e885:	58                   	pop    eax
c001e886:	5a                   	pop    edx
c001e887:	6a 14                	push   0x14
c001e889:	53                   	push   ebx
c001e88a:	e8 fc 3f ff ff       	call   c001288b <operator delete(void*, unsigned long)>
c001e88f:	83 c4 10             	add    esp,0x10
c001e892:	83 ec 0c             	sub    esp,0xc
c001e895:	68 68 cc 02 c0       	push   0xc002cc68
c001e89a:	e8 cc 40 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001e89f:	83 c4 10             	add    esp,0x10
c001e8a2:	83 ec 08             	sub    esp,0x8
c001e8a5:	68 3f 07 00 00       	push   0x73f
c001e8aa:	68 76 cc 02 c0       	push   0xc002cc76
c001e8af:	e8 b7 40 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001e8b4:	83 c4 2c             	add    esp,0x2c
c001e8b7:	5b                   	pop    ebx
c001e8b8:	5e                   	pop    esi
c001e8b9:	5f                   	pop    edi
c001e8ba:	5d                   	pop    ebp
c001e8bb:	c3                   	ret    
c001e8bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e8c0:	83 ec 0c             	sub    esp,0xc
c001e8c3:	68 74 cf 02 c0       	push   0xc002cf74
c001e8c8:	e8 d4 ba ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c001e8cd:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e8d0:	83 c4 10             	add    esp,0x10
c001e8d3:	89 f7                	mov    edi,esi
c001e8d5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e8d9:	e9 8e fe ff ff       	jmp    c001e76c <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e8de:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e8e4:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e8ea:	75 1c                	jne    c001e908 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e8ec:	83 ec 0c             	sub    esp,0xc
c001e8ef:	68 dc cf 02 c0       	push   0xc002cfdc
c001e8f4:	e8 72 40 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001e8f9:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e900:	e8 4e fa ff ff       	call   c001e353 <blockTask(TaskState)>
c001e905:	83 c4 10             	add    esp,0x10
c001e908:	83 ec 08             	sub    esp,0x8
c001e90b:	56                   	push   esi
c001e90c:	68 04 26 03 c0       	push   0xc0032604
c001e911:	e8 d6 aa 00 00       	call   c00293ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e916:	c7 04 24 04 26 03 c0 	mov    DWORD PTR [esp],0xc0032604
c001e91d:	e8 14 aa 00 00       	call   c0029336 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e922:	83 c4 10             	add    esp,0x10
c001e925:	39 f8                	cmp    eax,edi
c001e927:	0f 84 1c ff ff ff    	je     c001e849 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e92d:	83 ec 0c             	sub    esp,0xc
c001e930:	68 04 26 03 c0       	push   0xc0032604
c001e935:	e8 fc a9 00 00       	call   c0029336 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e93a:	c7 04 24 04 26 03 c0 	mov    DWORD PTR [esp],0xc0032604
c001e941:	89 c6                	mov    esi,eax
c001e943:	e8 f6 a9 00 00       	call   c002933e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e948:	83 c4 10             	add    esp,0x10
c001e94b:	39 f3                	cmp    ebx,esi
c001e94d:	74 b9                	je     c001e908 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e94f:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e952:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e955:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e95b:	75 ab                	jne    c001e908 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e95d:	e9 7c ff ff ff       	jmp    c001e8de <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e962:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e966:	83 ec 0c             	sub    esp,0xc
c001e969:	68 a8 cf 02 c0       	push   0xc002cfa8
c001e96e:	e9 55 ff ff ff       	jmp    c001e8c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e973:	8b 36                	mov    esi,DWORD PTR [esi]
c001e975:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e979:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e97c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e97f:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e985:	01 d7                	add    edi,edx
c001e987:	89 f8                	mov    eax,edi
c001e989:	e9 44 fe ff ff       	jmp    c001e7d2 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e98e <cleanerTaskFunction(void*)>:
c001e98e:	53                   	push   ebx
c001e98f:	83 ec 08             	sub    esp,0x8
c001e992:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001e997:	48                   	dec    eax
c001e998:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001e99d:	75 01                	jne    c001e9a0 <cleanerTaskFunction(void*)+0x12>
c001e99f:	fb                   	sti    
c001e9a0:	fa                   	cli    
c001e9a1:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001e9a6:	80 3d cc 25 03 c0 00 	cmp    BYTE PTR ds:0xc00325cc,0x0
c001e9ad:	8d 50 01             	lea    edx,[eax+0x1]
c001e9b0:	89 15 e8 25 03 c0    	mov    DWORD PTR ds:0xc00325e8,edx
c001e9b6:	0f 84 b9 00 00 00    	je     c001ea75 <cleanerTaskFunction(void*)+0xe7>
c001e9bc:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001e9c1:	85 c0                	test   eax,eax
c001e9c3:	75 01                	jne    c001e9c6 <cleanerTaskFunction(void*)+0x38>
c001e9c5:	fb                   	sti    
c001e9c6:	c6 05 cc 25 03 c0 00 	mov    BYTE PTR ds:0xc00325cc,0x0
c001e9cd:	fa                   	cli    
c001e9ce:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c001e9d4:	ff 05 e4 25 03 c0    	inc    DWORD PTR ds:0xc00325e4
c001e9da:	fa                   	cli    
c001e9db:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c001e9e1:	eb 3e                	jmp    c001ea21 <cleanerTaskFunction(void*)+0x93>
c001e9e3:	83 ec 0c             	sub    esp,0xc
c001e9e6:	68 ec 25 03 c0       	push   0xc00325ec
c001e9eb:	e8 46 a9 00 00       	call   c0029336 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e9f0:	c7 04 24 ec 25 03 c0 	mov    DWORD PTR [esp],0xc00325ec
c001e9f7:	89 c3                	mov    ebx,eax
c001e9f9:	e8 40 a9 00 00       	call   c002933e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e9fe:	c7 04 24 8c cc 02 c0 	mov    DWORD PTR [esp],0xc002cc8c
c001ea05:	e8 61 3f ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001ea0a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ea0d:	e8 b3 fc ff ff       	call   c001e6c5 <cleanupTerminatedTask(ThreadControlBlock*)>
c001ea12:	c7 04 24 a5 cc 02 c0 	mov    DWORD PTR [esp],0xc002cca5
c001ea19:	e8 4d 3f ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001ea1e:	83 c4 10             	add    esp,0x10
c001ea21:	83 ec 0c             	sub    esp,0xc
c001ea24:	68 ec 25 03 c0       	push   0xc00325ec
c001ea29:	e8 ec a8 00 00       	call   c002931a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001ea2e:	83 c4 10             	add    esp,0x10
c001ea31:	84 c0                	test   al,al
c001ea33:	74 ae                	je     c001e9e3 <cleanerTaskFunction(void*)+0x55>
c001ea35:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001ea3a:	48                   	dec    eax
c001ea3b:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001ea40:	75 01                	jne    c001ea43 <cleanerTaskFunction(void*)+0xb5>
c001ea42:	fb                   	sti    
c001ea43:	a1 e4 25 03 c0       	mov    eax,ds:0xc00325e4
c001ea48:	48                   	dec    eax
c001ea49:	a3 e4 25 03 c0       	mov    ds:0xc00325e4,eax
c001ea4e:	0f 85 3e ff ff ff    	jne    c001e992 <cleanerTaskFunction(void*)+0x4>
c001ea54:	a1 e0 25 03 c0       	mov    eax,ds:0xc00325e0
c001ea59:	85 c0                	test   eax,eax
c001ea5b:	0f 84 31 ff ff ff    	je     c001e992 <cleanerTaskFunction(void*)+0x4>
c001ea61:	c7 05 e0 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00325e0,0x0
c001ea6b:	e8 e4 f6 ff ff       	call   c001e154 <schedule()>
c001ea70:	e9 1d ff ff ff       	jmp    c001e992 <cleanerTaskFunction(void*)+0x4>
c001ea75:	83 ec 0c             	sub    esp,0xc
c001ea78:	6a 02                	push   0x2
c001ea7a:	e8 86 f8 ff ff       	call   c001e305 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ea7f:	83 c4 10             	add    esp,0x10
c001ea82:	e9 3f ff ff ff       	jmp    c001e9c6 <cleanerTaskFunction(void*)+0x38>

c001ea87 <terminateTask(int)>:
c001ea87:	83 ec 14             	sub    esp,0x14
c001ea8a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea8f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ea92:	83 c0 0c             	add    eax,0xc
c001ea95:	50                   	push   eax
c001ea96:	68 04 d0 02 c0       	push   0xc002d004
c001ea9b:	e8 cb 3e ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001eaa0:	fa                   	cli    
c001eaa1:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c001eaa7:	ff 05 e4 25 03 c0    	inc    DWORD PTR ds:0xc00325e4
c001eaad:	fa                   	cli    
c001eaae:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c001eab4:	c7 04 24 b8 cc 02 c0 	mov    DWORD PTR [esp],0xc002ccb8
c001eabb:	e8 ab 3e ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001eac0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001eac4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eac9:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001eacc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ead1:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ead4:	5a                   	pop    edx
c001ead5:	59                   	pop    ecx
c001ead6:	50                   	push   eax
c001ead7:	68 ec 25 03 c0       	push   0xc00325ec
c001eadc:	e8 0b a9 00 00       	call   c00293ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001eae1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eae6:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001eaed:	c7 04 24 d2 cc 02 c0 	mov    DWORD PTR [esp],0xc002ccd2
c001eaf4:	e8 72 3e ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001eaf9:	83 c4 10             	add    esp,0x10
c001eafc:	a1 c8 25 03 c0       	mov    eax,ds:0xc00325c8
c001eb01:	85 c0                	test   eax,eax
c001eb03:	0f 84 8d 00 00 00    	je     c001eb96 <terminateTask(int)+0x10f>
c001eb09:	83 ec 0c             	sub    esp,0xc
c001eb0c:	68 ec cc 02 c0       	push   0xc002ccec
c001eb11:	e8 55 3e ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001eb16:	58                   	pop    eax
c001eb17:	c6 05 cc 25 03 c0 01 	mov    BYTE PTR ds:0xc00325cc,0x1
c001eb1e:	ff 35 c8 25 03 c0    	push   DWORD PTR ds:0xc00325c8
c001eb24:	e8 ef fa ff ff       	call   c001e618 <unblockTask(ThreadControlBlock*)>
c001eb29:	c7 04 24 06 cd 02 c0 	mov    DWORD PTR [esp],0xc002cd06
c001eb30:	e8 36 3e ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001eb35:	83 c4 10             	add    esp,0x10
c001eb38:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001eb3d:	48                   	dec    eax
c001eb3e:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001eb43:	75 01                	jne    c001eb46 <terminateTask(int)+0xbf>
c001eb45:	fb                   	sti    
c001eb46:	a1 e4 25 03 c0       	mov    eax,ds:0xc00325e4
c001eb4b:	48                   	dec    eax
c001eb4c:	a3 e4 25 03 c0       	mov    ds:0xc00325e4,eax
c001eb51:	75 09                	jne    c001eb5c <terminateTask(int)+0xd5>
c001eb53:	83 3d e0 25 03 c0 00 	cmp    DWORD PTR ds:0xc00325e0,0x0
c001eb5a:	75 4c                	jne    c001eba8 <terminateTask(int)+0x121>
c001eb5c:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001eb61:	48                   	dec    eax
c001eb62:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001eb67:	75 01                	jne    c001eb6a <terminateTask(int)+0xe3>
c001eb69:	fb                   	sti    
c001eb6a:	83 ec 0c             	sub    esp,0xc
c001eb6d:	68 3e cd 02 c0       	push   0xc002cd3e
c001eb72:	e8 f4 3d ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001eb77:	83 c4 10             	add    esp,0x10
c001eb7a:	fa                   	cli    
c001eb7b:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c001eb81:	e8 ce f5 ff ff       	call   c001e154 <schedule()>
c001eb86:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001eb8b:	48                   	dec    eax
c001eb8c:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001eb91:	75 e7                	jne    c001eb7a <terminateTask(int)+0xf3>
c001eb93:	fb                   	sti    
c001eb94:	eb e4                	jmp    c001eb7a <terminateTask(int)+0xf3>
c001eb96:	83 ec 0c             	sub    esp,0xc
c001eb99:	68 20 cd 02 c0       	push   0xc002cd20
c001eb9e:	e8 c8 3d ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001eba3:	83 c4 10             	add    esp,0x10
c001eba6:	eb 90                	jmp    c001eb38 <terminateTask(int)+0xb1>
c001eba8:	c7 05 e0 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00325e0,0x0
c001ebb2:	e8 9d f5 ff ff       	call   c001e154 <schedule()>
c001ebb7:	eb a3                	jmp    c001eb5c <terminateTask(int)+0xd5>

c001ebb9 <Thr::terminateFromIRQ(int)>:
c001ebb9:	83 ec 18             	sub    esp,0x18
c001ebbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ebc0:	e8 c2 fe ff ff       	call   c001ea87 <terminateTask(int)>
c001ebc5:	90                   	nop

c001ebc6 <Semaphore::release()>:
c001ebc6:	83 ec 0c             	sub    esp,0xc
c001ebc9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ebcd:	fa                   	cli    
c001ebce:	a1 e4 25 03 c0       	mov    eax,ds:0xc00325e4
c001ebd3:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c001ebd9:	8d 48 01             	lea    ecx,[eax+0x1]
c001ebdc:	89 0d e4 25 03 c0    	mov    DWORD PTR ds:0xc00325e4,ecx
c001ebe2:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001ebe5:	85 c9                	test   ecx,ecx
c001ebe7:	74 3c                	je     c001ec25 <Semaphore::release()+0x5f>
c001ebe9:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001ebec:	83 ec 0c             	sub    esp,0xc
c001ebef:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001ebf2:	51                   	push   ecx
c001ebf3:	e8 20 fa ff ff       	call   c001e618 <unblockTask(ThreadControlBlock*)>
c001ebf8:	a1 e4 25 03 c0       	mov    eax,ds:0xc00325e4
c001ebfd:	83 c4 10             	add    esp,0x10
c001ec00:	48                   	dec    eax
c001ec01:	a3 e4 25 03 c0       	mov    ds:0xc00325e4,eax
c001ec06:	85 c0                	test   eax,eax
c001ec08:	75 09                	jne    c001ec13 <Semaphore::release()+0x4d>
c001ec0a:	a1 e0 25 03 c0       	mov    eax,ds:0xc00325e0
c001ec0f:	85 c0                	test   eax,eax
c001ec11:	75 17                	jne    c001ec2a <Semaphore::release()+0x64>
c001ec13:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001ec18:	48                   	dec    eax
c001ec19:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001ec1e:	75 01                	jne    c001ec21 <Semaphore::release()+0x5b>
c001ec20:	fb                   	sti    
c001ec21:	83 c4 0c             	add    esp,0xc
c001ec24:	c3                   	ret    
c001ec25:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001ec28:	eb d7                	jmp    c001ec01 <Semaphore::release()+0x3b>
c001ec2a:	c7 05 e0 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00325e0,0x0
c001ec34:	e8 1b f5 ff ff       	call   c001e154 <schedule()>
c001ec39:	eb d8                	jmp    c001ec13 <Semaphore::release()+0x4d>

c001ec3b <__static_initialization_and_destruction_0(int, int)>:
c001ec3b:	83 ec 0c             	sub    esp,0xc
c001ec3e:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001ec43:	0f 85 88 00 00 00    	jne    c001ecd1 <__static_initialization_and_destruction_0(int, int)+0x96>
c001ec49:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001ec51:	75 7e                	jne    c001ecd1 <__static_initialization_and_destruction_0(int, int)+0x96>
c001ec53:	83 ec 0c             	sub    esp,0xc
c001ec56:	68 04 26 03 c0       	push   0xc0032604
c001ec5b:	e8 1c aa 00 00       	call   c002967c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ec60:	83 c4 10             	add    esp,0x10
c001ec63:	83 ec 04             	sub    esp,0x4
c001ec66:	68 7c de 02 c0       	push   0xc002de7c
c001ec6b:	68 04 26 03 c0       	push   0xc0032604
c001ec70:	68 30 96 02 c0       	push   0xc0029630
c001ec75:	e8 8b 3b ff ff       	call   c0012805 <__cxa_atexit>
c001ec7a:	83 c4 10             	add    esp,0x10
c001ec7d:	83 ec 0c             	sub    esp,0xc
c001ec80:	68 f8 25 03 c0       	push   0xc00325f8
c001ec85:	e8 f2 a9 00 00       	call   c002967c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ec8a:	83 c4 10             	add    esp,0x10
c001ec8d:	83 ec 04             	sub    esp,0x4
c001ec90:	68 7c de 02 c0       	push   0xc002de7c
c001ec95:	68 f8 25 03 c0       	push   0xc00325f8
c001ec9a:	68 30 96 02 c0       	push   0xc0029630
c001ec9f:	e8 61 3b ff ff       	call   c0012805 <__cxa_atexit>
c001eca4:	83 c4 10             	add    esp,0x10
c001eca7:	83 ec 0c             	sub    esp,0xc
c001ecaa:	68 ec 25 03 c0       	push   0xc00325ec
c001ecaf:	e8 c8 a9 00 00       	call   c002967c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ecb4:	83 c4 10             	add    esp,0x10
c001ecb7:	83 ec 04             	sub    esp,0x4
c001ecba:	68 7c de 02 c0       	push   0xc002de7c
c001ecbf:	68 ec 25 03 c0       	push   0xc00325ec
c001ecc4:	68 30 96 02 c0       	push   0xc0029630
c001ecc9:	e8 37 3b ff ff       	call   c0012805 <__cxa_atexit>
c001ecce:	83 c4 10             	add    esp,0x10
c001ecd1:	90                   	nop
c001ecd2:	83 c4 0c             	add    esp,0xc
c001ecd5:	c3                   	ret    

c001ecd6 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001ecd6:	83 ec 0c             	sub    esp,0xc
c001ecd9:	83 ec 08             	sub    esp,0x8
c001ecdc:	68 ff ff 00 00       	push   0xffff
c001ece1:	6a 01                	push   0x1
c001ece3:	e8 53 ff ff ff       	call   c001ec3b <__static_initialization_and_destruction_0(int, int)>
c001ece8:	83 c4 10             	add    esp,0x10
c001eceb:	83 c4 0c             	add    esp,0xc
c001ecee:	c3                   	ret    

c001ecef <Vm::inbv(unsigned short)>:
c001ecef:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ecf3:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ecf8:	75 06                	jne    c001ed00 <Vm::inbv(unsigned short)+0x11>
c001ecfa:	a0 4c 26 03 c0       	mov    al,ds:0xc003264c
c001ecff:	c3                   	ret    
c001ed00:	ec                   	in     al,dx
c001ed01:	c3                   	ret    

c001ed02 <Vm::outbv(unsigned short, unsigned char)>:
c001ed02:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ed06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ed0a:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ed0f:	75 25                	jne    c001ed36 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001ed11:	8b 0d 4c 26 03 c0    	mov    ecx,DWORD PTR ds:0xc003264c
c001ed17:	8d 51 01             	lea    edx,[ecx+0x1]
c001ed1a:	88 81 60 26 03 c0    	mov    BYTE PTR [ecx-0x3ffcd9a0],al
c001ed20:	89 15 4c 26 03 c0    	mov    DWORD PTR ds:0xc003264c,edx
c001ed26:	83 fa 20             	cmp    edx,0x20
c001ed29:	75 0c                	jne    c001ed37 <Vm::outbv(unsigned short, unsigned char)+0x35>
c001ed2b:	c7 05 4c 26 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc003264c,0x1f
c001ed35:	c3                   	ret    
c001ed36:	ee                   	out    dx,al
c001ed37:	c3                   	ret    

c001ed38 <Vm::realToLinear(unsigned short, unsigned short)>:
c001ed38:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed3d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed42:	c1 e0 04             	shl    eax,0x4
c001ed45:	01 d0                	add    eax,edx
c001ed47:	c3                   	ret    

c001ed48 <Vm::getSegment(unsigned int)>:
c001ed48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed4c:	c1 e8 10             	shr    eax,0x10
c001ed4f:	c3                   	ret    

c001ed50 <Vm::getOffset(unsigned int)>:
c001ed50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed54:	c3                   	ret    

c001ed55 <Vm::mainloop2()>:
c001ed55:	83 ec 18             	sub    esp,0x18
c001ed58:	fa                   	cli    
c001ed59:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c001ed5f:	6a 02                	push   0x2
c001ed61:	c6 05 45 26 03 c0 01 	mov    BYTE PTR ds:0xc0032645,0x1
c001ed68:	e8 98 f5 ff ff       	call   c001e305 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ed6d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ed72:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001ed76:	52                   	push   edx
c001ed77:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001ed7b:	52                   	push   edx
c001ed7c:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001ed80:	52                   	push   edx
c001ed81:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001ed85:	50                   	push   eax
c001ed86:	e8 6f 15 fe ff       	call   c00002fa <goToVM86>
c001ed8b:	83 c4 2c             	add    esp,0x2c
c001ed8e:	c3                   	ret    

c001ed8f <Vm::mainVm8086Loop(void*)>:
c001ed8f:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001ed94:	48                   	dec    eax
c001ed95:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001ed9a:	75 01                	jne    c001ed9d <Vm::mainVm8086Loop(void*)+0xe>
c001ed9c:	fb                   	sti    
c001ed9d:	eb b6                	jmp    c001ed55 <Vm::mainloop2()>

c001ed9f <Vm::mainloop3(unsigned long)>:
c001ed9f:	83 ec 18             	sub    esp,0x18
c001eda2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001eda6:	fa                   	cli    
c001eda7:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c001edad:	6a 02                	push   0x2
c001edaf:	c6 05 44 26 03 c0 01 	mov    BYTE PTR ds:0xc0032644,0x1
c001edb6:	a3 40 26 03 c0       	mov    ds:0xc0032640,eax
c001edbb:	e8 45 f5 ff ff       	call   c001e305 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001edc0:	83 c4 1c             	add    esp,0x1c
c001edc3:	eb 90                	jmp    c001ed55 <Vm::mainloop2()>

c001edc5 <Vm::initialise8086()>:
c001edc5:	83 ec 0c             	sub    esp,0xc
c001edc8:	68 80 00 00 00       	push   0x80
c001edcd:	6a 00                	push   0x0
c001edcf:	68 8f ed 01 c0       	push   0xc001ed8f
c001edd4:	ff 35 10 26 03 c0    	push   DWORD PTR ds:0xc0032610
c001edda:	e8 31 f1 ff ff       	call   c001df10 <Process::createThread(void (*)(void*), void*, int)>
c001eddf:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001ede6:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c001edeb:	68 00 01 00 00       	push   0x100
c001edf0:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001edf5:	6a 00                	push   0x0
c001edf7:	6a 00                	push   0x0
c001edf9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001edff:	e8 8e 32 ff ff       	call   c0012092 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ee04:	83 c4 2c             	add    esp,0x2c
c001ee07:	c3                   	ret    

c001ee08 <Vm::finish8086()>:
c001ee08:	53                   	push   ebx
c001ee09:	83 ec 08             	sub    esp,0x8
c001ee0c:	fa                   	cli    
c001ee0d:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c001ee13:	80 3d 44 26 03 c0 00 	cmp    BYTE PTR ds:0xc0032644,0x0
c001ee1a:	75 15                	jne    c001ee31 <Vm::finish8086()+0x29>
c001ee1c:	e8 33 f3 ff ff       	call   c001e154 <schedule()>
c001ee21:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001ee26:	48                   	dec    eax
c001ee27:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001ee2c:	75 de                	jne    c001ee0c <Vm::finish8086()+0x4>
c001ee2e:	fb                   	sti    
c001ee2f:	eb db                	jmp    c001ee0c <Vm::finish8086()+0x4>
c001ee31:	83 ec 0c             	sub    esp,0xc
c001ee34:	8b 1d 40 26 03 c0    	mov    ebx,DWORD PTR ds:0xc0032640
c001ee3a:	ff 35 48 26 03 c0    	push   DWORD PTR ds:0xc0032648
c001ee40:	c6 05 44 26 03 c0 00 	mov    BYTE PTR ds:0xc0032644,0x0
c001ee47:	e8 cc f7 ff ff       	call   c001e618 <unblockTask(ThreadControlBlock*)>
c001ee4c:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001ee51:	83 c4 10             	add    esp,0x10
c001ee54:	8d 50 ff             	lea    edx,[eax-0x1]
c001ee57:	89 15 e8 25 03 c0    	mov    DWORD PTR ds:0xc00325e8,edx
c001ee5d:	85 d2                	test   edx,edx
c001ee5f:	75 01                	jne    c001ee62 <Vm::finish8086()+0x5a>
c001ee61:	fb                   	sti    
c001ee62:	89 d8                	mov    eax,ebx
c001ee64:	83 c4 08             	add    esp,0x8
c001ee67:	5b                   	pop    ebx
c001ee68:	c3                   	ret    

c001ee69 <Vm::getOutput8086(unsigned char*)>:
c001ee69:	57                   	push   edi
c001ee6a:	8b 0d 4c 26 03 c0    	mov    ecx,DWORD PTR ds:0xc003264c
c001ee70:	56                   	push   esi
c001ee71:	be 60 26 03 c0       	mov    esi,0xc0032660
c001ee76:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001ee7a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ee7c:	a1 4c 26 03 c0       	mov    eax,ds:0xc003264c
c001ee81:	5e                   	pop    esi
c001ee82:	c7 05 4c 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003264c,0x0
c001ee8c:	5f                   	pop    edi
c001ee8d:	c3                   	ret    

c001ee8e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001ee8e:	55                   	push   ebp
c001ee8f:	57                   	push   edi
c001ee90:	56                   	push   esi
c001ee91:	53                   	push   ebx
c001ee92:	83 ec 2c             	sub    esp,0x2c
c001ee95:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ee99:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001ee9d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001eea1:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001eea5:	fa                   	cli    
c001eea6:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c001eeac:	0f b6 35 45 26 03 c0 	movzx  esi,BYTE PTR ds:0xc0032645
c001eeb3:	89 f0                	mov    eax,esi
c001eeb5:	84 c0                	test   al,al
c001eeb7:	75 1d                	jne    c001eed6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001eeb9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001eebd:	e8 92 f2 ff ff       	call   c001e154 <schedule()>
c001eec2:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001eec7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001eecb:	48                   	dec    eax
c001eecc:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001eed1:	75 d2                	jne    c001eea5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001eed3:	fb                   	sti    
c001eed4:	eb cf                	jmp    c001eea5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001eed6:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c001eedb:	c7 05 4c 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003264c,0x0
c001eee5:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001eee9:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001eeed:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001eef1:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001eef5:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001eef9:	50                   	push   eax
c001eefa:	6a 20                	push   0x20
c001eefc:	6a 00                	push   0x0
c001eefe:	68 60 26 03 c0       	push   0xc0032660
c001ef03:	e8 48 18 fe ff       	call   c0000750 <memset>
c001ef08:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ef0f:	e8 78 09 ff ff       	call   c000f88c <malloc>
c001ef14:	83 c4 0c             	add    esp,0xc
c001ef17:	89 c3                	mov    ebx,eax
c001ef19:	ff 35 10 26 03 c0    	push   DWORD PTR ds:0xc0032610
c001ef1f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ef23:	50                   	push   eax
c001ef24:	e8 a1 3f ff ff       	call   c0012eca <File::File(char const*, Process*)>
c001ef29:	83 c4 10             	add    esp,0x10
c001ef2c:	85 db                	test   ebx,ebx
c001ef2e:	75 0a                	jne    c001ef3a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001ef30:	83 ec 0c             	sub    esp,0xc
c001ef33:	68 23 d0 02 c0       	push   0xc002d023
c001ef38:	eb 3e                	jmp    c001ef78 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001ef3a:	50                   	push   eax
c001ef3b:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ef3f:	50                   	push   eax
c001ef40:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ef44:	50                   	push   eax
c001ef45:	53                   	push   ebx
c001ef46:	e8 8f 42 ff ff       	call   c00131da <File::stat(unsigned long long*, bool*)>
c001ef4b:	83 c4 10             	add    esp,0x10
c001ef4e:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001ef53:	74 0a                	je     c001ef5f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001ef55:	83 ec 0c             	sub    esp,0xc
c001ef58:	68 37 d0 02 c0       	push   0xc002d037
c001ef5d:	eb 19                	jmp    c001ef78 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001ef5f:	51                   	push   ecx
c001ef60:	51                   	push   ecx
c001ef61:	6a 01                	push   0x1
c001ef63:	53                   	push   ebx
c001ef64:	e8 c5 3f ff ff       	call   c0012f2e <File::open(FileOpenMode)>
c001ef69:	83 c4 10             	add    esp,0x10
c001ef6c:	85 c0                	test   eax,eax
c001ef6e:	74 24                	je     c001ef94 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001ef70:	83 ec 0c             	sub    esp,0xc
c001ef73:	68 50 d0 02 c0       	push   0xc002d050
c001ef78:	e8 24 b4 ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c001ef7d:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001ef82:	83 c4 10             	add    esp,0x10
c001ef85:	48                   	dec    eax
c001ef86:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001ef8b:	85 c0                	test   eax,eax
c001ef8d:	75 01                	jne    c001ef90 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001ef8f:	fb                   	sti    
c001ef90:	31 f6                	xor    esi,esi
c001ef92:	eb 58                	jmp    c001efec <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001ef94:	0f b7 ed             	movzx  ebp,bp
c001ef97:	50                   	push   eax
c001ef98:	0f b7 ff             	movzx  edi,di
c001ef9b:	50                   	push   eax
c001ef9c:	55                   	push   ebp
c001ef9d:	57                   	push   edi
c001ef9e:	e8 95 fd ff ff       	call   c001ed38 <Vm::realToLinear(unsigned short, unsigned short)>
c001efa3:	5a                   	pop    edx
c001efa4:	8b 13                	mov    edx,DWORD PTR [ebx]
c001efa6:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001efaa:	51                   	push   ecx
c001efab:	50                   	push   eax
c001efac:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001efb0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001efb4:	53                   	push   ebx
c001efb5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001efb8:	83 c4 14             	add    esp,0x14
c001efbb:	53                   	push   ebx
c001efbc:	e8 cb 3f ff ff       	call   c0012f8c <File::close()>
c001efc1:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001efc6:	83 c4 10             	add    esp,0x10
c001efc9:	48                   	dec    eax
c001efca:	c6 05 45 26 03 c0 00 	mov    BYTE PTR ds:0xc0032645,0x0
c001efd1:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001efd6:	85 c0                	test   eax,eax
c001efd8:	75 01                	jne    c001efdb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001efda:	fb                   	sti    
c001efdb:	83 ec 0c             	sub    esp,0xc
c001efde:	ff 35 48 26 03 c0    	push   DWORD PTR ds:0xc0032648
c001efe4:	e8 2f f6 ff ff       	call   c001e618 <unblockTask(ThreadControlBlock*)>
c001efe9:	83 c4 10             	add    esp,0x10
c001efec:	83 c4 2c             	add    esp,0x2c
c001efef:	89 f0                	mov    eax,esi
c001eff1:	5b                   	pop    ebx
c001eff2:	5e                   	pop    esi
c001eff3:	5f                   	pop    edi
c001eff4:	5d                   	pop    ebp
c001eff5:	c3                   	ret    

c001eff6 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001eff6:	57                   	push   edi
c001eff7:	56                   	push   esi
c001eff8:	53                   	push   ebx
c001eff9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001effd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f001:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f005:	83 e8 06             	sub    eax,0x6
c001f008:	0f b7 c0             	movzx  eax,ax
c001f00b:	50                   	push   eax
c001f00c:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001f011:	50                   	push   eax
c001f012:	e8 21 fd ff ff       	call   c001ed38 <Vm::realToLinear(unsigned short, unsigned short)>
c001f017:	5a                   	pop    edx
c001f018:	5e                   	pop    esi
c001f019:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001f01c:	8d 56 fa             	lea    edx,[esi-0x6]
c001f01f:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f025:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001f028:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001f02b:	83 c2 02             	add    edx,0x2
c001f02e:	66 89 10             	mov    WORD PTR [eax],dx
c001f031:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001f034:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001f038:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001f03b:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001f03f:	89 d6                	mov    esi,edx
c001f041:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001f047:	66 81 e6 ff fd       	and    si,0xfdff
c001f04c:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001f050:	74 07                	je     c001f059 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001f052:	89 d6                	mov    esi,edx
c001f054:	66 81 ce 00 02       	or     si,0x200
c001f059:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001f05d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f062:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f066:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001f06e:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001f071:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001f079:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001f07c:	5b                   	pop    ebx
c001f07d:	5e                   	pop    esi
c001f07e:	5f                   	pop    edi
c001f07f:	c3                   	ret    

c001f080 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001f080:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f085:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f08a:	c1 e0 04             	shl    eax,0x4
c001f08d:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001f090:	c3                   	ret    

c001f091 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001f091:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f096:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f09b:	c1 e0 04             	shl    eax,0x4
c001f09e:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001f0a2:	c3                   	ret    

c001f0a3 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001f0a3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f0a8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f0ad:	c1 e0 04             	shl    eax,0x4
c001f0b0:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001f0b3:	c3                   	ret    

c001f0b4 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001f0b4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f0b9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f0be:	c1 e0 04             	shl    eax,0x4
c001f0c1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f0c5:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001f0c8:	c3                   	ret    

c001f0c9 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001f0c9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f0ce:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f0d3:	c1 e0 04             	shl    eax,0x4
c001f0d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f0da:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001f0de:	c3                   	ret    

c001f0df <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001f0df:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f0e4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f0e9:	c1 e0 04             	shl    eax,0x4
c001f0ec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f0f0:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001f0f3:	c3                   	ret    

c001f0f4 <Vm::faultHandler(regs*)>:
c001f0f4:	55                   	push   ebp
c001f0f5:	57                   	push   edi
c001f0f6:	56                   	push   esi
c001f0f7:	53                   	push   ebx
c001f0f8:	83 ec 1c             	sub    esp,0x1c
c001f0fb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f0ff:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001f102:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001f106:	0f b7 f8             	movzx  edi,ax
c001f109:	52                   	push   edx
c001f10a:	0f b7 c0             	movzx  eax,ax
c001f10d:	50                   	push   eax
c001f10e:	e8 25 fc ff ff       	call   c001ed38 <Vm::realToLinear(unsigned short, unsigned short)>
c001f113:	5a                   	pop    edx
c001f114:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001f117:	59                   	pop    ecx
c001f118:	89 c1                	mov    ecx,eax
c001f11a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f11d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f121:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f126:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f12a:	0f b7 c5             	movzx  eax,bp
c001f12d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f131:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001f135:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001f139:	e8 fa fb ff ff       	call   c001ed38 <Vm::realToLinear(unsigned short, unsigned short)>
c001f13e:	5e                   	pop    esi
c001f13f:	be 06 00 00 00       	mov    esi,0x6
c001f144:	5a                   	pop    edx
c001f145:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001f14a:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001f14f:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001f152:	80 fa 9d             	cmp    dl,0x9d
c001f155:	0f 84 2c 02 00 00    	je     c001f387 <Vm::faultHandler(regs*)+0x293>
c001f15b:	0f 87 91 00 00 00    	ja     c001f1f2 <Vm::faultHandler(regs*)+0xfe>
c001f161:	80 fa 66             	cmp    dl,0x66
c001f164:	0f 84 98 01 00 00    	je     c001f302 <Vm::faultHandler(regs*)+0x20e>
c001f16a:	77 47                	ja     c001f1b3 <Vm::faultHandler(regs*)+0xbf>
c001f16c:	80 fa 36             	cmp    dl,0x36
c001f16f:	0f 84 80 01 00 00    	je     c001f2f5 <Vm::faultHandler(regs*)+0x201>
c001f175:	77 1a                	ja     c001f191 <Vm::faultHandler(regs*)+0x9d>
c001f177:	80 fa 26             	cmp    dl,0x26
c001f17a:	0f 84 4e 01 00 00    	je     c001f2ce <Vm::faultHandler(regs*)+0x1da>
c001f180:	80 fa 2e             	cmp    dl,0x2e
c001f183:	0f 85 e2 05 00 00    	jne    c001f76b <Vm::faultHandler(regs*)+0x677>
c001f189:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f18c:	31 f6                	xor    esi,esi
c001f18e:	41                   	inc    ecx
c001f18f:	eb be                	jmp    c001f14f <Vm::faultHandler(regs*)+0x5b>
c001f191:	80 fa 64             	cmp    dl,0x64
c001f194:	0f 84 41 01 00 00    	je     c001f2db <Vm::faultHandler(regs*)+0x1e7>
c001f19a:	0f 87 48 01 00 00    	ja     c001f2e8 <Vm::faultHandler(regs*)+0x1f4>
c001f1a0:	80 fa 3e             	cmp    dl,0x3e
c001f1a3:	0f 85 c2 05 00 00    	jne    c001f76b <Vm::faultHandler(regs*)+0x677>
c001f1a9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f1ac:	be 01 00 00 00       	mov    esi,0x1
c001f1b1:	eb db                	jmp    c001f18e <Vm::faultHandler(regs*)+0x9a>
c001f1b3:	80 fa 6d             	cmp    dl,0x6d
c001f1b6:	0f 84 ec 02 00 00    	je     c001f4a8 <Vm::faultHandler(regs*)+0x3b4>
c001f1bc:	77 17                	ja     c001f1d5 <Vm::faultHandler(regs*)+0xe1>
c001f1be:	80 fa 67             	cmp    dl,0x67
c001f1c1:	0f 84 48 01 00 00    	je     c001f30f <Vm::faultHandler(regs*)+0x21b>
c001f1c7:	80 fa 6c             	cmp    dl,0x6c
c001f1ca:	0f 84 69 02 00 00    	je     c001f439 <Vm::faultHandler(regs*)+0x345>
c001f1d0:	e9 96 05 00 00       	jmp    c001f76b <Vm::faultHandler(regs*)+0x677>
c001f1d5:	80 fa 6f             	cmp    dl,0x6f
c001f1d8:	0f 84 f4 03 00 00    	je     c001f5d2 <Vm::faultHandler(regs*)+0x4de>
c001f1de:	0f 82 59 03 00 00    	jb     c001f53d <Vm::faultHandler(regs*)+0x449>
c001f1e4:	80 fa 9c             	cmp    dl,0x9c
c001f1e7:	0f 84 2f 01 00 00    	je     c001f31c <Vm::faultHandler(regs*)+0x228>
c001f1ed:	e9 79 05 00 00       	jmp    c001f76b <Vm::faultHandler(regs*)+0x677>
c001f1f2:	80 fa ec             	cmp    dl,0xec
c001f1f5:	0f 84 14 05 00 00    	je     c001f70f <Vm::faultHandler(regs*)+0x61b>
c001f1fb:	77 7b                	ja     c001f278 <Vm::faultHandler(regs*)+0x184>
c001f1fd:	80 fa e4             	cmp    dl,0xe4
c001f200:	0f 84 93 04 00 00    	je     c001f699 <Vm::faultHandler(regs*)+0x5a5>
c001f206:	77 53                	ja     c001f25b <Vm::faultHandler(regs*)+0x167>
c001f208:	80 fa cd             	cmp    dl,0xcd
c001f20b:	0f 84 d9 01 00 00    	je     c001f3ea <Vm::faultHandler(regs*)+0x2f6>
c001f211:	80 fa cf             	cmp    dl,0xcf
c001f214:	0f 85 51 05 00 00    	jne    c001f76b <Vm::faultHandler(regs*)+0x677>
c001f21a:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001f21d:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001f220:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001f224:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001f227:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001f22b:	81 ca 00 02 02 00    	or     edx,0x20200
c001f231:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001f234:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001f238:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f23e:	66 c1 e8 09          	shr    ax,0x9
c001f242:	83 e0 01             	and    eax,0x1
c001f245:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f248:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f24b:	83 c0 06             	add    eax,0x6
c001f24e:	25 ff ff 00 00       	and    eax,0xffff
c001f253:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001f256:	e9 0c 05 00 00       	jmp    c001f767 <Vm::faultHandler(regs*)+0x673>
c001f25b:	80 fa e6             	cmp    dl,0xe6
c001f25e:	0f 84 7f 04 00 00    	je     c001f6e3 <Vm::faultHandler(regs*)+0x5ef>
c001f264:	0f 82 4b 04 00 00    	jb     c001f6b5 <Vm::faultHandler(regs*)+0x5c1>
c001f26a:	80 fa e7             	cmp    dl,0xe7
c001f26d:	0f 84 87 04 00 00    	je     c001f6fa <Vm::faultHandler(regs*)+0x606>
c001f273:	e9 f3 04 00 00       	jmp    c001f76b <Vm::faultHandler(regs*)+0x677>
c001f278:	80 fa ef             	cmp    dl,0xef
c001f27b:	0f 84 d1 04 00 00    	je     c001f752 <Vm::faultHandler(regs*)+0x65e>
c001f281:	77 28                	ja     c001f2ab <Vm::faultHandler(regs*)+0x1b7>
c001f283:	80 fa ed             	cmp    dl,0xed
c001f286:	0f 84 9f 04 00 00    	je     c001f72b <Vm::faultHandler(regs*)+0x637>
c001f28c:	80 fa ee             	cmp    dl,0xee
c001f28f:	0f 85 d6 04 00 00    	jne    c001f76b <Vm::faultHandler(regs*)+0x677>
c001f295:	50                   	push   eax
c001f296:	50                   	push   eax
c001f297:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001f29b:	50                   	push   eax
c001f29c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f2a0:	50                   	push   eax
c001f2a1:	e8 5c fa ff ff       	call   c001ed02 <Vm::outbv(unsigned short, unsigned char)>
c001f2a6:	e9 9f 04 00 00       	jmp    c001f74a <Vm::faultHandler(regs*)+0x656>
c001f2ab:	80 fa fa             	cmp    dl,0xfa
c001f2ae:	0f 84 69 01 00 00    	je     c001f41d <Vm::faultHandler(regs*)+0x329>
c001f2b4:	80 fa fb             	cmp    dl,0xfb
c001f2b7:	0f 84 6e 01 00 00    	je     c001f42b <Vm::faultHandler(regs*)+0x337>
c001f2bd:	80 fa f3             	cmp    dl,0xf3
c001f2c0:	0f 85 a5 04 00 00    	jne    c001f76b <Vm::faultHandler(regs*)+0x677>
c001f2c6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f2c9:	e9 c0 fe ff ff       	jmp    c001f18e <Vm::faultHandler(regs*)+0x9a>
c001f2ce:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f2d1:	be 02 00 00 00       	mov    esi,0x2
c001f2d6:	e9 b3 fe ff ff       	jmp    c001f18e <Vm::faultHandler(regs*)+0x9a>
c001f2db:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f2de:	be 03 00 00 00       	mov    esi,0x3
c001f2e3:	e9 a6 fe ff ff       	jmp    c001f18e <Vm::faultHandler(regs*)+0x9a>
c001f2e8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f2eb:	be 04 00 00 00       	mov    esi,0x4
c001f2f0:	e9 99 fe ff ff       	jmp    c001f18e <Vm::faultHandler(regs*)+0x9a>
c001f2f5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f2f8:	be 05 00 00 00       	mov    esi,0x5
c001f2fd:	e9 8c fe ff ff       	jmp    c001f18e <Vm::faultHandler(regs*)+0x9a>
c001f302:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f305:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001f30a:	e9 7f fe ff ff       	jmp    c001f18e <Vm::faultHandler(regs*)+0x9a>
c001f30f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f312:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001f317:	e9 72 fe ff ff       	jmp    c001f18e <Vm::faultHandler(regs*)+0x9a>
c001f31c:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001f31f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001f323:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f328:	74 30                	je     c001f35a <Vm::faultHandler(regs*)+0x266>
c001f32a:	83 e9 04             	sub    ecx,0x4
c001f32d:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001f333:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001f339:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001f33c:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001f33f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001f345:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001f349:	0f 84 15 04 00 00    	je     c001f764 <Vm::faultHandler(regs*)+0x670>
c001f34f:	80 ce 02             	or     dh,0x2
c001f352:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001f355:	e9 0a 04 00 00       	jmp    c001f764 <Vm::faultHandler(regs*)+0x670>
c001f35a:	83 e9 02             	sub    ecx,0x2
c001f35d:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001f363:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001f366:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001f36a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001f370:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001f374:	74 05                	je     c001f37b <Vm::faultHandler(regs*)+0x287>
c001f376:	80 ce 02             	or     dh,0x2
c001f379:	eb 03                	jmp    c001f37e <Vm::faultHandler(regs*)+0x28a>
c001f37b:	80 e6 fd             	and    dh,0xfd
c001f37e:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001f382:	e9 dd 03 00 00       	jmp    c001f764 <Vm::faultHandler(regs*)+0x670>
c001f387:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f38c:	74 2a                	je     c001f3b8 <Vm::faultHandler(regs*)+0x2c4>
c001f38e:	8b 10                	mov    edx,DWORD PTR [eax]
c001f390:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001f396:	81 ca 00 02 02 00    	or     edx,0x20200
c001f39c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001f39f:	8b 00                	mov    eax,DWORD PTR [eax]
c001f3a1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f3a7:	c1 e8 09             	shr    eax,0x9
c001f3aa:	83 e0 01             	and    eax,0x1
c001f3ad:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f3b0:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f3b3:	83 c0 04             	add    eax,0x4
c001f3b6:	eb 25                	jmp    c001f3dd <Vm::faultHandler(regs*)+0x2e9>
c001f3b8:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001f3bb:	81 ca 00 02 02 00    	or     edx,0x20200
c001f3c1:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001f3c4:	66 8b 00             	mov    ax,WORD PTR [eax]
c001f3c7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f3cd:	66 c1 e8 09          	shr    ax,0x9
c001f3d1:	83 e0 01             	and    eax,0x1
c001f3d4:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f3d7:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f3da:	83 c0 02             	add    eax,0x2
c001f3dd:	25 ff ff 00 00       	and    eax,0xffff
c001f3e2:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001f3e5:	e9 7a 03 00 00       	jmp    c001f764 <Vm::faultHandler(regs*)+0x670>
c001f3ea:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f3ee:	3c ee                	cmp    al,0xee
c001f3f0:	75 10                	jne    c001f402 <Vm::faultHandler(regs*)+0x30e>
c001f3f2:	83 ec 0c             	sub    esp,0xc
c001f3f5:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001f3f8:	e8 a2 f9 ff ff       	call   c001ed9f <Vm::mainloop3(unsigned long)>
c001f3fd:	e9 4b 03 00 00       	jmp    c001f74d <Vm::faultHandler(regs*)+0x659>
c001f402:	83 ec 0c             	sub    esp,0xc
c001f405:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f409:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f40d:	51                   	push   ecx
c001f40e:	50                   	push   eax
c001f40f:	53                   	push   ebx
c001f410:	e8 e1 fb ff ff       	call   c001eff6 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f415:	83 c4 20             	add    esp,0x20
c001f418:	e9 4a 03 00 00       	jmp    c001f767 <Vm::faultHandler(regs*)+0x673>
c001f41d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f422:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f426:	e9 39 03 00 00       	jmp    c001f764 <Vm::faultHandler(regs*)+0x670>
c001f42b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f430:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f434:	e9 2b 03 00 00       	jmp    c001f764 <Vm::faultHandler(regs*)+0x670>
c001f439:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001f43c:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f441:	74 2b                	je     c001f46e <Vm::faultHandler(regs*)+0x37a>
c001f443:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001f44a:	76 22                	jbe    c001f46e <Vm::faultHandler(regs*)+0x37a>
c001f44c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f450:	50                   	push   eax
c001f451:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f455:	50                   	push   eax
c001f456:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f45a:	50                   	push   eax
c001f45b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f45f:	50                   	push   eax
c001f460:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f464:	50                   	push   eax
c001f465:	6a 6c                	push   0x6c
c001f467:	6a 6c                	push   0x6c
c001f469:	e9 b9 01 00 00       	jmp    c001f627 <Vm::faultHandler(regs*)+0x533>
c001f46e:	83 ec 0c             	sub    esp,0xc
c001f471:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f475:	0f b7 f6             	movzx  esi,si
c001f478:	50                   	push   eax
c001f479:	e8 71 f8 ff ff       	call   c001ecef <Vm::inbv(unsigned short)>
c001f47e:	83 c4 0c             	add    esp,0xc
c001f481:	0f b6 c0             	movzx  eax,al
c001f484:	50                   	push   eax
c001f485:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001f489:	50                   	push   eax
c001f48a:	56                   	push   esi
c001f48b:	e8 24 fc ff ff       	call   c001f0b4 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f490:	83 c4 10             	add    esp,0x10
c001f493:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f496:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f49a:	74 03                	je     c001f49f <Vm::faultHandler(regs*)+0x3ab>
c001f49c:	48                   	dec    eax
c001f49d:	eb 01                	jmp    c001f4a0 <Vm::faultHandler(regs*)+0x3ac>
c001f49f:	40                   	inc    eax
c001f4a0:	0f b7 c0             	movzx  eax,ax
c001f4a3:	e9 8d 00 00 00       	jmp    c001f535 <Vm::faultHandler(regs*)+0x441>
c001f4a8:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001f4ab:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f4ae:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f4b3:	74 29                	je     c001f4de <Vm::faultHandler(regs*)+0x3ea>
c001f4b5:	3d ff ff 00 00       	cmp    eax,0xffff
c001f4ba:	76 22                	jbe    c001f4de <Vm::faultHandler(regs*)+0x3ea>
c001f4bc:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f4c0:	50                   	push   eax
c001f4c1:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f4c5:	50                   	push   eax
c001f4c6:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f4ca:	50                   	push   eax
c001f4cb:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f4cf:	50                   	push   eax
c001f4d0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f4d4:	50                   	push   eax
c001f4d5:	6a 6d                	push   0x6d
c001f4d7:	6a 6d                	push   0x6d
c001f4d9:	e9 49 01 00 00       	jmp    c001f627 <Vm::faultHandler(regs*)+0x533>
c001f4de:	0f b7 c8             	movzx  ecx,ax
c001f4e1:	0f b7 f6             	movzx  esi,si
c001f4e4:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f4e7:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f4ec:	74 20                	je     c001f50e <Vm::faultHandler(regs*)+0x41a>
c001f4ee:	ed                   	in     eax,dx
c001f4ef:	55                   	push   ebp
c001f4f0:	50                   	push   eax
c001f4f1:	51                   	push   ecx
c001f4f2:	56                   	push   esi
c001f4f3:	e8 e7 fb ff ff       	call   c001f0df <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f4f8:	83 c4 10             	add    esp,0x10
c001f4fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f4fe:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f502:	74 05                	je     c001f509 <Vm::faultHandler(regs*)+0x415>
c001f504:	83 e8 04             	sub    eax,0x4
c001f507:	eb 27                	jmp    c001f530 <Vm::faultHandler(regs*)+0x43c>
c001f509:	83 c0 04             	add    eax,0x4
c001f50c:	eb 22                	jmp    c001f530 <Vm::faultHandler(regs*)+0x43c>
c001f50e:	66 ed                	in     ax,dx
c001f510:	0f b7 c0             	movzx  eax,ax
c001f513:	57                   	push   edi
c001f514:	50                   	push   eax
c001f515:	51                   	push   ecx
c001f516:	56                   	push   esi
c001f517:	e8 ad fb ff ff       	call   c001f0c9 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f51c:	83 c4 10             	add    esp,0x10
c001f51f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f522:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f526:	74 05                	je     c001f52d <Vm::faultHandler(regs*)+0x439>
c001f528:	83 e8 02             	sub    eax,0x2
c001f52b:	eb 03                	jmp    c001f530 <Vm::faultHandler(regs*)+0x43c>
c001f52d:	83 c0 02             	add    eax,0x2
c001f530:	25 ff ff 00 00       	and    eax,0xffff
c001f535:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001f538:	e9 27 02 00 00       	jmp    c001f764 <Vm::faultHandler(regs*)+0x670>
c001f53d:	8d 46 ff             	lea    eax,[esi-0x1]
c001f540:	3c 05                	cmp    al,0x5
c001f542:	77 24                	ja     c001f568 <Vm::faultHandler(regs*)+0x474>
c001f544:	0f b6 c0             	movzx  eax,al
c001f547:	ff 24 85 c4 d0 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd2f3c]
c001f54e:	0f b7 fd             	movzx  edi,bp
c001f551:	eb 15                	jmp    c001f568 <Vm::faultHandler(regs*)+0x474>
c001f553:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001f557:	eb 0f                	jmp    c001f568 <Vm::faultHandler(regs*)+0x474>
c001f559:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001f55d:	eb 09                	jmp    c001f568 <Vm::faultHandler(regs*)+0x474>
c001f55f:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001f563:	eb 03                	jmp    c001f568 <Vm::faultHandler(regs*)+0x474>
c001f565:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001f568:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001f56b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f570:	74 29                	je     c001f59b <Vm::faultHandler(regs*)+0x4a7>
c001f572:	3d ff ff 00 00       	cmp    eax,0xffff
c001f577:	76 22                	jbe    c001f59b <Vm::faultHandler(regs*)+0x4a7>
c001f579:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f57d:	50                   	push   eax
c001f57e:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f582:	50                   	push   eax
c001f583:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f587:	50                   	push   eax
c001f588:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f58c:	50                   	push   eax
c001f58d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f591:	50                   	push   eax
c001f592:	6a 6e                	push   0x6e
c001f594:	6a 6e                	push   0x6e
c001f596:	e9 8c 00 00 00       	jmp    c001f627 <Vm::faultHandler(regs*)+0x533>
c001f59b:	0f b7 c0             	movzx  eax,ax
c001f59e:	52                   	push   edx
c001f59f:	52                   	push   edx
c001f5a0:	50                   	push   eax
c001f5a1:	57                   	push   edi
c001f5a2:	e8 d9 fa ff ff       	call   c001f080 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f5a7:	59                   	pop    ecx
c001f5a8:	0f b6 c0             	movzx  eax,al
c001f5ab:	5e                   	pop    esi
c001f5ac:	50                   	push   eax
c001f5ad:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f5b1:	50                   	push   eax
c001f5b2:	e8 4b f7 ff ff       	call   c001ed02 <Vm::outbv(unsigned short, unsigned char)>
c001f5b7:	83 c4 10             	add    esp,0x10
c001f5ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001f5bd:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f5c1:	74 03                	je     c001f5c6 <Vm::faultHandler(regs*)+0x4d2>
c001f5c3:	48                   	dec    eax
c001f5c4:	eb 01                	jmp    c001f5c7 <Vm::faultHandler(regs*)+0x4d3>
c001f5c6:	40                   	inc    eax
c001f5c7:	0f b7 c0             	movzx  eax,ax
c001f5ca:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001f5cd:	e9 92 01 00 00       	jmp    c001f764 <Vm::faultHandler(regs*)+0x670>
c001f5d2:	8d 46 ff             	lea    eax,[esi-0x1]
c001f5d5:	3c 05                	cmp    al,0x5
c001f5d7:	77 1f                	ja     c001f5f8 <Vm::faultHandler(regs*)+0x504>
c001f5d9:	0f b6 c0             	movzx  eax,al
c001f5dc:	ff 24 85 dc d0 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd2f24]
c001f5e3:	89 ef                	mov    edi,ebp
c001f5e5:	eb 11                	jmp    c001f5f8 <Vm::faultHandler(regs*)+0x504>
c001f5e7:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001f5ea:	eb 0c                	jmp    c001f5f8 <Vm::faultHandler(regs*)+0x504>
c001f5ec:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001f5ef:	eb 07                	jmp    c001f5f8 <Vm::faultHandler(regs*)+0x504>
c001f5f1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001f5f4:	eb 02                	jmp    c001f5f8 <Vm::faultHandler(regs*)+0x504>
c001f5f6:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001f5f8:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001f5fb:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f600:	74 37                	je     c001f639 <Vm::faultHandler(regs*)+0x545>
c001f602:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001f608:	76 2f                	jbe    c001f639 <Vm::faultHandler(regs*)+0x545>
c001f60a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f60e:	50                   	push   eax
c001f60f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f613:	50                   	push   eax
c001f614:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f618:	50                   	push   eax
c001f619:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f61d:	50                   	push   eax
c001f61e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f622:	50                   	push   eax
c001f623:	6a 6f                	push   0x6f
c001f625:	6a 6f                	push   0x6f
c001f627:	68 69 d0 02 c0       	push   0xc002d069
c001f62c:	e8 3a 33 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001f631:	83 c4 20             	add    esp,0x20
c001f634:	e9 86 01 00 00       	jmp    c001f7bf <Vm::faultHandler(regs*)+0x6cb>
c001f639:	0f b7 d7             	movzx  edx,di
c001f63c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001f63f:	0f b7 c6             	movzx  eax,si
c001f642:	81 e1 00 04 00 00    	and    ecx,0x400
c001f648:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001f64b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f650:	74 1d                	je     c001f66f <Vm::faultHandler(regs*)+0x57b>
c001f652:	55                   	push   ebp
c001f653:	55                   	push   ebp
c001f654:	50                   	push   eax
c001f655:	52                   	push   edx
c001f656:	e8 48 fa ff ff       	call   c001f0a3 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f65b:	83 c4 10             	add    esp,0x10
c001f65e:	89 fa                	mov    edx,edi
c001f660:	ef                   	out    dx,eax
c001f661:	85 c9                	test   ecx,ecx
c001f663:	74 05                	je     c001f66a <Vm::faultHandler(regs*)+0x576>
c001f665:	83 ee 04             	sub    esi,0x4
c001f668:	eb 21                	jmp    c001f68b <Vm::faultHandler(regs*)+0x597>
c001f66a:	83 c6 04             	add    esi,0x4
c001f66d:	eb 1c                	jmp    c001f68b <Vm::faultHandler(regs*)+0x597>
c001f66f:	55                   	push   ebp
c001f670:	55                   	push   ebp
c001f671:	50                   	push   eax
c001f672:	52                   	push   edx
c001f673:	e8 19 fa ff ff       	call   c001f091 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f678:	83 c4 10             	add    esp,0x10
c001f67b:	89 fa                	mov    edx,edi
c001f67d:	66 ef                	out    dx,ax
c001f67f:	85 c9                	test   ecx,ecx
c001f681:	74 05                	je     c001f688 <Vm::faultHandler(regs*)+0x594>
c001f683:	83 ee 02             	sub    esi,0x2
c001f686:	eb 03                	jmp    c001f68b <Vm::faultHandler(regs*)+0x597>
c001f688:	83 c6 02             	add    esi,0x2
c001f68b:	81 e6 ff ff 00 00    	and    esi,0xffff
c001f691:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001f694:	e9 cb 00 00 00       	jmp    c001f764 <Vm::faultHandler(regs*)+0x670>
c001f699:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001f6a0:	83 ec 0c             	sub    esp,0xc
c001f6a3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f6a7:	50                   	push   eax
c001f6a8:	e8 42 f6 ff ff       	call   c001ecef <Vm::inbv(unsigned short)>
c001f6ad:	0f b6 c0             	movzx  eax,al
c001f6b0:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001f6b3:	eb 3f                	jmp    c001f6f4 <Vm::faultHandler(regs*)+0x600>
c001f6b5:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f6ba:	74 07                	je     c001f6c3 <Vm::faultHandler(regs*)+0x5cf>
c001f6bc:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f6c0:	ed                   	in     eax,dx
c001f6c1:	eb 14                	jmp    c001f6d7 <Vm::faultHandler(regs*)+0x5e3>
c001f6c3:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001f6c6:	66 31 f6             	xor    si,si
c001f6c9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001f6cc:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f6d0:	66 ed                	in     ax,dx
c001f6d2:	0f b7 c0             	movzx  eax,ax
c001f6d5:	09 f0                	or     eax,esi
c001f6d7:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001f6da:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f6de:	e9 84 00 00 00       	jmp    c001f767 <Vm::faultHandler(regs*)+0x673>
c001f6e3:	52                   	push   edx
c001f6e4:	52                   	push   edx
c001f6e5:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001f6e9:	50                   	push   eax
c001f6ea:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f6ee:	50                   	push   eax
c001f6ef:	e8 0e f6 ff ff       	call   c001ed02 <Vm::outbv(unsigned short, unsigned char)>
c001f6f4:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f6f8:	eb 53                	jmp    c001f74d <Vm::faultHandler(regs*)+0x659>
c001f6fa:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001f6fd:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f701:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f706:	74 03                	je     c001f70b <Vm::faultHandler(regs*)+0x617>
c001f708:	ef                   	out    dx,eax
c001f709:	eb cf                	jmp    c001f6da <Vm::faultHandler(regs*)+0x5e6>
c001f70b:	66 ef                	out    dx,ax
c001f70d:	eb cb                	jmp    c001f6da <Vm::faultHandler(regs*)+0x5e6>
c001f70f:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001f716:	83 ec 0c             	sub    esp,0xc
c001f719:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f71d:	50                   	push   eax
c001f71e:	e8 cc f5 ff ff       	call   c001ecef <Vm::inbv(unsigned short)>
c001f723:	0f b6 c0             	movzx  eax,al
c001f726:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001f729:	eb 1f                	jmp    c001f74a <Vm::faultHandler(regs*)+0x656>
c001f72b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f72e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f733:	74 03                	je     c001f738 <Vm::faultHandler(regs*)+0x644>
c001f735:	ed                   	in     eax,dx
c001f736:	eb 0d                	jmp    c001f745 <Vm::faultHandler(regs*)+0x651>
c001f738:	66 ed                	in     ax,dx
c001f73a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001f73d:	0f b7 c0             	movzx  eax,ax
c001f740:	66 31 d2             	xor    dx,dx
c001f743:	09 d0                	or     eax,edx
c001f745:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001f748:	eb 1a                	jmp    c001f764 <Vm::faultHandler(regs*)+0x670>
c001f74a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f74d:	83 c4 10             	add    esp,0x10
c001f750:	eb 15                	jmp    c001f767 <Vm::faultHandler(regs*)+0x673>
c001f752:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001f755:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f758:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f75d:	74 03                	je     c001f762 <Vm::faultHandler(regs*)+0x66e>
c001f75f:	ef                   	out    dx,eax
c001f760:	eb 02                	jmp    c001f764 <Vm::faultHandler(regs*)+0x670>
c001f762:	66 ef                	out    dx,ax
c001f764:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f767:	b0 01                	mov    al,0x1
c001f769:	eb 56                	jmp    c001f7c1 <Vm::faultHandler(regs*)+0x6cd>
c001f76b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f76f:	50                   	push   eax
c001f770:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f774:	50                   	push   eax
c001f775:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f779:	50                   	push   eax
c001f77a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f77e:	50                   	push   eax
c001f77f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f783:	50                   	push   eax
c001f784:	52                   	push   edx
c001f785:	52                   	push   edx
c001f786:	68 96 d0 02 c0       	push   0xc002d096
c001f78b:	e8 db 31 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c001f790:	83 c4 20             	add    esp,0x20
c001f793:	83 ec 0c             	sub    esp,0xc
c001f796:	6a 60                	push   0x60
c001f798:	e8 52 f5 ff ff       	call   c001ecef <Vm::inbv(unsigned short)>
c001f79d:	83 c4 10             	add    esp,0x10
c001f7a0:	3c 1c                	cmp    al,0x1c
c001f7a2:	74 04                	je     c001f7a8 <Vm::faultHandler(regs*)+0x6b4>
c001f7a4:	3c 5a                	cmp    al,0x5a
c001f7a6:	75 eb                	jne    c001f793 <Vm::faultHandler(regs*)+0x69f>
c001f7a8:	3c 5a                	cmp    al,0x5a
c001f7aa:	74 04                	je     c001f7b0 <Vm::faultHandler(regs*)+0x6bc>
c001f7ac:	3c 1c                	cmp    al,0x1c
c001f7ae:	75 0f                	jne    c001f7bf <Vm::faultHandler(regs*)+0x6cb>
c001f7b0:	83 ec 0c             	sub    esp,0xc
c001f7b3:	6a 60                	push   0x60
c001f7b5:	e8 35 f5 ff ff       	call   c001ecef <Vm::inbv(unsigned short)>
c001f7ba:	83 c4 10             	add    esp,0x10
c001f7bd:	eb e9                	jmp    c001f7a8 <Vm::faultHandler(regs*)+0x6b4>
c001f7bf:	31 c0                	xor    eax,eax
c001f7c1:	83 c4 1c             	add    esp,0x1c
c001f7c4:	5b                   	pop    ebx
c001f7c5:	5e                   	pop    esi
c001f7c6:	5f                   	pop    edi
c001f7c7:	5d                   	pop    ebp
c001f7c8:	c3                   	ret    

c001f7c9 <Vm::fpuInternalTo32(unsigned long long)>:
c001f7c9:	57                   	push   edi
c001f7ca:	56                   	push   esi
c001f7cb:	53                   	push   ebx
c001f7cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f7d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7d4:	89 d6                	mov    esi,edx
c001f7d6:	89 d7                	mov    edi,edx
c001f7d8:	89 c1                	mov    ecx,eax
c001f7da:	c1 ef 14             	shr    edi,0x14
c001f7dd:	89 d3                	mov    ebx,edx
c001f7df:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f7e5:	31 d2                	xor    edx,edx
c001f7e7:	89 f8                	mov    eax,edi
c001f7e9:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f7ef:	bf ff 00 00 00       	mov    edi,0xff
c001f7f4:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f7f9:	83 d2 ff             	adc    edx,0xffffffff
c001f7fc:	39 c7                	cmp    edi,eax
c001f7fe:	bf 00 00 00 00       	mov    edi,0x0
c001f803:	19 d7                	sbb    edi,edx
c001f805:	72 15                	jb     c001f81c <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f807:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f80b:	c1 e0 17             	shl    eax,0x17
c001f80e:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f814:	09 f1                	or     ecx,esi
c001f816:	09 c1                	or     ecx,eax
c001f818:	89 cf                	mov    edi,ecx
c001f81a:	eb 02                	jmp    c001f81e <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f81c:	31 ff                	xor    edi,edi
c001f81e:	89 f8                	mov    eax,edi
c001f820:	5b                   	pop    ebx
c001f821:	5e                   	pop    esi
c001f822:	5f                   	pop    edi
c001f823:	c3                   	ret    

c001f824 <Vm::fpuInternalTo64(unsigned long long)>:
c001f824:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f828:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f82c:	c3                   	ret    

c001f82d <Vm::fpu32ToInternal(unsigned int)>:
c001f82d:	57                   	push   edi
c001f82e:	31 ff                	xor    edi,edi
c001f830:	56                   	push   esi
c001f831:	53                   	push   ebx
c001f832:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f836:	89 cb                	mov    ebx,ecx
c001f838:	89 ce                	mov    esi,ecx
c001f83a:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f840:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f846:	c1 e9 17             	shr    ecx,0x17
c001f849:	89 f0                	mov    eax,esi
c001f84b:	0f b6 d1             	movzx  edx,cl
c001f84e:	81 c2 80 03 00 00    	add    edx,0x380
c001f854:	89 d1                	mov    ecx,edx
c001f856:	89 fa                	mov    edx,edi
c001f858:	c1 e1 14             	shl    ecx,0x14
c001f85b:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f85f:	c1 e0 1d             	shl    eax,0x1d
c001f862:	89 d7                	mov    edi,edx
c001f864:	89 c6                	mov    esi,eax
c001f866:	89 ca                	mov    edx,ecx
c001f868:	89 f0                	mov    eax,esi
c001f86a:	09 fa                	or     edx,edi
c001f86c:	09 da                	or     edx,ebx
c001f86e:	5b                   	pop    ebx
c001f86f:	5e                   	pop    esi
c001f870:	5f                   	pop    edi
c001f871:	c3                   	ret    

c001f872 <Vm::fpu64ToInternal(unsigned long long)>:
c001f872:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f876:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f87a:	c3                   	ret    

c001f87b <Vm::fpuFloatToLong(unsigned long long)>:
c001f87b:	57                   	push   edi
c001f87c:	31 c0                	xor    eax,eax
c001f87e:	56                   	push   esi
c001f87f:	31 d2                	xor    edx,edx
c001f881:	53                   	push   ebx
c001f882:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f886:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f88a:	89 d9                	mov    ecx,ebx
c001f88c:	c1 e9 14             	shr    ecx,0x14
c001f88f:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f895:	89 cf                	mov    edi,ecx
c001f897:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f89d:	78 33                	js     c001f8d2 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f89f:	89 d9                	mov    ecx,ebx
c001f8a1:	89 f0                	mov    eax,esi
c001f8a3:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f8a9:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f8af:	89 ca                	mov    edx,ecx
c001f8b1:	b9 34 00 00 00       	mov    ecx,0x34
c001f8b6:	29 f9                	sub    ecx,edi
c001f8b8:	0f ad d0             	shrd   eax,edx,cl
c001f8bb:	d3 fa                	sar    edx,cl
c001f8bd:	f6 c1 20             	test   cl,0x20
c001f8c0:	74 05                	je     c001f8c7 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f8c2:	89 d0                	mov    eax,edx
c001f8c4:	c1 fa 1f             	sar    edx,0x1f
c001f8c7:	85 db                	test   ebx,ebx
c001f8c9:	79 07                	jns    c001f8d2 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f8cb:	f7 d8                	neg    eax
c001f8cd:	83 d2 00             	adc    edx,0x0
c001f8d0:	f7 da                	neg    edx
c001f8d2:	5b                   	pop    ebx
c001f8d3:	5e                   	pop    esi
c001f8d4:	5f                   	pop    edi
c001f8d5:	c3                   	ret    

c001f8d6 <Vm::fpuULongToFloat(unsigned long long)>:
c001f8d6:	57                   	push   edi
c001f8d7:	31 c9                	xor    ecx,ecx
c001f8d9:	56                   	push   esi
c001f8da:	53                   	push   ebx
c001f8db:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f8df:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f8e3:	0f ba e7 14          	bt     edi,0x14
c001f8e7:	72 07                	jb     c001f8f0 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f8e9:	01 f6                	add    esi,esi
c001f8eb:	11 ff                	adc    edi,edi
c001f8ed:	41                   	inc    ecx
c001f8ee:	eb f3                	jmp    c001f8e3 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f8f0:	89 fa                	mov    edx,edi
c001f8f2:	89 f0                	mov    eax,esi
c001f8f4:	bb 33 04 00 00       	mov    ebx,0x433
c001f8f9:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f8ff:	29 cb                	sub    ebx,ecx
c001f901:	89 d9                	mov    ecx,ebx
c001f903:	5b                   	pop    ebx
c001f904:	c1 e1 14             	shl    ecx,0x14
c001f907:	5e                   	pop    esi
c001f908:	09 ca                	or     edx,ecx
c001f90a:	5f                   	pop    edi
c001f90b:	c3                   	ret    

c001f90c <Vm::fpuLongToFloat(long long)>:
c001f90c:	56                   	push   esi
c001f90d:	31 c0                	xor    eax,eax
c001f90f:	53                   	push   ebx
c001f910:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f914:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f918:	39 c8                	cmp    eax,ecx
c001f91a:	19 d8                	sbb    eax,ebx
c001f91c:	7d 04                	jge    c001f922 <Vm::fpuLongToFloat(long long)+0x16>
c001f91e:	31 f6                	xor    esi,esi
c001f920:	eb 0c                	jmp    c001f92e <Vm::fpuLongToFloat(long long)+0x22>
c001f922:	f7 d9                	neg    ecx
c001f924:	be 01 00 00 00       	mov    esi,0x1
c001f929:	83 d3 00             	adc    ebx,0x0
c001f92c:	f7 db                	neg    ebx
c001f92e:	31 c0                	xor    eax,eax
c001f930:	0f ba e3 14          	bt     ebx,0x14
c001f934:	72 07                	jb     c001f93d <Vm::fpuLongToFloat(long long)+0x31>
c001f936:	01 c9                	add    ecx,ecx
c001f938:	11 db                	adc    ebx,ebx
c001f93a:	40                   	inc    eax
c001f93b:	eb f3                	jmp    c001f930 <Vm::fpuLongToFloat(long long)+0x24>
c001f93d:	ba 33 04 00 00       	mov    edx,0x433
c001f942:	29 c2                	sub    edx,eax
c001f944:	89 c8                	mov    eax,ecx
c001f946:	c1 e2 14             	shl    edx,0x14
c001f949:	89 d9                	mov    ecx,ebx
c001f94b:	89 f3                	mov    ebx,esi
c001f94d:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f953:	09 ca                	or     edx,ecx
c001f955:	84 db                	test   bl,bl
c001f957:	74 06                	je     c001f95f <Vm::fpuLongToFloat(long long)+0x53>
c001f959:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f95f:	5b                   	pop    ebx
c001f960:	5e                   	pop    esi
c001f961:	c3                   	ret    

c001f962 <Vm::fpuGet0()>:
c001f962:	31 c0                	xor    eax,eax
c001f964:	31 d2                	xor    edx,edx
c001f966:	c3                   	ret    

c001f967 <Vm::fpuGet1()>:
c001f967:	b8 01 00 00 00       	mov    eax,0x1
c001f96c:	31 d2                	xor    edx,edx
c001f96e:	c3                   	ret    

c001f96f <Vm::fpuGetPi()>:
c001f96f:	b8 03 00 00 00       	mov    eax,0x3
c001f974:	31 d2                	xor    edx,edx
c001f976:	c3                   	ret    

c001f977 <Vm::fpuGetLog2E()>:
c001f977:	83 ec 18             	sub    esp,0x18
c001f97a:	68 f4 d0 02 c0       	push   0xc002d0f4
c001f97f:	e8 1d aa ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c001f984:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f989:	31 d2                	xor    edx,edx
c001f98b:	83 c4 1c             	add    esp,0x1c
c001f98e:	c3                   	ret    

c001f98f <Vm::fpuGetLogE2()>:
c001f98f:	83 ec 18             	sub    esp,0x18
c001f992:	68 00 d1 02 c0       	push   0xc002d100
c001f997:	e8 05 aa ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c001f99c:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f9a1:	31 d2                	xor    edx,edx
c001f9a3:	83 c4 1c             	add    esp,0x1c
c001f9a6:	c3                   	ret    

c001f9a7 <Vm::fpuGetLog210()>:
c001f9a7:	83 ec 18             	sub    esp,0x18
c001f9aa:	68 0c d1 02 c0       	push   0xc002d10c
c001f9af:	e8 ed a9 ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c001f9b4:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f9b9:	31 d2                	xor    edx,edx
c001f9bb:	83 c4 1c             	add    esp,0x1c
c001f9be:	c3                   	ret    

c001f9bf <Vm::fpuGetLog102()>:
c001f9bf:	83 ec 18             	sub    esp,0x18
c001f9c2:	68 19 d1 02 c0       	push   0xc002d119
c001f9c7:	e8 d5 a9 ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c001f9cc:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f9d1:	31 d2                	xor    edx,edx
c001f9d3:	83 c4 1c             	add    esp,0x1c
c001f9d6:	c3                   	ret    

c001f9d7 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f9d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f9db:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f9df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f9e3:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f9e7:	0f 92 c0             	setb   al
c001f9ea:	c3                   	ret    

c001f9eb <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f9eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f9ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9f3:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f9f7:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f9fb:	09 c2                	or     edx,eax
c001f9fd:	0f 94 c0             	sete   al
c001fa00:	c3                   	ret    

c001fa01 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001fa01:	57                   	push   edi
c001fa02:	56                   	push   esi
c001fa03:	53                   	push   ebx
c001fa04:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001fa08:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001fa0c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001fa10:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001fa14:	57                   	push   edi
c001fa15:	56                   	push   esi
c001fa16:	53                   	push   ebx
c001fa17:	51                   	push   ecx
c001fa18:	e8 ce ff ff ff       	call   c001f9eb <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001fa1d:	83 c4 10             	add    esp,0x10
c001fa20:	88 c2                	mov    dl,al
c001fa22:	31 c0                	xor    eax,eax
c001fa24:	84 d2                	test   dl,dl
c001fa26:	75 0c                	jne    c001fa34 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001fa28:	57                   	push   edi
c001fa29:	56                   	push   esi
c001fa2a:	53                   	push   ebx
c001fa2b:	51                   	push   ecx
c001fa2c:	e8 a6 ff ff ff       	call   c001f9d7 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001fa31:	83 c4 10             	add    esp,0x10
c001fa34:	83 e0 01             	and    eax,0x1
c001fa37:	5b                   	pop    ebx
c001fa38:	88 c1                	mov    cl,al
c001fa3a:	83 e2 01             	and    edx,0x1
c001fa3d:	a0 81 26 03 c0       	mov    al,ds:0xc0032681
c001fa42:	c1 e2 06             	shl    edx,0x6
c001fa45:	83 e0 ba             	and    eax,0xffffffba
c001fa48:	5e                   	pop    esi
c001fa49:	09 c8                	or     eax,ecx
c001fa4b:	5f                   	pop    edi
c001fa4c:	09 d0                	or     eax,edx
c001fa4e:	a2 81 26 03 c0       	mov    ds:0xc0032681,al
c001fa53:	c3                   	ret    

c001fa54 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001fa54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fa58:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001fa5c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001fa60:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001fa64:	c3                   	ret    

c001fa65 <Vm::fpuAbs(unsigned long long)>:
c001fa65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa69:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fa6d:	c3                   	ret    

c001fa6e <Vm::fpuChs(unsigned long long)>:
c001fa6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fa76:	f7 d8                	neg    eax
c001fa78:	83 d2 00             	adc    edx,0x0
c001fa7b:	f7 da                	neg    edx
c001fa7d:	c3                   	ret    

c001fa7e <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001fa7e:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001fa82:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001fa87:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001fa8b:	eb c7                	jmp    c001fa54 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001fa8d <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001fa8d:	53                   	push   ebx
c001fa8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fa92:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001fa96:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fa9a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001fa9e:	0f af ca             	imul   ecx,edx
c001faa1:	0f af d8             	imul   ebx,eax
c001faa4:	f7 e2                	mul    edx
c001faa6:	01 d9                	add    ecx,ebx
c001faa8:	5b                   	pop    ebx
c001faa9:	01 ca                	add    edx,ecx
c001faab:	c3                   	ret    

c001faac <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001faac:	83 ec 0c             	sub    esp,0xc
c001faaf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fab3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fab7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fabb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fabf:	e8 d0 77 00 00       	call   c0027294 <__udivdi3>
c001fac4:	83 c4 1c             	add    esp,0x1c
c001fac7:	c3                   	ret    

c001fac8 <Vm::fpuSquare(unsigned long long)>:
c001fac8:	50                   	push   eax
c001fac9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001facd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fad1:	52                   	push   edx
c001fad2:	50                   	push   eax
c001fad3:	52                   	push   edx
c001fad4:	50                   	push   eax
c001fad5:	e8 b3 ff ff ff       	call   c001fa8d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fada:	83 c4 14             	add    esp,0x14
c001fadd:	c3                   	ret    

c001fade <Vm::fpuGetReg(int)>:
c001fade:	83 ec 0c             	sub    esp,0xc
c001fae1:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001fae6:	76 10                	jbe    c001faf8 <Vm::fpuGetReg(int)+0x1a>
c001fae8:	83 ec 0c             	sub    esp,0xc
c001faeb:	68 26 d1 02 c0       	push   0xc002d126
c001faf0:	e8 ac a8 ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c001faf5:	83 c4 10             	add    esp,0x10
c001faf8:	a0 81 26 03 c0       	mov    al,ds:0xc0032681
c001fafd:	b9 08 00 00 00       	mov    ecx,0x8
c001fb02:	c0 e8 03             	shr    al,0x3
c001fb05:	83 e0 07             	and    eax,0x7
c001fb08:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fb0c:	99                   	cdq    
c001fb0d:	f7 f9                	idiv   ecx
c001fb0f:	8b 04 d5 84 26 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcd97c]
c001fb16:	8b 14 d5 88 26 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcd978]
c001fb1d:	83 c4 0c             	add    esp,0xc
c001fb20:	c3                   	ret    

c001fb21 <Vm::fpuSetReg(int, unsigned long long)>:
c001fb21:	57                   	push   edi
c001fb22:	56                   	push   esi
c001fb23:	52                   	push   edx
c001fb24:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001fb28:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001fb2c:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001fb31:	76 10                	jbe    c001fb43 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001fb33:	83 ec 0c             	sub    esp,0xc
c001fb36:	68 39 d1 02 c0       	push   0xc002d139
c001fb3b:	e8 61 a8 ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c001fb40:	83 c4 10             	add    esp,0x10
c001fb43:	a0 81 26 03 c0       	mov    al,ds:0xc0032681
c001fb48:	b9 08 00 00 00       	mov    ecx,0x8
c001fb4d:	c0 e8 03             	shr    al,0x3
c001fb50:	83 e0 07             	and    eax,0x7
c001fb53:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fb57:	99                   	cdq    
c001fb58:	f7 f9                	idiv   ecx
c001fb5a:	89 34 d5 84 26 03 c0 	mov    DWORD PTR [edx*8-0x3ffcd97c],esi
c001fb61:	89 3c d5 88 26 03 c0 	mov    DWORD PTR [edx*8-0x3ffcd978],edi
c001fb68:	58                   	pop    eax
c001fb69:	5e                   	pop    esi
c001fb6a:	5f                   	pop    edi
c001fb6b:	c3                   	ret    

c001fb6c <Vm::fpuPush(unsigned long long)>:
c001fb6c:	a0 81 26 03 c0       	mov    al,ds:0xc0032681
c001fb71:	c0 e8 03             	shr    al,0x3
c001fb74:	83 e0 07             	and    eax,0x7
c001fb77:	83 c0 07             	add    eax,0x7
c001fb7a:	88 c2                	mov    dl,al
c001fb7c:	83 e0 07             	and    eax,0x7
c001fb7f:	83 e2 07             	and    edx,0x7
c001fb82:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001fb89:	8a 15 81 26 03 c0    	mov    dl,BYTE PTR ds:0xc0032681
c001fb8f:	83 e2 c7             	and    edx,0xffffffc7
c001fb92:	09 ca                	or     edx,ecx
c001fb94:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fb98:	88 15 81 26 03 c0    	mov    BYTE PTR ds:0xc0032681,dl
c001fb9e:	89 0c c5 88 26 03 c0 	mov    DWORD PTR [eax*8-0x3ffcd978],ecx
c001fba5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fba9:	89 14 c5 84 26 03 c0 	mov    DWORD PTR [eax*8-0x3ffcd97c],edx
c001fbb0:	a1 c4 26 03 c0       	mov    eax,ds:0xc00326c4
c001fbb5:	83 f8 08             	cmp    eax,0x8
c001fbb8:	75 08                	jne    c001fbc2 <Vm::fpuPush(unsigned long long)+0x56>
c001fbba:	80 0d 80 26 03 c0 40 	or     BYTE PTR ds:0xc0032680,0x40
c001fbc1:	c3                   	ret    
c001fbc2:	40                   	inc    eax
c001fbc3:	a3 c4 26 03 c0       	mov    ds:0xc00326c4,eax
c001fbc8:	c3                   	ret    

c001fbc9 <Vm::fpuPop()>:
c001fbc9:	8a 0d 81 26 03 c0    	mov    cl,BYTE PTR ds:0xc0032681
c001fbcf:	53                   	push   ebx
c001fbd0:	c0 e9 03             	shr    cl,0x3
c001fbd3:	8a 1d 81 26 03 c0    	mov    bl,BYTE PTR ds:0xc0032681
c001fbd9:	83 e1 07             	and    ecx,0x7
c001fbdc:	83 e3 c7             	and    ebx,0xffffffc7
c001fbdf:	8b 04 cd 84 26 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcd97c]
c001fbe6:	8b 14 cd 88 26 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcd978]
c001fbed:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001fbf4:	83 e1 38             	and    ecx,0x38
c001fbf7:	09 d9                	or     ecx,ebx
c001fbf9:	88 0d 81 26 03 c0    	mov    BYTE PTR ds:0xc0032681,cl
c001fbff:	8b 0d c4 26 03 c0    	mov    ecx,DWORD PTR ds:0xc00326c4
c001fc05:	85 c9                	test   ecx,ecx
c001fc07:	74 09                	je     c001fc12 <Vm::fpuPop()+0x49>
c001fc09:	49                   	dec    ecx
c001fc0a:	89 0d c4 26 03 c0    	mov    DWORD PTR ds:0xc00326c4,ecx
c001fc10:	eb 07                	jmp    c001fc19 <Vm::fpuPop()+0x50>
c001fc12:	80 0d 80 26 03 c0 40 	or     BYTE PTR ds:0xc0032680,0x40
c001fc19:	5b                   	pop    ebx
c001fc1a:	c3                   	ret    

c001fc1b <Vm::x87Handler(regs*)>:
c001fc1b:	55                   	push   ebp
c001fc1c:	57                   	push   edi
c001fc1d:	56                   	push   esi
c001fc1e:	53                   	push   ebx
c001fc1f:	83 ec 1c             	sub    esp,0x1c
c001fc22:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001fc26:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001fc2b:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001fc2e:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001fc36:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001fc3a:	50                   	push   eax
c001fc3b:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001fc3f:	50                   	push   eax
c001fc40:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fc44:	50                   	push   eax
c001fc45:	53                   	push   ebx
c001fc46:	e8 23 9e ff ff       	call   c0019a6e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001fc4b:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001fc4e:	83 c4 10             	add    esp,0x10
c001fc51:	89 c6                	mov    esi,eax
c001fc53:	80 fa d9             	cmp    dl,0xd9
c001fc56:	0f 85 52 01 00 00    	jne    c001fdae <Vm::x87Handler(regs*)+0x193>
c001fc5c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc60:	8d 50 20             	lea    edx,[eax+0x20]
c001fc63:	80 fa 0e             	cmp    dl,0xe
c001fc66:	0f 87 86 00 00 00    	ja     c001fcf2 <Vm::x87Handler(regs*)+0xd7>
c001fc6c:	0f b6 d2             	movzx  edx,dl
c001fc6f:	ff 24 95 4c d1 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd2eb4]
c001fc76:	e8 e7 fc ff ff       	call   c001f962 <Vm::fpuGet0()>
c001fc7b:	eb 05                	jmp    c001fc82 <Vm::x87Handler(regs*)+0x67>
c001fc7d:	e8 e5 fc ff ff       	call   c001f967 <Vm::fpuGet1()>
c001fc82:	57                   	push   edi
c001fc83:	57                   	push   edi
c001fc84:	52                   	push   edx
c001fc85:	50                   	push   eax
c001fc86:	e8 e1 fe ff ff       	call   c001fb6c <Vm::fpuPush(unsigned long long)>
c001fc8b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fc8f:	83 c4 10             	add    esp,0x10
c001fc92:	b0 01                	mov    al,0x1
c001fc94:	e9 e3 09 00 00       	jmp    c002067c <Vm::x87Handler(regs*)+0xa61>
c001fc99:	83 ec 0c             	sub    esp,0xc
c001fc9c:	6a 00                	push   0x0
c001fc9e:	e8 3b fe ff ff       	call   c001fade <Vm::fpuGetReg(int)>
c001fca3:	59                   	pop    ecx
c001fca4:	5e                   	pop    esi
c001fca5:	52                   	push   edx
c001fca6:	50                   	push   eax
c001fca7:	e8 c2 fd ff ff       	call   c001fa6e <Vm::fpuChs(unsigned long long)>
c001fcac:	eb 13                	jmp    c001fcc1 <Vm::x87Handler(regs*)+0xa6>
c001fcae:	83 ec 0c             	sub    esp,0xc
c001fcb1:	6a 00                	push   0x0
c001fcb3:	e8 26 fe ff ff       	call   c001fade <Vm::fpuGetReg(int)>
c001fcb8:	5f                   	pop    edi
c001fcb9:	5d                   	pop    ebp
c001fcba:	52                   	push   edx
c001fcbb:	50                   	push   eax
c001fcbc:	e8 a4 fd ff ff       	call   c001fa65 <Vm::fpuAbs(unsigned long long)>
c001fcc1:	83 c4 0c             	add    esp,0xc
c001fcc4:	52                   	push   edx
c001fcc5:	50                   	push   eax
c001fcc6:	6a 00                	push   0x0
c001fcc8:	e8 54 fe ff ff       	call   c001fb21 <Vm::fpuSetReg(int, unsigned long long)>
c001fccd:	eb bc                	jmp    c001fc8b <Vm::x87Handler(regs*)+0x70>
c001fccf:	e8 d3 fc ff ff       	call   c001f9a7 <Vm::fpuGetLog210()>
c001fcd4:	eb ac                	jmp    c001fc82 <Vm::x87Handler(regs*)+0x67>
c001fcd6:	e8 9c fc ff ff       	call   c001f977 <Vm::fpuGetLog2E()>
c001fcdb:	eb a5                	jmp    c001fc82 <Vm::x87Handler(regs*)+0x67>
c001fcdd:	e8 8d fc ff ff       	call   c001f96f <Vm::fpuGetPi()>
c001fce2:	eb 9e                	jmp    c001fc82 <Vm::x87Handler(regs*)+0x67>
c001fce4:	e8 d6 fc ff ff       	call   c001f9bf <Vm::fpuGetLog102()>
c001fce9:	eb 97                	jmp    c001fc82 <Vm::x87Handler(regs*)+0x67>
c001fceb:	e8 9f fc ff ff       	call   c001f98f <Vm::fpuGetLogE2()>
c001fcf0:	eb 90                	jmp    c001fc82 <Vm::x87Handler(regs*)+0x67>
c001fcf2:	8d 50 40             	lea    edx,[eax+0x40]
c001fcf5:	80 fa 07             	cmp    dl,0x7
c001fcf8:	77 15                	ja     c001fd0f <Vm::x87Handler(regs*)+0xf4>
c001fcfa:	83 ec 0c             	sub    esp,0xc
c001fcfd:	2d c0 00 00 00       	sub    eax,0xc0
c001fd02:	50                   	push   eax
c001fd03:	e8 d6 fd ff ff       	call   c001fade <Vm::fpuGetReg(int)>
c001fd08:	59                   	pop    ecx
c001fd09:	5e                   	pop    esi
c001fd0a:	e9 75 ff ff ff       	jmp    c001fc84 <Vm::x87Handler(regs*)+0x69>
c001fd0f:	8d 50 38             	lea    edx,[eax+0x38]
c001fd12:	80 fa 07             	cmp    dl,0x7
c001fd15:	77 3c                	ja     c001fd53 <Vm::x87Handler(regs*)+0x138>
c001fd17:	83 ec 0c             	sub    esp,0xc
c001fd1a:	2d c8 00 00 00       	sub    eax,0xc8
c001fd1f:	50                   	push   eax
c001fd20:	e8 b9 fd ff ff       	call   c001fade <Vm::fpuGetReg(int)>
c001fd25:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd2c:	89 c6                	mov    esi,eax
c001fd2e:	89 d7                	mov    edi,edx
c001fd30:	e8 a9 fd ff ff       	call   c001fade <Vm::fpuGetReg(int)>
c001fd35:	83 c4 0c             	add    esp,0xc
c001fd38:	52                   	push   edx
c001fd39:	50                   	push   eax
c001fd3a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd3e:	2d c8 00 00 00       	sub    eax,0xc8
c001fd43:	50                   	push   eax
c001fd44:	e8 d8 fd ff ff       	call   c001fb21 <Vm::fpuSetReg(int, unsigned long long)>
c001fd49:	83 c4 0c             	add    esp,0xc
c001fd4c:	57                   	push   edi
c001fd4d:	56                   	push   esi
c001fd4e:	e9 73 ff ff ff       	jmp    c001fcc6 <Vm::x87Handler(regs*)+0xab>
c001fd53:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fd57:	84 d2                	test   dl,dl
c001fd59:	75 0f                	jne    c001fd6a <Vm::x87Handler(regs*)+0x14f>
c001fd5b:	83 ec 0c             	sub    esp,0xc
c001fd5e:	ff 36                	push   DWORD PTR [esi]
c001fd60:	e8 c8 fa ff ff       	call   c001f82d <Vm::fpu32ToInternal(unsigned int)>
c001fd65:	e9 bf 00 00 00       	jmp    c001fe29 <Vm::x87Handler(regs*)+0x20e>
c001fd6a:	80 fa 03             	cmp    dl,0x3
c001fd6d:	75 13                	jne    c001fd82 <Vm::x87Handler(regs*)+0x167>
c001fd6f:	e8 55 fe ff ff       	call   c001fbc9 <Vm::fpuPop()>
c001fd74:	55                   	push   ebp
c001fd75:	55                   	push   ebp
c001fd76:	52                   	push   edx
c001fd77:	50                   	push   eax
c001fd78:	e8 4c fa ff ff       	call   c001f7c9 <Vm::fpuInternalTo32(unsigned long long)>
c001fd7d:	e9 88 00 00 00       	jmp    c001fe0a <Vm::x87Handler(regs*)+0x1ef>
c001fd82:	80 fa 05             	cmp    dl,0x5
c001fd85:	75 0e                	jne    c001fd95 <Vm::x87Handler(regs*)+0x17a>
c001fd87:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fd8a:	66 a3 82 26 03 c0    	mov    ds:0xc0032682,ax
c001fd90:	e9 df 00 00 00       	jmp    c001fe74 <Vm::x87Handler(regs*)+0x259>
c001fd95:	31 c0                	xor    eax,eax
c001fd97:	80 fa 07             	cmp    dl,0x7
c001fd9a:	0f 85 dc 08 00 00    	jne    c002067c <Vm::x87Handler(regs*)+0xa61>
c001fda0:	66 a1 82 26 03 c0    	mov    ax,ds:0xc0032682
c001fda6:	66 89 06             	mov    WORD PTR [esi],ax
c001fda9:	e9 c6 00 00 00       	jmp    c001fe74 <Vm::x87Handler(regs*)+0x259>
c001fdae:	80 fa d8             	cmp    dl,0xd8
c001fdb1:	0f 84 c9 00 00 00    	je     c001fe80 <Vm::x87Handler(regs*)+0x265>
c001fdb7:	80 fa dc             	cmp    dl,0xdc
c001fdba:	0f 84 0d 02 00 00    	je     c001ffcd <Vm::x87Handler(regs*)+0x3b2>
c001fdc0:	80 fa de             	cmp    dl,0xde
c001fdc3:	0f 84 cd 02 00 00    	je     c0020096 <Vm::x87Handler(regs*)+0x47b>
c001fdc9:	80 fa dd             	cmp    dl,0xdd
c001fdcc:	0f 84 5f 04 00 00    	je     c0020231 <Vm::x87Handler(regs*)+0x616>
c001fdd2:	80 fa da             	cmp    dl,0xda
c001fdd5:	0f 84 24 05 00 00    	je     c00202ff <Vm::x87Handler(regs*)+0x6e4>
c001fddb:	80 fa df             	cmp    dl,0xdf
c001fdde:	0f 84 68 05 00 00    	je     c002034c <Vm::x87Handler(regs*)+0x731>
c001fde4:	31 c0                	xor    eax,eax
c001fde6:	80 fa db             	cmp    dl,0xdb
c001fde9:	0f 85 8d 08 00 00    	jne    c002067c <Vm::x87Handler(regs*)+0xa61>
c001fdef:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fdf3:	80 fa 03             	cmp    dl,0x3
c001fdf6:	0f 85 70 06 00 00    	jne    c002046c <Vm::x87Handler(regs*)+0x851>
c001fdfc:	e8 c8 fd ff ff       	call   c001fbc9 <Vm::fpuPop()>
c001fe01:	55                   	push   ebp
c001fe02:	55                   	push   ebp
c001fe03:	52                   	push   edx
c001fe04:	50                   	push   eax
c001fe05:	e8 71 fa ff ff       	call   c001f87b <Vm::fpuFloatToLong(unsigned long long)>
c001fe0a:	83 c4 10             	add    esp,0x10
c001fe0d:	89 06                	mov    DWORD PTR [esi],eax
c001fe0f:	eb 63                	jmp    c001fe74 <Vm::x87Handler(regs*)+0x259>
c001fe11:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fe15:	84 d2                	test   dl,dl
c001fe17:	0f 85 e6 05 00 00    	jne    c0020403 <Vm::x87Handler(regs*)+0x7e8>
c001fe1d:	57                   	push   edi
c001fe1e:	57                   	push   edi
c001fe1f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fe22:	ff 36                	push   DWORD PTR [esi]
c001fe24:	e8 49 fa ff ff       	call   c001f872 <Vm::fpu64ToInternal(unsigned long long)>
c001fe29:	5e                   	pop    esi
c001fe2a:	5f                   	pop    edi
c001fe2b:	52                   	push   edx
c001fe2c:	50                   	push   eax
c001fe2d:	e8 3a fd ff ff       	call   c001fb6c <Vm::fpuPush(unsigned long long)>
c001fe32:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fe36:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fe39:	e9 51 fe ff ff       	jmp    c001fc8f <Vm::x87Handler(regs*)+0x74>
c001fe3e:	80 fa 03             	cmp    dl,0x3
c001fe41:	0f 85 d7 06 00 00    	jne    c002051e <Vm::x87Handler(regs*)+0x903>
c001fe47:	57                   	push   edi
c001fe48:	57                   	push   edi
c001fe49:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fe4c:	ff 36                	push   DWORD PTR [esi]
c001fe4e:	e8 1f fa ff ff       	call   c001f872 <Vm::fpu64ToInternal(unsigned long long)>
c001fe53:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe5a:	89 c6                	mov    esi,eax
c001fe5c:	89 d7                	mov    edi,edx
c001fe5e:	e8 7b fc ff ff       	call   c001fade <Vm::fpuGetReg(int)>
c001fe63:	57                   	push   edi
c001fe64:	56                   	push   esi
c001fe65:	52                   	push   edx
c001fe66:	50                   	push   eax
c001fe67:	e8 95 fb ff ff       	call   c001fa01 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fe6c:	83 c4 20             	add    esp,0x20
c001fe6f:	e8 55 fd ff ff       	call   c001fbc9 <Vm::fpuPop()>
c001fe74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fe78:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fe7b:	e9 12 fe ff ff       	jmp    c001fc92 <Vm::x87Handler(regs*)+0x77>
c001fe80:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe84:	8d 50 40             	lea    edx,[eax+0x40]
c001fe87:	80 fa 07             	cmp    dl,0x7
c001fe8a:	77 29                	ja     c001feb5 <Vm::x87Handler(regs*)+0x29a>
c001fe8c:	83 ec 0c             	sub    esp,0xc
c001fe8f:	2d c0 00 00 00       	sub    eax,0xc0
c001fe94:	50                   	push   eax
c001fe95:	e8 44 fc ff ff       	call   c001fade <Vm::fpuGetReg(int)>
c001fe9a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fea1:	89 c6                	mov    esi,eax
c001fea3:	89 d7                	mov    edi,edx
c001fea5:	e8 34 fc ff ff       	call   c001fade <Vm::fpuGetReg(int)>
c001feaa:	57                   	push   edi
c001feab:	56                   	push   esi
c001feac:	52                   	push   edx
c001fead:	50                   	push   eax
c001feae:	e8 a1 fb ff ff       	call   c001fa54 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001feb3:	eb 2f                	jmp    c001fee4 <Vm::x87Handler(regs*)+0x2c9>
c001feb5:	8d 50 38             	lea    edx,[eax+0x38]
c001feb8:	80 fa 07             	cmp    dl,0x7
c001febb:	77 2f                	ja     c001feec <Vm::x87Handler(regs*)+0x2d1>
c001febd:	83 ec 0c             	sub    esp,0xc
c001fec0:	2d c8 00 00 00       	sub    eax,0xc8
c001fec5:	50                   	push   eax
c001fec6:	e8 13 fc ff ff       	call   c001fade <Vm::fpuGetReg(int)>
c001fecb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fed2:	89 c6                	mov    esi,eax
c001fed4:	89 d7                	mov    edi,edx
c001fed6:	e8 03 fc ff ff       	call   c001fade <Vm::fpuGetReg(int)>
c001fedb:	57                   	push   edi
c001fedc:	56                   	push   esi
c001fedd:	52                   	push   edx
c001fede:	50                   	push   eax
c001fedf:	e8 a9 fb ff ff       	call   c001fa8d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fee4:	83 c4 1c             	add    esp,0x1c
c001fee7:	e9 d8 fd ff ff       	jmp    c001fcc4 <Vm::x87Handler(regs*)+0xa9>
c001feec:	8d 50 30             	lea    edx,[eax+0x30]
c001feef:	80 fa 07             	cmp    dl,0x7
c001fef2:	77 0d                	ja     c001ff01 <Vm::x87Handler(regs*)+0x2e6>
c001fef4:	83 ec 0c             	sub    esp,0xc
c001fef7:	2d d0 00 00 00       	sub    eax,0xd0
c001fefc:	e9 99 03 00 00       	jmp    c002029a <Vm::x87Handler(regs*)+0x67f>
c001ff01:	8d 50 28             	lea    edx,[eax+0x28]
c001ff04:	80 fa 07             	cmp    dl,0x7
c001ff07:	77 0d                	ja     c001ff16 <Vm::x87Handler(regs*)+0x2fb>
c001ff09:	83 ec 0c             	sub    esp,0xc
c001ff0c:	2d d8 00 00 00       	sub    eax,0xd8
c001ff11:	e9 c0 03 00 00       	jmp    c00202d6 <Vm::x87Handler(regs*)+0x6bb>
c001ff16:	8d 50 20             	lea    edx,[eax+0x20]
c001ff19:	80 fa 07             	cmp    dl,0x7
c001ff1c:	77 1b                	ja     c001ff39 <Vm::x87Handler(regs*)+0x31e>
c001ff1e:	83 ec 0c             	sub    esp,0xc
c001ff21:	2d e0 00 00 00       	sub    eax,0xe0
c001ff26:	50                   	push   eax
c001ff27:	e8 b2 fb ff ff       	call   c001fade <Vm::fpuGetReg(int)>
c001ff2c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff33:	89 c6                	mov    esi,eax
c001ff35:	89 d7                	mov    edi,edx
c001ff37:	eb 22                	jmp    c001ff5b <Vm::x87Handler(regs*)+0x340>
c001ff39:	8d 50 18             	lea    edx,[eax+0x18]
c001ff3c:	80 fa 07             	cmp    dl,0x7
c001ff3f:	77 2d                	ja     c001ff6e <Vm::x87Handler(regs*)+0x353>
c001ff41:	83 ec 0c             	sub    esp,0xc
c001ff44:	6a 00                	push   0x0
c001ff46:	e8 93 fb ff ff       	call   c001fade <Vm::fpuGetReg(int)>
c001ff4b:	89 c6                	mov    esi,eax
c001ff4d:	89 d7                	mov    edi,edx
c001ff4f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff53:	2d e8 00 00 00       	sub    eax,0xe8
c001ff58:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff5b:	e8 7e fb ff ff       	call   c001fade <Vm::fpuGetReg(int)>
c001ff60:	57                   	push   edi
c001ff61:	56                   	push   esi
c001ff62:	52                   	push   edx
c001ff63:	50                   	push   eax
c001ff64:	e8 15 fb ff ff       	call   c001fa7e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ff69:	e9 76 ff ff ff       	jmp    c001fee4 <Vm::x87Handler(regs*)+0x2c9>
c001ff6e:	8d 50 10             	lea    edx,[eax+0x10]
c001ff71:	80 fa 07             	cmp    dl,0x7
c001ff74:	77 1b                	ja     c001ff91 <Vm::x87Handler(regs*)+0x376>
c001ff76:	83 ec 0c             	sub    esp,0xc
c001ff79:	2d f0 00 00 00       	sub    eax,0xf0
c001ff7e:	50                   	push   eax
c001ff7f:	e8 5a fb ff ff       	call   c001fade <Vm::fpuGetReg(int)>
c001ff84:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff8b:	89 c6                	mov    esi,eax
c001ff8d:	89 d7                	mov    edi,edx
c001ff8f:	eb 22                	jmp    c001ffb3 <Vm::x87Handler(regs*)+0x398>
c001ff91:	3c f7                	cmp    al,0xf7
c001ff93:	0f 86 d1 03 00 00    	jbe    c002036a <Vm::x87Handler(regs*)+0x74f>
c001ff99:	83 ec 0c             	sub    esp,0xc
c001ff9c:	6a 00                	push   0x0
c001ff9e:	e8 3b fb ff ff       	call   c001fade <Vm::fpuGetReg(int)>
c001ffa3:	89 c6                	mov    esi,eax
c001ffa5:	89 d7                	mov    edi,edx
c001ffa7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffab:	2d f8 00 00 00       	sub    eax,0xf8
c001ffb0:	89 04 24             	mov    DWORD PTR [esp],eax
c001ffb3:	e8 26 fb ff ff       	call   c001fade <Vm::fpuGetReg(int)>
c001ffb8:	57                   	push   edi
c001ffb9:	56                   	push   esi
c001ffba:	52                   	push   edx
c001ffbb:	50                   	push   eax
c001ffbc:	e8 eb fa ff ff       	call   c001faac <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ffc1:	83 c4 1c             	add    esp,0x1c
c001ffc4:	52                   	push   edx
c001ffc5:	50                   	push   eax
c001ffc6:	6a 00                	push   0x0
c001ffc8:	e9 51 02 00 00       	jmp    c002021e <Vm::x87Handler(regs*)+0x603>
c001ffcd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffd1:	8d 50 40             	lea    edx,[eax+0x40]
c001ffd4:	80 fa 07             	cmp    dl,0x7
c001ffd7:	77 37                	ja     c0020010 <Vm::x87Handler(regs*)+0x3f5>
c001ffd9:	83 ec 0c             	sub    esp,0xc
c001ffdc:	2d c0 00 00 00       	sub    eax,0xc0
c001ffe1:	50                   	push   eax
c001ffe2:	e8 f7 fa ff ff       	call   c001fade <Vm::fpuGetReg(int)>
c001ffe7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ffee:	89 c6                	mov    esi,eax
c001fff0:	89 d7                	mov    edi,edx
c001fff2:	e8 e7 fa ff ff       	call   c001fade <Vm::fpuGetReg(int)>
c001fff7:	57                   	push   edi
c001fff8:	56                   	push   esi
c001fff9:	52                   	push   edx
c001fffa:	50                   	push   eax
c001fffb:	e8 54 fa ff ff       	call   c001fa54 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020000:	83 c4 1c             	add    esp,0x1c
c0020003:	52                   	push   edx
c0020004:	50                   	push   eax
c0020005:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020009:	2d c0 00 00 00       	sub    eax,0xc0
c002000e:	eb 3d                	jmp    c002004d <Vm::x87Handler(regs*)+0x432>
c0020010:	8d 50 38             	lea    edx,[eax+0x38]
c0020013:	80 fa 07             	cmp    dl,0x7
c0020016:	77 3b                	ja     c0020053 <Vm::x87Handler(regs*)+0x438>
c0020018:	83 ec 0c             	sub    esp,0xc
c002001b:	2d c8 00 00 00       	sub    eax,0xc8
c0020020:	50                   	push   eax
c0020021:	e8 b8 fa ff ff       	call   c001fade <Vm::fpuGetReg(int)>
c0020026:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002002d:	89 c6                	mov    esi,eax
c002002f:	89 d7                	mov    edi,edx
c0020031:	e8 a8 fa ff ff       	call   c001fade <Vm::fpuGetReg(int)>
c0020036:	57                   	push   edi
c0020037:	56                   	push   esi
c0020038:	52                   	push   edx
c0020039:	50                   	push   eax
c002003a:	e8 4e fa ff ff       	call   c001fa8d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c002003f:	83 c4 1c             	add    esp,0x1c
c0020042:	52                   	push   edx
c0020043:	50                   	push   eax
c0020044:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020048:	2d c8 00 00 00       	sub    eax,0xc8
c002004d:	50                   	push   eax
c002004e:	e9 75 fc ff ff       	jmp    c001fcc8 <Vm::x87Handler(regs*)+0xad>
c0020053:	83 c0 18             	add    eax,0x18
c0020056:	3c 07                	cmp    al,0x7
c0020058:	0f 87 3b 04 00 00    	ja     c0020499 <Vm::x87Handler(regs*)+0x87e>
c002005e:	83 ec 0c             	sub    esp,0xc
c0020061:	6a 00                	push   0x0
c0020063:	e8 76 fa ff ff       	call   c001fade <Vm::fpuGetReg(int)>
c0020068:	89 c6                	mov    esi,eax
c002006a:	89 d7                	mov    edi,edx
c002006c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020070:	2d e8 00 00 00       	sub    eax,0xe8
c0020075:	89 04 24             	mov    DWORD PTR [esp],eax
c0020078:	e8 61 fa ff ff       	call   c001fade <Vm::fpuGetReg(int)>
c002007d:	57                   	push   edi
c002007e:	56                   	push   esi
c002007f:	52                   	push   edx
c0020080:	50                   	push   eax
c0020081:	e8 f8 f9 ff ff       	call   c001fa7e <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020086:	83 c4 1c             	add    esp,0x1c
c0020089:	52                   	push   edx
c002008a:	50                   	push   eax
c002008b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002008f:	2d e8 00 00 00       	sub    eax,0xe8
c0020094:	eb b7                	jmp    c002004d <Vm::x87Handler(regs*)+0x432>
c0020096:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002009a:	8d 50 40             	lea    edx,[eax+0x40]
c002009d:	80 fa 07             	cmp    dl,0x7
c00200a0:	77 3a                	ja     c00200dc <Vm::x87Handler(regs*)+0x4c1>
c00200a2:	83 ec 0c             	sub    esp,0xc
c00200a5:	2d c0 00 00 00       	sub    eax,0xc0
c00200aa:	50                   	push   eax
c00200ab:	e8 2e fa ff ff       	call   c001fade <Vm::fpuGetReg(int)>
c00200b0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00200b7:	89 c6                	mov    esi,eax
c00200b9:	89 d7                	mov    edi,edx
c00200bb:	e8 1e fa ff ff       	call   c001fade <Vm::fpuGetReg(int)>
c00200c0:	57                   	push   edi
c00200c1:	56                   	push   esi
c00200c2:	52                   	push   edx
c00200c3:	50                   	push   eax
c00200c4:	e8 8b f9 ff ff       	call   c001fa54 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00200c9:	83 c4 1c             	add    esp,0x1c
c00200cc:	52                   	push   edx
c00200cd:	50                   	push   eax
c00200ce:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200d2:	2d c0 00 00 00       	sub    eax,0xc0
c00200d7:	e9 9e 01 00 00       	jmp    c002027a <Vm::x87Handler(regs*)+0x65f>
c00200dc:	8d 50 20             	lea    edx,[eax+0x20]
c00200df:	80 fa 07             	cmp    dl,0x7
c00200e2:	77 3a                	ja     c002011e <Vm::x87Handler(regs*)+0x503>
c00200e4:	83 ec 0c             	sub    esp,0xc
c00200e7:	2d e0 00 00 00       	sub    eax,0xe0
c00200ec:	50                   	push   eax
c00200ed:	e8 ec f9 ff ff       	call   c001fade <Vm::fpuGetReg(int)>
c00200f2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00200f9:	89 c6                	mov    esi,eax
c00200fb:	89 d7                	mov    edi,edx
c00200fd:	e8 dc f9 ff ff       	call   c001fade <Vm::fpuGetReg(int)>
c0020102:	57                   	push   edi
c0020103:	56                   	push   esi
c0020104:	52                   	push   edx
c0020105:	50                   	push   eax
c0020106:	e8 73 f9 ff ff       	call   c001fa7e <Vm::fpuSub(unsigned long long, unsigned long long)>
c002010b:	83 c4 1c             	add    esp,0x1c
c002010e:	52                   	push   edx
c002010f:	50                   	push   eax
c0020110:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020114:	2d e0 00 00 00       	sub    eax,0xe0
c0020119:	e9 5c 01 00 00       	jmp    c002027a <Vm::x87Handler(regs*)+0x65f>
c002011e:	8d 50 18             	lea    edx,[eax+0x18]
c0020121:	80 fa 07             	cmp    dl,0x7
c0020124:	77 3b                	ja     c0020161 <Vm::x87Handler(regs*)+0x546>
c0020126:	83 ec 0c             	sub    esp,0xc
c0020129:	6a 00                	push   0x0
c002012b:	e8 ae f9 ff ff       	call   c001fade <Vm::fpuGetReg(int)>
c0020130:	89 c6                	mov    esi,eax
c0020132:	89 d7                	mov    edi,edx
c0020134:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020138:	2d e8 00 00 00       	sub    eax,0xe8
c002013d:	89 04 24             	mov    DWORD PTR [esp],eax
c0020140:	e8 99 f9 ff ff       	call   c001fade <Vm::fpuGetReg(int)>
c0020145:	57                   	push   edi
c0020146:	56                   	push   esi
c0020147:	52                   	push   edx
c0020148:	50                   	push   eax
c0020149:	e8 30 f9 ff ff       	call   c001fa7e <Vm::fpuSub(unsigned long long, unsigned long long)>
c002014e:	83 c4 1c             	add    esp,0x1c
c0020151:	52                   	push   edx
c0020152:	50                   	push   eax
c0020153:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020157:	2d e8 00 00 00       	sub    eax,0xe8
c002015c:	e9 19 01 00 00       	jmp    c002027a <Vm::x87Handler(regs*)+0x65f>
c0020161:	8d 50 38             	lea    edx,[eax+0x38]
c0020164:	80 fa 07             	cmp    dl,0x7
c0020167:	77 37                	ja     c00201a0 <Vm::x87Handler(regs*)+0x585>
c0020169:	83 ec 0c             	sub    esp,0xc
c002016c:	2d c8 00 00 00       	sub    eax,0xc8
c0020171:	50                   	push   eax
c0020172:	e8 67 f9 ff ff       	call   c001fade <Vm::fpuGetReg(int)>
c0020177:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002017e:	89 c6                	mov    esi,eax
c0020180:	89 d7                	mov    edi,edx
c0020182:	e8 57 f9 ff ff       	call   c001fade <Vm::fpuGetReg(int)>
c0020187:	57                   	push   edi
c0020188:	56                   	push   esi
c0020189:	52                   	push   edx
c002018a:	50                   	push   eax
c002018b:	e8 fd f8 ff ff       	call   c001fa8d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020190:	83 c4 1c             	add    esp,0x1c
c0020193:	52                   	push   edx
c0020194:	50                   	push   eax
c0020195:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020199:	2d c8 00 00 00       	sub    eax,0xc8
c002019e:	eb 7d                	jmp    c002021d <Vm::x87Handler(regs*)+0x602>
c00201a0:	3c f7                	cmp    al,0xf7
c00201a2:	76 38                	jbe    c00201dc <Vm::x87Handler(regs*)+0x5c1>
c00201a4:	83 ec 0c             	sub    esp,0xc
c00201a7:	6a 00                	push   0x0
c00201a9:	e8 30 f9 ff ff       	call   c001fade <Vm::fpuGetReg(int)>
c00201ae:	89 c6                	mov    esi,eax
c00201b0:	89 d7                	mov    edi,edx
c00201b2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00201b6:	2d f8 00 00 00       	sub    eax,0xf8
c00201bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00201be:	e8 1b f9 ff ff       	call   c001fade <Vm::fpuGetReg(int)>
c00201c3:	57                   	push   edi
c00201c4:	56                   	push   esi
c00201c5:	52                   	push   edx
c00201c6:	50                   	push   eax
c00201c7:	e8 e0 f8 ff ff       	call   c001faac <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00201cc:	83 c4 1c             	add    esp,0x1c
c00201cf:	52                   	push   edx
c00201d0:	50                   	push   eax
c00201d1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00201d5:	2d f8 00 00 00       	sub    eax,0xf8
c00201da:	eb 41                	jmp    c002021d <Vm::x87Handler(regs*)+0x602>
c00201dc:	8d 50 10             	lea    edx,[eax+0x10]
c00201df:	80 fa 07             	cmp    dl,0x7
c00201e2:	0f 87 5a 01 00 00    	ja     c0020342 <Vm::x87Handler(regs*)+0x727>
c00201e8:	83 ec 0c             	sub    esp,0xc
c00201eb:	2d f0 00 00 00       	sub    eax,0xf0
c00201f0:	50                   	push   eax
c00201f1:	e8 e8 f8 ff ff       	call   c001fade <Vm::fpuGetReg(int)>
c00201f6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201fd:	89 c6                	mov    esi,eax
c00201ff:	89 d7                	mov    edi,edx
c0020201:	e8 d8 f8 ff ff       	call   c001fade <Vm::fpuGetReg(int)>
c0020206:	57                   	push   edi
c0020207:	56                   	push   esi
c0020208:	52                   	push   edx
c0020209:	50                   	push   eax
c002020a:	e8 9d f8 ff ff       	call   c001faac <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002020f:	83 c4 1c             	add    esp,0x1c
c0020212:	52                   	push   edx
c0020213:	50                   	push   eax
c0020214:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020218:	2d f0 00 00 00       	sub    eax,0xf0
c002021d:	50                   	push   eax
c002021e:	e8 fe f8 ff ff       	call   c001fb21 <Vm::fpuSetReg(int, unsigned long long)>
c0020223:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020227:	e8 9d f9 ff ff       	call   c001fbc9 <Vm::fpuPop()>
c002022c:	e9 5e fa ff ff       	jmp    c001fc8f <Vm::x87Handler(regs*)+0x74>
c0020231:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020235:	8d 50 30             	lea    edx,[eax+0x30]
c0020238:	80 fa 07             	cmp    dl,0x7
c002023b:	77 1d                	ja     c002025a <Vm::x87Handler(regs*)+0x63f>
c002023d:	83 ec 0c             	sub    esp,0xc
c0020240:	6a 00                	push   0x0
c0020242:	e8 97 f8 ff ff       	call   c001fade <Vm::fpuGetReg(int)>
c0020247:	83 c4 0c             	add    esp,0xc
c002024a:	52                   	push   edx
c002024b:	50                   	push   eax
c002024c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020250:	2d d0 00 00 00       	sub    eax,0xd0
c0020255:	e9 f3 fd ff ff       	jmp    c002004d <Vm::x87Handler(regs*)+0x432>
c002025a:	8d 50 28             	lea    edx,[eax+0x28]
c002025d:	80 fa 07             	cmp    dl,0x7
c0020260:	77 28                	ja     c002028a <Vm::x87Handler(regs*)+0x66f>
c0020262:	83 ec 0c             	sub    esp,0xc
c0020265:	6a 00                	push   0x0
c0020267:	e8 72 f8 ff ff       	call   c001fade <Vm::fpuGetReg(int)>
c002026c:	83 c4 0c             	add    esp,0xc
c002026f:	52                   	push   edx
c0020270:	50                   	push   eax
c0020271:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020275:	2d d8 00 00 00       	sub    eax,0xd8
c002027a:	50                   	push   eax
c002027b:	e8 a1 f8 ff ff       	call   c001fb21 <Vm::fpuSetReg(int, unsigned long long)>
c0020280:	e8 44 f9 ff ff       	call   c001fbc9 <Vm::fpuPop()>
c0020285:	e9 01 fa ff ff       	jmp    c001fc8b <Vm::x87Handler(regs*)+0x70>
c002028a:	8d 50 20             	lea    edx,[eax+0x20]
c002028d:	80 fa 07             	cmp    dl,0x7
c0020290:	77 30                	ja     c00202c2 <Vm::x87Handler(regs*)+0x6a7>
c0020292:	83 ec 0c             	sub    esp,0xc
c0020295:	2d e0 00 00 00       	sub    eax,0xe0
c002029a:	50                   	push   eax
c002029b:	e8 3e f8 ff ff       	call   c001fade <Vm::fpuGetReg(int)>
c00202a0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00202a7:	89 c6                	mov    esi,eax
c00202a9:	89 d7                	mov    edi,edx
c00202ab:	e8 2e f8 ff ff       	call   c001fade <Vm::fpuGetReg(int)>
c00202b0:	57                   	push   edi
c00202b1:	56                   	push   esi
c00202b2:	52                   	push   edx
c00202b3:	50                   	push   eax
c00202b4:	e8 48 f7 ff ff       	call   c001fa01 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00202b9:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00202bd:	e9 54 02 00 00       	jmp    c0020516 <Vm::x87Handler(regs*)+0x8fb>
c00202c2:	8d 50 18             	lea    edx,[eax+0x18]
c00202c5:	80 fa 07             	cmp    dl,0x7
c00202c8:	0f 87 43 fb ff ff    	ja     c001fe11 <Vm::x87Handler(regs*)+0x1f6>
c00202ce:	83 ec 0c             	sub    esp,0xc
c00202d1:	2d e8 00 00 00       	sub    eax,0xe8
c00202d6:	50                   	push   eax
c00202d7:	e8 02 f8 ff ff       	call   c001fade <Vm::fpuGetReg(int)>
c00202dc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00202e3:	89 c6                	mov    esi,eax
c00202e5:	89 d7                	mov    edi,edx
c00202e7:	e8 f2 f7 ff ff       	call   c001fade <Vm::fpuGetReg(int)>
c00202ec:	57                   	push   edi
c00202ed:	56                   	push   esi
c00202ee:	52                   	push   edx
c00202ef:	50                   	push   eax
c00202f0:	e8 0c f7 ff ff       	call   c001fa01 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00202f5:	83 c4 20             	add    esp,0x20
c00202f8:	e8 cc f8 ff ff       	call   c001fbc9 <Vm::fpuPop()>
c00202fd:	eb 62                	jmp    c0020361 <Vm::x87Handler(regs*)+0x746>
c00202ff:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c0020303:	0f 85 0f 01 00 00    	jne    c0020418 <Vm::x87Handler(regs*)+0x7fd>
c0020309:	83 ec 0c             	sub    esp,0xc
c002030c:	6a 01                	push   0x1
c002030e:	e8 cb f7 ff ff       	call   c001fade <Vm::fpuGetReg(int)>
c0020313:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002031a:	89 c6                	mov    esi,eax
c002031c:	89 d7                	mov    edi,edx
c002031e:	e8 bb f7 ff ff       	call   c001fade <Vm::fpuGetReg(int)>
c0020323:	57                   	push   edi
c0020324:	56                   	push   esi
c0020325:	52                   	push   edx
c0020326:	50                   	push   eax
c0020327:	e8 d5 f6 ff ff       	call   c001fa01 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002032c:	83 c4 20             	add    esp,0x20
c002032f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020333:	e8 91 f8 ff ff       	call   c001fbc9 <Vm::fpuPop()>
c0020338:	e8 8c f8 ff ff       	call   c001fbc9 <Vm::fpuPop()>
c002033d:	e9 50 f9 ff ff       	jmp    c001fc92 <Vm::x87Handler(regs*)+0x77>
c0020342:	3c d9                	cmp    al,0xd9
c0020344:	0f 85 b5 02 00 00    	jne    c00205ff <Vm::x87Handler(regs*)+0x9e4>
c002034a:	eb bd                	jmp    c0020309 <Vm::x87Handler(regs*)+0x6ee>
c002034c:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c0020350:	0f 85 ea 02 00 00    	jne    c0020640 <Vm::x87Handler(regs*)+0xa25>
c0020356:	0f b7 05 80 26 03 c0 	movzx  eax,WORD PTR ds:0xc0032680
c002035d:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c0020361:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020365:	e9 28 f9 ff ff       	jmp    c001fc92 <Vm::x87Handler(regs*)+0x77>
c002036a:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002036e:	84 d2                	test   dl,dl
c0020370:	75 0f                	jne    c0020381 <Vm::x87Handler(regs*)+0x766>
c0020372:	83 ec 0c             	sub    esp,0xc
c0020375:	ff 36                	push   DWORD PTR [esi]
c0020377:	e8 b1 f4 ff ff       	call   c001f82d <Vm::fpu32ToInternal(unsigned int)>
c002037c:	e9 2c 01 00 00       	jmp    c00204ad <Vm::x87Handler(regs*)+0x892>
c0020381:	80 fa 01             	cmp    dl,0x1
c0020384:	75 0f                	jne    c0020395 <Vm::x87Handler(regs*)+0x77a>
c0020386:	83 ec 0c             	sub    esp,0xc
c0020389:	ff 36                	push   DWORD PTR [esi]
c002038b:	e8 9d f4 ff ff       	call   c001f82d <Vm::fpu32ToInternal(unsigned int)>
c0020390:	e9 81 02 00 00       	jmp    c0020616 <Vm::x87Handler(regs*)+0x9fb>
c0020395:	80 fa 04             	cmp    dl,0x4
c0020398:	75 0f                	jne    c00203a9 <Vm::x87Handler(regs*)+0x78e>
c002039a:	83 ec 0c             	sub    esp,0xc
c002039d:	ff 36                	push   DWORD PTR [esi]
c002039f:	e8 89 f4 ff ff       	call   c001f82d <Vm::fpu32ToInternal(unsigned int)>
c00203a4:	e9 86 01 00 00       	jmp    c002052f <Vm::x87Handler(regs*)+0x914>
c00203a9:	80 fa 05             	cmp    dl,0x5
c00203ac:	75 1b                	jne    c00203c9 <Vm::x87Handler(regs*)+0x7ae>
c00203ae:	83 ec 0c             	sub    esp,0xc
c00203b1:	6a 00                	push   0x0
c00203b3:	e8 26 f7 ff ff       	call   c001fade <Vm::fpuGetReg(int)>
c00203b8:	89 c7                	mov    edi,eax
c00203ba:	89 d5                	mov    ebp,edx
c00203bc:	58                   	pop    eax
c00203bd:	ff 36                	push   DWORD PTR [esi]
c00203bf:	e8 69 f4 ff ff       	call   c001f82d <Vm::fpu32ToInternal(unsigned int)>
c00203c4:	e9 a3 01 00 00       	jmp    c002056c <Vm::x87Handler(regs*)+0x951>
c00203c9:	80 fa 06             	cmp    dl,0x6
c00203cc:	75 0f                	jne    c00203dd <Vm::x87Handler(regs*)+0x7c2>
c00203ce:	83 ec 0c             	sub    esp,0xc
c00203d1:	ff 36                	push   DWORD PTR [esi]
c00203d3:	e8 55 f4 ff ff       	call   c001f82d <Vm::fpu32ToInternal(unsigned int)>
c00203d8:	e9 ae 01 00 00       	jmp    c002058b <Vm::x87Handler(regs*)+0x970>
c00203dd:	31 c0                	xor    eax,eax
c00203df:	80 fa 07             	cmp    dl,0x7
c00203e2:	0f 85 94 02 00 00    	jne    c002067c <Vm::x87Handler(regs*)+0xa61>
c00203e8:	83 ec 0c             	sub    esp,0xc
c00203eb:	6a 00                	push   0x0
c00203ed:	e8 ec f6 ff ff       	call   c001fade <Vm::fpuGetReg(int)>
c00203f2:	89 c7                	mov    edi,eax
c00203f4:	89 d5                	mov    ebp,edx
c00203f6:	58                   	pop    eax
c00203f7:	ff 36                	push   DWORD PTR [esi]
c00203f9:	e8 2f f4 ff ff       	call   c001f82d <Vm::fpu32ToInternal(unsigned int)>
c00203fe:	e9 cb 01 00 00       	jmp    c00205ce <Vm::x87Handler(regs*)+0x9b3>
c0020403:	80 fa 03             	cmp    dl,0x3
c0020406:	0f 85 d3 01 00 00    	jne    c00205df <Vm::x87Handler(regs*)+0x9c4>
c002040c:	e8 b8 f7 ff ff       	call   c001fbc9 <Vm::fpuPop()>
c0020411:	51                   	push   ecx
c0020412:	51                   	push   ecx
c0020413:	e9 de 01 00 00       	jmp    c00205f6 <Vm::x87Handler(regs*)+0x9db>
c0020418:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002041c:	80 fa 01             	cmp    dl,0x1
c002041f:	75 09                	jne    c002042a <Vm::x87Handler(regs*)+0x80f>
c0020421:	57                   	push   edi
c0020422:	57                   	push   edi
c0020423:	8b 06                	mov    eax,DWORD PTR [esi]
c0020425:	e9 e3 01 00 00       	jmp    c002060d <Vm::x87Handler(regs*)+0x9f2>
c002042a:	80 fa 04             	cmp    dl,0x4
c002042d:	75 12                	jne    c0020441 <Vm::x87Handler(regs*)+0x826>
c002042f:	31 d2                	xor    edx,edx
c0020431:	51                   	push   ecx
c0020432:	51                   	push   ecx
c0020433:	8b 06                	mov    eax,DWORD PTR [esi]
c0020435:	52                   	push   edx
c0020436:	50                   	push   eax
c0020437:	e8 d0 f4 ff ff       	call   c001f90c <Vm::fpuLongToFloat(long long)>
c002043c:	e9 ee 00 00 00       	jmp    c002052f <Vm::x87Handler(regs*)+0x914>
c0020441:	31 c0                	xor    eax,eax
c0020443:	80 fa 07             	cmp    dl,0x7
c0020446:	0f 85 30 02 00 00    	jne    c002067c <Vm::x87Handler(regs*)+0xa61>
c002044c:	83 ec 0c             	sub    esp,0xc
c002044f:	6a 00                	push   0x0
c0020451:	e8 88 f6 ff ff       	call   c001fade <Vm::fpuGetReg(int)>
c0020456:	89 c7                	mov    edi,eax
c0020458:	89 d5                	mov    ebp,edx
c002045a:	58                   	pop    eax
c002045b:	8b 06                	mov    eax,DWORD PTR [esi]
c002045d:	5a                   	pop    edx
c002045e:	31 d2                	xor    edx,edx
c0020460:	52                   	push   edx
c0020461:	50                   	push   eax
c0020462:	e8 a5 f4 ff ff       	call   c001f90c <Vm::fpuLongToFloat(long long)>
c0020467:	e9 62 01 00 00       	jmp    c00205ce <Vm::x87Handler(regs*)+0x9b3>
c002046c:	84 d2                	test   dl,dl
c002046e:	75 0d                	jne    c002047d <Vm::x87Handler(regs*)+0x862>
c0020470:	31 d2                	xor    edx,edx
c0020472:	55                   	push   ebp
c0020473:	55                   	push   ebp
c0020474:	8b 06                	mov    eax,DWORD PTR [esi]
c0020476:	52                   	push   edx
c0020477:	50                   	push   eax
c0020478:	e9 d3 01 00 00       	jmp    c0020650 <Vm::x87Handler(regs*)+0xa35>
c002047d:	31 c0                	xor    eax,eax
c002047f:	80 fa 02             	cmp    dl,0x2
c0020482:	0f 85 f4 01 00 00    	jne    c002067c <Vm::x87Handler(regs*)+0xa61>
c0020488:	83 ec 0c             	sub    esp,0xc
c002048b:	6a 00                	push   0x0
c002048d:	e8 4c f6 ff ff       	call   c001fade <Vm::fpuGetReg(int)>
c0020492:	59                   	pop    ecx
c0020493:	5f                   	pop    edi
c0020494:	e9 6a f9 ff ff       	jmp    c001fe03 <Vm::x87Handler(regs*)+0x1e8>
c0020499:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002049d:	84 d2                	test   dl,dl
c002049f:	75 2a                	jne    c00204cb <Vm::x87Handler(regs*)+0x8b0>
c00204a1:	50                   	push   eax
c00204a2:	50                   	push   eax
c00204a3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00204a6:	ff 36                	push   DWORD PTR [esi]
c00204a8:	e8 c5 f3 ff ff       	call   c001f872 <Vm::fpu64ToInternal(unsigned long long)>
c00204ad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00204b4:	89 c6                	mov    esi,eax
c00204b6:	89 d7                	mov    edi,edx
c00204b8:	e8 21 f6 ff ff       	call   c001fade <Vm::fpuGetReg(int)>
c00204bd:	57                   	push   edi
c00204be:	56                   	push   esi
c00204bf:	52                   	push   edx
c00204c0:	50                   	push   eax
c00204c1:	e8 8e f5 ff ff       	call   c001fa54 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00204c6:	e9 64 01 00 00       	jmp    c002062f <Vm::x87Handler(regs*)+0xa14>
c00204cb:	80 fa 01             	cmp    dl,0x1
c00204ce:	75 11                	jne    c00204e1 <Vm::x87Handler(regs*)+0x8c6>
c00204d0:	50                   	push   eax
c00204d1:	50                   	push   eax
c00204d2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00204d5:	ff 36                	push   DWORD PTR [esi]
c00204d7:	e8 96 f3 ff ff       	call   c001f872 <Vm::fpu64ToInternal(unsigned long long)>
c00204dc:	e9 35 01 00 00       	jmp    c0020616 <Vm::x87Handler(regs*)+0x9fb>
c00204e1:	80 fa 02             	cmp    dl,0x2
c00204e4:	0f 85 54 f9 ff ff    	jne    c001fe3e <Vm::x87Handler(regs*)+0x223>
c00204ea:	55                   	push   ebp
c00204eb:	55                   	push   ebp
c00204ec:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00204ef:	ff 36                	push   DWORD PTR [esi]
c00204f1:	e8 7c f3 ff ff       	call   c001f872 <Vm::fpu64ToInternal(unsigned long long)>
c00204f6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00204fd:	89 c6                	mov    esi,eax
c00204ff:	89 d7                	mov    edi,edx
c0020501:	e8 d8 f5 ff ff       	call   c001fade <Vm::fpuGetReg(int)>
c0020506:	57                   	push   edi
c0020507:	56                   	push   esi
c0020508:	52                   	push   edx
c0020509:	50                   	push   eax
c002050a:	e8 f2 f4 ff ff       	call   c001fa01 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002050f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020513:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020516:	83 c4 20             	add    esp,0x20
c0020519:	e9 74 f7 ff ff       	jmp    c001fc92 <Vm::x87Handler(regs*)+0x77>
c002051e:	80 fa 04             	cmp    dl,0x4
c0020521:	75 2a                	jne    c002054d <Vm::x87Handler(regs*)+0x932>
c0020523:	51                   	push   ecx
c0020524:	51                   	push   ecx
c0020525:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020528:	ff 36                	push   DWORD PTR [esi]
c002052a:	e8 43 f3 ff ff       	call   c001f872 <Vm::fpu64ToInternal(unsigned long long)>
c002052f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020536:	89 c6                	mov    esi,eax
c0020538:	89 d7                	mov    edi,edx
c002053a:	e8 9f f5 ff ff       	call   c001fade <Vm::fpuGetReg(int)>
c002053f:	57                   	push   edi
c0020540:	56                   	push   esi
c0020541:	52                   	push   edx
c0020542:	50                   	push   eax
c0020543:	e8 36 f5 ff ff       	call   c001fa7e <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020548:	e9 e2 00 00 00       	jmp    c002062f <Vm::x87Handler(regs*)+0xa14>
c002054d:	80 fa 05             	cmp    dl,0x5
c0020550:	75 28                	jne    c002057a <Vm::x87Handler(regs*)+0x95f>
c0020552:	83 ec 0c             	sub    esp,0xc
c0020555:	6a 00                	push   0x0
c0020557:	e8 82 f5 ff ff       	call   c001fade <Vm::fpuGetReg(int)>
c002055c:	89 c7                	mov    edi,eax
c002055e:	89 d5                	mov    ebp,edx
c0020560:	58                   	pop    eax
c0020561:	5a                   	pop    edx
c0020562:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020565:	ff 36                	push   DWORD PTR [esi]
c0020567:	e8 06 f3 ff ff       	call   c001f872 <Vm::fpu64ToInternal(unsigned long long)>
c002056c:	83 c4 10             	add    esp,0x10
c002056f:	55                   	push   ebp
c0020570:	57                   	push   edi
c0020571:	52                   	push   edx
c0020572:	50                   	push   eax
c0020573:	e8 06 f5 ff ff       	call   c001fa7e <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020578:	eb 60                	jmp    c00205da <Vm::x87Handler(regs*)+0x9bf>
c002057a:	80 fa 06             	cmp    dl,0x6
c002057d:	75 2a                	jne    c00205a9 <Vm::x87Handler(regs*)+0x98e>
c002057f:	51                   	push   ecx
c0020580:	51                   	push   ecx
c0020581:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020584:	ff 36                	push   DWORD PTR [esi]
c0020586:	e8 e7 f2 ff ff       	call   c001f872 <Vm::fpu64ToInternal(unsigned long long)>
c002058b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020592:	89 c6                	mov    esi,eax
c0020594:	89 d7                	mov    edi,edx
c0020596:	e8 43 f5 ff ff       	call   c001fade <Vm::fpuGetReg(int)>
c002059b:	57                   	push   edi
c002059c:	56                   	push   esi
c002059d:	52                   	push   edx
c002059e:	50                   	push   eax
c002059f:	e8 08 f5 ff ff       	call   c001faac <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00205a4:	e9 86 00 00 00       	jmp    c002062f <Vm::x87Handler(regs*)+0xa14>
c00205a9:	31 c0                	xor    eax,eax
c00205ab:	80 fa 07             	cmp    dl,0x7
c00205ae:	0f 85 c8 00 00 00    	jne    c002067c <Vm::x87Handler(regs*)+0xa61>
c00205b4:	83 ec 0c             	sub    esp,0xc
c00205b7:	6a 00                	push   0x0
c00205b9:	e8 20 f5 ff ff       	call   c001fade <Vm::fpuGetReg(int)>
c00205be:	89 c7                	mov    edi,eax
c00205c0:	89 d5                	mov    ebp,edx
c00205c2:	58                   	pop    eax
c00205c3:	5a                   	pop    edx
c00205c4:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00205c7:	ff 36                	push   DWORD PTR [esi]
c00205c9:	e8 a4 f2 ff ff       	call   c001f872 <Vm::fpu64ToInternal(unsigned long long)>
c00205ce:	83 c4 10             	add    esp,0x10
c00205d1:	55                   	push   ebp
c00205d2:	57                   	push   edi
c00205d3:	52                   	push   edx
c00205d4:	50                   	push   eax
c00205d5:	e8 d2 f4 ff ff       	call   c001faac <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00205da:	83 c4 0c             	add    esp,0xc
c00205dd:	eb 53                	jmp    c0020632 <Vm::x87Handler(regs*)+0xa17>
c00205df:	31 c0                	xor    eax,eax
c00205e1:	80 fa 02             	cmp    dl,0x2
c00205e4:	0f 85 92 00 00 00    	jne    c002067c <Vm::x87Handler(regs*)+0xa61>
c00205ea:	83 ec 0c             	sub    esp,0xc
c00205ed:	6a 00                	push   0x0
c00205ef:	e8 ea f4 ff ff       	call   c001fade <Vm::fpuGetReg(int)>
c00205f4:	59                   	pop    ecx
c00205f5:	5f                   	pop    edi
c00205f6:	52                   	push   edx
c00205f7:	50                   	push   eax
c00205f8:	e8 27 f2 ff ff       	call   c001f824 <Vm::fpuInternalTo64(unsigned long long)>
c00205fd:	eb 70                	jmp    c002066f <Vm::x87Handler(regs*)+0xa54>
c00205ff:	31 c0                	xor    eax,eax
c0020601:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020606:	75 74                	jne    c002067c <Vm::x87Handler(regs*)+0xa61>
c0020608:	50                   	push   eax
c0020609:	50                   	push   eax
c002060a:	0f b7 06             	movzx  eax,WORD PTR [esi]
c002060d:	31 d2                	xor    edx,edx
c002060f:	52                   	push   edx
c0020610:	50                   	push   eax
c0020611:	e8 f6 f2 ff ff       	call   c001f90c <Vm::fpuLongToFloat(long long)>
c0020616:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002061d:	89 c6                	mov    esi,eax
c002061f:	89 d7                	mov    edi,edx
c0020621:	e8 b8 f4 ff ff       	call   c001fade <Vm::fpuGetReg(int)>
c0020626:	57                   	push   edi
c0020627:	56                   	push   esi
c0020628:	52                   	push   edx
c0020629:	50                   	push   eax
c002062a:	e8 5e f4 ff ff       	call   c001fa8d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c002062f:	83 c4 1c             	add    esp,0x1c
c0020632:	52                   	push   edx
c0020633:	50                   	push   eax
c0020634:	6a 00                	push   0x0
c0020636:	e8 e6 f4 ff ff       	call   c001fb21 <Vm::fpuSetReg(int, unsigned long long)>
c002063b:	e9 f2 f7 ff ff       	jmp    c001fe32 <Vm::x87Handler(regs*)+0x217>
c0020640:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020644:	80 fa 05             	cmp    dl,0x5
c0020647:	75 11                	jne    c002065a <Vm::x87Handler(regs*)+0xa3f>
c0020649:	55                   	push   ebp
c002064a:	55                   	push   ebp
c002064b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002064e:	ff 36                	push   DWORD PTR [esi]
c0020650:	e8 81 f2 ff ff       	call   c001f8d6 <Vm::fpuULongToFloat(unsigned long long)>
c0020655:	e9 cf f7 ff ff       	jmp    c001fe29 <Vm::x87Handler(regs*)+0x20e>
c002065a:	31 c0                	xor    eax,eax
c002065c:	80 fa 07             	cmp    dl,0x7
c002065f:	75 1b                	jne    c002067c <Vm::x87Handler(regs*)+0xa61>
c0020661:	e8 63 f5 ff ff       	call   c001fbc9 <Vm::fpuPop()>
c0020666:	51                   	push   ecx
c0020667:	51                   	push   ecx
c0020668:	52                   	push   edx
c0020669:	50                   	push   eax
c002066a:	e8 0c f2 ff ff       	call   c001f87b <Vm::fpuFloatToLong(unsigned long long)>
c002066f:	83 c4 10             	add    esp,0x10
c0020672:	89 06                	mov    DWORD PTR [esi],eax
c0020674:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0020677:	e9 f8 f7 ff ff       	jmp    c001fe74 <Vm::x87Handler(regs*)+0x259>
c002067c:	83 c4 1c             	add    esp,0x1c
c002067f:	5b                   	pop    ebx
c0020680:	5e                   	pop    esi
c0020681:	5f                   	pop    edi
c0020682:	5d                   	pop    ebp
c0020683:	c3                   	ret    

c0020684 <__static_initialization_and_destruction_0(int, int)>:
c0020684:	83 ec 0c             	sub    esp,0xc
c0020687:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c002068c:	75 1a                	jne    c00206a8 <__static_initialization_and_destruction_0(int, int)+0x24>
c002068e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0020696:	75 10                	jne    c00206a8 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020698:	83 ec 0c             	sub    esp,0xc
c002069b:	68 80 26 03 c0       	push   0xc0032680
c00206a0:	e8 37 90 00 00       	call   c00296dc <Vm::_FPUState::_FPUState()>
c00206a5:	83 c4 10             	add    esp,0x10
c00206a8:	90                   	nop
c00206a9:	83 c4 0c             	add    esp,0xc
c00206ac:	c3                   	ret    

c00206ad <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c00206ad:	83 ec 0c             	sub    esp,0xc
c00206b0:	83 ec 08             	sub    esp,0x8
c00206b3:	68 ff ff 00 00       	push   0xffff
c00206b8:	6a 01                	push   0x1
c00206ba:	e8 c5 ff ff ff       	call   c0020684 <__static_initialization_and_destruction_0(int, int)>
c00206bf:	83 c4 10             	add    esp,0x10
c00206c2:	83 c4 0c             	add    esp,0xc
c00206c5:	c3                   	ret    

c00206c6 <FAT::getName()>:
c00206c6:	b8 88 d1 02 c0       	mov    eax,0xc002d188
c00206cb:	c3                   	ret    

c00206cc <FAT::tell(void*, unsigned long long*)>:
c00206cc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00206d1:	75 06                	jne    c00206d9 <FAT::tell(void*, unsigned long long*)+0xd>
c00206d3:	b8 04 00 00 00       	mov    eax,0x4
c00206d8:	c3                   	ret    
c00206d9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00206de:	75 06                	jne    c00206e6 <FAT::tell(void*, unsigned long long*)+0x1a>
c00206e0:	b8 04 00 00 00       	mov    eax,0x4
c00206e5:	c3                   	ret    
c00206e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00206ea:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c00206ed:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00206f0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00206f4:	89 01                	mov    DWORD PTR [ecx],eax
c00206f6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00206f9:	b8 00 00 00 00       	mov    eax,0x0
c00206fe:	c3                   	ret    
c00206ff:	90                   	nop

c0020700 <FAT::stat(void*, unsigned long long*)>:
c0020700:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020705:	75 06                	jne    c002070d <FAT::stat(void*, unsigned long long*)+0xd>
c0020707:	b8 04 00 00 00       	mov    eax,0x4
c002070c:	c3                   	ret    
c002070d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020712:	75 06                	jne    c002071a <FAT::stat(void*, unsigned long long*)+0x1a>
c0020714:	b8 04 00 00 00       	mov    eax,0x4
c0020719:	c3                   	ret    
c002071a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002071e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020721:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020724:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020728:	89 01                	mov    DWORD PTR [ecx],eax
c002072a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002072d:	b8 00 00 00 00       	mov    eax,0x0
c0020732:	c3                   	ret    
c0020733:	90                   	nop

c0020734 <FAT::~FAT()>:
c0020734:	83 ec 0c             	sub    esp,0xc
c0020737:	ba 18 d2 02 c0       	mov    edx,0xc002d218
c002073c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020740:	89 10                	mov    DWORD PTR [eax],edx
c0020742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020746:	83 ec 0c             	sub    esp,0xc
c0020749:	50                   	push   eax
c002074a:	e8 4b 25 ff ff       	call   c0012c9a <Filesystem::~Filesystem()>
c002074f:	83 c4 10             	add    esp,0x10
c0020752:	90                   	nop
c0020753:	83 c4 0c             	add    esp,0xc
c0020756:	c3                   	ret    
c0020757:	90                   	nop

c0020758 <FAT::~FAT()>:
c0020758:	83 ec 0c             	sub    esp,0xc
c002075b:	83 ec 0c             	sub    esp,0xc
c002075e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020762:	e8 cd ff ff ff       	call   c0020734 <FAT::~FAT()>
c0020767:	83 c4 10             	add    esp,0x10
c002076a:	83 ec 08             	sub    esp,0x8
c002076d:	6a 08                	push   0x8
c002076f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020773:	e8 13 21 ff ff       	call   c001288b <operator delete(void*, unsigned long)>
c0020778:	83 c4 10             	add    esp,0x10
c002077b:	83 c4 0c             	add    esp,0xc
c002077e:	c3                   	ret    
c002077f:	90                   	nop

c0020780 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0020780:	83 ec 1c             	sub    esp,0x1c
c0020783:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c002078a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c002078f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020793:	8b 04 85 00 27 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd900]
c002079a:	83 f8 ff             	cmp    eax,0xffffffff
c002079d:	75 34                	jne    c00207d3 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c002079f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00207a3:	88 c2                	mov    dl,al
c00207a5:	a1 e0 26 03 c0       	mov    eax,ds:0xc00326e0
c00207aa:	01 d0                	add    eax,edx
c00207ac:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00207b0:	8b 15 e0 26 03 c0    	mov    edx,DWORD PTR ds:0xc00326e0
c00207b6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00207ba:	89 14 85 00 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd900],edx
c00207c1:	a1 e0 26 03 c0       	mov    eax,ds:0xc00326e0
c00207c6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00207ca:	89 14 85 80 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd880],edx
c00207d1:	eb 17                	jmp    c00207ea <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c00207d3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00207d7:	88 c2                	mov    dl,al
c00207d9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00207dd:	8b 04 85 00 27 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd900]
c00207e4:	01 d0                	add    eax,edx
c00207e6:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00207ea:	83 ec 04             	sub    esp,0x4
c00207ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00207f1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00207f5:	8d 44 24 15          	lea    eax,[esp+0x15]
c00207f9:	50                   	push   eax
c00207fa:	e8 ff 64 fe ff       	call   c0006cfe <f_getlabel>
c00207ff:	83 c4 10             	add    esp,0x10
c0020802:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020806:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002080b:	75 07                	jne    c0020814 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c002080d:	b8 00 00 00 00       	mov    eax,0x0
c0020812:	eb 05                	jmp    c0020819 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020814:	b8 01 00 00 00       	mov    eax,0x1
c0020819:	83 c4 1c             	add    esp,0x1c
c002081c:	c3                   	ret    
c002081d:	90                   	nop

c002081e <FAT::setlabel(LogicalDisk*, int, char*)>:
c002081e:	57                   	push   edi
c002081f:	83 ec 58             	sub    esp,0x58
c0020822:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c002082a:	8d 54 24 10          	lea    edx,[esp+0x10]
c002082e:	b9 0f 00 00 00       	mov    ecx,0xf
c0020833:	b8 00 00 00 00       	mov    eax,0x0
c0020838:	fc                   	cld    
c0020839:	89 d7                	mov    edi,edx
c002083b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002083d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020841:	8b 04 85 00 27 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd900]
c0020848:	83 f8 ff             	cmp    eax,0xffffffff
c002084b:	75 34                	jne    c0020881 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c002084d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020851:	88 c2                	mov    dl,al
c0020853:	a1 e0 26 03 c0       	mov    eax,ds:0xc00326e0
c0020858:	01 d0                	add    eax,edx
c002085a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002085e:	8b 15 e0 26 03 c0    	mov    edx,DWORD PTR ds:0xc00326e0
c0020864:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020868:	89 14 85 00 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd900],edx
c002086f:	a1 e0 26 03 c0       	mov    eax,ds:0xc00326e0
c0020874:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020878:	89 14 85 80 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd880],edx
c002087f:	eb 17                	jmp    c0020898 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0020881:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020885:	88 c2                	mov    dl,al
c0020887:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002088b:	8b 04 85 00 27 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd900]
c0020892:	01 d0                	add    eax,edx
c0020894:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020898:	83 ec 08             	sub    esp,0x8
c002089b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c002089f:	8d 44 24 18          	lea    eax,[esp+0x18]
c00208a3:	50                   	push   eax
c00208a4:	e8 a3 00 fe ff       	call   c000094c <strcat>
c00208a9:	83 c4 10             	add    esp,0x10
c00208ac:	83 ec 0c             	sub    esp,0xc
c00208af:	8d 44 24 18          	lea    eax,[esp+0x18]
c00208b3:	50                   	push   eax
c00208b4:	e8 33 66 fe ff       	call   c0006eec <f_setlabel>
c00208b9:	83 c4 10             	add    esp,0x10
c00208bc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00208c0:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00208c5:	75 07                	jne    c00208ce <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c00208c7:	b8 00 00 00 00       	mov    eax,0x0
c00208cc:	eb 05                	jmp    c00208d3 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c00208ce:	b8 01 00 00 00       	mov    eax,0x1
c00208d3:	83 c4 58             	add    esp,0x58
c00208d6:	5f                   	pop    edi
c00208d7:	c3                   	ret    

c00208d8 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00208d8:	83 ec 2c             	sub    esp,0x2c
c00208db:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00208e3:	83 ec 08             	sub    esp,0x8
c00208e6:	68 ac d1 02 c0       	push   0xc002d1ac
c00208eb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00208ef:	e8 a4 ff fd ff       	call   c0000898 <strcmp>
c00208f4:	83 c4 10             	add    esp,0x10
c00208f7:	85 c0                	test   eax,eax
c00208f9:	0f 94 c0             	sete   al
c00208fc:	84 c0                	test   al,al
c00208fe:	74 0d                	je     c002090d <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020900:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020908:	e9 a6 00 00 00       	jmp    c00209b3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002090d:	83 ec 08             	sub    esp,0x8
c0020910:	68 9e d1 02 c0       	push   0xc002d19e
c0020915:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020919:	e8 7a ff fd ff       	call   c0000898 <strcmp>
c002091e:	83 c4 10             	add    esp,0x10
c0020921:	85 c0                	test   eax,eax
c0020923:	0f 94 c0             	sete   al
c0020926:	84 c0                	test   al,al
c0020928:	74 0a                	je     c0020934 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c002092a:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020932:	eb 7f                	jmp    c00209b3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020934:	83 ec 08             	sub    esp,0x8
c0020937:	68 a4 d1 02 c0       	push   0xc002d1a4
c002093c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020940:	e8 53 ff fd ff       	call   c0000898 <strcmp>
c0020945:	83 c4 10             	add    esp,0x10
c0020948:	85 c0                	test   eax,eax
c002094a:	0f 94 c0             	sete   al
c002094d:	84 c0                	test   al,al
c002094f:	74 0a                	je     c002095b <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0020951:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020959:	eb 58                	jmp    c00209b3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002095b:	83 ec 08             	sub    esp,0x8
c002095e:	68 4c 9e 02 c0       	push   0xc0029e4c
c0020963:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020967:	e8 2c ff fd ff       	call   c0000898 <strcmp>
c002096c:	83 c4 10             	add    esp,0x10
c002096f:	85 c0                	test   eax,eax
c0020971:	0f 94 c0             	sete   al
c0020974:	84 c0                	test   al,al
c0020976:	74 0a                	je     c0020982 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0020978:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0020980:	eb 31                	jmp    c00209b3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020982:	83 ec 08             	sub    esp,0x8
c0020985:	68 aa d1 02 c0       	push   0xc002d1aa
c002098a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002098e:	e8 05 ff fd ff       	call   c0000898 <strcmp>
c0020993:	83 c4 10             	add    esp,0x10
c0020996:	85 c0                	test   eax,eax
c0020998:	0f 94 c0             	sete   al
c002099b:	84 c0                	test   al,al
c002099d:	74 0a                	je     c00209a9 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c002099f:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00209a7:	eb 0a                	jmp    c00209b3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00209a9:	b8 08 00 00 00       	mov    eax,0x8
c00209ae:	e9 04 01 00 00       	jmp    c0020ab7 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00209b3:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00209ba:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00209bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00209c3:	8b 04 85 00 27 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd900]
c00209ca:	83 f8 ff             	cmp    eax,0xffffffff
c00209cd:	75 34                	jne    c0020a03 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c00209cf:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00209d3:	88 c2                	mov    dl,al
c00209d5:	a1 e0 26 03 c0       	mov    eax,ds:0xc00326e0
c00209da:	01 d0                	add    eax,edx
c00209dc:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00209e0:	8b 15 e0 26 03 c0    	mov    edx,DWORD PTR ds:0xc00326e0
c00209e6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00209ea:	89 14 85 00 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd900],edx
c00209f1:	a1 e0 26 03 c0       	mov    eax,ds:0xc00326e0
c00209f6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00209fa:	89 14 85 80 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd880],edx
c0020a01:	eb 17                	jmp    c0020a1a <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020a03:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020a07:	88 c2                	mov    dl,al
c0020a09:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020a0d:	8b 04 85 00 27 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd900]
c0020a14:	01 d0                	add    eax,edx
c0020a16:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020a1a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020a1e:	88 04 24             	mov    BYTE PTR [esp],al
c0020a21:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020a25:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020a29:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020a31:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020a36:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020a3e:	83 ec 0c             	sub    esp,0xc
c0020a41:	68 00 20 00 00       	push   0x2000
c0020a46:	e8 41 ee fe ff       	call   c000f88c <malloc>
c0020a4b:	83 c4 10             	add    esp,0x10
c0020a4e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020a52:	68 00 20 00 00       	push   0x2000
c0020a57:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020a5b:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020a5f:	50                   	push   eax
c0020a60:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020a64:	50                   	push   eax
c0020a65:	e8 cd 68 fe ff       	call   c0007337 <f_mkfs>
c0020a6a:	83 c4 10             	add    esp,0x10
c0020a6d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020a71:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020a76:	75 07                	jne    c0020a7f <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020a78:	b8 00 00 00 00       	mov    eax,0x0
c0020a7d:	eb 38                	jmp    c0020ab7 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020a7f:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020a84:	75 17                	jne    c0020a9d <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0020a86:	83 ec 0c             	sub    esp,0xc
c0020a89:	68 e8 d1 02 c0       	push   0xc002d1e8
c0020a8e:	e8 d8 1e ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0020a93:	83 c4 10             	add    esp,0x10
c0020a96:	b8 09 00 00 00       	mov    eax,0x9
c0020a9b:	eb 1a                	jmp    c0020ab7 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020a9d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020aa1:	83 ec 08             	sub    esp,0x8
c0020aa4:	50                   	push   eax
c0020aa5:	68 b0 d1 02 c0       	push   0xc002d1b0
c0020aaa:	e8 bc 1e ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0020aaf:	83 c4 10             	add    esp,0x10
c0020ab2:	b8 01 00 00 00       	mov    eax,0x1
c0020ab7:	83 c4 2c             	add    esp,0x2c
c0020aba:	c3                   	ret    
c0020abb:	90                   	nop

c0020abc <FAT::tryMount(LogicalDisk*, int)>:
c0020abc:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020ac2:	a1 e0 26 03 c0       	mov    eax,ds:0xc00326e0
c0020ac7:	83 f8 14             	cmp    eax,0x14
c0020aca:	75 17                	jne    c0020ae3 <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020acc:	83 ec 0c             	sub    esp,0xc
c0020acf:	68 c2 d1 02 c0       	push   0xc002d1c2
c0020ad4:	e8 c8 98 ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c0020ad9:	83 c4 10             	add    esp,0x10
c0020adc:	b0 00                	mov    al,0x0
c0020ade:	e9 d7 01 00 00       	jmp    c0020cba <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020ae3:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020aea:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020af0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020af6:	3d 00 02 00 00       	cmp    eax,0x200
c0020afb:	74 07                	je     c0020b04 <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020afd:	b0 00                	mov    al,0x0
c0020aff:	e9 b6 01 00 00       	jmp    c0020cba <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020b04:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020b0c:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020b13:	8b 04 85 00 27 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd900]
c0020b1a:	83 f8 ff             	cmp    eax,0xffffffff
c0020b1d:	74 07                	je     c0020b26 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020b1f:	b0 01                	mov    al,0x1
c0020b21:	e9 94 01 00 00       	jmp    c0020cba <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020b26:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020b30:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020b38:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020b3f:	88 c2                	mov    dl,al
c0020b41:	a1 e0 26 03 c0       	mov    eax,ds:0xc00326e0
c0020b46:	01 d0                	add    eax,edx
c0020b48:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020b4f:	8b 15 e0 26 03 c0    	mov    edx,DWORD PTR ds:0xc00326e0
c0020b55:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020b5c:	89 14 85 00 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd900],edx
c0020b63:	a1 e0 26 03 c0       	mov    eax,ds:0xc00326e0
c0020b68:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020b6f:	89 14 85 80 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd880],edx
c0020b76:	83 ec 0c             	sub    esp,0xc
c0020b79:	68 54 02 00 00       	push   0x254
c0020b7e:	e8 09 ed fe ff       	call   c000f88c <malloc>
c0020b83:	83 c4 10             	add    esp,0x10
c0020b86:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020b8d:	83 ec 04             	sub    esp,0x4
c0020b90:	6a 00                	push   0x0
c0020b92:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020b99:	50                   	push   eax
c0020b9a:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020ba1:	e8 4f 43 fe ff       	call   c0004ef5 <f_mount>
c0020ba6:	83 c4 10             	add    esp,0x10
c0020ba9:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020bb0:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020bb8:	74 19                	je     c0020bd3 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020bba:	83 ec 0c             	sub    esp,0xc
c0020bbd:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020bc4:	e8 e3 ec fe ff       	call   c000f8ac <rfree>
c0020bc9:	83 c4 10             	add    esp,0x10
c0020bcc:	b0 00                	mov    al,0x0
c0020bce:	e9 e7 00 00 00       	jmp    c0020cba <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020bd3:	83 ec 04             	sub    esp,0x4
c0020bd6:	68 00 01 00 00       	push   0x100
c0020bdb:	6a 00                	push   0x0
c0020bdd:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020be4:	50                   	push   eax
c0020be5:	e8 66 fb fd ff       	call   c0000750 <memset>
c0020bea:	83 c4 10             	add    esp,0x10
c0020bed:	83 ec 08             	sub    esp,0x8
c0020bf0:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020bf7:	50                   	push   eax
c0020bf8:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020bff:	50                   	push   eax
c0020c00:	e8 47 fd fd ff       	call   c000094c <strcat>
c0020c05:	83 c4 10             	add    esp,0x10
c0020c08:	83 ec 08             	sub    esp,0x8
c0020c0b:	68 d0 d1 02 c0       	push   0xc002d1d0
c0020c10:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020c17:	50                   	push   eax
c0020c18:	e8 2f fd fd ff       	call   c000094c <strcat>
c0020c1d:	83 c4 10             	add    esp,0x10
c0020c20:	83 ec 04             	sub    esp,0x4
c0020c23:	6a 01                	push   0x1
c0020c25:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020c2c:	50                   	push   eax
c0020c2d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020c31:	50                   	push   eax
c0020c32:	e8 20 43 fe ff       	call   c0004f57 <f_open>
c0020c37:	83 c4 10             	add    esp,0x10
c0020c3a:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020c41:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020c48:	85 c0                	test   eax,eax
c0020c4a:	74 0a                	je     c0020c56 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020c4c:	78 2d                	js     c0020c7b <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020c4e:	83 e8 04             	sub    eax,0x4
c0020c51:	83 f8 01             	cmp    eax,0x1
c0020c54:	77 25                	ja     c0020c7b <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020c56:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020c5e:	83 ec 0c             	sub    esp,0xc
c0020c61:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020c65:	50                   	push   eax
c0020c66:	e8 3e 4e fe ff       	call   c0005aa9 <f_close>
c0020c6b:	83 c4 10             	add    esp,0x10
c0020c6e:	90                   	nop
c0020c6f:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020c77:	74 3a                	je     c0020cb3 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020c79:	eb 2d                	jmp    c0020ca8 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020c7b:	83 ec 0c             	sub    esp,0xc
c0020c7e:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020c85:	e8 22 ec fe ff       	call   c000f8ac <rfree>
c0020c8a:	83 c4 10             	add    esp,0x10
c0020c8d:	83 ec 04             	sub    esp,0x4
c0020c90:	6a 00                	push   0x0
c0020c92:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020c99:	50                   	push   eax
c0020c9a:	6a 00                	push   0x0
c0020c9c:	e8 54 42 fe ff       	call   c0004ef5 <f_mount>
c0020ca1:	83 c4 10             	add    esp,0x10
c0020ca4:	b0 00                	mov    al,0x0
c0020ca6:	eb 12                	jmp    c0020cba <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020ca8:	a1 e0 26 03 c0       	mov    eax,ds:0xc00326e0
c0020cad:	40                   	inc    eax
c0020cae:	a3 e0 26 03 c0       	mov    ds:0xc00326e0,eax
c0020cb3:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020cba:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020cc0:	c3                   	ret    
c0020cc1:	90                   	nop

c0020cc2 <FAT::getFileFirstSector(char const*)>:
c0020cc2:	53                   	push   ebx
c0020cc3:	83 ec 28             	sub    esp,0x28
c0020cc6:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c0020cce:	83 ec 0c             	sub    esp,0xc
c0020cd1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020cd5:	e8 b2 eb fe ff       	call   c000f88c <malloc>
c0020cda:	83 c4 10             	add    esp,0x10
c0020cdd:	89 c3                	mov    ebx,eax
c0020cdf:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0020ce4:	83 ec 04             	sub    esp,0x4
c0020ce7:	50                   	push   eax
c0020ce8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020cec:	53                   	push   ebx
c0020ced:	e8 d8 21 ff ff       	call   c0012eca <File::File(char const*, Process*)>
c0020cf2:	83 c4 10             	add    esp,0x10
c0020cf5:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0020cf9:	83 ec 08             	sub    esp,0x8
c0020cfc:	6a 01                	push   0x1
c0020cfe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020d02:	e8 27 22 ff ff       	call   c0012f2e <File::open(FileOpenMode)>
c0020d07:	83 c4 10             	add    esp,0x10
c0020d0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020d0e:	8b 00                	mov    eax,DWORD PTR [eax]
c0020d10:	83 c0 0c             	add    eax,0xc
c0020d13:	8b 00                	mov    eax,DWORD PTR [eax]
c0020d15:	83 ec 0c             	sub    esp,0xc
c0020d18:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020d1c:	52                   	push   edx
c0020d1d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020d21:	52                   	push   edx
c0020d22:	6a 00                	push   0x0
c0020d24:	6a 04                	push   0x4
c0020d26:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0020d2a:	ff d0                	call   eax
c0020d2c:	83 c4 20             	add    esp,0x20
c0020d2f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020d33:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020d39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020d3d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020d41:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0020d44:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020d47:	83 ec 04             	sub    esp,0x4
c0020d4a:	52                   	push   edx
c0020d4b:	50                   	push   eax
c0020d4c:	68 db d1 02 c0       	push   0xc002d1db
c0020d51:	e8 15 1c ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0020d56:	83 c4 10             	add    esp,0x10
c0020d59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020d5d:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0020d60:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020d63:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020d67:	83 ec 0c             	sub    esp,0xc
c0020d6a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020d6e:	e8 19 22 ff ff       	call   c0012f8c <File::close()>
c0020d73:	83 c4 10             	add    esp,0x10
c0020d76:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020d7a:	ba 00 00 00 00       	mov    edx,0x0
c0020d7f:	83 c4 28             	add    esp,0x28
c0020d82:	5b                   	pop    ebx
c0020d83:	c3                   	ret    

c0020d84 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020d84:	57                   	push   edi
c0020d85:	56                   	push   esi
c0020d86:	53                   	push   ebx
c0020d87:	81 ec 50 02 00 00    	sub    esp,0x250
c0020d8d:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0020d95:	74 0a                	je     c0020da1 <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c0020d97:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0020d9f:	75 0a                	jne    c0020dab <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c0020da1:	b8 04 00 00 00       	mov    eax,0x4
c0020da6:	e9 29 01 00 00       	jmp    c0020ed4 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020dab:	83 ec 08             	sub    esp,0x8
c0020dae:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020db5:	50                   	push   eax
c0020db6:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0020dbd:	e8 f1 52 fe ff       	call   c00060b3 <f_readdir>
c0020dc2:	83 c4 10             	add    esp,0x10
c0020dc5:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0020dcc:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c0020dd3:	83 ec 0c             	sub    esp,0xc
c0020dd6:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0020ddd:	83 c0 1a             	add    eax,0x1a
c0020de0:	50                   	push   eax
c0020de1:	e8 86 f9 fd ff       	call   c000076c <strlen>
c0020de6:	83 c4 10             	add    esp,0x10
c0020de9:	ba 00 00 00 00       	mov    edx,0x0
c0020dee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020df2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020df6:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0020dfd:	0f b6 c0             	movzx  eax,al
c0020e00:	83 e0 10             	and    eax,0x10
c0020e03:	74 07                	je     c0020e0c <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c0020e05:	b8 02 00 00 00       	mov    eax,0x2
c0020e0a:	eb 05                	jmp    c0020e11 <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c0020e0c:	b8 01 00 00 00       	mov    eax,0x1
c0020e11:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020e15:	83 ec 08             	sub    esp,0x8
c0020e18:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020e1f:	83 c0 1a             	add    eax,0x1a
c0020e22:	50                   	push   eax
c0020e23:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020e27:	83 c0 10             	add    eax,0x10
c0020e2a:	50                   	push   eax
c0020e2b:	e8 dc f9 fd ff       	call   c000080c <strcpy>
c0020e30:	83 c4 10             	add    esp,0x10
c0020e33:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0020e3a:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0020e41:	8d 44 24 04          	lea    eax,[esp+0x4]
c0020e45:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0020e4c:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0020e53:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0020e5a:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0020e61:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0020e68:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0020e6f:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0020e76:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0020e7d:	89 c6                	mov    esi,eax
c0020e7f:	89 d7                	mov    edi,edx
c0020e81:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020e83:	89 c8                	mov    eax,ecx
c0020e85:	89 fa                	mov    edx,edi
c0020e87:	89 f3                	mov    ebx,esi
c0020e89:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0020e90:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0020e97:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0020e9e:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0020ea5:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020eab:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0020eb2:	84 c0                	test   al,al
c0020eb4:	75 07                	jne    c0020ebd <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c0020eb6:	b8 07 00 00 00       	mov    eax,0x7
c0020ebb:	eb 17                	jmp    c0020ed4 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020ebd:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0020ec4:	85 c0                	test   eax,eax
c0020ec6:	75 07                	jne    c0020ecf <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c0020ec8:	b8 00 00 00 00       	mov    eax,0x0
c0020ecd:	eb 05                	jmp    c0020ed4 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020ecf:	b8 01 00 00 00       	mov    eax,0x1
c0020ed4:	81 c4 50 02 00 00    	add    esp,0x250
c0020eda:	5b                   	pop    ebx
c0020edb:	5e                   	pop    esi
c0020edc:	5f                   	pop    edi
c0020edd:	c3                   	ret    

c0020ede <FAT::read(void*, unsigned long, void*, int*)>:
c0020ede:	83 ec 1c             	sub    esp,0x1c
c0020ee1:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020ee6:	74 07                	je     c0020eef <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020ee8:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020eed:	75 07                	jne    c0020ef6 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020eef:	b8 04 00 00 00       	mov    eax,0x4
c0020ef4:	eb 3d                	jmp    c0020f33 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020ef6:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020efa:	50                   	push   eax
c0020efb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020eff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020f03:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020f07:	e8 87 44 fe ff       	call   c0005393 <f_read>
c0020f0c:	83 c4 10             	add    esp,0x10
c0020f0f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020f13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f17:	89 c2                	mov    edx,eax
c0020f19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020f1d:	89 10                	mov    DWORD PTR [eax],edx
c0020f1f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f23:	85 c0                	test   eax,eax
c0020f25:	75 07                	jne    c0020f2e <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020f27:	b8 00 00 00 00       	mov    eax,0x0
c0020f2c:	eb 05                	jmp    c0020f33 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020f2e:	b8 01 00 00 00       	mov    eax,0x1
c0020f33:	83 c4 1c             	add    esp,0x1c
c0020f36:	c3                   	ret    
c0020f37:	90                   	nop

c0020f38 <FAT::write(void*, unsigned long, void*, int*)>:
c0020f38:	83 ec 1c             	sub    esp,0x1c
c0020f3b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020f40:	74 07                	je     c0020f49 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020f42:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020f47:	75 07                	jne    c0020f50 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020f49:	b8 04 00 00 00       	mov    eax,0x4
c0020f4e:	eb 3d                	jmp    c0020f8d <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020f50:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020f54:	50                   	push   eax
c0020f55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020f59:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020f5d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020f61:	e8 ad 46 fe ff       	call   c0005613 <f_write>
c0020f66:	83 c4 10             	add    esp,0x10
c0020f69:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020f6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f71:	89 c2                	mov    edx,eax
c0020f73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020f77:	89 10                	mov    DWORD PTR [eax],edx
c0020f79:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f7d:	85 c0                	test   eax,eax
c0020f7f:	75 07                	jne    c0020f88 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020f81:	b8 00 00 00 00       	mov    eax,0x0
c0020f86:	eb 05                	jmp    c0020f8d <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020f88:	b8 01 00 00 00       	mov    eax,0x1
c0020f8d:	83 c4 1c             	add    esp,0x1c
c0020f90:	c3                   	ret    
c0020f91:	90                   	nop

c0020f92 <FAT::close(void*)>:
c0020f92:	83 ec 1c             	sub    esp,0x1c
c0020f95:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020f9a:	75 07                	jne    c0020fa3 <FAT::close(void*)+0x11>
c0020f9c:	b8 04 00 00 00       	mov    eax,0x4
c0020fa1:	eb 36                	jmp    c0020fd9 <FAT::close(void*)+0x47>
c0020fa3:	83 ec 0c             	sub    esp,0xc
c0020fa6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020faa:	e8 fa 4a fe ff       	call   c0005aa9 <f_close>
c0020faf:	83 c4 10             	add    esp,0x10
c0020fb2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020fb6:	83 ec 0c             	sub    esp,0xc
c0020fb9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020fbd:	e8 da e8 fe ff       	call   c000f89c <free>
c0020fc2:	83 c4 10             	add    esp,0x10
c0020fc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020fc9:	85 c0                	test   eax,eax
c0020fcb:	75 07                	jne    c0020fd4 <FAT::close(void*)+0x42>
c0020fcd:	b8 00 00 00 00       	mov    eax,0x0
c0020fd2:	eb 05                	jmp    c0020fd9 <FAT::close(void*)+0x47>
c0020fd4:	b8 01 00 00 00       	mov    eax,0x1
c0020fd9:	83 c4 1c             	add    esp,0x1c
c0020fdc:	c3                   	ret    
c0020fdd:	90                   	nop

c0020fde <FAT::closeDir(void*)>:
c0020fde:	83 ec 1c             	sub    esp,0x1c
c0020fe1:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020fe6:	75 07                	jne    c0020fef <FAT::closeDir(void*)+0x11>
c0020fe8:	b8 04 00 00 00       	mov    eax,0x4
c0020fed:	eb 36                	jmp    c0021025 <FAT::closeDir(void*)+0x47>
c0020fef:	83 ec 0c             	sub    esp,0xc
c0020ff2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ff6:	e8 96 50 fe ff       	call   c0006091 <f_closedir>
c0020ffb:	83 c4 10             	add    esp,0x10
c0020ffe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021002:	83 ec 0c             	sub    esp,0xc
c0021005:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021009:	e8 8e e8 fe ff       	call   c000f89c <free>
c002100e:	83 c4 10             	add    esp,0x10
c0021011:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021015:	85 c0                	test   eax,eax
c0021017:	75 07                	jne    c0021020 <FAT::closeDir(void*)+0x42>
c0021019:	b8 00 00 00 00       	mov    eax,0x0
c002101e:	eb 05                	jmp    c0021025 <FAT::closeDir(void*)+0x47>
c0021020:	b8 01 00 00 00       	mov    eax,0x1
c0021025:	83 c4 1c             	add    esp,0x1c
c0021028:	c3                   	ret    
c0021029:	90                   	nop

c002102a <FAT::seek(void*, unsigned long long)>:
c002102a:	83 ec 2c             	sub    esp,0x2c
c002102d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021031:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021035:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0021039:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002103d:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0021042:	75 07                	jne    c002104b <FAT::seek(void*, unsigned long long)+0x21>
c0021044:	b8 04 00 00 00       	mov    eax,0x4
c0021049:	eb 2f                	jmp    c002107a <FAT::seek(void*, unsigned long long)+0x50>
c002104b:	83 ec 04             	sub    esp,0x4
c002104e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021052:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021056:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002105a:	e8 79 4a fe ff       	call   c0005ad8 <f_lseek>
c002105f:	83 c4 10             	add    esp,0x10
c0021062:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021066:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002106a:	85 c0                	test   eax,eax
c002106c:	75 07                	jne    c0021075 <FAT::seek(void*, unsigned long long)+0x4b>
c002106e:	b8 00 00 00 00       	mov    eax,0x0
c0021073:	eb 05                	jmp    c002107a <FAT::seek(void*, unsigned long long)+0x50>
c0021075:	b8 01 00 00 00       	mov    eax,0x1
c002107a:	83 c4 2c             	add    esp,0x2c
c002107d:	c3                   	ret    

c002107e <fatWrapperReadDisk>:
c002107e:	83 ec 1c             	sub    esp,0x1c
c0021081:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021085:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021089:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002108d:	89 04 24             	mov    DWORD PTR [esp],eax
c0021090:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0021094:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021098:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002109d:	8b 04 85 c0 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0940]
c00210a4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00210a8:	83 ec 0c             	sub    esp,0xc
c00210ab:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00210af:	52                   	push   edx
c00210b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00210b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00210b8:	50                   	push   eax
c00210b9:	e8 2a 52 ff ff       	call   c00162e8 <LogicalDisk::read(unsigned long long, int, void*)>
c00210be:	83 c4 20             	add    esp,0x20
c00210c1:	83 c4 1c             	add    esp,0x1c
c00210c4:	c3                   	ret    

c00210c5 <fatWrapperWriteDisk>:
c00210c5:	83 ec 1c             	sub    esp,0x1c
c00210c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00210cc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00210d0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00210d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00210d7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00210db:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00210df:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00210e4:	8b 04 85 c0 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0940]
c00210eb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00210ef:	83 ec 0c             	sub    esp,0xc
c00210f2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00210f6:	52                   	push   edx
c00210f7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00210fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00210ff:	50                   	push   eax
c0021100:	e8 4f 52 ff ff       	call   c0016354 <LogicalDisk::write(unsigned long long, int, void*)>
c0021105:	83 c4 20             	add    esp,0x20
c0021108:	83 c4 1c             	add    esp,0x1c
c002110b:	c3                   	ret    

c002110c <fatWrapperIoctl>:
c002110c:	53                   	push   ebx
c002110d:	83 ec 28             	sub    esp,0x28
c0021110:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021114:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021118:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c002111c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021120:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0021125:	75 31                	jne    c0021158 <fatWrapperIoctl+0x4c>
c0021127:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002112b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002112f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021134:	8b 04 85 c0 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0940]
c002113b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0021141:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021147:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002114b:	66 89 02             	mov    WORD PTR [edx],ax
c002114e:	b8 00 00 00 00       	mov    eax,0x0
c0021153:	e9 b2 00 00 00       	jmp    c002120a <fatWrapperIoctl+0xfe>
c0021158:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c002115d:	75 6a                	jne    c00211c9 <fatWrapperIoctl+0xbd>
c002115f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021163:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021167:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002116c:	8b 04 85 c0 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0940]
c0021173:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0021179:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c002117f:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0021185:	89 c8                	mov    eax,ecx
c0021187:	89 da                	mov    edx,ebx
c0021189:	0f a4 c2 0a          	shld   edx,eax,0xa
c002118d:	c1 e0 0a             	shl    eax,0xa
c0021190:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0021195:	8b 0c 8d c0 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0940]
c002119c:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00211a2:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00211a8:	89 cb                	mov    ebx,ecx
c00211aa:	c1 fb 1f             	sar    ebx,0x1f
c00211ad:	53                   	push   ebx
c00211ae:	51                   	push   ecx
c00211af:	52                   	push   edx
c00211b0:	50                   	push   eax
c00211b1:	e8 de 60 00 00       	call   c0027294 <__udivdi3>
c00211b6:	83 c4 10             	add    esp,0x10
c00211b9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00211bd:	89 01                	mov    DWORD PTR [ecx],eax
c00211bf:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00211c2:	b8 00 00 00 00       	mov    eax,0x0
c00211c7:	eb 41                	jmp    c002120a <fatWrapperIoctl+0xfe>
c00211c9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00211ce:	75 07                	jne    c00211d7 <fatWrapperIoctl+0xcb>
c00211d0:	b8 00 00 00 00       	mov    eax,0x0
c00211d5:	eb 33                	jmp    c002120a <fatWrapperIoctl+0xfe>
c00211d7:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00211dc:	75 19                	jne    c00211f7 <fatWrapperIoctl+0xeb>
c00211de:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00211e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00211e6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00211ea:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00211f0:	b8 00 00 00 00       	mov    eax,0x0
c00211f5:	eb 13                	jmp    c002120a <fatWrapperIoctl+0xfe>
c00211f7:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c00211fc:	75 07                	jne    c0021205 <fatWrapperIoctl+0xf9>
c00211fe:	b8 00 00 00 00       	mov    eax,0x0
c0021203:	eb 05                	jmp    c002120a <fatWrapperIoctl+0xfe>
c0021205:	b8 04 00 00 00       	mov    eax,0x4
c002120a:	83 c4 28             	add    esp,0x28
c002120d:	5b                   	pop    ebx
c002120e:	c3                   	ret    
c002120f:	90                   	nop

c0021210 <FAT::FAT()>:
c0021210:	83 ec 1c             	sub    esp,0x1c
c0021213:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021217:	83 ec 0c             	sub    esp,0xc
c002121a:	50                   	push   eax
c002121b:	e8 56 1a ff ff       	call   c0012c76 <Filesystem::Filesystem()>
c0021220:	83 c4 10             	add    esp,0x10
c0021223:	ba 18 d2 02 c0       	mov    edx,0xc002d218
c0021228:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002122c:	89 10                	mov    DWORD PTR [eax],edx
c002122e:	c7 05 e0 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00326e0,0x0
c0021238:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021240:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0021245:	7f 15                	jg     c002125c <FAT::FAT()+0x4c>
c0021247:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002124b:	c7 04 85 00 27 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcd900],0xffffffff
c0021256:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002125a:	eb e4                	jmp    c0021240 <FAT::FAT()+0x30>
c002125c:	90                   	nop
c002125d:	83 c4 1c             	add    esp,0x1c
c0021260:	c3                   	ret    
c0021261:	90                   	nop

c0021262 <FAT::fixFilepath(char*)>:
c0021262:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021266:	8a 00                	mov    al,BYTE PTR [eax]
c0021268:	3c 40                	cmp    al,0x40
c002126a:	7e 2c                	jle    c0021298 <FAT::fixFilepath(char*)+0x36>
c002126c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021270:	8a 00                	mov    al,BYTE PTR [eax]
c0021272:	83 e8 41             	sub    eax,0x41
c0021275:	88 c2                	mov    dl,al
c0021277:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002127b:	88 10                	mov    BYTE PTR [eax],dl
c002127d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021281:	8a 00                	mov    al,BYTE PTR [eax]
c0021283:	0f be c0             	movsx  eax,al
c0021286:	8b 04 85 00 27 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd900]
c002128d:	83 c0 30             	add    eax,0x30
c0021290:	88 c2                	mov    dl,al
c0021292:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021296:	88 10                	mov    BYTE PTR [eax],dl
c0021298:	90                   	nop
c0021299:	c3                   	ret    

c002129a <FAT::open(char const*, void**, FileOpenMode)>:
c002129a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00212a0:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00212a8:	74 0a                	je     c00212b4 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c00212aa:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00212b2:	75 0a                	jne    c00212be <FAT::open(char const*, void**, FileOpenMode)+0x24>
c00212b4:	b8 04 00 00 00       	mov    eax,0x4
c00212b9:	e9 fd 00 00 00       	jmp    c00213bb <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00212be:	83 ec 08             	sub    esp,0x8
c00212c1:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00212c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00212cc:	50                   	push   eax
c00212cd:	e8 3a f5 fd ff       	call   c000080c <strcpy>
c00212d2:	83 c4 10             	add    esp,0x10
c00212d5:	83 ec 08             	sub    esp,0x8
c00212d8:	8d 44 24 10          	lea    eax,[esp+0x10]
c00212dc:	50                   	push   eax
c00212dd:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00212e4:	e8 79 ff ff ff       	call   c0021262 <FAT::fixFilepath(char*)>
c00212e9:	83 c4 10             	add    esp,0x10
c00212ec:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00212f4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00212fb:	83 e0 01             	and    eax,0x1
c00212fe:	74 08                	je     c0021308 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0021300:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0021308:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002130f:	83 e0 04             	and    eax,0x4
c0021312:	74 10                	je     c0021324 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0021314:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c002131c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021324:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002132b:	83 e0 02             	and    eax,0x2
c002132e:	74 08                	je     c0021338 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0021330:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021338:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002133f:	83 e0 08             	and    eax,0x8
c0021342:	74 08                	je     c002134c <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0021344:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c002134c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021353:	83 e0 10             	and    eax,0x10
c0021356:	74 08                	je     c0021360 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0021358:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0021360:	83 ec 0c             	sub    esp,0xc
c0021363:	68 50 02 00 00       	push   0x250
c0021368:	e8 1f e5 fe ff       	call   c000f88c <malloc>
c002136d:	83 c4 10             	add    esp,0x10
c0021370:	89 c2                	mov    edx,eax
c0021372:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021379:	89 10                	mov    DWORD PTR [eax],edx
c002137b:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0021383:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002138a:	8b 00                	mov    eax,DWORD PTR [eax]
c002138c:	83 ec 04             	sub    esp,0x4
c002138f:	52                   	push   edx
c0021390:	8d 54 24 10          	lea    edx,[esp+0x10]
c0021394:	52                   	push   edx
c0021395:	50                   	push   eax
c0021396:	e8 bc 3b fe ff       	call   c0004f57 <f_open>
c002139b:	83 c4 10             	add    esp,0x10
c002139e:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00213a5:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00213ad:	74 07                	je     c00213b6 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c00213af:	b8 01 00 00 00       	mov    eax,0x1
c00213b4:	eb 05                	jmp    c00213bb <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00213b6:	b8 00 00 00 00       	mov    eax,0x0
c00213bb:	81 c4 1c 01 00 00    	add    esp,0x11c
c00213c1:	c3                   	ret    

c00213c2 <FAT::openDir(char const*, void**)>:
c00213c2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00213c8:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00213d0:	74 0a                	je     c00213dc <FAT::openDir(char const*, void**)+0x1a>
c00213d2:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00213da:	75 07                	jne    c00213e3 <FAT::openDir(char const*, void**)+0x21>
c00213dc:	b8 04 00 00 00       	mov    eax,0x4
c00213e1:	eb 7d                	jmp    c0021460 <FAT::openDir(char const*, void**)+0x9e>
c00213e3:	83 ec 08             	sub    esp,0x8
c00213e6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00213ed:	8d 44 24 18          	lea    eax,[esp+0x18]
c00213f1:	50                   	push   eax
c00213f2:	e8 15 f4 fd ff       	call   c000080c <strcpy>
c00213f7:	83 c4 10             	add    esp,0x10
c00213fa:	83 ec 08             	sub    esp,0x8
c00213fd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021401:	50                   	push   eax
c0021402:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021409:	e8 54 fe ff ff       	call   c0021262 <FAT::fixFilepath(char*)>
c002140e:	83 c4 10             	add    esp,0x10
c0021411:	83 ec 0c             	sub    esp,0xc
c0021414:	6a 4c                	push   0x4c
c0021416:	e8 71 e4 fe ff       	call   c000f88c <malloc>
c002141b:	83 c4 10             	add    esp,0x10
c002141e:	89 c2                	mov    edx,eax
c0021420:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021427:	89 10                	mov    DWORD PTR [eax],edx
c0021429:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021430:	8b 00                	mov    eax,DWORD PTR [eax]
c0021432:	83 ec 08             	sub    esp,0x8
c0021435:	8d 54 24 14          	lea    edx,[esp+0x14]
c0021439:	52                   	push   edx
c002143a:	50                   	push   eax
c002143b:	e8 4f 4b fe ff       	call   c0005f8f <f_opendir>
c0021440:	83 c4 10             	add    esp,0x10
c0021443:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002144a:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0021452:	74 07                	je     c002145b <FAT::openDir(char const*, void**)+0x99>
c0021454:	b8 01 00 00 00       	mov    eax,0x1
c0021459:	eb 05                	jmp    c0021460 <FAT::openDir(char const*, void**)+0x9e>
c002145b:	b8 00 00 00 00       	mov    eax,0x0
c0021460:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021466:	c3                   	ret    
c0021467:	90                   	nop

c0021468 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0021468:	81 ec 2c 02 00 00    	sub    esp,0x22c
c002146e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0021476:	75 0a                	jne    c0021482 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0021478:	b8 04 00 00 00       	mov    eax,0x4
c002147d:	e9 c9 00 00 00       	jmp    c002154b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021482:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c002148a:	75 0a                	jne    c0021496 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c002148c:	b8 04 00 00 00       	mov    eax,0x4
c0021491:	e9 b5 00 00 00       	jmp    c002154b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021496:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c002149e:	75 0a                	jne    c00214aa <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c00214a0:	b8 04 00 00 00       	mov    eax,0x4
c00214a5:	e9 a1 00 00 00       	jmp    c002154b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00214aa:	83 ec 08             	sub    esp,0x8
c00214ad:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00214b4:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00214bb:	50                   	push   eax
c00214bc:	e8 4b f3 fd ff       	call   c000080c <strcpy>
c00214c1:	83 c4 10             	add    esp,0x10
c00214c4:	83 ec 08             	sub    esp,0x8
c00214c7:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00214ce:	50                   	push   eax
c00214cf:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00214d6:	e8 87 fd ff ff       	call   c0021262 <FAT::fixFilepath(char*)>
c00214db:	83 c4 10             	add    esp,0x10
c00214de:	83 ec 08             	sub    esp,0x8
c00214e1:	8d 44 24 08          	lea    eax,[esp+0x8]
c00214e5:	50                   	push   eax
c00214e6:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00214ed:	50                   	push   eax
c00214ee:	e8 5b 4c fe ff       	call   c000614e <f_stat>
c00214f3:	83 c4 10             	add    esp,0x10
c00214f6:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00214fd:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021504:	85 c0                	test   eax,eax
c0021506:	74 07                	je     c002150f <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0021508:	83 f8 04             	cmp    eax,0x4
c002150b:	74 32                	je     c002153f <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c002150d:	eb 37                	jmp    c0021546 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c002150f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0021513:	0f b6 c0             	movzx  eax,al
c0021516:	83 e0 10             	and    eax,0x10
c0021519:	0f 95 c2             	setne  dl
c002151c:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0021523:	88 10                	mov    BYTE PTR [eax],dl
c0021525:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021528:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002152c:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0021533:	89 01                	mov    DWORD PTR [ecx],eax
c0021535:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021538:	b8 00 00 00 00       	mov    eax,0x0
c002153d:	eb 0c                	jmp    c002154b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002153f:	b8 02 00 00 00       	mov    eax,0x2
c0021544:	eb 05                	jmp    c002154b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021546:	b8 01 00 00 00       	mov    eax,0x1
c002154b:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021551:	c3                   	ret    

c0021552 <FAT::unlink(char const*)>:
c0021552:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021558:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021560:	75 07                	jne    c0021569 <FAT::unlink(char const*)+0x17>
c0021562:	b8 04 00 00 00       	mov    eax,0x4
c0021567:	eb 5c                	jmp    c00215c5 <FAT::unlink(char const*)+0x73>
c0021569:	83 ec 08             	sub    esp,0x8
c002156c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021573:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021577:	50                   	push   eax
c0021578:	e8 8f f2 fd ff       	call   c000080c <strcpy>
c002157d:	83 c4 10             	add    esp,0x10
c0021580:	83 ec 08             	sub    esp,0x8
c0021583:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021587:	50                   	push   eax
c0021588:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002158f:	e8 ce fc ff ff       	call   c0021262 <FAT::fixFilepath(char*)>
c0021594:	83 c4 10             	add    esp,0x10
c0021597:	83 ec 0c             	sub    esp,0xc
c002159a:	8d 44 24 18          	lea    eax,[esp+0x18]
c002159e:	50                   	push   eax
c002159f:	e8 fc 4e fe ff       	call   c00064a0 <f_unlink>
c00215a4:	83 c4 10             	add    esp,0x10
c00215a7:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00215ae:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00215b5:	85 c0                	test   eax,eax
c00215b7:	75 07                	jne    c00215c0 <FAT::unlink(char const*)+0x6e>
c00215b9:	b8 00 00 00 00       	mov    eax,0x0
c00215be:	eb 05                	jmp    c00215c5 <FAT::unlink(char const*)+0x73>
c00215c0:	b8 01 00 00 00       	mov    eax,0x1
c00215c5:	81 c4 1c 01 00 00    	add    esp,0x11c
c00215cb:	c3                   	ret    

c00215cc <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00215cc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00215d2:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00215d9:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00215e0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00215e4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00215e8:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00215f0:	75 0a                	jne    c00215fc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00215f2:	b8 04 00 00 00       	mov    eax,0x4
c00215f7:	e9 1c 01 00 00       	jmp    c0021718 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00215fc:	83 ec 08             	sub    esp,0x8
c00215ff:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021606:	8d 44 24 24          	lea    eax,[esp+0x24]
c002160a:	50                   	push   eax
c002160b:	e8 fc f1 fd ff       	call   c000080c <strcpy>
c0021610:	83 c4 10             	add    esp,0x10
c0021613:	83 ec 08             	sub    esp,0x8
c0021616:	8d 44 24 20          	lea    eax,[esp+0x20]
c002161a:	50                   	push   eax
c002161b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021622:	e8 3b fc ff ff       	call   c0021262 <FAT::fixFilepath(char*)>
c0021627:	83 c4 10             	add    esp,0x10
c002162a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0021632:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c002163a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002163f:	83 e0 01             	and    eax,0x1
c0021642:	74 08                	je     c002164c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0021644:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c002164c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021651:	83 e0 02             	and    eax,0x2
c0021654:	74 08                	je     c002165e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0021656:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c002165e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021663:	83 e0 04             	and    eax,0x4
c0021666:	74 08                	je     c0021670 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0021668:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0021670:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021675:	83 e0 08             	and    eax,0x8
c0021678:	74 08                	je     c0021682 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c002167a:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0021682:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021687:	83 e0 01             	and    eax,0x1
c002168a:	74 08                	je     c0021694 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c002168c:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0021694:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021699:	83 e0 02             	and    eax,0x2
c002169c:	74 08                	je     c00216a6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c002169e:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00216a6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00216ab:	83 e0 04             	and    eax,0x4
c00216ae:	74 08                	je     c00216b8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c00216b0:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00216b8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00216bd:	83 e0 08             	and    eax,0x8
c00216c0:	74 08                	je     c00216ca <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c00216c2:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00216ca:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00216d1:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00216d8:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c00216e0:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00216e8:	83 ec 04             	sub    esp,0x4
c00216eb:	52                   	push   edx
c00216ec:	50                   	push   eax
c00216ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00216f1:	50                   	push   eax
c00216f2:	e8 4b 54 fe ff       	call   c0006b42 <f_chmod>
c00216f7:	83 c4 10             	add    esp,0x10
c00216fa:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0021701:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021708:	85 c0                	test   eax,eax
c002170a:	75 07                	jne    c0021713 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c002170c:	b8 00 00 00 00       	mov    eax,0x0
c0021711:	eb 05                	jmp    c0021718 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021713:	b8 01 00 00 00       	mov    eax,0x1
c0021718:	81 c4 2c 01 00 00    	add    esp,0x12c
c002171e:	c3                   	ret    
c002171f:	90                   	nop

c0021720 <FAT::rename(char const*, char const*)>:
c0021720:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021726:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c002172e:	74 0a                	je     c002173a <FAT::rename(char const*, char const*)+0x1a>
c0021730:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021738:	75 0a                	jne    c0021744 <FAT::rename(char const*, char const*)+0x24>
c002173a:	b8 04 00 00 00       	mov    eax,0x4
c002173f:	e9 98 00 00 00       	jmp    c00217dc <FAT::rename(char const*, char const*)+0xbc>
c0021744:	83 ec 08             	sub    esp,0x8
c0021747:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002174e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021755:	50                   	push   eax
c0021756:	e8 b1 f0 fd ff       	call   c000080c <strcpy>
c002175b:	83 c4 10             	add    esp,0x10
c002175e:	83 ec 08             	sub    esp,0x8
c0021761:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021768:	50                   	push   eax
c0021769:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021770:	e8 ed fa ff ff       	call   c0021262 <FAT::fixFilepath(char*)>
c0021775:	83 c4 10             	add    esp,0x10
c0021778:	83 ec 08             	sub    esp,0x8
c002177b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0021782:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021786:	50                   	push   eax
c0021787:	e8 80 f0 fd ff       	call   c000080c <strcpy>
c002178c:	83 c4 10             	add    esp,0x10
c002178f:	83 ec 08             	sub    esp,0x8
c0021792:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021796:	50                   	push   eax
c0021797:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002179e:	e8 bf fa ff ff       	call   c0021262 <FAT::fixFilepath(char*)>
c00217a3:	83 c4 10             	add    esp,0x10
c00217a6:	83 ec 08             	sub    esp,0x8
c00217a9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00217ad:	50                   	push   eax
c00217ae:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00217b5:	50                   	push   eax
c00217b6:	e8 94 50 fe ff       	call   c000684f <f_rename>
c00217bb:	83 c4 10             	add    esp,0x10
c00217be:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00217c5:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00217cc:	85 c0                	test   eax,eax
c00217ce:	75 07                	jne    c00217d7 <FAT::rename(char const*, char const*)+0xb7>
c00217d0:	b8 00 00 00 00       	mov    eax,0x0
c00217d5:	eb 05                	jmp    c00217dc <FAT::rename(char const*, char const*)+0xbc>
c00217d7:	b8 01 00 00 00       	mov    eax,0x1
c00217dc:	81 c4 1c 02 00 00    	add    esp,0x21c
c00217e2:	c3                   	ret    
c00217e3:	90                   	nop

c00217e4 <FAT::mkdir(char const*)>:
c00217e4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00217ea:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00217f2:	75 07                	jne    c00217fb <FAT::mkdir(char const*)+0x17>
c00217f4:	b8 04 00 00 00       	mov    eax,0x4
c00217f9:	eb 5c                	jmp    c0021857 <FAT::mkdir(char const*)+0x73>
c00217fb:	83 ec 08             	sub    esp,0x8
c00217fe:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021805:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021809:	50                   	push   eax
c002180a:	e8 fd ef fd ff       	call   c000080c <strcpy>
c002180f:	83 c4 10             	add    esp,0x10
c0021812:	83 ec 08             	sub    esp,0x8
c0021815:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021819:	50                   	push   eax
c002181a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021821:	e8 3c fa ff ff       	call   c0021262 <FAT::fixFilepath(char*)>
c0021826:	83 c4 10             	add    esp,0x10
c0021829:	83 ec 0c             	sub    esp,0xc
c002182c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021830:	50                   	push   eax
c0021831:	e8 ed 4d fe ff       	call   c0006623 <f_mkdir>
c0021836:	83 c4 10             	add    esp,0x10
c0021839:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021840:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021847:	85 c0                	test   eax,eax
c0021849:	75 07                	jne    c0021852 <FAT::mkdir(char const*)+0x6e>
c002184b:	b8 00 00 00 00       	mov    eax,0x0
c0021850:	eb 05                	jmp    c0021857 <FAT::mkdir(char const*)+0x73>
c0021852:	b8 01 00 00 00       	mov    eax,0x1
c0021857:	81 c4 1c 01 00 00    	add    esp,0x11c
c002185d:	c3                   	ret    

c002185e <FAT::exists(char const*)>:
c002185e:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021864:	83 ec 08             	sub    esp,0x8
c0021867:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002186e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021872:	50                   	push   eax
c0021873:	e8 94 ef fd ff       	call   c000080c <strcpy>
c0021878:	83 c4 10             	add    esp,0x10
c002187b:	83 ec 08             	sub    esp,0x8
c002187e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021882:	50                   	push   eax
c0021883:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002188a:	e8 d3 f9 ff ff       	call   c0021262 <FAT::fixFilepath(char*)>
c002188f:	83 c4 10             	add    esp,0x10
c0021892:	83 ec 08             	sub    esp,0x8
c0021895:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c002189c:	50                   	push   eax
c002189d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00218a1:	50                   	push   eax
c00218a2:	e8 a7 48 fe ff       	call   c000614e <f_stat>
c00218a7:	83 c4 10             	add    esp,0x10
c00218aa:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00218b1:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00218b8:	85 c0                	test   eax,eax
c00218ba:	75 04                	jne    c00218c0 <FAT::exists(char const*)+0x62>
c00218bc:	b0 01                	mov    al,0x1
c00218be:	eb 02                	jmp    c00218c2 <FAT::exists(char const*)+0x64>
c00218c0:	b0 00                	mov    al,0x0
c00218c2:	81 c4 2c 02 00 00    	add    esp,0x22c
c00218c8:	c3                   	ret    
c00218c9:	90                   	nop

c00218ca <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00218ca:	b8 08 00 00 00       	mov    eax,0x8
c00218cf:	c3                   	ret    

c00218d0 <ISO9660::seek(void*, unsigned long long)>:
c00218d0:	53                   	push   ebx
c00218d1:	b8 04 00 00 00       	mov    eax,0x4
c00218d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00218da:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00218de:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00218e2:	85 d2                	test   edx,edx
c00218e4:	74 17                	je     c00218fd <ISO9660::seek(void*, unsigned long long)+0x2d>
c00218e6:	89 c8                	mov    eax,ecx
c00218e8:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c00218eb:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c00218ee:	b8 01 00 00 00       	mov    eax,0x1
c00218f3:	73 08                	jae    c00218fd <ISO9660::seek(void*, unsigned long long)+0x2d>
c00218f5:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c00218f8:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c00218fb:	31 c0                	xor    eax,eax
c00218fd:	5b                   	pop    ebx
c00218fe:	c3                   	ret    
c00218ff:	90                   	nop

c0021900 <ISO9660::tell(void*, unsigned long long*)>:
c0021900:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021904:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021908:	85 d2                	test   edx,edx
c002190a:	74 12                	je     c002191e <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002190c:	85 c0                	test   eax,eax
c002190e:	74 0e                	je     c002191e <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021910:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021913:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021916:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021919:	89 10                	mov    DWORD PTR [eax],edx
c002191b:	31 c0                	xor    eax,eax
c002191d:	c3                   	ret    
c002191e:	b8 04 00 00 00       	mov    eax,0x4
c0021923:	c3                   	ret    

c0021924 <ISO9660::getName()>:
c0021924:	b8 78 d2 02 c0       	mov    eax,0xc002d278
c0021929:	c3                   	ret    

c002192a <ISO9660::stat(void*, unsigned long long*)>:
c002192a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002192e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021932:	85 d2                	test   edx,edx
c0021934:	74 12                	je     c0021948 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021936:	85 c0                	test   eax,eax
c0021938:	74 0e                	je     c0021948 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c002193a:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c002193d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021940:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021943:	89 10                	mov    DWORD PTR [eax],edx
c0021945:	31 c0                	xor    eax,eax
c0021947:	c3                   	ret    
c0021948:	b8 04 00 00 00       	mov    eax,0x4
c002194d:	c3                   	ret    

c002194e <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c002194e:	b8 01 00 00 00       	mov    eax,0x1
c0021953:	c3                   	ret    

c0021954 <ISO9660::unlink(char const*)>:
c0021954:	b8 01 00 00 00       	mov    eax,0x1
c0021959:	c3                   	ret    

c002195a <ISO9660::write(void*, unsigned long, void*, int*)>:
c002195a:	b8 01 00 00 00       	mov    eax,0x1
c002195f:	c3                   	ret    

c0021960 <ISO9660::rename(char const*, char const*)>:
c0021960:	b8 01 00 00 00       	mov    eax,0x1
c0021965:	c3                   	ret    

c0021966 <ISO9660::mkdir(char const*)>:
c0021966:	b8 01 00 00 00       	mov    eax,0x1
c002196b:	c3                   	ret    

c002196c <ISO9660::close(void*)>:
c002196c:	83 ec 0c             	sub    esp,0xc
c002196f:	b8 04 00 00 00       	mov    eax,0x4
c0021974:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021978:	85 d2                	test   edx,edx
c002197a:	74 0e                	je     c002198a <ISO9660::close(void*)+0x1e>
c002197c:	83 ec 0c             	sub    esp,0xc
c002197f:	52                   	push   edx
c0021980:	e8 17 df fe ff       	call   c000f89c <free>
c0021985:	83 c4 10             	add    esp,0x10
c0021988:	31 c0                	xor    eax,eax
c002198a:	83 c4 0c             	add    esp,0xc
c002198d:	c3                   	ret    

c002198e <ISO9660::closeDir(void*)>:
c002198e:	83 ec 0c             	sub    esp,0xc
c0021991:	b8 04 00 00 00       	mov    eax,0x4
c0021996:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002199a:	85 d2                	test   edx,edx
c002199c:	74 0e                	je     c00219ac <ISO9660::closeDir(void*)+0x1e>
c002199e:	83 ec 0c             	sub    esp,0xc
c00219a1:	52                   	push   edx
c00219a2:	e8 f5 de fe ff       	call   c000f89c <free>
c00219a7:	83 c4 10             	add    esp,0x10
c00219aa:	31 c0                	xor    eax,eax
c00219ac:	83 c4 0c             	add    esp,0xc
c00219af:	c3                   	ret    

c00219b0 <ISO9660::~ISO9660()>:
c00219b0:	83 ec 0c             	sub    esp,0xc
c00219b3:	ba dc d2 02 c0       	mov    edx,0xc002d2dc
c00219b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219bc:	89 10                	mov    DWORD PTR [eax],edx
c00219be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219c2:	83 ec 0c             	sub    esp,0xc
c00219c5:	50                   	push   eax
c00219c6:	e8 cf 12 ff ff       	call   c0012c9a <Filesystem::~Filesystem()>
c00219cb:	83 c4 10             	add    esp,0x10
c00219ce:	90                   	nop
c00219cf:	83 c4 0c             	add    esp,0xc
c00219d2:	c3                   	ret    
c00219d3:	90                   	nop

c00219d4 <ISO9660::~ISO9660()>:
c00219d4:	83 ec 0c             	sub    esp,0xc
c00219d7:	83 ec 0c             	sub    esp,0xc
c00219da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00219de:	e8 cd ff ff ff       	call   c00219b0 <ISO9660::~ISO9660()>
c00219e3:	83 c4 10             	add    esp,0x10
c00219e6:	83 ec 08             	sub    esp,0x8
c00219e9:	6a 08                	push   0x8
c00219eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00219ef:	e8 97 0e ff ff       	call   c001288b <operator delete(void*, unsigned long)>
c00219f4:	83 c4 10             	add    esp,0x10
c00219f7:	83 c4 0c             	add    esp,0xc
c00219fa:	c3                   	ret    

c00219fb <__memmem(unsigned char*, int, unsigned char*, int)>:
c00219fb:	55                   	push   ebp
c00219fc:	31 c9                	xor    ecx,ecx
c00219fe:	57                   	push   edi
c00219ff:	56                   	push   esi
c0021a00:	53                   	push   ebx
c0021a01:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021a05:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021a09:	89 eb                	mov    ebx,ebp
c0021a0b:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021a0f:	39 ce                	cmp    esi,ecx
c0021a11:	7e 17                	jle    c0021a2a <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021a13:	31 d2                	xor    edx,edx
c0021a15:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021a19:	7d 13                	jge    c0021a2e <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021a1b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021a1f:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021a22:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021a25:	75 0d                	jne    c0021a34 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021a27:	42                   	inc    edx
c0021a28:	eb eb                	jmp    c0021a15 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021a2a:	31 c0                	xor    eax,eax
c0021a2c:	eb 0a                	jmp    c0021a38 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021a2e:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021a32:	eb 04                	jmp    c0021a38 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021a34:	41                   	inc    ecx
c0021a35:	43                   	inc    ebx
c0021a36:	eb d7                	jmp    c0021a0f <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021a38:	5b                   	pop    ebx
c0021a39:	5e                   	pop    esi
c0021a3a:	5f                   	pop    edi
c0021a3b:	5d                   	pop    ebp
c0021a3c:	c3                   	ret    

c0021a3d <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021a3d:	57                   	push   edi
c0021a3e:	56                   	push   esi
c0021a3f:	53                   	push   ebx
c0021a40:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021a44:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021a48:	39 0d e0 27 03 c0    	cmp    DWORD PTR ds:0xc00327e0,ecx
c0021a4e:	75 08                	jne    c0021a58 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c0021a50:	38 05 54 e6 02 c0    	cmp    BYTE PTR ds:0xc002e654,al
c0021a56:	74 2b                	je     c0021a83 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c0021a58:	83 ec 0c             	sub    esp,0xc
c0021a5b:	a2 54 e6 02 c0       	mov    ds:0xc002e654,al
c0021a60:	68 00 28 03 c0       	push   0xc0032800
c0021a65:	0f be c0             	movsx  eax,al
c0021a68:	6a 01                	push   0x1
c0021a6a:	89 0d e0 27 03 c0    	mov    DWORD PTR ds:0xc00327e0,ecx
c0021a70:	31 db                	xor    ebx,ebx
c0021a72:	53                   	push   ebx
c0021a73:	51                   	push   ecx
c0021a74:	ff 34 85 bc f5 02 c0 	push   DWORD PTR [eax*4-0x3ffd0a44]
c0021a7b:	e8 68 48 ff ff       	call   c00162e8 <LogicalDisk::read(unsigned long long, int, void*)>
c0021a80:	83 c4 20             	add    esp,0x20
c0021a83:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0021a87:	be 00 28 03 c0       	mov    esi,0xc0032800
c0021a8c:	b9 00 08 00 00       	mov    ecx,0x800
c0021a91:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021a93:	5b                   	pop    ebx
c0021a94:	5e                   	pop    esi
c0021a95:	5f                   	pop    edi
c0021a96:	c3                   	ret    
c0021a97:	90                   	nop

c0021a98 <ISO9660::tryMount(LogicalDisk*, int)>:
c0021a98:	81 ec 10 08 00 00    	sub    esp,0x810
c0021a9e:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0021aa5:	83 c0 41             	add    eax,0x41
c0021aa8:	0f be c0             	movsx  eax,al
c0021aab:	50                   	push   eax
c0021aac:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021ab0:	50                   	push   eax
c0021ab1:	6a 10                	push   0x10
c0021ab3:	e8 85 ff ff ff       	call   c0021a3d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021ab8:	83 c4 10             	add    esp,0x10
c0021abb:	31 c0                	xor    eax,eax
c0021abd:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021ac2:	75 1d                	jne    c0021ae1 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021ac4:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0021ac9:	75 16                	jne    c0021ae1 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021acb:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021ad0:	75 0f                	jne    c0021ae1 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021ad2:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021ad7:	75 08                	jne    c0021ae1 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021ad9:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021ade:	0f 94 c0             	sete   al
c0021ae1:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021ae7:	c3                   	ret    

c0021ae8 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021ae8:	55                   	push   ebp
c0021ae9:	57                   	push   edi
c0021aea:	56                   	push   esi
c0021aeb:	53                   	push   ebx
c0021aec:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021af2:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021af9:	85 ed                	test   ebp,ebp
c0021afb:	0f 84 da 01 00 00    	je     c0021cdb <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021b01:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021b09:	0f 84 cc 01 00 00    	je     c0021cdb <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021b0f:	b8 01 00 00 00       	mov    eax,0x1
c0021b14:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021b18:	0f 85 c2 01 00 00    	jne    c0021ce0 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021b1e:	31 d2                	xor    edx,edx
c0021b20:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021b27:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021b2a:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0021b2d:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0021b30:	89 04 24             	mov    DWORD PTR [esp],eax
c0021b33:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021b37:	01 c8                	add    eax,ecx
c0021b39:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021b3c:	11 da                	adc    edx,ebx
c0021b3e:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0021b42:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021b46:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021b4a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021b4e:	19 d7                	sbb    edi,edx
c0021b50:	72 11                	jb     c0021b63 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c0021b52:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021b55:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021b59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021b5d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021b61:	eb 0c                	jmp    c0021b6f <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021b63:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0021b67:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021b6b:	29 ce                	sub    esi,ecx
c0021b6d:	19 df                	sbb    edi,ebx
c0021b6f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021b72:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021b75:	0f a4 c2 0b          	shld   edx,eax,0xb
c0021b79:	c1 e0 0b             	shl    eax,0xb
c0021b7c:	01 c8                	add    eax,ecx
c0021b7e:	11 da                	adc    edx,ebx
c0021b80:	89 04 24             	mov    DWORD PTR [esp],eax
c0021b83:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021b87:	51                   	push   ecx
c0021b88:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021b8c:	50                   	push   eax
c0021b8d:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0021b91:	53                   	push   ebx
c0021b92:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021b96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021b9a:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021b9e:	50                   	push   eax
c0021b9f:	e8 99 fe ff ff       	call   c0021a3d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021ba4:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021ba7:	b8 00 08 00 00       	mov    eax,0x800
c0021bac:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0021bb2:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c0021bb6:	29 d0                	sub    eax,edx
c0021bb8:	83 c4 10             	add    esp,0x10
c0021bbb:	89 f9                	mov    ecx,edi
c0021bbd:	39 c6                	cmp    esi,eax
c0021bbf:	83 d9 00             	sbb    ecx,0x0
c0021bc2:	7d 1b                	jge    c0021bdf <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c0021bc4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0021bc9:	75 12                	jne    c0021bdd <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c0021bcb:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021bd2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021bd8:	e9 fa 00 00 00       	jmp    c0021cd7 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021bdd:	89 f0                	mov    eax,esi
c0021bdf:	01 d3                	add    ebx,edx
c0021be1:	31 d2                	xor    edx,edx
c0021be3:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0021be7:	39 c2                	cmp    edx,eax
c0021be9:	7d 14                	jge    c0021bff <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c0021beb:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021bf2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021bf6:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021bf9:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021bfc:	42                   	inc    edx
c0021bfd:	eb e8                	jmp    c0021be7 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c0021bff:	89 c2                	mov    edx,eax
c0021c01:	85 c0                	test   eax,eax
c0021c03:	79 02                	jns    c0021c07 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c0021c05:	31 d2                	xor    edx,edx
c0021c07:	01 c2                	add    edx,eax
c0021c09:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0021c0c:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c0021c13:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0021c17:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0021c1b:	99                   	cdq    
c0021c1c:	01 c1                	add    ecx,eax
c0021c1e:	11 d3                	adc    ebx,edx
c0021c20:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021c24:	29 c6                	sub    esi,eax
c0021c26:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0021c2a:	19 d7                	sbb    edi,edx
c0021c2c:	89 34 24             	mov    DWORD PTR [esp],esi
c0021c2f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021c33:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021c38:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021c3b:	b8 00 00 00 00       	mov    eax,0x0
c0021c40:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021c44:	7d 43                	jge    c0021c89 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c0021c46:	52                   	push   edx
c0021c47:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021c4b:	50                   	push   eax
c0021c4c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021c50:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021c54:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021c58:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021c5c:	50                   	push   eax
c0021c5d:	e8 db fd ff ff       	call   c0021a3d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021c62:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021c6a:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021c6f:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c0021c77:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021c7f:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021c84:	83 c4 10             	add    esp,0x10
c0021c87:	eb aa                	jmp    c0021c33 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c0021c89:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c8d:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021c90:	74 2a                	je     c0021cbc <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c0021c92:	50                   	push   eax
c0021c93:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021c97:	50                   	push   eax
c0021c98:	8d 74 24 28          	lea    esi,[esp+0x28]
c0021c9c:	56                   	push   esi
c0021c9d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0021ca1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021ca5:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c0021ca9:	51                   	push   ecx
c0021caa:	e8 8e fd ff ff       	call   c0021a3d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021caf:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021cb3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021cb7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021cb9:	83 c4 10             	add    esp,0x10
c0021cbc:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021cc3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021cc7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021ccb:	89 18                	mov    DWORD PTR [eax],ebx
c0021ccd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021cd1:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021cd4:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021cd7:	31 c0                	xor    eax,eax
c0021cd9:	eb 05                	jmp    c0021ce0 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021cdb:	b8 04 00 00 00       	mov    eax,0x4
c0021ce0:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021ce6:	5b                   	pop    ebx
c0021ce7:	5e                   	pop    esi
c0021ce8:	5f                   	pop    edi
c0021ce9:	5d                   	pop    ebp
c0021cea:	c3                   	ret    
c0021ceb:	90                   	nop

c0021cec <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021cec:	55                   	push   ebp
c0021ced:	57                   	push   edi
c0021cee:	56                   	push   esi
c0021cef:	53                   	push   ebx
c0021cf0:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021cf6:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c0021cfd:	85 ed                	test   ebp,ebp
c0021cff:	0f 84 51 02 00 00    	je     c0021f56 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021d05:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021d0d:	0f 84 43 02 00 00    	je     c0021f56 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021d13:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021d16:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c0021d19:	75 0a                	jne    c0021d25 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021d1b:	b8 07 00 00 00       	mov    eax,0x7
c0021d20:	e9 36 02 00 00       	jmp    c0021f5b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021d25:	50                   	push   eax
c0021d26:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021d2a:	50                   	push   eax
c0021d2b:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021d32:	53                   	push   ebx
c0021d33:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021d36:	c1 e0 0b             	shl    eax,0xb
c0021d39:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c0021d3c:	c1 e8 0b             	shr    eax,0xb
c0021d3f:	50                   	push   eax
c0021d40:	e8 f8 fc ff ff       	call   c0021a3d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021d45:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021d48:	83 c4 10             	add    esp,0x10
c0021d4b:	89 c1                	mov    ecx,eax
c0021d4d:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0021d50:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021d56:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021d59:	84 db                	test   bl,bl
c0021d5b:	0f 85 8b 00 00 00    	jne    c0021dec <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c0021d61:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c0021d67:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021d6a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0021d70:	29 c6                	sub    esi,eax
c0021d72:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0021d76:	89 f3                	mov    ebx,esi
c0021d78:	89 f1                	mov    ecx,esi
c0021d7a:	c1 fb 1f             	sar    ebx,0x1f
c0021d7d:	01 f0                	add    eax,esi
c0021d7f:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021d82:	11 da                	adc    edx,ebx
c0021d84:	89 04 24             	mov    DWORD PTR [esp],eax
c0021d87:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021d8b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021d8e:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021d91:	89 d8                	mov    eax,ebx
c0021d93:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c0021d97:	ba 00 00 00 00       	mov    edx,0x0
c0021d9c:	19 f8                	sbb    eax,edi
c0021d9e:	b8 00 00 00 00       	mov    eax,0x0
c0021da3:	73 08                	jae    c0021dad <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c0021da5:	89 f0                	mov    eax,esi
c0021da7:	89 fa                	mov    edx,edi
c0021da9:	29 c8                	sub    eax,ecx
c0021dab:	19 da                	sbb    edx,ebx
c0021dad:	89 d7                	mov    edi,edx
c0021daf:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021db2:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021db5:	09 c7                	or     edi,eax
c0021db7:	0f 84 5e ff ff ff    	je     c0021d1b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021dbd:	57                   	push   edi
c0021dbe:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021dc2:	50                   	push   eax
c0021dc3:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021dca:	53                   	push   ebx
c0021dcb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021dce:	c1 e0 0b             	shl    eax,0xb
c0021dd1:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0021dd5:	c1 e8 0b             	shr    eax,0xb
c0021dd8:	50                   	push   eax
c0021dd9:	e8 5f fc ff ff       	call   c0021a3d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021dde:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021de1:	83 c4 10             	add    esp,0x10
c0021de4:	25 ff 07 00 00       	and    eax,0x7ff
c0021de9:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021dec:	31 ff                	xor    edi,edi
c0021dee:	56                   	push   esi
c0021def:	6a 28                	push   0x28
c0021df1:	6a 00                	push   0x0
c0021df3:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021df7:	50                   	push   eax
c0021df8:	e8 53 e9 fd ff       	call   c0000750 <memset>
c0021dfd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021e00:	25 ff 07 00 00       	and    eax,0x7ff
c0021e05:	89 c6                	mov    esi,eax
c0021e07:	83 c6 21             	add    esi,0x21
c0021e0a:	83 d7 00             	adc    edi,0x0
c0021e0d:	83 c4 10             	add    esp,0x10
c0021e10:	31 c9                	xor    ecx,ecx
c0021e12:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c0021e19:	83 f9 28             	cmp    ecx,0x28
c0021e1c:	88 04 24             	mov    BYTE PTR [esp],al
c0021e1f:	0f 94 c2             	sete   dl
c0021e22:	88 d0                	mov    al,dl
c0021e24:	ba ff 07 00 00       	mov    edx,0x7ff
c0021e29:	39 f2                	cmp    edx,esi
c0021e2b:	ba 00 00 00 00       	mov    edx,0x0
c0021e30:	19 fa                	sbb    edx,edi
c0021e32:	0f 92 c2             	setb   dl
c0021e35:	09 c2                	or     edx,eax
c0021e37:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021e3b:	0f 94 c0             	sete   al
c0021e3e:	08 d0                	or     al,dl
c0021e40:	75 16                	jne    c0021e58 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021e42:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021e46:	74 10                	je     c0021e58 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021e48:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021e4b:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021e4f:	41                   	inc    ecx
c0021e50:	83 c6 01             	add    esi,0x1
c0021e53:	83 d7 00             	adc    edi,0x0
c0021e56:	eb ba                	jmp    c0021e12 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c0021e58:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021e5f:	83 ec 0c             	sub    esp,0xc
c0021e62:	8d 74 24 24          	lea    esi,[esp+0x24]
c0021e66:	56                   	push   esi
c0021e67:	e8 00 e9 fd ff       	call   c000076c <strlen>
c0021e6c:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c0021e73:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021e77:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021e7f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021e82:	5a                   	pop    edx
c0021e83:	25 ff 07 00 00       	and    eax,0x7ff
c0021e88:	59                   	pop    ecx
c0021e89:	01 f8                	add    eax,edi
c0021e8b:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021e91:	83 e0 02             	and    eax,0x2
c0021e94:	3c 01                	cmp    al,0x1
c0021e96:	19 c0                	sbb    eax,eax
c0021e98:	83 c0 02             	add    eax,0x2
c0021e9b:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021e9f:	56                   	push   esi
c0021ea0:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021ea4:	50                   	push   eax
c0021ea5:	e8 62 e9 fd ff       	call   c000080c <strcpy>
c0021eaa:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021eae:	83 c4 10             	add    esp,0x10
c0021eb1:	84 c0                	test   al,al
c0021eb3:	75 21                	jne    c0021ed6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c0021eb5:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021ebd:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021ec5:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021ecd:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021ed4:	eb 28                	jmp    c0021efe <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021ed6:	fe c8                	dec    al
c0021ed8:	75 24                	jne    c0021efe <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021eda:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021ee2:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021eea:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021ef2:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021ef9:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021efe:	8d 74 24 40          	lea    esi,[esp+0x40]
c0021f02:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c0021f09:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c0021f10:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021f12:	0f b6 f3             	movzx  esi,bl
c0021f15:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c0021f1c:	31 db                	xor    ebx,ebx
c0021f1e:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021f24:	89 df                	mov    edi,ebx
c0021f26:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c0021f29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021f2c:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c0021f2f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021f32:	39 c6                	cmp    esi,eax
c0021f34:	19 d7                	sbb    edi,edx
c0021f36:	72 10                	jb     c0021f48 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c0021f38:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0021f3f:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c0021f46:	eb 0a                	jmp    c0021f52 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c0021f48:	29 f0                	sub    eax,esi
c0021f4a:	19 da                	sbb    edx,ebx
c0021f4c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021f4f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021f52:	31 c0                	xor    eax,eax
c0021f54:	eb 05                	jmp    c0021f5b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021f56:	b8 04 00 00 00       	mov    eax,0x4
c0021f5b:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021f61:	5b                   	pop    ebx
c0021f62:	5e                   	pop    esi
c0021f63:	5f                   	pop    edi
c0021f64:	5d                   	pop    ebp
c0021f65:	c3                   	ret    

c0021f66 <readRoot(unsigned int*, unsigned int*, char)>:
c0021f66:	57                   	push   edi
c0021f67:	56                   	push   esi
c0021f68:	81 ec 38 08 00 00    	sub    esp,0x838
c0021f6e:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021f76:	50                   	push   eax
c0021f77:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021f7b:	50                   	push   eax
c0021f7c:	6a 10                	push   0x10
c0021f7e:	e8 ba fa ff ff       	call   c0021a3d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021f83:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c0021f8a:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c0021f8e:	b9 22 00 00 00       	mov    ecx,0x22
c0021f93:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021f95:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021f9c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021fa0:	89 10                	mov    DWORD PTR [eax],edx
c0021fa2:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021fa9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021fad:	89 10                	mov    DWORD PTR [eax],edx
c0021faf:	81 c4 44 08 00 00    	add    esp,0x844
c0021fb5:	b0 01                	mov    al,0x1
c0021fb7:	5e                   	pop    esi
c0021fb8:	5f                   	pop    edi
c0021fb9:	c3                   	ret    

c0021fba <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021fba:	55                   	push   ebp
c0021fbb:	57                   	push   edi
c0021fbc:	56                   	push   esi
c0021fbd:	53                   	push   ebx
c0021fbe:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021fc4:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021fcb:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021fd2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021fd6:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021fda:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021fde:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021fe2:	75 03                	jne    c0021fe7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021fe4:	83 c3 02             	add    ebx,0x2
c0021fe7:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021fea:	75 03                	jne    c0021fef <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021fec:	43                   	inc    ebx
c0021fed:	eb f8                	jmp    c0021fe7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021fef:	51                   	push   ecx
c0021ff0:	68 00 01 00 00       	push   0x100
c0021ff5:	6a 00                	push   0x0
c0021ff7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021ffb:	50                   	push   eax
c0021ffc:	e8 4f e7 fd ff       	call   c0000750 <memset>
c0022001:	83 c4 10             	add    esp,0x10
c0022004:	31 d2                	xor    edx,edx
c0022006:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0022009:	84 c0                	test   al,al
c002200b:	74 21                	je     c002202e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c002200d:	3c 2f                	cmp    al,0x2f
c002200f:	75 0b                	jne    c002201c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0022011:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0022015:	bd 01 00 00 00       	mov    ebp,0x1
c002201a:	eb 14                	jmp    c0022030 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c002201c:	8d 48 9f             	lea    ecx,[eax-0x61]
c002201f:	80 f9 19             	cmp    cl,0x19
c0022022:	77 03                	ja     c0022027 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0022024:	83 e8 20             	sub    eax,0x20
c0022027:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c002202b:	42                   	inc    edx
c002202c:	eb d8                	jmp    c0022006 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c002202e:	31 ed                	xor    ebp,ebp
c0022030:	83 ec 0c             	sub    esp,0xc
c0022033:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c002203a:	e8 4d d8 fe ff       	call   c000f88c <malloc>
c002203f:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0022046:	89 c6                	mov    esi,eax
c0022048:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c002204e:	c1 ef 0b             	shr    edi,0xb
c0022051:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0022058:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c002205c:	83 c4 10             	add    esp,0x10
c002205f:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0022064:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022068:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c002206f:	74 28                	je     c0022099 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0022071:	52                   	push   edx
c0022072:	57                   	push   edi
c0022073:	50                   	push   eax
c0022074:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022078:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c002207f:	e8 b9 f9 ff ff       	call   c0021a3d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022084:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022088:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c002208f:	05 00 08 00 00       	add    eax,0x800
c0022094:	83 c4 10             	add    esp,0x10
c0022097:	eb cb                	jmp    c0022064 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0022099:	83 ec 0c             	sub    esp,0xc
c002209c:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00220a0:	57                   	push   edi
c00220a1:	e8 c6 e6 fd ff       	call   c000076c <strlen>
c00220a6:	50                   	push   eax
c00220a7:	57                   	push   edi
c00220a8:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00220af:	56                   	push   esi
c00220b0:	e8 46 f9 ff ff       	call   c00219fb <__memmem(unsigned char*, int, unsigned char*, int)>
c00220b5:	83 c4 20             	add    esp,0x20
c00220b8:	85 c0                	test   eax,eax
c00220ba:	75 13                	jne    c00220cf <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c00220bc:	83 ec 0c             	sub    esp,0xc
c00220bf:	56                   	push   esi
c00220c0:	e8 d7 d7 fe ff       	call   c000f89c <free>
c00220c5:	83 c4 10             	add    esp,0x10
c00220c8:	31 c0                	xor    eax,eax
c00220ca:	e9 b3 00 00 00       	jmp    c0022182 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00220cf:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c00220d3:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c00220d7:	c1 e7 08             	shl    edi,0x8
c00220da:	c1 e2 10             	shl    edx,0x10
c00220dd:	09 d7                	or     edi,edx
c00220df:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c00220e3:	09 d7                	or     edi,edx
c00220e5:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c00220e9:	c1 e2 18             	shl    edx,0x18
c00220ec:	09 d7                	or     edi,edx
c00220ee:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c00220f2:	89 d1                	mov    ecx,edx
c00220f4:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c00220f8:	c1 e1 08             	shl    ecx,0x8
c00220fb:	c1 e2 10             	shl    edx,0x10
c00220fe:	09 ca                	or     edx,ecx
c0022100:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0022104:	09 ca                	or     edx,ecx
c0022106:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c002210a:	c1 e1 18             	shl    ecx,0x18
c002210d:	09 ca                	or     edx,ecx
c002210f:	89 e9                	mov    ecx,ebp
c0022111:	84 c9                	test   cl,cl
c0022113:	74 3c                	je     c0022151 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0022115:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0022119:	83 ec 0c             	sub    esp,0xc
c002211c:	56                   	push   esi
c002211d:	e8 7a d7 fe ff       	call   c000f89c <free>
c0022122:	83 c4 0c             	add    esp,0xc
c0022125:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002212c:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0022131:	50                   	push   eax
c0022132:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0022139:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0022140:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022144:	52                   	push   edx
c0022145:	57                   	push   edi
c0022146:	53                   	push   ebx
c0022147:	e8 6e fe ff ff       	call   c0021fba <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c002214c:	83 c4 20             	add    esp,0x20
c002214f:	eb 31                	jmp    c0022182 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0022151:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0022154:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c002215b:	d0 e8                	shr    al,1
c002215d:	89 3b                	mov    DWORD PTR [ebx],edi
c002215f:	83 e0 01             	and    eax,0x1
c0022162:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0022169:	83 ec 0c             	sub    esp,0xc
c002216c:	89 13                	mov    DWORD PTR [ebx],edx
c002216e:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0022175:	89 03                	mov    DWORD PTR [ebx],eax
c0022177:	56                   	push   esi
c0022178:	e8 1f d7 fe ff       	call   c000f89c <free>
c002217d:	83 c4 10             	add    esp,0x10
c0022180:	b0 01                	mov    al,0x1
c0022182:	81 c4 1c 01 00 00    	add    esp,0x11c
c0022188:	5b                   	pop    ebx
c0022189:	5e                   	pop    esi
c002218a:	5f                   	pop    edi
c002218b:	5d                   	pop    ebp
c002218c:	c3                   	ret    

c002218d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c002218d:	55                   	push   ebp
c002218e:	57                   	push   edi
c002218f:	56                   	push   esi
c0022190:	53                   	push   ebx
c0022191:	83 ec 20             	sub    esp,0x20
c0022194:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022198:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c002219c:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00221a0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00221a8:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00221b0:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c00221b5:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c00221bb:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c00221c1:	57                   	push   edi
c00221c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00221c6:	50                   	push   eax
c00221c7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00221cb:	50                   	push   eax
c00221cc:	e8 95 fd ff ff       	call   c0021f66 <readRoot(unsigned int*, unsigned int*, char)>
c00221d1:	5a                   	pop    edx
c00221d2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00221d6:	e8 91 e5 fd ff       	call   c000076c <strlen>
c00221db:	83 c4 10             	add    esp,0x10
c00221de:	83 f8 03             	cmp    eax,0x3
c00221e1:	77 17                	ja     c00221fa <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c00221e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00221e7:	89 03                	mov    DWORD PTR [ebx],eax
c00221e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00221ed:	89 06                	mov    DWORD PTR [esi],eax
c00221ef:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c00221f6:	b0 01                	mov    al,0x1
c00221f8:	eb 19                	jmp    c0022213 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c00221fa:	50                   	push   eax
c00221fb:	55                   	push   ebp
c00221fc:	57                   	push   edi
c00221fd:	56                   	push   esi
c00221fe:	53                   	push   ebx
c00221ff:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022203:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022207:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002220b:	e8 aa fd ff ff       	call   c0021fba <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0022210:	83 c4 20             	add    esp,0x20
c0022213:	83 c4 1c             	add    esp,0x1c
c0022216:	5b                   	pop    ebx
c0022217:	5e                   	pop    esi
c0022218:	5f                   	pop    edi
c0022219:	5d                   	pop    ebp
c002221a:	c3                   	ret    
c002221b:	90                   	nop

c002221c <ISO9660::open(char const*, void**, FileOpenMode)>:
c002221c:	57                   	push   edi
c002221d:	56                   	push   esi
c002221e:	53                   	push   ebx
c002221f:	83 ec 10             	sub    esp,0x10
c0022222:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022226:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002222a:	85 ff                	test   edi,edi
c002222c:	0f 84 9d 00 00 00    	je     c00222cf <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0022232:	85 f6                	test   esi,esi
c0022234:	0f 84 95 00 00 00    	je     c00222cf <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c002223a:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c002223f:	74 17                	je     c0022258 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0022241:	83 ec 0c             	sub    esp,0xc
c0022244:	68 93 d2 02 c0       	push   0xc002d293
c0022249:	e8 1d 07 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c002224e:	83 c4 10             	add    esp,0x10
c0022251:	b8 03 00 00 00       	mov    eax,0x3
c0022256:	eb 7c                	jmp    c00222d4 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022258:	83 ec 0c             	sub    esp,0xc
c002225b:	6a 1c                	push   0x1c
c002225d:	e8 2a d6 fe ff       	call   c000f88c <malloc>
c0022262:	89 07                	mov    DWORD PTR [edi],eax
c0022264:	89 c3                	mov    ebx,eax
c0022266:	58                   	pop    eax
c0022267:	8d 44 24 18          	lea    eax,[esp+0x18]
c002226b:	50                   	push   eax
c002226c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c002226f:	50                   	push   eax
c0022270:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022274:	50                   	push   eax
c0022275:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022279:	50                   	push   eax
c002227a:	56                   	push   esi
c002227b:	e8 0d ff ff ff       	call   c002218d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022280:	83 c4 20             	add    esp,0x20
c0022283:	84 c0                	test   al,al
c0022285:	74 07                	je     c002228e <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c0022287:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002228c:	74 0b                	je     c0022299 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c002228e:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022292:	b8 01 00 00 00       	mov    eax,0x1
c0022297:	eb 3b                	jmp    c00222d4 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022299:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002229d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00222a1:	89 03                	mov    DWORD PTR [ebx],eax
c00222a3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00222aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00222ae:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00222b5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00222bc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00222bf:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00222c6:	8a 06                	mov    al,BYTE PTR [esi]
c00222c8:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00222cb:	31 c0                	xor    eax,eax
c00222cd:	eb 05                	jmp    c00222d4 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00222cf:	b8 04 00 00 00       	mov    eax,0x4
c00222d4:	83 c4 10             	add    esp,0x10
c00222d7:	5b                   	pop    ebx
c00222d8:	5e                   	pop    esi
c00222d9:	5f                   	pop    edi
c00222da:	c3                   	ret    
c00222db:	90                   	nop

c00222dc <ISO9660::exists(char const*)>:
c00222dc:	83 ec 28             	sub    esp,0x28
c00222df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00222e3:	8d 54 24 18          	lea    edx,[esp+0x18]
c00222e7:	52                   	push   edx
c00222e8:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00222eb:	52                   	push   edx
c00222ec:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00222f0:	52                   	push   edx
c00222f1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00222f5:	52                   	push   edx
c00222f6:	50                   	push   eax
c00222f7:	e8 91 fe ff ff       	call   c002218d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00222fc:	83 c4 3c             	add    esp,0x3c
c00222ff:	c3                   	ret    

c0022300 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0022300:	56                   	push   esi
c0022301:	53                   	push   ebx
c0022302:	83 ec 14             	sub    esp,0x14
c0022305:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022309:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002230d:	85 db                	test   ebx,ebx
c002230f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0022313:	0f 94 c2             	sete   dl
c0022316:	85 f6                	test   esi,esi
c0022318:	0f 94 c0             	sete   al
c002231b:	08 c2                	or     dl,al
c002231d:	75 68                	jne    c0022387 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c002231f:	85 c9                	test   ecx,ecx
c0022321:	74 64                	je     c0022387 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022323:	83 ec 0c             	sub    esp,0xc
c0022326:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0022329:	8d 44 24 18          	lea    eax,[esp+0x18]
c002232d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022333:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002233a:	50                   	push   eax
c002233b:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c002233e:	50                   	push   eax
c002233f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022343:	50                   	push   eax
c0022344:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022348:	50                   	push   eax
c0022349:	51                   	push   ecx
c002234a:	e8 3e fe ff ff       	call   c002218d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002234f:	83 c4 20             	add    esp,0x20
c0022352:	ba 01 00 00 00       	mov    edx,0x1
c0022357:	84 c0                	test   al,al
c0022359:	74 31                	je     c002238c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002235b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002235f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022366:	89 03                	mov    DWORD PTR [ebx],eax
c0022368:	ba 00 00 00 00       	mov    edx,0x0
c002236d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022371:	85 c0                	test   eax,eax
c0022373:	0f 95 06             	setne  BYTE PTR [esi]
c0022376:	74 14                	je     c002238c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022378:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c002237e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022385:	eb 05                	jmp    c002238c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022387:	ba 04 00 00 00       	mov    edx,0x4
c002238c:	83 c4 14             	add    esp,0x14
c002238f:	89 d0                	mov    eax,edx
c0022391:	5b                   	pop    ebx
c0022392:	5e                   	pop    esi
c0022393:	c3                   	ret    

c0022394 <ISO9660::openDir(char const*, void**)>:
c0022394:	57                   	push   edi
c0022395:	56                   	push   esi
c0022396:	53                   	push   ebx
c0022397:	83 ec 10             	sub    esp,0x10
c002239a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002239e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00223a2:	85 ff                	test   edi,edi
c00223a4:	0f 84 95 00 00 00    	je     c002243f <ISO9660::openDir(char const*, void**)+0xab>
c00223aa:	85 f6                	test   esi,esi
c00223ac:	0f 84 8d 00 00 00    	je     c002243f <ISO9660::openDir(char const*, void**)+0xab>
c00223b2:	83 ec 0c             	sub    esp,0xc
c00223b5:	6a 1c                	push   0x1c
c00223b7:	e8 d0 d4 fe ff       	call   c000f88c <malloc>
c00223bc:	89 07                	mov    DWORD PTR [edi],eax
c00223be:	89 c3                	mov    ebx,eax
c00223c0:	59                   	pop    ecx
c00223c1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00223c5:	50                   	push   eax
c00223c6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00223c9:	50                   	push   eax
c00223ca:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00223ce:	50                   	push   eax
c00223cf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00223d3:	50                   	push   eax
c00223d4:	56                   	push   esi
c00223d5:	e8 b3 fd ff ff       	call   c002218d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00223da:	83 c4 20             	add    esp,0x20
c00223dd:	84 c0                	test   al,al
c00223df:	74 07                	je     c00223e8 <ISO9660::openDir(char const*, void**)+0x54>
c00223e1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00223e6:	75 21                	jne    c0022409 <ISO9660::openDir(char const*, void**)+0x75>
c00223e8:	0f b6 c0             	movzx  eax,al
c00223eb:	52                   	push   edx
c00223ec:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00223f0:	50                   	push   eax
c00223f1:	68 b9 d2 02 c0       	push   0xc002d2b9
c00223f6:	e8 70 05 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c00223fb:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00223ff:	83 c4 10             	add    esp,0x10
c0022402:	b8 01 00 00 00       	mov    eax,0x1
c0022407:	eb 3b                	jmp    c0022444 <ISO9660::openDir(char const*, void**)+0xb0>
c0022409:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002240d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022411:	89 03                	mov    DWORD PTR [ebx],eax
c0022413:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002241a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002241e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022425:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002242c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002242f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022436:	8a 06                	mov    al,BYTE PTR [esi]
c0022438:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002243b:	31 c0                	xor    eax,eax
c002243d:	eb 05                	jmp    c0022444 <ISO9660::openDir(char const*, void**)+0xb0>
c002243f:	b8 04 00 00 00       	mov    eax,0x4
c0022444:	83 c4 10             	add    esp,0x10
c0022447:	5b                   	pop    ebx
c0022448:	5e                   	pop    esi
c0022449:	5f                   	pop    edi
c002244a:	c3                   	ret    
c002244b:	90                   	nop

c002244c <ISO9660::ISO9660()>:
c002244c:	83 ec 0c             	sub    esp,0xc
c002244f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022453:	83 ec 0c             	sub    esp,0xc
c0022456:	50                   	push   eax
c0022457:	e8 1a 08 ff ff       	call   c0012c76 <Filesystem::Filesystem()>
c002245c:	83 c4 10             	add    esp,0x10
c002245f:	ba dc d2 02 c0       	mov    edx,0xc002d2dc
c0022464:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022468:	89 10                	mov    DWORD PTR [eax],edx
c002246a:	90                   	nop
c002246b:	83 c4 0c             	add    esp,0xc
c002246e:	c3                   	ret    
c002246f:	90                   	nop

c0022470 <SoundChannel::SoundChannel(int, int, int, int)>:
c0022470:	83 ec 1c             	sub    esp,0x1c
c0022473:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022477:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002247b:	89 10                	mov    DWORD PTR [eax],edx
c002247d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022481:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022485:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022488:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002248c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022490:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022493:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0022498:	75 23                	jne    c00224bd <SoundChannel::SoundChannel(int, int, int, int)+0x4d>
c002249a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002249e:	8b 10                	mov    edx,DWORD PTR [eax]
c00224a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00224a7:	0f af c2             	imul   eax,edx
c00224aa:	85 c0                	test   eax,eax
c00224ac:	79 03                	jns    c00224b1 <SoundChannel::SoundChannel(int, int, int, int)+0x41>
c00224ae:	83 c0 03             	add    eax,0x3
c00224b1:	c1 f8 02             	sar    eax,0x2
c00224b4:	05 a0 0f 00 00       	add    eax,0xfa0
c00224b9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00224bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224c1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00224c5:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00224c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224cc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00224d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224d7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00224de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224e2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00224e5:	c1 e0 02             	shl    eax,0x2
c00224e8:	83 ec 0c             	sub    esp,0xc
c00224eb:	50                   	push   eax
c00224ec:	e8 9b d3 fe ff       	call   c000f88c <malloc>
c00224f1:	83 c4 10             	add    esp,0x10
c00224f4:	89 c2                	mov    edx,eax
c00224f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224fa:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00224fd:	83 ec 04             	sub    esp,0x4
c0022500:	8d 44 24 08          	lea    eax,[esp+0x8]
c0022504:	50                   	push   eax
c0022505:	6a 01                	push   0x1
c0022507:	6a 04                	push   0x4
c0022509:	e8 57 66 fe ff       	call   c0008b65 <src_new>
c002250e:	83 c4 10             	add    esp,0x10
c0022511:	89 c2                	mov    edx,eax
c0022513:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022517:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c002251a:	83 ec 0c             	sub    esp,0xc
c002251d:	68 3c d3 02 c0       	push   0xc002d33c
c0022522:	e8 44 04 ff ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0022527:	83 c4 10             	add    esp,0x10
c002252a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002252e:	85 c0                	test   eax,eax
c0022530:	74 10                	je     c0022542 <SoundChannel::SoundChannel(int, int, int, int)+0xd2>
c0022532:	83 ec 0c             	sub    esp,0xc
c0022535:	68 52 d3 02 c0       	push   0xc002d352
c002253a:	e8 62 7e ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c002253f:	83 c4 10             	add    esp,0x10
c0022542:	a0 00 34 03 c0       	mov    al,ds:0xc0033400
c0022547:	83 f0 01             	xor    eax,0x1
c002254a:	84 c0                	test   al,al
c002254c:	74 57                	je     c00225a5 <SoundChannel::SoundChannel(int, int, int, int)+0x135>
c002254e:	a1 6c d3 02 c0       	mov    eax,ds:0xc002d36c
c0022553:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022557:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002255f:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0022567:	7f 35                	jg     c002259e <SoundChannel::SoundChannel(int, int, int, int)+0x12e>
c0022569:	83 ec 0c             	sub    esp,0xc
c002256c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022570:	e8 4a 56 00 00       	call   c0027bbf <__floatsisf>
c0022575:	83 c4 10             	add    esp,0x10
c0022578:	8b 15 6c d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d36c
c002257e:	83 ec 08             	sub    esp,0x8
c0022581:	52                   	push   edx
c0022582:	50                   	push   eax
c0022583:	e8 49 52 00 00       	call   c00277d1 <__mulsf3>
c0022588:	83 c4 10             	add    esp,0x10
c002258b:	89 c2                	mov    edx,eax
c002258d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022591:	89 14 85 00 30 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd000],edx
c0022598:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002259c:	eb c1                	jmp    c002255f <SoundChannel::SoundChannel(int, int, int, int)+0xef>
c002259e:	c6 05 00 34 03 c0 01 	mov    BYTE PTR ds:0xc0033400,0x1
c00225a5:	90                   	nop
c00225a6:	83 c4 1c             	add    esp,0x1c
c00225a9:	c3                   	ret    

c00225aa <SoundChannel::~SoundChannel()>:
c00225aa:	83 ec 0c             	sub    esp,0xc
c00225ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225b1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00225b4:	83 ec 0c             	sub    esp,0xc
c00225b7:	50                   	push   eax
c00225b8:	e8 df d2 fe ff       	call   c000f89c <free>
c00225bd:	83 c4 10             	add    esp,0x10
c00225c0:	90                   	nop
c00225c1:	83 c4 0c             	add    esp,0xc
c00225c4:	c3                   	ret    
c00225c5:	90                   	nop

c00225c6 <SoundChannel::getSampleRate()>:
c00225c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00225ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00225cc:	c3                   	ret    
c00225cd:	90                   	nop

c00225ce <SoundChannel::getBits()>:
c00225ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00225d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00225d5:	c3                   	ret    

c00225d6 <SoundChannel::getBufferUsed()>:
c00225d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00225da:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00225dd:	c3                   	ret    

c00225de <SoundChannel::getBufferSize()>:
c00225de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00225e2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00225e5:	c3                   	ret    

c00225e6 <SoundChannel::unbuffer(float*, int, int)>:
c00225e6:	56                   	push   esi
c00225e7:	53                   	push   ebx
c00225e8:	83 ec 40             	sub    esp,0x40
c00225eb:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00225ef:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00225f2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00225f6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00225f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00225fd:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022601:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0022605:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0022609:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002260d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022611:	e8 a9 55 00 00       	call   c0027bbf <__floatsisf>
c0022616:	5a                   	pop    edx
c0022617:	89 c6                	mov    esi,eax
c0022619:	ff 33                	push   DWORD PTR [ebx]
c002261b:	e8 9f 55 00 00       	call   c0027bbf <__floatsisf>
c0022620:	59                   	pop    ecx
c0022621:	5a                   	pop    edx
c0022622:	50                   	push   eax
c0022623:	56                   	push   esi
c0022624:	e8 6b 53 00 00       	call   c0027994 <__divsf3>
c0022629:	89 04 24             	mov    DWORD PTR [esp],eax
c002262c:	e8 5e 68 00 00       	call   c0028e8f <__extendsfdf2>
c0022631:	59                   	pop    ecx
c0022632:	5e                   	pop    esi
c0022633:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022637:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c002263b:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0022643:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022647:	50                   	push   eax
c0022648:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c002264b:	e8 0a 61 fe ff       	call   c000875a <src_process>
c0022650:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022654:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0022657:	83 c4 0c             	add    esp,0xc
c002265a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c002265d:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0022660:	29 d0                	sub    eax,edx
c0022662:	c1 e0 02             	shl    eax,0x2
c0022665:	50                   	push   eax
c0022666:	8d 04 91             	lea    eax,[ecx+edx*4]
c0022669:	50                   	push   eax
c002266a:	51                   	push   ecx
c002266b:	e8 18 e0 fd ff       	call   c0000688 <memmove>
c0022670:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022674:	83 c4 44             	add    esp,0x44
c0022677:	5b                   	pop    ebx
c0022678:	5e                   	pop    esi
c0022679:	c3                   	ret    

c002267a <SoundChannel::buffer16(short*, int)>:
c002267a:	55                   	push   ebp
c002267b:	57                   	push   edi
c002267c:	56                   	push   esi
c002267d:	53                   	push   ebx
c002267e:	83 ec 1c             	sub    esp,0x1c
c0022681:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0022685:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0022688:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c002268b:	0f 84 d2 00 00 00    	je     c0022763 <SoundChannel::buffer16(short*, int)+0xe9>
c0022691:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0022695:	85 ed                	test   ebp,ebp
c0022697:	0f 8e c6 00 00 00    	jle    c0022763 <SoundChannel::buffer16(short*, int)+0xe9>
c002269d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00226a1:	bd 00 00 00 38       	mov    ebp,0x38000000
c00226a6:	83 ec 0c             	sub    esp,0xc
c00226a9:	0f bf 00             	movsx  eax,WORD PTR [eax]
c00226ac:	50                   	push   eax
c00226ad:	e8 0d 55 00 00       	call   c0027bbf <__floatsisf>
c00226b2:	59                   	pop    ecx
c00226b3:	8d 4e 01             	lea    ecx,[esi+0x1]
c00226b6:	5f                   	pop    edi
c00226b7:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c00226ba:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c00226bd:	55                   	push   ebp
c00226be:	50                   	push   eax
c00226bf:	e8 0d 51 00 00       	call   c00277d1 <__mulsf3>
c00226c4:	83 c4 10             	add    esp,0x10
c00226c7:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c00226ca:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c00226cd:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c00226d0:	0f 84 99 00 00 00    	je     c002276f <SoundChannel::buffer16(short*, int)+0xf5>
c00226d6:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c00226db:	74 78                	je     c0022755 <SoundChannel::buffer16(short*, int)+0xdb>
c00226dd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00226e1:	83 ec 0c             	sub    esp,0xc
c00226e4:	0f bf 40 02          	movsx  eax,WORD PTR [eax+0x2]
c00226e8:	50                   	push   eax
c00226e9:	e8 d1 54 00 00       	call   c0027bbf <__floatsisf>
c00226ee:	5f                   	pop    edi
c00226ef:	8d 4e 01             	lea    ecx,[esi+0x1]
c00226f2:	5a                   	pop    edx
c00226f3:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c00226f6:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c00226f9:	55                   	push   ebp
c00226fa:	50                   	push   eax
c00226fb:	e8 d1 50 00 00       	call   c00277d1 <__mulsf3>
c0022700:	83 c4 10             	add    esp,0x10
c0022703:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0022706:	be 02 00 00 00       	mov    esi,0x2
c002270b:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c002270e:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0022711:	74 46                	je     c0022759 <SoundChannel::buffer16(short*, int)+0xdf>
c0022713:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0022717:	eb 36                	jmp    c002274f <SoundChannel::buffer16(short*, int)+0xd5>
c0022719:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002271d:	83 ec 0c             	sub    esp,0xc
c0022720:	0f bf 04 70          	movsx  eax,WORD PTR [eax+esi*2]
c0022724:	46                   	inc    esi
c0022725:	50                   	push   eax
c0022726:	e8 94 54 00 00       	call   c0027bbf <__floatsisf>
c002272b:	5a                   	pop    edx
c002272c:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c002272f:	59                   	pop    ecx
c0022730:	8d 4f 01             	lea    ecx,[edi+0x1]
c0022733:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0022736:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002273a:	50                   	push   eax
c002273b:	e8 91 50 00 00       	call   c00277d1 <__mulsf3>
c0022740:	83 c4 10             	add    esp,0x10
c0022743:	89 44 bd 00          	mov    DWORD PTR [ebp+edi*4+0x0],eax
c0022747:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c002274a:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c002274d:	74 0a                	je     c0022759 <SoundChannel::buffer16(short*, int)+0xdf>
c002274f:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
c0022753:	75 c4                	jne    c0022719 <SoundChannel::buffer16(short*, int)+0x9f>
c0022755:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0022759:	83 c4 1c             	add    esp,0x1c
c002275c:	89 f0                	mov    eax,esi
c002275e:	5b                   	pop    ebx
c002275f:	5e                   	pop    esi
c0022760:	5f                   	pop    edi
c0022761:	5d                   	pop    ebp
c0022762:	c3                   	ret    
c0022763:	83 c4 1c             	add    esp,0x1c
c0022766:	31 f6                	xor    esi,esi
c0022768:	5b                   	pop    ebx
c0022769:	89 f0                	mov    eax,esi
c002276b:	5e                   	pop    esi
c002276c:	5f                   	pop    edi
c002276d:	5d                   	pop    ebp
c002276e:	c3                   	ret    
c002276f:	be 01 00 00 00       	mov    esi,0x1
c0022774:	eb e3                	jmp    c0022759 <SoundChannel::buffer16(short*, int)+0xdf>

c0022776 <SoundChannel::buffer8(unsigned char*, int)>:
c0022776:	55                   	push   ebp
c0022777:	57                   	push   edi
c0022778:	56                   	push   esi
c0022779:	53                   	push   ebx
c002277a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002277e:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0022782:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022785:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022789:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c002278c:	74 7a                	je     c0022808 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c002278e:	85 ff                	test   edi,edi
c0022790:	7e 76                	jle    c0022808 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022792:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0022796:	8d 70 01             	lea    esi,[eax+0x1]
c0022799:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c002279c:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002279f:	8b 1c 9d 00 30 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd000]
c00227a6:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00227a9:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00227ac:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00227af:	74 5e                	je     c002280f <SoundChannel::buffer8(unsigned char*, int)+0x99>
c00227b1:	83 ff 01             	cmp    edi,0x1
c00227b4:	74 4b                	je     c0022801 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c00227b6:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00227ba:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00227bd:	8d 70 01             	lea    esi,[eax+0x1]
c00227c0:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00227c3:	8b 1c 9d 00 30 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd000]
c00227ca:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00227cd:	b8 02 00 00 00       	mov    eax,0x2
c00227d2:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00227d5:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00227d8:	75 23                	jne    c00227fd <SoundChannel::buffer8(unsigned char*, int)+0x87>
c00227da:	eb 27                	jmp    c0022803 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00227dc:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c00227e1:	8d 71 01             	lea    esi,[ecx+0x1]
c00227e4:	40                   	inc    eax
c00227e5:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00227e8:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c00227eb:	8b 1c 9d 00 30 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd000]
c00227f2:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c00227f5:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00227f8:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00227fb:	74 06                	je     c0022803 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00227fd:	39 c7                	cmp    edi,eax
c00227ff:	75 db                	jne    c00227dc <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022801:	89 f8                	mov    eax,edi
c0022803:	5b                   	pop    ebx
c0022804:	5e                   	pop    esi
c0022805:	5f                   	pop    edi
c0022806:	5d                   	pop    ebp
c0022807:	c3                   	ret    
c0022808:	5b                   	pop    ebx
c0022809:	31 c0                	xor    eax,eax
c002280b:	5e                   	pop    esi
c002280c:	5f                   	pop    edi
c002280d:	5d                   	pop    ebp
c002280e:	c3                   	ret    
c002280f:	b8 01 00 00 00       	mov    eax,0x1
c0022814:	eb ed                	jmp    c0022803 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0022816 <SoundDevice::SoundDevice(char const*)>:
c0022816:	83 ec 1c             	sub    esp,0x1c
c0022819:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002281d:	83 ec 08             	sub    esp,0x8
c0022820:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022824:	50                   	push   eax
c0022825:	e8 7e 17 ff ff       	call   c0013fa8 <Device::Device(char const*)>
c002282a:	83 c4 10             	add    esp,0x10
c002282d:	ba 6c d4 02 c0       	mov    edx,0xc002d46c
c0022832:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022836:	89 10                	mov    DWORD PTR [eax],edx
c0022838:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002283c:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0022846:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002284a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0022854:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002285c:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022861:	7f 19                	jg     c002287c <SoundDevice::SoundDevice(char const*)+0x66>
c0022863:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022867:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002286b:	83 c2 54             	add    edx,0x54
c002286e:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0022876:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002287a:	eb e0                	jmp    c002285c <SoundDevice::SoundDevice(char const*)+0x46>
c002287c:	90                   	nop
c002287d:	83 c4 1c             	add    esp,0x1c
c0022880:	c3                   	ret    
c0022881:	90                   	nop

c0022882 <SoundDevice::~SoundDevice()>:
c0022882:	53                   	push   ebx
c0022883:	83 ec 18             	sub    esp,0x18
c0022886:	ba 6c d4 02 c0       	mov    edx,0xc002d46c
c002288b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002288f:	89 10                	mov    DWORD PTR [eax],edx
c0022891:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022899:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c002289e:	7f 46                	jg     c00228e6 <SoundDevice::~SoundDevice()+0x64>
c00228a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00228a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00228a8:	83 c2 54             	add    edx,0x54
c00228ab:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c00228af:	85 c0                	test   eax,eax
c00228b1:	74 2d                	je     c00228e0 <SoundDevice::~SoundDevice()+0x5e>
c00228b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00228b7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00228bb:	83 c2 54             	add    edx,0x54
c00228be:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c00228c2:	85 db                	test   ebx,ebx
c00228c4:	74 1a                	je     c00228e0 <SoundDevice::~SoundDevice()+0x5e>
c00228c6:	83 ec 0c             	sub    esp,0xc
c00228c9:	53                   	push   ebx
c00228ca:	e8 db fc ff ff       	call   c00225aa <SoundChannel::~SoundChannel()>
c00228cf:	83 c4 10             	add    esp,0x10
c00228d2:	83 ec 08             	sub    esp,0x8
c00228d5:	6a 2c                	push   0x2c
c00228d7:	53                   	push   ebx
c00228d8:	e8 ae ff fe ff       	call   c001288b <operator delete(void*, unsigned long)>
c00228dd:	83 c4 10             	add    esp,0x10
c00228e0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00228e4:	eb b3                	jmp    c0022899 <SoundDevice::~SoundDevice()+0x17>
c00228e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00228ea:	83 ec 0c             	sub    esp,0xc
c00228ed:	50                   	push   eax
c00228ee:	e8 7f 13 ff ff       	call   c0013c72 <Device::~Device()>
c00228f3:	83 c4 10             	add    esp,0x10
c00228f6:	90                   	nop
c00228f7:	83 c4 18             	add    esp,0x18
c00228fa:	5b                   	pop    ebx
c00228fb:	c3                   	ret    

c00228fc <SoundDevice::~SoundDevice()>:
c00228fc:	83 ec 0c             	sub    esp,0xc
c00228ff:	83 ec 0c             	sub    esp,0xc
c0022902:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022906:	e8 77 ff ff ff       	call   c0022882 <SoundDevice::~SoundDevice()>
c002290b:	83 c4 10             	add    esp,0x10
c002290e:	83 ec 08             	sub    esp,0x8
c0022911:	68 e4 01 00 00       	push   0x1e4
c0022916:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002291a:	e8 6c ff fe ff       	call   c001288b <operator delete(void*, unsigned long)>
c002291f:	83 c4 10             	add    esp,0x10
c0022922:	83 c4 0c             	add    esp,0xc
c0022925:	c3                   	ret    

c0022926 <SoundDevice::getFreeChannelNum()>:
c0022926:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002292a:	31 c0                	xor    eax,eax
c002292c:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022934:	74 09                	je     c002293f <SoundDevice::getFreeChannelNum()+0x19>
c0022936:	40                   	inc    eax
c0022937:	83 f8 20             	cmp    eax,0x20
c002293a:	75 f0                	jne    c002292c <SoundDevice::getFreeChannelNum()+0x6>
c002293c:	83 c8 ff             	or     eax,0xffffffff
c002293f:	c3                   	ret    

c0022940 <SoundDevice::addChannel(SoundChannel*)>:
c0022940:	56                   	push   esi
c0022941:	53                   	push   ebx
c0022942:	51                   	push   ecx
c0022943:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022947:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002294b:	53                   	push   ebx
c002294c:	e8 d5 ff ff ff       	call   c0022926 <SoundDevice::getFreeChannelNum()>
c0022951:	5a                   	pop    edx
c0022952:	83 f8 ff             	cmp    eax,0xffffffff
c0022955:	74 51                	je     c00229a8 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022957:	85 f6                	test   esi,esi
c0022959:	74 4d                	je     c00229a8 <SoundDevice::addChannel(SoundChannel*)+0x68>
c002295b:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022962:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022969:	75 30                	jne    c002299b <SoundDevice::addChannel(SoundChannel*)+0x5b>
c002296b:	83 ec 0c             	sub    esp,0xc
c002296e:	56                   	push   esi
c002296f:	e8 52 fc ff ff       	call   c00225c6 <SoundChannel::getSampleRate()>
c0022974:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c002297a:	89 34 24             	mov    DWORD PTR [esp],esi
c002297d:	e8 4c fc ff ff       	call   c00225ce <SoundChannel::getBits()>
c0022982:	83 c4 0c             	add    esp,0xc
c0022985:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c002298b:	8b 13                	mov    edx,DWORD PTR [ebx]
c002298d:	50                   	push   eax
c002298e:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022994:	53                   	push   ebx
c0022995:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0022998:	83 c4 10             	add    esp,0x10
c002299b:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c00229a1:	b8 01 00 00 00       	mov    eax,0x1
c00229a6:	eb 03                	jmp    c00229ab <SoundDevice::addChannel(SoundChannel*)+0x6b>
c00229a8:	83 c8 ff             	or     eax,0xffffffff
c00229ab:	5a                   	pop    edx
c00229ac:	5b                   	pop    ebx
c00229ad:	5e                   	pop    esi
c00229ae:	c3                   	ret    
c00229af:	90                   	nop

c00229b0 <SoundDevice::removeChannel(int)>:
c00229b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00229b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00229b8:	83 fa 1f             	cmp    edx,0x1f
c00229bb:	77 23                	ja     c00229e0 <SoundDevice::removeChannel(int)+0x30>
c00229bd:	8d 14 90             	lea    edx,[eax+edx*4]
c00229c0:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c00229c7:	74 17                	je     c00229e0 <SoundDevice::removeChannel(int)+0x30>
c00229c9:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c00229d3:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c00229d9:	75 05                	jne    c00229e0 <SoundDevice::removeChannel(int)+0x30>
c00229db:	8b 00                	mov    eax,DWORD PTR [eax]
c00229dd:	ff 60 28             	jmp    DWORD PTR [eax+0x28]
c00229e0:	c3                   	ret    
c00229e1:	90                   	nop

c00229e2 <SoundDevice::floatTo16(float*, short*, int)>:
c00229e2:	57                   	push   edi
c00229e3:	56                   	push   esi
c00229e4:	53                   	push   ebx
c00229e5:	31 db                	xor    ebx,ebx
c00229e7:	83 ec 10             	sub    esp,0x10
c00229ea:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00229ee:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00229f2:	0f 8d d0 00 00 00    	jge    c0022ac8 <SoundDevice::floatTo16(float*, short*, int)+0xe6>
c00229f8:	83 ec 0c             	sub    esp,0xc
c00229fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00229ff:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022a02:	e8 88 64 00 00       	call   c0028e8f <__extendsfdf2>
c0022a07:	83 c4 10             	add    esp,0x10
c0022a0a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022a0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022a12:	68 00 00 f0 3f       	push   0x3ff00000
c0022a17:	6a 00                	push   0x0
c0022a19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a21:	e8 f5 53 00 00       	call   c0027e1b <__adddf3>
c0022a26:	83 c4 10             	add    esp,0x10
c0022a29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022a2d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022a31:	68 00 00 e0 3f       	push   0x3fe00000
c0022a36:	6a 00                	push   0x0
c0022a38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a40:	e8 53 5a 00 00       	call   c0028498 <__muldf3>
c0022a45:	83 c4 10             	add    esp,0x10
c0022a48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022a4c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022a50:	68 c0 ff df 40       	push   0x40dfffc0
c0022a55:	6a 00                	push   0x0
c0022a57:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a5f:	e8 34 5a 00 00       	call   c0028498 <__muldf3>
c0022a64:	59                   	pop    ecx
c0022a65:	5f                   	pop    edi
c0022a66:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022a6a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022a6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a76:	e8 f0 62 00 00       	call   c0028d6b <__truncdfsf2>
c0022a7b:	5a                   	pop    edx
c0022a7c:	89 c7                	mov    edi,eax
c0022a7e:	59                   	pop    ecx
c0022a7f:	68 00 fe ff 46       	push   0x46fffe00
c0022a84:	50                   	push   eax
c0022a85:	e8 8b 53 00 00       	call   c0027e15 <__gesf2>
c0022a8a:	83 c4 10             	add    esp,0x10
c0022a8d:	85 c0                	test   eax,eax
c0022a8f:	78 08                	js     c0022a99 <SoundDevice::floatTo16(float*, short*, int)+0xb7>
c0022a91:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0022a97:	eb 29                	jmp    c0022ac2 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0022a99:	50                   	push   eax
c0022a9a:	50                   	push   eax
c0022a9b:	6a 00                	push   0x0
c0022a9d:	57                   	push   edi
c0022a9e:	e8 76 53 00 00       	call   c0027e19 <__lesf2>
c0022aa3:	83 c4 10             	add    esp,0x10
c0022aa6:	85 c0                	test   eax,eax
c0022aa8:	7f 08                	jg     c0022ab2 <SoundDevice::floatTo16(float*, short*, int)+0xd0>
c0022aaa:	66 c7 04 5e 00 00    	mov    WORD PTR [esi+ebx*2],0x0
c0022ab0:	eb 10                	jmp    c0022ac2 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0022ab2:	83 ec 0c             	sub    esp,0xc
c0022ab5:	57                   	push   edi
c0022ab6:	e8 71 64 00 00       	call   c0028f2c <lrintf>
c0022abb:	83 c4 10             	add    esp,0x10
c0022abe:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0022ac2:	43                   	inc    ebx
c0022ac3:	e9 26 ff ff ff       	jmp    c00229ee <SoundDevice::floatTo16(float*, short*, int)+0xc>
c0022ac8:	83 c4 10             	add    esp,0x10
c0022acb:	5b                   	pop    ebx
c0022acc:	5e                   	pop    esi
c0022acd:	5f                   	pop    edi
c0022ace:	c3                   	ret    
c0022acf:	90                   	nop

c0022ad0 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022ad0:	57                   	push   edi
c0022ad1:	56                   	push   esi
c0022ad2:	53                   	push   ebx
c0022ad3:	31 db                	xor    ebx,ebx
c0022ad5:	83 ec 10             	sub    esp,0x10
c0022ad8:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022adc:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022ae0:	0f 8d cb 00 00 00    	jge    c0022bb1 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0022ae6:	83 ec 0c             	sub    esp,0xc
c0022ae9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022aed:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022af0:	e8 9a 63 00 00       	call   c0028e8f <__extendsfdf2>
c0022af5:	83 c4 10             	add    esp,0x10
c0022af8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022afc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022b00:	68 00 00 f0 3f       	push   0x3ff00000
c0022b05:	6a 00                	push   0x0
c0022b07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b0b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b0f:	e8 07 53 00 00       	call   c0027e1b <__adddf3>
c0022b14:	83 c4 10             	add    esp,0x10
c0022b17:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022b1b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022b1f:	68 00 00 e0 3f       	push   0x3fe00000
c0022b24:	6a 00                	push   0x0
c0022b26:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b2e:	e8 65 59 00 00       	call   c0028498 <__muldf3>
c0022b33:	83 c4 10             	add    esp,0x10
c0022b36:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022b3a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022b3e:	68 00 00 60 40       	push   0x40600000
c0022b43:	6a 00                	push   0x0
c0022b45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b4d:	e8 46 59 00 00       	call   c0028498 <__muldf3>
c0022b52:	59                   	pop    ecx
c0022b53:	5f                   	pop    edi
c0022b54:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022b58:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022b5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b64:	e8 02 62 00 00       	call   c0028d6b <__truncdfsf2>
c0022b69:	5a                   	pop    edx
c0022b6a:	89 c7                	mov    edi,eax
c0022b6c:	59                   	pop    ecx
c0022b6d:	68 00 00 fe 42       	push   0x42fe0000
c0022b72:	50                   	push   eax
c0022b73:	e8 9d 52 00 00       	call   c0027e15 <__gesf2>
c0022b78:	83 c4 10             	add    esp,0x10
c0022b7b:	85 c0                	test   eax,eax
c0022b7d:	78 06                	js     c0022b85 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022b7f:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022b83:	eb 26                	jmp    c0022bab <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022b85:	50                   	push   eax
c0022b86:	50                   	push   eax
c0022b87:	6a 00                	push   0x0
c0022b89:	57                   	push   edi
c0022b8a:	e8 8a 52 00 00       	call   c0027e19 <__lesf2>
c0022b8f:	83 c4 10             	add    esp,0x10
c0022b92:	85 c0                	test   eax,eax
c0022b94:	7f 06                	jg     c0022b9c <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022b96:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022b9a:	eb 0f                	jmp    c0022bab <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022b9c:	83 ec 0c             	sub    esp,0xc
c0022b9f:	57                   	push   edi
c0022ba0:	e8 87 63 00 00       	call   c0028f2c <lrintf>
c0022ba5:	83 c4 10             	add    esp,0x10
c0022ba8:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022bab:	43                   	inc    ebx
c0022bac:	e9 2b ff ff ff       	jmp    c0022adc <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022bb1:	83 c4 10             	add    esp,0x10
c0022bb4:	5b                   	pop    ebx
c0022bb5:	5e                   	pop    esi
c0022bb6:	5f                   	pop    edi
c0022bb7:	c3                   	ret    

c0022bb8 <SoundDevice::getAudio(int, float*, float*)>:
c0022bb8:	55                   	push   ebp
c0022bb9:	57                   	push   edi
c0022bba:	56                   	push   esi
c0022bbb:	53                   	push   ebx
c0022bbc:	83 ec 28             	sub    esp,0x28
c0022bbf:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0022bc3:	68 70 d3 02 c0       	push   0xc002d370
c0022bc8:	e8 9e fd fe ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0022bcd:	59                   	pop    ecx
c0022bce:	5e                   	pop    esi
c0022bcf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0022bd3:	68 87 d3 02 c0       	push   0xc002d387
c0022bd8:	e8 8e fd fe ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0022bdd:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0022be1:	83 c4 0c             	add    esp,0xc
c0022be4:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
c0022beb:	56                   	push   esi
c0022bec:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022bf0:	68 a9 d3 02 c0       	push   0xc002d3a9
c0022bf5:	e8 71 fd fe ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0022bfa:	83 c4 0c             	add    esp,0xc
c0022bfd:	56                   	push   esi
c0022bfe:	31 f6                	xor    esi,esi
c0022c00:	6a 00                	push   0x0
c0022c02:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022c06:	e8 45 db fd ff       	call   c0000750 <memset>
c0022c0b:	83 c4 10             	add    esp,0x10
c0022c0e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022c16:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0022c1e:	8b 84 b3 5c 01 00 00 	mov    eax,DWORD PTR [ebx+esi*4+0x15c]
c0022c25:	85 c0                	test   eax,eax
c0022c27:	0f 84 d7 00 00 00    	je     c0022d04 <SoundDevice::getAudio(int, float*, float*)+0x14c>
c0022c2d:	83 ec 0c             	sub    esp,0xc
c0022c30:	50                   	push   eax
c0022c31:	e8 a8 f9 ff ff       	call   c00225de <SoundChannel::getBufferSize()>
c0022c36:	5f                   	pop    edi
c0022c37:	5d                   	pop    ebp
c0022c38:	50                   	push   eax
c0022c39:	68 cd d3 02 c0       	push   0xc002d3cd
c0022c3e:	e8 28 fd fe ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0022c43:	58                   	pop    eax
c0022c44:	ff b4 b3 5c 01 00 00 	push   DWORD PTR [ebx+esi*4+0x15c]
c0022c4b:	e8 86 f9 ff ff       	call   c00225d6 <SoundChannel::getBufferUsed()>
c0022c50:	5a                   	pop    edx
c0022c51:	59                   	pop    ecx
c0022c52:	50                   	push   eax
c0022c53:	68 e0 d3 02 c0       	push   0xc002d3e0
c0022c58:	e8 0e fd fe ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0022c5d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0022c61:	99                   	cdq    
c0022c62:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c0022c68:	50                   	push   eax
c0022c69:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022c6f:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0022c73:	ff b4 b3 5c 01 00 00 	push   DWORD PTR [ebx+esi*4+0x15c]
c0022c7a:	e8 67 f9 ff ff       	call   c00225e6 <SoundChannel::unbuffer(float*, int, int)>
c0022c7f:	83 c4 14             	add    esp,0x14
c0022c82:	89 c5                	mov    ebp,eax
c0022c84:	ff b4 b3 5c 01 00 00 	push   DWORD PTR [ebx+esi*4+0x15c]
c0022c8b:	e8 46 f9 ff ff       	call   c00225d6 <SoundChannel::getBufferUsed()>
c0022c90:	5f                   	pop    edi
c0022c91:	5a                   	pop    edx
c0022c92:	50                   	push   eax
c0022c93:	68 f8 d3 02 c0       	push   0xc002d3f8
c0022c98:	e8 ce fc fe ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0022c9d:	56                   	push   esi
c0022c9e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022ca2:	99                   	cdq    
c0022ca3:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c0022ca9:	50                   	push   eax
c0022caa:	55                   	push   ebp
c0022cab:	68 10 d4 02 c0       	push   0xc002d410
c0022cb0:	e8 b6 fc fe ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0022cb5:	83 c4 20             	add    esp,0x20
c0022cb8:	31 c0                	xor    eax,eax
c0022cba:	39 e8                	cmp    eax,ebp
c0022cbc:	7d 1e                	jge    c0022cdc <SoundDevice::getAudio(int, float*, float*)+0x124>
c0022cbe:	8b 93 58 01 00 00    	mov    edx,DWORD PTR [ebx+0x158]
c0022cc4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0022cc8:	0f af d0             	imul   edx,eax
c0022ccb:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c0022cce:	03 54 24 0c          	add    edx,DWORD PTR [esp+0xc]
c0022cd2:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0022cd6:	40                   	inc    eax
c0022cd7:	89 0c 97             	mov    DWORD PTR [edi+edx*4],ecx
c0022cda:	eb de                	jmp    c0022cba <SoundDevice::getAudio(int, float*, float*)+0x102>
c0022cdc:	50                   	push   eax
c0022cdd:	50                   	push   eax
c0022cde:	55                   	push   ebp
c0022cdf:	68 3d d4 02 c0       	push   0xc002d43d
c0022ce4:	e8 82 fc fe ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0022ce9:	01 6c 24 18          	add    DWORD PTR [esp+0x18],ebp
c0022ced:	5a                   	pop    edx
c0022cee:	59                   	pop    ecx
c0022cef:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022cf3:	68 4e d4 02 c0       	push   0xc002d44e
c0022cf8:	e8 6e fc fe ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0022cfd:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0022d01:	83 c4 10             	add    esp,0x10
c0022d04:	46                   	inc    esi
c0022d05:	83 fe 20             	cmp    esi,0x20
c0022d08:	0f 85 10 ff ff ff    	jne    c0022c1e <SoundDevice::getAudio(int, float*, float*)+0x66>
c0022d0e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022d12:	83 c4 1c             	add    esp,0x1c
c0022d15:	5b                   	pop    ebx
c0022d16:	5e                   	pop    esi
c0022d17:	5f                   	pop    edi
c0022d18:	5d                   	pop    ebp
c0022d19:	c3                   	ret    

c0022d1a <PCI::open(int, int, void*)>:
c0022d1a:	83 ec 18             	sub    esp,0x18
c0022d1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022d21:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0022d25:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022d2b:	8b 10                	mov    edx,DWORD PTR [eax]
c0022d2d:	50                   	push   eax
c0022d2e:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0022d31:	31 c0                	xor    eax,eax
c0022d33:	83 c4 1c             	add    esp,0x1c
c0022d36:	c3                   	ret    
c0022d37:	90                   	nop

c0022d38 <PCI::close(int, int, void*)>:
c0022d38:	31 c0                	xor    eax,eax
c0022d3a:	c3                   	ret    
c0022d3b:	90                   	nop

c0022d3c <PCI::PCI()>:
c0022d3c:	83 ec 0c             	sub    esp,0xc
c0022d3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d43:	83 ec 08             	sub    esp,0x8
c0022d46:	68 9c d4 02 c0       	push   0xc002d49c
c0022d4b:	50                   	push   eax
c0022d4c:	e8 bb 08 ff ff       	call   c001360c <Bus::Bus(char const*)>
c0022d51:	83 c4 10             	add    esp,0x10
c0022d54:	ba b0 d5 02 c0       	mov    edx,0xc002d5b0
c0022d59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d5d:	89 10                	mov    DWORD PTR [eax],edx
c0022d5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d63:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0022d6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d71:	a3 04 34 03 c0       	mov    ds:0xc0033404,eax
c0022d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d7a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022d80:	0f b6 d0             	movzx  edx,al
c0022d83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d87:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0022d8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d92:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022d98:	0f b6 d0             	movzx  edx,al
c0022d9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d9f:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0022da4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022da8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022dae:	8d 50 01             	lea    edx,[eax+0x1]
c0022db1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022db5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022dbb:	0f b6 d0             	movzx  edx,al
c0022dbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022dc2:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022dc6:	83 c9 c0             	or     ecx,0xffffffc0
c0022dc9:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022dcd:	90                   	nop
c0022dce:	83 c4 0c             	add    esp,0xc
c0022dd1:	c3                   	ret    

c0022dd2 <PCI::readBAR8(unsigned int, int)>:
c0022dd2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022dd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022dda:	f6 c2 01             	test   dl,0x1
c0022ddd:	74 07                	je     c0022de6 <PCI::readBAR8(unsigned int, int)+0x14>
c0022ddf:	83 e2 fc             	and    edx,0xfffffffc
c0022de2:	01 c2                	add    edx,eax
c0022de4:	ec                   	in     al,dx
c0022de5:	c3                   	ret    
c0022de6:	83 e2 f0             	and    edx,0xfffffff0
c0022de9:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0022dec:	c3                   	ret    
c0022ded:	90                   	nop

c0022dee <PCI::readBAR16(unsigned int, int)>:
c0022dee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022df2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022df6:	f6 c2 01             	test   dl,0x1
c0022df9:	74 08                	je     c0022e03 <PCI::readBAR16(unsigned int, int)+0x15>
c0022dfb:	83 e2 fc             	and    edx,0xfffffffc
c0022dfe:	01 c2                	add    edx,eax
c0022e00:	66 ed                	in     ax,dx
c0022e02:	c3                   	ret    
c0022e03:	83 e2 f0             	and    edx,0xfffffff0
c0022e06:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0022e0a:	c3                   	ret    
c0022e0b:	90                   	nop

c0022e0c <PCI::readBAR32(unsigned int, int)>:
c0022e0c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022e10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022e14:	f6 c2 01             	test   dl,0x1
c0022e17:	74 07                	je     c0022e20 <PCI::readBAR32(unsigned int, int)+0x14>
c0022e19:	83 e2 fc             	and    edx,0xfffffffc
c0022e1c:	01 c2                	add    edx,eax
c0022e1e:	ed                   	in     eax,dx
c0022e1f:	c3                   	ret    
c0022e20:	83 e2 f0             	and    edx,0xfffffff0
c0022e23:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0022e26:	c3                   	ret    
c0022e27:	90                   	nop

c0022e28 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0022e28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022e2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022e30:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022e34:	f6 c2 01             	test   dl,0x1
c0022e37:	74 07                	je     c0022e40 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0022e39:	83 e2 fc             	and    edx,0xfffffffc
c0022e3c:	01 ca                	add    edx,ecx
c0022e3e:	ee                   	out    dx,al
c0022e3f:	c3                   	ret    
c0022e40:	83 e2 f0             	and    edx,0xfffffff0
c0022e43:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0022e46:	c3                   	ret    
c0022e47:	90                   	nop

c0022e48 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0022e48:	57                   	push   edi
c0022e49:	56                   	push   esi
c0022e4a:	53                   	push   ebx
c0022e4b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022e4f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0022e53:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0022e57:	f6 c2 01             	test   dl,0x1
c0022e5a:	74 24                	je     c0022e80 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x38>
c0022e5c:	89 d3                	mov    ebx,edx
c0022e5e:	83 e3 fc             	and    ebx,0xfffffffc
c0022e61:	50                   	push   eax
c0022e62:	0f b7 c7             	movzx  eax,di
c0022e65:	50                   	push   eax
c0022e66:	8d 04 33             	lea    eax,[ebx+esi*1]
c0022e69:	50                   	push   eax
c0022e6a:	68 a4 d4 02 c0       	push   0xc002d4a4
c0022e6f:	e8 f7 fa fe ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0022e74:	8d 14 33             	lea    edx,[ebx+esi*1]
c0022e77:	89 f8                	mov    eax,edi
c0022e79:	66 ef                	out    dx,ax
c0022e7b:	83 c4 10             	add    esp,0x10
c0022e7e:	eb 07                	jmp    c0022e87 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x3f>
c0022e80:	83 e2 f0             	and    edx,0xfffffff0
c0022e83:	66 89 3c 32          	mov    WORD PTR [edx+esi*1],di
c0022e87:	5b                   	pop    ebx
c0022e88:	5e                   	pop    esi
c0022e89:	5f                   	pop    edi
c0022e8a:	c3                   	ret    
c0022e8b:	90                   	nop

c0022e8c <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0022e8c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022e90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022e94:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022e98:	f6 c2 01             	test   dl,0x1
c0022e9b:	74 07                	je     c0022ea4 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0022e9d:	83 e2 fc             	and    edx,0xfffffffc
c0022ea0:	01 ca                	add    edx,ecx
c0022ea2:	ef                   	out    dx,eax
c0022ea3:	c3                   	ret    
c0022ea4:	83 e2 f0             	and    edx,0xfffffff0
c0022ea7:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0022eaa:	c3                   	ret    
c0022eab:	90                   	nop

c0022eac <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022eac:	55                   	push   ebp
c0022ead:	57                   	push   edi
c0022eae:	56                   	push   esi
c0022eaf:	53                   	push   ebx
c0022eb0:	83 ec 0c             	sub    esp,0xc
c0022eb3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022eb7:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0022ebb:	89 f0                	mov    eax,esi
c0022ebd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022ec1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022ec5:	3c 07                	cmp    al,0x7
c0022ec7:	76 10                	jbe    c0022ed9 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0022ec9:	83 ec 0c             	sub    esp,0xc
c0022ecc:	68 bb d4 02 c0       	push   0xc002d4bb
c0022ed1:	e8 cb 74 ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c0022ed6:	83 c4 10             	add    esp,0x10
c0022ed9:	80 fb 0f             	cmp    bl,0xf
c0022edc:	76 10                	jbe    c0022eee <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0022ede:	83 ec 0c             	sub    esp,0xc
c0022ee1:	68 eb d4 02 c0       	push   0xc002d4eb
c0022ee6:	e8 b6 74 ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c0022eeb:	83 c4 10             	add    esp,0x10
c0022eee:	8d 04 36             	lea    eax,[esi+esi*1]
c0022ef1:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022ef6:	83 c8 f0             	or     eax,0xfffffff0
c0022ef9:	ee                   	out    dx,al
c0022efa:	ba fa 0c 00 00       	mov    edx,0xcfa
c0022eff:	89 e8                	mov    eax,ebp
c0022f01:	ee                   	out    dx,al
c0022f02:	83 c4 0c             	add    esp,0xc
c0022f05:	89 d8                	mov    eax,ebx
c0022f07:	66 81 e7 fc 00       	and    di,0xfc
c0022f0c:	5b                   	pop    ebx
c0022f0d:	c1 e0 08             	shl    eax,0x8
c0022f10:	5e                   	pop    esi
c0022f11:	09 f8                	or     eax,edi
c0022f13:	5f                   	pop    edi
c0022f14:	66 0d 00 c0          	or     ax,0xc000
c0022f18:	5d                   	pop    ebp
c0022f19:	c3                   	ret    

c0022f1a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022f1a:	57                   	push   edi
c0022f1b:	56                   	push   esi
c0022f1c:	53                   	push   ebx
c0022f1d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022f21:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022f25:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0022f2b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022f2f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022f33:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022f37:	83 ff 01             	cmp    edi,0x1
c0022f3a:	75 3e                	jne    c0022f7a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0022f3c:	89 de                	mov    esi,ebx
c0022f3e:	0f b6 c0             	movzx  eax,al
c0022f41:	81 e6 fc 00 00 00    	and    esi,0xfc
c0022f47:	c1 e0 10             	shl    eax,0x10
c0022f4a:	0f b6 c9             	movzx  ecx,cl
c0022f4d:	09 f0                	or     eax,esi
c0022f4f:	c1 e1 08             	shl    ecx,0x8
c0022f52:	0f b6 d2             	movzx  edx,dl
c0022f55:	09 c8                	or     eax,ecx
c0022f57:	c1 e2 0b             	shl    edx,0xb
c0022f5a:	09 d0                	or     eax,edx
c0022f5c:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022f61:	0d 00 00 00 80       	or     eax,0x80000000
c0022f66:	ef                   	out    dx,eax
c0022f67:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022f6c:	ed                   	in     eax,dx
c0022f6d:	83 e3 02             	and    ebx,0x2
c0022f70:	0f b6 cb             	movzx  ecx,bl
c0022f73:	c1 e1 03             	shl    ecx,0x3
c0022f76:	d3 e8                	shr    eax,cl
c0022f78:	eb 43                	jmp    c0022fbd <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022f7a:	83 ff 02             	cmp    edi,0x2
c0022f7d:	75 2c                	jne    c0022fab <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0022f7f:	83 ec 0c             	sub    esp,0xc
c0022f82:	0f b6 c9             	movzx  ecx,cl
c0022f85:	0f b6 d2             	movzx  edx,dl
c0022f88:	0f b6 fb             	movzx  edi,bl
c0022f8b:	0f b6 c0             	movzx  eax,al
c0022f8e:	57                   	push   edi
c0022f8f:	51                   	push   ecx
c0022f90:	52                   	push   edx
c0022f91:	50                   	push   eax
c0022f92:	56                   	push   esi
c0022f93:	e8 14 ff ff ff       	call   c0022eac <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022f98:	89 c2                	mov    edx,eax
c0022f9a:	ed                   	in     eax,dx
c0022f9b:	83 e3 02             	and    ebx,0x2
c0022f9e:	83 c4 20             	add    esp,0x20
c0022fa1:	0f b6 cb             	movzx  ecx,bl
c0022fa4:	c1 e1 03             	shl    ecx,0x3
c0022fa7:	d3 e8                	shr    eax,cl
c0022fa9:	eb 12                	jmp    c0022fbd <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022fab:	83 ec 0c             	sub    esp,0xc
c0022fae:	68 1b d5 02 c0       	push   0xc002d51b
c0022fb3:	e8 e9 73 ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c0022fb8:	83 c4 10             	add    esp,0x10
c0022fbb:	31 c0                	xor    eax,eax
c0022fbd:	5b                   	pop    ebx
c0022fbe:	5e                   	pop    esi
c0022fbf:	5f                   	pop    edi
c0022fc0:	c3                   	ret    
c0022fc1:	90                   	nop

c0022fc2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022fc2:	83 ec 18             	sub    esp,0x18
c0022fc5:	6a 00                	push   0x0
c0022fc7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022fcc:	50                   	push   eax
c0022fcd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022fd2:	50                   	push   eax
c0022fd3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022fd8:	50                   	push   eax
c0022fd9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022fdd:	e8 38 ff ff ff       	call   c0022f1a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022fe2:	83 c4 2c             	add    esp,0x2c
c0022fe5:	c3                   	ret    

c0022fe6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022fe6:	83 ec 18             	sub    esp,0x18
c0022fe9:	6a 0e                	push   0xe
c0022feb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022ff0:	50                   	push   eax
c0022ff1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022ff6:	50                   	push   eax
c0022ff7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022ffc:	50                   	push   eax
c0022ffd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0023001:	e8 14 ff ff ff       	call   c0022f1a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023006:	83 c4 2c             	add    esp,0x2c
c0023009:	0f b6 c0             	movzx  eax,al
c002300c:	c3                   	ret    
c002300d:	90                   	nop

c002300e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c002300e:	55                   	push   ebp
c002300f:	57                   	push   edi
c0023010:	56                   	push   esi
c0023011:	53                   	push   ebx
c0023012:	83 ec 18             	sub    esp,0x18
c0023015:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c002301a:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c002301f:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0023024:	6a 0a                	push   0xa
c0023026:	56                   	push   esi
c0023027:	55                   	push   ebp
c0023028:	57                   	push   edi
c0023029:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002302d:	e8 e8 fe ff ff       	call   c0022f1a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023032:	83 c4 14             	add    esp,0x14
c0023035:	89 c3                	mov    ebx,eax
c0023037:	6a 0a                	push   0xa
c0023039:	0f b6 db             	movzx  ebx,bl
c002303c:	56                   	push   esi
c002303d:	55                   	push   ebp
c002303e:	57                   	push   edi
c002303f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023043:	e8 d2 fe ff ff       	call   c0022f1a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023048:	83 c4 2c             	add    esp,0x2c
c002304b:	25 00 ff 00 00       	and    eax,0xff00
c0023050:	09 d8                	or     eax,ebx
c0023052:	5b                   	pop    ebx
c0023053:	5e                   	pop    esi
c0023054:	5f                   	pop    edi
c0023055:	5d                   	pop    ebp
c0023056:	c3                   	ret    
c0023057:	90                   	nop

c0023058 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0023058:	83 ec 18             	sub    esp,0x18
c002305b:	6a 08                	push   0x8
c002305d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023062:	50                   	push   eax
c0023063:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023068:	50                   	push   eax
c0023069:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002306e:	50                   	push   eax
c002306f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0023073:	e8 a2 fe ff ff       	call   c0022f1a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023078:	83 c4 2c             	add    esp,0x2c
c002307b:	0f b6 c4             	movzx  eax,ah
c002307e:	c3                   	ret    
c002307f:	90                   	nop

c0023080 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0023080:	83 ec 18             	sub    esp,0x18
c0023083:	6a 08                	push   0x8
c0023085:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002308a:	50                   	push   eax
c002308b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023090:	50                   	push   eax
c0023091:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023096:	50                   	push   eax
c0023097:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002309b:	e8 7a fe ff ff       	call   c0022f1a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00230a0:	83 c4 2c             	add    esp,0x2c
c00230a3:	c3                   	ret    

c00230a4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00230a4:	83 ec 18             	sub    esp,0x18
c00230a7:	6a 3c                	push   0x3c
c00230a9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00230ae:	50                   	push   eax
c00230af:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00230b4:	50                   	push   eax
c00230b5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00230ba:	50                   	push   eax
c00230bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00230bf:	e8 56 fe ff ff       	call   c0022f1a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00230c4:	83 c4 2c             	add    esp,0x2c
c00230c7:	c3                   	ret    

c00230c8 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00230c8:	83 ec 18             	sub    esp,0x18
c00230cb:	6a 18                	push   0x18
c00230cd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00230d2:	50                   	push   eax
c00230d3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00230d8:	50                   	push   eax
c00230d9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00230de:	50                   	push   eax
c00230df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00230e3:	e8 32 fe ff ff       	call   c0022f1a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00230e8:	83 c4 2c             	add    esp,0x2c
c00230eb:	0f b6 c4             	movzx  eax,ah
c00230ee:	c3                   	ret    
c00230ef:	90                   	nop

c00230f0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00230f0:	55                   	push   ebp
c00230f1:	57                   	push   edi
c00230f2:	56                   	push   esi
c00230f3:	53                   	push   ebx
c00230f4:	83 ec 28             	sub    esp,0x28
c00230f7:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00230fb:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0023100:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0023105:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c002310a:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0023111:	8d 43 12             	lea    eax,[ebx+0x12]
c0023114:	83 c3 10             	add    ebx,0x10
c0023117:	0f b6 c0             	movzx  eax,al
c002311a:	0f b6 db             	movzx  ebx,bl
c002311d:	50                   	push   eax
c002311e:	51                   	push   ecx
c002311f:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0023123:	57                   	push   edi
c0023124:	55                   	push   ebp
c0023125:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0023129:	e8 ec fd ff ff       	call   c0022f1a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002312e:	83 c4 14             	add    esp,0x14
c0023131:	89 c6                	mov    esi,eax
c0023133:	53                   	push   ebx
c0023134:	c1 e6 10             	shl    esi,0x10
c0023137:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002313b:	51                   	push   ecx
c002313c:	57                   	push   edi
c002313d:	55                   	push   ebp
c002313e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0023142:	e8 d3 fd ff ff       	call   c0022f1a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023147:	83 c4 3c             	add    esp,0x3c
c002314a:	0f b7 c0             	movzx  eax,ax
c002314d:	5b                   	pop    ebx
c002314e:	09 f0                	or     eax,esi
c0023150:	5e                   	pop    esi
c0023151:	5f                   	pop    edi
c0023152:	5d                   	pop    ebp
c0023153:	c3                   	ret    

c0023154 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0023154:	55                   	push   ebp
c0023155:	57                   	push   edi
c0023156:	56                   	push   esi
c0023157:	53                   	push   ebx
c0023158:	83 ec 0c             	sub    esp,0xc
c002315b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002315f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023163:	89 f5                	mov    ebp,esi
c0023165:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c002316b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002316f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0023173:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023177:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002317b:	83 f9 01             	cmp    ecx,0x1
c002317e:	75 5d                	jne    c00231dd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0023180:	0f b6 c8             	movzx  ecx,al
c0023183:	0f b6 d2             	movzx  edx,dl
c0023186:	c1 e1 10             	shl    ecx,0x10
c0023189:	c1 e2 0b             	shl    edx,0xb
c002318c:	89 f0                	mov    eax,esi
c002318e:	25 fc 00 00 00       	and    eax,0xfc
c0023193:	09 c1                	or     ecx,eax
c0023195:	89 e8                	mov    eax,ebp
c0023197:	0f b6 c0             	movzx  eax,al
c002319a:	c1 e0 08             	shl    eax,0x8
c002319d:	09 c1                	or     ecx,eax
c002319f:	09 d1                	or     ecx,edx
c00231a1:	ba f8 0c 00 00       	mov    edx,0xcf8
c00231a6:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00231ac:	89 c8                	mov    eax,ecx
c00231ae:	ef                   	out    dx,eax
c00231af:	ba fc 0c 00 00       	mov    edx,0xcfc
c00231b4:	ed                   	in     eax,dx
c00231b5:	0f b7 db             	movzx  ebx,bx
c00231b8:	83 e6 02             	and    esi,0x2
c00231bb:	74 0a                	je     c00231c7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c00231bd:	0f b7 d0             	movzx  edx,ax
c00231c0:	c1 e3 10             	shl    ebx,0x10
c00231c3:	09 d3                	or     ebx,edx
c00231c5:	eb 05                	jmp    c00231cc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c00231c7:	66 31 c0             	xor    ax,ax
c00231ca:	09 c3                	or     ebx,eax
c00231cc:	ba f8 0c 00 00       	mov    edx,0xcf8
c00231d1:	89 c8                	mov    eax,ecx
c00231d3:	ef                   	out    dx,eax
c00231d4:	ba fc 0c 00 00       	mov    edx,0xcfc
c00231d9:	89 d8                	mov    eax,ebx
c00231db:	eb 41                	jmp    c002321e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00231dd:	83 f9 02             	cmp    ecx,0x2
c00231e0:	75 45                	jne    c0023227 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c00231e2:	83 ec 0c             	sub    esp,0xc
c00231e5:	0f b6 d2             	movzx  edx,dl
c00231e8:	89 f1                	mov    ecx,esi
c00231ea:	0f b6 c0             	movzx  eax,al
c00231ed:	0f b6 f1             	movzx  esi,cl
c00231f0:	89 e9                	mov    ecx,ebp
c00231f2:	56                   	push   esi
c00231f3:	0f b6 c9             	movzx  ecx,cl
c00231f6:	51                   	push   ecx
c00231f7:	52                   	push   edx
c00231f8:	50                   	push   eax
c00231f9:	57                   	push   edi
c00231fa:	e8 ad fc ff ff       	call   c0022eac <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00231ff:	89 c2                	mov    edx,eax
c0023201:	ed                   	in     eax,dx
c0023202:	83 c4 20             	add    esp,0x20
c0023205:	0f b7 db             	movzx  ebx,bx
c0023208:	f6 c2 02             	test   dl,0x2
c002320b:	74 0c                	je     c0023219 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c002320d:	0f b7 c8             	movzx  ecx,ax
c0023210:	89 d8                	mov    eax,ebx
c0023212:	c1 e0 10             	shl    eax,0x10
c0023215:	09 c8                	or     eax,ecx
c0023217:	eb 05                	jmp    c002321e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0023219:	66 31 c0             	xor    ax,ax
c002321c:	09 d8                	or     eax,ebx
c002321e:	ef                   	out    dx,eax
c002321f:	83 c4 0c             	add    esp,0xc
c0023222:	5b                   	pop    ebx
c0023223:	5e                   	pop    esi
c0023224:	5f                   	pop    edi
c0023225:	5d                   	pop    ebp
c0023226:	c3                   	ret    
c0023227:	c7 44 24 20 1b d5 02 c0 	mov    DWORD PTR [esp+0x20],0xc002d51b
c002322f:	83 c4 0c             	add    esp,0xc
c0023232:	5b                   	pop    ebx
c0023233:	5e                   	pop    esi
c0023234:	5f                   	pop    edi
c0023235:	5d                   	pop    ebp
c0023236:	e9 66 71 ff ff       	jmp    c001a3a1 <Krnl::panic(char const*)>
c002323b:	90                   	nop

c002323c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c002323c:	55                   	push   ebp
c002323d:	57                   	push   edi
c002323e:	56                   	push   esi
c002323f:	53                   	push   ebx
c0023240:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0023246:	80 3d 10 34 03 c0 00 	cmp    BYTE PTR ds:0xc0033410,0x0
c002324d:	0f 85 96 00 00 00    	jne    c00232e9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xad>
c0023253:	83 ec 0c             	sub    esp,0xc
c0023256:	68 14 01 00 00       	push   0x114
c002325b:	e8 2c c6 fe ff       	call   c000f88c <malloc>
c0023260:	83 c4 0c             	add    esp,0xc
c0023263:	89 c3                	mov    ebx,eax
c0023265:	ff 35 10 26 03 c0    	push   DWORD PTR ds:0xc0032610
c002326b:	68 21 d5 02 c0       	push   0xc002d521
c0023270:	50                   	push   eax
c0023271:	e8 54 fc fe ff       	call   c0012eca <File::File(char const*, Process*)>
c0023276:	5a                   	pop    edx
c0023277:	59                   	pop    ecx
c0023278:	6a 01                	push   0x1
c002327a:	53                   	push   ebx
c002327b:	e8 ae fc fe ff       	call   c0012f2e <File::open(FileOpenMode)>
c0023280:	83 c4 0c             	add    esp,0xc
c0023283:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0023287:	50                   	push   eax
c0023288:	8d 44 24 28          	lea    eax,[esp+0x28]
c002328c:	50                   	push   eax
c002328d:	53                   	push   ebx
c002328e:	e8 47 ff fe ff       	call   c00131da <File::stat(unsigned long long*, bool*)>
c0023293:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0023297:	40                   	inc    eax
c0023298:	89 04 24             	mov    DWORD PTR [esp],eax
c002329b:	e8 ec c5 fe ff       	call   c000f88c <malloc>
c00232a0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00232a4:	a3 0c 34 03 c0       	mov    ds:0xc003340c,eax
c00232a9:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c00232ad:	5e                   	pop    esi
c00232ae:	8b 13                	mov    edx,DWORD PTR [ebx]
c00232b0:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c00232b4:	51                   	push   ecx
c00232b5:	50                   	push   eax
c00232b6:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00232ba:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00232be:	53                   	push   ebx
c00232bf:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00232c2:	83 c4 14             	add    esp,0x14
c00232c5:	53                   	push   ebx
c00232c6:	e8 c1 fc fe ff       	call   c0012f8c <File::close()>
c00232cb:	5f                   	pop    edi
c00232cc:	5d                   	pop    ebp
c00232cd:	ff 35 0c 34 03 c0    	push   DWORD PTR ds:0xc003340c
c00232d3:	68 3a d5 02 c0       	push   0xc002d53a
c00232d8:	e8 8e f6 fe ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c00232dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00232e1:	83 c4 10             	add    esp,0x10
c00232e4:	a3 08 34 03 c0       	mov    ds:0xc0033408,eax
c00232e9:	a1 08 34 03 c0       	mov    eax,ds:0xc0033408
c00232ee:	8b 15 0c 34 03 c0    	mov    edx,DWORD PTR ds:0xc003340c
c00232f4:	89 04 24             	mov    DWORD PTR [esp],eax
c00232f7:	31 ff                	xor    edi,edi
c00232f9:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0023301:	31 f6                	xor    esi,esi
c0023303:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0023308:	31 db                	xor    ebx,ebx
c002330a:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0023312:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0023317:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c002331e:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0023322:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0023329:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c002332d:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0023330:	0f 8e 6b 01 00 00    	jle    c00234a1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c0023336:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0023339:	d4 40                	aam    0x40
c002333b:	d5 39                	aad    0x39
c002333d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0023341:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0023345:	d4 40                	aam    0x40
c0023347:	d5 39                	aad    0x39
c0023349:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002334d:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0023351:	d4 40                	aam    0x40
c0023353:	d5 39                	aad    0x39
c0023355:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0023359:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c002335d:	d4 40                	aam    0x40
c002335f:	d5 39                	aad    0x39
c0023361:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023365:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0023369:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002336d:	3c 56                	cmp    al,0x56
c002336f:	74 45                	je     c00233b6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x17a>
c0023371:	d4 40                	aam    0x40
c0023373:	d5 39                	aad    0x39
c0023375:	8d 48 d0             	lea    ecx,[eax-0x30]
c0023378:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c002337c:	0f b6 c9             	movzx  ecx,cl
c002337f:	c1 e1 04             	shl    ecx,0x4
c0023382:	d4 40                	aam    0x40
c0023384:	d5 39                	aad    0x39
c0023386:	8d 58 d0             	lea    ebx,[eax-0x30]
c0023389:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c002338d:	0f b6 db             	movzx  ebx,bl
c0023390:	09 cb                	or     ebx,ecx
c0023392:	c1 e3 04             	shl    ebx,0x4
c0023395:	d4 40                	aam    0x40
c0023397:	d5 39                	aad    0x39
c0023399:	8d 48 d0             	lea    ecx,[eax-0x30]
c002339c:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c00233a0:	0f b6 c9             	movzx  ecx,cl
c00233a3:	09 cb                	or     ebx,ecx
c00233a5:	c1 e3 04             	shl    ebx,0x4
c00233a8:	89 d9                	mov    ecx,ebx
c00233aa:	d4 40                	aam    0x40
c00233ac:	d5 39                	aad    0x39
c00233ae:	8d 58 d0             	lea    ebx,[eax-0x30]
c00233b1:	0f b6 db             	movzx  ebx,bl
c00233b4:	09 cb                	or     ebx,ecx
c00233b6:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c00233ba:	80 f9 44             	cmp    cl,0x44
c00233bd:	74 47                	je     c0023406 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ca>
c00233bf:	88 c8                	mov    al,cl
c00233c1:	d4 40                	aam    0x40
c00233c3:	d5 39                	aad    0x39
c00233c5:	83 e8 30             	sub    eax,0x30
c00233c8:	0f b6 e8             	movzx  ebp,al
c00233cb:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c00233cf:	c1 e5 04             	shl    ebp,0x4
c00233d2:	d4 40                	aam    0x40
c00233d4:	d5 39                	aad    0x39
c00233d6:	83 e8 30             	sub    eax,0x30
c00233d9:	0f b6 f0             	movzx  esi,al
c00233dc:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c00233e0:	09 ee                	or     esi,ebp
c00233e2:	c1 e6 04             	shl    esi,0x4
c00233e5:	d4 40                	aam    0x40
c00233e7:	d5 39                	aad    0x39
c00233e9:	83 e8 30             	sub    eax,0x30
c00233ec:	0f b6 e8             	movzx  ebp,al
c00233ef:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c00233f3:	09 ee                	or     esi,ebp
c00233f5:	c1 e6 04             	shl    esi,0x4
c00233f8:	89 f5                	mov    ebp,esi
c00233fa:	d4 40                	aam    0x40
c00233fc:	d5 39                	aad    0x39
c00233fe:	83 e8 30             	sub    eax,0x30
c0023401:	0f b6 f0             	movzx  esi,al
c0023404:	09 ee                	or     esi,ebp
c0023406:	83 c7 10             	add    edi,0x10
c0023409:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c002340d:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0023410:	3c 0a                	cmp    al,0xa
c0023412:	74 09                	je     c002341d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e1>
c0023414:	45                   	inc    ebp
c0023415:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0023418:	75 16                	jne    c0023430 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f4>
c002341a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002341d:	3c 0a                	cmp    al,0xa
c002341f:	0f 94 c0             	sete   al
c0023422:	0f b6 c0             	movzx  eax,al
c0023425:	01 c7                	add    edi,eax
c0023427:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c002342c:	75 0c                	jne    c002343a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1fe>
c002342e:	eb 15                	jmp    c0023445 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c0023430:	47                   	inc    edi
c0023431:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0023434:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0023438:	eb d3                	jmp    c002340d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1d1>
c002343a:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c002343f:	0f 85 e8 fe ff ff    	jne    c002332d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c0023445:	80 f9 44             	cmp    cl,0x44
c0023448:	74 0b                	je     c0023455 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x219>
c002344a:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c002344f:	0f 85 d8 fe ff ff    	jne    c002332d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c0023455:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0023459:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c002345d:	c1 e1 04             	shl    ecx,0x4
c0023460:	83 e8 30             	sub    eax,0x30
c0023463:	09 c8                	or     eax,ecx
c0023465:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0023469:	0f 85 be fe ff ff    	jne    c002332d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c002346f:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0023473:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023477:	c1 e1 04             	shl    ecx,0x4
c002347a:	83 e8 30             	sub    eax,0x30
c002347d:	09 c8                	or     eax,ecx
c002347f:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0023483:	0f 85 a4 fe ff ff    	jne    c002332d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c0023489:	50                   	push   eax
c002348a:	50                   	push   eax
c002348b:	8d 44 24 28          	lea    eax,[esp+0x28]
c002348f:	50                   	push   eax
c0023490:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0023497:	e8 70 d3 fd ff       	call   c000080c <strcpy>
c002349c:	83 c4 10             	add    esp,0x10
c002349f:	eb 15                	jmp    c00234b6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x27a>
c00234a1:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c00234a8:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c00234b3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00234b6:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c00234bd:	81 c4 2c 01 00 00    	add    esp,0x12c
c00234c3:	5b                   	pop    ebx
c00234c4:	5e                   	pop    esi
c00234c5:	5f                   	pop    edi
c00234c6:	5d                   	pop    ebp
c00234c7:	c3                   	ret    

c00234c8 <PCI::checkBus(unsigned char)>:
c00234c8:	56                   	push   esi
c00234c9:	53                   	push   ebx
c00234ca:	31 db                	xor    ebx,ebx
c00234cc:	51                   	push   ecx
c00234cd:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00234d2:	52                   	push   edx
c00234d3:	53                   	push   ebx
c00234d4:	43                   	inc    ebx
c00234d5:	56                   	push   esi
c00234d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00234da:	e8 37 03 00 00       	call   c0023816 <PCI::checkDevice(unsigned char, unsigned char)>
c00234df:	83 c4 10             	add    esp,0x10
c00234e2:	83 fb 20             	cmp    ebx,0x20
c00234e5:	75 eb                	jne    c00234d2 <PCI::checkBus(unsigned char)+0xa>
c00234e7:	58                   	pop    eax
c00234e8:	5b                   	pop    ebx
c00234e9:	5e                   	pop    esi
c00234ea:	c3                   	ret    
c00234eb:	90                   	nop

c00234ec <PCI::foundDevice(PCIDeviceInfo)>:
c00234ec:	55                   	push   ebp
c00234ed:	57                   	push   edi
c00234ee:	56                   	push   esi
c00234ef:	53                   	push   ebx
c00234f0:	83 ec 1c             	sub    esp,0x1c
c00234f3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00234f7:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c00234fd:	0f 84 52 01 00 00    	je     c0023655 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0023503:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0023507:	66 81 f9 06 04       	cmp    cx,0x406
c002350c:	75 2c                	jne    c002353a <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c002350e:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0023513:	50                   	push   eax
c0023514:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0023519:	50                   	push   eax
c002351a:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c002351f:	50                   	push   eax
c0023520:	56                   	push   esi
c0023521:	e8 a2 fb ff ff       	call   c00230c8 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0023526:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002352a:	0f b6 c0             	movzx  eax,al
c002352d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0023531:	83 c4 2c             	add    esp,0x2c
c0023534:	5b                   	pop    ebx
c0023535:	5e                   	pop    esi
c0023536:	5f                   	pop    edi
c0023537:	5d                   	pop    ebp
c0023538:	eb 8e                	jmp    c00234c8 <PCI::checkBus(unsigned char)>
c002353a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002353e:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0023544:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0023548:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c002354c:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0023550:	88 d3                	mov    bl,dl
c0023552:	85 c0                	test   eax,eax
c0023554:	74 33                	je     c0023589 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0023556:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0023559:	85 d2                	test   edx,edx
c002355b:	74 28                	je     c0023585 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c002355d:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0023563:	31 ef                	xor    edi,ebp
c0023565:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c002356b:	75 18                	jne    c0023585 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c002356d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0023571:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0023577:	75 0c                	jne    c0023585 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0023579:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c002357f:	0f 84 d0 00 00 00    	je     c0023655 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0023585:	8b 00                	mov    eax,DWORD PTR [eax]
c0023587:	eb c9                	jmp    c0023552 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0023589:	66 81 f9 01 06       	cmp    cx,0x601
c002358e:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0023592:	75 19                	jne    c00235ad <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0023594:	83 ec 0c             	sub    esp,0xc
c0023597:	68 64 01 00 00       	push   0x164
c002359c:	e8 eb c2 fe ff       	call   c000f88c <malloc>
c00235a1:	89 c5                	mov    ebp,eax
c00235a3:	89 04 24             	mov    DWORD PTR [esp],eax
c00235a6:	e8 a1 0f 00 00       	call   c002454c <SATABus::SATABus()>
c00235ab:	eb 1e                	jmp    c00235cb <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c00235ad:	66 81 f9 01 01       	cmp    cx,0x101
c00235b2:	75 60                	jne    c0023614 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c00235b4:	83 ec 0c             	sub    esp,0xc
c00235b7:	68 70 02 00 00       	push   0x270
c00235bc:	e8 cb c2 fe ff       	call   c000f88c <malloc>
c00235c1:	89 c5                	mov    ebp,eax
c00235c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00235c6:	e8 0f 03 00 00       	call   c00238da <IDE::IDE()>
c00235cb:	58                   	pop    eax
c00235cc:	5a                   	pop    edx
c00235cd:	55                   	push   ebp
c00235ce:	56                   	push   esi
c00235cf:	e8 d0 07 ff ff       	call   c0013da4 <Device::addChild(Device*)>
c00235d4:	83 ec 1c             	sub    esp,0x1c
c00235d7:	b9 09 00 00 00       	mov    ecx,0x9
c00235dc:	fc                   	cld    
c00235dd:	89 e7                	mov    edi,esp
c00235df:	89 de                	mov    esi,ebx
c00235e1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00235e3:	55                   	push   ebp
c00235e4:	e8 cd 06 ff ff       	call   c0013cb6 <Device::preOpenPCI(PCIDeviceInfo)>
c00235e9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00235ec:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c00235f0:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c00235f8:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0023600:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0023608:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002360b:	83 c4 4c             	add    esp,0x4c
c002360e:	5b                   	pop    ebx
c002360f:	5e                   	pop    esi
c0023610:	5f                   	pop    edi
c0023611:	5d                   	pop    ebp
c0023612:	ff e0                	jmp    eax
c0023614:	83 ec 0c             	sub    esp,0xc
c0023617:	68 58 01 00 00       	push   0x158
c002361c:	e8 6b c2 fe ff       	call   c000f88c <malloc>
c0023621:	89 c5                	mov    ebp,eax
c0023623:	58                   	pop    eax
c0023624:	5a                   	pop    edx
c0023625:	68 4c d5 02 c0       	push   0xc002d54c
c002362a:	55                   	push   ebp
c002362b:	e8 7e 0a ff ff       	call   c00140ae <DriverlessDevice::DriverlessDevice(char const*)>
c0023630:	59                   	pop    ecx
c0023631:	5f                   	pop    edi
c0023632:	55                   	push   ebp
c0023633:	56                   	push   esi
c0023634:	e8 6b 07 ff ff       	call   c0013da4 <Device::addChild(Device*)>
c0023639:	b9 09 00 00 00       	mov    ecx,0x9
c002363e:	fc                   	cld    
c002363f:	89 df                	mov    edi,ebx
c0023641:	89 de                	mov    esi,ebx
c0023643:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023645:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0023649:	83 c4 2c             	add    esp,0x2c
c002364c:	5b                   	pop    ebx
c002364d:	5e                   	pop    esi
c002364e:	5f                   	pop    edi
c002364f:	5d                   	pop    ebp
c0023650:	e9 61 06 ff ff       	jmp    c0013cb6 <Device::preOpenPCI(PCIDeviceInfo)>
c0023655:	83 c4 1c             	add    esp,0x1c
c0023658:	5b                   	pop    ebx
c0023659:	5e                   	pop    esi
c002365a:	5f                   	pop    edi
c002365b:	5d                   	pop    ebp
c002365c:	c3                   	ret    
c002365d:	90                   	nop

c002365e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c002365e:	55                   	push   ebp
c002365f:	57                   	push   edi
c0023660:	56                   	push   esi
c0023661:	53                   	push   ebx
c0023662:	83 ec 68             	sub    esp,0x68
c0023665:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0023669:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0023670:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023674:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c002367b:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c0023680:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023684:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c002368b:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0023690:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0023694:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c0023699:	6a 0c                	push   0xc
c002369b:	57                   	push   edi
c002369c:	53                   	push   ebx
c002369d:	56                   	push   esi
c002369e:	55                   	push   ebp
c002369f:	e8 76 f8 ff ff       	call   c0022f1a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00236a4:	83 c4 20             	add    esp,0x20
c00236a7:	57                   	push   edi
c00236a8:	53                   	push   ebx
c00236a9:	56                   	push   esi
c00236aa:	55                   	push   ebp
c00236ab:	e8 5e f9 ff ff       	call   c002300e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c00236b0:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c00236b5:	57                   	push   edi
c00236b6:	53                   	push   ebx
c00236b7:	56                   	push   esi
c00236b8:	55                   	push   ebp
c00236b9:	e8 e6 f9 ff ff       	call   c00230a4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c00236be:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00236c2:	83 c4 14             	add    esp,0x14
c00236c5:	6a 3c                	push   0x3c
c00236c7:	57                   	push   edi
c00236c8:	53                   	push   ebx
c00236c9:	56                   	push   esi
c00236ca:	55                   	push   ebp
c00236cb:	e8 4a f8 ff ff       	call   c0022f1a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00236d0:	0f b6 c4             	movzx  eax,ah
c00236d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00236d7:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00236db:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c00236df:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c00236e4:	83 c4 20             	add    esp,0x20
c00236e7:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00236ed:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c00236f4:	74 7c                	je     c0023772 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c00236f6:	31 c0                	xor    eax,eax
c00236f8:	8b 15 c8 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f0c8
c00236fe:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0023704:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c002370a:	7e 66                	jle    c0023772 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c002370c:	8d 14 c2             	lea    edx,[edx+eax*8]
c002370f:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0023716:	39 cb                	cmp    ebx,ecx
c0023718:	75 55                	jne    c002376f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c002371a:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0023721:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0023725:	75 48                	jne    c002376f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0023727:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002372b:	83 ec 0c             	sub    esp,0xc
c002372e:	68 66 d5 02 c0       	push   0xc002d566
c0023733:	e8 33 f2 fe ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0023738:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002373c:	8b 15 c8 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f0c8
c0023742:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0023746:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c002374c:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c0023754:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c0023758:	52                   	push   edx
c0023759:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002375d:	53                   	push   ebx
c002375e:	68 8b d5 02 c0       	push   0xc002d58b
c0023763:	e8 03 f2 fe ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0023768:	83 c4 20             	add    esp,0x20
c002376b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002376f:	40                   	inc    eax
c0023770:	eb 86                	jmp    c00236f8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c0023772:	31 d2                	xor    edx,edx
c0023774:	83 ec 0c             	sub    esp,0xc
c0023777:	57                   	push   edi
c0023778:	53                   	push   ebx
c0023779:	56                   	push   esi
c002377a:	52                   	push   edx
c002377b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c002377f:	55                   	push   ebp
c0023780:	e8 6b f9 ff ff       	call   c00230f0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023785:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0023789:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c002378d:	42                   	inc    edx
c002378e:	83 c4 20             	add    esp,0x20
c0023791:	83 fa 06             	cmp    edx,0x6
c0023794:	75 de                	jne    c0023774 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c0023796:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c002379b:	83 ec 0c             	sub    esp,0xc
c002379e:	86 e0                	xchg   al,ah
c00237a0:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c00237a5:	6a 02                	push   0x2
c00237a7:	57                   	push   edi
c00237a8:	53                   	push   ebx
c00237a9:	56                   	push   esi
c00237aa:	55                   	push   ebp
c00237ab:	e8 6a f7 ff ff       	call   c0022f1a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00237b0:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c00237b5:	83 c4 20             	add    esp,0x20
c00237b8:	57                   	push   edi
c00237b9:	53                   	push   ebx
c00237ba:	56                   	push   esi
c00237bb:	55                   	push   ebp
c00237bc:	e8 97 f8 ff ff       	call   c0023058 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c00237c1:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00237c5:	57                   	push   edi
c00237c6:	53                   	push   ebx
c00237c7:	56                   	push   esi
c00237c8:	55                   	push   ebp
c00237c9:	e8 f4 f7 ff ff       	call   c0022fc2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00237ce:	b9 09 00 00 00       	mov    ecx,0x9
c00237d3:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c00237d8:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c00237dc:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c00237e0:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c00237e4:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c00237e8:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c00237ec:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c00237f0:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c00237f4:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c00237f8:	83 ec 0c             	sub    esp,0xc
c00237fb:	fc                   	cld    
c00237fc:	89 e7                	mov    edi,esp
c00237fe:	8d 74 24 58          	lea    esi,[esp+0x58]
c0023802:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023804:	55                   	push   ebp
c0023805:	e8 e2 fc ff ff       	call   c00234ec <PCI::foundDevice(PCIDeviceInfo)>
c002380a:	81 c4 8c 00 00 00    	add    esp,0x8c
c0023810:	5b                   	pop    ebx
c0023811:	5e                   	pop    esi
c0023812:	5f                   	pop    edi
c0023813:	5d                   	pop    ebp
c0023814:	c3                   	ret    
c0023815:	90                   	nop

c0023816 <PCI::checkDevice(unsigned char, unsigned char)>:
c0023816:	55                   	push   ebp
c0023817:	57                   	push   edi
c0023818:	56                   	push   esi
c0023819:	53                   	push   ebx
c002381a:	83 ec 0c             	sub    esp,0xc
c002381d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0023821:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0023826:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c002382b:	6a 00                	push   0x0
c002382d:	56                   	push   esi
c002382e:	57                   	push   edi
c002382f:	55                   	push   ebp
c0023830:	e8 8d f7 ff ff       	call   c0022fc2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023835:	6a 00                	push   0x0
c0023837:	56                   	push   esi
c0023838:	57                   	push   edi
c0023839:	55                   	push   ebp
c002383a:	e8 1f fe ff ff       	call   c002365e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002383f:	83 c4 20             	add    esp,0x20
c0023842:	6a 00                	push   0x0
c0023844:	56                   	push   esi
c0023845:	57                   	push   edi
c0023846:	55                   	push   ebp
c0023847:	e8 9a f7 ff ff       	call   c0022fe6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002384c:	83 c4 10             	add    esp,0x10
c002384f:	84 c0                	test   al,al
c0023851:	79 27                	jns    c002387a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0023853:	bb 01 00 00 00       	mov    ebx,0x1
c0023858:	53                   	push   ebx
c0023859:	56                   	push   esi
c002385a:	57                   	push   edi
c002385b:	55                   	push   ebp
c002385c:	e8 61 f7 ff ff       	call   c0022fc2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023861:	83 c4 10             	add    esp,0x10
c0023864:	66 40                	inc    ax
c0023866:	74 0c                	je     c0023874 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0023868:	53                   	push   ebx
c0023869:	56                   	push   esi
c002386a:	57                   	push   edi
c002386b:	55                   	push   ebp
c002386c:	e8 ed fd ff ff       	call   c002365e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0023871:	83 c4 10             	add    esp,0x10
c0023874:	43                   	inc    ebx
c0023875:	83 fb 08             	cmp    ebx,0x8
c0023878:	75 de                	jne    c0023858 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c002387a:	83 c4 0c             	add    esp,0xc
c002387d:	5b                   	pop    ebx
c002387e:	5e                   	pop    esi
c002387f:	5f                   	pop    edi
c0023880:	5d                   	pop    ebp
c0023881:	c3                   	ret    

c0023882 <PCI::detect()>:
c0023882:	56                   	push   esi
c0023883:	53                   	push   ebx
c0023884:	53                   	push   ebx
c0023885:	31 db                	xor    ebx,ebx
c0023887:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002388b:	6a 00                	push   0x0
c002388d:	6a 00                	push   0x0
c002388f:	6a 00                	push   0x0
c0023891:	56                   	push   esi
c0023892:	e8 4f f7 ff ff       	call   c0022fe6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0023897:	83 c4 10             	add    esp,0x10
c002389a:	a8 80                	test   al,0x80
c002389c:	75 21                	jne    c00238bf <PCI::detect()+0x3d>
c002389e:	51                   	push   ecx
c002389f:	51                   	push   ecx
c00238a0:	6a 00                	push   0x0
c00238a2:	56                   	push   esi
c00238a3:	e8 20 fc ff ff       	call   c00234c8 <PCI::checkBus(unsigned char)>
c00238a8:	83 c4 10             	add    esp,0x10
c00238ab:	eb 24                	jmp    c00238d1 <PCI::detect()+0x4f>
c00238ad:	52                   	push   edx
c00238ae:	52                   	push   edx
c00238af:	53                   	push   ebx
c00238b0:	43                   	inc    ebx
c00238b1:	56                   	push   esi
c00238b2:	e8 11 fc ff ff       	call   c00234c8 <PCI::checkBus(unsigned char)>
c00238b7:	83 c4 10             	add    esp,0x10
c00238ba:	83 fb 08             	cmp    ebx,0x8
c00238bd:	74 12                	je     c00238d1 <PCI::detect()+0x4f>
c00238bf:	53                   	push   ebx
c00238c0:	6a 00                	push   0x0
c00238c2:	6a 00                	push   0x0
c00238c4:	56                   	push   esi
c00238c5:	e8 f8 f6 ff ff       	call   c0022fc2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00238ca:	83 c4 10             	add    esp,0x10
c00238cd:	66 40                	inc    ax
c00238cf:	74 dc                	je     c00238ad <PCI::detect()+0x2b>
c00238d1:	58                   	pop    eax
c00238d2:	5b                   	pop    ebx
c00238d3:	5e                   	pop    esi
c00238d4:	c3                   	ret    
c00238d5:	90                   	nop

c00238d6 <IDE::close(int, int, void*)>:
c00238d6:	83 c8 ff             	or     eax,0xffffffff
c00238d9:	c3                   	ret    

c00238da <IDE::IDE()>:
c00238da:	83 ec 0c             	sub    esp,0xc
c00238dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238e1:	83 ec 08             	sub    esp,0x8
c00238e4:	68 d4 d5 02 c0       	push   0xc002d5d4
c00238e9:	50                   	push   eax
c00238ea:	e8 63 08 ff ff       	call   c0014152 <HardDiskController::HardDiskController(char const*)>
c00238ef:	83 c4 10             	add    esp,0x10
c00238f2:	ba 14 d8 02 c0       	mov    edx,0xc002d814
c00238f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238fb:	89 10                	mov    DWORD PTR [eax],edx
c00238fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023901:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0023908:	90                   	nop
c0023909:	83 c4 0c             	add    esp,0xc
c002390c:	c3                   	ret    
c002390d:	90                   	nop

c002390e <IDE::prepareInterrupt(unsigned char)>:
c002390e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0023913:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023917:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c002391f:	c3                   	ret    

c0023920 <selectDrive(unsigned char, unsigned char)>:
c0023920:	c3                   	ret    
c0023921:	90                   	nop

c0023922 <IDE::getBase(unsigned char)>:
c0023922:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0023927:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002392b:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0023933:	c3                   	ret    

c0023934 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0023934:	55                   	push   ebp
c0023935:	57                   	push   edi
c0023936:	56                   	push   esi
c0023937:	53                   	push   ebx
c0023938:	83 ec 1c             	sub    esp,0x1c
c002393b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002393f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023943:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0023946:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002394a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002394e:	80 f9 03             	cmp    cl,0x3
c0023951:	77 51                	ja     c00239a4 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0023953:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023957:	0f b6 f2             	movzx  esi,dl
c002395a:	0f b6 db             	movzx  ebx,bl
c002395d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023960:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0023964:	83 ca 80             	or     edx,0xffffff80
c0023967:	0f b6 d2             	movzx  edx,dl
c002396a:	52                   	push   edx
c002396b:	6a 0c                	push   0xc
c002396d:	56                   	push   esi
c002396e:	57                   	push   edi
c002396f:	e8 c0 ff ff ff       	call   c0023934 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023974:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0023979:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002397d:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0023981:	ee                   	out    dx,al
c0023982:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0023987:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c002398b:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c002398f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023993:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002399b:	83 c4 2c             	add    esp,0x2c
c002399e:	5b                   	pop    ebx
c002399f:	5e                   	pop    esi
c00239a0:	5f                   	pop    edi
c00239a1:	5d                   	pop    ebp
c00239a2:	eb 90                	jmp    c0023934 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00239a4:	80 fb 07             	cmp    bl,0x7
c00239a7:	77 12                	ja     c00239bb <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c00239a9:	0f b6 d2             	movzx  edx,dl
c00239ac:	0f b6 db             	movzx  ebx,bl
c00239af:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c00239b7:	89 da                	mov    edx,ebx
c00239b9:	eb 2f                	jmp    c00239ea <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00239bb:	80 fb 0d             	cmp    bl,0xd
c00239be:	77 13                	ja     c00239d3 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c00239c0:	0f b6 d2             	movzx  edx,dl
c00239c3:	0f b6 db             	movzx  ebx,bl
c00239c6:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c00239cd:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c00239d1:	eb 17                	jmp    c00239ea <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00239d3:	80 fb 15             	cmp    bl,0x15
c00239d6:	77 13                	ja     c00239eb <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c00239d8:	0f b6 d2             	movzx  edx,dl
c00239db:	0f b6 db             	movzx  ebx,bl
c00239de:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c00239e6:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c00239ea:	ee                   	out    dx,al
c00239eb:	83 c4 1c             	add    esp,0x1c
c00239ee:	5b                   	pop    ebx
c00239ef:	5e                   	pop    esi
c00239f0:	5f                   	pop    edi
c00239f1:	5d                   	pop    ebp
c00239f2:	c3                   	ret    
c00239f3:	90                   	nop

c00239f4 <IDE::read(unsigned char, unsigned char)>:
c00239f4:	55                   	push   ebp
c00239f5:	57                   	push   edi
c00239f6:	56                   	push   esi
c00239f7:	53                   	push   ebx
c00239f8:	83 ec 1c             	sub    esp,0x1c
c00239fb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00239ff:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023a03:	8d 43 f8             	lea    eax,[ebx-0x8]
c0023a06:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023a0a:	3c 03                	cmp    al,0x3
c0023a0c:	77 43                	ja     c0023a51 <IDE::read(unsigned char, unsigned char)+0x5d>
c0023a0e:	0f b6 f2             	movzx  esi,dl
c0023a11:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023a14:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0023a18:	83 c8 80             	or     eax,0xffffff80
c0023a1b:	0f b6 c0             	movzx  eax,al
c0023a1e:	50                   	push   eax
c0023a1f:	6a 0c                	push   0xc
c0023a21:	56                   	push   esi
c0023a22:	57                   	push   edi
c0023a23:	e8 0c ff ff ff       	call   c0023934 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a28:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0023a2d:	0f b6 c3             	movzx  eax,bl
c0023a30:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0023a34:	ec                   	in     al,dx
c0023a35:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023a39:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0023a3e:	52                   	push   edx
c0023a3f:	6a 0c                	push   0xc
c0023a41:	56                   	push   esi
c0023a42:	57                   	push   edi
c0023a43:	e8 ec fe ff ff       	call   c0023934 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a48:	83 c4 20             	add    esp,0x20
c0023a4b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023a4f:	eb 49                	jmp    c0023a9a <IDE::read(unsigned char, unsigned char)+0xa6>
c0023a51:	80 fb 07             	cmp    bl,0x7
c0023a54:	77 12                	ja     c0023a68 <IDE::read(unsigned char, unsigned char)+0x74>
c0023a56:	0f b6 d2             	movzx  edx,dl
c0023a59:	0f b6 c3             	movzx  eax,bl
c0023a5c:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023a64:	89 c2                	mov    edx,eax
c0023a66:	eb 31                	jmp    c0023a99 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023a68:	80 fb 0d             	cmp    bl,0xd
c0023a6b:	77 13                	ja     c0023a80 <IDE::read(unsigned char, unsigned char)+0x8c>
c0023a6d:	0f b6 d2             	movzx  edx,dl
c0023a70:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023a77:	0f b6 d3             	movzx  edx,bl
c0023a7a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0023a7e:	eb 19                	jmp    c0023a99 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023a80:	31 c0                	xor    eax,eax
c0023a82:	80 fb 15             	cmp    bl,0x15
c0023a85:	77 13                	ja     c0023a9a <IDE::read(unsigned char, unsigned char)+0xa6>
c0023a87:	0f b6 d2             	movzx  edx,dl
c0023a8a:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023a92:	0f b6 d3             	movzx  edx,bl
c0023a95:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023a99:	ec                   	in     al,dx
c0023a9a:	83 c4 1c             	add    esp,0x1c
c0023a9d:	5b                   	pop    ebx
c0023a9e:	5e                   	pop    esi
c0023a9f:	5f                   	pop    edi
c0023aa0:	5d                   	pop    ebp
c0023aa1:	c3                   	ret    

c0023aa2 <IDE::waitInterrupt(unsigned char)>:
c0023aa2:	55                   	push   ebp
c0023aa3:	57                   	push   edi
c0023aa4:	56                   	push   esi
c0023aa5:	53                   	push   ebx
c0023aa6:	31 db                	xor    ebx,ebx
c0023aa8:	83 ec 0c             	sub    esp,0xc
c0023aab:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023aaf:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023ab4:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023abc:	89 e8                	mov    eax,ebp
c0023abe:	84 c0                	test   al,al
c0023ac0:	75 34                	jne    c0023af6 <IDE::waitInterrupt(unsigned char)+0x54>
c0023ac2:	52                   	push   edx
c0023ac3:	6a 0c                	push   0xc
c0023ac5:	56                   	push   esi
c0023ac6:	57                   	push   edi
c0023ac7:	e8 28 ff ff ff       	call   c00239f4 <IDE::read(unsigned char, unsigned char)>
c0023acc:	83 c4 10             	add    esp,0x10
c0023acf:	a8 01                	test   al,0x1
c0023ad1:	75 2b                	jne    c0023afe <IDE::waitInterrupt(unsigned char)+0x5c>
c0023ad3:	f6 c3 04             	test   bl,0x4
c0023ad6:	75 16                	jne    c0023aee <IDE::waitInterrupt(unsigned char)+0x4c>
c0023ad8:	83 fb 32             	cmp    ebx,0x32
c0023adb:	7e 11                	jle    c0023aee <IDE::waitInterrupt(unsigned char)+0x4c>
c0023add:	50                   	push   eax
c0023ade:	50                   	push   eax
c0023adf:	6a 00                	push   0x0
c0023ae1:	68 80 96 98 00       	push   0x989680
c0023ae6:	e8 6c a9 ff ff       	call   c001e457 <nanoSleep(unsigned long long)>
c0023aeb:	83 c4 10             	add    esp,0x10
c0023aee:	83 fb 3c             	cmp    ebx,0x3c
c0023af1:	74 0b                	je     c0023afe <IDE::waitInterrupt(unsigned char)+0x5c>
c0023af3:	43                   	inc    ebx
c0023af4:	eb be                	jmp    c0023ab4 <IDE::waitInterrupt(unsigned char)+0x12>
c0023af6:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0023afe:	83 c4 0c             	add    esp,0xc
c0023b01:	89 e8                	mov    eax,ebp
c0023b03:	5b                   	pop    ebx
c0023b04:	5e                   	pop    esi
c0023b05:	5f                   	pop    edi
c0023b06:	5d                   	pop    ebp
c0023b07:	c3                   	ret    

c0023b08 <ideChannel0IRQHandler(regs*, void*)>:
c0023b08:	83 ec 10             	sub    esp,0x10
c0023b0b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023b0f:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023b16:	6a 07                	push   0x7
c0023b18:	6a 00                	push   0x0
c0023b1a:	50                   	push   eax
c0023b1b:	e8 d4 fe ff ff       	call   c00239f4 <IDE::read(unsigned char, unsigned char)>
c0023b20:	83 c4 1c             	add    esp,0x1c
c0023b23:	c3                   	ret    

c0023b24 <ideChannel1IRQHandler(regs*, void*)>:
c0023b24:	83 ec 10             	sub    esp,0x10
c0023b27:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023b2b:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023b32:	6a 07                	push   0x7
c0023b34:	6a 01                	push   0x1
c0023b36:	50                   	push   eax
c0023b37:	e8 b8 fe ff ff       	call   c00239f4 <IDE::read(unsigned char, unsigned char)>
c0023b3c:	83 c4 1c             	add    esp,0x1c
c0023b3f:	c3                   	ret    

c0023b40 <IDE::enableIRQs(unsigned char, bool)>:
c0023b40:	57                   	push   edi
c0023b41:	56                   	push   esi
c0023b42:	be 04 00 00 00       	mov    esi,0x4
c0023b47:	53                   	push   ebx
c0023b48:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023b4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023b51:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023b56:	0f 94 c0             	sete   al
c0023b59:	d1 e0                	shl    eax,1
c0023b5b:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023b62:	0f b6 c0             	movzx  eax,al
c0023b65:	50                   	push   eax
c0023b66:	6a 0c                	push   0xc
c0023b68:	57                   	push   edi
c0023b69:	53                   	push   ebx
c0023b6a:	e8 c5 fd ff ff       	call   c0023934 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023b6f:	83 c4 10             	add    esp,0x10
c0023b72:	50                   	push   eax
c0023b73:	6a 0c                	push   0xc
c0023b75:	57                   	push   edi
c0023b76:	53                   	push   ebx
c0023b77:	e8 78 fe ff ff       	call   c00239f4 <IDE::read(unsigned char, unsigned char)>
c0023b7c:	83 c4 10             	add    esp,0x10
c0023b7f:	4e                   	dec    esi
c0023b80:	75 f0                	jne    c0023b72 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023b82:	5b                   	pop    ebx
c0023b83:	5e                   	pop    esi
c0023b84:	5f                   	pop    edi
c0023b85:	c3                   	ret    

c0023b86 <IDE::open(int, int, void*)>:
c0023b86:	55                   	push   ebp
c0023b87:	57                   	push   edi
c0023b88:	56                   	push   esi
c0023b89:	53                   	push   ebx
c0023b8a:	83 ec 1c             	sub    esp,0x1c
c0023b8d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023b91:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023b9a:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023ba3:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023baa:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023bb1:	0f 85 b0 02 00 00    	jne    c0023e67 <IDE::open(int, int, void*)+0x2e1>
c0023bb7:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023bbd:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023bc1:	83 e0 7f             	and    eax,0x7f
c0023bc4:	3c 05                	cmp    al,0x5
c0023bc6:	74 04                	je     c0023bcc <IDE::open(int, int, void*)+0x46>
c0023bc8:	3c 0f                	cmp    al,0xf
c0023bca:	75 32                	jne    c0023bfe <IDE::open(int, int, void*)+0x78>
c0023bcc:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023bd2:	83 e0 fc             	and    eax,0xfffffffc
c0023bd5:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023bdc:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023be2:	83 e0 fc             	and    eax,0xfffffffc
c0023be5:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023bec:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023bf2:	83 e0 fc             	and    eax,0xfffffffc
c0023bf5:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023bfc:	eb 14                	jmp    c0023c12 <IDE::open(int, int, void*)+0x8c>
c0023bfe:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023c08:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023c12:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023c19:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023c20:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023c24:	89 c6                	mov    esi,eax
c0023c26:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023c2b:	c1 e6 10             	shl    esi,0x10
c0023c2e:	89 e8                	mov    eax,ebp
c0023c30:	89 fa                	mov    edx,edi
c0023c32:	c1 e0 0b             	shl    eax,0xb
c0023c35:	09 f0                	or     eax,esi
c0023c37:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023c3e:	c1 e6 08             	shl    esi,0x8
c0023c41:	09 c6                	or     esi,eax
c0023c43:	89 f0                	mov    eax,esi
c0023c45:	0d 08 00 00 80       	or     eax,0x80000008
c0023c4a:	ef                   	out    dx,eax
c0023c4b:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023c50:	89 ca                	mov    edx,ecx
c0023c52:	ed                   	in     eax,dx
c0023c53:	c1 e8 10             	shr    eax,0x10
c0023c56:	3d ff ff 00 00       	cmp    eax,0xffff
c0023c5b:	0f 84 f5 00 00 00    	je     c0023d56 <IDE::open(int, int, void*)+0x1d0>
c0023c61:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023c67:	89 fa                	mov    edx,edi
c0023c69:	89 f0                	mov    eax,esi
c0023c6b:	ef                   	out    dx,eax
c0023c6c:	b0 fe                	mov    al,0xfe
c0023c6e:	89 ca                	mov    edx,ecx
c0023c70:	ee                   	out    dx,al
c0023c71:	89 f0                	mov    eax,esi
c0023c73:	89 fa                	mov    edx,edi
c0023c75:	ef                   	out    dx,eax
c0023c76:	89 ca                	mov    edx,ecx
c0023c78:	ed                   	in     eax,dx
c0023c79:	3c fe                	cmp    al,0xfe
c0023c7b:	0f 85 a9 00 00 00    	jne    c0023d2a <IDE::open(int, int, void*)+0x1a4>
c0023c81:	8b 15 c8 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f0c8
c0023c87:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023c8e:	74 33                	je     c0023cc3 <IDE::open(int, int, void*)+0x13d>
c0023c90:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023c96:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023c9a:	40                   	inc    eax
c0023c9b:	83 ec 0c             	sub    esp,0xc
c0023c9e:	0f b6 c0             	movzx  eax,al
c0023ca1:	50                   	push   eax
c0023ca2:	55                   	push   ebp
c0023ca3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023ca7:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023cad:	51                   	push   ecx
c0023cae:	e8 a1 41 ff ff       	call   c0017e54 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023cb3:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023cb8:	83 c4 1c             	add    esp,0x1c
c0023cbb:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023cc1:	eb 0a                	jmp    c0023ccd <IDE::open(int, int, void*)+0x147>
c0023cc3:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023ccd:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023cd4:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023cdb:	c1 e1 10             	shl    ecx,0x10
c0023cde:	c1 e0 08             	shl    eax,0x8
c0023ce1:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023ce6:	09 c1                	or     ecx,eax
c0023ce8:	89 fa                	mov    edx,edi
c0023cea:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023cf1:	c1 e0 0b             	shl    eax,0xb
c0023cf4:	09 c1                	or     ecx,eax
c0023cf6:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023cfc:	89 c8                	mov    eax,ecx
c0023cfe:	ef                   	out    dx,eax
c0023cff:	be fc 0c 00 00       	mov    esi,0xcfc
c0023d04:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023d0a:	89 f2                	mov    edx,esi
c0023d0c:	ee                   	out    dx,al
c0023d0d:	89 c8                	mov    eax,ecx
c0023d0f:	89 fa                	mov    edx,edi
c0023d11:	ef                   	out    dx,eax
c0023d12:	89 f2                	mov    edx,esi
c0023d14:	ed                   	in     eax,dx
c0023d15:	0f b6 c0             	movzx  eax,al
c0023d18:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023d1e:	74 46                	je     c0023d66 <IDE::open(int, int, void*)+0x1e0>
c0023d20:	83 ec 0c             	sub    esp,0xc
c0023d23:	68 ec d5 02 c0       	push   0xc002d5ec
c0023d28:	eb 34                	jmp    c0023d5e <IDE::open(int, int, void*)+0x1d8>
c0023d2a:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023d33:	75 17                	jne    c0023d4c <IDE::open(int, int, void*)+0x1c6>
c0023d35:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023d3a:	74 07                	je     c0023d43 <IDE::open(int, int, void*)+0x1bd>
c0023d3c:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023d41:	75 09                	jne    c0023d4c <IDE::open(int, int, void*)+0x1c6>
c0023d43:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023d4a:	eb 1a                	jmp    c0023d66 <IDE::open(int, int, void*)+0x1e0>
c0023d4c:	83 ec 0c             	sub    esp,0xc
c0023d4f:	68 f4 d5 02 c0       	push   0xc002d5f4
c0023d54:	eb 08                	jmp    c0023d5e <IDE::open(int, int, void*)+0x1d8>
c0023d56:	83 ec 0c             	sub    esp,0xc
c0023d59:	68 25 d6 02 c0       	push   0xc002d625
c0023d5e:	e8 3e 66 ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c0023d63:	83 c4 10             	add    esp,0x10
c0023d66:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023d6d:	79 1a                	jns    c0023d89 <IDE::open(int, int, void*)+0x203>
c0023d6f:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023d75:	83 e0 fc             	and    eax,0xfffffffc
c0023d78:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023d7f:	83 c0 08             	add    eax,0x8
c0023d82:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023d89:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023d8f:	89 c2                	mov    edx,eax
c0023d91:	83 e2 0f             	and    edx,0xf
c0023d94:	66 83 fa 08          	cmp    dx,0x8
c0023d98:	75 0a                	jne    c0023da4 <IDE::open(int, int, void*)+0x21e>
c0023d9a:	83 e8 02             	sub    eax,0x2
c0023d9d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023da4:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023daa:	89 c2                	mov    edx,eax
c0023dac:	83 e2 0f             	and    edx,0xf
c0023daf:	66 83 fa 08          	cmp    dx,0x8
c0023db3:	75 0a                	jne    c0023dbf <IDE::open(int, int, void*)+0x239>
c0023db5:	83 e8 02             	sub    eax,0x2
c0023db8:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023dbf:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023dc6:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023dcd:	89 d0                	mov    eax,edx
c0023dcf:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023dd2:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023dd6:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023dda:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023ddd:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023de2:	0f b6 c9             	movzx  ecx,cl
c0023de5:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023dec:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023def:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023df3:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023df7:	8d 50 02             	lea    edx,[eax+0x2]
c0023dfa:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023dff:	0f b6 d2             	movzx  edx,dl
c0023e02:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023e08:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023e0b:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023e0f:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023e13:	8d 48 03             	lea    ecx,[eax+0x3]
c0023e16:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023e1b:	0f b6 c9             	movzx  ecx,cl
c0023e1e:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023e24:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023e27:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023e2b:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023e2f:	8d 50 04             	lea    edx,[eax+0x4]
c0023e32:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023e38:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023e3d:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023e44:	66 85 f6             	test   si,si
c0023e47:	74 3e                	je     c0023e87 <IDE::open(int, int, void*)+0x301>
c0023e49:	0f b6 d2             	movzx  edx,dl
c0023e4c:	83 c0 05             	add    eax,0x5
c0023e4f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023e52:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023e56:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023e5a:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023e60:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023e65:	eb 20                	jmp    c0023e87 <IDE::open(int, int, void*)+0x301>
c0023e67:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023e71:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023e7b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023e82:	e9 02 ff ff ff       	jmp    c0023d89 <IDE::open(int, int, void*)+0x203>
c0023e87:	52                   	push   edx
c0023e88:	52                   	push   edx
c0023e89:	6a 00                	push   0x0
c0023e8b:	53                   	push   ebx
c0023e8c:	e8 7d fa ff ff       	call   c002390e <IDE::prepareInterrupt(unsigned char)>
c0023e91:	59                   	pop    ecx
c0023e92:	5e                   	pop    esi
c0023e93:	6a 01                	push   0x1
c0023e95:	53                   	push   ebx
c0023e96:	e8 73 fa ff ff       	call   c002390e <IDE::prepareInterrupt(unsigned char)>
c0023e9b:	83 c4 0c             	add    esp,0xc
c0023e9e:	6a 00                	push   0x0
c0023ea0:	6a 00                	push   0x0
c0023ea2:	53                   	push   ebx
c0023ea3:	e8 98 fc ff ff       	call   c0023b40 <IDE::enableIRQs(unsigned char, bool)>
c0023ea8:	83 c4 0c             	add    esp,0xc
c0023eab:	6a 00                	push   0x0
c0023ead:	6a 01                	push   0x1
c0023eaf:	53                   	push   ebx
c0023eb0:	e8 8b fc ff ff       	call   c0023b40 <IDE::enableIRQs(unsigned char, bool)>
c0023eb5:	83 c4 10             	add    esp,0x10
c0023eb8:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023ebf:	74 40                	je     c0023f01 <IDE::open(int, int, void*)+0x37b>
c0023ec1:	83 ec 0c             	sub    esp,0xc
c0023ec4:	68 4f d6 02 c0       	push   0xc002d64f
c0023ec9:	e8 9d ea fe ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0023ece:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023ed1:	6a 01                	push   0x1
c0023ed3:	68 08 3b 02 c0       	push   0xc0023b08
c0023ed8:	6a 0e                	push   0xe
c0023eda:	53                   	push   ebx
c0023edb:	e8 3c fe fe ff       	call   c0013d1c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023ee0:	83 c4 14             	add    esp,0x14
c0023ee3:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023ee9:	53                   	push   ebx
c0023eea:	6a 01                	push   0x1
c0023eec:	68 24 3b 02 c0       	push   0xc0023b24
c0023ef1:	6a 0f                	push   0xf
c0023ef3:	53                   	push   ebx
c0023ef4:	e8 23 fe fe ff       	call   c0013d1c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023ef9:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023eff:	eb 4a                	jmp    c0023f4b <IDE::open(int, int, void*)+0x3c5>
c0023f01:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023f0b:	50                   	push   eax
c0023f0c:	6a 0f                	push   0xf
c0023f0e:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023f14:	68 6b d6 02 c0       	push   0xc002d66b
c0023f19:	e8 4d ea fe ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0023f1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023f21:	6a 00                	push   0x0
c0023f23:	68 08 3b 02 c0       	push   0xc0023b08
c0023f28:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023f2e:	53                   	push   ebx
c0023f2f:	e8 e8 fd fe ff       	call   c0013d1c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023f34:	83 c4 14             	add    esp,0x14
c0023f37:	53                   	push   ebx
c0023f38:	6a 00                	push   0x0
c0023f3a:	68 24 3b 02 c0       	push   0xc0023b24
c0023f3f:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023f45:	53                   	push   ebx
c0023f46:	e8 d1 fd fe ff       	call   c0013d1c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023f4b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023f4d:	83 c4 20             	add    esp,0x20
c0023f50:	83 ec 0c             	sub    esp,0xc
c0023f53:	53                   	push   ebx
c0023f54:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023f57:	83 c4 0c             	add    esp,0xc
c0023f5a:	6a 07                	push   0x7
c0023f5c:	6a 00                	push   0x0
c0023f5e:	53                   	push   ebx
c0023f5f:	e8 90 fa ff ff       	call   c00239f4 <IDE::read(unsigned char, unsigned char)>
c0023f64:	83 c4 0c             	add    esp,0xc
c0023f67:	6a 07                	push   0x7
c0023f69:	6a 01                	push   0x1
c0023f6b:	53                   	push   ebx
c0023f6c:	e8 83 fa ff ff       	call   c00239f4 <IDE::read(unsigned char, unsigned char)>
c0023f71:	83 c4 0c             	add    esp,0xc
c0023f74:	6a 01                	push   0x1
c0023f76:	6a 00                	push   0x0
c0023f78:	53                   	push   ebx
c0023f79:	e8 c2 fb ff ff       	call   c0023b40 <IDE::enableIRQs(unsigned char, bool)>
c0023f7e:	83 c4 0c             	add    esp,0xc
c0023f81:	6a 01                	push   0x1
c0023f83:	6a 01                	push   0x1
c0023f85:	53                   	push   ebx
c0023f86:	e8 b5 fb ff ff       	call   c0023b40 <IDE::enableIRQs(unsigned char, bool)>
c0023f8b:	83 c4 2c             	add    esp,0x2c
c0023f8e:	31 c0                	xor    eax,eax
c0023f90:	5b                   	pop    ebx
c0023f91:	5e                   	pop    esi
c0023f92:	5f                   	pop    edi
c0023f93:	5d                   	pop    ebp
c0023f94:	c3                   	ret    
c0023f95:	90                   	nop

c0023f96 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023f96:	55                   	push   ebp
c0023f97:	57                   	push   edi
c0023f98:	56                   	push   esi
c0023f99:	53                   	push   ebx
c0023f9a:	83 ec 1c             	sub    esp,0x1c
c0023f9d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023fa1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023fa5:	8d 50 f8             	lea    edx,[eax-0x8]
c0023fa8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023fac:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023fb0:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023fb4:	80 fa 03             	cmp    dl,0x3
c0023fb7:	77 5d                	ja     c0024016 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0023fb9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023fbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023fc1:	0f b6 db             	movzx  ebx,bl
c0023fc4:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023fc7:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023fcb:	83 ca 80             	or     edx,0xffffff80
c0023fce:	0f b6 d2             	movzx  edx,dl
c0023fd1:	52                   	push   edx
c0023fd2:	6a 0c                	push   0xc
c0023fd4:	53                   	push   ebx
c0023fd5:	56                   	push   esi
c0023fd6:	e8 59 f9 ff ff       	call   c0023934 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fdb:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023fe0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023fe4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023fe8:	0f b6 c0             	movzx  eax,al
c0023feb:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0023fef:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023ff1:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023ff6:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023ffa:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023ffe:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0024002:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002400a:	83 c4 2c             	add    esp,0x2c
c002400d:	5b                   	pop    ebx
c002400e:	5e                   	pop    esi
c002400f:	5f                   	pop    edi
c0024010:	5d                   	pop    ebp
c0024011:	e9 1e f9 ff ff       	jmp    c0023934 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024016:	3c 07                	cmp    al,0x7
c0024018:	77 10                	ja     c002402a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c002401a:	0f b6 db             	movzx  ebx,bl
c002401d:	0f b6 d0             	movzx  edx,al
c0024020:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0024028:	eb 2d                	jmp    c0024057 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002402a:	3c 0d                	cmp    al,0xd
c002402c:	77 13                	ja     c0024041 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c002402e:	0f b6 db             	movzx  ebx,bl
c0024031:	0f b6 c0             	movzx  eax,al
c0024034:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c002403b:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c002403f:	eb 16                	jmp    c0024057 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0024041:	3c 15                	cmp    al,0x15
c0024043:	77 14                	ja     c0024059 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0024045:	0f b6 db             	movzx  ebx,bl
c0024048:	0f b6 c0             	movzx  eax,al
c002404b:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0024053:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0024057:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0024059:	83 c4 1c             	add    esp,0x1c
c002405c:	5b                   	pop    ebx
c002405d:	5e                   	pop    esi
c002405e:	5f                   	pop    edi
c002405f:	5d                   	pop    ebp
c0024060:	c3                   	ret    
c0024061:	90                   	nop

c0024062 <IDE::detect()>:
c0024062:	55                   	push   ebp
c0024063:	57                   	push   edi
c0024064:	56                   	push   esi
c0024065:	53                   	push   ebx
c0024066:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002406c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0024073:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c002407a:	0f 85 be 02 00 00    	jne    c002433e <IDE::detect()+0x2dc>
c0024080:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0024087:	31 f6                	xor    esi,esi
c0024089:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0024091:	31 ed                	xor    ebp,ebp
c0024093:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0024097:	c1 e0 06             	shl    eax,0x6
c002409a:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c00240a2:	89 e8                	mov    eax,ebp
c00240a4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00240a8:	c1 e0 04             	shl    eax,0x4
c00240ab:	83 c8 a0             	or     eax,0xffffffa0
c00240ae:	0f b6 c0             	movzx  eax,al
c00240b1:	50                   	push   eax
c00240b2:	6a 06                	push   0x6
c00240b4:	56                   	push   esi
c00240b5:	53                   	push   ebx
c00240b6:	e8 79 f8 ff ff       	call   c0023934 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240bb:	83 c4 0c             	add    esp,0xc
c00240be:	6a 0c                	push   0xc
c00240c0:	56                   	push   esi
c00240c1:	53                   	push   ebx
c00240c2:	e8 2d f9 ff ff       	call   c00239f4 <IDE::read(unsigned char, unsigned char)>
c00240c7:	83 c4 0c             	add    esp,0xc
c00240ca:	6a 0c                	push   0xc
c00240cc:	56                   	push   esi
c00240cd:	53                   	push   ebx
c00240ce:	e8 21 f9 ff ff       	call   c00239f4 <IDE::read(unsigned char, unsigned char)>
c00240d3:	83 c4 0c             	add    esp,0xc
c00240d6:	6a 0c                	push   0xc
c00240d8:	56                   	push   esi
c00240d9:	53                   	push   ebx
c00240da:	e8 15 f9 ff ff       	call   c00239f4 <IDE::read(unsigned char, unsigned char)>
c00240df:	83 c4 0c             	add    esp,0xc
c00240e2:	6a 0c                	push   0xc
c00240e4:	56                   	push   esi
c00240e5:	53                   	push   ebx
c00240e6:	e8 09 f9 ff ff       	call   c00239f4 <IDE::read(unsigned char, unsigned char)>
c00240eb:	68 ec 00 00 00       	push   0xec
c00240f0:	6a 07                	push   0x7
c00240f2:	56                   	push   esi
c00240f3:	53                   	push   ebx
c00240f4:	e8 3b f8 ff ff       	call   c0023934 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240f9:	83 c4 1c             	add    esp,0x1c
c00240fc:	6a 0c                	push   0xc
c00240fe:	56                   	push   esi
c00240ff:	53                   	push   ebx
c0024100:	e8 ef f8 ff ff       	call   c00239f4 <IDE::read(unsigned char, unsigned char)>
c0024105:	83 c4 0c             	add    esp,0xc
c0024108:	6a 0c                	push   0xc
c002410a:	56                   	push   esi
c002410b:	53                   	push   ebx
c002410c:	e8 e3 f8 ff ff       	call   c00239f4 <IDE::read(unsigned char, unsigned char)>
c0024111:	83 c4 0c             	add    esp,0xc
c0024114:	6a 0c                	push   0xc
c0024116:	56                   	push   esi
c0024117:	53                   	push   ebx
c0024118:	e8 d7 f8 ff ff       	call   c00239f4 <IDE::read(unsigned char, unsigned char)>
c002411d:	83 c4 0c             	add    esp,0xc
c0024120:	6a 0c                	push   0xc
c0024122:	56                   	push   esi
c0024123:	53                   	push   ebx
c0024124:	e8 cb f8 ff ff       	call   c00239f4 <IDE::read(unsigned char, unsigned char)>
c0024129:	83 c4 0c             	add    esp,0xc
c002412c:	6a 0c                	push   0xc
c002412e:	56                   	push   esi
c002412f:	53                   	push   ebx
c0024130:	e8 bf f8 ff ff       	call   c00239f4 <IDE::read(unsigned char, unsigned char)>
c0024135:	83 c4 10             	add    esp,0x10
c0024138:	84 c0                	test   al,al
c002413a:	0f 84 8b 01 00 00    	je     c00242cb <IDE::detect()+0x269>
c0024140:	31 ff                	xor    edi,edi
c0024142:	50                   	push   eax
c0024143:	6a 0c                	push   0xc
c0024145:	56                   	push   esi
c0024146:	53                   	push   ebx
c0024147:	e8 a8 f8 ff ff       	call   c00239f4 <IDE::read(unsigned char, unsigned char)>
c002414c:	83 c4 10             	add    esp,0x10
c002414f:	a8 01                	test   al,0x1
c0024151:	0f 85 8e 01 00 00    	jne    c00242e5 <IDE::detect()+0x283>
c0024157:	84 c0                	test   al,al
c0024159:	78 04                	js     c002415f <IDE::detect()+0xfd>
c002415b:	a8 08                	test   al,0x8
c002415d:	75 27                	jne    c0024186 <IDE::detect()+0x124>
c002415f:	47                   	inc    edi
c0024160:	81 ff 17 01 00 00    	cmp    edi,0x117
c0024166:	7e da                	jle    c0024142 <IDE::detect()+0xe0>
c0024168:	50                   	push   eax
c0024169:	50                   	push   eax
c002416a:	6a 00                	push   0x0
c002416c:	68 40 4b 4c 00       	push   0x4c4b40
c0024171:	e8 e1 a2 ff ff       	call   c001e457 <nanoSleep(unsigned long long)>
c0024176:	83 c4 10             	add    esp,0x10
c0024179:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c002417f:	75 c1                	jne    c0024142 <IDE::detect()+0xe0>
c0024181:	e9 5f 01 00 00       	jmp    c00242e5 <IDE::detect()+0x283>
c0024186:	31 c9                	xor    ecx,ecx
c0024188:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002418c:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0024190:	83 ec 0c             	sub    esp,0xc
c0024193:	68 80 00 00 00       	push   0x80
c0024198:	57                   	push   edi
c0024199:	6a 00                	push   0x0
c002419b:	56                   	push   esi
c002419c:	53                   	push   ebx
c002419d:	e8 f4 fd ff ff       	call   c0023f96 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00241a2:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00241a7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00241ab:	89 d1                	mov    ecx,edx
c00241ad:	c1 e0 06             	shl    eax,0x6
c00241b0:	01 d8                	add    eax,ebx
c00241b2:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00241b9:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00241c0:	89 f2                	mov    edx,esi
c00241c2:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00241c8:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00241cc:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00241d2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00241d6:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00241dd:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00241e5:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00241ec:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00241f4:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00241fa:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0024201:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0024207:	8d 54 24 58          	lea    edx,[esp+0x58]
c002420b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002420f:	83 c4 20             	add    esp,0x20
c0024212:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0024215:	83 c0 02             	add    eax,0x2
c0024218:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002421e:	83 c7 02             	add    edi,0x2
c0024221:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0024224:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002422a:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c002422e:	75 e2                	jne    c0024212 <IDE::detect()+0x1b0>
c0024230:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0024234:	c1 e0 06             	shl    eax,0x6
c0024237:	01 d8                	add    eax,ebx
c0024239:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c002423f:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0024246:	66 c1 ea 09          	shr    dx,0x9
c002424a:	83 e2 01             	and    edx,0x1
c002424d:	84 c9                	test   cl,cl
c002424f:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0024255:	75 2f                	jne    c0024286 <IDE::detect()+0x224>
c0024257:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c002425d:	85 c0                	test   eax,eax
c002425f:	74 66                	je     c00242c7 <IDE::detect()+0x265>
c0024261:	50                   	push   eax
c0024262:	55                   	push   ebp
c0024263:	56                   	push   esi
c0024264:	68 87 d6 02 c0       	push   0xc002d687
c0024269:	e8 fd e6 fe ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c002426e:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0024275:	e8 12 b6 fe ff       	call   c000f88c <malloc>
c002427a:	89 c7                	mov    edi,eax
c002427c:	89 04 24             	mov    DWORD PTR [esp],eax
c002427f:	e8 78 06 00 00       	call   c00248fc <ATA::ATA()>
c0024284:	eb 28                	jmp    c00242ae <IDE::detect()+0x24c>
c0024286:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c002428c:	55                   	push   ebp
c002428d:	56                   	push   esi
c002428e:	68 b6 d6 02 c0       	push   0xc002d6b6
c0024293:	e8 d3 e6 fe ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0024298:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c002429f:	e8 e8 b5 fe ff       	call   c000f88c <malloc>
c00242a4:	89 c7                	mov    edi,eax
c00242a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00242a9:	e8 56 0c 00 00       	call   c0024f04 <ATAPI::ATAPI()>
c00242ae:	5a                   	pop    edx
c00242af:	59                   	pop    ecx
c00242b0:	57                   	push   edi
c00242b1:	53                   	push   ebx
c00242b2:	e8 ed fa fe ff       	call   c0013da4 <Device::addChild(Device*)>
c00242b7:	8b 07                	mov    eax,DWORD PTR [edi]
c00242b9:	53                   	push   ebx
c00242ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00242be:	6a 00                	push   0x0
c00242c0:	57                   	push   edi
c00242c1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00242c4:	83 c4 20             	add    esp,0x20
c00242c7:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00242cb:	4d                   	dec    ebp
c00242cc:	74 0a                	je     c00242d8 <IDE::detect()+0x276>
c00242ce:	bd 01 00 00 00       	mov    ebp,0x1
c00242d3:	e9 bb fd ff ff       	jmp    c0024093 <IDE::detect()+0x31>
c00242d8:	4e                   	dec    esi
c00242d9:	74 63                	je     c002433e <IDE::detect()+0x2dc>
c00242db:	be 01 00 00 00       	mov    esi,0x1
c00242e0:	e9 ac fd ff ff       	jmp    c0024091 <IDE::detect()+0x2f>
c00242e5:	50                   	push   eax
c00242e6:	6a 04                	push   0x4
c00242e8:	56                   	push   esi
c00242e9:	53                   	push   ebx
c00242ea:	e8 05 f7 ff ff       	call   c00239f4 <IDE::read(unsigned char, unsigned char)>
c00242ef:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00242f3:	83 c4 0c             	add    esp,0xc
c00242f6:	6a 05                	push   0x5
c00242f8:	56                   	push   esi
c00242f9:	53                   	push   ebx
c00242fa:	e8 f5 f6 ff ff       	call   c00239f4 <IDE::read(unsigned char, unsigned char)>
c00242ff:	83 c4 10             	add    esp,0x10
c0024302:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0024306:	80 fa 14             	cmp    dl,0x14
c0024309:	75 04                	jne    c002430f <IDE::detect()+0x2ad>
c002430b:	3c eb                	cmp    al,0xeb
c002430d:	eb 07                	jmp    c0024316 <IDE::detect()+0x2b4>
c002430f:	3c 96                	cmp    al,0x96
c0024311:	75 b8                	jne    c00242cb <IDE::detect()+0x269>
c0024313:	80 fa 69             	cmp    dl,0x69
c0024316:	75 b3                	jne    c00242cb <IDE::detect()+0x269>
c0024318:	68 a1 00 00 00       	push   0xa1
c002431d:	6a 07                	push   0x7
c002431f:	56                   	push   esi
c0024320:	53                   	push   ebx
c0024321:	e8 0e f6 ff ff       	call   c0023934 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024326:	5f                   	pop    edi
c0024327:	58                   	pop    eax
c0024328:	6a 00                	push   0x0
c002432a:	68 40 42 0f 00       	push   0xf4240
c002432f:	e8 23 a1 ff ff       	call   c001e457 <nanoSleep(unsigned long long)>
c0024334:	83 c4 10             	add    esp,0x10
c0024337:	b1 01                	mov    cl,0x1
c0024339:	e9 4a fe ff ff       	jmp    c0024188 <IDE::detect()+0x126>
c002433e:	81 c4 1c 02 00 00    	add    esp,0x21c
c0024344:	5b                   	pop    ebx
c0024345:	5e                   	pop    esi
c0024346:	5f                   	pop    edi
c0024347:	5d                   	pop    ebp
c0024348:	c3                   	ret    
c0024349:	90                   	nop

c002434a <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c002434a:	55                   	push   ebp
c002434b:	57                   	push   edi
c002434c:	56                   	push   esi
c002434d:	53                   	push   ebx
c002434e:	83 ec 1c             	sub    esp,0x1c
c0024351:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0024355:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0024359:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002435d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0024361:	88 c3                	mov    bl,al
c0024363:	84 c0                	test   al,al
c0024365:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024369:	0f 84 67 01 00 00    	je     c00244d6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c002436f:	83 ec 0c             	sub    esp,0xc
c0024372:	68 e7 d6 02 c0       	push   0xc002d6e7
c0024377:	e8 ef e5 fe ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c002437c:	83 c4 10             	add    esp,0x10
c002437f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024383:	3c 01                	cmp    al,0x1
c0024385:	75 17                	jne    c002439e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0024387:	83 ec 0c             	sub    esp,0xc
c002438a:	b3 13                	mov    bl,0x13
c002438c:	68 f3 d6 02 c0       	push   0xc002d6f3
c0024391:	e8 d5 e5 fe ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0024396:	83 c4 10             	add    esp,0x10
c0024399:	e9 25 01 00 00       	jmp    c00244c3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002439e:	3c 02                	cmp    al,0x2
c00243a0:	0f 85 ef 00 00 00    	jne    c0024495 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c00243a6:	d1 e6                	shl    esi,1
c00243a8:	09 ee                	or     esi,ebp
c00243aa:	52                   	push   edx
c00243ab:	89 f0                	mov    eax,esi
c00243ad:	6a 01                	push   0x1
c00243af:	0f b6 f0             	movzx  esi,al
c00243b2:	c1 e6 06             	shl    esi,0x6
c00243b5:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c00243bd:	50                   	push   eax
c00243be:	57                   	push   edi
c00243bf:	e8 30 f6 ff ff       	call   c00239f4 <IDE::read(unsigned char, unsigned char)>
c00243c4:	83 c4 10             	add    esp,0x10
c00243c7:	89 c6                	mov    esi,eax
c00243c9:	a8 01                	test   al,0x1
c00243cb:	74 12                	je     c00243df <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c00243cd:	83 ec 0c             	sub    esp,0xc
c00243d0:	b3 07                	mov    bl,0x7
c00243d2:	68 08 d7 02 c0       	push   0xc002d708
c00243d7:	e8 8f e5 fe ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c00243dc:	83 c4 10             	add    esp,0x10
c00243df:	f7 c6 02 00 00 00    	test   esi,0x2
c00243e5:	74 12                	je     c00243f9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c00243e7:	83 ec 0c             	sub    esp,0xc
c00243ea:	b3 03                	mov    bl,0x3
c00243ec:	68 26 d7 02 c0       	push   0xc002d726
c00243f1:	e8 75 e5 fe ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c00243f6:	83 c4 10             	add    esp,0x10
c00243f9:	f7 c6 04 00 00 00    	test   esi,0x4
c00243ff:	74 12                	je     c0024413 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0024401:	83 ec 0c             	sub    esp,0xc
c0024404:	b3 14                	mov    bl,0x14
c0024406:	68 46 d7 02 c0       	push   0xc002d746
c002440b:	e8 5b e5 fe ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0024410:	83 c4 10             	add    esp,0x10
c0024413:	f7 c6 08 00 00 00    	test   esi,0x8
c0024419:	74 12                	je     c002442d <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c002441b:	83 ec 0c             	sub    esp,0xc
c002441e:	b3 03                	mov    bl,0x3
c0024420:	68 26 d7 02 c0       	push   0xc002d726
c0024425:	e8 41 e5 fe ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c002442a:	83 c4 10             	add    esp,0x10
c002442d:	f7 c6 10 00 00 00    	test   esi,0x10
c0024433:	74 12                	je     c0024447 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0024435:	83 ec 0c             	sub    esp,0xc
c0024438:	b3 15                	mov    bl,0x15
c002443a:	68 5e d7 02 c0       	push   0xc002d75e
c002443f:	e8 27 e5 fe ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0024444:	83 c4 10             	add    esp,0x10
c0024447:	f7 c6 20 00 00 00    	test   esi,0x20
c002444d:	74 12                	je     c0024461 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c002444f:	83 ec 0c             	sub    esp,0xc
c0024452:	b3 03                	mov    bl,0x3
c0024454:	68 26 d7 02 c0       	push   0xc002d726
c0024459:	e8 0d e5 fe ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c002445e:	83 c4 10             	add    esp,0x10
c0024461:	f7 c6 40 00 00 00    	test   esi,0x40
c0024467:	74 12                	je     c002447b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0024469:	83 ec 0c             	sub    esp,0xc
c002446c:	b3 16                	mov    bl,0x16
c002446e:	68 78 d7 02 c0       	push   0xc002d778
c0024473:	e8 f3 e4 fe ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0024478:	83 c4 10             	add    esp,0x10
c002447b:	89 f0                	mov    eax,esi
c002447d:	84 c0                	test   al,al
c002447f:	79 42                	jns    c00244c3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024481:	83 ec 0c             	sub    esp,0xc
c0024484:	b3 0d                	mov    bl,0xd
c0024486:	68 99 d7 02 c0       	push   0xc002d799
c002448b:	e8 db e4 fe ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0024490:	83 c4 10             	add    esp,0x10
c0024493:	eb 2e                	jmp    c00244c3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024495:	3c 03                	cmp    al,0x3
c0024497:	75 14                	jne    c00244ad <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0024499:	83 ec 0c             	sub    esp,0xc
c002449c:	b3 17                	mov    bl,0x17
c002449e:	68 ad d7 02 c0       	push   0xc002d7ad
c00244a3:	e8 c3 e4 fe ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c00244a8:	83 c4 10             	add    esp,0x10
c00244ab:	eb 16                	jmp    c00244c3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00244ad:	3c 04                	cmp    al,0x4
c00244af:	75 12                	jne    c00244c3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00244b1:	83 ec 0c             	sub    esp,0xc
c00244b4:	b3 08                	mov    bl,0x8
c00244b6:	68 c3 d7 02 c0       	push   0xc002d7c3
c00244bb:	e8 ab e4 fe ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c00244c0:	83 c4 10             	add    esp,0x10
c00244c3:	50                   	push   eax
c00244c4:	50                   	push   eax
c00244c5:	0f b6 c3             	movzx  eax,bl
c00244c8:	50                   	push   eax
c00244c9:	68 db d7 02 c0       	push   0xc002d7db
c00244ce:	e8 98 e4 fe ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c00244d3:	83 c4 10             	add    esp,0x10
c00244d6:	83 c4 1c             	add    esp,0x1c
c00244d9:	88 d8                	mov    al,bl
c00244db:	5b                   	pop    ebx
c00244dc:	5e                   	pop    esi
c00244dd:	5f                   	pop    edi
c00244de:	5d                   	pop    ebp
c00244df:	c3                   	ret    

c00244e0 <IDE::polling(unsigned char, unsigned int)>:
c00244e0:	57                   	push   edi
c00244e1:	56                   	push   esi
c00244e2:	53                   	push   ebx
c00244e3:	bb 04 00 00 00       	mov    ebx,0x4
c00244e8:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00244ec:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00244f1:	52                   	push   edx
c00244f2:	6a 0c                	push   0xc
c00244f4:	56                   	push   esi
c00244f5:	57                   	push   edi
c00244f6:	e8 f9 f4 ff ff       	call   c00239f4 <IDE::read(unsigned char, unsigned char)>
c00244fb:	83 c4 10             	add    esp,0x10
c00244fe:	4b                   	dec    ebx
c00244ff:	75 f0                	jne    c00244f1 <IDE::polling(unsigned char, unsigned int)+0x11>
c0024501:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024506:	50                   	push   eax
c0024507:	6a 0c                	push   0xc
c0024509:	56                   	push   esi
c002450a:	57                   	push   edi
c002450b:	e8 e4 f4 ff ff       	call   c00239f4 <IDE::read(unsigned char, unsigned char)>
c0024510:	83 c4 10             	add    esp,0x10
c0024513:	a8 01                	test   al,0x1
c0024515:	74 12                	je     c0024529 <IDE::polling(unsigned char, unsigned int)+0x49>
c0024517:	83 ec 0c             	sub    esp,0xc
c002451a:	68 f5 d7 02 c0       	push   0xc002d7f5
c002451f:	e8 47 e4 fe ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0024524:	83 c4 10             	add    esp,0x10
c0024527:	eb 17                	jmp    c0024540 <IDE::polling(unsigned char, unsigned int)+0x60>
c0024529:	a8 20                	test   al,0x20
c002452b:	75 0f                	jne    c002453c <IDE::polling(unsigned char, unsigned int)+0x5c>
c002452d:	4b                   	dec    ebx
c002452e:	74 10                	je     c0024540 <IDE::polling(unsigned char, unsigned int)+0x60>
c0024530:	84 c0                	test   al,al
c0024532:	78 d2                	js     c0024506 <IDE::polling(unsigned char, unsigned int)+0x26>
c0024534:	a8 08                	test   al,0x8
c0024536:	74 ce                	je     c0024506 <IDE::polling(unsigned char, unsigned int)+0x26>
c0024538:	31 c0                	xor    eax,eax
c002453a:	eb 06                	jmp    c0024542 <IDE::polling(unsigned char, unsigned int)+0x62>
c002453c:	b0 01                	mov    al,0x1
c002453e:	eb 02                	jmp    c0024542 <IDE::polling(unsigned char, unsigned int)+0x62>
c0024540:	b0 02                	mov    al,0x2
c0024542:	5b                   	pop    ebx
c0024543:	5e                   	pop    esi
c0024544:	5f                   	pop    edi
c0024545:	c3                   	ret    

c0024546 <SATABus::close(int, int, void*)>:
c0024546:	31 c0                	xor    eax,eax
c0024548:	c3                   	ret    
c0024549:	90                   	nop

c002454a <SATABus::detect()>:
c002454a:	c3                   	ret    
c002454b:	90                   	nop

c002454c <SATABus::SATABus()>:
c002454c:	83 ec 0c             	sub    esp,0xc
c002454f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024553:	83 ec 08             	sub    esp,0x8
c0024556:	68 38 d8 02 c0       	push   0xc002d838
c002455b:	50                   	push   eax
c002455c:	e8 f1 fb fe ff       	call   c0014152 <HardDiskController::HardDiskController(char const*)>
c0024561:	83 c4 10             	add    esp,0x10
c0024564:	ba f4 d8 02 c0       	mov    edx,0xc002d8f4
c0024569:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002456d:	89 10                	mov    DWORD PTR [eax],edx
c002456f:	83 ec 0c             	sub    esp,0xc
c0024572:	6a 50                	push   0x50
c0024574:	e8 69 b7 fe ff       	call   c000fce2 <Phys::allocateContiguousPages(int)>
c0024579:	83 c4 10             	add    esp,0x10
c002457c:	89 c2                	mov    edx,eax
c002457e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024582:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0024588:	83 ec 0c             	sub    esp,0xc
c002458b:	6a 50                	push   0x50
c002458d:	e8 d3 cf fe ff       	call   c0011565 <Virt::allocateKernelVirtualPages(int)>
c0024592:	83 c4 10             	add    esp,0x10
c0024595:	89 c2                	mov    edx,eax
c0024597:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002459b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00245a1:	a1 30 f2 02 c0       	mov    eax,ds:0xc002f230
c00245a6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00245aa:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c00245b0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00245b4:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00245ba:	83 ec 0c             	sub    esp,0xc
c00245bd:	6a 03                	push   0x3
c00245bf:	6a 50                	push   0x50
c00245c1:	51                   	push   ecx
c00245c2:	52                   	push   edx
c00245c3:	50                   	push   eax
c00245c4:	e8 c9 da fe ff       	call   c0012092 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00245c9:	83 c4 20             	add    esp,0x20
c00245cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245d0:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c00245d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245da:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00245e0:	83 ec 04             	sub    esp,0x4
c00245e3:	52                   	push   edx
c00245e4:	50                   	push   eax
c00245e5:	68 5c d8 02 c0       	push   0xc002d85c
c00245ea:	e8 7c e3 fe ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c00245ef:	83 c4 10             	add    esp,0x10
c00245f2:	90                   	nop
c00245f3:	83 c4 0c             	add    esp,0xc
c00245f6:	c3                   	ret    
c00245f7:	90                   	nop

c00245f8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c00245f8:	83 ec 0c             	sub    esp,0xc
c00245fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00245ff:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0024602:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0024605:	09 c2                	or     edx,eax
c0024607:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002460b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024611:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024613:	31 c0                	xor    eax,eax
c0024615:	c1 e9 08             	shr    ecx,0x8
c0024618:	83 e1 0f             	and    ecx,0xf
c002461b:	39 c8                	cmp    eax,ecx
c002461d:	74 0a                	je     c0024629 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c002461f:	f6 c2 01             	test   dl,0x1
c0024622:	74 18                	je     c002463c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0024624:	d1 ea                	shr    edx,1
c0024626:	40                   	inc    eax
c0024627:	eb f2                	jmp    c002461b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0024629:	83 ec 0c             	sub    esp,0xc
c002462c:	68 80 d8 02 c0       	push   0xc002d880
c0024631:	e8 6b 5d ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c0024636:	83 c4 10             	add    esp,0x10
c0024639:	83 c8 ff             	or     eax,0xffffffff
c002463c:	83 c4 0c             	add    esp,0xc
c002463f:	c3                   	ret    

c0024640 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0024640:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024644:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0024647:	89 c2                	mov    edx,eax
c0024649:	c1 ea 08             	shr    edx,0x8
c002464c:	83 e2 0f             	and    edx,0xf
c002464f:	fe ca                	dec    dl
c0024651:	75 31                	jne    c0024684 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0024653:	83 e0 0f             	and    eax,0xf
c0024656:	3c 03                	cmp    al,0x3
c0024658:	75 2a                	jne    c0024684 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002465a:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c002465d:	b8 02 00 00 00       	mov    eax,0x2
c0024662:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0024668:	74 1c                	je     c0024686 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002466a:	b8 04 00 00 00       	mov    eax,0x4
c002466f:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0024675:	74 0f                	je     c0024686 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0024677:	31 c0                	xor    eax,eax
c0024679:	83 fa 03             	cmp    edx,0x3
c002467c:	0f 94 c0             	sete   al
c002467f:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0024683:	c3                   	ret    
c0024684:	31 c0                	xor    eax,eax
c0024686:	c3                   	ret    
c0024687:	90                   	nop

c0024688 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0024688:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002468c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002468f:	0f ba e2 0f          	bt     edx,0xf
c0024693:	72 f7                	jb     c002468c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0024695:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024698:	83 ca 10             	or     edx,0x10
c002469b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002469e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00246a1:	83 ca 01             	or     edx,0x1
c00246a4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00246a7:	c3                   	ret    

c00246a8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c00246a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00246ac:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00246af:	83 e2 fe             	and    edx,0xfffffffe
c00246b2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00246b5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00246b8:	83 e2 ef             	and    edx,0xffffffef
c00246bb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00246be:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00246c1:	0f ba e2 0e          	bt     edx,0xe
c00246c5:	72 f7                	jb     c00246be <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00246c7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00246ca:	0f ba e2 0f          	bt     edx,0xf
c00246ce:	72 ee                	jb     c00246be <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00246d0:	c3                   	ret    
c00246d1:	90                   	nop

c00246d2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c00246d2:	55                   	push   ebp
c00246d3:	57                   	push   edi
c00246d4:	56                   	push   esi
c00246d5:	53                   	push   ebx
c00246d6:	83 ec 1c             	sub    esp,0x1c
c00246d9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00246dd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00246e1:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00246e5:	53                   	push   ebx
c00246e6:	89 fd                	mov    ebp,edi
c00246e8:	56                   	push   esi
c00246e9:	c1 e5 0a             	shl    ebp,0xa
c00246ec:	e8 b7 ff ff ff       	call   c00246a8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c00246f1:	83 ec 0c             	sub    esp,0xc
c00246f4:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c00246fa:	01 e8                	add    eax,ebp
c00246fc:	89 03                	mov    DWORD PTR [ebx],eax
c00246fe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024700:	68 00 04 00 00       	push   0x400
c0024705:	6a 00                	push   0x0
c0024707:	50                   	push   eax
c0024708:	e8 43 c0 fd ff       	call   c0000750 <memset>
c002470d:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0024713:	89 fa                	mov    edx,edi
c0024715:	01 e8                	add    eax,ebp
c0024717:	c1 e7 0d             	shl    edi,0xd
c002471a:	89 03                	mov    DWORD PTR [ebx],eax
c002471c:	c1 e2 08             	shl    edx,0x8
c002471f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0024726:	81 c2 00 80 00 00    	add    edx,0x8000
c002472c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0024730:	89 d0                	mov    eax,edx
c0024732:	83 c4 1c             	add    esp,0x1c
c0024735:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c002473b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002473e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0024741:	68 00 01 00 00       	push   0x100
c0024746:	6a 00                	push   0x0
c0024748:	50                   	push   eax
c0024749:	e8 02 c0 fd ff       	call   c0000750 <memset>
c002474e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024752:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0024758:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c002475e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024762:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0024765:	83 c4 10             	add    esp,0x10
c0024768:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002476f:	31 ff                	xor    edi,edi
c0024771:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0024777:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c002477d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024781:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0024787:	83 c5 20             	add    ebp,0x20
c002478a:	01 f8                	add    eax,edi
c002478c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002478f:	52                   	push   edx
c0024790:	68 00 01 00 00       	push   0x100
c0024795:	6a 00                	push   0x0
c0024797:	50                   	push   eax
c0024798:	e8 b3 bf fd ff       	call   c0000750 <memset>
c002479d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00247a1:	83 c4 10             	add    esp,0x10
c00247a4:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c00247aa:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00247b1:	01 f8                	add    eax,edi
c00247b3:	81 c7 00 01 00 00    	add    edi,0x100
c00247b9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00247bc:	81 ff 00 20 00 00    	cmp    edi,0x2000
c00247c2:	75 b3                	jne    c0024777 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c00247c4:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00247c8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c00247cc:	83 c4 1c             	add    esp,0x1c
c00247cf:	5b                   	pop    ebx
c00247d0:	5e                   	pop    esi
c00247d1:	5f                   	pop    edi
c00247d2:	5d                   	pop    ebp
c00247d3:	e9 b0 fe ff ff       	jmp    c0024688 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c00247d8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c00247d8:	55                   	push   ebp
c00247d9:	57                   	push   edi
c00247da:	56                   	push   esi
c00247db:	53                   	push   ebx
c00247dc:	31 db                	xor    ebx,ebx
c00247de:	83 ec 0c             	sub    esp,0xc
c00247e1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00247e5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00247e9:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c00247ec:	f7 c7 01 00 00 00    	test   edi,0x1
c00247f2:	0f 84 aa 00 00 00    	je     c00248a2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c00247f8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00247fc:	89 d8                	mov    eax,ebx
c00247fe:	c1 e0 07             	shl    eax,0x7
c0024801:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0024808:	55                   	push   ebp
c0024809:	56                   	push   esi
c002480a:	e8 31 fe ff ff       	call   c0024640 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c002480f:	5a                   	pop    edx
c0024810:	83 f8 01             	cmp    eax,0x1
c0024813:	59                   	pop    ecx
c0024814:	75 30                	jne    c0024846 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0024816:	50                   	push   eax
c0024817:	50                   	push   eax
c0024818:	53                   	push   ebx
c0024819:	68 a5 d8 02 c0       	push   0xc002d8a5
c002481e:	e8 48 e1 fe ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0024823:	83 c4 0c             	add    esp,0xc
c0024826:	53                   	push   ebx
c0024827:	55                   	push   ebp
c0024828:	56                   	push   esi
c0024829:	e8 a4 fe ff ff       	call   c00246d2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002482e:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0024835:	e8 52 b0 fe ff       	call   c000f88c <malloc>
c002483a:	89 c5                	mov    ebp,eax
c002483c:	89 04 24             	mov    DWORD PTR [esp],eax
c002483f:	e8 24 0d 00 00       	call   c0025568 <SATA::SATA()>
c0024844:	eb 33                	jmp    c0024879 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0024846:	83 f8 04             	cmp    eax,0x4
c0024849:	75 47                	jne    c0024892 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c002484b:	50                   	push   eax
c002484c:	50                   	push   eax
c002484d:	53                   	push   ebx
c002484e:	68 bc d8 02 c0       	push   0xc002d8bc
c0024853:	e8 13 e1 fe ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0024858:	83 c4 0c             	add    esp,0xc
c002485b:	53                   	push   ebx
c002485c:	55                   	push   ebp
c002485d:	56                   	push   esi
c002485e:	e8 6f fe ff ff       	call   c00246d2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0024863:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c002486a:	e8 1d b0 fe ff       	call   c000f88c <malloc>
c002486f:	89 c5                	mov    ebp,eax
c0024871:	89 04 24             	mov    DWORD PTR [esp],eax
c0024874:	e8 65 10 00 00       	call   c00258de <SATAPI::SATAPI()>
c0024879:	5a                   	pop    edx
c002487a:	59                   	pop    ecx
c002487b:	55                   	push   ebp
c002487c:	56                   	push   esi
c002487d:	e8 22 f5 fe ff       	call   c0013da4 <Device::addChild(Device*)>
c0024882:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0024885:	56                   	push   esi
c0024886:	6a 00                	push   0x0
c0024888:	53                   	push   ebx
c0024889:	55                   	push   ebp
c002488a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002488d:	83 c4 20             	add    esp,0x20
c0024890:	eb 10                	jmp    c00248a2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0024892:	50                   	push   eax
c0024893:	50                   	push   eax
c0024894:	53                   	push   ebx
c0024895:	68 d5 d8 02 c0       	push   0xc002d8d5
c002489a:	e8 cc e0 fe ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c002489f:	83 c4 10             	add    esp,0x10
c00248a2:	d1 ef                	shr    edi,1
c00248a4:	43                   	inc    ebx
c00248a5:	83 fb 20             	cmp    ebx,0x20
c00248a8:	0f 85 3e ff ff ff    	jne    c00247ec <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c00248ae:	83 c4 0c             	add    esp,0xc
c00248b1:	5b                   	pop    ebx
c00248b2:	5e                   	pop    esi
c00248b3:	5f                   	pop    edi
c00248b4:	5d                   	pop    ebp
c00248b5:	c3                   	ret    

c00248b6 <SATABus::open(int, int, void*)>:
c00248b6:	83 ec 14             	sub    esp,0x14
c00248b9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00248bd:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c00248c3:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00248c9:	52                   	push   edx
c00248ca:	50                   	push   eax
c00248cb:	e8 08 ff ff ff       	call   c00247d8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c00248d0:	31 c0                	xor    eax,eax
c00248d2:	83 c4 1c             	add    esp,0x1c
c00248d5:	c3                   	ret    

c00248d6 <ATA::close(int, int, void*)>:
c00248d6:	83 ec 0c             	sub    esp,0xc
c00248d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248dd:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00248e3:	85 c0                	test   eax,eax
c00248e5:	74 0c                	je     c00248f3 <ATA::close(int, int, void*)+0x1d>
c00248e7:	83 ec 0c             	sub    esp,0xc
c00248ea:	8b 10                	mov    edx,DWORD PTR [eax]
c00248ec:	50                   	push   eax
c00248ed:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00248f0:	83 c4 10             	add    esp,0x10
c00248f3:	31 c0                	xor    eax,eax
c00248f5:	83 c4 0c             	add    esp,0xc
c00248f8:	c3                   	ret    
c00248f9:	90                   	nop

c00248fa <ATA::powerSaving(PowerSavingLevel)>:
c00248fa:	c3                   	ret    
c00248fb:	90                   	nop

c00248fc <ATA::ATA()>:
c00248fc:	83 ec 0c             	sub    esp,0xc
c00248ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024903:	83 ec 04             	sub    esp,0x4
c0024906:	68 00 02 00 00       	push   0x200
c002490b:	68 bd d9 02 c0       	push   0xc002d9bd
c0024910:	50                   	push   eax
c0024911:	e8 d4 f8 fe ff       	call   c00141ea <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024916:	83 c4 10             	add    esp,0x10
c0024919:	ba 40 d9 02 c0       	mov    edx,0xc002d940
c002491e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024922:	89 10                	mov    DWORD PTR [eax],edx
c0024924:	90                   	nop
c0024925:	83 c4 0c             	add    esp,0xc
c0024928:	c3                   	ret    
c0024929:	90                   	nop

c002492a <ATA::flush(bool)>:
c002492a:	53                   	push   ebx
c002492b:	83 ec 08             	sub    esp,0x8
c002492e:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0024933:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024937:	19 c0                	sbb    eax,eax
c0024939:	83 e0 fd             	and    eax,0xfffffffd
c002493c:	05 ea 00 00 00       	add    eax,0xea
c0024941:	50                   	push   eax
c0024942:	6a 07                	push   0x7
c0024944:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002494b:	50                   	push   eax
c002494c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024952:	e8 dd ef ff ff       	call   c0023934 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024957:	83 c4 0c             	add    esp,0xc
c002495a:	6a 00                	push   0x0
c002495c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024963:	50                   	push   eax
c0024964:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002496a:	e8 71 fb ff ff       	call   c00244e0 <IDE::polling(unsigned char, unsigned int)>
c002496f:	83 c4 18             	add    esp,0x18
c0024972:	5b                   	pop    ebx
c0024973:	c3                   	ret    

c0024974 <ATA::readyForCommand()>:
c0024974:	56                   	push   esi
c0024975:	53                   	push   ebx
c0024976:	31 db                	xor    ebx,ebx
c0024978:	50                   	push   eax
c0024979:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002497d:	50                   	push   eax
c002497e:	6a 0c                	push   0xc
c0024980:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024987:	50                   	push   eax
c0024988:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002498e:	e8 61 f0 ff ff       	call   c00239f4 <IDE::read(unsigned char, unsigned char)>
c0024993:	83 c4 10             	add    esp,0x10
c0024996:	a8 88                	test   al,0x88
c0024998:	74 23                	je     c00249bd <ATA::readyForCommand()+0x49>
c002499a:	43                   	inc    ebx
c002499b:	83 fb 63             	cmp    ebx,0x63
c002499e:	7e dd                	jle    c002497d <ATA::readyForCommand()+0x9>
c00249a0:	51                   	push   ecx
c00249a1:	51                   	push   ecx
c00249a2:	6a 00                	push   0x0
c00249a4:	68 40 42 0f 00       	push   0xf4240
c00249a9:	e8 a9 9a ff ff       	call   c001e457 <nanoSleep(unsigned long long)>
c00249ae:	83 c4 10             	add    esp,0x10
c00249b1:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00249b7:	75 c4                	jne    c002497d <ATA::readyForCommand()+0x9>
c00249b9:	31 c0                	xor    eax,eax
c00249bb:	eb 02                	jmp    c00249bf <ATA::readyForCommand()+0x4b>
c00249bd:	b0 01                	mov    al,0x1
c00249bf:	5a                   	pop    edx
c00249c0:	5b                   	pop    ebx
c00249c1:	5e                   	pop    esi
c00249c2:	c3                   	ret    
c00249c3:	90                   	nop

c00249c4 <ATA::access(unsigned long long, int, void*, bool)>:
c00249c4:	55                   	push   ebp
c00249c5:	57                   	push   edi
c00249c6:	56                   	push   esi
c00249c7:	53                   	push   ebx
c00249c8:	83 ec 2c             	sub    esp,0x2c
c00249cb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00249cf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00249d3:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00249d7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00249db:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00249df:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00249e3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00249e7:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00249ed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00249f1:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00249f7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00249fb:	c1 e0 06             	shl    eax,0x6
c00249fe:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0024a06:	74 5d                	je     c0024a65 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0024a08:	89 fa                	mov    edx,edi
c0024a0a:	89 f0                	mov    eax,esi
c0024a0c:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0024a10:	c1 ea 1c             	shr    edx,0x1c
c0024a13:	89 d1                	mov    ecx,edx
c0024a15:	09 c1                	or     ecx,eax
c0024a17:	74 25                	je     c0024a3e <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0024a19:	31 ed                	xor    ebp,ebp
c0024a1b:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0024a22:	89 fa                	mov    edx,edi
c0024a24:	89 f0                	mov    eax,esi
c0024a26:	0f ad d0             	shrd   eax,edx,cl
c0024a29:	d3 ea                	shr    edx,cl
c0024a2b:	f6 c1 20             	test   cl,0x20
c0024a2e:	74 02                	je     c0024a32 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0024a30:	89 d0                	mov    eax,edx
c0024a32:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0024a36:	45                   	inc    ebp
c0024a37:	83 fd 06             	cmp    ebp,0x6
c0024a3a:	75 df                	jne    c0024a1b <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0024a3c:	eb 76                	jmp    c0024ab4 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0024a3e:	89 f0                	mov    eax,esi
c0024a40:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0024a45:	89 fa                	mov    edx,edi
c0024a47:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024a4e:	0f ac d0 10          	shrd   eax,edx,0x10
c0024a52:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024a57:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0024a5b:	c1 ee 18             	shr    esi,0x18
c0024a5e:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0024a63:	eb 56                	jmp    c0024abb <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024a65:	6a 00                	push   0x0
c0024a67:	6a 3f                	push   0x3f
c0024a69:	57                   	push   edi
c0024a6a:	56                   	push   esi
c0024a6b:	e8 24 29 00 00       	call   c0027394 <__umoddi3>
c0024a70:	83 c4 10             	add    esp,0x10
c0024a73:	40                   	inc    eax
c0024a74:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0024a78:	6a 00                	push   0x0
c0024a7a:	68 f0 03 00 00       	push   0x3f0
c0024a7f:	57                   	push   edi
c0024a80:	56                   	push   esi
c0024a81:	e8 0e 28 00 00       	call   c0027294 <__udivdi3>
c0024a86:	83 c4 10             	add    esp,0x10
c0024a89:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0024a8e:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024a95:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024a9a:	6a 00                	push   0x0
c0024a9c:	6a 3f                	push   0x3f
c0024a9e:	57                   	push   edi
c0024a9f:	56                   	push   esi
c0024aa0:	e8 ef 27 00 00       	call   c0027294 <__udivdi3>
c0024aa5:	83 c4 10             	add    esp,0x10
c0024aa8:	89 c6                	mov    esi,eax
c0024aaa:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0024aaf:	83 e6 0f             	and    esi,0xf
c0024ab2:	eb 07                	jmp    c0024abb <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024ab4:	31 f6                	xor    esi,esi
c0024ab6:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0024abb:	bf 01 00 00 00       	mov    edi,0x1
c0024ac0:	50                   	push   eax
c0024ac1:	6a 00                	push   0x0
c0024ac3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024aca:	50                   	push   eax
c0024acb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024acf:	e8 6c f0 ff ff       	call   c0023b40 <IDE::enableIRQs(unsigned char, bool)>
c0024ad4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024ad7:	e8 98 fe ff ff       	call   c0024974 <ATA::readyForCommand()>
c0024adc:	83 c4 10             	add    esp,0x10
c0024adf:	84 c0                	test   al,al
c0024ae1:	0f 84 5a 02 00 00    	je     c0024d41 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024ae7:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024aed:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024af3:	c1 e0 04             	shl    eax,0x4
c0024af6:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0024afd:	09 c6                	or     esi,eax
c0024aff:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024b04:	75 05                	jne    c0024b0b <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0024b06:	83 ce a0             	or     esi,0xffffffa0
c0024b09:	eb 03                	jmp    c0024b0e <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0024b0b:	83 ce e0             	or     esi,0xffffffe0
c0024b0e:	89 f0                	mov    eax,esi
c0024b10:	0f b6 f0             	movzx  esi,al
c0024b13:	56                   	push   esi
c0024b14:	6a 06                	push   0x6
c0024b16:	51                   	push   ecx
c0024b17:	52                   	push   edx
c0024b18:	e8 17 ee ff ff       	call   c0023934 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b1d:	83 c4 10             	add    esp,0x10
c0024b20:	6a 00                	push   0x0
c0024b22:	6a 01                	push   0x1
c0024b24:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b2b:	50                   	push   eax
c0024b2c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b32:	e8 fd ed ff ff       	call   c0023934 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b37:	83 c4 10             	add    esp,0x10
c0024b3a:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024b3f:	75 6e                	jne    c0024baf <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0024b41:	6a 00                	push   0x0
c0024b43:	6a 08                	push   0x8
c0024b45:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b4c:	50                   	push   eax
c0024b4d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b53:	e8 dc ed ff ff       	call   c0023934 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b58:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0024b5d:	50                   	push   eax
c0024b5e:	6a 09                	push   0x9
c0024b60:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b67:	50                   	push   eax
c0024b68:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b6e:	e8 c1 ed ff ff       	call   c0023934 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b73:	83 c4 20             	add    esp,0x20
c0024b76:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0024b7b:	50                   	push   eax
c0024b7c:	6a 0a                	push   0xa
c0024b7e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b85:	50                   	push   eax
c0024b86:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b8c:	e8 a3 ed ff ff       	call   c0023934 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b91:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024b96:	50                   	push   eax
c0024b97:	6a 0b                	push   0xb
c0024b99:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ba0:	50                   	push   eax
c0024ba1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ba7:	e8 88 ed ff ff       	call   c0023934 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024bac:	83 c4 20             	add    esp,0x20
c0024baf:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024bb4:	50                   	push   eax
c0024bb5:	6a 02                	push   0x2
c0024bb7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024bbe:	50                   	push   eax
c0024bbf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024bc5:	e8 6a ed ff ff       	call   c0023934 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024bca:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024bcf:	50                   	push   eax
c0024bd0:	6a 03                	push   0x3
c0024bd2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024bd9:	50                   	push   eax
c0024bda:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024be0:	e8 4f ed ff ff       	call   c0023934 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024be5:	83 c4 20             	add    esp,0x20
c0024be8:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024bed:	50                   	push   eax
c0024bee:	6a 04                	push   0x4
c0024bf0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024bf7:	50                   	push   eax
c0024bf8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024bfe:	e8 31 ed ff ff       	call   c0023934 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024c03:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024c08:	50                   	push   eax
c0024c09:	6a 05                	push   0x5
c0024c0b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024c12:	50                   	push   eax
c0024c13:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c19:	e8 16 ed ff ff       	call   c0023934 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024c1e:	83 c4 20             	add    esp,0x20
c0024c21:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024c26:	0f 94 c0             	sete   al
c0024c29:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024c2e:	74 09                	je     c0024c39 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0024c30:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024c37:	eb 07                	jmp    c0024c40 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0024c39:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0024c40:	0f b6 c0             	movzx  eax,al
c0024c43:	50                   	push   eax
c0024c44:	6a 07                	push   0x7
c0024c46:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024c4d:	50                   	push   eax
c0024c4e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c54:	e8 db ec ff ff       	call   c0023934 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024c59:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0024c5d:	83 c4 10             	add    esp,0x10
c0024c60:	85 f6                	test   esi,esi
c0024c62:	0f 84 ba 00 00 00    	je     c0024d22 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0024c68:	50                   	push   eax
c0024c69:	6a 01                	push   0x1
c0024c6b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024c72:	50                   	push   eax
c0024c73:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c79:	e8 62 f8 ff ff       	call   c00244e0 <IDE::polling(unsigned char, unsigned int)>
c0024c7e:	83 c4 10             	add    esp,0x10
c0024c81:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024c87:	84 c0                	test   al,al
c0024c89:	74 2c                	je     c0024cb7 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0024c8b:	0f b6 f8             	movzx  edi,al
c0024c8e:	0f b6 d2             	movzx  edx,dl
c0024c91:	57                   	push   edi
c0024c92:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024c99:	50                   	push   eax
c0024c9a:	52                   	push   edx
c0024c9b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ca1:	e8 a4 f6 ff ff       	call   c002434a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024ca6:	c7 04 24 18 d9 02 c0 	mov    DWORD PTR [esp],0xc002d918
c0024cad:	e8 b9 dc fe ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0024cb2:	e9 87 00 00 00       	jmp    c0024d3e <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024cb7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024cbc:	74 33                	je     c0024cf1 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024cbe:	31 ed                	xor    ebp,ebp
c0024cc0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024cc4:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024cc8:	50                   	push   eax
c0024cc9:	50                   	push   eax
c0024cca:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024cd1:	50                   	push   eax
c0024cd2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024cd8:	e8 45 ec ff ff       	call   c0023922 <IDE::getBase(unsigned char)>
c0024cdd:	89 c2                	mov    edx,eax
c0024cdf:	89 f8                	mov    eax,edi
c0024ce1:	66 ef                	out    dx,ax
c0024ce3:	45                   	inc    ebp
c0024ce4:	83 c4 10             	add    esp,0x10
c0024ce7:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024ced:	75 d1                	jne    c0024cc0 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0024cef:	eb 23                	jmp    c0024d14 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024cf1:	0f b6 d2             	movzx  edx,dl
c0024cf4:	51                   	push   ecx
c0024cf5:	51                   	push   ecx
c0024cf6:	52                   	push   edx
c0024cf7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024cfd:	e8 20 ec ff ff       	call   c0023922 <IDE::getBase(unsigned char)>
c0024d02:	b9 00 01 00 00       	mov    ecx,0x100
c0024d07:	89 c2                	mov    edx,eax
c0024d09:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0024d0d:	fc                   	cld    
c0024d0e:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0024d11:	83 c4 10             	add    esp,0x10
c0024d14:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0024d1c:	4e                   	dec    esi
c0024d1d:	e9 3e ff ff ff       	jmp    c0024c60 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024d22:	31 ff                	xor    edi,edi
c0024d24:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024d29:	74 16                	je     c0024d41 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024d2b:	50                   	push   eax
c0024d2c:	50                   	push   eax
c0024d2d:	31 c0                	xor    eax,eax
c0024d2f:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024d34:	0f 94 c0             	sete   al
c0024d37:	50                   	push   eax
c0024d38:	53                   	push   ebx
c0024d39:	e8 ec fb ff ff       	call   c002492a <ATA::flush(bool)>
c0024d3e:	83 c4 10             	add    esp,0x10
c0024d41:	83 c4 2c             	add    esp,0x2c
c0024d44:	89 f8                	mov    eax,edi
c0024d46:	5b                   	pop    ebx
c0024d47:	5e                   	pop    esi
c0024d48:	5f                   	pop    edi
c0024d49:	5d                   	pop    ebp
c0024d4a:	c3                   	ret    
c0024d4b:	90                   	nop

c0024d4c <ATA::read(unsigned long long, int, void*)>:
c0024d4c:	57                   	push   edi
c0024d4d:	b8 04 00 00 00       	mov    eax,0x4
c0024d52:	56                   	push   esi
c0024d53:	53                   	push   ebx
c0024d54:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024d58:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024d5c:	8d 7a ff             	lea    edi,[edx-0x1]
c0024d5f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024d63:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024d67:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024d6d:	77 25                	ja     c0024d94 <ATA::read(unsigned long long, int, void*)+0x48>
c0024d6f:	b8 06 00 00 00       	mov    eax,0x6
c0024d74:	85 f6                	test   esi,esi
c0024d76:	74 1c                	je     c0024d94 <ATA::read(unsigned long long, int, void*)+0x48>
c0024d78:	50                   	push   eax
c0024d79:	50                   	push   eax
c0024d7a:	6a 00                	push   0x0
c0024d7c:	56                   	push   esi
c0024d7d:	52                   	push   edx
c0024d7e:	53                   	push   ebx
c0024d7f:	51                   	push   ecx
c0024d80:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024d84:	e8 3b fc ff ff       	call   c00249c4 <ATA::access(unsigned long long, int, void*, bool)>
c0024d89:	83 c4 20             	add    esp,0x20
c0024d8c:	85 c0                	test   eax,eax
c0024d8e:	0f 95 c0             	setne  al
c0024d91:	0f b6 c0             	movzx  eax,al
c0024d94:	5b                   	pop    ebx
c0024d95:	5e                   	pop    esi
c0024d96:	5f                   	pop    edi
c0024d97:	c3                   	ret    

c0024d98 <ATA::write(unsigned long long, int, void*)>:
c0024d98:	57                   	push   edi
c0024d99:	b8 04 00 00 00       	mov    eax,0x4
c0024d9e:	56                   	push   esi
c0024d9f:	53                   	push   ebx
c0024da0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024da4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024da8:	8d 7a ff             	lea    edi,[edx-0x1]
c0024dab:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024daf:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024db3:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024db9:	77 25                	ja     c0024de0 <ATA::write(unsigned long long, int, void*)+0x48>
c0024dbb:	b8 06 00 00 00       	mov    eax,0x6
c0024dc0:	85 f6                	test   esi,esi
c0024dc2:	74 1c                	je     c0024de0 <ATA::write(unsigned long long, int, void*)+0x48>
c0024dc4:	50                   	push   eax
c0024dc5:	50                   	push   eax
c0024dc6:	6a 01                	push   0x1
c0024dc8:	56                   	push   esi
c0024dc9:	52                   	push   edx
c0024dca:	53                   	push   ebx
c0024dcb:	51                   	push   ecx
c0024dcc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024dd0:	e8 ef fb ff ff       	call   c00249c4 <ATA::access(unsigned long long, int, void*, bool)>
c0024dd5:	83 c4 20             	add    esp,0x20
c0024dd8:	85 c0                	test   eax,eax
c0024dda:	0f 95 c0             	setne  al
c0024ddd:	0f b6 c0             	movzx  eax,al
c0024de0:	5b                   	pop    ebx
c0024de1:	5e                   	pop    esi
c0024de2:	5f                   	pop    edi
c0024de3:	c3                   	ret    

c0024de4 <ATA::detectCHS()>:
c0024de4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024de8:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024dee:	c1 e0 06             	shl    eax,0x6
c0024df1:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024df7:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024e01:	c7 44 24 04 23 d9 02 c0 	mov    DWORD PTR [esp+0x4],0xc002d923
c0024e09:	e9 93 55 ff ff       	jmp    c001a3a1 <Krnl::panic(char const*)>

c0024e0e <ATA::open(int, int, void*)>:
c0024e0e:	53                   	push   ebx
c0024e0f:	83 ec 08             	sub    esp,0x8
c0024e12:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024e16:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024e1a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024e1e:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024e24:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024e2a:	c1 e0 06             	shl    eax,0x6
c0024e2d:	01 d0                	add    eax,edx
c0024e2f:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024e36:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024e3c:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024e43:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024e4d:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024e53:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024e5a:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024e61:	75 0c                	jne    c0024e6f <ATA::open(int, int, void*)+0x61>
c0024e63:	83 ec 0c             	sub    esp,0xc
c0024e66:	53                   	push   ebx
c0024e67:	e8 78 ff ff ff       	call   c0024de4 <ATA::detectCHS()>
c0024e6c:	83 c4 10             	add    esp,0x10
c0024e6f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024e75:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024e7b:	c1 e0 06             	shl    eax,0x6
c0024e7e:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024e85:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024e8f:	d1 e8                	shr    eax,1
c0024e91:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024e97:	6a 04                	push   0x4
c0024e99:	6a 0c                	push   0xc
c0024e9b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ea2:	50                   	push   eax
c0024ea3:	52                   	push   edx
c0024ea4:	e8 8b ea ff ff       	call   c0023934 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ea9:	90                   	nop
c0024eaa:	90                   	nop
c0024eab:	6a 00                	push   0x0
c0024ead:	6a 0c                	push   0xc
c0024eaf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024eb6:	50                   	push   eax
c0024eb7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ebd:	e8 72 ea ff ff       	call   c0023934 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ec2:	83 c4 14             	add    esp,0x14
c0024ec5:	53                   	push   ebx
c0024ec6:	e8 87 f3 fe ff       	call   c0014252 <PhysicalDisk::startCache()>
c0024ecb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024ece:	e8 39 16 ff ff       	call   c001650c <createPartitionsForDisk(PhysicalDisk*)>
c0024ed3:	31 c0                	xor    eax,eax
c0024ed5:	83 c4 18             	add    esp,0x18
c0024ed8:	5b                   	pop    ebx
c0024ed9:	c3                   	ret    

c0024eda <ATAPI::write(unsigned long long, int, void*)>:
c0024eda:	b8 03 00 00 00       	mov    eax,0x3
c0024edf:	c3                   	ret    

c0024ee0 <ATAPI::close(int, int, void*)>:
c0024ee0:	83 ec 0c             	sub    esp,0xc
c0024ee3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ee7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024eed:	85 c0                	test   eax,eax
c0024eef:	74 0c                	je     c0024efd <ATAPI::close(int, int, void*)+0x1d>
c0024ef1:	83 ec 0c             	sub    esp,0xc
c0024ef4:	8b 10                	mov    edx,DWORD PTR [eax]
c0024ef6:	50                   	push   eax
c0024ef7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024efa:	83 c4 10             	add    esp,0x10
c0024efd:	31 c0                	xor    eax,eax
c0024eff:	83 c4 0c             	add    esp,0xc
c0024f02:	c3                   	ret    
c0024f03:	90                   	nop

c0024f04 <ATAPI::ATAPI()>:
c0024f04:	83 ec 0c             	sub    esp,0xc
c0024f07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f0b:	83 ec 04             	sub    esp,0x4
c0024f0e:	68 00 08 00 00       	push   0x800
c0024f13:	68 5d da 02 c0       	push   0xc002da5d
c0024f18:	50                   	push   eax
c0024f19:	e8 cc f2 fe ff       	call   c00141ea <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024f1e:	83 c4 10             	add    esp,0x10
c0024f21:	ba 78 d9 02 c0       	mov    edx,0xc002d978
c0024f26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f2a:	89 10                	mov    DWORD PTR [eax],edx
c0024f2c:	90                   	nop
c0024f2d:	83 c4 0c             	add    esp,0xc
c0024f30:	c3                   	ret    
c0024f31:	90                   	nop

c0024f32 <ATAPI::readyForCommand()>:
c0024f32:	56                   	push   esi
c0024f33:	53                   	push   ebx
c0024f34:	31 db                	xor    ebx,ebx
c0024f36:	50                   	push   eax
c0024f37:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024f3b:	50                   	push   eax
c0024f3c:	6a 0c                	push   0xc
c0024f3e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024f45:	50                   	push   eax
c0024f46:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024f4c:	e8 a3 ea ff ff       	call   c00239f4 <IDE::read(unsigned char, unsigned char)>
c0024f51:	83 c4 10             	add    esp,0x10
c0024f54:	a8 88                	test   al,0x88
c0024f56:	74 23                	je     c0024f7b <ATAPI::readyForCommand()+0x49>
c0024f58:	43                   	inc    ebx
c0024f59:	83 fb 63             	cmp    ebx,0x63
c0024f5c:	7e dd                	jle    c0024f3b <ATAPI::readyForCommand()+0x9>
c0024f5e:	51                   	push   ecx
c0024f5f:	51                   	push   ecx
c0024f60:	6a 00                	push   0x0
c0024f62:	68 40 42 0f 00       	push   0xf4240
c0024f67:	e8 eb 94 ff ff       	call   c001e457 <nanoSleep(unsigned long long)>
c0024f6c:	83 c4 10             	add    esp,0x10
c0024f6f:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024f75:	75 c4                	jne    c0024f3b <ATAPI::readyForCommand()+0x9>
c0024f77:	31 c0                	xor    eax,eax
c0024f79:	eb 02                	jmp    c0024f7d <ATAPI::readyForCommand()+0x4b>
c0024f7b:	b0 01                	mov    al,0x1
c0024f7d:	5a                   	pop    edx
c0024f7e:	5b                   	pop    ebx
c0024f7f:	5e                   	pop    esi
c0024f80:	c3                   	ret    
c0024f81:	90                   	nop

c0024f82 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024f82:	55                   	push   ebp
c0024f83:	57                   	push   edi
c0024f84:	56                   	push   esi
c0024f85:	53                   	push   ebx
c0024f86:	83 ec 20             	sub    esp,0x20
c0024f89:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024f8d:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024f91:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024f95:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024f99:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024f9d:	6a 01                	push   0x1
c0024f9f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024fa6:	50                   	push   eax
c0024fa7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024fad:	e8 8e eb ff ff       	call   c0023b40 <IDE::enableIRQs(unsigned char, bool)>
c0024fb2:	5e                   	pop    esi
c0024fb3:	58                   	pop    eax
c0024fb4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024fbb:	50                   	push   eax
c0024fbc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024fc2:	e8 47 e9 ff ff       	call   c002390e <IDE::prepareInterrupt(unsigned char)>
c0024fc7:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024fca:	e8 63 ff ff ff       	call   c0024f32 <ATAPI::readyForCommand()>
c0024fcf:	83 c4 10             	add    esp,0x10
c0024fd2:	84 c0                	test   al,al
c0024fd4:	75 0a                	jne    c0024fe0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024fd6:	bb 01 00 00 00       	mov    ebx,0x1
c0024fdb:	e9 57 02 00 00       	jmp    c0025237 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024fe0:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0024fe6:	c1 e0 04             	shl    eax,0x4
c0024fe9:	0f b6 c0             	movzx  eax,al
c0024fec:	50                   	push   eax
c0024fed:	6a 06                	push   0x6
c0024fef:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024ff6:	50                   	push   eax
c0024ff7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024ffd:	e8 32 e9 ff ff       	call   c0023934 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025002:	6a 00                	push   0x0
c0025004:	6a 01                	push   0x1
c0025006:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002500d:	50                   	push   eax
c002500e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025014:	e8 1b e9 ff ff       	call   c0023934 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025019:	83 c4 20             	add    esp,0x20
c002501c:	0f b6 c3             	movzx  eax,bl
c002501f:	0f b6 df             	movzx  ebx,bh
c0025022:	50                   	push   eax
c0025023:	6a 04                	push   0x4
c0025025:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002502c:	50                   	push   eax
c002502d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025033:	e8 fc e8 ff ff       	call   c0023934 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025038:	53                   	push   ebx
c0025039:	6a 05                	push   0x5
c002503b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025042:	50                   	push   eax
c0025043:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025049:	e8 e6 e8 ff ff       	call   c0023934 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002504e:	83 c4 20             	add    esp,0x20
c0025051:	68 a0 00 00 00       	push   0xa0
c0025056:	6a 07                	push   0x7
c0025058:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002505f:	50                   	push   eax
c0025060:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025066:	e8 c9 e8 ff ff       	call   c0023934 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002506b:	83 c4 0c             	add    esp,0xc
c002506e:	6a 01                	push   0x1
c0025070:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025077:	50                   	push   eax
c0025078:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002507e:	e8 5d f4 ff ff       	call   c00244e0 <IDE::polling(unsigned char, unsigned int)>
c0025083:	83 c4 10             	add    esp,0x10
c0025086:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c002508c:	84 c0                	test   al,al
c002508e:	74 23                	je     c00250b3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0025090:	0f b6 d8             	movzx  ebx,al
c0025093:	0f b6 d2             	movzx  edx,dl
c0025096:	53                   	push   ebx
c0025097:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c002509e:	50                   	push   eax
c002509f:	52                   	push   edx
c00250a0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00250a6:	e8 9f f2 ff ff       	call   c002434a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00250ab:	83 c4 10             	add    esp,0x10
c00250ae:	e9 84 01 00 00       	jmp    c0025237 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00250b3:	0f b6 d2             	movzx  edx,dl
c00250b6:	53                   	push   ebx
c00250b7:	53                   	push   ebx
c00250b8:	52                   	push   edx
c00250b9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00250bf:	e8 5e e8 ff ff       	call   c0023922 <IDE::getBase(unsigned char)>
c00250c4:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00250c8:	b9 06 00 00 00       	mov    ecx,0x6
c00250cd:	89 c2                	mov    edx,eax
c00250cf:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00250d2:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00250d6:	83 c4 10             	add    esp,0x10
c00250d9:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00250df:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00250e6:	85 db                	test   ebx,ebx
c00250e8:	0f 84 ec 00 00 00    	je     c00251da <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c00250ee:	51                   	push   ecx
c00250ef:	51                   	push   ecx
c00250f0:	52                   	push   edx
c00250f1:	50                   	push   eax
c00250f2:	e8 ab e9 ff ff       	call   c0023aa2 <IDE::waitInterrupt(unsigned char)>
c00250f7:	83 c4 10             	add    esp,0x10
c00250fa:	84 c0                	test   al,al
c00250fc:	0f 84 d4 fe ff ff    	je     c0024fd6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0025102:	56                   	push   esi
c0025103:	56                   	push   esi
c0025104:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002510b:	50                   	push   eax
c002510c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025112:	e8 f7 e7 ff ff       	call   c002390e <IDE::prepareInterrupt(unsigned char)>
c0025117:	83 c4 0c             	add    esp,0xc
c002511a:	6a 04                	push   0x4
c002511c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025123:	50                   	push   eax
c0025124:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002512a:	e8 c5 e8 ff ff       	call   c00239f4 <IDE::read(unsigned char, unsigned char)>
c002512f:	83 c4 0c             	add    esp,0xc
c0025132:	89 c6                	mov    esi,eax
c0025134:	6a 05                	push   0x5
c0025136:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002513d:	50                   	push   eax
c002513e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025144:	e8 ab e8 ff ff       	call   c00239f4 <IDE::read(unsigned char, unsigned char)>
c0025149:	89 f1                	mov    ecx,esi
c002514b:	0f b6 c0             	movzx  eax,al
c002514e:	0f b6 f1             	movzx  esi,cl
c0025151:	c1 e0 08             	shl    eax,0x8
c0025154:	09 c6                	or     esi,eax
c0025156:	d1 fe                	sar    esi,1
c0025158:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c002515c:	83 c4 10             	add    esp,0x10
c002515f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0025164:	74 41                	je     c00251a7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0025166:	31 c9                	xor    ecx,ecx
c0025168:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002516e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0025175:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0025179:	75 0a                	jne    c0025185 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c002517b:	01 c9                	add    ecx,ecx
c002517d:	01 cd                	add    ebp,ecx
c002517f:	4b                   	dec    ebx
c0025180:	e9 54 ff ff ff       	jmp    c00250d9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0025185:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c002518a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002518e:	51                   	push   ecx
c002518f:	51                   	push   ecx
c0025190:	52                   	push   edx
c0025191:	50                   	push   eax
c0025192:	e8 8b e7 ff ff       	call   c0023922 <IDE::getBase(unsigned char)>
c0025197:	89 c2                	mov    edx,eax
c0025199:	89 f0                	mov    eax,esi
c002519b:	66 ef                	out    dx,ax
c002519d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00251a1:	83 c4 10             	add    esp,0x10
c00251a4:	41                   	inc    ecx
c00251a5:	eb c1                	jmp    c0025168 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c00251a7:	31 f6                	xor    esi,esi
c00251a9:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00251af:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00251b6:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00251ba:	75 06                	jne    c00251c2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c00251bc:	01 f6                	add    esi,esi
c00251be:	01 f5                	add    ebp,esi
c00251c0:	eb bd                	jmp    c002517f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c00251c2:	51                   	push   ecx
c00251c3:	51                   	push   ecx
c00251c4:	52                   	push   edx
c00251c5:	50                   	push   eax
c00251c6:	e8 57 e7 ff ff       	call   c0023922 <IDE::getBase(unsigned char)>
c00251cb:	89 c2                	mov    edx,eax
c00251cd:	66 ed                	in     ax,dx
c00251cf:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00251d4:	83 c4 10             	add    esp,0x10
c00251d7:	46                   	inc    esi
c00251d8:	eb cf                	jmp    c00251a9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c00251da:	51                   	push   ecx
c00251db:	51                   	push   ecx
c00251dc:	52                   	push   edx
c00251dd:	50                   	push   eax
c00251de:	e8 bf e8 ff ff       	call   c0023aa2 <IDE::waitInterrupt(unsigned char)>
c00251e3:	83 c4 10             	add    esp,0x10
c00251e6:	84 c0                	test   al,al
c00251e8:	0f 84 e8 fd ff ff    	je     c0024fd6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00251ee:	bb a0 86 01 00       	mov    ebx,0x186a0
c00251f3:	52                   	push   edx
c00251f4:	52                   	push   edx
c00251f5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00251fc:	50                   	push   eax
c00251fd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025203:	e8 06 e7 ff ff       	call   c002390e <IDE::prepareInterrupt(unsigned char)>
c0025208:	83 c4 10             	add    esp,0x10
c002520b:	50                   	push   eax
c002520c:	50                   	push   eax
c002520d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025214:	50                   	push   eax
c0025215:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002521b:	e8 02 e7 ff ff       	call   c0023922 <IDE::getBase(unsigned char)>
c0025220:	8d 50 07             	lea    edx,[eax+0x7]
c0025223:	ec                   	in     al,dx
c0025224:	83 c4 10             	add    esp,0x10
c0025227:	a8 88                	test   al,0x88
c0025229:	74 0a                	je     c0025235 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c002522b:	4b                   	dec    ebx
c002522c:	75 dd                	jne    c002520b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c002522e:	bb 02 00 00 00       	mov    ebx,0x2
c0025233:	eb 02                	jmp    c0025237 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0025235:	31 db                	xor    ebx,ebx
c0025237:	83 c4 1c             	add    esp,0x1c
c002523a:	89 d8                	mov    eax,ebx
c002523c:	5b                   	pop    ebx
c002523d:	5e                   	pop    esi
c002523e:	5f                   	pop    edi
c002523f:	5d                   	pop    ebp
c0025240:	c3                   	ret    
c0025241:	90                   	nop

c0025242 <ATAPI::diskRemoved()>:
c0025242:	83 ec 18             	sub    esp,0x18
c0025245:	68 69 da 02 c0       	push   0xc002da69
c002524a:	e8 1c d7 fe ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c002524f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025253:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c002525a:	83 c4 1c             	add    esp,0x1c
c002525d:	c3                   	ret    

c002525e <ATAPI::eject()>:
c002525e:	57                   	push   edi
c002525f:	b9 03 00 00 00       	mov    ecx,0x3
c0025264:	53                   	push   ebx
c0025265:	83 ec 14             	sub    esp,0x14
c0025268:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002526c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025270:	fc                   	cld    
c0025271:	31 c0                	xor    eax,eax
c0025273:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025275:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002527a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002527f:	50                   	push   eax
c0025280:	50                   	push   eax
c0025281:	6a 00                	push   0x0
c0025283:	6a 00                	push   0x0
c0025285:	6a 00                	push   0x0
c0025287:	6a 02                	push   0x2
c0025289:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002528d:	50                   	push   eax
c002528e:	53                   	push   ebx
c002528f:	e8 ee fc ff ff       	call   c0024f82 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0025294:	83 c4 14             	add    esp,0x14
c0025297:	53                   	push   ebx
c0025298:	e8 a5 ff ff ff       	call   c0025242 <ATAPI::diskRemoved()>
c002529d:	83 c4 24             	add    esp,0x24
c00252a0:	31 c0                	xor    eax,eax
c00252a2:	5b                   	pop    ebx
c00252a3:	5f                   	pop    edi
c00252a4:	c3                   	ret    
c00252a5:	90                   	nop

c00252a6 <ATAPI::diskInserted()>:
c00252a6:	53                   	push   ebx
c00252a7:	83 ec 14             	sub    esp,0x14
c00252aa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00252ae:	68 80 da 02 c0       	push   0xc002da80
c00252b3:	e8 b3 d6 fe ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c00252b8:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c00252bf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00252c2:	e8 8b ef fe ff       	call   c0014252 <PhysicalDisk::startCache()>
c00252c7:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00252cb:	83 c4 18             	add    esp,0x18
c00252ce:	5b                   	pop    ebx
c00252cf:	e9 38 12 ff ff       	jmp    c001650c <createPartitionsForDisk(PhysicalDisk*)>

c00252d4 <ATAPI::detectMedia()>:
c00252d4:	56                   	push   esi
c00252d5:	53                   	push   ebx
c00252d6:	83 ec 28             	sub    esp,0x28
c00252d9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00252dd:	6a 0c                	push   0xc
c00252df:	6a 00                	push   0x0
c00252e1:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00252e5:	56                   	push   esi
c00252e6:	e8 65 b4 fd ff       	call   c0000750 <memset>
c00252eb:	58                   	pop    eax
c00252ec:	5a                   	pop    edx
c00252ed:	6a 00                	push   0x0
c00252ef:	6a 00                	push   0x0
c00252f1:	6a 00                	push   0x0
c00252f3:	6a 00                	push   0x0
c00252f5:	56                   	push   esi
c00252f6:	53                   	push   ebx
c00252f7:	e8 86 fc ff ff       	call   c0024f82 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00252fc:	83 c4 1c             	add    esp,0x1c
c00252ff:	6a 0c                	push   0xc
c0025301:	6a 00                	push   0x0
c0025303:	56                   	push   esi
c0025304:	e8 47 b4 fd ff       	call   c0000750 <memset>
c0025309:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002530e:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025313:	59                   	pop    ecx
c0025314:	58                   	pop    eax
c0025315:	6a 01                	push   0x1
c0025317:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002531b:	50                   	push   eax
c002531c:	6a 00                	push   0x0
c002531e:	6a 12                	push   0x12
c0025320:	56                   	push   esi
c0025321:	53                   	push   ebx
c0025322:	e8 5b fc ff ff       	call   c0024f82 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0025327:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002532b:	83 c4 20             	add    esp,0x20
c002532e:	83 e0 7f             	and    eax,0x7f
c0025331:	3c 70                	cmp    al,0x70
c0025333:	74 15                	je     c002534a <ATAPI::detectMedia()+0x76>
c0025335:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002533c:	75 0c                	jne    c002534a <ATAPI::detectMedia()+0x76>
c002533e:	83 ec 0c             	sub    esp,0xc
c0025341:	53                   	push   ebx
c0025342:	e8 5f ff ff ff       	call   c00252a6 <ATAPI::diskInserted()>
c0025347:	83 c4 10             	add    esp,0x10
c002534a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002534e:	83 e0 0f             	and    eax,0xf
c0025351:	3c 02                	cmp    al,0x2
c0025353:	75 1b                	jne    c0025370 <ATAPI::detectMedia()+0x9c>
c0025355:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002535a:	75 2d                	jne    c0025389 <ATAPI::detectMedia()+0xb5>
c002535c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0025363:	74 24                	je     c0025389 <ATAPI::detectMedia()+0xb5>
c0025365:	83 ec 0c             	sub    esp,0xc
c0025368:	53                   	push   ebx
c0025369:	e8 d4 fe ff ff       	call   c0025242 <ATAPI::diskRemoved()>
c002536e:	eb 16                	jmp    c0025386 <ATAPI::detectMedia()+0xb2>
c0025370:	84 c0                	test   al,al
c0025372:	75 15                	jne    c0025389 <ATAPI::detectMedia()+0xb5>
c0025374:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002537b:	75 0c                	jne    c0025389 <ATAPI::detectMedia()+0xb5>
c002537d:	83 ec 0c             	sub    esp,0xc
c0025380:	53                   	push   ebx
c0025381:	e8 20 ff ff ff       	call   c00252a6 <ATAPI::diskInserted()>
c0025386:	83 c4 10             	add    esp,0x10
c0025389:	83 c4 24             	add    esp,0x24
c002538c:	5b                   	pop    ebx
c002538d:	5e                   	pop    esi
c002538e:	c3                   	ret    
c002538f:	90                   	nop

c0025390 <ATAPI::open(int, int, void*)>:
c0025390:	53                   	push   ebx
c0025391:	83 ec 08             	sub    esp,0x8
c0025394:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025398:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002539c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00253a0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00253a6:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00253ac:	c1 e0 06             	shl    eax,0x6
c00253af:	01 d0                	add    eax,edx
c00253b1:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c00253b8:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c00253be:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c00253c5:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00253cf:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00253d5:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00253dc:	6a 04                	push   0x4
c00253de:	6a 0c                	push   0xc
c00253e0:	51                   	push   ecx
c00253e1:	52                   	push   edx
c00253e2:	e8 4d e5 ff ff       	call   c0023934 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00253e7:	90                   	nop
c00253e8:	90                   	nop
c00253e9:	6a 00                	push   0x0
c00253eb:	6a 0c                	push   0xc
c00253ed:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00253f4:	50                   	push   eax
c00253f5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00253fb:	e8 34 e5 ff ff       	call   c0023934 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025400:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0025407:	83 c4 14             	add    esp,0x14
c002540a:	53                   	push   ebx
c002540b:	e8 c4 fe ff ff       	call   c00252d4 <ATAPI::detectMedia()>
c0025410:	31 c0                	xor    eax,eax
c0025412:	83 c4 18             	add    esp,0x18
c0025415:	5b                   	pop    ebx
c0025416:	c3                   	ret    
c0025417:	90                   	nop

c0025418 <ATAPI::read(unsigned long long, int, void*)>:
c0025418:	55                   	push   ebp
c0025419:	57                   	push   edi
c002541a:	56                   	push   esi
c002541b:	53                   	push   ebx
c002541c:	83 ec 1c             	sub    esp,0x1c
c002541f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0025423:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025427:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002542b:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0025432:	74 41                	je     c0025475 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0025434:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025438:	b9 03 00 00 00       	mov    ecx,0x3
c002543d:	fc                   	cld    
c002543e:	31 c0                	xor    eax,eax
c0025440:	86 fb                	xchg   bl,bh
c0025442:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025444:	c1 c3 10             	rol    ebx,0x10
c0025447:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002544c:	89 e8                	mov    eax,ebp
c002544e:	86 fb                	xchg   bl,bh
c0025450:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025454:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0025458:	50                   	push   eax
c0025459:	50                   	push   eax
c002545a:	55                   	push   ebp
c002545b:	c1 e5 0b             	shl    ebp,0xb
c002545e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0025462:	6a 00                	push   0x0
c0025464:	55                   	push   ebp
c0025465:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025469:	50                   	push   eax
c002546a:	56                   	push   esi
c002546b:	e8 12 fb ff ff       	call   c0024f82 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0025470:	83 c4 20             	add    esp,0x20
c0025473:	eb 1a                	jmp    c002548f <ATAPI::read(unsigned long long, int, void*)+0x77>
c0025475:	83 ec 0c             	sub    esp,0xc
c0025478:	56                   	push   esi
c0025479:	e8 56 fe ff ff       	call   c00252d4 <ATAPI::detectMedia()>
c002547e:	83 c4 10             	add    esp,0x10
c0025481:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0025488:	75 aa                	jne    c0025434 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c002548a:	b8 02 00 00 00       	mov    eax,0x2
c002548f:	83 c4 1c             	add    esp,0x1c
c0025492:	5b                   	pop    ebx
c0025493:	5e                   	pop    esi
c0025494:	5f                   	pop    edi
c0025495:	5d                   	pop    ebp
c0025496:	c3                   	ret    
c0025497:	90                   	nop

c0025498 <SATA::close(int, int, void*)>:
c0025498:	83 ec 0c             	sub    esp,0xc
c002549b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002549f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00254a5:	85 c0                	test   eax,eax
c00254a7:	74 0c                	je     c00254b5 <SATA::close(int, int, void*)+0x1d>
c00254a9:	83 ec 0c             	sub    esp,0xc
c00254ac:	8b 10                	mov    edx,DWORD PTR [eax]
c00254ae:	50                   	push   eax
c00254af:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00254b2:	83 c4 10             	add    esp,0x10
c00254b5:	31 c0                	xor    eax,eax
c00254b7:	83 c4 0c             	add    esp,0xc
c00254ba:	c3                   	ret    
c00254bb:	90                   	nop

c00254bc <SATA::powerSaving(PowerSavingLevel)>:
c00254bc:	c3                   	ret    
c00254bd:	90                   	nop

c00254be <SATA::open(int, int, void*)>:
c00254be:	56                   	push   esi
c00254bf:	53                   	push   ebx
c00254c0:	50                   	push   eax
c00254c1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00254c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00254c9:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00254d3:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00254d9:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00254e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00254e7:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00254f1:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00254f7:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00254fe:	e8 2a a7 fe ff       	call   c000fc2d <Phys::allocatePage()>
c0025503:	89 c6                	mov    esi,eax
c0025505:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002550b:	81 c6 00 10 00 00    	add    esi,0x1000
c0025511:	e8 17 a7 fe ff       	call   c000fc2d <Phys::allocatePage()>
c0025516:	39 c6                	cmp    esi,eax
c0025518:	74 10                	je     c002552a <SATA::open(int, int, void*)+0x6c>
c002551a:	83 ec 0c             	sub    esp,0xc
c002551d:	68 a8 d9 02 c0       	push   0xc002d9a8
c0025522:	e8 7a 4e ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c0025527:	83 c4 10             	add    esp,0x10
c002552a:	83 ec 0c             	sub    esp,0xc
c002552d:	6a 02                	push   0x2
c002552f:	e8 31 c0 fe ff       	call   c0011565 <Virt::allocateKernelVirtualPages(int)>
c0025534:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002553a:	6a 03                	push   0x3
c002553c:	50                   	push   eax
c002553d:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0025543:	ff 35 30 f2 02 c0    	push   DWORD PTR ds:0xc002f230
c0025549:	e8 4e c8 fe ff       	call   c0011d9c <VAS::mapPage(unsigned long, unsigned long, int)>
c002554e:	83 c4 14             	add    esp,0x14
c0025551:	53                   	push   ebx
c0025552:	e8 fb ec fe ff       	call   c0014252 <PhysicalDisk::startCache()>
c0025557:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002555a:	e8 ad 0f ff ff       	call   c001650c <createPartitionsForDisk(PhysicalDisk*)>
c002555f:	83 c4 14             	add    esp,0x14
c0025562:	31 c0                	xor    eax,eax
c0025564:	5b                   	pop    ebx
c0025565:	5e                   	pop    esi
c0025566:	c3                   	ret    
c0025567:	90                   	nop

c0025568 <SATA::SATA()>:
c0025568:	83 ec 0c             	sub    esp,0xc
c002556b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002556f:	83 ec 04             	sub    esp,0x4
c0025572:	68 00 02 00 00       	push   0x200
c0025577:	68 bc d9 02 c0       	push   0xc002d9bc
c002557c:	50                   	push   eax
c002557d:	e8 68 ec fe ff       	call   c00141ea <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025582:	83 c4 10             	add    esp,0x10
c0025585:	ba 2c da 02 c0       	mov    edx,0xc002da2c
c002558a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002558e:	89 10                	mov    DWORD PTR [eax],edx
c0025590:	90                   	nop
c0025591:	83 c4 0c             	add    esp,0xc
c0025594:	c3                   	ret    
c0025595:	90                   	nop

c0025596 <SATA::access(unsigned long long, int, void*, bool)>:
c0025596:	55                   	push   ebp
c0025597:	57                   	push   edi
c0025598:	56                   	push   esi
c0025599:	53                   	push   ebx
c002559a:	83 ec 2c             	sub    esp,0x2c
c002559d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00255a1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00255a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00255a9:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00255ad:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00255b1:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c00255b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00255ba:	7e 10                	jle    c00255cc <SATA::access(unsigned long long, int, void*, bool)+0x36>
c00255bc:	83 ec 0c             	sub    esp,0xc
c00255bf:	68 cc d9 02 c0       	push   0xc002d9cc
c00255c4:	e8 d8 4d ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c00255c9:	83 c4 10             	add    esp,0x10
c00255cc:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00255d2:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c00255d8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00255de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00255e2:	89 d0                	mov    eax,edx
c00255e4:	c1 e0 07             	shl    eax,0x7
c00255e7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00255eb:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00255f5:	51                   	push   ecx
c00255f6:	8d 42 02             	lea    eax,[edx+0x2]
c00255f9:	51                   	push   ecx
c00255fa:	c1 e0 07             	shl    eax,0x7
c00255fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0025601:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0025605:	50                   	push   eax
c0025606:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c002560c:	e8 e7 ef ff ff       	call   c00245f8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025611:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025615:	83 c4 10             	add    esp,0x10
c0025618:	b8 01 00 00 00       	mov    eax,0x1
c002561d:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0025622:	0f 84 cb 01 00 00    	je     c00257f3 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025628:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002562c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025630:	c1 e0 09             	shl    eax,0x9
c0025633:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0025638:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002563c:	74 0e                	je     c002564c <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c002563e:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0025644:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0025648:	89 c1                	mov    ecx,eax
c002564a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002564c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0025650:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0025656:	8d 42 02             	lea    eax,[edx+0x2]
c0025659:	c1 e0 07             	shl    eax,0x7
c002565c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025660:	8b 00                	mov    eax,DWORD PTR [eax]
c0025662:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025668:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002566e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025672:	c1 e1 05             	shl    ecx,0x5
c0025675:	01 c8                	add    eax,ecx
c0025677:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c002567b:	83 e1 01             	and    ecx,0x1
c002567e:	89 ce                	mov    esi,ecx
c0025680:	8a 08                	mov    cl,BYTE PTR [eax]
c0025682:	c1 e6 06             	shl    esi,0x6
c0025685:	83 e1 bf             	and    ecx,0xffffffbf
c0025688:	09 f1                	or     ecx,esi
c002568a:	88 08                	mov    BYTE PTR [eax],cl
c002568c:	8b 08                	mov    ecx,DWORD PTR [eax]
c002568e:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0025694:	81 c9 05 00 01 00    	or     ecx,0x10005
c002569a:	89 08                	mov    DWORD PTR [eax],ecx
c002569c:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c00256a2:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c00256a8:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c00256ae:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c00256b1:	50                   	push   eax
c00256b2:	68 90 00 00 00       	push   0x90
c00256b7:	6a 00                	push   0x0
c00256b9:	56                   	push   esi
c00256ba:	e8 91 b0 fd ff       	call   c0000750 <memset>
c00256bf:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00256c5:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c00256c9:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c00256cf:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c00256d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00256d7:	83 c4 10             	add    esp,0x10
c00256da:	48                   	dec    eax
c00256db:	25 ff ff 3f 00       	and    eax,0x3fffff
c00256e0:	89 c1                	mov    ecx,eax
c00256e2:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c00256e8:	25 00 00 c0 ff       	and    eax,0xffc00000
c00256ed:	09 c8                	or     eax,ecx
c00256ef:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c00256f5:	66 8b 06             	mov    ax,WORD PTR [esi]
c00256f8:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c00256ff:	66 25 00 7f          	and    ax,0x7f00
c0025703:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025707:	66 0d 27 80          	or     ax,0x8027
c002570b:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0025710:	66 89 06             	mov    WORD PTR [esi],ax
c0025713:	19 c0                	sbb    eax,eax
c0025715:	83 e0 f0             	and    eax,0xfffffff0
c0025718:	83 c0 35             	add    eax,0x35
c002571b:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c002571e:	89 e8                	mov    eax,ebp
c0025720:	c1 e8 10             	shr    eax,0x10
c0025723:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0025726:	89 e8                	mov    eax,ebp
c0025728:	c1 e8 18             	shr    eax,0x18
c002572b:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c002572e:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0025732:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0025735:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0025739:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c002573c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0025740:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0025744:	89 d6                	mov    esi,edx
c0025746:	31 c0                	xor    eax,eax
c0025748:	c1 e6 07             	shl    esi,0x7
c002574b:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c002574f:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0025755:	80 e1 88             	and    cl,0x88
c0025758:	74 0a                	je     c0025764 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c002575a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002575f:	74 0a                	je     c002576b <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c0025761:	40                   	inc    eax
c0025762:	eb eb                	jmp    c002574f <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c0025764:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025769:	75 0a                	jne    c0025775 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c002576b:	83 ec 0c             	sub    esp,0xc
c002576e:	68 05 da 02 c0       	push   0xc002da05
c0025773:	eb 56                	jmp    c00257cb <SATA::access(unsigned long long, int, void*, bool)+0x235>
c0025775:	b8 01 00 00 00       	mov    eax,0x1
c002577a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002577e:	c1 e2 07             	shl    edx,0x7
c0025781:	d3 e0                	shl    eax,cl
c0025783:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0025787:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c002578d:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0025793:	85 c8                	test   eax,ecx
c0025795:	74 20                	je     c00257b7 <SATA::access(unsigned long long, int, void*, bool)+0x221>
c0025797:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c002579d:	0f ba e1 1e          	bt     ecx,0x1e
c00257a1:	73 ea                	jae    c002578d <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c00257a3:	83 ec 0c             	sub    esp,0xc
c00257a6:	68 13 da 02 c0       	push   0xc002da13
c00257ab:	e8 f1 4b ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c00257b0:	83 c4 10             	add    esp,0x10
c00257b3:	31 c0                	xor    eax,eax
c00257b5:	eb 3c                	jmp    c00257f3 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c00257b7:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c00257bd:	0f ba e0 1e          	bt     eax,0x1e
c00257c1:	73 17                	jae    c00257da <SATA::access(unsigned long long, int, void*, bool)+0x244>
c00257c3:	83 ec 0c             	sub    esp,0xc
c00257c6:	68 13 da 02 c0       	push   0xc002da13
c00257cb:	e8 d1 4b ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c00257d0:	83 c4 10             	add    esp,0x10
c00257d3:	b8 01 00 00 00       	mov    eax,0x1
c00257d8:	eb 19                	jmp    c00257f3 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c00257da:	31 c0                	xor    eax,eax
c00257dc:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00257e1:	75 10                	jne    c00257f3 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c00257e3:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c00257e9:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00257ed:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00257f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00257f3:	83 c4 2c             	add    esp,0x2c
c00257f6:	5b                   	pop    ebx
c00257f7:	5e                   	pop    esi
c00257f8:	5f                   	pop    edi
c00257f9:	5d                   	pop    ebp
c00257fa:	c3                   	ret    
c00257fb:	90                   	nop

c00257fc <SATA::read(unsigned long long, int, void*)>:
c00257fc:	57                   	push   edi
c00257fd:	b8 04 00 00 00       	mov    eax,0x4
c0025802:	56                   	push   esi
c0025803:	53                   	push   ebx
c0025804:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025808:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002580c:	8d 7a ff             	lea    edi,[edx-0x1]
c002580f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0025813:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0025817:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002581d:	77 25                	ja     c0025844 <SATA::read(unsigned long long, int, void*)+0x48>
c002581f:	b8 06 00 00 00       	mov    eax,0x6
c0025824:	85 f6                	test   esi,esi
c0025826:	74 1c                	je     c0025844 <SATA::read(unsigned long long, int, void*)+0x48>
c0025828:	50                   	push   eax
c0025829:	50                   	push   eax
c002582a:	6a 00                	push   0x0
c002582c:	56                   	push   esi
c002582d:	52                   	push   edx
c002582e:	53                   	push   ebx
c002582f:	51                   	push   ecx
c0025830:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0025834:	e8 5d fd ff ff       	call   c0025596 <SATA::access(unsigned long long, int, void*, bool)>
c0025839:	83 c4 20             	add    esp,0x20
c002583c:	85 c0                	test   eax,eax
c002583e:	0f 95 c0             	setne  al
c0025841:	0f b6 c0             	movzx  eax,al
c0025844:	5b                   	pop    ebx
c0025845:	5e                   	pop    esi
c0025846:	5f                   	pop    edi
c0025847:	c3                   	ret    

c0025848 <SATA::write(unsigned long long, int, void*)>:
c0025848:	55                   	push   ebp
c0025849:	b8 04 00 00 00       	mov    eax,0x4
c002584e:	57                   	push   edi
c002584f:	56                   	push   esi
c0025850:	53                   	push   ebx
c0025851:	83 ec 0c             	sub    esp,0xc
c0025854:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0025858:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002585c:	8d 73 ff             	lea    esi,[ebx-0x1]
c002585f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0025863:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025867:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002586d:	77 3d                	ja     c00258ac <SATA::write(unsigned long long, int, void*)+0x64>
c002586f:	b8 06 00 00 00       	mov    eax,0x6
c0025874:	85 ed                	test   ebp,ebp
c0025876:	74 34                	je     c00258ac <SATA::write(unsigned long long, int, void*)+0x64>
c0025878:	c1 e3 09             	shl    ebx,0x9
c002587b:	01 eb                	add    ebx,ebp
c002587d:	89 d6                	mov    esi,edx
c002587f:	89 cf                	mov    edi,ecx
c0025881:	83 c6 01             	add    esi,0x1
c0025884:	83 d7 00             	adc    edi,0x0
c0025887:	50                   	push   eax
c0025888:	50                   	push   eax
c0025889:	6a 01                	push   0x1
c002588b:	55                   	push   ebp
c002588c:	81 c5 00 02 00 00    	add    ebp,0x200
c0025892:	6a 01                	push   0x1
c0025894:	51                   	push   ecx
c0025895:	52                   	push   edx
c0025896:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002589a:	e8 f7 fc ff ff       	call   c0025596 <SATA::access(unsigned long long, int, void*, bool)>
c002589f:	83 c4 20             	add    esp,0x20
c00258a2:	89 f2                	mov    edx,esi
c00258a4:	89 f9                	mov    ecx,edi
c00258a6:	39 dd                	cmp    ebp,ebx
c00258a8:	75 d3                	jne    c002587d <SATA::write(unsigned long long, int, void*)+0x35>
c00258aa:	31 c0                	xor    eax,eax
c00258ac:	83 c4 0c             	add    esp,0xc
c00258af:	5b                   	pop    ebx
c00258b0:	5e                   	pop    esi
c00258b1:	5f                   	pop    edi
c00258b2:	5d                   	pop    ebp
c00258b3:	c3                   	ret    

c00258b4 <SATAPI::write(unsigned long long, int, void*)>:
c00258b4:	b8 03 00 00 00       	mov    eax,0x3
c00258b9:	c3                   	ret    

c00258ba <SATAPI::close(int, int, void*)>:
c00258ba:	83 ec 0c             	sub    esp,0xc
c00258bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258c1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00258c7:	85 c0                	test   eax,eax
c00258c9:	74 0c                	je     c00258d7 <SATAPI::close(int, int, void*)+0x1d>
c00258cb:	83 ec 0c             	sub    esp,0xc
c00258ce:	8b 10                	mov    edx,DWORD PTR [eax]
c00258d0:	50                   	push   eax
c00258d1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00258d4:	83 c4 10             	add    esp,0x10
c00258d7:	31 c0                	xor    eax,eax
c00258d9:	83 c4 0c             	add    esp,0xc
c00258dc:	c3                   	ret    
c00258dd:	90                   	nop

c00258de <SATAPI::SATAPI()>:
c00258de:	83 ec 0c             	sub    esp,0xc
c00258e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258e5:	83 ec 04             	sub    esp,0x4
c00258e8:	68 00 08 00 00       	push   0x800
c00258ed:	68 5c da 02 c0       	push   0xc002da5c
c00258f2:	50                   	push   eax
c00258f3:	e8 f2 e8 fe ff       	call   c00141ea <PhysicalDisk::PhysicalDisk(char const*, int)>
c00258f8:	83 c4 10             	add    esp,0x10
c00258fb:	ba 08 db 02 c0       	mov    edx,0xc002db08
c0025900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025904:	89 10                	mov    DWORD PTR [eax],edx
c0025906:	90                   	nop
c0025907:	83 c4 0c             	add    esp,0xc
c002590a:	c3                   	ret    
c002590b:	90                   	nop

c002590c <SATAPI::diskRemoved()>:
c002590c:	83 ec 18             	sub    esp,0x18
c002590f:	68 68 da 02 c0       	push   0xc002da68
c0025914:	e8 52 d0 fe ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0025919:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002591d:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0025924:	83 c4 1c             	add    esp,0x1c
c0025927:	c3                   	ret    

c0025928 <SATAPI::diskInserted()>:
c0025928:	53                   	push   ebx
c0025929:	83 ec 14             	sub    esp,0x14
c002592c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025930:	68 7f da 02 c0       	push   0xc002da7f
c0025935:	e8 31 d0 fe ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c002593a:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0025941:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025944:	e8 09 e9 fe ff       	call   c0014252 <PhysicalDisk::startCache()>
c0025949:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002594d:	83 c4 18             	add    esp,0x18
c0025950:	5b                   	pop    ebx
c0025951:	e9 b6 0b ff ff       	jmp    c001650c <createPartitionsForDisk(PhysicalDisk*)>

c0025956 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0025956:	55                   	push   ebp
c0025957:	57                   	push   edi
c0025958:	56                   	push   esi
c0025959:	53                   	push   ebx
c002595a:	83 ec 34             	sub    esp,0x34
c002595d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0025961:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025965:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0025969:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002596d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0025971:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0025977:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002597d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025981:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0025987:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002598b:	c1 e0 07             	shl    eax,0x7
c002598e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0025992:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025996:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00259a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00259a4:	8d 58 02             	lea    ebx,[eax+0x2]
c00259a7:	c1 e3 07             	shl    ebx,0x7
c00259aa:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00259ae:	53                   	push   ebx
c00259af:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c00259b5:	e8 3e ec ff ff       	call   c00245f8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00259ba:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00259be:	83 c4 10             	add    esp,0x10
c00259c1:	b8 01 00 00 00       	mov    eax,0x1
c00259c6:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c00259cb:	0f 84 85 01 00 00    	je     c0025b56 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c00259d1:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c00259d7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00259d9:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00259df:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00259e5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00259e9:	c1 e1 05             	shl    ecx,0x5
c00259ec:	01 c8                	add    eax,ecx
c00259ee:	8b 08                	mov    ecx,DWORD PTR [eax]
c00259f0:	81 e1 80 ff 00 00    	and    ecx,0xff80
c00259f6:	81 c9 25 00 01 00    	or     ecx,0x10025
c00259fc:	89 08                	mov    DWORD PTR [eax],ecx
c00259fe:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025a04:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0025a0a:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0025a10:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0025a13:	8d 7b 40             	lea    edi,[ebx+0x40]
c0025a16:	50                   	push   eax
c0025a17:	68 90 00 00 00       	push   0x90
c0025a1c:	6a 00                	push   0x0
c0025a1e:	53                   	push   ebx
c0025a1f:	e8 2c ad fd ff       	call   c0000750 <memset>
c0025a24:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0025a28:	b9 0c 00 00 00       	mov    ecx,0xc
c0025a2d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025a2f:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c0025a35:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0025a39:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0025a3f:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025a43:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025a47:	48                   	dec    eax
c0025a48:	25 ff ff 3f 00       	and    eax,0x3fffff
c0025a4d:	89 c1                	mov    ecx,eax
c0025a4f:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0025a55:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025a5a:	09 c8                	or     eax,ecx
c0025a5c:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0025a62:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0025a65:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025a6c:	66 25 00 7f          	and    ax,0x7f00
c0025a70:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0025a74:	66 0d 27 80          	or     ax,0x8027
c0025a78:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0025a7c:	66 89 03             	mov    WORD PTR [ebx],ax
c0025a7f:	89 d0                	mov    eax,edx
c0025a81:	c1 ea 18             	shr    edx,0x18
c0025a84:	c1 e8 10             	shr    eax,0x10
c0025a87:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0025a8a:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0025a8d:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0025a91:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0025a94:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0025a98:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0025a9b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0025a9f:	83 c4 10             	add    esp,0x10
c0025aa2:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0025aa6:	31 c0                	xor    eax,eax
c0025aa8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0025aac:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c0025ab2:	80 e2 88             	and    dl,0x88
c0025ab5:	74 0a                	je     c0025ac1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0025ab7:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025abc:	74 0a                	je     c0025ac8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c0025abe:	40                   	inc    eax
c0025abf:	eb eb                	jmp    c0025aac <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c0025ac1:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025ac6:	75 0f                	jne    c0025ad7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c0025ac8:	83 ec 0c             	sub    esp,0xc
c0025acb:	68 05 da 02 c0       	push   0xc002da05
c0025ad0:	e8 cc 48 ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c0025ad5:	eb 3f                	jmp    c0025b16 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c0025ad7:	ba 01 00 00 00       	mov    edx,0x1
c0025adc:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0025ae0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025ae4:	d3 e2                	shl    edx,cl
c0025ae6:	c1 e0 07             	shl    eax,0x7
c0025ae9:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c0025aef:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025af3:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c0025af9:	85 ca                	test   edx,ecx
c0025afb:	74 23                	je     c0025b20 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0025afd:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c0025b03:	0f ba e1 1e          	bt     ecx,0x1e
c0025b07:	73 ea                	jae    c0025af3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c0025b09:	83 ec 0c             	sub    esp,0xc
c0025b0c:	68 97 da 02 c0       	push   0xc002da97
c0025b11:	e8 55 ce fe ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0025b16:	83 c4 10             	add    esp,0x10
c0025b19:	b8 01 00 00 00       	mov    eax,0x1
c0025b1e:	eb 36                	jmp    c0025b56 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0025b20:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0025b26:	0f ba e0 1e          	bt     eax,0x1e
c0025b2a:	73 0a                	jae    c0025b36 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c0025b2c:	83 ec 0c             	sub    esp,0xc
c0025b2f:	68 aa da 02 c0       	push   0xc002daaa
c0025b34:	eb db                	jmp    c0025b11 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c0025b36:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0025b3b:	74 17                	je     c0025b54 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025b3d:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0025b42:	74 10                	je     c0025b54 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025b44:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c0025b4a:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0025b4e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0025b52:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025b54:	31 c0                	xor    eax,eax
c0025b56:	83 c4 2c             	add    esp,0x2c
c0025b59:	5b                   	pop    ebx
c0025b5a:	5e                   	pop    esi
c0025b5b:	5f                   	pop    edi
c0025b5c:	5d                   	pop    ebp
c0025b5d:	c3                   	ret    

c0025b5e <SATAPI::eject()>:
c0025b5e:	57                   	push   edi
c0025b5f:	b9 03 00 00 00       	mov    ecx,0x3
c0025b64:	53                   	push   ebx
c0025b65:	83 ec 14             	sub    esp,0x14
c0025b68:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025b6c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025b70:	fc                   	cld    
c0025b71:	31 c0                	xor    eax,eax
c0025b73:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025b75:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025b7a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025b7f:	50                   	push   eax
c0025b80:	6a 00                	push   0x0
c0025b82:	6a 00                	push   0x0
c0025b84:	6a 00                	push   0x0
c0025b86:	6a 00                	push   0x0
c0025b88:	6a 02                	push   0x2
c0025b8a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025b8e:	50                   	push   eax
c0025b8f:	53                   	push   ebx
c0025b90:	e8 c1 fd ff ff       	call   c0025956 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025b95:	83 c4 14             	add    esp,0x14
c0025b98:	53                   	push   ebx
c0025b99:	e8 6e fd ff ff       	call   c002590c <SATAPI::diskRemoved()>
c0025b9e:	83 c4 24             	add    esp,0x24
c0025ba1:	31 c0                	xor    eax,eax
c0025ba3:	5b                   	pop    ebx
c0025ba4:	5f                   	pop    edi
c0025ba5:	c3                   	ret    

c0025ba6 <SATAPI::detectMedia()>:
c0025ba6:	56                   	push   esi
c0025ba7:	53                   	push   ebx
c0025ba8:	83 ec 28             	sub    esp,0x28
c0025bab:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025baf:	6a 0c                	push   0xc
c0025bb1:	6a 00                	push   0x0
c0025bb3:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025bb7:	56                   	push   esi
c0025bb8:	e8 93 ab fd ff       	call   c0000750 <memset>
c0025bbd:	83 c4 0c             	add    esp,0xc
c0025bc0:	6a 00                	push   0x0
c0025bc2:	6a 00                	push   0x0
c0025bc4:	6a 00                	push   0x0
c0025bc6:	6a 00                	push   0x0
c0025bc8:	6a 00                	push   0x0
c0025bca:	56                   	push   esi
c0025bcb:	53                   	push   ebx
c0025bcc:	e8 85 fd ff ff       	call   c0025956 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025bd1:	83 c4 1c             	add    esp,0x1c
c0025bd4:	6a 0c                	push   0xc
c0025bd6:	6a 00                	push   0x0
c0025bd8:	56                   	push   esi
c0025bd9:	e8 72 ab fd ff       	call   c0000750 <memset>
c0025bde:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025be3:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025be8:	83 c4 0c             	add    esp,0xc
c0025beb:	6a 01                	push   0x1
c0025bed:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025bf1:	50                   	push   eax
c0025bf2:	6a 00                	push   0x0
c0025bf4:	6a 00                	push   0x0
c0025bf6:	6a 12                	push   0x12
c0025bf8:	56                   	push   esi
c0025bf9:	53                   	push   ebx
c0025bfa:	e8 57 fd ff ff       	call   c0025956 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025bff:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025c03:	83 c4 20             	add    esp,0x20
c0025c06:	83 e0 7f             	and    eax,0x7f
c0025c09:	3c 70                	cmp    al,0x70
c0025c0b:	74 15                	je     c0025c22 <SATAPI::detectMedia()+0x7c>
c0025c0d:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025c14:	75 0c                	jne    c0025c22 <SATAPI::detectMedia()+0x7c>
c0025c16:	83 ec 0c             	sub    esp,0xc
c0025c19:	53                   	push   ebx
c0025c1a:	e8 09 fd ff ff       	call   c0025928 <SATAPI::diskInserted()>
c0025c1f:	83 c4 10             	add    esp,0x10
c0025c22:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025c26:	83 e0 0f             	and    eax,0xf
c0025c29:	3c 02                	cmp    al,0x2
c0025c2b:	75 1b                	jne    c0025c48 <SATAPI::detectMedia()+0xa2>
c0025c2d:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025c32:	75 2d                	jne    c0025c61 <SATAPI::detectMedia()+0xbb>
c0025c34:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025c3b:	74 24                	je     c0025c61 <SATAPI::detectMedia()+0xbb>
c0025c3d:	83 ec 0c             	sub    esp,0xc
c0025c40:	53                   	push   ebx
c0025c41:	e8 c6 fc ff ff       	call   c002590c <SATAPI::diskRemoved()>
c0025c46:	eb 16                	jmp    c0025c5e <SATAPI::detectMedia()+0xb8>
c0025c48:	84 c0                	test   al,al
c0025c4a:	75 15                	jne    c0025c61 <SATAPI::detectMedia()+0xbb>
c0025c4c:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025c53:	75 0c                	jne    c0025c61 <SATAPI::detectMedia()+0xbb>
c0025c55:	83 ec 0c             	sub    esp,0xc
c0025c58:	53                   	push   ebx
c0025c59:	e8 ca fc ff ff       	call   c0025928 <SATAPI::diskInserted()>
c0025c5e:	83 c4 10             	add    esp,0x10
c0025c61:	83 c4 24             	add    esp,0x24
c0025c64:	5b                   	pop    ebx
c0025c65:	5e                   	pop    esi
c0025c66:	c3                   	ret    
c0025c67:	90                   	nop

c0025c68 <SATAPI::open(int, int, void*)>:
c0025c68:	56                   	push   esi
c0025c69:	53                   	push   ebx
c0025c6a:	50                   	push   eax
c0025c6b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025c6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025c73:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025c7d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025c83:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025c8d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025c91:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025c9b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025ca1:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025ca8:	e8 80 9f fe ff       	call   c000fc2d <Phys::allocatePage()>
c0025cad:	89 c6                	mov    esi,eax
c0025caf:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025cb5:	81 c6 00 10 00 00    	add    esi,0x1000
c0025cbb:	e8 6d 9f fe ff       	call   c000fc2d <Phys::allocatePage()>
c0025cc0:	39 c6                	cmp    esi,eax
c0025cc2:	74 10                	je     c0025cd4 <SATAPI::open(int, int, void*)+0x6c>
c0025cc4:	83 ec 0c             	sub    esp,0xc
c0025cc7:	68 bf da 02 c0       	push   0xc002dabf
c0025ccc:	e8 d0 46 ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c0025cd1:	83 c4 10             	add    esp,0x10
c0025cd4:	83 ec 0c             	sub    esp,0xc
c0025cd7:	6a 02                	push   0x2
c0025cd9:	e8 87 b8 fe ff       	call   c0011565 <Virt::allocateKernelVirtualPages(int)>
c0025cde:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025ce4:	6a 03                	push   0x3
c0025ce6:	50                   	push   eax
c0025ce7:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025ced:	ff 35 30 f2 02 c0    	push   DWORD PTR ds:0xc002f230
c0025cf3:	e8 a4 c0 fe ff       	call   c0011d9c <VAS::mapPage(unsigned long, unsigned long, int)>
c0025cf8:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025cff:	83 c4 14             	add    esp,0x14
c0025d02:	53                   	push   ebx
c0025d03:	e8 9e fe ff ff       	call   c0025ba6 <SATAPI::detectMedia()>
c0025d08:	83 c4 14             	add    esp,0x14
c0025d0b:	31 c0                	xor    eax,eax
c0025d0d:	5b                   	pop    ebx
c0025d0e:	5e                   	pop    esi
c0025d0f:	c3                   	ret    

c0025d10 <SATAPI::read(unsigned long long, int, void*)>:
c0025d10:	55                   	push   ebp
c0025d11:	57                   	push   edi
c0025d12:	56                   	push   esi
c0025d13:	53                   	push   ebx
c0025d14:	83 ec 1c             	sub    esp,0x1c
c0025d17:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025d1b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025d1f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025d23:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025d2a:	74 19                	je     c0025d45 <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025d2c:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025d31:	7e 2e                	jle    c0025d61 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025d33:	83 ec 0c             	sub    esp,0xc
c0025d36:	68 d5 da 02 c0       	push   0xc002dad5
c0025d3b:	e8 61 46 ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c0025d40:	83 c4 10             	add    esp,0x10
c0025d43:	eb 1c                	jmp    c0025d61 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025d45:	83 ec 0c             	sub    esp,0xc
c0025d48:	55                   	push   ebp
c0025d49:	e8 58 fe ff ff       	call   c0025ba6 <SATAPI::detectMedia()>
c0025d4e:	83 c4 10             	add    esp,0x10
c0025d51:	b8 02 00 00 00       	mov    eax,0x2
c0025d56:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025d5d:	75 cd                	jne    c0025d2c <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025d5f:	eb 49                	jmp    c0025daa <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025d61:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025d65:	b9 03 00 00 00       	mov    ecx,0x3
c0025d6a:	fc                   	cld    
c0025d6b:	31 c0                	xor    eax,eax
c0025d6d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025d6f:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025d74:	89 d8                	mov    eax,ebx
c0025d76:	86 e0                	xchg   al,ah
c0025d78:	c1 c0 10             	rol    eax,0x10
c0025d7b:	86 e0                	xchg   al,ah
c0025d7d:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025d81:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025d85:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025d89:	50                   	push   eax
c0025d8a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025d8e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025d92:	56                   	push   esi
c0025d93:	53                   	push   ebx
c0025d94:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0025d98:	c1 e0 0b             	shl    eax,0xb
c0025d9b:	50                   	push   eax
c0025d9c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025da0:	50                   	push   eax
c0025da1:	55                   	push   ebp
c0025da2:	e8 af fb ff ff       	call   c0025956 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025da7:	83 c4 20             	add    esp,0x20
c0025daa:	83 c4 1c             	add    esp,0x1c
c0025dad:	5b                   	pop    ebx
c0025dae:	5e                   	pop    esi
c0025daf:	5f                   	pop    edi
c0025db0:	5d                   	pop    ebp
c0025db1:	c3                   	ret    

c0025db2 <AVX::open(int, int, void*)>:
c0025db2:	83 ec 0c             	sub    esp,0xc
c0025db5:	e8 3e 11 00 00       	call   c0026ef8 <avxInit>
c0025dba:	b8 00 00 00 00       	mov    eax,0x0
c0025dbf:	83 c4 0c             	add    esp,0xc
c0025dc2:	c3                   	ret    
c0025dc3:	90                   	nop

c0025dc4 <AVX::close(int, int, void*)>:
c0025dc4:	83 ec 0c             	sub    esp,0xc
c0025dc7:	e8 2d 11 00 00       	call   c0026ef9 <avxClose>
c0025dcc:	b8 00 00 00 00       	mov    eax,0x0
c0025dd1:	83 c4 0c             	add    esp,0xc
c0025dd4:	c3                   	ret    
c0025dd5:	90                   	nop

c0025dd6 <AVX::available()>:
c0025dd6:	83 ec 0c             	sub    esp,0xc
c0025dd9:	e8 12 11 00 00       	call   c0026ef0 <avxDetect>
c0025dde:	85 c0                	test   eax,eax
c0025de0:	0f 95 c0             	setne  al
c0025de3:	83 c4 0c             	add    esp,0xc
c0025de6:	c3                   	ret    
c0025de7:	90                   	nop

c0025de8 <AVX::save(void*)>:
c0025de8:	83 ec 0c             	sub    esp,0xc
c0025deb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025def:	83 ec 0c             	sub    esp,0xc
c0025df2:	50                   	push   eax
c0025df3:	e8 fe 10 00 00       	call   c0026ef6 <avxSave>
c0025df8:	83 c4 10             	add    esp,0x10
c0025dfb:	90                   	nop
c0025dfc:	83 c4 0c             	add    esp,0xc
c0025dff:	c3                   	ret    

c0025e00 <AVX::load(void*)>:
c0025e00:	83 ec 0c             	sub    esp,0xc
c0025e03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025e07:	83 ec 0c             	sub    esp,0xc
c0025e0a:	50                   	push   eax
c0025e0b:	e8 e7 10 00 00       	call   c0026ef7 <avxLoad>
c0025e10:	83 c4 10             	add    esp,0x10
c0025e13:	90                   	nop
c0025e14:	83 c4 0c             	add    esp,0xc
c0025e17:	c3                   	ret    

c0025e18 <AVX::AVX()>:
c0025e18:	83 ec 0c             	sub    esp,0xc
c0025e1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e1f:	83 ec 08             	sub    esp,0x8
c0025e22:	68 38 db 02 c0       	push   0xc002db38
c0025e27:	50                   	push   eax
c0025e28:	e8 9b e4 fe ff       	call   c00142c8 <FPU::FPU(char const*)>
c0025e2d:	83 c4 10             	add    esp,0x10
c0025e30:	ba 48 db 02 c0       	mov    edx,0xc002db48
c0025e35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e39:	89 10                	mov    DWORD PTR [eax],edx
c0025e3b:	90                   	nop
c0025e3c:	83 c4 0c             	add    esp,0xc
c0025e3f:	c3                   	ret    

c0025e40 <MMX::available()>:
c0025e40:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c0025e45:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025e4b:	83 e0 20             	and    eax,0x20
c0025e4e:	84 c0                	test   al,al
c0025e50:	0f 95 c0             	setne  al
c0025e53:	c3                   	ret    

c0025e54 <MMX::open(int, int, void*)>:
c0025e54:	83 ec 0c             	sub    esp,0xc
c0025e57:	e8 26 11 00 00       	call   c0026f82 <x87Init>
c0025e5c:	b8 00 00 00 00       	mov    eax,0x0
c0025e61:	83 c4 0c             	add    esp,0xc
c0025e64:	c3                   	ret    
c0025e65:	90                   	nop

c0025e66 <MMX::close(int, int, void*)>:
c0025e66:	83 ec 0c             	sub    esp,0xc
c0025e69:	e8 2e 11 00 00       	call   c0026f9c <x87Close>
c0025e6e:	b8 00 00 00 00       	mov    eax,0x0
c0025e73:	83 c4 0c             	add    esp,0xc
c0025e76:	c3                   	ret    
c0025e77:	90                   	nop

c0025e78 <MMX::save(void*)>:
c0025e78:	83 ec 0c             	sub    esp,0xc
c0025e7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025e7f:	83 ec 0c             	sub    esp,0xc
c0025e82:	50                   	push   eax
c0025e83:	e8 e9 10 00 00       	call   c0026f71 <x87Save>
c0025e88:	83 c4 10             	add    esp,0x10
c0025e8b:	90                   	nop
c0025e8c:	83 c4 0c             	add    esp,0xc
c0025e8f:	c3                   	ret    

c0025e90 <MMX::load(void*)>:
c0025e90:	83 ec 0c             	sub    esp,0xc
c0025e93:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025e97:	83 ec 0c             	sub    esp,0xc
c0025e9a:	50                   	push   eax
c0025e9b:	e8 da 10 00 00       	call   c0026f7a <x87Load>
c0025ea0:	83 c4 10             	add    esp,0x10
c0025ea3:	90                   	nop
c0025ea4:	83 c4 0c             	add    esp,0xc
c0025ea7:	c3                   	ret    

c0025ea8 <MMX::MMX()>:
c0025ea8:	83 ec 0c             	sub    esp,0xc
c0025eab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eaf:	83 ec 08             	sub    esp,0x8
c0025eb2:	68 78 db 02 c0       	push   0xc002db78
c0025eb7:	50                   	push   eax
c0025eb8:	e8 0b e4 fe ff       	call   c00142c8 <FPU::FPU(char const*)>
c0025ebd:	83 c4 10             	add    esp,0x10
c0025ec0:	ba 88 db 02 c0       	mov    edx,0xc002db88
c0025ec5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ec9:	89 10                	mov    DWORD PTR [eax],edx
c0025ecb:	90                   	nop
c0025ecc:	83 c4 0c             	add    esp,0xc
c0025ecf:	c3                   	ret    

c0025ed0 <SSE::open(int, int, void*)>:
c0025ed0:	83 ec 0c             	sub    esp,0xc
c0025ed3:	e8 5c 10 00 00       	call   c0026f34 <sseInit>
c0025ed8:	b8 00 00 00 00       	mov    eax,0x0
c0025edd:	83 c4 0c             	add    esp,0xc
c0025ee0:	c3                   	ret    
c0025ee1:	90                   	nop

c0025ee2 <SSE::close(int, int, void*)>:
c0025ee2:	83 ec 0c             	sub    esp,0xc
c0025ee5:	e8 5a 10 00 00       	call   c0026f44 <sseClose>
c0025eea:	b8 00 00 00 00       	mov    eax,0x0
c0025eef:	83 c4 0c             	add    esp,0xc
c0025ef2:	c3                   	ret    
c0025ef3:	90                   	nop

c0025ef4 <SSE::available()>:
c0025ef4:	83 ec 1c             	sub    esp,0x1c
c0025ef7:	e8 14 10 00 00       	call   c0026f10 <absolutelyNoChanceInHell>
c0025efc:	85 c0                	test   eax,eax
c0025efe:	0f 95 c0             	setne  al
c0025f01:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025f05:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025f09:	83 c4 1c             	add    esp,0x1c
c0025f0c:	c3                   	ret    
c0025f0d:	90                   	nop

c0025f0e <SSE::save(void*)>:
c0025f0e:	83 ec 0c             	sub    esp,0xc
c0025f11:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025f15:	83 ec 0c             	sub    esp,0xc
c0025f18:	50                   	push   eax
c0025f19:	e8 0a 10 00 00       	call   c0026f28 <sseSave>
c0025f1e:	83 c4 10             	add    esp,0x10
c0025f21:	90                   	nop
c0025f22:	83 c4 0c             	add    esp,0xc
c0025f25:	c3                   	ret    

c0025f26 <SSE::load(void*)>:
c0025f26:	83 ec 0c             	sub    esp,0xc
c0025f29:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025f2d:	83 ec 0c             	sub    esp,0xc
c0025f30:	50                   	push   eax
c0025f31:	e8 f8 0f 00 00       	call   c0026f2e <sseLoad>
c0025f36:	83 c4 10             	add    esp,0x10
c0025f39:	90                   	nop
c0025f3a:	83 c4 0c             	add    esp,0xc
c0025f3d:	c3                   	ret    

c0025f3e <SSE::SSE()>:
c0025f3e:	83 ec 0c             	sub    esp,0xc
c0025f41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f45:	83 ec 08             	sub    esp,0x8
c0025f48:	68 b8 db 02 c0       	push   0xc002dbb8
c0025f4d:	50                   	push   eax
c0025f4e:	e8 75 e3 fe ff       	call   c00142c8 <FPU::FPU(char const*)>
c0025f53:	83 c4 10             	add    esp,0x10
c0025f56:	ba c8 db 02 c0       	mov    edx,0xc002dbc8
c0025f5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f5f:	89 10                	mov    DWORD PTR [eax],edx
c0025f61:	90                   	nop
c0025f62:	83 c4 0c             	add    esp,0xc
c0025f65:	c3                   	ret    

c0025f66 <x87::open(int, int, void*)>:
c0025f66:	83 ec 0c             	sub    esp,0xc
c0025f69:	e8 14 10 00 00       	call   c0026f82 <x87Init>
c0025f6e:	b8 00 00 00 00       	mov    eax,0x0
c0025f73:	83 c4 0c             	add    esp,0xc
c0025f76:	c3                   	ret    
c0025f77:	90                   	nop

c0025f78 <x87::close(int, int, void*)>:
c0025f78:	83 ec 0c             	sub    esp,0xc
c0025f7b:	e8 1c 10 00 00       	call   c0026f9c <x87Close>
c0025f80:	b8 00 00 00 00       	mov    eax,0x0
c0025f85:	83 c4 0c             	add    esp,0xc
c0025f88:	c3                   	ret    
c0025f89:	90                   	nop

c0025f8a <x87::available()>:
c0025f8a:	83 ec 0c             	sub    esp,0xc
c0025f8d:	e8 c4 0f 00 00       	call   c0026f56 <x87Detect>
c0025f92:	85 c0                	test   eax,eax
c0025f94:	0f 95 c0             	setne  al
c0025f97:	83 c4 0c             	add    esp,0xc
c0025f9a:	c3                   	ret    
c0025f9b:	90                   	nop

c0025f9c <x87::save(void*)>:
c0025f9c:	83 ec 0c             	sub    esp,0xc
c0025f9f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025fa3:	83 ec 0c             	sub    esp,0xc
c0025fa6:	50                   	push   eax
c0025fa7:	e8 c5 0f 00 00       	call   c0026f71 <x87Save>
c0025fac:	83 c4 10             	add    esp,0x10
c0025faf:	90                   	nop
c0025fb0:	83 c4 0c             	add    esp,0xc
c0025fb3:	c3                   	ret    

c0025fb4 <x87::load(void*)>:
c0025fb4:	83 ec 0c             	sub    esp,0xc
c0025fb7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025fbb:	83 ec 0c             	sub    esp,0xc
c0025fbe:	50                   	push   eax
c0025fbf:	e8 b6 0f 00 00       	call   c0026f7a <x87Load>
c0025fc4:	83 c4 10             	add    esp,0x10
c0025fc7:	90                   	nop
c0025fc8:	83 c4 0c             	add    esp,0xc
c0025fcb:	c3                   	ret    

c0025fcc <x87::x87()>:
c0025fcc:	83 ec 0c             	sub    esp,0xc
c0025fcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fd3:	83 ec 08             	sub    esp,0x8
c0025fd6:	68 f8 db 02 c0       	push   0xc002dbf8
c0025fdb:	50                   	push   eax
c0025fdc:	e8 e7 e2 fe ff       	call   c00142c8 <FPU::FPU(char const*)>
c0025fe1:	83 c4 10             	add    esp,0x10
c0025fe4:	ba 08 dc 02 c0       	mov    edx,0xc002dc08
c0025fe9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fed:	89 10                	mov    DWORD PTR [eax],edx
c0025fef:	90                   	nop
c0025ff0:	83 c4 0c             	add    esp,0xc
c0025ff3:	c3                   	ret    

c0025ff4 <APIC::disable()>:
c0025ff4:	90                   	nop
c0025ff5:	c3                   	ret    

c0025ff6 <APIC::close(int, int, void*)>:
c0025ff6:	55                   	push   ebp
c0025ff7:	89 e5                	mov    ebp,esp
c0025ff9:	83 ec 08             	sub    esp,0x8
c0025ffc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025fff:	8b 00                	mov    eax,DWORD PTR [eax]
c0026001:	83 c0 3c             	add    eax,0x3c
c0026004:	8b 00                	mov    eax,DWORD PTR [eax]
c0026006:	83 ec 0c             	sub    esp,0xc
c0026009:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002600c:	ff d0                	call   eax
c002600e:	83 c4 10             	add    esp,0x10
c0026011:	b8 00 00 00 00       	mov    eax,0x0
c0026016:	c9                   	leave  
c0026017:	c3                   	ret    

c0026018 <IOAPIC::close(int, int, void*)>:
c0026018:	b8 00 00 00 00       	mov    eax,0x0
c002601d:	c3                   	ret    

c002601e <APIC::io_wait()>:
c002601e:	eb 00                	jmp    c0026020 <APIC::io_wait()+0x2>
c0026020:	eb 00                	jmp    c0026022 <APIC::io_wait()+0x4>
c0026022:	90                   	nop
c0026023:	c3                   	ret    

c0026024 <APIC::getBase()>:
c0026024:	55                   	push   ebp
c0026025:	89 e5                	mov    ebp,esp
c0026027:	83 ec 18             	sub    esp,0x18
c002602a:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c002602f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0026035:	83 e0 08             	and    eax,0x8
c0026038:	84 c0                	test   al,al
c002603a:	75 07                	jne    c0026043 <APIC::getBase()+0x1f>
c002603c:	b8 00 00 00 00       	mov    eax,0x0
c0026041:	eb 21                	jmp    c0026064 <APIC::getBase()+0x40>
c0026043:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c0026048:	83 ec 08             	sub    esp,0x8
c002604b:	6a 1b                	push   0x1b
c002604d:	50                   	push   eax
c002604e:	e8 df 8d fe ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c0026053:	83 c4 10             	add    esp,0x10
c0026056:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026059:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002605c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002605f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0026064:	c9                   	leave  
c0026065:	c3                   	ret    

c0026066 <APIC::eoi(unsigned char)>:
c0026066:	55                   	push   ebp
c0026067:	89 e5                	mov    ebp,esp
c0026069:	83 ec 28             	sub    esp,0x28
c002606c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002606f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0026072:	83 ec 0c             	sub    esp,0xc
c0026075:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026078:	e8 a7 ff ff ff       	call   c0026024 <APIC::getBase()>
c002607d:	83 c4 10             	add    esp,0x10
c0026080:	05 b0 00 00 00       	add    eax,0xb0
c0026085:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0026088:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002608b:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0026091:	90                   	nop
c0026092:	c9                   	leave  
c0026093:	c3                   	ret    

c0026094 <APIC::open(int, int, void*)>:
c0026094:	55                   	push   ebp
c0026095:	89 e5                	mov    ebp,esp
c0026097:	57                   	push   edi
c0026098:	56                   	push   esi
c0026099:	53                   	push   ebx
c002609a:	83 ec 2c             	sub    esp,0x2c
c002609d:	83 ec 0c             	sub    esp,0xc
c00260a0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260a3:	e8 7c ff ff ff       	call   c0026024 <APIC::getBase()>
c00260a8:	83 c4 10             	add    esp,0x10
c00260ab:	89 c2                	mov    edx,eax
c00260ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00260b0:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00260b6:	0f b6 f8             	movzx  edi,al
c00260b9:	89 d0                	mov    eax,edx
c00260bb:	ba 00 00 00 00       	mov    edx,0x0
c00260c0:	89 c1                	mov    ecx,eax
c00260c2:	80 e5 ff             	and    ch,0xff
c00260c5:	89 cb                	mov    ebx,ecx
c00260c7:	0f b6 f2             	movzx  esi,dl
c00260ca:	89 d8                	mov    eax,ebx
c00260cc:	89 f2                	mov    edx,esi
c00260ce:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00260d1:	8d 5f 08             	lea    ebx,[edi+0x8]
c00260d4:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00260d8:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00260dc:	83 e0 00             	and    eax,0x0
c00260df:	09 d0                	or     eax,edx
c00260e1:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00260e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00260e8:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00260ee:	8d 50 01             	lea    edx,[eax+0x1]
c00260f1:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00260f4:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00260fa:	0f b6 d0             	movzx  edx,al
c00260fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026100:	83 c2 08             	add    edx,0x8
c0026103:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026107:	0f b6 c9             	movzx  ecx,cl
c002610a:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026110:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026114:	83 ec 0c             	sub    esp,0xc
c0026117:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002611a:	e8 05 ff ff ff       	call   c0026024 <APIC::getBase()>
c002611f:	83 c4 10             	add    esp,0x10
c0026122:	05 f0 00 00 00       	add    eax,0xf0
c0026127:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002612a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002612d:	8b 00                	mov    eax,DWORD PTR [eax]
c002612f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026132:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0026139:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0026140:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026143:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026146:	89 10                	mov    DWORD PTR [eax],edx
c0026148:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c002614f:	a1 90 19 03 c0       	mov    eax,ds:0xc0031990
c0026154:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0026157:	7d 7c                	jge    c00261d5 <APIC::open(int, int, void*)+0x141>
c0026159:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002615c:	8b 04 85 a0 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce660]
c0026163:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0026166:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026169:	8b 04 85 a0 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce660]
c0026170:	c1 e8 08             	shr    eax,0x8
c0026173:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0026177:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002617a:	8b 04 85 a0 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce660]
c0026181:	c1 e8 18             	shr    eax,0x18
c0026184:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0026187:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c002618b:	75 40                	jne    c00261cd <APIC::open(int, int, void*)+0x139>
c002618d:	83 ec 0c             	sub    esp,0xc
c0026190:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026193:	e8 8c fe ff ff       	call   c0026024 <APIC::getBase()>
c0026198:	83 c4 10             	add    esp,0x10
c002619b:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c002619f:	75 07                	jne    c00261a8 <APIC::open(int, int, void*)+0x114>
c00261a1:	ba 60 03 00 00       	mov    edx,0x360
c00261a6:	eb 05                	jmp    c00261ad <APIC::open(int, int, void*)+0x119>
c00261a8:	ba 50 03 00 00       	mov    edx,0x350
c00261ad:	01 d0                	add    eax,edx
c00261af:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00261b2:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00261b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00261b7:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00261ba:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00261c1:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00261c5:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00261c8:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00261cb:	89 10                	mov    DWORD PTR [eax],edx
c00261cd:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00261d0:	e9 7a ff ff ff       	jmp    c002614f <APIC::open(int, int, void*)+0xbb>
c00261d5:	b8 00 00 00 00       	mov    eax,0x0
c00261da:	8d 65 f4             	lea    esp,[ebp-0xc]
c00261dd:	5b                   	pop    ebx
c00261de:	5e                   	pop    esi
c00261df:	5f                   	pop    edi
c00261e0:	5d                   	pop    ebp
c00261e1:	c3                   	ret    

c00261e2 <IOAPIC::IOAPIC()>:
c00261e2:	83 ec 0c             	sub    esp,0xc
c00261e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261e9:	83 ec 08             	sub    esp,0x8
c00261ec:	68 38 dc 02 c0       	push   0xc002dc38
c00261f1:	50                   	push   eax
c00261f2:	e8 b1 dd fe ff       	call   c0013fa8 <Device::Device(char const*)>
c00261f7:	83 c4 10             	add    esp,0x10
c00261fa:	ba 60 dd 02 c0       	mov    edx,0xc002dd60
c00261ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026203:	89 10                	mov    DWORD PTR [eax],edx
c0026205:	90                   	nop
c0026206:	83 c4 0c             	add    esp,0xc
c0026209:	c3                   	ret    

c002620a <APIC::APIC()>:
c002620a:	53                   	push   ebx
c002620b:	83 ec 18             	sub    esp,0x18
c002620e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026212:	83 ec 08             	sub    esp,0x8
c0026215:	68 40 dc 02 c0       	push   0xc002dc40
c002621a:	50                   	push   eax
c002621b:	e8 02 e5 fe ff       	call   c0014722 <InterruptController::InterruptController(char const*)>
c0026220:	83 c4 10             	add    esp,0x10
c0026223:	ba 18 dd 02 c0       	mov    edx,0xc002dd18
c0026228:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002622c:	89 10                	mov    DWORD PTR [eax],edx
c002622e:	a0 60 34 03 c0       	mov    al,ds:0xc0033460
c0026233:	83 f0 01             	xor    eax,0x1
c0026236:	84 c0                	test   al,al
c0026238:	0f 84 a1 00 00 00    	je     c00262df <APIC::APIC()+0xd5>
c002623e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0026243:	a0 40 1a 03 c0       	mov    al,ds:0xc0031a40
c0026248:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c002624c:	0f 83 86 00 00 00    	jae    c00262d8 <APIC::APIC()+0xce>
c0026252:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c002625a:	83 ec 0c             	sub    esp,0xc
c002625d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0026261:	e8 26 96 fe ff       	call   c000f88c <malloc>
c0026266:	83 c4 10             	add    esp,0x10
c0026269:	89 c3                	mov    ebx,eax
c002626b:	83 ec 0c             	sub    esp,0xc
c002626e:	53                   	push   ebx
c002626f:	e8 6e ff ff ff       	call   c00261e2 <IOAPIC::IOAPIC()>
c0026274:	83 c4 10             	add    esp,0x10
c0026277:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c002627b:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0026280:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0026284:	89 14 85 40 34 03 c0 	mov    DWORD PTR [eax*4-0x3ffccbc0],edx
c002628b:	a1 20 34 03 c0       	mov    eax,ds:0xc0033420
c0026290:	40                   	inc    eax
c0026291:	a3 20 34 03 c0       	mov    ds:0xc0033420,eax
c0026296:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c002629b:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00262a1:	83 ec 08             	sub    esp,0x8
c00262a4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00262a8:	50                   	push   eax
c00262a9:	e8 f6 da fe ff       	call   c0013da4 <Device::addChild(Device*)>
c00262ae:	83 c4 10             	add    esp,0x10
c00262b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00262b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00262b7:	83 c0 08             	add    eax,0x8
c00262ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00262bc:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00262c1:	6a 00                	push   0x0
c00262c3:	6a 00                	push   0x0
c00262c5:	52                   	push   edx
c00262c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00262ca:	ff d0                	call   eax
c00262cc:	83 c4 10             	add    esp,0x10
c00262cf:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00262d3:	e9 6b ff ff ff       	jmp    c0026243 <APIC::APIC()+0x39>
c00262d8:	c6 05 60 34 03 c0 01 	mov    BYTE PTR ds:0xc0033460,0x1
c00262df:	90                   	nop
c00262e0:	83 c4 18             	add    esp,0x18
c00262e3:	5b                   	pop    ebx
c00262e4:	c3                   	ret    
c00262e5:	90                   	nop

c00262e6 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c00262e6:	55                   	push   ebp
c00262e7:	89 e5                	mov    ebp,esp
c00262e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262ec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00262f2:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00262f5:	72 1d                	jb     c0026314 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00262f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262fa:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0026300:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026303:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0026309:	01 d0                	add    eax,edx
c002630b:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002630e:	73 04                	jae    c0026314 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0026310:	b0 01                	mov    al,0x1
c0026312:	eb 02                	jmp    c0026316 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0026314:	b0 00                	mov    al,0x0
c0026316:	5d                   	pop    ebp
c0026317:	c3                   	ret    

c0026318 <IOAPIC::read(int)>:
c0026318:	55                   	push   ebp
c0026319:	89 e5                	mov    ebp,esp
c002631b:	83 ec 10             	sub    esp,0x10
c002631e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026321:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026327:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002632a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002632d:	0f b6 d0             	movzx  edx,al
c0026330:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026333:	89 10                	mov    DWORD PTR [eax],edx
c0026335:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026338:	83 c0 10             	add    eax,0x10
c002633b:	8b 00                	mov    eax,DWORD PTR [eax]
c002633d:	c9                   	leave  
c002633e:	c3                   	ret    
c002633f:	90                   	nop

c0026340 <IOAPIC::open(int, int, void*)>:
c0026340:	55                   	push   ebp
c0026341:	89 e5                	mov    ebp,esp
c0026343:	57                   	push   edi
c0026344:	56                   	push   esi
c0026345:	53                   	push   ebx
c0026346:	83 ec 0c             	sub    esp,0xc
c0026349:	83 ec 0c             	sub    esp,0xc
c002634c:	68 6b dc 02 c0       	push   0xc002dc6b
c0026351:	e8 15 c6 fe ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0026356:	83 c4 10             	add    esp,0x10
c0026359:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002635c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002635f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026365:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026368:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002636e:	8b 14 85 80 1a 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce580]
c0026375:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026378:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002637e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026381:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0026387:	8b 14 85 00 1b 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce500]
c002638e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026391:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0026397:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002639a:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00263a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00263a3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00263a9:	0f b6 f8             	movzx  edi,al
c00263ac:	89 d0                	mov    eax,edx
c00263ae:	ba 00 00 00 00       	mov    edx,0x0
c00263b3:	89 c1                	mov    ecx,eax
c00263b5:	80 e5 ff             	and    ch,0xff
c00263b8:	89 cb                	mov    ebx,ecx
c00263ba:	0f b6 f2             	movzx  esi,dl
c00263bd:	89 d8                	mov    eax,ebx
c00263bf:	89 f2                	mov    edx,esi
c00263c1:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00263c4:	8d 5f 08             	lea    ebx,[edi+0x8]
c00263c7:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00263cb:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00263cf:	83 e0 00             	and    eax,0x0
c00263d2:	09 d0                	or     eax,edx
c00263d4:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00263d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00263db:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00263e1:	8d 50 01             	lea    edx,[eax+0x1]
c00263e4:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00263e7:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00263ed:	0f b6 d0             	movzx  edx,al
c00263f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00263f3:	83 c2 08             	add    edx,0x8
c00263f6:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00263fa:	0f b6 c9             	movzx  ecx,cl
c00263fd:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0026403:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026407:	83 ec 08             	sub    esp,0x8
c002640a:	6a 01                	push   0x1
c002640c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002640f:	e8 04 ff ff ff       	call   c0026318 <IOAPIC::read(int)>
c0026414:	83 c4 10             	add    esp,0x10
c0026417:	c1 f8 10             	sar    eax,0x10
c002641a:	0f b6 c0             	movzx  eax,al
c002641d:	8d 50 01             	lea    edx,[eax+0x1]
c0026420:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026423:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0026429:	b8 00 00 00 00       	mov    eax,0x0
c002642e:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026431:	5b                   	pop    ebx
c0026432:	5e                   	pop    esi
c0026433:	5f                   	pop    edi
c0026434:	5d                   	pop    ebp
c0026435:	c3                   	ret    

c0026436 <IOAPIC::write(int, int)>:
c0026436:	55                   	push   ebp
c0026437:	89 e5                	mov    ebp,esp
c0026439:	83 ec 10             	sub    esp,0x10
c002643c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002643f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026445:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0026448:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002644b:	0f b6 d0             	movzx  edx,al
c002644e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026451:	89 10                	mov    DWORD PTR [eax],edx
c0026453:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026456:	8d 50 10             	lea    edx,[eax+0x10]
c0026459:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002645c:	89 02                	mov    DWORD PTR [edx],eax
c002645e:	90                   	nop
c002645f:	c9                   	leave  
c0026460:	c3                   	ret    
c0026461:	90                   	nop

c0026462 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0026462:	55                   	push   ebp
c0026463:	89 e5                	mov    ebp,esp
c0026465:	53                   	push   ebx
c0026466:	83 ec 2c             	sub    esp,0x2c
c0026469:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002646c:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002646f:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0026472:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0026475:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0026478:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002647b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002647e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0026481:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026484:	88 d8                	mov    al,bl
c0026486:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0026489:	88 c8                	mov    al,cl
c002648b:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002648e:	88 d0                	mov    al,dl
c0026490:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0026493:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026497:	83 c0 08             	add    eax,0x8
c002649a:	01 c0                	add    eax,eax
c002649c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002649f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00264a3:	83 c0 08             	add    eax,0x8
c00264a6:	01 c0                	add    eax,eax
c00264a8:	40                   	inc    eax
c00264a9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00264ac:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00264af:	50                   	push   eax
c00264b0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00264b3:	e8 60 fe ff ff       	call   c0026318 <IOAPIC::read(int)>
c00264b8:	83 c4 08             	add    esp,0x8
c00264bb:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00264be:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c00264c5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00264c8:	c1 e0 18             	shl    eax,0x18
c00264cb:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c00264ce:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00264d1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00264d4:	52                   	push   edx
c00264d5:	50                   	push   eax
c00264d6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00264d9:	e8 58 ff ff ff       	call   c0026436 <IOAPIC::write(int, int)>
c00264de:	83 c4 0c             	add    esp,0xc
c00264e1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00264e4:	50                   	push   eax
c00264e5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00264e8:	e8 2b fe ff ff       	call   c0026318 <IOAPIC::read(int)>
c00264ed:	83 c4 08             	add    esp,0x8
c00264f0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00264f3:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c00264fa:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0026501:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0026508:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c002650c:	74 09                	je     c0026517 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c002650e:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0026515:	eb 07                	jmp    c002651e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0026517:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002651e:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0026522:	74 09                	je     c002652d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0026524:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c002652b:	eb 07                	jmp    c0026534 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c002652d:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0026534:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c002653b:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c002653f:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0026542:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0026545:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026548:	52                   	push   edx
c0026549:	50                   	push   eax
c002654a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002654d:	e8 e4 fe ff ff       	call   c0026436 <IOAPIC::write(int, int)>
c0026552:	83 c4 0c             	add    esp,0xc
c0026555:	90                   	nop
c0026556:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0026559:	c9                   	leave  
c002655a:	c3                   	ret    
c002655b:	90                   	nop

c002655c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c002655c:	55                   	push   ebp
c002655d:	89 e5                	mov    ebp,esp
c002655f:	57                   	push   edi
c0026560:	56                   	push   esi
c0026561:	53                   	push   ebx
c0026562:	83 ec 2c             	sub    esp,0x2c
c0026565:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0026568:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002656b:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002656f:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0026573:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0026577:	74 5a                	je     c00265d3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0026579:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c002657d:	7f 44                	jg     c00265c3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c002657f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026582:	05 20 e3 02 c0       	add    eax,0xc002e320
c0026587:	8a 00                	mov    al,BYTE PTR [eax]
c0026589:	0f b6 c0             	movzx  eax,al
c002658c:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002658f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026592:	66 8b 84 00 20 1a 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce5e0]
c002659a:	0f b7 c0             	movzx  eax,ax
c002659d:	83 e0 02             	and    eax,0x2
c00265a0:	85 c0                	test   eax,eax
c00265a2:	74 04                	je     c00265a8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c00265a4:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c00265a8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00265ab:	66 8b 84 00 20 1a 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce5e0]
c00265b3:	0f b7 c0             	movzx  eax,ax
c00265b6:	83 e0 08             	and    eax,0x8
c00265b9:	85 c0                	test   eax,eax
c00265bb:	74 16                	je     c00265d3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00265bd:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00265c1:	eb 10                	jmp    c00265d3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00265c3:	83 ec 0c             	sub    esp,0xc
c00265c6:	68 7c dc 02 c0       	push   0xc002dc7c
c00265cb:	e8 d1 3d ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c00265d0:	83 c4 10             	add    esp,0x10
c00265d3:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c00265d7:	a1 20 34 03 c0       	mov    eax,ds:0xc0033420
c00265dc:	83 ec 08             	sub    esp,0x8
c00265df:	50                   	push   eax
c00265e0:	68 b4 dc 02 c0       	push   0xc002dcb4
c00265e5:	e8 81 c3 fe ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c00265ea:	83 c4 10             	add    esp,0x10
c00265ed:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c00265f4:	a1 20 34 03 c0       	mov    eax,ds:0xc0033420
c00265f9:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c00265fc:	7d 67                	jge    c0026665 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00265fe:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026601:	8b 04 85 40 34 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffccbc0]
c0026608:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002660b:	83 ec 08             	sub    esp,0x8
c002660e:	52                   	push   edx
c002660f:	50                   	push   eax
c0026610:	e8 d1 fc ff ff       	call   c00262e6 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0026615:	83 c4 10             	add    esp,0x10
c0026618:	84 c0                	test   al,al
c002661a:	74 44                	je     c0026660 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c002661c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002661f:	8b 1c 85 40 34 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffccbc0]
c0026626:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c002662a:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002662d:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0026631:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026634:	83 c0 20             	add    eax,0x20
c0026637:	0f b6 f0             	movzx  esi,al
c002663a:	b8 00 00 00 00       	mov    eax,0x0
c002663f:	99                   	cdq    
c0026640:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026643:	0f b6 c9             	movzx  ecx,cl
c0026646:	83 ec 04             	sub    esp,0x4
c0026649:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c002664c:	57                   	push   edi
c002664d:	56                   	push   esi
c002664e:	52                   	push   edx
c002664f:	50                   	push   eax
c0026650:	51                   	push   ecx
c0026651:	53                   	push   ebx
c0026652:	e8 0b fe ff ff       	call   c0026462 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0026657:	83 c4 20             	add    esp,0x20
c002665a:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c002665e:	eb 05                	jmp    c0026665 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0026660:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0026663:	eb 8f                	jmp    c00265f4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0026665:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0026668:	83 f0 01             	xor    eax,0x1
c002666b:	84 c0                	test   al,al
c002666d:	74 10                	je     c002667f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c002666f:	83 ec 0c             	sub    esp,0xc
c0026672:	68 cb dc 02 c0       	push   0xc002dccb
c0026677:	e8 25 3d ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c002667c:	83 c4 10             	add    esp,0x10
c002667f:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0026683:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c002668a:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c002668e:	7f 65                	jg     c00266f5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0026690:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026693:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026696:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002669d:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00266a0:	01 ca                	add    edx,ecx
c00266a2:	83 c2 54             	add    edx,0x54
c00266a5:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c00266a9:	85 c0                	test   eax,eax
c00266ab:	75 43                	jne    c00266f0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c00266ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00266b0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00266b3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00266ba:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00266bd:	01 ca                	add    edx,ecx
c00266bf:	8d 4a 54             	lea    ecx,[edx+0x54]
c00266c2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00266c5:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00266c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00266cc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00266cf:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00266d6:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00266d9:	01 ca                	add    edx,ecx
c00266db:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c00266e1:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00266e4:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00266e8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00266eb:	83 e8 20             	sub    eax,0x20
c00266ee:	eb 1a                	jmp    c002670a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c00266f0:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c00266f3:	eb 95                	jmp    c002668a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c00266f5:	83 ec 0c             	sub    esp,0xc
c00266f8:	68 d8 dc 02 c0       	push   0xc002dcd8
c00266fd:	e8 9f 3c ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c0026702:	83 c4 10             	add    esp,0x10
c0026705:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002670a:	8d 65 f4             	lea    esp,[ebp-0xc]
c002670d:	5b                   	pop    ebx
c002670e:	5e                   	pop    esi
c002670f:	5f                   	pop    edi
c0026710:	5d                   	pop    ebp
c0026711:	c3                   	ret    

c0026712 <PIC::disable()>:
c0026712:	55                   	push   ebp
c0026713:	89 e5                	mov    ebp,esp
c0026715:	83 ec 10             	sub    esp,0x10
c0026718:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c002671e:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0026722:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026725:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026729:	ee                   	out    dx,al
c002672a:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0026730:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0026734:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026737:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c002673b:	ee                   	out    dx,al
c002673c:	90                   	nop
c002673d:	c9                   	leave  
c002673e:	c3                   	ret    
c002673f:	90                   	nop

c0026740 <PIC::close(int, int, void*)>:
c0026740:	55                   	push   ebp
c0026741:	89 e5                	mov    ebp,esp
c0026743:	83 ec 08             	sub    esp,0x8
c0026746:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026749:	8b 00                	mov    eax,DWORD PTR [eax]
c002674b:	83 c0 3c             	add    eax,0x3c
c002674e:	8b 00                	mov    eax,DWORD PTR [eax]
c0026750:	83 ec 0c             	sub    esp,0xc
c0026753:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026756:	ff d0                	call   eax
c0026758:	83 c4 10             	add    esp,0x10
c002675b:	b8 00 00 00 00       	mov    eax,0x0
c0026760:	c9                   	leave  
c0026761:	c3                   	ret    

c0026762 <PIC::PIC()>:
c0026762:	83 ec 0c             	sub    esp,0xc
c0026765:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026769:	83 ec 08             	sub    esp,0x8
c002676c:	68 84 dd 02 c0       	push   0xc002dd84
c0026771:	50                   	push   eax
c0026772:	e8 ab df fe ff       	call   c0014722 <InterruptController::InterruptController(char const*)>
c0026777:	83 c4 10             	add    esp,0x10
c002677a:	ba b0 dd 02 c0       	mov    edx,0xc002ddb0
c002677f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026783:	89 10                	mov    DWORD PTR [eax],edx
c0026785:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026789:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002678f:	0f b6 d0             	movzx  edx,al
c0026792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026796:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c002679d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267a1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00267a7:	0f b6 d0             	movzx  edx,al
c00267aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267ae:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00267b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267b7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00267bd:	8d 50 01             	lea    edx,[eax+0x1]
c00267c0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00267c4:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00267ca:	0f b6 d0             	movzx  edx,al
c00267cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267d1:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00267d5:	83 e1 3f             	and    ecx,0x3f
c00267d8:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00267dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267e0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00267e6:	0f b6 d0             	movzx  edx,al
c00267e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267ed:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c00267f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267f8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00267fe:	0f b6 d0             	movzx  edx,al
c0026801:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026805:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c002680a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002680e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026814:	8d 50 01             	lea    edx,[eax+0x1]
c0026817:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002681b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026821:	0f b6 d0             	movzx  edx,al
c0026824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026828:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002682c:	83 e1 3f             	and    ecx,0x3f
c002682f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026833:	90                   	nop
c0026834:	83 c4 0c             	add    esp,0xc
c0026837:	c3                   	ret    

c0026838 <PIC::ioWait()>:
c0026838:	eb 00                	jmp    c002683a <PIC::ioWait()+0x2>
c002683a:	eb 00                	jmp    c002683c <PIC::ioWait()+0x4>
c002683c:	90                   	nop
c002683d:	c3                   	ret    

c002683e <PIC::getIRQReg(int)>:
c002683e:	55                   	push   ebp
c002683f:	89 e5                	mov    ebp,esp
c0026841:	83 ec 10             	sub    esp,0x10
c0026844:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026847:	0f b6 c0             	movzx  eax,al
c002684a:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026850:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0026853:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026856:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002685a:	ee                   	out    dx,al
c002685b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002685e:	0f b6 c0             	movzx  eax,al
c0026861:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026867:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c002686a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002686d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026871:	ee                   	out    dx,al
c0026872:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0026878:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c002687c:	89 c2                	mov    edx,eax
c002687e:	ec                   	in     al,dx
c002687f:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0026882:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026885:	0f b6 c0             	movzx  eax,al
c0026888:	c1 e0 08             	shl    eax,0x8
c002688b:	89 c1                	mov    ecx,eax
c002688d:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0026893:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0026897:	89 c2                	mov    edx,eax
c0026899:	ec                   	in     al,dx
c002689a:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c002689d:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00268a0:	0f b6 c0             	movzx  eax,al
c00268a3:	09 c8                	or     eax,ecx
c00268a5:	c9                   	leave  
c00268a6:	c3                   	ret    
c00268a7:	90                   	nop

c00268a8 <PIC::eoi(unsigned char)>:
c00268a8:	55                   	push   ebp
c00268a9:	89 e5                	mov    ebp,esp
c00268ab:	83 ec 14             	sub    esp,0x14
c00268ae:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00268b1:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c00268b4:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00268b8:	75 1e                	jne    c00268d8 <PIC::eoi(unsigned char)+0x30>
c00268ba:	6a 0b                	push   0xb
c00268bc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00268bf:	e8 7a ff ff ff       	call   c002683e <PIC::getIRQReg(int)>
c00268c4:	83 c4 08             	add    esp,0x8
c00268c7:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00268cb:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c00268cf:	25 80 00 00 00       	and    eax,0x80
c00268d4:	85 c0                	test   eax,eax
c00268d6:	74 5f                	je     c0026937 <PIC::eoi(unsigned char)+0x8f>
c00268d8:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c00268dc:	75 2d                	jne    c002690b <PIC::eoi(unsigned char)+0x63>
c00268de:	6a 0b                	push   0xb
c00268e0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00268e3:	e8 56 ff ff ff       	call   c002683e <PIC::getIRQReg(int)>
c00268e8:	83 c4 08             	add    esp,0x8
c00268eb:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c00268ef:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00268f2:	66 85 c0             	test   ax,ax
c00268f5:	78 14                	js     c002690b <PIC::eoi(unsigned char)+0x63>
c00268f7:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c00268fd:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0026901:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026904:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026908:	ee                   	out    dx,al
c0026909:	eb 2d                	jmp    c0026938 <PIC::eoi(unsigned char)+0x90>
c002690b:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002690f:	76 12                	jbe    c0026923 <PIC::eoi(unsigned char)+0x7b>
c0026911:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026917:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c002691b:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002691e:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026922:	ee                   	out    dx,al
c0026923:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026929:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c002692d:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026930:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026934:	ee                   	out    dx,al
c0026935:	eb 01                	jmp    c0026938 <PIC::eoi(unsigned char)+0x90>
c0026937:	90                   	nop
c0026938:	c9                   	leave  
c0026939:	c3                   	ret    

c002693a <PIC::remap()>:
c002693a:	55                   	push   ebp
c002693b:	89 e5                	mov    ebp,esp
c002693d:	83 ec 48             	sub    esp,0x48
c0026940:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0026947:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c002694e:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0026954:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0026957:	89 c2                	mov    edx,eax
c0026959:	ec                   	in     al,dx
c002695a:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c002695d:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0026960:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0026963:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0026969:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c002696c:	89 c2                	mov    edx,eax
c002696e:	ec                   	in     al,dx
c002696f:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0026972:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0026975:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0026978:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c002697e:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0026982:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0026985:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0026988:	ee                   	out    dx,al
c0026989:	83 ec 0c             	sub    esp,0xc
c002698c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002698f:	e8 a4 fe ff ff       	call   c0026838 <PIC::ioWait()>
c0026994:	83 c4 10             	add    esp,0x10
c0026997:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c002699d:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c00269a1:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c00269a4:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00269a7:	ee                   	out    dx,al
c00269a8:	83 ec 0c             	sub    esp,0xc
c00269ab:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00269ae:	e8 85 fe ff ff       	call   c0026838 <PIC::ioWait()>
c00269b3:	83 c4 10             	add    esp,0x10
c00269b6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00269b9:	0f b6 c0             	movzx  eax,al
c00269bc:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c00269c2:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c00269c5:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c00269c8:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00269cb:	ee                   	out    dx,al
c00269cc:	83 ec 0c             	sub    esp,0xc
c00269cf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00269d2:	e8 61 fe ff ff       	call   c0026838 <PIC::ioWait()>
c00269d7:	83 c4 10             	add    esp,0x10
c00269da:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00269dd:	0f b6 c0             	movzx  eax,al
c00269e0:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c00269e6:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c00269e9:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c00269ec:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00269ef:	ee                   	out    dx,al
c00269f0:	83 ec 0c             	sub    esp,0xc
c00269f3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00269f6:	e8 3d fe ff ff       	call   c0026838 <PIC::ioWait()>
c00269fb:	83 c4 10             	add    esp,0x10
c00269fe:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0026a04:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0026a08:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0026a0b:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0026a0e:	ee                   	out    dx,al
c0026a0f:	83 ec 0c             	sub    esp,0xc
c0026a12:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026a15:	e8 1e fe ff ff       	call   c0026838 <PIC::ioWait()>
c0026a1a:	83 c4 10             	add    esp,0x10
c0026a1d:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026a23:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0026a27:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0026a2a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026a2d:	ee                   	out    dx,al
c0026a2e:	83 ec 0c             	sub    esp,0xc
c0026a31:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026a34:	e8 ff fd ff ff       	call   c0026838 <PIC::ioWait()>
c0026a39:	83 c4 10             	add    esp,0x10
c0026a3c:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0026a42:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0026a46:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0026a49:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026a4c:	ee                   	out    dx,al
c0026a4d:	83 ec 0c             	sub    esp,0xc
c0026a50:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026a53:	e8 e0 fd ff ff       	call   c0026838 <PIC::ioWait()>
c0026a58:	83 c4 10             	add    esp,0x10
c0026a5b:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0026a61:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0026a65:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0026a68:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026a6b:	ee                   	out    dx,al
c0026a6c:	83 ec 0c             	sub    esp,0xc
c0026a6f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026a72:	e8 c1 fd ff ff       	call   c0026838 <PIC::ioWait()>
c0026a77:	83 c4 10             	add    esp,0x10
c0026a7a:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0026a7e:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0026a84:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0026a87:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0026a8a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026a8d:	ee                   	out    dx,al
c0026a8e:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0026a92:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0026a98:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0026a9b:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0026a9e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026aa1:	ee                   	out    dx,al
c0026aa2:	90                   	nop
c0026aa3:	c9                   	leave  
c0026aa4:	c3                   	ret    
c0026aa5:	90                   	nop

c0026aa6 <PIC::open(int, int, void*)>:
c0026aa6:	55                   	push   ebp
c0026aa7:	89 e5                	mov    ebp,esp
c0026aa9:	83 ec 18             	sub    esp,0x18
c0026aac:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0026ab2:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0026ab6:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026ab9:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026abd:	ee                   	out    dx,al
c0026abe:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0026ac4:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0026ac8:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026acb:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026acf:	ee                   	out    dx,al
c0026ad0:	83 ec 0c             	sub    esp,0xc
c0026ad3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026ad6:	e8 5f fe ff ff       	call   c002693a <PIC::remap()>
c0026adb:	83 c4 10             	add    esp,0x10
c0026ade:	b8 00 00 00 00       	mov    eax,0x0
c0026ae3:	c9                   	leave  
c0026ae4:	c3                   	ret    
c0026ae5:	90                   	nop

c0026ae6 <APICTimer::close(int, int, void*)>:
c0026ae6:	b8 00 00 00 00       	mov    eax,0x0
c0026aeb:	c3                   	ret    

c0026aec <apicTimerHandler(regs*, void*)>:
c0026aec:	83 ec 0c             	sub    esp,0xc
c0026aef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026af3:	8b 00                	mov    eax,DWORD PTR [eax]
c0026af5:	99                   	cdq    
c0026af6:	52                   	push   edx
c0026af7:	50                   	push   eax
c0026af8:	6a 00                	push   0x0
c0026afa:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026aff:	e8 90 07 00 00       	call   c0027294 <__udivdi3>
c0026b04:	83 c4 10             	add    esp,0x10
c0026b07:	83 ec 08             	sub    esp,0x8
c0026b0a:	52                   	push   edx
c0026b0b:	50                   	push   eax
c0026b0c:	e8 a0 fd fe ff       	call   c00168b1 <timerHandler(unsigned long long)>
c0026b11:	83 c4 10             	add    esp,0x10
c0026b14:	90                   	nop
c0026b15:	83 c4 0c             	add    esp,0xc
c0026b18:	c3                   	ret    
c0026b19:	90                   	nop

c0026b1a <APICTimer::write(int)>:
c0026b1a:	53                   	push   ebx
c0026b1b:	83 ec 28             	sub    esp,0x28
c0026b1e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026b22:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026b26:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026b2c:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c0026b31:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026b37:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026b3d:	83 ec 0c             	sub    esp,0xc
c0026b40:	50                   	push   eax
c0026b41:	e8 de f4 ff ff       	call   c0026024 <APIC::getBase()>
c0026b46:	83 c4 10             	add    esp,0x10
c0026b49:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026b4d:	a1 30 f7 02 c0       	mov    eax,ds:0xc002f730
c0026b52:	8b 15 34 f7 02 c0    	mov    edx,DWORD PTR ds:0xc002f734
c0026b58:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026b5c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026b60:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b64:	05 e0 03 00 00       	add    eax,0x3e0
c0026b69:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026b6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b73:	05 80 03 00 00       	add    eax,0x380
c0026b78:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026b7e:	fb                   	sti    
c0026b7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b83:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026b87:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0026b8c:	83 d2 00             	adc    edx,0x0
c0026b8f:	89 c1                	mov    ecx,eax
c0026b91:	89 d3                	mov    ebx,edx
c0026b93:	a1 30 f7 02 c0       	mov    eax,ds:0xc002f730
c0026b98:	8b 15 34 f7 02 c0    	mov    edx,DWORD PTR ds:0xc002f734
c0026b9e:	39 c8                	cmp    eax,ecx
c0026ba0:	89 d0                	mov    eax,edx
c0026ba2:	19 d8                	sbb    eax,ebx
c0026ba4:	73 02                	jae    c0026ba8 <APICTimer::write(int)+0x8e>
c0026ba6:	eb d7                	jmp    c0026b7f <APICTimer::write(int)+0x65>
c0026ba8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026bac:	05 20 03 00 00       	add    eax,0x320
c0026bb1:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026bb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026bbb:	05 90 03 00 00       	add    eax,0x390
c0026bc0:	8b 00                	mov    eax,DWORD PTR [eax]
c0026bc2:	f7 d0                	not    eax
c0026bc4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026bc8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026bcc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026bd0:	ba 00 00 00 00       	mov    edx,0x0
c0026bd5:	f7 f3                	div    ebx
c0026bd7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026bdb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026bdf:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026be5:	0d 00 00 02 00       	or     eax,0x20000
c0026bea:	89 c2                	mov    edx,eax
c0026bec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026bf0:	05 20 03 00 00       	add    eax,0x320
c0026bf5:	89 10                	mov    DWORD PTR [eax],edx
c0026bf7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026bfb:	05 e0 03 00 00       	add    eax,0x3e0
c0026c00:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026c06:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026c0a:	05 80 03 00 00       	add    eax,0x380
c0026c0f:	89 c2                	mov    edx,eax
c0026c11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026c15:	89 02                	mov    DWORD PTR [edx],eax
c0026c17:	90                   	nop
c0026c18:	83 c4 28             	add    esp,0x28
c0026c1b:	5b                   	pop    ebx
c0026c1c:	c3                   	ret    
c0026c1d:	90                   	nop

c0026c1e <APICTimer::open(int, int, void*)>:
c0026c1e:	57                   	push   edi
c0026c1f:	56                   	push   esi
c0026c20:	53                   	push   ebx
c0026c21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c25:	8b 00                	mov    eax,DWORD PTR [eax]
c0026c27:	83 c0 24             	add    eax,0x24
c0026c2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0026c2c:	83 ec 08             	sub    esp,0x8
c0026c2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026c33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026c37:	ff d0                	call   eax
c0026c39:	83 c4 10             	add    esp,0x10
c0026c3c:	a1 c8 f0 02 c0       	mov    eax,ds:0xc002f0c8
c0026c41:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026c47:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026c4d:	83 ec 0c             	sub    esp,0xc
c0026c50:	50                   	push   eax
c0026c51:	e8 ce f3 ff ff       	call   c0026024 <APIC::getBase()>
c0026c56:	83 c4 10             	add    esp,0x10
c0026c59:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026c5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c63:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026c69:	0f b6 f8             	movzx  edi,al
c0026c6c:	89 d0                	mov    eax,edx
c0026c6e:	ba 00 00 00 00       	mov    edx,0x0
c0026c73:	89 c1                	mov    ecx,eax
c0026c75:	80 e5 ff             	and    ch,0xff
c0026c78:	89 cb                	mov    ebx,ecx
c0026c7a:	0f b6 f2             	movzx  esi,dl
c0026c7d:	89 d8                	mov    eax,ebx
c0026c7f:	89 f2                	mov    edx,esi
c0026c81:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026c85:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026c88:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026c8c:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026c90:	83 e0 00             	and    eax,0x0
c0026c93:	09 d0                	or     eax,edx
c0026c95:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026c99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c9d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026ca3:	8d 50 01             	lea    edx,[eax+0x1]
c0026ca6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026caa:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026cb0:	0f b6 d0             	movzx  edx,al
c0026cb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026cb7:	83 c2 08             	add    edx,0x8
c0026cba:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026cbe:	0f b6 c9             	movzx  ecx,cl
c0026cc1:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026cc7:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026ccb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ccf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026cd3:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026cd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026cdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026ce1:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026ce7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026ceb:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026cf1:	83 ec 0c             	sub    esp,0xc
c0026cf4:	51                   	push   ecx
c0026cf5:	6a 01                	push   0x1
c0026cf7:	68 ec 6a 02 c0       	push   0xc0026aec
c0026cfc:	52                   	push   edx
c0026cfd:	50                   	push   eax
c0026cfe:	e8 19 d0 fe ff       	call   c0013d1c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026d03:	83 c4 20             	add    esp,0x20
c0026d06:	89 c2                	mov    edx,eax
c0026d08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d0c:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026d12:	b8 00 00 00 00       	mov    eax,0x0
c0026d17:	5b                   	pop    ebx
c0026d18:	5e                   	pop    esi
c0026d19:	5f                   	pop    edi
c0026d1a:	c3                   	ret    
c0026d1b:	90                   	nop

c0026d1c <APICTimer::APICTimer()>:
c0026d1c:	83 ec 0c             	sub    esp,0xc
c0026d1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d23:	83 ec 08             	sub    esp,0x8
c0026d26:	68 f0 dd 02 c0       	push   0xc002ddf0
c0026d2b:	50                   	push   eax
c0026d2c:	e8 f1 fa fe ff       	call   c0016822 <Timer::Timer(char const*)>
c0026d31:	83 c4 10             	add    esp,0x10
c0026d34:	ba 04 de 02 c0       	mov    edx,0xc002de04
c0026d39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d3d:	89 10                	mov    DWORD PTR [eax],edx
c0026d3f:	90                   	nop
c0026d40:	83 c4 0c             	add    esp,0xc
c0026d43:	c3                   	ret    

c0026d44 <PIT::write(int)>:
c0026d44:	83 ec 10             	sub    esp,0x10
c0026d47:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026d4b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026d4f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026d55:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026d59:	a3 64 34 03 c0       	mov    ds:0xc0033464,eax
c0026d5e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026d63:	99                   	cdq    
c0026d64:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026d68:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026d6c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026d73:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0026d78:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0026d7c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026d81:	ee                   	out    dx,al
c0026d82:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026d86:	0f b6 c0             	movzx  eax,al
c0026d89:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026d90:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026d94:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026d98:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0026d9d:	ee                   	out    dx,al
c0026d9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026da2:	c1 f8 08             	sar    eax,0x8
c0026da5:	0f b6 c0             	movzx  eax,al
c0026da8:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026daf:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026db3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026db7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026dbc:	ee                   	out    dx,al
c0026dbd:	90                   	nop
c0026dbe:	83 c4 10             	add    esp,0x10
c0026dc1:	c3                   	ret    

c0026dc2 <pitHandler(regs*, void*)>:
c0026dc2:	83 ec 0c             	sub    esp,0xc
c0026dc5:	a1 64 34 03 c0       	mov    eax,ds:0xc0033464
c0026dca:	99                   	cdq    
c0026dcb:	52                   	push   edx
c0026dcc:	50                   	push   eax
c0026dcd:	6a 00                	push   0x0
c0026dcf:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026dd4:	e8 bb 04 00 00       	call   c0027294 <__udivdi3>
c0026dd9:	83 c4 10             	add    esp,0x10
c0026ddc:	83 ec 08             	sub    esp,0x8
c0026ddf:	52                   	push   edx
c0026de0:	50                   	push   eax
c0026de1:	e8 cb fa fe ff       	call   c00168b1 <timerHandler(unsigned long long)>
c0026de6:	83 c4 10             	add    esp,0x10
c0026de9:	90                   	nop
c0026dea:	83 c4 0c             	add    esp,0xc
c0026ded:	c3                   	ret    

c0026dee <PIT::open(int, int, void*)>:
c0026dee:	83 ec 0c             	sub    esp,0xc
c0026df1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026df5:	8b 00                	mov    eax,DWORD PTR [eax]
c0026df7:	83 c0 24             	add    eax,0x24
c0026dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0026dfc:	83 ec 08             	sub    esp,0x8
c0026dff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026e03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026e07:	ff d0                	call   eax
c0026e09:	83 c4 10             	add    esp,0x10
c0026e0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e10:	83 ec 0c             	sub    esp,0xc
c0026e13:	6a 00                	push   0x0
c0026e15:	6a 01                	push   0x1
c0026e17:	68 c2 6d 02 c0       	push   0xc0026dc2
c0026e1c:	6a 00                	push   0x0
c0026e1e:	50                   	push   eax
c0026e1f:	e8 f8 ce fe ff       	call   c0013d1c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026e24:	83 c4 20             	add    esp,0x20
c0026e27:	89 c2                	mov    edx,eax
c0026e29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e2d:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026e33:	b8 00 00 00 00       	mov    eax,0x0
c0026e38:	83 c4 0c             	add    esp,0xc
c0026e3b:	c3                   	ret    

c0026e3c <PIT::close(int, int, void*)>:
c0026e3c:	83 ec 0c             	sub    esp,0xc
c0026e3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e43:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0026e4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e51:	6a 01                	push   0x1
c0026e53:	68 c2 6d 02 c0       	push   0xc0026dc2
c0026e58:	6a 00                	push   0x0
c0026e5a:	50                   	push   eax
c0026e5b:	e8 06 cf fe ff       	call   c0013d66 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026e60:	83 c4 10             	add    esp,0x10
c0026e63:	b8 00 00 00 00       	mov    eax,0x0
c0026e68:	83 c4 0c             	add    esp,0xc
c0026e6b:	c3                   	ret    

c0026e6c <PIT::PIT()>:
c0026e6c:	83 ec 0c             	sub    esp,0xc
c0026e6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e73:	83 ec 08             	sub    esp,0x8
c0026e76:	68 2c de 02 c0       	push   0xc002de2c
c0026e7b:	50                   	push   eax
c0026e7c:	e8 a1 f9 fe ff       	call   c0016822 <Timer::Timer(char const*)>
c0026e81:	83 c4 10             	add    esp,0x10
c0026e84:	ba 54 de 02 c0       	mov    edx,0xc002de54
c0026e89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e8d:	89 10                	mov    DWORD PTR [eax],edx
c0026e8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e93:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026e99:	0f b6 d0             	movzx  edx,al
c0026e9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ea0:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026ea7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026eab:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026eb1:	0f b6 d0             	movzx  edx,al
c0026eb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026eb8:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0026ebd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ec1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026ec7:	8d 50 01             	lea    edx,[eax+0x1]
c0026eca:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026ece:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026ed4:	0f b6 d0             	movzx  edx,al
c0026ed7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026edb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026edf:	83 e1 3f             	and    ecx,0x3f
c0026ee2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026ee6:	90                   	nop
c0026ee7:	83 c4 0c             	add    esp,0xc
c0026eea:	c3                   	ret    
c0026eeb:	66 90                	xchg   ax,ax
c0026eed:	66 90                	xchg   ax,ax
c0026eef:	90                   	nop

c0026ef0 <avxDetect>:
c0026ef0:	b8 00 00 00 00       	mov    eax,0x0
c0026ef5:	c3                   	ret    

c0026ef6 <avxSave>:
c0026ef6:	c3                   	ret    

c0026ef7 <avxLoad>:
c0026ef7:	c3                   	ret    

c0026ef8 <avxInit>:
c0026ef8:	c3                   	ret    

c0026ef9 <avxClose>:
c0026ef9:	c3                   	ret    

c0026efa <wouldSheSayYes>:
c0026efa:	c3                   	ret    
c0026efb:	49                   	dec    ecx
c0026efc:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026f00:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026f04:	75 20                	jne    c0026f26 <sseDetect.noSSE+0x1>
c0026f06:	4e                   	dec    esi
c0026f07:	79 61                	jns    c0026f6a <x87Detect+0x14>
c0026f09:	68 2e 2e 2e 00       	push   0x2e2e2e
c0026f0e:	66 90                	xchg   ax,ax

c0026f10 <absolutelyNoChanceInHell>:
c0026f10:	b8 01 00 00 00       	mov    eax,0x1
c0026f15:	0f a2                	cpuid  
c0026f17:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0026f1d:	74 06                	je     c0026f25 <sseDetect.noSSE>
c0026f1f:	b8 01 00 00 00       	mov    eax,0x1
c0026f24:	c3                   	ret    

c0026f25 <sseDetect.noSSE>:
c0026f25:	31 c0                	xor    eax,eax
c0026f27:	c3                   	ret    

c0026f28 <sseSave>:
c0026f28:	0f ae 44 24 04       	fxsave [esp+0x4]
c0026f2d:	c3                   	ret    

c0026f2e <sseLoad>:
c0026f2e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0026f33:	c3                   	ret    

c0026f34 <sseInit>:
c0026f34:	e8 49 00 00 00       	call   c0026f82 <x87Init>
c0026f39:	0f 20 e0             	mov    eax,cr4
c0026f3c:	66 0d 00 06          	or     ax,0x600
c0026f40:	0f 22 e0             	mov    cr4,eax
c0026f43:	c3                   	ret    

c0026f44 <sseClose>:
c0026f44:	c3                   	ret    
c0026f45:	66 90                	xchg   ax,ax
c0026f47:	66 90                	xchg   ax,ax
c0026f49:	66 90                	xchg   ax,ax
c0026f4b:	66 90                	xchg   ax,ax
c0026f4d:	66 90                	xchg   ax,ax
c0026f4f:	90                   	nop

c0026f50 <value_37F>:
c0026f50:	7f 03                	jg     c0026f55 <value_37A+0x1>

c0026f52 <value_37E>:
c0026f52:	7e 03                	jle    c0026f57 <x87Detect+0x1>

c0026f54 <value_37A>:
c0026f54:	7a 03                	jp     c0026f59 <x87Detect+0x3>

c0026f56 <x87Detect>:
c0026f56:	b8 01 00 00 00       	mov    eax,0x1
c0026f5b:	0f a2                	cpuid  
c0026f5d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026f63:	74 06                	je     c0026f6b <x87Detect.nox87>
c0026f65:	b8 01 00 00 00       	mov    eax,0x1
c0026f6a:	c3                   	ret    

c0026f6b <x87Detect.nox87>:
c0026f6b:	b8 00 00 00 00       	mov    eax,0x0
c0026f70:	c3                   	ret    

c0026f71 <x87Save>:
c0026f71:	55                   	push   ebp
c0026f72:	89 e5                	mov    ebp,esp
c0026f74:	9b dd 75 08          	fsave  [ebp+0x8]
c0026f78:	c9                   	leave  
c0026f79:	c3                   	ret    

c0026f7a <x87Load>:
c0026f7a:	55                   	push   ebp
c0026f7b:	89 e5                	mov    ebp,esp
c0026f7d:	dd 65 08             	frstor [ebp+0x8]
c0026f80:	c9                   	leave  
c0026f81:	c3                   	ret    

c0026f82 <x87Init>:
c0026f82:	9b db e3             	finit  
c0026f85:	0f 20 c0             	mov    eax,cr0
c0026f88:	66 25 fb ff          	and    ax,0xfffb
c0026f8c:	66 0d 22 00          	or     ax,0x22
c0026f90:	0f 22 c0             	mov    cr0,eax
c0026f93:	0f 06                	clts   
c0026f95:	d9 2d 54 6f 02 c0    	fldcw  WORD PTR ds:0xc0026f54
c0026f9b:	c3                   	ret    

c0026f9c <x87Close>:
c0026f9c:	c3                   	ret    
c0026f9d:	66 90                	xchg   ax,ax
c0026f9f:	90                   	nop

c0026fa0 <__do_global_ctors_aux>:
c0026fa0:	a1 d8 9b 02 c0       	mov    eax,ds:0xc0029bd8
c0026fa5:	83 f8 ff             	cmp    eax,0xffffffff
c0026fa8:	74 1a                	je     c0026fc4 <__do_global_ctors_aux+0x24>
c0026faa:	55                   	push   ebp
c0026fab:	89 e5                	mov    ebp,esp
c0026fad:	53                   	push   ebx
c0026fae:	52                   	push   edx
c0026faf:	bb d8 9b 02 c0       	mov    ebx,0xc0029bd8
c0026fb4:	ff d0                	call   eax
c0026fb6:	83 eb 04             	sub    ebx,0x4
c0026fb9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026fbb:	83 f8 ff             	cmp    eax,0xffffffff
c0026fbe:	75 f4                	jne    c0026fb4 <__do_global_ctors_aux+0x14>
c0026fc0:	58                   	pop    eax
c0026fc1:	5b                   	pop    ebx
c0026fc2:	5d                   	pop    ebp
c0026fc3:	c3                   	ret    
c0026fc4:	c3                   	ret    
c0026fc5:	66 90                	xchg   ax,ax
c0026fc7:	90                   	nop

c0026fc8 <__divdi3>:
c0026fc8:	55                   	push   ebp
c0026fc9:	57                   	push   edi
c0026fca:	56                   	push   esi
c0026fcb:	53                   	push   ebx
c0026fcc:	83 ec 1c             	sub    esp,0x1c
c0026fcf:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0026fd3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026fd7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026fda:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026fde:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0026fe2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026fe6:	85 db                	test   ebx,ebx
c0026fe8:	0f 88 8e 00 00 00    	js     c002707c <__divdi3+0xb4>
c0026fee:	89 dd                	mov    ebp,ebx
c0026ff0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026ff8:	89 d3                	mov    ebx,edx
c0026ffa:	85 d2                	test   edx,edx
c0026ffc:	79 0d                	jns    c002700b <__divdi3+0x43>
c0026ffe:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0027002:	f7 d8                	neg    eax
c0027004:	83 d2 00             	adc    edx,0x0
c0027007:	f7 da                	neg    edx
c0027009:	89 d3                	mov    ebx,edx
c002700b:	89 c7                	mov    edi,eax
c002700d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0027010:	85 db                	test   ebx,ebx
c0027012:	75 48                	jne    c002705c <__divdi3+0x94>
c0027014:	39 ef                	cmp    edi,ebp
c0027016:	76 24                	jbe    c002703c <__divdi3+0x74>
c0027018:	89 ea                	mov    edx,ebp
c002701a:	f7 f7                	div    edi
c002701c:	89 c1                	mov    ecx,eax
c002701e:	31 f6                	xor    esi,esi
c0027020:	89 c8                	mov    eax,ecx
c0027022:	89 f2                	mov    edx,esi
c0027024:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027028:	85 c9                	test   ecx,ecx
c002702a:	74 07                	je     c0027033 <__divdi3+0x6b>
c002702c:	f7 d8                	neg    eax
c002702e:	83 d2 00             	adc    edx,0x0
c0027031:	f7 da                	neg    edx
c0027033:	83 c4 1c             	add    esp,0x1c
c0027036:	5b                   	pop    ebx
c0027037:	5e                   	pop    esi
c0027038:	5f                   	pop    edi
c0027039:	5d                   	pop    ebp
c002703a:	c3                   	ret    
c002703b:	90                   	nop
c002703c:	85 ff                	test   edi,edi
c002703e:	75 0b                	jne    c002704b <__divdi3+0x83>
c0027040:	b8 01 00 00 00       	mov    eax,0x1
c0027045:	31 d2                	xor    edx,edx
c0027047:	f7 f3                	div    ebx
c0027049:	89 c7                	mov    edi,eax
c002704b:	31 d2                	xor    edx,edx
c002704d:	89 e8                	mov    eax,ebp
c002704f:	f7 f7                	div    edi
c0027051:	89 c6                	mov    esi,eax
c0027053:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0027056:	f7 f7                	div    edi
c0027058:	89 c1                	mov    ecx,eax
c002705a:	eb c4                	jmp    c0027020 <__divdi3+0x58>
c002705c:	39 eb                	cmp    ebx,ebp
c002705e:	77 3c                	ja     c002709c <__divdi3+0xd4>
c0027060:	0f bd f3             	bsr    esi,ebx
c0027063:	83 f6 1f             	xor    esi,0x1f
c0027066:	75 40                	jne    c00270a8 <__divdi3+0xe0>
c0027068:	39 eb                	cmp    ebx,ebp
c002706a:	72 09                	jb     c0027075 <__divdi3+0xad>
c002706c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002706f:	0f 87 97 00 00 00    	ja     c002710c <__divdi3+0x144>
c0027075:	b9 01 00 00 00       	mov    ecx,0x1
c002707a:	eb a4                	jmp    c0027020 <__divdi3+0x58>
c002707c:	f7 d9                	neg    ecx
c002707e:	83 d3 00             	adc    ebx,0x0
c0027081:	f7 db                	neg    ebx
c0027083:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0027086:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002708a:	89 dd                	mov    ebp,ebx
c002708c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0027094:	e9 5f ff ff ff       	jmp    c0026ff8 <__divdi3+0x30>
c0027099:	8d 76 00             	lea    esi,[esi+0x0]
c002709c:	31 f6                	xor    esi,esi
c002709e:	31 c9                	xor    ecx,ecx
c00270a0:	e9 7b ff ff ff       	jmp    c0027020 <__divdi3+0x58>
c00270a5:	8d 76 00             	lea    esi,[esi+0x0]
c00270a8:	b8 20 00 00 00       	mov    eax,0x20
c00270ad:	29 f0                	sub    eax,esi
c00270af:	89 f1                	mov    ecx,esi
c00270b1:	d3 e3                	shl    ebx,cl
c00270b3:	89 fa                	mov    edx,edi
c00270b5:	88 c1                	mov    cl,al
c00270b7:	d3 ea                	shr    edx,cl
c00270b9:	09 da                	or     edx,ebx
c00270bb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00270bf:	89 f1                	mov    ecx,esi
c00270c1:	d3 e7                	shl    edi,cl
c00270c3:	89 eb                	mov    ebx,ebp
c00270c5:	88 c1                	mov    cl,al
c00270c7:	d3 eb                	shr    ebx,cl
c00270c9:	89 f1                	mov    ecx,esi
c00270cb:	d3 e5                	shl    ebp,cl
c00270cd:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00270d0:	88 c1                	mov    cl,al
c00270d2:	d3 ea                	shr    edx,cl
c00270d4:	09 d5                	or     ebp,edx
c00270d6:	89 e8                	mov    eax,ebp
c00270d8:	89 da                	mov    edx,ebx
c00270da:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00270de:	89 d3                	mov    ebx,edx
c00270e0:	89 c5                	mov    ebp,eax
c00270e2:	f7 e7                	mul    edi
c00270e4:	39 d3                	cmp    ebx,edx
c00270e6:	72 18                	jb     c0027100 <__divdi3+0x138>
c00270e8:	74 0a                	je     c00270f4 <__divdi3+0x12c>
c00270ea:	89 e9                	mov    ecx,ebp
c00270ec:	31 f6                	xor    esi,esi
c00270ee:	e9 2d ff ff ff       	jmp    c0027020 <__divdi3+0x58>
c00270f3:	90                   	nop
c00270f4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00270f7:	89 f1                	mov    ecx,esi
c00270f9:	d3 e7                	shl    edi,cl
c00270fb:	39 c7                	cmp    edi,eax
c00270fd:	73 eb                	jae    c00270ea <__divdi3+0x122>
c00270ff:	90                   	nop
c0027100:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0027103:	31 f6                	xor    esi,esi
c0027105:	e9 16 ff ff ff       	jmp    c0027020 <__divdi3+0x58>
c002710a:	66 90                	xchg   ax,ax
c002710c:	31 c9                	xor    ecx,ecx
c002710e:	e9 0d ff ff ff       	jmp    c0027020 <__divdi3+0x58>
c0027113:	90                   	nop

c0027114 <__moddi3>:
c0027114:	55                   	push   ebp
c0027115:	57                   	push   edi
c0027116:	56                   	push   esi
c0027117:	53                   	push   ebx
c0027118:	83 ec 2c             	sub    esp,0x2c
c002711b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002711f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0027123:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0027127:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002712b:	85 db                	test   ebx,ebx
c002712d:	0f 88 85 00 00 00    	js     c00271b8 <__moddi3+0xa4>
c0027133:	89 de                	mov    esi,ebx
c0027135:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002713d:	89 d7                	mov    edi,edx
c002713f:	85 d2                	test   edx,edx
c0027141:	79 09                	jns    c002714c <__moddi3+0x38>
c0027143:	f7 d8                	neg    eax
c0027145:	83 d2 00             	adc    edx,0x0
c0027148:	f7 da                	neg    edx
c002714a:	89 d7                	mov    edi,edx
c002714c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027150:	89 cd                	mov    ebp,ecx
c0027152:	85 ff                	test   edi,edi
c0027154:	75 52                	jne    c00271a8 <__moddi3+0x94>
c0027156:	89 c3                	mov    ebx,eax
c0027158:	39 f0                	cmp    eax,esi
c002715a:	76 24                	jbe    c0027180 <__moddi3+0x6c>
c002715c:	89 c8                	mov    eax,ecx
c002715e:	89 f2                	mov    edx,esi
c0027160:	f7 f3                	div    ebx
c0027162:	89 d6                	mov    esi,edx
c0027164:	89 f0                	mov    eax,esi
c0027166:	31 d2                	xor    edx,edx
c0027168:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002716c:	85 c9                	test   ecx,ecx
c002716e:	74 07                	je     c0027177 <__moddi3+0x63>
c0027170:	f7 d8                	neg    eax
c0027172:	83 d2 00             	adc    edx,0x0
c0027175:	f7 da                	neg    edx
c0027177:	83 c4 2c             	add    esp,0x2c
c002717a:	5b                   	pop    ebx
c002717b:	5e                   	pop    esi
c002717c:	5f                   	pop    edi
c002717d:	5d                   	pop    ebp
c002717e:	c3                   	ret    
c002717f:	90                   	nop
c0027180:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0027184:	85 db                	test   ebx,ebx
c0027186:	75 0d                	jne    c0027195 <__moddi3+0x81>
c0027188:	b8 01 00 00 00       	mov    eax,0x1
c002718d:	31 d2                	xor    edx,edx
c002718f:	f7 f7                	div    edi
c0027191:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027195:	89 f0                	mov    eax,esi
c0027197:	31 d2                	xor    edx,edx
c0027199:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002719d:	f7 f7                	div    edi
c002719f:	89 e8                	mov    eax,ebp
c00271a1:	f7 f7                	div    edi
c00271a3:	89 d6                	mov    esi,edx
c00271a5:	eb bd                	jmp    c0027164 <__moddi3+0x50>
c00271a7:	90                   	nop
c00271a8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00271ac:	39 f7                	cmp    edi,esi
c00271ae:	76 20                	jbe    c00271d0 <__moddi3+0xbc>
c00271b0:	89 c8                	mov    eax,ecx
c00271b2:	89 f2                	mov    edx,esi
c00271b4:	eb b2                	jmp    c0027168 <__moddi3+0x54>
c00271b6:	66 90                	xchg   ax,ax
c00271b8:	f7 d9                	neg    ecx
c00271ba:	83 d3 00             	adc    ebx,0x0
c00271bd:	f7 db                	neg    ebx
c00271bf:	89 de                	mov    esi,ebx
c00271c1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00271c9:	e9 6f ff ff ff       	jmp    c002713d <__moddi3+0x29>
c00271ce:	66 90                	xchg   ax,ax
c00271d0:	0f bd c7             	bsr    eax,edi
c00271d3:	83 f0 1f             	xor    eax,0x1f
c00271d6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00271da:	75 24                	jne    c0027200 <__moddi3+0xec>
c00271dc:	39 f7                	cmp    edi,esi
c00271de:	72 06                	jb     c00271e6 <__moddi3+0xd2>
c00271e0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00271e4:	77 0c                	ja     c00271f2 <__moddi3+0xde>
c00271e6:	89 e9                	mov    ecx,ebp
c00271e8:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00271ec:	19 fe                	sbb    esi,edi
c00271ee:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00271f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00271f6:	89 f2                	mov    edx,esi
c00271f8:	e9 6b ff ff ff       	jmp    c0027168 <__moddi3+0x54>
c00271fd:	8d 76 00             	lea    esi,[esi+0x0]
c0027200:	b8 20 00 00 00       	mov    eax,0x20
c0027205:	89 c2                	mov    edx,eax
c0027207:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002720b:	29 da                	sub    edx,ebx
c002720d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0027211:	88 d9                	mov    cl,bl
c0027213:	d3 e7                	shl    edi,cl
c0027215:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0027219:	88 d1                	mov    cl,dl
c002721b:	d3 e8                	shr    eax,cl
c002721d:	09 c7                	or     edi,eax
c002721f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0027223:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0027227:	89 d8                	mov    eax,ebx
c0027229:	88 d9                	mov    cl,bl
c002722b:	d3 e7                	shl    edi,cl
c002722d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027231:	89 f3                	mov    ebx,esi
c0027233:	88 d1                	mov    cl,dl
c0027235:	d3 eb                	shr    ebx,cl
c0027237:	89 c7                	mov    edi,eax
c0027239:	88 c1                	mov    cl,al
c002723b:	d3 e6                	shl    esi,cl
c002723d:	89 e8                	mov    eax,ebp
c002723f:	88 d1                	mov    cl,dl
c0027241:	d3 e8                	shr    eax,cl
c0027243:	09 f0                	or     eax,esi
c0027245:	89 f9                	mov    ecx,edi
c0027247:	d3 e5                	shl    ebp,cl
c0027249:	89 da                	mov    edx,ebx
c002724b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002724f:	89 d3                	mov    ebx,edx
c0027251:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0027255:	89 c6                	mov    esi,eax
c0027257:	89 d1                	mov    ecx,edx
c0027259:	39 d3                	cmp    ebx,edx
c002725b:	72 27                	jb     c0027284 <__moddi3+0x170>
c002725d:	74 21                	je     c0027280 <__moddi3+0x16c>
c002725f:	29 f5                	sub    ebp,esi
c0027261:	19 cb                	sbb    ebx,ecx
c0027263:	89 de                	mov    esi,ebx
c0027265:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0027269:	d3 e6                	shl    esi,cl
c002726b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002726f:	89 f9                	mov    ecx,edi
c0027271:	d3 ed                	shr    ebp,cl
c0027273:	09 ee                	or     esi,ebp
c0027275:	89 f0                	mov    eax,esi
c0027277:	d3 eb                	shr    ebx,cl
c0027279:	89 da                	mov    edx,ebx
c002727b:	e9 e8 fe ff ff       	jmp    c0027168 <__moddi3+0x54>
c0027280:	39 c5                	cmp    ebp,eax
c0027282:	73 db                	jae    c002725f <__moddi3+0x14b>
c0027284:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0027288:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002728c:	89 d1                	mov    ecx,edx
c002728e:	89 c6                	mov    esi,eax
c0027290:	eb cd                	jmp    c002725f <__moddi3+0x14b>
c0027292:	66 90                	xchg   ax,ax

c0027294 <__udivdi3>:
c0027294:	55                   	push   ebp
c0027295:	57                   	push   edi
c0027296:	56                   	push   esi
c0027297:	53                   	push   ebx
c0027298:	83 ec 1c             	sub    esp,0x1c
c002729b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002729f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00272a3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00272a7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00272ab:	85 d2                	test   edx,edx
c00272ad:	75 41                	jne    c00272f0 <__udivdi3+0x5c>
c00272af:	39 f7                	cmp    edi,esi
c00272b1:	76 15                	jbe    c00272c8 <__udivdi3+0x34>
c00272b3:	89 e8                	mov    eax,ebp
c00272b5:	89 f2                	mov    edx,esi
c00272b7:	f7 f7                	div    edi
c00272b9:	31 db                	xor    ebx,ebx
c00272bb:	89 da                	mov    edx,ebx
c00272bd:	83 c4 1c             	add    esp,0x1c
c00272c0:	5b                   	pop    ebx
c00272c1:	5e                   	pop    esi
c00272c2:	5f                   	pop    edi
c00272c3:	5d                   	pop    ebp
c00272c4:	c3                   	ret    
c00272c5:	8d 76 00             	lea    esi,[esi+0x0]
c00272c8:	89 f9                	mov    ecx,edi
c00272ca:	85 ff                	test   edi,edi
c00272cc:	75 0b                	jne    c00272d9 <__udivdi3+0x45>
c00272ce:	b8 01 00 00 00       	mov    eax,0x1
c00272d3:	31 d2                	xor    edx,edx
c00272d5:	f7 f7                	div    edi
c00272d7:	89 c1                	mov    ecx,eax
c00272d9:	31 d2                	xor    edx,edx
c00272db:	89 f0                	mov    eax,esi
c00272dd:	f7 f1                	div    ecx
c00272df:	89 c3                	mov    ebx,eax
c00272e1:	89 e8                	mov    eax,ebp
c00272e3:	f7 f1                	div    ecx
c00272e5:	89 da                	mov    edx,ebx
c00272e7:	83 c4 1c             	add    esp,0x1c
c00272ea:	5b                   	pop    ebx
c00272eb:	5e                   	pop    esi
c00272ec:	5f                   	pop    edi
c00272ed:	5d                   	pop    ebp
c00272ee:	c3                   	ret    
c00272ef:	90                   	nop
c00272f0:	39 f2                	cmp    edx,esi
c00272f2:	77 1c                	ja     c0027310 <__udivdi3+0x7c>
c00272f4:	0f bd da             	bsr    ebx,edx
c00272f7:	83 f3 1f             	xor    ebx,0x1f
c00272fa:	75 24                	jne    c0027320 <__udivdi3+0x8c>
c00272fc:	39 f2                	cmp    edx,esi
c00272fe:	72 08                	jb     c0027308 <__udivdi3+0x74>
c0027300:	39 ef                	cmp    edi,ebp
c0027302:	0f 87 84 00 00 00    	ja     c002738c <__udivdi3+0xf8>
c0027308:	b8 01 00 00 00       	mov    eax,0x1
c002730d:	eb ac                	jmp    c00272bb <__udivdi3+0x27>
c002730f:	90                   	nop
c0027310:	31 db                	xor    ebx,ebx
c0027312:	31 c0                	xor    eax,eax
c0027314:	89 da                	mov    edx,ebx
c0027316:	83 c4 1c             	add    esp,0x1c
c0027319:	5b                   	pop    ebx
c002731a:	5e                   	pop    esi
c002731b:	5f                   	pop    edi
c002731c:	5d                   	pop    ebp
c002731d:	c3                   	ret    
c002731e:	66 90                	xchg   ax,ax
c0027320:	b8 20 00 00 00       	mov    eax,0x20
c0027325:	29 d8                	sub    eax,ebx
c0027327:	88 d9                	mov    cl,bl
c0027329:	d3 e2                	shl    edx,cl
c002732b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002732f:	89 fa                	mov    edx,edi
c0027331:	88 c1                	mov    cl,al
c0027333:	d3 ea                	shr    edx,cl
c0027335:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027339:	09 d1                	or     ecx,edx
c002733b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002733f:	88 d9                	mov    cl,bl
c0027341:	d3 e7                	shl    edi,cl
c0027343:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027347:	89 f7                	mov    edi,esi
c0027349:	88 c1                	mov    cl,al
c002734b:	d3 ef                	shr    edi,cl
c002734d:	88 d9                	mov    cl,bl
c002734f:	d3 e6                	shl    esi,cl
c0027351:	89 ea                	mov    edx,ebp
c0027353:	88 c1                	mov    cl,al
c0027355:	d3 ea                	shr    edx,cl
c0027357:	09 d6                	or     esi,edx
c0027359:	89 f0                	mov    eax,esi
c002735b:	89 fa                	mov    edx,edi
c002735d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0027361:	89 d7                	mov    edi,edx
c0027363:	89 c6                	mov    esi,eax
c0027365:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0027369:	39 d7                	cmp    edi,edx
c002736b:	72 13                	jb     c0027380 <__udivdi3+0xec>
c002736d:	74 09                	je     c0027378 <__udivdi3+0xe4>
c002736f:	89 f0                	mov    eax,esi
c0027371:	31 db                	xor    ebx,ebx
c0027373:	e9 43 ff ff ff       	jmp    c00272bb <__udivdi3+0x27>
c0027378:	88 d9                	mov    cl,bl
c002737a:	d3 e5                	shl    ebp,cl
c002737c:	39 c5                	cmp    ebp,eax
c002737e:	73 ef                	jae    c002736f <__udivdi3+0xdb>
c0027380:	8d 46 ff             	lea    eax,[esi-0x1]
c0027383:	31 db                	xor    ebx,ebx
c0027385:	e9 31 ff ff ff       	jmp    c00272bb <__udivdi3+0x27>
c002738a:	66 90                	xchg   ax,ax
c002738c:	31 c0                	xor    eax,eax
c002738e:	e9 28 ff ff ff       	jmp    c00272bb <__udivdi3+0x27>
c0027393:	90                   	nop

c0027394 <__umoddi3>:
c0027394:	55                   	push   ebp
c0027395:	57                   	push   edi
c0027396:	56                   	push   esi
c0027397:	53                   	push   ebx
c0027398:	83 ec 1c             	sub    esp,0x1c
c002739b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002739f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00273a3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00273a7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00273ab:	89 da                	mov    edx,ebx
c00273ad:	85 c0                	test   eax,eax
c00273af:	75 37                	jne    c00273e8 <__umoddi3+0x54>
c00273b1:	39 df                	cmp    edi,ebx
c00273b3:	76 13                	jbe    c00273c8 <__umoddi3+0x34>
c00273b5:	89 f0                	mov    eax,esi
c00273b7:	f7 f7                	div    edi
c00273b9:	89 d0                	mov    eax,edx
c00273bb:	31 d2                	xor    edx,edx
c00273bd:	83 c4 1c             	add    esp,0x1c
c00273c0:	5b                   	pop    ebx
c00273c1:	5e                   	pop    esi
c00273c2:	5f                   	pop    edi
c00273c3:	5d                   	pop    ebp
c00273c4:	c3                   	ret    
c00273c5:	8d 76 00             	lea    esi,[esi+0x0]
c00273c8:	89 fd                	mov    ebp,edi
c00273ca:	85 ff                	test   edi,edi
c00273cc:	75 0b                	jne    c00273d9 <__umoddi3+0x45>
c00273ce:	b8 01 00 00 00       	mov    eax,0x1
c00273d3:	31 d2                	xor    edx,edx
c00273d5:	f7 f7                	div    edi
c00273d7:	89 c5                	mov    ebp,eax
c00273d9:	89 d8                	mov    eax,ebx
c00273db:	31 d2                	xor    edx,edx
c00273dd:	f7 f5                	div    ebp
c00273df:	89 f0                	mov    eax,esi
c00273e1:	f7 f5                	div    ebp
c00273e3:	89 d0                	mov    eax,edx
c00273e5:	eb d4                	jmp    c00273bb <__umoddi3+0x27>
c00273e7:	90                   	nop
c00273e8:	89 f1                	mov    ecx,esi
c00273ea:	39 d8                	cmp    eax,ebx
c00273ec:	76 0a                	jbe    c00273f8 <__umoddi3+0x64>
c00273ee:	89 f0                	mov    eax,esi
c00273f0:	83 c4 1c             	add    esp,0x1c
c00273f3:	5b                   	pop    ebx
c00273f4:	5e                   	pop    esi
c00273f5:	5f                   	pop    edi
c00273f6:	5d                   	pop    ebp
c00273f7:	c3                   	ret    
c00273f8:	0f bd e8             	bsr    ebp,eax
c00273fb:	83 f5 1f             	xor    ebp,0x1f
c00273fe:	75 1c                	jne    c002741c <__umoddi3+0x88>
c0027400:	39 d8                	cmp    eax,ebx
c0027402:	72 04                	jb     c0027408 <__umoddi3+0x74>
c0027404:	39 f7                	cmp    edi,esi
c0027406:	77 08                	ja     c0027410 <__umoddi3+0x7c>
c0027408:	89 da                	mov    edx,ebx
c002740a:	29 fe                	sub    esi,edi
c002740c:	19 c2                	sbb    edx,eax
c002740e:	89 f1                	mov    ecx,esi
c0027410:	89 c8                	mov    eax,ecx
c0027412:	83 c4 1c             	add    esp,0x1c
c0027415:	5b                   	pop    ebx
c0027416:	5e                   	pop    esi
c0027417:	5f                   	pop    edi
c0027418:	5d                   	pop    ebp
c0027419:	c3                   	ret    
c002741a:	66 90                	xchg   ax,ax
c002741c:	ba 20 00 00 00       	mov    edx,0x20
c0027421:	29 ea                	sub    edx,ebp
c0027423:	89 e9                	mov    ecx,ebp
c0027425:	d3 e0                	shl    eax,cl
c0027427:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002742b:	89 f8                	mov    eax,edi
c002742d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0027431:	88 d1                	mov    cl,dl
c0027433:	d3 e8                	shr    eax,cl
c0027435:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027439:	09 c1                	or     ecx,eax
c002743b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002743f:	89 e9                	mov    ecx,ebp
c0027441:	d3 e7                	shl    edi,cl
c0027443:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027447:	89 d8                	mov    eax,ebx
c0027449:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002744d:	88 d1                	mov    cl,dl
c002744f:	d3 e8                	shr    eax,cl
c0027451:	89 c7                	mov    edi,eax
c0027453:	89 e9                	mov    ecx,ebp
c0027455:	d3 e3                	shl    ebx,cl
c0027457:	89 f0                	mov    eax,esi
c0027459:	88 d1                	mov    cl,dl
c002745b:	d3 e8                	shr    eax,cl
c002745d:	09 d8                	or     eax,ebx
c002745f:	89 e9                	mov    ecx,ebp
c0027461:	d3 e6                	shl    esi,cl
c0027463:	89 f3                	mov    ebx,esi
c0027465:	89 fa                	mov    edx,edi
c0027467:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002746b:	89 d1                	mov    ecx,edx
c002746d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0027471:	89 c6                	mov    esi,eax
c0027473:	89 d7                	mov    edi,edx
c0027475:	39 d1                	cmp    ecx,edx
c0027477:	72 27                	jb     c00274a0 <__umoddi3+0x10c>
c0027479:	74 21                	je     c002749c <__umoddi3+0x108>
c002747b:	89 ca                	mov    edx,ecx
c002747d:	29 f3                	sub    ebx,esi
c002747f:	19 fa                	sbb    edx,edi
c0027481:	89 d0                	mov    eax,edx
c0027483:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0027487:	d3 e0                	shl    eax,cl
c0027489:	89 e9                	mov    ecx,ebp
c002748b:	d3 eb                	shr    ebx,cl
c002748d:	09 d8                	or     eax,ebx
c002748f:	d3 ea                	shr    edx,cl
c0027491:	83 c4 1c             	add    esp,0x1c
c0027494:	5b                   	pop    ebx
c0027495:	5e                   	pop    esi
c0027496:	5f                   	pop    edi
c0027497:	5d                   	pop    ebp
c0027498:	c3                   	ret    
c0027499:	8d 76 00             	lea    esi,[esi+0x0]
c002749c:	39 c3                	cmp    ebx,eax
c002749e:	73 db                	jae    c002747b <__umoddi3+0xe7>
c00274a0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00274a4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00274a8:	89 d7                	mov    edi,edx
c00274aa:	89 c6                	mov    esi,eax
c00274ac:	eb cd                	jmp    c002747b <__umoddi3+0xe7>

c00274ae <__addsf3>:
c00274ae:	55                   	push   ebp
c00274af:	89 e5                	mov    ebp,esp
c00274b1:	57                   	push   edi
c00274b2:	56                   	push   esi
c00274b3:	53                   	push   ebx
c00274b4:	83 ec 08             	sub    esp,0x8
c00274b7:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00274ba:	89 fa                	mov    edx,edi
c00274bc:	89 f8                	mov    eax,edi
c00274be:	c1 f8 17             	sar    eax,0x17
c00274c1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00274c4:	c1 e2 08             	shl    edx,0x8
c00274c7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00274cd:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00274d0:	89 de                	mov    esi,ebx
c00274d2:	c1 fe 17             	sar    esi,0x17
c00274d5:	c1 e3 08             	shl    ebx,0x8
c00274d8:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00274de:	31 f0                	xor    eax,esi
c00274e0:	0f 88 3b 01 00 00    	js     c0027621 <__addsf3+0x173>
c00274e6:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00274e9:	29 f1                	sub    ecx,esi
c00274eb:	85 c9                	test   ecx,ecx
c00274ed:	7e 54                	jle    c0027543 <__addsf3+0x95>
c00274ef:	89 f0                	mov    eax,esi
c00274f1:	84 c0                	test   al,al
c00274f3:	75 10                	jne    c0027505 <__addsf3+0x57>
c00274f5:	85 db                	test   ebx,ebx
c00274f7:	0f 84 aa 02 00 00    	je     c00277a7 <__addsf3+0x2f9>
c00274fd:	49                   	dec    ecx
c00274fe:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027501:	74 38                	je     c002753b <__addsf3+0x8d>
c0027503:	eb 13                	jmp    c0027518 <__addsf3+0x6a>
c0027505:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027508:	f7 d0                	not    eax
c002750a:	84 c0                	test   al,al
c002750c:	0f 84 95 02 00 00    	je     c00277a7 <__addsf3+0x2f9>
c0027512:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027518:	83 f9 1f             	cmp    ecx,0x1f
c002751b:	0f 8f 86 02 00 00    	jg     c00277a7 <__addsf3+0x2f9>
c0027521:	89 de                	mov    esi,ebx
c0027523:	d3 ee                	shr    esi,cl
c0027525:	b8 20 00 00 00       	mov    eax,0x20
c002752a:	29 c8                	sub    eax,ecx
c002752c:	89 c1                	mov    ecx,eax
c002752e:	d3 e3                	shl    ebx,cl
c0027530:	31 c0                	xor    eax,eax
c0027532:	85 db                	test   ebx,ebx
c0027534:	0f 95 c0             	setne  al
c0027537:	09 f0                	or     eax,esi
c0027539:	01 d0                	add    eax,edx
c002753b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002753e:	e9 b6 00 00 00       	jmp    c00275f9 <__addsf3+0x14b>
c0027543:	74 5c                	je     c00275a1 <__addsf3+0xf3>
c0027545:	89 f1                	mov    ecx,esi
c0027547:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c002754a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002754d:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0027551:	75 14                	jne    c0027567 <__addsf3+0xb9>
c0027553:	85 d2                	test   edx,edx
c0027555:	0f 84 4c 02 00 00    	je     c00277a7 <__addsf3+0x2f9>
c002755b:	49                   	dec    ecx
c002755c:	8d 04 1a             	lea    eax,[edx+ebx*1]
c002755f:	0f 84 94 00 00 00    	je     c00275f9 <__addsf3+0x14b>
c0027565:	eb 12                	jmp    c0027579 <__addsf3+0xcb>
c0027567:	89 f0                	mov    eax,esi
c0027569:	f7 d0                	not    eax
c002756b:	84 c0                	test   al,al
c002756d:	0f 84 34 02 00 00    	je     c00277a7 <__addsf3+0x2f9>
c0027573:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027579:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002757c:	83 f9 1f             	cmp    ecx,0x1f
c002757f:	0f 8f 22 02 00 00    	jg     c00277a7 <__addsf3+0x2f9>
c0027585:	89 d7                	mov    edi,edx
c0027587:	d3 ef                	shr    edi,cl
c0027589:	b8 20 00 00 00       	mov    eax,0x20
c002758e:	29 c8                	sub    eax,ecx
c0027590:	89 c1                	mov    ecx,eax
c0027592:	d3 e2                	shl    edx,cl
c0027594:	31 c0                	xor    eax,eax
c0027596:	85 d2                	test   edx,edx
c0027598:	0f 95 c0             	setne  al
c002759b:	09 f8                	or     eax,edi
c002759d:	01 d8                	add    eax,ebx
c002759f:	eb 58                	jmp    c00275f9 <__addsf3+0x14b>
c00275a1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00275a4:	8d 70 01             	lea    esi,[eax+0x1]
c00275a7:	f7 c6 fe 00 00 00    	test   esi,0xfe
c00275ad:	75 32                	jne    c00275e1 <__addsf3+0x133>
c00275af:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00275b3:	75 1f                	jne    c00275d4 <__addsf3+0x126>
c00275b5:	85 d2                	test   edx,edx
c00275b7:	0f 84 e0 01 00 00    	je     c002779d <__addsf3+0x2ef>
c00275bd:	85 db                	test   ebx,ebx
c00275bf:	0f 84 e2 01 00 00    	je     c00277a7 <__addsf3+0x2f9>
c00275c5:	89 d0                	mov    eax,edx
c00275c7:	01 d8                	add    eax,ebx
c00275c9:	0f 89 a9 01 00 00    	jns    c0027778 <__addsf3+0x2ca>
c00275cf:	e9 9d 01 00 00       	jmp    c0027771 <__addsf3+0x2c3>
c00275d4:	85 d2                	test   edx,edx
c00275d6:	0f 85 cb 01 00 00    	jne    c00277a7 <__addsf3+0x2f9>
c00275dc:	e9 bc 01 00 00       	jmp    c002779d <__addsf3+0x2ef>
c00275e1:	31 c0                	xor    eax,eax
c00275e3:	89 f1                	mov    ecx,esi
c00275e5:	f7 d1                	not    ecx
c00275e7:	84 c9                	test   cl,cl
c00275e9:	0f 84 90 01 00 00    	je     c002777f <__addsf3+0x2d1>
c00275ef:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00275f2:	d1 e8                	shr    eax,1
c00275f4:	e9 86 01 00 00       	jmp    c002777f <__addsf3+0x2d1>
c00275f9:	85 c0                	test   eax,eax
c00275fb:	0f 89 7e 01 00 00    	jns    c002777f <__addsf3+0x2d1>
c0027601:	46                   	inc    esi
c0027602:	89 f2                	mov    edx,esi
c0027604:	f7 d2                	not    edx
c0027606:	84 d2                	test   dl,dl
c0027608:	0f 84 6f 01 00 00    	je     c002777d <__addsf3+0x2cf>
c002760e:	89 c2                	mov    edx,eax
c0027610:	83 e2 01             	and    edx,0x1
c0027613:	d1 e8                	shr    eax,1
c0027615:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002761a:	09 d0                	or     eax,edx
c002761c:	e9 5e 01 00 00       	jmp    c002777f <__addsf3+0x2d1>
c0027621:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0027625:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027628:	89 f0                	mov    eax,esi
c002762a:	0f b6 c0             	movzx  eax,al
c002762d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027630:	29 c1                	sub    ecx,eax
c0027632:	85 c9                	test   ecx,ecx
c0027634:	7e 55                	jle    c002768b <__addsf3+0x1dd>
c0027636:	85 c0                	test   eax,eax
c0027638:	75 11                	jne    c002764b <__addsf3+0x19d>
c002763a:	85 db                	test   ebx,ebx
c002763c:	0f 84 65 01 00 00    	je     c00277a7 <__addsf3+0x2f9>
c0027642:	49                   	dec    ecx
c0027643:	75 19                	jne    c002765e <__addsf3+0x1b0>
c0027645:	89 d0                	mov    eax,edx
c0027647:	29 d8                	sub    eax,ebx
c0027649:	eb 38                	jmp    c0027683 <__addsf3+0x1d5>
c002764b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002764e:	f7 d0                	not    eax
c0027650:	84 c0                	test   al,al
c0027652:	0f 84 4f 01 00 00    	je     c00277a7 <__addsf3+0x2f9>
c0027658:	81 cb 00 00 00 80    	or     ebx,0x80000000
c002765e:	83 f9 1f             	cmp    ecx,0x1f
c0027661:	0f 8f 40 01 00 00    	jg     c00277a7 <__addsf3+0x2f9>
c0027667:	89 de                	mov    esi,ebx
c0027669:	d3 ee                	shr    esi,cl
c002766b:	b8 20 00 00 00       	mov    eax,0x20
c0027670:	29 c8                	sub    eax,ecx
c0027672:	89 c1                	mov    ecx,eax
c0027674:	d3 e3                	shl    ebx,cl
c0027676:	31 c0                	xor    eax,eax
c0027678:	85 db                	test   ebx,ebx
c002767a:	0f 95 c0             	setne  al
c002767d:	09 f0                	or     eax,esi
c002767f:	29 c2                	sub    edx,eax
c0027681:	89 d0                	mov    eax,edx
c0027683:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027686:	e9 af 00 00 00       	jmp    c002773a <__addsf3+0x28c>
c002768b:	74 5c                	je     c00276e9 <__addsf3+0x23b>
c002768d:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0027690:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027693:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027697:	75 14                	jne    c00276ad <__addsf3+0x1ff>
c0027699:	85 d2                	test   edx,edx
c002769b:	0f 84 06 01 00 00    	je     c00277a7 <__addsf3+0x2f9>
c00276a1:	48                   	dec    eax
c00276a2:	75 1b                	jne    c00276bf <__addsf3+0x211>
c00276a4:	89 d8                	mov    eax,ebx
c00276a6:	29 d0                	sub    eax,edx
c00276a8:	e9 8d 00 00 00       	jmp    c002773a <__addsf3+0x28c>
c00276ad:	89 f1                	mov    ecx,esi
c00276af:	f7 d1                	not    ecx
c00276b1:	84 c9                	test   cl,cl
c00276b3:	0f 84 ee 00 00 00    	je     c00277a7 <__addsf3+0x2f9>
c00276b9:	81 ca 00 00 00 80    	or     edx,0x80000000
c00276bf:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00276c2:	83 f8 1f             	cmp    eax,0x1f
c00276c5:	0f 8f dc 00 00 00    	jg     c00277a7 <__addsf3+0x2f9>
c00276cb:	89 d7                	mov    edi,edx
c00276cd:	88 c1                	mov    cl,al
c00276cf:	d3 ef                	shr    edi,cl
c00276d1:	b9 20 00 00 00       	mov    ecx,0x20
c00276d6:	29 c1                	sub    ecx,eax
c00276d8:	d3 e2                	shl    edx,cl
c00276da:	31 c0                	xor    eax,eax
c00276dc:	85 d2                	test   edx,edx
c00276de:	0f 95 c0             	setne  al
c00276e1:	09 f8                	or     eax,edi
c00276e3:	29 c3                	sub    ebx,eax
c00276e5:	89 d8                	mov    eax,ebx
c00276e7:	eb 51                	jmp    c002773a <__addsf3+0x28c>
c00276e9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00276ec:	40                   	inc    eax
c00276ed:	a8 fe                	test   al,0xfe
c00276ef:	75 3d                	jne    c002772e <__addsf3+0x280>
c00276f1:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00276f5:	0f 85 a7 00 00 00    	jne    c00277a2 <__addsf3+0x2f4>
c00276fb:	85 d2                	test   edx,edx
c00276fd:	75 12                	jne    c0027711 <__addsf3+0x263>
c00276ff:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027702:	85 db                	test   ebx,ebx
c0027704:	0f 85 9d 00 00 00    	jne    c00277a7 <__addsf3+0x2f9>
c002770a:	31 ff                	xor    edi,edi
c002770c:	e9 96 00 00 00       	jmp    c00277a7 <__addsf3+0x2f9>
c0027711:	85 db                	test   ebx,ebx
c0027713:	0f 84 8e 00 00 00    	je     c00277a7 <__addsf3+0x2f9>
c0027719:	89 d0                	mov    eax,edx
c002771b:	29 d8                	sub    eax,ebx
c002771d:	79 06                	jns    c0027725 <__addsf3+0x277>
c002771f:	89 d8                	mov    eax,ebx
c0027721:	29 d0                	sub    eax,edx
c0027723:	eb 5a                	jmp    c002777f <__addsf3+0x2d1>
c0027725:	bf 00 00 00 00       	mov    edi,0x0
c002772a:	74 7b                	je     c00277a7 <__addsf3+0x2f9>
c002772c:	eb 4a                	jmp    c0027778 <__addsf3+0x2ca>
c002772e:	89 d0                	mov    eax,edx
c0027730:	29 d8                	sub    eax,ebx
c0027732:	79 12                	jns    c0027746 <__addsf3+0x298>
c0027734:	89 d8                	mov    eax,ebx
c0027736:	29 d0                	sub    eax,edx
c0027738:	eb 09                	jmp    c0027743 <__addsf3+0x295>
c002773a:	85 c0                	test   eax,eax
c002773c:	79 41                	jns    c002777f <__addsf3+0x2d1>
c002773e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027743:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0027746:	31 f6                	xor    esi,esi
c0027748:	85 c0                	test   eax,eax
c002774a:	74 33                	je     c002777f <__addsf3+0x2d1>
c002774c:	0f bd c8             	bsr    ecx,eax
c002774f:	83 f1 1f             	xor    ecx,0x1f
c0027752:	d3 e0                	shl    eax,cl
c0027754:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0027758:	39 ca                	cmp    edx,ecx
c002775a:	7f 10                	jg     c002776c <__addsf3+0x2be>
c002775c:	29 d1                	sub    ecx,edx
c002775e:	41                   	inc    ecx
c002775f:	d3 e8                	shr    eax,cl
c0027761:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027764:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c002776a:	eb 13                	jmp    c002777f <__addsf3+0x2d1>
c002776c:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002776f:	29 ce                	sub    esi,ecx
c0027771:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027776:	eb 07                	jmp    c002777f <__addsf3+0x2d1>
c0027778:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002777b:	eb 02                	jmp    c002777f <__addsf3+0x2d1>
c002777d:	31 c0                	xor    eax,eax
c002777f:	89 c2                	mov    edx,eax
c0027781:	c1 ea 08             	shr    edx,0x8
c0027784:	a8 7f                	test   al,0x7f
c0027786:	0f 95 c1             	setne  cl
c0027789:	09 d1                	or     ecx,edx
c002778b:	83 e1 01             	and    ecx,0x1
c002778e:	c1 e8 07             	shr    eax,0x7
c0027791:	21 c8                	and    eax,ecx
c0027793:	c1 e6 17             	shl    esi,0x17
c0027796:	09 d6                	or     esi,edx
c0027798:	8d 3c 30             	lea    edi,[eax+esi*1]
c002779b:	eb 0a                	jmp    c00277a7 <__addsf3+0x2f9>
c002779d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00277a0:	eb 05                	jmp    c00277a7 <__addsf3+0x2f9>
c00277a2:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c00277a7:	89 f8                	mov    eax,edi
c00277a9:	5a                   	pop    edx
c00277aa:	59                   	pop    ecx
c00277ab:	5b                   	pop    ebx
c00277ac:	5e                   	pop    esi
c00277ad:	5f                   	pop    edi
c00277ae:	5d                   	pop    ebp
c00277af:	c3                   	ret    

c00277b0 <__subsf3>:
c00277b0:	55                   	push   ebp
c00277b1:	89 e5                	mov    ebp,esp
c00277b3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00277b6:	05 00 00 00 80       	add    eax,0x80000000
c00277bb:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00277be:	5d                   	pop    ebp
c00277bf:	e9 ea fc ff ff       	jmp    c00274ae <__addsf3>

c00277c4 <__negsf2>:
c00277c4:	55                   	push   ebp
c00277c5:	89 e5                	mov    ebp,esp
c00277c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00277ca:	05 00 00 00 80       	add    eax,0x80000000
c00277cf:	5d                   	pop    ebp
c00277d0:	c3                   	ret    

c00277d1 <__mulsf3>:
c00277d1:	55                   	push   ebp
c00277d2:	89 e5                	mov    ebp,esp
c00277d4:	57                   	push   edi
c00277d5:	56                   	push   esi
c00277d6:	53                   	push   ebx
c00277d7:	83 ec 1c             	sub    esp,0x1c
c00277da:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00277dd:	89 f0                	mov    eax,esi
c00277df:	89 f1                	mov    ecx,esi
c00277e1:	c1 f9 17             	sar    ecx,0x17
c00277e4:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00277e7:	c1 e0 08             	shl    eax,0x8
c00277ea:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00277ef:	89 c1                	mov    ecx,eax
c00277f1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00277f4:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00277f7:	89 c7                	mov    edi,eax
c00277f9:	c1 ff 17             	sar    edi,0x17
c00277fc:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027800:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027803:	89 f8                	mov    eax,edi
c0027805:	0f b6 c0             	movzx  eax,al
c0027808:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c002780b:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c002780f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027812:	42                   	inc    edx
c0027813:	80 e2 fe             	and    dl,0xfe
c0027816:	75 7b                	jne    c0027893 <__mulsf3+0xc2>
c0027818:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002781c:	74 54                	je     c0027872 <__mulsf3+0xa1>
c002781e:	85 c9                	test   ecx,ecx
c0027820:	0f 85 64 01 00 00    	jne    c002798a <__mulsf3+0x1b9>
c0027826:	8d 57 01             	lea    edx,[edi+0x1]
c0027829:	80 e2 fe             	and    dl,0xfe
c002782c:	75 1f                	jne    c002784d <__mulsf3+0x7c>
c002782e:	85 c0                	test   eax,eax
c0027830:	b8 00 00 00 00       	mov    eax,0x0
c0027835:	74 29                	je     c0027860 <__mulsf3+0x8f>
c0027837:	53                   	push   ebx
c0027838:	53                   	push   ebx
c0027839:	50                   	push   eax
c002783a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002783d:	e8 96 05 00 00       	call   c0027dd8 <__nesf2>
c0027842:	83 c4 10             	add    esp,0x10
c0027845:	85 c0                	test   eax,eax
c0027847:	0f 85 3a 01 00 00    	jne    c0027987 <__mulsf3+0x1b6>
c002784d:	85 ff                	test   edi,edi
c002784f:	0f 89 35 01 00 00    	jns    c002798a <__mulsf3+0x1b9>
c0027855:	81 c6 00 00 00 80    	add    esi,0x80000000
c002785b:	e9 2a 01 00 00       	jmp    c002798a <__mulsf3+0x1b9>
c0027860:	51                   	push   ecx
c0027861:	51                   	push   ecx
c0027862:	50                   	push   eax
c0027863:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027866:	e8 6d 05 00 00       	call   c0027dd8 <__nesf2>
c002786b:	83 c4 10             	add    esp,0x10
c002786e:	85 c0                	test   eax,eax
c0027870:	eb 15                	jmp    c0027887 <__mulsf3+0xb6>
c0027872:	85 c9                	test   ecx,ecx
c0027874:	74 0b                	je     c0027881 <__mulsf3+0xb0>
c0027876:	8d 53 ff             	lea    edx,[ebx-0x1]
c0027879:	01 c9                	add    ecx,ecx
c002787b:	78 16                	js     c0027893 <__mulsf3+0xc2>
c002787d:	89 d3                	mov    ebx,edx
c002787f:	eb f5                	jmp    c0027876 <__mulsf3+0xa5>
c0027881:	89 f8                	mov    eax,edi
c0027883:	f7 d0                	not    eax
c0027885:	84 c0                	test   al,al
c0027887:	75 c4                	jne    c002784d <__mulsf3+0x7c>
c0027889:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c002788e:	e9 f7 00 00 00       	jmp    c002798a <__mulsf3+0x1b9>
c0027893:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027896:	c1 e6 08             	shl    esi,0x8
c0027899:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c002789f:	8d 57 01             	lea    edx,[edi+0x1]
c00278a2:	80 e2 fe             	and    dl,0xfe
c00278a5:	75 63                	jne    c002790a <__mulsf3+0x139>
c00278a7:	85 c0                	test   eax,eax
c00278a9:	74 2f                	je     c00278da <__mulsf3+0x109>
c00278ab:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00278af:	0f 89 d2 00 00 00    	jns    c0027987 <__mulsf3+0x1b6>
c00278b5:	52                   	push   edx
c00278b6:	52                   	push   edx
c00278b7:	6a 00                	push   0x0
c00278b9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00278bc:	e8 dc 04 00 00       	call   c0027d9d <__eqsf2>
c00278c1:	83 c4 10             	add    esp,0x10
c00278c4:	85 c0                	test   eax,eax
c00278c6:	0f 85 bb 00 00 00    	jne    c0027987 <__mulsf3+0x1b6>
c00278cc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00278cf:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c00278d5:	e9 b0 00 00 00       	jmp    c002798a <__mulsf3+0x1b9>
c00278da:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00278dd:	50                   	push   eax
c00278de:	50                   	push   eax
c00278df:	6a 00                	push   0x0
c00278e1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00278e4:	e8 b4 04 00 00       	call   c0027d9d <__eqsf2>
c00278e9:	83 c4 10             	add    esp,0x10
c00278ec:	85 c0                	test   eax,eax
c00278ee:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00278f1:	75 0c                	jne    c00278ff <__mulsf3+0x12e>
c00278f3:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00278f7:	0f 89 8a 00 00 00    	jns    c0027987 <__mulsf3+0x1b6>
c00278fd:	eb cd                	jmp    c00278cc <__mulsf3+0xfb>
c00278ff:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027902:	01 f6                	add    esi,esi
c0027904:	78 04                	js     c002790a <__mulsf3+0x139>
c0027906:	89 c3                	mov    ebx,eax
c0027908:	eb f5                	jmp    c00278ff <__mulsf3+0x12e>
c002790a:	89 c8                	mov    eax,ecx
c002790c:	0d 00 00 00 80       	or     eax,0x80000000
c0027911:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027917:	f7 e6                	mul    esi
c0027919:	85 c0                	test   eax,eax
c002791b:	0f 95 c0             	setne  al
c002791e:	0f b6 c0             	movzx  eax,al
c0027921:	09 c2                	or     edx,eax
c0027923:	78 03                	js     c0027928 <__mulsf3+0x157>
c0027925:	01 d2                	add    edx,edx
c0027927:	4b                   	dec    ebx
c0027928:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c002792e:	7f 22                	jg     c0027952 <__mulsf3+0x181>
c0027930:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027936:	85 db                	test   ebx,ebx
c0027938:	7f 23                	jg     c002795d <__mulsf3+0x18c>
c002793a:	83 fb e9             	cmp    ebx,0xffffffe9
c002793d:	7c 1a                	jl     c0027959 <__mulsf3+0x188>
c002793f:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027945:	b9 01 00 00 00       	mov    ecx,0x1
c002794a:	29 d9                	sub    ecx,ebx
c002794c:	d3 ea                	shr    edx,cl
c002794e:	31 db                	xor    ebx,ebx
c0027950:	eb 0b                	jmp    c002795d <__mulsf3+0x18c>
c0027952:	bb ff 00 00 00       	mov    ebx,0xff
c0027957:	eb 02                	jmp    c002795b <__mulsf3+0x18a>
c0027959:	31 db                	xor    ebx,ebx
c002795b:	31 d2                	xor    edx,edx
c002795d:	89 d0                	mov    eax,edx
c002795f:	c1 e8 08             	shr    eax,0x8
c0027962:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027965:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c002796b:	09 fb                	or     ebx,edi
c002796d:	c1 e3 17             	shl    ebx,0x17
c0027970:	09 c3                	or     ebx,eax
c0027972:	f6 c2 7f             	test   dl,0x7f
c0027975:	0f 95 c1             	setne  cl
c0027978:	09 c8                	or     eax,ecx
c002797a:	83 e0 01             	and    eax,0x1
c002797d:	c1 ea 07             	shr    edx,0x7
c0027980:	21 c2                	and    edx,eax
c0027982:	8d 34 13             	lea    esi,[ebx+edx*1]
c0027985:	eb 03                	jmp    c002798a <__mulsf3+0x1b9>
c0027987:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c002798a:	89 f0                	mov    eax,esi
c002798c:	8d 65 f4             	lea    esp,[ebp-0xc]
c002798f:	5b                   	pop    ebx
c0027990:	5e                   	pop    esi
c0027991:	5f                   	pop    edi
c0027992:	5d                   	pop    ebp
c0027993:	c3                   	ret    

c0027994 <__divsf3>:
c0027994:	55                   	push   ebp
c0027995:	89 e5                	mov    ebp,esp
c0027997:	57                   	push   edi
c0027998:	56                   	push   esi
c0027999:	53                   	push   ebx
c002799a:	83 ec 1c             	sub    esp,0x1c
c002799d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00279a0:	89 d8                	mov    eax,ebx
c00279a2:	89 d9                	mov    ecx,ebx
c00279a4:	c1 f9 17             	sar    ecx,0x17
c00279a7:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00279aa:	c1 e0 08             	shl    eax,0x8
c00279ad:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00279b2:	89 c1                	mov    ecx,eax
c00279b4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00279b7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00279ba:	89 c7                	mov    edi,eax
c00279bc:	c1 ff 17             	sar    edi,0x17
c00279bf:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00279c3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00279c6:	89 f8                	mov    eax,edi
c00279c8:	0f b6 c0             	movzx  eax,al
c00279cb:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00279ce:	29 c6                	sub    esi,eax
c00279d0:	83 c6 7f             	add    esi,0x7f
c00279d3:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00279d6:	42                   	inc    edx
c00279d7:	80 e2 fe             	and    dl,0xfe
c00279da:	0f 85 9c 00 00 00    	jne    c0027a7c <__divsf3+0xe8>
c00279e0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00279e4:	74 33                	je     c0027a19 <__divsf3+0x85>
c00279e6:	85 c9                	test   ecx,ecx
c00279e8:	0f 85 c7 01 00 00    	jne    c0027bb5 <__divsf3+0x221>
c00279ee:	8d 57 01             	lea    edx,[edi+0x1]
c00279f1:	80 e2 fe             	and    dl,0xfe
c00279f4:	75 2f                	jne    c0027a25 <__divsf3+0x91>
c00279f6:	85 c0                	test   eax,eax
c00279f8:	74 2b                	je     c0027a25 <__divsf3+0x91>
c00279fa:	51                   	push   ecx
c00279fb:	51                   	push   ecx
c00279fc:	6a 00                	push   0x0
c00279fe:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027a01:	e8 d2 03 00 00       	call   c0027dd8 <__nesf2>
c0027a06:	83 c4 10             	add    esp,0x10
c0027a09:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027a0c:	85 c0                	test   eax,eax
c0027a0e:	0f 85 a1 01 00 00    	jne    c0027bb5 <__divsf3+0x221>
c0027a14:	e9 92 01 00 00       	jmp    c0027bab <__divsf3+0x217>
c0027a19:	85 c9                	test   ecx,ecx
c0027a1b:	75 1b                	jne    c0027a38 <__divsf3+0xa4>
c0027a1d:	8d 57 01             	lea    edx,[edi+0x1]
c0027a20:	80 e2 fe             	and    dl,0xfe
c0027a23:	74 1e                	je     c0027a43 <__divsf3+0xaf>
c0027a25:	85 ff                	test   edi,edi
c0027a27:	0f 89 88 01 00 00    	jns    c0027bb5 <__divsf3+0x221>
c0027a2d:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0027a33:	e9 7d 01 00 00       	jmp    c0027bb5 <__divsf3+0x221>
c0027a38:	8d 56 ff             	lea    edx,[esi-0x1]
c0027a3b:	01 c9                	add    ecx,ecx
c0027a3d:	78 3d                	js     c0027a7c <__divsf3+0xe8>
c0027a3f:	89 d6                	mov    esi,edx
c0027a41:	eb f5                	jmp    c0027a38 <__divsf3+0xa4>
c0027a43:	85 c0                	test   eax,eax
c0027a45:	b8 00 00 00 00       	mov    eax,0x0
c0027a4a:	74 18                	je     c0027a64 <__divsf3+0xd0>
c0027a4c:	52                   	push   edx
c0027a4d:	52                   	push   edx
c0027a4e:	50                   	push   eax
c0027a4f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027a52:	e8 81 03 00 00       	call   c0027dd8 <__nesf2>
c0027a57:	83 c4 10             	add    esp,0x10
c0027a5a:	85 c0                	test   eax,eax
c0027a5c:	0f 85 50 01 00 00    	jne    c0027bb2 <__divsf3+0x21e>
c0027a62:	eb c1                	jmp    c0027a25 <__divsf3+0x91>
c0027a64:	56                   	push   esi
c0027a65:	56                   	push   esi
c0027a66:	50                   	push   eax
c0027a67:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027a6a:	e8 69 03 00 00       	call   c0027dd8 <__nesf2>
c0027a6f:	83 c4 10             	add    esp,0x10
c0027a72:	85 c0                	test   eax,eax
c0027a74:	0f 84 31 01 00 00    	je     c0027bab <__divsf3+0x217>
c0027a7a:	eb a9                	jmp    c0027a25 <__divsf3+0x91>
c0027a7c:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0027a7f:	c1 e3 08             	shl    ebx,0x8
c0027a82:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027a88:	8d 57 01             	lea    edx,[edi+0x1]
c0027a8b:	80 e2 fe             	and    dl,0xfe
c0027a8e:	75 71                	jne    c0027b01 <__divsf3+0x16d>
c0027a90:	85 c0                	test   eax,eax
c0027a92:	ba 00 00 00 00       	mov    edx,0x0
c0027a97:	74 2f                	je     c0027ac8 <__divsf3+0x134>
c0027a99:	51                   	push   ecx
c0027a9a:	51                   	push   ecx
c0027a9b:	52                   	push   edx
c0027a9c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027a9f:	e8 f9 02 00 00       	call   c0027d9d <__eqsf2>
c0027aa4:	83 c4 10             	add    esp,0x10
c0027aa7:	85 c0                	test   eax,eax
c0027aa9:	0f 85 03 01 00 00    	jne    c0027bb2 <__divsf3+0x21e>
c0027aaf:	31 d2                	xor    edx,edx
c0027ab1:	89 d3                	mov    ebx,edx
c0027ab3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ab6:	31 f8                	xor    eax,edi
c0027ab8:	0f 89 f7 00 00 00    	jns    c0027bb5 <__divsf3+0x221>
c0027abe:	bb 00 00 00 80       	mov    ebx,0x80000000
c0027ac3:	e9 ed 00 00 00       	jmp    c0027bb5 <__divsf3+0x221>
c0027ac8:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027acb:	50                   	push   eax
c0027acc:	50                   	push   eax
c0027acd:	52                   	push   edx
c0027ace:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027ad1:	e8 c7 02 00 00       	call   c0027d9d <__eqsf2>
c0027ad6:	83 c4 10             	add    esp,0x10
c0027ad9:	85 c0                	test   eax,eax
c0027adb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027ade:	75 16                	jne    c0027af6 <__divsf3+0x162>
c0027ae0:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027ae3:	31 fb                	xor    ebx,edi
c0027ae5:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0027aeb:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027af1:	e9 bf 00 00 00       	jmp    c0027bb5 <__divsf3+0x221>
c0027af6:	8d 46 01             	lea    eax,[esi+0x1]
c0027af9:	01 db                	add    ebx,ebx
c0027afb:	78 04                	js     c0027b01 <__divsf3+0x16d>
c0027afd:	89 c6                	mov    esi,eax
c0027aff:	eb f5                	jmp    c0027af6 <__divsf3+0x162>
c0027b01:	89 c8                	mov    eax,ecx
c0027b03:	0d 00 00 00 80       	or     eax,0x80000000
c0027b08:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027b0e:	31 d2                	xor    edx,edx
c0027b10:	39 d8                	cmp    eax,ebx
c0027b12:	72 07                	jb     c0027b1b <__divsf3+0x187>
c0027b14:	29 d8                	sub    eax,ebx
c0027b16:	ba 01 00 00 00       	mov    edx,0x1
c0027b1b:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0027b22:	01 d2                	add    edx,edx
c0027b24:	89 c1                	mov    ecx,eax
c0027b26:	01 c0                	add    eax,eax
c0027b28:	85 c9                	test   ecx,ecx
c0027b2a:	78 04                	js     c0027b30 <__divsf3+0x19c>
c0027b2c:	39 c3                	cmp    ebx,eax
c0027b2e:	77 05                	ja     c0027b35 <__divsf3+0x1a1>
c0027b30:	29 d8                	sub    eax,ebx
c0027b32:	83 ca 01             	or     edx,0x1
c0027b35:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027b38:	75 e8                	jne    c0027b22 <__divsf3+0x18e>
c0027b3a:	85 c0                	test   eax,eax
c0027b3c:	0f 95 c0             	setne  al
c0027b3f:	0f b6 c0             	movzx  eax,al
c0027b42:	c1 e2 06             	shl    edx,0x6
c0027b45:	09 c2                	or     edx,eax
c0027b47:	78 03                	js     c0027b4c <__divsf3+0x1b8>
c0027b49:	01 d2                	add    edx,edx
c0027b4b:	4e                   	dec    esi
c0027b4c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0027b52:	7f 22                	jg     c0027b76 <__divsf3+0x1e2>
c0027b54:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027b5a:	85 f6                	test   esi,esi
c0027b5c:	7f 23                	jg     c0027b81 <__divsf3+0x1ed>
c0027b5e:	83 fe e9             	cmp    esi,0xffffffe9
c0027b61:	7c 1a                	jl     c0027b7d <__divsf3+0x1e9>
c0027b63:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027b69:	b9 01 00 00 00       	mov    ecx,0x1
c0027b6e:	29 f1                	sub    ecx,esi
c0027b70:	d3 ea                	shr    edx,cl
c0027b72:	31 f6                	xor    esi,esi
c0027b74:	eb 0b                	jmp    c0027b81 <__divsf3+0x1ed>
c0027b76:	be ff 00 00 00       	mov    esi,0xff
c0027b7b:	eb 02                	jmp    c0027b7f <__divsf3+0x1eb>
c0027b7d:	31 f6                	xor    esi,esi
c0027b7f:	31 d2                	xor    edx,edx
c0027b81:	89 d0                	mov    eax,edx
c0027b83:	c1 e8 08             	shr    eax,0x8
c0027b86:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027b89:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027b8f:	09 fe                	or     esi,edi
c0027b91:	c1 e6 17             	shl    esi,0x17
c0027b94:	09 c6                	or     esi,eax
c0027b96:	f6 c2 7f             	test   dl,0x7f
c0027b99:	0f 95 c1             	setne  cl
c0027b9c:	09 c8                	or     eax,ecx
c0027b9e:	83 e0 01             	and    eax,0x1
c0027ba1:	c1 ea 07             	shr    edx,0x7
c0027ba4:	21 c2                	and    edx,eax
c0027ba6:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027ba9:	eb 0a                	jmp    c0027bb5 <__divsf3+0x221>
c0027bab:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027bb0:	eb 03                	jmp    c0027bb5 <__divsf3+0x221>
c0027bb2:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027bb5:	89 d8                	mov    eax,ebx
c0027bb7:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027bba:	5b                   	pop    ebx
c0027bbb:	5e                   	pop    esi
c0027bbc:	5f                   	pop    edi
c0027bbd:	5d                   	pop    ebp
c0027bbe:	c3                   	ret    

c0027bbf <__floatsisf>:
c0027bbf:	55                   	push   ebp
c0027bc0:	89 e5                	mov    ebp,esp
c0027bc2:	53                   	push   ebx
c0027bc3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027bc6:	85 d2                	test   edx,edx
c0027bc8:	7e 2b                	jle    c0027bf5 <__floatsisf+0x36>
c0027bca:	0f bd ca             	bsr    ecx,edx
c0027bcd:	83 f1 1f             	xor    ecx,0x1f
c0027bd0:	d3 e2                	shl    edx,cl
c0027bd2:	89 d0                	mov    eax,edx
c0027bd4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027bd9:	89 c3                	mov    ebx,eax
c0027bdb:	c1 eb 08             	shr    ebx,0x8
c0027bde:	80 e2 7f             	and    dl,0x7f
c0027be1:	0f 95 c2             	setne  dl
c0027be4:	09 da                	or     edx,ebx
c0027be6:	83 e2 01             	and    edx,0x1
c0027be9:	c1 e8 07             	shr    eax,0x7
c0027bec:	21 c2                	and    edx,eax
c0027bee:	b8 9e 00 00 00       	mov    eax,0x9e
c0027bf3:	eb 32                	jmp    c0027c27 <__floatsisf+0x68>
c0027bf5:	b8 00 00 00 00       	mov    eax,0x0
c0027bfa:	74 34                	je     c0027c30 <__floatsisf+0x71>
c0027bfc:	f7 da                	neg    edx
c0027bfe:	0f bd ca             	bsr    ecx,edx
c0027c01:	83 f1 1f             	xor    ecx,0x1f
c0027c04:	d3 e2                	shl    edx,cl
c0027c06:	89 d0                	mov    eax,edx
c0027c08:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027c0d:	89 c3                	mov    ebx,eax
c0027c0f:	c1 eb 08             	shr    ebx,0x8
c0027c12:	80 e2 7f             	and    dl,0x7f
c0027c15:	0f 95 c2             	setne  dl
c0027c18:	09 da                	or     edx,ebx
c0027c1a:	83 e2 01             	and    edx,0x1
c0027c1d:	c1 e8 07             	shr    eax,0x7
c0027c20:	21 c2                	and    edx,eax
c0027c22:	b8 9e 01 00 00       	mov    eax,0x19e
c0027c27:	29 c8                	sub    eax,ecx
c0027c29:	c1 e0 17             	shl    eax,0x17
c0027c2c:	09 d8                	or     eax,ebx
c0027c2e:	01 d0                	add    eax,edx
c0027c30:	5b                   	pop    ebx
c0027c31:	5d                   	pop    ebp
c0027c32:	c3                   	ret    

c0027c33 <__floatunsisf>:
c0027c33:	55                   	push   ebp
c0027c34:	89 e5                	mov    ebp,esp
c0027c36:	53                   	push   ebx
c0027c37:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027c3a:	31 c0                	xor    eax,eax
c0027c3c:	85 d2                	test   edx,edx
c0027c3e:	74 32                	je     c0027c72 <__floatunsisf+0x3f>
c0027c40:	0f bd ca             	bsr    ecx,edx
c0027c43:	83 f1 1f             	xor    ecx,0x1f
c0027c46:	d3 e2                	shl    edx,cl
c0027c48:	89 d0                	mov    eax,edx
c0027c4a:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027c4f:	89 c3                	mov    ebx,eax
c0027c51:	c1 eb 08             	shr    ebx,0x8
c0027c54:	80 e2 7f             	and    dl,0x7f
c0027c57:	0f 95 c2             	setne  dl
c0027c5a:	09 da                	or     edx,ebx
c0027c5c:	83 e2 01             	and    edx,0x1
c0027c5f:	c1 e8 07             	shr    eax,0x7
c0027c62:	21 c2                	and    edx,eax
c0027c64:	b8 9e 00 00 00       	mov    eax,0x9e
c0027c69:	29 c8                	sub    eax,ecx
c0027c6b:	c1 e0 17             	shl    eax,0x17
c0027c6e:	09 d8                	or     eax,ebx
c0027c70:	01 d0                	add    eax,edx
c0027c72:	5b                   	pop    ebx
c0027c73:	5d                   	pop    ebp
c0027c74:	c3                   	ret    

c0027c75 <__fixsfsi>:
c0027c75:	55                   	push   ebp
c0027c76:	89 e5                	mov    ebp,esp
c0027c78:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027c7b:	89 d1                	mov    ecx,edx
c0027c7d:	c1 e1 08             	shl    ecx,0x8
c0027c80:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0027c86:	c1 fa 17             	sar    edx,0x17
c0027c89:	78 1c                	js     c0027ca7 <__fixsfsi+0x32>
c0027c8b:	83 ea 7f             	sub    edx,0x7f
c0027c8e:	31 c0                	xor    eax,eax
c0027c90:	83 fa 1e             	cmp    edx,0x1e
c0027c93:	77 40                	ja     c0027cd5 <__fixsfsi+0x60>
c0027c95:	89 c8                	mov    eax,ecx
c0027c97:	0d 00 00 00 80       	or     eax,0x80000000
c0027c9c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027ca1:	29 d1                	sub    ecx,edx
c0027ca3:	d3 e8                	shr    eax,cl
c0027ca5:	eb 2e                	jmp    c0027cd5 <__fixsfsi+0x60>
c0027ca7:	31 c0                	xor    eax,eax
c0027ca9:	81 c2 81 00 00 00    	add    edx,0x81
c0027caf:	78 24                	js     c0027cd5 <__fixsfsi+0x60>
c0027cb1:	83 fa 1e             	cmp    edx,0x1e
c0027cb4:	7e 09                	jle    c0027cbf <__fixsfsi+0x4a>
c0027cb6:	83 fa 1f             	cmp    edx,0x1f
c0027cb9:	75 18                	jne    c0027cd3 <__fixsfsi+0x5e>
c0027cbb:	85 c9                	test   ecx,ecx
c0027cbd:	75 14                	jne    c0027cd3 <__fixsfsi+0x5e>
c0027cbf:	89 c8                	mov    eax,ecx
c0027cc1:	0d 00 00 00 80       	or     eax,0x80000000
c0027cc6:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027ccb:	29 d1                	sub    ecx,edx
c0027ccd:	d3 e8                	shr    eax,cl
c0027ccf:	f7 d8                	neg    eax
c0027cd1:	eb 02                	jmp    c0027cd5 <__fixsfsi+0x60>
c0027cd3:	31 c0                	xor    eax,eax
c0027cd5:	5d                   	pop    ebp
c0027cd6:	c3                   	ret    

c0027cd7 <__fixunssfsi>:
c0027cd7:	55                   	push   ebp
c0027cd8:	89 e5                	mov    ebp,esp
c0027cda:	53                   	push   ebx
c0027cdb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027cde:	89 d3                	mov    ebx,edx
c0027ce0:	c1 fb 17             	sar    ebx,0x17
c0027ce3:	83 eb 7f             	sub    ebx,0x7f
c0027ce6:	31 c0                	xor    eax,eax
c0027ce8:	83 fb 1f             	cmp    ebx,0x1f
c0027ceb:	77 18                	ja     c0027d05 <__fixunssfsi+0x2e>
c0027ced:	89 d0                	mov    eax,edx
c0027cef:	c1 e0 08             	shl    eax,0x8
c0027cf2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027cf7:	0d 00 00 00 80       	or     eax,0x80000000
c0027cfc:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027d01:	29 d9                	sub    ecx,ebx
c0027d03:	d3 e8                	shr    eax,cl
c0027d05:	5b                   	pop    ebx
c0027d06:	5d                   	pop    ebp
c0027d07:	c3                   	ret    

c0027d08 <__cmpsf2>:
c0027d08:	55                   	push   ebp
c0027d09:	89 e5                	mov    ebp,esp
c0027d0b:	57                   	push   edi
c0027d0c:	56                   	push   esi
c0027d0d:	53                   	push   ebx
c0027d0e:	83 ec 24             	sub    esp,0x24
c0027d11:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027d14:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027d17:	e8 4f 10 00 00       	call   c0028d6b <__truncdfsf2>
c0027d1c:	5a                   	pop    edx
c0027d1d:	59                   	pop    ecx
c0027d1e:	89 c3                	mov    ebx,eax
c0027d20:	c1 e8 17             	shr    eax,0x17
c0027d23:	0f b6 f0             	movzx  esi,al
c0027d26:	89 d8                	mov    eax,ebx
c0027d28:	c1 e8 1f             	shr    eax,0x1f
c0027d2b:	31 c6                	xor    esi,eax
c0027d2d:	c1 e3 08             	shl    ebx,0x8
c0027d30:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027d33:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027d36:	e8 30 10 00 00       	call   c0028d6b <__truncdfsf2>
c0027d3b:	83 c4 10             	add    esp,0x10
c0027d3e:	89 c1                	mov    ecx,eax
c0027d40:	c1 e9 17             	shr    ecx,0x17
c0027d43:	0f b6 c9             	movzx  ecx,cl
c0027d46:	89 c7                	mov    edi,eax
c0027d48:	c1 ef 1f             	shr    edi,0x1f
c0027d4b:	89 ca                	mov    edx,ecx
c0027d4d:	31 fa                	xor    edx,edi
c0027d4f:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027d52:	c1 e0 08             	shl    eax,0x8
c0027d55:	89 c2                	mov    edx,eax
c0027d57:	89 d8                	mov    eax,ebx
c0027d59:	09 d0                	or     eax,edx
c0027d5b:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027d60:	09 f0                	or     eax,esi
c0027d62:	75 08                	jne    c0027d6c <__cmpsf2+0x64>
c0027d64:	31 c0                	xor    eax,eax
c0027d66:	39 f9                	cmp    ecx,edi
c0027d68:	75 0c                	jne    c0027d76 <__cmpsf2+0x6e>
c0027d6a:	eb 29                	jmp    c0027d95 <__cmpsf2+0x8d>
c0027d6c:	b8 01 00 00 00       	mov    eax,0x1
c0027d71:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027d74:	7f 1f                	jg     c0027d95 <__cmpsf2+0x8d>
c0027d76:	83 c8 ff             	or     eax,0xffffffff
c0027d79:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027d7c:	7c 17                	jl     c0027d95 <__cmpsf2+0x8d>
c0027d7e:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027d84:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027d8a:	b8 01 00 00 00       	mov    eax,0x1
c0027d8f:	39 d3                	cmp    ebx,edx
c0027d91:	77 02                	ja     c0027d95 <__cmpsf2+0x8d>
c0027d93:	19 c0                	sbb    eax,eax
c0027d95:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027d98:	5b                   	pop    ebx
c0027d99:	5e                   	pop    esi
c0027d9a:	5f                   	pop    edi
c0027d9b:	5d                   	pop    ebp
c0027d9c:	c3                   	ret    

c0027d9d <__eqsf2>:
c0027d9d:	55                   	push   ebp
c0027d9e:	89 e5                	mov    ebp,esp
c0027da0:	83 ec 24             	sub    esp,0x24
c0027da3:	6a 01                	push   0x1
c0027da5:	83 ec 0c             	sub    esp,0xc
c0027da8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027dab:	e8 df 10 00 00       	call   c0028e8f <__extendsfdf2>
c0027db0:	83 c4 10             	add    esp,0x10
c0027db3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027db6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027db9:	52                   	push   edx
c0027dba:	50                   	push   eax
c0027dbb:	50                   	push   eax
c0027dbc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027dbf:	e8 cb 10 00 00       	call   c0028e8f <__extendsfdf2>
c0027dc4:	59                   	pop    ecx
c0027dc5:	59                   	pop    ecx
c0027dc6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027dc9:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027dcc:	52                   	push   edx
c0027dcd:	50                   	push   eax
c0027dce:	e8 35 ff ff ff       	call   c0027d08 <__cmpsf2>
c0027dd3:	83 c4 20             	add    esp,0x20
c0027dd6:	c9                   	leave  
c0027dd7:	c3                   	ret    

c0027dd8 <__nesf2>:
c0027dd8:	eb c3                	jmp    c0027d9d <__eqsf2>

c0027dda <__gtsf2>:
c0027dda:	55                   	push   ebp
c0027ddb:	89 e5                	mov    ebp,esp
c0027ddd:	83 ec 24             	sub    esp,0x24
c0027de0:	6a ff                	push   0xffffffff
c0027de2:	83 ec 0c             	sub    esp,0xc
c0027de5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027de8:	e8 a2 10 00 00       	call   c0028e8f <__extendsfdf2>
c0027ded:	83 c4 10             	add    esp,0x10
c0027df0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027df3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027df6:	52                   	push   edx
c0027df7:	50                   	push   eax
c0027df8:	50                   	push   eax
c0027df9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027dfc:	e8 8e 10 00 00       	call   c0028e8f <__extendsfdf2>
c0027e01:	59                   	pop    ecx
c0027e02:	59                   	pop    ecx
c0027e03:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027e06:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027e09:	52                   	push   edx
c0027e0a:	50                   	push   eax
c0027e0b:	e8 f8 fe ff ff       	call   c0027d08 <__cmpsf2>
c0027e10:	83 c4 20             	add    esp,0x20
c0027e13:	c9                   	leave  
c0027e14:	c3                   	ret    

c0027e15 <__gesf2>:
c0027e15:	eb c3                	jmp    c0027dda <__gtsf2>

c0027e17 <__ltsf2>:
c0027e17:	eb 84                	jmp    c0027d9d <__eqsf2>

c0027e19 <__lesf2>:
c0027e19:	eb 82                	jmp    c0027d9d <__eqsf2>

c0027e1b <__adddf3>:
c0027e1b:	55                   	push   ebp
c0027e1c:	89 e5                	mov    ebp,esp
c0027e1e:	57                   	push   edi
c0027e1f:	56                   	push   esi
c0027e20:	53                   	push   ebx
c0027e21:	83 ec 24             	sub    esp,0x24
c0027e24:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027e27:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027e2a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027e2d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027e30:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027e33:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027e36:	89 c8                	mov    eax,ecx
c0027e38:	89 ce                	mov    esi,ecx
c0027e3a:	c1 fe 14             	sar    esi,0x14
c0027e3d:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027e40:	89 fb                	mov    ebx,edi
c0027e42:	89 fa                	mov    edx,edi
c0027e44:	c1 e2 0b             	shl    edx,0xb
c0027e47:	c1 e0 0b             	shl    eax,0xb
c0027e4a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027e4f:	c1 eb 15             	shr    ebx,0x15
c0027e52:	09 d8                	or     eax,ebx
c0027e54:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027e57:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027e5a:	c1 fe 14             	sar    esi,0x14
c0027e5d:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027e60:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027e63:	89 f3                	mov    ebx,esi
c0027e65:	c1 e3 0b             	shl    ebx,0xb
c0027e68:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027e6b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027e6e:	c1 e3 0b             	shl    ebx,0xb
c0027e71:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0027e77:	c1 ee 15             	shr    esi,0x15
c0027e7a:	09 f3                	or     ebx,esi
c0027e7c:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0027e7f:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027e82:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0027e85:	0f 88 5f 02 00 00    	js     c00280ea <__adddf3+0x2cf>
c0027e8b:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027e8e:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027e91:	85 db                	test   ebx,ebx
c0027e93:	0f 8e c7 00 00 00    	jle    c0027f60 <__adddf3+0x145>
c0027e99:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027ea0:	75 1a                	jne    c0027ebc <__adddf3+0xa1>
c0027ea2:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027ea5:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027ea8:	0f 84 b2 05 00 00    	je     c0028460 <__adddf3+0x645>
c0027eae:	4b                   	dec    ebx
c0027eaf:	75 23                	jne    c0027ed4 <__adddf3+0xb9>
c0027eb1:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027eb4:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027eb7:	e9 99 00 00 00       	jmp    c0027f55 <__adddf3+0x13a>
c0027ebc:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027ebf:	f7 d6                	not    esi
c0027ec1:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027ec7:	0f 84 93 05 00 00    	je     c0028460 <__adddf3+0x645>
c0027ecd:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027ed4:	83 fb 1f             	cmp    ebx,0x1f
c0027ed7:	7e 42                	jle    c0027f1b <__adddf3+0x100>
c0027ed9:	83 fb 3f             	cmp    ebx,0x3f
c0027edc:	0f 8f 7e 05 00 00    	jg     c0028460 <__adddf3+0x645>
c0027ee2:	83 e3 1f             	and    ebx,0x1f
c0027ee5:	89 d9                	mov    ecx,ebx
c0027ee7:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027eea:	d3 ef                	shr    edi,cl
c0027eec:	31 db                	xor    ebx,ebx
c0027eee:	85 c9                	test   ecx,ecx
c0027ef0:	74 15                	je     c0027f07 <__adddf3+0xec>
c0027ef2:	be 20 00 00 00       	mov    esi,0x20
c0027ef7:	29 ce                	sub    esi,ecx
c0027ef9:	89 f1                	mov    ecx,esi
c0027efb:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027efe:	d3 e6                	shl    esi,cl
c0027f00:	31 db                	xor    ebx,ebx
c0027f02:	85 f6                	test   esi,esi
c0027f04:	0f 95 c3             	setne  bl
c0027f07:	31 c9                	xor    ecx,ecx
c0027f09:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027f0d:	0f 95 c1             	setne  cl
c0027f10:	09 cf                	or     edi,ecx
c0027f12:	09 fb                	or     ebx,edi
c0027f14:	01 da                	add    edx,ebx
c0027f16:	83 d0 00             	adc    eax,0x0
c0027f19:	eb 3a                	jmp    c0027f55 <__adddf3+0x13a>
c0027f1b:	bf 20 00 00 00       	mov    edi,0x20
c0027f20:	29 df                	sub    edi,ebx
c0027f22:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027f25:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027f28:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027f2b:	d3 e6                	shl    esi,cl
c0027f2d:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027f30:	88 d9                	mov    cl,bl
c0027f32:	d3 ef                	shr    edi,cl
c0027f34:	09 fe                	or     esi,edi
c0027f36:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027f39:	88 d9                	mov    cl,bl
c0027f3b:	d3 ef                	shr    edi,cl
c0027f3d:	89 fb                	mov    ebx,edi
c0027f3f:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027f42:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027f45:	d3 e7                	shl    edi,cl
c0027f47:	85 ff                	test   edi,edi
c0027f49:	0f 95 c1             	setne  cl
c0027f4c:	0f b6 c9             	movzx  ecx,cl
c0027f4f:	09 ce                	or     esi,ecx
c0027f51:	01 f2                	add    edx,esi
c0027f53:	11 d8                	adc    eax,ebx
c0027f55:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027f58:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027f5b:	e9 52 01 00 00       	jmp    c00280b2 <__adddf3+0x297>
c0027f60:	0f 84 d5 00 00 00    	je     c002803b <__adddf3+0x220>
c0027f66:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027f69:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027f6c:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027f6f:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027f72:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027f79:	75 20                	jne    c0027f9b <__adddf3+0x180>
c0027f7b:	89 d6                	mov    esi,edx
c0027f7d:	09 c6                	or     esi,eax
c0027f7f:	0f 84 db 04 00 00    	je     c0028460 <__adddf3+0x645>
c0027f85:	4b                   	dec    ebx
c0027f86:	75 29                	jne    c0027fb1 <__adddf3+0x196>
c0027f88:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027f8b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027f8e:	01 d1                	add    ecx,edx
c0027f90:	11 c6                	adc    esi,eax
c0027f92:	89 f0                	mov    eax,esi
c0027f94:	89 ca                	mov    edx,ecx
c0027f96:	e9 17 01 00 00       	jmp    c00280b2 <__adddf3+0x297>
c0027f9b:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027f9e:	f7 d6                	not    esi
c0027fa0:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027fa6:	0f 84 b4 04 00 00    	je     c0028460 <__adddf3+0x645>
c0027fac:	0d 00 00 00 80       	or     eax,0x80000000
c0027fb1:	83 fb 1f             	cmp    ebx,0x1f
c0027fb4:	7e 48                	jle    c0027ffe <__adddf3+0x1e3>
c0027fb6:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027fb9:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027fbc:	83 fb 3f             	cmp    ebx,0x3f
c0027fbf:	0f 8f 9b 04 00 00    	jg     c0028460 <__adddf3+0x645>
c0027fc5:	83 e3 1f             	and    ebx,0x1f
c0027fc8:	89 d9                	mov    ecx,ebx
c0027fca:	89 c7                	mov    edi,eax
c0027fcc:	d3 ef                	shr    edi,cl
c0027fce:	31 db                	xor    ebx,ebx
c0027fd0:	85 c9                	test   ecx,ecx
c0027fd2:	74 12                	je     c0027fe6 <__adddf3+0x1cb>
c0027fd4:	be 20 00 00 00       	mov    esi,0x20
c0027fd9:	29 ce                	sub    esi,ecx
c0027fdb:	89 f1                	mov    ecx,esi
c0027fdd:	d3 e0                	shl    eax,cl
c0027fdf:	31 db                	xor    ebx,ebx
c0027fe1:	85 c0                	test   eax,eax
c0027fe3:	0f 95 c3             	setne  bl
c0027fe6:	31 c0                	xor    eax,eax
c0027fe8:	85 d2                	test   edx,edx
c0027fea:	0f 95 c0             	setne  al
c0027fed:	09 c7                	or     edi,eax
c0027fef:	09 fb                	or     ebx,edi
c0027ff1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027ff4:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027ff7:	01 da                	add    edx,ebx
c0027ff9:	83 d6 00             	adc    esi,0x0
c0027ffc:	eb 39                	jmp    c0028037 <__adddf3+0x21c>
c0027ffe:	be 20 00 00 00       	mov    esi,0x20
c0028003:	29 de                	sub    esi,ebx
c0028005:	89 c7                	mov    edi,eax
c0028007:	89 f1                	mov    ecx,esi
c0028009:	d3 e7                	shl    edi,cl
c002800b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002800e:	89 d7                	mov    edi,edx
c0028010:	88 d9                	mov    cl,bl
c0028012:	d3 ef                	shr    edi,cl
c0028014:	89 f9                	mov    ecx,edi
c0028016:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028019:	09 cf                	or     edi,ecx
c002801b:	88 d9                	mov    cl,bl
c002801d:	d3 e8                	shr    eax,cl
c002801f:	89 f1                	mov    ecx,esi
c0028021:	d3 e2                	shl    edx,cl
c0028023:	85 d2                	test   edx,edx
c0028025:	0f 95 c2             	setne  dl
c0028028:	0f b6 d2             	movzx  edx,dl
c002802b:	09 d7                	or     edi,edx
c002802d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028030:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028033:	01 fa                	add    edx,edi
c0028035:	11 c6                	adc    esi,eax
c0028037:	89 f0                	mov    eax,esi
c0028039:	eb 77                	jmp    c00280b2 <__adddf3+0x297>
c002803b:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002803e:	46                   	inc    esi
c002803f:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0028042:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0028048:	75 41                	jne    c002808b <__adddf3+0x270>
c002804a:	89 d3                	mov    ebx,edx
c002804c:	09 c3                	or     ebx,eax
c002804e:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0028055:	75 27                	jne    c002807e <__adddf3+0x263>
c0028057:	85 db                	test   ebx,ebx
c0028059:	0f 84 fb 03 00 00    	je     c002845a <__adddf3+0x63f>
c002805f:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028062:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0028065:	0f 84 f5 03 00 00    	je     c0028460 <__adddf3+0x645>
c002806b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002806e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0028071:	85 c0                	test   eax,eax
c0028073:	0f 89 91 03 00 00    	jns    c002840a <__adddf3+0x5ef>
c0028079:	e9 85 03 00 00       	jmp    c0028403 <__adddf3+0x5e8>
c002807e:	85 db                	test   ebx,ebx
c0028080:	0f 85 da 03 00 00    	jne    c0028460 <__adddf3+0x645>
c0028086:	e9 cf 03 00 00       	jmp    c002845a <__adddf3+0x63f>
c002808b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002808e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0028091:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028094:	f7 d1                	not    ecx
c0028096:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002809c:	0f 84 70 03 00 00    	je     c0028412 <__adddf3+0x5f7>
c00280a2:	d1 ea                	shr    edx,1
c00280a4:	89 c1                	mov    ecx,eax
c00280a6:	c1 e1 1f             	shl    ecx,0x1f
c00280a9:	09 ca                	or     edx,ecx
c00280ab:	d1 e8                	shr    eax,1
c00280ad:	e9 6f 03 00 00       	jmp    c0028421 <__adddf3+0x606>
c00280b2:	85 c0                	test   eax,eax
c00280b4:	0f 89 67 03 00 00    	jns    c0028421 <__adddf3+0x606>
c00280ba:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00280bd:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00280c0:	f7 d1                	not    ecx
c00280c2:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00280c8:	0f 84 44 03 00 00    	je     c0028412 <__adddf3+0x5f7>
c00280ce:	89 d1                	mov    ecx,edx
c00280d0:	d1 e9                	shr    ecx,1
c00280d2:	83 e2 01             	and    edx,0x1
c00280d5:	09 ca                	or     edx,ecx
c00280d7:	89 c1                	mov    ecx,eax
c00280d9:	c1 e1 1f             	shl    ecx,0x1f
c00280dc:	09 ca                	or     edx,ecx
c00280de:	d1 e8                	shr    eax,1
c00280e0:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00280e5:	e9 37 03 00 00       	jmp    c0028421 <__adddf3+0x606>
c00280ea:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00280ed:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00280f3:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c00280f6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00280f9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00280ff:	29 de                	sub    esi,ebx
c0028101:	85 f6                	test   esi,esi
c0028103:	0f 8e bd 00 00 00    	jle    c00281c6 <__adddf3+0x3ab>
c0028109:	85 db                	test   ebx,ebx
c002810b:	75 17                	jne    c0028124 <__adddf3+0x309>
c002810d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0028110:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028113:	0f 84 47 03 00 00    	je     c0028460 <__adddf3+0x645>
c0028119:	4e                   	dec    esi
c002811a:	75 20                	jne    c002813c <__adddf3+0x321>
c002811c:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002811f:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0028122:	eb 5b                	jmp    c002817f <__adddf3+0x364>
c0028124:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0028127:	f7 d3                	not    ebx
c0028129:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002812f:	0f 84 2b 03 00 00    	je     c0028460 <__adddf3+0x645>
c0028135:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002813c:	83 fe 1f             	cmp    esi,0x1f
c002813f:	7e 49                	jle    c002818a <__adddf3+0x36f>
c0028141:	83 fe 3f             	cmp    esi,0x3f
c0028144:	0f 8f 16 03 00 00    	jg     c0028460 <__adddf3+0x645>
c002814a:	83 e6 1f             	and    esi,0x1f
c002814d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0028150:	89 f1                	mov    ecx,esi
c0028152:	d3 ef                	shr    edi,cl
c0028154:	31 db                	xor    ebx,ebx
c0028156:	85 f6                	test   esi,esi
c0028158:	74 13                	je     c002816d <__adddf3+0x352>
c002815a:	b9 20 00 00 00       	mov    ecx,0x20
c002815f:	29 f1                	sub    ecx,esi
c0028161:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028164:	d3 e6                	shl    esi,cl
c0028166:	31 db                	xor    ebx,ebx
c0028168:	85 f6                	test   esi,esi
c002816a:	0f 95 c3             	setne  bl
c002816d:	31 c9                	xor    ecx,ecx
c002816f:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0028173:	0f 95 c1             	setne  cl
c0028176:	09 cf                	or     edi,ecx
c0028178:	09 fb                	or     ebx,edi
c002817a:	29 da                	sub    edx,ebx
c002817c:	83 d8 00             	sbb    eax,0x0
c002817f:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028182:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028185:	e9 aa 01 00 00       	jmp    c0028334 <__adddf3+0x519>
c002818a:	bf 20 00 00 00       	mov    edi,0x20
c002818f:	29 f7                	sub    edi,esi
c0028191:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028194:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028197:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002819a:	d3 e3                	shl    ebx,cl
c002819c:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002819f:	89 f1                	mov    ecx,esi
c00281a1:	d3 ef                	shr    edi,cl
c00281a3:	09 fb                	or     ebx,edi
c00281a5:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00281a8:	89 f1                	mov    ecx,esi
c00281aa:	d3 ef                	shr    edi,cl
c00281ac:	89 fe                	mov    esi,edi
c00281ae:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00281b1:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00281b4:	d3 e7                	shl    edi,cl
c00281b6:	85 ff                	test   edi,edi
c00281b8:	0f 95 c1             	setne  cl
c00281bb:	0f b6 c9             	movzx  ecx,cl
c00281be:	09 cb                	or     ebx,ecx
c00281c0:	29 da                	sub    edx,ebx
c00281c2:	19 f0                	sbb    eax,esi
c00281c4:	eb b9                	jmp    c002817f <__adddf3+0x364>
c00281c6:	0f 84 cd 00 00 00    	je     c0028299 <__adddf3+0x47e>
c00281cc:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00281cf:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00281d2:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00281d5:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00281d9:	75 1b                	jne    c00281f6 <__adddf3+0x3db>
c00281db:	89 d6                	mov    esi,edx
c00281dd:	09 c6                	or     esi,eax
c00281df:	0f 84 7b 02 00 00    	je     c0028460 <__adddf3+0x645>
c00281e5:	4b                   	dec    ebx
c00281e6:	75 24                	jne    c002820c <__adddf3+0x3f1>
c00281e8:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00281eb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00281ee:	29 d1                	sub    ecx,edx
c00281f0:	19 c6                	sbb    esi,eax
c00281f2:	89 ca                	mov    edx,ecx
c00281f4:	eb 61                	jmp    c0028257 <__adddf3+0x43c>
c00281f6:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00281f9:	f7 d6                	not    esi
c00281fb:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028201:	0f 84 59 02 00 00    	je     c0028460 <__adddf3+0x645>
c0028207:	0d 00 00 00 80       	or     eax,0x80000000
c002820c:	83 fb 1f             	cmp    ebx,0x1f
c002820f:	7e 4d                	jle    c002825e <__adddf3+0x443>
c0028211:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028214:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028217:	83 fb 3f             	cmp    ebx,0x3f
c002821a:	0f 8f 40 02 00 00    	jg     c0028460 <__adddf3+0x645>
c0028220:	83 e3 1f             	and    ebx,0x1f
c0028223:	89 d9                	mov    ecx,ebx
c0028225:	89 c7                	mov    edi,eax
c0028227:	d3 ef                	shr    edi,cl
c0028229:	31 db                	xor    ebx,ebx
c002822b:	85 c9                	test   ecx,ecx
c002822d:	74 12                	je     c0028241 <__adddf3+0x426>
c002822f:	be 20 00 00 00       	mov    esi,0x20
c0028234:	29 ce                	sub    esi,ecx
c0028236:	89 f1                	mov    ecx,esi
c0028238:	d3 e0                	shl    eax,cl
c002823a:	31 db                	xor    ebx,ebx
c002823c:	85 c0                	test   eax,eax
c002823e:	0f 95 c3             	setne  bl
c0028241:	31 c0                	xor    eax,eax
c0028243:	85 d2                	test   edx,edx
c0028245:	0f 95 c0             	setne  al
c0028248:	09 c7                	or     edi,eax
c002824a:	09 fb                	or     ebx,edi
c002824c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002824f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028252:	29 da                	sub    edx,ebx
c0028254:	83 de 00             	sbb    esi,0x0
c0028257:	89 f0                	mov    eax,esi
c0028259:	e9 d6 00 00 00       	jmp    c0028334 <__adddf3+0x519>
c002825e:	be 20 00 00 00       	mov    esi,0x20
c0028263:	29 de                	sub    esi,ebx
c0028265:	89 c7                	mov    edi,eax
c0028267:	89 f1                	mov    ecx,esi
c0028269:	d3 e7                	shl    edi,cl
c002826b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002826e:	89 d7                	mov    edi,edx
c0028270:	88 d9                	mov    cl,bl
c0028272:	d3 ef                	shr    edi,cl
c0028274:	89 f9                	mov    ecx,edi
c0028276:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028279:	09 cf                	or     edi,ecx
c002827b:	88 d9                	mov    cl,bl
c002827d:	d3 e8                	shr    eax,cl
c002827f:	89 f1                	mov    ecx,esi
c0028281:	d3 e2                	shl    edx,cl
c0028283:	85 d2                	test   edx,edx
c0028285:	0f 95 c2             	setne  dl
c0028288:	0f b6 d2             	movzx  edx,dl
c002828b:	09 d7                	or     edi,edx
c002828d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028290:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028293:	29 fa                	sub    edx,edi
c0028295:	19 c6                	sbb    esi,eax
c0028297:	eb be                	jmp    c0028257 <__adddf3+0x43c>
c0028299:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002829c:	8d 5e 01             	lea    ebx,[esi+0x1]
c002829f:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c00282a5:	75 6a                	jne    c0028311 <__adddf3+0x4f6>
c00282a7:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00282ab:	75 58                	jne    c0028305 <__adddf3+0x4ea>
c00282ad:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00282b0:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00282b3:	89 d6                	mov    esi,edx
c00282b5:	09 c6                	or     esi,eax
c00282b7:	75 17                	jne    c00282d0 <__adddf3+0x4b5>
c00282b9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00282bc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00282bf:	85 db                	test   ebx,ebx
c00282c1:	0f 85 99 01 00 00    	jne    c0028460 <__adddf3+0x645>
c00282c7:	31 ff                	xor    edi,edi
c00282c9:	31 c9                	xor    ecx,ecx
c00282cb:	e9 90 01 00 00       	jmp    c0028460 <__adddf3+0x645>
c00282d0:	85 db                	test   ebx,ebx
c00282d2:	0f 84 88 01 00 00    	je     c0028460 <__adddf3+0x645>
c00282d8:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00282db:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00282de:	85 c0                	test   eax,eax
c00282e0:	79 10                	jns    c00282f2 <__adddf3+0x4d7>
c00282e2:	31 c9                	xor    ecx,ecx
c00282e4:	f7 da                	neg    edx
c00282e6:	0f 95 c1             	setne  cl
c00282e9:	01 c8                	add    eax,ecx
c00282eb:	f7 d8                	neg    eax
c00282ed:	e9 2f 01 00 00       	jmp    c0028421 <__adddf3+0x606>
c00282f2:	31 ff                	xor    edi,edi
c00282f4:	31 c9                	xor    ecx,ecx
c00282f6:	89 c3                	mov    ebx,eax
c00282f8:	09 d3                	or     ebx,edx
c00282fa:	0f 84 60 01 00 00    	je     c0028460 <__adddf3+0x645>
c0028300:	e9 05 01 00 00       	jmp    c002840a <__adddf3+0x5ef>
c0028305:	31 ff                	xor    edi,edi
c0028307:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002830c:	e9 4f 01 00 00       	jmp    c0028460 <__adddf3+0x645>
c0028311:	89 c1                	mov    ecx,eax
c0028313:	89 d0                	mov    eax,edx
c0028315:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0028318:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c002831b:	89 ca                	mov    edx,ecx
c002831d:	85 c9                	test   ecx,ecx
c002831f:	79 2c                	jns    c002834d <__adddf3+0x532>
c0028321:	31 c9                	xor    ecx,ecx
c0028323:	f7 d8                	neg    eax
c0028325:	0f 95 c1             	setne  cl
c0028328:	01 ca                	add    edx,ecx
c002832a:	f7 da                	neg    edx
c002832c:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002832f:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0028332:	eb 19                	jmp    c002834d <__adddf3+0x532>
c0028334:	85 c0                	test   eax,eax
c0028336:	0f 89 e5 00 00 00    	jns    c0028421 <__adddf3+0x606>
c002833c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028341:	89 c1                	mov    ecx,eax
c0028343:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028346:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0028349:	89 d0                	mov    eax,edx
c002834b:	89 ca                	mov    edx,ecx
c002834d:	85 d2                	test   edx,edx
c002834f:	74 59                	je     c00283aa <__adddf3+0x58f>
c0028351:	0f bd da             	bsr    ebx,edx
c0028354:	83 f3 1f             	xor    ebx,0x1f
c0028357:	88 d9                	mov    cl,bl
c0028359:	d3 e2                	shl    edx,cl
c002835b:	bf 20 00 00 00       	mov    edi,0x20
c0028360:	89 f9                	mov    ecx,edi
c0028362:	29 d9                	sub    ecx,ebx
c0028364:	89 c6                	mov    esi,eax
c0028366:	d3 ee                	shr    esi,cl
c0028368:	09 d6                	or     esi,edx
c002836a:	88 d9                	mov    cl,bl
c002836c:	d3 e0                	shl    eax,cl
c002836e:	89 c2                	mov    edx,eax
c0028370:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028373:	25 ff 07 00 00       	and    eax,0x7ff
c0028378:	39 d8                	cmp    eax,ebx
c002837a:	7f 22                	jg     c002839e <__adddf3+0x583>
c002837c:	29 c3                	sub    ebx,eax
c002837e:	43                   	inc    ebx
c002837f:	88 d9                	mov    cl,bl
c0028381:	d3 ea                	shr    edx,cl
c0028383:	29 df                	sub    edi,ebx
c0028385:	89 f9                	mov    ecx,edi
c0028387:	89 f0                	mov    eax,esi
c0028389:	d3 e0                	shl    eax,cl
c002838b:	09 c2                	or     edx,eax
c002838d:	89 f0                	mov    eax,esi
c002838f:	88 d9                	mov    cl,bl
c0028391:	d3 e8                	shr    eax,cl
c0028393:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028396:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c002839c:	eb 6f                	jmp    c002840d <__adddf3+0x5f2>
c002839e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00283a1:	29 d8                	sub    eax,ebx
c00283a3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00283a6:	89 f0                	mov    eax,esi
c00283a8:	eb 59                	jmp    c0028403 <__adddf3+0x5e8>
c00283aa:	85 c0                	test   eax,eax
c00283ac:	74 6a                	je     c0028418 <__adddf3+0x5fd>
c00283ae:	0f bd c8             	bsr    ecx,eax
c00283b1:	83 f1 1f             	xor    ecx,0x1f
c00283b4:	d3 e0                	shl    eax,cl
c00283b6:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00283b9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00283bf:	83 c1 20             	add    ecx,0x20
c00283c2:	39 cb                	cmp    ebx,ecx
c00283c4:	7f 35                	jg     c00283fb <__adddf3+0x5e0>
c00283c6:	29 d9                	sub    ecx,ebx
c00283c8:	8d 71 01             	lea    esi,[ecx+0x1]
c00283cb:	83 fe 1f             	cmp    esi,0x1f
c00283ce:	7e 09                	jle    c00283d9 <__adddf3+0x5be>
c00283d0:	83 e9 1f             	sub    ecx,0x1f
c00283d3:	d3 e8                	shr    eax,cl
c00283d5:	89 c3                	mov    ebx,eax
c00283d7:	eb 11                	jmp    c00283ea <__adddf3+0x5cf>
c00283d9:	b9 20 00 00 00       	mov    ecx,0x20
c00283de:	29 f1                	sub    ecx,esi
c00283e0:	89 c3                	mov    ebx,eax
c00283e2:	d3 e3                	shl    ebx,cl
c00283e4:	89 f1                	mov    ecx,esi
c00283e6:	d3 e8                	shr    eax,cl
c00283e8:	89 c2                	mov    edx,eax
c00283ea:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00283ed:	25 00 f8 ff ff       	and    eax,0xfffff800
c00283f2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00283f5:	89 d0                	mov    eax,edx
c00283f7:	89 da                	mov    edx,ebx
c00283f9:	eb 26                	jmp    c0028421 <__adddf3+0x606>
c00283fb:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00283fe:	29 cf                	sub    edi,ecx
c0028400:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028403:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028408:	eb 17                	jmp    c0028421 <__adddf3+0x606>
c002840a:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002840d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028410:	eb 0f                	jmp    c0028421 <__adddf3+0x606>
c0028412:	31 d2                	xor    edx,edx
c0028414:	31 c0                	xor    eax,eax
c0028416:	eb 09                	jmp    c0028421 <__adddf3+0x606>
c0028418:	89 c2                	mov    edx,eax
c002841a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0028421:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028424:	c1 e1 14             	shl    ecx,0x14
c0028427:	89 c3                	mov    ebx,eax
c0028429:	c1 eb 0b             	shr    ebx,0xb
c002842c:	09 d9                	or     ecx,ebx
c002842e:	89 d3                	mov    ebx,edx
c0028430:	c1 eb 0b             	shr    ebx,0xb
c0028433:	c1 e0 15             	shl    eax,0x15
c0028436:	09 d8                	or     eax,ebx
c0028438:	89 c7                	mov    edi,eax
c002843a:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0028440:	0f 95 c0             	setne  al
c0028443:	89 c6                	mov    esi,eax
c0028445:	09 f3                	or     ebx,esi
c0028447:	83 e3 01             	and    ebx,0x1
c002844a:	c1 ea 0a             	shr    edx,0xa
c002844d:	21 da                	and    edx,ebx
c002844f:	89 f8                	mov    eax,edi
c0028451:	01 d0                	add    eax,edx
c0028453:	83 d1 00             	adc    ecx,0x0
c0028456:	89 c7                	mov    edi,eax
c0028458:	eb 06                	jmp    c0028460 <__adddf3+0x645>
c002845a:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002845d:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028460:	89 f8                	mov    eax,edi
c0028462:	89 ca                	mov    edx,ecx
c0028464:	83 c4 24             	add    esp,0x24
c0028467:	5b                   	pop    ebx
c0028468:	5e                   	pop    esi
c0028469:	5f                   	pop    edi
c002846a:	5d                   	pop    ebp
c002846b:	c3                   	ret    

c002846c <__subdf3>:
c002846c:	55                   	push   ebp
c002846d:	89 e5                	mov    ebp,esp
c002846f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0028472:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028475:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002847b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c002847e:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0028481:	5d                   	pop    ebp
c0028482:	e9 94 f9 ff ff       	jmp    c0027e1b <__adddf3>

c0028487 <__negdf2>:
c0028487:	55                   	push   ebp
c0028488:	89 e5                	mov    ebp,esp
c002848a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002848d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028490:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0028496:	5d                   	pop    ebp
c0028497:	c3                   	ret    

c0028498 <__muldf3>:
c0028498:	55                   	push   ebp
c0028499:	89 e5                	mov    ebp,esp
c002849b:	57                   	push   edi
c002849c:	56                   	push   esi
c002849d:	53                   	push   ebx
c002849e:	83 ec 24             	sub    esp,0x24
c00284a1:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00284a4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00284a7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00284aa:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00284ad:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00284b0:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00284b3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00284b6:	89 c8                	mov    eax,ecx
c00284b8:	c1 f8 14             	sar    eax,0x14
c00284bb:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00284be:	89 f8                	mov    eax,edi
c00284c0:	89 fb                	mov    ebx,edi
c00284c2:	c1 e3 0b             	shl    ebx,0xb
c00284c5:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c00284c8:	c1 e1 0b             	shl    ecx,0xb
c00284cb:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00284d1:	c1 e8 15             	shr    eax,0x15
c00284d4:	09 c1                	or     ecx,eax
c00284d6:	89 d6                	mov    esi,edx
c00284d8:	89 d0                	mov    eax,edx
c00284da:	c1 f8 14             	sar    eax,0x14
c00284dd:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00284e0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00284e3:	89 c3                	mov    ebx,eax
c00284e5:	c1 e3 0b             	shl    ebx,0xb
c00284e8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00284eb:	c1 e6 0b             	shl    esi,0xb
c00284ee:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00284f4:	c1 e8 15             	shr    eax,0x15
c00284f7:	09 c6                	or     esi,eax
c00284f9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00284fc:	25 ff 07 00 00       	and    eax,0x7ff
c0028501:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028504:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028507:	25 ff 07 00 00       	and    eax,0x7ff
c002850c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002850f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0028512:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0028515:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c002851c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002851f:	40                   	inc    eax
c0028520:	a9 fe 07 00 00       	test   eax,0x7fe
c0028525:	0f 85 8d 00 00 00    	jne    c00285b8 <__muldf3+0x120>
c002852b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002852e:	09 c8                	or     eax,ecx
c0028530:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0028534:	74 44                	je     c002857a <__muldf3+0xe2>
c0028536:	85 c0                	test   eax,eax
c0028538:	0f 85 31 02 00 00    	jne    c002876f <__muldf3+0x2d7>
c002853e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028541:	40                   	inc    eax
c0028542:	a9 fe 07 00 00       	test   eax,0x7fe
c0028547:	75 13                	jne    c002855c <__muldf3+0xc4>
c0028549:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002854c:	09 f1                	or     ecx,esi
c002854e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0028552:	74 22                	je     c0028576 <__muldf3+0xde>
c0028554:	85 c9                	test   ecx,ecx
c0028556:	0f 85 0d 02 00 00    	jne    c0028769 <__muldf3+0x2d1>
c002855c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0028560:	0f 89 09 02 00 00    	jns    c002876f <__muldf3+0x2d7>
c0028566:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028569:	05 00 00 00 80       	add    eax,0x80000000
c002856e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028571:	e9 f9 01 00 00       	jmp    c002876f <__muldf3+0x2d7>
c0028576:	85 c9                	test   ecx,ecx
c0028578:	eb 2e                	jmp    c00285a8 <__muldf3+0x110>
c002857a:	85 c0                	test   eax,eax
c002857c:	74 20                	je     c002859e <__muldf3+0x106>
c002857e:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0028581:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028584:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028587:	c1 ef 1f             	shr    edi,0x1f
c002858a:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c002858d:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0028590:	8d 43 ff             	lea    eax,[ebx-0x1]
c0028593:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028596:	09 f9                	or     ecx,edi
c0028598:	78 1e                	js     c00285b8 <__muldf3+0x120>
c002859a:	89 c3                	mov    ebx,eax
c002859c:	eb e0                	jmp    c002857e <__muldf3+0xe6>
c002859e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00285a1:	f7 d0                	not    eax
c00285a3:	a9 ff 07 00 00       	test   eax,0x7ff
c00285a8:	75 b2                	jne    c002855c <__muldf3+0xc4>
c00285aa:	31 ff                	xor    edi,edi
c00285ac:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c00285b3:	e9 b7 01 00 00       	jmp    c002876f <__muldf3+0x2d7>
c00285b8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00285bb:	40                   	inc    eax
c00285bc:	a9 fe 07 00 00       	test   eax,0x7fe
c00285c1:	75 57                	jne    c002861a <__muldf3+0x182>
c00285c3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00285c6:	09 f0                	or     eax,esi
c00285c8:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00285cc:	74 23                	je     c00285f1 <__muldf3+0x159>
c00285ce:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00285d2:	0f 89 91 01 00 00    	jns    c0028769 <__muldf3+0x2d1>
c00285d8:	85 c0                	test   eax,eax
c00285da:	0f 85 89 01 00 00    	jne    c0028769 <__muldf3+0x2d1>
c00285e0:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00285e3:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c00285e9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00285ec:	e9 7e 01 00 00       	jmp    c002876f <__muldf3+0x2d7>
c00285f1:	85 c0                	test   eax,eax
c00285f3:	75 0c                	jne    c0028601 <__muldf3+0x169>
c00285f5:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00285f9:	0f 89 6a 01 00 00    	jns    c0028769 <__muldf3+0x2d1>
c00285ff:	eb df                	jmp    c00285e0 <__muldf3+0x148>
c0028601:	01 f6                	add    esi,esi
c0028603:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028606:	c1 ea 1f             	shr    edx,0x1f
c0028609:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002860c:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c002860f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0028612:	09 d6                	or     esi,edx
c0028614:	78 04                	js     c002861a <__muldf3+0x182>
c0028616:	89 c3                	mov    ebx,eax
c0028618:	eb e7                	jmp    c0028601 <__muldf3+0x169>
c002861a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0028620:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028626:	89 c8                	mov    eax,ecx
c0028628:	f7 e6                	mul    esi
c002862a:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c002862d:	89 c7                	mov    edi,eax
c002862f:	89 c8                	mov    eax,ecx
c0028631:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028634:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0028637:	89 c1                	mov    ecx,eax
c0028639:	89 f0                	mov    eax,esi
c002863b:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c002863e:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0028641:	89 c6                	mov    esi,eax
c0028643:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028646:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028649:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c002864c:	31 c0                	xor    eax,eax
c002864e:	01 f1                	add    ecx,esi
c0028650:	0f 92 c0             	setb   al
c0028653:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0028656:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0028659:	83 d6 00             	adc    esi,0x0
c002865c:	01 c7                	add    edi,eax
c002865e:	83 d6 00             	adc    esi,0x0
c0028661:	01 ca                	add    edx,ecx
c0028663:	0f 92 c1             	setb   cl
c0028666:	0f b6 c9             	movzx  ecx,cl
c0028669:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c002866c:	83 d6 00             	adc    esi,0x0
c002866f:	01 cf                	add    edi,ecx
c0028671:	83 d6 00             	adc    esi,0x0
c0028674:	31 c9                	xor    ecx,ecx
c0028676:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0028679:	0f 95 c1             	setne  cl
c002867c:	09 cf                	or     edi,ecx
c002867e:	85 f6                	test   esi,esi
c0028680:	78 0c                	js     c002868e <__muldf3+0x1f6>
c0028682:	01 f6                	add    esi,esi
c0028684:	89 f8                	mov    eax,edi
c0028686:	c1 e8 1f             	shr    eax,0x1f
c0028689:	09 c6                	or     esi,eax
c002868b:	01 ff                	add    edi,edi
c002868d:	4b                   	dec    ebx
c002868e:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0028694:	0f 8f 85 00 00 00    	jg     c002871f <__muldf3+0x287>
c002869a:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c00286a0:	85 db                	test   ebx,ebx
c00286a2:	0f 8f 84 00 00 00    	jg     c002872c <__muldf3+0x294>
c00286a8:	83 fb cc             	cmp    ebx,0xffffffcc
c00286ab:	7c 79                	jl     c0028726 <__muldf3+0x28e>
c00286ad:	ba 01 00 00 00       	mov    edx,0x1
c00286b2:	29 da                	sub    edx,ebx
c00286b4:	81 ce 00 00 00 80    	or     esi,0x80000000
c00286ba:	83 fa 1f             	cmp    edx,0x1f
c00286bd:	7e 30                	jle    c00286ef <__muldf3+0x257>
c00286bf:	83 fa 20             	cmp    edx,0x20
c00286c2:	75 0b                	jne    c00286cf <__muldf3+0x237>
c00286c4:	31 c0                	xor    eax,eax
c00286c6:	85 ff                	test   edi,edi
c00286c8:	0f 95 c0             	setne  al
c00286cb:	89 c7                	mov    edi,eax
c00286cd:	eb 1a                	jmp    c00286e9 <__muldf3+0x251>
c00286cf:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c00286d2:	89 f0                	mov    eax,esi
c00286d4:	d3 e0                	shl    eax,cl
c00286d6:	09 f8                	or     eax,edi
c00286d8:	0f 95 c0             	setne  al
c00286db:	0f b6 c0             	movzx  eax,al
c00286de:	89 c7                	mov    edi,eax
c00286e0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00286e5:	29 d9                	sub    ecx,ebx
c00286e7:	d3 ee                	shr    esi,cl
c00286e9:	09 f7                	or     edi,esi
c00286eb:	31 db                	xor    ebx,ebx
c00286ed:	eb 3b                	jmp    c002872a <__muldf3+0x292>
c00286ef:	83 c3 1f             	add    ebx,0x1f
c00286f2:	89 f0                	mov    eax,esi
c00286f4:	88 d9                	mov    cl,bl
c00286f6:	d3 e0                	shl    eax,cl
c00286f8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00286fb:	89 f8                	mov    eax,edi
c00286fd:	88 d1                	mov    cl,dl
c00286ff:	d3 e8                	shr    eax,cl
c0028701:	89 c1                	mov    ecx,eax
c0028703:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028706:	09 c8                	or     eax,ecx
c0028708:	88 d9                	mov    cl,bl
c002870a:	d3 e7                	shl    edi,cl
c002870c:	31 db                	xor    ebx,ebx
c002870e:	85 ff                	test   edi,edi
c0028710:	0f 95 c3             	setne  bl
c0028713:	89 df                	mov    edi,ebx
c0028715:	09 c7                	or     edi,eax
c0028717:	88 d1                	mov    cl,dl
c0028719:	d3 ee                	shr    esi,cl
c002871b:	31 db                	xor    ebx,ebx
c002871d:	eb 0d                	jmp    c002872c <__muldf3+0x294>
c002871f:	bb ff 07 00 00       	mov    ebx,0x7ff
c0028724:	eb 02                	jmp    c0028728 <__muldf3+0x290>
c0028726:	31 db                	xor    ebx,ebx
c0028728:	31 ff                	xor    edi,edi
c002872a:	31 f6                	xor    esi,esi
c002872c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002872f:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0028732:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028737:	09 c3                	or     ebx,eax
c0028739:	c1 e3 14             	shl    ebx,0x14
c002873c:	89 f0                	mov    eax,esi
c002873e:	c1 e8 0b             	shr    eax,0xb
c0028741:	09 c3                	or     ebx,eax
c0028743:	89 f8                	mov    eax,edi
c0028745:	c1 e8 0b             	shr    eax,0xb
c0028748:	c1 e6 15             	shl    esi,0x15
c002874b:	09 c6                	or     esi,eax
c002874d:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0028753:	0f 95 c1             	setne  cl
c0028756:	09 c8                	or     eax,ecx
c0028758:	83 e0 01             	and    eax,0x1
c002875b:	c1 ef 0a             	shr    edi,0xa
c002875e:	21 c7                	and    edi,eax
c0028760:	01 f7                	add    edi,esi
c0028762:	83 d3 00             	adc    ebx,0x0
c0028765:	89 da                	mov    edx,ebx
c0028767:	eb 03                	jmp    c002876c <__muldf3+0x2d4>
c0028769:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c002876c:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c002876f:	89 f8                	mov    eax,edi
c0028771:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028774:	83 c4 24             	add    esp,0x24
c0028777:	5b                   	pop    ebx
c0028778:	5e                   	pop    esi
c0028779:	5f                   	pop    edi
c002877a:	5d                   	pop    ebp
c002877b:	c3                   	ret    

c002877c <__divdf3>:
c002877c:	55                   	push   ebp
c002877d:	89 e5                	mov    ebp,esp
c002877f:	57                   	push   edi
c0028780:	56                   	push   esi
c0028781:	53                   	push   ebx
c0028782:	83 ec 2c             	sub    esp,0x2c
c0028785:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028788:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002878b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002878e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0028791:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0028794:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028797:	89 ce                	mov    esi,ecx
c0028799:	89 c8                	mov    eax,ecx
c002879b:	c1 f8 14             	sar    eax,0x14
c002879e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00287a1:	89 f8                	mov    eax,edi
c00287a3:	89 fb                	mov    ebx,edi
c00287a5:	c1 e3 0b             	shl    ebx,0xb
c00287a8:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c00287ab:	c1 e6 0b             	shl    esi,0xb
c00287ae:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00287b4:	c1 e8 15             	shr    eax,0x15
c00287b7:	09 c6                	or     esi,eax
c00287b9:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c00287bc:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00287bf:	89 c2                	mov    edx,eax
c00287c1:	c1 fa 14             	sar    edx,0x14
c00287c4:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00287c7:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00287ca:	89 de                	mov    esi,ebx
c00287cc:	c1 e6 0b             	shl    esi,0xb
c00287cf:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00287d2:	c1 e0 0b             	shl    eax,0xb
c00287d5:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00287da:	c1 eb 15             	shr    ebx,0x15
c00287dd:	09 d8                	or     eax,ebx
c00287df:	89 c2                	mov    edx,eax
c00287e1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00287e4:	25 ff 07 00 00       	and    eax,0x7ff
c00287e9:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00287ec:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00287ef:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00287f5:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c00287f8:	29 d8                	sub    eax,ebx
c00287fa:	05 ff 03 00 00       	add    eax,0x3ff
c00287ff:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0028802:	46                   	inc    esi
c0028803:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0028809:	0f 85 a5 00 00 00    	jne    c00288b4 <__divdf3+0x138>
c002880f:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028812:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0028815:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0028819:	74 2a                	je     c0028845 <__divdf3+0xc9>
c002881b:	85 f6                	test   esi,esi
c002881d:	0f 85 cc 02 00 00    	jne    c0028aef <__divdf3+0x373>
c0028823:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028826:	40                   	inc    eax
c0028827:	a9 fe 07 00 00       	test   eax,0x7fe
c002882c:	75 26                	jne    c0028854 <__divdf3+0xd8>
c002882e:	85 db                	test   ebx,ebx
c0028830:	74 22                	je     c0028854 <__divdf3+0xd8>
c0028832:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028835:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028838:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002883b:	09 d0                	or     eax,edx
c002883d:	0f 85 ac 02 00 00    	jne    c0028aef <__divdf3+0x373>
c0028843:	eb 63                	jmp    c00288a8 <__divdf3+0x12c>
c0028845:	85 f6                	test   esi,esi
c0028847:	75 22                	jne    c002886b <__divdf3+0xef>
c0028849:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002884c:	40                   	inc    eax
c002884d:	a9 fe 07 00 00       	test   eax,0x7fe
c0028852:	74 36                	je     c002888a <__divdf3+0x10e>
c0028854:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0028858:	0f 89 91 02 00 00    	jns    c0028aef <__divdf3+0x373>
c002885e:	89 f8                	mov    eax,edi
c0028860:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0028866:	e9 80 02 00 00       	jmp    c0028aeb <__divdf3+0x36f>
c002886b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002886e:	01 f6                	add    esi,esi
c0028870:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028873:	c1 ef 1f             	shr    edi,0x1f
c0028876:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028879:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c002887c:	8d 48 ff             	lea    ecx,[eax-0x1]
c002887f:	09 f7                	or     edi,esi
c0028881:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0028884:	78 2e                	js     c00288b4 <__divdf3+0x138>
c0028886:	89 c8                	mov    eax,ecx
c0028888:	eb e1                	jmp    c002886b <__divdf3+0xef>
c002888a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002888d:	09 d0                	or     eax,edx
c002888f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0028893:	74 0f                	je     c00288a4 <__divdf3+0x128>
c0028895:	85 c0                	test   eax,eax
c0028897:	74 bb                	je     c0028854 <__divdf3+0xd8>
c0028899:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c002889c:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c002889f:	e9 4b 02 00 00       	jmp    c0028aef <__divdf3+0x373>
c00288a4:	85 c0                	test   eax,eax
c00288a6:	75 ac                	jne    c0028854 <__divdf3+0xd8>
c00288a8:	31 ff                	xor    edi,edi
c00288aa:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00288af:	e9 3b 02 00 00       	jmp    c0028aef <__divdf3+0x373>
c00288b4:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00288b7:	8d 4f 01             	lea    ecx,[edi+0x1]
c00288ba:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c00288c0:	75 6b                	jne    c002892d <__divdf3+0x1b1>
c00288c2:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00288c5:	09 d6                	or     esi,edx
c00288c7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00288cb:	74 28                	je     c00288f5 <__divdf3+0x179>
c00288cd:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00288d0:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00288d3:	85 f6                	test   esi,esi
c00288d5:	0f 85 14 02 00 00    	jne    c0028aef <__divdf3+0x373>
c00288db:	31 ff                	xor    edi,edi
c00288dd:	31 c9                	xor    ecx,ecx
c00288df:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00288e2:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00288e5:	0f 89 04 02 00 00    	jns    c0028aef <__divdf3+0x373>
c00288eb:	b9 00 00 00 80       	mov    ecx,0x80000000
c00288f0:	e9 fa 01 00 00       	jmp    c0028aef <__divdf3+0x373>
c00288f5:	85 f6                	test   esi,esi
c00288f7:	75 1b                	jne    c0028914 <__divdf3+0x198>
c00288f9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00288fc:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00288ff:	25 00 00 00 80       	and    eax,0x80000000
c0028904:	31 c9                	xor    ecx,ecx
c0028906:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c002890b:	89 cf                	mov    edi,ecx
c002890d:	89 c1                	mov    ecx,eax
c002890f:	e9 db 01 00 00       	jmp    c0028aef <__divdf3+0x373>
c0028914:	01 d2                	add    edx,edx
c0028916:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028919:	c1 eb 1f             	shr    ebx,0x1f
c002891c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002891f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0028922:	8d 48 01             	lea    ecx,[eax+0x1]
c0028925:	09 da                	or     edx,ebx
c0028927:	78 04                	js     c002892d <__divdf3+0x1b1>
c0028929:	89 c8                	mov    eax,ecx
c002892b:	eb e7                	jmp    c0028914 <__divdf3+0x198>
c002892d:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028930:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028936:	81 ca 00 00 00 80    	or     edx,0x80000000
c002893c:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c002893f:	39 d6                	cmp    esi,edx
c0028941:	77 0d                	ja     c0028950 <__divdf3+0x1d4>
c0028943:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0028946:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028949:	72 1b                	jb     c0028966 <__divdf3+0x1ea>
c002894b:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c002894e:	75 16                	jne    c0028966 <__divdf3+0x1ea>
c0028950:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028953:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028956:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028959:	83 de 00             	sbb    esi,0x0
c002895c:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c002895f:	ba 01 00 00 00       	mov    edx,0x1
c0028964:	eb 02                	jmp    c0028968 <__divdf3+0x1ec>
c0028966:	31 d2                	xor    edx,edx
c0028968:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c002896f:	31 ff                	xor    edi,edi
c0028971:	01 ff                	add    edi,edi
c0028973:	89 d1                	mov    ecx,edx
c0028975:	c1 e9 1f             	shr    ecx,0x1f
c0028978:	09 cf                	or     edi,ecx
c002897a:	8d 1c 12             	lea    ebx,[edx+edx*1]
c002897d:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0028980:	89 da                	mov    edx,ebx
c0028982:	89 f3                	mov    ebx,esi
c0028984:	8d 34 36             	lea    esi,[esi+esi*1]
c0028987:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002898a:	c1 e9 1f             	shr    ecx,0x1f
c002898d:	09 ce                	or     esi,ecx
c002898f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028992:	01 c9                	add    ecx,ecx
c0028994:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0028997:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c002899a:	85 db                	test   ebx,ebx
c002899c:	78 29                	js     c00289c7 <__divdf3+0x24b>
c002899e:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c00289a1:	72 07                	jb     c00289aa <__divdf3+0x22e>
c00289a3:	75 3c                	jne    c00289e1 <__divdf3+0x265>
c00289a5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00289a8:	77 37                	ja     c00289e1 <__divdf3+0x265>
c00289aa:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00289ad:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c00289b0:	31 d2                	xor    edx,edx
c00289b2:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c00289b5:	0f 97 c2             	seta   dl
c00289b8:	29 d6                	sub    esi,edx
c00289ba:	89 d9                	mov    ecx,ebx
c00289bc:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c00289bf:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00289c2:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00289c5:	eb 17                	jmp    c00289de <__divdf3+0x262>
c00289c7:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00289ca:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00289cd:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00289d0:	0f 97 c1             	seta   cl
c00289d3:	0f b6 c9             	movzx  ecx,cl
c00289d6:	29 ce                	sub    esi,ecx
c00289d8:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c00289db:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c00289de:	83 ca 01             	or     edx,0x1
c00289e1:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c00289e4:	75 8b                	jne    c0028971 <__divdf3+0x1f5>
c00289e6:	c1 e7 09             	shl    edi,0x9
c00289e9:	89 d1                	mov    ecx,edx
c00289eb:	c1 e9 17             	shr    ecx,0x17
c00289ee:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00289f1:	09 f3                	or     ebx,esi
c00289f3:	0f 95 c3             	setne  bl
c00289f6:	0f b6 db             	movzx  ebx,bl
c00289f9:	c1 e2 09             	shl    edx,0x9
c00289fc:	09 d3                	or     ebx,edx
c00289fe:	89 ca                	mov    edx,ecx
c0028a00:	09 fa                	or     edx,edi
c0028a02:	78 0c                	js     c0028a10 <__divdf3+0x294>
c0028a04:	01 d2                	add    edx,edx
c0028a06:	89 d9                	mov    ecx,ebx
c0028a08:	c1 e9 1f             	shr    ecx,0x1f
c0028a0b:	09 ca                	or     edx,ecx
c0028a0d:	01 db                	add    ebx,ebx
c0028a0f:	48                   	dec    eax
c0028a10:	3d fe 07 00 00       	cmp    eax,0x7fe
c0028a15:	0f 8f 83 00 00 00    	jg     c0028a9e <__divdf3+0x322>
c0028a1b:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028a21:	85 c0                	test   eax,eax
c0028a23:	0f 8f 82 00 00 00    	jg     c0028aab <__divdf3+0x32f>
c0028a29:	83 f8 cc             	cmp    eax,0xffffffcc
c0028a2c:	7c 77                	jl     c0028aa5 <__divdf3+0x329>
c0028a2e:	be 01 00 00 00       	mov    esi,0x1
c0028a33:	29 c6                	sub    esi,eax
c0028a35:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028a3b:	83 fe 1f             	cmp    esi,0x1f
c0028a3e:	7e 2f                	jle    c0028a6f <__divdf3+0x2f3>
c0028a40:	83 fe 20             	cmp    esi,0x20
c0028a43:	75 0a                	jne    c0028a4f <__divdf3+0x2d3>
c0028a45:	85 db                	test   ebx,ebx
c0028a47:	0f 95 c3             	setne  bl
c0028a4a:	0f b6 db             	movzx  ebx,bl
c0028a4d:	eb 1a                	jmp    c0028a69 <__divdf3+0x2ed>
c0028a4f:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0028a52:	89 d7                	mov    edi,edx
c0028a54:	d3 e7                	shl    edi,cl
c0028a56:	89 f9                	mov    ecx,edi
c0028a58:	09 d9                	or     ecx,ebx
c0028a5a:	0f 95 c3             	setne  bl
c0028a5d:	0f b6 db             	movzx  ebx,bl
c0028a60:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028a65:	29 c1                	sub    ecx,eax
c0028a67:	d3 ea                	shr    edx,cl
c0028a69:	09 d3                	or     ebx,edx
c0028a6b:	31 c0                	xor    eax,eax
c0028a6d:	eb 3a                	jmp    c0028aa9 <__divdf3+0x32d>
c0028a6f:	83 c0 1f             	add    eax,0x1f
c0028a72:	89 d7                	mov    edi,edx
c0028a74:	88 c1                	mov    cl,al
c0028a76:	d3 e7                	shl    edi,cl
c0028a78:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028a7b:	89 df                	mov    edi,ebx
c0028a7d:	89 f1                	mov    ecx,esi
c0028a7f:	d3 ef                	shr    edi,cl
c0028a81:	89 f9                	mov    ecx,edi
c0028a83:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028a86:	09 cf                	or     edi,ecx
c0028a88:	88 c1                	mov    cl,al
c0028a8a:	d3 e3                	shl    ebx,cl
c0028a8c:	85 db                	test   ebx,ebx
c0028a8e:	0f 95 c3             	setne  bl
c0028a91:	0f b6 db             	movzx  ebx,bl
c0028a94:	09 fb                	or     ebx,edi
c0028a96:	89 f1                	mov    ecx,esi
c0028a98:	d3 ea                	shr    edx,cl
c0028a9a:	31 c0                	xor    eax,eax
c0028a9c:	eb 0d                	jmp    c0028aab <__divdf3+0x32f>
c0028a9e:	b8 ff 07 00 00       	mov    eax,0x7ff
c0028aa3:	eb 02                	jmp    c0028aa7 <__divdf3+0x32b>
c0028aa5:	31 c0                	xor    eax,eax
c0028aa7:	31 db                	xor    ebx,ebx
c0028aa9:	31 d2                	xor    edx,edx
c0028aab:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0028aae:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028ab1:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0028ab7:	09 c8                	or     eax,ecx
c0028ab9:	c1 e0 14             	shl    eax,0x14
c0028abc:	89 d1                	mov    ecx,edx
c0028abe:	c1 e9 0b             	shr    ecx,0xb
c0028ac1:	09 c8                	or     eax,ecx
c0028ac3:	89 c6                	mov    esi,eax
c0028ac5:	89 d9                	mov    ecx,ebx
c0028ac7:	c1 e9 0b             	shr    ecx,0xb
c0028aca:	c1 e2 15             	shl    edx,0x15
c0028acd:	09 ca                	or     edx,ecx
c0028acf:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0028ad5:	0f 95 c0             	setne  al
c0028ad8:	09 c1                	or     ecx,eax
c0028ada:	83 e1 01             	and    ecx,0x1
c0028add:	c1 eb 0a             	shr    ebx,0xa
c0028ae0:	21 cb                	and    ebx,ecx
c0028ae2:	01 d3                	add    ebx,edx
c0028ae4:	89 d8                	mov    eax,ebx
c0028ae6:	83 d6 00             	adc    esi,0x0
c0028ae9:	89 f2                	mov    edx,esi
c0028aeb:	89 c7                	mov    edi,eax
c0028aed:	89 d1                	mov    ecx,edx
c0028aef:	89 f8                	mov    eax,edi
c0028af1:	89 ca                	mov    edx,ecx
c0028af3:	83 c4 2c             	add    esp,0x2c
c0028af6:	5b                   	pop    ebx
c0028af7:	5e                   	pop    esi
c0028af8:	5f                   	pop    edi
c0028af9:	5d                   	pop    ebp
c0028afa:	c3                   	ret    

c0028afb <__floatsidf>:
c0028afb:	55                   	push   ebp
c0028afc:	89 e5                	mov    ebp,esp
c0028afe:	56                   	push   esi
c0028aff:	53                   	push   ebx
c0028b00:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028b03:	85 db                	test   ebx,ebx
c0028b05:	7e 15                	jle    c0028b1c <__floatsidf+0x21>
c0028b07:	0f bd cb             	bsr    ecx,ebx
c0028b0a:	83 f1 1f             	xor    ecx,0x1f
c0028b0d:	d3 e3                	shl    ebx,cl
c0028b0f:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028b15:	b8 1e 04 00 00       	mov    eax,0x41e
c0028b1a:	eb 21                	jmp    c0028b3d <__floatsidf+0x42>
c0028b1c:	b8 00 00 00 00       	mov    eax,0x0
c0028b21:	ba 00 00 00 00       	mov    edx,0x0
c0028b26:	74 2a                	je     c0028b52 <__floatsidf+0x57>
c0028b28:	f7 db                	neg    ebx
c0028b2a:	0f bd cb             	bsr    ecx,ebx
c0028b2d:	83 f1 1f             	xor    ecx,0x1f
c0028b30:	d3 e3                	shl    ebx,cl
c0028b32:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028b38:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028b3d:	29 c8                	sub    eax,ecx
c0028b3f:	c1 e0 14             	shl    eax,0x14
c0028b42:	89 c1                	mov    ecx,eax
c0028b44:	89 de                	mov    esi,ebx
c0028b46:	c1 ee 0b             	shr    esi,0xb
c0028b49:	09 f1                	or     ecx,esi
c0028b4b:	89 ca                	mov    edx,ecx
c0028b4d:	c1 e3 15             	shl    ebx,0x15
c0028b50:	89 d8                	mov    eax,ebx
c0028b52:	5b                   	pop    ebx
c0028b53:	5e                   	pop    esi
c0028b54:	5d                   	pop    ebp
c0028b55:	c3                   	ret    

c0028b56 <__floatunsidf>:
c0028b56:	55                   	push   ebp
c0028b57:	89 e5                	mov    ebp,esp
c0028b59:	56                   	push   esi
c0028b5a:	53                   	push   ebx
c0028b5b:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028b5e:	85 db                	test   ebx,ebx
c0028b60:	74 2a                	je     c0028b8c <__floatunsidf+0x36>
c0028b62:	0f bd cb             	bsr    ecx,ebx
c0028b65:	83 f1 1f             	xor    ecx,0x1f
c0028b68:	d3 e3                	shl    ebx,cl
c0028b6a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028b70:	b8 1e 04 00 00       	mov    eax,0x41e
c0028b75:	29 c8                	sub    eax,ecx
c0028b77:	c1 e0 14             	shl    eax,0x14
c0028b7a:	89 c1                	mov    ecx,eax
c0028b7c:	89 de                	mov    esi,ebx
c0028b7e:	c1 ee 0b             	shr    esi,0xb
c0028b81:	09 f1                	or     ecx,esi
c0028b83:	89 ca                	mov    edx,ecx
c0028b85:	c1 e3 15             	shl    ebx,0x15
c0028b88:	89 d8                	mov    eax,ebx
c0028b8a:	eb 04                	jmp    c0028b90 <__floatunsidf+0x3a>
c0028b8c:	31 c0                	xor    eax,eax
c0028b8e:	31 d2                	xor    edx,edx
c0028b90:	5b                   	pop    ebx
c0028b91:	5e                   	pop    esi
c0028b92:	5d                   	pop    ebp
c0028b93:	c3                   	ret    

c0028b94 <__fixdfsi>:
c0028b94:	55                   	push   ebp
c0028b95:	89 e5                	mov    ebp,esp
c0028b97:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028b9a:	89 d1                	mov    ecx,edx
c0028b9c:	c1 e1 0b             	shl    ecx,0xb
c0028b9f:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028ba5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028ba8:	c1 e8 15             	shr    eax,0x15
c0028bab:	09 c1                	or     ecx,eax
c0028bad:	c1 fa 14             	sar    edx,0x14
c0028bb0:	78 1f                	js     c0028bd1 <__fixdfsi+0x3d>
c0028bb2:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028bb8:	31 c0                	xor    eax,eax
c0028bba:	83 fa 1e             	cmp    edx,0x1e
c0028bbd:	77 40                	ja     c0028bff <__fixdfsi+0x6b>
c0028bbf:	89 c8                	mov    eax,ecx
c0028bc1:	0d 00 00 00 80       	or     eax,0x80000000
c0028bc6:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028bcb:	29 d1                	sub    ecx,edx
c0028bcd:	d3 e8                	shr    eax,cl
c0028bcf:	eb 2e                	jmp    c0028bff <__fixdfsi+0x6b>
c0028bd1:	31 c0                	xor    eax,eax
c0028bd3:	81 c2 01 04 00 00    	add    edx,0x401
c0028bd9:	78 24                	js     c0028bff <__fixdfsi+0x6b>
c0028bdb:	83 fa 1e             	cmp    edx,0x1e
c0028bde:	7e 09                	jle    c0028be9 <__fixdfsi+0x55>
c0028be0:	83 fa 1f             	cmp    edx,0x1f
c0028be3:	75 18                	jne    c0028bfd <__fixdfsi+0x69>
c0028be5:	85 c9                	test   ecx,ecx
c0028be7:	75 14                	jne    c0028bfd <__fixdfsi+0x69>
c0028be9:	89 c8                	mov    eax,ecx
c0028beb:	0d 00 00 00 80       	or     eax,0x80000000
c0028bf0:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028bf5:	29 d1                	sub    ecx,edx
c0028bf7:	d3 e8                	shr    eax,cl
c0028bf9:	f7 d8                	neg    eax
c0028bfb:	eb 02                	jmp    c0028bff <__fixdfsi+0x6b>
c0028bfd:	31 c0                	xor    eax,eax
c0028bff:	5d                   	pop    ebp
c0028c00:	c3                   	ret    

c0028c01 <__fixunsdfsi>:
c0028c01:	55                   	push   ebp
c0028c02:	89 e5                	mov    ebp,esp
c0028c04:	53                   	push   ebx
c0028c05:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028c08:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028c0b:	89 d3                	mov    ebx,edx
c0028c0d:	c1 fb 14             	sar    ebx,0x14
c0028c10:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0028c16:	31 c0                	xor    eax,eax
c0028c18:	83 fb 1f             	cmp    ebx,0x1f
c0028c1b:	77 1d                	ja     c0028c3a <__fixunsdfsi+0x39>
c0028c1d:	89 d0                	mov    eax,edx
c0028c1f:	c1 e0 0b             	shl    eax,0xb
c0028c22:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028c27:	c1 e9 15             	shr    ecx,0x15
c0028c2a:	09 c8                	or     eax,ecx
c0028c2c:	0d 00 00 00 80       	or     eax,0x80000000
c0028c31:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028c36:	29 d9                	sub    ecx,ebx
c0028c38:	d3 e8                	shr    eax,cl
c0028c3a:	5b                   	pop    ebx
c0028c3b:	5d                   	pop    ebp
c0028c3c:	c3                   	ret    

c0028c3d <__cmpdf2>:
c0028c3d:	55                   	push   ebp
c0028c3e:	89 e5                	mov    ebp,esp
c0028c40:	57                   	push   edi
c0028c41:	56                   	push   esi
c0028c42:	53                   	push   ebx
c0028c43:	83 ec 0c             	sub    esp,0xc
c0028c46:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028c49:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028c4c:	89 ca                	mov    edx,ecx
c0028c4e:	c1 ea 14             	shr    edx,0x14
c0028c51:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0028c57:	89 cb                	mov    ebx,ecx
c0028c59:	c1 fb 1f             	sar    ebx,0x1f
c0028c5c:	31 da                	xor    edx,ebx
c0028c5e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028c61:	89 df                	mov    edi,ebx
c0028c63:	c1 e7 0b             	shl    edi,0xb
c0028c66:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028c69:	c1 e1 0b             	shl    ecx,0xb
c0028c6c:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028c72:	c1 eb 15             	shr    ebx,0x15
c0028c75:	09 d9                	or     ecx,ebx
c0028c77:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028c7a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028c7d:	89 ce                	mov    esi,ecx
c0028c7f:	c1 ee 14             	shr    esi,0x14
c0028c82:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028c88:	89 cb                	mov    ebx,ecx
c0028c8a:	c1 fb 1f             	sar    ebx,0x1f
c0028c8d:	31 de                	xor    esi,ebx
c0028c8f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0028c92:	89 df                	mov    edi,ebx
c0028c94:	c1 e7 0b             	shl    edi,0xb
c0028c97:	c1 e1 0b             	shl    ecx,0xb
c0028c9a:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028ca0:	c1 eb 15             	shr    ebx,0x15
c0028ca3:	09 d9                	or     ecx,ebx
c0028ca5:	89 d3                	mov    ebx,edx
c0028ca7:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028cad:	43                   	inc    ebx
c0028cae:	83 fb 01             	cmp    ebx,0x1
c0028cb1:	77 08                	ja     c0028cbb <__cmpdf2+0x7e>
c0028cb3:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028cb6:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028cb9:	75 68                	jne    c0028d23 <__cmpdf2+0xe6>
c0028cbb:	89 f3                	mov    ebx,esi
c0028cbd:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028cc3:	43                   	inc    ebx
c0028cc4:	83 fb 01             	cmp    ebx,0x1
c0028cc7:	77 06                	ja     c0028ccf <__cmpdf2+0x92>
c0028cc9:	89 fb                	mov    ebx,edi
c0028ccb:	09 cb                	or     ebx,ecx
c0028ccd:	75 54                	jne    c0028d23 <__cmpdf2+0xe6>
c0028ccf:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028cd2:	09 f8                	or     eax,edi
c0028cd4:	09 c8                	or     eax,ecx
c0028cd6:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028cd9:	75 12                	jne    c0028ced <__cmpdf2+0xb0>
c0028cdb:	8d 42 01             	lea    eax,[edx+0x1]
c0028cde:	83 f8 01             	cmp    eax,0x1
c0028ce1:	77 0a                	ja     c0028ced <__cmpdf2+0xb0>
c0028ce3:	8d 5e 01             	lea    ebx,[esi+0x1]
c0028ce6:	31 c0                	xor    eax,eax
c0028ce8:	83 fb 01             	cmp    ebx,0x1
c0028ceb:	76 36                	jbe    c0028d23 <__cmpdf2+0xe6>
c0028ced:	b8 01 00 00 00       	mov    eax,0x1
c0028cf2:	39 f2                	cmp    edx,esi
c0028cf4:	7f 2d                	jg     c0028d23 <__cmpdf2+0xe6>
c0028cf6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028cfb:	7c 26                	jl     c0028d23 <__cmpdf2+0xe6>
c0028cfd:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028d00:	77 07                	ja     c0028d09 <__cmpdf2+0xcc>
c0028d02:	72 16                	jb     c0028d1a <__cmpdf2+0xdd>
c0028d04:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028d07:	76 0a                	jbe    c0028d13 <__cmpdf2+0xd6>
c0028d09:	89 d0                	mov    eax,edx
c0028d0b:	c1 f8 1f             	sar    eax,0x1f
c0028d0e:	83 c8 01             	or     eax,0x1
c0028d11:	eb 10                	jmp    c0028d23 <__cmpdf2+0xe6>
c0028d13:	b8 00 00 00 00       	mov    eax,0x0
c0028d18:	73 09                	jae    c0028d23 <__cmpdf2+0xe6>
c0028d1a:	89 d0                	mov    eax,edx
c0028d1c:	c1 f8 1f             	sar    eax,0x1f
c0028d1f:	83 e0 02             	and    eax,0x2
c0028d22:	48                   	dec    eax
c0028d23:	83 c4 0c             	add    esp,0xc
c0028d26:	5b                   	pop    ebx
c0028d27:	5e                   	pop    esi
c0028d28:	5f                   	pop    edi
c0028d29:	5d                   	pop    ebp
c0028d2a:	c3                   	ret    

c0028d2b <__eqdf2>:
c0028d2b:	55                   	push   ebp
c0028d2c:	89 e5                	mov    ebp,esp
c0028d2e:	50                   	push   eax
c0028d2f:	6a 01                	push   0x1
c0028d31:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028d34:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028d37:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028d3a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028d3d:	e8 fb fe ff ff       	call   c0028c3d <__cmpdf2>
c0028d42:	83 c4 18             	add    esp,0x18
c0028d45:	c9                   	leave  
c0028d46:	c3                   	ret    

c0028d47 <__nedf2>:
c0028d47:	eb e2                	jmp    c0028d2b <__eqdf2>

c0028d49 <__gtdf2>:
c0028d49:	55                   	push   ebp
c0028d4a:	89 e5                	mov    ebp,esp
c0028d4c:	50                   	push   eax
c0028d4d:	6a ff                	push   0xffffffff
c0028d4f:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028d52:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028d55:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028d58:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028d5b:	e8 dd fe ff ff       	call   c0028c3d <__cmpdf2>
c0028d60:	83 c4 18             	add    esp,0x18
c0028d63:	c9                   	leave  
c0028d64:	c3                   	ret    

c0028d65 <__gedf2>:
c0028d65:	eb e2                	jmp    c0028d49 <__gtdf2>

c0028d67 <__ltdf2>:
c0028d67:	eb c2                	jmp    c0028d2b <__eqdf2>

c0028d69 <__ledf2>:
c0028d69:	eb c0                	jmp    c0028d2b <__eqdf2>

c0028d6b <__truncdfsf2>:
c0028d6b:	55                   	push   ebp
c0028d6c:	89 e5                	mov    ebp,esp
c0028d6e:	57                   	push   edi
c0028d6f:	56                   	push   esi
c0028d70:	53                   	push   ebx
c0028d71:	83 ec 0c             	sub    esp,0xc
c0028d74:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028d77:	89 d1                	mov    ecx,edx
c0028d79:	c1 f9 14             	sar    ecx,0x14
c0028d7c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028d7f:	89 df                	mov    edi,ebx
c0028d81:	c1 e7 0b             	shl    edi,0xb
c0028d84:	89 d0                	mov    eax,edx
c0028d86:	c1 e0 0b             	shl    eax,0xb
c0028d89:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028d8e:	c1 eb 15             	shr    ebx,0x15
c0028d91:	09 d8                	or     eax,ebx
c0028d93:	89 cb                	mov    ebx,ecx
c0028d95:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028d9b:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028da1:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028da7:	0f 86 9e 00 00 00    	jbe    c0028e4b <__truncdfsf2+0xe0>
c0028dad:	85 db                	test   ebx,ebx
c0028daf:	75 0a                	jne    c0028dbb <__truncdfsf2+0x50>
c0028db1:	c1 fa 17             	sar    edx,0x17
c0028db4:	30 d2                	xor    dl,dl
c0028db6:	e9 84 00 00 00       	jmp    c0028e3f <__truncdfsf2+0xd4>
c0028dbb:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028dc1:	83 fe 83             	cmp    esi,0xffffff83
c0028dc4:	7d 4b                	jge    c0028e11 <__truncdfsf2+0xa6>
c0028dc6:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0028dcb:	29 f1                	sub    ecx,esi
c0028dcd:	83 f9 1f             	cmp    ecx,0x1f
c0028dd0:	7f 6b                	jg     c0028e3d <__truncdfsf2+0xd2>
c0028dd2:	0d 00 00 00 80       	or     eax,0x80000000
c0028dd7:	89 c3                	mov    ebx,eax
c0028dd9:	d3 eb                	shr    ebx,cl
c0028ddb:	be 01 00 00 00       	mov    esi,0x1
c0028de0:	d3 e6                	shl    esi,cl
c0028de2:	4e                   	dec    esi
c0028de3:	21 f0                	and    eax,esi
c0028de5:	09 f8                	or     eax,edi
c0028de7:	0f 95 c0             	setne  al
c0028dea:	0f b6 c0             	movzx  eax,al
c0028ded:	09 c3                	or     ebx,eax
c0028def:	89 d9                	mov    ecx,ebx
c0028df1:	c1 e9 08             	shr    ecx,0x8
c0028df4:	f6 c3 7f             	test   bl,0x7f
c0028df7:	0f 95 c0             	setne  al
c0028dfa:	09 c8                	or     eax,ecx
c0028dfc:	83 e0 01             	and    eax,0x1
c0028dff:	c1 eb 07             	shr    ebx,0x7
c0028e02:	21 c3                	and    ebx,eax
c0028e04:	81 e2 00 00 00 80    	and    edx,0x80000000
c0028e0a:	09 d1                	or     ecx,edx
c0028e0c:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0028e0f:	eb 76                	jmp    c0028e87 <__truncdfsf2+0x11c>
c0028e11:	83 c6 80             	add    esi,0xffffff80
c0028e14:	7e 1d                	jle    c0028e33 <__truncdfsf2+0xc8>
c0028e16:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028e1c:	75 0b                	jne    c0028e29 <__truncdfsf2+0xbe>
c0028e1e:	09 f8                	or     eax,edi
c0028e20:	74 09                	je     c0028e2b <__truncdfsf2+0xc0>
c0028e22:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0028e27:	eb 02                	jmp    c0028e2b <__truncdfsf2+0xc0>
c0028e29:	31 c0                	xor    eax,eax
c0028e2b:	c1 fa 17             	sar    edx,0x17
c0028e2e:	80 ca ff             	or     dl,0xff
c0028e31:	eb 0e                	jmp    c0028e41 <__truncdfsf2+0xd6>
c0028e33:	c1 fa 1f             	sar    edx,0x1f
c0028e36:	c1 e2 08             	shl    edx,0x8
c0028e39:	09 ca                	or     edx,ecx
c0028e3b:	eb 04                	jmp    c0028e41 <__truncdfsf2+0xd6>
c0028e3d:	31 d2                	xor    edx,edx
c0028e3f:	31 c0                	xor    eax,eax
c0028e41:	c1 e2 17             	shl    edx,0x17
c0028e44:	c1 e8 08             	shr    eax,0x8
c0028e47:	09 d0                	or     eax,edx
c0028e49:	eb 3c                	jmp    c0028e87 <__truncdfsf2+0x11c>
c0028e4b:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028e51:	89 ca                	mov    edx,ecx
c0028e53:	c1 fa 0b             	sar    edx,0xb
c0028e56:	c1 e2 08             	shl    edx,0x8
c0028e59:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028e5c:	31 db                	xor    ebx,ebx
c0028e5e:	85 ff                	test   edi,edi
c0028e60:	0f 95 c3             	setne  bl
c0028e63:	09 d8                	or     eax,ebx
c0028e65:	89 c3                	mov    ebx,eax
c0028e67:	c1 eb 08             	shr    ebx,0x8
c0028e6a:	a8 7f                	test   al,0x7f
c0028e6c:	0f 95 c2             	setne  dl
c0028e6f:	89 d6                	mov    esi,edx
c0028e71:	09 de                	or     esi,ebx
c0028e73:	83 e6 01             	and    esi,0x1
c0028e76:	c1 e8 07             	shr    eax,0x7
c0028e79:	21 f0                	and    eax,esi
c0028e7b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028e7e:	09 ca                	or     edx,ecx
c0028e80:	c1 e2 17             	shl    edx,0x17
c0028e83:	09 da                	or     edx,ebx
c0028e85:	01 d0                	add    eax,edx
c0028e87:	83 c4 0c             	add    esp,0xc
c0028e8a:	5b                   	pop    ebx
c0028e8b:	5e                   	pop    esi
c0028e8c:	5f                   	pop    edi
c0028e8d:	5d                   	pop    ebp
c0028e8e:	c3                   	ret    

c0028e8f <__extendsfdf2>:
c0028e8f:	55                   	push   ebp
c0028e90:	89 e5                	mov    ebp,esp
c0028e92:	57                   	push   edi
c0028e93:	56                   	push   esi
c0028e94:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0028e97:	89 d1                	mov    ecx,edx
c0028e99:	c1 f9 17             	sar    ecx,0x17
c0028e9c:	c1 e2 08             	shl    edx,0x8
c0028e9f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0028ea5:	89 c8                	mov    eax,ecx
c0028ea7:	80 e4 f8             	and    ah,0xf8
c0028eaa:	8d 71 01             	lea    esi,[ecx+0x1]
c0028ead:	81 e6 fe 00 00 00    	and    esi,0xfe
c0028eb3:	75 27                	jne    c0028edc <__extendsfdf2+0x4d>
c0028eb5:	81 e1 ff 00 00 00    	and    ecx,0xff
c0028ebb:	75 18                	jne    c0028ed5 <__extendsfdf2+0x46>
c0028ebd:	85 d2                	test   edx,edx
c0028ebf:	74 20                	je     c0028ee1 <__extendsfdf2+0x52>
c0028ec1:	41                   	inc    ecx
c0028ec2:	01 d2                	add    edx,edx
c0028ec4:	79 fb                	jns    c0028ec1 <__extendsfdf2+0x32>
c0028ec6:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028ecc:	29 c8                	sub    eax,ecx
c0028ece:	05 81 03 00 00       	add    eax,0x381
c0028ed3:	eb 0c                	jmp    c0028ee1 <__extendsfdf2+0x52>
c0028ed5:	05 00 07 00 00       	add    eax,0x700
c0028eda:	eb 05                	jmp    c0028ee1 <__extendsfdf2+0x52>
c0028edc:	05 80 03 00 00       	add    eax,0x380
c0028ee1:	c1 e0 14             	shl    eax,0x14
c0028ee4:	89 c1                	mov    ecx,eax
c0028ee6:	89 d0                	mov    eax,edx
c0028ee8:	c1 e8 0b             	shr    eax,0xb
c0028eeb:	09 c1                	or     ecx,eax
c0028eed:	c1 e2 15             	shl    edx,0x15
c0028ef0:	89 d0                	mov    eax,edx
c0028ef2:	89 ca                	mov    edx,ecx
c0028ef4:	5e                   	pop    esi
c0028ef5:	5f                   	pop    edi
c0028ef6:	5d                   	pop    ebp
c0028ef7:	c3                   	ret    
c0028ef8:	66 90                	xchg   ax,ax
c0028efa:	66 90                	xchg   ax,ax
c0028efc:	66 90                	xchg   ax,ax
c0028efe:	66 90                	xchg   ax,ax

c0028f00 <fabs>:
c0028f00:	83 ec 0c             	sub    esp,0xc
c0028f03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f07:	89 04 24             	mov    DWORD PTR [esp],eax
c0028f0a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028f0e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028f13:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028f17:	dd 04 24             	fld    QWORD PTR [esp]
c0028f1a:	83 c4 0c             	add    esp,0xc
c0028f1d:	c3                   	ret    
c0028f1e:	66 90                	xchg   ax,ax

c0028f20 <lrint>:
c0028f20:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028f24:	83 ec 04             	sub    esp,0x4
c0028f27:	db 1c 24             	fistp  DWORD PTR [esp]
c0028f2a:	58                   	pop    eax
c0028f2b:	c3                   	ret    

c0028f2c <lrintf>:
c0028f2c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028f30:	83 ec 04             	sub    esp,0x4
c0028f33:	db 1c 24             	fistp  DWORD PTR [esp]
c0028f36:	58                   	pop    eax
c0028f37:	c3                   	ret    

Disassembly of section .init:

c0028f38 <_init>:
c0028f38:	55                   	push   ebp
c0028f39:	89 e5                	mov    ebp,esp
c0028f3b:	e8 d8 71 fd ff       	call   c0000118 <frame_dummy>
c0028f40:	e8 5b e0 ff ff       	call   c0026fa0 <__do_global_ctors_aux>
c0028f45:	5d                   	pop    ebp
c0028f46:	c3                   	ret    

Disassembly of section .fini:

c0028f47 <_fini>:
c0028f47:	55                   	push   ebp
c0028f48:	89 e5                	mov    ebp,esp
c0028f4a:	e8 59 71 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0028f4f:	5d                   	pop    ebp
c0028f50:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028f52 <Computer::~Computer()>:
c0028f52:	83 ec 0c             	sub    esp,0xc
c0028f55:	ba 88 ab 02 c0       	mov    edx,0xc002ab88
c0028f5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f5e:	89 10                	mov    DWORD PTR [eax],edx
c0028f60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f64:	83 ec 0c             	sub    esp,0xc
c0028f67:	50                   	push   eax
c0028f68:	e8 05 ad fe ff       	call   c0013c72 <Device::~Device()>
c0028f6d:	83 c4 10             	add    esp,0x10
c0028f70:	90                   	nop
c0028f71:	83 c4 0c             	add    esp,0xc
c0028f74:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028f76 <Computer::~Computer()>:
c0028f76:	83 ec 0c             	sub    esp,0xc
c0028f79:	83 ec 0c             	sub    esp,0xc
c0028f7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f80:	e8 cd ff ff ff       	call   c0028f52 <Computer::~Computer()>
c0028f85:	83 c4 10             	add    esp,0x10
c0028f88:	83 ec 08             	sub    esp,0x8
c0028f8b:	68 ec 01 00 00       	push   0x1ec
c0028f90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f94:	e8 f2 98 fe ff       	call   c001288b <operator delete(void*, unsigned long)>
c0028f99:	83 c4 10             	add    esp,0x10
c0028f9c:	83 c4 0c             	add    esp,0xc
c0028f9f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028fa0 <idleCommon()>:
c0028fa0:	83 ec 0c             	sub    esp,0xc
c0028fa3:	fa                   	cli    
c0028fa4:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c0028faa:	e8 a5 51 ff ff       	call   c001e154 <schedule()>
c0028faf:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c0028fb4:	48                   	dec    eax
c0028fb5:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c0028fba:	75 01                	jne    c0028fbd <idleCommon()+0x1d>
c0028fbc:	fb                   	sti    
c0028fbd:	83 c4 0c             	add    esp,0xc
c0028fc0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028fc2 <LinkedList<UnixFile>::~LinkedList()>:
c0028fc2:	90                   	nop
c0028fc3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028fc4 <LinkedList<UnixFile>::LinkedList()>:
c0028fc4:	83 ec 0c             	sub    esp,0xc
c0028fc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fcb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028fd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fd5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028fdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fe0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028fe7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028feb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028ff1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ff5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028ffc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029000:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029007:	83 ec 0c             	sub    esp,0xc
c002900a:	68 12 ae 02 c0       	push   0xc002ae12
c002900f:	e8 57 99 fe ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0029014:	83 c4 10             	add    esp,0x10
c0029017:	90                   	nop
c0029018:	83 c4 0c             	add    esp,0xc
c002901b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002901c <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002901c:	83 ec 0c             	sub    esp,0xc
c002901f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0029024:	75 10                	jne    c0029036 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0029026:	83 ec 0c             	sub    esp,0xc
c0029029:	68 2c ae 02 c0       	push   0xc002ae2c
c002902e:	e8 6e 13 ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c0029033:	83 c4 10             	add    esp,0x10
c0029036:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002903a:	8b 00                	mov    eax,DWORD PTR [eax]
c002903c:	85 c0                	test   eax,eax
c002903e:	74 34                	je     c0029074 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0029040:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029044:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029047:	85 c0                	test   eax,eax
c0029049:	74 29                	je     c0029074 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002904b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002904f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029052:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029056:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029059:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002905d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029061:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029064:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029068:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002906b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029072:	eb 65                	jmp    c00290d9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029074:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029078:	8b 00                	mov    eax,DWORD PTR [eax]
c002907a:	85 c0                	test   eax,eax
c002907c:	75 4b                	jne    c00290c9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002907e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029082:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029085:	85 c0                	test   eax,eax
c0029087:	75 40                	jne    c00290c9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0029089:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002908d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029091:	89 10                	mov    DWORD PTR [eax],edx
c0029093:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029097:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002909b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002909e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00290a5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00290ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290b0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00290b3:	85 c0                	test   eax,eax
c00290b5:	74 22                	je     c00290d9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00290b7:	83 ec 0c             	sub    esp,0xc
c00290ba:	68 4e ae 02 c0       	push   0xc002ae4e
c00290bf:	e8 dd 12 ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c00290c4:	83 c4 10             	add    esp,0x10
c00290c7:	eb 10                	jmp    c00290d9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00290c9:	83 ec 0c             	sub    esp,0xc
c00290cc:	68 58 ae 02 c0       	push   0xc002ae58
c00290d1:	e8 cb 12 ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c00290d6:	83 c4 10             	add    esp,0x10
c00290d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290dd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00290e0:	8d 50 01             	lea    edx,[eax+0x1]
c00290e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290e7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00290ea:	90                   	nop
c00290eb:	83 c4 0c             	add    esp,0xc
c00290ee:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00290f0 <LinkedList<UnixFile>::getFirstElement()>:
c00290f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00290f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00290f6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00290f8 <LinkedList<UnixFile>::removeFirst()>:
c00290f8:	83 ec 0c             	sub    esp,0xc
c00290fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0029101:	85 c0                	test   eax,eax
c0029103:	75 12                	jne    c0029117 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0029105:	83 ec 0c             	sub    esp,0xc
c0029108:	68 64 ae 02 c0       	push   0xc002ae64
c002910d:	e8 8f 12 ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c0029112:	83 c4 10             	add    esp,0x10
c0029115:	eb 7e                	jmp    c0029195 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0029117:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002911b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002911e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029121:	85 c0                	test   eax,eax
c0029123:	74 10                	je     c0029135 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0029125:	83 ec 0c             	sub    esp,0xc
c0029128:	68 af ae 02 c0       	push   0xc002aeaf
c002912d:	e8 6f 12 ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c0029132:	83 c4 10             	add    esp,0x10
c0029135:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029139:	8b 00                	mov    eax,DWORD PTR [eax]
c002913b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002913e:	85 c0                	test   eax,eax
c0029140:	75 33                	jne    c0029175 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0029142:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029146:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002914c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029150:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029157:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002915b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002915e:	83 f8 01             	cmp    eax,0x1
c0029161:	74 21                	je     c0029184 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0029163:	83 ec 0c             	sub    esp,0xc
c0029166:	68 88 ae 02 c0       	push   0xc002ae88
c002916b:	e8 31 12 ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c0029170:	83 c4 10             	add    esp,0x10
c0029173:	eb 0f                	jmp    c0029184 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0029175:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029179:	8b 00                	mov    eax,DWORD PTR [eax]
c002917b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002917e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029182:	89 10                	mov    DWORD PTR [eax],edx
c0029184:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029188:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002918b:	8d 50 ff             	lea    edx,[eax-0x1]
c002918e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029192:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029195:	83 c4 0c             	add    esp,0xc
c0029198:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002919a <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002919a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002919e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00291a1:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00291a2 <DriverlessDevice::~DriverlessDevice()>:
c00291a2:	ba 5c b6 02 c0       	mov    edx,0xc002b65c
c00291a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00291ab:	89 10                	mov    DWORD PTR [eax],edx
c00291ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00291b1:	50                   	push   eax
c00291b2:	e8 bb aa fe ff       	call   c0013c72 <Device::~Device()>
c00291b7:	83 c4 04             	add    esp,0x4
c00291ba:	90                   	nop
c00291bb:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00291bc <DriverlessDevice::~DriverlessDevice()>:
c00291bc:	83 ec 0c             	sub    esp,0xc
c00291bf:	83 ec 0c             	sub    esp,0xc
c00291c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291c6:	e8 d7 ff ff ff       	call   c00291a2 <DriverlessDevice::~DriverlessDevice()>
c00291cb:	83 c4 10             	add    esp,0x10
c00291ce:	83 ec 08             	sub    esp,0x8
c00291d1:	68 58 01 00 00       	push   0x158
c00291d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291da:	e8 ac 96 fe ff       	call   c001288b <operator delete(void*, unsigned long)>
c00291df:	83 c4 10             	add    esp,0x10
c00291e2:	83 c4 0c             	add    esp,0xc
c00291e5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00291e6 <LinkedList<Device>::addElement(Device*)>:
c00291e6:	83 ec 0c             	sub    esp,0xc
c00291e9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00291ee:	75 10                	jne    c0029200 <LinkedList<Device>::addElement(Device*)+0x1a>
c00291f0:	83 ec 0c             	sub    esp,0xc
c00291f3:	68 2c ae 02 c0       	push   0xc002ae2c
c00291f8:	e8 a4 11 ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c00291fd:	83 c4 10             	add    esp,0x10
c0029200:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029204:	8b 00                	mov    eax,DWORD PTR [eax]
c0029206:	85 c0                	test   eax,eax
c0029208:	74 3a                	je     c0029244 <LinkedList<Device>::addElement(Device*)+0x5e>
c002920a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002920e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029211:	85 c0                	test   eax,eax
c0029213:	74 2f                	je     c0029244 <LinkedList<Device>::addElement(Device*)+0x5e>
c0029215:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029219:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002921c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029220:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0029226:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002922a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002922e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029231:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029235:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029238:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0029242:	eb 68                	jmp    c00292ac <LinkedList<Device>::addElement(Device*)+0xc6>
c0029244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029248:	8b 00                	mov    eax,DWORD PTR [eax]
c002924a:	85 c0                	test   eax,eax
c002924c:	75 4e                	jne    c002929c <LinkedList<Device>::addElement(Device*)+0xb6>
c002924e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029252:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029255:	85 c0                	test   eax,eax
c0029257:	75 43                	jne    c002929c <LinkedList<Device>::addElement(Device*)+0xb6>
c0029259:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002925d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029261:	89 10                	mov    DWORD PTR [eax],edx
c0029263:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029267:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002926b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002926e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029272:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029275:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002927f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029283:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029286:	85 c0                	test   eax,eax
c0029288:	74 22                	je     c00292ac <LinkedList<Device>::addElement(Device*)+0xc6>
c002928a:	83 ec 0c             	sub    esp,0xc
c002928d:	68 4e ae 02 c0       	push   0xc002ae4e
c0029292:	e8 0a 11 ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c0029297:	83 c4 10             	add    esp,0x10
c002929a:	eb 10                	jmp    c00292ac <LinkedList<Device>::addElement(Device*)+0xc6>
c002929c:	83 ec 0c             	sub    esp,0xc
c002929f:	68 58 ae 02 c0       	push   0xc002ae58
c00292a4:	e8 f8 10 ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c00292a9:	83 c4 10             	add    esp,0x10
c00292ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292b0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00292b3:	8d 50 01             	lea    edx,[eax+0x1]
c00292b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292ba:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00292bd:	90                   	nop
c00292be:	83 c4 0c             	add    esp,0xc
c00292c1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00292c2 <LinkedList<Device>::LinkedList()>:
c00292c2:	83 ec 0c             	sub    esp,0xc
c00292c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292c9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00292cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292d3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00292da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292de:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00292e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292e9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00292ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292f3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00292fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292fe:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029305:	83 ec 0c             	sub    esp,0xc
c0029308:	68 12 ae 02 c0       	push   0xc002ae12
c002930d:	e8 59 96 fe ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c0029312:	83 c4 10             	add    esp,0x10
c0029315:	90                   	nop
c0029316:	83 c4 0c             	add    esp,0xc
c0029319:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002931a <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002931a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002931e:	8b 00                	mov    eax,DWORD PTR [eax]
c0029320:	85 c0                	test   eax,eax
c0029322:	75 0e                	jne    c0029332 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0029324:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029328:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002932b:	85 c0                	test   eax,eax
c002932d:	75 03                	jne    c0029332 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002932f:	b0 01                	mov    al,0x1
c0029331:	c3                   	ret    
c0029332:	b0 00                	mov    al,0x0
c0029334:	90                   	nop
c0029335:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0029336 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0029336:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002933a:	8b 00                	mov    eax,DWORD PTR [eax]
c002933c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c002933e <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c002933e:	83 ec 0c             	sub    esp,0xc
c0029341:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029345:	8b 00                	mov    eax,DWORD PTR [eax]
c0029347:	85 c0                	test   eax,eax
c0029349:	75 15                	jne    c0029360 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002934b:	83 ec 0c             	sub    esp,0xc
c002934e:	68 64 ae 02 c0       	push   0xc002ae64
c0029353:	e8 49 10 ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c0029358:	83 c4 10             	add    esp,0x10
c002935b:	e9 88 00 00 00       	jmp    c00293e8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0029360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029364:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029367:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002936a:	85 c0                	test   eax,eax
c002936c:	0f 95 c0             	setne  al
c002936f:	84 c0                	test   al,al
c0029371:	74 10                	je     c0029383 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0029373:	83 ec 0c             	sub    esp,0xc
c0029376:	68 af ae 02 c0       	push   0xc002aeaf
c002937b:	e8 21 10 ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c0029380:	83 c4 10             	add    esp,0x10
c0029383:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029387:	8b 00                	mov    eax,DWORD PTR [eax]
c0029389:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002938c:	85 c0                	test   eax,eax
c002938e:	0f 94 c0             	sete   al
c0029391:	84 c0                	test   al,al
c0029393:	74 33                	je     c00293c8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0029395:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029399:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002939f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293a3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00293aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293ae:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00293b1:	83 f8 01             	cmp    eax,0x1
c00293b4:	74 21                	je     c00293d7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00293b6:	83 ec 0c             	sub    esp,0xc
c00293b9:	68 88 ae 02 c0       	push   0xc002ae88
c00293be:	e8 de 0f ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c00293c3:	83 c4 10             	add    esp,0x10
c00293c6:	eb 0f                	jmp    c00293d7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00293c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00293ce:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00293d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293d5:	89 10                	mov    DWORD PTR [eax],edx
c00293d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293db:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00293de:	8d 50 ff             	lea    edx,[eax-0x1]
c00293e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293e5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00293e8:	83 c4 0c             	add    esp,0xc
c00293eb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00293ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00293ec:	83 ec 0c             	sub    esp,0xc
c00293ef:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00293f4:	75 10                	jne    c0029406 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c00293f6:	83 ec 0c             	sub    esp,0xc
c00293f9:	68 2c ae 02 c0       	push   0xc002ae2c
c00293fe:	e8 9e 0f ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c0029403:	83 c4 10             	add    esp,0x10
c0029406:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002940a:	8b 00                	mov    eax,DWORD PTR [eax]
c002940c:	85 c0                	test   eax,eax
c002940e:	74 34                	je     c0029444 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0029410:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029414:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029417:	85 c0                	test   eax,eax
c0029419:	74 29                	je     c0029444 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002941b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002941f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029422:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029426:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0029429:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002942d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029431:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029434:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029438:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002943b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0029442:	eb 65                	jmp    c00294a9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0029444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029448:	8b 00                	mov    eax,DWORD PTR [eax]
c002944a:	85 c0                	test   eax,eax
c002944c:	75 4b                	jne    c0029499 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c002944e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029452:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029455:	85 c0                	test   eax,eax
c0029457:	75 40                	jne    c0029499 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0029459:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002945d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029461:	89 10                	mov    DWORD PTR [eax],edx
c0029463:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029467:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002946b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002946e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029472:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029475:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002947c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029480:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029483:	85 c0                	test   eax,eax
c0029485:	74 22                	je     c00294a9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0029487:	83 ec 0c             	sub    esp,0xc
c002948a:	68 4e ae 02 c0       	push   0xc002ae4e
c002948f:	e8 0d 0f ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c0029494:	83 c4 10             	add    esp,0x10
c0029497:	eb 10                	jmp    c00294a9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0029499:	83 ec 0c             	sub    esp,0xc
c002949c:	68 58 ae 02 c0       	push   0xc002ae58
c00294a1:	e8 fb 0e ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c00294a6:	83 c4 10             	add    esp,0x10
c00294a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294ad:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00294b0:	8d 50 01             	lea    edx,[eax+0x1]
c00294b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294b7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00294ba:	90                   	nop
c00294bb:	83 c4 0c             	add    esp,0xc
c00294be:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c00294c0 <ACPI::~ACPI()>:
c00294c0:	83 ec 0c             	sub    esp,0xc
c00294c3:	ba 2c c0 02 c0       	mov    edx,0xc002c02c
c00294c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294cc:	89 10                	mov    DWORD PTR [eax],edx
c00294ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294d2:	83 ec 0c             	sub    esp,0xc
c00294d5:	50                   	push   eax
c00294d6:	e8 97 a7 fe ff       	call   c0013c72 <Device::~Device()>
c00294db:	83 c4 10             	add    esp,0x10
c00294de:	90                   	nop
c00294df:	83 c4 0c             	add    esp,0xc
c00294e2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c00294e4 <ACPI::~ACPI()>:
c00294e4:	83 ec 0c             	sub    esp,0xc
c00294e7:	83 ec 0c             	sub    esp,0xc
c00294ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00294ee:	e8 cd ff ff ff       	call   c00294c0 <ACPI::~ACPI()>
c00294f3:	83 c4 10             	add    esp,0x10
c00294f6:	83 ec 08             	sub    esp,0x8
c00294f9:	68 64 12 00 00       	push   0x1264
c00294fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029502:	e8 84 93 fe ff       	call   c001288b <operator delete(void*, unsigned long)>
c0029507:	83 c4 10             	add    esp,0x10
c002950a:	83 c4 0c             	add    esp,0xc
c002950d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002950e <LinkedList<Device>::~LinkedList()>:
c002950e:	90                   	nop
c002950f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0029510 <LinkedList<Device>::isEmpty()>:
c0029510:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029514:	8b 00                	mov    eax,DWORD PTR [eax]
c0029516:	85 c0                	test   eax,eax
c0029518:	75 0e                	jne    c0029528 <LinkedList<Device>::isEmpty()+0x18>
c002951a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002951e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029521:	85 c0                	test   eax,eax
c0029523:	75 03                	jne    c0029528 <LinkedList<Device>::isEmpty()+0x18>
c0029525:	b0 01                	mov    al,0x1
c0029527:	c3                   	ret    
c0029528:	b0 00                	mov    al,0x0
c002952a:	90                   	nop
c002952b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002952c <LinkedList<Device>::getFirstElement()>:
c002952c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029530:	8b 00                	mov    eax,DWORD PTR [eax]
c0029532:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0029534 <LinkedList<Device>::removeFirst()>:
c0029534:	83 ec 0c             	sub    esp,0xc
c0029537:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002953b:	8b 00                	mov    eax,DWORD PTR [eax]
c002953d:	85 c0                	test   eax,eax
c002953f:	75 15                	jne    c0029556 <LinkedList<Device>::removeFirst()+0x22>
c0029541:	83 ec 0c             	sub    esp,0xc
c0029544:	68 64 ae 02 c0       	push   0xc002ae64
c0029549:	e8 53 0e ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c002954e:	83 c4 10             	add    esp,0x10
c0029551:	e9 87 00 00 00       	jmp    c00295dd <LinkedList<Device>::removeFirst()+0xa9>
c0029556:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002955a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002955d:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0029563:	85 c0                	test   eax,eax
c0029565:	74 10                	je     c0029577 <LinkedList<Device>::removeFirst()+0x43>
c0029567:	83 ec 0c             	sub    esp,0xc
c002956a:	68 af ae 02 c0       	push   0xc002aeaf
c002956f:	e8 2d 0e ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c0029574:	83 c4 10             	add    esp,0x10
c0029577:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002957b:	8b 00                	mov    eax,DWORD PTR [eax]
c002957d:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0029583:	85 c0                	test   eax,eax
c0029585:	75 33                	jne    c00295ba <LinkedList<Device>::removeFirst()+0x86>
c0029587:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002958b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029591:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029595:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002959c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00295a3:	83 f8 01             	cmp    eax,0x1
c00295a6:	74 24                	je     c00295cc <LinkedList<Device>::removeFirst()+0x98>
c00295a8:	83 ec 0c             	sub    esp,0xc
c00295ab:	68 88 ae 02 c0       	push   0xc002ae88
c00295b0:	e8 ec 0d ff ff       	call   c001a3a1 <Krnl::panic(char const*)>
c00295b5:	83 c4 10             	add    esp,0x10
c00295b8:	eb 12                	jmp    c00295cc <LinkedList<Device>::removeFirst()+0x98>
c00295ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295be:	8b 00                	mov    eax,DWORD PTR [eax]
c00295c0:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c00295c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295ca:	89 10                	mov    DWORD PTR [eax],edx
c00295cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295d0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00295d3:	8d 50 ff             	lea    edx,[eax-0x1]
c00295d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295da:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00295dd:	83 c4 0c             	add    esp,0xc
c00295e0:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00295e2 <CPU::~CPU()>:
c00295e2:	83 ec 0c             	sub    esp,0xc
c00295e5:	ba 1c c4 02 c0       	mov    edx,0xc002c41c
c00295ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295ee:	89 10                	mov    DWORD PTR [eax],edx
c00295f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295f4:	83 ec 0c             	sub    esp,0xc
c00295f7:	50                   	push   eax
c00295f8:	e8 75 a6 fe ff       	call   c0013c72 <Device::~Device()>
c00295fd:	83 c4 10             	add    esp,0x10
c0029600:	90                   	nop
c0029601:	83 c4 0c             	add    esp,0xc
c0029604:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0029606 <CPU::~CPU()>:
c0029606:	83 ec 0c             	sub    esp,0xc
c0029609:	83 ec 0c             	sub    esp,0xc
c002960c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029610:	e8 cd ff ff ff       	call   c00295e2 <CPU::~CPU()>
c0029615:	83 c4 10             	add    esp,0x10
c0029618:	83 ec 08             	sub    esp,0x8
c002961b:	68 98 11 00 00       	push   0x1198
c0029620:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029624:	e8 62 92 fe ff       	call   c001288b <operator delete(void*, unsigned long)>
c0029629:	83 c4 10             	add    esp,0x10
c002962c:	83 c4 0c             	add    esp,0xc
c002962f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0029630 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0029630:	90                   	nop
c0029631:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0029632 <ThreadControlBlock::ThreadControlBlock()>:
c0029632:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029636:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002963d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029641:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0029648:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002964c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0029653:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029657:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c002965e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029662:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0029669:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002966d:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0029671:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029675:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0029679:	90                   	nop
c002967a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002967c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002967c:	83 ec 0c             	sub    esp,0xc
c002967f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029683:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002968d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029694:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029698:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002969f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296a3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00296a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296ad:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00296b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296b8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00296bf:	83 ec 0c             	sub    esp,0xc
c00296c2:	68 12 ae 02 c0       	push   0xc002ae12
c00296c7:	e8 9f 92 fe ff       	call   c001296b <Dbg::kprintf(char const*, ...)>
c00296cc:	83 c4 10             	add    esp,0x10
c00296cf:	90                   	nop
c00296d0:	83 c4 0c             	add    esp,0xc
c00296d3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00296d4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00296d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00296d8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00296db:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c00296dc <Vm::_FPUState::_FPUState()>:
c00296dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00296e0:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c00296e7:	90                   	nop
c00296e8:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00296ea <PCI::~PCI()>:
c00296ea:	83 ec 0c             	sub    esp,0xc
c00296ed:	ba b0 d5 02 c0       	mov    edx,0xc002d5b0
c00296f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296f6:	89 10                	mov    DWORD PTR [eax],edx
c00296f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296fc:	83 ec 0c             	sub    esp,0xc
c00296ff:	50                   	push   eax
c0029700:	e8 3d 9f fe ff       	call   c0013642 <Bus::~Bus()>
c0029705:	83 c4 10             	add    esp,0x10
c0029708:	90                   	nop
c0029709:	83 c4 0c             	add    esp,0xc
c002970c:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002970e <PCI::~PCI()>:
c002970e:	83 ec 0c             	sub    esp,0xc
c0029711:	83 ec 0c             	sub    esp,0xc
c0029714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029718:	e8 cd ff ff ff       	call   c00296ea <PCI::~PCI()>
c002971d:	83 c4 10             	add    esp,0x10
c0029720:	83 ec 08             	sub    esp,0x8
c0029723:	68 5c 01 00 00       	push   0x15c
c0029728:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002972c:	e8 5a 91 fe ff       	call   c001288b <operator delete(void*, unsigned long)>
c0029731:	83 c4 10             	add    esp,0x10
c0029734:	83 c4 0c             	add    esp,0xc
c0029737:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0029738 <IDE::~IDE()>:
c0029738:	83 ec 0c             	sub    esp,0xc
c002973b:	ba 14 d8 02 c0       	mov    edx,0xc002d814
c0029740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029744:	89 10                	mov    DWORD PTR [eax],edx
c0029746:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002974a:	83 ec 0c             	sub    esp,0xc
c002974d:	50                   	push   eax
c002974e:	e8 35 aa fe ff       	call   c0014188 <HardDiskController::~HardDiskController()>
c0029753:	83 c4 10             	add    esp,0x10
c0029756:	90                   	nop
c0029757:	83 c4 0c             	add    esp,0xc
c002975a:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002975c <IDE::~IDE()>:
c002975c:	83 ec 0c             	sub    esp,0xc
c002975f:	83 ec 0c             	sub    esp,0xc
c0029762:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029766:	e8 cd ff ff ff       	call   c0029738 <IDE::~IDE()>
c002976b:	83 c4 10             	add    esp,0x10
c002976e:	83 ec 08             	sub    esp,0x8
c0029771:	68 70 02 00 00       	push   0x270
c0029776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002977a:	e8 0c 91 fe ff       	call   c001288b <operator delete(void*, unsigned long)>
c002977f:	83 c4 10             	add    esp,0x10
c0029782:	83 c4 0c             	add    esp,0xc
c0029785:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0029786 <SATABus::~SATABus()>:
c0029786:	83 ec 0c             	sub    esp,0xc
c0029789:	ba f4 d8 02 c0       	mov    edx,0xc002d8f4
c002978e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029792:	89 10                	mov    DWORD PTR [eax],edx
c0029794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029798:	83 ec 0c             	sub    esp,0xc
c002979b:	50                   	push   eax
c002979c:	e8 e7 a9 fe ff       	call   c0014188 <HardDiskController::~HardDiskController()>
c00297a1:	83 c4 10             	add    esp,0x10
c00297a4:	90                   	nop
c00297a5:	83 c4 0c             	add    esp,0xc
c00297a8:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00297aa <SATABus::~SATABus()>:
c00297aa:	83 ec 0c             	sub    esp,0xc
c00297ad:	83 ec 0c             	sub    esp,0xc
c00297b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297b4:	e8 cd ff ff ff       	call   c0029786 <SATABus::~SATABus()>
c00297b9:	83 c4 10             	add    esp,0x10
c00297bc:	83 ec 08             	sub    esp,0x8
c00297bf:	68 64 01 00 00       	push   0x164
c00297c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297c8:	e8 be 90 fe ff       	call   c001288b <operator delete(void*, unsigned long)>
c00297cd:	83 c4 10             	add    esp,0x10
c00297d0:	83 c4 0c             	add    esp,0xc
c00297d3:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00297d4 <ATA::~ATA()>:
c00297d4:	83 ec 0c             	sub    esp,0xc
c00297d7:	ba 40 d9 02 c0       	mov    edx,0xc002d940
c00297dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297e0:	89 10                	mov    DWORD PTR [eax],edx
c00297e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297e6:	83 ec 0c             	sub    esp,0xc
c00297e9:	50                   	push   eax
c00297ea:	e8 8b aa fe ff       	call   c001427a <PhysicalDisk::~PhysicalDisk()>
c00297ef:	83 c4 10             	add    esp,0x10
c00297f2:	90                   	nop
c00297f3:	83 c4 0c             	add    esp,0xc
c00297f6:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00297f8 <ATA::~ATA()>:
c00297f8:	83 ec 0c             	sub    esp,0xc
c00297fb:	83 ec 0c             	sub    esp,0xc
c00297fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029802:	e8 cd ff ff ff       	call   c00297d4 <ATA::~ATA()>
c0029807:	83 c4 10             	add    esp,0x10
c002980a:	83 ec 08             	sub    esp,0x8
c002980d:	68 7c 01 00 00       	push   0x17c
c0029812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029816:	e8 70 90 fe ff       	call   c001288b <operator delete(void*, unsigned long)>
c002981b:	83 c4 10             	add    esp,0x10
c002981e:	83 c4 0c             	add    esp,0xc
c0029821:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0029822 <ATAPI::~ATAPI()>:
c0029822:	83 ec 0c             	sub    esp,0xc
c0029825:	ba 78 d9 02 c0       	mov    edx,0xc002d978
c002982a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002982e:	89 10                	mov    DWORD PTR [eax],edx
c0029830:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029834:	83 ec 0c             	sub    esp,0xc
c0029837:	50                   	push   eax
c0029838:	e8 3d aa fe ff       	call   c001427a <PhysicalDisk::~PhysicalDisk()>
c002983d:	83 c4 10             	add    esp,0x10
c0029840:	90                   	nop
c0029841:	83 c4 0c             	add    esp,0xc
c0029844:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0029846 <ATAPI::~ATAPI()>:
c0029846:	83 ec 0c             	sub    esp,0xc
c0029849:	83 ec 0c             	sub    esp,0xc
c002984c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029850:	e8 cd ff ff ff       	call   c0029822 <ATAPI::~ATAPI()>
c0029855:	83 c4 10             	add    esp,0x10
c0029858:	83 ec 08             	sub    esp,0x8
c002985b:	68 80 01 00 00       	push   0x180
c0029860:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029864:	e8 22 90 fe ff       	call   c001288b <operator delete(void*, unsigned long)>
c0029869:	83 c4 10             	add    esp,0x10
c002986c:	83 c4 0c             	add    esp,0xc
c002986f:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0029870 <SATA::~SATA()>:
c0029870:	83 ec 0c             	sub    esp,0xc
c0029873:	ba 2c da 02 c0       	mov    edx,0xc002da2c
c0029878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002987c:	89 10                	mov    DWORD PTR [eax],edx
c002987e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029882:	83 ec 0c             	sub    esp,0xc
c0029885:	50                   	push   eax
c0029886:	e8 ef a9 fe ff       	call   c001427a <PhysicalDisk::~PhysicalDisk()>
c002988b:	83 c4 10             	add    esp,0x10
c002988e:	90                   	nop
c002988f:	83 c4 0c             	add    esp,0xc
c0029892:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0029894 <SATA::~SATA()>:
c0029894:	83 ec 0c             	sub    esp,0xc
c0029897:	83 ec 0c             	sub    esp,0xc
c002989a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002989e:	e8 cd ff ff ff       	call   c0029870 <SATA::~SATA()>
c00298a3:	83 c4 10             	add    esp,0x10
c00298a6:	83 ec 08             	sub    esp,0x8
c00298a9:	68 7c 01 00 00       	push   0x17c
c00298ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298b2:	e8 d4 8f fe ff       	call   c001288b <operator delete(void*, unsigned long)>
c00298b7:	83 c4 10             	add    esp,0x10
c00298ba:	83 c4 0c             	add    esp,0xc
c00298bd:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c00298be <SATAPI::~SATAPI()>:
c00298be:	83 ec 0c             	sub    esp,0xc
c00298c1:	ba 08 db 02 c0       	mov    edx,0xc002db08
c00298c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298ca:	89 10                	mov    DWORD PTR [eax],edx
c00298cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298d0:	83 ec 0c             	sub    esp,0xc
c00298d3:	50                   	push   eax
c00298d4:	e8 a1 a9 fe ff       	call   c001427a <PhysicalDisk::~PhysicalDisk()>
c00298d9:	83 c4 10             	add    esp,0x10
c00298dc:	90                   	nop
c00298dd:	83 c4 0c             	add    esp,0xc
c00298e0:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c00298e2 <SATAPI::~SATAPI()>:
c00298e2:	83 ec 0c             	sub    esp,0xc
c00298e5:	83 ec 0c             	sub    esp,0xc
c00298e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298ec:	e8 cd ff ff ff       	call   c00298be <SATAPI::~SATAPI()>
c00298f1:	83 c4 10             	add    esp,0x10
c00298f4:	83 ec 08             	sub    esp,0x8
c00298f7:	68 80 01 00 00       	push   0x180
c00298fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029900:	e8 86 8f fe ff       	call   c001288b <operator delete(void*, unsigned long)>
c0029905:	83 c4 10             	add    esp,0x10
c0029908:	83 c4 0c             	add    esp,0xc
c002990b:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c002990c <AVX::~AVX()>:
c002990c:	83 ec 0c             	sub    esp,0xc
c002990f:	ba 48 db 02 c0       	mov    edx,0xc002db48
c0029914:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029918:	89 10                	mov    DWORD PTR [eax],edx
c002991a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002991e:	83 ec 0c             	sub    esp,0xc
c0029921:	50                   	push   eax
c0029922:	e8 d7 a9 fe ff       	call   c00142fe <FPU::~FPU()>
c0029927:	83 c4 10             	add    esp,0x10
c002992a:	90                   	nop
c002992b:	83 c4 0c             	add    esp,0xc
c002992e:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0029930 <AVX::~AVX()>:
c0029930:	83 ec 0c             	sub    esp,0xc
c0029933:	83 ec 0c             	sub    esp,0xc
c0029936:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002993a:	e8 cd ff ff ff       	call   c002990c <AVX::~AVX()>
c002993f:	83 c4 10             	add    esp,0x10
c0029942:	83 ec 08             	sub    esp,0x8
c0029945:	68 58 01 00 00       	push   0x158
c002994a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002994e:	e8 38 8f fe ff       	call   c001288b <operator delete(void*, unsigned long)>
c0029953:	83 c4 10             	add    esp,0x10
c0029956:	83 c4 0c             	add    esp,0xc
c0029959:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c002995a <MMX::~MMX()>:
c002995a:	83 ec 0c             	sub    esp,0xc
c002995d:	ba 88 db 02 c0       	mov    edx,0xc002db88
c0029962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029966:	89 10                	mov    DWORD PTR [eax],edx
c0029968:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002996c:	83 ec 0c             	sub    esp,0xc
c002996f:	50                   	push   eax
c0029970:	e8 89 a9 fe ff       	call   c00142fe <FPU::~FPU()>
c0029975:	83 c4 10             	add    esp,0x10
c0029978:	90                   	nop
c0029979:	83 c4 0c             	add    esp,0xc
c002997c:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c002997e <MMX::~MMX()>:
c002997e:	83 ec 0c             	sub    esp,0xc
c0029981:	83 ec 0c             	sub    esp,0xc
c0029984:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029988:	e8 cd ff ff ff       	call   c002995a <MMX::~MMX()>
c002998d:	83 c4 10             	add    esp,0x10
c0029990:	83 ec 08             	sub    esp,0x8
c0029993:	68 58 01 00 00       	push   0x158
c0029998:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002999c:	e8 ea 8e fe ff       	call   c001288b <operator delete(void*, unsigned long)>
c00299a1:	83 c4 10             	add    esp,0x10
c00299a4:	83 c4 0c             	add    esp,0xc
c00299a7:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c00299a8 <SSE::~SSE()>:
c00299a8:	83 ec 0c             	sub    esp,0xc
c00299ab:	ba c8 db 02 c0       	mov    edx,0xc002dbc8
c00299b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299b4:	89 10                	mov    DWORD PTR [eax],edx
c00299b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299ba:	83 ec 0c             	sub    esp,0xc
c00299bd:	50                   	push   eax
c00299be:	e8 3b a9 fe ff       	call   c00142fe <FPU::~FPU()>
c00299c3:	83 c4 10             	add    esp,0x10
c00299c6:	90                   	nop
c00299c7:	83 c4 0c             	add    esp,0xc
c00299ca:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c00299cc <SSE::~SSE()>:
c00299cc:	83 ec 0c             	sub    esp,0xc
c00299cf:	83 ec 0c             	sub    esp,0xc
c00299d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299d6:	e8 cd ff ff ff       	call   c00299a8 <SSE::~SSE()>
c00299db:	83 c4 10             	add    esp,0x10
c00299de:	83 ec 08             	sub    esp,0x8
c00299e1:	68 58 01 00 00       	push   0x158
c00299e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299ea:	e8 9c 8e fe ff       	call   c001288b <operator delete(void*, unsigned long)>
c00299ef:	83 c4 10             	add    esp,0x10
c00299f2:	83 c4 0c             	add    esp,0xc
c00299f5:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c00299f6 <x87::~x87()>:
c00299f6:	83 ec 0c             	sub    esp,0xc
c00299f9:	ba 08 dc 02 c0       	mov    edx,0xc002dc08
c00299fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a02:	89 10                	mov    DWORD PTR [eax],edx
c0029a04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a08:	83 ec 0c             	sub    esp,0xc
c0029a0b:	50                   	push   eax
c0029a0c:	e8 ed a8 fe ff       	call   c00142fe <FPU::~FPU()>
c0029a11:	83 c4 10             	add    esp,0x10
c0029a14:	90                   	nop
c0029a15:	83 c4 0c             	add    esp,0xc
c0029a18:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0029a1a <x87::~x87()>:
c0029a1a:	83 ec 0c             	sub    esp,0xc
c0029a1d:	83 ec 0c             	sub    esp,0xc
c0029a20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a24:	e8 cd ff ff ff       	call   c00299f6 <x87::~x87()>
c0029a29:	83 c4 10             	add    esp,0x10
c0029a2c:	83 ec 08             	sub    esp,0x8
c0029a2f:	68 58 01 00 00       	push   0x158
c0029a34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a38:	e8 4e 8e fe ff       	call   c001288b <operator delete(void*, unsigned long)>
c0029a3d:	83 c4 10             	add    esp,0x10
c0029a40:	83 c4 0c             	add    esp,0xc
c0029a43:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029a44 <IOAPIC::~IOAPIC()>:
c0029a44:	83 ec 0c             	sub    esp,0xc
c0029a47:	ba 60 dd 02 c0       	mov    edx,0xc002dd60
c0029a4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a50:	89 10                	mov    DWORD PTR [eax],edx
c0029a52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a56:	83 ec 0c             	sub    esp,0xc
c0029a59:	50                   	push   eax
c0029a5a:	e8 13 a2 fe ff       	call   c0013c72 <Device::~Device()>
c0029a5f:	83 c4 10             	add    esp,0x10
c0029a62:	90                   	nop
c0029a63:	83 c4 0c             	add    esp,0xc
c0029a66:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0029a68 <IOAPIC::~IOAPIC()>:
c0029a68:	83 ec 0c             	sub    esp,0xc
c0029a6b:	83 ec 0c             	sub    esp,0xc
c0029a6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a72:	e8 cd ff ff ff       	call   c0029a44 <IOAPIC::~IOAPIC()>
c0029a77:	83 c4 10             	add    esp,0x10
c0029a7a:	83 ec 08             	sub    esp,0x8
c0029a7d:	68 68 01 00 00       	push   0x168
c0029a82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a86:	e8 00 8e fe ff       	call   c001288b <operator delete(void*, unsigned long)>
c0029a8b:	83 c4 10             	add    esp,0x10
c0029a8e:	83 c4 0c             	add    esp,0xc
c0029a91:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0029a92 <APIC::~APIC()>:
c0029a92:	83 ec 0c             	sub    esp,0xc
c0029a95:	ba 18 dd 02 c0       	mov    edx,0xc002dd18
c0029a9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a9e:	89 10                	mov    DWORD PTR [eax],edx
c0029aa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029aa4:	83 ec 0c             	sub    esp,0xc
c0029aa7:	50                   	push   eax
c0029aa8:	e8 1b ad fe ff       	call   c00147c8 <InterruptController::~InterruptController()>
c0029aad:	83 c4 10             	add    esp,0x10
c0029ab0:	90                   	nop
c0029ab1:	83 c4 0c             	add    esp,0xc
c0029ab4:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0029ab6 <APIC::~APIC()>:
c0029ab6:	83 ec 0c             	sub    esp,0xc
c0029ab9:	83 ec 0c             	sub    esp,0xc
c0029abc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029ac0:	e8 cd ff ff ff       	call   c0029a92 <APIC::~APIC()>
c0029ac5:	83 c4 10             	add    esp,0x10
c0029ac8:	83 ec 08             	sub    esp,0x8
c0029acb:	68 58 21 00 00       	push   0x2158
c0029ad0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029ad4:	e8 b2 8d fe ff       	call   c001288b <operator delete(void*, unsigned long)>
c0029ad9:	83 c4 10             	add    esp,0x10
c0029adc:	83 c4 0c             	add    esp,0xc
c0029adf:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029ae0 <PIC::~PIC()>:
c0029ae0:	83 ec 0c             	sub    esp,0xc
c0029ae3:	ba b0 dd 02 c0       	mov    edx,0xc002ddb0
c0029ae8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029aec:	89 10                	mov    DWORD PTR [eax],edx
c0029aee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029af2:	83 ec 0c             	sub    esp,0xc
c0029af5:	50                   	push   eax
c0029af6:	e8 cd ac fe ff       	call   c00147c8 <InterruptController::~InterruptController()>
c0029afb:	83 c4 10             	add    esp,0x10
c0029afe:	90                   	nop
c0029aff:	83 c4 0c             	add    esp,0xc
c0029b02:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029b04 <PIC::~PIC()>:
c0029b04:	83 ec 0c             	sub    esp,0xc
c0029b07:	83 ec 0c             	sub    esp,0xc
c0029b0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b0e:	e8 cd ff ff ff       	call   c0029ae0 <PIC::~PIC()>
c0029b13:	83 c4 10             	add    esp,0x10
c0029b16:	83 ec 08             	sub    esp,0x8
c0029b19:	68 58 21 00 00       	push   0x2158
c0029b1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b22:	e8 64 8d fe ff       	call   c001288b <operator delete(void*, unsigned long)>
c0029b27:	83 c4 10             	add    esp,0x10
c0029b2a:	83 c4 0c             	add    esp,0xc
c0029b2d:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029b2e <APICTimer::~APICTimer()>:
c0029b2e:	83 ec 0c             	sub    esp,0xc
c0029b31:	ba 04 de 02 c0       	mov    edx,0xc002de04
c0029b36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b3a:	89 10                	mov    DWORD PTR [eax],edx
c0029b3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b40:	83 ec 0c             	sub    esp,0xc
c0029b43:	50                   	push   eax
c0029b44:	e8 0f cd fe ff       	call   c0016858 <Timer::~Timer()>
c0029b49:	83 c4 10             	add    esp,0x10
c0029b4c:	90                   	nop
c0029b4d:	83 c4 0c             	add    esp,0xc
c0029b50:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029b52 <APICTimer::~APICTimer()>:
c0029b52:	83 ec 0c             	sub    esp,0xc
c0029b55:	83 ec 0c             	sub    esp,0xc
c0029b58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b5c:	e8 cd ff ff ff       	call   c0029b2e <APICTimer::~APICTimer()>
c0029b61:	83 c4 10             	add    esp,0x10
c0029b64:	83 ec 08             	sub    esp,0x8
c0029b67:	68 60 01 00 00       	push   0x160
c0029b6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b70:	e8 16 8d fe ff       	call   c001288b <operator delete(void*, unsigned long)>
c0029b75:	83 c4 10             	add    esp,0x10
c0029b78:	83 c4 0c             	add    esp,0xc
c0029b7b:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029b7c <PIT::~PIT()>:
c0029b7c:	83 ec 0c             	sub    esp,0xc
c0029b7f:	ba 54 de 02 c0       	mov    edx,0xc002de54
c0029b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b88:	89 10                	mov    DWORD PTR [eax],edx
c0029b8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b8e:	83 ec 0c             	sub    esp,0xc
c0029b91:	50                   	push   eax
c0029b92:	e8 c1 cc fe ff       	call   c0016858 <Timer::~Timer()>
c0029b97:	83 c4 10             	add    esp,0x10
c0029b9a:	90                   	nop
c0029b9b:	83 c4 0c             	add    esp,0xc
c0029b9e:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029ba0 <PIT::~PIT()>:
c0029ba0:	83 ec 0c             	sub    esp,0xc
c0029ba3:	83 ec 0c             	sub    esp,0xc
c0029ba6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029baa:	e8 cd ff ff ff       	call   c0029b7c <PIT::~PIT()>
c0029baf:	83 c4 10             	add    esp,0x10
c0029bb2:	83 ec 08             	sub    esp,0x8
c0029bb5:	68 5c 01 00 00       	push   0x15c
c0029bba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029bbe:	e8 c8 8c fe ff       	call   c001288b <operator delete(void*, unsigned long)>
c0029bc3:	83 c4 10             	add    esp,0x10
c0029bc6:	83 c4 0c             	add    esp,0xc
c0029bc9:	c3                   	ret    
