
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 d8 fb 00 00       	call   c000fbf8 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 53 86 02 00       	call   c0028678 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 22 92 02 c0       	mov    ebx,0xc0029222
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 30 92 02 c0    	cmp    ebx,0xc0029230
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 58 db 02 c0       	mov    eax,0xc002db58
c0000049:	3d 58 db 02 c0       	cmp    eax,0xc002db58
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 58 db 02 c0       	push   0xc002db58
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 58 db 02 c0       	mov    eax,0xc002db58
c0000075:	2d 58 db 02 c0       	sub    eax,0xc002db58
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 58 db 02 c0       	push   0xc002db58
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 88 e1 02 c0 00 	cmp    BYTE PTR ds:0xc002e188,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 38 92 02 c0       	mov    ebx,0xc0029238
c00000bb:	81 eb 34 92 02 c0    	sub    ebx,0xc0029234
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 34 92 02 c0       	mov    esi,0xc0029234
c00000ca:	a1 8c e1 02 c0       	mov    eax,ds:0xc002e18c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 8c e1 02 c0       	mov    ds:0xc002e18c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 8c e1 02 c0       	mov    eax,ds:0xc002e18c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 58 db 02 c0       	push   0xc002db58
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 88 e1 02 c0 01 	mov    BYTE PTR ds:0xc002e188,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 90 e1 02 c0       	push   0xc002e190
c000012c:	68 58 db 02 c0       	push   0xc002db58
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 25 d6 01 00       	call   c001d9c0 <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 5f 29 01 00       	call   c0012d12 <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 03 d6 01 00       	call   c001d9c0 <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 51 da 01 00       	call   c001de2d <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 ff df 01 00       	call   c001e3e4 <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 d0 e5 02 c0 	lgdtd  ds:0xc002e5d0
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 3c 46 01 00       	call   c0014c15 <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>
c000063d:	66 90                	xchg   ax,ax
c000063f:	90                   	nop

c0000640 <memcmp>:
c0000640:	56                   	push   esi
c0000641:	53                   	push   ebx
c0000642:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000646:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000064a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000064e:	85 f6                	test   esi,esi
c0000650:	74 1d                	je     c000066f <memcmp+0x2f>
c0000652:	8a 08                	mov    cl,BYTE PTR [eax]
c0000654:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000657:	38 cb                	cmp    bl,cl
c0000659:	75 19                	jne    c0000674 <memcmp+0x34>
c000065b:	01 c6                	add    esi,eax
c000065d:	eb 0a                	jmp    c0000669 <memcmp+0x29>
c000065f:	90                   	nop
c0000660:	8a 08                	mov    cl,BYTE PTR [eax]
c0000662:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000665:	38 d9                	cmp    cl,bl
c0000667:	75 0b                	jne    c0000674 <memcmp+0x34>
c0000669:	40                   	inc    eax
c000066a:	42                   	inc    edx
c000066b:	39 f0                	cmp    eax,esi
c000066d:	75 f1                	jne    c0000660 <memcmp+0x20>
c000066f:	31 c0                	xor    eax,eax
c0000671:	5b                   	pop    ebx
c0000672:	5e                   	pop    esi
c0000673:	c3                   	ret    
c0000674:	0f b6 c1             	movzx  eax,cl
c0000677:	29 d8                	sub    eax,ebx
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    

c000067c <memmove>:
c000067c:	55                   	push   ebp
c000067d:	57                   	push   edi
c000067e:	56                   	push   esi
c000067f:	53                   	push   ebx
c0000680:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000684:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000688:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000068c:	39 dd                	cmp    ebp,ebx
c000068e:	0f 83 80 00 00 00    	jae    c0000714 <memmove+0x98>
c0000694:	85 d2                	test   edx,edx
c0000696:	74 74                	je     c000070c <memmove+0x90>
c0000698:	8d 4b 04             	lea    ecx,[ebx+0x4]
c000069b:	8d 75 04             	lea    esi,[ebp+0x4]
c000069e:	39 cd                	cmp    ebp,ecx
c00006a0:	0f 93 c1             	setae  cl
c00006a3:	39 f3                	cmp    ebx,esi
c00006a5:	0f 93 c0             	setae  al
c00006a8:	89 c6                	mov    esi,eax
c00006aa:	09 ce                	or     esi,ecx
c00006ac:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006af:	89 f0                	mov    eax,esi
c00006b1:	83 f9 0c             	cmp    ecx,0xc
c00006b4:	0f 97 c1             	seta   cl
c00006b7:	84 c8                	test   al,cl
c00006b9:	74 75                	je     c0000730 <memmove+0xb4>
c00006bb:	89 e9                	mov    ecx,ebp
c00006bd:	09 d9                	or     ecx,ebx
c00006bf:	83 e1 03             	and    ecx,0x3
c00006c2:	75 6c                	jne    c0000730 <memmove+0xb4>
c00006c4:	89 d7                	mov    edi,edx
c00006c6:	89 d9                	mov    ecx,ebx
c00006c8:	83 e7 fc             	and    edi,0xfffffffc
c00006cb:	89 ee                	mov    esi,ebp
c00006cd:	01 df                	add    edi,ebx
c00006cf:	90                   	nop
c00006d0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006d2:	83 c6 04             	add    esi,0x4
c00006d5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006d8:	83 c1 04             	add    ecx,0x4
c00006db:	39 f9                	cmp    ecx,edi
c00006dd:	75 f1                	jne    c00006d0 <memmove+0x54>
c00006df:	89 d1                	mov    ecx,edx
c00006e1:	89 d7                	mov    edi,edx
c00006e3:	83 e1 fc             	and    ecx,0xfffffffc
c00006e6:	29 cf                	sub    edi,ecx
c00006e8:	01 cb                	add    ebx,ecx
c00006ea:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006ee:	39 ca                	cmp    edx,ecx
c00006f0:	74 1a                	je     c000070c <memmove+0x90>
c00006f2:	8a 03                	mov    al,BYTE PTR [ebx]
c00006f4:	83 ff 01             	cmp    edi,0x1
c00006f7:	88 06                	mov    BYTE PTR [esi],al
c00006f9:	74 11                	je     c000070c <memmove+0x90>
c00006fb:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00006fe:	83 ff 02             	cmp    edi,0x2
c0000701:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000704:	74 06                	je     c000070c <memmove+0x90>
c0000706:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000709:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000070c:	5b                   	pop    ebx
c000070d:	89 e8                	mov    eax,ebp
c000070f:	5e                   	pop    esi
c0000710:	5f                   	pop    edi
c0000711:	5d                   	pop    ebp
c0000712:	c3                   	ret    
c0000713:	90                   	nop
c0000714:	76 f6                	jbe    c000070c <memmove+0x90>
c0000716:	85 d2                	test   edx,edx
c0000718:	74 f2                	je     c000070c <memmove+0x90>
c000071a:	4b                   	dec    ebx
c000071b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000071e:	66 90                	xchg   ax,ax
c0000720:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000723:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000726:	4a                   	dec    edx
c0000727:	75 f7                	jne    c0000720 <memmove+0xa4>
c0000729:	5b                   	pop    ebx
c000072a:	89 e8                	mov    eax,ebp
c000072c:	5e                   	pop    esi
c000072d:	5f                   	pop    edi
c000072e:	5d                   	pop    ebp
c000072f:	c3                   	ret    
c0000730:	01 ea                	add    edx,ebp
c0000732:	89 e9                	mov    ecx,ebp
c0000734:	8a 03                	mov    al,BYTE PTR [ebx]
c0000736:	41                   	inc    ecx
c0000737:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000073a:	43                   	inc    ebx
c000073b:	39 d1                	cmp    ecx,edx
c000073d:	75 f5                	jne    c0000734 <memmove+0xb8>
c000073f:	eb cb                	jmp    c000070c <memmove+0x90>
c0000741:	8d 76 00             	lea    esi,[esi+0x0]

c0000744 <memcpy>:
c0000744:	57                   	push   edi
c0000745:	56                   	push   esi
c0000746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000074a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000074e:	a8 03                	test   al,0x3
c0000750:	74 12                	je     c0000764 <memcpy+0x20>
c0000752:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000756:	89 c1                	mov    ecx,eax
c0000758:	fc                   	cld    
c0000759:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000075b:	29 c7                	sub    edi,eax
c000075d:	5e                   	pop    esi
c000075e:	89 f8                	mov    eax,edi
c0000760:	5f                   	pop    edi
c0000761:	c3                   	ret    
c0000762:	66 90                	xchg   ax,ax
c0000764:	89 c1                	mov    ecx,eax
c0000766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076a:	c1 e9 02             	shr    ecx,0x2
c000076d:	fc                   	cld    
c000076e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000770:	29 c7                	sub    edi,eax
c0000772:	5e                   	pop    esi
c0000773:	89 f8                	mov    eax,edi
c0000775:	5f                   	pop    edi
c0000776:	c3                   	ret    
c0000777:	90                   	nop

c0000778 <memset>:
c0000778:	57                   	push   edi
c0000779:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000077d:	85 c9                	test   ecx,ecx
c000077f:	74 0b                	je     c000078c <memset+0x14>
c0000781:	fc                   	cld    
c0000782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000786:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000078a:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000078c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000790:	5f                   	pop    edi
c0000791:	c3                   	ret    
c0000792:	66 90                	xchg   ax,ax

c0000794 <strlen>:
c0000794:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000798:	31 c0                	xor    eax,eax
c000079a:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c000079d:	74 09                	je     c00007a8 <strlen+0x14>
c000079f:	90                   	nop
c00007a0:	40                   	inc    eax
c00007a1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007a5:	75 f9                	jne    c00007a0 <strlen+0xc>
c00007a7:	c3                   	ret    
c00007a8:	c3                   	ret    
c00007a9:	8d 76 00             	lea    esi,[esi+0x0]

c00007ac <strpbrk>:
c00007ac:	57                   	push   edi
c00007ad:	56                   	push   esi
c00007ae:	53                   	push   ebx
c00007af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007b7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 21                	je     c00007de <strpbrk+0x32>
c00007bd:	8a 07                	mov    al,BYTE PTR [edi]
c00007bf:	84 c0                	test   al,al
c00007c1:	74 14                	je     c00007d7 <strpbrk+0x2b>
c00007c3:	38 d8                	cmp    al,bl
c00007c5:	74 19                	je     c00007e0 <strpbrk+0x34>
c00007c7:	89 fa                	mov    edx,edi
c00007c9:	eb 05                	jmp    c00007d0 <strpbrk+0x24>
c00007cb:	90                   	nop
c00007cc:	38 d9                	cmp    cl,bl
c00007ce:	74 10                	je     c00007e0 <strpbrk+0x34>
c00007d0:	42                   	inc    edx
c00007d1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007d3:	84 c9                	test   cl,cl
c00007d5:	75 f5                	jne    c00007cc <strpbrk+0x20>
c00007d7:	46                   	inc    esi
c00007d8:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007da:	84 db                	test   bl,bl
c00007dc:	75 e1                	jne    c00007bf <strpbrk+0x13>
c00007de:	31 f6                	xor    esi,esi
c00007e0:	89 f0                	mov    eax,esi
c00007e2:	5b                   	pop    ebx
c00007e3:	5e                   	pop    esi
c00007e4:	5f                   	pop    edi
c00007e5:	c3                   	ret    
c00007e6:	66 90                	xchg   ax,ax

c00007e8 <strtok>:
c00007e8:	56                   	push   esi
c00007e9:	53                   	push   ebx
c00007ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007f2:	85 db                	test   ebx,ebx
c00007f4:	75 07                	jne    c00007fd <strtok+0x15>
c00007f6:	eb 2c                	jmp    c0000824 <strtok+0x3c>
c00007f8:	43                   	inc    ebx
c00007f9:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007fd:	56                   	push   esi
c00007fe:	53                   	push   ebx
c00007ff:	e8 a8 ff ff ff       	call   c00007ac <strpbrk>
c0000804:	5a                   	pop    edx
c0000805:	a3 a8 e1 02 c0       	mov    ds:0xc002e1a8,eax
c000080a:	59                   	pop    ecx
c000080b:	39 d8                	cmp    eax,ebx
c000080d:	74 e9                	je     c00007f8 <strtok+0x10>
c000080f:	85 c0                	test   eax,eax
c0000811:	74 1b                	je     c000082e <strtok+0x46>
c0000813:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000816:	8d 50 01             	lea    edx,[eax+0x1]
c0000819:	89 d8                	mov    eax,ebx
c000081b:	89 15 a8 e1 02 c0    	mov    DWORD PTR ds:0xc002e1a8,edx
c0000821:	5b                   	pop    ebx
c0000822:	5e                   	pop    esi
c0000823:	c3                   	ret    
c0000824:	8b 1d a8 e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e1a8
c000082a:	85 db                	test   ebx,ebx
c000082c:	75 cf                	jne    c00007fd <strtok+0x15>
c000082e:	31 c0                	xor    eax,eax
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	90                   	nop

c0000834 <strcpy>:
c0000834:	53                   	push   ebx
c0000835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000083d:	89 c3                	mov    ebx,eax
c000083f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000841:	84 d2                	test   dl,dl
c0000843:	74 0d                	je     c0000852 <strcpy+0x1e>
c0000845:	8d 76 00             	lea    esi,[esi+0x0]
c0000848:	88 13                	mov    BYTE PTR [ebx],dl
c000084a:	41                   	inc    ecx
c000084b:	43                   	inc    ebx
c000084c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000084e:	84 d2                	test   dl,dl
c0000850:	75 f6                	jne    c0000848 <strcpy+0x14>
c0000852:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000855:	5b                   	pop    ebx
c0000856:	c3                   	ret    
c0000857:	90                   	nop

c0000858 <strncpy>:
c0000858:	55                   	push   ebp
c0000859:	57                   	push   edi
c000085a:	56                   	push   esi
c000085b:	53                   	push   ebx
c000085c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000860:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000864:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000868:	85 c0                	test   eax,eax
c000086a:	74 39                	je     c00008a5 <strncpy+0x4d>
c000086c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000086e:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000871:	8d 55 01             	lea    edx,[ebp+0x1]
c0000874:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000877:	84 db                	test   bl,bl
c0000879:	74 31                	je     c00008ac <strncpy+0x54>
c000087b:	85 c9                	test   ecx,ecx
c000087d:	74 26                	je     c00008a5 <strncpy+0x4d>
c000087f:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000882:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000885:	8d 55 02             	lea    edx,[ebp+0x2]
c0000888:	8d 46 02             	lea    eax,[esi+0x2]
c000088b:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000088e:	84 db                	test   bl,bl
c0000890:	75 0f                	jne    c00008a1 <strncpy+0x49>
c0000892:	eb 18                	jmp    c00008ac <strncpy+0x54>
c0000894:	40                   	inc    eax
c0000895:	42                   	inc    edx
c0000896:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000899:	49                   	dec    ecx
c000089a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000089d:	84 db                	test   bl,bl
c000089f:	74 0b                	je     c00008ac <strncpy+0x54>
c00008a1:	85 c9                	test   ecx,ecx
c00008a3:	75 ef                	jne    c0000894 <strncpy+0x3c>
c00008a5:	5b                   	pop    ebx
c00008a6:	89 e8                	mov    eax,ebp
c00008a8:	5e                   	pop    esi
c00008a9:	5f                   	pop    edi
c00008aa:	5d                   	pop    ebp
c00008ab:	c3                   	ret    
c00008ac:	85 c9                	test   ecx,ecx
c00008ae:	74 f5                	je     c00008a5 <strncpy+0x4d>
c00008b0:	fc                   	cld    
c00008b1:	31 c0                	xor    eax,eax
c00008b3:	89 d7                	mov    edi,edx
c00008b5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008b7:	89 e8                	mov    eax,ebp
c00008b9:	5b                   	pop    ebx
c00008ba:	5e                   	pop    esi
c00008bb:	5f                   	pop    edi
c00008bc:	5d                   	pop    ebp
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strcmp>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008ca:	8a 16                	mov    dl,BYTE PTR [esi]
c00008cc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008cf:	38 d1                	cmp    cl,dl
c00008d1:	75 1d                	jne    c00008f0 <strcmp+0x30>
c00008d3:	84 c9                	test   cl,cl
c00008d5:	74 21                	je     c00008f8 <strcmp+0x38>
c00008d7:	b8 01 00 00 00       	mov    eax,0x1
c00008dc:	eb 07                	jmp    c00008e5 <strcmp+0x25>
c00008de:	66 90                	xchg   ax,ax
c00008e0:	40                   	inc    eax
c00008e1:	84 d2                	test   dl,dl
c00008e3:	74 13                	je     c00008f8 <strcmp+0x38>
c00008e5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008e8:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 f0                	je     c00008e0 <strcmp+0x20>
c00008f0:	0f b6 c2             	movzx  eax,dl
c00008f3:	5b                   	pop    ebx
c00008f4:	29 c8                	sub    eax,ecx
c00008f6:	5e                   	pop    esi
c00008f7:	c3                   	ret    
c00008f8:	31 c0                	xor    eax,eax
c00008fa:	5b                   	pop    ebx
c00008fb:	5e                   	pop    esi
c00008fc:	c3                   	ret    
c00008fd:	8d 76 00             	lea    esi,[esi+0x0]

c0000900 <strchr>:
c0000900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000904:	8a 10                	mov    dl,BYTE PTR [eax]
c0000906:	84 d2                	test   dl,dl
c0000908:	74 15                	je     c000091f <strchr+0x1f>
c000090a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000090e:	38 ca                	cmp    dl,cl
c0000910:	75 06                	jne    c0000918 <strchr+0x18>
c0000912:	eb 0e                	jmp    c0000922 <strchr+0x22>
c0000914:	38 ca                	cmp    dl,cl
c0000916:	74 09                	je     c0000921 <strchr+0x21>
c0000918:	40                   	inc    eax
c0000919:	8a 10                	mov    dl,BYTE PTR [eax]
c000091b:	84 d2                	test   dl,dl
c000091d:	75 f5                	jne    c0000914 <strchr+0x14>
c000091f:	31 c0                	xor    eax,eax
c0000921:	c3                   	ret    
c0000922:	c3                   	ret    
c0000923:	90                   	nop

c0000924 <strncmp>:
c0000924:	57                   	push   edi
c0000925:	56                   	push   esi
c0000926:	53                   	push   ebx
c0000927:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000092b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000092f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000933:	85 ff                	test   edi,edi
c0000935:	74 28                	je     c000095f <strncmp+0x3b>
c0000937:	8a 16                	mov    dl,BYTE PTR [esi]
c0000939:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000093c:	38 d1                	cmp    cl,dl
c000093e:	75 28                	jne    c0000968 <strncmp+0x44>
c0000940:	8d 46 01             	lea    eax,[esi+0x1]
c0000943:	84 c9                	test   cl,cl
c0000945:	74 18                	je     c000095f <strncmp+0x3b>
c0000947:	01 fe                	add    esi,edi
c0000949:	eb 0f                	jmp    c000095a <strncmp+0x36>
c000094b:	90                   	nop
c000094c:	8a 10                	mov    dl,BYTE PTR [eax]
c000094e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000951:	38 ca                	cmp    dl,cl
c0000953:	75 13                	jne    c0000968 <strncmp+0x44>
c0000955:	40                   	inc    eax
c0000956:	84 d2                	test   dl,dl
c0000958:	74 05                	je     c000095f <strncmp+0x3b>
c000095a:	43                   	inc    ebx
c000095b:	39 c6                	cmp    esi,eax
c000095d:	75 ed                	jne    c000094c <strncmp+0x28>
c000095f:	5b                   	pop    ebx
c0000960:	31 c0                	xor    eax,eax
c0000962:	5e                   	pop    esi
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]
c0000968:	5b                   	pop    ebx
c0000969:	0f b6 c2             	movzx  eax,dl
c000096c:	5e                   	pop    esi
c000096d:	29 c8                	sub    eax,ecx
c000096f:	5f                   	pop    edi
c0000970:	c3                   	ret    
c0000971:	8d 76 00             	lea    esi,[esi+0x0]

c0000974 <strcat>:
c0000974:	56                   	push   esi
c0000975:	53                   	push   ebx
c0000976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000097a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000097e:	89 c3                	mov    ebx,eax
c0000980:	eb 04                	jmp    c0000986 <strcat+0x12>
c0000982:	66 90                	xchg   ax,ax
c0000984:	89 d3                	mov    ebx,edx
c0000986:	8d 53 01             	lea    edx,[ebx+0x1]
c0000989:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000098d:	75 f5                	jne    c0000984 <strcat+0x10>
c000098f:	31 d2                	xor    edx,edx
c0000991:	8d 76 00             	lea    esi,[esi+0x0]
c0000994:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000997:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000099a:	42                   	inc    edx
c000099b:	84 c9                	test   cl,cl
c000099d:	75 f5                	jne    c0000994 <strcat+0x20>
c000099f:	5b                   	pop    ebx
c00009a0:	5e                   	pop    esi
c00009a1:	c3                   	ret    
c00009a2:	66 90                	xchg   ax,ax

c00009a4 <strncat>:
c00009a4:	56                   	push   esi
c00009a5:	53                   	push   ebx
c00009a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009b2:	85 f6                	test   esi,esi
c00009b4:	74 1e                	je     c00009d4 <strncat+0x30>
c00009b6:	89 c2                	mov    edx,eax
c00009b8:	42                   	inc    edx
c00009b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009bd:	75 f9                	jne    c00009b8 <strncat+0x14>
c00009bf:	01 ce                	add    esi,ecx
c00009c1:	eb 06                	jmp    c00009c9 <strncat+0x25>
c00009c3:	90                   	nop
c00009c4:	39 f1                	cmp    ecx,esi
c00009c6:	74 10                	je     c00009d8 <strncat+0x34>
c00009c8:	42                   	inc    edx
c00009c9:	41                   	inc    ecx
c00009ca:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009cd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d0:	84 db                	test   bl,bl
c00009d2:	75 f0                	jne    c00009c4 <strncat+0x20>
c00009d4:	5b                   	pop    ebx
c00009d5:	5e                   	pop    esi
c00009d6:	c3                   	ret    
c00009d7:	90                   	nop
c00009d8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009db:	5b                   	pop    ebx
c00009dc:	5e                   	pop    esi
c00009dd:	c3                   	ret    
c00009de:	66 90                	xchg   ax,ax

c00009e0 <strstr>:
c00009e0:	57                   	push   edi
c00009e1:	56                   	push   esi
c00009e2:	53                   	push   ebx
c00009e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009eb:	57                   	push   edi
c00009ec:	e8 a3 fd ff ff       	call   c0000794 <strlen>
c00009f1:	59                   	pop    ecx
c00009f2:	85 c0                	test   eax,eax
c00009f4:	74 2a                	je     c0000a20 <strstr+0x40>
c00009f6:	89 c6                	mov    esi,eax
c00009f8:	eb 12                	jmp    c0000a0c <strstr+0x2c>
c00009fa:	66 90                	xchg   ax,ax
c00009fc:	56                   	push   esi
c00009fd:	57                   	push   edi
c00009fe:	53                   	push   ebx
c00009ff:	e8 3c fc ff ff       	call   c0000640 <memcmp>
c0000a04:	83 c4 0c             	add    esp,0xc
c0000a07:	85 c0                	test   eax,eax
c0000a09:	74 15                	je     c0000a20 <strstr+0x40>
c0000a0b:	43                   	inc    ebx
c0000a0c:	53                   	push   ebx
c0000a0d:	e8 82 fd ff ff       	call   c0000794 <strlen>
c0000a12:	5a                   	pop    edx
c0000a13:	39 f0                	cmp    eax,esi
c0000a15:	73 e5                	jae    c00009fc <strstr+0x1c>
c0000a17:	5b                   	pop    ebx
c0000a18:	31 c0                	xor    eax,eax
c0000a1a:	5e                   	pop    esi
c0000a1b:	5f                   	pop    edi
c0000a1c:	c3                   	ret    
c0000a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a20:	89 d8                	mov    eax,ebx
c0000a22:	5b                   	pop    ebx
c0000a23:	5e                   	pop    esi
c0000a24:	5f                   	pop    edi
c0000a25:	c3                   	ret    
c0000a26:	66 90                	xchg   ax,ax

c0000a28 <toupper>:
c0000a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a2c:	0f b6 d0             	movzx  edx,al
c0000a2f:	f6 82 40 92 02 c0 02 	test   BYTE PTR [edx-0x3ffd6dc0],0x2
c0000a36:	74 03                	je     c0000a3b <toupper+0x13>
c0000a38:	83 e8 20             	sub    eax,0x20
c0000a3b:	c3                   	ret    

c0000a3c <tolower>:
c0000a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a40:	0f b6 d0             	movzx  edx,al
c0000a43:	f6 82 40 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6dc0],0x1
c0000a4a:	74 03                	je     c0000a4f <tolower+0x13>
c0000a4c:	83 c0 20             	add    eax,0x20
c0000a4f:	c3                   	ret    

c0000a50 <simple_strtoul>:
c0000a50:	55                   	push   ebp
c0000a51:	57                   	push   edi
c0000a52:	56                   	push   esi
c0000a53:	53                   	push   ebx
c0000a54:	83 ec 08             	sub    esp,0x8
c0000a57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a5f:	90                   	nop
c0000a60:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a63:	f6 82 40 92 02 c0 08 	test   BYTE PTR [edx-0x3ffd6dc0],0x8
c0000a6a:	75 05                	jne    c0000a71 <simple_strtoul+0x21>
c0000a6c:	80 fa 09             	cmp    dl,0x9
c0000a6f:	75 03                	jne    c0000a74 <simple_strtoul+0x24>
c0000a71:	41                   	inc    ecx
c0000a72:	eb ec                	jmp    c0000a60 <simple_strtoul+0x10>
c0000a74:	80 fa 2d             	cmp    dl,0x2d
c0000a77:	0f 84 1b 01 00 00    	je     c0000b98 <simple_strtoul+0x148>
c0000a7d:	80 fa 2b             	cmp    dl,0x2b
c0000a80:	0f 84 c2 00 00 00    	je     c0000b48 <simple_strtoul+0xf8>
c0000a86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a8e:	85 f6                	test   esi,esi
c0000a90:	0f 85 c3 00 00 00    	jne    c0000b59 <simple_strtoul+0x109>
c0000a96:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a98:	80 fa 30             	cmp    dl,0x30
c0000a9b:	0f 84 47 01 00 00    	je     c0000be8 <simple_strtoul+0x198>
c0000aa1:	be 0a 00 00 00       	mov    esi,0xa
c0000aa6:	84 d2                	test   dl,dl
c0000aa8:	0f 84 6f 01 00 00    	je     c0000c1d <simple_strtoul+0x1cd>
c0000aae:	31 ed                	xor    ebp,ebp
c0000ab0:	31 ff                	xor    edi,edi
c0000ab2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ab9:	eb 2b                	jmp    c0000ae6 <simple_strtoul+0x96>
c0000abb:	90                   	nop
c0000abc:	83 eb 30             	sub    ebx,0x30
c0000abf:	39 f3                	cmp    ebx,esi
c0000ac1:	73 4d                	jae    c0000b10 <simple_strtoul+0xc0>
c0000ac3:	31 d2                	xor    edx,edx
c0000ac5:	89 d8                	mov    eax,ebx
c0000ac7:	f7 d0                	not    eax
c0000ac9:	f7 f6                	div    esi
c0000acb:	39 f8                	cmp    eax,edi
c0000acd:	0f 82 b1 00 00 00    	jb     c0000b84 <simple_strtoul+0x134>
c0000ad3:	0f af fe             	imul   edi,esi
c0000ad6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000add:	01 df                	add    edi,ebx
c0000adf:	41                   	inc    ecx
c0000ae0:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ae2:	84 d2                	test   dl,dl
c0000ae4:	74 2a                	je     c0000b10 <simple_strtoul+0xc0>
c0000ae6:	0f b6 da             	movzx  ebx,dl
c0000ae9:	f6 83 40 92 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6dc0],0x4
c0000af0:	75 ca                	jne    c0000abc <simple_strtoul+0x6c>
c0000af2:	0f be d2             	movsx  edx,dl
c0000af5:	52                   	push   edx
c0000af6:	e8 2d ff ff ff       	call   c0000a28 <toupper>
c0000afb:	5b                   	pop    ebx
c0000afc:	0f b6 d0             	movzx  edx,al
c0000aff:	f6 82 40 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6dc0],0x1
c0000b06:	74 08                	je     c0000b10 <simple_strtoul+0xc0>
c0000b08:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b0b:	39 f3                	cmp    ebx,esi
c0000b0d:	72 b4                	jb     c0000ac3 <simple_strtoul+0x73>
c0000b0f:	90                   	nop
c0000b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b14:	85 c0                	test   eax,eax
c0000b16:	74 14                	je     c0000b2c <simple_strtoul+0xdc>
c0000b18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b1b:	09 f8                	or     eax,edi
c0000b1d:	75 71                	jne    c0000b90 <simple_strtoul+0x140>
c0000b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b27:	31 ff                	xor    edi,edi
c0000b29:	89 30                	mov    DWORD PTR [eax],esi
c0000b2b:	90                   	nop
c0000b2c:	4d                   	dec    ebp
c0000b2d:	75 05                	jne    c0000b34 <simple_strtoul+0xe4>
c0000b2f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b34:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b39:	75 02                	jne    c0000b3d <simple_strtoul+0xed>
c0000b3b:	f7 df                	neg    edi
c0000b3d:	83 c4 08             	add    esp,0x8
c0000b40:	89 f8                	mov    eax,edi
c0000b42:	5b                   	pop    ebx
c0000b43:	5e                   	pop    esi
c0000b44:	5f                   	pop    edi
c0000b45:	5d                   	pop    ebp
c0000b46:	c3                   	ret    
c0000b47:	90                   	nop
c0000b48:	41                   	inc    ecx
c0000b49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b51:	85 f6                	test   esi,esi
c0000b53:	0f 84 3d ff ff ff    	je     c0000a96 <simple_strtoul+0x46>
c0000b59:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b5c:	83 f8 22             	cmp    eax,0x22
c0000b5f:	77 6a                	ja     c0000bcb <simple_strtoul+0x17b>
c0000b61:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b63:	83 fe 08             	cmp    esi,0x8
c0000b66:	0f 84 a2 00 00 00    	je     c0000c0e <simple_strtoul+0x1be>
c0000b6c:	83 fe 10             	cmp    esi,0x10
c0000b6f:	0f 85 31 ff ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000b75:	80 fa 30             	cmp    dl,0x30
c0000b78:	74 2c                	je     c0000ba6 <simple_strtoul+0x156>
c0000b7a:	be 10 00 00 00       	mov    esi,0x10
c0000b7f:	e9 22 ff ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000b84:	bd 01 00 00 00       	mov    ebp,0x1
c0000b89:	31 ff                	xor    edi,edi
c0000b8b:	e9 4f ff ff ff       	jmp    c0000adf <simple_strtoul+0x8f>
c0000b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b94:	89 08                	mov    DWORD PTR [eax],ecx
c0000b96:	eb 94                	jmp    c0000b2c <simple_strtoul+0xdc>
c0000b98:	41                   	inc    ecx
c0000b99:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba1:	e9 e8 fe ff ff       	jmp    c0000a8e <simple_strtoul+0x3e>
c0000ba6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000baa:	88 04 24             	mov    BYTE PTR [esp],al
c0000bad:	50                   	push   eax
c0000bae:	e8 89 fe ff ff       	call   c0000a3c <tolower>
c0000bb3:	5e                   	pop    esi
c0000bb4:	83 f8 78             	cmp    eax,0x78
c0000bb7:	0f 84 84 00 00 00    	je     c0000c41 <simple_strtoul+0x1f1>
c0000bbd:	41                   	inc    ecx
c0000bbe:	be 10 00 00 00       	mov    esi,0x10
c0000bc3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bc6:	e9 db fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000bcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bcf:	85 ff                	test   edi,edi
c0000bd1:	74 5c                	je     c0000c2f <simple_strtoul+0x1df>
c0000bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bd7:	85 c9                	test   ecx,ecx
c0000bd9:	75 4e                	jne    c0000c29 <simple_strtoul+0x1d9>
c0000bdb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be1:	31 ff                	xor    edi,edi
c0000be3:	e9 4c ff ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000be8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bec:	88 04 24             	mov    BYTE PTR [esp],al
c0000bef:	50                   	push   eax
c0000bf0:	e8 47 fe ff ff       	call   c0000a3c <tolower>
c0000bf5:	5d                   	pop    ebp
c0000bf6:	83 f8 78             	cmp    eax,0x78
c0000bf9:	74 3b                	je     c0000c36 <simple_strtoul+0x1e6>
c0000bfb:	41                   	inc    ecx
c0000bfc:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bff:	80 fa 30             	cmp    dl,0x30
c0000c02:	74 13                	je     c0000c17 <simple_strtoul+0x1c7>
c0000c04:	be 08 00 00 00       	mov    esi,0x8
c0000c09:	e9 98 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000c0e:	80 fa 30             	cmp    dl,0x30
c0000c11:	0f 85 8f fe ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000c17:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c1a:	41                   	inc    ecx
c0000c1b:	eb e7                	jmp    c0000c04 <simple_strtoul+0x1b4>
c0000c1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c21:	85 d2                	test   edx,edx
c0000c23:	74 0a                	je     c0000c2f <simple_strtoul+0x1df>
c0000c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c29:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c2d:	89 30                	mov    DWORD PTR [eax],esi
c0000c2f:	31 ff                	xor    edi,edi
c0000c31:	e9 fe fe ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000c36:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c39:	83 c1 02             	add    ecx,0x2
c0000c3c:	e9 34 ff ff ff       	jmp    c0000b75 <simple_strtoul+0x125>
c0000c41:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c44:	be 10 00 00 00       	mov    esi,0x10
c0000c49:	83 c1 02             	add    ecx,0x2
c0000c4c:	e9 55 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>

c0000c51 <largebin_index>:
c0000c51:	89 c2                	mov    edx,eax
c0000c53:	c1 ea 08             	shr    edx,0x8
c0000c56:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c5c:	77 10                	ja     c0000c6e <largebin_index+0x1d>
c0000c5e:	0f bd d2             	bsr    edx,edx
c0000c61:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c64:	d3 e8                	shr    eax,cl
c0000c66:	83 e0 03             	and    eax,0x3
c0000c69:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c6d:	c3                   	ret    
c0000c6e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c73:	c3                   	ret    

c0000c74 <malloc_init_state>:
c0000c74:	53                   	push   ebx
c0000c75:	8d 50 34             	lea    edx,[eax+0x34]
c0000c78:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c7e:	89 d1                	mov    ecx,edx
c0000c80:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c83:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c86:	83 c2 08             	add    edx,0x8
c0000c89:	39 da                	cmp    edx,ebx
c0000c8b:	75 f3                	jne    c0000c80 <malloc_init_state+0xc>
c0000c8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c8f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c99:	83 e2 03             	and    edx,0x3
c0000c9c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ca6:	83 ca 48             	or     edx,0x48
c0000ca9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cb3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cbd:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cc4:	89 10                	mov    DWORD PTR [eax],edx
c0000cc6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cc9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cd3:	5b                   	pop    ebx
c0000cd4:	c3                   	ret    

c0000cd5 <malloc_consolidate>:
c0000cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd7:	85 d2                	test   edx,edx
c0000cd9:	0f 84 d8 00 00 00    	je     c0000db7 <malloc_consolidate+0xe2>
c0000cdf:	55                   	push   ebp
c0000ce0:	83 e2 fd             	and    edx,0xfffffffd
c0000ce3:	57                   	push   edi
c0000ce4:	89 c5                	mov    ebp,eax
c0000ce6:	56                   	push   esi
c0000ce7:	8d 78 34             	lea    edi,[eax+0x34]
c0000cea:	53                   	push   ebx
c0000ceb:	83 ec 10             	sub    esp,0x10
c0000cee:	89 10                	mov    DWORD PTR [eax],edx
c0000cf0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cf4:	c1 ea 03             	shr    edx,0x3
c0000cf7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cfb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cff:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d02:	85 d2                	test   edx,edx
c0000d04:	0f 84 98 00 00 00    	je     c0000da2 <malloc_consolidate+0xcd>
c0000d0a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d11:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d14:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d17:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d1b:	89 f9                	mov    ecx,edi
c0000d1d:	83 e1 fe             	and    ecx,0xfffffffe
c0000d20:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d23:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d26:	83 e3 fc             	and    ebx,0xfffffffc
c0000d29:	83 e7 01             	and    edi,0x1
c0000d2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d2f:	75 14                	jne    c0000d45 <malloc_consolidate+0x70>
c0000d31:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d33:	29 fa                	sub    edx,edi
c0000d35:	01 f9                	add    ecx,edi
c0000d37:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3a:	89 fb                	mov    ebx,edi
c0000d3c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d3f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d42:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d45:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d48:	74 40                	je     c0000d8a <malloc_consolidate+0xb5>
c0000d4a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d4d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d50:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d54:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d57:	83 e7 01             	and    edi,0x1
c0000d5a:	75 0e                	jne    c0000d6a <malloc_consolidate+0x95>
c0000d5c:	01 d9                	add    ecx,ebx
c0000d5e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d61:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d64:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d67:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d6a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d6d:	89 ce                	mov    esi,ecx
c0000d6f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d72:	83 ce 01             	or     esi,0x1
c0000d75:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d78:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d7b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d7e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d82:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d85:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d88:	eb 0c                	jmp    c0000d96 <malloc_consolidate+0xc1>
c0000d8a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d8d:	83 c9 01             	or     ecx,0x1
c0000d90:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d93:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d9a:	85 d2                	test   edx,edx
c0000d9c:	0f 85 6f ff ff ff    	jne    c0000d11 <malloc_consolidate+0x3c>
c0000da2:	83 c5 04             	add    ebp,0x4
c0000da5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000da9:	0f 85 50 ff ff ff    	jne    c0000cff <malloc_consolidate+0x2a>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	5b                   	pop    ebx
c0000db3:	5e                   	pop    esi
c0000db4:	5f                   	pop    edi
c0000db5:	5d                   	pop    ebp
c0000db6:	c3                   	ret    
c0000db7:	e9 b8 fe ff ff       	jmp    c0000c74 <malloc_init_state>

c0000dbc <dlfree>:
c0000dbc:	57                   	push   edi
c0000dbd:	56                   	push   esi
c0000dbe:	53                   	push   ebx
c0000dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dc3:	85 db                	test   ebx,ebx
c0000dc5:	0f 84 e2 00 00 00    	je     c0000ead <dlfree+0xf1>
c0000dcb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dce:	8b 0d c0 e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e1c0
c0000dd4:	89 f0                	mov    eax,esi
c0000dd6:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dd9:	83 e0 fc             	and    eax,0xfffffffc
c0000ddc:	39 c1                	cmp    ecx,eax
c0000dde:	72 24                	jb     c0000e04 <dlfree+0x48>
c0000de0:	83 c9 03             	or     ecx,0x3
c0000de3:	c1 e8 03             	shr    eax,0x3
c0000de6:	89 0d c0 e1 02 c0    	mov    DWORD PTR ds:0xc002e1c0,ecx
c0000dec:	83 e8 02             	sub    eax,0x2
c0000def:	8b 0c 85 c4 e1 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1e3c]
c0000df6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000df8:	89 14 85 c4 e1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1e3c],edx
c0000dff:	e9 a9 00 00 00       	jmp    c0000ead <dlfree+0xf1>
c0000e04:	83 e6 02             	and    esi,0x2
c0000e07:	0f 85 a0 00 00 00    	jne    c0000ead <dlfree+0xf1>
c0000e0d:	83 c9 01             	or     ecx,0x1
c0000e10:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e13:	89 0d c0 e1 02 c0    	mov    DWORD PTR ds:0xc002e1c0,ecx
c0000e19:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e1c:	83 e1 fc             	and    ecx,0xfffffffc
c0000e1f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e23:	75 13                	jne    c0000e38 <dlfree+0x7c>
c0000e25:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e28:	29 da                	sub    edx,ebx
c0000e2a:	01 d8                	add    eax,ebx
c0000e2c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e2f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e32:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e35:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e38:	39 35 ec e1 02 c0    	cmp    DWORD PTR ds:0xc002e1ec,esi
c0000e3e:	74 40                	je     c0000e80 <dlfree+0xc4>
c0000e40:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e44:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e47:	80 e3 01             	and    bl,0x1
c0000e4a:	75 0e                	jne    c0000e5a <dlfree+0x9e>
c0000e4c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e4f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e52:	01 c8                	add    eax,ecx
c0000e54:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e57:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e5a:	8b 0d fc e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e1fc
c0000e60:	c7 42 0c f4 e1 02 c0 	mov    DWORD PTR [edx+0xc],0xc002e1f4
c0000e67:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e6a:	89 15 fc e1 02 c0    	mov    DWORD PTR ds:0xc002e1fc,edx
c0000e70:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e73:	89 c1                	mov    ecx,eax
c0000e75:	83 c9 01             	or     ecx,0x1
c0000e78:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e7e:	eb 10                	jmp    c0000e90 <dlfree+0xd4>
c0000e80:	01 c8                	add    eax,ecx
c0000e82:	89 c1                	mov    ecx,eax
c0000e84:	83 c9 01             	or     ecx,0x1
c0000e87:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e8a:	89 15 ec e1 02 c0    	mov    DWORD PTR ds:0xc002e1ec,edx
c0000e90:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e95:	76 16                	jbe    c0000ead <dlfree+0xf1>
c0000e97:	f6 05 c0 e1 02 c0 02 	test   BYTE PTR ds:0xc002e1c0,0x2
c0000e9e:	74 0d                	je     c0000ead <dlfree+0xf1>
c0000ea0:	5b                   	pop    ebx
c0000ea1:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c0000ea6:	5e                   	pop    esi
c0000ea7:	5f                   	pop    edi
c0000ea8:	e9 28 fe ff ff       	jmp    c0000cd5 <malloc_consolidate>
c0000ead:	5b                   	pop    ebx
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	c3                   	ret    

c0000eb1 <sYSMALLOc>:
c0000eb1:	55                   	push   ebp
c0000eb2:	57                   	push   edi
c0000eb3:	56                   	push   esi
c0000eb4:	53                   	push   ebx
c0000eb5:	89 d3                	mov    ebx,edx
c0000eb7:	83 ec 2c             	sub    esp,0x2c
c0000eba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ebe:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ec4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ec7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000eca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ece:	74 1f                	je     c0000eef <sYSMALLOc+0x3e>
c0000ed0:	89 d8                	mov    eax,ebx
c0000ed2:	e8 fe fd ff ff       	call   c0000cd5 <malloc_consolidate>
c0000ed7:	83 ec 0c             	sub    esp,0xc
c0000eda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ede:	83 e8 07             	sub    eax,0x7
c0000ee1:	50                   	push   eax
c0000ee2:	e8 30 02 00 00       	call   c0001117 <dlmalloc>
c0000ee7:	83 c4 10             	add    esp,0x10
c0000eea:	e9 20 02 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000eef:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ef2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ef8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000efb:	83 e0 fc             	and    eax,0xfffffffc
c0000efe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f06:	83 c0 10             	add    eax,0x10
c0000f09:	01 c1                	add    ecx,eax
c0000f0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f0f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f16:	74 04                	je     c0000f1c <sYSMALLOc+0x6b>
c0000f18:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f1c:	f7 da                	neg    edx
c0000f1e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f26:	21 d1                	and    ecx,edx
c0000f28:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f2c:	7f 07                	jg     c0000f35 <sYSMALLOc+0x84>
c0000f2e:	31 c0                	xor    eax,eax
c0000f30:	e9 da 01 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000f35:	83 ec 0c             	sub    esp,0xc
c0000f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f3c:	e8 56 e7 00 00       	call   c000f697 <sbrk>
c0000f41:	83 c4 10             	add    esp,0x10
c0000f44:	89 c6                	mov    esi,eax
c0000f46:	83 f8 ff             	cmp    eax,0xffffffff
c0000f49:	74 e3                	je     c0000f2e <sYSMALLOc+0x7d>
c0000f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f53:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f56:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f5c:	39 f1                	cmp    ecx,esi
c0000f5e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f64:	75 13                	jne    c0000f79 <sYSMALLOc+0xc8>
c0000f66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f6a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f6e:	83 c8 01             	or     eax,0x1
c0000f71:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f74:	e9 3e 01 00 00       	jmp    c00010b7 <sYSMALLOc+0x206>
c0000f79:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f7f:	88 d0                	mov    al,dl
c0000f81:	83 e0 01             	and    eax,0x1
c0000f84:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f8d:	0f 95 c0             	setne  al
c0000f90:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f94:	39 f1                	cmp    ecx,esi
c0000f96:	76 12                	jbe    c0000faa <sYSMALLOc+0xf9>
c0000f98:	84 c0                	test   al,al
c0000f9a:	74 0e                	je     c0000faa <sYSMALLOc+0xf9>
c0000f9c:	83 e2 fe             	and    edx,0xfffffffe
c0000f9f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fa5:	e9 83 00 00 00       	jmp    c000102d <sYSMALLOc+0x17c>
c0000faa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000faf:	74 7c                	je     c000102d <sYSMALLOc+0x17c>
c0000fb1:	84 c0                	test   al,al
c0000fb3:	74 0c                	je     c0000fc1 <sYSMALLOc+0x110>
c0000fb5:	89 f0                	mov    eax,esi
c0000fb7:	29 c8                	sub    eax,ecx
c0000fb9:	01 e8                	add    eax,ebp
c0000fbb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc1:	89 f2                	mov    edx,esi
c0000fc3:	83 e2 07             	and    edx,0x7
c0000fc6:	74 0c                	je     c0000fd4 <sYSMALLOc+0x123>
c0000fc8:	b8 08 00 00 00       	mov    eax,0x8
c0000fcd:	29 d0                	sub    eax,edx
c0000fcf:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fd2:	eb 04                	jmp    c0000fd8 <sYSMALLOc+0x127>
c0000fd4:	89 f5                	mov    ebp,esi
c0000fd6:	31 c0                	xor    eax,eax
c0000fd8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe4:	01 c1                	add    ecx,eax
c0000fe6:	83 ec 0c             	sub    esp,0xc
c0000fe9:	01 f1                	add    ecx,esi
c0000feb:	01 ca                	add    edx,ecx
c0000fed:	29 c8                	sub    eax,ecx
c0000fef:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ff3:	01 c2                	add    edx,eax
c0000ff5:	52                   	push   edx
c0000ff6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ffa:	e8 98 e6 00 00       	call   c000f697 <sbrk>
c0000fff:	83 c4 10             	add    esp,0x10
c0001002:	83 f8 ff             	cmp    eax,0xffffffff
c0001005:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001009:	75 0f                	jne    c000101a <sYSMALLOc+0x169>
c000100b:	83 ec 0c             	sub    esp,0xc
c000100e:	6a 00                	push   0x0
c0001010:	e8 82 e6 00 00       	call   c000f697 <sbrk>
c0001015:	83 c4 10             	add    esp,0x10
c0001018:	eb 30                	jmp    c000104a <sYSMALLOc+0x199>
c000101a:	39 c6                	cmp    esi,eax
c000101c:	76 33                	jbe    c0001051 <sYSMALLOc+0x1a0>
c000101e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001022:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001029:	01 f0                	add    eax,esi
c000102b:	eb 1d                	jmp    c000104a <sYSMALLOc+0x199>
c000102d:	83 ec 0c             	sub    esp,0xc
c0001030:	89 f5                	mov    ebp,esi
c0001032:	6a 00                	push   0x0
c0001034:	e8 5e e6 00 00       	call   c000f697 <sbrk>
c0001039:	89 c2                	mov    edx,eax
c000103b:	29 f2                	sub    edx,esi
c000103d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001041:	83 c4 10             	add    esp,0x10
c0001044:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000104a:	31 d2                	xor    edx,edx
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	74 66                	je     c00010b7 <sYSMALLOc+0x206>
c0001051:	29 e8                	sub    eax,ebp
c0001053:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001056:	01 d0                	add    eax,edx
c0001058:	83 c8 01             	or     eax,0x1
c000105b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000105e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001064:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001069:	74 4c                	je     c00010b7 <sYSMALLOc+0x206>
c000106b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000106f:	83 e8 0c             	sub    eax,0xc
c0001072:	83 e0 f8             	and    eax,0xfffffff8
c0001075:	89 c2                	mov    edx,eax
c0001077:	83 ca 01             	or     edx,0x1
c000107a:	83 f8 0f             	cmp    eax,0xf
c000107d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001080:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001088:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001090:	76 25                	jbe    c00010b7 <sYSMALLOc+0x206>
c0001092:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001098:	83 ec 0c             	sub    esp,0xc
c000109b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a5:	83 c7 08             	add    edi,0x8
c00010a8:	57                   	push   edi
c00010a9:	e8 0e fd ff ff       	call   c0000dbc <dlfree>
c00010ae:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b4:	83 c4 10             	add    esp,0x10
c00010b7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010bd:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010c3:	73 06                	jae    c00010cb <sYSMALLOc+0x21a>
c00010c5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010cb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d1:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010d7:	73 06                	jae    c00010df <sYSMALLOc+0x22e>
c00010d9:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010e5:	83 e2 fc             	and    edx,0xfffffffc
c00010e8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010ec:	0f 82 3c fe ff ff    	jb     c0000f2e <sYSMALLOc+0x7d>
c00010f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010f6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010f9:	29 fa                	sub    edx,edi
c00010fb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010fe:	83 ca 01             	or     edx,0x1
c0001101:	89 fb                	mov    ebx,edi
c0001103:	83 c0 08             	add    eax,0x8
c0001106:	83 cb 01             	or     ebx,0x1
c0001109:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000110c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000110f:	83 c4 2c             	add    esp,0x2c
c0001112:	5b                   	pop    ebx
c0001113:	5e                   	pop    esi
c0001114:	5f                   	pop    edi
c0001115:	5d                   	pop    ebp
c0001116:	c3                   	ret    

c0001117 <dlmalloc>:
c0001117:	55                   	push   ebp
c0001118:	57                   	push   edi
c0001119:	56                   	push   esi
c000111a:	53                   	push   ebx
c000111b:	83 ec 1c             	sub    esp,0x1c
c000111e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001122:	83 f8 df             	cmp    eax,0xffffffdf
c0001125:	0f 87 70 03 00 00    	ja     c000149b <dlmalloc+0x384>
c000112b:	83 c0 0b             	add    eax,0xb
c000112e:	be 10 00 00 00       	mov    esi,0x10
c0001133:	83 f8 0f             	cmp    eax,0xf
c0001136:	76 05                	jbe    c000113d <dlmalloc+0x26>
c0001138:	83 e0 f8             	and    eax,0xfffffff8
c000113b:	89 c6                	mov    esi,eax
c000113d:	8b 3d c0 e1 02 c0    	mov    edi,DWORD PTR ds:0xc002e1c0
c0001143:	f7 c7 01 00 00 00    	test   edi,0x1
c0001149:	75 17                	jne    c0001162 <dlmalloc+0x4b>
c000114b:	85 ff                	test   edi,edi
c000114d:	0f 85 05 03 00 00    	jne    c0001458 <dlmalloc+0x341>
c0001153:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c0001158:	e8 78 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c000115d:	e9 f6 02 00 00       	jmp    c0001458 <dlmalloc+0x341>
c0001162:	39 f7                	cmp    edi,esi
c0001164:	72 1f                	jb     c0001185 <dlmalloc+0x6e>
c0001166:	89 f2                	mov    edx,esi
c0001168:	c1 ea 03             	shr    edx,0x3
c000116b:	83 ea 02             	sub    edx,0x2
c000116e:	8b 04 95 c4 e1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1e3c]
c0001175:	85 c0                	test   eax,eax
c0001177:	74 0c                	je     c0001185 <dlmalloc+0x6e>
c0001179:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000117c:	89 0c 95 c4 e1 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1e3c],ecx
c0001183:	eb 30                	jmp    c00011b5 <dlmalloc+0x9e>
c0001185:	89 f0                	mov    eax,esi
c0001187:	81 fe ff 00 00 00    	cmp    esi,0xff
c000118d:	77 2e                	ja     c00011bd <dlmalloc+0xa6>
c000118f:	c1 e8 03             	shr    eax,0x3
c0001192:	8d 14 c5 f4 e1 02 c0 	lea    edx,[eax*8-0x3ffd1e0c]
c0001199:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000119d:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011a3:	39 c3                	cmp    ebx,eax
c00011a5:	74 2e                	je     c00011d5 <dlmalloc+0xbe>
c00011a7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011aa:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011af:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011b2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011b5:	83 c0 08             	add    eax,0x8
c00011b8:	e9 e0 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c00011bd:	e8 8f fa ff ff       	call   c0000c51 <largebin_index>
c00011c2:	83 e7 02             	and    edi,0x2
c00011c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011c9:	74 0a                	je     c00011d5 <dlmalloc+0xbe>
c00011cb:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c00011d0:	e8 00 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c00011d5:	8d 46 10             	lea    eax,[esi+0x10]
c00011d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011dc:	8b 1d 00 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e200
c00011e2:	81 fb f4 e1 02 c0    	cmp    ebx,0xc002e1f4
c00011e8:	0f 84 13 01 00 00    	je     c0001301 <dlmalloc+0x1ea>
c00011ee:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011f4:	83 e7 fc             	and    edi,0xfffffffc
c00011f7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011fd:	77 4c                	ja     c000124b <dlmalloc+0x134>
c00011ff:	3d f4 e1 02 c0       	cmp    eax,0xc002e1f4
c0001204:	75 45                	jne    c000124b <dlmalloc+0x134>
c0001206:	39 1d f0 e1 02 c0    	cmp    DWORD PTR ds:0xc002e1f0,ebx
c000120c:	75 3d                	jne    c000124b <dlmalloc+0x134>
c000120e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001212:	73 37                	jae    c000124b <dlmalloc+0x134>
c0001214:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001217:	89 fa                	mov    edx,edi
c0001219:	a3 fc e1 02 c0       	mov    ds:0xc002e1fc,eax
c000121e:	a3 00 e2 02 c0       	mov    ds:0xc002e200,eax
c0001223:	a3 f0 e1 02 c0       	mov    ds:0xc002e1f0,eax
c0001228:	29 f2                	sub    edx,esi
c000122a:	c7 40 08 f4 e1 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e1f4
c0001231:	c7 40 0c f4 e1 02 c0 	mov    DWORD PTR [eax+0xc],0xc002e1f4
c0001238:	83 ce 01             	or     esi,0x1
c000123b:	89 d1                	mov    ecx,edx
c000123d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001240:	83 c9 01             	or     ecx,0x1
c0001243:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001246:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001249:	eb 15                	jmp    c0001260 <dlmalloc+0x149>
c000124b:	a3 00 e2 02 c0       	mov    ds:0xc002e200,eax
c0001250:	39 fe                	cmp    esi,edi
c0001252:	c7 40 08 f4 e1 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e1f4
c0001259:	75 0d                	jne    c0001268 <dlmalloc+0x151>
c000125b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001260:	8d 43 08             	lea    eax,[ebx+0x8]
c0001263:	e9 35 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c0001268:	89 f8                	mov    eax,edi
c000126a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001270:	77 19                	ja     c000128b <dlmalloc+0x174>
c0001272:	c1 e8 03             	shr    eax,0x3
c0001275:	8d 14 00             	lea    edx,[eax+eax*1]
c0001278:	83 c2 0d             	add    edx,0xd
c000127b:	8d 2c 95 b8 e1 02 c0 	lea    ebp,[edx*4-0x3ffd1e48]
c0001282:	8b 14 95 c0 e1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1e40]
c0001289:	eb 46                	jmp    c00012d1 <dlmalloc+0x1ba>
c000128b:	e8 c1 f9 ff ff       	call   c0000c51 <largebin_index>
c0001290:	8d 14 00             	lea    edx,[eax+eax*1]
c0001293:	83 c2 0d             	add    edx,0xd
c0001296:	8d 0c 95 c0 e1 02 c0 	lea    ecx,[edx*4-0x3ffd1e40]
c000129d:	8b 14 95 c0 e1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1e40]
c00012a4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012a7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012ab:	89 d5                	mov    ebp,edx
c00012ad:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b1:	74 1e                	je     c00012d1 <dlmalloc+0x1ba>
c00012b3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012b6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012b9:	77 12                	ja     c00012cd <dlmalloc+0x1b6>
c00012bb:	83 cf 01             	or     edi,0x1
c00012be:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c1:	76 05                	jbe    c00012c8 <dlmalloc+0x1b1>
c00012c3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012c6:	eb f6                	jmp    c00012be <dlmalloc+0x1a7>
c00012c8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012cb:	eb 04                	jmp    c00012d1 <dlmalloc+0x1ba>
c00012cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d1:	89 c7                	mov    edi,eax
c00012d3:	88 c1                	mov    cl,al
c00012d5:	c1 ff 05             	sar    edi,0x5
c00012d8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012dc:	bf 01 00 00 00       	mov    edi,0x1
c00012e1:	d3 e7                	shl    edi,cl
c00012e3:	89 f8                	mov    eax,edi
c00012e5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012e9:	09 04 bd f4 e4 02 c0 	or     DWORD PTR [edi*4-0x3ffd1b0c],eax
c00012f0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012f3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012f6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012f9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012fc:	e9 db fe ff ff       	jmp    c00011dc <dlmalloc+0xc5>
c0001301:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001307:	76 78                	jbe    c0001381 <dlmalloc+0x26a>
c0001309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000130d:	8d 04 c5 f4 e1 02 c0 	lea    eax,[eax*8-0x3ffd1e0c]
c0001314:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001317:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000131a:	39 ca                	cmp    edx,ecx
c000131c:	74 63                	je     c0001381 <dlmalloc+0x26a>
c000131e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001321:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001324:	83 e3 fc             	and    ebx,0xfffffffc
c0001327:	39 de                	cmp    esi,ebx
c0001329:	77 52                	ja     c000137d <dlmalloc+0x266>
c000132b:	89 df                	mov    edi,ebx
c000132d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001330:	29 f7                	sub    edi,esi
c0001332:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001335:	01 d3                	add    ebx,edx
c0001337:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000133a:	83 ff 0f             	cmp    edi,0xf
c000133d:	8d 42 08             	lea    eax,[edx+0x8]
c0001340:	77 09                	ja     c000134b <dlmalloc+0x234>
c0001342:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001346:	e9 52 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000134b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000134e:	83 ce 01             	or     esi,0x1
c0001351:	89 0d fc e1 02 c0    	mov    DWORD PTR ds:0xc002e1fc,ecx
c0001357:	89 0d 00 e2 02 c0    	mov    DWORD PTR ds:0xc002e200,ecx
c000135d:	c7 41 08 f4 e1 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002e1f4
c0001364:	c7 41 0c f4 e1 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002e1f4
c000136b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000136e:	89 fa                	mov    edx,edi
c0001370:	83 ca 01             	or     edx,0x1
c0001373:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001376:	89 3b                	mov    DWORD PTR [ebx],edi
c0001378:	e9 20 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000137d:	89 c2                	mov    edx,eax
c000137f:	eb 99                	jmp    c000131a <dlmalloc+0x203>
c0001381:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001385:	b8 01 00 00 00       	mov    eax,0x1
c000138a:	41                   	inc    ecx
c000138b:	89 cb                	mov    ebx,ecx
c000138d:	8d 14 cd ec e1 02 c0 	lea    edx,[ecx*8-0x3ffd1e14]
c0001394:	c1 eb 05             	shr    ebx,0x5
c0001397:	d3 e0                	shl    eax,cl
c0001399:	8b 3c 9d f4 e4 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1b0c]
c00013a0:	39 f8                	cmp    eax,edi
c00013a2:	77 04                	ja     c00013a8 <dlmalloc+0x291>
c00013a4:	85 c0                	test   eax,eax
c00013a6:	75 26                	jne    c00013ce <dlmalloc+0x2b7>
c00013a8:	43                   	inc    ebx
c00013a9:	83 fb 02             	cmp    ebx,0x2
c00013ac:	0f 87 a6 00 00 00    	ja     c0001458 <dlmalloc+0x341>
c00013b2:	8b 3c 9d f4 e4 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1b0c]
c00013b9:	85 ff                	test   edi,edi
c00013bb:	74 eb                	je     c00013a8 <dlmalloc+0x291>
c00013bd:	89 d8                	mov    eax,ebx
c00013bf:	c1 e0 06             	shl    eax,0x6
c00013c2:	8d 14 85 ec e1 02 c0 	lea    edx,[eax*4-0x3ffd1e14]
c00013c9:	b8 01 00 00 00       	mov    eax,0x1
c00013ce:	85 f8                	test   eax,edi
c00013d0:	75 07                	jne    c00013d9 <dlmalloc+0x2c2>
c00013d2:	83 c2 08             	add    edx,0x8
c00013d5:	01 c0                	add    eax,eax
c00013d7:	eb f5                	jmp    c00013ce <dlmalloc+0x2b7>
c00013d9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013dc:	39 ca                	cmp    edx,ecx
c00013de:	75 14                	jne    c00013f4 <dlmalloc+0x2dd>
c00013e0:	89 c1                	mov    ecx,eax
c00013e2:	83 c2 08             	add    edx,0x8
c00013e5:	f7 d1                	not    ecx
c00013e7:	01 c0                	add    eax,eax
c00013e9:	21 cf                	and    edi,ecx
c00013eb:	89 3c 9d f4 e4 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1b0c],edi
c00013f2:	eb ac                	jmp    c00013a0 <dlmalloc+0x289>
c00013f4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013f7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013fa:	83 e0 fc             	and    eax,0xfffffffc
c00013fd:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001400:	89 c3                	mov    ebx,eax
c0001402:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001405:	29 f3                	sub    ebx,esi
c0001407:	8d 14 01             	lea    edx,[ecx+eax*1]
c000140a:	83 fb 0f             	cmp    ebx,0xf
c000140d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001410:	77 09                	ja     c000141b <dlmalloc+0x304>
c0001412:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001416:	e9 82 00 00 00       	jmp    c000149d <dlmalloc+0x386>
c000141b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000141e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001424:	89 3d fc e1 02 c0    	mov    DWORD PTR ds:0xc002e1fc,edi
c000142a:	89 3d 00 e2 02 c0    	mov    DWORD PTR ds:0xc002e200,edi
c0001430:	c7 47 08 f4 e1 02 c0 	mov    DWORD PTR [edi+0x8],0xc002e1f4
c0001437:	c7 47 0c f4 e1 02 c0 	mov    DWORD PTR [edi+0xc],0xc002e1f4
c000143e:	77 06                	ja     c0001446 <dlmalloc+0x32f>
c0001440:	89 3d f0 e1 02 c0    	mov    DWORD PTR ds:0xc002e1f0,edi
c0001446:	83 ce 01             	or     esi,0x1
c0001449:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000144c:	89 d9                	mov    ecx,ebx
c000144e:	83 c9 01             	or     ecx,0x1
c0001451:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001454:	89 1a                	mov    DWORD PTR [edx],ebx
c0001456:	eb 45                	jmp    c000149d <dlmalloc+0x386>
c0001458:	a1 ec e1 02 c0       	mov    eax,ds:0xc002e1ec
c000145d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001460:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001463:	83 e2 fc             	and    edx,0xfffffffc
c0001466:	39 d1                	cmp    ecx,edx
c0001468:	77 1e                	ja     c0001488 <dlmalloc+0x371>
c000146a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000146d:	89 f3                	mov    ebx,esi
c000146f:	89 0d ec e1 02 c0    	mov    DWORD PTR ds:0xc002e1ec,ecx
c0001475:	83 cb 01             	or     ebx,0x1
c0001478:	29 f2                	sub    edx,esi
c000147a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000147d:	83 ca 01             	or     edx,0x1
c0001480:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001483:	e9 2d fd ff ff       	jmp    c00011b5 <dlmalloc+0x9e>
c0001488:	83 c4 1c             	add    esp,0x1c
c000148b:	89 f0                	mov    eax,esi
c000148d:	5b                   	pop    ebx
c000148e:	ba c0 e1 02 c0       	mov    edx,0xc002e1c0
c0001493:	5e                   	pop    esi
c0001494:	5f                   	pop    edi
c0001495:	5d                   	pop    ebp
c0001496:	e9 16 fa ff ff       	jmp    c0000eb1 <sYSMALLOc>
c000149b:	31 c0                	xor    eax,eax
c000149d:	83 c4 1c             	add    esp,0x1c
c00014a0:	5b                   	pop    ebx
c00014a1:	5e                   	pop    esi
c00014a2:	5f                   	pop    edi
c00014a3:	5d                   	pop    ebp
c00014a4:	c3                   	ret    

c00014a5 <iALLOc>:
c00014a5:	55                   	push   ebp
c00014a6:	89 c5                	mov    ebp,eax
c00014a8:	57                   	push   edi
c00014a9:	56                   	push   esi
c00014aa:	53                   	push   ebx
c00014ab:	83 ec 2c             	sub    esp,0x2c
c00014ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014b2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ba:	83 3d c0 e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e1c0,0x0
c00014c1:	75 12                	jne    c00014d5 <iALLOc+0x30>
c00014c3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014c7:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c00014cc:	e8 04 f8 ff ff       	call   c0000cd5 <malloc_consolidate>
c00014d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014da:	74 12                	je     c00014ee <iALLOc+0x49>
c00014dc:	85 ed                	test   ebp,ebp
c00014de:	0f 84 64 01 00 00    	je     c0001648 <iALLOc+0x1a3>
c00014e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014ec:	eb 33                	jmp    c0001521 <iALLOc+0x7c>
c00014ee:	85 ed                	test   ebp,ebp
c00014f0:	75 14                	jne    c0001506 <iALLOc+0x61>
c00014f2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014fa:	83 c4 2c             	add    esp,0x2c
c00014fd:	5b                   	pop    ebx
c00014fe:	5e                   	pop    esi
c00014ff:	5f                   	pop    edi
c0001500:	5d                   	pop    ebp
c0001501:	e9 11 fc ff ff       	jmp    c0001117 <dlmalloc>
c0001506:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000150d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001515:	83 f8 0f             	cmp    eax,0xf
c0001518:	76 07                	jbe    c0001521 <iALLOc+0x7c>
c000151a:	83 e0 f8             	and    eax,0xfffffff8
c000151d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001521:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001526:	75 09                	jne    c0001531 <iALLOc+0x8c>
c0001528:	89 d0                	mov    eax,edx
c000152a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000152d:	31 f6                	xor    esi,esi
c000152f:	eb 3b                	jmp    c000156c <iALLOc+0xc7>
c0001531:	8b 02                	mov    eax,DWORD PTR [edx]
c0001533:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000153b:	83 c0 0b             	add    eax,0xb
c000153e:	83 f8 0f             	cmp    eax,0xf
c0001541:	76 07                	jbe    c000154a <iALLOc+0xa5>
c0001543:	83 e0 f8             	and    eax,0xfffffff8
c0001546:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000154a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000154e:	0f af f5             	imul   esi,ebp
c0001551:	eb 25                	jmp    c0001578 <iALLOc+0xd3>
c0001553:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001555:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001558:	bb 10 00 00 00       	mov    ebx,0x10
c000155d:	83 f9 0f             	cmp    ecx,0xf
c0001560:	76 05                	jbe    c0001567 <iALLOc+0xc2>
c0001562:	83 e1 f8             	and    ecx,0xfffffff8
c0001565:	89 cb                	mov    ebx,ecx
c0001567:	01 de                	add    esi,ebx
c0001569:	83 c0 04             	add    eax,0x4
c000156c:	39 c7                	cmp    edi,eax
c000156e:	75 e3                	jne    c0001553 <iALLOc+0xae>
c0001570:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001578:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000157c:	8b 1d 14 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e514
c0001582:	83 ec 0c             	sub    esp,0xc
c0001585:	c7 05 14 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e514,0x0
c000158f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001593:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001597:	50                   	push   eax
c0001598:	e8 7a fb ff ff       	call   c0001117 <dlmalloc>
c000159d:	83 c4 10             	add    esp,0x10
c00015a0:	89 1d 14 e5 02 c0    	mov    DWORD PTR ds:0xc002e514,ebx
c00015a6:	85 c0                	test   eax,eax
c00015a8:	0f 84 92 00 00 00    	je     c0001640 <iALLOc+0x19b>
c00015ae:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b1:	8d 78 f8             	lea    edi,[eax-0x8]
c00015b4:	83 e3 fc             	and    ebx,0xfffffffc
c00015b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015bb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c0:	74 1e                	je     c00015e0 <iALLOc+0x13b>
c00015c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015c6:	89 d9                	mov    ecx,ebx
c00015c8:	52                   	push   edx
c00015c9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015cd:	83 e9 04             	sub    ecx,0x4
c00015d0:	51                   	push   ecx
c00015d1:	6a 00                	push   0x0
c00015d3:	50                   	push   eax
c00015d4:	e8 9f f1 ff ff       	call   c0000778 <memset>
c00015d9:	83 c4 10             	add    esp,0x10
c00015dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015e5:	75 14                	jne    c00015fb <iALLOc+0x156>
c00015e7:	8d 04 37             	lea    eax,[edi+esi*1]
c00015ea:	29 f3                	sub    ebx,esi
c00015ec:	8d 48 08             	lea    ecx,[eax+0x8]
c00015ef:	83 cb 01             	or     ebx,0x1
c00015f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015f9:	89 f3                	mov    ebx,esi
c00015fb:	31 c0                	xor    eax,eax
c00015fd:	4d                   	dec    ebp
c00015fe:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001601:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001605:	39 c5                	cmp    ebp,eax
c0001607:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000160a:	74 2c                	je     c0001638 <iALLOc+0x193>
c000160c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001610:	85 c9                	test   ecx,ecx
c0001612:	75 15                	jne    c0001629 <iALLOc+0x184>
c0001614:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001617:	8d 71 0b             	lea    esi,[ecx+0xb]
c000161a:	b9 10 00 00 00       	mov    ecx,0x10
c000161f:	83 fe 0f             	cmp    esi,0xf
c0001622:	76 05                	jbe    c0001629 <iALLOc+0x184>
c0001624:	83 e6 f8             	and    esi,0xfffffff8
c0001627:	89 f1                	mov    ecx,esi
c0001629:	89 ce                	mov    esi,ecx
c000162b:	29 cb                	sub    ebx,ecx
c000162d:	83 ce 01             	or     esi,0x1
c0001630:	40                   	inc    eax
c0001631:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001634:	01 cf                	add    edi,ecx
c0001636:	eb c6                	jmp    c00015fe <iALLOc+0x159>
c0001638:	83 cb 01             	or     ebx,0x1
c000163b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000163e:	eb 08                	jmp    c0001648 <iALLOc+0x1a3>
c0001640:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000164c:	83 c4 2c             	add    esp,0x2c
c000164f:	5b                   	pop    ebx
c0001650:	5e                   	pop    esi
c0001651:	5f                   	pop    edi
c0001652:	5d                   	pop    ebp
c0001653:	c3                   	ret    

c0001654 <dlrealloc>:
c0001654:	55                   	push   ebp
c0001655:	57                   	push   edi
c0001656:	56                   	push   esi
c0001657:	53                   	push   ebx
c0001658:	83 ec 1c             	sub    esp,0x1c
c000165b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000165f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001663:	85 db                	test   ebx,ebx
c0001665:	75 10                	jne    c0001677 <dlrealloc+0x23>
c0001667:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000166b:	83 c4 1c             	add    esp,0x1c
c000166e:	5b                   	pop    ebx
c000166f:	5e                   	pop    esi
c0001670:	5f                   	pop    edi
c0001671:	5d                   	pop    ebp
c0001672:	e9 a0 fa ff ff       	jmp    c0001117 <dlmalloc>
c0001677:	83 f8 df             	cmp    eax,0xffffffdf
c000167a:	76 07                	jbe    c0001683 <dlrealloc+0x2f>
c000167c:	31 db                	xor    ebx,ebx
c000167e:	e9 7c 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c0001683:	83 c0 0b             	add    eax,0xb
c0001686:	bf 10 00 00 00       	mov    edi,0x10
c000168b:	83 f8 0f             	cmp    eax,0xf
c000168e:	76 05                	jbe    c0001695 <dlrealloc+0x41>
c0001690:	83 e0 f8             	and    eax,0xfffffff8
c0001693:	89 c7                	mov    edi,eax
c0001695:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001698:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000169b:	89 c6                	mov    esi,eax
c000169d:	83 e6 fc             	and    esi,0xfffffffc
c00016a0:	a8 02                	test   al,0x2
c00016a2:	75 d8                	jne    c000167c <dlrealloc+0x28>
c00016a4:	39 f7                	cmp    edi,esi
c00016a6:	0f 86 15 01 00 00    	jbe    c00017c1 <dlrealloc+0x16d>
c00016ac:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016b3:	39 15 ec e1 02 c0    	cmp    DWORD PTR ds:0xc002e1ec,edx
c00016b9:	75 33                	jne    c00016ee <dlrealloc+0x9a>
c00016bb:	83 e1 fc             	and    ecx,0xfffffffc
c00016be:	01 f1                	add    ecx,esi
c00016c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016c4:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016c7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016cb:	77 49                	ja     c0001716 <dlrealloc+0xc2>
c00016cd:	01 fd                	add    ebp,edi
c00016cf:	83 e0 01             	and    eax,0x1
c00016d2:	09 f8                	or     eax,edi
c00016d4:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016d7:	89 2d ec e1 02 c0    	mov    DWORD PTR ds:0xc002e1ec,ebp
c00016dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e1:	29 f8                	sub    eax,edi
c00016e3:	83 c8 01             	or     eax,0x1
c00016e6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016e9:	e9 11 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c00016ee:	89 c8                	mov    eax,ecx
c00016f0:	83 e0 fe             	and    eax,0xfffffffe
c00016f3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016f8:	75 1c                	jne    c0001716 <dlrealloc+0xc2>
c00016fa:	83 e1 fc             	and    ecx,0xfffffffc
c00016fd:	01 f1                	add    ecx,esi
c00016ff:	39 cf                	cmp    edi,ecx
c0001701:	77 13                	ja     c0001716 <dlrealloc+0xc2>
c0001703:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001706:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001709:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000170c:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000170f:	89 ce                	mov    esi,ecx
c0001711:	e9 ab 00 00 00       	jmp    c00017c1 <dlrealloc+0x16d>
c0001716:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000171a:	8d 47 f9             	lea    eax,[edi-0x7]
c000171d:	83 ec 0c             	sub    esp,0xc
c0001720:	50                   	push   eax
c0001721:	e8 f1 f9 ff ff       	call   c0001117 <dlmalloc>
c0001726:	83 c4 10             	add    esp,0x10
c0001729:	89 c1                	mov    ecx,eax
c000172b:	85 c0                	test   eax,eax
c000172d:	0f 84 49 ff ff ff    	je     c000167c <dlrealloc+0x28>
c0001733:	8d 40 f8             	lea    eax,[eax-0x8]
c0001736:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000173a:	39 c2                	cmp    edx,eax
c000173c:	75 0a                	jne    c0001748 <dlrealloc+0xf4>
c000173e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001741:	83 e0 fc             	and    eax,0xfffffffc
c0001744:	01 c6                	add    esi,eax
c0001746:	eb 79                	jmp    c00017c1 <dlrealloc+0x16d>
c0001748:	83 ee 04             	sub    esi,0x4
c000174b:	83 fe 27             	cmp    esi,0x27
c000174e:	76 16                	jbe    c0001766 <dlrealloc+0x112>
c0001750:	50                   	push   eax
c0001751:	56                   	push   esi
c0001752:	53                   	push   ebx
c0001753:	51                   	push   ecx
c0001754:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001758:	e8 e7 ef ff ff       	call   c0000744 <memcpy>
c000175d:	83 c4 10             	add    esp,0x10
c0001760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001764:	eb 43                	jmp    c00017a9 <dlrealloc+0x155>
c0001766:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001768:	83 fe 13             	cmp    esi,0x13
c000176b:	89 01                	mov    DWORD PTR [ecx],eax
c000176d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001770:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001773:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001776:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001779:	76 2e                	jbe    c00017a9 <dlrealloc+0x155>
c000177b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000177e:	83 fe 1b             	cmp    esi,0x1b
c0001781:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001784:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001787:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000178a:	76 1d                	jbe    c00017a9 <dlrealloc+0x155>
c000178c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000178f:	83 fe 23             	cmp    esi,0x23
c0001792:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001795:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001798:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000179b:	76 0c                	jbe    c00017a9 <dlrealloc+0x155>
c000179d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a0:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017a6:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017ad:	83 ec 0c             	sub    esp,0xc
c00017b0:	53                   	push   ebx
c00017b1:	e8 06 f6 ff ff       	call   c0000dbc <dlfree>
c00017b6:	83 c4 10             	add    esp,0x10
c00017b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017bd:	89 cb                	mov    ebx,ecx
c00017bf:	eb 3e                	jmp    c00017ff <dlrealloc+0x1ab>
c00017c1:	89 f2                	mov    edx,esi
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	29 fa                	sub    edx,edi
c00017c8:	83 e1 01             	and    ecx,0x1
c00017cb:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017cf:	83 fa 0f             	cmp    edx,0xf
c00017d2:	77 0b                	ja     c00017df <dlrealloc+0x18b>
c00017d4:	09 ce                	or     esi,ecx
c00017d6:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017d9:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017dd:	eb 20                	jmp    c00017ff <dlrealloc+0x1ab>
c00017df:	01 fd                	add    ebp,edi
c00017e1:	83 ec 0c             	sub    esp,0xc
c00017e4:	09 cf                	or     edi,ecx
c00017e6:	83 ca 01             	or     edx,0x1
c00017e9:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017ec:	83 c5 08             	add    ebp,0x8
c00017ef:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017f2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017f6:	55                   	push   ebp
c00017f7:	e8 c0 f5 ff ff       	call   c0000dbc <dlfree>
c00017fc:	83 c4 10             	add    esp,0x10
c00017ff:	83 c4 1c             	add    esp,0x1c
c0001802:	89 d8                	mov    eax,ebx
c0001804:	5b                   	pop    ebx
c0001805:	5e                   	pop    esi
c0001806:	5f                   	pop    edi
c0001807:	5d                   	pop    ebp
c0001808:	c3                   	ret    

c0001809 <dlmemalign>:
c0001809:	55                   	push   ebp
c000180a:	57                   	push   edi
c000180b:	56                   	push   esi
c000180c:	53                   	push   ebx
c000180d:	83 ec 0c             	sub    esp,0xc
c0001810:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001814:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001818:	83 fa 08             	cmp    edx,0x8
c000181b:	77 10                	ja     c000182d <dlmemalign+0x24>
c000181d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001821:	83 c4 0c             	add    esp,0xc
c0001824:	5b                   	pop    ebx
c0001825:	5e                   	pop    esi
c0001826:	5f                   	pop    edi
c0001827:	5d                   	pop    ebp
c0001828:	e9 ea f8 ff ff       	jmp    c0001117 <dlmalloc>
c000182d:	bf 10 00 00 00       	mov    edi,0x10
c0001832:	83 fa 0f             	cmp    edx,0xf
c0001835:	76 13                	jbe    c000184a <dlmemalign+0x41>
c0001837:	8d 4a ff             	lea    ecx,[edx-0x1]
c000183a:	85 d1                	test   ecx,edx
c000183c:	75 04                	jne    c0001842 <dlmemalign+0x39>
c000183e:	89 d7                	mov    edi,edx
c0001840:	eb 08                	jmp    c000184a <dlmemalign+0x41>
c0001842:	39 d7                	cmp    edi,edx
c0001844:	73 04                	jae    c000184a <dlmemalign+0x41>
c0001846:	01 ff                	add    edi,edi
c0001848:	eb f8                	jmp    c0001842 <dlmemalign+0x39>
c000184a:	83 f8 df             	cmp    eax,0xffffffdf
c000184d:	76 07                	jbe    c0001856 <dlmemalign+0x4d>
c000184f:	31 c0                	xor    eax,eax
c0001851:	e9 ce 00 00 00       	jmp    c0001924 <dlmemalign+0x11b>
c0001856:	83 c0 0b             	add    eax,0xb
c0001859:	bd 10 00 00 00       	mov    ebp,0x10
c000185e:	83 f8 0f             	cmp    eax,0xf
c0001861:	76 05                	jbe    c0001868 <dlmemalign+0x5f>
c0001863:	83 e0 f8             	and    eax,0xfffffff8
c0001866:	89 c5                	mov    ebp,eax
c0001868:	83 ec 0c             	sub    esp,0xc
c000186b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000186f:	50                   	push   eax
c0001870:	e8 a2 f8 ff ff       	call   c0001117 <dlmalloc>
c0001875:	83 c4 10             	add    esp,0x10
c0001878:	89 c1                	mov    ecx,eax
c000187a:	85 c0                	test   eax,eax
c000187c:	74 d1                	je     c000184f <dlmemalign+0x46>
c000187e:	31 d2                	xor    edx,edx
c0001880:	8d 70 f8             	lea    esi,[eax-0x8]
c0001883:	f7 f7                	div    edi
c0001885:	85 d2                	test   edx,edx
c0001887:	74 62                	je     c00018eb <dlmemalign+0xe2>
c0001889:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000188d:	89 f8                	mov    eax,edi
c000188f:	f7 d8                	neg    eax
c0001891:	21 c3                	and    ebx,eax
c0001893:	83 eb 08             	sub    ebx,0x8
c0001896:	89 d8                	mov    eax,ebx
c0001898:	29 f0                	sub    eax,esi
c000189a:	83 f8 0f             	cmp    eax,0xf
c000189d:	77 02                	ja     c00018a1 <dlmemalign+0x98>
c000189f:	01 fb                	add    ebx,edi
c00018a1:	89 d8                	mov    eax,ebx
c00018a3:	29 f0                	sub    eax,esi
c00018a5:	89 c6                	mov    esi,eax
c00018a7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018aa:	89 c2                	mov    edx,eax
c00018ac:	83 e2 fc             	and    edx,0xfffffffc
c00018af:	29 f2                	sub    edx,esi
c00018b1:	a8 02                	test   al,0x2
c00018b3:	74 10                	je     c00018c5 <dlmemalign+0xbc>
c00018b5:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018b8:	83 ca 02             	or     edx,0x2
c00018bb:	8d 43 08             	lea    eax,[ebx+0x8]
c00018be:	89 33                	mov    DWORD PTR [ebx],esi
c00018c0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018c3:	eb 5f                	jmp    c0001924 <dlmemalign+0x11b>
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	89 d0                	mov    eax,edx
c00018ca:	83 c8 01             	or     eax,0x1
c00018cd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d0:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018d5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018d8:	83 e0 01             	and    eax,0x1
c00018db:	09 f0                	or     eax,esi
c00018dd:	89 de                	mov    esi,ebx
c00018df:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018e2:	51                   	push   ecx
c00018e3:	e8 d4 f4 ff ff       	call   c0000dbc <dlfree>
c00018e8:	83 c4 10             	add    esp,0x10
c00018eb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018ee:	a8 02                	test   al,0x2
c00018f0:	75 2f                	jne    c0001921 <dlmemalign+0x118>
c00018f2:	83 e0 fc             	and    eax,0xfffffffc
c00018f5:	8d 55 10             	lea    edx,[ebp+0x10]
c00018f8:	39 c2                	cmp    edx,eax
c00018fa:	73 25                	jae    c0001921 <dlmemalign+0x118>
c00018fc:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018ff:	83 ec 0c             	sub    esp,0xc
c0001902:	29 e8                	sub    eax,ebp
c0001904:	83 c2 08             	add    edx,0x8
c0001907:	83 c8 01             	or     eax,0x1
c000190a:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000190d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001910:	83 e0 01             	and    eax,0x1
c0001913:	09 c5                	or     ebp,eax
c0001915:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001918:	52                   	push   edx
c0001919:	e8 9e f4 ff ff       	call   c0000dbc <dlfree>
c000191e:	83 c4 10             	add    esp,0x10
c0001921:	8d 46 08             	lea    eax,[esi+0x8]
c0001924:	83 c4 0c             	add    esp,0xc
c0001927:	5b                   	pop    ebx
c0001928:	5e                   	pop    esi
c0001929:	5f                   	pop    edi
c000192a:	5d                   	pop    ebp
c000192b:	c3                   	ret    

c000192c <dlcalloc>:
c000192c:	53                   	push   ebx
c000192d:	83 ec 14             	sub    esp,0x14
c0001930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001934:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001939:	50                   	push   eax
c000193a:	e8 d8 f7 ff ff       	call   c0001117 <dlmalloc>
c000193f:	83 c4 10             	add    esp,0x10
c0001942:	89 c3                	mov    ebx,eax
c0001944:	85 c0                	test   eax,eax
c0001946:	74 77                	je     c00019bf <dlcalloc+0x93>
c0001948:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000194b:	89 d0                	mov    eax,edx
c000194d:	83 e0 fc             	and    eax,0xfffffffc
c0001950:	80 e2 02             	and    dl,0x2
c0001953:	75 5a                	jne    c00019af <dlcalloc+0x83>
c0001955:	83 e8 04             	sub    eax,0x4
c0001958:	83 f8 27             	cmp    eax,0x27
c000195b:	76 03                	jbe    c0001960 <dlcalloc+0x34>
c000195d:	51                   	push   ecx
c000195e:	eb 53                	jmp    c00019b3 <dlcalloc+0x87>
c0001960:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001966:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000196d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001974:	83 f8 13             	cmp    eax,0x13
c0001977:	76 46                	jbe    c00019bf <dlcalloc+0x93>
c0001979:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001980:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001987:	83 f8 1b             	cmp    eax,0x1b
c000198a:	76 33                	jbe    c00019bf <dlcalloc+0x93>
c000198c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001993:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000199a:	83 f8 23             	cmp    eax,0x23
c000199d:	76 20                	jbe    c00019bf <dlcalloc+0x93>
c000199f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019a6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019ad:	eb 10                	jmp    c00019bf <dlcalloc+0x93>
c00019af:	83 e8 08             	sub    eax,0x8
c00019b2:	52                   	push   edx
c00019b3:	50                   	push   eax
c00019b4:	6a 00                	push   0x0
c00019b6:	53                   	push   ebx
c00019b7:	e8 bc ed ff ff       	call   c0000778 <memset>
c00019bc:	83 c4 10             	add    esp,0x10
c00019bf:	89 d8                	mov    eax,ebx
c00019c1:	83 c4 08             	add    esp,0x8
c00019c4:	5b                   	pop    ebx
c00019c5:	c3                   	ret    

c00019c6 <dlcfree>:
c00019c6:	e9 f1 f3 ff ff       	jmp    c0000dbc <dlfree>

c00019cb <dlindependent_calloc>:
c00019cb:	83 ec 28             	sub    esp,0x28
c00019ce:	b9 03 00 00 00       	mov    ecx,0x3
c00019d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019df:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019e7:	e8 b9 fa ff ff       	call   c00014a5 <iALLOc>
c00019ec:	83 c4 2c             	add    esp,0x2c
c00019ef:	c3                   	ret    

c00019f0 <dlindependent_comalloc>:
c00019f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f8:	31 c9                	xor    ecx,ecx
c00019fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a02:	e9 9e fa ff ff       	jmp    c00014a5 <iALLOc>

c0001a07 <dlvalloc>:
c0001a07:	83 ec 0c             	sub    esp,0xc
c0001a0a:	83 3d c0 e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e1c0,0x0
c0001a11:	75 0a                	jne    c0001a1d <dlvalloc+0x16>
c0001a13:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c0001a18:	e8 b8 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a1d:	50                   	push   eax
c0001a1e:	50                   	push   eax
c0001a1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a23:	ff 35 1c e5 02 c0    	push   DWORD PTR ds:0xc002e51c
c0001a29:	e8 db fd ff ff       	call   c0001809 <dlmemalign>
c0001a2e:	83 c4 1c             	add    esp,0x1c
c0001a31:	c3                   	ret    

c0001a32 <dlpvalloc>:
c0001a32:	83 ec 0c             	sub    esp,0xc
c0001a35:	83 3d c0 e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e1c0,0x0
c0001a3c:	75 0a                	jne    c0001a48 <dlpvalloc+0x16>
c0001a3e:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c0001a43:	e8 8d f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a48:	a1 1c e5 02 c0       	mov    eax,ds:0xc002e51c
c0001a4d:	89 c1                	mov    ecx,eax
c0001a4f:	52                   	push   edx
c0001a50:	f7 d9                	neg    ecx
c0001a52:	52                   	push   edx
c0001a53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a57:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a5b:	21 ca                	and    edx,ecx
c0001a5d:	52                   	push   edx
c0001a5e:	50                   	push   eax
c0001a5f:	e8 a5 fd ff ff       	call   c0001809 <dlmemalign>
c0001a64:	83 c4 1c             	add    esp,0x1c
c0001a67:	c3                   	ret    

c0001a68 <dlmalloc_trim>:
c0001a68:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c0001a6d:	e8 63 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a72:	31 c0                	xor    eax,eax
c0001a74:	c3                   	ret    

c0001a75 <dlmalloc_usable_size>:
c0001a75:	53                   	push   ebx
c0001a76:	31 c0                	xor    eax,eax
c0001a78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a7c:	85 c9                	test   ecx,ecx
c0001a7e:	74 24                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a80:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a83:	f6 c2 02             	test   dl,0x2
c0001a86:	74 08                	je     c0001a90 <dlmalloc_usable_size+0x1b>
c0001a88:	83 e2 fc             	and    edx,0xfffffffc
c0001a8b:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a8e:	eb 14                	jmp    c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a90:	89 d3                	mov    ebx,edx
c0001a92:	31 c0                	xor    eax,eax
c0001a94:	83 e3 fe             	and    ebx,0xfffffffe
c0001a97:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a9c:	74 06                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a9e:	83 e2 fc             	and    edx,0xfffffffc
c0001aa1:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aa4:	5b                   	pop    ebx
c0001aa5:	c3                   	ret    

c0001aa6 <dlmallinfo>:
c0001aa6:	55                   	push   ebp
c0001aa7:	57                   	push   edi
c0001aa8:	56                   	push   esi
c0001aa9:	53                   	push   ebx
c0001aaa:	83 ec 08             	sub    esp,0x8
c0001aad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab1:	83 3d ec e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e1ec,0x0
c0001ab8:	75 0a                	jne    c0001ac4 <dlmallinfo+0x1e>
c0001aba:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c0001abf:	e8 11 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001ac4:	a1 ec e1 02 c0       	mov    eax,ds:0xc002e1ec
c0001ac9:	31 ed                	xor    ebp,ebp
c0001acb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ace:	31 c9                	xor    ecx,ecx
c0001ad0:	83 e0 fc             	and    eax,0xfffffffc
c0001ad3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	8b 14 85 c4 e1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1e3c]
c0001ae0:	85 d2                	test   edx,edx
c0001ae2:	74 0e                	je     c0001af2 <dlmallinfo+0x4c>
c0001ae4:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ae7:	45                   	inc    ebp
c0001ae8:	83 e6 fc             	and    esi,0xfffffffc
c0001aeb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aee:	01 f1                	add    ecx,esi
c0001af0:	eb ee                	jmp    c0001ae0 <dlmallinfo+0x3a>
c0001af2:	40                   	inc    eax
c0001af3:	83 f8 0a             	cmp    eax,0xa
c0001af6:	75 e1                	jne    c0001ad9 <dlmallinfo+0x33>
c0001af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001afc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b03:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b06:	b8 f4 e1 02 c0       	mov    eax,0xc002e1f4
c0001b0b:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b0e:	39 f0                	cmp    eax,esi
c0001b10:	74 10                	je     c0001b22 <dlmallinfo+0x7c>
c0001b12:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b15:	ff 04 24             	inc    DWORD PTR [esp]
c0001b18:	83 e7 fc             	and    edi,0xfffffffc
c0001b1b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b1e:	01 fa                	add    edx,edi
c0001b20:	eb ec                	jmp    c0001b0e <dlmallinfo+0x68>
c0001b22:	83 c0 08             	add    eax,0x8
c0001b25:	3d ec e4 02 c0       	cmp    eax,0xc002e4ec
c0001b2a:	75 df                	jne    c0001b0b <dlmallinfo+0x65>
c0001b2c:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b2f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b32:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b35:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0001b3a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b3d:	89 03                	mov    DWORD PTR [ebx],eax
c0001b3f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b42:	8b 35 10 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e510
c0001b48:	29 d0                	sub    eax,edx
c0001b4a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b50:	8b 35 24 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e524
c0001b56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b5a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b5d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b60:	8b 35 34 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e534
c0001b66:	89 d8                	mov    eax,ebx
c0001b68:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b6b:	83 c4 08             	add    esp,0x8
c0001b6e:	5b                   	pop    ebx
c0001b6f:	5e                   	pop    esi
c0001b70:	5f                   	pop    edi
c0001b71:	5d                   	pop    ebp
c0001b72:	c2 04 00             	ret    0x4

c0001b75 <dlmalloc_stats>:
c0001b75:	83 ec 30             	sub    esp,0x30
c0001b78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b7c:	50                   	push   eax
c0001b7d:	e8 24 ff ff ff       	call   c0001aa6 <dlmallinfo>
c0001b82:	83 c4 30             	add    esp,0x30
c0001b85:	c3                   	ret    

c0001b86 <dlmallopt>:
c0001b86:	56                   	push   esi
c0001b87:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c0001b8c:	53                   	push   ebx
c0001b8d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b95:	e8 3b f1 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001b9a:	8d 46 04             	lea    eax,[esi+0x4]
c0001b9d:	83 f8 05             	cmp    eax,0x5
c0001ba0:	77 67                	ja     c0001c09 <dlmallopt+0x83>
c0001ba2:	ff 24 85 44 93 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6cbc]
c0001ba9:	83 fb 50             	cmp    ebx,0x50
c0001bac:	77 5b                	ja     c0001c09 <dlmallopt+0x83>
c0001bae:	ba 08 00 00 00       	mov    edx,0x8
c0001bb3:	85 db                	test   ebx,ebx
c0001bb5:	74 12                	je     c0001bc9 <dlmallopt+0x43>
c0001bb7:	83 c3 0b             	add    ebx,0xb
c0001bba:	ba 10 00 00 00       	mov    edx,0x10
c0001bbf:	83 fb 0f             	cmp    ebx,0xf
c0001bc2:	76 05                	jbe    c0001bc9 <dlmallopt+0x43>
c0001bc4:	89 da                	mov    edx,ebx
c0001bc6:	83 e2 f8             	and    edx,0xfffffff8
c0001bc9:	a1 c0 e1 02 c0       	mov    eax,ds:0xc002e1c0
c0001bce:	83 e0 03             	and    eax,0x3
c0001bd1:	09 d0                	or     eax,edx
c0001bd3:	a3 c0 e1 02 c0       	mov    ds:0xc002e1c0,eax
c0001bd8:	eb 31                	jmp    c0001c0b <dlmallopt+0x85>
c0001bda:	89 1d 04 e5 02 c0    	mov    DWORD PTR ds:0xc002e504,ebx
c0001be0:	eb 06                	jmp    c0001be8 <dlmallopt+0x62>
c0001be2:	89 1d 08 e5 02 c0    	mov    DWORD PTR ds:0xc002e508,ebx
c0001be8:	be 01 00 00 00       	mov    esi,0x1
c0001bed:	eb 1c                	jmp    c0001c0b <dlmallopt+0x85>
c0001bef:	89 1d 0c e5 02 c0    	mov    DWORD PTR ds:0xc002e50c,ebx
c0001bf5:	eb f1                	jmp    c0001be8 <dlmallopt+0x62>
c0001bf7:	31 f6                	xor    esi,esi
c0001bf9:	85 db                	test   ebx,ebx
c0001bfb:	75 0e                	jne    c0001c0b <dlmallopt+0x85>
c0001bfd:	c7 05 14 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e514,0x0
c0001c07:	eb df                	jmp    c0001be8 <dlmallopt+0x62>
c0001c09:	31 f6                	xor    esi,esi
c0001c0b:	89 f0                	mov    eax,esi
c0001c0d:	5b                   	pop    ebx
c0001c0e:	5e                   	pop    esi
c0001c0f:	c3                   	ret    

c0001c10 <disk_status>:
c0001c10:	31 c0                	xor    eax,eax
c0001c12:	c3                   	ret    

c0001c13 <disk_initialize>:
c0001c13:	31 c0                	xor    eax,eax
c0001c15:	c3                   	ret    

c0001c16 <disk_read>:
c0001c16:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c1b:	0f b6 04 85 a0 1c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce360]
c0001c23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c27:	e9 b0 f1 01 00       	jmp    c0020ddc <fatWrapperReadDisk>

c0001c2c <disk_write>:
c0001c2c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c31:	0f b6 04 85 a0 1c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce360]
c0001c39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3d:	e9 e1 f1 01 00       	jmp    c0020e23 <fatWrapperWriteDisk>

c0001c42 <disk_ioctl>:
c0001c42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c4b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c50:	0f b6 04 85 a0 1c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce360]
c0001c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c5c:	e9 09 f2 01 00       	jmp    c0020e6a <fatWrapperIoctl>

c0001c61 <ld_word>:
c0001c61:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c65:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c68:	c1 e2 08             	shl    edx,0x8
c0001c6b:	09 d0                	or     eax,edx
c0001c6d:	c3                   	ret    

c0001c6e <ld_dword>:
c0001c6e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c72:	89 d1                	mov    ecx,edx
c0001c74:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c78:	c1 e1 08             	shl    ecx,0x8
c0001c7b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c7e:	09 ca                	or     edx,ecx
c0001c80:	c1 e2 08             	shl    edx,0x8
c0001c83:	09 d0                	or     eax,edx
c0001c85:	c3                   	ret    

c0001c86 <ld_qword>:
c0001c86:	57                   	push   edi
c0001c87:	56                   	push   esi
c0001c88:	53                   	push   ebx
c0001c89:	31 db                	xor    ebx,ebx
c0001c8b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c8e:	89 df                	mov    edi,ebx
c0001c90:	89 ce                	mov    esi,ecx
c0001c92:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c96:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c9a:	c1 e6 08             	shl    esi,0x8
c0001c9d:	09 f2                	or     edx,esi
c0001c9f:	89 d6                	mov    esi,edx
c0001ca1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001ca5:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca9:	c1 e6 08             	shl    esi,0x8
c0001cac:	09 f2                	or     edx,esi
c0001cae:	89 d6                	mov    esi,edx
c0001cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cb4:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cbb:	c1 e6 08             	shl    esi,0x8
c0001cbe:	89 fb                	mov    ebx,edi
c0001cc0:	09 f2                	or     edx,esi
c0001cc2:	89 d1                	mov    ecx,edx
c0001cc4:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cc8:	c1 e1 08             	shl    ecx,0x8
c0001ccb:	89 da                	mov    edx,ebx
c0001ccd:	09 c8                	or     eax,ecx
c0001ccf:	5b                   	pop    ebx
c0001cd0:	5e                   	pop    esi
c0001cd1:	5f                   	pop    edi
c0001cd2:	c3                   	ret    

c0001cd3 <st_word>:
c0001cd3:	66 89 10             	mov    WORD PTR [eax],dx
c0001cd6:	c3                   	ret    

c0001cd7 <st_dword>:
c0001cd7:	89 10                	mov    DWORD PTR [eax],edx
c0001cd9:	c3                   	ret    

c0001cda <st_qword>:
c0001cda:	89 10                	mov    DWORD PTR [eax],edx
c0001cdc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cdf:	c3                   	ret    

c0001ce0 <mem_cpy>:
c0001ce0:	85 c9                	test   ecx,ecx
c0001ce2:	74 10                	je     c0001cf4 <mem_cpy+0x14>
c0001ce4:	57                   	push   edi
c0001ce5:	01 c1                	add    ecx,eax
c0001ce7:	56                   	push   esi
c0001ce8:	89 c7                	mov    edi,eax
c0001cea:	89 d6                	mov    esi,edx
c0001cec:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ced:	39 f9                	cmp    ecx,edi
c0001cef:	75 fb                	jne    c0001cec <mem_cpy+0xc>
c0001cf1:	5e                   	pop    esi
c0001cf2:	5f                   	pop    edi
c0001cf3:	c3                   	ret    
c0001cf4:	c3                   	ret    

c0001cf5 <mem_set>:
c0001cf5:	01 c1                	add    ecx,eax
c0001cf7:	40                   	inc    eax
c0001cf8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cfb:	39 c8                	cmp    eax,ecx
c0001cfd:	75 f8                	jne    c0001cf7 <mem_set+0x2>
c0001cff:	c3                   	ret    

c0001d00 <mem_cmp>:
c0001d00:	57                   	push   edi
c0001d01:	56                   	push   esi
c0001d02:	89 c6                	mov    esi,eax
c0001d04:	53                   	push   ebx
c0001d05:	46                   	inc    esi
c0001d06:	42                   	inc    edx
c0001d07:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d0b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d0f:	29 fb                	sub    ebx,edi
c0001d11:	89 cf                	mov    edi,ecx
c0001d13:	29 f7                	sub    edi,esi
c0001d15:	01 c7                	add    edi,eax
c0001d17:	74 04                	je     c0001d1d <mem_cmp+0x1d>
c0001d19:	85 db                	test   ebx,ebx
c0001d1b:	74 e8                	je     c0001d05 <mem_cmp+0x5>
c0001d1d:	89 d8                	mov    eax,ebx
c0001d1f:	5b                   	pop    ebx
c0001d20:	5e                   	pop    esi
c0001d21:	5f                   	pop    edi
c0001d22:	c3                   	ret    

c0001d23 <chk_chr>:
c0001d23:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d26:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d29:	74 07                	je     c0001d32 <chk_chr+0xf>
c0001d2b:	39 d1                	cmp    ecx,edx
c0001d2d:	74 03                	je     c0001d32 <chk_chr+0xf>
c0001d2f:	40                   	inc    eax
c0001d30:	eb f1                	jmp    c0001d23 <chk_chr>
c0001d32:	89 c8                	mov    eax,ecx
c0001d34:	c3                   	ret    

c0001d35 <dbc_1st>:
c0001d35:	31 c0                	xor    eax,eax
c0001d37:	c3                   	ret    

c0001d38 <dbc_2nd>:
c0001d38:	31 c0                	xor    eax,eax
c0001d3a:	c3                   	ret    

c0001d3b <tchar2uni>:
c0001d3b:	57                   	push   edi
c0001d3c:	89 c7                	mov    edi,eax
c0001d3e:	56                   	push   esi
c0001d3f:	53                   	push   ebx
c0001d40:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d42:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d44:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d47:	84 c9                	test   cl,cl
c0001d49:	78 0a                	js     c0001d55 <tchar2uni+0x1a>
c0001d4b:	0f b6 d1             	movzx  edx,cl
c0001d4e:	89 f3                	mov    ebx,esi
c0001d50:	e9 9f 00 00 00       	jmp    c0001df4 <tchar2uni+0xb9>
c0001d55:	88 ca                	mov    dl,cl
c0001d57:	83 e2 e0             	and    edx,0xffffffe0
c0001d5a:	80 fa c0             	cmp    dl,0xc0
c0001d5d:	75 0c                	jne    c0001d6b <tchar2uni+0x30>
c0001d5f:	89 ca                	mov    edx,ecx
c0001d61:	b9 01 00 00 00       	mov    ecx,0x1
c0001d66:	83 e2 1f             	and    edx,0x1f
c0001d69:	eb 2e                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d6b:	88 ca                	mov    dl,cl
c0001d6d:	83 e2 f0             	and    edx,0xfffffff0
c0001d70:	80 fa e0             	cmp    dl,0xe0
c0001d73:	75 0c                	jne    c0001d81 <tchar2uni+0x46>
c0001d75:	89 ca                	mov    edx,ecx
c0001d77:	b9 02 00 00 00       	mov    ecx,0x2
c0001d7c:	83 e2 0f             	and    edx,0xf
c0001d7f:	eb 18                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d81:	88 ca                	mov    dl,cl
c0001d83:	83 e2 f8             	and    edx,0xfffffff8
c0001d86:	88 d0                	mov    al,dl
c0001d88:	83 ca ff             	or     edx,0xffffffff
c0001d8b:	3c f0                	cmp    al,0xf0
c0001d8d:	75 6c                	jne    c0001dfb <tchar2uni+0xc0>
c0001d8f:	89 ca                	mov    edx,ecx
c0001d91:	b9 03 00 00 00       	mov    ecx,0x3
c0001d96:	83 e2 07             	and    edx,0x7
c0001d99:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d9d:	46                   	inc    esi
c0001d9e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da1:	88 c8                	mov    al,cl
c0001da3:	83 e0 c0             	and    eax,0xffffffc0
c0001da6:	3c 80                	cmp    al,0x80
c0001da8:	75 4e                	jne    c0001df8 <tchar2uni+0xbd>
c0001daa:	c1 e2 06             	shl    edx,0x6
c0001dad:	83 e1 3f             	and    ecx,0x3f
c0001db0:	09 ca                	or     edx,ecx
c0001db2:	39 de                	cmp    esi,ebx
c0001db4:	75 e7                	jne    c0001d9d <tchar2uni+0x62>
c0001db6:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001db9:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dbf:	77 37                	ja     c0001df8 <tchar2uni+0xbd>
c0001dc1:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dc7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dcd:	76 29                	jbe    c0001df8 <tchar2uni+0xbd>
c0001dcf:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001dd5:	76 1d                	jbe    c0001df4 <tchar2uni+0xb9>
c0001dd7:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ddd:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001de3:	c1 e1 06             	shl    ecx,0x6
c0001de6:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dec:	09 ca                	or     edx,ecx
c0001dee:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001df4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001df6:	eb 03                	jmp    c0001dfb <tchar2uni+0xc0>
c0001df8:	83 ca ff             	or     edx,0xffffffff
c0001dfb:	5b                   	pop    ebx
c0001dfc:	89 d0                	mov    eax,edx
c0001dfe:	5e                   	pop    esi
c0001dff:	5f                   	pop    edi
c0001e00:	c3                   	ret    

c0001e01 <put_utf>:
c0001e01:	53                   	push   ebx
c0001e02:	83 f8 7f             	cmp    eax,0x7f
c0001e05:	89 c3                	mov    ebx,eax
c0001e07:	b0 00                	mov    al,0x0
c0001e09:	77 11                	ja     c0001e1c <put_utf+0x1b>
c0001e0b:	85 c9                	test   ecx,ecx
c0001e0d:	0f 84 e5 00 00 00    	je     c0001ef8 <put_utf+0xf7>
c0001e13:	88 1a                	mov    BYTE PTR [edx],bl
c0001e15:	b0 01                	mov    al,0x1
c0001e17:	e9 dc 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e1c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e22:	77 23                	ja     c0001e47 <put_utf+0x46>
c0001e24:	83 f9 01             	cmp    ecx,0x1
c0001e27:	0f 86 cb 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e2d:	89 d8                	mov    eax,ebx
c0001e2f:	83 e3 3f             	and    ebx,0x3f
c0001e32:	c1 e8 06             	shr    eax,0x6
c0001e35:	83 cb 80             	or     ebx,0xffffff80
c0001e38:	83 c8 c0             	or     eax,0xffffffc0
c0001e3b:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e3e:	88 02                	mov    BYTE PTR [edx],al
c0001e40:	b0 02                	mov    al,0x2
c0001e42:	e9 b1 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e47:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e4d:	77 40                	ja     c0001e8f <put_utf+0x8e>
c0001e4f:	83 f9 02             	cmp    ecx,0x2
c0001e52:	0f 86 a0 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e58:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e5e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e64:	0f 86 8e 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e6a:	89 d8                	mov    eax,ebx
c0001e6c:	c1 e8 0c             	shr    eax,0xc
c0001e6f:	83 c8 e0             	or     eax,0xffffffe0
c0001e72:	88 02                	mov    BYTE PTR [edx],al
c0001e74:	89 d8                	mov    eax,ebx
c0001e76:	83 e3 3f             	and    ebx,0x3f
c0001e79:	c1 e8 06             	shr    eax,0x6
c0001e7c:	83 cb 80             	or     ebx,0xffffff80
c0001e7f:	83 e0 3f             	and    eax,0x3f
c0001e82:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e85:	83 c8 80             	or     eax,0xffffff80
c0001e88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e8b:	b0 03                	mov    al,0x3
c0001e8d:	eb 69                	jmp    c0001ef8 <put_utf+0xf7>
c0001e8f:	83 f9 03             	cmp    ecx,0x3
c0001e92:	76 64                	jbe    c0001ef8 <put_utf+0xf7>
c0001e94:	89 d9                	mov    ecx,ebx
c0001e96:	0f b7 c3             	movzx  eax,bx
c0001e99:	66 31 c9             	xor    cx,cx
c0001e9c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ea2:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ea8:	c1 e9 06             	shr    ecx,0x6
c0001eab:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb1:	77 43                	ja     c0001ef6 <put_utf+0xf5>
c0001eb3:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001eb9:	77 3b                	ja     c0001ef6 <put_utf+0xf5>
c0001ebb:	09 cb                	or     ebx,ecx
c0001ebd:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ec3:	89 d8                	mov    eax,ebx
c0001ec5:	c1 e8 12             	shr    eax,0x12
c0001ec8:	83 c8 f0             	or     eax,0xfffffff0
c0001ecb:	88 02                	mov    BYTE PTR [edx],al
c0001ecd:	89 d8                	mov    eax,ebx
c0001ecf:	c1 e8 0c             	shr    eax,0xc
c0001ed2:	83 e0 3f             	and    eax,0x3f
c0001ed5:	83 c8 80             	or     eax,0xffffff80
c0001ed8:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001edb:	89 d8                	mov    eax,ebx
c0001edd:	83 e3 3f             	and    ebx,0x3f
c0001ee0:	c1 e8 06             	shr    eax,0x6
c0001ee3:	83 cb 80             	or     ebx,0xffffff80
c0001ee6:	83 e0 3f             	and    eax,0x3f
c0001ee9:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eec:	83 c8 80             	or     eax,0xffffff80
c0001eef:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ef2:	b0 04                	mov    al,0x4
c0001ef4:	eb 02                	jmp    c0001ef8 <put_utf+0xf7>
c0001ef6:	31 c0                	xor    eax,eax
c0001ef8:	5b                   	pop    ebx
c0001ef9:	c3                   	ret    

c0001efa <clst2sect>:
c0001efa:	89 c1                	mov    ecx,eax
c0001efc:	83 ea 02             	sub    edx,0x2
c0001eff:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f02:	83 e8 02             	sub    eax,0x2
c0001f05:	39 d0                	cmp    eax,edx
c0001f07:	76 0d                	jbe    c0001f16 <clst2sect+0x1c>
c0001f09:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f0d:	f7 e2                	mul    edx
c0001f0f:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f12:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f15:	c3                   	ret    
c0001f16:	31 c0                	xor    eax,eax
c0001f18:	31 d2                	xor    edx,edx
c0001f1a:	c3                   	ret    

c0001f1b <clmt_clust>:
c0001f1b:	57                   	push   edi
c0001f1c:	89 cf                	mov    edi,ecx
c0001f1e:	56                   	push   esi
c0001f1f:	89 d6                	mov    esi,edx
c0001f21:	53                   	push   ebx
c0001f22:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f26:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f29:	89 f2                	mov    edx,esi
c0001f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f2d:	c1 ef 09             	shr    edi,0x9
c0001f30:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f34:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f37:	89 f9                	mov    ecx,edi
c0001f39:	31 ff                	xor    edi,edi
c0001f3b:	57                   	push   edi
c0001f3c:	56                   	push   esi
c0001f3d:	51                   	push   ecx
c0001f3e:	52                   	push   edx
c0001f3f:	e8 98 4a 02 00       	call   c00269dc <__udivdi3>
c0001f44:	83 c4 10             	add    esp,0x10
c0001f47:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f49:	85 d2                	test   edx,edx
c0001f4b:	74 10                	je     c0001f5d <clmt_clust+0x42>
c0001f4d:	39 d0                	cmp    eax,edx
c0001f4f:	72 07                	jb     c0001f58 <clmt_clust+0x3d>
c0001f51:	29 d0                	sub    eax,edx
c0001f53:	83 c3 08             	add    ebx,0x8
c0001f56:	eb ef                	jmp    c0001f47 <clmt_clust+0x2c>
c0001f58:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f5b:	89 c2                	mov    edx,eax
c0001f5d:	5b                   	pop    ebx
c0001f5e:	89 d0                	mov    eax,edx
c0001f60:	5e                   	pop    esi
c0001f61:	5f                   	pop    edi
c0001f62:	c3                   	ret    

c0001f63 <pick_lfn>:
c0001f63:	55                   	push   ebp
c0001f64:	57                   	push   edi
c0001f65:	56                   	push   esi
c0001f66:	89 d6                	mov    esi,edx
c0001f68:	53                   	push   ebx
c0001f69:	89 c3                	mov    ebx,eax
c0001f6b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f6e:	e8 ee fc ff ff       	call   c0001c61 <ld_word>
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 04                	je     c0001f7c <pick_lfn+0x19>
c0001f78:	31 c0                	xor    eax,eax
c0001f7a:	eb 5c                	jmp    c0001fd8 <pick_lfn+0x75>
c0001f7c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f7f:	bd 01 00 00 00       	mov    ebp,0x1
c0001f84:	83 e1 bf             	and    ecx,0xffffffbf
c0001f87:	31 ff                	xor    edi,edi
c0001f89:	49                   	dec    ecx
c0001f8a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f8d:	0f b6 87 60 94 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6ba0]
c0001f94:	01 f0                	add    eax,esi
c0001f96:	e8 c6 fc ff ff       	call   c0001c61 <ld_word>
c0001f9b:	66 85 ed             	test   bp,bp
c0001f9e:	74 11                	je     c0001fb1 <pick_lfn+0x4e>
c0001fa0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fa6:	77 d0                	ja     c0001f78 <pick_lfn+0x15>
c0001fa8:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fac:	89 c5                	mov    ebp,eax
c0001fae:	41                   	inc    ecx
c0001faf:	eb 04                	jmp    c0001fb5 <pick_lfn+0x52>
c0001fb1:	66 40                	inc    ax
c0001fb3:	75 c3                	jne    c0001f78 <pick_lfn+0x15>
c0001fb5:	47                   	inc    edi
c0001fb6:	83 ff 0d             	cmp    edi,0xd
c0001fb9:	75 d2                	jne    c0001f8d <pick_lfn+0x2a>
c0001fbb:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fbe:	74 13                	je     c0001fd3 <pick_lfn+0x70>
c0001fc0:	66 85 ed             	test   bp,bp
c0001fc3:	74 0e                	je     c0001fd3 <pick_lfn+0x70>
c0001fc5:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fcb:	77 ab                	ja     c0001f78 <pick_lfn+0x15>
c0001fcd:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fd3:	b8 01 00 00 00       	mov    eax,0x1
c0001fd8:	5b                   	pop    ebx
c0001fd9:	5e                   	pop    esi
c0001fda:	5f                   	pop    edi
c0001fdb:	5d                   	pop    ebp
c0001fdc:	c3                   	ret    

c0001fdd <put_lfn>:
c0001fdd:	55                   	push   ebp
c0001fde:	31 ed                	xor    ebp,ebp
c0001fe0:	57                   	push   edi
c0001fe1:	89 d7                	mov    edi,edx
c0001fe3:	56                   	push   esi
c0001fe4:	31 f6                	xor    esi,esi
c0001fe6:	53                   	push   ebx
c0001fe7:	83 ec 08             	sub    esp,0x8
c0001fea:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fed:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ff5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ffb:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ffe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002001:	31 d2                	xor    edx,edx
c0002003:	e8 cb fc ff ff       	call   c0001cd3 <st_word>
c0002008:	0f b6 d9             	movzx  ebx,cl
c000200b:	4b                   	dec    ebx
c000200c:	6b db 0d             	imul   ebx,ebx,0xd
c000200f:	66 83 fe ff          	cmp    si,0xffff
c0002013:	74 08                	je     c000201d <put_lfn+0x40>
c0002015:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002018:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000201c:	43                   	inc    ebx
c000201d:	0f b6 85 60 94 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6ba0]
c0002024:	0f b7 d6             	movzx  edx,si
c0002027:	01 f8                	add    eax,edi
c0002029:	e8 a5 fc ff ff       	call   c0001cd3 <st_word>
c000202e:	66 85 f6             	test   si,si
c0002031:	75 03                	jne    c0002036 <put_lfn+0x59>
c0002033:	83 ce ff             	or     esi,0xffffffff
c0002036:	45                   	inc    ebp
c0002037:	83 fd 0d             	cmp    ebp,0xd
c000203a:	75 d3                	jne    c000200f <put_lfn+0x32>
c000203c:	66 46                	inc    si
c000203e:	74 0a                	je     c000204a <put_lfn+0x6d>
c0002040:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002043:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002048:	75 09                	jne    c0002053 <put_lfn+0x76>
c000204a:	88 c8                	mov    al,cl
c000204c:	83 c8 40             	or     eax,0x40
c000204f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002053:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002057:	88 07                	mov    BYTE PTR [edi],al
c0002059:	83 c4 08             	add    esp,0x8
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <gen_numname>:
c0002061:	57                   	push   edi
c0002062:	89 cf                	mov    edi,ecx
c0002064:	56                   	push   esi
c0002065:	b9 0b 00 00 00       	mov    ecx,0xb
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 10             	sub    esp,0x10
c0002070:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002074:	e8 67 fc ff ff       	call   c0001ce0 <mem_cpy>
c0002079:	83 fb 05             	cmp    ebx,0x5
c000207c:	76 2d                	jbe    c00020ab <gen_numname+0x4a>
c000207e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002081:	66 85 c0             	test   ax,ax
c0002084:	74 25                	je     c00020ab <gen_numname+0x4a>
c0002086:	83 c7 02             	add    edi,0x2
c0002089:	ba 10 00 00 00       	mov    edx,0x10
c000208e:	01 db                	add    ebx,ebx
c0002090:	89 c1                	mov    ecx,eax
c0002092:	66 d1 e8             	shr    ax,1
c0002095:	83 e1 01             	and    ecx,0x1
c0002098:	01 cb                	add    ebx,ecx
c000209a:	0f ba e3 10          	bt     ebx,0x10
c000209e:	73 06                	jae    c00020a6 <gen_numname+0x45>
c00020a0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020a6:	4a                   	dec    edx
c00020a7:	75 e5                	jne    c000208e <gen_numname+0x2d>
c00020a9:	eb d3                	jmp    c000207e <gen_numname+0x1d>
c00020ab:	b8 07 00 00 00       	mov    eax,0x7
c00020b0:	88 d9                	mov    cl,bl
c00020b2:	83 e1 0f             	and    ecx,0xf
c00020b5:	8d 51 30             	lea    edx,[ecx+0x30]
c00020b8:	80 fa 39             	cmp    dl,0x39
c00020bb:	76 03                	jbe    c00020c0 <gen_numname+0x5f>
c00020bd:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c0:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020c3:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020c7:	89 da                	mov    edx,ebx
c00020c9:	c1 ea 04             	shr    edx,0x4
c00020cc:	83 fb 0f             	cmp    ebx,0xf
c00020cf:	76 06                	jbe    c00020d7 <gen_numname+0x76>
c00020d1:	89 c8                	mov    eax,ecx
c00020d3:	89 d3                	mov    ebx,edx
c00020d5:	eb d9                	jmp    c00020b0 <gen_numname+0x4f>
c00020d7:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020dc:	31 d2                	xor    edx,edx
c00020de:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e1:	8d 04 16             	lea    eax,[esi+edx*1]
c00020e4:	39 ca                	cmp    edx,ecx
c00020e6:	73 18                	jae    c0002100 <gen_numname+0x9f>
c00020e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020eb:	3c 20                	cmp    al,0x20
c00020ed:	74 11                	je     c0002100 <gen_numname+0x9f>
c00020ef:	e8 41 fc ff ff       	call   c0001d35 <dbc_1st>
c00020f4:	85 c0                	test   eax,eax
c00020f6:	74 05                	je     c00020fd <gen_numname+0x9c>
c00020f8:	39 d3                	cmp    ebx,edx
c00020fa:	74 04                	je     c0002100 <gen_numname+0x9f>
c00020fc:	42                   	inc    edx
c00020fd:	42                   	inc    edx
c00020fe:	eb e1                	jmp    c00020e1 <gen_numname+0x80>
c0002100:	b0 20                	mov    al,0x20
c0002102:	83 f9 07             	cmp    ecx,0x7
c0002105:	77 05                	ja     c000210c <gen_numname+0xab>
c0002107:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000210b:	41                   	inc    ecx
c000210c:	42                   	inc    edx
c000210d:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002111:	83 fa 07             	cmp    edx,0x7
c0002114:	76 ea                	jbe    c0002100 <gen_numname+0x9f>
c0002116:	83 c4 10             	add    esp,0x10
c0002119:	5b                   	pop    ebx
c000211a:	5e                   	pop    esi
c000211b:	5f                   	pop    edi
c000211c:	c3                   	ret    

c000211d <sum_sfn>:
c000211d:	31 c9                	xor    ecx,ecx
c000211f:	31 d2                	xor    edx,edx
c0002121:	d0 ca                	ror    dl,1
c0002123:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002126:	41                   	inc    ecx
c0002127:	83 f9 0b             	cmp    ecx,0xb
c000212a:	75 f5                	jne    c0002121 <sum_sfn+0x4>
c000212c:	88 d0                	mov    al,dl
c000212e:	c3                   	ret    

c000212f <xdir_sum>:
c000212f:	56                   	push   esi
c0002130:	31 c9                	xor    ecx,ecx
c0002132:	53                   	push   ebx
c0002133:	31 d2                	xor    edx,edx
c0002135:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002139:	43                   	inc    ebx
c000213a:	c1 e3 05             	shl    ebx,0x5
c000213d:	83 fa 02             	cmp    edx,0x2
c0002140:	74 0b                	je     c000214d <xdir_sum+0x1e>
c0002142:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002146:	66 d1 c9             	ror    cx,1
c0002149:	01 f1                	add    ecx,esi
c000214b:	eb 05                	jmp    c0002152 <xdir_sum+0x23>
c000214d:	ba 03 00 00 00       	mov    edx,0x3
c0002152:	42                   	inc    edx
c0002153:	39 d3                	cmp    ebx,edx
c0002155:	77 e6                	ja     c000213d <xdir_sum+0xe>
c0002157:	89 c8                	mov    eax,ecx
c0002159:	5b                   	pop    ebx
c000215a:	5e                   	pop    esi
c000215b:	c3                   	ret    

c000215c <xsum32>:
c000215c:	d1 ca                	ror    edx,1
c000215e:	0f b6 c0             	movzx  eax,al
c0002161:	01 d0                	add    eax,edx
c0002163:	c3                   	ret    

c0002164 <get_xfileinfo>:
c0002164:	55                   	push   ebp
c0002165:	31 c9                	xor    ecx,ecx
c0002167:	57                   	push   edi
c0002168:	bd 40 00 00 00       	mov    ebp,0x40
c000216d:	56                   	push   esi
c000216e:	31 ff                	xor    edi,edi
c0002170:	53                   	push   ebx
c0002171:	89 c6                	mov    esi,eax
c0002173:	83 ec 0c             	sub    esp,0xc
c0002176:	89 d3                	mov    ebx,edx
c0002178:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000217f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002183:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002186:	76 6d                	jbe    c00021f5 <get_xfileinfo+0x91>
c0002188:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000218e:	76 0b                	jbe    c000219b <get_xfileinfo+0x37>
c0002190:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002194:	bf 01 00 00 00       	mov    edi,0x1
c0002199:	eb 63                	jmp    c00021fe <get_xfileinfo+0x9a>
c000219b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a1:	75 03                	jne    c00021a6 <get_xfileinfo+0x42>
c00021a3:	83 c5 02             	add    ebp,0x2
c00021a6:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021a9:	83 c5 02             	add    ebp,0x2
c00021ac:	e8 b0 fa ff ff       	call   c0001c61 <ld_word>
c00021b1:	ff 04 24             	inc    DWORD PTR [esp]
c00021b4:	66 85 c9             	test   cx,cx
c00021b7:	75 0d                	jne    c00021c6 <get_xfileinfo+0x62>
c00021b9:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021bf:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021c4:	76 2b                	jbe    c00021f1 <get_xfileinfo+0x8d>
c00021c6:	c1 e1 10             	shl    ecx,0x10
c00021c9:	ba ff 00 00 00       	mov    edx,0xff
c00021ce:	0f b7 c0             	movzx  eax,ax
c00021d1:	29 fa                	sub    edx,edi
c00021d3:	09 c8                	or     eax,ecx
c00021d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021d9:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e1:	e8 1b fc ff ff       	call   c0001e01 <put_utf>
c00021e6:	84 c0                	test   al,al
c00021e8:	74 a6                	je     c0002190 <get_xfileinfo+0x2c>
c00021ea:	0f b6 c0             	movzx  eax,al
c00021ed:	01 c7                	add    edi,eax
c00021ef:	31 c0                	xor    eax,eax
c00021f1:	89 c1                	mov    ecx,eax
c00021f3:	eb 8a                	jmp    c000217f <get_xfileinfo+0x1b>
c00021f5:	85 ff                	test   edi,edi
c00021f7:	74 97                	je     c0002190 <get_xfileinfo+0x2c>
c00021f9:	66 85 c9             	test   cx,cx
c00021fc:	75 92                	jne    c0002190 <get_xfileinfo+0x2c>
c00021fe:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002203:	31 c0                	xor    eax,eax
c0002205:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002209:	31 d2                	xor    edx,edx
c000220b:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c000220e:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002211:	80 e1 10             	and    cl,0x10
c0002214:	75 08                	jne    c000221e <get_xfileinfo+0xba>
c0002216:	8d 46 38             	lea    eax,[esi+0x38]
c0002219:	e8 68 fa ff ff       	call   c0001c86 <ld_qword>
c000221e:	89 03                	mov    DWORD PTR [ebx],eax
c0002220:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002223:	8d 46 0c             	lea    eax,[esi+0xc]
c0002226:	e8 36 fa ff ff       	call   c0001c61 <ld_word>
c000222b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000222f:	8d 46 0e             	lea    eax,[esi+0xe]
c0002232:	e8 2a fa ff ff       	call   c0001c61 <ld_word>
c0002237:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000223b:	83 c4 0c             	add    esp,0xc
c000223e:	5b                   	pop    ebx
c000223f:	5e                   	pop    esi
c0002240:	5f                   	pop    edi
c0002241:	5d                   	pop    ebp
c0002242:	c3                   	ret    

c0002243 <get_ldnumber>:
c0002243:	8b 10                	mov    edx,DWORD PTR [eax]
c0002245:	85 d2                	test   edx,edx
c0002247:	74 14                	je     c000225d <get_ldnumber+0x1a>
c0002249:	56                   	push   esi
c000224a:	53                   	push   ebx
c000224b:	89 d3                	mov    ebx,edx
c000224d:	43                   	inc    ebx
c000224e:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002251:	80 f9 1f             	cmp    cl,0x1f
c0002254:	76 0d                	jbe    c0002263 <get_ldnumber+0x20>
c0002256:	80 f9 3a             	cmp    cl,0x3a
c0002259:	75 f2                	jne    c000224d <get_ldnumber+0xa>
c000225b:	eb 0a                	jmp    c0002267 <get_ldnumber+0x24>
c000225d:	83 c9 ff             	or     ecx,0xffffffff
c0002260:	89 c8                	mov    eax,ecx
c0002262:	c3                   	ret    
c0002263:	31 c9                	xor    ecx,ecx
c0002265:	eb 24                	jmp    c000228b <get_ldnumber+0x48>
c0002267:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000226d:	80 f9 09             	cmp    cl,0x9
c0002270:	77 16                	ja     c0002288 <get_ldnumber+0x45>
c0002272:	83 c2 02             	add    edx,0x2
c0002275:	83 c9 ff             	or     ecx,0xffffffff
c0002278:	39 d3                	cmp    ebx,edx
c000227a:	75 0f                	jne    c000228b <get_ldnumber+0x48>
c000227c:	89 f2                	mov    edx,esi
c000227e:	89 18                	mov    DWORD PTR [eax],ebx
c0002280:	0f be ca             	movsx  ecx,dl
c0002283:	83 e9 30             	sub    ecx,0x30
c0002286:	eb 03                	jmp    c000228b <get_ldnumber+0x48>
c0002288:	83 c9 ff             	or     ecx,0xffffffff
c000228b:	89 c8                	mov    eax,ecx
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <crc32>:
c0002290:	56                   	push   esi
c0002291:	89 d6                	mov    esi,edx
c0002293:	53                   	push   ebx
c0002294:	b2 01                	mov    dl,0x1
c0002296:	bb 08 00 00 00       	mov    ebx,0x8
c000229b:	89 f1                	mov    ecx,esi
c000229d:	84 d1                	test   cl,dl
c000229f:	0f 95 c1             	setne  cl
c00022a2:	0f b6 c9             	movzx  ecx,cl
c00022a5:	31 c1                	xor    ecx,eax
c00022a7:	89 c8                	mov    eax,ecx
c00022a9:	d1 e8                	shr    eax,1
c00022ab:	80 e1 01             	and    cl,0x1
c00022ae:	74 05                	je     c00022b5 <crc32+0x25>
c00022b0:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022b5:	d1 e2                	shl    edx,1
c00022b7:	4b                   	dec    ebx
c00022b8:	75 e1                	jne    c000229b <crc32+0xb>
c00022ba:	5b                   	pop    ebx
c00022bb:	5e                   	pop    esi
c00022bc:	c3                   	ret    

c00022bd <test_gpt_header>:
c00022bd:	55                   	push   ebp
c00022be:	b9 10 00 00 00       	mov    ecx,0x10
c00022c3:	57                   	push   edi
c00022c4:	ba 60 93 02 c0       	mov    edx,0xc0029360
c00022c9:	56                   	push   esi
c00022ca:	31 ff                	xor    edi,edi
c00022cc:	53                   	push   ebx
c00022cd:	89 c3                	mov    ebx,eax
c00022cf:	e8 2c fa ff ff       	call   c0001d00 <mem_cmp>
c00022d4:	85 c0                	test   eax,eax
c00022d6:	75 55                	jne    c000232d <test_gpt_header+0x70>
c00022d8:	89 c7                	mov    edi,eax
c00022da:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022df:	83 ce ff             	or     esi,0xffffffff
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	83 fd 03             	cmp    ebp,0x3
c00022e7:	76 05                	jbe    c00022ee <test_gpt_header+0x31>
c00022e9:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022ee:	89 f0                	mov    eax,esi
c00022f0:	45                   	inc    ebp
c00022f1:	e8 9a ff ff ff       	call   c0002290 <crc32>
c00022f6:	83 fd 4c             	cmp    ebp,0x4c
c00022f9:	89 c6                	mov    esi,eax
c00022fb:	75 e5                	jne    c00022e2 <test_gpt_header+0x25>
c00022fd:	8d 43 10             	lea    eax,[ebx+0x10]
c0002300:	f7 d6                	not    esi
c0002302:	e8 67 f9 ff ff       	call   c0001c6e <ld_dword>
c0002307:	39 c6                	cmp    esi,eax
c0002309:	75 22                	jne    c000232d <test_gpt_header+0x70>
c000230b:	8d 43 54             	lea    eax,[ebx+0x54]
c000230e:	e8 5b f9 ff ff       	call   c0001c6e <ld_dword>
c0002313:	83 c0 80             	add    eax,0xffffff80
c0002316:	75 15                	jne    c000232d <test_gpt_header+0x70>
c0002318:	8d 43 50             	lea    eax,[ebx+0x50]
c000231b:	e8 4e f9 ff ff       	call   c0001c6e <ld_dword>
c0002320:	3d 80 00 00 00       	cmp    eax,0x80
c0002325:	0f 96 c0             	setbe  al
c0002328:	0f b6 c0             	movzx  eax,al
c000232b:	89 c7                	mov    edi,eax
c000232d:	5b                   	pop    ebx
c000232e:	89 f8                	mov    eax,edi
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    

c0002334 <make_rand>:
c0002334:	56                   	push   esi
c0002335:	85 c0                	test   eax,eax
c0002337:	53                   	push   ebx
c0002338:	75 05                	jne    c000233f <make_rand+0xb>
c000233a:	b8 01 00 00 00       	mov    eax,0x1
c000233f:	01 d1                	add    ecx,edx
c0002341:	bb 08 00 00 00       	mov    ebx,0x8
c0002346:	89 c6                	mov    esi,eax
c0002348:	d1 e8                	shr    eax,1
c000234a:	83 e6 01             	and    esi,0x1
c000234d:	85 f6                	test   esi,esi
c000234f:	74 05                	je     c0002356 <make_rand+0x22>
c0002351:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002356:	4b                   	dec    ebx
c0002357:	75 ed                	jne    c0002346 <make_rand+0x12>
c0002359:	42                   	inc    edx
c000235a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000235d:	39 ca                	cmp    edx,ecx
c000235f:	75 e0                	jne    c0002341 <make_rand+0xd>
c0002361:	5b                   	pop    ebx
c0002362:	5e                   	pop    esi
c0002363:	c3                   	ret    

c0002364 <validate>:
c0002364:	56                   	push   esi
c0002365:	53                   	push   ebx
c0002366:	89 d6                	mov    esi,edx
c0002368:	51                   	push   ecx
c0002369:	85 c0                	test   eax,eax
c000236b:	75 09                	jne    c0002376 <validate+0x12>
c000236d:	b8 09 00 00 00       	mov    eax,0x9
c0002372:	31 c9                	xor    ecx,ecx
c0002374:	eb 2f                	jmp    c00023a5 <validate+0x41>
c0002376:	89 c3                	mov    ebx,eax
c0002378:	8b 00                	mov    eax,DWORD PTR [eax]
c000237a:	85 c0                	test   eax,eax
c000237c:	74 ef                	je     c000236d <validate+0x9>
c000237e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002381:	74 ea                	je     c000236d <validate+0x9>
c0002383:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002387:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000238b:	75 e0                	jne    c000236d <validate+0x9>
c000238d:	83 ec 0c             	sub    esp,0xc
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 76 f8 ff ff       	call   c0001c10 <disk_status>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	a8 01                	test   al,0x1
c000239f:	75 cc                	jne    c000236d <validate+0x9>
c00023a1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023a3:	31 c0                	xor    eax,eax
c00023a5:	89 0e                	mov    DWORD PTR [esi],ecx
c00023a7:	5a                   	pop    edx
c00023a8:	5b                   	pop    ebx
c00023a9:	5e                   	pop    esi
c00023aa:	c3                   	ret    

c00023ab <sync_window>:
c00023ab:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023af:	0f 84 85 00 00 00    	je     c000243a <sync_window+0x8f>
c00023b5:	55                   	push   ebp
c00023b6:	8d 68 54             	lea    ebp,[eax+0x54]
c00023b9:	57                   	push   edi
c00023ba:	56                   	push   esi
c00023bb:	53                   	push   ebx
c00023bc:	89 c3                	mov    ebx,eax
c00023be:	83 ec 28             	sub    esp,0x28
c00023c1:	6a 01                	push   0x1
c00023c3:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023c6:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023c9:	55                   	push   ebp
c00023ca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023ce:	50                   	push   eax
c00023cf:	e8 58 f8 ff ff       	call   c0001c2c <disk_write>
c00023d4:	83 c4 20             	add    esp,0x20
c00023d7:	ba 01 00 00 00       	mov    edx,0x1
c00023dc:	85 c0                	test   eax,eax
c00023de:	75 50                	jne    c0002430 <sync_window+0x85>
c00023e0:	31 ff                	xor    edi,edi
c00023e2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023e9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023ed:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023f3:	89 c6                	mov    esi,eax
c00023f5:	89 d7                	mov    edi,edx
c00023f7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023fa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023fe:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002401:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002405:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002409:	73 23                	jae    c000242e <sync_window+0x83>
c000240b:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000240f:	75 1d                	jne    c000242e <sync_window+0x83>
c0002411:	83 ec 0c             	sub    esp,0xc
c0002414:	6a 01                	push   0x1
c0002416:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000241a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000241e:	52                   	push   edx
c000241f:	50                   	push   eax
c0002420:	55                   	push   ebp
c0002421:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002425:	50                   	push   eax
c0002426:	e8 01 f8 ff ff       	call   c0001c2c <disk_write>
c000242b:	83 c4 20             	add    esp,0x20
c000242e:	31 d2                	xor    edx,edx
c0002430:	83 c4 1c             	add    esp,0x1c
c0002433:	89 d0                	mov    eax,edx
c0002435:	5b                   	pop    ebx
c0002436:	5e                   	pop    esi
c0002437:	5f                   	pop    edi
c0002438:	5d                   	pop    ebp
c0002439:	c3                   	ret    
c000243a:	31 d2                	xor    edx,edx
c000243c:	89 d0                	mov    eax,edx
c000243e:	c3                   	ret    

c000243f <move_window>:
c000243f:	56                   	push   esi
c0002440:	53                   	push   ebx
c0002441:	89 c3                	mov    ebx,eax
c0002443:	83 ec 14             	sub    esp,0x14
c0002446:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002449:	75 07                	jne    c0002452 <move_window+0x13>
c000244b:	31 f6                	xor    esi,esi
c000244d:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002450:	74 59                	je     c00024ab <move_window+0x6c>
c0002452:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002456:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000245a:	89 d8                	mov    eax,ebx
c000245c:	e8 4a ff ff ff       	call   c00023ab <sync_window>
c0002461:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002465:	89 c6                	mov    esi,eax
c0002467:	85 c0                	test   eax,eax
c0002469:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000246d:	75 3c                	jne    c00024ab <move_window+0x6c>
c000246f:	83 ec 0c             	sub    esp,0xc
c0002472:	8d 43 54             	lea    eax,[ebx+0x54]
c0002475:	6a 01                	push   0x1
c0002477:	51                   	push   ecx
c0002478:	52                   	push   edx
c0002479:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000247d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002481:	50                   	push   eax
c0002482:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002486:	50                   	push   eax
c0002487:	e8 8a f7 ff ff       	call   c0001c16 <disk_read>
c000248c:	83 c4 20             	add    esp,0x20
c000248f:	85 c0                	test   eax,eax
c0002491:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002495:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002499:	74 0a                	je     c00024a5 <move_window+0x66>
c000249b:	83 ca ff             	or     edx,0xffffffff
c000249e:	be 01 00 00 00       	mov    esi,0x1
c00024a3:	89 d1                	mov    ecx,edx
c00024a5:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024a8:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024ab:	89 f0                	mov    eax,esi
c00024ad:	83 c4 14             	add    esp,0x14
c00024b0:	5b                   	pop    ebx
c00024b1:	5e                   	pop    esi
c00024b2:	c3                   	ret    

c00024b3 <check_fs>:
c00024b3:	53                   	push   ebx
c00024b4:	89 c3                	mov    ebx,eax
c00024b6:	83 ec 08             	sub    esp,0x8
c00024b9:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024bd:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024c4:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024cb:	e8 6f ff ff ff       	call   c000243f <move_window>
c00024d0:	ba 04 00 00 00       	mov    edx,0x4
c00024d5:	85 c0                	test   eax,eax
c00024d7:	0f 85 89 00 00 00    	jne    c0002566 <check_fs+0xb3>
c00024dd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024e3:	e8 79 f7 ff ff       	call   c0001c61 <ld_word>
c00024e8:	ba 03 00 00 00       	mov    edx,0x3
c00024ed:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f1:	75 73                	jne    c0002566 <check_fs+0xb3>
c00024f3:	ba 80 94 02 c0       	mov    edx,0xc0029480
c00024f8:	8d 43 54             	lea    eax,[ebx+0x54]
c00024fb:	b9 0b 00 00 00       	mov    ecx,0xb
c0002500:	e8 fb f7 ff ff       	call   c0001d00 <mem_cmp>
c0002505:	ba 01 00 00 00       	mov    edx,0x1
c000250a:	85 c0                	test   eax,eax
c000250c:	74 58                	je     c0002566 <check_fs+0xb3>
c000250e:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002511:	8d 50 18             	lea    edx,[eax+0x18]
c0002514:	80 fa 01             	cmp    dl,0x1
c0002517:	76 09                	jbe    c0002522 <check_fs+0x6f>
c0002519:	ba 02 00 00 00       	mov    edx,0x2
c000251e:	3c eb                	cmp    al,0xeb
c0002520:	75 44                	jne    c0002566 <check_fs+0xb3>
c0002522:	ba e0 c9 02 c0       	mov    edx,0xc002c9e0
c0002527:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000252d:	b9 03 00 00 00       	mov    ecx,0x3
c0002532:	e8 c9 f7 ff ff       	call   c0001d00 <mem_cmp>
c0002537:	31 d2                	xor    edx,edx
c0002539:	85 c0                	test   eax,eax
c000253b:	74 29                	je     c0002566 <check_fs+0xb3>
c000253d:	ba 8c 94 02 c0       	mov    edx,0xc002948c
c0002542:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002548:	b9 05 00 00 00       	mov    ecx,0x5
c000254d:	e8 ae f7 ff ff       	call   c0001d00 <mem_cmp>
c0002552:	31 d2                	xor    edx,edx
c0002554:	85 c0                	test   eax,eax
c0002556:	74 0e                	je     c0002566 <check_fs+0xb3>
c0002558:	31 d2                	xor    edx,edx
c000255a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002561:	0f 95 c2             	setne  dl
c0002564:	01 d2                	add    edx,edx
c0002566:	89 d0                	mov    eax,edx
c0002568:	83 c4 08             	add    esp,0x8
c000256b:	5b                   	pop    ebx
c000256c:	c3                   	ret    

c000256d <find_volume>:
c000256d:	55                   	push   ebp
c000256e:	31 c9                	xor    ecx,ecx
c0002570:	57                   	push   edi
c0002571:	56                   	push   esi
c0002572:	89 d6                	mov    esi,edx
c0002574:	53                   	push   ebx
c0002575:	31 d2                	xor    edx,edx
c0002577:	83 ec 3c             	sub    esp,0x3c
c000257a:	89 c3                	mov    ebx,eax
c000257c:	e8 32 ff ff ff       	call   c00024b3 <check_fs>
c0002581:	83 f8 02             	cmp    eax,0x2
c0002584:	74 0e                	je     c0002594 <find_volume+0x27>
c0002586:	0f 87 5d 01 00 00    	ja     c00026e9 <find_volume+0x17c>
c000258c:	85 f6                	test   esi,esi
c000258e:	0f 84 55 01 00 00    	je     c00026e9 <find_volume+0x17c>
c0002594:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000259b:	0f 85 dd 00 00 00    	jne    c000267e <find_volume+0x111>
c00025a1:	31 c9                	xor    ecx,ecx
c00025a3:	ba 01 00 00 00       	mov    edx,0x1
c00025a8:	89 d8                	mov    eax,ebx
c00025aa:	e8 90 fe ff ff       	call   c000243f <move_window>
c00025af:	85 c0                	test   eax,eax
c00025b1:	74 0a                	je     c00025bd <find_volume+0x50>
c00025b3:	b8 04 00 00 00       	mov    eax,0x4
c00025b8:	e9 2c 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025bd:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c0:	89 e8                	mov    eax,ebp
c00025c2:	e8 f6 fc ff ff       	call   c00022bd <test_gpt_header>
c00025c7:	85 c0                	test   eax,eax
c00025c9:	75 0a                	jne    c00025d5 <find_volume+0x68>
c00025cb:	b8 03 00 00 00       	mov    eax,0x3
c00025d0:	e9 14 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025d5:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025db:	e8 8e f6 ff ff       	call   c0001c6e <ld_dword>
c00025e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025e4:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025ea:	e8 97 f6 ff ff       	call   c0001c86 <ld_qword>
c00025ef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002607:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000260b:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000260f:	74 ba                	je     c00025cb <find_volume+0x5e>
c0002611:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002615:	31 c9                	xor    ecx,ecx
c0002617:	c1 e7 07             	shl    edi,0x7
c000261a:	89 d8                	mov    eax,ebx
c000261c:	89 fa                	mov    edx,edi
c000261e:	c1 ea 09             	shr    edx,0x9
c0002621:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002625:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002629:	e8 11 fe ff ff       	call   c000243f <move_window>
c000262e:	85 c0                	test   eax,eax
c0002630:	75 81                	jne    c00025b3 <find_volume+0x46>
c0002632:	81 e7 80 01 00 00    	and    edi,0x180
c0002638:	b9 10 00 00 00       	mov    ecx,0x10
c000263d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002641:	ba 70 94 02 c0       	mov    edx,0xc0029470
c0002646:	e8 b5 f6 ff ff       	call   c0001d00 <mem_cmp>
c000264b:	85 c0                	test   eax,eax
c000264d:	75 29                	jne    c0002678 <find_volume+0x10b>
c000264f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002653:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002657:	e8 2a f6 ff ff       	call   c0001c86 <ld_qword>
c000265c:	89 d1                	mov    ecx,edx
c000265e:	89 c2                	mov    edx,eax
c0002660:	89 d8                	mov    eax,ebx
c0002662:	e8 4c fe ff ff       	call   c00024b3 <check_fs>
c0002667:	85 f6                	test   esi,esi
c0002669:	75 07                	jne    c0002672 <find_volume+0x105>
c000266b:	83 f8 01             	cmp    eax,0x1
c000266e:	77 08                	ja     c0002678 <find_volume+0x10b>
c0002670:	eb 77                	jmp    c00026e9 <find_volume+0x17c>
c0002672:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002676:	74 71                	je     c00026e9 <find_volume+0x17c>
c0002678:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000267c:	eb 89                	jmp    c0002607 <find_volume+0x9a>
c000267e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002682:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002688:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000268e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002692:	89 cd                	mov    ebp,ecx
c0002694:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002698:	89 f8                	mov    eax,edi
c000269a:	83 c7 10             	add    edi,0x10
c000269d:	e8 cc f5 ff ff       	call   c0001c6e <ld_dword>
c00026a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026a6:	89 01                	mov    DWORD PTR [ecx],eax
c00026a8:	83 c1 04             	add    ecx,0x4
c00026ab:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026af:	75 e3                	jne    c0002694 <find_volume+0x127>
c00026b1:	31 ff                	xor    edi,edi
c00026b3:	85 f6                	test   esi,esi
c00026b5:	74 03                	je     c00026ba <find_volume+0x14d>
c00026b7:	8d 7e ff             	lea    edi,[esi-0x1]
c00026ba:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026be:	85 d2                	test   edx,edx
c00026c0:	74 14                	je     c00026d6 <find_volume+0x169>
c00026c2:	31 c9                	xor    ecx,ecx
c00026c4:	89 d8                	mov    eax,ebx
c00026c6:	e8 e8 fd ff ff       	call   c00024b3 <check_fs>
c00026cb:	83 f8 01             	cmp    eax,0x1
c00026ce:	76 19                	jbe    c00026e9 <find_volume+0x17c>
c00026d0:	85 f6                	test   esi,esi
c00026d2:	74 0f                	je     c00026e3 <find_volume+0x176>
c00026d4:	eb 13                	jmp    c00026e9 <find_volume+0x17c>
c00026d6:	85 f6                	test   esi,esi
c00026d8:	0f 85 ed fe ff ff    	jne    c00025cb <find_volume+0x5e>
c00026de:	b8 03 00 00 00       	mov    eax,0x3
c00026e3:	47                   	inc    edi
c00026e4:	83 ff 03             	cmp    edi,0x3
c00026e7:	76 d1                	jbe    c00026ba <find_volume+0x14d>
c00026e9:	83 c4 3c             	add    esp,0x3c
c00026ec:	5b                   	pop    ebx
c00026ed:	5e                   	pop    esi
c00026ee:	5f                   	pop    edi
c00026ef:	5d                   	pop    ebp
c00026f0:	c3                   	ret    

c00026f1 <mount_volume>:
c00026f1:	55                   	push   ebp
c00026f2:	57                   	push   edi
c00026f3:	89 cf                	mov    edi,ecx
c00026f5:	56                   	push   esi
c00026f6:	53                   	push   ebx
c00026f7:	bb 0b 00 00 00       	mov    ebx,0xb
c00026fc:	83 ec 3c             	sub    esp,0x3c
c00026ff:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002705:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002709:	e8 35 fb ff ff       	call   c0002243 <get_ldnumber>
c000270e:	85 c0                	test   eax,eax
c0002710:	0f 88 3a 05 00 00    	js     c0002c50 <mount_volume+0x55f>
c0002716:	8b 2c 85 60 e5 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1aa0]
c000271d:	89 c6                	mov    esi,eax
c000271f:	bb 0c 00 00 00       	mov    ebx,0xc
c0002724:	85 ed                	test   ebp,ebp
c0002726:	0f 84 24 05 00 00    	je     c0002c50 <mount_volume+0x55f>
c000272c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002730:	83 e7 fe             	and    edi,0xfffffffe
c0002733:	89 2a                	mov    DWORD PTR [edx],ebp
c0002735:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002739:	74 32                	je     c000276d <mount_volume+0x7c>
c000273b:	83 ec 0c             	sub    esp,0xc
c000273e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002742:	50                   	push   eax
c0002743:	e8 c8 f4 ff ff       	call   c0001c10 <disk_status>
c0002748:	83 c4 10             	add    esp,0x10
c000274b:	a8 01                	test   al,0x1
c000274d:	75 1e                	jne    c000276d <mount_volume+0x7c>
c000274f:	31 db                	xor    ebx,ebx
c0002751:	89 f9                	mov    ecx,edi
c0002753:	84 c9                	test   cl,cl
c0002755:	0f 84 f5 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c000275b:	a8 04                	test   al,0x4
c000275d:	0f 84 ed 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c0002763:	bb 0a 00 00 00       	mov    ebx,0xa
c0002768:	e9 e3 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c000276d:	83 ec 0c             	sub    esp,0xc
c0002770:	89 f0                	mov    eax,esi
c0002772:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002776:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002779:	0f b6 f0             	movzx  esi,al
c000277c:	bb 03 00 00 00       	mov    ebx,0x3
c0002781:	56                   	push   esi
c0002782:	e8 8c f4 ff ff       	call   c0001c13 <disk_initialize>
c0002787:	83 c4 10             	add    esp,0x10
c000278a:	a8 01                	test   al,0x1
c000278c:	0f 85 be 04 00 00    	jne    c0002c50 <mount_volume+0x55f>
c0002792:	89 f9                	mov    ecx,edi
c0002794:	84 c9                	test   cl,cl
c0002796:	74 04                	je     c000279c <mount_volume+0xab>
c0002798:	a8 04                	test   al,0x4
c000279a:	75 c7                	jne    c0002763 <mount_volume+0x72>
c000279c:	31 d2                	xor    edx,edx
c000279e:	89 e8                	mov    eax,ebp
c00027a0:	e8 c8 fd ff ff       	call   c000256d <find_volume>
c00027a5:	83 f8 04             	cmp    eax,0x4
c00027a8:	75 0a                	jne    c00027b4 <mount_volume+0xc3>
c00027aa:	bb 01 00 00 00       	mov    ebx,0x1
c00027af:	e9 9c 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027b4:	83 f8 01             	cmp    eax,0x1
c00027b7:	76 0a                	jbe    c00027c3 <mount_volume+0xd2>
c00027b9:	bb 0d 00 00 00       	mov    ebx,0xd
c00027be:	e9 8d 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027c3:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027c6:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d1:	75 17                	jne    c00027ea <mount_volume+0xf9>
c00027d3:	b8 0b 00 00 00       	mov    eax,0xb
c00027d8:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027dd:	75 da                	jne    c00027b9 <mount_volume+0xc8>
c00027df:	40                   	inc    eax
c00027e0:	83 f8 40             	cmp    eax,0x40
c00027e3:	75 f3                	jne    c00027d8 <mount_volume+0xe7>
c00027e5:	e9 5a 02 00 00       	jmp    c0002a44 <mount_volume+0x353>
c00027ea:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027ed:	e8 6f f4 ff ff       	call   c0001c61 <ld_word>
c00027f2:	66 3d 00 02          	cmp    ax,0x200
c00027f6:	75 c1                	jne    c00027b9 <mount_volume+0xc8>
c00027f8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027fb:	e8 61 f4 ff ff       	call   c0001c61 <ld_word>
c0002800:	0f b7 c0             	movzx  eax,ax
c0002803:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002807:	85 c0                	test   eax,eax
c0002809:	75 0c                	jne    c0002817 <mount_volume+0x126>
c000280b:	8d 45 78             	lea    eax,[ebp+0x78]
c000280e:	e8 5b f4 ff ff       	call   c0001c6e <ld_dword>
c0002813:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000281b:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000281e:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002821:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002825:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002828:	48                   	dec    eax
c0002829:	3c 01                	cmp    al,0x1
c000282b:	77 8c                	ja     c00027b9 <mount_volume+0xc8>
c000282d:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002831:	89 c3                	mov    ebx,eax
c0002833:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002837:	66 85 c0             	test   ax,ax
c000283a:	0f 84 79 ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002840:	8d 40 ff             	lea    eax,[eax-0x1]
c0002843:	85 d8                	test   eax,ebx
c0002845:	0f 85 6e ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000284b:	8d 45 65             	lea    eax,[ebp+0x65]
c000284e:	e8 0e f4 ff ff       	call   c0001c61 <ld_word>
c0002853:	89 c7                	mov    edi,eax
c0002855:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002859:	a8 0f                	test   al,0xf
c000285b:	0f 85 58 ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002861:	8d 45 67             	lea    eax,[ebp+0x67]
c0002864:	e8 f8 f3 ff ff       	call   c0001c61 <ld_word>
c0002869:	0f b7 f0             	movzx  esi,ax
c000286c:	85 f6                	test   esi,esi
c000286e:	75 0a                	jne    c000287a <mount_volume+0x189>
c0002870:	8d 45 74             	lea    eax,[ebp+0x74]
c0002873:	e8 f6 f3 ff ff       	call   c0001c6e <ld_dword>
c0002878:	89 c6                	mov    esi,eax
c000287a:	8d 45 62             	lea    eax,[ebp+0x62]
c000287d:	e8 df f3 ff ff       	call   c0001c61 <ld_word>
c0002882:	66 85 c0             	test   ax,ax
c0002885:	0f 84 2e ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c000288b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002890:	0f b7 c8             	movzx  ecx,ax
c0002893:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002898:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000289c:	89 fa                	mov    edx,edi
c000289e:	66 c1 ea 04          	shr    dx,0x4
c00028a2:	0f b7 d2             	movzx  edx,dx
c00028a5:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028a9:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b0:	39 c6                	cmp    esi,eax
c00028b2:	0f 82 01 ff ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028b8:	29 c6                	sub    esi,eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 f0                	mov    eax,esi
c00028be:	f7 f3                	div    ebx
c00028c0:	39 de                	cmp    esi,ebx
c00028c2:	0f 82 f1 fe ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028c8:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028cd:	0f 87 e6 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c00028d3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028d8:	0f 86 63 03 00 00    	jbe    c0002c41 <mount_volume+0x550>
c00028de:	bb 03 00 00 00       	mov    ebx,0x3
c00028e3:	8d 70 02             	lea    esi,[eax+0x2]
c00028e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028ee:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028f4:	31 d2                	xor    edx,edx
c00028f6:	89 c8                	mov    eax,ecx
c00028f8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028ff:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002903:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002907:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000290b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000290e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002911:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002915:	31 d2                	xor    edx,edx
c0002917:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000291b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000291f:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002922:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002925:	83 fb 03             	cmp    ebx,0x3
c0002928:	75 2b                	jne    c0002955 <mount_volume+0x264>
c000292a:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000292d:	e8 2f f3 ff ff       	call   c0001c61 <ld_word>
c0002932:	66 09 c7             	or     di,ax
c0002935:	0f 85 7e fe ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000293b:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002941:	c1 e6 02             	shl    esi,0x2
c0002944:	e8 25 f3 ff ff       	call   c0001c6e <ld_dword>
c0002949:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002950:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002953:	eb 30                	jmp    c0002985 <mount_volume+0x294>
c0002955:	66 85 ff             	test   di,di
c0002958:	0f 84 5b fe ff ff    	je     c00027b9 <mount_volume+0xc8>
c000295e:	31 d2                	xor    edx,edx
c0002960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002964:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002968:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000296c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000296f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002972:	83 fb 02             	cmp    ebx,0x2
c0002975:	75 04                	jne    c000297b <mount_volume+0x28a>
c0002977:	01 f6                	add    esi,esi
c0002979:	eb 0a                	jmp    c0002985 <mount_volume+0x294>
c000297b:	8d 04 76             	lea    eax,[esi+esi*2]
c000297e:	83 e6 01             	and    esi,0x1
c0002981:	d1 e8                	shr    eax,1
c0002983:	01 c6                	add    esi,eax
c0002985:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000298b:	c1 ee 09             	shr    esi,0x9
c000298e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002992:	0f 87 21 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002998:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000299f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029a6:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029aa:	83 fb 03             	cmp    ebx,0x3
c00029ad:	75 7a                	jne    c0002a29 <mount_volume+0x338>
c00029af:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029b5:	e8 a7 f2 ff ff       	call   c0001c61 <ld_word>
c00029ba:	66 48                	dec    ax
c00029bc:	75 6b                	jne    c0002a29 <mount_volume+0x338>
c00029be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029c6:	83 c2 01             	add    edx,0x1
c00029c9:	89 e8                	mov    eax,ebp
c00029cb:	83 d1 00             	adc    ecx,0x0
c00029ce:	e8 6c fa ff ff       	call   c000243f <move_window>
c00029d3:	85 c0                	test   eax,eax
c00029d5:	75 52                	jne    c0002a29 <mount_volume+0x338>
c00029d7:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029db:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e1:	e8 7b f2 ff ff       	call   c0001c61 <ld_word>
c00029e6:	66 3d 55 aa          	cmp    ax,0xaa55
c00029ea:	75 3d                	jne    c0002a29 <mount_volume+0x338>
c00029ec:	8d 45 54             	lea    eax,[ebp+0x54]
c00029ef:	e8 7a f2 ff ff       	call   c0001c6e <ld_dword>
c00029f4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029f9:	75 2e                	jne    c0002a29 <mount_volume+0x338>
c00029fb:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a01:	e8 68 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a06:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a0b:	75 1c                	jne    c0002a29 <mount_volume+0x338>
c0002a0d:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a13:	e8 56 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a18:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a1b:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a21:	e8 48 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a26:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a29:	66 a1 40 e5 02 c0    	mov    ax,ds:0xc002e540
c0002a2f:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a32:	40                   	inc    eax
c0002a33:	31 db                	xor    ebx,ebx
c0002a35:	66 a3 40 e5 02 c0    	mov    ds:0xc002e540,ax
c0002a3b:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a3f:	e9 0c 02 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c0002a44:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a4a:	e8 12 f2 ff ff       	call   c0001c61 <ld_word>
c0002a4f:	66 3d 00 01          	cmp    ax,0x100
c0002a53:	0f 85 60 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a59:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a60:	0f 85 53 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a66:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a6c:	e8 15 f2 ff ff       	call   c0001c86 <ld_qword>
c0002a71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a79:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a7f:	e8 ea f1 ff ff       	call   c0001c6e <ld_dword>
c0002a84:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a87:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a8d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a90:	fe c8                	dec    al
c0002a92:	0f 85 21 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a98:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a9f:	bb 01 00 00 00       	mov    ebx,0x1
c0002aa4:	d3 e3                	shl    ebx,cl
c0002aa6:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002aaa:	66 85 db             	test   bx,bx
c0002aad:	0f 84 06 fd ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002ab3:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ab9:	e8 b0 f1 ff ff       	call   c0001c6e <ld_dword>
c0002abe:	89 c6                	mov    esi,eax
c0002ac0:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ac5:	0f 87 ee fc ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002acb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acf:	8d 40 02             	lea    eax,[eax+0x2]
c0002ad2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ad5:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002adc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002adf:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ae5:	e8 84 f1 ff ff       	call   c0001c6e <ld_dword>
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002af4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002af8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002afc:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002aff:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b02:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b08:	e8 61 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b0d:	31 d2                	xor    edx,edx
c0002b0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b13:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b17:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b1b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b1e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b21:	0f b7 c3             	movzx  eax,bx
c0002b24:	31 d2                	xor    edx,edx
c0002b26:	0f af f0             	imul   esi,eax
c0002b29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b2d:	89 f0                	mov    eax,esi
c0002b2f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b33:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b37:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b3b:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b3f:	39 c1                	cmp    ecx,eax
c0002b41:	89 df                	mov    edi,ebx
c0002b43:	19 d7                	sbb    edi,edx
c0002b45:	0f 82 6e fc ff ff    	jb     c00027b9 <mount_volume+0xc8>
c0002b4b:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b51:	31 db                	xor    ebx,ebx
c0002b53:	e8 16 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b58:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b5f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b62:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b6a:	85 db                	test   ebx,ebx
c0002b6c:	75 39                	jne    c0002ba7 <mount_volume+0x4b6>
c0002b6e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b72:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b76:	0f 86 3d fc ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002b7c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b7f:	31 ff                	xor    edi,edi
c0002b81:	89 e8                	mov    eax,ebp
c0002b83:	e8 72 f3 ff ff       	call   c0001efa <clst2sect>
c0002b88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b8c:	01 c6                	add    esi,eax
c0002b8e:	89 e8                	mov    eax,ebp
c0002b90:	11 d7                	adc    edi,edx
c0002b92:	89 f2                	mov    edx,esi
c0002b94:	89 f9                	mov    ecx,edi
c0002b96:	e8 a4 f8 ff ff       	call   c000243f <move_window>
c0002b9b:	85 c0                	test   eax,eax
c0002b9d:	0f 85 07 fc ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002ba3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ba7:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bac:	74 0b                	je     c0002bb9 <mount_volume+0x4c8>
c0002bae:	83 c3 20             	add    ebx,0x20
c0002bb1:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bb7:	eb b1                	jmp    c0002b6a <mount_volume+0x479>
c0002bb9:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bbc:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc0:	e8 a9 f0 ff ff       	call   c0001c6e <ld_dword>
c0002bc5:	89 c3                	mov    ebx,eax
c0002bc7:	83 f8 01             	cmp    eax,0x1
c0002bca:	0f 86 e9 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd0:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bd3:	0f 86 e0 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd9:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bdc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be0:	0f af c2             	imul   eax,edx
c0002be3:	31 d2                	xor    edx,edx
c0002be5:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002be8:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002beb:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bee:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf1:	31 c9                	xor    ecx,ecx
c0002bf3:	89 da                	mov    edx,ebx
c0002bf5:	89 e8                	mov    eax,ebp
c0002bf7:	c1 ea 07             	shr    edx,0x7
c0002bfa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bfd:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c00:	e8 3a f8 ff ff       	call   c000243f <move_window>
c0002c05:	85 c0                	test   eax,eax
c0002c07:	0f 85 9d fb ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002c0d:	89 d8                	mov    eax,ebx
c0002c0f:	83 e0 7f             	and    eax,0x7f
c0002c12:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c15:	e8 54 f0 ff ff       	call   c0001c6e <ld_dword>
c0002c1a:	83 f8 ff             	cmp    eax,0xffffffff
c0002c1d:	74 0a                	je     c0002c29 <mount_volume+0x538>
c0002c1f:	43                   	inc    ebx
c0002c20:	39 d8                	cmp    eax,ebx
c0002c22:	74 cd                	je     c0002bf1 <mount_volume+0x500>
c0002c24:	e9 90 fb ff ff       	jmp    c00027b9 <mount_volume+0xc8>
c0002c29:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c30:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c37:	bb 04 00 00 00       	mov    ebx,0x4
c0002c3c:	e9 e8 fd ff ff       	jmp    c0002a29 <mount_volume+0x338>
c0002c41:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c46:	19 db                	sbb    ebx,ebx
c0002c48:	83 c3 02             	add    ebx,0x2
c0002c4b:	e9 93 fc ff ff       	jmp    c00028e3 <mount_volume+0x1f2>
c0002c50:	83 c4 3c             	add    esp,0x3c
c0002c53:	89 d8                	mov    eax,ebx
c0002c55:	5b                   	pop    ebx
c0002c56:	5e                   	pop    esi
c0002c57:	5f                   	pop    edi
c0002c58:	5d                   	pop    ebp
c0002c59:	c3                   	ret    

c0002c5a <find_bitmap>:
c0002c5a:	55                   	push   ebp
c0002c5b:	57                   	push   edi
c0002c5c:	89 c7                	mov    edi,eax
c0002c5e:	56                   	push   esi
c0002c5f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c62:	53                   	push   ebx
c0002c63:	83 ec 1c             	sub    esp,0x1c
c0002c66:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c6d:	83 e8 02             	sub    eax,0x2
c0002c70:	39 f0                	cmp    eax,esi
c0002c72:	77 02                	ja     c0002c76 <find_bitmap+0x1c>
c0002c74:	31 f6                	xor    esi,esi
c0002c76:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c7a:	89 f3                	mov    ebx,esi
c0002c7c:	31 ed                	xor    ebp,ebp
c0002c7e:	31 c9                	xor    ecx,ecx
c0002c80:	89 da                	mov    edx,ebx
c0002c82:	89 f8                	mov    eax,edi
c0002c84:	c1 ea 0c             	shr    edx,0xc
c0002c87:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c8a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c8d:	e8 ad f7 ff ff       	call   c000243f <move_window>
c0002c92:	85 c0                	test   eax,eax
c0002c94:	75 68                	jne    c0002cfe <find_bitmap+0xa4>
c0002c96:	89 da                	mov    edx,ebx
c0002c98:	89 d9                	mov    ecx,ebx
c0002c9a:	c1 ea 03             	shr    edx,0x3
c0002c9d:	83 e1 07             	and    ecx,0x7
c0002ca0:	b8 01 00 00 00       	mov    eax,0x1
c0002ca5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cab:	d3 e0                	shl    eax,cl
c0002cad:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb0:	83 e9 02             	sub    ecx,0x2
c0002cb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cb7:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cbb:	43                   	inc    ebx
c0002cbc:	21 c1                	and    ecx,eax
c0002cbe:	d1 e0                	shl    eax,1
c0002cc0:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002cc4:	77 09                	ja     c0002ccf <find_bitmap+0x75>
c0002cc6:	31 db                	xor    ebx,ebx
c0002cc8:	ba 00 02 00 00       	mov    edx,0x200
c0002ccd:	31 c0                	xor    eax,eax
c0002ccf:	84 c9                	test   cl,cl
c0002cd1:	75 10                	jne    c0002ce3 <find_bitmap+0x89>
c0002cd3:	45                   	inc    ebp
c0002cd4:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cd8:	75 0f                	jne    c0002ce9 <find_bitmap+0x8f>
c0002cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cde:	83 c0 02             	add    eax,0x2
c0002ce1:	eb 22                	jmp    c0002d05 <find_bitmap+0xab>
c0002ce3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ce7:	31 ed                	xor    ebp,ebp
c0002ce9:	39 de                	cmp    esi,ebx
c0002ceb:	74 16                	je     c0002d03 <find_bitmap+0xa9>
c0002ced:	84 c0                	test   al,al
c0002cef:	75 c6                	jne    c0002cb7 <find_bitmap+0x5d>
c0002cf1:	42                   	inc    edx
c0002cf2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cf8:	77 84                	ja     c0002c7e <find_bitmap+0x24>
c0002cfa:	b0 01                	mov    al,0x1
c0002cfc:	eb b9                	jmp    c0002cb7 <find_bitmap+0x5d>
c0002cfe:	83 c8 ff             	or     eax,0xffffffff
c0002d01:	eb 02                	jmp    c0002d05 <find_bitmap+0xab>
c0002d03:	31 c0                	xor    eax,eax
c0002d05:	83 c4 1c             	add    esp,0x1c
c0002d08:	5b                   	pop    ebx
c0002d09:	5e                   	pop    esi
c0002d0a:	5f                   	pop    edi
c0002d0b:	5d                   	pop    ebp
c0002d0c:	c3                   	ret    

c0002d0d <change_bitmap>:
c0002d0d:	55                   	push   ebp
c0002d0e:	89 cd                	mov    ebp,ecx
c0002d10:	57                   	push   edi
c0002d11:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d14:	56                   	push   esi
c0002d15:	89 c7                	mov    edi,eax
c0002d17:	53                   	push   ebx
c0002d18:	89 c8                	mov    eax,ecx
c0002d1a:	83 ec 1c             	sub    esp,0x1c
c0002d1d:	31 d2                	xor    edx,edx
c0002d1f:	89 ce                	mov    esi,ecx
c0002d21:	c1 e8 0c             	shr    eax,0xc
c0002d24:	bb 01 00 00 00       	mov    ebx,0x1
c0002d29:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d2c:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d2f:	c1 ee 03             	shr    esi,0x3
c0002d32:	83 e1 07             	and    ecx,0x7
c0002d35:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d3b:	d3 e3                	shl    ebx,cl
c0002d3d:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d41:	89 c1                	mov    ecx,eax
c0002d43:	89 d3                	mov    ebx,edx
c0002d45:	83 c1 01             	add    ecx,0x1
c0002d48:	83 d3 00             	adc    ebx,0x0
c0002d4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d4f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d53:	89 d1                	mov    ecx,edx
c0002d55:	89 c2                	mov    edx,eax
c0002d57:	89 f8                	mov    eax,edi
c0002d59:	e8 e1 f6 ff ff       	call   c000243f <move_window>
c0002d5e:	89 c1                	mov    ecx,eax
c0002d60:	85 c0                	test   eax,eax
c0002d62:	75 48                	jne    c0002dac <change_bitmap+0x9f>
c0002d64:	31 d2                	xor    edx,edx
c0002d66:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d6a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d6e:	0f 95 c2             	setne  dl
c0002d71:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d75:	74 3c                	je     c0002db3 <change_bitmap+0xa6>
c0002d77:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d7b:	4d                   	dec    ebp
c0002d7c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d80:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d84:	74 32                	je     c0002db8 <change_bitmap+0xab>
c0002d86:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d8a:	75 d8                	jne    c0002d64 <change_bitmap+0x57>
c0002d8c:	8d 46 01             	lea    eax,[esi+0x1]
c0002d8f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d94:	89 c3                	mov    ebx,eax
c0002d96:	31 f6                	xor    esi,esi
c0002d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da0:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002da6:	74 99                	je     c0002d41 <change_bitmap+0x34>
c0002da8:	89 de                	mov    esi,ebx
c0002daa:	eb b8                	jmp    c0002d64 <change_bitmap+0x57>
c0002dac:	b9 01 00 00 00       	mov    ecx,0x1
c0002db1:	eb 05                	jmp    c0002db8 <change_bitmap+0xab>
c0002db3:	b9 02 00 00 00       	mov    ecx,0x2
c0002db8:	83 c4 1c             	add    esp,0x1c
c0002dbb:	89 c8                	mov    eax,ecx
c0002dbd:	5b                   	pop    ebx
c0002dbe:	5e                   	pop    esi
c0002dbf:	5f                   	pop    edi
c0002dc0:	5d                   	pop    ebp
c0002dc1:	c3                   	ret    

c0002dc2 <put_fat>:
c0002dc2:	83 fa 01             	cmp    edx,0x1
c0002dc5:	0f 86 7b 01 00 00    	jbe    c0002f46 <put_fat+0x184>
c0002dcb:	55                   	push   ebp
c0002dcc:	57                   	push   edi
c0002dcd:	89 cf                	mov    edi,ecx
c0002dcf:	56                   	push   esi
c0002dd0:	b9 02 00 00 00       	mov    ecx,0x2
c0002dd5:	53                   	push   ebx
c0002dd6:	89 c6                	mov    esi,eax
c0002dd8:	83 ec 1c             	sub    esp,0x1c
c0002ddb:	89 d3                	mov    ebx,edx
c0002ddd:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de0:	0f 86 68 01 00 00    	jbe    c0002f4e <put_fat+0x18c>
c0002de6:	8a 00                	mov    al,BYTE PTR [eax]
c0002de8:	3c 02                	cmp    al,0x2
c0002dea:	0f 84 c7 00 00 00    	je     c0002eb7 <put_fat+0xf5>
c0002df0:	77 09                	ja     c0002dfb <put_fat+0x39>
c0002df2:	fe c8                	dec    al
c0002df4:	74 17                	je     c0002e0d <put_fat+0x4b>
c0002df6:	e9 53 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002dfb:	b9 02 00 00 00       	mov    ecx,0x2
c0002e00:	3c 04                	cmp    al,0x4
c0002e02:	0f 86 e1 00 00 00    	jbe    c0002ee9 <put_fat+0x127>
c0002e08:	e9 41 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002e0d:	89 d5                	mov    ebp,edx
c0002e0f:	31 c9                	xor    ecx,ecx
c0002e11:	d1 ed                	shr    ebp,1
c0002e13:	89 f0                	mov    eax,esi
c0002e15:	01 d5                	add    ebp,edx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	c1 ea 09             	shr    edx,0x9
c0002e1c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e1f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e22:	e8 18 f6 ff ff       	call   c000243f <move_window>
c0002e27:	89 c1                	mov    ecx,eax
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	0f 85 1d 01 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e31:	8d 46 54             	lea    eax,[esi+0x54]
c0002e34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e38:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e3b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e45:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e49:	89 f8                	mov    eax,edi
c0002e4b:	83 e3 01             	and    ebx,0x1
c0002e4e:	74 0d                	je     c0002e5d <put_fat+0x9b>
c0002e50:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e53:	89 fa                	mov    edx,edi
c0002e55:	83 e0 0f             	and    eax,0xf
c0002e58:	c1 e2 04             	shl    edx,0x4
c0002e5b:	09 d0                	or     eax,edx
c0002e5d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e64:	31 c9                	xor    ecx,ecx
c0002e66:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e6a:	c1 ea 09             	shr    edx,0x9
c0002e6d:	89 f0                	mov    eax,esi
c0002e6f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e72:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e75:	e8 c5 f5 ff ff       	call   c000243f <move_window>
c0002e7a:	89 c1                	mov    ecx,eax
c0002e7c:	85 c0                	test   eax,eax
c0002e7e:	0f 85 ca 00 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e84:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e88:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e8e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e92:	85 db                	test   ebx,ebx
c0002e94:	74 07                	je     c0002e9d <put_fat+0xdb>
c0002e96:	c1 ef 04             	shr    edi,0x4
c0002e99:	89 fa                	mov    edx,edi
c0002e9b:	eb 0e                	jmp    c0002eab <put_fat+0xe9>
c0002e9d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea0:	c1 ef 08             	shr    edi,0x8
c0002ea3:	83 e2 f0             	and    edx,0xfffffff0
c0002ea6:	83 e7 0f             	and    edi,0xf
c0002ea9:	09 fa                	or     edx,edi
c0002eab:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eae:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eb2:	e9 97 00 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002eb7:	31 c9                	xor    ecx,ecx
c0002eb9:	c1 ea 08             	shr    edx,0x8
c0002ebc:	89 f0                	mov    eax,esi
c0002ebe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ec4:	e8 76 f5 ff ff       	call   c000243f <move_window>
c0002ec9:	89 c1                	mov    ecx,eax
c0002ecb:	85 c0                	test   eax,eax
c0002ecd:	75 7f                	jne    c0002f4e <put_fat+0x18c>
c0002ecf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ed3:	01 db                	add    ebx,ebx
c0002ed5:	0f b7 d7             	movzx  edx,di
c0002ed8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ede:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ee2:	e8 ec ed ff ff       	call   c0001cd3 <st_word>
c0002ee7:	eb 53                	jmp    c0002f3c <put_fat+0x17a>
c0002ee9:	31 c9                	xor    ecx,ecx
c0002eeb:	c1 ea 07             	shr    edx,0x7
c0002eee:	89 f0                	mov    eax,esi
c0002ef0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ef3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ef6:	e8 44 f5 ff ff       	call   c000243f <move_window>
c0002efb:	89 c1                	mov    ecx,eax
c0002efd:	85 c0                	test   eax,eax
c0002eff:	75 4d                	jne    c0002f4e <put_fat+0x18c>
c0002f01:	c1 e3 02             	shl    ebx,0x2
c0002f04:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f0a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f0d:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f11:	74 1c                	je     c0002f2f <put_fat+0x16d>
c0002f13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f17:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f1d:	89 d8                	mov    eax,ebx
c0002f1f:	e8 4a ed ff ff       	call   c0001c6e <ld_dword>
c0002f24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f28:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f2d:	09 c7                	or     edi,eax
c0002f2f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f33:	89 fa                	mov    edx,edi
c0002f35:	89 d8                	mov    eax,ebx
c0002f37:	e8 9b ed ff ff       	call   c0001cd7 <st_dword>
c0002f3c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f44:	eb 08                	jmp    c0002f4e <put_fat+0x18c>
c0002f46:	b9 02 00 00 00       	mov    ecx,0x2
c0002f4b:	89 c8                	mov    eax,ecx
c0002f4d:	c3                   	ret    
c0002f4e:	83 c4 1c             	add    esp,0x1c
c0002f51:	89 c8                	mov    eax,ecx
c0002f53:	5b                   	pop    ebx
c0002f54:	5e                   	pop    esi
c0002f55:	5f                   	pop    edi
c0002f56:	5d                   	pop    ebp
c0002f57:	c3                   	ret    

c0002f58 <fill_last_frag>:
c0002f58:	57                   	push   edi
c0002f59:	89 cf                	mov    edi,ecx
c0002f5b:	56                   	push   esi
c0002f5c:	89 d6                	mov    esi,edx
c0002f5e:	53                   	push   ebx
c0002f5f:	89 c3                	mov    ebx,eax
c0002f61:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f64:	85 c0                	test   eax,eax
c0002f66:	74 21                	je     c0002f89 <fill_last_frag+0x31>
c0002f68:	89 f9                	mov    ecx,edi
c0002f6a:	83 f8 01             	cmp    eax,0x1
c0002f6d:	76 05                	jbe    c0002f74 <fill_last_frag+0x1c>
c0002f6f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f72:	29 c1                	sub    ecx,eax
c0002f74:	8d 56 01             	lea    edx,[esi+0x1]
c0002f77:	29 c2                	sub    edx,eax
c0002f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f7b:	e8 42 fe ff ff       	call   c0002dc2 <put_fat>
c0002f80:	85 c0                	test   eax,eax
c0002f82:	75 05                	jne    c0002f89 <fill_last_frag+0x31>
c0002f84:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f87:	eb d8                	jmp    c0002f61 <fill_last_frag+0x9>
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <fill_first_frag>:
c0002f8d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f91:	75 2d                	jne    c0002fc0 <fill_first_frag+0x33>
c0002f93:	57                   	push   edi
c0002f94:	56                   	push   esi
c0002f95:	53                   	push   ebx
c0002f96:	89 c3                	mov    ebx,eax
c0002f98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f9b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f9e:	01 d7                	add    edi,edx
c0002fa0:	39 fa                	cmp    edx,edi
c0002fa2:	74 14                	je     c0002fb8 <fill_first_frag+0x2b>
c0002fa4:	8d 72 01             	lea    esi,[edx+0x1]
c0002fa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fa9:	89 f1                	mov    ecx,esi
c0002fab:	e8 12 fe ff ff       	call   c0002dc2 <put_fat>
c0002fb0:	89 f2                	mov    edx,esi
c0002fb2:	85 c0                	test   eax,eax
c0002fb4:	74 ea                	je     c0002fa0 <fill_first_frag+0x13>
c0002fb6:	eb 0b                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fb8:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fbc:	31 c0                	xor    eax,eax
c0002fbe:	eb 03                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fc0:	31 c0                	xor    eax,eax
c0002fc2:	c3                   	ret    
c0002fc3:	5b                   	pop    ebx
c0002fc4:	5e                   	pop    esi
c0002fc5:	5f                   	pop    edi
c0002fc6:	c3                   	ret    

c0002fc7 <get_fat>:
c0002fc7:	83 fa 01             	cmp    edx,0x1
c0002fca:	0f 86 db 01 00 00    	jbe    c00031ab <get_fat+0x1e4>
c0002fd0:	55                   	push   ebp
c0002fd1:	b9 01 00 00 00       	mov    ecx,0x1
c0002fd6:	57                   	push   edi
c0002fd7:	56                   	push   esi
c0002fd8:	53                   	push   ebx
c0002fd9:	83 ec 1c             	sub    esp,0x1c
c0002fdc:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fde:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe1:	0f 86 cc 01 00 00    	jbe    c00031b3 <get_fat+0x1ec>
c0002fe7:	89 c3                	mov    ebx,eax
c0002fe9:	89 d6                	mov    esi,edx
c0002feb:	8a 07                	mov    al,BYTE PTR [edi]
c0002fed:	3c 02                	cmp    al,0x2
c0002fef:	0f 84 99 00 00 00    	je     c000308e <get_fat+0xc7>
c0002ff5:	77 09                	ja     c0003000 <get_fat+0x39>
c0002ff7:	fe c8                	dec    al
c0002ff9:	74 1a                	je     c0003015 <get_fat+0x4e>
c0002ffb:	e9 b3 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003000:	3c 03                	cmp    al,0x3
c0003002:	0f 84 b5 00 00 00    	je     c00030bd <get_fat+0xf6>
c0003008:	3c 04                	cmp    al,0x4
c000300a:	0f 84 e3 00 00 00    	je     c00030f3 <get_fat+0x12c>
c0003010:	e9 9e 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003015:	89 d3                	mov    ebx,edx
c0003017:	31 c9                	xor    ecx,ecx
c0003019:	d1 eb                	shr    ebx,1
c000301b:	89 f8                	mov    eax,edi
c000301d:	01 d3                	add    ebx,edx
c000301f:	89 da                	mov    edx,ebx
c0003021:	c1 ea 09             	shr    edx,0x9
c0003024:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003027:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000302a:	e8 10 f4 ff ff       	call   c000243f <move_window>
c000302f:	85 c0                	test   eax,eax
c0003031:	74 08                	je     c000303b <get_fat+0x74>
c0003033:	83 c9 ff             	or     ecx,0xffffffff
c0003036:	e9 78 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000303b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000303e:	31 c9                	xor    ecx,ecx
c0003040:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003046:	89 ea                	mov    edx,ebp
c0003048:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000304c:	c1 ea 09             	shr    edx,0x9
c000304f:	89 f8                	mov    eax,edi
c0003051:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003054:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003057:	e8 e3 f3 ff ff       	call   c000243f <move_window>
c000305c:	85 c0                	test   eax,eax
c000305e:	75 d3                	jne    c0003033 <get_fat+0x6c>
c0003060:	0f b6 c3             	movzx  eax,bl
c0003063:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003069:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000306e:	c1 e3 08             	shl    ebx,0x8
c0003071:	09 c3                	or     ebx,eax
c0003073:	89 d9                	mov    ecx,ebx
c0003075:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000307b:	83 e6 01             	and    esi,0x1
c000307e:	0f 84 2f 01 00 00    	je     c00031b3 <get_fat+0x1ec>
c0003084:	89 d9                	mov    ecx,ebx
c0003086:	c1 e9 04             	shr    ecx,0x4
c0003089:	e9 25 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000308e:	31 c9                	xor    ecx,ecx
c0003090:	c1 ea 08             	shr    edx,0x8
c0003093:	89 f8                	mov    eax,edi
c0003095:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003098:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000309b:	e8 9f f3 ff ff       	call   c000243f <move_window>
c00030a0:	85 c0                	test   eax,eax
c00030a2:	75 8f                	jne    c0003033 <get_fat+0x6c>
c00030a4:	01 f6                	add    esi,esi
c00030a6:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030ac:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b0:	e8 ac eb ff ff       	call   c0001c61 <ld_word>
c00030b5:	0f b7 c8             	movzx  ecx,ax
c00030b8:	e9 f6 00 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c00030bd:	31 c9                	xor    ecx,ecx
c00030bf:	c1 ea 07             	shr    edx,0x7
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030c7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ca:	e8 70 f3 ff ff       	call   c000243f <move_window>
c00030cf:	85 c0                	test   eax,eax
c00030d1:	0f 85 5c ff ff ff    	jne    c0003033 <get_fat+0x6c>
c00030d7:	c1 e6 02             	shl    esi,0x2
c00030da:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030e4:	e8 85 eb ff ff       	call   c0001c6e <ld_dword>
c00030e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030ee:	e9 b4 00 00 00       	jmp    c00031a7 <get_fat+0x1e0>
c00030f3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030f6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030f9:	89 d1                	mov    ecx,edx
c00030fb:	09 c1                	or     ecx,eax
c00030fd:	74 06                	je     c0003105 <get_fat+0x13e>
c00030ff:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003103:	75 0f                	jne    c0003114 <get_fat+0x14d>
c0003105:	b9 01 00 00 00       	mov    ecx,0x1
c000310a:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c000310e:	0f 85 9f 00 00 00    	jne    c00031b3 <get_fat+0x1ec>
c0003114:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003118:	89 f5                	mov    ebp,esi
c000311a:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c000311f:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003122:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003125:	80 f9 02             	cmp    cl,0x2
c0003128:	75 35                	jne    c000315f <get_fat+0x198>
c000312a:	83 c0 ff             	add    eax,0xffffffff
c000312d:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003132:	83 d2 ff             	adc    edx,0xffffffff
c0003135:	31 db                	xor    ebx,ebx
c0003137:	0f ac d0 09          	shrd   eax,edx,0x9
c000313b:	53                   	push   ebx
c000313c:	c1 ea 09             	shr    edx,0x9
c000313f:	51                   	push   ecx
c0003140:	52                   	push   edx
c0003141:	50                   	push   eax
c0003142:	e8 95 38 02 00       	call   c00269dc <__udivdi3>
c0003147:	83 c4 10             	add    esp,0x10
c000314a:	b9 01 00 00 00       	mov    ecx,0x1
c000314f:	39 c5                	cmp    ebp,eax
c0003151:	77 60                	ja     c00031b3 <get_fat+0x1ec>
c0003153:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003158:	74 59                	je     c00031b3 <get_fat+0x1ec>
c000315a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000315d:	eb 54                	jmp    c00031b3 <get_fat+0x1ec>
c000315f:	80 f9 03             	cmp    cl,0x3
c0003162:	75 05                	jne    c0003169 <get_fat+0x1a2>
c0003164:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003167:	77 f1                	ja     c000315a <get_fat+0x193>
c0003169:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000316e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003172:	75 3f                	jne    c00031b3 <get_fat+0x1ec>
c0003174:	31 c9                	xor    ecx,ecx
c0003176:	89 f2                	mov    edx,esi
c0003178:	89 f8                	mov    eax,edi
c000317a:	c1 ea 07             	shr    edx,0x7
c000317d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003180:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003183:	e8 b7 f2 ff ff       	call   c000243f <move_window>
c0003188:	85 c0                	test   eax,eax
c000318a:	0f 85 a3 fe ff ff    	jne    c0003033 <get_fat+0x6c>
c0003190:	c1 e6 02             	shl    esi,0x2
c0003193:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003199:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319d:	e8 cc ea ff ff       	call   c0001c6e <ld_dword>
c00031a2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031a7:	89 c1                	mov    ecx,eax
c00031a9:	eb 08                	jmp    c00031b3 <get_fat+0x1ec>
c00031ab:	b9 01 00 00 00       	mov    ecx,0x1
c00031b0:	89 c8                	mov    eax,ecx
c00031b2:	c3                   	ret    
c00031b3:	83 c4 1c             	add    esp,0x1c
c00031b6:	89 c8                	mov    eax,ecx
c00031b8:	5b                   	pop    ebx
c00031b9:	5e                   	pop    esi
c00031ba:	5f                   	pop    edi
c00031bb:	5d                   	pop    ebp
c00031bc:	c3                   	ret    

c00031bd <dir_sdi>:
c00031bd:	55                   	push   ebp
c00031be:	57                   	push   edi
c00031bf:	56                   	push   esi
c00031c0:	53                   	push   ebx
c00031c1:	89 c3                	mov    ebx,eax
c00031c3:	83 ec 1c             	sub    esp,0x1c
c00031c6:	8b 38                	mov    edi,DWORD PTR [eax]
c00031c8:	31 c0                	xor    eax,eax
c00031ca:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031cd:	0f 94 c0             	sete   al
c00031d0:	48                   	dec    eax
c00031d1:	25 00 00 20 f0       	and    eax,0xf0200000
c00031d6:	05 00 00 00 10       	add    eax,0x10000000
c00031db:	39 d0                	cmp    eax,edx
c00031dd:	77 0a                	ja     c00031e9 <dir_sdi+0x2c>
c00031df:	b8 02 00 00 00       	mov    eax,0x2
c00031e4:	e9 c4 00 00 00       	jmp    c00032ad <dir_sdi+0xf0>
c00031e9:	89 d6                	mov    esi,edx
c00031eb:	f6 c2 1f             	test   dl,0x1f
c00031ee:	75 ef                	jne    c00031df <dir_sdi+0x22>
c00031f0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031f3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031f6:	85 c9                	test   ecx,ecx
c00031f8:	75 2d                	jne    c0003227 <dir_sdi+0x6a>
c00031fa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031fd:	77 1b                	ja     c000321a <dir_sdi+0x5d>
c00031ff:	89 f2                	mov    edx,esi
c0003201:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003205:	c1 ea 05             	shr    edx,0x5
c0003208:	39 c2                	cmp    edx,eax
c000320a:	73 d3                	jae    c00031df <dir_sdi+0x22>
c000320c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000320f:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003212:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003215:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003218:	eb 4b                	jmp    c0003265 <dir_sdi+0xa8>
c000321a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000321d:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003221:	85 c0                	test   eax,eax
c0003223:	74 da                	je     c00031ff <dir_sdi+0x42>
c0003225:	89 c1                	mov    ecx,eax
c0003227:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000322b:	c1 e5 09             	shl    ebp,0x9
c000322e:	89 ca                	mov    edx,ecx
c0003230:	39 ee                	cmp    esi,ebp
c0003232:	72 1c                	jb     c0003250 <dir_sdi+0x93>
c0003234:	89 d8                	mov    eax,ebx
c0003236:	e8 8c fd ff ff       	call   c0002fc7 <get_fat>
c000323b:	89 c1                	mov    ecx,eax
c000323d:	83 f8 ff             	cmp    eax,0xffffffff
c0003240:	74 66                	je     c00032a8 <dir_sdi+0xeb>
c0003242:	83 f8 01             	cmp    eax,0x1
c0003245:	76 98                	jbe    c00031df <dir_sdi+0x22>
c0003247:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000324a:	76 93                	jbe    c00031df <dir_sdi+0x22>
c000324c:	29 ee                	sub    esi,ebp
c000324e:	eb de                	jmp    c000322e <dir_sdi+0x71>
c0003250:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003254:	89 f8                	mov    eax,edi
c0003256:	e8 9f ec ff ff       	call   c0001efa <clst2sect>
c000325b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000325f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003262:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003265:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003268:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000326b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000326e:	89 d1                	mov    ecx,edx
c0003270:	09 c1                	or     ecx,eax
c0003272:	0f 84 67 ff ff ff    	je     c00031df <dir_sdi+0x22>
c0003278:	89 f1                	mov    ecx,esi
c000327a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003282:	c1 e9 09             	shr    ecx,0x9
c0003285:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003289:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000328d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003291:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003294:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000329a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000329d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032a4:	31 c0                	xor    eax,eax
c00032a6:	eb 05                	jmp    c00032ad <dir_sdi+0xf0>
c00032a8:	b8 01 00 00 00       	mov    eax,0x1
c00032ad:	83 c4 1c             	add    esp,0x1c
c00032b0:	5b                   	pop    ebx
c00032b1:	5e                   	pop    esi
c00032b2:	5f                   	pop    edi
c00032b3:	5d                   	pop    ebp
c00032b4:	c3                   	ret    

c00032b5 <create_chain>:
c00032b5:	55                   	push   ebp
c00032b6:	89 c5                	mov    ebp,eax
c00032b8:	57                   	push   edi
c00032b9:	56                   	push   esi
c00032ba:	53                   	push   ebx
c00032bb:	83 ec 1c             	sub    esp,0x1c
c00032be:	85 d2                	test   edx,edx
c00032c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032c4:	8b 30                	mov    esi,DWORD PTR [eax]
c00032c6:	75 0e                	jne    c00032d6 <create_chain+0x21>
c00032c8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032cb:	85 ff                	test   edi,edi
c00032cd:	74 39                	je     c0003308 <create_chain+0x53>
c00032cf:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032d2:	77 39                	ja     c000330d <create_chain+0x58>
c00032d4:	eb 32                	jmp    c0003308 <create_chain+0x53>
c00032d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032da:	e8 e8 fc ff ff       	call   c0002fc7 <get_fat>
c00032df:	89 c3                	mov    ebx,eax
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	77 0a                	ja     c00032f0 <create_chain+0x3b>
c00032e6:	bb 01 00 00 00       	mov    ebx,0x1
c00032eb:	e9 ba 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c00032f0:	83 f8 ff             	cmp    eax,0xffffffff
c00032f3:	0f 84 62 01 00 00    	je     c000345b <create_chain+0x1a6>
c00032f9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032fc:	0f 87 a8 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c0003302:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003306:	eb 05                	jmp    c000330d <create_chain+0x58>
c0003308:	bf 01 00 00 00       	mov    edi,0x1
c000330d:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003311:	75 07                	jne    c000331a <create_chain+0x65>
c0003313:	31 db                	xor    ebx,ebx
c0003315:	e9 90 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c000331a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000331d:	75 74                	jne    c0003393 <create_chain+0xde>
c000331f:	b9 01 00 00 00       	mov    ecx,0x1
c0003324:	89 fa                	mov    edx,edi
c0003326:	89 f0                	mov    eax,esi
c0003328:	e8 2d f9 ff ff       	call   c0002c5a <find_bitmap>
c000332d:	89 c3                	mov    ebx,eax
c000332f:	8d 40 ff             	lea    eax,[eax-0x1]
c0003332:	83 f8 fd             	cmp    eax,0xfffffffd
c0003335:	0f 87 6f 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c000333b:	83 ec 0c             	sub    esp,0xc
c000333e:	b9 01 00 00 00       	mov    ecx,0x1
c0003343:	6a 01                	push   0x1
c0003345:	89 da                	mov    edx,ebx
c0003347:	89 f0                	mov    eax,esi
c0003349:	e8 bf f9 ff ff       	call   c0002d0d <change_bitmap>
c000334e:	83 c4 10             	add    esp,0x10
c0003351:	83 f8 02             	cmp    eax,0x2
c0003354:	74 90                	je     c00032e6 <create_chain+0x31>
c0003356:	83 f8 01             	cmp    eax,0x1
c0003359:	0f 84 fc 00 00 00    	je     c000345b <create_chain+0x1a6>
c000335f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003364:	75 09                	jne    c000336f <create_chain+0xba>
c0003366:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000336a:	e9 0c 01 00 00       	jmp    c000347b <create_chain+0x1c6>
c000336f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003373:	0f 85 e7 00 00 00    	jne    c0003460 <create_chain+0x1ab>
c0003379:	8d 57 01             	lea    edx,[edi+0x1]
c000337c:	39 da                	cmp    edx,ebx
c000337e:	0f 84 f7 00 00 00    	je     c000347b <create_chain+0x1c6>
c0003384:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003387:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000338b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000338e:	e9 cd 00 00 00       	jmp    c0003460 <create_chain+0x1ab>
c0003393:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003397:	75 41                	jne    c00033da <create_chain+0x125>
c0003399:	8d 5f 01             	lea    ebx,[edi+0x1]
c000339c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000339f:	77 05                	ja     c00033a6 <create_chain+0xf1>
c00033a1:	bb 02 00 00 00       	mov    ebx,0x2
c00033a6:	89 da                	mov    edx,ebx
c00033a8:	89 e8                	mov    eax,ebp
c00033aa:	e8 18 fc ff ff       	call   c0002fc7 <get_fat>
c00033af:	83 f8 01             	cmp    eax,0x1
c00033b2:	0f 84 2e ff ff ff    	je     c00032e6 <create_chain+0x31>
c00033b8:	83 f8 ff             	cmp    eax,0xffffffff
c00033bb:	0f 84 9a 00 00 00    	je     c000345b <create_chain+0x1a6>
c00033c1:	85 c0                	test   eax,eax
c00033c3:	74 11                	je     c00033d6 <create_chain+0x121>
c00033c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 0d                	jbe    c00033da <create_chain+0x125>
c00033cd:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d0:	76 08                	jbe    c00033da <create_chain+0x125>
c00033d2:	89 c7                	mov    edi,eax
c00033d4:	eb 04                	jmp    c00033da <create_chain+0x125>
c00033d6:	85 db                	test   ebx,ebx
c00033d8:	75 38                	jne    c0003412 <create_chain+0x15d>
c00033da:	89 fb                	mov    ebx,edi
c00033dc:	43                   	inc    ebx
c00033dd:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e0:	77 0e                	ja     c00033f0 <create_chain+0x13b>
c00033e2:	83 ff 01             	cmp    edi,0x1
c00033e5:	0f 86 28 ff ff ff    	jbe    c0003313 <create_chain+0x5e>
c00033eb:	bb 02 00 00 00       	mov    ebx,0x2
c00033f0:	89 da                	mov    edx,ebx
c00033f2:	89 e8                	mov    eax,ebp
c00033f4:	e8 ce fb ff ff       	call   c0002fc7 <get_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 15                	je     c0003412 <create_chain+0x15d>
c00033fd:	83 f8 01             	cmp    eax,0x1
c0003400:	0f 84 e0 fe ff ff    	je     c00032e6 <create_chain+0x31>
c0003406:	40                   	inc    eax
c0003407:	74 52                	je     c000345b <create_chain+0x1a6>
c0003409:	39 fb                	cmp    ebx,edi
c000340b:	75 cf                	jne    c00033dc <create_chain+0x127>
c000340d:	e9 01 ff ff ff       	jmp    c0003313 <create_chain+0x5e>
c0003412:	83 c9 ff             	or     ecx,0xffffffff
c0003415:	89 da                	mov    edx,ebx
c0003417:	89 f0                	mov    eax,esi
c0003419:	e8 a4 f9 ff ff       	call   c0002dc2 <put_fat>
c000341e:	85 c0                	test   eax,eax
c0003420:	75 32                	jne    c0003454 <create_chain+0x19f>
c0003422:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003427:	74 11                	je     c000343a <create_chain+0x185>
c0003429:	89 d9                	mov    ecx,ebx
c000342b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000342f:	89 f0                	mov    eax,esi
c0003431:	e8 8c f9 ff ff       	call   c0002dc2 <put_fat>
c0003436:	85 c0                	test   eax,eax
c0003438:	75 1a                	jne    c0003454 <create_chain+0x19f>
c000343a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000343d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003440:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003443:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003446:	39 d0                	cmp    eax,edx
c0003448:	77 04                	ja     c000344e <create_chain+0x199>
c000344a:	48                   	dec    eax
c000344b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000344e:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003452:	eb 56                	jmp    c00034aa <create_chain+0x1f5>
c0003454:	48                   	dec    eax
c0003455:	0f 85 8b fe ff ff    	jne    c00032e6 <create_chain+0x31>
c000345b:	83 cb ff             	or     ebx,0xffffffff
c000345e:	eb 4a                	jmp    c00034aa <create_chain+0x1f5>
c0003460:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003464:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003467:	41                   	inc    ecx
c0003468:	39 d9                	cmp    ecx,ebx
c000346a:	75 19                	jne    c0003485 <create_chain+0x1d0>
c000346c:	b9 02 00 00 00       	mov    ecx,0x2
c0003471:	85 d2                	test   edx,edx
c0003473:	74 03                	je     c0003478 <create_chain+0x1c3>
c0003475:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003478:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000347b:	85 c0                	test   eax,eax
c000347d:	0f 85 63 fe ff ff    	jne    c00032e6 <create_chain+0x31>
c0003483:	eb b5                	jmp    c000343a <create_chain+0x185>
c0003485:	85 d2                	test   edx,edx
c0003487:	75 07                	jne    c0003490 <create_chain+0x1db>
c0003489:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003490:	89 d9                	mov    ecx,ebx
c0003492:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003496:	89 e8                	mov    eax,ebp
c0003498:	e8 bb fa ff ff       	call   c0002f58 <fill_last_frag>
c000349d:	85 c0                	test   eax,eax
c000349f:	75 b3                	jne    c0003454 <create_chain+0x19f>
c00034a1:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034a8:	eb 90                	jmp    c000343a <create_chain+0x185>
c00034aa:	83 c4 1c             	add    esp,0x1c
c00034ad:	89 d8                	mov    eax,ebx
c00034af:	5b                   	pop    ebx
c00034b0:	5e                   	pop    esi
c00034b1:	5f                   	pop    edi
c00034b2:	5d                   	pop    ebp
c00034b3:	c3                   	ret    

c00034b4 <remove_chain>:
c00034b4:	55                   	push   ebp
c00034b5:	57                   	push   edi
c00034b6:	56                   	push   esi
c00034b7:	53                   	push   ebx
c00034b8:	83 ec 1c             	sub    esp,0x1c
c00034bb:	83 fa 01             	cmp    edx,0x1
c00034be:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034c2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034c4:	77 0a                	ja     c00034d0 <remove_chain+0x1c>
c00034c6:	b8 02 00 00 00       	mov    eax,0x2
c00034cb:	e9 24 01 00 00       	jmp    c00035f4 <remove_chain+0x140>
c00034d0:	89 d6                	mov    esi,edx
c00034d2:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034d5:	76 ef                	jbe    c00034c6 <remove_chain+0x12>
c00034d7:	89 c7                	mov    edi,eax
c00034d9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034de:	75 06                	jne    c00034e6 <remove_chain+0x32>
c00034e0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034e4:	eb 54                	jmp    c000353a <remove_chain+0x86>
c00034e6:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034e9:	75 06                	jne    c00034f1 <remove_chain+0x3d>
c00034eb:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034ef:	74 ef                	je     c00034e0 <remove_chain+0x2c>
c00034f1:	83 c9 ff             	or     ecx,0xffffffff
c00034f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034f8:	89 d8                	mov    eax,ebx
c00034fa:	e8 c3 f8 ff ff       	call   c0002dc2 <put_fat>
c00034ff:	85 c0                	test   eax,eax
c0003501:	74 dd                	je     c00034e0 <remove_chain+0x2c>
c0003503:	e9 ec 00 00 00       	jmp    c00035f4 <remove_chain+0x140>
c0003508:	83 f8 01             	cmp    eax,0x1
c000350b:	74 b9                	je     c00034c6 <remove_chain+0x12>
c000350d:	83 f8 ff             	cmp    eax,0xffffffff
c0003510:	74 6d                	je     c000357f <remove_chain+0xcb>
c0003512:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003515:	75 6f                	jne    c0003586 <remove_chain+0xd2>
c0003517:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000351a:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000351d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003520:	39 d0                	cmp    eax,edx
c0003522:	73 08                	jae    c000352c <remove_chain+0x78>
c0003524:	40                   	inc    eax
c0003525:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003529:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000352c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000352f:	39 e9                	cmp    ecx,ebp
c0003531:	75 64                	jne    c0003597 <remove_chain+0xe3>
c0003533:	89 ee                	mov    esi,ebp
c0003535:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003538:	76 0f                	jbe    c0003549 <remove_chain+0x95>
c000353a:	89 f2                	mov    edx,esi
c000353c:	89 f8                	mov    eax,edi
c000353e:	e8 84 fa ff ff       	call   c0002fc7 <get_fat>
c0003543:	89 c5                	mov    ebp,eax
c0003545:	85 c0                	test   eax,eax
c0003547:	75 bf                	jne    c0003508 <remove_chain+0x54>
c0003549:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000354c:	0f 85 a0 00 00 00    	jne    c00035f2 <remove_chain+0x13e>
c0003552:	eb 6c                	jmp    c00035c0 <remove_chain+0x10c>
c0003554:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003557:	84 c0                	test   al,al
c0003559:	75 7d                	jne    c00035d8 <remove_chain+0x124>
c000355b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000355e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003562:	0f 84 86 00 00 00    	je     c00035ee <remove_chain+0x13a>
c0003568:	89 da                	mov    edx,ebx
c000356a:	89 f8                	mov    eax,edi
c000356c:	e8 56 fa ff ff       	call   c0002fc7 <get_fat>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	0f 86 4c ff ff ff    	jbe    c00034c6 <remove_chain+0x12>
c000357a:	83 f8 ff             	cmp    eax,0xffffffff
c000357d:	75 4e                	jne    c00035cd <remove_chain+0x119>
c000357f:	b8 01 00 00 00       	mov    eax,0x1
c0003584:	eb 6e                	jmp    c00035f4 <remove_chain+0x140>
c0003586:	31 c9                	xor    ecx,ecx
c0003588:	89 f2                	mov    edx,esi
c000358a:	89 d8                	mov    eax,ebx
c000358c:	e8 31 f8 ff ff       	call   c0002dc2 <put_fat>
c0003591:	85 c0                	test   eax,eax
c0003593:	74 82                	je     c0003517 <remove_chain+0x63>
c0003595:	eb 5d                	jmp    c00035f4 <remove_chain+0x140>
c0003597:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000359a:	75 1b                	jne    c00035b7 <remove_chain+0x103>
c000359c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	83 ec 0c             	sub    esp,0xc
c00035a5:	6a 00                	push   0x0
c00035a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035ab:	e8 5d f7 ff ff       	call   c0002d0d <change_bitmap>
c00035b0:	83 c4 10             	add    esp,0x10
c00035b3:	85 c0                	test   eax,eax
c00035b5:	75 3d                	jne    c00035f4 <remove_chain+0x140>
c00035b7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035bb:	e9 73 ff ff ff       	jmp    c0003533 <remove_chain+0x7f>
c00035c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035c5:	75 8d                	jne    c0003554 <remove_chain+0xa0>
c00035c7:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035cb:	eb 25                	jmp    c00035f2 <remove_chain+0x13e>
c00035cd:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d0:	89 c3                	mov    ebx,eax
c00035d2:	39 c2                	cmp    edx,eax
c00035d4:	74 88                	je     c000355e <remove_chain+0xaa>
c00035d6:	eb 1a                	jmp    c00035f2 <remove_chain+0x13e>
c00035d8:	3c 03                	cmp    al,0x3
c00035da:	75 16                	jne    c00035f2 <remove_chain+0x13e>
c00035dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035df:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035e3:	77 0d                	ja     c00035f2 <remove_chain+0x13e>
c00035e5:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035e8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ec:	72 04                	jb     c00035f2 <remove_chain+0x13e>
c00035ee:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035f2:	31 c0                	xor    eax,eax
c00035f4:	83 c4 1c             	add    esp,0x1c
c00035f7:	5b                   	pop    ebx
c00035f8:	5e                   	pop    esi
c00035f9:	5f                   	pop    edi
c00035fa:	5d                   	pop    ebp
c00035fb:	c3                   	ret    

c00035fc <dir_clear>:
c00035fc:	55                   	push   ebp
c00035fd:	57                   	push   edi
c00035fe:	56                   	push   esi
c00035ff:	89 c6                	mov    esi,eax
c0003601:	53                   	push   ebx
c0003602:	83 ec 1c             	sub    esp,0x1c
c0003605:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003609:	e8 9d ed ff ff       	call   c00023ab <sync_window>
c000360e:	85 c0                	test   eax,eax
c0003610:	0f 85 de 00 00 00    	jne    c00036f4 <dir_clear+0xf8>
c0003616:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000361a:	89 f0                	mov    eax,esi
c000361c:	8d 6e 54             	lea    ebp,[esi+0x54]
c000361f:	e8 d6 e8 ff ff       	call   c0001efa <clst2sect>
c0003624:	b9 00 02 00 00       	mov    ecx,0x200
c0003629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000362d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003631:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003634:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003637:	89 e8                	mov    eax,ebp
c0003639:	31 d2                	xor    edx,edx
c000363b:	e8 b5 e6 ff ff       	call   c0001cf5 <mem_set>
c0003640:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003644:	c1 e3 09             	shl    ebx,0x9
c0003647:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000364d:	76 1f                	jbe    c000366e <dir_clear+0x72>
c000364f:	bb 00 80 00 00       	mov    ebx,0x8000
c0003654:	eb 18                	jmp    c000366e <dir_clear+0x72>
c0003656:	83 ec 0c             	sub    esp,0xc
c0003659:	53                   	push   ebx
c000365a:	e8 35 4e 00 00       	call   c0008494 <ff_memalloc>
c000365f:	83 c4 10             	add    esp,0x10
c0003662:	89 c7                	mov    edi,eax
c0003664:	85 c0                	test   eax,eax
c0003666:	0f 85 8f 00 00 00    	jne    c00036fb <dir_clear+0xff>
c000366c:	d1 eb                	shr    ebx,1
c000366e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003674:	77 e0                	ja     c0003656 <dir_clear+0x5a>
c0003676:	31 db                	xor    ebx,ebx
c0003678:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000367c:	39 d8                	cmp    eax,ebx
c000367e:	76 66                	jbe    c00036e6 <dir_clear+0xea>
c0003680:	83 ec 0c             	sub    esp,0xc
c0003683:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003687:	6a 01                	push   0x1
c0003689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000368d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003691:	55                   	push   ebp
c0003692:	50                   	push   eax
c0003693:	e8 94 e5 ff ff       	call   c0001c2c <disk_write>
c0003698:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000369d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036a2:	83 c4 20             	add    esp,0x20
c00036a5:	85 c0                	test   eax,eax
c00036a7:	75 3d                	jne    c00036e6 <dir_clear+0xea>
c00036a9:	43                   	inc    ebx
c00036aa:	eb cc                	jmp    c0003678 <dir_clear+0x7c>
c00036ac:	83 ec 0c             	sub    esp,0xc
c00036af:	31 d2                	xor    edx,edx
c00036b1:	55                   	push   ebp
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036b8:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036bc:	52                   	push   edx
c00036bd:	50                   	push   eax
c00036be:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036c2:	57                   	push   edi
c00036c3:	50                   	push   eax
c00036c4:	e8 63 e5 ff ff       	call   c0001c2c <disk_write>
c00036c9:	83 c4 20             	add    esp,0x20
c00036cc:	85 c0                	test   eax,eax
c00036ce:	75 0a                	jne    c00036da <dir_clear+0xde>
c00036d0:	01 eb                	add    ebx,ebp
c00036d2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036d6:	39 d8                	cmp    eax,ebx
c00036d8:	77 d2                	ja     c00036ac <dir_clear+0xb0>
c00036da:	83 ec 0c             	sub    esp,0xc
c00036dd:	57                   	push   edi
c00036de:	e8 c7 4d 00 00       	call   c00084aa <ff_memfree>
c00036e3:	83 c4 10             	add    esp,0x10
c00036e6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036ea:	39 d8                	cmp    eax,ebx
c00036ec:	0f 95 c0             	setne  al
c00036ef:	0f b6 c0             	movzx  eax,al
c00036f2:	eb 19                	jmp    c000370d <dir_clear+0x111>
c00036f4:	b8 01 00 00 00       	mov    eax,0x1
c00036f9:	eb 12                	jmp    c000370d <dir_clear+0x111>
c00036fb:	89 d9                	mov    ecx,ebx
c00036fd:	31 d2                	xor    edx,edx
c00036ff:	c1 eb 09             	shr    ebx,0x9
c0003702:	e8 ee e5 ff ff       	call   c0001cf5 <mem_set>
c0003707:	89 dd                	mov    ebp,ebx
c0003709:	31 db                	xor    ebx,ebx
c000370b:	eb c5                	jmp    c00036d2 <dir_clear+0xd6>
c000370d:	83 c4 1c             	add    esp,0x1c
c0003710:	5b                   	pop    ebx
c0003711:	5e                   	pop    esi
c0003712:	5f                   	pop    edi
c0003713:	5d                   	pop    ebp
c0003714:	c3                   	ret    

c0003715 <dir_next>:
c0003715:	55                   	push   ebp
c0003716:	57                   	push   edi
c0003717:	56                   	push   esi
c0003718:	53                   	push   ebx
c0003719:	89 c3                	mov    ebx,eax
c000371b:	83 ec 1c             	sub    esp,0x1c
c000371e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003720:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003724:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003727:	8d 78 20             	lea    edi,[eax+0x20]
c000372a:	31 c0                	xor    eax,eax
c000372c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003730:	0f 94 c0             	sete   al
c0003733:	48                   	dec    eax
c0003734:	25 00 00 20 f0       	and    eax,0xf0200000
c0003739:	05 00 00 00 10       	add    eax,0x10000000
c000373e:	39 f8                	cmp    eax,edi
c0003740:	77 0e                	ja     c0003750 <dir_next+0x3b>
c0003742:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003749:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003750:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003753:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003756:	b8 04 00 00 00       	mov    eax,0x4
c000375b:	89 ce                	mov    esi,ecx
c000375d:	09 d6                	or     esi,edx
c000375f:	0f 84 da 00 00 00    	je     c000383f <dir_next+0x12a>
c0003765:	89 f8                	mov    eax,edi
c0003767:	25 ff 01 00 00       	and    eax,0x1ff
c000376c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003770:	0f 85 b9 00 00 00    	jne    c000382f <dir_next+0x11a>
c0003776:	83 c2 01             	add    edx,0x1
c0003779:	83 d1 00             	adc    ecx,0x0
c000377c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000377f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003782:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003785:	85 d2                	test   edx,edx
c0003787:	75 29                	jne    c00037b2 <dir_next+0x9d>
c0003789:	89 fa                	mov    edx,edi
c000378b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000378f:	c1 ea 05             	shr    edx,0x5
c0003792:	39 c2                	cmp    edx,eax
c0003794:	0f 82 95 00 00 00    	jb     c000382f <dir_next+0x11a>
c000379a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037a8:	b8 04 00 00 00       	mov    eax,0x4
c00037ad:	e9 8d 00 00 00       	jmp    c000383f <dir_next+0x12a>
c00037b2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037b6:	89 f9                	mov    ecx,edi
c00037b8:	48                   	dec    eax
c00037b9:	c1 e9 09             	shr    ecx,0x9
c00037bc:	85 c8                	test   eax,ecx
c00037be:	75 6f                	jne    c000382f <dir_next+0x11a>
c00037c0:	89 d8                	mov    eax,ebx
c00037c2:	e8 00 f8 ff ff       	call   c0002fc7 <get_fat>
c00037c7:	89 c6                	mov    esi,eax
c00037c9:	83 f8 01             	cmp    eax,0x1
c00037cc:	77 07                	ja     c00037d5 <dir_next+0xc0>
c00037ce:	b8 02 00 00 00       	mov    eax,0x2
c00037d3:	eb 6a                	jmp    c000383f <dir_next+0x12a>
c00037d5:	83 f8 ff             	cmp    eax,0xffffffff
c00037d8:	75 07                	jne    c00037e1 <dir_next+0xcc>
c00037da:	b8 01 00 00 00       	mov    eax,0x1
c00037df:	eb 5e                	jmp    c000383f <dir_next+0x12a>
c00037e1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037e4:	77 37                	ja     c000381d <dir_next+0x108>
c00037e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037eb:	74 ad                	je     c000379a <dir_next+0x85>
c00037ed:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f0:	89 d8                	mov    eax,ebx
c00037f2:	e8 be fa ff ff       	call   c00032b5 <create_chain>
c00037f7:	89 c6                	mov    esi,eax
c00037f9:	b8 07 00 00 00       	mov    eax,0x7
c00037fe:	85 f6                	test   esi,esi
c0003800:	74 3d                	je     c000383f <dir_next+0x12a>
c0003802:	83 fe 01             	cmp    esi,0x1
c0003805:	74 c7                	je     c00037ce <dir_next+0xb9>
c0003807:	83 fe ff             	cmp    esi,0xffffffff
c000380a:	74 ce                	je     c00037da <dir_next+0xc5>
c000380c:	89 f2                	mov    edx,esi
c000380e:	89 e8                	mov    eax,ebp
c0003810:	e8 e7 fd ff ff       	call   c00035fc <dir_clear>
c0003815:	85 c0                	test   eax,eax
c0003817:	75 c1                	jne    c00037da <dir_next+0xc5>
c0003819:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000381d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003820:	89 f2                	mov    edx,esi
c0003822:	89 e8                	mov    eax,ebp
c0003824:	e8 d1 e6 ff ff       	call   c0001efa <clst2sect>
c0003829:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000382c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000382f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003833:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003836:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000383a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000383d:	31 c0                	xor    eax,eax
c000383f:	83 c4 1c             	add    esp,0x1c
c0003842:	5b                   	pop    ebx
c0003843:	5e                   	pop    esi
c0003844:	5f                   	pop    edi
c0003845:	5d                   	pop    ebp
c0003846:	c3                   	ret    

c0003847 <load_xdir>:
c0003847:	55                   	push   ebp
c0003848:	57                   	push   edi
c0003849:	56                   	push   esi
c000384a:	89 c6                	mov    esi,eax
c000384c:	53                   	push   ebx
c000384d:	83 ec 1c             	sub    esp,0x1c
c0003850:	8b 00                	mov    eax,DWORD PTR [eax]
c0003852:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003855:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003858:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000385b:	e8 df eb ff ff       	call   c000243f <move_window>
c0003860:	89 c3                	mov    ebx,eax
c0003862:	85 c0                	test   eax,eax
c0003864:	0f 85 0c 01 00 00    	jne    c0003976 <load_xdir+0x12f>
c000386a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000386d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003870:	0f 85 fb 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c0003876:	89 f8                	mov    eax,edi
c0003878:	b9 20 00 00 00       	mov    ecx,0x20
c000387d:	e8 5e e4 ff ff       	call   c0001ce0 <mem_cpy>
c0003882:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003886:	40                   	inc    eax
c0003887:	c1 e0 05             	shl    eax,0x5
c000388a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000388e:	83 e8 60             	sub    eax,0x60
c0003891:	3d 00 02 00 00       	cmp    eax,0x200
c0003896:	0f 87 d5 00 00 00    	ja     c0003971 <load_xdir+0x12a>
c000389c:	31 d2                	xor    edx,edx
c000389e:	89 f0                	mov    eax,esi
c00038a0:	e8 70 fe ff ff       	call   c0003715 <dir_next>
c00038a5:	89 c3                	mov    ebx,eax
c00038a7:	83 f8 04             	cmp    eax,0x4
c00038aa:	0f 84 c1 00 00 00    	je     c0003971 <load_xdir+0x12a>
c00038b0:	85 c0                	test   eax,eax
c00038b2:	0f 85 be 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038b8:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038bb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038be:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c0:	e8 7a eb ff ff       	call   c000243f <move_window>
c00038c5:	89 c3                	mov    ebx,eax
c00038c7:	85 c0                	test   eax,eax
c00038c9:	0f 85 a7 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038d2:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038d5:	0f 85 96 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c00038db:	8d 47 20             	lea    eax,[edi+0x20]
c00038de:	b9 20 00 00 00       	mov    ecx,0x20
c00038e3:	e8 f8 e3 ff ff       	call   c0001ce0 <mem_cpy>
c00038e8:	31 d2                	xor    edx,edx
c00038ea:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038ee:	b9 0f 00 00 00       	mov    ecx,0xf
c00038f3:	83 c0 2c             	add    eax,0x2c
c00038f6:	f7 f1                	div    ecx
c00038f8:	c1 e0 05             	shl    eax,0x5
c00038fb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038ff:	77 70                	ja     c0003971 <load_xdir+0x12a>
c0003901:	bd 40 00 00 00       	mov    ebp,0x40
c0003906:	31 d2                	xor    edx,edx
c0003908:	89 f0                	mov    eax,esi
c000390a:	e8 06 fe ff ff       	call   c0003715 <dir_next>
c000390f:	89 c3                	mov    ebx,eax
c0003911:	83 f8 04             	cmp    eax,0x4
c0003914:	74 5b                	je     c0003971 <load_xdir+0x12a>
c0003916:	85 c0                	test   eax,eax
c0003918:	75 5c                	jne    c0003976 <load_xdir+0x12f>
c000391a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000391d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003920:	8b 06                	mov    eax,DWORD PTR [esi]
c0003922:	e8 18 eb ff ff       	call   c000243f <move_window>
c0003927:	89 c3                	mov    ebx,eax
c0003929:	85 c0                	test   eax,eax
c000392b:	75 49                	jne    c0003976 <load_xdir+0x12f>
c000392d:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003930:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003933:	75 3c                	jne    c0003971 <load_xdir+0x12a>
c0003935:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000393b:	77 0d                	ja     c000394a <load_xdir+0x103>
c000393d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003940:	b9 20 00 00 00       	mov    ecx,0x20
c0003945:	e8 96 e3 ff ff       	call   c0001ce0 <mem_cpy>
c000394a:	83 c5 20             	add    ebp,0x20
c000394d:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003951:	77 b3                	ja     c0003906 <load_xdir+0xbf>
c0003953:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003959:	77 1b                	ja     c0003976 <load_xdir+0x12f>
c000395b:	89 f8                	mov    eax,edi
c000395d:	e8 cd e7 ff ff       	call   c000212f <xdir_sum>
c0003962:	89 c1                	mov    ecx,eax
c0003964:	8d 47 02             	lea    eax,[edi+0x2]
c0003967:	e8 f5 e2 ff ff       	call   c0001c61 <ld_word>
c000396c:	66 39 c1             	cmp    cx,ax
c000396f:	74 05                	je     c0003976 <load_xdir+0x12f>
c0003971:	bb 02 00 00 00       	mov    ebx,0x2
c0003976:	83 c4 1c             	add    esp,0x1c
c0003979:	89 d8                	mov    eax,ebx
c000397b:	5b                   	pop    ebx
c000397c:	5e                   	pop    esi
c000397d:	5f                   	pop    edi
c000397e:	5d                   	pop    ebp
c000397f:	c3                   	ret    

c0003980 <load_obj_xdir>:
c0003980:	53                   	push   ebx
c0003981:	89 c3                	mov    ebx,eax
c0003983:	83 ec 08             	sub    esp,0x8
c0003986:	8b 02                	mov    eax,DWORD PTR [edx]
c0003988:	89 03                	mov    DWORD PTR [ebx],eax
c000398a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000398d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003990:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003993:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003996:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003999:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a0:	30 c0                	xor    al,al
c00039a2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039a9:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039ac:	89 d8                	mov    eax,ebx
c00039ae:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b1:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039b4:	e8 04 f8 ff ff       	call   c00031bd <dir_sdi>
c00039b9:	85 c0                	test   eax,eax
c00039bb:	75 0b                	jne    c00039c8 <load_obj_xdir+0x48>
c00039bd:	89 d8                	mov    eax,ebx
c00039bf:	83 c4 08             	add    esp,0x8
c00039c2:	5b                   	pop    ebx
c00039c3:	e9 7f fe ff ff       	jmp    c0003847 <load_xdir>
c00039c8:	83 c4 08             	add    esp,0x8
c00039cb:	5b                   	pop    ebx
c00039cc:	c3                   	ret    

c00039cd <dir_read>:
c00039cd:	55                   	push   ebp
c00039ce:	bd 04 00 00 00       	mov    ebp,0x4
c00039d3:	57                   	push   edi
c00039d4:	56                   	push   esi
c00039d5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039da:	53                   	push   ebx
c00039db:	89 c3                	mov    ebx,eax
c00039dd:	83 ec 1c             	sub    esp,0x1c
c00039e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e4:	8b 38                	mov    edi,DWORD PTR [eax]
c00039e6:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039eb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039ee:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f1:	89 c8                	mov    eax,ecx
c00039f3:	09 d0                	or     eax,edx
c00039f5:	0f 84 25 01 00 00    	je     c0003b20 <dir_read+0x153>
c00039fb:	89 f8                	mov    eax,edi
c00039fd:	e8 3d ea ff ff       	call   c000243f <move_window>
c0003a02:	89 c5                	mov    ebp,eax
c0003a04:	85 c0                	test   eax,eax
c0003a06:	0f 85 23 01 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a0c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a0f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a11:	84 c9                	test   cl,cl
c0003a13:	0f 84 11 01 00 00    	je     c0003b2a <dir_read+0x15d>
c0003a19:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a1c:	75 48                	jne    c0003a66 <dir_read+0x99>
c0003a1e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a23:	74 10                	je     c0003a35 <dir_read+0x68>
c0003a25:	80 f9 83             	cmp    cl,0x83
c0003a28:	0f 85 dd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a2e:	31 ed                	xor    ebp,ebp
c0003a30:	e9 08 01 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a35:	80 f9 85             	cmp    cl,0x85
c0003a38:	0f 85 cd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a3e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a41:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a44:	89 d8                	mov    eax,ebx
c0003a46:	e8 fc fd ff ff       	call   c0003847 <load_xdir>
c0003a4b:	89 c5                	mov    ebp,eax
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	0f 85 da 00 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a55:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a58:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a5b:	83 e0 3f             	and    eax,0x3f
c0003a5e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a61:	e9 d7 00 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a66:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a69:	83 e0 3f             	and    eax,0x3f
c0003a6c:	80 f9 2e             	cmp    cl,0x2e
c0003a6f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a73:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a76:	0f 84 8a 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a7c:	80 f9 e5             	cmp    cl,0xe5
c0003a7f:	0f 84 81 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a89:	83 e0 1f             	and    eax,0x1f
c0003a8c:	83 f8 08             	cmp    eax,0x8
c0003a8f:	0f 94 c0             	sete   al
c0003a92:	0f b6 c0             	movzx  eax,al
c0003a95:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a99:	75 6b                	jne    c0003b06 <dir_read+0x139>
c0003a9b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa0:	75 44                	jne    c0003ae6 <dir_read+0x119>
c0003aa2:	f6 c1 40             	test   cl,0x40
c0003aa5:	74 12                	je     c0003ab9 <dir_read+0xec>
c0003aa7:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003aaa:	83 e1 bf             	and    ecx,0xffffffbf
c0003aad:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ab4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ab7:	eb 06                	jmp    c0003abf <dir_read+0xf2>
c0003ab9:	89 f0                	mov    eax,esi
c0003abb:	38 c8                	cmp    al,cl
c0003abd:	75 47                	jne    c0003b06 <dir_read+0x139>
c0003abf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ac3:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ac8:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003acb:	75 3e                	jne    c0003b0b <dir_read+0x13e>
c0003acd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ad4:	e8 8a e4 ff ff       	call   c0001f63 <pick_lfn>
c0003ad9:	85 c0                	test   eax,eax
c0003adb:	74 2e                	je     c0003b0b <dir_read+0x13e>
c0003add:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae1:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ae4:	eb 25                	jmp    c0003b0b <dir_read+0x13e>
c0003ae6:	89 f0                	mov    eax,esi
c0003ae8:	84 c0                	test   al,al
c0003aea:	75 11                	jne    c0003afd <dir_read+0x130>
c0003aec:	89 d0                	mov    eax,edx
c0003aee:	e8 2a e6 ff ff       	call   c000211d <sum_sfn>
c0003af3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003af7:	0f 84 31 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003afd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b04:	eb 37                	jmp    c0003b3d <dir_read+0x170>
c0003b06:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b0b:	31 d2                	xor    edx,edx
c0003b0d:	89 d8                	mov    eax,ebx
c0003b0f:	e8 01 fc ff ff       	call   c0003715 <dir_next>
c0003b14:	89 c5                	mov    ebp,eax
c0003b16:	85 c0                	test   eax,eax
c0003b18:	0f 84 cd fe ff ff    	je     c00039eb <dir_read+0x1e>
c0003b1e:	eb 0f                	jmp    c0003b2f <dir_read+0x162>
c0003b20:	85 ed                	test   ebp,ebp
c0003b22:	0f 84 06 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003b28:	eb 05                	jmp    c0003b2f <dir_read+0x162>
c0003b2a:	bd 04 00 00 00       	mov    ebp,0x4
c0003b2f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b36:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b3d:	83 c4 1c             	add    esp,0x1c
c0003b40:	89 e8                	mov    eax,ebp
c0003b42:	5b                   	pop    ebx
c0003b43:	5e                   	pop    esi
c0003b44:	5f                   	pop    edi
c0003b45:	5d                   	pop    ebp
c0003b46:	c3                   	ret    

c0003b47 <dir_alloc>:
c0003b47:	55                   	push   ebp
c0003b48:	89 d5                	mov    ebp,edx
c0003b4a:	57                   	push   edi
c0003b4b:	31 d2                	xor    edx,edx
c0003b4d:	56                   	push   esi
c0003b4e:	53                   	push   ebx
c0003b4f:	89 c3                	mov    ebx,eax
c0003b51:	83 ec 0c             	sub    esp,0xc
c0003b54:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b56:	e8 62 f6 ff ff       	call   c00031bd <dir_sdi>
c0003b5b:	85 c0                	test   eax,eax
c0003b5d:	75 4e                	jne    c0003bad <dir_alloc+0x66>
c0003b5f:	31 f6                	xor    esi,esi
c0003b61:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b64:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b67:	89 f8                	mov    eax,edi
c0003b69:	e8 d1 e8 ff ff       	call   c000243f <move_window>
c0003b6e:	85 c0                	test   eax,eax
c0003b70:	75 3b                	jne    c0003bad <dir_alloc+0x66>
c0003b72:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b75:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b78:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b7a:	75 07                	jne    c0003b83 <dir_alloc+0x3c>
c0003b7c:	f7 d2                	not    edx
c0003b7e:	c0 ea 07             	shr    dl,0x7
c0003b81:	eb 0d                	jmp    c0003b90 <dir_alloc+0x49>
c0003b83:	84 d2                	test   dl,dl
c0003b85:	0f 94 c1             	sete   cl
c0003b88:	80 fa e5             	cmp    dl,0xe5
c0003b8b:	0f 94 c2             	sete   dl
c0003b8e:	09 ca                	or     edx,ecx
c0003b90:	84 d2                	test   dl,dl
c0003b92:	74 07                	je     c0003b9b <dir_alloc+0x54>
c0003b94:	46                   	inc    esi
c0003b95:	39 ee                	cmp    esi,ebp
c0003b97:	75 04                	jne    c0003b9d <dir_alloc+0x56>
c0003b99:	eb 1c                	jmp    c0003bb7 <dir_alloc+0x70>
c0003b9b:	31 f6                	xor    esi,esi
c0003b9d:	ba 01 00 00 00       	mov    edx,0x1
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 6c fb ff ff       	call   c0003715 <dir_next>
c0003ba9:	85 c0                	test   eax,eax
c0003bab:	74 b4                	je     c0003b61 <dir_alloc+0x1a>
c0003bad:	83 f8 04             	cmp    eax,0x4
c0003bb0:	75 05                	jne    c0003bb7 <dir_alloc+0x70>
c0003bb2:	b8 07 00 00 00       	mov    eax,0x7
c0003bb7:	83 c4 0c             	add    esp,0xc
c0003bba:	5b                   	pop    ebx
c0003bbb:	5e                   	pop    esi
c0003bbc:	5f                   	pop    edi
c0003bbd:	5d                   	pop    ebp
c0003bbe:	c3                   	ret    

c0003bbf <store_xdir>:
c0003bbf:	55                   	push   ebp
c0003bc0:	57                   	push   edi
c0003bc1:	89 c7                	mov    edi,eax
c0003bc3:	56                   	push   esi
c0003bc4:	53                   	push   ebx
c0003bc5:	83 ec 0c             	sub    esp,0xc
c0003bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bca:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bcd:	89 e8                	mov    eax,ebp
c0003bcf:	e8 5b e5 ff ff       	call   c000212f <xdir_sum>
c0003bd4:	0f b7 d0             	movzx  edx,ax
c0003bd7:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bda:	e8 f4 e0 ff ff       	call   c0001cd3 <st_word>
c0003bdf:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003be3:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003be6:	89 f8                	mov    eax,edi
c0003be8:	e8 d0 f5 ff ff       	call   c00031bd <dir_sdi>
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	85 f6                	test   esi,esi
c0003bf1:	75 3d                	jne    c0003c30 <store_xdir+0x71>
c0003bf3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bf6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bf9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bfb:	e8 3f e8 ff ff       	call   c000243f <move_window>
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	85 c0                	test   eax,eax
c0003c04:	75 2a                	jne    c0003c30 <store_xdir+0x71>
c0003c06:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c09:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0e:	89 ea                	mov    edx,ebp
c0003c10:	e8 cb e0 ff ff       	call   c0001ce0 <mem_cpy>
c0003c15:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c17:	85 db                	test   ebx,ebx
c0003c19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c1d:	74 11                	je     c0003c30 <store_xdir+0x71>
c0003c1f:	31 d2                	xor    edx,edx
c0003c21:	89 f8                	mov    eax,edi
c0003c23:	83 c5 20             	add    ebp,0x20
c0003c26:	e8 ea fa ff ff       	call   c0003715 <dir_next>
c0003c2b:	4b                   	dec    ebx
c0003c2c:	89 c6                	mov    esi,eax
c0003c2e:	eb bf                	jmp    c0003bef <store_xdir+0x30>
c0003c30:	89 f0                	mov    eax,esi
c0003c32:	83 fe 02             	cmp    esi,0x2
c0003c35:	76 05                	jbe    c0003c3c <store_xdir+0x7d>
c0003c37:	b8 02 00 00 00       	mov    eax,0x2
c0003c3c:	83 c4 0c             	add    esp,0xc
c0003c3f:	5b                   	pop    ebx
c0003c40:	5e                   	pop    esi
c0003c41:	5f                   	pop    edi
c0003c42:	5d                   	pop    ebp
c0003c43:	c3                   	ret    

c0003c44 <dir_remove>:
c0003c44:	57                   	push   edi
c0003c45:	56                   	push   esi
c0003c46:	53                   	push   ebx
c0003c47:	89 c3                	mov    ebx,eax
c0003c49:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c4c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c4e:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c51:	83 fa ff             	cmp    edx,0xffffffff
c0003c54:	74 09                	je     c0003c5f <dir_remove+0x1b>
c0003c56:	e8 62 f5 ff ff       	call   c00031bd <dir_sdi>
c0003c5b:	85 c0                	test   eax,eax
c0003c5d:	75 41                	jne    c0003ca0 <dir_remove+0x5c>
c0003c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c62:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c65:	89 f0                	mov    eax,esi
c0003c67:	e8 d3 e7 ff ff       	call   c000243f <move_window>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	75 26                	jne    c0003c96 <dir_remove+0x52>
c0003c70:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c73:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c76:	75 05                	jne    c0003c7d <dir_remove+0x39>
c0003c78:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c7b:	eb 03                	jmp    c0003c80 <dir_remove+0x3c>
c0003c7d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c80:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c84:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c87:	73 17                	jae    c0003ca0 <dir_remove+0x5c>
c0003c89:	31 d2                	xor    edx,edx
c0003c8b:	89 d8                	mov    eax,ebx
c0003c8d:	e8 83 fa ff ff       	call   c0003715 <dir_next>
c0003c92:	85 c0                	test   eax,eax
c0003c94:	74 c9                	je     c0003c5f <dir_remove+0x1b>
c0003c96:	83 f8 04             	cmp    eax,0x4
c0003c99:	75 05                	jne    c0003ca0 <dir_remove+0x5c>
c0003c9b:	b8 02 00 00 00       	mov    eax,0x2
c0003ca0:	5b                   	pop    ebx
c0003ca1:	5e                   	pop    esi
c0003ca2:	5f                   	pop    edi
c0003ca3:	c3                   	ret    

c0003ca4 <create_name>:
c0003ca4:	55                   	push   ebp
c0003ca5:	89 d5                	mov    ebp,edx
c0003ca7:	57                   	push   edi
c0003ca8:	89 c7                	mov    edi,eax
c0003caa:	56                   	push   esi
c0003cab:	31 f6                	xor    esi,esi
c0003cad:	53                   	push   ebx
c0003cae:	83 ec 3c             	sub    esp,0x3c
c0003cb1:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cb3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cb7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003cc4:	e8 72 e0 ff ff       	call   c0001d3b <tchar2uni>
c0003cc9:	89 c3                	mov    ebx,eax
c0003ccb:	83 f8 ff             	cmp    eax,0xffffffff
c0003cce:	75 0a                	jne    c0003cda <create_name+0x36>
c0003cd0:	b8 06 00 00 00       	mov    eax,0x6
c0003cd5:	e9 9e 02 00 00       	jmp    c0003f78 <create_name+0x2d4>
c0003cda:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cdf:	76 0c                	jbe    c0003ced <create_name+0x49>
c0003ce1:	c1 e8 10             	shr    eax,0x10
c0003ce4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ce8:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cec:	46                   	inc    esi
c0003ced:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf1:	76 4f                	jbe    c0003d42 <create_name+0x9e>
c0003cf3:	66 83 fb 5c          	cmp    bx,0x5c
c0003cf7:	74 35                	je     c0003d2e <create_name+0x8a>
c0003cf9:	66 83 fb 2f          	cmp    bx,0x2f
c0003cfd:	74 2f                	je     c0003d2e <create_name+0x8a>
c0003cff:	66 83 fb 7f          	cmp    bx,0x7f
c0003d03:	77 11                	ja     c0003d16 <create_name+0x72>
c0003d05:	0f b7 d3             	movzx  edx,bx
c0003d08:	b8 92 94 02 c0       	mov    eax,0xc0029492
c0003d0d:	e8 11 e0 ff ff       	call   c0001d23 <chk_chr>
c0003d12:	85 c0                	test   eax,eax
c0003d14:	75 ba                	jne    c0003cd0 <create_name+0x2c>
c0003d16:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d1c:	77 b2                	ja     c0003cd0 <create_name+0x2c>
c0003d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d22:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d26:	46                   	inc    esi
c0003d27:	eb 97                	jmp    c0003cc0 <create_name+0x1c>
c0003d29:	40                   	inc    eax
c0003d2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d32:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d34:	80 fa 2f             	cmp    dl,0x2f
c0003d37:	74 f0                	je     c0003d29 <create_name+0x85>
c0003d39:	80 fa 5c             	cmp    dl,0x5c
c0003d3c:	74 eb                	je     c0003d29 <create_name+0x85>
c0003d3e:	31 db                	xor    ebx,ebx
c0003d40:	eb 02                	jmp    c0003d44 <create_name+0xa0>
c0003d42:	b3 04                	mov    bl,0x4
c0003d44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d48:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d4b:	85 f6                	test   esi,esi
c0003d4d:	74 18                	je     c0003d67 <create_name+0xc3>
c0003d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d53:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d58:	66 83 f8 20          	cmp    ax,0x20
c0003d5c:	74 06                	je     c0003d64 <create_name+0xc0>
c0003d5e:	66 83 f8 2e          	cmp    ax,0x2e
c0003d62:	75 03                	jne    c0003d67 <create_name+0xc3>
c0003d64:	4e                   	dec    esi
c0003d65:	eb e4                	jmp    c0003d4b <create_name+0xa7>
c0003d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6b:	31 ed                	xor    ebp,ebp
c0003d6d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d73:	85 f6                	test   esi,esi
c0003d75:	0f 84 55 ff ff ff    	je     c0003cd0 <create_name+0x2c>
c0003d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d7f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d82:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d86:	66 83 f8 20          	cmp    ax,0x20
c0003d8a:	75 04                	jne    c0003d90 <create_name+0xec>
c0003d8c:	89 d5                	mov    ebp,edx
c0003d8e:	eb eb                	jmp    c0003d7b <create_name+0xd7>
c0003d90:	85 ed                	test   ebp,ebp
c0003d92:	75 06                	jne    c0003d9a <create_name+0xf6>
c0003d94:	66 83 f8 2e          	cmp    ax,0x2e
c0003d98:	75 08                	jne    c0003da2 <create_name+0xfe>
c0003d9a:	83 cb 03             	or     ebx,0x3
c0003d9d:	eb 03                	jmp    c0003da2 <create_name+0xfe>
c0003d9f:	4e                   	dec    esi
c0003da0:	74 0c                	je     c0003dae <create_name+0x10a>
c0003da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da6:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003dac:	75 f1                	jne    c0003d9f <create_name+0xfb>
c0003dae:	b9 0b 00 00 00       	mov    ecx,0xb
c0003db3:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003db6:	ba 20 00 00 00       	mov    edx,0x20
c0003dbb:	e8 35 df ff ff       	call   c0001cf5 <mem_set>
c0003dc0:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dc8:	31 c9                	xor    ecx,ecx
c0003dca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dcf:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dda:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dde:	66 85 ed             	test   bp,bp
c0003de1:	0f 84 30 01 00 00    	je     c0003f17 <create_name+0x273>
c0003de7:	66 83 fd 20          	cmp    bp,0x20
c0003deb:	74 10                	je     c0003dfd <create_name+0x159>
c0003ded:	66 83 fd 2e          	cmp    bp,0x2e
c0003df1:	75 13                	jne    c0003e06 <create_name+0x162>
c0003df3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df7:	0f 84 6b 01 00 00    	je     c0003f68 <create_name+0x2c4>
c0003dfd:	83 cb 03             	or     ebx,0x3
c0003e00:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e04:	eb c9                	jmp    c0003dcf <create_name+0x12b>
c0003e06:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e0a:	73 0b                	jae    c0003e17 <create_name+0x173>
c0003e0c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e10:	75 47                	jne    c0003e59 <create_name+0x1b5>
c0003e12:	e9 51 01 00 00       	jmp    c0003f68 <create_name+0x2c4>
c0003e17:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e1c:	75 10                	jne    c0003e2e <create_name+0x18a>
c0003e1e:	83 cb 03             	or     ebx,0x3
c0003e21:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e29:	e9 e9 00 00 00       	jmp    c0003f17 <create_name+0x273>
c0003e2e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e32:	74 0d                	je     c0003e41 <create_name+0x19d>
c0003e34:	83 cb 03             	or     ebx,0x3
c0003e37:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3b:	0f 87 d6 00 00 00    	ja     c0003f17 <create_name+0x273>
c0003e41:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e46:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e4a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e52:	b9 08 00 00 00       	mov    ecx,0x8
c0003e57:	eb a7                	jmp    c0003e00 <create_name+0x15c>
c0003e59:	66 83 fd 7f          	cmp    bp,0x7f
c0003e5d:	76 68                	jbe    c0003ec7 <create_name+0x223>
c0003e5f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e63:	88 da                	mov    dl,bl
c0003e65:	83 ca 02             	or     edx,0x2
c0003e68:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e6c:	50                   	push   eax
c0003e6d:	50                   	push   eax
c0003e6e:	68 b5 01 00 00       	push   0x1b5
c0003e73:	55                   	push   ebp
c0003e74:	e8 48 46 00 00       	call   c00084c1 <ff_uni2oem>
c0003e79:	83 c4 10             	add    esp,0x10
c0003e7c:	89 c5                	mov    ebp,eax
c0003e7e:	a8 80                	test   al,0x80
c0003e80:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e88:	74 0c                	je     c0003e96 <create_name+0x1f2>
c0003e8a:	83 e5 7f             	and    ebp,0x7f
c0003e8d:	0f b6 ad e0 93 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6c20]
c0003e94:	eb 2a                	jmp    c0003ec0 <create_name+0x21c>
c0003e96:	66 3d ff 00          	cmp    ax,0xff
c0003e9a:	76 24                	jbe    c0003ec0 <create_name+0x21c>
c0003e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea0:	48                   	dec    eax
c0003ea1:	39 c8                	cmp    eax,ecx
c0003ea3:	77 0c                	ja     c0003eb1 <create_name+0x20d>
c0003ea5:	83 cb 03             	or     ebx,0x3
c0003ea8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eac:	e9 4f ff ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003eb1:	89 e8                	mov    eax,ebp
c0003eb3:	88 d3                	mov    bl,dl
c0003eb5:	66 c1 e8 08          	shr    ax,0x8
c0003eb9:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ebd:	41                   	inc    ecx
c0003ebe:	eb 4b                	jmp    c0003f0b <create_name+0x267>
c0003ec0:	88 d3                	mov    bl,dl
c0003ec2:	66 85 ed             	test   bp,bp
c0003ec5:	74 19                	je     c0003ee0 <create_name+0x23c>
c0003ec7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ecb:	0f b7 d5             	movzx  edx,bp
c0003ece:	b8 9b 94 02 c0       	mov    eax,0xc002949b
c0003ed3:	e8 4b de ff ff       	call   c0001d23 <chk_chr>
c0003ed8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003edc:	85 c0                	test   eax,eax
c0003ede:	74 0a                	je     c0003eea <create_name+0x246>
c0003ee0:	83 cb 03             	or     ebx,0x3
c0003ee3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ee8:	eb 21                	jmp    c0003f0b <create_name+0x267>
c0003eea:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eed:	66 83 f8 19          	cmp    ax,0x19
c0003ef1:	77 07                	ja     c0003efa <create_name+0x256>
c0003ef3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ef8:	eb 11                	jmp    c0003f0b <create_name+0x267>
c0003efa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003efd:	66 83 f8 19          	cmp    ax,0x19
c0003f01:	77 08                	ja     c0003f0b <create_name+0x267>
c0003f03:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f08:	83 ed 20             	sub    ebp,0x20
c0003f0b:	89 e8                	mov    eax,ebp
c0003f0d:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f11:	41                   	inc    ecx
c0003f12:	e9 e9 fe ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003f17:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f1b:	75 04                	jne    c0003f21 <create_name+0x27d>
c0003f1d:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f21:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f26:	75 05                	jne    c0003f2d <create_name+0x289>
c0003f28:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f31:	83 e0 0c             	and    eax,0xc
c0003f34:	3c 0c                	cmp    al,0xc
c0003f36:	74 0b                	je     c0003f43 <create_name+0x29f>
c0003f38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f3c:	83 e0 03             	and    eax,0x3
c0003f3f:	3c 03                	cmp    al,0x3
c0003f41:	75 05                	jne    c0003f48 <create_name+0x2a4>
c0003f43:	83 cb 02             	or     ebx,0x2
c0003f46:	eb 19                	jmp    c0003f61 <create_name+0x2bd>
c0003f48:	f6 c3 02             	test   bl,0x2
c0003f4b:	75 14                	jne    c0003f61 <create_name+0x2bd>
c0003f4d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f52:	74 03                	je     c0003f57 <create_name+0x2b3>
c0003f54:	83 cb 10             	or     ebx,0x10
c0003f57:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f5c:	74 03                	je     c0003f61 <create_name+0x2bd>
c0003f5e:	83 cb 08             	or     ebx,0x8
c0003f61:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f64:	31 c0                	xor    eax,eax
c0003f66:	eb 10                	jmp    c0003f78 <create_name+0x2d4>
c0003f68:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f6d:	0f 85 ce fe ff ff    	jne    c0003e41 <create_name+0x19d>
c0003f73:	e9 a6 fe ff ff       	jmp    c0003e1e <create_name+0x17a>
c0003f78:	83 c4 3c             	add    esp,0x3c
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	5f                   	pop    edi
c0003f7e:	5d                   	pop    ebp
c0003f7f:	c3                   	ret    

c0003f80 <xname_sum>:
c0003f80:	56                   	push   esi
c0003f81:	53                   	push   ebx
c0003f82:	89 c6                	mov    esi,eax
c0003f84:	51                   	push   ecx
c0003f85:	31 db                	xor    ebx,ebx
c0003f87:	83 c6 02             	add    esi,0x2
c0003f8a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f8e:	66 85 c0             	test   ax,ax
c0003f91:	74 1f                	je     c0003fb2 <xname_sum+0x32>
c0003f93:	83 ec 0c             	sub    esp,0xc
c0003f96:	66 d1 cb             	ror    bx,1
c0003f99:	50                   	push   eax
c0003f9a:	e8 1e 46 00 00       	call   c00085bd <ff_wtoupper>
c0003f9f:	83 c4 10             	add    esp,0x10
c0003fa2:	0f b6 d0             	movzx  edx,al
c0003fa5:	66 c1 e8 08          	shr    ax,0x8
c0003fa9:	01 d3                	add    ebx,edx
c0003fab:	66 d1 cb             	ror    bx,1
c0003fae:	01 c3                	add    ebx,eax
c0003fb0:	eb d5                	jmp    c0003f87 <xname_sum+0x7>
c0003fb2:	89 d8                	mov    eax,ebx
c0003fb4:	5a                   	pop    edx
c0003fb5:	5b                   	pop    ebx
c0003fb6:	5e                   	pop    esi
c0003fb7:	c3                   	ret    

c0003fb8 <create_xdir>:
c0003fb8:	55                   	push   ebp
c0003fb9:	b9 40 00 00 00       	mov    ecx,0x40
c0003fbe:	57                   	push   edi
c0003fbf:	bd 01 00 00 00       	mov    ebp,0x1
c0003fc4:	56                   	push   esi
c0003fc5:	31 ff                	xor    edi,edi
c0003fc7:	53                   	push   ebx
c0003fc8:	be 40 00 00 00       	mov    esi,0x40
c0003fcd:	89 c3                	mov    ebx,eax
c0003fcf:	83 ec 1c             	sub    esp,0x1c
c0003fd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fd6:	31 d2                	xor    edx,edx
c0003fd8:	e8 18 dd ff ff       	call   c0001cf5 <mem_set>
c0003fdd:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe0:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fe4:	31 c9                	xor    ecx,ecx
c0003fe6:	8d 46 01             	lea    eax,[esi+0x1]
c0003fe9:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fed:	83 c6 02             	add    esi,0x2
c0003ff0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ff4:	66 85 ed             	test   bp,bp
c0003ff7:	74 12                	je     c000400b <create_xdir+0x53>
c0003ff9:	0f b6 c1             	movzx  eax,cl
c0003ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004000:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0004004:	66 83 fd 01          	cmp    bp,0x1
c0004008:	80 d9 ff             	sbb    cl,0xff
c000400b:	8d 04 33             	lea    eax,[ebx+esi*1]
c000400e:	0f b7 d5             	movzx  edx,bp
c0004011:	83 c6 02             	add    esi,0x2
c0004014:	e8 ba dc ff ff       	call   c0001cd3 <st_word>
c0004019:	f7 c6 1f 00 00 00    	test   esi,0x1f
c000401f:	75 d3                	jne    c0003ff4 <create_xdir+0x3c>
c0004021:	8d 47 01             	lea    eax,[edi+0x1]
c0004024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004028:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000402c:	0f b6 c1             	movzx  eax,cl
c000402f:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004034:	74 07                	je     c000403d <create_xdir+0x85>
c0004036:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000403b:	eb a9                	jmp    c0003fe6 <create_xdir+0x2e>
c000403d:	8d 47 02             	lea    eax,[edi+0x2]
c0004040:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004043:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004046:	89 d0                	mov    eax,edx
c0004048:	e8 33 ff ff ff       	call   c0003f80 <xname_sum>
c000404d:	83 c4 1c             	add    esp,0x1c
c0004050:	0f b7 d0             	movzx  edx,ax
c0004053:	8d 43 24             	lea    eax,[ebx+0x24]
c0004056:	5b                   	pop    ebx
c0004057:	5e                   	pop    esi
c0004058:	5f                   	pop    edi
c0004059:	5d                   	pop    ebp
c000405a:	e9 74 dc ff ff       	jmp    c0001cd3 <st_word>

c000405f <cmp_lfn>:
c000405f:	55                   	push   ebp
c0004060:	57                   	push   edi
c0004061:	89 d7                	mov    edi,edx
c0004063:	56                   	push   esi
c0004064:	53                   	push   ebx
c0004065:	83 ec 1c             	sub    esp,0x1c
c0004068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000406c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000406f:	e8 ed db ff ff       	call   c0001c61 <ld_word>
c0004074:	66 85 c0             	test   ax,ax
c0004077:	74 07                	je     c0004080 <cmp_lfn+0x21>
c0004079:	31 c0                	xor    eax,eax
c000407b:	e9 9a 00 00 00       	jmp    c000411a <cmp_lfn+0xbb>
c0004080:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004082:	bd 01 00 00 00       	mov    ebp,0x1
c0004087:	83 e3 3f             	and    ebx,0x3f
c000408a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004092:	4b                   	dec    ebx
c0004093:	6b db 0d             	imul   ebx,ebx,0xd
c0004096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000409a:	0f b6 80 60 94 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6ba0]
c00040a1:	01 f8                	add    eax,edi
c00040a3:	e8 b9 db ff ff       	call   c0001c61 <ld_word>
c00040a8:	66 85 ed             	test   bp,bp
c00040ab:	89 c6                	mov    esi,eax
c00040ad:	74 3c                	je     c00040eb <cmp_lfn+0x8c>
c00040af:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040b5:	77 c2                	ja     c0004079 <cmp_lfn+0x1a>
c00040b7:	83 ec 0c             	sub    esp,0xc
c00040ba:	0f b7 c0             	movzx  eax,ax
c00040bd:	50                   	push   eax
c00040be:	e8 fa 44 00 00       	call   c00085bd <ff_wtoupper>
c00040c3:	89 c5                	mov    ebp,eax
c00040c5:	8d 43 01             	lea    eax,[ebx+0x1]
c00040c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d0:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040d7:	e8 e1 44 00 00       	call   c00085bd <ff_wtoupper>
c00040dc:	83 c4 10             	add    esp,0x10
c00040df:	39 c5                	cmp    ebp,eax
c00040e1:	75 96                	jne    c0004079 <cmp_lfn+0x1a>
c00040e3:	89 f5                	mov    ebp,esi
c00040e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040e9:	eb 04                	jmp    c00040ef <cmp_lfn+0x90>
c00040eb:	66 46                	inc    si
c00040ed:	75 8a                	jne    c0004079 <cmp_lfn+0x1a>
c00040ef:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040f3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040f8:	75 9c                	jne    c0004096 <cmp_lfn+0x37>
c00040fa:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040fd:	74 16                	je     c0004115 <cmp_lfn+0xb6>
c00040ff:	66 85 ed             	test   bp,bp
c0004102:	74 11                	je     c0004115 <cmp_lfn+0xb6>
c0004104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004108:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000410d:	0f 94 c0             	sete   al
c0004110:	0f b6 c0             	movzx  eax,al
c0004113:	eb 05                	jmp    c000411a <cmp_lfn+0xbb>
c0004115:	b8 01 00 00 00       	mov    eax,0x1
c000411a:	83 c4 1c             	add    esp,0x1c
c000411d:	5b                   	pop    ebx
c000411e:	5e                   	pop    esi
c000411f:	5f                   	pop    edi
c0004120:	5d                   	pop    ebp
c0004121:	c3                   	ret    

c0004122 <dir_find>:
c0004122:	55                   	push   ebp
c0004123:	31 d2                	xor    edx,edx
c0004125:	57                   	push   edi
c0004126:	56                   	push   esi
c0004127:	53                   	push   ebx
c0004128:	89 c3                	mov    ebx,eax
c000412a:	83 ec 1c             	sub    esp,0x1c
c000412d:	8b 30                	mov    esi,DWORD PTR [eax]
c000412f:	e8 89 f0 ff ff       	call   c00031bd <dir_sdi>
c0004134:	89 04 24             	mov    DWORD PTR [esp],eax
c0004137:	85 c0                	test   eax,eax
c0004139:	0f 85 9e 01 00 00    	jne    c00042dd <dir_find+0x1bb>
c000413f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004142:	0f 85 8d 00 00 00    	jne    c00041d5 <dir_find+0xb3>
c0004148:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000414b:	e8 30 fe ff ff       	call   c0003f80 <xname_sum>
c0004150:	89 c7                	mov    edi,eax
c0004152:	31 d2                	xor    edx,edx
c0004154:	89 d8                	mov    eax,ebx
c0004156:	e8 72 f8 ff ff       	call   c00039cd <dir_read>
c000415b:	85 c0                	test   eax,eax
c000415d:	0f 85 5e 01 00 00    	jne    c00042c1 <dir_find+0x19f>
c0004163:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004166:	8d 41 24             	lea    eax,[ecx+0x24]
c0004169:	e8 f3 da ff ff       	call   c0001c61 <ld_word>
c000416e:	66 39 f8             	cmp    ax,di
c0004171:	75 df                	jne    c0004152 <dir_find+0x30>
c0004173:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004176:	31 ed                	xor    ebp,ebp
c0004178:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000417c:	ba 40 00 00 00       	mov    edx,0x40
c0004181:	89 e9                	mov    ecx,ebp
c0004183:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004187:	0f 84 42 01 00 00    	je     c00042cf <dir_find+0x1ad>
c000418d:	f6 c2 1f             	test   dl,0x1f
c0004190:	75 03                	jne    c0004195 <dir_find+0x73>
c0004192:	83 c2 02             	add    edx,0x2
c0004195:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004199:	89 d0                	mov    eax,edx
c000419b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c000419e:	e8 be da ff ff       	call   c0001c61 <ld_word>
c00041a3:	83 ec 0c             	sub    esp,0xc
c00041a6:	0f b7 c0             	movzx  eax,ax
c00041a9:	50                   	push   eax
c00041aa:	e8 0e 44 00 00       	call   c00085bd <ff_wtoupper>
c00041af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041b3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041b6:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00041bd:	e8 fb 43 00 00       	call   c00085bd <ff_wtoupper>
c00041c2:	83 c4 10             	add    esp,0x10
c00041c5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041c9:	75 87                	jne    c0004152 <dir_find+0x30>
c00041cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041cf:	45                   	inc    ebp
c00041d0:	83 c2 02             	add    edx,0x2
c00041d3:	eb ac                	jmp    c0004181 <dir_find+0x5f>
c00041d5:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041dc:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041e6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041e9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041ec:	89 f0                	mov    eax,esi
c00041ee:	e8 4c e2 ff ff       	call   c000243f <move_window>
c00041f3:	85 c0                	test   eax,eax
c00041f5:	0f 85 c6 00 00 00    	jne    c00042c1 <dir_find+0x19f>
c00041fb:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041fe:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004201:	84 c9                	test   cl,cl
c0004203:	0f 84 bd 00 00 00    	je     c00042c6 <dir_find+0x1a4>
c0004209:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000420c:	88 d0                	mov    al,dl
c000420e:	83 e0 3f             	and    eax,0x3f
c0004211:	80 f9 e5             	cmp    cl,0xe5
c0004214:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004217:	0f 84 87 00 00 00    	je     c00042a4 <dir_find+0x182>
c000421d:	80 e2 08             	and    dl,0x8
c0004220:	74 06                	je     c0004228 <dir_find+0x106>
c0004222:	3c 0f                	cmp    al,0xf
c0004224:	75 7e                	jne    c00042a4 <dir_find+0x182>
c0004226:	eb 04                	jmp    c000422c <dir_find+0x10a>
c0004228:	3c 0f                	cmp    al,0xf
c000422a:	75 4c                	jne    c0004278 <dir_find+0x156>
c000422c:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004230:	75 7e                	jne    c00042b0 <dir_find+0x18e>
c0004232:	f6 c1 40             	test   cl,0x40
c0004235:	74 12                	je     c0004249 <dir_find+0x127>
c0004237:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000423a:	83 e1 bf             	and    ecx,0xffffffbf
c000423d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004241:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004244:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004247:	eb 06                	jmp    c000424f <dir_find+0x12d>
c0004249:	89 f8                	mov    eax,edi
c000424b:	38 c8                	cmp    al,cl
c000424d:	75 5c                	jne    c00042ab <dir_find+0x189>
c000424f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004253:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004258:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000425b:	75 53                	jne    c00042b0 <dir_find+0x18e>
c000425d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004261:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004264:	89 ea                	mov    edx,ebp
c0004266:	e8 f4 fd ff ff       	call   c000405f <cmp_lfn>
c000426b:	85 c0                	test   eax,eax
c000426d:	74 41                	je     c00042b0 <dir_find+0x18e>
c000426f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004273:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004276:	eb 38                	jmp    c00042b0 <dir_find+0x18e>
c0004278:	89 f8                	mov    eax,edi
c000427a:	84 c0                	test   al,al
c000427c:	75 0d                	jne    c000428b <dir_find+0x169>
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 98 de ff ff       	call   c000211d <sum_sfn>
c0004285:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004289:	74 52                	je     c00042dd <dir_find+0x1bb>
c000428b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000428f:	75 13                	jne    c00042a4 <dir_find+0x182>
c0004291:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004294:	b9 0b 00 00 00       	mov    ecx,0xb
c0004299:	89 e8                	mov    eax,ebp
c000429b:	e8 60 da ff ff       	call   c0001d00 <mem_cmp>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	74 39                	je     c00042dd <dir_find+0x1bb>
c00042a4:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042ab:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b0:	31 d2                	xor    edx,edx
c00042b2:	89 d8                	mov    eax,ebx
c00042b4:	e8 5c f4 ff ff       	call   c0003715 <dir_next>
c00042b9:	85 c0                	test   eax,eax
c00042bb:	0f 84 25 ff ff ff    	je     c00041e6 <dir_find+0xc4>
c00042c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00042c4:	eb 17                	jmp    c00042dd <dir_find+0x1bb>
c00042c6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042cd:	eb 0e                	jmp    c00042dd <dir_find+0x1bb>
c00042cf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042d2:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042d7:	0f 85 75 fe ff ff    	jne    c0004152 <dir_find+0x30>
c00042dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e0:	83 c4 1c             	add    esp,0x1c
c00042e3:	5b                   	pop    ebx
c00042e4:	5e                   	pop    esi
c00042e5:	5f                   	pop    edi
c00042e6:	5d                   	pop    ebp
c00042e7:	c3                   	ret    

c00042e8 <dir_register>:
c00042e8:	55                   	push   ebp
c00042e9:	57                   	push   edi
c00042ea:	56                   	push   esi
c00042eb:	be 06 00 00 00       	mov    esi,0x6
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 6c             	sub    esp,0x6c
c00042f4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042f8:	0f 85 62 02 00 00    	jne    c0004560 <dir_register+0x278>
c00042fe:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004300:	31 ff                	xor    edi,edi
c0004302:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004305:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000430a:	74 03                	je     c000430f <dir_register+0x27>
c000430c:	47                   	inc    edi
c000430d:	eb f6                	jmp    c0004305 <dir_register+0x1d>
c000430f:	89 c3                	mov    ebx,eax
c0004311:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004315:	0f 85 e1 00 00 00    	jne    c00043fc <dir_register+0x114>
c000431b:	83 c7 0e             	add    edi,0xe
c000431e:	b9 0f 00 00 00       	mov    ecx,0xf
c0004323:	89 f8                	mov    eax,edi
c0004325:	31 d2                	xor    edx,edx
c0004327:	f7 f1                	div    ecx
c0004329:	8d 50 02             	lea    edx,[eax+0x2]
c000432c:	89 c7                	mov    edi,eax
c000432e:	89 d8                	mov    eax,ebx
c0004330:	e8 12 f8 ff ff       	call   c0003b47 <dir_alloc>
c0004335:	89 c6                	mov    esi,eax
c0004337:	85 c0                	test   eax,eax
c0004339:	0f 85 21 02 00 00    	jne    c0004560 <dir_register+0x278>
c000433f:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004345:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004348:	c1 e7 05             	shl    edi,0x5
c000434b:	29 f8                	sub    eax,edi
c000434d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004350:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004353:	a8 04                	test   al,0x4
c0004355:	0f 84 91 00 00 00    	je     c00043ec <dir_register+0x104>
c000435b:	83 e0 fb             	and    eax,0xfffffffb
c000435e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004361:	89 d8                	mov    eax,ebx
c0004363:	e8 25 ec ff ff       	call   c0002f8d <fill_first_frag>
c0004368:	85 c0                	test   eax,eax
c000436a:	0f 85 ee 01 00 00    	jne    c000455e <dir_register+0x276>
c0004370:	83 c9 ff             	or     ecx,0xffffffff
c0004373:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004376:	89 d8                	mov    eax,ebx
c0004378:	e8 db eb ff ff       	call   c0002f58 <fill_last_frag>
c000437d:	85 c0                	test   eax,eax
c000437f:	0f 85 d9 01 00 00    	jne    c000455e <dir_register+0x276>
c0004385:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004389:	74 61                	je     c00043ec <dir_register+0x104>
c000438b:	89 da                	mov    edx,ebx
c000438d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004391:	e8 ea f5 ff ff       	call   c0003980 <load_obj_xdir>
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 c0 01 00 00    	jne    c000455e <dir_register+0x276>
c000439e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043a2:	31 c9                	xor    ecx,ecx
c00043a4:	c1 e2 09             	shl    edx,0x9
c00043a7:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043aa:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043ad:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b6:	83 c0 38             	add    eax,0x38
c00043b9:	e8 1c d9 ff ff       	call   c0001cda <st_qword>
c00043be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043c4:	83 c0 28             	add    eax,0x28
c00043c7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ca:	e8 0b d9 ff ff       	call   c0001cda <st_qword>
c00043cf:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043d2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043d5:	83 c8 01             	or     eax,0x1
c00043d8:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043df:	e8 db f7 ff ff       	call   c0003bbf <store_xdir>
c00043e4:	85 c0                	test   eax,eax
c00043e6:	0f 85 72 01 00 00    	jne    c000455e <dir_register+0x276>
c00043ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043f2:	e8 c1 fb ff ff       	call   c0003fb8 <create_xdir>
c00043f7:	e9 64 01 00 00       	jmp    c0004560 <dir_register+0x278>
c00043fc:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043ff:	b9 0c 00 00 00       	mov    ecx,0xc
c0004404:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004408:	89 c2                	mov    edx,eax
c000440a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000440e:	e8 cd d8 ff ff       	call   c0001ce0 <mem_cpy>
c0004413:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004418:	74 58                	je     c0004472 <dir_register+0x18a>
c000441a:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000441e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004426:	83 ec 0c             	sub    esp,0xc
c0004429:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000442c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004430:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004438:	e8 24 dc ff ff       	call   c0002061 <gen_numname>
c000443d:	89 d8                	mov    eax,ebx
c000443f:	e8 de fc ff ff       	call   c0004122 <dir_find>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	89 c6                	mov    esi,eax
c0004449:	85 c0                	test   eax,eax
c000444b:	75 15                	jne    c0004462 <dir_register+0x17a>
c000444d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004451:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004456:	75 ce                	jne    c0004426 <dir_register+0x13e>
c0004458:	be 07 00 00 00       	mov    esi,0x7
c000445d:	e9 fe 00 00 00       	jmp    c0004560 <dir_register+0x278>
c0004462:	83 f8 04             	cmp    eax,0x4
c0004465:	0f 85 f5 00 00 00    	jne    c0004560 <dir_register+0x278>
c000446b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000446f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004472:	b9 01 00 00 00       	mov    ecx,0x1
c0004477:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000447c:	74 0f                	je     c000448d <dir_register+0x1a5>
c000447e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004483:	8d 47 0c             	lea    eax,[edi+0xc]
c0004486:	31 d2                	xor    edx,edx
c0004488:	f7 f1                	div    ecx
c000448a:	8d 48 01             	lea    ecx,[eax+0x1]
c000448d:	89 ca                	mov    edx,ecx
c000448f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004493:	89 d8                	mov    eax,ebx
c0004495:	e8 ad f6 ff ff       	call   c0003b47 <dir_alloc>
c000449a:	89 c6                	mov    esi,eax
c000449c:	85 c0                	test   eax,eax
c000449e:	0f 85 bc 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044a8:	49                   	dec    ecx
c00044a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044ad:	74 6a                	je     c0004519 <dir_register+0x231>
c00044af:	89 c8                	mov    eax,ecx
c00044b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044b4:	c1 e0 05             	shl    eax,0x5
c00044b7:	29 c2                	sub    edx,eax
c00044b9:	89 d8                	mov    eax,ebx
c00044bb:	e8 fd ec ff ff       	call   c00031bd <dir_sdi>
c00044c0:	89 c6                	mov    esi,eax
c00044c2:	85 c0                	test   eax,eax
c00044c4:	0f 85 96 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044ce:	e8 4a dc ff ff       	call   c000211d <sum_sfn>
c00044d3:	0f b6 f8             	movzx  edi,al
c00044d6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044d9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044dc:	89 e8                	mov    eax,ebp
c00044de:	e8 5c df ff ff       	call   c000243f <move_window>
c00044e3:	89 c6                	mov    esi,eax
c00044e5:	85 c0                	test   eax,eax
c00044e7:	75 77                	jne    c0004560 <dir_register+0x278>
c00044e9:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044f7:	57                   	push   edi
c00044f8:	e8 e0 da ff ff       	call   c0001fdd <put_lfn>
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004503:	89 d8                	mov    eax,ebx
c0004505:	e8 0b f2 ff ff       	call   c0003715 <dir_next>
c000450a:	83 c4 10             	add    esp,0x10
c000450d:	89 c6                	mov    esi,eax
c000450f:	85 c0                	test   eax,eax
c0004511:	75 4d                	jne    c0004560 <dir_register+0x278>
c0004513:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004517:	75 bd                	jne    c00044d6 <dir_register+0x1ee>
c0004519:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000451c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000451f:	89 e8                	mov    eax,ebp
c0004521:	e8 19 df ff ff       	call   c000243f <move_window>
c0004526:	89 c6                	mov    esi,eax
c0004528:	85 c0                	test   eax,eax
c000452a:	75 34                	jne    c0004560 <dir_register+0x278>
c000452c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000452f:	b9 20 00 00 00       	mov    ecx,0x20
c0004534:	31 d2                	xor    edx,edx
c0004536:	e8 ba d7 ff ff       	call   c0001cf5 <mem_set>
c000453b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000453e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004542:	b9 0b 00 00 00       	mov    ecx,0xb
c0004547:	e8 94 d7 ff ff       	call   c0001ce0 <mem_cpy>
c000454c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000454f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004552:	83 e0 18             	and    eax,0x18
c0004555:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004558:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000455c:	eb 02                	jmp    c0004560 <dir_register+0x278>
c000455e:	89 c6                	mov    esi,eax
c0004560:	83 c4 6c             	add    esp,0x6c
c0004563:	89 f0                	mov    eax,esi
c0004565:	5b                   	pop    ebx
c0004566:	5e                   	pop    esi
c0004567:	5f                   	pop    edi
c0004568:	5d                   	pop    ebp
c0004569:	c3                   	ret    

c000456a <sync_fs>:
c000456a:	56                   	push   esi
c000456b:	53                   	push   ebx
c000456c:	53                   	push   ebx
c000456d:	89 c3                	mov    ebx,eax
c000456f:	e8 37 de ff ff       	call   c00023ab <sync_window>
c0004574:	85 c0                	test   eax,eax
c0004576:	0f 85 b1 00 00 00    	jne    c000462d <sync_fs+0xc3>
c000457c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000457f:	0f 85 8e 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c0004585:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004589:	0f 85 84 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c000458f:	b9 00 02 00 00       	mov    ecx,0x200
c0004594:	8d 73 54             	lea    esi,[ebx+0x54]
c0004597:	31 d2                	xor    edx,edx
c0004599:	89 f0                	mov    eax,esi
c000459b:	e8 55 d7 ff ff       	call   c0001cf5 <mem_set>
c00045a0:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045ab:	e8 23 d7 ff ff       	call   c0001cd3 <st_word>
c00045b0:	ba 52 52 61 41       	mov    edx,0x41615252
c00045b5:	89 f0                	mov    eax,esi
c00045b7:	e8 1b d7 ff ff       	call   c0001cd7 <st_dword>
c00045bc:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045c2:	ba 72 72 41 61       	mov    edx,0x61417272
c00045c7:	e8 0b d7 ff ff       	call   c0001cd7 <st_dword>
c00045cc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045cf:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045d5:	e8 fd d6 ff ff       	call   c0001cd7 <st_dword>
c00045da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045dd:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045e3:	e8 ef d6 ff ff       	call   c0001cd7 <st_dword>
c00045e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045eb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045ee:	83 c0 01             	add    eax,0x1
c00045f1:	83 d2 00             	adc    edx,0x0
c00045f4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045f7:	83 ec 0c             	sub    esp,0xc
c00045fa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045fd:	6a 01                	push   0x1
c00045ff:	52                   	push   edx
c0004600:	50                   	push   eax
c0004601:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004605:	56                   	push   esi
c0004606:	50                   	push   eax
c0004607:	e8 20 d6 ff ff       	call   c0001c2c <disk_write>
c000460c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004610:	83 c4 20             	add    esp,0x20
c0004613:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004617:	51                   	push   ecx
c0004618:	6a 00                	push   0x0
c000461a:	6a 00                	push   0x0
c000461c:	50                   	push   eax
c000461d:	e8 20 d6 ff ff       	call   c0001c42 <disk_ioctl>
c0004622:	83 c4 10             	add    esp,0x10
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 95 c0             	setne  al
c000462a:	0f b6 c0             	movzx  eax,al
c000462d:	5a                   	pop    edx
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <create_partition>:
c0004631:	55                   	push   ebp
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	57                   	push   edi
c0004636:	56                   	push   esi
c0004637:	53                   	push   ebx
c0004638:	83 ec 60             	sub    esp,0x60
c000463b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000463f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004643:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004647:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000464b:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000464f:	50                   	push   eax
c0004650:	6a 01                	push   0x1
c0004652:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004656:	e8 e7 d5 ff ff       	call   c0001c42 <disk_ioctl>
c000465b:	83 c4 10             	add    esp,0x10
c000465e:	85 c0                	test   eax,eax
c0004660:	74 0a                	je     c000466c <create_partition+0x3b>
c0004662:	b8 01 00 00 00       	mov    eax,0x1
c0004667:	e9 67 05 00 00       	jmp    c0004bd3 <create_partition+0x5a2>
c000466c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004670:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004674:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004678:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000467c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004681:	0f 86 ed 03 00 00    	jbe    c0004a74 <create_partition+0x443>
c0004687:	83 c0 df             	add    eax,0xffffffdf
c000468a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004692:	83 d2 ff             	adc    edx,0xffffffff
c0004695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000469d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046a5:	83 c0 bd             	add    eax,0xffffffbd
c00046a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046af:	83 d2 ff             	adc    edx,0xffffffff
c00046b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046ba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c2:	be 22 00 00 00       	mov    esi,0x22
c00046c7:	31 ff                	xor    edi,edi
c00046c9:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d1:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046d9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046e5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046eb:	75 0e                	jne    c00046fb <create_partition+0xca>
c00046ed:	b9 00 02 00 00       	mov    ecx,0x200
c00046f2:	31 d2                	xor    edx,edx
c00046f4:	89 d8                	mov    eax,ebx
c00046f6:	e8 fa d5 ff ff       	call   c0001cf5 <mem_set>
c00046fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046ff:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004707:	0b 04 24             	or     eax,DWORD PTR [esp]
c000470a:	0f 84 23 01 00 00    	je     c0004833 <create_partition+0x202>
c0004710:	89 f0                	mov    eax,esi
c0004712:	89 fa                	mov    edx,edi
c0004714:	05 ff 07 00 00       	add    eax,0x7ff
c0004719:	83 d2 00             	adc    edx,0x0
c000471c:	89 c1                	mov    ecx,eax
c000471e:	89 d7                	mov    edi,edx
c0004720:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004726:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000472a:	89 ce                	mov    esi,ecx
c000472c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004730:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004734:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004738:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000473b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000473f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004742:	b8 64 00 00 00       	mov    eax,0x64
c0004747:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000474a:	b8 00 00 00 00       	mov    eax,0x0
c000474f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004753:	72 41                	jb     c0004796 <create_partition+0x165>
c0004755:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000475d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004761:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004766:	01 c1                	add    ecx,eax
c0004768:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000476c:	f7 24 24             	mul    DWORD PTR [esp]
c000476f:	6a 00                	push   0x0
c0004771:	01 ca                	add    edx,ecx
c0004773:	6a 64                	push   0x64
c0004775:	52                   	push   edx
c0004776:	50                   	push   eax
c0004777:	e8 60 22 02 00       	call   c00269dc <__udivdi3>
c000477c:	83 c4 10             	add    esp,0x10
c000477f:	05 ff 07 00 00       	add    eax,0x7ff
c0004784:	83 d2 00             	adc    edx,0x0
c0004787:	89 c1                	mov    ecx,eax
c0004789:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000478d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004793:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004796:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004799:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000479d:	01 f0                	add    eax,esi
c000479f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a3:	11 fa                	adc    edx,edi
c00047a5:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047a9:	19 d1                	sbb    ecx,edx
c00047ab:	73 2e                	jae    c00047db <create_partition+0x1aa>
c00047ad:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b1:	89 f8                	mov    eax,edi
c00047b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047ba:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047be:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047c6:	73 6b                	jae    c0004833 <create_partition+0x202>
c00047c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d0:	29 f0                	sub    eax,esi
c00047d2:	19 fa                	sbb    edx,edi
c00047d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00047d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047df:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047e2:	74 4f                	je     c0004833 <create_partition+0x202>
c00047e4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047e7:	b9 10 00 00 00       	mov    ecx,0x10
c00047ec:	ba 70 94 02 c0       	mov    edx,0xc0029470
c00047f1:	e8 ea d4 ff ff       	call   c0001ce0 <mem_cpy>
c00047f6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047fa:	b9 10 00 00 00       	mov    ecx,0x10
c00047ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004803:	e8 2c db ff ff       	call   c0002334 <make_rand>
c0004808:	89 f2                	mov    edx,esi
c000480a:	89 f9                	mov    ecx,edi
c000480c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004810:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004814:	e8 c1 d4 ff ff       	call   c0001cda <st_qword>
c0004819:	03 34 24             	add    esi,DWORD PTR [esp]
c000481c:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004820:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004824:	89 f2                	mov    edx,esi
c0004826:	89 f9                	mov    ecx,edi
c0004828:	83 c2 ff             	add    edx,0xffffffff
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 a7 d4 ff ff       	call   c0001cda <st_qword>
c0004833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004837:	83 e8 80             	sub    eax,0xffffff80
c000483a:	89 c5                	mov    ebp,eax
c000483c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004840:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004846:	75 6b                	jne    c00048b3 <create_partition+0x282>
c0004848:	45                   	inc    ebp
c0004849:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000484d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004852:	e8 39 da ff ff       	call   c0002290 <crc32>
c0004857:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000485d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004861:	75 e5                	jne    c0004848 <create_partition+0x217>
c0004863:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004867:	31 d2                	xor    edx,edx
c0004869:	83 ec 0c             	sub    esp,0xc
c000486c:	c1 ed 09             	shr    ebp,0x9
c000486f:	6a 01                	push   0x1
c0004871:	8d 45 02             	lea    eax,[ebp+0x2]
c0004874:	52                   	push   edx
c0004875:	50                   	push   eax
c0004876:	53                   	push   ebx
c0004877:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000487b:	e8 ac d3 ff ff       	call   c0001c2c <disk_write>
c0004880:	83 c4 20             	add    esp,0x20
c0004883:	85 c0                	test   eax,eax
c0004885:	0f 85 d7 fd ff ff    	jne    c0004662 <create_partition+0x31>
c000488b:	83 ec 0c             	sub    esp,0xc
c000488e:	31 d2                	xor    edx,edx
c0004890:	6a 01                	push   0x1
c0004892:	89 e8                	mov    eax,ebp
c0004894:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004898:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000489c:	52                   	push   edx
c000489d:	50                   	push   eax
c000489e:	53                   	push   ebx
c000489f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a3:	e8 84 d3 ff ff       	call   c0001c2c <disk_write>
c00048a8:	83 c4 20             	add    esp,0x20
c00048ab:	85 c0                	test   eax,eax
c00048ad:	0f 85 af fd ff ff    	jne    c0004662 <create_partition+0x31>
c00048b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048bb:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c0:	74 0d                	je     c00048cf <create_partition+0x29e>
c00048c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ca:	e9 12 fe ff ff       	jmp    c00046e1 <create_partition+0xb0>
c00048cf:	31 d2                	xor    edx,edx
c00048d1:	b9 00 02 00 00       	mov    ecx,0x200
c00048d6:	89 d8                	mov    eax,ebx
c00048d8:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048db:	e8 15 d4 ff ff       	call   c0001cf5 <mem_set>
c00048e0:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048e3:	b9 10 00 00 00       	mov    ecx,0x10
c00048e8:	ba 60 93 02 c0       	mov    edx,0xc0029360
c00048ed:	89 d8                	mov    eax,ebx
c00048ef:	e8 ec d3 ff ff       	call   c0001ce0 <mem_cpy>
c00048f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048f8:	8d 43 58             	lea    eax,[ebx+0x58]
c00048fb:	f7 d2                	not    edx
c00048fd:	e8 d5 d3 ff ff       	call   c0001cd7 <st_dword>
c0004902:	8d 43 18             	lea    eax,[ebx+0x18]
c0004905:	31 c9                	xor    ecx,ecx
c0004907:	89 04 24             	mov    DWORD PTR [esp],eax
c000490a:	ba 01 00 00 00       	mov    edx,0x1
c000490f:	e8 c6 d3 ff ff       	call   c0001cda <st_qword>
c0004914:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004918:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000491c:	83 c2 ff             	add    edx,0xffffffff
c000491f:	89 e8                	mov    eax,ebp
c0004921:	83 d1 ff             	adc    ecx,0xffffffff
c0004924:	e8 b1 d3 ff ff       	call   c0001cda <st_qword>
c0004929:	31 c9                	xor    ecx,ecx
c000492b:	8d 43 28             	lea    eax,[ebx+0x28]
c000492e:	ba 22 00 00 00       	mov    edx,0x22
c0004933:	e8 a2 d3 ff ff       	call   c0001cda <st_qword>
c0004938:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000493c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004940:	83 c2 de             	add    edx,0xffffffde
c0004943:	8d 43 30             	lea    eax,[ebx+0x30]
c0004946:	83 d1 ff             	adc    ecx,0xffffffff
c0004949:	31 f6                	xor    esi,esi
c000494b:	e8 8a d3 ff ff       	call   c0001cda <st_qword>
c0004950:	8d 43 54             	lea    eax,[ebx+0x54]
c0004953:	ba 80 00 00 00       	mov    edx,0x80
c0004958:	e8 7a d3 ff ff       	call   c0001cd7 <st_dword>
c000495d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004960:	ba 80 00 00 00       	mov    edx,0x80
c0004965:	e8 6d d3 ff ff       	call   c0001cd7 <st_dword>
c000496a:	ba 02 00 00 00       	mov    edx,0x2
c000496f:	89 f8                	mov    eax,edi
c0004971:	e8 61 d3 ff ff       	call   c0001cd7 <st_dword>
c0004976:	8d 53 38             	lea    edx,[ebx+0x38]
c0004979:	b9 10 00 00 00       	mov    ecx,0x10
c000497e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004982:	e8 ad d9 ff ff       	call   c0002334 <make_rand>
c0004987:	83 c8 ff             	or     eax,0xffffffff
c000498a:	46                   	inc    esi
c000498b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004990:	e8 fb d8 ff ff       	call   c0002290 <crc32>
c0004995:	83 fe 5c             	cmp    esi,0x5c
c0004998:	75 f0                	jne    c000498a <create_partition+0x359>
c000499a:	f7 d0                	not    eax
c000499c:	8d 73 10             	lea    esi,[ebx+0x10]
c000499f:	89 c2                	mov    edx,eax
c00049a1:	89 f0                	mov    eax,esi
c00049a3:	e8 2f d3 ff ff       	call   c0001cd7 <st_dword>
c00049a8:	83 ec 0c             	sub    esp,0xc
c00049ab:	6a 01                	push   0x1
c00049ad:	6a 00                	push   0x0
c00049af:	6a 01                	push   0x1
c00049b1:	53                   	push   ebx
c00049b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049b6:	e8 71 d2 ff ff       	call   c0001c2c <disk_write>
c00049bb:	83 c4 20             	add    esp,0x20
c00049be:	85 c0                	test   eax,eax
c00049c0:	0f 85 9c fc ff ff    	jne    c0004662 <create_partition+0x31>
c00049c6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ca:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049ce:	83 c2 ff             	add    edx,0xffffffff
c00049d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049d4:	83 d1 ff             	adc    ecx,0xffffffff
c00049d7:	e8 fe d2 ff ff       	call   c0001cda <st_qword>
c00049dc:	ba 01 00 00 00       	mov    edx,0x1
c00049e1:	31 c9                	xor    ecx,ecx
c00049e3:	89 e8                	mov    eax,ebp
c00049e5:	e8 f0 d2 ff ff       	call   c0001cda <st_qword>
c00049ea:	89 f8                	mov    eax,edi
c00049ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049f4:	31 ff                	xor    edi,edi
c00049f6:	e8 df d2 ff ff       	call   c0001cda <st_qword>
c00049fb:	89 f0                	mov    eax,esi
c00049fd:	31 d2                	xor    edx,edx
c00049ff:	e8 d3 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a04:	83 c8 ff             	or     eax,0xffffffff
c0004a07:	47                   	inc    edi
c0004a08:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a0d:	e8 7e d8 ff ff       	call   c0002290 <crc32>
c0004a12:	83 ff 5c             	cmp    edi,0x5c
c0004a15:	75 f0                	jne    c0004a07 <create_partition+0x3d6>
c0004a17:	f7 d0                	not    eax
c0004a19:	89 c2                	mov    edx,eax
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	e8 b5 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a22:	83 ec 0c             	sub    esp,0xc
c0004a25:	6a 01                	push   0x1
c0004a27:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a2b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a2f:	83 c0 ff             	add    eax,0xffffffff
c0004a32:	83 d2 ff             	adc    edx,0xffffffff
c0004a35:	52                   	push   edx
c0004a36:	50                   	push   eax
c0004a37:	53                   	push   ebx
c0004a38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a3c:	e8 eb d1 ff ff       	call   c0001c2c <disk_write>
c0004a41:	83 c4 20             	add    esp,0x20
c0004a44:	85 c0                	test   eax,eax
c0004a46:	0f 85 16 fc ff ff    	jne    c0004662 <create_partition+0x31>
c0004a4c:	31 d2                	xor    edx,edx
c0004a4e:	89 d8                	mov    eax,ebx
c0004a50:	b9 00 02 00 00       	mov    ecx,0x200
c0004a55:	e8 9b d2 ff ff       	call   c0001cf5 <mem_set>
c0004a5a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a60:	b9 10 00 00 00       	mov    ecx,0x10
c0004a65:	ba 70 93 02 c0       	mov    edx,0xc0029370
c0004a6a:	e8 71 d2 ff ff       	call   c0001ce0 <mem_cpy>
c0004a6f:	e9 21 01 00 00       	jmp    c0004b95 <create_partition+0x564>
c0004a74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a78:	b9 05 00 00 00       	mov    ecx,0x5
c0004a7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a80:	bf 08 00 00 00       	mov    edi,0x8
c0004a85:	89 f8                	mov    eax,edi
c0004a87:	31 d2                	xor    edx,edx
c0004a89:	0f b6 f0             	movzx  esi,al
c0004a8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a8f:	f7 f6                	div    esi
c0004a91:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a96:	76 0a                	jbe    c0004aa2 <create_partition+0x471>
c0004a98:	d1 e7                	shl    edi,1
c0004a9a:	49                   	dec    ecx
c0004a9b:	75 e8                	jne    c0004a85 <create_partition+0x454>
c0004a9d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aa2:	b9 00 02 00 00       	mov    ecx,0x200
c0004aa7:	31 d2                	xor    edx,edx
c0004aa9:	89 d8                	mov    eax,ebx
c0004aab:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab1:	e8 3f d2 ff ff       	call   c0001cf5 <mem_set>
c0004ab6:	b9 64 00 00 00       	mov    ecx,0x64
c0004abb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004abe:	31 d2                	xor    edx,edx
c0004ac0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ac8:	f7 f1                	div    ecx
c0004aca:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004acf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ad3:	89 f8                	mov    eax,edi
c0004ad5:	0f b6 c0             	movzx  eax,al
c0004ad8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004adc:	e9 80 00 00 00       	jmp    c0004b61 <create_partition+0x530>
c0004ae1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ae4:	29 cf                	sub    edi,ecx
c0004ae6:	89 ca                	mov    edx,ecx
c0004ae8:	89 f0                	mov    eax,esi
c0004aea:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004aef:	e8 e3 d1 ff ff       	call   c0001cd7 <st_dword>
c0004af4:	8d 46 04             	lea    eax,[esi+0x4]
c0004af7:	89 fa                	mov    edx,edi
c0004af9:	83 c6 10             	add    esi,0x10
c0004afc:	e8 d6 d1 ff ff       	call   c0001cd7 <st_dword>
c0004b01:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b05:	31 d2                	xor    edx,edx
c0004b07:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b0a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b0e:	89 c8                	mov    eax,ecx
c0004b10:	01 f9                	add    ecx,edi
c0004b12:	f7 f5                	div    ebp
c0004b14:	89 d5                	mov    ebp,edx
c0004b16:	31 d2                	xor    edx,edx
c0004b18:	45                   	inc    ebp
c0004b19:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b1d:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b20:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b23:	89 c2                	mov    edx,eax
c0004b25:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b28:	c1 ea 02             	shr    edx,0x2
c0004b2b:	83 e2 c0             	and    edx,0xffffffc0
c0004b2e:	09 ea                	or     edx,ebp
c0004b30:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b35:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b38:	31 d2                	xor    edx,edx
c0004b3a:	f7 f5                	div    ebp
c0004b3c:	89 d7                	mov    edi,edx
c0004b3e:	31 d2                	xor    edx,edx
c0004b40:	47                   	inc    edi
c0004b41:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b45:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b48:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b4b:	89 c5                	mov    ebp,eax
c0004b4d:	c1 ed 02             	shr    ebp,0x2
c0004b50:	83 e5 c0             	and    ebp,0xffffffc0
c0004b53:	09 ef                	or     edi,ebp
c0004b55:	89 fa                	mov    edx,edi
c0004b57:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b5a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b5f:	74 34                	je     c0004b95 <create_partition+0x564>
c0004b61:	85 c9                	test   ecx,ecx
c0004b63:	74 30                	je     c0004b95 <create_partition+0x564>
c0004b65:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b68:	76 2b                	jbe    c0004b95 <create_partition+0x564>
c0004b6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b6e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b72:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b75:	83 ff 64             	cmp    edi,0x64
c0004b78:	76 4b                	jbe    c0004bc5 <create_partition+0x594>
c0004b7a:	89 f8                	mov    eax,edi
c0004b7c:	01 c8                	add    eax,ecx
c0004b7e:	0f 82 5d ff ff ff    	jb     c0004ae1 <create_partition+0x4b0>
c0004b84:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b87:	0f 87 54 ff ff ff    	ja     c0004ae1 <create_partition+0x4b0>
c0004b8d:	85 ff                	test   edi,edi
c0004b8f:	0f 85 51 ff ff ff    	jne    c0004ae6 <create_partition+0x4b5>
c0004b95:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b9b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba0:	e8 2e d1 ff ff       	call   c0001cd3 <st_word>
c0004ba5:	83 ec 0c             	sub    esp,0xc
c0004ba8:	6a 01                	push   0x1
c0004baa:	6a 00                	push   0x0
c0004bac:	6a 00                	push   0x0
c0004bae:	53                   	push   ebx
c0004baf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bb3:	e8 74 d0 ff ff       	call   c0001c2c <disk_write>
c0004bb8:	83 c4 20             	add    esp,0x20
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	0f 95 c0             	setne  al
c0004bc0:	0f b6 c0             	movzx  eax,al
c0004bc3:	eb 0e                	jmp    c0004bd3 <create_partition+0x5a2>
c0004bc5:	74 07                	je     c0004bce <create_partition+0x59d>
c0004bc7:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bcc:	eb ac                	jmp    c0004b7a <create_partition+0x549>
c0004bce:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd1:	eb a7                	jmp    c0004b7a <create_partition+0x549>
c0004bd3:	83 c4 5c             	add    esp,0x5c
c0004bd6:	5b                   	pop    ebx
c0004bd7:	5e                   	pop    esi
c0004bd8:	5f                   	pop    edi
c0004bd9:	5d                   	pop    ebp
c0004bda:	c3                   	ret    

c0004bdb <get_fileinfo>:
c0004bdb:	55                   	push   ebp
c0004bdc:	57                   	push   edi
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	83 ec 1c             	sub    esp,0x1c
c0004be2:	8b 30                	mov    esi,DWORD PTR [eax]
c0004be4:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004be8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bec:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bef:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bf2:	0f 84 dc 01 00 00    	je     c0004dd4 <get_fileinfo+0x1f9>
c0004bf8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bfb:	75 0f                	jne    c0004c0c <get_fileinfo+0x31>
c0004bfd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c00:	83 c4 1c             	add    esp,0x1c
c0004c03:	5b                   	pop    ebx
c0004c04:	5e                   	pop    esi
c0004c05:	5f                   	pop    edi
c0004c06:	5d                   	pop    ebp
c0004c07:	e9 58 d5 ff ff       	jmp    c0002164 <get_xfileinfo>
c0004c0c:	89 d3                	mov    ebx,edx
c0004c0e:	89 c6                	mov    esi,eax
c0004c10:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c14:	74 6a                	je     c0004c80 <get_fileinfo+0xa5>
c0004c16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c1e:	31 ed                	xor    ebp,ebp
c0004c20:	31 ff                	xor    edi,edi
c0004c22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c2d:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c31:	66 85 d2             	test   dx,dx
c0004c34:	74 3e                	je     c0004c74 <get_fileinfo+0x99>
c0004c36:	66 85 ed             	test   bp,bp
c0004c39:	75 0c                	jne    c0004c47 <get_fileinfo+0x6c>
c0004c3b:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c41:	66 3d ff 07          	cmp    ax,0x7ff
c0004c45:	76 22                	jbe    c0004c69 <get_fileinfo+0x8e>
c0004c47:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c4c:	89 e8                	mov    eax,ebp
c0004c4e:	29 f9                	sub    ecx,edi
c0004c50:	c1 e0 10             	shl    eax,0x10
c0004c53:	09 d0                	or     eax,edx
c0004c55:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c59:	e8 a3 d1 ff ff       	call   c0001e01 <put_utf>
c0004c5e:	84 c0                	test   al,al
c0004c60:	74 10                	je     c0004c72 <get_fileinfo+0x97>
c0004c62:	0f b6 c0             	movzx  eax,al
c0004c65:	31 d2                	xor    edx,edx
c0004c67:	01 c7                	add    edi,eax
c0004c69:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c6e:	89 d5                	mov    ebp,edx
c0004c70:	eb b0                	jmp    c0004c22 <get_fileinfo+0x47>
c0004c72:	31 ff                	xor    edi,edi
c0004c74:	66 85 ed             	test   bp,bp
c0004c77:	74 02                	je     c0004c7b <get_fileinfo+0xa0>
c0004c79:	31 ff                	xor    edi,edi
c0004c7b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c80:	31 ff                	xor    edi,edi
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	83 f9 0a             	cmp    ecx,0xa
c0004c87:	0f 87 ad 00 00 00    	ja     c0004d3a <get_fileinfo+0x15f>
c0004c8d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c90:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c93:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c97:	66 83 fa 20          	cmp    dx,0x20
c0004c9b:	0f 84 92 00 00 00    	je     c0004d33 <get_fileinfo+0x158>
c0004ca1:	66 83 fa 05          	cmp    dx,0x5
c0004ca5:	75 05                	jne    c0004cac <get_fileinfo+0xd1>
c0004ca7:	ba e5 00 00 00       	mov    edx,0xe5
c0004cac:	83 ff 0b             	cmp    edi,0xb
c0004caf:	77 0b                	ja     c0004cbc <get_fileinfo+0xe1>
c0004cb1:	83 fd 09             	cmp    ebp,0x9
c0004cb4:	75 06                	jne    c0004cbc <get_fileinfo+0xe1>
c0004cb6:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cbb:	47                   	inc    edi
c0004cbc:	0f b7 c2             	movzx  eax,dx
c0004cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cc3:	e8 6d d0 ff ff       	call   c0001d35 <dbc_1st>
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	74 2f                	je     c0004cfb <get_fileinfo+0x120>
c0004ccc:	83 fd 08             	cmp    ebp,0x8
c0004ccf:	74 2a                	je     c0004cfb <get_fileinfo+0x120>
c0004cd1:	83 fd 0b             	cmp    ebp,0xb
c0004cd4:	74 25                	je     c0004cfb <get_fileinfo+0x120>
c0004cd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd9:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cdd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce1:	e8 52 d0 ff ff       	call   c0001d38 <dbc_2nd>
c0004ce6:	85 c0                	test   eax,eax
c0004ce8:	74 11                	je     c0004cfb <get_fileinfo+0x120>
c0004cea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cf3:	c1 e2 08             	shl    edx,0x8
c0004cf6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cf9:	09 c2                	or     edx,eax
c0004cfb:	0f b7 d2             	movzx  edx,dx
c0004cfe:	50                   	push   eax
c0004cff:	50                   	push   eax
c0004d00:	68 b5 01 00 00       	push   0x1b5
c0004d05:	52                   	push   edx
c0004d06:	e8 46 38 00 00       	call   c0008551 <ff_oem2uni>
c0004d0b:	83 c4 10             	add    esp,0x10
c0004d0e:	66 85 c0             	test   ax,ax
c0004d11:	75 04                	jne    c0004d17 <get_fileinfo+0x13c>
c0004d13:	31 ff                	xor    edi,edi
c0004d15:	eb 23                	jmp    c0004d3a <get_fileinfo+0x15f>
c0004d17:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d1c:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d20:	29 f9                	sub    ecx,edi
c0004d22:	0f b7 c0             	movzx  eax,ax
c0004d25:	e8 d7 d0 ff ff       	call   c0001e01 <put_utf>
c0004d2a:	84 c0                	test   al,al
c0004d2c:	74 e5                	je     c0004d13 <get_fileinfo+0x138>
c0004d2e:	0f b6 c0             	movzx  eax,al
c0004d31:	01 c7                	add    edi,eax
c0004d33:	89 e9                	mov    ecx,ebp
c0004d35:	e9 4a ff ff ff       	jmp    c0004c84 <get_fileinfo+0xa9>
c0004d3a:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d3f:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d43:	75 54                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d45:	85 ff                	test   edi,edi
c0004d47:	75 0b                	jne    c0004d54 <get_fileinfo+0x179>
c0004d49:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d4d:	ba 01 00 00 00       	mov    edx,0x1
c0004d52:	eb 33                	jmp    c0004d87 <get_fileinfo+0x1ac>
c0004d54:	b1 08                	mov    cl,0x8
c0004d56:	31 d2                	xor    edx,edx
c0004d58:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d5e:	84 c0                	test   al,al
c0004d60:	74 25                	je     c0004d87 <get_fileinfo+0x1ac>
c0004d62:	66 83 f8 2e          	cmp    ax,0x2e
c0004d66:	74 16                	je     c0004d7e <get_fileinfo+0x1a3>
c0004d68:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d6b:	66 83 ff 19          	cmp    di,0x19
c0004d6f:	77 0f                	ja     c0004d80 <get_fileinfo+0x1a5>
c0004d71:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d74:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d77:	74 07                	je     c0004d80 <get_fileinfo+0x1a5>
c0004d79:	83 c0 20             	add    eax,0x20
c0004d7c:	eb 02                	jmp    c0004d80 <get_fileinfo+0x1a5>
c0004d7e:	b1 10                	mov    cl,0x10
c0004d80:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d84:	42                   	inc    edx
c0004d85:	eb d1                	jmp    c0004d58 <get_fileinfo+0x17d>
c0004d87:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d93:	75 04                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d95:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d99:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d9f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004da2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da5:	83 c0 1c             	add    eax,0x1c
c0004da8:	e8 c1 ce ff ff       	call   c0001c6e <ld_dword>
c0004dad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004db4:	89 03                	mov    DWORD PTR [ebx],eax
c0004db6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db9:	83 c0 16             	add    eax,0x16
c0004dbc:	e8 a0 ce ff ff       	call   c0001c61 <ld_word>
c0004dc1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dc5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc8:	83 c0 18             	add    eax,0x18
c0004dcb:	e8 91 ce ff ff       	call   c0001c61 <ld_word>
c0004dd0:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004dd4:	83 c4 1c             	add    esp,0x1c
c0004dd7:	5b                   	pop    ebx
c0004dd8:	5e                   	pop    esi
c0004dd9:	5f                   	pop    edi
c0004dda:	5d                   	pop    ebp
c0004ddb:	c3                   	ret    

c0004ddc <ld_clust.isra.0>:
c0004ddc:	56                   	push   esi
c0004ddd:	89 c6                	mov    esi,eax
c0004ddf:	53                   	push   ebx
c0004de0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004de3:	89 d3                	mov    ebx,edx
c0004de5:	e8 77 ce ff ff       	call   c0001c61 <ld_word>
c0004dea:	0f b7 c8             	movzx  ecx,ax
c0004ded:	89 f0                	mov    eax,esi
c0004def:	3c 03                	cmp    al,0x3
c0004df1:	75 0d                	jne    c0004e00 <ld_clust.isra.0+0x24>
c0004df3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004df6:	e8 66 ce ff ff       	call   c0001c61 <ld_word>
c0004dfb:	c1 e0 10             	shl    eax,0x10
c0004dfe:	09 c1                	or     ecx,eax
c0004e00:	89 c8                	mov    eax,ecx
c0004e02:	5b                   	pop    ebx
c0004e03:	5e                   	pop    esi
c0004e04:	c3                   	ret    

c0004e05 <st_clust.isra.1>:
c0004e05:	56                   	push   esi
c0004e06:	89 c6                	mov    esi,eax
c0004e08:	53                   	push   ebx
c0004e09:	89 d3                	mov    ebx,edx
c0004e0b:	0f b7 d1             	movzx  edx,cx
c0004e0e:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e11:	e8 bd ce ff ff       	call   c0001cd3 <st_word>
c0004e16:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e19:	75 0f                	jne    c0004e2a <st_clust.isra.1+0x25>
c0004e1b:	c1 e9 10             	shr    ecx,0x10
c0004e1e:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e21:	89 ca                	mov    edx,ecx
c0004e23:	5b                   	pop    ebx
c0004e24:	5e                   	pop    esi
c0004e25:	e9 a9 ce ff ff       	jmp    c0001cd3 <st_word>
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <init_alloc_info.isra.2>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c6                	mov    esi,eax
c0004e31:	89 d3                	mov    ebx,edx
c0004e33:	51                   	push   ecx
c0004e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e36:	83 c0 34             	add    eax,0x34
c0004e39:	e8 30 ce ff ff       	call   c0001c6e <ld_dword>
c0004e3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e41:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e43:	83 c0 38             	add    eax,0x38
c0004e46:	e8 3b ce ff ff       	call   c0001c86 <ld_qword>
c0004e4b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e4e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e51:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e53:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e56:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5d:	83 e0 02             	and    eax,0x2
c0004e60:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e63:	5b                   	pop    ebx
c0004e64:	5b                   	pop    ebx
c0004e65:	5e                   	pop    esi
c0004e66:	c3                   	ret    

c0004e67 <follow_path>:
c0004e67:	56                   	push   esi
c0004e68:	53                   	push   ebx
c0004e69:	89 c3                	mov    ebx,eax
c0004e6b:	83 ec 14             	sub    esp,0x14
c0004e6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e72:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e78:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e7a:	80 fa 5c             	cmp    dl,0x5c
c0004e7d:	75 07                	jne    c0004e86 <follow_path+0x1f>
c0004e7f:	40                   	inc    eax
c0004e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e84:	eb ee                	jmp    c0004e74 <follow_path+0xd>
c0004e86:	80 fa 2f             	cmp    dl,0x2f
c0004e89:	74 f4                	je     c0004e7f <follow_path+0x18>
c0004e8b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e92:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e99:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e9c:	77 52                	ja     c0004ef0 <follow_path+0x89>
c0004e9e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004ea2:	31 d2                	xor    edx,edx
c0004ea4:	89 d8                	mov    eax,ebx
c0004ea6:	e8 12 e3 ff ff       	call   c00031bd <dir_sdi>
c0004eab:	eb 7c                	jmp    c0004f29 <follow_path+0xc2>
c0004ead:	89 d8                	mov    eax,ebx
c0004eaf:	e8 6e f2 ff ff       	call   c0004122 <dir_find>
c0004eb4:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004eb7:	85 c0                	test   eax,eax
c0004eb9:	75 46                	jne    c0004f01 <follow_path+0x9a>
c0004ebb:	80 e2 04             	and    dl,0x4
c0004ebe:	75 69                	jne    c0004f29 <follow_path+0xc2>
c0004ec0:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ec4:	74 5e                	je     c0004f24 <follow_path+0xbd>
c0004ec6:	8a 06                	mov    al,BYTE PTR [esi]
c0004ec8:	3c 04                	cmp    al,0x4
c0004eca:	75 41                	jne    c0004f0d <follow_path+0xa6>
c0004ecc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ecf:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ed3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ed6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ed9:	30 c0                	xor    al,al
c0004edb:	09 d0                	or     eax,edx
c0004edd:	89 da                	mov    edx,ebx
c0004edf:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ee2:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ee5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ee8:	8d 46 10             	lea    eax,[esi+0x10]
c0004eeb:	e8 3d ff ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0004ef0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ef4:	89 d8                	mov    eax,ebx
c0004ef6:	e8 a9 ed ff ff       	call   c0003ca4 <create_name>
c0004efb:	85 c0                	test   eax,eax
c0004efd:	74 ae                	je     c0004ead <follow_path+0x46>
c0004eff:	eb 28                	jmp    c0004f29 <follow_path+0xc2>
c0004f01:	83 f8 04             	cmp    eax,0x4
c0004f04:	75 23                	jne    c0004f29 <follow_path+0xc2>
c0004f06:	80 e2 04             	and    dl,0x4
c0004f09:	74 19                	je     c0004f24 <follow_path+0xbd>
c0004f0b:	eb 1c                	jmp    c0004f29 <follow_path+0xc2>
c0004f0d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f10:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f16:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f1a:	e8 bd fe ff ff       	call   c0004ddc <ld_clust.isra.0>
c0004f1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f22:	eb cc                	jmp    c0004ef0 <follow_path+0x89>
c0004f24:	b8 05 00 00 00       	mov    eax,0x5
c0004f29:	83 c4 14             	add    esp,0x14
c0004f2c:	5b                   	pop    ebx
c0004f2d:	5e                   	pop    esi
c0004f2e:	c3                   	ret    

c0004f2f <f_mount>:
c0004f2f:	53                   	push   ebx
c0004f30:	83 ec 18             	sub    esp,0x18
c0004f33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f37:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f43:	e8 fb d2 ff ff       	call   c0002243 <get_ldnumber>
c0004f48:	89 c2                	mov    edx,eax
c0004f4a:	b8 0b 00 00 00       	mov    eax,0xb
c0004f4f:	85 d2                	test   edx,edx
c0004f51:	78 39                	js     c0004f8c <f_mount+0x5d>
c0004f53:	8b 04 95 60 e5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1aa0]
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 03                	je     c0004f61 <f_mount+0x32>
c0004f5e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f65:	85 c0                	test   eax,eax
c0004f67:	74 03                	je     c0004f6c <f_mount+0x3d>
c0004f69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	89 04 95 60 e5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1aa0],eax
c0004f77:	31 c0                	xor    eax,eax
c0004f79:	84 db                	test   bl,bl
c0004f7b:	74 0f                	je     c0004f8c <f_mount+0x5d>
c0004f7d:	31 c9                	xor    ecx,ecx
c0004f7f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f87:	e8 65 d7 ff ff       	call   c00026f1 <mount_volume>
c0004f8c:	83 c4 18             	add    esp,0x18
c0004f8f:	5b                   	pop    ebx
c0004f90:	c3                   	ret    

c0004f91 <f_open>:
c0004f91:	55                   	push   ebp
c0004f92:	bd 09 00 00 00       	mov    ebp,0x9
c0004f97:	57                   	push   edi
c0004f98:	56                   	push   esi
c0004f99:	53                   	push   ebx
c0004f9a:	83 ec 7c             	sub    esp,0x7c
c0004f9d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fa4:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fab:	85 db                	test   ebx,ebx
c0004fad:	0f 84 10 04 00 00    	je     c00053c3 <f_open+0x432>
c0004fb3:	89 fe                	mov    esi,edi
c0004fb5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fb9:	83 e6 3f             	and    esi,0x3f
c0004fbc:	89 f0                	mov    eax,esi
c0004fbe:	0f b6 c8             	movzx  ecx,al
c0004fc1:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fc8:	e8 24 d7 ff ff       	call   c00026f1 <mount_volume>
c0004fcd:	89 c5                	mov    ebp,eax
c0004fcf:	85 c0                	test   eax,eax
c0004fd1:	0f 85 e6 03 00 00    	jne    c00053bd <f_open+0x42c>
c0004fd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fdb:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fe4:	83 ec 0c             	sub    esp,0xc
c0004fe7:	68 60 04 00 00       	push   0x460
c0004fec:	e8 a3 34 00 00       	call   c0008494 <ff_memalloc>
c0004ff1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ff5:	83 c4 10             	add    esp,0x10
c0004ff8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ffd:	0f 84 c0 03 00 00    	je     c00053c3 <f_open+0x432>
c0005003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005007:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000500b:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005011:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005014:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005017:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000501e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005022:	e8 40 fe ff ff       	call   c0004e67 <follow_path>
c0005027:	89 c5                	mov    ebp,eax
c0005029:	85 c0                	test   eax,eax
c000502b:	75 0c                	jne    c0005039 <f_open+0xa8>
c000502d:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005032:	79 05                	jns    c0005039 <f_open+0xa8>
c0005034:	bd 06 00 00 00       	mov    ebp,0x6
c0005039:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000503f:	0f 84 84 01 00 00    	je     c00051c9 <f_open+0x238>
c0005045:	85 ed                	test   ebp,ebp
c0005047:	74 20                	je     c0005069 <f_open+0xd8>
c0005049:	83 fd 04             	cmp    ebp,0x4
c000504c:	0f 85 58 03 00 00    	jne    c00053aa <f_open+0x419>
c0005052:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005056:	83 ce 08             	or     esi,0x8
c0005059:	e8 8a f2 ff ff       	call   c00042e8 <dir_register>
c000505e:	89 c5                	mov    ebp,eax
c0005060:	85 c0                	test   eax,eax
c0005062:	74 2f                	je     c0005093 <f_open+0x102>
c0005064:	e9 41 03 00 00       	jmp    c00053aa <f_open+0x419>
c0005069:	bd 07 00 00 00       	mov    ebp,0x7
c000506e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005073:	0f 85 31 03 00 00    	jne    c00053aa <f_open+0x419>
c0005079:	bd 08 00 00 00       	mov    ebp,0x8
c000507e:	f7 c7 04 00 00 00    	test   edi,0x4
c0005084:	0f 85 20 03 00 00    	jne    c00053aa <f_open+0x419>
c000508a:	83 e7 08             	and    edi,0x8
c000508d:	0f 84 65 01 00 00    	je     c00051f8 <f_open+0x267>
c0005093:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005097:	8a 02                	mov    al,BYTE PTR [edx]
c0005099:	3c 04                	cmp    al,0x4
c000509b:	0f 85 97 00 00 00    	jne    c0005138 <f_open+0x1a7>
c00050a1:	8d 42 10             	lea    eax,[edx+0x10]
c00050a4:	89 13                	mov    DWORD PTR [ebx],edx
c00050a6:	89 da                	mov    edx,ebx
c00050a8:	e8 80 fd ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c00050ad:	31 d2                	xor    edx,edx
c00050af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b3:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050bb:	83 c0 02             	add    eax,0x2
c00050be:	e8 32 cc ff ff       	call   c0001cf5 <mem_set>
c00050c3:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050c8:	31 d2                	xor    edx,edx
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d1:	83 c0 26             	add    eax,0x26
c00050d4:	e8 1c cc ff ff       	call   c0001cf5 <mem_set>
c00050d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e0:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050e4:	ba 00 00 21 50       	mov    edx,0x50210000
c00050e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050ec:	83 c0 08             	add    eax,0x8
c00050ef:	e8 e3 cb ff ff       	call   c0001cd7 <st_dword>
c00050f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050fb:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005103:	e8 b7 ea ff ff       	call   c0003bbf <store_xdir>
c0005108:	89 c5                	mov    ebp,eax
c000510a:	85 c0                	test   eax,eax
c000510c:	0f 85 98 02 00 00    	jne    c00053aa <f_open+0x419>
c0005112:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005115:	85 d2                	test   edx,edx
c0005117:	0f 84 db 00 00 00    	je     c00051f8 <f_open+0x267>
c000511d:	31 c9                	xor    ecx,ecx
c000511f:	89 d8                	mov    eax,ebx
c0005121:	e8 8e e3 ff ff       	call   c00034b4 <remove_chain>
c0005126:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000512a:	89 c5                	mov    ebp,eax
c000512c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000512f:	48                   	dec    eax
c0005130:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005133:	e9 b8 00 00 00       	jmp    c00051f0 <f_open+0x25f>
c0005138:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000513c:	89 ea                	mov    edx,ebp
c000513e:	e8 99 fc ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005143:	ba 00 00 21 50       	mov    edx,0x50210000
c0005148:	89 c7                	mov    edi,eax
c000514a:	8d 45 0e             	lea    eax,[ebp+0xe]
c000514d:	e8 85 cb ff ff       	call   c0001cd7 <st_dword>
c0005152:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005156:	31 c9                	xor    ecx,ecx
c0005158:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000515c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005160:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005164:	e8 9c fc ff ff       	call   c0004e05 <st_clust.isra.1>
c0005169:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000516d:	31 d2                	xor    edx,edx
c000516f:	83 c0 1c             	add    eax,0x1c
c0005172:	e8 60 cb ff ff       	call   c0001cd7 <st_dword>
c0005177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517b:	85 ff                	test   edi,edi
c000517d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005181:	74 75                	je     c00051f8 <f_open+0x267>
c0005183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005187:	31 c9                	xor    ecx,ecx
c0005189:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000518c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000518f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005193:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005197:	89 fa                	mov    edx,edi
c0005199:	8d 44 24 24          	lea    eax,[esp+0x24]
c000519d:	e8 12 e3 ff ff       	call   c00034b4 <remove_chain>
c00051a2:	89 c5                	mov    ebp,eax
c00051a4:	85 c0                	test   eax,eax
c00051a6:	0f 85 fe 01 00 00    	jne    c00053aa <f_open+0x419>
c00051ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051b8:	4f                   	dec    edi
c00051b9:	e8 81 d2 ff ff       	call   c000243f <move_window>
c00051be:	89 c5                	mov    ebp,eax
c00051c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051c7:	eb 27                	jmp    c00051f0 <f_open+0x25f>
c00051c9:	85 ed                	test   ebp,ebp
c00051cb:	0f 85 d9 01 00 00    	jne    c00053aa <f_open+0x419>
c00051d1:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051d5:	bd 04 00 00 00       	mov    ebp,0x4
c00051da:	a8 10                	test   al,0x10
c00051dc:	0f 85 c8 01 00 00    	jne    c00053aa <f_open+0x419>
c00051e2:	83 e7 02             	and    edi,0x2
c00051e5:	74 11                	je     c00051f8 <f_open+0x267>
c00051e7:	bd 07 00 00 00       	mov    ebp,0x7
c00051ec:	a8 01                	test   al,0x1
c00051ee:	eb 02                	jmp    c00051f2 <f_open+0x261>
c00051f0:	85 ed                	test   ebp,ebp
c00051f2:	0f 85 b2 01 00 00    	jne    c00053aa <f_open+0x419>
c00051f8:	f7 c6 08 00 00 00    	test   esi,0x8
c00051fe:	74 03                	je     c0005203 <f_open+0x272>
c0005200:	83 ce 40             	or     esi,0x40
c0005203:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005207:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000520a:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c000520d:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005210:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005213:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005217:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000521a:	8a 02                	mov    al,BYTE PTR [edx]
c000521c:	3c 04                	cmp    al,0x4
c000521e:	75 2a                	jne    c000524a <f_open+0x2b9>
c0005220:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005224:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005229:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000522c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005230:	30 c0                	xor    al,al
c0005232:	09 c8                	or     eax,ecx
c0005234:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005237:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000523b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000523e:	8d 42 10             	lea    eax,[edx+0x10]
c0005241:	89 da                	mov    edx,ebx
c0005243:	e8 e5 fb ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0005248:	eb 1c                	jmp    c0005266 <f_open+0x2d5>
c000524a:	89 fa                	mov    edx,edi
c000524c:	e8 8b fb ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005251:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005254:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005257:	e8 12 ca ff ff       	call   c0001c6e <ld_dword>
c000525c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005263:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000526a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005271:	89 03                	mov    DWORD PTR [ebx],eax
c0005273:	31 d2                	xor    edx,edx
c0005275:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005279:	b9 00 02 00 00       	mov    ecx,0x200
c000527e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005282:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005286:	89 f0                	mov    eax,esi
c0005288:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000528f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005292:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005299:	8d 43 50             	lea    eax,[ebx+0x50]
c000529c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052a3:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052ae:	e8 42 ca ff ff       	call   c0001cf5 <mem_set>
c00052b3:	83 e6 20             	and    esi,0x20
c00052b6:	75 07                	jne    c00052bf <f_open+0x32e>
c00052b8:	31 ed                	xor    ebp,ebp
c00052ba:	e9 eb 00 00 00       	jmp    c00053aa <f_open+0x419>
c00052bf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052c2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052d5:	74 e1                	je     c00052b8 <f_open+0x327>
c00052d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052df:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052e2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052e9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052ec:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f0:	31 ff                	xor    edi,edi
c00052f2:	c1 e5 09             	shl    ebp,0x9
c00052f5:	89 ee                	mov    esi,ebp
c00052f7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052fb:	89 f8                	mov    eax,edi
c00052fd:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005301:	73 22                	jae    c0005325 <f_open+0x394>
c0005303:	89 d8                	mov    eax,ebx
c0005305:	e8 bd dc ff ff       	call   c0002fc7 <get_fat>
c000530a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000530e:	89 c2                	mov    edx,eax
c0005310:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005314:	83 f8 01             	cmp    eax,0x1
c0005317:	76 10                	jbe    c0005329 <f_open+0x398>
c0005319:	83 f8 ff             	cmp    eax,0xffffffff
c000531c:	75 d9                	jne    c00052f7 <f_open+0x366>
c000531e:	bd 01 00 00 00       	mov    ebp,0x1
c0005323:	eb 09                	jmp    c000532e <f_open+0x39d>
c0005325:	31 ed                	xor    ebp,ebp
c0005327:	eb 05                	jmp    c000532e <f_open+0x39d>
c0005329:	bd 02 00 00 00       	mov    ebp,0x2
c000532e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005331:	85 ed                	test   ebp,ebp
c0005333:	75 75                	jne    c00053aa <f_open+0x419>
c0005335:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005339:	25 ff 01 00 00       	and    eax,0x1ff
c000533e:	0f 84 74 ff ff ff    	je     c00052b8 <f_open+0x327>
c0005344:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005348:	bd 02 00 00 00       	mov    ebp,0x2
c000534d:	89 c8                	mov    eax,ecx
c000534f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005353:	e8 a2 cb ff ff       	call   c0001efa <clst2sect>
c0005358:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535c:	89 d7                	mov    edi,edx
c000535e:	09 c7                	or     edi,eax
c0005360:	74 48                	je     c00053aa <f_open+0x419>
c0005362:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005366:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000536a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005372:	0f ac fe 09          	shrd   esi,edi,0x9
c0005376:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000537a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000537e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005381:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005385:	83 ec 0c             	sub    esp,0xc
c0005388:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000538b:	6a 01                	push   0x1
c000538d:	52                   	push   edx
c000538e:	50                   	push   eax
c000538f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005393:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005397:	50                   	push   eax
c0005398:	e8 79 c8 ff ff       	call   c0001c16 <disk_read>
c000539d:	83 c4 20             	add    esp,0x20
c00053a0:	85 c0                	test   eax,eax
c00053a2:	0f 95 c0             	setne  al
c00053a5:	0f b6 c0             	movzx  eax,al
c00053a8:	89 c5                	mov    ebp,eax
c00053aa:	83 ec 0c             	sub    esp,0xc
c00053ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b1:	e8 f4 30 00 00       	call   c00084aa <ff_memfree>
c00053b6:	83 c4 10             	add    esp,0x10
c00053b9:	85 ed                	test   ebp,ebp
c00053bb:	74 06                	je     c00053c3 <f_open+0x432>
c00053bd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053c3:	83 c4 7c             	add    esp,0x7c
c00053c6:	89 e8                	mov    eax,ebp
c00053c8:	5b                   	pop    ebx
c00053c9:	5e                   	pop    esi
c00053ca:	5f                   	pop    edi
c00053cb:	5d                   	pop    ebp
c00053cc:	c3                   	ret    

c00053cd <f_read>:
c00053cd:	55                   	push   ebp
c00053ce:	57                   	push   edi
c00053cf:	56                   	push   esi
c00053d0:	53                   	push   ebx
c00053d1:	83 ec 2c             	sub    esp,0x2c
c00053d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053d8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053e6:	89 d8                	mov    eax,ebx
c00053e8:	e8 77 cf ff ff       	call   c0002364 <validate>
c00053ed:	89 c5                	mov    ebp,eax
c00053ef:	85 c0                	test   eax,eax
c00053f1:	0f 85 4c 02 00 00    	jne    c0005643 <f_read+0x276>
c00053f7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053fb:	85 ed                	test   ebp,ebp
c00053fd:	0f 85 40 02 00 00    	jne    c0005643 <f_read+0x276>
c0005403:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005407:	0f 84 31 02 00 00    	je     c000563e <f_read+0x271>
c000540d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005410:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005413:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005416:	bf 00 00 00 00       	mov    edi,0x0
c000541b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000541e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005422:	89 d1                	mov    ecx,edx
c0005424:	19 f9                	sbb    ecx,edi
c0005426:	0f 83 cf 00 00 00    	jae    c00054fb <f_read+0x12e>
c000542c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005430:	e9 c6 00 00 00       	jmp    c00054fb <f_read+0x12e>
c0005435:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005438:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000543b:	89 d0                	mov    eax,edx
c000543d:	25 ff 01 00 00       	and    eax,0x1ff
c0005442:	0f 85 c9 01 00 00    	jne    c0005611 <f_read+0x244>
c0005448:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000544c:	89 d6                	mov    esi,edx
c000544e:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005452:	89 cf                	mov    edi,ecx
c0005454:	48                   	dec    eax
c0005455:	0f ac fe 09          	shrd   esi,edi,0x9
c0005459:	21 f0                	and    eax,esi
c000545b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000545f:	0f 84 a6 00 00 00    	je     c000550b <f_read+0x13e>
c0005465:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005469:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000546c:	89 c8                	mov    eax,ecx
c000546e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005471:	e8 84 ca ff ff       	call   c0001efa <clst2sect>
c0005476:	89 d7                	mov    edi,edx
c0005478:	09 c7                	or     edi,eax
c000547a:	0f 84 b4 00 00 00    	je     c0005534 <f_read+0x167>
c0005480:	31 ff                	xor    edi,edi
c0005482:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005486:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005489:	01 c6                	add    esi,eax
c000548b:	11 d7                	adc    edi,edx
c000548d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005495:	0f 86 fd 00 00 00    	jbe    c0005598 <f_read+0x1cb>
c000549b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000549f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054a3:	c1 e8 09             	shr    eax,0x9
c00054a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00054a9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054ad:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b0:	39 c2                	cmp    edx,eax
c00054b2:	76 07                	jbe    c00054bb <f_read+0xee>
c00054b4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054bb:	83 ec 0c             	sub    esp,0xc
c00054be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054c2:	57                   	push   edi
c00054c3:	56                   	push   esi
c00054c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 44 c7 ff ff       	call   c0001c16 <disk_read>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	75 6e                	jne    c0005547 <f_read+0x17a>
c00054d9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054dd:	78 7e                	js     c000555d <f_read+0x190>
c00054df:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054e2:	c1 e6 09             	shl    esi,0x9
c00054e5:	31 ff                	xor    edi,edi
c00054e7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054ef:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054f3:	01 30                	add    DWORD PTR [eax],esi
c00054f5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054f8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005500:	0f 85 2f ff ff ff    	jne    c0005435 <f_read+0x68>
c0005506:	e9 38 01 00 00       	jmp    c0005643 <f_read+0x276>
c000550b:	89 c8                	mov    eax,ecx
c000550d:	09 d0                	or     eax,edx
c000550f:	75 05                	jne    c0005516 <f_read+0x149>
c0005511:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005514:	eb 19                	jmp    c000552f <f_read+0x162>
c0005516:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000551a:	74 09                	je     c0005525 <f_read+0x158>
c000551c:	89 d8                	mov    eax,ebx
c000551e:	e8 f8 c9 ff ff       	call   c0001f1b <clmt_clust>
c0005523:	eb 0a                	jmp    c000552f <f_read+0x162>
c0005525:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005528:	89 d8                	mov    eax,ebx
c000552a:	e8 98 da ff ff       	call   c0002fc7 <get_fat>
c000552f:	83 f8 01             	cmp    eax,0x1
c0005532:	77 0e                	ja     c0005542 <f_read+0x175>
c0005534:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005538:	bd 02 00 00 00       	mov    ebp,0x2
c000553d:	e9 01 01 00 00       	jmp    c0005643 <f_read+0x276>
c0005542:	83 f8 ff             	cmp    eax,0xffffffff
c0005545:	75 0e                	jne    c0005555 <f_read+0x188>
c0005547:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000554b:	bd 01 00 00 00       	mov    ebp,0x1
c0005550:	e9 ee 00 00 00       	jmp    c0005643 <f_read+0x276>
c0005555:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005558:	e9 08 ff ff ff       	jmp    c0005465 <f_read+0x98>
c000555d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005560:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005563:	29 f0                	sub    eax,esi
c0005565:	19 fa                	sbb    edx,edi
c0005567:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000556a:	89 d7                	mov    edi,edx
c000556c:	ba 00 00 00 00       	mov    edx,0x0
c0005571:	89 f9                	mov    ecx,edi
c0005573:	19 d1                	sbb    ecx,edx
c0005575:	0f 83 64 ff ff ff    	jae    c00054df <f_read+0x112>
c000557b:	89 c7                	mov    edi,eax
c000557d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005580:	c1 e7 09             	shl    edi,0x9
c0005583:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005587:	b9 00 02 00 00       	mov    ecx,0x200
c000558c:	01 f8                	add    eax,edi
c000558e:	e8 4d c7 ff ff       	call   c0001ce0 <mem_cpy>
c0005593:	e9 47 ff ff ff       	jmp    c00054df <f_read+0x112>
c0005598:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000559b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000559e:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055a5:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055a9:	75 05                	jne    c00055b0 <f_read+0x1e3>
c00055ab:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055ae:	74 5b                	je     c000560b <f_read+0x23e>
c00055b0:	8d 43 50             	lea    eax,[ebx+0x50]
c00055b3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055bb:	79 2a                	jns    c00055e7 <f_read+0x21a>
c00055bd:	83 ec 0c             	sub    esp,0xc
c00055c0:	6a 01                	push   0x1
c00055c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055d2:	50                   	push   eax
c00055d3:	e8 54 c6 ff ff       	call   c0001c2c <disk_write>
c00055d8:	83 c4 20             	add    esp,0x20
c00055db:	85 c0                	test   eax,eax
c00055dd:	0f 85 64 ff ff ff    	jne    c0005547 <f_read+0x17a>
c00055e3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055e7:	83 ec 0c             	sub    esp,0xc
c00055ea:	6a 01                	push   0x1
c00055ec:	57                   	push   edi
c00055ed:	56                   	push   esi
c00055ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055fa:	50                   	push   eax
c00055fb:	e8 16 c6 ff ff       	call   c0001c16 <disk_read>
c0005600:	83 c4 20             	add    esp,0x20
c0005603:	85 c0                	test   eax,eax
c0005605:	0f 85 3c ff ff ff    	jne    c0005547 <f_read+0x17a>
c000560b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000560e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005611:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005614:	ba 00 02 00 00       	mov    edx,0x200
c0005619:	25 ff 01 00 00       	and    eax,0x1ff
c000561e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005622:	29 c2                	sub    edx,eax
c0005624:	39 d6                	cmp    esi,edx
c0005626:	76 02                	jbe    c000562a <f_read+0x25d>
c0005628:	89 d6                	mov    esi,edx
c000562a:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000562e:	89 f1                	mov    ecx,esi
c0005630:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005634:	e8 a7 c6 ff ff       	call   c0001ce0 <mem_cpy>
c0005639:	e9 a7 fe ff ff       	jmp    c00054e5 <f_read+0x118>
c000563e:	bd 07 00 00 00       	mov    ebp,0x7
c0005643:	83 c4 2c             	add    esp,0x2c
c0005646:	89 e8                	mov    eax,ebp
c0005648:	5b                   	pop    ebx
c0005649:	5e                   	pop    esi
c000564a:	5f                   	pop    edi
c000564b:	5d                   	pop    ebp
c000564c:	c3                   	ret    

c000564d <f_write>:
c000564d:	55                   	push   ebp
c000564e:	57                   	push   edi
c000564f:	56                   	push   esi
c0005650:	53                   	push   ebx
c0005651:	83 ec 2c             	sub    esp,0x2c
c0005654:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005658:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000565c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005662:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005666:	89 d8                	mov    eax,ebx
c0005668:	e8 f7 cc ff ff       	call   c0002364 <validate>
c000566d:	89 c5                	mov    ebp,eax
c000566f:	85 c0                	test   eax,eax
c0005671:	0f 85 86 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005677:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000567b:	85 ed                	test   ebp,ebp
c000567d:	0f 85 7a 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005683:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005687:	0f 84 6b 02 00 00    	je     c00058f8 <f_write+0x2ab>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005694:	0f 84 43 01 00 00    	je     c00057dd <f_write+0x190>
c000569a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000569d:	89 c1                	mov    ecx,eax
c000569f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056a3:	0f 83 34 01 00 00    	jae    c00057dd <f_write+0x190>
c00056a9:	f7 d0                	not    eax
c00056ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056af:	e9 29 01 00 00       	jmp    c00057dd <f_write+0x190>
c00056b4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056b7:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056ba:	89 d0                	mov    eax,edx
c00056bc:	25 ff 01 00 00       	and    eax,0x1ff
c00056c1:	0f 85 00 02 00 00    	jne    c00058c7 <f_write+0x27a>
c00056c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056cb:	89 d6                	mov    esi,edx
c00056cd:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d1:	89 cf                	mov    edi,ecx
c00056d3:	48                   	dec    eax
c00056d4:	0f ac fe 09          	shrd   esi,edi,0x9
c00056d8:	21 f0                	and    eax,esi
c00056da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056de:	0f 84 06 01 00 00    	je     c00057ea <f_write+0x19d>
c00056e4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056e8:	0f 88 6e 01 00 00    	js     c000585c <f_write+0x20f>
c00056ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056f2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056f5:	89 c8                	mov    eax,ecx
c00056f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056fb:	e8 fa c7 ff ff       	call   c0001efa <clst2sect>
c0005700:	89 d1                	mov    ecx,edx
c0005702:	09 c1                	or     ecx,eax
c0005704:	0f 84 1c 01 00 00    	je     c0005826 <f_write+0x1d9>
c000570a:	31 ff                	xor    edi,edi
c000570c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005710:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005714:	01 c6                	add    esi,eax
c0005716:	11 d7                	adc    edi,edx
c0005718:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005720:	0f 86 63 01 00 00    	jbe    c0005889 <f_write+0x23c>
c0005726:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000572a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000572e:	c1 e8 09             	shr    eax,0x9
c0005731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005735:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005739:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000573d:	39 c2                	cmp    edx,eax
c000573f:	76 08                	jbe    c0005749 <f_write+0xfc>
c0005741:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005745:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005749:	83 ec 0c             	sub    esp,0xc
c000574c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005750:	57                   	push   edi
c0005751:	56                   	push   esi
c0005752:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005756:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000575a:	50                   	push   eax
c000575b:	e8 cc c4 ff ff       	call   c0001c2c <disk_write>
c0005760:	83 c4 20             	add    esp,0x20
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 ce 00 00 00    	jne    c0005839 <f_write+0x1ec>
c000576b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000576e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005771:	29 f0                	sub    eax,esi
c0005773:	19 fa                	sbb    edx,edi
c0005775:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005779:	89 d7                	mov    edi,edx
c000577b:	ba 00 00 00 00       	mov    edx,0x0
c0005780:	89 f9                	mov    ecx,edi
c0005782:	19 d1                	sbb    ecx,edx
c0005784:	73 1c                	jae    c00057a2 <f_write+0x155>
c0005786:	89 c7                	mov    edi,eax
c0005788:	b9 00 02 00 00       	mov    ecx,0x200
c000578d:	c1 e7 09             	shl    edi,0x9
c0005790:	8d 43 50             	lea    eax,[ebx+0x50]
c0005793:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005797:	89 fa                	mov    edx,edi
c0005799:	e8 42 c5 ff ff       	call   c0001ce0 <mem_cpy>
c000579e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057a2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057a6:	c1 e6 09             	shl    esi,0x9
c00057a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057ad:	31 ff                	xor    edi,edi
c00057af:	01 30                	add    DWORD PTR [eax],esi
c00057b1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057b9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bc:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057c2:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057c5:	89 c1                	mov    ecx,eax
c00057c7:	39 f2                	cmp    edx,esi
c00057c9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057cc:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057cf:	19 f9                	sbb    ecx,edi
c00057d1:	73 04                	jae    c00057d7 <f_write+0x18a>
c00057d3:	89 f2                	mov    edx,esi
c00057d5:	89 f8                	mov    eax,edi
c00057d7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057dd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057e2:	0f 85 cc fe ff ff    	jne    c00056b4 <f_write+0x67>
c00057e8:	eb 2e                	jmp    c0005818 <f_write+0x1cb>
c00057ea:	89 c8                	mov    eax,ecx
c00057ec:	09 d0                	or     eax,edx
c00057ee:	75 0b                	jne    c00057fb <f_write+0x1ae>
c00057f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057f3:	31 d2                	xor    edx,edx
c00057f5:	85 c0                	test   eax,eax
c00057f7:	75 28                	jne    c0005821 <f_write+0x1d4>
c00057f9:	eb 12                	jmp    c000580d <f_write+0x1c0>
c00057fb:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057ff:	74 09                	je     c000580a <f_write+0x1bd>
c0005801:	89 d8                	mov    eax,ebx
c0005803:	e8 13 c7 ff ff       	call   c0001f1b <clmt_clust>
c0005808:	eb 0a                	jmp    c0005814 <f_write+0x1c7>
c000580a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000580d:	89 d8                	mov    eax,ebx
c000580f:	e8 a1 da ff ff       	call   c00032b5 <create_chain>
c0005814:	85 c0                	test   eax,eax
c0005816:	75 09                	jne    c0005821 <f_write+0x1d4>
c0005818:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000581c:	e9 dc 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005821:	83 f8 01             	cmp    eax,0x1
c0005824:	75 0e                	jne    c0005834 <f_write+0x1e7>
c0005826:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000582a:	bd 02 00 00 00       	mov    ebp,0x2
c000582f:	e9 c9 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005834:	83 f8 ff             	cmp    eax,0xffffffff
c0005837:	75 0e                	jne    c0005847 <f_write+0x1fa>
c0005839:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000583d:	bd 01 00 00 00       	mov    ebp,0x1
c0005842:	e9 b6 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005847:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000584a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000584e:	0f 85 90 fe ff ff    	jne    c00056e4 <f_write+0x97>
c0005854:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005857:	e9 88 fe ff ff       	jmp    c00056e4 <f_write+0x97>
c000585c:	83 ec 0c             	sub    esp,0xc
c000585f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005862:	6a 01                	push   0x1
c0005864:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005867:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000586a:	50                   	push   eax
c000586b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000586f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005873:	50                   	push   eax
c0005874:	e8 b3 c3 ff ff       	call   c0001c2c <disk_write>
c0005879:	83 c4 20             	add    esp,0x20
c000587c:	85 c0                	test   eax,eax
c000587e:	75 b9                	jne    c0005839 <f_write+0x1ec>
c0005880:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005884:	e9 65 fe ff ff       	jmp    c00056ee <f_write+0xa1>
c0005889:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000588c:	75 05                	jne    c0005893 <f_write+0x246>
c000588e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005891:	74 2e                	je     c00058c1 <f_write+0x274>
c0005893:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005896:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005899:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000589c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000589f:	73 20                	jae    c00058c1 <f_write+0x274>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	8d 43 50             	lea    eax,[ebx+0x50]
c00058a7:	6a 01                	push   0x1
c00058a9:	57                   	push   edi
c00058aa:	56                   	push   esi
c00058ab:	50                   	push   eax
c00058ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b0:	50                   	push   eax
c00058b1:	e8 60 c3 ff ff       	call   c0001c16 <disk_read>
c00058b6:	83 c4 20             	add    esp,0x20
c00058b9:	85 c0                	test   eax,eax
c00058bb:	0f 85 78 ff ff ff    	jne    c0005839 <f_write+0x1ec>
c00058c1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058c4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ca:	ba 00 02 00 00       	mov    edx,0x200
c00058cf:	25 ff 01 00 00       	and    eax,0x1ff
c00058d4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058d8:	29 c2                	sub    edx,eax
c00058da:	39 d6                	cmp    esi,edx
c00058dc:	76 02                	jbe    c00058e0 <f_write+0x293>
c00058de:	89 d6                	mov    esi,edx
c00058e0:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058e4:	89 f1                	mov    ecx,esi
c00058e6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058ea:	e8 f1 c3 ff ff       	call   c0001ce0 <mem_cpy>
c00058ef:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058f3:	e9 b1 fe ff ff       	jmp    c00057a9 <f_write+0x15c>
c00058f8:	bd 07 00 00 00       	mov    ebp,0x7
c00058fd:	83 c4 2c             	add    esp,0x2c
c0005900:	89 e8                	mov    eax,ebp
c0005902:	5b                   	pop    ebx
c0005903:	5e                   	pop    esi
c0005904:	5f                   	pop    edi
c0005905:	5d                   	pop    ebp
c0005906:	c3                   	ret    

c0005907 <f_sync>:
c0005907:	56                   	push   esi
c0005908:	53                   	push   ebx
c0005909:	83 ec 64             	sub    esp,0x64
c000590c:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005910:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005914:	89 d8                	mov    eax,ebx
c0005916:	e8 49 ca ff ff       	call   c0002364 <validate>
c000591b:	85 c0                	test   eax,eax
c000591d:	0f 85 ba 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005923:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005926:	f6 c2 40             	test   dl,0x40
c0005929:	0f 84 ae 01 00 00    	je     c0005add <f_sync+0x1d6>
c000592f:	84 d2                	test   dl,dl
c0005931:	79 33                	jns    c0005966 <f_sync+0x5f>
c0005933:	83 ec 0c             	sub    esp,0xc
c0005936:	8d 43 50             	lea    eax,[ebx+0x50]
c0005939:	6a 01                	push   0x1
c000593b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000593e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005941:	50                   	push   eax
c0005942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005946:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000594a:	50                   	push   eax
c000594b:	e8 dc c2 ff ff       	call   c0001c2c <disk_write>
c0005950:	83 c4 20             	add    esp,0x20
c0005953:	89 c2                	mov    edx,eax
c0005955:	b8 01 00 00 00       	mov    eax,0x1
c000595a:	85 d2                	test   edx,edx
c000595c:	0f 85 7b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005962:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000596d:	0f 85 11 01 00 00    	jne    c0005a84 <f_sync+0x17d>
c0005973:	89 d8                	mov    eax,ebx
c0005975:	e8 13 d6 ff ff       	call   c0002f8d <fill_first_frag>
c000597a:	85 c0                	test   eax,eax
c000597c:	0f 85 5b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005982:	83 c9 ff             	or     ecx,0xffffffff
c0005985:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005988:	89 d8                	mov    eax,ebx
c000598a:	e8 c9 d5 ff ff       	call   c0002f58 <fill_last_frag>
c000598f:	85 c0                	test   eax,eax
c0005991:	0f 85 46 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005997:	83 ec 0c             	sub    esp,0xc
c000599a:	68 60 04 00 00       	push   0x460
c000599f:	e8 f0 2a 00 00       	call   c0008494 <ff_memalloc>
c00059a4:	83 c4 10             	add    esp,0x10
c00059a7:	89 c6                	mov    esi,eax
c00059a9:	b8 11 00 00 00       	mov    eax,0x11
c00059ae:	85 f6                	test   esi,esi
c00059b0:	0f 84 27 01 00 00    	je     c0005add <f_sync+0x1d6>
c00059b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ba:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059c3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059c6:	89 da                	mov    edx,ebx
c00059c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059cc:	e8 af df ff ff       	call   c0003980 <load_obj_xdir>
c00059d1:	85 c0                	test   eax,eax
c00059d3:	0f 85 95 00 00 00    	jne    c0005a6e <f_sync+0x167>
c00059d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e0:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059e4:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059e7:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059ea:	83 ca 01             	or     edx,0x1
c00059ed:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059f6:	83 c0 34             	add    eax,0x34
c00059f9:	e8 d9 c2 ff ff       	call   c0001cd7 <st_dword>
c00059fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a08:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a0b:	83 c0 38             	add    eax,0x38
c0005a0e:	e8 c7 c2 ff ff       	call   c0001cda <st_qword>
c0005a13:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a1a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a1d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a20:	83 c0 28             	add    eax,0x28
c0005a23:	e8 b2 c2 ff ff       	call   c0001cda <st_qword>
c0005a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a34:	83 c0 0c             	add    eax,0xc
c0005a37:	e8 9b c2 ff ff       	call   c0001cd7 <st_dword>
c0005a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a40:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a43:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a47:	31 d2                	xor    edx,edx
c0005a49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a4c:	83 c0 10             	add    eax,0x10
c0005a4f:	e8 83 c2 ff ff       	call   c0001cd7 <st_dword>
c0005a54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a58:	e8 62 e1 ff ff       	call   c0003bbf <store_xdir>
c0005a5d:	85 c0                	test   eax,eax
c0005a5f:	75 0d                	jne    c0005a6e <f_sync+0x167>
c0005a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a65:	e8 00 eb ff ff       	call   c000456a <sync_fs>
c0005a6a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a72:	83 ec 0c             	sub    esp,0xc
c0005a75:	56                   	push   esi
c0005a76:	e8 2f 2a 00 00       	call   c00084aa <ff_memfree>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a82:	eb 59                	jmp    c0005add <f_sync+0x1d6>
c0005a84:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a87:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a8a:	e8 b0 c9 ff ff       	call   c000243f <move_window>
c0005a8f:	85 c0                	test   eax,eax
c0005a91:	75 4a                	jne    c0005add <f_sync+0x1d6>
c0005a93:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a96:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a9a:	89 f2                	mov    edx,esi
c0005a9c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa1:	e8 5f f3 ff ff       	call   c0004e05 <st_clust.isra.1>
c0005aa6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aa9:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005aac:	e8 26 c2 ff ff       	call   c0001cd7 <st_dword>
c0005ab1:	8d 46 16             	lea    eax,[esi+0x16]
c0005ab4:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ab9:	e8 19 c2 ff ff       	call   c0001cd7 <st_dword>
c0005abe:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac1:	31 d2                	xor    edx,edx
c0005ac3:	e8 0b c2 ff ff       	call   c0001cd3 <st_word>
c0005ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005acc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	e8 91 ea ff ff       	call   c000456a <sync_fs>
c0005ad9:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005add:	83 c4 64             	add    esp,0x64
c0005ae0:	5b                   	pop    ebx
c0005ae1:	5e                   	pop    esi
c0005ae2:	c3                   	ret    

c0005ae3 <f_close>:
c0005ae3:	53                   	push   ebx
c0005ae4:	83 ec 24             	sub    esp,0x24
c0005ae7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005aeb:	53                   	push   ebx
c0005aec:	e8 16 fe ff ff       	call   c0005907 <f_sync>
c0005af1:	83 c4 10             	add    esp,0x10
c0005af4:	85 c0                	test   eax,eax
c0005af6:	75 15                	jne    c0005b0d <f_close+0x2a>
c0005af8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005afc:	89 d8                	mov    eax,ebx
c0005afe:	e8 61 c8 ff ff       	call   c0002364 <validate>
c0005b03:	85 c0                	test   eax,eax
c0005b05:	75 06                	jne    c0005b0d <f_close+0x2a>
c0005b07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b0d:	83 c4 18             	add    esp,0x18
c0005b10:	5b                   	pop    ebx
c0005b11:	c3                   	ret    

c0005b12 <f_lseek>:
c0005b12:	55                   	push   ebp
c0005b13:	57                   	push   edi
c0005b14:	56                   	push   esi
c0005b15:	53                   	push   ebx
c0005b16:	83 ec 3c             	sub    esp,0x3c
c0005b19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b1d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b21:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b25:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b28:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b2c:	89 d8                	mov    eax,ebx
c0005b2e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b32:	e8 2d c8 ff ff       	call   c0002364 <validate>
c0005b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	0f 85 7a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b43:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b4b:	85 c0                	test   eax,eax
c0005b4d:	0f 85 6a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b57:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b5a:	74 0c                	je     c0005b68 <f_lseek+0x56>
c0005b5c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b5f:	85 c0                	test   eax,eax
c0005b61:	75 1f                	jne    c0005b82 <f_lseek+0x70>
c0005b63:	e9 b5 01 00 00       	jmp    c0005d1d <f_lseek+0x20b>
c0005b68:	83 c9 ff             	or     ecx,0xffffffff
c0005b6b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b6e:	89 d8                	mov    eax,ebx
c0005b70:	e8 e3 d3 ff ff       	call   c0002f58 <fill_last_frag>
c0005b75:	85 c0                	test   eax,eax
c0005b77:	74 e3                	je     c0005b5c <f_lseek+0x4a>
c0005b79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b7d:	e9 3b 04 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005b82:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b87:	0f 85 ac 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b8d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b91:	0f 85 a2 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b97:	8d 78 04             	lea    edi,[eax+0x4]
c0005b9a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b9f:	be 02 00 00 00       	mov    esi,0x2
c0005ba4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ba8:	85 ed                	test   ebp,ebp
c0005baa:	74 73                	je     c0005c1f <f_lseek+0x10d>
c0005bac:	89 e9                	mov    ecx,ebp
c0005bae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bb5:	ff 04 24             	inc    DWORD PTR [esp]
c0005bb8:	89 ca                	mov    edx,ecx
c0005bba:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 02 d4 ff ff       	call   c0002fc7 <get_fat>
c0005bc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bc9:	83 f8 01             	cmp    eax,0x1
c0005bcc:	77 11                	ja     c0005bdf <f_lseek+0xcd>
c0005bce:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bd2:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bda:	e9 de 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bdf:	83 f8 ff             	cmp    eax,0xffffffff
c0005be2:	75 11                	jne    c0005bf5 <f_lseek+0xe3>
c0005be4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005be8:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf0:	e9 c8 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bf5:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bf8:	89 c1                	mov    ecx,eax
c0005bfa:	39 c2                	cmp    edx,eax
c0005bfc:	74 b7                	je     c0005bb5 <f_lseek+0xa3>
c0005bfe:	83 c6 02             	add    esi,0x2
c0005c01:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c05:	72 0b                	jb     c0005c12 <f_lseek+0x100>
c0005c07:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c0a:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c0d:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c0f:	83 c7 08             	add    edi,0x8
c0005c12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c16:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c19:	76 04                	jbe    c0005c1f <f_lseek+0x10d>
c0005c1b:	89 c5                	mov    ebp,eax
c0005c1d:	eb 8d                	jmp    c0005bac <f_lseek+0x9a>
c0005c1f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c22:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c26:	89 30                	mov    DWORD PTR [eax],esi
c0005c28:	0f 87 87 03 00 00    	ja     c0005fb5 <f_lseek+0x4a3>
c0005c2e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c34:	e9 84 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005c39:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c3c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c52:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c56:	73 0f                	jae    c0005c67 <f_lseek+0x155>
c0005c58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c6f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c72:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c79:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c7d:	0f 84 3a 03 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005c83:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c8b:	83 c6 ff             	add    esi,0xffffffff
c0005c8e:	89 d8                	mov    eax,ebx
c0005c90:	83 d7 ff             	adc    edi,0xffffffff
c0005c93:	89 f2                	mov    edx,esi
c0005c95:	89 f9                	mov    ecx,edi
c0005c97:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c9e:	e8 78 c2 ff ff       	call   c0001f1b <clmt_clust>
c0005ca3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ca7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb0:	89 c8                	mov    eax,ecx
c0005cb2:	e8 43 c2 ff ff       	call   c0001efa <clst2sect>
c0005cb7:	89 d7                	mov    edi,edx
c0005cb9:	09 c7                	or     edi,eax
c0005cbb:	0f 84 0d ff ff ff    	je     c0005bce <f_lseek+0xbc>
c0005cc1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005cc5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ccb:	0f 84 ec 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cd1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cd9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cdc:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce0:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ce4:	4d                   	dec    ebp
c0005ce5:	31 ff                	xor    edi,edi
c0005ce7:	21 ee                	and    esi,ebp
c0005ce9:	01 c6                	add    esi,eax
c0005ceb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cee:	11 d7                	adc    edi,edx
c0005cf0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf3:	39 fa                	cmp    edx,edi
c0005cf5:	75 08                	jne    c0005cff <f_lseek+0x1ed>
c0005cf7:	39 f0                	cmp    eax,esi
c0005cf9:	0f 84 be 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cff:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d02:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d06:	0f 89 80 02 00 00    	jns    c0005f8c <f_lseek+0x47a>
c0005d0c:	83 ec 0c             	sub    esp,0xc
c0005d0f:	6a 01                	push   0x1
c0005d11:	52                   	push   edx
c0005d12:	50                   	push   eax
c0005d13:	55                   	push   ebp
c0005d14:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d18:	e9 5a 02 00 00       	jmp    c0005f77 <f_lseek+0x465>
c0005d1d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d21:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d24:	74 16                	je     c0005d3c <f_lseek+0x22a>
c0005d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d2b:	76 0f                	jbe    c0005d3c <f_lseek+0x22a>
c0005d2d:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d34:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d3c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d3f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d42:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d45:	89 c7                	mov    edi,eax
c0005d47:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d4b:	73 0d                	jae    c0005d5a <f_lseek+0x248>
c0005d4d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d51:	75 07                	jne    c0005d5a <f_lseek+0x248>
c0005d53:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d5a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d5d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d60:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d64:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d6b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d72:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d75:	75 09                	jne    c0005d80 <f_lseek+0x26e>
c0005d77:	31 f6                	xor    esi,esi
c0005d79:	31 ff                	xor    edi,edi
c0005d7b:	e9 af 01 00 00       	jmp    c0005f2f <f_lseek+0x41d>
c0005d80:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d84:	89 d7                	mov    edi,edx
c0005d86:	c1 e1 09             	shl    ecx,0x9
c0005d89:	09 c7                	or     edi,eax
c0005d8b:	89 cd                	mov    ebp,ecx
c0005d8d:	74 6d                	je     c0005dfc <f_lseek+0x2ea>
c0005d8f:	83 c0 ff             	add    eax,0xffffffff
c0005d92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d96:	83 d2 ff             	adc    edx,0xffffffff
c0005d99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da0:	83 c0 ff             	add    eax,0xffffffff
c0005da3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005da7:	83 d2 ff             	adc    edx,0xffffffff
c0005daa:	31 ff                	xor    edi,edi
c0005dac:	57                   	push   edi
c0005dad:	51                   	push   ecx
c0005dae:	52                   	push   edx
c0005daf:	50                   	push   eax
c0005db0:	e8 27 0c 02 00       	call   c00269dc <__udivdi3>
c0005db5:	83 c4 10             	add    esp,0x10
c0005db8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc0:	57                   	push   edi
c0005dc1:	55                   	push   ebp
c0005dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dca:	e8 0d 0c 02 00       	call   c00269dc <__udivdi3>
c0005dcf:	83 c4 10             	add    esp,0x10
c0005dd2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dd6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dda:	19 d1                	sbb    ecx,edx
c0005ddc:	72 1e                	jb     c0005dfc <f_lseek+0x2ea>
c0005dde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005de2:	89 e9                	mov    ecx,ebp
c0005de4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005de7:	f7 d9                	neg    ecx
c0005de9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dec:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005df3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005df6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dfa:	eb 28                	jmp    c0005e24 <f_lseek+0x312>
c0005dfc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dff:	85 c0                	test   eax,eax
c0005e01:	75 1e                	jne    c0005e21 <f_lseek+0x30f>
c0005e03:	31 d2                	xor    edx,edx
c0005e05:	89 d8                	mov    eax,ebx
c0005e07:	e8 a9 d4 ff ff       	call   c00032b5 <create_chain>
c0005e0c:	83 f8 01             	cmp    eax,0x1
c0005e0f:	0f 84 b9 fd ff ff    	je     c0005bce <f_lseek+0xbc>
c0005e15:	83 f8 ff             	cmp    eax,0xffffffff
c0005e18:	0f 84 c6 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005e1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e21:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e24:	85 c0                	test   eax,eax
c0005e26:	0f 84 4b ff ff ff    	je     c0005d77 <f_lseek+0x265>
c0005e2c:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e30:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e38:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e3b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e3f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e42:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e45:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e49:	0f 83 9d 00 00 00    	jae    c0005eec <f_lseek+0x3da>
c0005e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e57:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e5a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e5e:	01 f2                	add    edx,esi
c0005e60:	11 f9                	adc    ecx,edi
c0005e62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e6a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e6d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e70:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e73:	f6 c1 02             	test   cl,0x2
c0005e76:	74 35                	je     c0005ead <f_lseek+0x39b>
c0005e78:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e7c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e7f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e82:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e86:	73 16                	jae    c0005e9e <f_lseek+0x38c>
c0005e88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e8c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e90:	88 ca                	mov    dl,cl
c0005e92:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e95:	83 ca 40             	or     edx,0x40
c0005e98:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e9b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e9e:	89 c2                	mov    edx,eax
c0005ea0:	89 d8                	mov    eax,ebx
c0005ea2:	e8 0e d4 ff ff       	call   c00032b5 <create_chain>
c0005ea7:	85 c0                	test   eax,eax
c0005ea9:	75 0b                	jne    c0005eb6 <f_lseek+0x3a4>
c0005eab:	eb 30                	jmp    c0005edd <f_lseek+0x3cb>
c0005ead:	89 c2                	mov    edx,eax
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 11 d1 ff ff       	call   c0002fc7 <get_fat>
c0005eb6:	83 f8 ff             	cmp    eax,0xffffffff
c0005eb9:	0f 84 25 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005ebf:	83 f8 01             	cmp    eax,0x1
c0005ec2:	0f 86 06 fd ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ec8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ecc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ecf:	0f 86 f9 fc ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ed5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ed8:	e9 5b ff ff ff       	jmp    c0005e38 <f_lseek+0x326>
c0005edd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ee4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eef:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ef3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ef6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ef9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005efc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f02:	0f 84 6f fe ff ff    	je     c0005d77 <f_lseek+0x265>
c0005f08:	89 c2                	mov    edx,eax
c0005f0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f0e:	e8 e7 bf ff ff       	call   c0001efa <clst2sect>
c0005f13:	89 d7                	mov    edi,edx
c0005f15:	09 c7                	or     edi,eax
c0005f17:	0f 84 b1 fc ff ff    	je     c0005bce <f_lseek+0xbc>
c0005f1d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f21:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f24:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f28:	c1 ef 09             	shr    edi,0x9
c0005f2b:	01 c6                	add    esi,eax
c0005f2d:	11 d7                	adc    edi,edx
c0005f2f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f32:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f35:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f38:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f3b:	19 d1                	sbb    ecx,edx
c0005f3d:	73 0a                	jae    c0005f49 <f_lseek+0x437>
c0005f3f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f42:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f45:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f49:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f4e:	74 6d                	je     c0005fbd <f_lseek+0x4ab>
c0005f50:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f53:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f56:	39 fa                	cmp    edx,edi
c0005f58:	75 04                	jne    c0005f5e <f_lseek+0x44c>
c0005f5a:	39 f0                	cmp    eax,esi
c0005f5c:	74 5f                	je     c0005fbd <f_lseek+0x4ab>
c0005f5e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f61:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f65:	79 25                	jns    c0005f8c <f_lseek+0x47a>
c0005f67:	83 ec 0c             	sub    esp,0xc
c0005f6a:	6a 01                	push   0x1
c0005f6c:	52                   	push   edx
c0005f6d:	50                   	push   eax
c0005f6e:	55                   	push   ebp
c0005f6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f73:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f77:	50                   	push   eax
c0005f78:	e8 af bc ff ff       	call   c0001c2c <disk_write>
c0005f7d:	83 c4 20             	add    esp,0x20
c0005f80:	85 c0                	test   eax,eax
c0005f82:	0f 85 5c fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005f88:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f8c:	83 ec 0c             	sub    esp,0xc
c0005f8f:	6a 01                	push   0x1
c0005f91:	57                   	push   edi
c0005f92:	56                   	push   esi
c0005f93:	55                   	push   ebp
c0005f94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f98:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f9c:	50                   	push   eax
c0005f9d:	e8 74 bc ff ff       	call   c0001c16 <disk_read>
c0005fa2:	83 c4 20             	add    esp,0x20
c0005fa5:	85 c0                	test   eax,eax
c0005fa7:	0f 85 37 fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005fad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fb3:	eb 08                	jmp    c0005fbd <f_lseek+0x4ab>
c0005fb5:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc1:	83 c4 3c             	add    esp,0x3c
c0005fc4:	5b                   	pop    ebx
c0005fc5:	5e                   	pop    esi
c0005fc6:	5f                   	pop    edi
c0005fc7:	5d                   	pop    ebp
c0005fc8:	c3                   	ret    

c0005fc9 <f_opendir>:
c0005fc9:	56                   	push   esi
c0005fca:	b8 09 00 00 00       	mov    eax,0x9
c0005fcf:	53                   	push   ebx
c0005fd0:	83 ec 24             	sub    esp,0x24
c0005fd3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fd7:	85 db                	test   ebx,ebx
c0005fd9:	0f 84 e6 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c0005fdf:	31 c9                	xor    ecx,ecx
c0005fe1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fe5:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fe9:	e8 03 c7 ff ff       	call   c00026f1 <mount_volume>
c0005fee:	85 c0                	test   eax,eax
c0005ff0:	0f 85 c9 00 00 00    	jne    c00060bf <f_opendir+0xf6>
c0005ff6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ffa:	83 ec 0c             	sub    esp,0xc
c0005ffd:	89 03                	mov    DWORD PTR [ebx],eax
c0005fff:	68 60 04 00 00       	push   0x460
c0006004:	e8 8b 24 00 00       	call   c0008494 <ff_memalloc>
c0006009:	83 c4 10             	add    esp,0x10
c000600c:	89 c6                	mov    esi,eax
c000600e:	b8 11 00 00 00       	mov    eax,0x11
c0006013:	85 f6                	test   esi,esi
c0006015:	0f 84 aa 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c000601b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000601f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006025:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006028:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000602b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000602f:	89 d8                	mov    eax,ebx
c0006031:	e8 31 ee ff ff       	call   c0004e67 <follow_path>
c0006036:	85 c0                	test   eax,eax
c0006038:	75 61                	jne    c000609b <f_opendir+0xd2>
c000603a:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000603e:	78 46                	js     c0006086 <f_opendir+0xbd>
c0006040:	b8 05 00 00 00       	mov    eax,0x5
c0006045:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006049:	74 50                	je     c000609b <f_opendir+0xd2>
c000604b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000604f:	8a 01                	mov    al,BYTE PTR [ecx]
c0006051:	3c 04                	cmp    al,0x4
c0006053:	75 26                	jne    c000607b <f_opendir+0xb2>
c0006055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000605b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000605e:	30 d2                	xor    dl,dl
c0006060:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006064:	09 c2                	or     edx,eax
c0006066:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006069:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000606c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000606f:	89 da                	mov    edx,ebx
c0006071:	8d 41 10             	lea    eax,[ecx+0x10]
c0006074:	e8 b4 ed ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0006079:	eb 0b                	jmp    c0006086 <f_opendir+0xbd>
c000607b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000607e:	e8 59 ed ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006083:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006086:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000608a:	31 d2                	xor    edx,edx
c000608c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006090:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006094:	89 d8                	mov    eax,ebx
c0006096:	e8 22 d1 ff ff       	call   c00031bd <dir_sdi>
c000609b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000609f:	83 ec 0c             	sub    esp,0xc
c00060a2:	56                   	push   esi
c00060a3:	e8 02 24 00 00       	call   c00084aa <ff_memfree>
c00060a8:	83 c4 10             	add    esp,0x10
c00060ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060af:	83 f8 04             	cmp    eax,0x4
c00060b2:	74 06                	je     c00060ba <f_opendir+0xf1>
c00060b4:	85 c0                	test   eax,eax
c00060b6:	74 0d                	je     c00060c5 <f_opendir+0xfc>
c00060b8:	eb 05                	jmp    c00060bf <f_opendir+0xf6>
c00060ba:	b8 05 00 00 00       	mov    eax,0x5
c00060bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060c5:	83 c4 24             	add    esp,0x24
c00060c8:	5b                   	pop    ebx
c00060c9:	5e                   	pop    esi
c00060ca:	c3                   	ret    

c00060cb <f_closedir>:
c00060cb:	53                   	push   ebx
c00060cc:	83 ec 18             	sub    esp,0x18
c00060cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060d3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060d7:	89 d8                	mov    eax,ebx
c00060d9:	e8 86 c2 ff ff       	call   c0002364 <validate>
c00060de:	85 c0                	test   eax,eax
c00060e0:	75 06                	jne    c00060e8 <f_closedir+0x1d>
c00060e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060e8:	83 c4 18             	add    esp,0x18
c00060eb:	5b                   	pop    ebx
c00060ec:	c3                   	ret    

c00060ed <f_readdir>:
c00060ed:	57                   	push   edi
c00060ee:	56                   	push   esi
c00060ef:	53                   	push   ebx
c00060f0:	83 ec 20             	sub    esp,0x20
c00060f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060fb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060ff:	89 d8                	mov    eax,ebx
c0006101:	e8 5e c2 ff ff       	call   c0002364 <validate>
c0006106:	85 c0                	test   eax,eax
c0006108:	75 77                	jne    c0006181 <f_readdir+0x94>
c000610a:	85 ff                	test   edi,edi
c000610c:	75 0b                	jne    c0006119 <f_readdir+0x2c>
c000610e:	31 d2                	xor    edx,edx
c0006110:	89 d8                	mov    eax,ebx
c0006112:	e8 a6 d0 ff ff       	call   c00031bd <dir_sdi>
c0006117:	eb 68                	jmp    c0006181 <f_readdir+0x94>
c0006119:	83 ec 0c             	sub    esp,0xc
c000611c:	68 60 04 00 00       	push   0x460
c0006121:	e8 6e 23 00 00       	call   c0008494 <ff_memalloc>
c0006126:	83 c4 10             	add    esp,0x10
c0006129:	89 c6                	mov    esi,eax
c000612b:	b8 11 00 00 00       	mov    eax,0x11
c0006130:	85 f6                	test   esi,esi
c0006132:	74 4d                	je     c0006181 <f_readdir+0x94>
c0006134:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006138:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000613e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006141:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006144:	31 d2                	xor    edx,edx
c0006146:	89 d8                	mov    eax,ebx
c0006148:	e8 80 d8 ff ff       	call   c00039cd <dir_read>
c000614d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006152:	75 19                	jne    c000616d <f_readdir+0x80>
c0006154:	89 fa                	mov    edx,edi
c0006156:	89 d8                	mov    eax,ebx
c0006158:	e8 7e ea ff ff       	call   c0004bdb <get_fileinfo>
c000615d:	31 d2                	xor    edx,edx
c000615f:	89 d8                	mov    eax,ebx
c0006161:	e8 af d5 ff ff       	call   c0003715 <dir_next>
c0006166:	83 f8 04             	cmp    eax,0x4
c0006169:	75 02                	jne    c000616d <f_readdir+0x80>
c000616b:	31 c0                	xor    eax,eax
c000616d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006171:	83 ec 0c             	sub    esp,0xc
c0006174:	56                   	push   esi
c0006175:	e8 30 23 00 00       	call   c00084aa <ff_memfree>
c000617a:	83 c4 10             	add    esp,0x10
c000617d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006181:	83 c4 20             	add    esp,0x20
c0006184:	5b                   	pop    ebx
c0006185:	5e                   	pop    esi
c0006186:	5f                   	pop    edi
c0006187:	c3                   	ret    

c0006188 <f_stat>:
c0006188:	57                   	push   edi
c0006189:	31 c9                	xor    ecx,ecx
c000618b:	56                   	push   esi
c000618c:	53                   	push   ebx
c000618d:	83 ec 50             	sub    esp,0x50
c0006190:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006194:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006198:	8d 44 24 60          	lea    eax,[esp+0x60]
c000619c:	e8 50 c5 ff ff       	call   c00026f1 <mount_volume>
c00061a1:	89 c3                	mov    ebx,eax
c00061a3:	85 c0                	test   eax,eax
c00061a5:	75 67                	jne    c000620e <f_stat+0x86>
c00061a7:	83 ec 0c             	sub    esp,0xc
c00061aa:	bb 11 00 00 00       	mov    ebx,0x11
c00061af:	68 60 04 00 00       	push   0x460
c00061b4:	e8 db 22 00 00       	call   c0008494 <ff_memalloc>
c00061b9:	83 c4 10             	add    esp,0x10
c00061bc:	89 c6                	mov    esi,eax
c00061be:	85 c0                	test   eax,eax
c00061c0:	74 4c                	je     c000620e <f_stat+0x86>
c00061c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061c6:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061cc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061d2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061d6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061da:	e8 88 ec ff ff       	call   c0004e67 <follow_path>
c00061df:	89 c3                	mov    ebx,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	75 1d                	jne    c0006202 <f_stat+0x7a>
c00061e5:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061ea:	78 11                	js     c00061fd <f_stat+0x75>
c00061ec:	85 ff                	test   edi,edi
c00061ee:	74 12                	je     c0006202 <f_stat+0x7a>
c00061f0:	89 fa                	mov    edx,edi
c00061f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061f6:	e8 e0 e9 ff ff       	call   c0004bdb <get_fileinfo>
c00061fb:	eb 05                	jmp    c0006202 <f_stat+0x7a>
c00061fd:	bb 06 00 00 00       	mov    ebx,0x6
c0006202:	83 ec 0c             	sub    esp,0xc
c0006205:	56                   	push   esi
c0006206:	e8 9f 22 00 00       	call   c00084aa <ff_memfree>
c000620b:	83 c4 10             	add    esp,0x10
c000620e:	83 c4 50             	add    esp,0x50
c0006211:	89 d8                	mov    eax,ebx
c0006213:	5b                   	pop    ebx
c0006214:	5e                   	pop    esi
c0006215:	5f                   	pop    edi
c0006216:	c3                   	ret    

c0006217 <f_getfree>:
c0006217:	55                   	push   ebp
c0006218:	31 c9                	xor    ecx,ecx
c000621a:	57                   	push   edi
c000621b:	56                   	push   esi
c000621c:	53                   	push   ebx
c000621d:	83 ec 5c             	sub    esp,0x5c
c0006220:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006224:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006228:	e8 c4 c4 ff ff       	call   c00026f1 <mount_volume>
c000622d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006231:	85 c0                	test   eax,eax
c0006233:	0f 85 9d 01 00 00    	jne    c00063d6 <f_getfree+0x1bf>
c0006239:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006241:	89 02                	mov    DWORD PTR [edx],eax
c0006243:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006246:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006249:	8d 71 fe             	lea    esi,[ecx-0x2]
c000624c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006250:	39 f2                	cmp    edx,esi
c0006252:	77 0b                	ja     c000625f <f_getfree+0x48>
c0006254:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006258:	89 10                	mov    DWORD PTR [eax],edx
c000625a:	e9 77 01 00 00       	jmp    c00063d6 <f_getfree+0x1bf>
c000625f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006261:	80 fa 01             	cmp    dl,0x1
c0006264:	75 3a                	jne    c00062a0 <f_getfree+0x89>
c0006266:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000626a:	be 02 00 00 00       	mov    esi,0x2
c000626f:	31 db                	xor    ebx,ebx
c0006271:	89 f2                	mov    edx,esi
c0006273:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006277:	e8 4b cd ff ff       	call   c0002fc7 <get_fat>
c000627c:	83 f8 ff             	cmp    eax,0xffffffff
c000627f:	0f 84 28 01 00 00    	je     c00063ad <f_getfree+0x196>
c0006285:	83 f8 01             	cmp    eax,0x1
c0006288:	0f 84 29 01 00 00    	je     c00063b7 <f_getfree+0x1a0>
c000628e:	83 d3 00             	adc    ebx,0x0
c0006291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006295:	46                   	inc    esi
c0006296:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006299:	77 d6                	ja     c0006271 <f_getfree+0x5a>
c000629b:	e9 25 01 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c00062a0:	80 fa 04             	cmp    dl,0x4
c00062a3:	0f 85 88 00 00 00    	jne    c0006331 <f_getfree+0x11a>
c00062a9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062ac:	31 ed                	xor    ebp,ebp
c00062ae:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062b9:	31 db                	xor    ebx,ebx
c00062bb:	85 ed                	test   ebp,ebp
c00062bd:	75 3f                	jne    c00062fe <f_getfree+0xe7>
c00062bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062c7:	83 c0 01             	add    eax,0x1
c00062ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062ce:	83 d2 00             	adc    edx,0x0
c00062d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e1:	e8 59 c1 ff ff       	call   c000243f <move_window>
c00062e6:	85 c0                	test   eax,eax
c00062e8:	0f 85 d3 00 00 00    	jne    c00063c1 <f_getfree+0x1aa>
c00062ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006302:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006305:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006309:	89 cf                	mov    edi,ecx
c000630b:	85 f6                	test   esi,esi
c000630d:	74 12                	je     c0006321 <f_getfree+0x10a>
c000630f:	88 c1                	mov    cl,al
c0006311:	83 e1 01             	and    ecx,0x1
c0006314:	80 f9 01             	cmp    cl,0x1
c0006317:	83 d3 00             	adc    ebx,0x0
c000631a:	d0 e8                	shr    al,1
c000631c:	4e                   	dec    esi
c000631d:	39 fe                	cmp    esi,edi
c000631f:	75 ea                	jne    c000630b <f_getfree+0xf4>
c0006321:	45                   	inc    ebp
c0006322:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006328:	85 f6                	test   esi,esi
c000632a:	75 8f                	jne    c00062bb <f_getfree+0xa4>
c000632c:	e9 94 00 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c0006331:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006334:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006337:	31 f6                	xor    esi,esi
c0006339:	31 db                	xor    ebx,ebx
c000633b:	85 f6                	test   esi,esi
c000633d:	75 1b                	jne    c000635a <f_getfree+0x143>
c000633f:	89 d7                	mov    edi,edx
c0006341:	89 cd                	mov    ebp,ecx
c0006343:	83 c7 01             	add    edi,0x1
c0006346:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634a:	83 d5 00             	adc    ebp,0x0
c000634d:	e8 ed c0 ff ff       	call   c000243f <move_window>
c0006352:	85 c0                	test   eax,eax
c0006354:	75 6b                	jne    c00063c1 <f_getfree+0x1aa>
c0006356:	89 fa                	mov    edx,edi
c0006358:	89 e9                	mov    ecx,ebp
c000635a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000635e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006362:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006366:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006369:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000636d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006371:	75 11                	jne    c0006384 <f_getfree+0x16d>
c0006373:	e8 e9 b8 ff ff       	call   c0001c61 <ld_word>
c0006378:	66 83 f8 01          	cmp    ax,0x1
c000637c:	83 d3 00             	adc    ebx,0x0
c000637f:	83 c6 02             	add    esi,0x2
c0006382:	eb 13                	jmp    c0006397 <f_getfree+0x180>
c0006384:	e8 e5 b8 ff ff       	call   c0001c6e <ld_dword>
c0006389:	25 ff ff ff 0f       	and    eax,0xfffffff
c000638e:	83 f8 01             	cmp    eax,0x1
c0006391:	83 d3 00             	adc    ebx,0x0
c0006394:	83 c6 04             	add    esi,0x4
c0006397:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000639d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063a5:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063a9:	75 90                	jne    c000633b <f_getfree+0x124>
c00063ab:	eb 18                	jmp    c00063c5 <f_getfree+0x1ae>
c00063ad:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063b5:	eb 0e                	jmp    c00063c5 <f_getfree+0x1ae>
c00063b7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063bf:	eb 04                	jmp    c00063c5 <f_getfree+0x1ae>
c00063c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063c5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063c9:	89 18                	mov    DWORD PTR [eax],ebx
c00063cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063cf:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063d2:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063da:	83 c4 5c             	add    esp,0x5c
c00063dd:	5b                   	pop    ebx
c00063de:	5e                   	pop    esi
c00063df:	5f                   	pop    edi
c00063e0:	5d                   	pop    ebp
c00063e1:	c3                   	ret    

c00063e2 <f_truncate>:
c00063e2:	56                   	push   esi
c00063e3:	53                   	push   ebx
c00063e4:	83 ec 14             	sub    esp,0x14
c00063e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063eb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063ef:	89 d8                	mov    eax,ebx
c00063f1:	e8 6e bf ff ff       	call   c0002364 <validate>
c00063f6:	89 c6                	mov    esi,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	0f 85 d2 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c0006400:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006404:	85 f6                	test   esi,esi
c0006406:	0f 85 c6 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c000640c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006410:	0f 84 b7 00 00 00    	je     c00064cd <f_truncate+0xeb>
c0006416:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006419:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000641c:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000641f:	89 d1                	mov    ecx,edx
c0006421:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006424:	0f 83 a8 00 00 00    	jae    c00064d2 <f_truncate+0xf0>
c000642a:	09 c2                	or     edx,eax
c000642c:	75 15                	jne    c0006443 <f_truncate+0x61>
c000642e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006431:	31 c9                	xor    ecx,ecx
c0006433:	89 d8                	mov    eax,ebx
c0006435:	e8 7a d0 ff ff       	call   c00034b4 <remove_chain>
c000643a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006441:	eb 35                	jmp    c0006478 <f_truncate+0x96>
c0006443:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006446:	89 d8                	mov    eax,ebx
c0006448:	e8 7a cb ff ff       	call   c0002fc7 <get_fat>
c000644d:	89 c2                	mov    edx,eax
c000644f:	b8 01 00 00 00       	mov    eax,0x1
c0006454:	83 fa ff             	cmp    edx,0xffffffff
c0006457:	74 1f                	je     c0006478 <f_truncate+0x96>
c0006459:	b8 02 00 00 00       	mov    eax,0x2
c000645e:	83 fa 01             	cmp    edx,0x1
c0006461:	74 15                	je     c0006478 <f_truncate+0x96>
c0006463:	31 c0                	xor    eax,eax
c0006465:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006469:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000646c:	76 0a                	jbe    c0006478 <f_truncate+0x96>
c000646e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006471:	89 d8                	mov    eax,ebx
c0006473:	e8 3c d0 ff ff       	call   c00034b4 <remove_chain>
c0006478:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000647b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000647e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006481:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006484:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006487:	83 ca 40             	or     edx,0x40
c000648a:	85 c0                	test   eax,eax
c000648c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000648f:	75 35                	jne    c00064c6 <f_truncate+0xe4>
c0006491:	84 d2                	test   dl,dl
c0006493:	79 3d                	jns    c00064d2 <f_truncate+0xf0>
c0006495:	83 ec 0c             	sub    esp,0xc
c0006498:	8d 43 50             	lea    eax,[ebx+0x50]
c000649b:	6a 01                	push   0x1
c000649d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064a3:	50                   	push   eax
c00064a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064a8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064ac:	50                   	push   eax
c00064ad:	e8 7a b7 ff ff       	call   c0001c2c <disk_write>
c00064b2:	83 c4 20             	add    esp,0x20
c00064b5:	85 c0                	test   eax,eax
c00064b7:	75 08                	jne    c00064c1 <f_truncate+0xdf>
c00064b9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064bd:	31 f6                	xor    esi,esi
c00064bf:	eb 11                	jmp    c00064d2 <f_truncate+0xf0>
c00064c1:	b8 01 00 00 00       	mov    eax,0x1
c00064c6:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064c9:	89 c6                	mov    esi,eax
c00064cb:	eb 05                	jmp    c00064d2 <f_truncate+0xf0>
c00064cd:	be 07 00 00 00       	mov    esi,0x7
c00064d2:	89 f0                	mov    eax,esi
c00064d4:	83 c4 14             	add    esp,0x14
c00064d7:	5b                   	pop    ebx
c00064d8:	5e                   	pop    esi
c00064d9:	c3                   	ret    

c00064da <f_unlink>:
c00064da:	56                   	push   esi
c00064db:	b9 02 00 00 00       	mov    ecx,0x2
c00064e0:	53                   	push   ebx
c00064e1:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064eb:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064f2:	e8 fa c1 ff ff       	call   c00026f1 <mount_volume>
c00064f7:	85 c0                	test   eax,eax
c00064f9:	0f 85 55 01 00 00    	jne    c0006654 <f_unlink+0x17a>
c00064ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006503:	83 ec 0c             	sub    esp,0xc
c0006506:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000650a:	68 60 04 00 00       	push   0x460
c000650f:	e8 80 1f 00 00       	call   c0008494 <ff_memalloc>
c0006514:	83 c4 10             	add    esp,0x10
c0006517:	89 c3                	mov    ebx,eax
c0006519:	b8 11 00 00 00       	mov    eax,0x11
c000651e:	85 db                	test   ebx,ebx
c0006520:	0f 84 2e 01 00 00    	je     c0006654 <f_unlink+0x17a>
c0006526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000652a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006530:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006533:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006536:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000653d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006541:	e8 21 e9 ff ff       	call   c0004e67 <follow_path>
c0006546:	85 c0                	test   eax,eax
c0006548:	0f 85 f2 00 00 00    	jne    c0006640 <f_unlink+0x166>
c000654e:	b8 06 00 00 00       	mov    eax,0x6
c0006553:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000655b:	0f 88 df 00 00 00    	js     c0006640 <f_unlink+0x166>
c0006561:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006566:	74 0a                	je     c0006572 <f_unlink+0x98>
c0006568:	b8 07 00 00 00       	mov    eax,0x7
c000656d:	e9 ce 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c0006572:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006576:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000657a:	8a 02                	mov    al,BYTE PTR [edx]
c000657c:	3c 04                	cmp    al,0x4
c000657e:	75 12                	jne    c0006592 <f_unlink+0xb8>
c0006580:	8d 42 10             	lea    eax,[edx+0x10]
c0006583:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006587:	e8 a1 e8 ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c000658c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006590:	eb 0e                	jmp    c00065a0 <f_unlink+0xc6>
c0006592:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006599:	e8 3e e8 ff ff       	call   c0004ddc <ld_clust.isra.0>
c000659e:	89 c6                	mov    esi,eax
c00065a0:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065a5:	75 12                	jne    c00065b9 <f_unlink+0xdf>
c00065a7:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065ab:	e8 94 d6 ff ff       	call   c0003c44 <dir_remove>
c00065b0:	85 c0                	test   eax,eax
c00065b2:	74 6c                	je     c0006620 <f_unlink+0x146>
c00065b4:	e9 87 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c00065b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065bd:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065c4:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065cb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065ce:	75 21                	jne    c00065f1 <f_unlink+0x117>
c00065d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065d8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065df:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065e6:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065ea:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f1:	31 d2                	xor    edx,edx
c00065f3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065fa:	e8 be cb ff ff       	call   c00031bd <dir_sdi>
c00065ff:	85 c0                	test   eax,eax
c0006601:	75 3d                	jne    c0006640 <f_unlink+0x166>
c0006603:	31 d2                	xor    edx,edx
c0006605:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000660c:	e8 bc d3 ff ff       	call   c00039cd <dir_read>
c0006611:	85 c0                	test   eax,eax
c0006613:	0f 84 4f ff ff ff    	je     c0006568 <f_unlink+0x8e>
c0006619:	83 f8 04             	cmp    eax,0x4
c000661c:	75 22                	jne    c0006640 <f_unlink+0x166>
c000661e:	eb 87                	jmp    c00065a7 <f_unlink+0xcd>
c0006620:	85 f6                	test   esi,esi
c0006622:	75 0b                	jne    c000662f <f_unlink+0x155>
c0006624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006628:	e8 3d df ff ff       	call   c000456a <sync_fs>
c000662d:	eb 11                	jmp    c0006640 <f_unlink+0x166>
c000662f:	31 c9                	xor    ecx,ecx
c0006631:	89 f2                	mov    edx,esi
c0006633:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006637:	e8 78 ce ff ff       	call   c00034b4 <remove_chain>
c000663c:	85 c0                	test   eax,eax
c000663e:	74 e4                	je     c0006624 <f_unlink+0x14a>
c0006640:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006644:	83 ec 0c             	sub    esp,0xc
c0006647:	53                   	push   ebx
c0006648:	e8 5d 1e 00 00       	call   c00084aa <ff_memfree>
c000664d:	83 c4 10             	add    esp,0x10
c0006650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006654:	81 c4 e4 00 00 00    	add    esp,0xe4
c000665a:	5b                   	pop    ebx
c000665b:	5e                   	pop    esi
c000665c:	c3                   	ret    

c000665d <f_mkdir>:
c000665d:	57                   	push   edi
c000665e:	b9 02 00 00 00       	mov    ecx,0x2
c0006663:	56                   	push   esi
c0006664:	53                   	push   ebx
c0006665:	83 c4 80             	add    esp,0xffffff80
c0006668:	8d 54 24 08          	lea    edx,[esp+0x8]
c000666c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006673:	e8 79 c0 ff ff       	call   c00026f1 <mount_volume>
c0006678:	89 c3                	mov    ebx,eax
c000667a:	85 c0                	test   eax,eax
c000667c:	0f 85 fe 01 00 00    	jne    c0006880 <f_mkdir+0x223>
c0006682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006686:	bb 11 00 00 00       	mov    ebx,0x11
c000668b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000668f:	83 ec 0c             	sub    esp,0xc
c0006692:	68 60 04 00 00       	push   0x460
c0006697:	e8 f8 1d 00 00       	call   c0008494 <ff_memalloc>
c000669c:	83 c4 10             	add    esp,0x10
c000669f:	89 c7                	mov    edi,eax
c00066a1:	85 c0                	test   eax,eax
c00066a3:	0f 84 d7 01 00 00    	je     c0006880 <f_mkdir+0x223>
c00066a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ad:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066b3:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066b9:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066c4:	e8 9e e7 ff ff       	call   c0004e67 <follow_path>
c00066c9:	89 c3                	mov    ebx,eax
c00066cb:	85 c0                	test   eax,eax
c00066cd:	74 3e                	je     c000670d <f_mkdir+0xb0>
c00066cf:	83 f8 04             	cmp    eax,0x4
c00066d2:	75 3e                	jne    c0006712 <f_mkdir+0xb5>
c00066d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d8:	31 d2                	xor    edx,edx
c00066da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e2:	e8 ce cb ff ff       	call   c00032b5 <create_chain>
c00066e7:	89 c6                	mov    esi,eax
c00066e9:	85 c0                	test   eax,eax
c00066eb:	74 0c                	je     c00066f9 <f_mkdir+0x9c>
c00066ed:	bb 02 00 00 00       	mov    ebx,0x2
c00066f2:	83 f8 01             	cmp    eax,0x1
c00066f5:	74 07                	je     c00066fe <f_mkdir+0xa1>
c00066f7:	eb 2a                	jmp    c0006723 <f_mkdir+0xc6>
c00066f9:	bb 07 00 00 00       	mov    ebx,0x7
c00066fe:	31 c9                	xor    ecx,ecx
c0006700:	89 f2                	mov    edx,esi
c0006702:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006706:	e8 a9 cd ff ff       	call   c00034b4 <remove_chain>
c000670b:	eb 05                	jmp    c0006712 <f_mkdir+0xb5>
c000670d:	bb 08 00 00 00       	mov    ebx,0x8
c0006712:	83 ec 0c             	sub    esp,0xc
c0006715:	57                   	push   edi
c0006716:	e8 8f 1d 00 00       	call   c00084aa <ff_memfree>
c000671b:	83 c4 10             	add    esp,0x10
c000671e:	e9 5d 01 00 00       	jmp    c0006880 <f_mkdir+0x223>
c0006723:	bb 01 00 00 00       	mov    ebx,0x1
c0006728:	83 f8 ff             	cmp    eax,0xffffffff
c000672b:	74 d1                	je     c00066fe <f_mkdir+0xa1>
c000672d:	89 f2                	mov    edx,esi
c000672f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006733:	e8 c4 ce ff ff       	call   c00035fc <dir_clear>
c0006738:	89 c3                	mov    ebx,eax
c000673a:	85 c0                	test   eax,eax
c000673c:	75 c0                	jne    c00066fe <f_mkdir+0xa1>
c000673e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006742:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006745:	74 69                	je     c00067b0 <f_mkdir+0x153>
c0006747:	b9 0b 00 00 00       	mov    ecx,0xb
c000674c:	83 c0 54             	add    eax,0x54
c000674f:	ba 20 00 00 00       	mov    edx,0x20
c0006754:	e8 9c b5 ff ff       	call   c0001cf5 <mem_set>
c0006759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006762:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006766:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000676a:	83 c0 6a             	add    eax,0x6a
c000676d:	e8 65 b5 ff ff       	call   c0001cd7 <st_dword>
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	89 f1                	mov    ecx,esi
c0006778:	8d 50 54             	lea    edx,[eax+0x54]
c000677b:	e8 85 e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006784:	b9 20 00 00 00       	mov    ecx,0x20
c0006789:	8d 50 54             	lea    edx,[eax+0x54]
c000678c:	83 c0 74             	add    eax,0x74
c000678f:	e8 4c b5 ff ff       	call   c0001ce0 <mem_cpy>
c0006794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006798:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000679c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a0:	8d 50 74             	lea    edx,[eax+0x74]
c00067a3:	e8 5d e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c00067a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ac:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067b4:	e8 2f db ff ff       	call   c00042e8 <dir_register>
c00067b9:	89 c3                	mov    ebx,eax
c00067bb:	85 c0                	test   eax,eax
c00067bd:	0f 85 3b ff ff ff    	jne    c00066fe <f_mkdir+0xa1>
c00067c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ca:	75 74                	jne    c0006840 <f_mkdir+0x1e3>
c00067cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cf:	ba 00 00 21 50       	mov    edx,0x50210000
c00067d4:	83 c0 0c             	add    eax,0xc
c00067d7:	e8 fb b4 ff ff       	call   c0001cd7 <st_dword>
c00067dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e0:	89 f2                	mov    edx,esi
c00067e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e5:	83 c0 34             	add    eax,0x34
c00067e8:	e8 ea b4 ff ff       	call   c0001cd7 <st_dword>
c00067ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f8:	c1 e2 09             	shl    edx,0x9
c00067fb:	83 c0 38             	add    eax,0x38
c00067fe:	e8 d4 b4 ff ff       	call   c0001cd7 <st_dword>
c0006803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006807:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000680b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000680e:	c1 e2 09             	shl    edx,0x9
c0006811:	83 c0 28             	add    eax,0x28
c0006814:	e8 be b4 ff ff       	call   c0001cd7 <st_dword>
c0006819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006824:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006827:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000682b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000682f:	e8 8b d3 ff ff       	call   c0003bbf <store_xdir>
c0006834:	89 c3                	mov    ebx,eax
c0006836:	85 c0                	test   eax,eax
c0006838:	0f 85 d4 fe ff ff    	jne    c0006712 <f_mkdir+0xb5>
c000683e:	eb 30                	jmp    c0006870 <f_mkdir+0x213>
c0006840:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006844:	ba 00 00 21 50       	mov    edx,0x50210000
c0006849:	83 c0 16             	add    eax,0x16
c000684c:	e8 86 b4 ff ff       	call   c0001cd7 <st_dword>
c0006851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006855:	89 f1                	mov    ecx,esi
c0006857:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000685b:	e8 a5 e5 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006860:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006864:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000686c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	e8 f1 dc ff ff       	call   c000456a <sync_fs>
c0006879:	89 c3                	mov    ebx,eax
c000687b:	e9 92 fe ff ff       	jmp    c0006712 <f_mkdir+0xb5>
c0006880:	83 ec 80             	sub    esp,0xffffff80
c0006883:	89 d8                	mov    eax,ebx
c0006885:	5b                   	pop    ebx
c0006886:	5e                   	pop    esi
c0006887:	5f                   	pop    edi
c0006888:	c3                   	ret    

c0006889 <f_rename>:
c0006889:	55                   	push   ebp
c000688a:	57                   	push   edi
c000688b:	56                   	push   esi
c000688c:	53                   	push   ebx
c000688d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006893:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000689a:	e8 a4 b9 ff ff       	call   c0002243 <get_ldnumber>
c000689f:	b9 02 00 00 00       	mov    ecx,0x2
c00068a4:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068a8:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068af:	e8 3d be ff ff       	call   c00026f1 <mount_volume>
c00068b4:	85 c0                	test   eax,eax
c00068b6:	0f 85 b5 02 00 00    	jne    c0006b71 <f_rename+0x2e8>
c00068bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c0:	83 ec 0c             	sub    esp,0xc
c00068c3:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068c7:	68 60 04 00 00       	push   0x460
c00068cc:	e8 c3 1b 00 00       	call   c0008494 <ff_memalloc>
c00068d1:	83 c4 10             	add    esp,0x10
c00068d4:	89 c3                	mov    ebx,eax
c00068d6:	b8 11 00 00 00       	mov    eax,0x11
c00068db:	85 db                	test   ebx,ebx
c00068dd:	0f 84 8e 02 00 00    	je     c0006b71 <f_rename+0x2e8>
c00068e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e7:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068ed:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068f3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068fa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fe:	e8 64 e5 ff ff       	call   c0004e67 <follow_path>
c0006903:	85 c0                	test   eax,eax
c0006905:	0f 85 52 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000690b:	b8 06 00 00 00       	mov    eax,0x6
c0006910:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006918:	0f 85 3f 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000691e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006922:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006925:	0f 85 05 01 00 00    	jne    c0006a30 <f_rename+0x1a7>
c000692b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000692e:	b9 40 00 00 00       	mov    ecx,0x40
c0006933:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006937:	e8 a4 b3 ff ff       	call   c0001ce0 <mem_cpy>
c000693c:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006941:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006945:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694c:	e8 8f b3 ff ff       	call   c0001ce0 <mem_cpy>
c0006951:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 03 e5 ff ff       	call   c0004e67 <follow_path>
c0006964:	85 c0                	test   eax,eax
c0006966:	75 29                	jne    c0006991 <f_rename+0x108>
c0006968:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006973:	74 0a                	je     c000697f <f_rename+0xf6>
c0006975:	b8 08 00 00 00       	mov    eax,0x8
c000697a:	e9 de 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c000697f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006986:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698d:	75 e6                	jne    c0006975 <f_rename+0xec>
c000698f:	eb 09                	jmp    c000699a <f_rename+0x111>
c0006991:	83 f8 04             	cmp    eax,0x4
c0006994:	0f 85 c3 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000699a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a1:	e8 42 d9 ff ff       	call   c00042e8 <dir_register>
c00069a6:	85 c0                	test   eax,eax
c00069a8:	0f 85 af 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c00069ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069b5:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069b8:	89 c5                	mov    ebp,eax
c00069ba:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069bd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c1:	8d 46 24             	lea    eax,[esi+0x24]
c00069c4:	e8 98 b2 ff ff       	call   c0001c61 <ld_word>
c00069c9:	b9 40 00 00 00       	mov    ecx,0x40
c00069ce:	89 c7                	mov    edi,eax
c00069d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069d4:	89 f0                	mov    eax,esi
c00069d6:	e8 05 b3 ff ff       	call   c0001ce0 <mem_cpy>
c00069db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069df:	89 e9                	mov    ecx,ebp
c00069e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069e4:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069e7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ef:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069f2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069f5:	0f b7 d7             	movzx  edx,di
c00069f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069fb:	83 c0 24             	add    eax,0x24
c00069fe:	e8 d0 b2 ff ff       	call   c0001cd3 <st_word>
c0006a03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a07:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a0a:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a0d:	a8 10                	test   al,0x10
c0006a0f:	75 06                	jne    c0006a17 <f_rename+0x18e>
c0006a11:	83 c8 20             	or     eax,0x20
c0006a14:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a17:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1e:	e8 9c d1 ff ff       	call   c0003bbf <store_xdir>
c0006a23:	85 c0                	test   eax,eax
c0006a25:	0f 84 1c 01 00 00    	je     c0006b47 <f_rename+0x2be>
c0006a2b:	e9 2d 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c0006a30:	b9 20 00 00 00       	mov    ecx,0x20
c0006a35:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a40:	e8 9b b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a45:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a4a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a4e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a55:	e8 86 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a5a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a61:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a68:	e8 fa e3 ff ff       	call   c0004e67 <follow_path>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	75 27                	jne    c0006a98 <f_rename+0x20f>
c0006a71:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a75:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a7c:	0f 85 f3 fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a82:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a89:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a90:	0f 85 df fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a96:	eb 09                	jmp    c0006aa1 <f_rename+0x218>
c0006a98:	83 f8 04             	cmp    eax,0x4
c0006a9b:	0f 85 bc 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006aa1:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006aa8:	e8 3b d8 ff ff       	call   c00042e8 <dir_register>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	0f 85 a8 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006ab5:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006abc:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac1:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ac4:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ac8:	e8 13 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006acd:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad1:	a8 10                	test   al,0x10
c0006ad3:	75 03                	jne    c0006ad8 <f_rename+0x24f>
c0006ad5:	83 c8 20             	or     eax,0x20
c0006ad8:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006adb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006adf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ae3:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ae7:	74 5e                	je     c0006b47 <f_rename+0x2be>
c0006ae9:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006af4:	74 51                	je     c0006b47 <f_rename+0x2be>
c0006af6:	89 f2                	mov    edx,esi
c0006af8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006afc:	8a 07                	mov    al,BYTE PTR [edi]
c0006afe:	e8 d9 e2 ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006b03:	89 c2                	mov    edx,eax
c0006b05:	89 f8                	mov    eax,edi
c0006b07:	e8 ee b3 ff ff       	call   c0001efa <clst2sect>
c0006b0c:	89 c6                	mov    esi,eax
c0006b0e:	89 d1                	mov    ecx,edx
c0006b10:	b8 02 00 00 00       	mov    eax,0x2
c0006b15:	09 f2                	or     edx,esi
c0006b17:	74 44                	je     c0006b5d <f_rename+0x2d4>
c0006b19:	89 f2                	mov    edx,esi
c0006b1b:	89 f8                	mov    eax,edi
c0006b1d:	e8 1d b9 ff ff       	call   c000243f <move_window>
c0006b22:	85 c0                	test   eax,eax
c0006b24:	75 37                	jne    c0006b5d <f_rename+0x2d4>
c0006b26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b2a:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b2e:	75 17                	jne    c0006b47 <f_rename+0x2be>
c0006b30:	8d 50 74             	lea    edx,[eax+0x74]
c0006b33:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b3a:	e8 c6 e2 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006b3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b43:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b47:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b4b:	e8 f4 d0 ff ff       	call   c0003c44 <dir_remove>
c0006b50:	85 c0                	test   eax,eax
c0006b52:	75 09                	jne    c0006b5d <f_rename+0x2d4>
c0006b54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b58:	e8 0d da ff ff       	call   c000456a <sync_fs>
c0006b5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b61:	83 ec 0c             	sub    esp,0xc
c0006b64:	53                   	push   ebx
c0006b65:	e8 40 19 00 00       	call   c00084aa <ff_memfree>
c0006b6a:	83 c4 10             	add    esp,0x10
c0006b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b71:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b77:	5b                   	pop    ebx
c0006b78:	5e                   	pop    esi
c0006b79:	5f                   	pop    edi
c0006b7a:	5d                   	pop    ebp
c0006b7b:	c3                   	ret    

c0006b7c <f_chmod>:
c0006b7c:	57                   	push   edi
c0006b7d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b82:	56                   	push   esi
c0006b83:	53                   	push   ebx
c0006b84:	83 ec 60             	sub    esp,0x60
c0006b87:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b8b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b8f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b93:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b97:	e8 55 bb ff ff       	call   c00026f1 <mount_volume>
c0006b9c:	85 c0                	test   eax,eax
c0006b9e:	0f 85 af 00 00 00    	jne    c0006c53 <f_chmod+0xd7>
c0006ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba8:	83 ec 0c             	sub    esp,0xc
c0006bab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006baf:	68 60 04 00 00       	push   0x460
c0006bb4:	e8 db 18 00 00       	call   c0008494 <ff_memalloc>
c0006bb9:	83 c4 10             	add    esp,0x10
c0006bbc:	89 c6                	mov    esi,eax
c0006bbe:	b8 11 00 00 00       	mov    eax,0x11
c0006bc3:	85 f6                	test   esi,esi
c0006bc5:	0f 84 88 00 00 00    	je     c0006c53 <f_chmod+0xd7>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bdb:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bdf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be3:	e8 7f e2 ff ff       	call   c0004e67 <follow_path>
c0006be8:	85 c0                	test   eax,eax
c0006bea:	75 53                	jne    c0006c3f <f_chmod+0xc3>
c0006bec:	b8 06 00 00 00       	mov    eax,0x6
c0006bf1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bf6:	75 47                	jne    c0006c3f <f_chmod+0xc3>
c0006bf8:	89 f9                	mov    ecx,edi
c0006bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfe:	83 e1 27             	and    ecx,0x27
c0006c01:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c04:	75 1d                	jne    c0006c23 <f_chmod+0xa7>
c0006c06:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c09:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c0c:	21 cb                	and    ebx,ecx
c0006c0e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c11:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c14:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c18:	e8 a2 cf ff ff       	call   c0003bbf <store_xdir>
c0006c1d:	85 c0                	test   eax,eax
c0006c1f:	75 1e                	jne    c0006c3f <f_chmod+0xc3>
c0006c21:	eb 13                	jmp    c0006c36 <f_chmod+0xba>
c0006c23:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c27:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2a:	21 cb                	and    ebx,ecx
c0006c2c:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2f:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c32:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	e8 2b d9 ff ff       	call   c000456a <sync_fs>
c0006c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	56                   	push   esi
c0006c47:	e8 5e 18 00 00       	call   c00084aa <ff_memfree>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c53:	83 c4 60             	add    esp,0x60
c0006c56:	5b                   	pop    ebx
c0006c57:	5e                   	pop    esi
c0006c58:	5f                   	pop    edi
c0006c59:	c3                   	ret    

c0006c5a <f_utime>:
c0006c5a:	56                   	push   esi
c0006c5b:	b9 02 00 00 00       	mov    ecx,0x2
c0006c60:	53                   	push   ebx
c0006c61:	83 ec 64             	sub    esp,0x64
c0006c64:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c68:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c70:	e8 7c ba ff ff       	call   c00026f1 <mount_volume>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	0f 85 b5 00 00 00    	jne    c0006d32 <f_utime+0xd8>
c0006c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c81:	83 ec 0c             	sub    esp,0xc
c0006c84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c88:	68 60 04 00 00       	push   0x460
c0006c8d:	e8 02 18 00 00       	call   c0008494 <ff_memalloc>
c0006c92:	83 c4 10             	add    esp,0x10
c0006c95:	89 c3                	mov    ebx,eax
c0006c97:	b8 11 00 00 00       	mov    eax,0x11
c0006c9c:	85 db                	test   ebx,ebx
c0006c9e:	0f 84 8e 00 00 00    	je     c0006d32 <f_utime+0xd8>
c0006ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cae:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cb4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 a6 e1 ff ff       	call   c0004e67 <follow_path>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 59                	jne    c0006d1e <f_utime+0xc4>
c0006cc5:	b8 06 00 00 00       	mov    eax,0x6
c0006cca:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ccf:	75 4d                	jne    c0006d1e <f_utime+0xc4>
c0006cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd5:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cd9:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cdd:	c1 e2 10             	shl    edx,0x10
c0006ce0:	09 ca                	or     edx,ecx
c0006ce2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ce5:	75 1a                	jne    c0006d01 <f_utime+0xa7>
c0006ce7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cea:	83 c0 0c             	add    eax,0xc
c0006ced:	e8 e5 af ff ff       	call   c0001cd7 <st_dword>
c0006cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cf6:	e8 c4 ce ff ff       	call   c0003bbf <store_xdir>
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	75 1f                	jne    c0006d1e <f_utime+0xc4>
c0006cff:	eb 14                	jmp    c0006d15 <f_utime+0xbb>
c0006d01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d05:	83 c0 16             	add    eax,0x16
c0006d08:	e8 ca af ff ff       	call   c0001cd7 <st_dword>
c0006d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d11:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	e8 4c d8 ff ff       	call   c000456a <sync_fs>
c0006d1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d22:	83 ec 0c             	sub    esp,0xc
c0006d25:	53                   	push   ebx
c0006d26:	e8 7f 17 00 00       	call   c00084aa <ff_memfree>
c0006d2b:	83 c4 10             	add    esp,0x10
c0006d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d32:	83 c4 64             	add    esp,0x64
c0006d35:	5b                   	pop    ebx
c0006d36:	5e                   	pop    esi
c0006d37:	c3                   	ret    

c0006d38 <f_getlabel>:
c0006d38:	55                   	push   ebp
c0006d39:	31 c9                	xor    ecx,ecx
c0006d3b:	57                   	push   edi
c0006d3c:	56                   	push   esi
c0006d3d:	53                   	push   ebx
c0006d3e:	83 ec 6c             	sub    esp,0x6c
c0006d41:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d45:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d4c:	e8 a0 b9 ff ff       	call   c00026f1 <mount_volume>
c0006d51:	89 c6                	mov    esi,eax
c0006d53:	85 c0                	test   eax,eax
c0006d55:	0f 85 c1 01 00 00    	jne    c0006f1c <f_getlabel+0x1e4>
c0006d5b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d63:	0f 84 5f 01 00 00    	je     c0006ec8 <f_getlabel+0x190>
c0006d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6d:	31 d2                	xor    edx,edx
c0006d6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d7f:	e8 39 c4 ff ff       	call   c00031bd <dir_sdi>
c0006d84:	85 c0                	test   eax,eax
c0006d86:	0f 85 2d 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006d8c:	ba 01 00 00 00       	mov    edx,0x1
c0006d91:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d95:	e8 33 cc ff ff       	call   c00039cd <dir_read>
c0006d9a:	85 c0                	test   eax,eax
c0006d9c:	0f 85 17 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006da6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006da9:	74 09                	je     c0006db4 <f_getlabel+0x7c>
c0006dab:	31 db                	xor    ebx,ebx
c0006dad:	31 c9                	xor    ecx,ecx
c0006daf:	e9 c8 00 00 00       	jmp    c0006e7c <f_getlabel+0x144>
c0006db4:	31 ed                	xor    ebp,ebp
c0006db6:	31 db                	xor    ebx,ebx
c0006db8:	31 ff                	xor    edi,edi
c0006dba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dc2:	39 fa                	cmp    edx,edi
c0006dc4:	76 4b                	jbe    c0006e11 <f_getlabel+0xd9>
c0006dc6:	47                   	inc    edi
c0006dc7:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dca:	01 d0                	add    eax,edx
c0006dcc:	e8 90 ae ff ff       	call   c0001c61 <ld_word>
c0006dd1:	66 85 ed             	test   bp,bp
c0006dd4:	75 0d                	jne    c0006de3 <f_getlabel+0xab>
c0006dd6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ddc:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de1:	76 28                	jbe    c0006e0b <f_getlabel+0xd3>
c0006de3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dea:	89 e9                	mov    ecx,ebp
c0006dec:	01 da                	add    edx,ebx
c0006dee:	c1 e1 10             	shl    ecx,0x10
c0006df1:	0f b7 c0             	movzx  eax,ax
c0006df4:	09 c8                	or     eax,ecx
c0006df6:	b9 04 00 00 00       	mov    ecx,0x4
c0006dfb:	e8 01 b0 ff ff       	call   c0001e01 <put_utf>
c0006e00:	84 c0                	test   al,al
c0006e02:	74 0b                	je     c0006e0f <f_getlabel+0xd7>
c0006e04:	0f b6 c0             	movzx  eax,al
c0006e07:	01 c3                	add    ebx,eax
c0006e09:	31 c0                	xor    eax,eax
c0006e0b:	89 c5                	mov    ebp,eax
c0006e0d:	eb ab                	jmp    c0006dba <f_getlabel+0x82>
c0006e0f:	31 db                	xor    ebx,ebx
c0006e11:	66 85 ed             	test   bp,bp
c0006e14:	74 02                	je     c0006e18 <f_getlabel+0xe0>
c0006e16:	31 db                	xor    ebx,ebx
c0006e18:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e1f:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e23:	e9 a0 00 00 00       	jmp    c0006ec8 <f_getlabel+0x190>
c0006e28:	83 ff 0b             	cmp    edi,0xb
c0006e2b:	74 11                	je     c0006e3e <f_getlabel+0x106>
c0006e2d:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e36:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e39:	c1 e0 08             	shl    eax,0x8
c0006e3c:	09 c2                	or     edx,eax
c0006e3e:	0f b7 d2             	movzx  edx,dx
c0006e41:	50                   	push   eax
c0006e42:	50                   	push   eax
c0006e43:	68 b5 01 00 00       	push   0x1b5
c0006e48:	52                   	push   edx
c0006e49:	e8 03 17 00 00       	call   c0008551 <ff_oem2uni>
c0006e4e:	83 c4 10             	add    esp,0x10
c0006e51:	66 85 c0             	test   ax,ax
c0006e54:	74 46                	je     c0006e9c <f_getlabel+0x164>
c0006e56:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e5d:	0f b7 c0             	movzx  eax,ax
c0006e60:	01 da                	add    edx,ebx
c0006e62:	b9 04 00 00 00       	mov    ecx,0x4
c0006e67:	e8 95 af ff ff       	call   c0001e01 <put_utf>
c0006e6c:	84 c0                	test   al,al
c0006e6e:	74 2c                	je     c0006e9c <f_getlabel+0x164>
c0006e70:	0f b6 c0             	movzx  eax,al
c0006e73:	01 c3                	add    ebx,eax
c0006e75:	83 ff 0b             	cmp    edi,0xb
c0006e78:	74 24                	je     c0006e9e <f_getlabel+0x166>
c0006e7a:	89 f9                	mov    ecx,edi
c0006e7c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e80:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e83:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e88:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e91:	e8 9f ae ff ff       	call   c0001d35 <dbc_1st>
c0006e96:	85 c0                	test   eax,eax
c0006e98:	74 a4                	je     c0006e3e <f_getlabel+0x106>
c0006e9a:	eb 8c                	jmp    c0006e28 <f_getlabel+0xf0>
c0006e9c:	31 db                	xor    ebx,ebx
c0006e9e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ea5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ea8:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eaf:	74 17                	je     c0006ec8 <f_getlabel+0x190>
c0006eb1:	4b                   	dec    ebx
c0006eb2:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006eb5:	74 ee                	je     c0006ea5 <f_getlabel+0x16d>
c0006eb7:	eb 0f                	jmp    c0006ec8 <f_getlabel+0x190>
c0006eb9:	83 f8 04             	cmp    eax,0x4
c0006ebc:	75 5c                	jne    c0006f1a <f_getlabel+0x1e2>
c0006ebe:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ec5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ec8:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed0:	74 4a                	je     c0006f1c <f_getlabel+0x1e4>
c0006ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ed9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006edc:	e8 5e b5 ff ff       	call   c000243f <move_window>
c0006ee1:	89 c6                	mov    esi,eax
c0006ee3:	85 c0                	test   eax,eax
c0006ee5:	75 35                	jne    c0006f1c <f_getlabel+0x1e4>
c0006ee7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eeb:	b8 43 00 00 00       	mov    eax,0x43
c0006ef0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ef2:	80 f9 03             	cmp    cl,0x3
c0006ef5:	74 0f                	je     c0006f06 <f_getlabel+0x1ce>
c0006ef7:	31 c0                	xor    eax,eax
c0006ef9:	80 f9 04             	cmp    cl,0x4
c0006efc:	0f 94 c0             	sete   al
c0006eff:	48                   	dec    eax
c0006f00:	83 e0 c3             	and    eax,0xffffffc3
c0006f03:	83 c0 64             	add    eax,0x64
c0006f06:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f0a:	e8 5f ad ff ff       	call   c0001c6e <ld_dword>
c0006f0f:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f16:	89 07                	mov    DWORD PTR [edi],eax
c0006f18:	eb 02                	jmp    c0006f1c <f_getlabel+0x1e4>
c0006f1a:	89 c6                	mov    esi,eax
c0006f1c:	83 c4 6c             	add    esp,0x6c
c0006f1f:	89 f0                	mov    eax,esi
c0006f21:	5b                   	pop    ebx
c0006f22:	5e                   	pop    esi
c0006f23:	5f                   	pop    edi
c0006f24:	5d                   	pop    ebp
c0006f25:	c3                   	ret    

c0006f26 <f_setlabel>:
c0006f26:	56                   	push   esi
c0006f27:	b9 02 00 00 00       	mov    ecx,0x2
c0006f2c:	53                   	push   ebx
c0006f2d:	83 ec 74             	sub    esp,0x74
c0006f30:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f34:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f3b:	e8 b1 b7 ff ff       	call   c00026f1 <mount_volume>
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	85 c0                	test   eax,eax
c0006f44:	0f 85 41 02 00 00    	jne    c000718b <f_setlabel+0x265>
c0006f4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f4e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f51:	0f 85 8e 00 00 00    	jne    c0006fe5 <f_setlabel+0xbf>
c0006f57:	b9 16 00 00 00       	mov    ecx,0x16
c0006f5c:	31 d2                	xor    edx,edx
c0006f5e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f62:	31 db                	xor    ebx,ebx
c0006f64:	e8 8c ad ff ff       	call   c0001cf5 <mem_set>
c0006f69:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f70:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f73:	0f 86 0a 01 00 00    	jbe    c0007083 <f_setlabel+0x15d>
c0006f79:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f80:	e8 b6 ad ff ff       	call   c0001d3b <tchar2uni>
c0006f85:	89 c6                	mov    esi,eax
c0006f87:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f8c:	76 2a                	jbe    c0006fb8 <f_setlabel+0x92>
c0006f8e:	83 f8 ff             	cmp    eax,0xffffffff
c0006f91:	74 05                	je     c0006f98 <f_setlabel+0x72>
c0006f93:	83 fb 09             	cmp    ebx,0x9
c0006f96:	76 0a                	jbe    c0006fa2 <f_setlabel+0x7c>
c0006f98:	be 06 00 00 00       	mov    esi,0x6
c0006f9d:	e9 e9 01 00 00       	jmp    c000718b <f_setlabel+0x265>
c0006fa2:	89 c2                	mov    edx,eax
c0006fa4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fa8:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fab:	c1 ea 10             	shr    edx,0x10
c0006fae:	01 c8                	add    eax,ecx
c0006fb0:	43                   	inc    ebx
c0006fb1:	e8 1d ad ff ff       	call   c0001cd3 <st_word>
c0006fb6:	eb 04                	jmp    c0006fbc <f_setlabel+0x96>
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	74 dc                	je     c0006f98 <f_setlabel+0x72>
c0006fbc:	89 f2                	mov    edx,esi
c0006fbe:	b8 b7 93 02 c0       	mov    eax,0xc00293b7
c0006fc3:	e8 5b ad ff ff       	call   c0001d23 <chk_chr>
c0006fc8:	85 c0                	test   eax,eax
c0006fca:	75 cc                	jne    c0006f98 <f_setlabel+0x72>
c0006fcc:	83 fb 0a             	cmp    ebx,0xa
c0006fcf:	77 c7                	ja     c0006f98 <f_setlabel+0x72>
c0006fd1:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fd4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fd8:	0f b7 d6             	movzx  edx,si
c0006fdb:	01 c8                	add    eax,ecx
c0006fdd:	43                   	inc    ebx
c0006fde:	e8 f0 ac ff ff       	call   c0001cd3 <st_word>
c0006fe3:	eb 84                	jmp    c0006f69 <f_setlabel+0x43>
c0006fe5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fea:	ba 20 00 00 00       	mov    edx,0x20
c0006fef:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ff3:	31 db                	xor    ebx,ebx
c0006ff5:	e8 fb ac ff ff       	call   c0001cf5 <mem_set>
c0006ffa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007001:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0007004:	76 60                	jbe    c0007066 <f_setlabel+0x140>
c0007006:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c000700d:	e8 29 ad ff ff       	call   c0001d3b <tchar2uni>
c0007012:	3d ff ff 00 00       	cmp    eax,0xffff
c0007017:	0f 87 7b ff ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000701d:	83 ec 0c             	sub    esp,0xc
c0007020:	50                   	push   eax
c0007021:	e8 97 15 00 00       	call   c00085bd <ff_wtoupper>
c0007026:	5a                   	pop    edx
c0007027:	59                   	pop    ecx
c0007028:	68 b5 01 00 00       	push   0x1b5
c000702d:	50                   	push   eax
c000702e:	e8 8e 14 00 00       	call   c00084c1 <ff_uni2oem>
c0007033:	83 c4 10             	add    esp,0x10
c0007036:	89 c6                	mov    esi,eax
c0007038:	66 85 c0             	test   ax,ax
c000703b:	0f 84 57 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007041:	0f b7 d0             	movzx  edx,ax
c0007044:	b8 b0 93 02 c0       	mov    eax,0xc00293b0
c0007049:	e8 d5 ac ff ff       	call   c0001d23 <chk_chr>
c000704e:	85 c0                	test   eax,eax
c0007050:	0f 85 42 ff ff ff    	jne    c0006f98 <f_setlabel+0x72>
c0007056:	66 81 fe ff 00       	cmp    si,0xff
c000705b:	0f 87 14 01 00 00    	ja     c0007175 <f_setlabel+0x24f>
c0007061:	e9 fa 00 00 00       	jmp    c0007160 <f_setlabel+0x23a>
c0007066:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000706b:	0f 84 27 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007071:	85 db                	test   ebx,ebx
c0007073:	74 0e                	je     c0007083 <f_setlabel+0x15d>
c0007075:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007078:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000707d:	75 04                	jne    c0007083 <f_setlabel+0x15d>
c000707f:	89 c3                	mov    ebx,eax
c0007081:	eb ee                	jmp    c0007071 <f_setlabel+0x14b>
c0007083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007087:	31 d2                	xor    edx,edx
c0007089:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000708d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007095:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007099:	e8 1f c1 ff ff       	call   c00031bd <dir_sdi>
c000709e:	89 c6                	mov    esi,eax
c00070a0:	85 c0                	test   eax,eax
c00070a2:	0f 85 e3 00 00 00    	jne    c000718b <f_setlabel+0x265>
c00070a8:	ba 01 00 00 00       	mov    edx,0x1
c00070ad:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b1:	e8 17 c9 ff ff       	call   c00039cd <dir_read>
c00070b6:	85 c0                	test   eax,eax
c00070b8:	75 21                	jne    c00070db <f_setlabel+0x1b5>
c00070ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070be:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070c2:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070c5:	74 5d                	je     c0007124 <f_setlabel+0x1fe>
c00070c7:	85 db                	test   ebx,ebx
c00070c9:	74 0b                	je     c00070d6 <f_setlabel+0x1b0>
c00070cb:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070d4:	eb 70                	jmp    c0007146 <f_setlabel+0x220>
c00070d6:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070d9:	eb 70                	jmp    c000714b <f_setlabel+0x225>
c00070db:	83 f8 04             	cmp    eax,0x4
c00070de:	75 7c                	jne    c000715c <f_setlabel+0x236>
c00070e0:	85 db                	test   ebx,ebx
c00070e2:	0f 84 a3 00 00 00    	je     c000718b <f_setlabel+0x265>
c00070e8:	ba 01 00 00 00       	mov    edx,0x1
c00070ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f1:	e8 51 ca ff ff       	call   c0003b47 <dir_alloc>
c00070f6:	89 c6                	mov    esi,eax
c00070f8:	85 c0                	test   eax,eax
c00070fa:	0f 85 8b 00 00 00    	jne    c000718b <f_setlabel+0x265>
c0007100:	31 d2                	xor    edx,edx
c0007102:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007106:	b9 20 00 00 00       	mov    ecx,0x20
c000710b:	e8 e5 ab ff ff       	call   c0001cf5 <mem_set>
c0007110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007114:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007117:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000711b:	75 18                	jne    c0007135 <f_setlabel+0x20f>
c000711d:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007120:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007124:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007127:	b9 16 00 00 00       	mov    ecx,0x16
c000712c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007130:	83 c0 02             	add    eax,0x2
c0007133:	eb 9b                	jmp    c00070d0 <f_setlabel+0x1aa>
c0007135:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007139:	b9 0b 00 00 00       	mov    ecx,0xb
c000713e:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007142:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007146:	e8 95 ab ff ff       	call   c0001ce0 <mem_cpy>
c000714b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000714f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	e8 0e d4 ff ff       	call   c000456a <sync_fs>
c000715c:	89 c6                	mov    esi,eax
c000715e:	eb 2b                	jmp    c000718b <f_setlabel+0x265>
c0007160:	83 fb 0a             	cmp    ebx,0xa
c0007163:	0f 87 2f fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c0007169:	89 f0                	mov    eax,esi
c000716b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000716f:	43                   	inc    ebx
c0007170:	e9 85 fe ff ff       	jmp    c0006ffa <f_setlabel+0xd4>
c0007175:	83 fb 09             	cmp    ebx,0x9
c0007178:	0f 87 1a fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000717e:	89 f0                	mov    eax,esi
c0007180:	66 c1 e8 08          	shr    ax,0x8
c0007184:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007188:	43                   	inc    ebx
c0007189:	eb de                	jmp    c0007169 <f_setlabel+0x243>
c000718b:	89 f0                	mov    eax,esi
c000718d:	83 c4 74             	add    esp,0x74
c0007190:	5b                   	pop    ebx
c0007191:	5e                   	pop    esi
c0007192:	c3                   	ret    

c0007193 <f_forward>:
c0007193:	55                   	push   ebp
c0007194:	57                   	push   edi
c0007195:	56                   	push   esi
c0007196:	53                   	push   ebx
c0007197:	83 ec 2c             	sub    esp,0x2c
c000719a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000719e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071ac:	89 d8                	mov    eax,ebx
c00071ae:	e8 b1 b1 ff ff       	call   c0002364 <validate>
c00071b3:	89 c5                	mov    ebp,eax
c00071b5:	85 c0                	test   eax,eax
c00071b7:	0f 85 aa 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c1:	85 ed                	test   ebp,ebp
c00071c3:	0f 85 9e 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071cd:	0f 84 8f 01 00 00    	je     c0007362 <f_forward+0x1cf>
c00071d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071dc:	bf 00 00 00 00       	mov    edi,0x0
c00071e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071e8:	89 d1                	mov    ecx,edx
c00071ea:	19 f9                	sbb    ecx,edi
c00071ec:	0f 83 cf 00 00 00    	jae    c00072c1 <f_forward+0x12e>
c00071f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071f6:	e9 c6 00 00 00       	jmp    c00072c1 <f_forward+0x12e>
c00071fb:	50                   	push   eax
c00071fc:	50                   	push   eax
c00071fd:	6a 00                	push   0x0
c00071ff:	6a 00                	push   0x0
c0007201:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007205:	83 c4 10             	add    esp,0x10
c0007208:	85 c0                	test   eax,eax
c000720a:	0f 84 57 01 00 00    	je     c0007367 <f_forward+0x1d4>
c0007210:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007213:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007217:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000721a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000721e:	89 d7                	mov    edi,edx
c0007220:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007223:	89 c6                	mov    esi,eax
c0007225:	0f ac fe 09          	shrd   esi,edi,0x9
c0007229:	21 ce                	and    esi,ecx
c000722b:	89 c1                	mov    ecx,eax
c000722d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007233:	0f 84 98 00 00 00    	je     c00072d1 <f_forward+0x13e>
c0007239:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000723d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007240:	89 c8                	mov    eax,ecx
c0007242:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007246:	e8 af ac ff ff       	call   c0001efa <clst2sect>
c000724b:	89 d7                	mov    edi,edx
c000724d:	09 c7                	or     edi,eax
c000724f:	0f 84 9e 00 00 00    	je     c00072f3 <f_forward+0x160>
c0007255:	31 ff                	xor    edi,edi
c0007257:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000725a:	01 c6                	add    esi,eax
c000725c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007260:	11 d7                	adc    edi,edx
c0007262:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007265:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007268:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000726c:	39 fa                	cmp    edx,edi
c000726e:	0f 85 a2 00 00 00    	jne    c0007316 <f_forward+0x183>
c0007274:	39 f0                	cmp    eax,esi
c0007276:	0f 85 9a 00 00 00    	jne    c0007316 <f_forward+0x183>
c000727c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000727f:	ba 00 02 00 00       	mov    edx,0x200
c0007284:	25 ff 01 00 00       	and    eax,0x1ff
c0007289:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000728d:	29 c2                	sub    edx,eax
c000728f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007292:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007295:	39 d1                	cmp    ecx,edx
c0007297:	76 02                	jbe    c000729b <f_forward+0x108>
c0007299:	89 d1                	mov    ecx,edx
c000729b:	8d 73 50             	lea    esi,[ebx+0x50]
c000729e:	52                   	push   edx
c000729f:	01 c6                	add    esi,eax
c00072a1:	52                   	push   edx
c00072a2:	51                   	push   ecx
c00072a3:	56                   	push   esi
c00072a4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	85 c0                	test   eax,eax
c00072ad:	74 44                	je     c00072f3 <f_forward+0x160>
c00072af:	31 ff                	xor    edi,edi
c00072b1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072b4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072b7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072bb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072bf:	01 07                	add    DWORD PTR [edi],eax
c00072c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072c6:	0f 85 2f ff ff ff    	jne    c00071fb <f_forward+0x68>
c00072cc:	e9 96 00 00 00       	jmp    c0007367 <f_forward+0x1d4>
c00072d1:	85 f6                	test   esi,esi
c00072d3:	0f 85 60 ff ff ff    	jne    c0007239 <f_forward+0xa6>
c00072d9:	89 d7                	mov    edi,edx
c00072db:	09 c7                	or     edi,eax
c00072dd:	75 05                	jne    c00072e4 <f_forward+0x151>
c00072df:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072e2:	eb 0a                	jmp    c00072ee <f_forward+0x15b>
c00072e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072e7:	89 d8                	mov    eax,ebx
c00072e9:	e8 d9 bc ff ff       	call   c0002fc7 <get_fat>
c00072ee:	83 f8 01             	cmp    eax,0x1
c00072f1:	77 0b                	ja     c00072fe <f_forward+0x16b>
c00072f3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072f7:	bd 02 00 00 00       	mov    ebp,0x2
c00072fc:	eb 69                	jmp    c0007367 <f_forward+0x1d4>
c00072fe:	83 f8 ff             	cmp    eax,0xffffffff
c0007301:	75 0b                	jne    c000730e <f_forward+0x17b>
c0007303:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007307:	bd 01 00 00 00       	mov    ebp,0x1
c000730c:	eb 59                	jmp    c0007367 <f_forward+0x1d4>
c000730e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007311:	e9 23 ff ff ff       	jmp    c0007239 <f_forward+0xa6>
c0007316:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000731a:	79 20                	jns    c000733c <f_forward+0x1a9>
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	6a 01                	push   0x1
c0007321:	52                   	push   edx
c0007322:	50                   	push   eax
c0007323:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007327:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000732b:	50                   	push   eax
c000732c:	e8 fb a8 ff ff       	call   c0001c2c <disk_write>
c0007331:	83 c4 20             	add    esp,0x20
c0007334:	85 c0                	test   eax,eax
c0007336:	75 cb                	jne    c0007303 <f_forward+0x170>
c0007338:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000733c:	83 ec 0c             	sub    esp,0xc
c000733f:	6a 01                	push   0x1
c0007341:	57                   	push   edi
c0007342:	56                   	push   esi
c0007343:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007347:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000734b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000734f:	50                   	push   eax
c0007350:	e8 c1 a8 ff ff       	call   c0001c16 <disk_read>
c0007355:	83 c4 20             	add    esp,0x20
c0007358:	85 c0                	test   eax,eax
c000735a:	0f 84 1c ff ff ff    	je     c000727c <f_forward+0xe9>
c0007360:	eb a1                	jmp    c0007303 <f_forward+0x170>
c0007362:	bd 07 00 00 00       	mov    ebp,0x7
c0007367:	83 c4 2c             	add    esp,0x2c
c000736a:	89 e8                	mov    eax,ebp
c000736c:	5b                   	pop    ebx
c000736d:	5e                   	pop    esi
c000736e:	5f                   	pop    edi
c000736f:	5d                   	pop    ebp
c0007370:	c3                   	ret    

c0007371 <f_mkfs>:
c0007371:	55                   	push   ebp
c0007372:	57                   	push   edi
c0007373:	56                   	push   esi
c0007374:	53                   	push   ebx
c0007375:	bb 0b 00 00 00       	mov    ebx,0xb
c000737a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007380:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007387:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000738e:	e8 b0 ae ff ff       	call   c0002243 <get_ldnumber>
c0007393:	85 c0                	test   eax,eax
c0007395:	0f 88 ec 10 00 00    	js     c0008487 <f_mkfs+0x1116>
c000739b:	8b 14 85 60 e5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1aa0]
c00073a2:	85 d2                	test   edx,edx
c00073a4:	74 03                	je     c00073a9 <f_mkfs+0x38>
c00073a6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073a9:	85 f6                	test   esi,esi
c00073ab:	75 05                	jne    c00073b2 <f_mkfs+0x41>
c00073ad:	be a0 93 02 c0       	mov    esi,0xc00293a0
c00073b2:	83 ec 0c             	sub    esp,0xc
c00073b5:	0f b6 c0             	movzx  eax,al
c00073b8:	bb 03 00 00 00       	mov    ebx,0x3
c00073bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073c5:	e8 49 a8 ff ff       	call   c0001c13 <disk_initialize>
c00073ca:	83 c4 10             	add    esp,0x10
c00073cd:	a8 01                	test   al,0x1
c00073cf:	0f 85 b2 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073d5:	bb 0a 00 00 00       	mov    ebx,0xa
c00073da:	a8 04                	test   al,0x4
c00073dc:	0f 85 a5 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073e5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073e9:	85 c0                	test   eax,eax
c00073eb:	75 20                	jne    c000740d <f_mkfs+0x9c>
c00073ed:	51                   	push   ecx
c00073ee:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073f2:	50                   	push   eax
c00073f3:	6a 03                	push   0x3
c00073f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073f9:	e8 44 a8 ff ff       	call   c0001c42 <disk_ioctl>
c00073fe:	83 c4 10             	add    esp,0x10
c0007401:	85 c0                	test   eax,eax
c0007403:	74 08                	je     c000740d <f_mkfs+0x9c>
c0007405:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000740d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007411:	8d 42 ff             	lea    eax,[edx-0x1]
c0007414:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007419:	77 04                	ja     c000741f <f_mkfs+0xae>
c000741b:	85 c2                	test   edx,eax
c000741d:	74 08                	je     c0007427 <f_mkfs+0xb6>
c000741f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007427:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000742a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000742e:	48                   	dec    eax
c000742f:	3c 01                	cmp    al,0x1
c0007431:	76 05                	jbe    c0007438 <f_mkfs+0xc7>
c0007433:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007438:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000743b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000743f:	48                   	dec    eax
c0007440:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007445:	77 07                	ja     c000744e <f_mkfs+0xdd>
c0007447:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000744c:	74 08                	je     c0007456 <f_mkfs+0xe5>
c000744e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007456:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007459:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000745f:	77 07                	ja     c0007468 <f_mkfs+0xf7>
c0007461:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007464:	85 d8                	test   eax,ebx
c0007466:	74 02                	je     c000746a <f_mkfs+0xf9>
c0007468:	31 db                	xor    ebx,ebx
c000746a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007475:	77 0a                	ja     c0007481 <f_mkfs+0x110>
c0007477:	bb 11 00 00 00       	mov    ebx,0x11
c000747c:	e9 06 10 00 00       	jmp    c0008487 <f_mkfs+0x1116>
c0007481:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007488:	8b 36                	mov    esi,DWORD PTR [esi]
c000748a:	85 ed                	test   ebp,ebp
c000748c:	75 1e                	jne    c00074ac <f_mkfs+0x13b>
c000748e:	83 ec 0c             	sub    esp,0xc
c0007491:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007498:	25 00 fe ff ff       	and    eax,0xfffffe00
c000749d:	50                   	push   eax
c000749e:	e8 f1 0f 00 00       	call   c0008494 <ff_memalloc>
c00074a3:	83 c4 10             	add    esp,0x10
c00074a6:	89 c5                	mov    ebp,eax
c00074a8:	85 c0                	test   eax,eax
c00074aa:	74 cb                	je     c0007477 <f_mkfs+0x106>
c00074ac:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074b4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074bc:	52                   	push   edx
c00074bd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c1:	50                   	push   eax
c00074c2:	6a 01                	push   0x1
c00074c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074c8:	e8 75 a7 ff ff       	call   c0001c42 <disk_ioctl>
c00074cd:	83 c4 10             	add    esp,0x10
c00074d0:	85 c0                	test   eax,eax
c00074d2:	0f 85 4a 0f 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00074d8:	89 f1                	mov    ecx,esi
c00074da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074e2:	83 e1 0f             	and    ecx,0xf
c00074e5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074ed:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f1:	83 e6 08             	and    esi,0x8
c00074f4:	75 56                	jne    c000754c <f_mkfs+0x1db>
c00074f6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074fa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074fe:	83 ff 00             	cmp    edi,0x0
c0007501:	76 20                	jbe    c0007523 <f_mkfs+0x1b2>
c0007503:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007508:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007510:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007516:	83 d7 ff             	adc    edi,0xffffffff
c0007519:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000751d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007521:	eb 21                	jmp    c0007544 <f_mkfs+0x1d3>
c0007523:	ba 3f 00 00 00       	mov    edx,0x3f
c0007528:	39 f2                	cmp    edx,esi
c000752a:	19 f8                	sbb    eax,edi
c000752c:	73 1e                	jae    c000754c <f_mkfs+0x1db>
c000752e:	83 c6 c1             	add    esi,0xffffffc1
c0007531:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007539:	83 d7 ff             	adc    edi,0xffffffff
c000753c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007540:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007544:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000754c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007550:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007554:	89 04 24             	mov    DWORD PTR [esp],eax
c0007557:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000755b:	31 c0                	xor    eax,eax
c000755d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007562:	89 c7                	mov    edi,eax
c0007564:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007567:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000756b:	0f 83 c5 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c0007571:	89 df                	mov    edi,ebx
c0007573:	c1 ef 09             	shr    edi,0x9
c0007576:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000757a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007581:	c1 ef 09             	shr    edi,0x9
c0007584:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007589:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000758d:	74 29                	je     c00075b8 <f_mkfs+0x247>
c000758f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007595:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000759a:	0f 97 c2             	seta   dl
c000759d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075a4:	0f 92 c0             	setb   al
c00075a7:	08 c2                	or     dl,al
c00075a9:	75 5b                	jne    c0007606 <f_mkfs+0x295>
c00075ab:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075af:	83 e0 07             	and    eax,0x7
c00075b2:	3c 04                	cmp    al,0x4
c00075b4:	74 50                	je     c0007606 <f_mkfs+0x295>
c00075b6:	eb 1b                	jmp    c00075d3 <f_mkfs+0x262>
c00075b8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075bd:	0f 87 73 0a 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c00075c3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075c9:	76 08                	jbe    c00075d3 <f_mkfs+0x262>
c00075cb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075d7:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075db:	83 e0 01             	and    eax,0x1
c00075de:	80 e1 02             	and    cl,0x2
c00075e1:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075e5:	74 0d                	je     c00075f4 <f_mkfs+0x283>
c00075e7:	84 c0                	test   al,al
c00075e9:	0f 84 53 09 00 00    	je     c0007f42 <f_mkfs+0xbd1>
c00075ef:	e9 12 08 00 00       	jmp    c0007e06 <f_mkfs+0xa95>
c00075f4:	bb 13 00 00 00       	mov    ebx,0x13
c00075f9:	84 c0                	test   al,al
c00075fb:	0f 85 05 08 00 00    	jne    c0007e06 <f_mkfs+0xa95>
c0007601:	e9 39 0e 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0007606:	31 c0                	xor    eax,eax
c0007608:	ba ff 0f 00 00       	mov    edx,0xfff
c000760d:	89 c7                	mov    edi,eax
c000760f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007612:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007616:	0f 83 1a 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c000761c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007622:	77 39                	ja     c000765d <f_mkfs+0x2ec>
c0007624:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007629:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007631:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007634:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007638:	73 08                	jae    c0007642 <f_mkfs+0x2d1>
c000763a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007642:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007647:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000764a:	b8 00 00 00 00       	mov    eax,0x0
c000764f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007653:	73 08                	jae    c000765d <f_mkfs+0x2ec>
c0007655:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000765d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007665:	83 c0 20             	add    eax,0x20
c0007668:	83 d2 00             	adc    edx,0x0
c000766b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007677:	31 d2                	xor    edx,edx
c0007679:	31 ff                	xor    edi,edi
c000767b:	52                   	push   edx
c000767c:	89 fb                	mov    ebx,edi
c000767e:	50                   	push   eax
c000767f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007683:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007687:	e8 50 f3 01 00       	call   c00269dc <__udivdi3>
c000768c:	83 c4 10             	add    esp,0x10
c000768f:	c1 e0 02             	shl    eax,0x2
c0007692:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007696:	05 07 02 00 00       	add    eax,0x207
c000769b:	89 f1                	mov    ecx,esi
c000769d:	c1 e8 09             	shr    eax,0x9
c00076a0:	83 c1 ff             	add    ecx,0xffffffff
c00076a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076a7:	83 d3 ff             	adc    ebx,0xffffffff
c00076aa:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076ae:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076b2:	31 d2                	xor    edx,edx
c00076b4:	01 c8                	add    eax,ecx
c00076b6:	11 da                	adc    edx,ebx
c00076b8:	89 c1                	mov    ecx,eax
c00076ba:	f7 de                	neg    esi
c00076bc:	89 d0                	mov    eax,edx
c00076be:	83 d7 00             	adc    edi,0x0
c00076c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076c5:	f7 df                	neg    edi
c00076c7:	21 f1                	and    ecx,esi
c00076c9:	21 f8                	and    eax,edi
c00076cb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076d7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076db:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076e2:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076e6:	0f ac d0 01          	shrd   eax,edx,0x1
c00076ea:	89 df                	mov    edi,ebx
c00076ec:	d1 ea                	shr    edx,1
c00076ee:	39 c1                	cmp    ecx,eax
c00076f0:	19 d7                	sbb    edi,edx
c00076f2:	0f 83 3e 09 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c00076f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076fc:	31 d2                	xor    edx,edx
c00076fe:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007702:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007706:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000770a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000770d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007711:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007715:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007719:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000771d:	83 f8 0f             	cmp    eax,0xf
c0007720:	0f 86 10 09 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007726:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000772e:	0f 87 02 09 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007734:	31 d2                	xor    edx,edx
c0007736:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000773a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007742:	83 c0 07             	add    eax,0x7
c0007745:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000774d:	c1 e8 03             	shr    eax,0x3
c0007750:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007757:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000775b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000775f:	c1 e0 09             	shl    eax,0x9
c0007762:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007766:	48                   	dec    eax
c0007767:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000776b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000776f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007773:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007777:	31 d2                	xor    edx,edx
c0007779:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000777d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007784:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007788:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000778d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007791:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007795:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007799:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000779d:	31 ff                	xor    edi,edi
c000779f:	31 f6                	xor    esi,esi
c00077a1:	31 db                	xor    ebx,ebx
c00077a3:	85 ff                	test   edi,edi
c00077a5:	74 05                	je     c00077ac <f_mkfs+0x43b>
c00077a7:	4f                   	dec    edi
c00077a8:	74 44                	je     c00077ee <f_mkfs+0x47d>
c00077aa:	eb 4f                	jmp    c00077fb <f_mkfs+0x48a>
c00077ac:	83 ec 0c             	sub    esp,0xc
c00077af:	0f b7 c3             	movzx  eax,bx
c00077b2:	50                   	push   eax
c00077b3:	e8 05 0e 00 00       	call   c00085bd <ff_wtoupper>
c00077b8:	83 c4 10             	add    esp,0x10
c00077bb:	89 c1                	mov    ecx,eax
c00077bd:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c0:	66 39 c3             	cmp    bx,ax
c00077c3:	75 3e                	jne    c0007803 <f_mkfs+0x492>
c00077c5:	be 01 00 00 00       	mov    esi,0x1
c00077ca:	89 df                	mov    edi,ebx
c00077cc:	66 01 f7             	add    di,si
c00077cf:	75 07                	jne    c00077d8 <f_mkfs+0x467>
c00077d1:	83 fe 7f             	cmp    esi,0x7f
c00077d4:	77 31                	ja     c0007807 <f_mkfs+0x496>
c00077d6:	eb 16                	jmp    c00077ee <f_mkfs+0x47d>
c00077d8:	83 ec 0c             	sub    esp,0xc
c00077db:	0f b7 ff             	movzx  edi,di
c00077de:	57                   	push   edi
c00077df:	e8 d9 0d 00 00       	call   c00085bd <ff_wtoupper>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	39 c7                	cmp    edi,eax
c00077e9:	75 e6                	jne    c00077d1 <f_mkfs+0x460>
c00077eb:	46                   	inc    esi
c00077ec:	eb dc                	jmp    c00077ca <f_mkfs+0x459>
c00077ee:	31 c0                	xor    eax,eax
c00077f0:	89 d9                	mov    ecx,ebx
c00077f2:	4e                   	dec    esi
c00077f3:	0f 95 c0             	setne  al
c00077f6:	43                   	inc    ebx
c00077f7:	89 c7                	mov    edi,eax
c00077f9:	eb 14                	jmp    c000780f <f_mkfs+0x49e>
c00077fb:	89 f1                	mov    ecx,esi
c00077fd:	01 f3                	add    ebx,esi
c00077ff:	31 ff                	xor    edi,edi
c0007801:	eb 0c                	jmp    c000780f <f_mkfs+0x49e>
c0007803:	89 d3                	mov    ebx,edx
c0007805:	eb 08                	jmp    c000780f <f_mkfs+0x49e>
c0007807:	bf 02 00 00 00       	mov    edi,0x2
c000780c:	83 c9 ff             	or     ecx,0xffffffff
c000780f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007813:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007816:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000781a:	0f b6 c1             	movzx  eax,cl
c000781d:	e8 3a a9 ff ff       	call   c000215c <xsum32>
c0007822:	66 c1 e9 08          	shr    cx,0x8
c0007826:	89 c2                	mov    edx,eax
c0007828:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000782f:	0f b7 c1             	movzx  eax,cx
c0007832:	e8 25 a9 ff ff       	call   c000215c <xsum32>
c0007837:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000783c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007840:	66 85 db             	test   bx,bx
c0007843:	74 1f                	je     c0007864 <f_mkfs+0x4f3>
c0007845:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007848:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000784f:	83 c0 02             	add    eax,0x2
c0007852:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007858:	39 c2                	cmp    edx,eax
c000785a:	74 08                	je     c0007864 <f_mkfs+0x4f3>
c000785c:	89 04 24             	mov    DWORD PTR [esp],eax
c000785f:	e9 3f ff ff ff       	jmp    c00077a3 <f_mkfs+0x432>
c0007864:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007867:	83 ec 0c             	sub    esp,0xc
c000786a:	05 01 02 00 00       	add    eax,0x201
c000786f:	c1 e8 09             	shr    eax,0x9
c0007872:	50                   	push   eax
c0007873:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007877:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787f:	55                   	push   ebp
c0007880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007884:	e8 a3 a3 ff ff       	call   c0001c2c <disk_write>
c0007889:	83 c4 20             	add    esp,0x20
c000788c:	85 c0                	test   eax,eax
c000788e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007891:	0f 85 8b 0b 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007897:	89 d0                	mov    eax,edx
c0007899:	31 d2                	xor    edx,edx
c000789b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000789f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078a3:	66 85 db             	test   bx,bx
c00078a6:	74 04                	je     c00078ac <f_mkfs+0x53b>
c00078a8:	31 c0                	xor    eax,eax
c00078aa:	eb b0                	jmp    c000785c <f_mkfs+0x4eb>
c00078ac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078b4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078b8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078be:	31 d2                	xor    edx,edx
c00078c0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078cb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078cf:	c1 eb 09             	shr    ebx,0x9
c00078d2:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078dd:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078e5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078e9:	8d 70 01             	lea    esi,[eax+0x1]
c00078ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078f4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078fb:	31 d2                	xor    edx,edx
c00078fd:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007902:	89 04 24             	mov    DWORD PTR [esp],eax
c0007905:	89 c1                	mov    ecx,eax
c0007907:	89 e8                	mov    eax,ebp
c0007909:	e8 e7 a3 ff ff       	call   c0001cf5 <mem_set>
c000790e:	31 c0                	xor    eax,eax
c0007910:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007913:	76 10                	jbe    c0007925 <f_mkfs+0x5b4>
c0007915:	83 fe 07             	cmp    esi,0x7
c0007918:	76 0b                	jbe    c0007925 <f_mkfs+0x5b4>
c000791a:	40                   	inc    eax
c000791b:	83 ee 08             	sub    esi,0x8
c000791e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007923:	eb eb                	jmp    c0007910 <f_mkfs+0x59f>
c0007925:	b2 01                	mov    dl,0x1
c0007927:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000792b:	85 f6                	test   esi,esi
c000792d:	74 0c                	je     c000793b <f_mkfs+0x5ca>
c000792f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007932:	76 07                	jbe    c000793b <f_mkfs+0x5ca>
c0007934:	08 11                	or     BYTE PTR [ecx],dl
c0007936:	4e                   	dec    esi
c0007937:	d1 e2                	shl    edx,1
c0007939:	eb f0                	jmp    c000792b <f_mkfs+0x5ba>
c000793b:	89 df                	mov    edi,ebx
c000793d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007941:	76 04                	jbe    c0007947 <f_mkfs+0x5d6>
c0007943:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007947:	83 ec 0c             	sub    esp,0xc
c000794a:	57                   	push   edi
c000794b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000794f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007953:	55                   	push   ebp
c0007954:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007958:	e8 cf a2 ff ff       	call   c0001c2c <disk_write>
c000795d:	83 c4 20             	add    esp,0x20
c0007960:	85 c0                	test   eax,eax
c0007962:	0f 85 ba 0a 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007968:	31 d2                	xor    edx,edx
c000796a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000796e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007972:	29 fb                	sub    ebx,edi
c0007974:	0f 85 7a ff ff ff    	jne    c00078f4 <f_mkfs+0x583>
c000797a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000797e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007986:	31 f6                	xor    esi,esi
c0007988:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000798c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000798f:	31 d2                	xor    edx,edx
c0007991:	89 e8                	mov    eax,ebp
c0007993:	e8 5d a3 ff ff       	call   c0001cf5 <mem_set>
c0007998:	31 c9                	xor    ecx,ecx
c000799a:	85 db                	test   ebx,ebx
c000799c:	75 40                	jne    c00079de <f_mkfs+0x66d>
c000799e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079a3:	89 e8                	mov    eax,ebp
c00079a5:	bb 02 00 00 00       	mov    ebx,0x2
c00079aa:	e8 28 a3 ff ff       	call   c0001cd7 <st_dword>
c00079af:	8d 45 04             	lea    eax,[ebp+0x4]
c00079b2:	83 ca ff             	or     edx,0xffffffff
c00079b5:	e8 1d a3 ff ff       	call   c0001cd7 <st_dword>
c00079ba:	b9 08 00 00 00       	mov    ecx,0x8
c00079bf:	eb 1d                	jmp    c00079de <f_mkfs+0x66d>
c00079c1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c4:	76 3b                	jbe    c0007a01 <f_mkfs+0x690>
c00079c6:	43                   	inc    ebx
c00079c7:	83 fe 01             	cmp    esi,0x1
c00079ca:	89 da                	mov    edx,ebx
c00079cc:	77 03                	ja     c00079d1 <f_mkfs+0x660>
c00079ce:	83 ca ff             	or     edx,0xffffffff
c00079d1:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079d5:	4e                   	dec    esi
c00079d6:	e8 fc a2 ff ff       	call   c0001cd7 <st_dword>
c00079db:	83 c1 04             	add    ecx,0x4
c00079de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079e2:	85 f6                	test   esi,esi
c00079e4:	75 db                	jne    c00079c1 <f_mkfs+0x650>
c00079e6:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079eb:	77 14                	ja     c0007a01 <f_mkfs+0x690>
c00079ed:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079f8:	85 f6                	test   esi,esi
c00079fa:	74 05                	je     c0007a01 <f_mkfs+0x690>
c00079fc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079ff:	77 dd                	ja     c00079de <f_mkfs+0x66d>
c0007a01:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a05:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a09:	39 cf                	cmp    edi,ecx
c0007a0b:	76 02                	jbe    c0007a0f <f_mkfs+0x69e>
c0007a0d:	89 cf                	mov    edi,ecx
c0007a0f:	83 ec 0c             	sub    esp,0xc
c0007a12:	57                   	push   edi
c0007a13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a17:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1b:	55                   	push   ebp
c0007a1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a20:	e8 07 a2 ff ff       	call   c0001c2c <disk_write>
c0007a25:	83 c4 20             	add    esp,0x20
c0007a28:	85 c0                	test   eax,eax
c0007a2a:	0f 85 f2 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007a30:	31 d2                	xor    edx,edx
c0007a32:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a36:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a3a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a3e:	0f 85 48 ff ff ff    	jne    c000798c <f_mkfs+0x61b>
c0007a44:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a47:	31 d2                	xor    edx,edx
c0007a49:	89 e8                	mov    eax,ebp
c0007a4b:	31 ff                	xor    edi,edi
c0007a4d:	e8 a3 a2 ff ff       	call   c0001cf5 <mem_set>
c0007a52:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a55:	ba 02 00 00 00       	mov    edx,0x2
c0007a5a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a5e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a62:	e8 70 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a67:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a6a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a6e:	e8 64 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a73:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a76:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a7a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a7e:	e8 54 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a83:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a8e:	83 c2 02             	add    edx,0x2
c0007a91:	e8 41 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a96:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a99:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a9d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa1:	e8 31 a2 ff ff       	call   c0001cd7 <st_dword>
c0007aa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aaa:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007aaf:	89 c6                	mov    esi,eax
c0007ab1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ab9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007abc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ac3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ac7:	39 cb                	cmp    ebx,ecx
c0007ac9:	76 02                	jbe    c0007acd <f_mkfs+0x75c>
c0007acb:	89 cb                	mov    ebx,ecx
c0007acd:	83 ec 0c             	sub    esp,0xc
c0007ad0:	53                   	push   ebx
c0007ad1:	57                   	push   edi
c0007ad2:	56                   	push   esi
c0007ad3:	55                   	push   ebp
c0007ad4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad8:	e8 4f a1 ff ff       	call   c0001c2c <disk_write>
c0007add:	83 c4 20             	add    esp,0x20
c0007ae0:	85 c0                	test   eax,eax
c0007ae2:	0f 85 3a 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007ae8:	31 d2                	xor    edx,edx
c0007aea:	b9 00 02 00 00       	mov    ecx,0x200
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 ff a1 ff ff       	call   c0001cf5 <mem_set>
c0007af6:	31 d2                	xor    edx,edx
c0007af8:	01 de                	add    esi,ebx
c0007afa:	11 d7                	adc    edi,edx
c0007afc:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007aff:	75 bf                	jne    c0007ac0 <f_mkfs+0x74f>
c0007b01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b05:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b09:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b11:	b9 00 02 00 00       	mov    ecx,0x200
c0007b16:	31 d2                	xor    edx,edx
c0007b18:	89 e8                	mov    eax,ebp
c0007b1a:	e8 d6 a1 ff ff       	call   c0001cf5 <mem_set>
c0007b1f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b24:	ba 80 94 02 c0       	mov    edx,0xc0029480
c0007b29:	89 e8                	mov    eax,ebp
c0007b2b:	e8 b0 a1 ff ff       	call   c0001ce0 <mem_cpy>
c0007b30:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b3b:	e8 9a a1 ff ff       	call   c0001cda <st_qword>
c0007b40:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b44:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b47:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b4b:	e8 8a a1 ff ff       	call   c0001cda <st_qword>
c0007b50:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b53:	ba 20 00 00 00       	mov    edx,0x20
c0007b58:	e8 7a a1 ff ff       	call   c0001cd7 <st_dword>
c0007b5d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b65:	e8 6d a1 ff ff       	call   c0001cd7 <st_dword>
c0007b6a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b72:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b76:	e8 5c a1 ff ff       	call   c0001cd7 <st_dword>
c0007b7b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b7e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b82:	e8 50 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b8b:	8d 50 02             	lea    edx,[eax+0x2]
c0007b8e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b91:	e8 41 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b96:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b99:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b9e:	e8 34 a1 ff ff       	call   c0001cd7 <st_dword>
c0007ba3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ba6:	ba 00 01 00 00       	mov    edx,0x100
c0007bab:	e8 23 a1 ff ff       	call   c0001cd3 <st_word>
c0007bb0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bb4:	b8 0a 00 00 00       	mov    eax,0xa
c0007bb9:	48                   	dec    eax
c0007bba:	74 05                	je     c0007bc1 <f_mkfs+0x850>
c0007bbc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bbf:	eb f8                	jmp    c0007bb9 <f_mkfs+0x848>
c0007bc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bc5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bcd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd1:	74 05                	je     c0007bd8 <f_mkfs+0x867>
c0007bd3:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bd6:	eb f5                	jmp    c0007bcd <f_mkfs+0x85c>
c0007bd8:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bdb:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be0:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007be6:	31 db                	xor    ebx,ebx
c0007be8:	e8 e6 a0 ff ff       	call   c0001cd3 <st_word>
c0007bed:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bf3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfb:	e8 d3 a0 ff ff       	call   c0001cd3 <st_word>
c0007c00:	31 c9                	xor    ecx,ecx
c0007c02:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c05:	83 f8 01             	cmp    eax,0x1
c0007c08:	76 13                	jbe    c0007c1d <f_mkfs+0x8ac>
c0007c0a:	83 f9 70             	cmp    ecx,0x70
c0007c0d:	74 0e                	je     c0007c1d <f_mkfs+0x8ac>
c0007c0f:	89 da                	mov    edx,ebx
c0007c11:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c16:	e8 41 a5 ff ff       	call   c000215c <xsum32>
c0007c1b:	89 c3                	mov    ebx,eax
c0007c1d:	41                   	inc    ecx
c0007c1e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c24:	75 dc                	jne    c0007c02 <f_mkfs+0x891>
c0007c26:	89 f0                	mov    eax,esi
c0007c28:	89 fa                	mov    edx,edi
c0007c2a:	83 c0 01             	add    eax,0x1
c0007c2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c31:	83 d2 00             	adc    edx,0x0
c0007c34:	83 ec 0c             	sub    esp,0xc
c0007c37:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c3b:	6a 01                	push   0x1
c0007c3d:	57                   	push   edi
c0007c3e:	56                   	push   esi
c0007c3f:	55                   	push   ebp
c0007c40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c44:	e8 e3 9f ff ff       	call   c0001c2c <disk_write>
c0007c49:	83 c4 20             	add    esp,0x20
c0007c4c:	85 c0                	test   eax,eax
c0007c4e:	0f 85 ce 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007c54:	31 d2                	xor    edx,edx
c0007c56:	b9 00 02 00 00       	mov    ecx,0x200
c0007c5b:	89 e8                	mov    eax,ebp
c0007c5d:	e8 93 a0 ff ff       	call   c0001cf5 <mem_set>
c0007c62:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c6a:	e8 64 a0 ff ff       	call   c0001cd3 <st_word>
c0007c6f:	89 f0                	mov    eax,esi
c0007c71:	89 fa                	mov    edx,edi
c0007c73:	83 c0 09             	add    eax,0x9
c0007c76:	83 d2 00             	adc    edx,0x0
c0007c79:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c80:	31 c9                	xor    ecx,ecx
c0007c82:	41                   	inc    ecx
c0007c83:	89 da                	mov    edx,ebx
c0007c85:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c8a:	e8 cd a4 ff ff       	call   c000215c <xsum32>
c0007c8f:	89 c3                	mov    ebx,eax
c0007c91:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c97:	75 e9                	jne    c0007c82 <f_mkfs+0x911>
c0007c99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c9d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca1:	83 c0 01             	add    eax,0x1
c0007ca4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ca8:	83 d2 00             	adc    edx,0x0
c0007cab:	83 ec 0c             	sub    esp,0xc
c0007cae:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cb2:	6a 01                	push   0x1
c0007cb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cbc:	55                   	push   ebp
c0007cbd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc1:	e8 66 9f ff ff       	call   c0001c2c <disk_write>
c0007cc6:	83 c4 20             	add    esp,0x20
c0007cc9:	85 c0                	test   eax,eax
c0007ccb:	0f 85 51 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007cd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd5:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cd9:	75 09                	jne    c0007ce4 <f_mkfs+0x973>
c0007cdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cde:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ce2:	74 12                	je     c0007cf6 <f_mkfs+0x985>
c0007ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ce8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cf4:	eb 8a                	jmp    c0007c80 <f_mkfs+0x90f>
c0007cf6:	31 d2                	xor    edx,edx
c0007cf8:	b9 00 02 00 00       	mov    ecx,0x200
c0007cfd:	89 e8                	mov    eax,ebp
c0007cff:	e8 f1 9f ff ff       	call   c0001cf5 <mem_set>
c0007d04:	83 c6 0b             	add    esi,0xb
c0007d07:	83 d7 00             	adc    edi,0x0
c0007d0a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d0e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d12:	31 c9                	xor    ecx,ecx
c0007d14:	41                   	inc    ecx
c0007d15:	89 da                	mov    edx,ebx
c0007d17:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d1c:	e8 3b a4 ff ff       	call   c000215c <xsum32>
c0007d21:	89 c3                	mov    ebx,eax
c0007d23:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d29:	75 e9                	jne    c0007d14 <f_mkfs+0x9a3>
c0007d2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d2e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d32:	83 c6 01             	add    esi,0x1
c0007d35:	83 d7 00             	adc    edi,0x0
c0007d38:	83 ec 0c             	sub    esp,0xc
c0007d3b:	6a 01                	push   0x1
c0007d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d45:	55                   	push   ebp
c0007d46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d4a:	e8 dd 9e ff ff       	call   c0001c2c <disk_write>
c0007d4f:	83 c4 20             	add    esp,0x20
c0007d52:	85 c0                	test   eax,eax
c0007d54:	0f 85 c8 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007d5a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d5e:	75 06                	jne    c0007d66 <f_mkfs+0x9f5>
c0007d60:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d64:	74 09                	je     c0007d6f <f_mkfs+0x9fe>
c0007d66:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d69:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d6d:	eb a3                	jmp    c0007d12 <f_mkfs+0x9a1>
c0007d6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d73:	89 da                	mov    edx,ebx
c0007d75:	01 e8                	add    eax,ebp
c0007d77:	e8 5b 9f ff ff       	call   c0001cd7 <st_dword>
c0007d7c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d81:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d89:	75 e4                	jne    c0007d6f <f_mkfs+0x9fe>
c0007d8b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d8e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d92:	83 c6 02             	add    esi,0x2
c0007d95:	83 d7 00             	adc    edi,0x0
c0007d98:	83 ec 0c             	sub    esp,0xc
c0007d9b:	6a 01                	push   0x1
c0007d9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da5:	55                   	push   ebp
c0007da6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007daa:	e8 7d 9e ff ff       	call   c0001c2c <disk_write>
c0007daf:	83 c4 20             	add    esp,0x20
c0007db2:	85 c0                	test   eax,eax
c0007db4:	0f 85 68 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007dba:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dbf:	74 0d                	je     c0007dce <f_mkfs+0xa5d>
c0007dc1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dc9:	e9 43 fd ff ff       	jmp    c0007b11 <f_mkfs+0x7a0>
c0007dce:	b1 07                	mov    cl,0x7
c0007dd0:	e9 e3 05 00 00       	jmp    c00083b8 <f_mkfs+0x1047>
c0007dd5:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dda:	0f 85 4f 02 00 00    	jne    c000802f <f_mkfs+0xcbe>
c0007de0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007de5:	0f 86 22 02 00 00    	jbe    c000800d <f_mkfs+0xc9c>
c0007deb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df0:	0f 85 81 06 00 00    	jne    c0008477 <f_mkfs+0x1106>
c0007df6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007df9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dfd:	83 f8 40             	cmp    eax,0x40
c0007e00:	0f 87 51 06 00 00    	ja     c0008457 <f_mkfs+0x10e6>
c0007e06:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e0a:	85 ff                	test   edi,edi
c0007e0c:	75 1c                	jne    c0007e2a <f_mkfs+0xab9>
c0007e0e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e11:	ba 80 93 02 c0       	mov    edx,0xc0029380
c0007e16:	c1 e9 0c             	shr    ecx,0xc
c0007e19:	bf 01 00 00 00       	mov    edi,0x1
c0007e1e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e21:	66 85 c0             	test   ax,ax
c0007e24:	0f 85 95 01 00 00    	jne    c0007fbf <f_mkfs+0xc4e>
c0007e2a:	31 d2                	xor    edx,edx
c0007e2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e2f:	f7 f7                	div    edi
c0007e31:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e36:	0f 86 95 01 00 00    	jbe    c0007fd1 <f_mkfs+0xc60>
c0007e3c:	83 c0 02             	add    eax,0x2
c0007e3f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e44:	01 c0                	add    eax,eax
c0007e46:	05 ff 01 00 00       	add    eax,0x1ff
c0007e4b:	be 01 00 00 00       	mov    esi,0x1
c0007e50:	c1 e8 09             	shr    eax,0x9
c0007e53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e5b:	c1 e0 05             	shl    eax,0x5
c0007e5e:	c1 e8 09             	shr    eax,0x9
c0007e61:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e65:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e6a:	31 d2                	xor    edx,edx
c0007e6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e70:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e74:	89 f0                	mov    eax,esi
c0007e76:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e7a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e82:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e8a:	31 d2                	xor    edx,edx
c0007e8c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e91:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e95:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e99:	31 db                	xor    ebx,ebx
c0007e9b:	01 c8                	add    eax,ecx
c0007e9d:	11 da                	adc    edx,ebx
c0007e9f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007ea3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ea7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eab:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eaf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007eb3:	f7 da                	neg    edx
c0007eb5:	21 d1                	and    ecx,edx
c0007eb7:	29 d9                	sub    ecx,ebx
c0007eb9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ebe:	0f 85 20 01 00 00    	jne    c0007fe4 <f_mkfs+0xc73>
c0007ec4:	31 db                	xor    ebx,ebx
c0007ec6:	01 ce                	add    esi,ecx
c0007ec8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ecc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed0:	31 d2                	xor    edx,edx
c0007ed2:	89 f8                	mov    eax,edi
c0007ed4:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ed8:	c1 e0 04             	shl    eax,0x4
c0007edb:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007edf:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ee3:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ee7:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eeb:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eee:	19 d3                	sbb    ebx,edx
c0007ef0:	0f 82 40 01 00 00    	jb     c0008036 <f_mkfs+0xcc5>
c0007ef6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ef9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007efd:	89 c8                	mov    eax,ecx
c0007eff:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f04:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f08:	29 f0                	sub    eax,esi
c0007f0a:	29 d0                	sub    eax,edx
c0007f0c:	31 d2                	xor    edx,edx
c0007f0e:	f7 f7                	div    edi
c0007f10:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f15:	89 c3                	mov    ebx,eax
c0007f17:	0f 85 b8 fe ff ff    	jne    c0007dd5 <f_mkfs+0xa64>
c0007f1d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f22:	0f 87 1d 01 00 00    	ja     c0008045 <f_mkfs+0xcd4>
c0007f28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f2d:	0f 85 03 01 00 00    	jne    c0008036 <f_mkfs+0xcc5>
c0007f33:	83 ff 01             	cmp    edi,0x1
c0007f36:	0f 86 fa 00 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007f3c:	d1 ef                	shr    edi,1
c0007f3e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f42:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f46:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f49:	85 db                	test   ebx,ebx
c0007f4b:	75 2d                	jne    c0007f7a <f_mkfs+0xc09>
c0007f4d:	89 cb                	mov    ebx,ecx
c0007f4f:	ba 90 93 02 c0       	mov    edx,0xc0029390
c0007f54:	c1 eb 11             	shr    ebx,0x11
c0007f57:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f5f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f62:	66 85 c0             	test   ax,ax
c0007f65:	74 11                	je     c0007f78 <f_mkfs+0xc07>
c0007f67:	83 c2 02             	add    edx,0x2
c0007f6a:	39 d8                	cmp    eax,ebx
c0007f6c:	77 0a                	ja     c0007f78 <f_mkfs+0xc07>
c0007f6e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f72:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f76:	eb e7                	jmp    c0007f5f <f_mkfs+0xbee>
c0007f78:	31 db                	xor    ebx,ebx
c0007f7a:	31 d2                	xor    edx,edx
c0007f7c:	89 c8                	mov    eax,ecx
c0007f7e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f82:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f89:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f8e:	c1 ea 09             	shr    edx,0x9
c0007f91:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f96:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f9a:	0f 87 96 00 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007fa0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fa4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fac:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb0:	be 20 00 00 00       	mov    esi,0x20
c0007fb5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fba:	e9 a6 fe ff ff       	jmp    c0007e65 <f_mkfs+0xaf4>
c0007fbf:	83 c2 02             	add    edx,0x2
c0007fc2:	39 c8                	cmp    eax,ecx
c0007fc4:	0f 87 60 fe ff ff    	ja     c0007e2a <f_mkfs+0xab9>
c0007fca:	01 ff                	add    edi,edi
c0007fcc:	e9 4d fe ff ff       	jmp    c0007e1e <f_mkfs+0xaad>
c0007fd1:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fd4:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fd9:	40                   	inc    eax
c0007fda:	d1 e8                	shr    eax,1
c0007fdc:	83 c0 03             	add    eax,0x3
c0007fdf:	e9 62 fe ff ff       	jmp    c0007e46 <f_mkfs+0xad5>
c0007fe4:	31 d2                	xor    edx,edx
c0007fe6:	89 c8                	mov    eax,ecx
c0007fe8:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fec:	85 d2                	test   edx,edx
c0007fee:	74 0c                	je     c0007ffc <f_mkfs+0xc8b>
c0007ff0:	49                   	dec    ecx
c0007ff1:	46                   	inc    esi
c0007ff2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007ff7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ffc:	89 c8                	mov    eax,ecx
c0007ffe:	31 d2                	xor    edx,edx
c0008000:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008004:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008008:	e9 c3 fe ff ff       	jmp    c0007ed0 <f_mkfs+0xb5f>
c000800d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008012:	77 31                	ja     c0008045 <f_mkfs+0xcd4>
c0008014:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008019:	75 1b                	jne    c0008036 <f_mkfs+0xcc5>
c000801b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000801e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008022:	3d 80 00 00 00       	cmp    eax,0x80
c0008027:	0f 86 d9 fd ff ff    	jbe    c0007e06 <f_mkfs+0xa95>
c000802d:	eb 07                	jmp    c0008036 <f_mkfs+0xcc5>
c000802f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008034:	76 0a                	jbe    c0008040 <f_mkfs+0xccf>
c0008036:	bb 0e 00 00 00       	mov    ebx,0xe
c000803b:	e9 ff 03 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0008040:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008045:	31 d2                	xor    edx,edx
c0008047:	b9 00 02 00 00       	mov    ecx,0x200
c000804c:	89 e8                	mov    eax,ebp
c000804e:	e8 a2 9c ff ff       	call   c0001cf5 <mem_set>
c0008053:	b9 0b 00 00 00       	mov    ecx,0xb
c0008058:	ba a2 94 02 c0       	mov    edx,0xc00294a2
c000805d:	89 e8                	mov    eax,ebp
c000805f:	e8 7c 9c ff ff       	call   c0001ce0 <mem_cpy>
c0008064:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008067:	ba 00 02 00 00       	mov    edx,0x200
c000806c:	e8 62 9c ff ff       	call   c0001cd3 <st_word>
c0008071:	89 f8                	mov    eax,edi
c0008073:	0f b7 d6             	movzx  edx,si
c0008076:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008079:	8d 45 0e             	lea    eax,[ebp+0xe]
c000807c:	e8 52 9c ff ff       	call   c0001cd3 <st_word>
c0008081:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008085:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000808a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000808d:	75 08                	jne    c0008097 <f_mkfs+0xd26>
c000808f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008097:	8d 45 11             	lea    eax,[ebp+0x11]
c000809a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000809e:	e8 30 9c ff ff       	call   c0001cd3 <st_word>
c00080a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00080a8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080ac:	39 d0                	cmp    eax,edx
c00080ae:	b8 00 00 00 00       	mov    eax,0x0
c00080b3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080b7:	72 0a                	jb     c00080c3 <f_mkfs+0xd52>
c00080b9:	8d 45 13             	lea    eax,[ebp+0x13]
c00080bc:	e8 12 9c ff ff       	call   c0001cd3 <st_word>
c00080c1:	eb 08                	jmp    c00080cb <f_mkfs+0xd5a>
c00080c3:	8d 45 20             	lea    eax,[ebp+0x20]
c00080c6:	e8 0c 9c ff ff       	call   c0001cd7 <st_dword>
c00080cb:	8d 45 18             	lea    eax,[ebp+0x18]
c00080ce:	ba 3f 00 00 00       	mov    edx,0x3f
c00080d3:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080d7:	e8 f7 9b ff ff       	call   c0001cd3 <st_word>
c00080dc:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080df:	ba ff 00 00 00       	mov    edx,0xff
c00080e4:	e8 ea 9b ff ff       	call   c0001cd3 <st_word>
c00080e9:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f0:	e8 e2 9b ff ff       	call   c0001cd7 <st_dword>
c00080f5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080fa:	75 57                	jne    c0008153 <f_mkfs+0xde2>
c00080fc:	8d 45 43             	lea    eax,[ebp+0x43]
c00080ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0008104:	e8 ce 9b ff ff       	call   c0001cd7 <st_dword>
c0008109:	8d 45 24             	lea    eax,[ebp+0x24]
c000810c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008110:	e8 c2 9b ff ff       	call   c0001cd7 <st_dword>
c0008115:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008118:	ba 02 00 00 00       	mov    edx,0x2
c000811d:	e8 b5 9b ff ff       	call   c0001cd7 <st_dword>
c0008122:	8d 45 30             	lea    eax,[ebp+0x30]
c0008125:	ba 01 00 00 00       	mov    edx,0x1
c000812a:	e8 a4 9b ff ff       	call   c0001cd3 <st_word>
c000812f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008132:	ba 06 00 00 00       	mov    edx,0x6
c0008137:	e8 97 9b ff ff       	call   c0001cd3 <st_word>
c000813c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008140:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008144:	8d 45 47             	lea    eax,[ebp+0x47]
c0008147:	b9 13 00 00 00       	mov    ecx,0x13
c000814c:	ba ae 94 02 c0       	mov    edx,0xc00294ae
c0008151:	eb 2f                	jmp    c0008182 <f_mkfs+0xe11>
c0008153:	8d 45 27             	lea    eax,[ebp+0x27]
c0008156:	ba 00 00 21 50       	mov    edx,0x50210000
c000815b:	e8 77 9b ff ff       	call   c0001cd7 <st_dword>
c0008160:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008165:	8d 45 16             	lea    eax,[ebp+0x16]
c0008168:	e8 66 9b ff ff       	call   c0001cd3 <st_word>
c000816d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008171:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008175:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008178:	b9 13 00 00 00       	mov    ecx,0x13
c000817d:	ba c2 94 02 c0       	mov    edx,0xc00294c2
c0008182:	e8 59 9b ff ff       	call   c0001ce0 <mem_cpy>
c0008187:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000818d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008192:	89 f0                	mov    eax,esi
c0008194:	e8 3a 9b ff ff       	call   c0001cd3 <st_word>
c0008199:	83 ec 0c             	sub    esp,0xc
c000819c:	6a 01                	push   0x1
c000819e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a6:	55                   	push   ebp
c00081a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081ab:	e8 7c 9a ff ff       	call   c0001c2c <disk_write>
c00081b0:	83 c4 20             	add    esp,0x20
c00081b3:	85 c0                	test   eax,eax
c00081b5:	0f 85 67 02 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00081bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c0:	0f 85 b7 00 00 00    	jne    c000827d <f_mkfs+0xf0c>
c00081c6:	83 ec 0c             	sub    esp,0xc
c00081c9:	6a 01                	push   0x1
c00081cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081d3:	83 c0 06             	add    eax,0x6
c00081d6:	83 d2 00             	adc    edx,0x0
c00081d9:	52                   	push   edx
c00081da:	50                   	push   eax
c00081db:	55                   	push   ebp
c00081dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e0:	e8 47 9a ff ff       	call   c0001c2c <disk_write>
c00081e5:	83 c4 20             	add    esp,0x20
c00081e8:	b9 00 02 00 00       	mov    ecx,0x200
c00081ed:	31 d2                	xor    edx,edx
c00081ef:	89 e8                	mov    eax,ebp
c00081f1:	e8 ff 9a ff ff       	call   c0001cf5 <mem_set>
c00081f6:	ba 52 52 61 41       	mov    edx,0x41615252
c00081fb:	89 e8                	mov    eax,ebp
c00081fd:	e8 d5 9a ff ff       	call   c0001cd7 <st_dword>
c0008202:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008208:	ba 72 72 41 61       	mov    edx,0x61417272
c000820d:	e8 c5 9a ff ff       	call   c0001cd7 <st_dword>
c0008212:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008215:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000821b:	e8 b7 9a ff ff       	call   c0001cd7 <st_dword>
c0008220:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008226:	ba 02 00 00 00       	mov    edx,0x2
c000822b:	e8 a7 9a ff ff       	call   c0001cd7 <st_dword>
c0008230:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008235:	89 f0                	mov    eax,esi
c0008237:	e8 97 9a ff ff       	call   c0001cd3 <st_word>
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	6a 01                	push   0x1
c0008241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008245:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008249:	83 c0 07             	add    eax,0x7
c000824c:	83 d2 00             	adc    edx,0x0
c000824f:	52                   	push   edx
c0008250:	50                   	push   eax
c0008251:	55                   	push   ebp
c0008252:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008256:	e8 d1 99 ff ff       	call   c0001c2c <disk_write>
c000825b:	83 c4 14             	add    esp,0x14
c000825e:	6a 01                	push   0x1
c0008260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008264:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008268:	83 c0 01             	add    eax,0x1
c000826b:	83 d2 00             	adc    edx,0x0
c000826e:	52                   	push   edx
c000826f:	50                   	push   eax
c0008270:	55                   	push   ebp
c0008271:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008275:	e8 b2 99 ff ff       	call   c0001c2c <disk_write>
c000827a:	83 c4 20             	add    esp,0x20
c000827d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008284:	31 d2                	xor    edx,edx
c0008286:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000828c:	31 db                	xor    ebx,ebx
c000828e:	89 e8                	mov    eax,ebp
c0008290:	e8 60 9a ff ff       	call   c0001cf5 <mem_set>
c0008295:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000829a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a1:	0f 94 c3             	sete   bl
c00082a4:	4b                   	dec    ebx
c00082a5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082ab:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082b6:	75 21                	jne    c00082d9 <f_mkfs+0xf68>
c00082b8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082bd:	89 e8                	mov    eax,ebp
c00082bf:	e8 13 9a ff ff       	call   c0001cd7 <st_dword>
c00082c4:	8d 45 04             	lea    eax,[ebp+0x4]
c00082c7:	83 ca ff             	or     edx,0xffffffff
c00082ca:	e8 08 9a ff ff       	call   c0001cd7 <st_dword>
c00082cf:	8d 45 08             	lea    eax,[ebp+0x8]
c00082d2:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082d7:	eb 04                	jmp    c00082dd <f_mkfs+0xf6c>
c00082d9:	89 da                	mov    edx,ebx
c00082db:	89 e8                	mov    eax,ebp
c00082dd:	e8 f5 99 ff ff       	call   c0001cd7 <st_dword>
c00082e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082ea:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082f2:	39 ce                	cmp    esi,ecx
c00082f4:	76 02                	jbe    c00082f8 <f_mkfs+0xf87>
c00082f6:	89 ce                	mov    esi,ecx
c00082f8:	83 ec 0c             	sub    esp,0xc
c00082fb:	56                   	push   esi
c00082fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008300:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008304:	55                   	push   ebp
c0008305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008309:	e8 1e 99 ff ff       	call   c0001c2c <disk_write>
c000830e:	83 c4 20             	add    esp,0x20
c0008311:	85 c0                	test   eax,eax
c0008313:	0f 85 09 01 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008319:	31 d2                	xor    edx,edx
c000831b:	b9 00 02 00 00       	mov    ecx,0x200
c0008320:	89 e8                	mov    eax,ebp
c0008322:	e8 ce 99 ff ff       	call   c0001cf5 <mem_set>
c0008327:	31 d2                	xor    edx,edx
c0008329:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000832d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008331:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008335:	75 b3                	jne    c00082ea <f_mkfs+0xf79>
c0008337:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000833a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008341:	40                   	inc    eax
c0008342:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008346:	0f 87 65 ff ff ff    	ja     c00082b1 <f_mkfs+0xf40>
c000834c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008351:	74 04                	je     c0008357 <f_mkfs+0xfe6>
c0008353:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008357:	89 fb                	mov    ebx,edi
c0008359:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000835d:	76 04                	jbe    c0008363 <f_mkfs+0xff2>
c000835f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008363:	83 ec 0c             	sub    esp,0xc
c0008366:	53                   	push   ebx
c0008367:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836f:	55                   	push   ebp
c0008370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008374:	e8 b3 98 ff ff       	call   c0001c2c <disk_write>
c0008379:	83 c4 20             	add    esp,0x20
c000837c:	85 c0                	test   eax,eax
c000837e:	0f 85 9e 00 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008384:	31 d2                	xor    edx,edx
c0008386:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000838a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000838e:	29 df                	sub    edi,ebx
c0008390:	75 c5                	jne    c0008357 <f_mkfs+0xfe6>
c0008392:	b1 0c                	mov    cl,0xc
c0008394:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008399:	74 1d                	je     c00083b8 <f_mkfs+0x1047>
c000839b:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a0:	b1 06                	mov    cl,0x6
c00083a2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083a6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083aa:	72 0c                	jb     c00083b8 <f_mkfs+0x1047>
c00083ac:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b1:	0f 94 c1             	sete   cl
c00083b4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083b8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083bd:	75 4c                	jne    c000840b <f_mkfs+0x109a>
c00083bf:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083c3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083ce:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083d5:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e0:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083eb:	0f b6 c9             	movzx  ecx,cl
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	55                   	push   ebp
c00083f2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083fd:	e8 2f c2 ff ff       	call   c0004631 <create_partition>
c0008402:	83 c4 10             	add    esp,0x10
c0008405:	89 c3                	mov    ebx,eax
c0008407:	85 c0                	test   eax,eax
c0008409:	75 34                	jne    c000843f <f_mkfs+0x10ce>
c000840b:	31 db                	xor    ebx,ebx
c000840d:	50                   	push   eax
c000840e:	6a 00                	push   0x0
c0008410:	6a 00                	push   0x0
c0008412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008416:	e8 27 98 ff ff       	call   c0001c42 <disk_ioctl>
c000841b:	83 c4 10             	add    esp,0x10
c000841e:	85 c0                	test   eax,eax
c0008420:	74 1d                	je     c000843f <f_mkfs+0x10ce>
c0008422:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000842a:	75 0c                	jne    c0008438 <f_mkfs+0x10c7>
c000842c:	83 ec 0c             	sub    esp,0xc
c000842f:	55                   	push   ebp
c0008430:	e8 75 00 00 00       	call   c00084aa <ff_memfree>
c0008435:	83 c4 10             	add    esp,0x10
c0008438:	bb 01 00 00 00       	mov    ebx,0x1
c000843d:	eb 48                	jmp    c0008487 <f_mkfs+0x1116>
c000843f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008447:	75 3e                	jne    c0008487 <f_mkfs+0x1116>
c0008449:	83 ec 0c             	sub    esp,0xc
c000844c:	55                   	push   ebp
c000844d:	e8 58 00 00 00       	call   c00084aa <ff_memfree>
c0008452:	83 c4 10             	add    esp,0x10
c0008455:	eb 30                	jmp    c0008487 <f_mkfs+0x1116>
c0008457:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845c:	0f 85 eb fa ff ff    	jne    c0007f4d <f_mkfs+0xbdc>
c0008462:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008466:	81 ff 80 00 00 00    	cmp    edi,0x80
c000846c:	0f 86 b8 f9 ff ff    	jbe    c0007e2a <f_mkfs+0xab9>
c0008472:	e9 bf fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008477:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000847c:	0f 85 c0 fa ff ff    	jne    c0007f42 <f_mkfs+0xbd1>
c0008482:	e9 af fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008487:	81 c4 9c 00 00 00    	add    esp,0x9c
c000848d:	89 d8                	mov    eax,ebx
c000848f:	5b                   	pop    ebx
c0008490:	5e                   	pop    esi
c0008491:	5f                   	pop    edi
c0008492:	5d                   	pop    ebp
c0008493:	c3                   	ret    

c0008494 <ff_memalloc>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	83 ec 0c             	sub    esp,0xc
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	e8 9d 73 00 00       	call   c000f840 <malloc>
c00084a3:	83 c4 10             	add    esp,0x10
c00084a6:	83 c4 0c             	add    esp,0xc
c00084a9:	c3                   	ret    

c00084aa <ff_memfree>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	83 ec 0c             	sub    esp,0xc
c00084b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084b4:	e8 97 73 00 00       	call   c000f850 <free>
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	90                   	nop
c00084bd:	83 c4 0c             	add    esp,0xc
c00084c0:	c3                   	ret    

c00084c1 <ff_uni2oem>:
c00084c1:	83 ec 14             	sub    esp,0x14
c00084c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084c8:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084cc:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084d3:	c7 44 24 0c e0 97 02 c0 	mov    DWORD PTR [esp+0xc],0xc00297e0
c00084db:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e0:	77 0b                	ja     c00084ed <ff_uni2oem+0x2c>
c00084e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084e6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084eb:	eb 5b                	jmp    c0008548 <ff_uni2oem+0x87>
c00084ed:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084f5:	77 51                	ja     c0008548 <ff_uni2oem+0x87>
c00084f7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084fd:	75 49                	jne    c0008548 <ff_uni2oem+0x87>
c00084ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008506:	eb 0b                	jmp    c0008513 <ff_uni2oem+0x52>
c0008508:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000850d:	40                   	inc    eax
c000850e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008513:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008519:	77 1b                	ja     c0008536 <ff_uni2oem+0x75>
c000851b:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008520:	01 c0                	add    eax,eax
c0008522:	89 c2                	mov    edx,eax
c0008524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008528:	01 d0                	add    eax,edx
c000852a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000852d:	0f b7 c0             	movzx  eax,ax
c0008530:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008534:	75 d2                	jne    c0008508 <ff_uni2oem+0x47>
c0008536:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000853b:	83 e8 80             	sub    eax,0xffffff80
c000853e:	25 ff 00 00 00       	and    eax,0xff
c0008543:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008548:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000854d:	83 c4 14             	add    esp,0x14
c0008550:	c3                   	ret    

c0008551 <ff_oem2uni>:
c0008551:	83 ec 18             	sub    esp,0x18
c0008554:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000855c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008561:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008565:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000856c:	c7 44 24 10 e0 97 02 c0 	mov    DWORD PTR [esp+0x10],0xc00297e0
c0008574:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000857a:	77 0b                	ja     c0008587 <ff_oem2uni+0x36>
c000857c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008580:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008585:	eb 2d                	jmp    c00085b4 <ff_oem2uni+0x63>
c0008587:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000858d:	75 25                	jne    c00085b4 <ff_oem2uni+0x63>
c000858f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008596:	77 1c                	ja     c00085b4 <ff_oem2uni+0x63>
c0008598:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000859d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085a2:	01 c0                	add    eax,eax
c00085a4:	89 c2                	mov    edx,eax
c00085a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085aa:	01 d0                	add    eax,edx
c00085ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085af:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085b4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085b9:	83 c4 18             	add    esp,0x18
c00085bc:	c3                   	ret    

c00085bd <ff_wtoupper>:
c00085bd:	83 ec 10             	sub    esp,0x10
c00085c0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085c8:	0f 87 3e 01 00 00    	ja     c000870c <ff_wtoupper+0x14f>
c00085ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085d7:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085de:	77 07                	ja     c00085e7 <ff_wtoupper+0x2a>
c00085e0:	b8 e0 95 02 c0       	mov    eax,0xc00295e0
c00085e5:	eb 05                	jmp    c00085ec <ff_wtoupper+0x2f>
c00085e7:	b8 20 95 02 c0       	mov    eax,0xc0029520
c00085ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085f4:	8d 50 02             	lea    edx,[eax+0x2]
c00085f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008603:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008609:	0f 84 f4 00 00 00    	je     c0008703 <ff_wtoupper+0x146>
c000860f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008614:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008619:	0f 82 e4 00 00 00    	jb     c0008703 <ff_wtoupper+0x146>
c000861f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008623:	8d 50 02             	lea    edx,[eax+0x2]
c0008626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000862a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000862d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008632:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008637:	66 c1 e8 08          	shr    ax,0x8
c000863b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008640:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008647:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000864c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008651:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008656:	01 ca                	add    edx,ecx
c0008658:	39 d0                	cmp    eax,edx
c000865a:	0f 8d 86 00 00 00    	jge    c00086e6 <ff_wtoupper+0x129>
c0008660:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008665:	83 f8 08             	cmp    eax,0x8
c0008668:	0f 87 94 00 00 00    	ja     c0008702 <ff_wtoupper+0x145>
c000866e:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c0008675:	ff e0                	jmp    eax
c0008677:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000867c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008681:	29 c2                	sub    edx,eax
c0008683:	89 d0                	mov    eax,edx
c0008685:	01 c0                	add    eax,eax
c0008687:	89 c2                	mov    edx,eax
c0008689:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000868d:	01 d0                	add    eax,edx
c000868f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008692:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008697:	eb 4b                	jmp    c00086e4 <ff_wtoupper+0x127>
c0008699:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000869e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086a2:	83 e0 01             	and    eax,0x1
c00086a5:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086aa:	eb 38                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086ac:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086b2:	eb 30                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086ba:	eb 28                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086c2:	eb 20                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ca:	eb 18                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086cc:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086d2:	eb 10                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086d4:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086da:	eb 08                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086dc:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086e3:	90                   	nop
c00086e4:	eb 1c                	jmp    c0008702 <ff_wtoupper+0x145>
c00086e6:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086ec:	0f 85 fe fe ff ff    	jne    c00085f0 <ff_wtoupper+0x33>
c00086f2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086f7:	01 c0                	add    eax,eax
c00086f9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086fd:	e9 ee fe ff ff       	jmp    c00085f0 <ff_wtoupper+0x33>
c0008702:	90                   	nop
c0008703:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008708:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000870c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008710:	83 c4 10             	add    esp,0x10
c0008713:	c3                   	ret    

c0008714 <psrc_set_converter>:
c0008714:	56                   	push   esi
c0008715:	89 d6                	mov    esi,edx
c0008717:	53                   	push   ebx
c0008718:	89 c3                	mov    ebx,eax
c000871a:	83 ec 0c             	sub    esp,0xc
c000871d:	52                   	push   edx
c000871e:	50                   	push   eax
c000871f:	e8 6f 55 00 00       	call   c000dc93 <sinc_set_converter>
c0008724:	83 c4 10             	add    esp,0x10
c0008727:	85 c0                	test   eax,eax
c0008729:	74 25                	je     c0008750 <psrc_set_converter+0x3c>
c000872b:	50                   	push   eax
c000872c:	50                   	push   eax
c000872d:	56                   	push   esi
c000872e:	53                   	push   ebx
c000872f:	e8 17 5d 00 00       	call   c000e44b <zoh_set_converter>
c0008734:	83 c4 10             	add    esp,0x10
c0008737:	85 c0                	test   eax,eax
c0008739:	74 15                	je     c0008750 <psrc_set_converter+0x3c>
c000873b:	51                   	push   ecx
c000873c:	51                   	push   ecx
c000873d:	56                   	push   esi
c000873e:	53                   	push   ebx
c000873f:	e8 0f 11 00 00       	call   c0009853 <linear_set_converter>
c0008744:	83 c4 10             	add    esp,0x10
c0008747:	ba 0a 00 00 00       	mov    edx,0xa
c000874c:	85 c0                	test   eax,eax
c000874e:	75 02                	jne    c0008752 <psrc_set_converter+0x3e>
c0008750:	31 d2                	xor    edx,edx
c0008752:	89 d0                	mov    eax,edx
c0008754:	5a                   	pop    edx
c0008755:	5b                   	pop    ebx
c0008756:	5e                   	pop    esi
c0008757:	c3                   	ret    

c0008758 <src_delete>:
c0008758:	53                   	push   ebx
c0008759:	83 ec 08             	sub    esp,0x8
c000875c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008760:	85 db                	test   ebx,ebx
c0008762:	74 29                	je     c000878d <src_delete+0x35>
c0008764:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008767:	85 c0                	test   eax,eax
c0008769:	74 0c                	je     c0008777 <src_delete+0x1f>
c000876b:	83 ec 0c             	sub    esp,0xc
c000876e:	50                   	push   eax
c000876f:	e8 dc 70 00 00       	call   c000f850 <free>
c0008774:	83 c4 10             	add    esp,0x10
c0008777:	50                   	push   eax
c0008778:	6a 3c                	push   0x3c
c000877a:	6a 00                	push   0x0
c000877c:	53                   	push   ebx
c000877d:	e8 f6 7f ff ff       	call   c0000778 <memset>
c0008782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008785:	e8 c6 70 00 00       	call   c000f850 <free>
c000878a:	83 c4 10             	add    esp,0x10
c000878d:	31 c0                	xor    eax,eax
c000878f:	83 c4 08             	add    esp,0x8
c0008792:	5b                   	pop    ebx
c0008793:	c3                   	ret    

c0008794 <src_process>:
c0008794:	55                   	push   ebp
c0008795:	57                   	push   edi
c0008796:	56                   	push   esi
c0008797:	53                   	push   ebx
c0008798:	83 ec 1c             	sub    esp,0x1c
c000879b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000879f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087a3:	85 ed                	test   ebp,ebp
c00087a5:	0f 84 6f 01 00 00    	je     c000891a <src_process+0x186>
c00087ab:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087af:	0f 84 6c 01 00 00    	je     c0008921 <src_process+0x18d>
c00087b5:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087b9:	0f 84 62 01 00 00    	je     c0008921 <src_process+0x18d>
c00087bf:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087c6:	0f 85 5c 01 00 00    	jne    c0008928 <src_process+0x194>
c00087cc:	85 db                	test   ebx,ebx
c00087ce:	0f 84 5b 01 00 00    	je     c000892f <src_process+0x19b>
c00087d4:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087d6:	85 f6                	test   esi,esi
c00087d8:	0f 84 58 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087de:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e1:	85 ff                	test   edi,edi
c00087e3:	0f 84 4d 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087e9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087ec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	68 00 00 70 3f       	push   0x3f700000
c00087fc:	6a 00                	push   0x0
c00087fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008806:	e8 a4 fc 01 00       	call   c00284af <__ltdf2>
c000880b:	83 c4 10             	add    esp,0x10
c000880e:	85 c0                	test   eax,eax
c0008810:	0f 88 27 01 00 00    	js     c000893d <src_process+0x1a9>
c0008816:	68 00 00 70 40       	push   0x40700000
c000881b:	6a 00                	push   0x0
c000881d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008825:	e8 67 fc 01 00       	call   c0028491 <__gtdf2>
c000882a:	83 c4 10             	add    esp,0x10
c000882d:	85 c0                	test   eax,eax
c000882f:	0f 8f 08 01 00 00    	jg     c000893d <src_process+0x1a9>
c0008835:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008839:	79 07                	jns    c0008842 <src_process+0xae>
c000883b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008842:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008845:	85 c0                	test   eax,eax
c0008847:	79 50                	jns    c0008899 <src_process+0x105>
c0008849:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008850:	39 fe                	cmp    esi,edi
c0008852:	72 37                	jb     c000888b <src_process+0xf7>
c0008854:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000885b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008862:	68 00 00 70 3f       	push   0x3f700000
c0008867:	6a 00                	push   0x0
c0008869:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000886c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000886f:	e8 3b fc 01 00       	call   c00284af <__ltdf2>
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	85 c0                	test   eax,eax
c0008879:	79 37                	jns    c00088b2 <src_process+0x11e>
c000887b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000887f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008883:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008886:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008889:	eb 27                	jmp    c00088b2 <src_process+0x11e>
c000888b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000888e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008892:	8d 04 86             	lea    eax,[esi+eax*4]
c0008895:	39 c7                	cmp    edi,eax
c0008897:	eb 0d                	jmp    c00088a6 <src_process+0x112>
c0008899:	39 fe                	cmp    esi,edi
c000889b:	72 ee                	jb     c000888b <src_process+0xf7>
c000889d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a1:	8d 04 87             	lea    eax,[edi+eax*4]
c00088a4:	39 c6                	cmp    esi,eax
c00088a6:	73 ac                	jae    c0008854 <src_process+0xc0>
c00088a8:	b8 10 00 00 00       	mov    eax,0x10
c00088ad:	e9 90 00 00 00       	jmp    c0008942 <src_process+0x1ae>
c00088b2:	83 ec 10             	sub    esp,0x10
c00088b5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088b8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c1:	e8 ee f2 01 00       	call   c0027bb4 <__subdf3>
c00088c6:	83 c4 18             	add    esp,0x18
c00088c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d1:	52                   	push   edx
c00088d2:	50                   	push   eax
c00088d3:	e8 68 fd 01 00       	call   c0028640 <fabs>
c00088d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e0:	83 c4 10             	add    esp,0x10
c00088e3:	68 af 03 d2 3c       	push   0x3cd203af
c00088e8:	68 16 56 e7 9e       	push   0x9ee75616
c00088ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f5:	e8 b5 fb 01 00       	call   c00284af <__ltdf2>
c00088fa:	83 c4 10             	add    esp,0x10
c00088fd:	85 c0                	test   eax,eax
c00088ff:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008903:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008907:	79 05                	jns    c000890e <src_process+0x17a>
c0008909:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000890c:	eb 03                	jmp    c0008911 <src_process+0x17d>
c000890e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008911:	83 c4 1c             	add    esp,0x1c
c0008914:	5b                   	pop    ebx
c0008915:	5e                   	pop    esi
c0008916:	5f                   	pop    edi
c0008917:	5d                   	pop    ebp
c0008918:	ff e0                	jmp    eax
c000891a:	b8 02 00 00 00       	mov    eax,0x2
c000891f:	eb 21                	jmp    c0008942 <src_process+0x1ae>
c0008921:	b8 07 00 00 00       	mov    eax,0x7
c0008926:	eb 1a                	jmp    c0008942 <src_process+0x1ae>
c0008928:	b8 12 00 00 00       	mov    eax,0x12
c000892d:	eb 13                	jmp    c0008942 <src_process+0x1ae>
c000892f:	b8 03 00 00 00       	mov    eax,0x3
c0008934:	eb 0c                	jmp    c0008942 <src_process+0x1ae>
c0008936:	b8 04 00 00 00       	mov    eax,0x4
c000893b:	eb 05                	jmp    c0008942 <src_process+0x1ae>
c000893d:	b8 06 00 00 00       	mov    eax,0x6
c0008942:	83 c4 1c             	add    esp,0x1c
c0008945:	5b                   	pop    ebx
c0008946:	5e                   	pop    esi
c0008947:	5f                   	pop    edi
c0008948:	5d                   	pop    ebp
c0008949:	c3                   	ret    

c000894a <src_callback_read>:
c000894a:	55                   	push   ebp
c000894b:	57                   	push   edi
c000894c:	56                   	push   esi
c000894d:	53                   	push   ebx
c000894e:	83 ec 3c             	sub    esp,0x3c
c0008951:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008955:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008959:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000895d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008961:	85 ed                	test   ebp,ebp
c0008963:	0f 8e 52 01 00 00    	jle    c0008abb <src_callback_read+0x171>
c0008969:	85 db                	test   ebx,ebx
c000896b:	0f 84 4a 01 00 00    	je     c0008abb <src_callback_read+0x171>
c0008971:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008978:	74 0c                	je     c0008986 <src_callback_read+0x3c>
c000897a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008981:	e9 35 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008986:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000898a:	75 0c                	jne    c0008998 <src_callback_read+0x4e>
c000898c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008993:	e9 23 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008998:	51                   	push   ecx
c0008999:	6a 24                	push   0x24
c000899b:	6a 00                	push   0x0
c000899d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a1:	50                   	push   eax
c00089a2:	e8 d1 7d ff ff       	call   c0000778 <memset>
c00089a7:	83 c4 10             	add    esp,0x10
c00089aa:	68 00 00 70 3f       	push   0x3f700000
c00089af:	6a 00                	push   0x0
c00089b1:	57                   	push   edi
c00089b2:	56                   	push   esi
c00089b3:	e8 f7 fa 01 00       	call   c00284af <__ltdf2>
c00089b8:	83 c4 10             	add    esp,0x10
c00089bb:	85 c0                	test   eax,eax
c00089bd:	78 3e                	js     c00089fd <src_callback_read+0xb3>
c00089bf:	68 00 00 70 40       	push   0x40700000
c00089c4:	6a 00                	push   0x0
c00089c6:	57                   	push   edi
c00089c7:	56                   	push   esi
c00089c8:	e8 c4 fa 01 00       	call   c0028491 <__gtdf2>
c00089cd:	83 c4 10             	add    esp,0x10
c00089d0:	85 c0                	test   eax,eax
c00089d2:	7f 29                	jg     c00089fd <src_callback_read+0xb3>
c00089d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089d8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e0:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089e4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089e7:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089ef:	31 f6                	xor    esi,esi
c00089f1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089f8:	e9 97 00 00 00       	jmp    c0008a94 <src_callback_read+0x14a>
c00089fd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a04:	e9 b2 00 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008a09:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a11:	52                   	push   edx
c0008a12:	52                   	push   edx
c0008a13:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a17:	50                   	push   eax
c0008a18:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a1b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a22:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a2a:	83 c4 10             	add    esp,0x10
c0008a2d:	85 c0                	test   eax,eax
c0008a2f:	75 08                	jne    c0008a39 <src_callback_read+0xef>
c0008a31:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a39:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a40:	50                   	push   eax
c0008a41:	50                   	push   eax
c0008a42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a46:	50                   	push   eax
c0008a47:	53                   	push   ebx
c0008a48:	e8 47 fd ff ff       	call   c0008794 <src_process>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a57:	85 c0                	test   eax,eax
c0008a59:	75 49                	jne    c0008aa4 <src_callback_read+0x15a>
c0008a5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a5f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a62:	89 f9                	mov    ecx,edi
c0008a64:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a68:	0f af ca             	imul   ecx,edx
c0008a6b:	c1 e1 02             	shl    ecx,0x2
c0008a6e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a72:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a76:	0f af d1             	imul   edx,ecx
c0008a79:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a7d:	c1 e2 02             	shl    edx,0x2
c0008a80:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a84:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a87:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a8c:	74 12                	je     c0008aa0 <src_callback_read+0x156>
c0008a8e:	39 d5                	cmp    ebp,edx
c0008a90:	7e 14                	jle    c0008aa6 <src_callback_read+0x15c>
c0008a92:	89 d6                	mov    esi,edx
c0008a94:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a99:	75 9e                	jne    c0008a39 <src_callback_read+0xef>
c0008a9b:	e9 69 ff ff ff       	jmp    c0008a09 <src_callback_read+0xbf>
c0008aa0:	85 c9                	test   ecx,ecx
c0008aa2:	75 ea                	jne    c0008a8e <src_callback_read+0x144>
c0008aa4:	89 f2                	mov    edx,esi
c0008aa6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008aaa:	85 c0                	test   eax,eax
c0008aac:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008aaf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ab3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008ab6:	74 05                	je     c0008abd <src_callback_read+0x173>
c0008ab8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008abb:	31 d2                	xor    edx,edx
c0008abd:	83 c4 3c             	add    esp,0x3c
c0008ac0:	89 d0                	mov    eax,edx
c0008ac2:	5b                   	pop    ebx
c0008ac3:	5e                   	pop    esi
c0008ac4:	5f                   	pop    edi
c0008ac5:	5d                   	pop    ebp
c0008ac6:	c3                   	ret    

c0008ac7 <src_set_ratio>:
c0008ac7:	57                   	push   edi
c0008ac8:	ba 02 00 00 00       	mov    edx,0x2
c0008acd:	56                   	push   esi
c0008ace:	53                   	push   ebx
c0008acf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ad3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ad7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008adb:	85 db                	test   ebx,ebx
c0008add:	74 4c                	je     c0008b2b <src_set_ratio+0x64>
c0008adf:	ba 07 00 00 00       	mov    edx,0x7
c0008ae4:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ae8:	74 41                	je     c0008b2b <src_set_ratio+0x64>
c0008aea:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008aee:	74 3b                	je     c0008b2b <src_set_ratio+0x64>
c0008af0:	68 00 00 70 3f       	push   0x3f700000
c0008af5:	6a 00                	push   0x0
c0008af7:	57                   	push   edi
c0008af8:	56                   	push   esi
c0008af9:	e8 b1 f9 01 00       	call   c00284af <__ltdf2>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	ba 06 00 00 00       	mov    edx,0x6
c0008b06:	85 c0                	test   eax,eax
c0008b08:	78 21                	js     c0008b2b <src_set_ratio+0x64>
c0008b0a:	68 00 00 70 40       	push   0x40700000
c0008b0f:	6a 00                	push   0x0
c0008b11:	57                   	push   edi
c0008b12:	56                   	push   esi
c0008b13:	e8 79 f9 01 00       	call   c0028491 <__gtdf2>
c0008b18:	83 c4 10             	add    esp,0x10
c0008b1b:	ba 06 00 00 00       	mov    edx,0x6
c0008b20:	85 c0                	test   eax,eax
c0008b22:	7f 07                	jg     c0008b2b <src_set_ratio+0x64>
c0008b24:	89 33                	mov    DWORD PTR [ebx],esi
c0008b26:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b29:	31 d2                	xor    edx,edx
c0008b2b:	5b                   	pop    ebx
c0008b2c:	89 d0                	mov    eax,edx
c0008b2e:	5e                   	pop    esi
c0008b2f:	5f                   	pop    edi
c0008b30:	c3                   	ret    

c0008b31 <src_get_channels>:
c0008b31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b35:	b8 02 00 00 00       	mov    eax,0x2
c0008b3a:	85 d2                	test   edx,edx
c0008b3c:	74 14                	je     c0008b52 <src_get_channels+0x21>
c0008b3e:	b8 07 00 00 00       	mov    eax,0x7
c0008b43:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b47:	74 09                	je     c0008b52 <src_get_channels+0x21>
c0008b49:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b4d:	74 03                	je     c0008b52 <src_get_channels+0x21>
c0008b4f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b52:	c3                   	ret    

c0008b53 <src_reset>:
c0008b53:	53                   	push   ebx
c0008b54:	b8 02 00 00 00       	mov    eax,0x2
c0008b59:	83 ec 08             	sub    esp,0x8
c0008b5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b60:	85 db                	test   ebx,ebx
c0008b62:	74 36                	je     c0008b9a <src_reset+0x47>
c0008b64:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b67:	85 c0                	test   eax,eax
c0008b69:	74 09                	je     c0008b74 <src_reset+0x21>
c0008b6b:	83 ec 0c             	sub    esp,0xc
c0008b6e:	53                   	push   ebx
c0008b6f:	ff d0                	call   eax
c0008b71:	83 c4 10             	add    esp,0x10
c0008b74:	31 c0                	xor    eax,eax
c0008b76:	31 d2                	xor    edx,edx
c0008b78:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b7b:	89 03                	mov    DWORD PTR [ebx],eax
c0008b7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b80:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b83:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b8a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b91:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b98:	31 c0                	xor    eax,eax
c0008b9a:	83 c4 08             	add    esp,0x8
c0008b9d:	5b                   	pop    ebx
c0008b9e:	c3                   	ret    

c0008b9f <src_new>:
c0008b9f:	57                   	push   edi
c0008ba0:	56                   	push   esi
c0008ba1:	53                   	push   ebx
c0008ba2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008ba6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008baa:	85 f6                	test   esi,esi
c0008bac:	74 73                	je     c0008c21 <src_new+0x82>
c0008bae:	85 ff                	test   edi,edi
c0008bb0:	7f 08                	jg     c0008bba <src_new+0x1b>
c0008bb2:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bb8:	eb 1e                	jmp    c0008bd8 <src_new+0x39>
c0008bba:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc0:	50                   	push   eax
c0008bc1:	50                   	push   eax
c0008bc2:	6a 3c                	push   0x3c
c0008bc4:	6a 01                	push   0x1
c0008bc6:	e8 a5 6c 00 00       	call   c000f870 <calloc>
c0008bcb:	83 c4 10             	add    esp,0x10
c0008bce:	89 c3                	mov    ebx,eax
c0008bd0:	85 c0                	test   eax,eax
c0008bd2:	75 10                	jne    c0008be4 <src_new+0x45>
c0008bd4:	85 f6                	test   esi,esi
c0008bd6:	75 04                	jne    c0008bdc <src_new+0x3d>
c0008bd8:	31 db                	xor    ebx,ebx
c0008bda:	eb 4b                	jmp    c0008c27 <src_new+0x88>
c0008bdc:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008be2:	eb 43                	jmp    c0008c27 <src_new+0x88>
c0008be4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008be7:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bf2:	e8 1d fb ff ff       	call   c0008714 <psrc_set_converter>
c0008bf7:	85 c0                	test   eax,eax
c0008bf9:	74 18                	je     c0008c13 <src_new+0x74>
c0008bfb:	85 f6                	test   esi,esi
c0008bfd:	74 06                	je     c0008c05 <src_new+0x66>
c0008bff:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c05:	83 ec 0c             	sub    esp,0xc
c0008c08:	53                   	push   ebx
c0008c09:	31 db                	xor    ebx,ebx
c0008c0b:	e8 40 6c 00 00       	call   c000f850 <free>
c0008c10:	83 c4 10             	add    esp,0x10
c0008c13:	83 ec 0c             	sub    esp,0xc
c0008c16:	53                   	push   ebx
c0008c17:	e8 37 ff ff ff       	call   c0008b53 <src_reset>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	eb 06                	jmp    c0008c27 <src_new+0x88>
c0008c21:	85 ff                	test   edi,edi
c0008c23:	7f 9b                	jg     c0008bc0 <src_new+0x21>
c0008c25:	eb b1                	jmp    c0008bd8 <src_new+0x39>
c0008c27:	89 d8                	mov    eax,ebx
c0008c29:	5b                   	pop    ebx
c0008c2a:	5e                   	pop    esi
c0008c2b:	5f                   	pop    edi
c0008c2c:	c3                   	ret    

c0008c2d <src_callback_new>:
c0008c2d:	56                   	push   esi
c0008c2e:	53                   	push   ebx
c0008c2f:	53                   	push   ebx
c0008c30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c38:	85 f6                	test   esi,esi
c0008c3a:	75 0e                	jne    c0008c4a <src_callback_new+0x1d>
c0008c3c:	31 db                	xor    ebx,ebx
c0008c3e:	85 c0                	test   eax,eax
c0008c40:	74 47                	je     c0008c89 <src_callback_new+0x5c>
c0008c42:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c48:	eb 3f                	jmp    c0008c89 <src_callback_new+0x5c>
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	74 06                	je     c0008c54 <src_callback_new+0x27>
c0008c4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c54:	51                   	push   ecx
c0008c55:	50                   	push   eax
c0008c56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5e:	e8 3c ff ff ff       	call   c0008b9f <src_new>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	89 c3                	mov    ebx,eax
c0008c68:	85 c0                	test   eax,eax
c0008c6a:	74 1d                	je     c0008c89 <src_callback_new+0x5c>
c0008c6c:	83 ec 0c             	sub    esp,0xc
c0008c6f:	50                   	push   eax
c0008c70:	e8 de fe ff ff       	call   c0008b53 <src_reset>
c0008c75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c79:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c80:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c83:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c86:	83 c4 10             	add    esp,0x10
c0008c89:	89 d8                	mov    eax,ebx
c0008c8b:	5a                   	pop    edx
c0008c8c:	5b                   	pop    ebx
c0008c8d:	5e                   	pop    esi
c0008c8e:	c3                   	ret    

c0008c8f <src_get_name>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 14             	sub    esp,0x14
c0008c93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c97:	53                   	push   ebx
c0008c98:	e8 d0 4f 00 00       	call   c000dc6d <sinc_get_name>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	85 c0                	test   eax,eax
c0008ca2:	75 1d                	jne    c0008cc1 <src_get_name+0x32>
c0008ca4:	83 ec 0c             	sub    esp,0xc
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 80 57 00 00       	call   c000e42d <zoh_get_name>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 0d                	jne    c0008cc1 <src_get_name+0x32>
c0008cb4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 74 0b 00 00       	jmp    c0009835 <linear_get_name>
c0008cc1:	83 c4 08             	add    esp,0x8
c0008cc4:	5b                   	pop    ebx
c0008cc5:	c3                   	ret    

c0008cc6 <src_get_description>:
c0008cc6:	53                   	push   ebx
c0008cc7:	83 ec 14             	sub    esp,0x14
c0008cca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cce:	53                   	push   ebx
c0008ccf:	e8 ac 4f 00 00       	call   c000dc80 <sinc_get_description>
c0008cd4:	83 c4 10             	add    esp,0x10
c0008cd7:	85 c0                	test   eax,eax
c0008cd9:	75 1d                	jne    c0008cf8 <src_get_description+0x32>
c0008cdb:	83 ec 0c             	sub    esp,0xc
c0008cde:	53                   	push   ebx
c0008cdf:	e8 58 57 00 00       	call   c000e43c <zoh_get_description>
c0008ce4:	83 c4 10             	add    esp,0x10
c0008ce7:	85 c0                	test   eax,eax
c0008ce9:	75 0d                	jne    c0008cf8 <src_get_description+0x32>
c0008ceb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cef:	83 c4 08             	add    esp,0x8
c0008cf2:	5b                   	pop    ebx
c0008cf3:	e9 4c 0b 00 00       	jmp    c0009844 <linear_get_description>
c0008cf8:	83 c4 08             	add    esp,0x8
c0008cfb:	5b                   	pop    ebx
c0008cfc:	c3                   	ret    

c0008cfd <src_get_version>:
c0008cfd:	b8 e0 98 02 c0       	mov    eax,0xc00298e0
c0008d02:	c3                   	ret    

c0008d03 <src_is_valid_ratio>:
c0008d03:	83 ec 1c             	sub    esp,0x1c
c0008d06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d16:	68 00 00 70 3f       	push   0x3f700000
c0008d1b:	6a 00                	push   0x0
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 85 f7 01 00       	call   c00284af <__ltdf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	31 d2                	xor    edx,edx
c0008d2f:	85 c0                	test   eax,eax
c0008d31:	78 1e                	js     c0008d51 <src_is_valid_ratio+0x4e>
c0008d33:	68 00 00 70 40       	push   0x40700000
c0008d38:	6a 00                	push   0x0
c0008d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d42:	e8 4a f7 01 00       	call   c0028491 <__gtdf2>
c0008d47:	31 d2                	xor    edx,edx
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	85 c0                	test   eax,eax
c0008d4e:	0f 9e c2             	setle  dl
c0008d51:	89 d0                	mov    eax,edx
c0008d53:	83 c4 1c             	add    esp,0x1c
c0008d56:	c3                   	ret    

c0008d57 <src_error>:
c0008d57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d5b:	31 c0                	xor    eax,eax
c0008d5d:	85 d2                	test   edx,edx
c0008d5f:	74 03                	je     c0008d64 <src_error+0xd>
c0008d61:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d64:	c3                   	ret    

c0008d65 <src_strerror>:
c0008d65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d69:	31 c0                	xor    eax,eax
c0008d6b:	83 fa 17             	cmp    edx,0x17
c0008d6e:	77 07                	ja     c0008d77 <src_strerror+0x12>
c0008d70:	8b 04 95 40 9d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd62c0]
c0008d77:	c3                   	ret    

c0008d78 <src_simple>:
c0008d78:	56                   	push   esi
c0008d79:	53                   	push   ebx
c0008d7a:	83 ec 18             	sub    esp,0x18
c0008d7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d81:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d85:	50                   	push   eax
c0008d86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8e:	e8 0c fe ff ff       	call   c0008b9f <src_new>
c0008d93:	83 c4 10             	add    esp,0x10
c0008d96:	85 c0                	test   eax,eax
c0008d98:	75 06                	jne    c0008da0 <src_simple+0x28>
c0008d9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9e:	eb 25                	jmp    c0008dc5 <src_simple+0x4d>
c0008da0:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008da7:	89 c3                	mov    ebx,eax
c0008da9:	50                   	push   eax
c0008daa:	50                   	push   eax
c0008dab:	56                   	push   esi
c0008dac:	53                   	push   ebx
c0008dad:	e8 e2 f9 ff ff       	call   c0008794 <src_process>
c0008db2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008db5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008db9:	e8 9a f9 ff ff       	call   c0008758 <src_delete>
c0008dbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dc2:	83 c4 10             	add    esp,0x10
c0008dc5:	83 c4 14             	add    esp,0x14
c0008dc8:	5b                   	pop    ebx
c0008dc9:	5e                   	pop    esi
c0008dca:	c3                   	ret    

c0008dcb <src_short_to_float_array>:
c0008dcb:	53                   	push   ebx
c0008dcc:	83 ec 18             	sub    esp,0x18
c0008dcf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008dd3:	85 db                	test   ebx,ebx
c0008dd5:	74 54                	je     c0008e2b <src_short_to_float_array+0x60>
c0008dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ddb:	4b                   	dec    ebx
c0008ddc:	83 ec 0c             	sub    esp,0xc
c0008ddf:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008de3:	50                   	push   eax
c0008de4:	e8 5a f4 01 00       	call   c0028243 <__floatsidf>
c0008de9:	83 c4 10             	add    esp,0x10
c0008dec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008df4:	68 00 00 00 3f       	push   0x3f000000
c0008df9:	6a 00                	push   0x0
c0008dfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e03:	e8 d8 ed 01 00       	call   c0027be0 <__muldf3>
c0008e08:	59                   	pop    ecx
c0008e09:	59                   	pop    ecx
c0008e0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1a:	e8 94 f6 01 00       	call   c00284b3 <__truncdfsf2>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e26:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e29:	eb a8                	jmp    c0008dd3 <src_short_to_float_array+0x8>
c0008e2b:	83 c4 18             	add    esp,0x18
c0008e2e:	5b                   	pop    ebx
c0008e2f:	c3                   	ret    

c0008e30 <src_float_to_short_array>:
c0008e30:	56                   	push   esi
c0008e31:	53                   	push   ebx
c0008e32:	83 ec 14             	sub    esp,0x14
c0008e35:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e39:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e3d:	85 db                	test   ebx,ebx
c0008e3f:	0f 84 a4 00 00 00    	je     c0008ee9 <src_float_to_short_array+0xb9>
c0008e45:	83 ec 0c             	sub    esp,0xc
c0008e48:	4b                   	dec    ebx
c0008e49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e4d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e50:	e8 82 f7 01 00       	call   c00285d7 <__extendsfdf2>
c0008e55:	83 c4 10             	add    esp,0x10
c0008e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e60:	68 00 00 e0 41       	push   0x41e00000
c0008e65:	6a 00                	push   0x0
c0008e67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6f:	e8 6c ed 01 00       	call   c0027be0 <__muldf3>
c0008e74:	83 c4 10             	add    esp,0x10
c0008e77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e7f:	68 ff ff df 41       	push   0x41dfffff
c0008e84:	68 00 00 c0 ff       	push   0xffc00000
c0008e89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e91:	e8 17 f6 01 00       	call   c00284ad <__gedf2>
c0008e96:	83 c4 10             	add    esp,0x10
c0008e99:	85 c0                	test   eax,eax
c0008e9b:	78 08                	js     c0008ea5 <src_float_to_short_array+0x75>
c0008e9d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008ea3:	eb 98                	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ea5:	68 00 00 e0 c1       	push   0xc1e00000
c0008eaa:	6a 00                	push   0x0
c0008eac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb4:	e8 f8 f5 01 00       	call   c00284b1 <__ledf2>
c0008eb9:	83 c4 10             	add    esp,0x10
c0008ebc:	85 c0                	test   eax,eax
c0008ebe:	7f 0b                	jg     c0008ecb <src_float_to_short_array+0x9b>
c0008ec0:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ec6:	e9 72 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ecb:	50                   	push   eax
c0008ecc:	50                   	push   eax
c0008ecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed5:	e8 86 f7 01 00       	call   c0028660 <lrint>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	c1 f8 10             	sar    eax,0x10
c0008ee0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ee4:	e9 54 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ee9:	83 c4 14             	add    esp,0x14
c0008eec:	5b                   	pop    ebx
c0008eed:	5e                   	pop    esi
c0008eee:	c3                   	ret    

c0008eef <src_int_to_float_array>:
c0008eef:	53                   	push   ebx
c0008ef0:	83 ec 18             	sub    esp,0x18
c0008ef3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ef7:	85 db                	test   ebx,ebx
c0008ef9:	74 52                	je     c0008f4d <src_int_to_float_array+0x5e>
c0008efb:	83 ec 0c             	sub    esp,0xc
c0008efe:	4b                   	dec    ebx
c0008eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f03:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f06:	e8 38 f3 01 00       	call   c0028243 <__floatsidf>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f16:	68 00 00 00 3e       	push   0x3e000000
c0008f1b:	6a 00                	push   0x0
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f25:	e8 b6 ec 01 00       	call   c0027be0 <__muldf3>
c0008f2a:	59                   	pop    ecx
c0008f2b:	59                   	pop    ecx
c0008f2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3c:	e8 72 f5 01 00       	call   c00284b3 <__truncdfsf2>
c0008f41:	83 c4 10             	add    esp,0x10
c0008f44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f48:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f4b:	eb aa                	jmp    c0008ef7 <src_int_to_float_array+0x8>
c0008f4d:	83 c4 18             	add    esp,0x18
c0008f50:	5b                   	pop    ebx
c0008f51:	c3                   	ret    

c0008f52 <src_float_to_int_array>:
c0008f52:	56                   	push   esi
c0008f53:	53                   	push   ebx
c0008f54:	83 ec 14             	sub    esp,0x14
c0008f57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f5f:	85 db                	test   ebx,ebx
c0008f61:	0f 84 a2 00 00 00    	je     c0009009 <src_float_to_int_array+0xb7>
c0008f67:	83 ec 0c             	sub    esp,0xc
c0008f6a:	4b                   	dec    ebx
c0008f6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f6f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f72:	e8 60 f6 01 00       	call   c00285d7 <__extendsfdf2>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f82:	68 00 00 e0 41       	push   0x41e00000
c0008f87:	6a 00                	push   0x0
c0008f89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f91:	e8 4a ec 01 00       	call   c0027be0 <__muldf3>
c0008f96:	83 c4 10             	add    esp,0x10
c0008f99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa1:	68 ff ff df 41       	push   0x41dfffff
c0008fa6:	68 00 00 c0 ff       	push   0xffc00000
c0008fab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008faf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb3:	e8 f5 f4 01 00       	call   c00284ad <__gedf2>
c0008fb8:	83 c4 10             	add    esp,0x10
c0008fbb:	85 c0                	test   eax,eax
c0008fbd:	78 09                	js     c0008fc8 <src_float_to_int_array+0x76>
c0008fbf:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fc6:	eb 97                	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fc8:	68 00 00 e0 c1       	push   0xc1e00000
c0008fcd:	6a 00                	push   0x0
c0008fcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	e8 d5 f4 01 00       	call   c00284b1 <__ledf2>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	85 c0                	test   eax,eax
c0008fe1:	7f 0c                	jg     c0008fef <src_float_to_int_array+0x9d>
c0008fe3:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fea:	e9 70 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fef:	50                   	push   eax
c0008ff0:	50                   	push   eax
c0008ff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff9:	e8 62 f6 01 00       	call   c0028660 <lrint>
c0008ffe:	83 c4 10             	add    esp,0x10
c0009001:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009004:	e9 56 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0009009:	83 c4 14             	add    esp,0x14
c000900c:	5b                   	pop    ebx
c000900d:	5e                   	pop    esi
c000900e:	c3                   	ret    

c000900f <linear_vari_process>:
c000900f:	55                   	push   ebp
c0009010:	31 d2                	xor    edx,edx
c0009012:	57                   	push   edi
c0009013:	56                   	push   esi
c0009014:	53                   	push   ebx
c0009015:	83 ec 3c             	sub    esp,0x3c
c0009018:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000901c:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009020:	0f 8e d3 07 00 00    	jle    c00097f9 <linear_vari_process+0x7ea>
c0009026:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000902a:	ba 05 00 00 00       	mov    edx,0x5
c000902f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009032:	85 db                	test   ebx,ebx
c0009034:	0f 84 bf 07 00 00    	je     c00097f9 <linear_vari_process+0x7ea>
c000903a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000903d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009041:	74 19                	je     c000905c <linear_vari_process+0x4d>
c0009043:	31 d2                	xor    edx,edx
c0009045:	39 c2                	cmp    edx,eax
c0009047:	7d 0c                	jge    c0009055 <linear_vari_process+0x46>
c0009049:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000904b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000904e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009052:	42                   	inc    edx
c0009053:	eb f0                	jmp    c0009045 <linear_vari_process+0x36>
c0009055:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000905c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000905f:	0f af d0             	imul   edx,eax
c0009062:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009065:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009069:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009070:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009073:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000907a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000907e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009081:	8b 00                	mov    eax,DWORD PTR [eax]
c0009083:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009087:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000908b:	68 00 00 70 3f       	push   0x3f700000
c0009090:	6a 00                	push   0x0
c0009092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909a:	e8 10 f4 01 00       	call   c00284af <__ltdf2>
c000909f:	83 c4 10             	add    esp,0x10
c00090a2:	ba 16 00 00 00       	mov    edx,0x16
c00090a7:	85 c0                	test   eax,eax
c00090a9:	0f 88 4a 07 00 00    	js     c00097f9 <linear_vari_process+0x7ea>
c00090af:	68 00 00 70 40       	push   0x40700000
c00090b4:	6a 00                	push   0x0
c00090b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090be:	e8 ce f3 01 00       	call   c0028491 <__gtdf2>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	ba 16 00 00 00       	mov    edx,0x16
c00090cb:	85 c0                	test   eax,eax
c00090cd:	0f 8f 26 07 00 00    	jg     c00097f9 <linear_vari_process+0x7ea>
c00090d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090d7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090e5:	68 00 00 f0 3f       	push   0x3ff00000
c00090ea:	6a 00                	push   0x0
c00090ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f4:	e8 b6 f3 01 00       	call   c00284af <__ltdf2>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	85 c0                	test   eax,eax
c00090fe:	0f 89 89 02 00 00    	jns    c000938d <linear_vari_process+0x37e>
c0009104:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009107:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000910a:	0f 8d 7d 02 00 00    	jge    c000938d <linear_vari_process+0x37e>
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009116:	e8 28 f1 01 00       	call   c0028243 <__floatsidf>
c000911b:	83 c4 10             	add    esp,0x10
c000911e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009121:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009125:	68 00 00 f0 3f       	push   0x3ff00000
c000912a:	6a 00                	push   0x0
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	e8 2a e4 01 00       	call   c0027563 <__adddf3>
c0009139:	83 c4 10             	add    esp,0x10
c000913c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009140:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009144:	52                   	push   edx
c0009145:	50                   	push   eax
c0009146:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914e:	e8 8d ea 01 00       	call   c0027be0 <__muldf3>
c0009153:	5d                   	pop    ebp
c0009154:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009158:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000915c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000915f:	e8 df f0 01 00       	call   c0028243 <__floatsidf>
c0009164:	83 c4 10             	add    esp,0x10
c0009167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000916b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000916f:	52                   	push   edx
c0009170:	50                   	push   eax
c0009171:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009175:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009179:	e8 e5 e3 01 00       	call   c0027563 <__adddf3>
c000917e:	59                   	pop    ecx
c000917f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009183:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009187:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000918a:	e8 b4 f0 01 00       	call   c0028243 <__floatsidf>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009196:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000919a:	52                   	push   edx
c000919b:	50                   	push   eax
c000919c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a4:	e8 04 f3 01 00       	call   c00284ad <__gedf2>
c00091a9:	83 c4 10             	add    esp,0x10
c00091ac:	85 c0                	test   eax,eax
c00091ae:	0f 89 d9 01 00 00    	jns    c000938d <linear_vari_process+0x37e>
c00091b4:	85 ff                	test   edi,edi
c00091b6:	0f 8e f4 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c00091bc:	83 ec 10             	sub    esp,0x10
c00091bf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091c2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091c5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091cc:	ff 30                	push   DWORD PTR [eax]
c00091ce:	e8 e1 e9 01 00       	call   c0027bb4 <__subdf3>
c00091d3:	83 c4 18             	add    esp,0x18
c00091d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091de:	52                   	push   edx
c00091df:	50                   	push   eax
c00091e0:	e8 5b f4 01 00       	call   c0028640 <fabs>
c00091e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ed:	83 c4 10             	add    esp,0x10
c00091f0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091f5:	68 23 42 92 0c       	push   0xc924223
c00091fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009202:	e8 8a f2 01 00       	call   c0028491 <__gtdf2>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	85 c0                	test   eax,eax
c000920c:	0f 8e 9e 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c0009212:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009216:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009219:	8b 00                	mov    eax,DWORD PTR [eax]
c000921b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000921f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009222:	52                   	push   edx
c0009223:	50                   	push   eax
c0009224:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009227:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000922a:	e8 85 e9 01 00       	call   c0027bb4 <__subdf3>
c000922f:	59                   	pop    ecx
c0009230:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009234:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009238:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000923b:	e8 03 f0 01 00       	call   c0028243 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009247:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924b:	52                   	push   edx
c000924c:	50                   	push   eax
c000924d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 86 e9 01 00       	call   c0027be0 <__muldf3>
c000925a:	5f                   	pop    edi
c000925b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000925f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009263:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009266:	e8 d8 ef 01 00       	call   c0028243 <__floatsidf>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009272:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009276:	52                   	push   edx
c0009277:	50                   	push   eax
c0009278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009280:	e8 3f ec 01 00       	call   c0027ec4 <__divdf3>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009290:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009294:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000929c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a0:	e8 be e2 01 00       	call   c0027563 <__adddf3>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b0:	31 ff                	xor    edi,edi
c00092b2:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092b5:	0f 8e 9d 00 00 00    	jle    c0009358 <linear_vari_process+0x349>
c00092bb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092be:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00092cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00092ce:	52                   	push   edx
c00092cf:	52                   	push   edx
c00092d0:	55                   	push   ebp
c00092d1:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092d4:	47                   	inc    edi
c00092d5:	e8 1e dc 01 00       	call   c0026ef8 <__subsf3>
c00092da:	89 04 24             	mov    DWORD PTR [esp],eax
c00092dd:	e8 f5 f2 01 00       	call   c00285d7 <__extendsfdf2>
c00092e2:	83 c4 10             	add    esp,0x10
c00092e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092fd:	e8 de e8 01 00       	call   c0027be0 <__muldf3>
c0009302:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000930d:	e8 c5 f2 01 00       	call   c00285d7 <__extendsfdf2>
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009319:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000931d:	52                   	push   edx
c000931e:	50                   	push   eax
c000931f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009323:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009327:	e8 37 e2 01 00       	call   c0027563 <__adddf3>
c000932c:	59                   	pop    ecx
c000932d:	5d                   	pop    ebp
c000932e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009332:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009336:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933e:	e8 70 f1 01 00       	call   c00284b3 <__truncdfsf2>
c0009343:	83 c4 10             	add    esp,0x10
c0009346:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009349:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000934d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009350:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009353:	e9 5a ff ff ff       	jmp    c00092b2 <linear_vari_process+0x2a3>
c0009358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009360:	68 00 00 f0 3f       	push   0x3ff00000
c0009365:	6a 00                	push   0x0
c0009367:	e8 58 eb 01 00       	call   c0027ec4 <__divdf3>
c000936c:	83 c4 10             	add    esp,0x10
c000936f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009372:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000937c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009380:	e8 de e1 01 00       	call   c0027563 <__adddf3>
c0009385:	83 c4 10             	add    esp,0x10
c0009388:	e9 50 fd ff ff       	jmp    c00090dd <linear_vari_process+0xce>
c000938d:	50                   	push   eax
c000938e:	50                   	push   eax
c000938f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009397:	e8 c4 f2 01 00       	call   c0028660 <lrint>
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	50                   	push   eax
c00093a0:	e8 9e ee 01 00       	call   c0028243 <__floatsidf>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b0:	52                   	push   edx
c00093b1:	50                   	push   eax
c00093b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093ba:	e8 f5 e7 01 00       	call   c0027bb4 <__subdf3>
c00093bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093c7:	83 c4 20             	add    esp,0x20
c00093ca:	6a 00                	push   0x0
c00093cc:	6a 00                	push   0x0
c00093ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d6:	e8 d4 f0 01 00       	call   c00284af <__ltdf2>
c00093db:	83 c4 10             	add    esp,0x10
c00093de:	85 c0                	test   eax,eax
c00093e0:	79 1e                	jns    c0009400 <linear_vari_process+0x3f1>
c00093e2:	68 00 00 f0 3f       	push   0x3ff00000
c00093e7:	6a 00                	push   0x0
c00093e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f1:	e8 6d e1 01 00       	call   c0027563 <__adddf3>
c00093f6:	83 c4 10             	add    esp,0x10
c00093f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009400:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009403:	83 ec 10             	sub    esp,0x10
c0009406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009416:	e8 99 e7 01 00       	call   c0027bb4 <__subdf3>
c000941b:	83 c4 18             	add    esp,0x18
c000941e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009422:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009426:	52                   	push   edx
c0009427:	50                   	push   eax
c0009428:	e8 33 f2 01 00       	call   c0028660 <lrint>
c000942d:	83 c4 10             	add    esp,0x10
c0009430:	0f af f8             	imul   edi,eax
c0009433:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009436:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009439:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000943c:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000943f:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009442:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009446:	0f 8d 13 03 00 00    	jge    c000975f <linear_vari_process+0x750>
c000944c:	83 ec 0c             	sub    esp,0xc
c000944f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009452:	e8 ec ed 01 00       	call   c0028243 <__floatsidf>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009462:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009466:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009472:	e8 69 e7 01 00       	call   c0027be0 <__muldf3>
c0009477:	89 3c 24             	mov    DWORD PTR [esp],edi
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	e8 bc ed 01 00       	call   c0028243 <__floatsidf>
c0009487:	83 c4 10             	add    esp,0x10
c000948a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000948e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009492:	52                   	push   edx
c0009493:	50                   	push   eax
c0009494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000949c:	e8 c2 e0 01 00       	call   c0027563 <__adddf3>
c00094a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094ac:	e8 92 ed 01 00       	call   c0028243 <__floatsidf>
c00094b1:	83 c4 10             	add    esp,0x10
c00094b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094bc:	52                   	push   edx
c00094bd:	50                   	push   eax
c00094be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c6:	e8 e4 ef 01 00       	call   c00284af <__ltdf2>
c00094cb:	83 c4 10             	add    esp,0x10
c00094ce:	85 c0                	test   eax,eax
c00094d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094d4:	0f 89 85 02 00 00    	jns    c000975f <linear_vari_process+0x750>
c00094da:	85 c9                	test   ecx,ecx
c00094dc:	0f 8e f5 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c00094e2:	83 ec 10             	sub    esp,0x10
c00094e5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094e8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094eb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094f2:	ff 30                	push   DWORD PTR [eax]
c00094f4:	e8 bb e6 01 00       	call   c0027bb4 <__subdf3>
c00094f9:	83 c4 18             	add    esp,0x18
c00094fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009500:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009504:	52                   	push   edx
c0009505:	50                   	push   eax
c0009506:	e8 35 f1 01 00       	call   c0028640 <fabs>
c000950b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000950f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009513:	83 c4 10             	add    esp,0x10
c0009516:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000951b:	68 23 42 92 0c       	push   0xc924223
c0009520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009528:	e8 64 ef 01 00       	call   c0028491 <__gtdf2>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	85 c0                	test   eax,eax
c0009532:	0f 8e 9f 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c0009538:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000953c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000953f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009549:	52                   	push   edx
c000954a:	50                   	push   eax
c000954b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000954e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009551:	e8 5e e6 01 00       	call   c0027bb4 <__subdf3>
c0009556:	5f                   	pop    edi
c0009557:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000955b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000955f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009562:	e8 dc ec 01 00       	call   c0028243 <__floatsidf>
c0009567:	83 c4 10             	add    esp,0x10
c000956a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000956e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000957c:	e8 5f e6 01 00       	call   c0027be0 <__muldf3>
c0009581:	5d                   	pop    ebp
c0009582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009586:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000958a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000958d:	e8 b1 ec 01 00       	call   c0028243 <__floatsidf>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009599:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000959d:	52                   	push   edx
c000959e:	50                   	push   eax
c000959f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a7:	e8 18 e9 01 00       	call   c0027ec4 <__divdf3>
c00095ac:	83 c4 10             	add    esp,0x10
c00095af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c7:	e8 97 df 01 00       	call   c0027563 <__adddf3>
c00095cc:	83 c4 10             	add    esp,0x10
c00095cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095d7:	31 ff                	xor    edi,edi
c00095d9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095dc:	39 f8                	cmp    eax,edi
c00095de:	0f 8e ac 00 00 00    	jle    c0009690 <linear_vari_process+0x681>
c00095e4:	8b 16                	mov    edx,DWORD PTR [esi]
c00095e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095e9:	29 c1                	sub    ecx,eax
c00095eb:	89 c8                	mov    eax,ecx
c00095ed:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f0:	01 f8                	add    eax,edi
c00095f2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095f6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009600:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009603:	51                   	push   ecx
c0009604:	01 f8                	add    eax,edi
c0009606:	51                   	push   ecx
c0009607:	47                   	inc    edi
c0009608:	55                   	push   ebp
c0009609:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c000960c:	e8 e7 d8 01 00       	call   c0026ef8 <__subsf3>
c0009611:	89 04 24             	mov    DWORD PTR [esp],eax
c0009614:	e8 be ef 01 00       	call   c00285d7 <__extendsfdf2>
c0009619:	83 c4 10             	add    esp,0x10
c000961c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009620:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009624:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009628:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000962c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009630:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009634:	e8 a7 e5 01 00       	call   c0027be0 <__muldf3>
c0009639:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000963c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009640:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009644:	e8 8e ef 01 00       	call   c00285d7 <__extendsfdf2>
c0009649:	83 c4 10             	add    esp,0x10
c000964c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009650:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009654:	52                   	push   edx
c0009655:	50                   	push   eax
c0009656:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965e:	e8 00 df 01 00       	call   c0027563 <__adddf3>
c0009663:	5d                   	pop    ebp
c0009664:	59                   	pop    ecx
c0009665:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009669:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000966d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009671:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009675:	e8 39 ee 01 00       	call   c00284b3 <__truncdfsf2>
c000967a:	83 c4 10             	add    esp,0x10
c000967d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009681:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009685:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009688:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000968b:	e9 49 ff ff ff       	jmp    c00095d9 <linear_vari_process+0x5ca>
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	68 00 00 f0 3f       	push   0x3ff00000
c000969d:	6a 00                	push   0x0
c000969f:	e8 20 e8 01 00       	call   c0027ec4 <__divdf3>
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	e8 9f de 01 00       	call   c0027563 <__adddf3>
c00096c4:	59                   	pop    ecx
c00096c5:	5f                   	pop    edi
c00096c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d6:	e8 85 ef 01 00       	call   c0028660 <lrint>
c00096db:	83 ec 0c             	sub    esp,0xc
c00096de:	50                   	push   eax
c00096df:	e8 5f eb 01 00       	call   c0028243 <__floatsidf>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ef:	52                   	push   edx
c00096f0:	50                   	push   eax
c00096f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f9:	e8 b6 e4 01 00       	call   c0027bb4 <__subdf3>
c00096fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009702:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009706:	83 c4 20             	add    esp,0x20
c0009709:	6a 00                	push   0x0
c000970b:	6a 00                	push   0x0
c000970d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009711:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009715:	e8 95 ed 01 00       	call   c00284af <__ltdf2>
c000971a:	83 c4 10             	add    esp,0x10
c000971d:	85 c0                	test   eax,eax
c000971f:	79 1e                	jns    c000973f <linear_vari_process+0x730>
c0009721:	68 00 00 f0 3f       	push   0x3ff00000
c0009726:	6a 00                	push   0x0
c0009728:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000972c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009730:	e8 2e de 01 00       	call   c0027563 <__adddf3>
c0009735:	83 c4 10             	add    esp,0x10
c0009738:	89 04 24             	mov    DWORD PTR [esp],eax
c000973b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000973f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009742:	83 ec 10             	sub    esp,0x10
c0009745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000974d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009751:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009755:	e8 5a e4 01 00       	call   c0027bb4 <__subdf3>
c000975a:	e9 bc fc ff ff       	jmp    c000941b <linear_vari_process+0x40c>
c000975f:	39 fd                	cmp    ebp,edi
c0009761:	7d 38                	jge    c000979b <linear_vari_process+0x78c>
c0009763:	83 ec 0c             	sub    esp,0xc
c0009766:	89 f8                	mov    eax,edi
c0009768:	29 e8                	sub    eax,ebp
c000976a:	99                   	cdq    
c000976b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000976e:	50                   	push   eax
c000976f:	e8 cf ea 01 00       	call   c0028243 <__floatsidf>
c0009774:	83 c4 10             	add    esp,0x10
c0009777:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000977b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000977f:	52                   	push   edx
c0009780:	50                   	push   eax
c0009781:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009785:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009789:	e8 d5 dd 01 00       	call   c0027563 <__adddf3>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009794:	89 04 24             	mov    DWORD PTR [esp],eax
c0009797:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000979b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000979f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097a6:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097a9:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097af:	85 c0                	test   eax,eax
c00097b1:	7f 29                	jg     c00097dc <linear_vari_process+0x7cd>
c00097b3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097bf:	89 01                	mov    DWORD PTR [ecx],eax
c00097c1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097c7:	99                   	cdq    
c00097c8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097cb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d1:	99                   	cdq    
c00097d2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d5:	31 d2                	xor    edx,edx
c00097d7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097da:	eb 1d                	jmp    c00097f9 <linear_vari_process+0x7ea>
c00097dc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097df:	31 d2                	xor    edx,edx
c00097e1:	29 c8                	sub    eax,ecx
c00097e3:	c1 e0 02             	shl    eax,0x2
c00097e6:	39 d1                	cmp    ecx,edx
c00097e8:	7e c9                	jle    c00097b3 <linear_vari_process+0x7a4>
c00097ea:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097ec:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097ef:	83 c0 04             	add    eax,0x4
c00097f2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097f6:	42                   	inc    edx
c00097f7:	eb ed                	jmp    c00097e6 <linear_vari_process+0x7d7>
c00097f9:	83 c4 3c             	add    esp,0x3c
c00097fc:	89 d0                	mov    eax,edx
c00097fe:	5b                   	pop    ebx
c00097ff:	5e                   	pop    esi
c0009800:	5f                   	pop    edi
c0009801:	5d                   	pop    ebp
c0009802:	c3                   	ret    

c0009803 <linear_reset>:
c0009803:	83 ec 0c             	sub    esp,0xc
c0009806:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000980a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000980d:	85 c0                	test   eax,eax
c000980f:	74 20                	je     c0009831 <linear_reset+0x2e>
c0009811:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009814:	83 c0 1c             	add    eax,0x1c
c0009817:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000981a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009821:	c1 e2 02             	shl    edx,0x2
c0009824:	51                   	push   ecx
c0009825:	52                   	push   edx
c0009826:	6a 00                	push   0x0
c0009828:	50                   	push   eax
c0009829:	e8 4a 6f ff ff       	call   c0000778 <memset>
c000982e:	83 c4 10             	add    esp,0x10
c0009831:	83 c4 0c             	add    esp,0xc
c0009834:	c3                   	ret    

c0009835 <linear_get_name>:
c0009835:	31 c0                	xor    eax,eax
c0009837:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000983c:	75 05                	jne    c0009843 <linear_get_name+0xe>
c000983e:	b8 a0 9d 02 c0       	mov    eax,0xc0029da0
c0009843:	c3                   	ret    

c0009844 <linear_get_description>:
c0009844:	31 c0                	xor    eax,eax
c0009846:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000984b:	75 05                	jne    c0009852 <linear_get_description+0xe>
c000984d:	b8 b4 9d 02 c0       	mov    eax,0xc0029db4
c0009852:	c3                   	ret    

c0009853 <linear_set_converter>:
c0009853:	53                   	push   ebx
c0009854:	b8 0a 00 00 00       	mov    eax,0xa
c0009859:	83 ec 08             	sub    esp,0x8
c000985c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009860:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009865:	75 6e                	jne    c00098d5 <linear_set_converter+0x82>
c0009867:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000986a:	85 c0                	test   eax,eax
c000986c:	74 13                	je     c0009881 <linear_set_converter+0x2e>
c000986e:	83 ec 0c             	sub    esp,0xc
c0009871:	50                   	push   eax
c0009872:	e8 d9 5f 00 00       	call   c000f850 <free>
c0009877:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000987e:	83 c4 10             	add    esp,0x10
c0009881:	50                   	push   eax
c0009882:	50                   	push   eax
c0009883:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009886:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000988d:	50                   	push   eax
c000988e:	6a 01                	push   0x1
c0009890:	e8 db 5f 00 00       	call   c000f870 <calloc>
c0009895:	83 c4 10             	add    esp,0x10
c0009898:	89 c2                	mov    edx,eax
c000989a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000989d:	85 d2                	test   edx,edx
c000989f:	b8 01 00 00 00       	mov    eax,0x1
c00098a4:	74 2f                	je     c00098d5 <linear_set_converter+0x82>
c00098a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098a9:	83 ec 0c             	sub    esp,0xc
c00098ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098af:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098b5:	c7 43 24 0f 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000900f
c00098bc:	c7 43 20 0f 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000900f
c00098c3:	c7 43 28 03 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009803
c00098ca:	53                   	push   ebx
c00098cb:	e8 33 ff ff ff       	call   c0009803 <linear_reset>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	31 c0                	xor    eax,eax
c00098d5:	83 c4 08             	add    esp,0x8
c00098d8:	5b                   	pop    ebx
c00098d9:	c3                   	ret    

c00098da <int_to_fp>:
c00098da:	c1 e0 0c             	shl    eax,0xc
c00098dd:	c3                   	ret    

c00098de <fp_to_int>:
c00098de:	c1 f8 0c             	sar    eax,0xc
c00098e1:	c3                   	ret    

c00098e2 <fp_fraction_part>:
c00098e2:	25 ff 0f 00 00       	and    eax,0xfff
c00098e7:	c3                   	ret    

c00098e8 <fp_to_double>:
c00098e8:	83 ec 1c             	sub    esp,0x1c
c00098eb:	e8 f2 ff ff ff       	call   c00098e2 <fp_fraction_part>
c00098f0:	83 ec 0c             	sub    esp,0xc
c00098f3:	50                   	push   eax
c00098f4:	e8 4a e9 01 00       	call   c0028243 <__floatsidf>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009900:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009904:	68 00 00 30 3f       	push   0x3f300000
c0009909:	6a 00                	push   0x0
c000990b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009913:	e8 c8 e2 01 00       	call   c0027be0 <__muldf3>
c0009918:	83 c4 2c             	add    esp,0x2c
c000991b:	c3                   	ret    

c000991c <calc_output_single>:
c000991c:	55                   	push   ebp
c000991d:	57                   	push   edi
c000991e:	56                   	push   esi
c000991f:	89 c6                	mov    esi,eax
c0009921:	53                   	push   ebx
c0009922:	89 d3                	mov    ebx,edx
c0009924:	83 ec 4c             	sub    esp,0x4c
c0009927:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000992b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000992e:	e8 a7 ff ff ff       	call   c00098da <int_to_fp>
c0009933:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009936:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000993a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000993e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009942:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009945:	99                   	cdq    
c0009946:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000994e:	f7 fb                	idiv   ebx
c0009950:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009958:	89 da                	mov    edx,ebx
c000995a:	0f af d0             	imul   edx,eax
c000995d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009961:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009965:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009969:	29 c2                	sub    edx,eax
c000996b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000996e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009972:	83 c5 04             	add    ebp,0x4
c0009975:	e8 6e ff ff ff       	call   c00098e8 <fp_to_double>
c000997a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000997e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009986:	e8 53 ff ff ff       	call   c00098de <fp_to_int>
c000998b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000998e:	52                   	push   edx
c000998f:	52                   	push   edx
c0009990:	51                   	push   ecx
c0009991:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009995:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009999:	e8 5a d5 01 00       	call   c0026ef8 <__subsf3>
c000999e:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a1:	e8 31 ec 01 00       	call   c00285d7 <__extendsfdf2>
c00099a6:	83 c4 10             	add    esp,0x10
c00099a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c1:	e8 1a e2 01 00       	call   c0027be0 <__muldf3>
c00099c6:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099ce:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099d5:	e8 fd eb 01 00       	call   c00285d7 <__extendsfdf2>
c00099da:	83 c4 10             	add    esp,0x10
c00099dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099e5:	52                   	push   edx
c00099e6:	50                   	push   eax
c00099e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099ef:	e8 6f db 01 00       	call   c0027563 <__adddf3>
c00099f4:	59                   	pop    ecx
c00099f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099fd:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a03:	e8 cf eb 01 00       	call   c00285d7 <__extendsfdf2>
c0009a08:	83 c4 10             	add    esp,0x10
c0009a0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a13:	52                   	push   edx
c0009a14:	50                   	push   eax
c0009a15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a1d:	e8 be e1 01 00       	call   c0027be0 <__muldf3>
c0009a22:	83 c4 10             	add    esp,0x10
c0009a25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a2d:	52                   	push   edx
c0009a2e:	50                   	push   eax
c0009a2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a37:	e8 27 db 01 00       	call   c0027563 <__adddf3>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a47:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a4b:	0f 89 1d ff ff ff    	jns    c000996e <calc_output_single+0x52>
c0009a51:	89 d9                	mov    ecx,ebx
c0009a53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a57:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a5b:	89 dd                	mov    ebp,ebx
c0009a5d:	29 c8                	sub    eax,ecx
c0009a5f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a67:	99                   	cdq    
c0009a68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a70:	f7 fb                	idiv   ebx
c0009a72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a76:	0f af e8             	imul   ebp,eax
c0009a79:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a7d:	01 cd                	add    ebp,ecx
c0009a7f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a82:	89 e8                	mov    eax,ebp
c0009a84:	83 ee 04             	sub    esi,0x4
c0009a87:	e8 5c fe ff ff       	call   c00098e8 <fp_to_double>
c0009a8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a94:	89 e8                	mov    eax,ebp
c0009a96:	29 dd                	sub    ebp,ebx
c0009a98:	e8 41 fe ff ff       	call   c00098de <fp_to_int>
c0009a9d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa0:	52                   	push   edx
c0009aa1:	52                   	push   edx
c0009aa2:	51                   	push   ecx
c0009aa3:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aa7:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009aab:	e8 48 d4 01 00       	call   c0026ef8 <__subsf3>
c0009ab0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ab3:	e8 1f eb 01 00       	call   c00285d7 <__extendsfdf2>
c0009ab8:	83 c4 10             	add    esp,0x10
c0009abb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009abf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009acf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad3:	e8 08 e1 01 00       	call   c0027be0 <__muldf3>
c0009ad8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009adc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ae3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ae7:	e8 eb ea 01 00       	call   c00285d7 <__extendsfdf2>
c0009aec:	83 c4 10             	add    esp,0x10
c0009aef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009af3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009af7:	52                   	push   edx
c0009af8:	50                   	push   eax
c0009af9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b01:	e8 5d da 01 00       	call   c0027563 <__adddf3>
c0009b06:	59                   	pop    ecx
c0009b07:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b0b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b0f:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b15:	e8 bd ea 01 00       	call   c00285d7 <__extendsfdf2>
c0009b1a:	83 c4 10             	add    esp,0x10
c0009b1d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b21:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b25:	52                   	push   edx
c0009b26:	50                   	push   eax
c0009b27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2f:	e8 ac e0 01 00       	call   c0027be0 <__muldf3>
c0009b34:	83 c4 10             	add    esp,0x10
c0009b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	52                   	push   edx
c0009b40:	50                   	push   eax
c0009b41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b49:	e8 15 da 01 00       	call   c0027563 <__adddf3>
c0009b4e:	83 c4 10             	add    esp,0x10
c0009b51:	85 ed                	test   ebp,ebp
c0009b53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b5b:	0f 8f 21 ff ff ff    	jg     c0009a82 <calc_output_single+0x166>
c0009b61:	52                   	push   edx
c0009b62:	50                   	push   eax
c0009b63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6b:	e8 f3 d9 01 00       	call   c0027563 <__adddf3>
c0009b70:	83 c4 5c             	add    esp,0x5c
c0009b73:	5b                   	pop    ebx
c0009b74:	5e                   	pop    esi
c0009b75:	5f                   	pop    edi
c0009b76:	5d                   	pop    ebp
c0009b77:	c3                   	ret    

c0009b78 <calc_output_stereo>:
c0009b78:	55                   	push   ebp
c0009b79:	89 cd                	mov    ebp,ecx
c0009b7b:	57                   	push   edi
c0009b7c:	56                   	push   esi
c0009b7d:	53                   	push   ebx
c0009b7e:	89 c3                	mov    ebx,eax
c0009b80:	83 ec 6c             	sub    esp,0x6c
c0009b83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b8e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b95:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b99:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b9d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba0:	e8 35 fd ff ff       	call   c00098da <int_to_fp>
c0009ba5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bb9:	29 c8                	sub    eax,ecx
c0009bbb:	99                   	cdq    
c0009bbc:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bc4:	0f af d0             	imul   edx,eax
c0009bc7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bca:	31 d2                	xor    edx,edx
c0009bcc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bd4:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bd7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bdb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bde:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009be2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009be6:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009be9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bee:	29 c1                	sub    ecx,eax
c0009bf0:	31 c0                	xor    eax,eax
c0009bf2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	83 c7 08             	add    edi,0x8
c0009c00:	e8 e3 fc ff ff       	call   c00098e8 <fp_to_double>
c0009c05:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c09:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c11:	e8 c8 fc ff ff       	call   c00098de <fp_to_int>
c0009c16:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c19:	52                   	push   edx
c0009c1a:	52                   	push   edx
c0009c1b:	51                   	push   ecx
c0009c1c:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c20:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c24:	e8 cf d2 01 00       	call   c0026ef8 <__subsf3>
c0009c29:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c2c:	e8 a6 e9 01 00       	call   c00285d7 <__extendsfdf2>
c0009c31:	83 c4 10             	add    esp,0x10
c0009c34:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c38:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c48:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c4c:	e8 8f df 01 00       	call   c0027be0 <__muldf3>
c0009c51:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c55:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c59:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c5c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c60:	e8 72 e9 01 00       	call   c00285d7 <__extendsfdf2>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c6c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c70:	52                   	push   edx
c0009c71:	50                   	push   eax
c0009c72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c76:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7a:	e8 e4 d8 01 00       	call   c0027563 <__adddf3>
c0009c7f:	59                   	pop    ecx
c0009c80:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c84:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c88:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c8e:	e8 44 e9 01 00       	call   c00285d7 <__extendsfdf2>
c0009c93:	83 c4 10             	add    esp,0x10
c0009c96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009caa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cae:	e8 2d df 01 00       	call   c0027be0 <__muldf3>
c0009cb3:	83 c4 10             	add    esp,0x10
c0009cb6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cba:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cbe:	52                   	push   edx
c0009cbf:	50                   	push   eax
c0009cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc8:	e8 96 d8 01 00       	call   c0027563 <__adddf3>
c0009ccd:	59                   	pop    ecx
c0009cce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cd6:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cdc:	e8 f6 e8 01 00       	call   c00285d7 <__extendsfdf2>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ce8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cf8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cfc:	e8 df de 01 00       	call   c0027be0 <__muldf3>
c0009d01:	83 c4 10             	add    esp,0x10
c0009d04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d08:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d0c:	52                   	push   edx
c0009d0d:	50                   	push   eax
c0009d0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d16:	e8 48 d8 01 00       	call   c0027563 <__adddf3>
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d22:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d26:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d2a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d2e:	0f 89 c5 fe ff ff    	jns    c0009bf9 <calc_output_stereo+0x81>
c0009d34:	29 e9                	sub    ecx,ebp
c0009d36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d3a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d3e:	29 c8                	sub    eax,ecx
c0009d40:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d48:	99                   	cdq    
c0009d49:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d4d:	31 d2                	xor    edx,edx
c0009d4f:	0f af f8             	imul   edi,eax
c0009d52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d56:	40                   	inc    eax
c0009d57:	01 cf                	add    edi,ecx
c0009d59:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d5e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d62:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d6a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d6d:	31 c0                	xor    eax,eax
c0009d6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d73:	89 f8                	mov    eax,edi
c0009d75:	83 eb 08             	sub    ebx,0x8
c0009d78:	e8 6b fb ff ff       	call   c00098e8 <fp_to_double>
c0009d7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d85:	89 f8                	mov    eax,edi
c0009d87:	e8 52 fb ff ff       	call   c00098de <fp_to_int>
c0009d8c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d8f:	52                   	push   edx
c0009d90:	52                   	push   edx
c0009d91:	55                   	push   ebp
c0009d92:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d96:	e8 5d d1 01 00       	call   c0026ef8 <__subsf3>
c0009d9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d9e:	e8 34 e8 01 00       	call   c00285d7 <__extendsfdf2>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009daa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dbe:	e8 1d de 01 00       	call   c0027be0 <__muldf3>
c0009dc3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dc6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dce:	e8 04 e8 01 00       	call   c00285d7 <__extendsfdf2>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dde:	52                   	push   edx
c0009ddf:	50                   	push   eax
c0009de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de8:	e8 76 d7 01 00       	call   c0027563 <__adddf3>
c0009ded:	59                   	pop    ecx
c0009dee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009df2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009df6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dfc:	e8 d6 e7 01 00       	call   c00285d7 <__extendsfdf2>
c0009e01:	83 c4 10             	add    esp,0x10
c0009e04:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e08:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e10:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e1c:	e8 bf dd 01 00       	call   c0027be0 <__muldf3>
c0009e21:	83 c4 10             	add    esp,0x10
c0009e24:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e28:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e2c:	52                   	push   edx
c0009e2d:	50                   	push   eax
c0009e2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e36:	e8 28 d7 01 00       	call   c0027563 <__adddf3>
c0009e3b:	5d                   	pop    ebp
c0009e3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e40:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e44:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e4a:	e8 88 e7 01 00       	call   c00285d7 <__extendsfdf2>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6a:	e8 71 dd 01 00       	call   c0027be0 <__muldf3>
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e76:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e7a:	52                   	push   edx
c0009e7b:	50                   	push   eax
c0009e7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e84:	e8 da d6 01 00       	call   c0027563 <__adddf3>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e98:	85 ff                	test   edi,edi
c0009e9a:	0f 8f d3 fe ff ff    	jg     c0009d73 <calc_output_stereo+0x1fb>
c0009ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	e8 ae d6 01 00       	call   c0027563 <__adddf3>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ecc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed0:	e8 0b dd 01 00       	call   c0027be0 <__muldf3>
c0009ed5:	59                   	pop    ecx
c0009ed6:	5b                   	pop    ebx
c0009ed7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009edb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009edf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee7:	e8 c7 e5 01 00       	call   c00284b3 <__truncdfsf2>
c0009eec:	83 c4 10             	add    esp,0x10
c0009eef:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ef6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009efc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	e8 56 d6 01 00       	call   c0027563 <__adddf3>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f28:	e8 b3 dc 01 00       	call   c0027be0 <__muldf3>
c0009f2d:	5e                   	pop    esi
c0009f2e:	5f                   	pop    edi
c0009f2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3f:	e8 6f e5 01 00       	call   c00284b3 <__truncdfsf2>
c0009f44:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f4b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f4e:	83 c4 7c             	add    esp,0x7c
c0009f51:	5b                   	pop    ebx
c0009f52:	5e                   	pop    esi
c0009f53:	5f                   	pop    edi
c0009f54:	5d                   	pop    ebp
c0009f55:	c3                   	ret    

c0009f56 <calc_output_quad>:
c0009f56:	55                   	push   ebp
c0009f57:	57                   	push   edi
c0009f58:	56                   	push   esi
c0009f59:	89 c6                	mov    esi,eax
c0009f5b:	53                   	push   ebx
c0009f5c:	83 ec 7c             	sub    esp,0x7c
c0009f5f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f63:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f67:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f6e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f75:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f7d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f80:	e8 55 f9 ff ff       	call   c00098da <int_to_fp>
c0009f85:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f88:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f8b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f8f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f93:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f97:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f9b:	99                   	cdq    
c0009f9c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa0:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fa4:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009fa7:	31 d2                	xor    edx,edx
c0009fa9:	0f af d8             	imul   ebx,eax
c0009fac:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fb4:	0f af c7             	imul   eax,edi
c0009fb7:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fbb:	29 c1                	sub    ecx,eax
c0009fbd:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fc5:	31 c0                	xor    eax,eax
c0009fc7:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fde:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fe2:	89 d8                	mov    eax,ebx
c0009fe4:	83 c7 10             	add    edi,0x10
c0009fe7:	e8 fc f8 ff ff       	call   c00098e8 <fp_to_double>
c0009fec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ff4:	89 d8                	mov    eax,ebx
c0009ff6:	e8 e3 f8 ff ff       	call   c00098de <fp_to_int>
c0009ffb:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fff:	52                   	push   edx
c000a000:	52                   	push   edx
c000a001:	51                   	push   ecx
c000a002:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a006:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a00a:	e8 e9 ce 01 00       	call   c0026ef8 <__subsf3>
c000a00f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a012:	e8 c0 e5 01 00       	call   c00285d7 <__extendsfdf2>
c000a017:	83 c4 10             	add    esp,0x10
c000a01a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a02e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a032:	e8 a9 db 01 00       	call   c0027be0 <__muldf3>
c000a037:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a03b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a03f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a042:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a046:	e8 8c e5 01 00       	call   c00285d7 <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a052:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a056:	52                   	push   edx
c000a057:	50                   	push   eax
c000a058:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a05c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a060:	e8 fe d4 01 00       	call   c0027563 <__adddf3>
c000a065:	59                   	pop    ecx
c000a066:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a06a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a06e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a074:	e8 5e e5 01 00       	call   c00285d7 <__extendsfdf2>
c000a079:	83 c4 10             	add    esp,0x10
c000a07c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a080:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a090:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a094:	e8 47 db 01 00       	call   c0027be0 <__muldf3>
c000a099:	83 c4 10             	add    esp,0x10
c000a09c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0a4:	52                   	push   edx
c000a0a5:	50                   	push   eax
c000a0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0ae:	e8 b0 d4 01 00       	call   c0027563 <__adddf3>
c000a0b3:	59                   	pop    ecx
c000a0b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0b8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0bc:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0c2:	e8 10 e5 01 00       	call   c00285d7 <__extendsfdf2>
c000a0c7:	83 c4 10             	add    esp,0x10
c000a0ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e2:	e8 f9 da 01 00       	call   c0027be0 <__muldf3>
c000a0e7:	83 c4 10             	add    esp,0x10
c000a0ea:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ee:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f2:	52                   	push   edx
c000a0f3:	50                   	push   eax
c000a0f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0fc:	e8 62 d4 01 00       	call   c0027563 <__adddf3>
c000a101:	59                   	pop    ecx
c000a102:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a106:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a10a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a110:	e8 c2 e4 01 00       	call   c00285d7 <__extendsfdf2>
c000a115:	83 c4 10             	add    esp,0x10
c000a118:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a128:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a12c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a130:	e8 ab da 01 00       	call   c0027be0 <__muldf3>
c000a135:	83 c4 10             	add    esp,0x10
c000a138:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a13c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a140:	52                   	push   edx
c000a141:	50                   	push   eax
c000a142:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a146:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14a:	e8 14 d4 01 00       	call   c0027563 <__adddf3>
c000a14f:	59                   	pop    ecx
c000a150:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a154:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a158:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a15e:	e8 74 e4 01 00       	call   c00285d7 <__extendsfdf2>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a16a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a176:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17e:	e8 5d da 01 00       	call   c0027be0 <__muldf3>
c000a183:	83 c4 10             	add    esp,0x10
c000a186:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a18a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a18e:	52                   	push   edx
c000a18f:	50                   	push   eax
c000a190:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a194:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a198:	e8 c6 d3 01 00       	call   c0027563 <__adddf3>
c000a19d:	83 c4 10             	add    esp,0x10
c000a1a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1a4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1a8:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1ac:	0f 89 30 fe ff ff    	jns    c0009fe2 <calc_output_quad+0x8c>
c000a1b2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1be:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1c2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ca:	29 c8                	sub    eax,ecx
c000a1cc:	99                   	cdq    
c000a1cd:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d1:	31 d2                	xor    edx,edx
c000a1d3:	0f af d8             	imul   ebx,eax
c000a1d6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1da:	40                   	inc    eax
c000a1db:	01 cb                	add    ebx,ecx
c000a1dd:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1e2:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1e6:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1ee:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1f9:	31 c0                	xor    eax,eax
c000a1fb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1ff:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a203:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a207:	89 d8                	mov    eax,ebx
c000a209:	83 ee 10             	sub    esi,0x10
c000a20c:	e8 d7 f6 ff ff       	call   c00098e8 <fp_to_double>
c000a211:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a215:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a219:	89 d8                	mov    eax,ebx
c000a21b:	e8 be f6 ff ff       	call   c00098de <fp_to_int>
c000a220:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a224:	52                   	push   edx
c000a225:	52                   	push   edx
c000a226:	57                   	push   edi
c000a227:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a22b:	e8 c8 cc 01 00       	call   c0026ef8 <__subsf3>
c000a230:	89 04 24             	mov    DWORD PTR [esp],eax
c000a233:	e8 9f e3 01 00       	call   c00285d7 <__extendsfdf2>
c000a238:	83 c4 10             	add    esp,0x10
c000a23b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a23f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a24f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a253:	e8 88 d9 01 00       	call   c0027be0 <__muldf3>
c000a258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a25b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a25f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a263:	e8 6f e3 01 00       	call   c00285d7 <__extendsfdf2>
c000a268:	83 c4 10             	add    esp,0x10
c000a26b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a26f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a273:	52                   	push   edx
c000a274:	50                   	push   eax
c000a275:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a279:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a27d:	e8 e1 d2 01 00       	call   c0027563 <__adddf3>
c000a282:	59                   	pop    ecx
c000a283:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a287:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a28b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a291:	e8 41 e3 01 00       	call   c00285d7 <__extendsfdf2>
c000a296:	83 c4 10             	add    esp,0x10
c000a299:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b1:	e8 2a d9 01 00       	call   c0027be0 <__muldf3>
c000a2b6:	83 c4 10             	add    esp,0x10
c000a2b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c1:	52                   	push   edx
c000a2c2:	50                   	push   eax
c000a2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cb:	e8 93 d2 01 00       	call   c0027563 <__adddf3>
c000a2d0:	5f                   	pop    edi
c000a2d1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2d5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2d9:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2df:	e8 f3 e2 01 00       	call   c00285d7 <__extendsfdf2>
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2fb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ff:	e8 dc d8 01 00       	call   c0027be0 <__muldf3>
c000a304:	83 c4 10             	add    esp,0x10
c000a307:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a30b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a30f:	52                   	push   edx
c000a310:	50                   	push   eax
c000a311:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a315:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a319:	e8 45 d2 01 00       	call   c0027563 <__adddf3>
c000a31e:	59                   	pop    ecx
c000a31f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a323:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a327:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a32d:	e8 a5 e2 01 00       	call   c00285d7 <__extendsfdf2>
c000a332:	83 c4 10             	add    esp,0x10
c000a335:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a339:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a345:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a349:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a34d:	e8 8e d8 01 00       	call   c0027be0 <__muldf3>
c000a352:	83 c4 10             	add    esp,0x10
c000a355:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a359:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a35d:	52                   	push   edx
c000a35e:	50                   	push   eax
c000a35f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a363:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a367:	e8 f7 d1 01 00       	call   c0027563 <__adddf3>
c000a36c:	5f                   	pop    edi
c000a36d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a371:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a375:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a37b:	e8 57 e2 01 00       	call   c00285d7 <__extendsfdf2>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a387:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a38f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a393:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a397:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39b:	e8 40 d8 01 00       	call   c0027be0 <__muldf3>
c000a3a0:	83 c4 10             	add    esp,0x10
c000a3a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3ab:	52                   	push   edx
c000a3ac:	50                   	push   eax
c000a3ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b5:	e8 a9 d1 01 00       	call   c0027563 <__adddf3>
c000a3ba:	83 c4 10             	add    esp,0x10
c000a3bd:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3c5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3c9:	85 db                	test   ebx,ebx
c000a3cb:	0f 8f 36 fe ff ff    	jg     c000a207 <calc_output_quad+0x2b1>
c000a3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	e8 7d d1 01 00       	call   c0027563 <__adddf3>
c000a3e6:	83 c4 10             	add    esp,0x10
c000a3e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	e8 da d7 01 00       	call   c0027be0 <__muldf3>
c000a406:	59                   	pop    ecx
c000a407:	5b                   	pop    ebx
c000a408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a40c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a418:	e8 96 e0 01 00       	call   c00284b3 <__truncdfsf2>
c000a41d:	83 c4 10             	add    esp,0x10
c000a420:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a427:	89 06                	mov    DWORD PTR [esi],eax
c000a429:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a42d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a431:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a435:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a439:	e8 25 d1 01 00       	call   c0027563 <__adddf3>
c000a43e:	83 c4 10             	add    esp,0x10
c000a441:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	e8 82 d7 01 00       	call   c0027be0 <__muldf3>
c000a45e:	5e                   	pop    esi
c000a45f:	5f                   	pop    edi
c000a460:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a464:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	e8 3e e0 01 00       	call   c00284b3 <__truncdfsf2>
c000a475:	83 c4 10             	add    esp,0x10
c000a478:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a47f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a482:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a486:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a48e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a492:	e8 cc d0 01 00       	call   c0027563 <__adddf3>
c000a497:	83 c4 10             	add    esp,0x10
c000a49a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a49e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	e8 29 d7 01 00       	call   c0027be0 <__muldf3>
c000a4b7:	5d                   	pop    ebp
c000a4b8:	59                   	pop    ecx
c000a4b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	e8 e5 df 01 00       	call   c00284b3 <__truncdfsf2>
c000a4ce:	83 c4 10             	add    esp,0x10
c000a4d1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4d8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	e8 73 d0 01 00       	call   c0027563 <__adddf3>
c000a4f0:	83 c4 10             	add    esp,0x10
c000a4f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	e8 d0 d6 01 00       	call   c0027be0 <__muldf3>
c000a510:	5b                   	pop    ebx
c000a511:	5e                   	pop    esi
c000a512:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a516:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a51e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a522:	e8 8c df 01 00       	call   c00284b3 <__truncdfsf2>
c000a527:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a52e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a531:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a537:	5b                   	pop    ebx
c000a538:	5e                   	pop    esi
c000a539:	5f                   	pop    edi
c000a53a:	5d                   	pop    ebp
c000a53b:	c3                   	ret    

c000a53c <calc_output_hex>:
c000a53c:	55                   	push   ebp
c000a53d:	89 cd                	mov    ebp,ecx
c000a53f:	57                   	push   edi
c000a540:	56                   	push   esi
c000a541:	53                   	push   ebx
c000a542:	89 c3                	mov    ebx,eax
c000a544:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a54a:	89 14 24             	mov    DWORD PTR [esp],edx
c000a54d:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a554:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a55b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a55f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a563:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a566:	e8 6f f3 ff ff       	call   c00098da <int_to_fp>
c000a56b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a56e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a572:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a575:	29 c8                	sub    eax,ecx
c000a577:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a57b:	99                   	cdq    
c000a57c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a584:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a587:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a58f:	0f af f8             	imul   edi,eax
c000a592:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a595:	01 cf                	add    edi,ecx
c000a597:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a59b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a59e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5a2:	0f af c2             	imul   eax,edx
c000a5a5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5a9:	29 c1                	sub    ecx,eax
c000a5ab:	31 d2                	xor    edx,edx
c000a5ad:	31 c0                	xor    eax,eax
c000a5af:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5c2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5c6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5ce:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5da:	89 f8                	mov    eax,edi
c000a5dc:	e8 07 f3 ff ff       	call   c00098e8 <fp_to_double>
c000a5e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5e9:	89 f8                	mov    eax,edi
c000a5eb:	e8 ee f2 ff ff       	call   c00098de <fp_to_int>
c000a5f0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5f4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5f7:	52                   	push   edx
c000a5f8:	52                   	push   edx
c000a5f9:	51                   	push   ecx
c000a5fa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5fe:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a605:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a609:	e8 ea c8 01 00       	call   c0026ef8 <__subsf3>
c000a60e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a611:	e8 c1 df 01 00       	call   c00285d7 <__extendsfdf2>
c000a616:	83 c4 10             	add    esp,0x10
c000a619:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a61d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a629:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a62d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a631:	e8 aa d5 01 00       	call   c0027be0 <__muldf3>
c000a636:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a63a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a63e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a641:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a645:	e8 8d df 01 00       	call   c00285d7 <__extendsfdf2>
c000a64a:	83 c4 10             	add    esp,0x10
c000a64d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a651:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a655:	52                   	push   edx
c000a656:	50                   	push   eax
c000a657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65f:	e8 ff ce 01 00       	call   c0027563 <__adddf3>
c000a664:	59                   	pop    ecx
c000a665:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a669:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a66d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a673:	e8 5f df 01 00       	call   c00285d7 <__extendsfdf2>
c000a678:	83 c4 10             	add    esp,0x10
c000a67b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a67f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a683:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a68f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a693:	e8 48 d5 01 00       	call   c0027be0 <__muldf3>
c000a698:	83 c4 10             	add    esp,0x10
c000a69b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a69f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6a3:	52                   	push   edx
c000a6a4:	50                   	push   eax
c000a6a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6ad:	e8 b1 ce 01 00       	call   c0027563 <__adddf3>
c000a6b2:	59                   	pop    ecx
c000a6b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6b7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6bb:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c1:	e8 11 df 01 00       	call   c00285d7 <__extendsfdf2>
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e1:	e8 fa d4 01 00       	call   c0027be0 <__muldf3>
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f1:	52                   	push   edx
c000a6f2:	50                   	push   eax
c000a6f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6fb:	e8 63 ce 01 00       	call   c0027563 <__adddf3>
c000a700:	59                   	pop    ecx
c000a701:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a705:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a709:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a70f:	e8 c3 de 01 00       	call   c00285d7 <__extendsfdf2>
c000a714:	83 c4 10             	add    esp,0x10
c000a717:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a71f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a727:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72f:	e8 ac d4 01 00       	call   c0027be0 <__muldf3>
c000a734:	83 c4 10             	add    esp,0x10
c000a737:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a73b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a73f:	52                   	push   edx
c000a740:	50                   	push   eax
c000a741:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a745:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a749:	e8 15 ce 01 00       	call   c0027563 <__adddf3>
c000a74e:	59                   	pop    ecx
c000a74f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a753:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a757:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a75d:	e8 75 de 01 00       	call   c00285d7 <__extendsfdf2>
c000a762:	83 c4 10             	add    esp,0x10
c000a765:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a769:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a775:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a779:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a77d:	e8 5e d4 01 00       	call   c0027be0 <__muldf3>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a789:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a78d:	52                   	push   edx
c000a78e:	50                   	push   eax
c000a78f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a793:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a797:	e8 c7 cd 01 00       	call   c0027563 <__adddf3>
c000a79c:	59                   	pop    ecx
c000a79d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7a5:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7ab:	e8 27 de 01 00       	call   c00285d7 <__extendsfdf2>
c000a7b0:	83 c4 10             	add    esp,0x10
c000a7b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7b7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cb:	e8 10 d4 01 00       	call   c0027be0 <__muldf3>
c000a7d0:	83 c4 10             	add    esp,0x10
c000a7d3:	83 c6 18             	add    esi,0x18
c000a7d6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7da:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7de:	52                   	push   edx
c000a7df:	50                   	push   eax
c000a7e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e8:	e8 76 cd 01 00       	call   c0027563 <__adddf3>
c000a7ed:	59                   	pop    ecx
c000a7ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7f2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7f6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7fc:	e8 d6 dd 01 00       	call   c00285d7 <__extendsfdf2>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a808:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a80c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a814:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a818:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a81c:	e8 bf d3 01 00       	call   c0027be0 <__muldf3>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a828:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a82c:	52                   	push   edx
c000a82d:	50                   	push   eax
c000a82e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a832:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a836:	e8 28 cd 01 00       	call   c0027563 <__adddf3>
c000a83b:	83 c4 10             	add    esp,0x10
c000a83e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a842:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a846:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a849:	0f 89 8b fd ff ff    	jns    c000a5da <calc_output_hex+0x9e>
c000a84f:	31 f6                	xor    esi,esi
c000a851:	31 ff                	xor    edi,edi
c000a853:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a857:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a85a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a85e:	29 e9                	sub    ecx,ebp
c000a860:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a864:	29 c8                	sub    eax,ecx
c000a866:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a869:	99                   	cdq    
c000a86a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a86e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a871:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a875:	0f af e8             	imul   ebp,eax
c000a878:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a87c:	40                   	inc    eax
c000a87d:	01 cd                	add    ebp,ecx
c000a87f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a884:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a888:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a890:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a893:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a897:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a89b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a89f:	89 e8                	mov    eax,ebp
c000a8a1:	e8 42 f0 ff ff       	call   c00098e8 <fp_to_double>
c000a8a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8ae:	89 e8                	mov    eax,ebp
c000a8b0:	e8 29 f0 ff ff       	call   c00098de <fp_to_int>
c000a8b5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8b9:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8bc:	52                   	push   edx
c000a8bd:	52                   	push   edx
c000a8be:	51                   	push   ecx
c000a8bf:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8c6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8cd:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d1:	e8 22 c6 01 00       	call   c0026ef8 <__subsf3>
c000a8d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8d9:	e8 f9 dc 01 00       	call   c00285d7 <__extendsfdf2>
c000a8de:	83 c4 10             	add    esp,0x10
c000a8e1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f9:	e8 e2 d2 01 00       	call   c0027be0 <__muldf3>
c000a8fe:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a905:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a909:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a90c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a910:	e8 c2 dc 01 00       	call   c00285d7 <__extendsfdf2>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a91c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a920:	52                   	push   edx
c000a921:	50                   	push   eax
c000a922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92a:	e8 34 cc 01 00       	call   c0027563 <__adddf3>
c000a92f:	59                   	pop    ecx
c000a930:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a934:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a938:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a93e:	e8 94 dc 01 00       	call   c00285d7 <__extendsfdf2>
c000a943:	83 c4 10             	add    esp,0x10
c000a946:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a94e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a952:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a956:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95e:	e8 7d d2 01 00       	call   c0027be0 <__muldf3>
c000a963:	83 c4 10             	add    esp,0x10
c000a966:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a96a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a96e:	52                   	push   edx
c000a96f:	50                   	push   eax
c000a970:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a974:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a978:	e8 e6 cb 01 00       	call   c0027563 <__adddf3>
c000a97d:	59                   	pop    ecx
c000a97e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a982:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a986:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a98c:	e8 46 dc 01 00       	call   c00285d7 <__extendsfdf2>
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a998:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9a8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9ac:	e8 2f d2 01 00       	call   c0027be0 <__muldf3>
c000a9b1:	83 c4 10             	add    esp,0x10
c000a9b4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9b8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9bc:	52                   	push   edx
c000a9bd:	50                   	push   eax
c000a9be:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c2:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c6:	e8 98 cb 01 00       	call   c0027563 <__adddf3>
c000a9cb:	59                   	pop    ecx
c000a9cc:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d0:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9d4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9da:	e8 f8 db 01 00       	call   c00285d7 <__extendsfdf2>
c000a9df:	83 c4 10             	add    esp,0x10
c000a9e2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9f6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fa:	e8 e1 d1 01 00       	call   c0027be0 <__muldf3>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa06:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa0a:	52                   	push   edx
c000aa0b:	50                   	push   eax
c000aa0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	e8 4a cb 01 00       	call   c0027563 <__adddf3>
c000aa19:	59                   	pop    ecx
c000aa1a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa1e:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa22:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa28:	e8 aa db 01 00       	call   c00285d7 <__extendsfdf2>
c000aa2d:	83 c4 10             	add    esp,0x10
c000aa30:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa34:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa44:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa48:	e8 93 d1 01 00       	call   c0027be0 <__muldf3>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa54:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa58:	52                   	push   edx
c000aa59:	50                   	push   eax
c000aa5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa5e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa62:	e8 fc ca 01 00       	call   c0027563 <__adddf3>
c000aa67:	59                   	pop    ecx
c000aa68:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa6c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa70:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa76:	e8 5c db 01 00       	call   c00285d7 <__extendsfdf2>
c000aa7b:	83 c4 10             	add    esp,0x10
c000aa7e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa82:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa92:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa96:	e8 45 d1 01 00       	call   c0027be0 <__muldf3>
c000aa9b:	83 c4 10             	add    esp,0x10
c000aa9e:	83 eb 18             	sub    ebx,0x18
c000aaa1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaa5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aaa9:	52                   	push   edx
c000aaaa:	50                   	push   eax
c000aaab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aaaf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab3:	e8 ab ca 01 00       	call   c0027563 <__adddf3>
c000aab8:	59                   	pop    ecx
c000aab9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aabd:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac1:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aac7:	e8 0b db 01 00       	call   c00285d7 <__extendsfdf2>
c000aacc:	83 c4 10             	add    esp,0x10
c000aacf:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aad3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aad7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae7:	e8 f4 d0 01 00       	call   c0027be0 <__muldf3>
c000aaec:	83 c4 10             	add    esp,0x10
c000aaef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaf3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaf7:	52                   	push   edx
c000aaf8:	50                   	push   eax
c000aaf9:	57                   	push   edi
c000aafa:	56                   	push   esi
c000aafb:	e8 63 ca 01 00       	call   c0027563 <__adddf3>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	89 c6                	mov    esi,eax
c000ab05:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab08:	89 d7                	mov    edi,edx
c000ab0a:	85 ed                	test   ebp,ebp
c000ab0c:	0f 8f 8d fd ff ff    	jg     c000a89f <calc_output_hex+0x363>
c000ab12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	e8 3c ca 01 00       	call   c0027563 <__adddf3>
c000ab27:	83 c4 10             	add    esp,0x10
c000ab2a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	e8 9a d0 01 00       	call   c0027be0 <__muldf3>
c000ab46:	59                   	pop    ecx
c000ab47:	5b                   	pop    ebx
c000ab48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab58:	e8 56 d9 01 00       	call   c00284b3 <__truncdfsf2>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab67:	89 03                	mov    DWORD PTR [ebx],eax
c000ab69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab6d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab79:	e8 e5 c9 01 00       	call   c0027563 <__adddf3>
c000ab7e:	83 c4 10             	add    esp,0x10
c000ab81:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	e8 43 d0 01 00       	call   c0027be0 <__muldf3>
c000ab9d:	5d                   	pop    ebp
c000ab9e:	59                   	pop    ecx
c000ab9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aba7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaf:	e8 ff d8 01 00       	call   c00284b3 <__truncdfsf2>
c000abb4:	83 c4 10             	add    esp,0x10
c000abb7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abbe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abcd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd1:	e8 8d c9 01 00       	call   c0027563 <__adddf3>
c000abd6:	83 c4 10             	add    esp,0x10
c000abd9:	89 04 24             	mov    DWORD PTR [esp],eax
c000abdc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	e8 eb cf 01 00       	call   c0027be0 <__muldf3>
c000abf5:	5b                   	pop    ebx
c000abf6:	5d                   	pop    ebp
c000abf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abfb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac07:	e8 a7 d8 01 00       	call   c00284b3 <__truncdfsf2>
c000ac0c:	83 c4 10             	add    esp,0x10
c000ac0f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac1d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac29:	e8 35 c9 01 00       	call   c0027563 <__adddf3>
c000ac2e:	83 c4 10             	add    esp,0x10
c000ac31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac34:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	e8 93 cf 01 00       	call   c0027be0 <__muldf3>
c000ac4d:	59                   	pop    ecx
c000ac4e:	5b                   	pop    ebx
c000ac4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5f:	e8 4f d8 01 00       	call   c00284b3 <__truncdfsf2>
c000ac64:	83 c4 10             	add    esp,0x10
c000ac67:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac6e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac81:	e8 dd c8 01 00       	call   c0027563 <__adddf3>
c000ac86:	83 c4 10             	add    esp,0x10
c000ac89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	e8 3b cf 01 00       	call   c0027be0 <__muldf3>
c000aca5:	5d                   	pop    ebp
c000aca6:	59                   	pop    ecx
c000aca7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb7:	e8 f7 d7 01 00       	call   c00284b3 <__truncdfsf2>
c000acbc:	83 c4 10             	add    esp,0x10
c000acbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acc6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acc9:	57                   	push   edi
c000acca:	56                   	push   esi
c000accb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000accf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd3:	e8 8b c8 01 00       	call   c0027563 <__adddf3>
c000acd8:	83 c4 10             	add    esp,0x10
c000acdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000acde:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ace2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	e8 e9 ce 01 00       	call   c0027be0 <__muldf3>
c000acf7:	5b                   	pop    ebx
c000acf8:	5e                   	pop    esi
c000acf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad09:	e8 a5 d7 01 00       	call   c00284b3 <__truncdfsf2>
c000ad0e:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad15:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad18:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad1e:	5b                   	pop    ebx
c000ad1f:	5e                   	pop    esi
c000ad20:	5f                   	pop    edi
c000ad21:	5d                   	pop    ebp
c000ad22:	c3                   	ret    

c000ad23 <sinc_reset>:
c000ad23:	56                   	push   esi
c000ad24:	53                   	push   ebx
c000ad25:	51                   	push   ecx
c000ad26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad2a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad2d:	85 db                	test   ebx,ebx
c000ad2f:	74 59                	je     c000ad8a <sinc_reset+0x67>
c000ad31:	31 d2                	xor    edx,edx
c000ad33:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad3a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad3d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad47:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad4e:	31 c0                	xor    eax,eax
c000ad50:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad56:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad59:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad5c:	52                   	push   edx
c000ad5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad60:	c1 e0 02             	shl    eax,0x2
c000ad63:	50                   	push   eax
c000ad64:	6a 00                	push   0x0
c000ad66:	56                   	push   esi
c000ad67:	e8 0c 5a ff ff       	call   c0000778 <memset>
c000ad6c:	83 c4 0c             	add    esp,0xc
c000ad6f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad72:	c1 e0 02             	shl    eax,0x2
c000ad75:	50                   	push   eax
c000ad76:	68 aa 00 00 00       	push   0xaa
c000ad7b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad7e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad81:	50                   	push   eax
c000ad82:	e8 f1 59 ff ff       	call   c0000778 <memset>
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	58                   	pop    eax
c000ad8b:	5b                   	pop    ebx
c000ad8c:	5e                   	pop    esi
c000ad8d:	c3                   	ret    

c000ad8e <calc_output_multi>:
c000ad8e:	55                   	push   ebp
c000ad8f:	57                   	push   edi
c000ad90:	56                   	push   esi
c000ad91:	89 c6                	mov    esi,eax
c000ad93:	53                   	push   ebx
c000ad94:	83 ec 4c             	sub    esp,0x4c
c000ad97:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad9b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad9f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ada3:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ada7:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adaf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adb3:	8d 46 44             	lea    eax,[esi+0x44]
c000adb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb9:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adc3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adc6:	e8 0f eb ff ff       	call   c00098da <int_to_fp>
c000adcb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adce:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000add2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000add6:	99                   	cdq    
c000add7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000addb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000addf:	0f af d0             	imul   edx,eax
c000ade2:	0f af c3             	imul   eax,ebx
c000ade5:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ade9:	29 c1                	sub    ecx,eax
c000adeb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adf3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adfa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adfe:	57                   	push   edi
c000adff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae03:	6a 00                	push   0x0
c000ae05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae09:	e8 6a 59 ff ff       	call   c0000778 <memset>
c000ae0e:	83 c4 10             	add    esp,0x10
c000ae11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae15:	89 df                	mov    edi,ebx
c000ae17:	e8 cc ea ff ff       	call   c00098e8 <fp_to_double>
c000ae1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae28:	e8 b1 ea ff ff       	call   c00098de <fp_to_int>
c000ae2d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae30:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae33:	51                   	push   ecx
c000ae34:	51                   	push   ecx
c000ae35:	55                   	push   ebp
c000ae36:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae3a:	e8 b9 c0 01 00       	call   c0026ef8 <__subsf3>
c000ae3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae42:	e8 90 d7 01 00       	call   c00285d7 <__extendsfdf2>
c000ae47:	83 c4 10             	add    esp,0x10
c000ae4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae5e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae62:	e8 79 cd 01 00       	call   c0027be0 <__muldf3>
c000ae67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae72:	e8 60 d7 01 00       	call   c00285d7 <__extendsfdf2>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae82:	52                   	push   edx
c000ae83:	50                   	push   eax
c000ae84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae8c:	e8 d2 c6 01 00       	call   c0027563 <__adddf3>
c000ae91:	83 c4 10             	add    esp,0x10
c000ae94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae98:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae9c:	89 f8                	mov    eax,edi
c000ae9e:	b9 08 00 00 00       	mov    ecx,0x8
c000aea3:	99                   	cdq    
c000aea4:	f7 f9                	idiv   ecx
c000aea6:	4a                   	dec    edx
c000aea7:	83 fa 06             	cmp    edx,0x6
c000aeaa:	77 07                	ja     c000aeb3 <calc_output_multi+0x125>
c000aeac:	ff 24 95 e4 9d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd621c]
c000aeb3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeb6:	4f                   	dec    edi
c000aeb7:	83 ec 0c             	sub    esp,0xc
c000aeba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aebd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aec8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aecc:	e8 06 d7 01 00       	call   c00285d7 <__extendsfdf2>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aedc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeec:	e8 ef cc 01 00       	call   c0027be0 <__muldf3>
c000aef1:	83 c4 10             	add    esp,0x10
c000aef4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aefc:	52                   	push   edx
c000aefd:	50                   	push   eax
c000aefe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af01:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af04:	e8 5a c6 01 00       	call   c0027563 <__adddf3>
c000af09:	83 c4 10             	add    esp,0x10
c000af0c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af0f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af12:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af15:	4f                   	dec    edi
c000af16:	83 ec 0c             	sub    esp,0xc
c000af19:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af20:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af27:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af2b:	e8 a7 d6 01 00       	call   c00285d7 <__extendsfdf2>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4b:	e8 90 cc 01 00       	call   c0027be0 <__muldf3>
c000af50:	83 c4 10             	add    esp,0x10
c000af53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af57:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5b:	52                   	push   edx
c000af5c:	50                   	push   eax
c000af5d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af60:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af63:	e8 fb c5 01 00       	call   c0027563 <__adddf3>
c000af68:	83 c4 10             	add    esp,0x10
c000af6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af6e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af74:	4f                   	dec    edi
c000af75:	83 ec 0c             	sub    esp,0xc
c000af78:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af7f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af86:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af8a:	e8 48 d6 01 00       	call   c00285d7 <__extendsfdf2>
c000af8f:	83 c4 10             	add    esp,0x10
c000af92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afa6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afaa:	e8 31 cc 01 00       	call   c0027be0 <__muldf3>
c000afaf:	83 c4 10             	add    esp,0x10
c000afb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afb6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afba:	52                   	push   edx
c000afbb:	50                   	push   eax
c000afbc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afbf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afc2:	e8 9c c5 01 00       	call   c0027563 <__adddf3>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afcd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afd3:	4f                   	dec    edi
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afde:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afe5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afe9:	e8 e9 d5 01 00       	call   c00285d7 <__extendsfdf2>
c000afee:	83 c4 10             	add    esp,0x10
c000aff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000affd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b001:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b005:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b009:	e8 d2 cb 01 00       	call   c0027be0 <__muldf3>
c000b00e:	83 c4 10             	add    esp,0x10
c000b011:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b015:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b019:	52                   	push   edx
c000b01a:	50                   	push   eax
c000b01b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b01e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b021:	e8 3d c5 01 00       	call   c0027563 <__adddf3>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b02c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b02f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b032:	4f                   	dec    edi
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b039:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b03d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b044:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b048:	e8 8a d5 01 00       	call   c00285d7 <__extendsfdf2>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b054:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b060:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b064:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b068:	e8 73 cb 01 00       	call   c0027be0 <__muldf3>
c000b06d:	83 c4 10             	add    esp,0x10
c000b070:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b074:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b078:	52                   	push   edx
c000b079:	50                   	push   eax
c000b07a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b07d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b080:	e8 de c4 01 00       	call   c0027563 <__adddf3>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b08b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b08e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b091:	4f                   	dec    edi
c000b092:	83 ec 0c             	sub    esp,0xc
c000b095:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b098:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b09c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a7:	e8 2b d5 01 00       	call   c00285d7 <__extendsfdf2>
c000b0ac:	83 c4 10             	add    esp,0x10
c000b0af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c7:	e8 14 cb 01 00       	call   c0027be0 <__muldf3>
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d7:	52                   	push   edx
c000b0d8:	50                   	push   eax
c000b0d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0dc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0df:	e8 7f c4 01 00       	call   c0027563 <__adddf3>
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ea:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f0:	4f                   	dec    edi
c000b0f1:	83 ec 0c             	sub    esp,0xc
c000b0f4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0fb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b102:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b106:	e8 cc d4 01 00       	call   c00285d7 <__extendsfdf2>
c000b10b:	83 c4 10             	add    esp,0x10
c000b10e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b112:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b116:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b122:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b126:	e8 b5 ca 01 00       	call   c0027be0 <__muldf3>
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b132:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b136:	52                   	push   edx
c000b137:	50                   	push   eax
c000b138:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b13b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13e:	e8 20 c4 01 00       	call   c0027563 <__adddf3>
c000b143:	83 c4 10             	add    esp,0x10
c000b146:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b149:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b14f:	4f                   	dec    edi
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b156:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b15a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b161:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b165:	e8 6d d4 01 00       	call   c00285d7 <__extendsfdf2>
c000b16a:	83 c4 10             	add    esp,0x10
c000b16d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b171:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b175:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b179:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b181:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b185:	e8 56 ca 01 00       	call   c0027be0 <__muldf3>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b191:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b195:	52                   	push   edx
c000b196:	50                   	push   eax
c000b197:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b19a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19d:	e8 c1 c3 01 00       	call   c0027563 <__adddf3>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1ab:	85 ff                	test   edi,edi
c000b1ad:	0f 8f e9 fc ff ff    	jg     c000ae9c <calc_output_multi+0x10e>
c000b1b3:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1bb:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1bf:	0f 89 4c fc ff ff    	jns    c000ae11 <calc_output_multi+0x83>
c000b1c5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1cd:	29 c8                	sub    eax,ecx
c000b1cf:	99                   	cdq    
c000b1d0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1d8:	0f af d0             	imul   edx,eax
c000b1db:	40                   	inc    eax
c000b1dc:	01 d1                	add    ecx,edx
c000b1de:	0f af c3             	imul   eax,ebx
c000b1e1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1e5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1ec:	55                   	push   ebp
c000b1ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f1:	6a 00                	push   0x0
c000b1f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1f7:	e8 7c 55 ff ff       	call   c0000778 <memset>
c000b1fc:	83 c4 10             	add    esp,0x10
c000b1ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b203:	e8 e0 e6 ff ff       	call   c00098e8 <fp_to_double>
c000b208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b20c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b210:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b214:	e8 c5 e6 ff ff       	call   c00098de <fp_to_int>
c000b219:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b21c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b21f:	57                   	push   edi
c000b220:	57                   	push   edi
c000b221:	89 df                	mov    edi,ebx
c000b223:	55                   	push   ebp
c000b224:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b228:	e8 cb bc 01 00       	call   c0026ef8 <__subsf3>
c000b22d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b230:	e8 a2 d3 01 00       	call   c00285d7 <__extendsfdf2>
c000b235:	83 c4 10             	add    esp,0x10
c000b238:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b23c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b240:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b248:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b24c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b250:	e8 8b c9 01 00       	call   c0027be0 <__muldf3>
c000b255:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b258:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b25c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b260:	e8 72 d3 01 00       	call   c00285d7 <__extendsfdf2>
c000b265:	83 c4 10             	add    esp,0x10
c000b268:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b26c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b270:	52                   	push   edx
c000b271:	50                   	push   eax
c000b272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	e8 e4 c2 01 00       	call   c0027563 <__adddf3>
c000b27f:	83 c4 10             	add    esp,0x10
c000b282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b286:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b28a:	89 f8                	mov    eax,edi
c000b28c:	b9 08 00 00 00       	mov    ecx,0x8
c000b291:	99                   	cdq    
c000b292:	f7 f9                	idiv   ecx
c000b294:	4a                   	dec    edx
c000b295:	83 fa 06             	cmp    edx,0x6
c000b298:	77 07                	ja     c000b2a1 <calc_output_multi+0x513>
c000b29a:	ff 24 95 00 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6200]
c000b2a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2a5:	4f                   	dec    edi
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2b7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2bb:	e8 17 d3 01 00       	call   c00285d7 <__extendsfdf2>
c000b2c0:	83 c4 10             	add    esp,0x10
c000b2c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2db:	e8 00 c9 01 00       	call   c0027be0 <__muldf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2eb:	52                   	push   edx
c000b2ec:	50                   	push   eax
c000b2ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2f3:	e8 6b c2 01 00       	call   c0027563 <__adddf3>
c000b2f8:	83 c4 10             	add    esp,0x10
c000b2fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2fe:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b305:	4f                   	dec    edi
c000b306:	83 ec 0c             	sub    esp,0xc
c000b309:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b30c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b310:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b317:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b31b:	e8 b7 d2 01 00       	call   c00285d7 <__extendsfdf2>
c000b320:	83 c4 10             	add    esp,0x10
c000b323:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b327:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b32f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b333:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b337:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33b:	e8 a0 c8 01 00       	call   c0027be0 <__muldf3>
c000b340:	83 c4 10             	add    esp,0x10
c000b343:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b347:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34b:	52                   	push   edx
c000b34c:	50                   	push   eax
c000b34d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b350:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b353:	e8 0b c2 01 00       	call   c0027563 <__adddf3>
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b35e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b365:	4f                   	dec    edi
c000b366:	83 ec 0c             	sub    esp,0xc
c000b369:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b36c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b370:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b377:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b37b:	e8 57 d2 01 00       	call   c00285d7 <__extendsfdf2>
c000b380:	83 c4 10             	add    esp,0x10
c000b383:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b387:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b38f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b393:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b397:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39b:	e8 40 c8 01 00       	call   c0027be0 <__muldf3>
c000b3a0:	83 c4 10             	add    esp,0x10
c000b3a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ab:	52                   	push   edx
c000b3ac:	50                   	push   eax
c000b3ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3b3:	e8 ab c1 01 00       	call   c0027563 <__adddf3>
c000b3b8:	83 c4 10             	add    esp,0x10
c000b3bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3be:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c5:	4f                   	dec    edi
c000b3c6:	83 ec 0c             	sub    esp,0xc
c000b3c9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3d7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3db:	e8 f7 d1 01 00       	call   c00285d7 <__extendsfdf2>
c000b3e0:	83 c4 10             	add    esp,0x10
c000b3e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3fb:	e8 e0 c7 01 00       	call   c0027be0 <__muldf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b407:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b40b:	52                   	push   edx
c000b40c:	50                   	push   eax
c000b40d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b410:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b413:	e8 4b c1 01 00       	call   c0027563 <__adddf3>
c000b418:	83 c4 10             	add    esp,0x10
c000b41b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b41e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b425:	4f                   	dec    edi
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b42c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b430:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b437:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b43b:	e8 97 d1 01 00       	call   c00285d7 <__extendsfdf2>
c000b440:	83 c4 10             	add    esp,0x10
c000b443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b447:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b453:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b457:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45b:	e8 80 c7 01 00       	call   c0027be0 <__muldf3>
c000b460:	83 c4 10             	add    esp,0x10
c000b463:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b467:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46b:	52                   	push   edx
c000b46c:	50                   	push   eax
c000b46d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b470:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b473:	e8 eb c0 01 00       	call   c0027563 <__adddf3>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b47e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b481:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b485:	4f                   	dec    edi
c000b486:	83 ec 0c             	sub    esp,0xc
c000b489:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b48c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b490:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b497:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b49b:	e8 37 d1 01 00       	call   c00285d7 <__extendsfdf2>
c000b4a0:	83 c4 10             	add    esp,0x10
c000b4a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bb:	e8 20 c7 01 00       	call   c0027be0 <__muldf3>
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4cb:	52                   	push   edx
c000b4cc:	50                   	push   eax
c000b4cd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4d3:	e8 8b c0 01 00       	call   c0027563 <__adddf3>
c000b4d8:	83 c4 10             	add    esp,0x10
c000b4db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4de:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4e5:	4f                   	dec    edi
c000b4e6:	83 ec 0c             	sub    esp,0xc
c000b4e9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4f7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4fb:	e8 d7 d0 01 00       	call   c00285d7 <__extendsfdf2>
c000b500:	83 c4 10             	add    esp,0x10
c000b503:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b507:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b513:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b517:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51b:	e8 c0 c6 01 00       	call   c0027be0 <__muldf3>
c000b520:	83 c4 10             	add    esp,0x10
c000b523:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b527:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b52b:	52                   	push   edx
c000b52c:	50                   	push   eax
c000b52d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b530:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b533:	e8 2b c0 01 00       	call   c0027563 <__adddf3>
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b53e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b545:	4f                   	dec    edi
c000b546:	83 ec 0c             	sub    esp,0xc
c000b549:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b54c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b550:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b557:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b55b:	e8 77 d0 01 00       	call   c00285d7 <__extendsfdf2>
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b567:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b573:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b577:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57b:	e8 60 c6 01 00       	call   c0027be0 <__muldf3>
c000b580:	83 c4 10             	add    esp,0x10
c000b583:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b587:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b58b:	52                   	push   edx
c000b58c:	50                   	push   eax
c000b58d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b590:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b593:	e8 cb bf 01 00       	call   c0027563 <__adddf3>
c000b598:	83 c4 10             	add    esp,0x10
c000b59b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b59e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a1:	85 ff                	test   edi,edi
c000b5a3:	0f 8f e1 fc ff ff    	jg     c000b28a <calc_output_multi+0x4fc>
c000b5a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5ad:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b1:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5b5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5ba:	0f 8f 3f fc ff ff    	jg     c000b1ff <calc_output_multi+0x471>
c000b5c0:	be 08 00 00 00       	mov    esi,0x8
c000b5c5:	89 d8                	mov    eax,ebx
c000b5c7:	99                   	cdq    
c000b5c8:	f7 fe                	idiv   esi
c000b5ca:	4a                   	dec    edx
c000b5cb:	83 fa 06             	cmp    edx,0x6
c000b5ce:	77 07                	ja     c000b5d7 <calc_output_multi+0x849>
c000b5d0:	ff 24 95 1c 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd61e4]
c000b5d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5db:	4b                   	dec    ebx
c000b5dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ee:	e8 70 bf 01 00       	call   c0027563 <__adddf3>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60e:	e8 cd c5 01 00       	call   c0027be0 <__muldf3>
c000b613:	5d                   	pop    ebp
c000b614:	59                   	pop    ecx
c000b615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b619:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 89 ce 01 00       	call   c00284b3 <__truncdfsf2>
c000b62a:	83 c4 10             	add    esp,0x10
c000b62d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b631:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b638:	4b                   	dec    ebx
c000b639:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b63d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b644:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b648:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b64b:	e8 13 bf 01 00       	call   c0027563 <__adddf3>
c000b650:	83 c4 10             	add    esp,0x10
c000b653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b657:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66b:	e8 70 c5 01 00       	call   c0027be0 <__muldf3>
c000b670:	59                   	pop    ecx
c000b671:	5f                   	pop    edi
c000b672:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b676:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 2c ce 01 00       	call   c00284b3 <__truncdfsf2>
c000b687:	83 c4 10             	add    esp,0x10
c000b68a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b68e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b695:	4b                   	dec    ebx
c000b696:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b69a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b69d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a8:	e8 b6 be 01 00       	call   c0027563 <__adddf3>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c8:	e8 13 c5 01 00       	call   c0027be0 <__muldf3>
c000b6cd:	5f                   	pop    edi
c000b6ce:	5d                   	pop    ebp
c000b6cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6df:	e8 cf cd 01 00       	call   c00284b3 <__truncdfsf2>
c000b6e4:	83 c4 10             	add    esp,0x10
c000b6e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6f2:	4b                   	dec    ebx
c000b6f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b702:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b705:	e8 59 be 01 00       	call   c0027563 <__adddf3>
c000b70a:	83 c4 10             	add    esp,0x10
c000b70d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b711:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b715:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b719:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b721:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b725:	e8 b6 c4 01 00       	call   c0027be0 <__muldf3>
c000b72a:	5d                   	pop    ebp
c000b72b:	59                   	pop    ecx
c000b72c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b730:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b73c:	e8 72 cd 01 00       	call   c00284b3 <__truncdfsf2>
c000b741:	83 c4 10             	add    esp,0x10
c000b744:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b748:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b74b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b74f:	4b                   	dec    ebx
c000b750:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b754:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b75b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b762:	e8 fc bd 01 00       	call   c0027563 <__adddf3>
c000b767:	83 c4 10             	add    esp,0x10
c000b76a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b76e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b782:	e8 59 c4 01 00       	call   c0027be0 <__muldf3>
c000b787:	59                   	pop    ecx
c000b788:	5f                   	pop    edi
c000b789:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b78d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b799:	e8 15 cd 01 00       	call   c00284b3 <__truncdfsf2>
c000b79e:	83 c4 10             	add    esp,0x10
c000b7a1:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7a5:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ac:	4b                   	dec    ebx
c000b7ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7b8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7bc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bf:	e8 9f bd 01 00       	call   c0027563 <__adddf3>
c000b7c4:	83 c4 10             	add    esp,0x10
c000b7c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7df:	e8 fc c3 01 00       	call   c0027be0 <__muldf3>
c000b7e4:	5f                   	pop    edi
c000b7e5:	5d                   	pop    ebp
c000b7e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f6:	e8 b8 cc 01 00       	call   c00284b3 <__truncdfsf2>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b802:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b809:	4b                   	dec    ebx
c000b80a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b80e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b815:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b819:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b81c:	e8 42 bd 01 00       	call   c0027563 <__adddf3>
c000b821:	83 c4 10             	add    esp,0x10
c000b824:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b828:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b834:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b838:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b83c:	e8 9f c3 01 00       	call   c0027be0 <__muldf3>
c000b841:	5d                   	pop    ebp
c000b842:	59                   	pop    ecx
c000b843:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b847:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b84b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b84f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b853:	e8 5b cc 01 00       	call   c00284b3 <__truncdfsf2>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b85f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b866:	4b                   	dec    ebx
c000b867:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b86b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b86e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b872:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b876:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b879:	e8 e5 bc 01 00       	call   c0027563 <__adddf3>
c000b87e:	83 c4 10             	add    esp,0x10
c000b881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b885:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b891:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b895:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b899:	e8 42 c3 01 00       	call   c0027be0 <__muldf3>
c000b89e:	59                   	pop    ecx
c000b89f:	5f                   	pop    edi
c000b8a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b0:	e8 fe cb 01 00       	call   c00284b3 <__truncdfsf2>
c000b8b5:	83 c4 10             	add    esp,0x10
c000b8b8:	85 db                	test   ebx,ebx
c000b8ba:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8be:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c1:	0f 8f fe fc ff ff    	jg     c000b5c5 <calc_output_multi+0x837>
c000b8c7:	83 c4 4c             	add    esp,0x4c
c000b8ca:	5b                   	pop    ebx
c000b8cb:	5e                   	pop    esi
c000b8cc:	5f                   	pop    edi
c000b8cd:	5d                   	pop    ebp
c000b8ce:	c3                   	ret    

c000b8cf <double_to_fp>:
c000b8cf:	83 ec 0c             	sub    esp,0xc
c000b8d2:	68 00 00 b0 40       	push   0x40b00000
c000b8d7:	6a 00                	push   0x0
c000b8d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e1:	e8 fa c2 01 00       	call   c0027be0 <__muldf3>
c000b8e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8ee:	83 c4 1c             	add    esp,0x1c
c000b8f1:	e9 6a cd 01 00       	jmp    c0028660 <lrint>

c000b8f6 <prepare_data>:
c000b8f6:	55                   	push   ebp
c000b8f7:	57                   	push   edi
c000b8f8:	56                   	push   esi
c000b8f9:	53                   	push   ebx
c000b8fa:	83 ec 1c             	sub    esp,0x1c
c000b8fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b901:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b905:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b909:	0f 89 57 01 00 00    	jns    c000ba66 <prepare_data+0x170>
c000b90f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b912:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b915:	85 d2                	test   edx,edx
c000b917:	75 0d                	jne    c000b926 <prepare_data+0x30>
c000b919:	8d 14 36             	lea    edx,[esi+esi*1]
c000b91c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b91f:	29 d0                	sub    eax,edx
c000b921:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b924:	eb 44                	jmp    c000b96a <prepare_data+0x74>
c000b926:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b929:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b92c:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b92f:	39 c1                	cmp    ecx,eax
c000b931:	7d 04                	jge    c000b937 <prepare_data+0x41>
c000b933:	29 d0                	sub    eax,edx
c000b935:	eb 2d                	jmp    c000b964 <prepare_data+0x6e>
c000b937:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b93d:	29 d7                	sub    edi,edx
c000b93f:	01 f7                	add    edi,esi
c000b941:	51                   	push   ecx
c000b942:	29 f2                	sub    edx,esi
c000b944:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b94b:	8d 14 90             	lea    edx,[eax+edx*4]
c000b94e:	51                   	push   ecx
c000b94f:	52                   	push   edx
c000b950:	50                   	push   eax
c000b951:	e8 26 4d ff ff       	call   c000067c <memmove>
c000b956:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b959:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b95c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b95f:	29 f0                	sub    eax,esi
c000b961:	83 c4 10             	add    esp,0x10
c000b964:	29 f0                	sub    eax,esi
c000b966:	79 02                	jns    c000b96a <prepare_data+0x74>
c000b968:	31 c0                	xor    eax,eax
c000b96a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b96d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b970:	29 ef                	sub    edi,ebp
c000b972:	39 c7                	cmp    edi,eax
c000b974:	7e 02                	jle    c000b978 <prepare_data+0x82>
c000b976:	89 c7                	mov    edi,eax
c000b978:	89 f8                	mov    eax,edi
c000b97a:	99                   	cdq    
c000b97b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b97e:	b8 15 00 00 00       	mov    eax,0x15
c000b983:	29 d7                	sub    edi,edx
c000b985:	0f 88 dd 00 00 00    	js     c000ba68 <prepare_data+0x172>
c000b98b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b98e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b991:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b994:	0f 8f ce 00 00 00    	jg     c000ba68 <prepare_data+0x172>
c000b99a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a0:	50                   	push   eax
c000b9a1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9a8:	50                   	push   eax
c000b9a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9af:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9b2:	50                   	push   eax
c000b9b3:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9ba:	50                   	push   eax
c000b9bb:	e8 84 4d ff ff       	call   c0000744 <memcpy>
c000b9c0:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9c3:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9c6:	01 fd                	add    ebp,edi
c000b9c8:	01 f9                	add    ecx,edi
c000b9ca:	83 c4 10             	add    esp,0x10
c000b9cd:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9d3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9da:	0f 85 86 00 00 00    	jne    c000ba66 <prepare_data+0x170>
c000b9e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9e3:	89 e8                	mov    eax,ebp
c000b9e5:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9e8:	29 c8                	sub    eax,ecx
c000b9ea:	39 f8                	cmp    eax,edi
c000b9ec:	7d 78                	jge    c000ba66 <prepare_data+0x170>
c000b9ee:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9f2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9f6:	74 6e                	je     c000ba66 <prepare_data+0x170>
c000b9f8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9ff:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba02:	29 ef                	sub    edi,ebp
c000ba04:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba08:	7c 29                	jl     c000ba33 <prepare_data+0x13d>
c000ba0a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0d:	29 f1                	sub    ecx,esi
c000ba0f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba16:	55                   	push   ebp
c000ba17:	50                   	push   eax
c000ba18:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba1b:	50                   	push   eax
c000ba1c:	52                   	push   edx
c000ba1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba21:	e8 56 4c ff ff       	call   c000067c <memmove>
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba2c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba33:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba36:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba39:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba3c:	83 c6 05             	add    esi,0x5
c000ba3f:	78 07                	js     c000ba48 <prepare_data+0x152>
c000ba41:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba44:	39 cf                	cmp    edi,ecx
c000ba46:	7e 04                	jle    c000ba4c <prepare_data+0x156>
c000ba48:	89 ce                	mov    esi,ecx
c000ba4a:	29 c6                	sub    esi,eax
c000ba4c:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba4f:	51                   	push   ecx
c000ba50:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba57:	51                   	push   ecx
c000ba58:	6a 00                	push   0x0
c000ba5a:	50                   	push   eax
c000ba5b:	e8 18 4d ff ff       	call   c0000778 <memset>
c000ba60:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba63:	83 c4 10             	add    esp,0x10
c000ba66:	31 c0                	xor    eax,eax
c000ba68:	83 c4 1c             	add    esp,0x1c
c000ba6b:	5b                   	pop    ebx
c000ba6c:	5e                   	pop    esi
c000ba6d:	5f                   	pop    edi
c000ba6e:	5d                   	pop    ebp
c000ba6f:	c3                   	ret    

c000ba70 <sinc_multichan_vari_process>:
c000ba70:	55                   	push   ebp
c000ba71:	ba 05 00 00 00       	mov    edx,0x5
c000ba76:	57                   	push   edi
c000ba77:	56                   	push   esi
c000ba78:	53                   	push   ebx
c000ba79:	83 ec 4c             	sub    esp,0x4c
c000ba7c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba80:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba84:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba87:	85 db                	test   ebx,ebx
c000ba89:	0f 84 9b 06 00 00    	je     c000c12a <sinc_multichan_vari_process+0x6ba>
c000ba8f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba92:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba95:	0f af c5             	imul   eax,ebp
c000ba98:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba9b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba9e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baa5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000baac:	0f af c5             	imul   eax,ebp
c000baaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bab2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bab5:	8b 06                	mov    eax,DWORD PTR [esi]
c000bab7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000babb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000babf:	68 00 00 70 3f       	push   0x3f700000
c000bac4:	6a 00                	push   0x0
c000bac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bace:	e8 dc c9 01 00       	call   c00284af <__ltdf2>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	ba 16 00 00 00       	mov    edx,0x16
c000badb:	85 c0                	test   eax,eax
c000badd:	0f 88 47 06 00 00    	js     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bae3:	68 00 00 70 40       	push   0x40700000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf2:	e8 9a c9 01 00       	call   c0028491 <__gtdf2>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	ba 16 00 00 00       	mov    edx,0x16
c000baff:	85 c0                	test   eax,eax
c000bb01:	0f 8f 23 06 00 00    	jg     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bb07:	83 ec 0c             	sub    esp,0xc
c000bb0a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb0d:	e8 31 c7 01 00       	call   c0028243 <__floatsidf>
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb1d:	68 00 00 00 40       	push   0x40000000
c000bb22:	6a 00                	push   0x0
c000bb24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb2c:	e8 32 ba 01 00       	call   c0027563 <__adddf3>
c000bb31:	59                   	pop    ecx
c000bb32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb36:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb3a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb3d:	e8 01 c7 01 00       	call   c0028243 <__floatsidf>
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb4d:	52                   	push   edx
c000bb4e:	50                   	push   eax
c000bb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb57:	e8 68 c3 01 00       	call   c0027ec4 <__divdf3>
c000bb5c:	83 c4 10             	add    esp,0x10
c000bb5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb67:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb6a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	e8 07 c9 01 00       	call   c0028491 <__gtdf2>
c000bb8a:	83 c4 10             	add    esp,0x10
c000bb8d:	85 c0                	test   eax,eax
c000bb8f:	7e 2d                	jle    c000bbbe <sinc_multichan_vari_process+0x14e>
c000bb91:	68 00 00 f0 3f       	push   0x3ff00000
c000bb96:	6a 00                	push   0x0
c000bb98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba0:	e8 0a c9 01 00       	call   c00284af <__ltdf2>
c000bba5:	83 c4 10             	add    esp,0x10
c000bba8:	85 c0                	test   eax,eax
c000bbaa:	79 4d                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbbc:	eb 1b                	jmp    c000bbd9 <sinc_multichan_vari_process+0x169>
c000bbbe:	68 00 00 f0 3f       	push   0x3ff00000
c000bbc3:	6a 00                	push   0x0
c000bbc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbcd:	e8 dd c8 01 00       	call   c00284af <__ltdf2>
c000bbd2:	83 c4 10             	add    esp,0x10
c000bbd5:	85 c0                	test   eax,eax
c000bbd7:	79 20                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbdd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe9:	e8 d6 c2 01 00       	call   c0027ec4 <__divdf3>
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbf5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbf9:	50                   	push   eax
c000bbfa:	50                   	push   eax
c000bbfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc03:	e8 58 ca 01 00       	call   c0028660 <lrint>
c000bc08:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc0b:	40                   	inc    eax
c000bc0c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc10:	0f af c5             	imul   eax,ebp
c000bc13:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc17:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1e:	58                   	pop    eax
c000bc1f:	5a                   	pop    edx
c000bc20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc28:	e8 33 ca 01 00       	call   c0028660 <lrint>
c000bc2d:	83 ec 0c             	sub    esp,0xc
c000bc30:	50                   	push   eax
c000bc31:	e8 0d c6 01 00       	call   c0028243 <__floatsidf>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc41:	52                   	push   edx
c000bc42:	50                   	push   eax
c000bc43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4b:	e8 64 bf 01 00       	call   c0027bb4 <__subdf3>
c000bc50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc58:	83 c4 20             	add    esp,0x20
c000bc5b:	6a 00                	push   0x0
c000bc5d:	6a 00                	push   0x0
c000bc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc67:	e8 43 c8 01 00       	call   c00284af <__ltdf2>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	85 c0                	test   eax,eax
c000bc71:	79 1f                	jns    c000bc92 <sinc_multichan_vari_process+0x222>
c000bc73:	68 00 00 f0 3f       	push   0x3ff00000
c000bc78:	6a 00                	push   0x0
c000bc7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc82:	e8 dc b8 01 00       	call   c0027563 <__adddf3>
c000bc87:	83 c4 10             	add    esp,0x10
c000bc8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc92:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc95:	83 ec 10             	sub    esp,0x10
c000bc98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc9c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcaf:	e8 00 bf 01 00       	call   c0027bb4 <__subdf3>
c000bcb4:	83 c4 18             	add    esp,0x18
c000bcb7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcbf:	52                   	push   edx
c000bcc0:	50                   	push   eax
c000bcc1:	e8 9a c9 01 00       	call   c0028660 <lrint>
c000bcc6:	0f af e8             	imul   ebp,eax
c000bcc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bccd:	01 e8                	add    eax,ebp
c000bccf:	99                   	cdq    
c000bcd0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcd3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcde:	68 00 00 f0 3f       	push   0x3ff00000
c000bce3:	6a 00                	push   0x0
c000bce5:	e8 da c1 01 00       	call   c0027ec4 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcfa:	68 23 42 92 0c       	push   0xc924223
c000bcff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd07:	e8 57 b8 01 00       	call   c0027563 <__adddf3>
c000bd0c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd14:	83 c4 20             	add    esp,0x20
c000bd17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd1f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd27:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd2a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd2d:	7d 50                	jge    c000bd7f <sinc_multichan_vari_process+0x30f>
c000bd2f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd32:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd35:	01 c8                	add    eax,ecx
c000bd37:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3a:	99                   	cdq    
c000bd3b:	f7 f9                	idiv   ecx
c000bd3d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd41:	7d 0c                	jge    c000bd4f <sinc_multichan_vari_process+0x2df>
c000bd43:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd46:	85 ed                	test   ebp,ebp
c000bd48:	79 6b                	jns    c000bdb5 <sinc_multichan_vari_process+0x345>
c000bd4a:	e9 e6 00 00 00       	jmp    c000be35 <sinc_multichan_vari_process+0x3c5>
c000bd4f:	50                   	push   eax
c000bd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd54:	57                   	push   edi
c000bd55:	53                   	push   ebx
c000bd56:	e8 9b fb ff ff       	call   c000b8f6 <prepare_data>
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	89 c2                	mov    edx,eax
c000bd60:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd63:	85 c0                	test   eax,eax
c000bd65:	0f 85 bf 03 00 00    	jne    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bd6b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd6e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd71:	01 c8                	add    eax,ecx
c000bd73:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd76:	99                   	cdq    
c000bd77:	f7 f9                	idiv   ecx
c000bd79:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd7d:	7c c4                	jl     c000bd43 <sinc_multichan_vari_process+0x2d3>
c000bd7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd87:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd8a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd95:	89 06                	mov    DWORD PTR [esi],eax
c000bd97:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd9d:	99                   	cdq    
c000bd9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bda4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bda7:	99                   	cdq    
c000bda8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdab:	31 d2                	xor    edx,edx
c000bdad:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb0:	e9 75 03 00 00       	jmp    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bdb5:	83 ec 0c             	sub    esp,0xc
c000bdb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdbb:	e8 83 c4 01 00       	call   c0028243 <__floatsidf>
c000bdc0:	83 c4 10             	add    esp,0x10
c000bdc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddb:	e8 83 b7 01 00       	call   c0027563 <__adddf3>
c000bde0:	83 c4 10             	add    esp,0x10
c000bde3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bde7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfb:	e8 63 b7 01 00       	call   c0027563 <__adddf3>
c000be00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be0b:	e8 33 c4 01 00       	call   c0028243 <__floatsidf>
c000be10:	83 c4 10             	add    esp,0x10
c000be13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be1b:	52                   	push   edx
c000be1c:	50                   	push   eax
c000be1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be25:	e8 83 c6 01 00       	call   c00284ad <__gedf2>
c000be2a:	83 c4 10             	add    esp,0x10
c000be2d:	85 c0                	test   eax,eax
c000be2f:	0f 89 4a ff ff ff    	jns    c000bd7f <sinc_multichan_vari_process+0x30f>
c000be35:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be39:	0f 8e ed 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be3f:	83 ec 10             	sub    esp,0x10
c000be42:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be45:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be48:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be4b:	ff 36                	push   DWORD PTR [esi]
c000be4d:	e8 62 bd 01 00       	call   c0027bb4 <__subdf3>
c000be52:	83 c4 18             	add    esp,0x18
c000be55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be5d:	52                   	push   edx
c000be5e:	50                   	push   eax
c000be5f:	e8 dc c7 01 00       	call   c0028640 <fabs>
c000be64:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be68:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be6c:	83 c4 10             	add    esp,0x10
c000be6f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be74:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be81:	e8 0b c6 01 00       	call   c0028491 <__gtdf2>
c000be86:	83 c4 10             	add    esp,0x10
c000be89:	85 c0                	test   eax,eax
c000be8b:	0f 8e 9b 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be91:	8b 06                	mov    eax,DWORD PTR [esi]
c000be93:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be9a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be9e:	52                   	push   edx
c000be9f:	50                   	push   eax
c000bea0:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bea3:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bea6:	e8 09 bd 01 00       	call   c0027bb4 <__subdf3>
c000beab:	59                   	pop    ecx
c000beac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000beb4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000beb7:	e8 87 c3 01 00       	call   c0028243 <__floatsidf>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bec3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bec7:	52                   	push   edx
c000bec8:	50                   	push   eax
c000bec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000becd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed1:	e8 0a bd 01 00       	call   c0027be0 <__muldf3>
c000bed6:	5d                   	pop    ebp
c000bed7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bedb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bedf:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bee2:	e8 5c c3 01 00       	call   c0028243 <__floatsidf>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef2:	52                   	push   edx
c000bef3:	50                   	push   eax
c000bef4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befc:	e8 c3 bf 01 00       	call   c0027ec4 <__divdf3>
c000bf01:	83 c4 10             	add    esp,0x10
c000bf04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf1c:	e8 42 b6 01 00       	call   c0027563 <__adddf3>
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf32:	e8 0c c3 01 00       	call   c0028243 <__floatsidf>
c000bf37:	83 c4 10             	add    esp,0x10
c000bf3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	e8 58 c5 01 00       	call   c00284af <__ltdf2>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	85 c0                	test   eax,eax
c000bf5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf60:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf64:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf68:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf6c:	78 10                	js     c000bf7e <sinc_multichan_vari_process+0x50e>
c000bf6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8e:	e8 4d bc 01 00       	call   c0027be0 <__muldf3>
c000bf93:	59                   	pop    ecx
c000bf94:	5d                   	pop    ebp
c000bf95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa5:	e8 25 f9 ff ff       	call   c000b8cf <double_to_fp>
c000bfaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfae:	89 c5                	mov    ebp,eax
c000bfb0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfbc:	e8 1f bc 01 00       	call   c0027be0 <__muldf3>
c000bfc1:	83 c4 18             	add    esp,0x18
c000bfc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfcc:	52                   	push   edx
c000bfcd:	50                   	push   eax
c000bfce:	e8 fc f8 ff ff       	call   c000b8cf <double_to_fp>
c000bfd3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfd6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfda:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfdd:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe0:	50                   	push   eax
c000bfe1:	50                   	push   eax
c000bfe2:	50                   	push   eax
c000bfe3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfe6:	e8 58 c2 01 00       	call   c0028243 <__floatsidf>
c000bfeb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfef:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bff3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bff7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	e8 bc be 01 00       	call   c0027ec4 <__divdf3>
c000c008:	83 c4 1c             	add    esp,0x1c
c000c00b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c00f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c013:	52                   	push   edx
c000c014:	89 ea                	mov    edx,ebp
c000c016:	50                   	push   eax
c000c017:	89 d8                	mov    eax,ebx
c000c019:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c01c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c020:	e8 69 ed ff ff       	call   c000ad8e <calc_output_multi>
c000c025:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c028:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c02b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c02f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c033:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c037:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03b:	e8 84 be 01 00       	call   c0027ec4 <__divdf3>
c000c040:	83 c4 10             	add    esp,0x10
c000c043:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c047:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c04b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c04f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c053:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c057:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05b:	e8 03 b5 01 00       	call   c0027563 <__adddf3>
c000c060:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c064:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c068:	83 c4 28             	add    esp,0x28
c000c06b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c06f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c073:	e8 e8 c5 01 00       	call   c0028660 <lrint>
c000c078:	83 ec 0c             	sub    esp,0xc
c000c07b:	50                   	push   eax
c000c07c:	e8 c2 c1 01 00       	call   c0028243 <__floatsidf>
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c088:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c08c:	52                   	push   edx
c000c08d:	50                   	push   eax
c000c08e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c092:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c096:	e8 19 bb 01 00       	call   c0027bb4 <__subdf3>
c000c09b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c09f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0a3:	83 c4 20             	add    esp,0x20
c000c0a6:	6a 00                	push   0x0
c000c0a8:	6a 00                	push   0x0
c000c0aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b2:	e8 f8 c3 01 00       	call   c00284af <__ltdf2>
c000c0b7:	83 c4 10             	add    esp,0x10
c000c0ba:	85 c0                	test   eax,eax
c000c0bc:	79 20                	jns    c000c0de <sinc_multichan_vari_process+0x66e>
c000c0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ce:	e8 90 b4 01 00       	call   c0027563 <__adddf3>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e1:	83 ec 10             	sub    esp,0x10
c000c0e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0e8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0fb:	e8 b4 ba 01 00       	call   c0027bb4 <__subdf3>
c000c100:	83 c4 18             	add    esp,0x18
c000c103:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c107:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c10b:	52                   	push   edx
c000c10c:	50                   	push   eax
c000c10d:	e8 4e c5 01 00       	call   c0028660 <lrint>
c000c112:	0f af e8             	imul   ebp,eax
c000c115:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c119:	83 c4 10             	add    esp,0x10
c000c11c:	01 e8                	add    eax,ebp
c000c11e:	99                   	cdq    
c000c11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c125:	e9 fd fb ff ff       	jmp    c000bd27 <sinc_multichan_vari_process+0x2b7>
c000c12a:	83 c4 4c             	add    esp,0x4c
c000c12d:	89 d0                	mov    eax,edx
c000c12f:	5b                   	pop    ebx
c000c130:	5e                   	pop    esi
c000c131:	5f                   	pop    edi
c000c132:	5d                   	pop    ebp
c000c133:	c3                   	ret    

c000c134 <sinc_hex_vari_process>:
c000c134:	55                   	push   ebp
c000c135:	ba 05 00 00 00       	mov    edx,0x5
c000c13a:	57                   	push   edi
c000c13b:	56                   	push   esi
c000c13c:	53                   	push   ebx
c000c13d:	83 ec 4c             	sub    esp,0x4c
c000c140:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c144:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c148:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c14b:	85 db                	test   ebx,ebx
c000c14d:	0f 84 9c 06 00 00    	je     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c153:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c156:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c159:	0f af c7             	imul   eax,edi
c000c15c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c15f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c162:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c169:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c170:	0f af c7             	imul   eax,edi
c000c173:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c176:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c179:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c17c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c180:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c184:	68 00 00 70 3f       	push   0x3f700000
c000c189:	6a 00                	push   0x0
c000c18b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c18f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c193:	e8 17 c3 01 00       	call   c00284af <__ltdf2>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	ba 16 00 00 00       	mov    edx,0x16
c000c1a0:	85 c0                	test   eax,eax
c000c1a2:	0f 88 47 06 00 00    	js     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1a8:	68 00 00 70 40       	push   0x40700000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b7:	e8 d5 c2 01 00       	call   c0028491 <__gtdf2>
c000c1bc:	83 c4 10             	add    esp,0x10
c000c1bf:	ba 16 00 00 00       	mov    edx,0x16
c000c1c4:	85 c0                	test   eax,eax
c000c1c6:	0f 8f 23 06 00 00    	jg     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1cc:	83 ec 0c             	sub    esp,0xc
c000c1cf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1d2:	e8 6c c0 01 00       	call   c0028243 <__floatsidf>
c000c1d7:	83 c4 10             	add    esp,0x10
c000c1da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1e2:	68 00 00 00 40       	push   0x40000000
c000c1e7:	6a 00                	push   0x0
c000c1e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f1:	e8 6d b3 01 00       	call   c0027563 <__adddf3>
c000c1f6:	59                   	pop    ecx
c000c1f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1fb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c202:	e8 3c c0 01 00       	call   c0028243 <__floatsidf>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c20e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c212:	52                   	push   edx
c000c213:	50                   	push   eax
c000c214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c21c:	e8 a3 bc 01 00       	call   c0027ec4 <__divdf3>
c000c221:	83 c4 10             	add    esp,0x10
c000c224:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c22c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c22f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c232:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c236:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	e8 42 c2 01 00       	call   c0028491 <__gtdf2>
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	85 c0                	test   eax,eax
c000c254:	7e 2d                	jle    c000c283 <sinc_hex_vari_process+0x14f>
c000c256:	68 00 00 f0 3f       	push   0x3ff00000
c000c25b:	6a 00                	push   0x0
c000c25d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c265:	e8 45 c2 01 00       	call   c00284af <__ltdf2>
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	85 c0                	test   eax,eax
c000c26f:	79 4d                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c275:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c27d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c281:	eb 1b                	jmp    c000c29e <sinc_hex_vari_process+0x16a>
c000c283:	68 00 00 f0 3f       	push   0x3ff00000
c000c288:	6a 00                	push   0x0
c000c28a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c292:	e8 18 c2 01 00       	call   c00284af <__ltdf2>
c000c297:	83 c4 10             	add    esp,0x10
c000c29a:	85 c0                	test   eax,eax
c000c29c:	79 20                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c29e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ae:	e8 11 bc 01 00       	call   c0027ec4 <__divdf3>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2be:	50                   	push   eax
c000c2bf:	50                   	push   eax
c000c2c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c8:	e8 93 c3 01 00       	call   c0028660 <lrint>
c000c2cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d0:	40                   	inc    eax
c000c2d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d5:	0f af c7             	imul   eax,edi
c000c2d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2e3:	58                   	pop    eax
c000c2e4:	5a                   	pop    edx
c000c2e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ed:	e8 6e c3 01 00       	call   c0028660 <lrint>
c000c2f2:	83 ec 0c             	sub    esp,0xc
c000c2f5:	50                   	push   eax
c000c2f6:	e8 48 bf 01 00       	call   c0028243 <__floatsidf>
c000c2fb:	83 c4 10             	add    esp,0x10
c000c2fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c302:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c306:	52                   	push   edx
c000c307:	50                   	push   eax
c000c308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c30c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c310:	e8 9f b8 01 00       	call   c0027bb4 <__subdf3>
c000c315:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c31d:	83 c4 20             	add    esp,0x20
c000c320:	6a 00                	push   0x0
c000c322:	6a 00                	push   0x0
c000c324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c32c:	e8 7e c1 01 00       	call   c00284af <__ltdf2>
c000c331:	83 c4 10             	add    esp,0x10
c000c334:	85 c0                	test   eax,eax
c000c336:	79 1f                	jns    c000c357 <sinc_hex_vari_process+0x223>
c000c338:	68 00 00 f0 3f       	push   0x3ff00000
c000c33d:	6a 00                	push   0x0
c000c33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c343:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c347:	e8 17 b2 01 00       	call   c0027563 <__adddf3>
c000c34c:	83 c4 10             	add    esp,0x10
c000c34f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c357:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c35a:	83 ec 10             	sub    esp,0x10
c000c35d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c361:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c370:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c374:	e8 3b b8 01 00       	call   c0027bb4 <__subdf3>
c000c379:	83 c4 18             	add    esp,0x18
c000c37c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c380:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c384:	52                   	push   edx
c000c385:	50                   	push   eax
c000c386:	e8 d5 c2 01 00       	call   c0028660 <lrint>
c000c38b:	0f af f8             	imul   edi,eax
c000c38e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c392:	01 f8                	add    eax,edi
c000c394:	99                   	cdq    
c000c395:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c398:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c39b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c39f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a3:	68 00 00 f0 3f       	push   0x3ff00000
c000c3a8:	6a 00                	push   0x0
c000c3aa:	e8 15 bb 01 00       	call   c0027ec4 <__divdf3>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3bf:	68 23 42 92 0c       	push   0xc924223
c000c3c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3cc:	e8 92 b1 01 00       	call   c0027563 <__adddf3>
c000c3d1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3d5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3d9:	83 c4 20             	add    esp,0x20
c000c3dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3e4:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3ef:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3f2:	7d 50                	jge    c000c444 <sinc_hex_vari_process+0x310>
c000c3f4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fa:	01 c8                	add    eax,ecx
c000c3fc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3ff:	99                   	cdq    
c000c400:	f7 f9                	idiv   ecx
c000c402:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c406:	7d 0c                	jge    c000c414 <sinc_hex_vari_process+0x2e0>
c000c408:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c40b:	85 ff                	test   edi,edi
c000c40d:	79 6c                	jns    c000c47b <sinc_hex_vari_process+0x347>
c000c40f:	e9 e7 00 00 00       	jmp    c000c4fb <sinc_hex_vari_process+0x3c7>
c000c414:	50                   	push   eax
c000c415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c419:	56                   	push   esi
c000c41a:	53                   	push   ebx
c000c41b:	e8 d6 f4 ff ff       	call   c000b8f6 <prepare_data>
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	89 c2                	mov    edx,eax
c000c425:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c428:	85 c0                	test   eax,eax
c000c42a:	0f 85 bf 03 00 00    	jne    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c430:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c433:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c436:	01 c8                	add    eax,ecx
c000c438:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c43b:	99                   	cdq    
c000c43c:	f7 f9                	idiv   ecx
c000c43e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c442:	7c c4                	jl     c000c408 <sinc_hex_vari_process+0x2d4>
c000c444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c44c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c44f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c456:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c45a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c45d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c460:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c463:	99                   	cdq    
c000c464:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c467:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c46a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c46d:	99                   	cdq    
c000c46e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c471:	31 d2                	xor    edx,edx
c000c473:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c476:	e9 74 03 00 00       	jmp    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c47b:	83 ec 0c             	sub    esp,0xc
c000c47e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c481:	e8 bd bd 01 00       	call   c0028243 <__floatsidf>
c000c486:	83 c4 10             	add    esp,0x10
c000c489:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c491:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c495:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a1:	e8 bd b0 01 00       	call   c0027563 <__adddf3>
c000c4a6:	83 c4 10             	add    esp,0x10
c000c4a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c1:	e8 9d b0 01 00       	call   c0027563 <__adddf3>
c000c4c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d1:	e8 6d bd 01 00       	call   c0028243 <__floatsidf>
c000c4d6:	83 c4 10             	add    esp,0x10
c000c4d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e1:	52                   	push   edx
c000c4e2:	50                   	push   eax
c000c4e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4eb:	e8 bd bf 01 00       	call   c00284ad <__gedf2>
c000c4f0:	83 c4 10             	add    esp,0x10
c000c4f3:	85 c0                	test   eax,eax
c000c4f5:	0f 89 49 ff ff ff    	jns    c000c444 <sinc_hex_vari_process+0x310>
c000c4fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4ff:	0f 8e ef 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c505:	83 ec 10             	sub    esp,0x10
c000c508:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c50b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c50e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c511:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c514:	e8 9b b6 01 00       	call   c0027bb4 <__subdf3>
c000c519:	83 c4 18             	add    esp,0x18
c000c51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c520:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c524:	52                   	push   edx
c000c525:	50                   	push   eax
c000c526:	e8 15 c1 01 00       	call   c0028640 <fabs>
c000c52b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c52f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c533:	83 c4 10             	add    esp,0x10
c000c536:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c53b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c540:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c548:	e8 44 bf 01 00       	call   c0028491 <__gtdf2>
c000c54d:	83 c4 10             	add    esp,0x10
c000c550:	85 c0                	test   eax,eax
c000c552:	0f 8e 9c 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c558:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c55b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c55e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c562:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c566:	52                   	push   edx
c000c567:	50                   	push   eax
c000c568:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c56b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c56e:	e8 41 b6 01 00       	call   c0027bb4 <__subdf3>
c000c573:	59                   	pop    ecx
c000c574:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c578:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c57c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c57f:	e8 bf bc 01 00       	call   c0028243 <__floatsidf>
c000c584:	83 c4 10             	add    esp,0x10
c000c587:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c58b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c58f:	52                   	push   edx
c000c590:	50                   	push   eax
c000c591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c595:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c599:	e8 42 b6 01 00       	call   c0027be0 <__muldf3>
c000c59e:	5f                   	pop    edi
c000c59f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5a3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5a7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5aa:	e8 94 bc 01 00       	call   c0028243 <__floatsidf>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ba:	52                   	push   edx
c000c5bb:	50                   	push   eax
c000c5bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c4:	e8 fb b8 01 00       	call   c0027ec4 <__divdf3>
c000c5c9:	83 c4 10             	add    esp,0x10
c000c5cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e4:	e8 7a af 01 00       	call   c0027563 <__adddf3>
c000c5e9:	83 c4 10             	add    esp,0x10
c000c5ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5fa:	e8 44 bc 01 00       	call   c0028243 <__floatsidf>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	e8 90 be 01 00       	call   c00284af <__ltdf2>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	85 c0                	test   eax,eax
c000c624:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c628:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c62c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c630:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c634:	78 10                	js     c000c646 <sinc_hex_vari_process+0x512>
c000c636:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c63a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c63e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c642:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c652:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c656:	e8 85 b5 01 00       	call   c0027be0 <__muldf3>
c000c65b:	59                   	pop    ecx
c000c65c:	5f                   	pop    edi
c000c65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c661:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c665:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c66d:	e8 5d f2 ff ff       	call   c000b8cf <double_to_fp>
c000c672:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c676:	89 c7                	mov    edi,eax
c000c678:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c680:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c684:	e8 57 b5 01 00       	call   c0027be0 <__muldf3>
c000c689:	83 c4 18             	add    esp,0x18
c000c68c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c690:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c694:	52                   	push   edx
c000c695:	50                   	push   eax
c000c696:	e8 34 f2 ff ff       	call   c000b8cf <double_to_fp>
c000c69b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c69e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6a2:	83 c4 0c             	add    esp,0xc
c000c6a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6a8:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6ab:	50                   	push   eax
c000c6ac:	50                   	push   eax
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 8e bb 01 00       	call   c0028243 <__floatsidf>
c000c6b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6b9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	e8 f2 b7 01 00       	call   c0027ec4 <__divdf3>
c000c6d2:	83 c4 18             	add    esp,0x18
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	89 fa                	mov    edx,edi
c000c6e0:	50                   	push   eax
c000c6e1:	89 d8                	mov    eax,ebx
c000c6e3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6e7:	e8 50 de ff ff       	call   c000a53c <calc_output_hex>
c000c6ec:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c700:	e8 bf b7 01 00       	call   c0027ec4 <__divdf3>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c70c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c718:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c720:	e8 3e ae 01 00       	call   c0027563 <__adddf3>
c000c725:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c729:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c72d:	83 c4 18             	add    esp,0x18
c000c730:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c734:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c738:	e8 23 bf 01 00       	call   c0028660 <lrint>
c000c73d:	83 ec 0c             	sub    esp,0xc
c000c740:	50                   	push   eax
c000c741:	e8 fd ba 01 00       	call   c0028243 <__floatsidf>
c000c746:	83 c4 10             	add    esp,0x10
c000c749:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c74d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c751:	52                   	push   edx
c000c752:	50                   	push   eax
c000c753:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c757:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75b:	e8 54 b4 01 00       	call   c0027bb4 <__subdf3>
c000c760:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c764:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c768:	83 c4 20             	add    esp,0x20
c000c76b:	6a 00                	push   0x0
c000c76d:	6a 00                	push   0x0
c000c76f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c777:	e8 33 bd 01 00       	call   c00284af <__ltdf2>
c000c77c:	83 c4 10             	add    esp,0x10
c000c77f:	85 c0                	test   eax,eax
c000c781:	79 20                	jns    c000c7a3 <sinc_hex_vari_process+0x66f>
c000c783:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c787:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c793:	e8 cb ad 01 00       	call   c0027563 <__adddf3>
c000c798:	83 c4 10             	add    esp,0x10
c000c79b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c79f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7a3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7a6:	83 ec 10             	sub    esp,0x10
c000c7a9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c0:	e8 ef b3 01 00       	call   c0027bb4 <__subdf3>
c000c7c5:	83 c4 18             	add    esp,0x18
c000c7c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d0:	52                   	push   edx
c000c7d1:	50                   	push   eax
c000c7d2:	e8 89 be 01 00       	call   c0028660 <lrint>
c000c7d7:	0f af f8             	imul   edi,eax
c000c7da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7de:	83 c4 10             	add    esp,0x10
c000c7e1:	01 f8                	add    eax,edi
c000c7e3:	99                   	cdq    
c000c7e4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7e7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7ea:	e9 fd fb ff ff       	jmp    c000c3ec <sinc_hex_vari_process+0x2b8>
c000c7ef:	83 c4 4c             	add    esp,0x4c
c000c7f2:	89 d0                	mov    eax,edx
c000c7f4:	5b                   	pop    ebx
c000c7f5:	5e                   	pop    esi
c000c7f6:	5f                   	pop    edi
c000c7f7:	5d                   	pop    ebp
c000c7f8:	c3                   	ret    

c000c7f9 <sinc_quad_vari_process>:
c000c7f9:	55                   	push   ebp
c000c7fa:	ba 05 00 00 00       	mov    edx,0x5
c000c7ff:	57                   	push   edi
c000c800:	56                   	push   esi
c000c801:	53                   	push   ebx
c000c802:	83 ec 4c             	sub    esp,0x4c
c000c805:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c809:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c80d:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c810:	85 db                	test   ebx,ebx
c000c812:	0f 84 9c 06 00 00    	je     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c818:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c81b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c81e:	0f af c7             	imul   eax,edi
c000c821:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c824:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c827:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c82e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c835:	0f af c7             	imul   eax,edi
c000c838:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c83b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c83e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c841:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c845:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c849:	68 00 00 70 3f       	push   0x3f700000
c000c84e:	6a 00                	push   0x0
c000c850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c858:	e8 52 bc 01 00       	call   c00284af <__ltdf2>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	ba 16 00 00 00       	mov    edx,0x16
c000c865:	85 c0                	test   eax,eax
c000c867:	0f 88 47 06 00 00    	js     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c86d:	68 00 00 70 40       	push   0x40700000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c87c:	e8 10 bc 01 00       	call   c0028491 <__gtdf2>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	ba 16 00 00 00       	mov    edx,0x16
c000c889:	85 c0                	test   eax,eax
c000c88b:	0f 8f 23 06 00 00    	jg     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c891:	83 ec 0c             	sub    esp,0xc
c000c894:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c897:	e8 a7 b9 01 00       	call   c0028243 <__floatsidf>
c000c89c:	83 c4 10             	add    esp,0x10
c000c89f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8a7:	68 00 00 00 40       	push   0x40000000
c000c8ac:	6a 00                	push   0x0
c000c8ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b6:	e8 a8 ac 01 00       	call   c0027563 <__adddf3>
c000c8bb:	59                   	pop    ecx
c000c8bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8c4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8c7:	e8 77 b9 01 00       	call   c0028243 <__floatsidf>
c000c8cc:	83 c4 10             	add    esp,0x10
c000c8cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d7:	52                   	push   edx
c000c8d8:	50                   	push   eax
c000c8d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e1:	e8 de b5 01 00       	call   c0027ec4 <__divdf3>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8f4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	e8 7d bb 01 00       	call   c0028491 <__gtdf2>
c000c914:	83 c4 10             	add    esp,0x10
c000c917:	85 c0                	test   eax,eax
c000c919:	7e 2d                	jle    c000c948 <sinc_quad_vari_process+0x14f>
c000c91b:	68 00 00 f0 3f       	push   0x3ff00000
c000c920:	6a 00                	push   0x0
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92a:	e8 80 bb 01 00       	call   c00284af <__ltdf2>
c000c92f:	83 c4 10             	add    esp,0x10
c000c932:	85 c0                	test   eax,eax
c000c934:	79 4d                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c93a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c93e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c942:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c946:	eb 1b                	jmp    c000c963 <sinc_quad_vari_process+0x16a>
c000c948:	68 00 00 f0 3f       	push   0x3ff00000
c000c94d:	6a 00                	push   0x0
c000c94f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c953:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c957:	e8 53 bb 01 00       	call   c00284af <__ltdf2>
c000c95c:	83 c4 10             	add    esp,0x10
c000c95f:	85 c0                	test   eax,eax
c000c961:	79 20                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c963:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c967:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c973:	e8 4c b5 01 00       	call   c0027ec4 <__divdf3>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c97f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c983:	50                   	push   eax
c000c984:	50                   	push   eax
c000c985:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c989:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98d:	e8 ce bc 01 00       	call   c0028660 <lrint>
c000c992:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c995:	40                   	inc    eax
c000c996:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c99a:	0f af c7             	imul   eax,edi
c000c99d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a8:	58                   	pop    eax
c000c9a9:	5a                   	pop    edx
c000c9aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b2:	e8 a9 bc 01 00       	call   c0028660 <lrint>
c000c9b7:	83 ec 0c             	sub    esp,0xc
c000c9ba:	50                   	push   eax
c000c9bb:	e8 83 b8 01 00       	call   c0028243 <__floatsidf>
c000c9c0:	83 c4 10             	add    esp,0x10
c000c9c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9cb:	52                   	push   edx
c000c9cc:	50                   	push   eax
c000c9cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d5:	e8 da b1 01 00       	call   c0027bb4 <__subdf3>
c000c9da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9e2:	83 c4 20             	add    esp,0x20
c000c9e5:	6a 00                	push   0x0
c000c9e7:	6a 00                	push   0x0
c000c9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f1:	e8 b9 ba 01 00       	call   c00284af <__ltdf2>
c000c9f6:	83 c4 10             	add    esp,0x10
c000c9f9:	85 c0                	test   eax,eax
c000c9fb:	79 1f                	jns    c000ca1c <sinc_quad_vari_process+0x223>
c000c9fd:	68 00 00 f0 3f       	push   0x3ff00000
c000ca02:	6a 00                	push   0x0
c000ca04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca0c:	e8 52 ab 01 00       	call   c0027563 <__adddf3>
c000ca11:	83 c4 10             	add    esp,0x10
c000ca14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca1c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca1f:	83 ec 10             	sub    esp,0x10
c000ca22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca26:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca39:	e8 76 b1 01 00       	call   c0027bb4 <__subdf3>
c000ca3e:	83 c4 18             	add    esp,0x18
c000ca41:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca49:	52                   	push   edx
c000ca4a:	50                   	push   eax
c000ca4b:	e8 10 bc 01 00       	call   c0028660 <lrint>
c000ca50:	0f af f8             	imul   edi,eax
c000ca53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca57:	01 f8                	add    eax,edi
c000ca59:	99                   	cdq    
c000ca5a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca5d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca68:	68 00 00 f0 3f       	push   0x3ff00000
c000ca6d:	6a 00                	push   0x0
c000ca6f:	e8 50 b4 01 00       	call   c0027ec4 <__divdf3>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca84:	68 23 42 92 0c       	push   0xc924223
c000ca89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca91:	e8 cd aa 01 00       	call   c0027563 <__adddf3>
c000ca96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca9e:	83 c4 20             	add    esp,0x20
c000caa1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000caa9:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cab4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cab7:	7d 50                	jge    c000cb09 <sinc_quad_vari_process+0x310>
c000cab9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cabf:	01 c8                	add    eax,ecx
c000cac1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac4:	99                   	cdq    
c000cac5:	f7 f9                	idiv   ecx
c000cac7:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacb:	7d 0c                	jge    c000cad9 <sinc_quad_vari_process+0x2e0>
c000cacd:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad0:	85 ff                	test   edi,edi
c000cad2:	79 6c                	jns    c000cb40 <sinc_quad_vari_process+0x347>
c000cad4:	e9 e7 00 00 00       	jmp    c000cbc0 <sinc_quad_vari_process+0x3c7>
c000cad9:	50                   	push   eax
c000cada:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cade:	56                   	push   esi
c000cadf:	53                   	push   ebx
c000cae0:	e8 11 ee ff ff       	call   c000b8f6 <prepare_data>
c000cae5:	83 c4 10             	add    esp,0x10
c000cae8:	89 c2                	mov    edx,eax
c000caea:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caed:	85 c0                	test   eax,eax
c000caef:	0f 85 bf 03 00 00    	jne    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000caf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000caf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cafb:	01 c8                	add    eax,ecx
c000cafd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb00:	99                   	cdq    
c000cb01:	f7 f9                	idiv   ecx
c000cb03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb07:	7c c4                	jl     c000cacd <sinc_quad_vari_process+0x2d4>
c000cb09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb11:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb14:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb1f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb22:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb25:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb28:	99                   	cdq    
c000cb29:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb2c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb2f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb32:	99                   	cdq    
c000cb33:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb36:	31 d2                	xor    edx,edx
c000cb38:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb3b:	e9 74 03 00 00       	jmp    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb46:	e8 f8 b6 01 00       	call   c0028243 <__floatsidf>
c000cb4b:	83 c4 10             	add    esp,0x10
c000cb4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb52:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb66:	e8 f8 a9 01 00       	call   c0027563 <__adddf3>
c000cb6b:	83 c4 10             	add    esp,0x10
c000cb6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb72:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb86:	e8 d8 a9 01 00       	call   c0027563 <__adddf3>
c000cb8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb96:	e8 a8 b6 01 00       	call   c0028243 <__floatsidf>
c000cb9b:	83 c4 10             	add    esp,0x10
c000cb9e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cba6:	52                   	push   edx
c000cba7:	50                   	push   eax
c000cba8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb0:	e8 f8 b8 01 00       	call   c00284ad <__gedf2>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	85 c0                	test   eax,eax
c000cbba:	0f 89 49 ff ff ff    	jns    c000cb09 <sinc_quad_vari_process+0x310>
c000cbc0:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbc4:	0f 8e ef 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cbca:	83 ec 10             	sub    esp,0x10
c000cbcd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbd3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbd6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbd9:	e8 d6 af 01 00       	call   c0027bb4 <__subdf3>
c000cbde:	83 c4 18             	add    esp,0x18
c000cbe1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbe5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbe9:	52                   	push   edx
c000cbea:	50                   	push   eax
c000cbeb:	e8 50 ba 01 00       	call   c0028640 <fabs>
c000cbf0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbf4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbf8:	83 c4 10             	add    esp,0x10
c000cbfb:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc00:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc0d:	e8 7f b8 01 00       	call   c0028491 <__gtdf2>
c000cc12:	83 c4 10             	add    esp,0x10
c000cc15:	85 c0                	test   eax,eax
c000cc17:	0f 8e 9c 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cc1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc20:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc27:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc2b:	52                   	push   edx
c000cc2c:	50                   	push   eax
c000cc2d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc30:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc33:	e8 7c af 01 00       	call   c0027bb4 <__subdf3>
c000cc38:	59                   	pop    ecx
c000cc39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc3d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc41:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc44:	e8 fa b5 01 00       	call   c0028243 <__floatsidf>
c000cc49:	83 c4 10             	add    esp,0x10
c000cc4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc54:	52                   	push   edx
c000cc55:	50                   	push   eax
c000cc56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5e:	e8 7d af 01 00       	call   c0027be0 <__muldf3>
c000cc63:	5f                   	pop    edi
c000cc64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc6c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc6f:	e8 cf b5 01 00       	call   c0028243 <__floatsidf>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7f:	52                   	push   edx
c000cc80:	50                   	push   eax
c000cc81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc89:	e8 36 b2 01 00       	call   c0027ec4 <__divdf3>
c000cc8e:	83 c4 10             	add    esp,0x10
c000cc91:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc95:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca9:	e8 b5 a8 01 00       	call   c0027563 <__adddf3>
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccb5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccb9:	83 ec 0c             	sub    esp,0xc
c000ccbc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccbf:	e8 7f b5 01 00       	call   c0028243 <__floatsidf>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cccb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	e8 cb b7 01 00       	call   c00284af <__ltdf2>
c000cce4:	83 c4 10             	add    esp,0x10
c000cce7:	85 c0                	test   eax,eax
c000cce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cced:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccf5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccf9:	78 10                	js     c000cd0b <sinc_quad_vari_process+0x512>
c000ccfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1b:	e8 c0 ae 01 00       	call   c0027be0 <__muldf3>
c000cd20:	59                   	pop    ecx
c000cd21:	5f                   	pop    edi
c000cd22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd32:	e8 98 eb ff ff       	call   c000b8cf <double_to_fp>
c000cd37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3b:	89 c7                	mov    edi,eax
c000cd3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd49:	e8 92 ae 01 00       	call   c0027be0 <__muldf3>
c000cd4e:	83 c4 18             	add    esp,0x18
c000cd51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd59:	52                   	push   edx
c000cd5a:	50                   	push   eax
c000cd5b:	e8 6f eb ff ff       	call   c000b8cf <double_to_fp>
c000cd60:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd63:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd67:	83 c4 0c             	add    esp,0xc
c000cd6a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd6d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd70:	50                   	push   eax
c000cd71:	50                   	push   eax
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 c9 b4 01 00       	call   c0028243 <__floatsidf>
c000cd7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	e8 2d b1 01 00       	call   c0027ec4 <__divdf3>
c000cd97:	83 c4 18             	add    esp,0x18
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	89 fa                	mov    edx,edi
c000cda5:	50                   	push   eax
c000cda6:	89 d8                	mov    eax,ebx
c000cda8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdac:	e8 a5 d1 ff ff       	call   c0009f56 <calc_output_quad>
c000cdb1:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc5:	e8 fa b0 01 00       	call   c0027ec4 <__divdf3>
c000cdca:	83 c4 10             	add    esp,0x10
c000cdcd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cddd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde5:	e8 79 a7 01 00       	call   c0027563 <__adddf3>
c000cdea:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdf2:	83 c4 18             	add    esp,0x18
c000cdf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdfd:	e8 5e b8 01 00       	call   c0028660 <lrint>
c000ce02:	83 ec 0c             	sub    esp,0xc
c000ce05:	50                   	push   eax
c000ce06:	e8 38 b4 01 00       	call   c0028243 <__floatsidf>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce12:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce16:	52                   	push   edx
c000ce17:	50                   	push   eax
c000ce18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce20:	e8 8f ad 01 00       	call   c0027bb4 <__subdf3>
c000ce25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce2d:	83 c4 20             	add    esp,0x20
c000ce30:	6a 00                	push   0x0
c000ce32:	6a 00                	push   0x0
c000ce34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce3c:	e8 6e b6 01 00       	call   c00284af <__ltdf2>
c000ce41:	83 c4 10             	add    esp,0x10
c000ce44:	85 c0                	test   eax,eax
c000ce46:	79 20                	jns    c000ce68 <sinc_quad_vari_process+0x66f>
c000ce48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce58:	e8 06 a7 01 00       	call   c0027563 <__adddf3>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce68:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce6b:	83 ec 10             	sub    esp,0x10
c000ce6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce72:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce85:	e8 2a ad 01 00       	call   c0027bb4 <__subdf3>
c000ce8a:	83 c4 18             	add    esp,0x18
c000ce8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce91:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce95:	52                   	push   edx
c000ce96:	50                   	push   eax
c000ce97:	e8 c4 b7 01 00       	call   c0028660 <lrint>
c000ce9c:	0f af f8             	imul   edi,eax
c000ce9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	01 f8                	add    eax,edi
c000cea8:	99                   	cdq    
c000cea9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceac:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceaf:	e9 fd fb ff ff       	jmp    c000cab1 <sinc_quad_vari_process+0x2b8>
c000ceb4:	83 c4 4c             	add    esp,0x4c
c000ceb7:	89 d0                	mov    eax,edx
c000ceb9:	5b                   	pop    ebx
c000ceba:	5e                   	pop    esi
c000cebb:	5f                   	pop    edi
c000cebc:	5d                   	pop    ebp
c000cebd:	c3                   	ret    

c000cebe <sinc_stereo_vari_process>:
c000cebe:	55                   	push   ebp
c000cebf:	ba 05 00 00 00       	mov    edx,0x5
c000cec4:	57                   	push   edi
c000cec5:	56                   	push   esi
c000cec6:	53                   	push   ebx
c000cec7:	83 ec 4c             	sub    esp,0x4c
c000ceca:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cece:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ced2:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ced5:	85 db                	test   ebx,ebx
c000ced7:	0f 84 9c 06 00 00    	je     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cedd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cee3:	0f af c7             	imul   eax,edi
c000cee6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cee9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cef3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cefa:	0f af c7             	imul   eax,edi
c000cefd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf00:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf06:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf0e:	68 00 00 70 3f       	push   0x3f700000
c000cf13:	6a 00                	push   0x0
c000cf15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1d:	e8 8d b5 01 00       	call   c00284af <__ltdf2>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	ba 16 00 00 00       	mov    edx,0x16
c000cf2a:	85 c0                	test   eax,eax
c000cf2c:	0f 88 47 06 00 00    	js     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf32:	68 00 00 70 40       	push   0x40700000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf41:	e8 4b b5 01 00       	call   c0028491 <__gtdf2>
c000cf46:	83 c4 10             	add    esp,0x10
c000cf49:	ba 16 00 00 00       	mov    edx,0x16
c000cf4e:	85 c0                	test   eax,eax
c000cf50:	0f 8f 23 06 00 00    	jg     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf56:	83 ec 0c             	sub    esp,0xc
c000cf59:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf5c:	e8 e2 b2 01 00       	call   c0028243 <__floatsidf>
c000cf61:	83 c4 10             	add    esp,0x10
c000cf64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf6c:	68 00 00 00 40       	push   0x40000000
c000cf71:	6a 00                	push   0x0
c000cf73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7b:	e8 e3 a5 01 00       	call   c0027563 <__adddf3>
c000cf80:	59                   	pop    ecx
c000cf81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf89:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf8c:	e8 b2 b2 01 00       	call   c0028243 <__floatsidf>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf9c:	52                   	push   edx
c000cf9d:	50                   	push   eax
c000cf9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa6:	e8 19 af 01 00       	call   c0027ec4 <__divdf3>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfb6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfb9:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	e8 b8 b4 01 00       	call   c0028491 <__gtdf2>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	85 c0                	test   eax,eax
c000cfde:	7e 2d                	jle    c000d00d <sinc_stereo_vari_process+0x14f>
c000cfe0:	68 00 00 f0 3f       	push   0x3ff00000
c000cfe5:	6a 00                	push   0x0
c000cfe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfef:	e8 bb b4 01 00       	call   c00284af <__ltdf2>
c000cff4:	83 c4 10             	add    esp,0x10
c000cff7:	85 c0                	test   eax,eax
c000cff9:	79 4d                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000cffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d003:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d007:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d00b:	eb 1b                	jmp    c000d028 <sinc_stereo_vari_process+0x16a>
c000d00d:	68 00 00 f0 3f       	push   0x3ff00000
c000d012:	6a 00                	push   0x0
c000d014:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d018:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d01c:	e8 8e b4 01 00       	call   c00284af <__ltdf2>
c000d021:	83 c4 10             	add    esp,0x10
c000d024:	85 c0                	test   eax,eax
c000d026:	79 20                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000d028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d02c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d030:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d034:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d038:	e8 87 ae 01 00       	call   c0027ec4 <__divdf3>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d044:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d048:	50                   	push   eax
c000d049:	50                   	push   eax
c000d04a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d04e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d052:	e8 09 b6 01 00       	call   c0028660 <lrint>
c000d057:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d05a:	40                   	inc    eax
c000d05b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05f:	0f af c7             	imul   eax,edi
c000d062:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d069:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d06d:	58                   	pop    eax
c000d06e:	5a                   	pop    edx
c000d06f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d073:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d077:	e8 e4 b5 01 00       	call   c0028660 <lrint>
c000d07c:	83 ec 0c             	sub    esp,0xc
c000d07f:	50                   	push   eax
c000d080:	e8 be b1 01 00       	call   c0028243 <__floatsidf>
c000d085:	83 c4 10             	add    esp,0x10
c000d088:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d08c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d090:	52                   	push   edx
c000d091:	50                   	push   eax
c000d092:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d096:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09a:	e8 15 ab 01 00       	call   c0027bb4 <__subdf3>
c000d09f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0a7:	83 c4 20             	add    esp,0x20
c000d0aa:	6a 00                	push   0x0
c000d0ac:	6a 00                	push   0x0
c000d0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b6:	e8 f4 b3 01 00       	call   c00284af <__ltdf2>
c000d0bb:	83 c4 10             	add    esp,0x10
c000d0be:	85 c0                	test   eax,eax
c000d0c0:	79 1f                	jns    c000d0e1 <sinc_stereo_vari_process+0x223>
c000d0c2:	68 00 00 f0 3f       	push   0x3ff00000
c000d0c7:	6a 00                	push   0x0
c000d0c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d1:	e8 8d a4 01 00       	call   c0027563 <__adddf3>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0e4:	83 ec 10             	sub    esp,0x10
c000d0e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fe:	e8 b1 aa 01 00       	call   c0027bb4 <__subdf3>
c000d103:	83 c4 18             	add    esp,0x18
c000d106:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10e:	52                   	push   edx
c000d10f:	50                   	push   eax
c000d110:	e8 4b b5 01 00       	call   c0028660 <lrint>
c000d115:	0f af f8             	imul   edi,eax
c000d118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d11c:	01 f8                	add    eax,edi
c000d11e:	99                   	cdq    
c000d11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d125:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d129:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d12d:	68 00 00 f0 3f       	push   0x3ff00000
c000d132:	6a 00                	push   0x0
c000d134:	e8 8b ad 01 00       	call   c0027ec4 <__divdf3>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d149:	68 23 42 92 0c       	push   0xc924223
c000d14e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d152:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d156:	e8 08 a4 01 00       	call   c0027563 <__adddf3>
c000d15b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d15f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d163:	83 c4 20             	add    esp,0x20
c000d166:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d16e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d176:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d179:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d17c:	7d 50                	jge    c000d1ce <sinc_stereo_vari_process+0x310>
c000d17e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d181:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d184:	01 c8                	add    eax,ecx
c000d186:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d189:	99                   	cdq    
c000d18a:	f7 f9                	idiv   ecx
c000d18c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d190:	7d 0c                	jge    c000d19e <sinc_stereo_vari_process+0x2e0>
c000d192:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d195:	85 ff                	test   edi,edi
c000d197:	79 6c                	jns    c000d205 <sinc_stereo_vari_process+0x347>
c000d199:	e9 e7 00 00 00       	jmp    c000d285 <sinc_stereo_vari_process+0x3c7>
c000d19e:	50                   	push   eax
c000d19f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1a3:	56                   	push   esi
c000d1a4:	53                   	push   ebx
c000d1a5:	e8 4c e7 ff ff       	call   c000b8f6 <prepare_data>
c000d1aa:	83 c4 10             	add    esp,0x10
c000d1ad:	89 c2                	mov    edx,eax
c000d1af:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1b2:	85 c0                	test   eax,eax
c000d1b4:	0f 85 bf 03 00 00    	jne    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d1ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c0:	01 c8                	add    eax,ecx
c000d1c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1c5:	99                   	cdq    
c000d1c6:	f7 f9                	idiv   ecx
c000d1c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1cc:	7c c4                	jl     c000d192 <sinc_stereo_vari_process+0x2d4>
c000d1ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1d6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1d9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1ea:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1ed:	99                   	cdq    
c000d1ee:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1f7:	99                   	cdq    
c000d1f8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1fb:	31 d2                	xor    edx,edx
c000d1fd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d200:	e9 74 03 00 00       	jmp    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d205:	83 ec 0c             	sub    esp,0xc
c000d208:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d20b:	e8 33 b0 01 00       	call   c0028243 <__floatsidf>
c000d210:	83 c4 10             	add    esp,0x10
c000d213:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d217:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d21f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22b:	e8 33 a3 01 00       	call   c0027563 <__adddf3>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d237:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d23b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d243:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24b:	e8 13 a3 01 00       	call   c0027563 <__adddf3>
c000d250:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d253:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d257:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d25b:	e8 e3 af 01 00       	call   c0028243 <__floatsidf>
c000d260:	83 c4 10             	add    esp,0x10
c000d263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d26b:	52                   	push   edx
c000d26c:	50                   	push   eax
c000d26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d275:	e8 33 b2 01 00       	call   c00284ad <__gedf2>
c000d27a:	83 c4 10             	add    esp,0x10
c000d27d:	85 c0                	test   eax,eax
c000d27f:	0f 89 49 ff ff ff    	jns    c000d1ce <sinc_stereo_vari_process+0x310>
c000d285:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d289:	0f 8e ef 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d28f:	83 ec 10             	sub    esp,0x10
c000d292:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d295:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d298:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d29b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d29e:	e8 11 a9 01 00       	call   c0027bb4 <__subdf3>
c000d2a3:	83 c4 18             	add    esp,0x18
c000d2a6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2ae:	52                   	push   edx
c000d2af:	50                   	push   eax
c000d2b0:	e8 8b b3 01 00       	call   c0028640 <fabs>
c000d2b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2c5:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d2:	e8 ba b1 01 00       	call   c0028491 <__gtdf2>
c000d2d7:	83 c4 10             	add    esp,0x10
c000d2da:	85 c0                	test   eax,eax
c000d2dc:	0f 8e 9c 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d2e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2e5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f0:	52                   	push   edx
c000d2f1:	50                   	push   eax
c000d2f2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2f5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2f8:	e8 b7 a8 01 00       	call   c0027bb4 <__subdf3>
c000d2fd:	59                   	pop    ecx
c000d2fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d302:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d306:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d309:	e8 35 af 01 00       	call   c0028243 <__floatsidf>
c000d30e:	83 c4 10             	add    esp,0x10
c000d311:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d315:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d319:	52                   	push   edx
c000d31a:	50                   	push   eax
c000d31b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d31f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d323:	e8 b8 a8 01 00       	call   c0027be0 <__muldf3>
c000d328:	5f                   	pop    edi
c000d329:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d32d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d331:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d334:	e8 0a af 01 00       	call   c0028243 <__floatsidf>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d340:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d344:	52                   	push   edx
c000d345:	50                   	push   eax
c000d346:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34e:	e8 71 ab 01 00       	call   c0027ec4 <__divdf3>
c000d353:	83 c4 10             	add    esp,0x10
c000d356:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d35a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d35e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d366:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36e:	e8 f0 a1 01 00       	call   c0027563 <__adddf3>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d37e:	83 ec 0c             	sub    esp,0xc
c000d381:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d384:	e8 ba ae 01 00       	call   c0028243 <__floatsidf>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d390:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	e8 06 b1 01 00       	call   c00284af <__ltdf2>
c000d3a9:	83 c4 10             	add    esp,0x10
c000d3ac:	85 c0                	test   eax,eax
c000d3ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3b6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3ba:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3be:	78 10                	js     c000d3d0 <sinc_stereo_vari_process+0x512>
c000d3c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e0:	e8 fb a7 01 00       	call   c0027be0 <__muldf3>
c000d3e5:	59                   	pop    ecx
c000d3e6:	5f                   	pop    edi
c000d3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f7:	e8 d3 e4 ff ff       	call   c000b8cf <double_to_fp>
c000d3fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d400:	89 c7                	mov    edi,eax
c000d402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40e:	e8 cd a7 01 00       	call   c0027be0 <__muldf3>
c000d413:	83 c4 18             	add    esp,0x18
c000d416:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d41a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d41e:	52                   	push   edx
c000d41f:	50                   	push   eax
c000d420:	e8 aa e4 ff ff       	call   c000b8cf <double_to_fp>
c000d425:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d428:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d42c:	83 c4 0c             	add    esp,0xc
c000d42f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d432:	8d 04 90             	lea    eax,[eax+edx*4]
c000d435:	50                   	push   eax
c000d436:	50                   	push   eax
c000d437:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43a:	e8 04 ae 01 00       	call   c0028243 <__floatsidf>
c000d43f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d443:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d447:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	e8 68 aa 01 00       	call   c0027ec4 <__divdf3>
c000d45c:	83 c4 18             	add    esp,0x18
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	89 fa                	mov    edx,edi
c000d46a:	50                   	push   eax
c000d46b:	89 d8                	mov    eax,ebx
c000d46d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d471:	e8 02 c7 ff ff       	call   c0009b78 <calc_output_stereo>
c000d476:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d47a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d47e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d482:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d486:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48a:	e8 35 aa 01 00       	call   c0027ec4 <__divdf3>
c000d48f:	83 c4 10             	add    esp,0x10
c000d492:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d496:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4aa:	e8 b4 a0 01 00       	call   c0027563 <__adddf3>
c000d4af:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4b7:	83 c4 18             	add    esp,0x18
c000d4ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c2:	e8 99 b1 01 00       	call   c0028660 <lrint>
c000d4c7:	83 ec 0c             	sub    esp,0xc
c000d4ca:	50                   	push   eax
c000d4cb:	e8 73 ad 01 00       	call   c0028243 <__floatsidf>
c000d4d0:	83 c4 10             	add    esp,0x10
c000d4d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4db:	52                   	push   edx
c000d4dc:	50                   	push   eax
c000d4dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e5:	e8 ca a6 01 00       	call   c0027bb4 <__subdf3>
c000d4ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4f2:	83 c4 20             	add    esp,0x20
c000d4f5:	6a 00                	push   0x0
c000d4f7:	6a 00                	push   0x0
c000d4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d501:	e8 a9 af 01 00       	call   c00284af <__ltdf2>
c000d506:	83 c4 10             	add    esp,0x10
c000d509:	85 c0                	test   eax,eax
c000d50b:	79 20                	jns    c000d52d <sinc_stereo_vari_process+0x66f>
c000d50d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d51d:	e8 41 a0 01 00       	call   c0027563 <__adddf3>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d529:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d52d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d530:	83 ec 10             	sub    esp,0x10
c000d533:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d537:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d542:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d546:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54a:	e8 65 a6 01 00       	call   c0027bb4 <__subdf3>
c000d54f:	83 c4 18             	add    esp,0x18
c000d552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d556:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d55a:	52                   	push   edx
c000d55b:	50                   	push   eax
c000d55c:	e8 ff b0 01 00       	call   c0028660 <lrint>
c000d561:	0f af f8             	imul   edi,eax
c000d564:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d568:	83 c4 10             	add    esp,0x10
c000d56b:	01 f8                	add    eax,edi
c000d56d:	99                   	cdq    
c000d56e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d571:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d574:	e9 fd fb ff ff       	jmp    c000d176 <sinc_stereo_vari_process+0x2b8>
c000d579:	83 c4 4c             	add    esp,0x4c
c000d57c:	89 d0                	mov    eax,edx
c000d57e:	5b                   	pop    ebx
c000d57f:	5e                   	pop    esi
c000d580:	5f                   	pop    edi
c000d581:	5d                   	pop    ebp
c000d582:	c3                   	ret    

c000d583 <sinc_mono_vari_process>:
c000d583:	55                   	push   ebp
c000d584:	ba 05 00 00 00       	mov    edx,0x5
c000d589:	57                   	push   edi
c000d58a:	56                   	push   esi
c000d58b:	53                   	push   ebx
c000d58c:	83 ec 4c             	sub    esp,0x4c
c000d58f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d593:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d597:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d59a:	85 db                	test   ebx,ebx
c000d59c:	0f 84 c1 06 00 00    	je     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5a2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5a5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5a8:	0f af c7             	imul   eax,edi
c000d5ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5ae:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5b8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5bf:	0f af c7             	imul   eax,edi
c000d5c2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5c5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5c9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5d6:	68 00 00 70 3f       	push   0x3f700000
c000d5db:	6a 00                	push   0x0
c000d5dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e5:	e8 c5 ae 01 00       	call   c00284af <__ltdf2>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	ba 16 00 00 00       	mov    edx,0x16
c000d5f2:	85 c0                	test   eax,eax
c000d5f4:	0f 88 69 06 00 00    	js     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5fa:	68 00 00 70 40       	push   0x40700000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d609:	e8 83 ae 01 00       	call   c0028491 <__gtdf2>
c000d60e:	83 c4 10             	add    esp,0x10
c000d611:	ba 16 00 00 00       	mov    edx,0x16
c000d616:	85 c0                	test   eax,eax
c000d618:	0f 8f 45 06 00 00    	jg     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d61e:	83 ec 0c             	sub    esp,0xc
c000d621:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d624:	e8 1a ac 01 00       	call   c0028243 <__floatsidf>
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d630:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d634:	68 00 00 00 40       	push   0x40000000
c000d639:	6a 00                	push   0x0
c000d63b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d63f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d643:	e8 1b 9f 01 00       	call   c0027563 <__adddf3>
c000d648:	59                   	pop    ecx
c000d649:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d64d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d651:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d654:	e8 ea ab 01 00       	call   c0028243 <__floatsidf>
c000d659:	83 c4 10             	add    esp,0x10
c000d65c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d660:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d664:	52                   	push   edx
c000d665:	50                   	push   eax
c000d666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66e:	e8 51 a8 01 00       	call   c0027ec4 <__divdf3>
c000d673:	83 c4 10             	add    esp,0x10
c000d676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d67a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d67e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d681:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d684:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d688:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d68c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	e8 f0 ad 01 00       	call   c0028491 <__gtdf2>
c000d6a1:	83 c4 10             	add    esp,0x10
c000d6a4:	85 c0                	test   eax,eax
c000d6a6:	7e 2d                	jle    c000d6d5 <sinc_mono_vari_process+0x152>
c000d6a8:	68 00 00 f0 3f       	push   0x3ff00000
c000d6ad:	6a 00                	push   0x0
c000d6af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b7:	e8 f3 ad 01 00       	call   c00284af <__ltdf2>
c000d6bc:	83 c4 10             	add    esp,0x10
c000d6bf:	85 c0                	test   eax,eax
c000d6c1:	79 4d                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6d3:	eb 1b                	jmp    c000d6f0 <sinc_mono_vari_process+0x16d>
c000d6d5:	68 00 00 f0 3f       	push   0x3ff00000
c000d6da:	6a 00                	push   0x0
c000d6dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e4:	e8 c6 ad 01 00       	call   c00284af <__ltdf2>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	85 c0                	test   eax,eax
c000d6ee:	79 20                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d700:	e8 bf a7 01 00       	call   c0027ec4 <__divdf3>
c000d705:	83 c4 10             	add    esp,0x10
c000d708:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d70c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d710:	50                   	push   eax
c000d711:	50                   	push   eax
c000d712:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d716:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71a:	e8 41 af 01 00       	call   c0028660 <lrint>
c000d71f:	40                   	inc    eax
c000d720:	0f af c7             	imul   eax,edi
c000d723:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d727:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d72b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d72e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d731:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d735:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d739:	58                   	pop    eax
c000d73a:	5a                   	pop    edx
c000d73b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d743:	e8 18 af 01 00       	call   c0028660 <lrint>
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	50                   	push   eax
c000d74c:	e8 f2 aa 01 00       	call   c0028243 <__floatsidf>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d758:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d75c:	52                   	push   edx
c000d75d:	50                   	push   eax
c000d75e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d762:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d766:	e8 49 a4 01 00       	call   c0027bb4 <__subdf3>
c000d76b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d76f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d773:	83 c4 20             	add    esp,0x20
c000d776:	6a 00                	push   0x0
c000d778:	6a 00                	push   0x0
c000d77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d782:	e8 28 ad 01 00       	call   c00284af <__ltdf2>
c000d787:	83 c4 10             	add    esp,0x10
c000d78a:	85 c0                	test   eax,eax
c000d78c:	79 1f                	jns    c000d7ad <sinc_mono_vari_process+0x22a>
c000d78e:	68 00 00 f0 3f       	push   0x3ff00000
c000d793:	6a 00                	push   0x0
c000d795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d79d:	e8 c1 9d 01 00       	call   c0027563 <__adddf3>
c000d7a2:	83 c4 10             	add    esp,0x10
c000d7a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7ad:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7b3:	83 ec 10             	sub    esp,0x10
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	e8 e9 a3 01 00       	call   c0027bb4 <__subdf3>
c000d7cb:	83 c4 18             	add    esp,0x18
c000d7ce:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7d6:	52                   	push   edx
c000d7d7:	50                   	push   eax
c000d7d8:	e8 83 ae 01 00       	call   c0028660 <lrint>
c000d7dd:	0f af f8             	imul   edi,eax
c000d7e0:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7e3:	31 ff                	xor    edi,edi
c000d7e5:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7ea:	99                   	cdq    
c000d7eb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7ee:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f9:	55                   	push   ebp
c000d7fa:	57                   	push   edi
c000d7fb:	e8 c4 a6 01 00       	call   c0027ec4 <__divdf3>
c000d800:	83 c4 10             	add    esp,0x10
c000d803:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d807:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d80b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d810:	68 23 42 92 0c       	push   0xc924223
c000d815:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d819:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81d:	e8 41 9d 01 00       	call   c0027563 <__adddf3>
c000d822:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d826:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d82a:	83 c4 20             	add    esp,0x20
c000d82d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d831:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d835:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d838:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d83b:	7d 54                	jge    c000d891 <sinc_mono_vari_process+0x30e>
c000d83d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d840:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d843:	01 c8                	add    eax,ecx
c000d845:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d848:	99                   	cdq    
c000d849:	f7 f9                	idiv   ecx
c000d84b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d84f:	7d 0c                	jge    c000d85d <sinc_mono_vari_process+0x2da>
c000d851:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d854:	85 ff                	test   edi,edi
c000d856:	79 73                	jns    c000d8cb <sinc_mono_vari_process+0x348>
c000d858:	e9 ee 00 00 00       	jmp    c000d94b <sinc_mono_vari_process+0x3c8>
c000d85d:	50                   	push   eax
c000d85e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d862:	56                   	push   esi
c000d863:	53                   	push   ebx
c000d864:	e8 8d e0 ff ff       	call   c000b8f6 <prepare_data>
c000d869:	89 c2                	mov    edx,eax
c000d86b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d875:	85 d2                	test   edx,edx
c000d877:	0f 85 e6 03 00 00    	jne    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d87d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d880:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d883:	01 c8                	add    eax,ecx
c000d885:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d888:	99                   	cdq    
c000d889:	f7 f9                	idiv   ecx
c000d88b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d88f:	7c c0                	jl     c000d851 <sinc_mono_vari_process+0x2ce>
c000d891:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d899:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d89d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8ab:	89 01                	mov    DWORD PTR [ecx],eax
c000d8ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8b3:	99                   	cdq    
c000d8b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8bd:	99                   	cdq    
c000d8be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c1:	31 d2                	xor    edx,edx
c000d8c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8c6:	e9 98 03 00 00       	jmp    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d8cb:	83 ec 0c             	sub    esp,0xc
c000d8ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d1:	e8 6d a9 01 00       	call   c0028243 <__floatsidf>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f1:	e8 6d 9c 01 00       	call   c0027563 <__adddf3>
c000d8f6:	83 c4 10             	add    esp,0x10
c000d8f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d901:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d905:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d909:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d90d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d911:	e8 4d 9c 01 00       	call   c0027563 <__adddf3>
c000d916:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d919:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d91d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d921:	e8 1d a9 01 00       	call   c0028243 <__floatsidf>
c000d926:	83 c4 10             	add    esp,0x10
c000d929:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d92d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d931:	52                   	push   edx
c000d932:	50                   	push   eax
c000d933:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d937:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93b:	e8 51 ab 01 00       	call   c0028491 <__gtdf2>
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	85 c0                	test   eax,eax
c000d945:	0f 8f 46 ff ff ff    	jg     c000d891 <sinc_mono_vari_process+0x30e>
c000d94b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d94f:	0f 8e f5 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d955:	83 ec 10             	sub    esp,0x10
c000d958:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d95b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d95e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d962:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d965:	ff 30                	push   DWORD PTR [eax]
c000d967:	e8 48 a2 01 00       	call   c0027bb4 <__subdf3>
c000d96c:	83 c4 18             	add    esp,0x18
c000d96f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d977:	52                   	push   edx
c000d978:	50                   	push   eax
c000d979:	e8 c2 ac 01 00       	call   c0028640 <fabs>
c000d97e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d982:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d986:	83 c4 10             	add    esp,0x10
c000d989:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d98e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99b:	e8 f1 aa 01 00       	call   c0028491 <__gtdf2>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	85 c0                	test   eax,eax
c000d9a5:	0f 8e 9f 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d9ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9af:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9bc:	52                   	push   edx
c000d9bd:	50                   	push   eax
c000d9be:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9c4:	e8 eb a1 01 00       	call   c0027bb4 <__subdf3>
c000d9c9:	5f                   	pop    edi
c000d9ca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9ce:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9d2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9d5:	e8 69 a8 01 00       	call   c0028243 <__floatsidf>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e5:	52                   	push   edx
c000d9e6:	50                   	push   eax
c000d9e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9ef:	e8 ec a1 01 00       	call   c0027be0 <__muldf3>
c000d9f4:	5d                   	pop    ebp
c000d9f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9fd:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da00:	e8 3e a8 01 00       	call   c0028243 <__floatsidf>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da0c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da10:	52                   	push   edx
c000da11:	50                   	push   eax
c000da12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1a:	e8 a5 a4 01 00       	call   c0027ec4 <__divdf3>
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3a:	e8 24 9b 01 00       	call   c0027563 <__adddf3>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da4a:	83 ec 0c             	sub    esp,0xc
c000da4d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da50:	e8 ee a7 01 00       	call   c0028243 <__floatsidf>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da5c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	e8 3a aa 01 00       	call   c00284af <__ltdf2>
c000da75:	83 c4 10             	add    esp,0x10
c000da78:	85 c0                	test   eax,eax
c000da7a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da7e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da82:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da86:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da8a:	78 10                	js     c000da9c <sinc_mono_vari_process+0x519>
c000da8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daa8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daac:	e8 2f a1 01 00       	call   c0027be0 <__muldf3>
c000dab1:	59                   	pop    ecx
c000dab2:	5f                   	pop    edi
c000dab3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dab7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dabb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dabf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac3:	e8 07 de ff ff       	call   c000b8cf <double_to_fp>
c000dac8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dacc:	89 c7                	mov    edi,eax
c000dace:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dad6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dada:	e8 01 a1 01 00       	call   c0027be0 <__muldf3>
c000dadf:	83 c4 18             	add    esp,0x18
c000dae2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dae6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daea:	52                   	push   edx
c000daeb:	50                   	push   eax
c000daec:	e8 de dd ff ff       	call   c000b8cf <double_to_fp>
c000daf1:	83 ec 0c             	sub    esp,0xc
c000daf4:	89 c5                	mov    ebp,eax
c000daf6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000daf9:	e8 45 a7 01 00       	call   c0028243 <__floatsidf>
c000dafe:	83 c4 10             	add    esp,0x10
c000db01:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db05:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db09:	52                   	push   edx
c000db0a:	50                   	push   eax
c000db0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db13:	e8 ac a3 01 00       	call   c0027ec4 <__divdf3>
c000db18:	83 c4 10             	add    esp,0x10
c000db1b:	89 e9                	mov    ecx,ebp
c000db1d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db21:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db25:	89 d8                	mov    eax,ebx
c000db27:	89 fa                	mov    edx,edi
c000db29:	e8 ee bd ff ff       	call   c000991c <calc_output_single>
c000db2e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db31:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db3c:	52                   	push   edx
c000db3d:	50                   	push   eax
c000db3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db46:	e8 95 a0 01 00       	call   c0027be0 <__muldf3>
c000db4b:	59                   	pop    ecx
c000db4c:	59                   	pop    ecx
c000db4d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db51:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	e8 51 a9 01 00       	call   c00284b3 <__truncdfsf2>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db68:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7b:	e8 44 a3 01 00       	call   c0027ec4 <__divdf3>
c000db80:	83 c4 10             	add    esp,0x10
c000db83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db87:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9b:	e8 c3 99 01 00       	call   c0027563 <__adddf3>
c000dba0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dba4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dba8:	83 c4 18             	add    esp,0x18
c000dbab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb3:	e8 a8 aa 01 00       	call   c0028660 <lrint>
c000dbb8:	83 ec 0c             	sub    esp,0xc
c000dbbb:	50                   	push   eax
c000dbbc:	e8 82 a6 01 00       	call   c0028243 <__floatsidf>
c000dbc1:	83 c4 10             	add    esp,0x10
c000dbc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbcc:	52                   	push   edx
c000dbcd:	50                   	push   eax
c000dbce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd6:	e8 d9 9f 01 00       	call   c0027bb4 <__subdf3>
c000dbdb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbe3:	83 c4 20             	add    esp,0x20
c000dbe6:	6a 00                	push   0x0
c000dbe8:	6a 00                	push   0x0
c000dbea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf2:	e8 b8 a8 01 00       	call   c00284af <__ltdf2>
c000dbf7:	83 c4 10             	add    esp,0x10
c000dbfa:	85 c0                	test   eax,eax
c000dbfc:	79 20                	jns    c000dc1e <sinc_mono_vari_process+0x69b>
c000dbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0e:	e8 50 99 01 00       	call   c0027563 <__adddf3>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc1e:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc21:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc24:	83 ec 10             	sub    esp,0x10
c000dc27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc37:	e8 78 9f 01 00       	call   c0027bb4 <__subdf3>
c000dc3c:	83 c4 18             	add    esp,0x18
c000dc3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc47:	52                   	push   edx
c000dc48:	50                   	push   eax
c000dc49:	e8 12 aa 01 00       	call   c0028660 <lrint>
c000dc4e:	83 c4 10             	add    esp,0x10
c000dc51:	0f af f8             	imul   edi,eax
c000dc54:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc57:	99                   	cdq    
c000dc58:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc5b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc5e:	e9 d2 fb ff ff       	jmp    c000d835 <sinc_mono_vari_process+0x2b2>
c000dc63:	83 c4 4c             	add    esp,0x4c
c000dc66:	89 d0                	mov    eax,edx
c000dc68:	5b                   	pop    ebx
c000dc69:	5e                   	pop    esi
c000dc6a:	5f                   	pop    edi
c000dc6b:	5d                   	pop    ebp
c000dc6c:	c3                   	ret    

c000dc6d <sinc_get_name>:
c000dc6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc71:	31 c0                	xor    eax,eax
c000dc73:	83 fa 02             	cmp    edx,0x2
c000dc76:	77 07                	ja     c000dc7f <sinc_get_name+0x12>
c000dc78:	8b 04 95 44 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd61bc]
c000dc7f:	c3                   	ret    

c000dc80 <sinc_get_description>:
c000dc80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc84:	31 c0                	xor    eax,eax
c000dc86:	83 fa 02             	cmp    edx,0x2
c000dc89:	77 07                	ja     c000dc92 <sinc_get_description+0x12>
c000dc8b:	8b 04 95 38 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd61c8]
c000dc92:	c3                   	ret    

c000dc93 <sinc_set_converter>:
c000dc93:	53                   	push   ebx
c000dc94:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc9a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dca4:	85 c0                	test   eax,eax
c000dca6:	74 13                	je     c000dcbb <sinc_set_converter+0x28>
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	50                   	push   eax
c000dcac:	e8 9f 1b 00 00       	call   c000f850 <free>
c000dcb1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	50                   	push   eax
c000dcbc:	68 44 08 00 00       	push   0x844
c000dcc1:	6a 00                	push   0x0
c000dcc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcc7:	50                   	push   eax
c000dcc8:	e8 ab 2a ff ff       	call   c0000778 <memset>
c000dccd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	b8 0b 00 00 00       	mov    eax,0xb
c000dcd8:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcde:	7f 6e                	jg     c000dd4e <sinc_set_converter+0xbb>
c000dce0:	83 fa 01             	cmp    edx,0x1
c000dce3:	75 10                	jne    c000dcf5 <sinc_set_converter+0x62>
c000dce5:	c7 43 24 83 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d583
c000dcec:	c7 43 20 83 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d583
c000dcf3:	eb 4d                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dcf5:	83 fa 02             	cmp    edx,0x2
c000dcf8:	75 10                	jne    c000dd0a <sinc_set_converter+0x77>
c000dcfa:	c7 43 24 be ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cebe
c000dd01:	c7 43 20 be ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cebe
c000dd08:	eb 38                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd0a:	83 fa 04             	cmp    edx,0x4
c000dd0d:	75 10                	jne    c000dd1f <sinc_set_converter+0x8c>
c000dd0f:	c7 43 24 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7f9
c000dd16:	c7 43 20 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7f9
c000dd1d:	eb 23                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd1f:	83 fa 06             	cmp    edx,0x6
c000dd22:	75 10                	jne    c000dd34 <sinc_set_converter+0xa1>
c000dd24:	c7 43 24 34 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c134
c000dd2b:	c7 43 20 34 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c134
c000dd32:	eb 0e                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd34:	c7 43 24 70 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba70
c000dd3b:	c7 43 20 70 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba70
c000dd42:	c7 43 28 23 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad23
c000dd49:	b8 0a 00 00 00       	mov    eax,0xa
c000dd4e:	81 c4 58 08 00 00    	add    esp,0x858
c000dd54:	5b                   	pop    ebx
c000dd55:	c3                   	ret    

c000dd56 <zoh_vari_process>:
c000dd56:	55                   	push   ebp
c000dd57:	31 d2                	xor    edx,edx
c000dd59:	57                   	push   edi
c000dd5a:	56                   	push   esi
c000dd5b:	53                   	push   ebx
c000dd5c:	83 ec 3c             	sub    esp,0x3c
c000dd5f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd63:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd67:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd6b:	0f 8e 80 06 00 00    	jle    c000e3f1 <zoh_vari_process+0x69b>
c000dd71:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd74:	ba 05 00 00 00       	mov    edx,0x5
c000dd79:	85 db                	test   ebx,ebx
c000dd7b:	0f 84 70 06 00 00    	je     c000e3f1 <zoh_vari_process+0x69b>
c000dd81:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd84:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd88:	74 19                	je     c000dda3 <zoh_vari_process+0x4d>
c000dd8a:	31 d2                	xor    edx,edx
c000dd8c:	39 c2                	cmp    edx,eax
c000dd8e:	7d 0c                	jge    c000dd9c <zoh_vari_process+0x46>
c000dd90:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd92:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd95:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd99:	42                   	inc    edx
c000dd9a:	eb f0                	jmp    c000dd8c <zoh_vari_process+0x36>
c000dd9c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dda3:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dda6:	0f af d0             	imul   edx,eax
c000dda9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddac:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddb7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddba:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddc4:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddce:	68 00 00 70 3f       	push   0x3f700000
c000ddd3:	6a 00                	push   0x0
c000ddd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dddd:	e8 cd a6 01 00       	call   c00284af <__ltdf2>
c000dde2:	83 c4 10             	add    esp,0x10
c000dde5:	ba 16 00 00 00       	mov    edx,0x16
c000ddea:	85 c0                	test   eax,eax
c000ddec:	0f 88 ff 05 00 00    	js     c000e3f1 <zoh_vari_process+0x69b>
c000ddf2:	68 00 00 70 40       	push   0x40700000
c000ddf7:	6a 00                	push   0x0
c000ddf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de01:	e8 8b a6 01 00       	call   c0028491 <__gtdf2>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	ba 16 00 00 00       	mov    edx,0x16
c000de0e:	85 c0                	test   eax,eax
c000de10:	0f 8f db 05 00 00    	jg     c000e3f1 <zoh_vari_process+0x69b>
c000de16:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de19:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de24:	68 00 00 f0 3f       	push   0x3ff00000
c000de29:	6a 00                	push   0x0
c000de2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de33:	e8 77 a6 01 00       	call   c00284af <__ltdf2>
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	85 c0                	test   eax,eax
c000de3d:	0f 89 da 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000de43:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de46:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de49:	0f 8d ce 01 00 00    	jge    c000e01d <zoh_vari_process+0x2c7>
c000de4f:	83 ec 0c             	sub    esp,0xc
c000de52:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de55:	e8 e9 a3 01 00       	call   c0028243 <__floatsidf>
c000de5a:	83 c4 10             	add    esp,0x10
c000de5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000de60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de74:	e8 67 9d 01 00       	call   c0027be0 <__muldf3>
c000de79:	59                   	pop    ecx
c000de7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de82:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de85:	e8 b9 a3 01 00       	call   c0028243 <__floatsidf>
c000de8a:	83 c4 10             	add    esp,0x10
c000de8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de95:	52                   	push   edx
c000de96:	50                   	push   eax
c000de97:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9f:	e8 bf 96 01 00       	call   c0027563 <__adddf3>
c000dea4:	59                   	pop    ecx
c000dea5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dea9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dead:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb0:	e8 8e a3 01 00       	call   c0028243 <__floatsidf>
c000deb5:	83 c4 10             	add    esp,0x10
c000deb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000debc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec0:	52                   	push   edx
c000dec1:	50                   	push   eax
c000dec2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dec6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deca:	e8 de a5 01 00       	call   c00284ad <__gedf2>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	85 c0                	test   eax,eax
c000ded4:	0f 89 43 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000deda:	85 ed                	test   ebp,ebp
c000dedc:	0f 8e ec 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000dee2:	83 ec 10             	sub    esp,0x10
c000dee5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dee8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deeb:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deee:	ff 37                	push   DWORD PTR [edi]
c000def0:	e8 bf 9c 01 00       	call   c0027bb4 <__subdf3>
c000def5:	83 c4 18             	add    esp,0x18
c000def8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000defc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df00:	52                   	push   edx
c000df01:	50                   	push   eax
c000df02:	e8 39 a7 01 00       	call   c0028640 <fabs>
c000df07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df0f:	83 c4 10             	add    esp,0x10
c000df12:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df17:	68 23 42 92 0c       	push   0xc924223
c000df1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df24:	e8 68 a5 01 00       	call   c0028491 <__gtdf2>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	85 c0                	test   eax,eax
c000df2e:	0f 8e 9a 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000df34:	8b 07                	mov    eax,DWORD PTR [edi]
c000df36:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df39:	89 04 24             	mov    DWORD PTR [esp],eax
c000df3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df40:	52                   	push   edx
c000df41:	50                   	push   eax
c000df42:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df45:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df48:	e8 67 9c 01 00       	call   c0027bb4 <__subdf3>
c000df4d:	59                   	pop    ecx
c000df4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df52:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df56:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df59:	e8 e5 a2 01 00       	call   c0028243 <__floatsidf>
c000df5e:	83 c4 10             	add    esp,0x10
c000df61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df65:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df69:	52                   	push   edx
c000df6a:	50                   	push   eax
c000df6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df73:	e8 68 9c 01 00       	call   c0027be0 <__muldf3>
c000df78:	5d                   	pop    ebp
c000df79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df7d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df81:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df84:	e8 ba a2 01 00       	call   c0028243 <__floatsidf>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df94:	52                   	push   edx
c000df95:	50                   	push   eax
c000df96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9e:	e8 21 9f 01 00       	call   c0027ec4 <__divdf3>
c000dfa3:	83 c4 10             	add    esp,0x10
c000dfa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfbe:	e8 a0 95 01 00       	call   c0027563 <__adddf3>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfce:	31 c0                	xor    eax,eax
c000dfd0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfd3:	7e 13                	jle    c000dfe8 <zoh_vari_process+0x292>
c000dfd5:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfd9:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfdc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfdf:	40                   	inc    eax
c000dfe0:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfe3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfe6:	eb e8                	jmp    c000dfd0 <zoh_vari_process+0x27a>
c000dfe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff0:	68 00 00 f0 3f       	push   0x3ff00000
c000dff5:	6a 00                	push   0x0
c000dff7:	e8 c8 9e 01 00       	call   c0027ec4 <__divdf3>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	89 04 24             	mov    DWORD PTR [esp],eax
c000e002:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e010:	e8 4e 95 01 00       	call   c0027563 <__adddf3>
c000e015:	83 c4 10             	add    esp,0x10
c000e018:	e9 ff fd ff ff       	jmp    c000de1c <zoh_vari_process+0xc6>
c000e01d:	55                   	push   ebp
c000e01e:	55                   	push   ebp
c000e01f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e027:	e8 34 a6 01 00       	call   c0028660 <lrint>
c000e02c:	83 ec 0c             	sub    esp,0xc
c000e02f:	50                   	push   eax
c000e030:	e8 0e a2 01 00       	call   c0028243 <__floatsidf>
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e03c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e040:	52                   	push   edx
c000e041:	50                   	push   eax
c000e042:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e046:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04a:	e8 65 9b 01 00       	call   c0027bb4 <__subdf3>
c000e04f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e053:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e057:	83 c4 20             	add    esp,0x20
c000e05a:	6a 00                	push   0x0
c000e05c:	6a 00                	push   0x0
c000e05e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e062:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e066:	e8 44 a4 01 00       	call   c00284af <__ltdf2>
c000e06b:	83 c4 10             	add    esp,0x10
c000e06e:	85 c0                	test   eax,eax
c000e070:	79 1e                	jns    c000e090 <zoh_vari_process+0x33a>
c000e072:	68 00 00 f0 3f       	push   0x3ff00000
c000e077:	6a 00                	push   0x0
c000e079:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e081:	e8 dd 94 01 00       	call   c0027563 <__adddf3>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 04 24             	mov    DWORD PTR [esp],eax
c000e08c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e090:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e093:	83 ec 10             	sub    esp,0x10
c000e096:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a6:	e8 09 9b 01 00       	call   c0027bb4 <__subdf3>
c000e0ab:	83 c4 18             	add    esp,0x18
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0b6:	52                   	push   edx
c000e0b7:	50                   	push   eax
c000e0b8:	e8 a3 a5 01 00       	call   c0028660 <lrint>
c000e0bd:	83 c4 10             	add    esp,0x10
c000e0c0:	0f af e8             	imul   ebp,eax
c000e0c3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0c6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0c9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0d7:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0da:	0f 8d 7a 02 00 00    	jge    c000e35a <zoh_vari_process+0x604>
c000e0e0:	83 ec 0c             	sub    esp,0xc
c000e0e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0e6:	e8 58 a1 01 00       	call   c0028243 <__floatsidf>
c000e0eb:	83 c4 10             	add    esp,0x10
c000e0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e102:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e106:	e8 d5 9a 01 00       	call   c0027be0 <__muldf3>
c000e10b:	59                   	pop    ecx
c000e10c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e110:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e118:	e8 26 a1 01 00       	call   c0028243 <__floatsidf>
c000e11d:	83 c4 10             	add    esp,0x10
c000e120:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e124:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e128:	52                   	push   edx
c000e129:	50                   	push   eax
c000e12a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e12e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e132:	e8 2c 94 01 00       	call   c0027563 <__adddf3>
c000e137:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e13a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e13e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e142:	e8 fc a0 01 00       	call   c0028243 <__floatsidf>
c000e147:	83 c4 10             	add    esp,0x10
c000e14a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e14e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e152:	52                   	push   edx
c000e153:	50                   	push   eax
c000e154:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e158:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e15c:	e8 50 a3 01 00       	call   c00284b1 <__ledf2>
c000e161:	83 c4 10             	add    esp,0x10
c000e164:	85 c0                	test   eax,eax
c000e166:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e16a:	0f 8f ea 01 00 00    	jg     c000e35a <zoh_vari_process+0x604>
c000e170:	85 c9                	test   ecx,ecx
c000e172:	0f 8e ed 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e178:	83 ec 10             	sub    esp,0x10
c000e17b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e17e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e181:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e184:	ff 37                	push   DWORD PTR [edi]
c000e186:	e8 29 9a 01 00       	call   c0027bb4 <__subdf3>
c000e18b:	83 c4 18             	add    esp,0x18
c000e18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e196:	52                   	push   edx
c000e197:	50                   	push   eax
c000e198:	e8 a3 a4 01 00       	call   c0028640 <fabs>
c000e19d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1a5:	83 c4 10             	add    esp,0x10
c000e1a8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1ad:	68 23 42 92 0c       	push   0xc924223
c000e1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ba:	e8 d2 a2 01 00       	call   c0028491 <__gtdf2>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	85 c0                	test   eax,eax
c000e1c4:	0f 8e 9b 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e1ca:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1cc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1d7:	52                   	push   edx
c000e1d8:	50                   	push   eax
c000e1d9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1dc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1df:	e8 d0 99 01 00       	call   c0027bb4 <__subdf3>
c000e1e4:	5d                   	pop    ebp
c000e1e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1e9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1ed:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f0:	e8 4e a0 01 00       	call   c0028243 <__floatsidf>
c000e1f5:	83 c4 10             	add    esp,0x10
c000e1f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e200:	52                   	push   edx
c000e201:	50                   	push   eax
c000e202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20a:	e8 d1 99 01 00       	call   c0027be0 <__muldf3>
c000e20f:	59                   	pop    ecx
c000e210:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e214:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e218:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e21b:	e8 23 a0 01 00       	call   c0028243 <__floatsidf>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e227:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e22b:	52                   	push   edx
c000e22c:	50                   	push   eax
c000e22d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e235:	e8 8a 9c 01 00       	call   c0027ec4 <__divdf3>
c000e23a:	83 c4 10             	add    esp,0x10
c000e23d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e241:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e249:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e255:	e8 09 93 01 00       	call   c0027563 <__adddf3>
c000e25a:	83 c4 10             	add    esp,0x10
c000e25d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e261:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e265:	31 d2                	xor    edx,edx
c000e267:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e26a:	39 d0                	cmp    eax,edx
c000e26c:	7e 1d                	jle    c000e28b <zoh_vari_process+0x535>
c000e26e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e271:	29 c1                	sub    ecx,eax
c000e273:	89 c8                	mov    eax,ecx
c000e275:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e277:	01 d0                	add    eax,edx
c000e279:	42                   	inc    edx
c000e27a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e27d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e280:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e283:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e286:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e289:	eb dc                	jmp    c000e267 <zoh_vari_process+0x511>
c000e28b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e28f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e293:	68 00 00 f0 3f       	push   0x3ff00000
c000e298:	6a 00                	push   0x0
c000e29a:	e8 25 9c 01 00       	call   c0027ec4 <__divdf3>
c000e29f:	83 c4 10             	add    esp,0x10
c000e2a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ba:	e8 a4 92 01 00       	call   c0027563 <__adddf3>
c000e2bf:	5d                   	pop    ebp
c000e2c0:	59                   	pop    ecx
c000e2c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d1:	e8 8a a3 01 00       	call   c0028660 <lrint>
c000e2d6:	83 ec 0c             	sub    esp,0xc
c000e2d9:	50                   	push   eax
c000e2da:	e8 64 9f 01 00       	call   c0028243 <__floatsidf>
c000e2df:	83 c4 10             	add    esp,0x10
c000e2e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ea:	52                   	push   edx
c000e2eb:	50                   	push   eax
c000e2ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f4:	e8 bb 98 01 00       	call   c0027bb4 <__subdf3>
c000e2f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e301:	83 c4 20             	add    esp,0x20
c000e304:	6a 00                	push   0x0
c000e306:	6a 00                	push   0x0
c000e308:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e310:	e8 9a a1 01 00       	call   c00284af <__ltdf2>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	85 c0                	test   eax,eax
c000e31a:	79 1e                	jns    c000e33a <zoh_vari_process+0x5e4>
c000e31c:	68 00 00 f0 3f       	push   0x3ff00000
c000e321:	6a 00                	push   0x0
c000e323:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e327:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32b:	e8 33 92 01 00       	call   c0027563 <__adddf3>
c000e330:	83 c4 10             	add    esp,0x10
c000e333:	89 04 24             	mov    DWORD PTR [esp],eax
c000e336:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e33a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e33d:	83 ec 10             	sub    esp,0x10
c000e340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e34c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e350:	e8 5f 98 01 00       	call   c0027bb4 <__subdf3>
c000e355:	e9 51 fd ff ff       	jmp    c000e0ab <zoh_vari_process+0x355>
c000e35a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e35e:	7d 3a                	jge    c000e39a <zoh_vari_process+0x644>
c000e360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e364:	83 ec 0c             	sub    esp,0xc
c000e367:	29 e8                	sub    eax,ebp
c000e369:	99                   	cdq    
c000e36a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e36d:	50                   	push   eax
c000e36e:	e8 d0 9e 01 00       	call   c0028243 <__floatsidf>
c000e373:	83 c4 10             	add    esp,0x10
c000e376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e37e:	52                   	push   edx
c000e37f:	50                   	push   eax
c000e380:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e384:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e388:	e8 d6 91 01 00       	call   c0027563 <__adddf3>
c000e38d:	83 c4 10             	add    esp,0x10
c000e390:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e393:	89 04 24             	mov    DWORD PTR [esp],eax
c000e396:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e39a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e39d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a1:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3a4:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3aa:	85 c0                	test   eax,eax
c000e3ac:	7f 25                	jg     c000e3d3 <zoh_vari_process+0x67d>
c000e3ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3b6:	89 07                	mov    DWORD PTR [edi],eax
c000e3b8:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3be:	99                   	cdq    
c000e3bf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3c2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3c5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3c8:	99                   	cdq    
c000e3c9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3cc:	31 d2                	xor    edx,edx
c000e3ce:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d1:	eb 1e                	jmp    c000e3f1 <zoh_vari_process+0x69b>
c000e3d3:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3d6:	31 d2                	xor    edx,edx
c000e3d8:	29 c8                	sub    eax,ecx
c000e3da:	c1 e0 02             	shl    eax,0x2
c000e3dd:	39 d1                	cmp    ecx,edx
c000e3df:	7e cd                	jle    c000e3ae <zoh_vari_process+0x658>
c000e3e1:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3e3:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3e7:	83 c0 04             	add    eax,0x4
c000e3ea:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3ee:	42                   	inc    edx
c000e3ef:	eb ec                	jmp    c000e3dd <zoh_vari_process+0x687>
c000e3f1:	83 c4 3c             	add    esp,0x3c
c000e3f4:	89 d0                	mov    eax,edx
c000e3f6:	5b                   	pop    ebx
c000e3f7:	5e                   	pop    esi
c000e3f8:	5f                   	pop    edi
c000e3f9:	5d                   	pop    ebp
c000e3fa:	c3                   	ret    

c000e3fb <zoh_reset>:
c000e3fb:	83 ec 0c             	sub    esp,0xc
c000e3fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e402:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e405:	85 c0                	test   eax,eax
c000e407:	74 20                	je     c000e429 <zoh_reset+0x2e>
c000e409:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e40c:	83 c0 1c             	add    eax,0x1c
c000e40f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e412:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e419:	c1 e2 02             	shl    edx,0x2
c000e41c:	51                   	push   ecx
c000e41d:	52                   	push   edx
c000e41e:	6a 00                	push   0x0
c000e420:	50                   	push   eax
c000e421:	e8 52 23 ff ff       	call   c0000778 <memset>
c000e426:	83 c4 10             	add    esp,0x10
c000e429:	83 c4 0c             	add    esp,0xc
c000e42c:	c3                   	ret    

c000e42d <zoh_get_name>:
c000e42d:	31 c0                	xor    eax,eax
c000e42f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e434:	75 05                	jne    c000e43b <zoh_get_name+0xe>
c000e436:	b8 5e 9f 02 c0       	mov    eax,0xc0029f5e
c000e43b:	c3                   	ret    

c000e43c <zoh_get_description>:
c000e43c:	31 c0                	xor    eax,eax
c000e43e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e443:	75 05                	jne    c000e44a <zoh_get_description+0xe>
c000e445:	b8 6f 9f 02 c0       	mov    eax,0xc0029f6f
c000e44a:	c3                   	ret    

c000e44b <zoh_set_converter>:
c000e44b:	53                   	push   ebx
c000e44c:	b8 0a 00 00 00       	mov    eax,0xa
c000e451:	83 ec 08             	sub    esp,0x8
c000e454:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e458:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e45d:	75 6e                	jne    c000e4cd <zoh_set_converter+0x82>
c000e45f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e462:	85 c0                	test   eax,eax
c000e464:	74 13                	je     c000e479 <zoh_set_converter+0x2e>
c000e466:	83 ec 0c             	sub    esp,0xc
c000e469:	50                   	push   eax
c000e46a:	e8 e1 13 00 00       	call   c000f850 <free>
c000e46f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e476:	83 c4 10             	add    esp,0x10
c000e479:	50                   	push   eax
c000e47a:	50                   	push   eax
c000e47b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e47e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e485:	50                   	push   eax
c000e486:	6a 01                	push   0x1
c000e488:	e8 e3 13 00 00       	call   c000f870 <calloc>
c000e48d:	83 c4 10             	add    esp,0x10
c000e490:	89 c2                	mov    edx,eax
c000e492:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e495:	85 d2                	test   edx,edx
c000e497:	b8 01 00 00 00       	mov    eax,0x1
c000e49c:	74 2f                	je     c000e4cd <zoh_set_converter+0x82>
c000e49e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a1:	83 ec 0c             	sub    esp,0xc
c000e4a4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4a7:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4ad:	c7 43 24 56 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd56
c000e4b4:	c7 43 20 56 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd56
c000e4bb:	c7 43 28 fb e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3fb
c000e4c2:	53                   	push   ebx
c000e4c3:	e8 33 ff ff ff       	call   c000e3fb <zoh_reset>
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	31 c0                	xor    eax,eax
c000e4cd:	83 c4 08             	add    esp,0x8
c000e4d0:	5b                   	pop    ebx
c000e4d1:	c3                   	ret    

c000e4d2 <CPU::current()>:
c000e4d2:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c000e4d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4dd:	90                   	nop
c000e4de:	c3                   	ret    

c000e4df <operator new(unsigned long)>:
c000e4df:	83 ec 0c             	sub    esp,0xc
c000e4e2:	83 ec 0c             	sub    esp,0xc
c000e4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4e9:	e8 52 13 00 00       	call   c000f840 <malloc>
c000e4ee:	83 c4 10             	add    esp,0x10
c000e4f1:	83 c4 0c             	add    esp,0xc
c000e4f4:	c3                   	ret    

c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4f5:	83 ec 0c             	sub    esp,0xc
c000e4f8:	83 ec 08             	sub    esp,0x8
c000e4fb:	68 a6 9f 02 c0       	push   0xc0029fa6
c000e500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e504:	e8 b7 23 ff ff       	call   c00008c0 <strcmp>
c000e509:	83 c4 10             	add    esp,0x10
c000e50c:	85 c0                	test   eax,eax
c000e50e:	0f 94 c0             	sete   al
c000e511:	84 c0                	test   al,al
c000e513:	74 0a                	je     c000e51f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e515:	b8 c8 e5 02 c0       	mov    eax,0xc002e5c8
c000e51a:	e9 e3 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e51f:	83 ec 08             	sub    esp,0x8
c000e522:	68 af 9f 02 c0       	push   0xc0029faf
c000e527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e52b:	e8 90 23 ff ff       	call   c00008c0 <strcmp>
c000e530:	83 c4 10             	add    esp,0x10
c000e533:	85 c0                	test   eax,eax
c000e535:	0f 94 c0             	sete   al
c000e538:	84 c0                	test   al,al
c000e53a:	74 0a                	je     c000e546 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e53c:	b8 dc 69 02 c0       	mov    eax,0xc00269dc
c000e541:	e9 bc 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e546:	83 ec 08             	sub    esp,0x8
c000e549:	68 b9 9f 02 c0       	push   0xc0029fb9
c000e54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e552:	e8 69 23 ff ff       	call   c00008c0 <strcmp>
c000e557:	83 c4 10             	add    esp,0x10
c000e55a:	85 c0                	test   eax,eax
c000e55c:	0f 94 c0             	sete   al
c000e55f:	84 c0                	test   al,al
c000e561:	74 0a                	je     c000e56d <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e563:	b8 10 67 02 c0       	mov    eax,0xc0026710
c000e568:	e9 95 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e56d:	83 ec 08             	sub    esp,0x8
c000e570:	68 c2 9f 02 c0       	push   0xc0029fc2
c000e575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e579:	e8 42 23 ff ff       	call   c00008c0 <strcmp>
c000e57e:	83 c4 10             	add    esp,0x10
c000e581:	85 c0                	test   eax,eax
c000e583:	0f 94 c0             	sete   al
c000e586:	84 c0                	test   al,al
c000e588:	74 07                	je     c000e591 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e58a:	b8 dc 6a 02 c0       	mov    eax,0xc0026adc
c000e58f:	eb 71                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e591:	83 ec 08             	sub    esp,0x8
c000e594:	68 cc 9f 02 c0       	push   0xc0029fcc
c000e599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59d:	e8 1e 23 ff ff       	call   c00008c0 <strcmp>
c000e5a2:	83 c4 10             	add    esp,0x10
c000e5a5:	85 c0                	test   eax,eax
c000e5a7:	0f 94 c0             	sete   al
c000e5aa:	84 c0                	test   al,al
c000e5ac:	74 07                	je     c000e5b5 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5ae:	b8 5c 68 02 c0       	mov    eax,0xc002685c
c000e5b3:	eb 4d                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b5:	83 ec 08             	sub    esp,0x8
c000e5b8:	68 d5 9f 02 c0       	push   0xc0029fd5
c000e5bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c1:	e8 fa 22 ff ff       	call   c00008c0 <strcmp>
c000e5c6:	83 c4 10             	add    esp,0x10
c000e5c9:	85 c0                	test   eax,eax
c000e5cb:	0f 94 c0             	sete   al
c000e5ce:	84 c0                	test   al,al
c000e5d0:	74 07                	je     c000e5d9 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5d2:	b8 cc e5 02 c0       	mov    eax,0xc002e5cc
c000e5d7:	eb 29                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d9:	83 ec 08             	sub    esp,0x8
c000e5dc:	68 e2 9f 02 c0       	push   0xc0029fe2
c000e5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e5:	e8 d6 22 ff ff       	call   c00008c0 <strcmp>
c000e5ea:	83 c4 10             	add    esp,0x10
c000e5ed:	85 c0                	test   eax,eax
c000e5ef:	0f 94 c0             	sete   al
c000e5f2:	84 c0                	test   al,al
c000e5f4:	74 07                	je     c000e5fd <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5f6:	b8 cd e5 02 c0       	mov    eax,0xc002e5cd
c000e5fb:	eb 05                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5fd:	b8 00 00 00 00       	mov    eax,0x0
c000e602:	83 c4 0c             	add    esp,0xc
c000e605:	c3                   	ret    

c000e606 <Computer::close(int, int, void*)>:
c000e606:	57                   	push   edi
c000e607:	56                   	push   esi
c000e608:	53                   	push   ebx
c000e609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e60d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e611:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e615:	83 ec 0c             	sub    esp,0xc
c000e618:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e61e:	e8 ad 5e 00 00       	call   c00144d0 <Device::closeAll()>
c000e623:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e629:	83 c4 10             	add    esp,0x10
c000e62c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e62e:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e632:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e63a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e63e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e642:	5b                   	pop    ebx
c000e643:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e646:	5e                   	pop    esi
c000e647:	5f                   	pop    edi
c000e648:	ff e0                	jmp    eax

c000e64a <Krnl::firstTask()>:
c000e64a:	53                   	push   ebx
c000e64b:	83 ec 14             	sub    esp,0x14
c000e64e:	fb                   	sti    
c000e64f:	68 3f 07 00 00       	push   0x73f
c000e654:	e8 e7 11 00 00       	call   c000f840 <malloc>
c000e659:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e660:	89 c3                	mov    ebx,eax
c000e662:	ff 35 34 1b 03 c0    	push   DWORD PTR ds:0xc0031b34
c000e668:	68 ef 9f 02 c0       	push   0xc0029fef
c000e66d:	6a 01                	push   0x1
c000e66f:	50                   	push   eax
c000e670:	e8 b9 f5 00 00       	call   c001dc2e <Process::Process(bool, char const*, Process*, char**)>
c000e675:	83 c4 20             	add    esp,0x20
c000e678:	68 ff 00 00 00       	push   0xff
c000e67d:	6a 00                	push   0x0
c000e67f:	68 d5 f1 00 c0       	push   0xc000f1d5
c000e684:	53                   	push   ebx
c000e685:	e8 a2 f8 00 00       	call   c001df2c <Process::createThread(void (*)(void*), void*, int)>
c000e68a:	6a 7a                	push   0x7a
c000e68c:	6a 00                	push   0x0
c000e68e:	68 8a e7 01 c0       	push   0xc001e78a
c000e693:	ff 35 34 1b 03 c0    	push   DWORD PTR ds:0xc0031b34
c000e699:	e8 8e f8 00 00       	call   c001df2c <Process::createThread(void (*)(void*), void*, int)>
c000e69e:	83 c4 20             	add    esp,0x20
c000e6a1:	a3 e8 1a 03 c0       	mov    ds:0xc0031ae8,eax
c000e6a6:	c6 05 cd e5 02 c0 01 	mov    BYTE PTR ds:0xc002e5cd,0x1
c000e6ad:	e8 59 04 01 00       	call   c001eb0b <Vm::initialise8086()>
c000e6b2:	e8 01 4c 00 00       	call   c00132b8 <Fs::initVFS()>
c000e6b7:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c000e6bc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6c4:	6a 00                	push   0x0
c000e6c6:	6a 00                	push   0x0
c000e6c8:	6a 00                	push   0x0
c000e6ca:	50                   	push   eax
c000e6cb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e6ce:	e8 eb de 00 00       	call   c001c5be <Sys::loadSyscalls()>
c000e6d3:	e8 c4 bd 00 00       	call   c001a49c <Krnl::loadSystemEnv()>
c000e6d8:	83 c4 0c             	add    esp,0xc
c000e6db:	6a 3a                	push   0x3a
c000e6dd:	68 fc 9f 02 c0       	push   0xc0029ffc
c000e6e2:	68 05 a0 02 c0       	push   0xc002a005
c000e6e7:	e8 d6 ca 00 00       	call   c001b1c2 <Reg::readIntWithDefault(char*, char*, int)>
c000e6ec:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6ef:	e8 ac 56 00 00       	call   c0013da0 <User::loadClockSettings(int)>
c000e6f4:	58                   	pop    eax
c000e6f5:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c000e6fa:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e700:	e8 9f 5d 00 00       	call   c00144a4 <Device::loadDriversForAll()>
c000e705:	e8 d8 b8 00 00       	call   c0019fe2 <Krnl::startCPUs()>
c000e70a:	5a                   	pop    edx
c000e70b:	8b 1d c8 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5c8
c000e711:	59                   	pop    ecx
c000e712:	6a 01                	push   0x1
c000e714:	68 0d a0 02 c0       	push   0xc002a00d
c000e719:	e8 34 f0 00 00       	call   c001d752 <Thr::loadDLL(char const*, bool)>
c000e71e:	5a                   	pop    edx
c000e71f:	59                   	pop    ecx
c000e720:	53                   	push   ebx
c000e721:	50                   	push   eax
c000e722:	e8 5f f2 00 00       	call   c001d986 <Thr::executeDLL(unsigned long, void*)>
c000e727:	83 c4 10             	add    esp,0x10
c000e72a:	83 ec 0c             	sub    esp,0xc
c000e72d:	6a 02                	push   0x2
c000e72f:	e8 5c fb 00 00       	call   c001e290 <blockTask(TaskState)>
c000e734:	83 c4 10             	add    esp,0x10
c000e737:	eb f1                	jmp    c000e72a <Krnl::firstTask()+0xe0>
c000e739:	90                   	nop

c000e73a <Computer::Computer()>:
c000e73a:	83 ec 0c             	sub    esp,0xc
c000e73d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e741:	83 ec 08             	sub    esp,0x8
c000e744:	68 29 a0 02 c0       	push   0xc002a029
c000e749:	50                   	push   eax
c000e74a:	e8 fb 5d 00 00       	call   c001454a <Device::Device(char const*)>
c000e74f:	83 c4 10             	add    esp,0x10
c000e752:	ba c8 a1 02 c0       	mov    edx,0xc002a1c8
c000e757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e75b:	89 10                	mov    DWORD PTR [eax],edx
c000e75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e761:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e76f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e77d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e783:	83 ca 04             	or     edx,0x4
c000e786:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e790:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e796:	0f b6 d0             	movzx  edx,al
c000e799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ae:	0f b6 d0             	movzx  edx,al
c000e7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7be:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7c4:	8d 50 01             	lea    edx,[eax+0x1]
c000e7c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7cb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e7d1:	0f b6 d0             	movzx  edx,al
c000e7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e7dc:	83 e1 3f             	and    ecx,0x3f
c000e7df:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ed:	0f b6 d0             	movzx  edx,al
c000e7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e805:	0f b6 d0             	movzx  edx,al
c000e808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e815:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e81b:	8d 50 01             	lea    edx,[eax+0x1]
c000e81e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e822:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e828:	0f b6 d0             	movzx  edx,al
c000e82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e833:	83 e1 3f             	and    ecx,0x3f
c000e836:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e844:	0f b6 d0             	movzx  edx,al
c000e847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84b:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e85c:	0f b6 d0             	movzx  edx,al
c000e85f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e863:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e872:	8d 50 01             	lea    edx,[eax+0x1]
c000e875:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e879:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e87f:	0f b6 d0             	movzx  edx,al
c000e882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e886:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e88a:	83 e1 3f             	and    ecx,0x3f
c000e88d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e891:	90                   	nop
c000e892:	83 c4 0c             	add    esp,0xc
c000e895:	c3                   	ret    

c000e896 <Computer::setBootMessage(char const*)>:
c000e896:	c3                   	ret    
c000e897:	90                   	nop

c000e898 <Computer::detectFeatures()>:
c000e898:	55                   	push   ebp
c000e899:	57                   	push   edi
c000e89a:	56                   	push   esi
c000e89b:	53                   	push   ebx
c000e89c:	83 ec 1c             	sub    esp,0x1c
c000e89f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8a3:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8ad:	e8 32 1a ff ff       	call   c00002e4 <detectCPUID>
c000e8b2:	85 c0                	test   eax,eax
c000e8b4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8ba:	0f 95 c2             	setne  dl
c000e8bd:	83 e0 fd             	and    eax,0xfffffffd
c000e8c0:	d1 e2                	shl    edx,1
c000e8c2:	09 d0                	or     eax,edx
c000e8c4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8ca:	a8 02                	test   al,0x2
c000e8cc:	75 46                	jne    c000e914 <Computer::detectFeatures()+0x7c>
c000e8ce:	f6 05 e1 e5 02 c0 04 	test   BYTE PTR ds:0xc002e5e1,0x4
c000e8d5:	74 07                	je     c000e8de <Computer::detectFeatures()+0x46>
c000e8d7:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e8de:	e8 c3 7d 01 00       	call   c00266a6 <x87Detect>
c000e8e3:	83 e0 01             	and    eax,0x1
c000e8e6:	c1 e0 04             	shl    eax,0x4
c000e8e9:	88 c2                	mov    dl,al
c000e8eb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8f1:	83 e0 ef             	and    eax,0xffffffef
c000e8f4:	09 d0                	or     eax,edx
c000e8f6:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8fc:	a8 10                	test   al,0x10
c000e8fe:	0f 85 2a 01 00 00    	jne    c000ea2e <Computer::detectFeatures()+0x196>
c000e904:	84 c0                	test   al,al
c000e906:	0f 88 45 01 00 00    	js     c000ea51 <Computer::detectFeatures()+0x1b9>
c000e90c:	83 c4 1c             	add    esp,0x1c
c000e90f:	5b                   	pop    ebx
c000e910:	5e                   	pop    esi
c000e911:	5f                   	pop    edi
c000e912:	5d                   	pop    ebp
c000e913:	c3                   	ret    
c000e914:	83 ec 0c             	sub    esp,0xc
c000e917:	6a 20                	push   0x20
c000e919:	e8 d6 a3 00 00       	call   c0018cf4 <CPU::cpuidCheckEDX(unsigned int)>
c000e91e:	83 e0 01             	and    eax,0x1
c000e921:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e928:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e92e:	83 e0 f7             	and    eax,0xfffffff7
c000e931:	09 d0                	or     eax,edx
c000e933:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e939:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e940:	e8 af a3 00 00       	call   c0018cf4 <CPU::cpuidCheckEDX(unsigned int)>
c000e945:	83 e0 01             	and    eax,0x1
c000e948:	88 c2                	mov    dl,al
c000e94a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e950:	83 e0 fe             	and    eax,0xfffffffe
c000e953:	09 d0                	or     eax,edx
c000e955:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e95b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e962:	e8 8d a3 00 00       	call   c0018cf4 <CPU::cpuidCheckEDX(unsigned int)>
c000e967:	c1 e0 07             	shl    eax,0x7
c000e96a:	88 c2                	mov    dl,al
c000e96c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e972:	83 e0 7f             	and    eax,0x7f
c000e975:	09 d0                	or     eax,edx
c000e977:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e97d:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e984:	e8 6b a3 00 00       	call   c0018cf4 <CPU::cpuidCheckEDX(unsigned int)>
c000e989:	83 c4 10             	add    esp,0x10
c000e98c:	83 e0 01             	and    eax,0x1
c000e98f:	c1 e0 05             	shl    eax,0x5
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e99a:	83 e0 df             	and    eax,0xffffffdf
c000e99d:	09 d0                	or     eax,edx
c000e99f:	f7 05 e0 e5 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e5e0,0x401
c000e9a9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9af:	0f 84 c2 00 00 00    	je     c000ea77 <Computer::detectFeatures()+0x1df>
c000e9b5:	83 e0 fe             	and    eax,0xfffffffe
c000e9b8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9be:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9c4:	88 c2                	mov    dl,al
c000e9c6:	83 e2 09             	and    edx,0x9
c000e9c9:	fe ca                	dec    dl
c000e9cb:	75 09                	jne    c000e9d6 <Computer::detectFeatures()+0x13e>
c000e9cd:	83 e0 fe             	and    eax,0xfffffffe
c000e9d0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d6:	83 ec 0c             	sub    esp,0xc
c000e9d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e9dd:	50                   	push   eax
c000e9de:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e9e2:	55                   	push   ebp
c000e9e3:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e9e7:	57                   	push   edi
c000e9e8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9ec:	56                   	push   esi
c000e9ed:	68 00 00 00 80       	push   0x80000000
c000e9f2:	e8 79 a2 00 00       	call   c0018c70 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9f7:	83 c4 20             	add    esp,0x20
c000e9fa:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea05:	0f 86 c3 fe ff ff    	jbe    c000e8ce <Computer::detectFeatures()+0x36>
c000ea0b:	83 ec 0c             	sub    esp,0xc
c000ea0e:	50                   	push   eax
c000ea0f:	55                   	push   ebp
c000ea10:	57                   	push   edi
c000ea11:	56                   	push   esi
c000ea12:	68 01 00 00 80       	push   0x80000001
c000ea17:	e8 54 a2 00 00       	call   c0018c70 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea1c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea26:	83 c4 20             	add    esp,0x20
c000ea29:	e9 a0 fe ff ff       	jmp    c000e8ce <Computer::detectFeatures()+0x36>
c000ea2e:	e8 2d 7c 01 00       	call   c0026660 <absolutelyNoChanceInHell>
c000ea33:	88 c2                	mov    dl,al
c000ea35:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea3b:	c1 e2 07             	shl    edx,0x7
c000ea3e:	83 e0 7f             	and    eax,0x7f
c000ea41:	09 d0                	or     eax,edx
c000ea43:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea49:	84 c0                	test   al,al
c000ea4b:	0f 89 bb fe ff ff    	jns    c000e90c <Computer::detectFeatures()+0x74>
c000ea51:	e8 ea 7b 01 00       	call   c0026640 <avxDetect>
c000ea56:	83 e0 01             	and    eax,0x1
c000ea59:	c1 e0 05             	shl    eax,0x5
c000ea5c:	88 c2                	mov    dl,al
c000ea5e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea64:	83 e0 df             	and    eax,0xffffffdf
c000ea67:	09 d0                	or     eax,edx
c000ea69:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea6f:	83 c4 1c             	add    esp,0x1c
c000ea72:	5b                   	pop    ebx
c000ea73:	5e                   	pop    esi
c000ea74:	5f                   	pop    edi
c000ea75:	5d                   	pop    ebp
c000ea76:	c3                   	ret    
c000ea77:	83 ec 0c             	sub    esp,0xc
c000ea7a:	68 00 02 00 00       	push   0x200
c000ea7f:	e8 70 a2 00 00       	call   c0018cf4 <CPU::cpuidCheckEDX(unsigned int)>
c000ea84:	83 c4 10             	add    esp,0x10
c000ea87:	83 e0 01             	and    eax,0x1
c000ea8a:	88 c2                	mov    dl,al
c000ea8c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea92:	83 e0 fe             	and    eax,0xfffffffe
c000ea95:	09 d0                	or     eax,edx
c000ea97:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea9d:	e9 1c ff ff ff       	jmp    c000e9be <Computer::detectFeatures()+0x126>

c000eaa2 <Computer::displayFeatures()>:
c000eaa2:	53                   	push   ebx
c000eaa3:	83 ec 14             	sub    esp,0x14
c000eaa6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaaa:	68 39 a0 02 c0       	push   0xc002a039
c000eaaf:	e8 80 44 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c000eab4:	83 c4 10             	add    esp,0x10
c000eab7:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eabe:	0f 85 73 02 00 00    	jne    c000ed37 <Computer::displayFeatures()+0x295>
c000eac4:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000eac9:	83 ec 08             	sub    esp,0x8
c000eacc:	50                   	push   eax
c000eacd:	68 4c a0 02 c0       	push   0xc002a04c
c000ead2:	e8 5d 44 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c000ead7:	83 c4 10             	add    esp,0x10
c000eada:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eae1:	0f 85 8c 02 00 00    	jne    c000ed73 <Computer::displayFeatures()+0x2d1>
c000eae7:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000eaec:	83 ec 08             	sub    esp,0x8
c000eaef:	50                   	push   eax
c000eaf0:	68 5d a0 02 c0       	push   0xc002a05d
c000eaf5:	e8 3a 44 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c000eafa:	83 c4 10             	add    esp,0x10
c000eafd:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb04:	0f 85 5f 02 00 00    	jne    c000ed69 <Computer::displayFeatures()+0x2c7>
c000eb0a:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000eb0f:	83 ec 08             	sub    esp,0x8
c000eb12:	50                   	push   eax
c000eb13:	68 6e a0 02 c0       	push   0xc002a06e
c000eb18:	e8 17 44 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c000eb1d:	83 c4 10             	add    esp,0x10
c000eb20:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb27:	0f 85 32 02 00 00    	jne    c000ed5f <Computer::displayFeatures()+0x2bd>
c000eb2d:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000eb32:	83 ec 08             	sub    esp,0x8
c000eb35:	50                   	push   eax
c000eb36:	68 7f a0 02 c0       	push   0xc002a07f
c000eb3b:	e8 f4 43 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c000eb40:	83 c4 10             	add    esp,0x10
c000eb43:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb4a:	0f 85 05 02 00 00    	jne    c000ed55 <Computer::displayFeatures()+0x2b3>
c000eb50:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000eb55:	83 ec 08             	sub    esp,0x8
c000eb58:	50                   	push   eax
c000eb59:	68 90 a0 02 c0       	push   0xc002a090
c000eb5e:	e8 d1 43 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c000eb63:	83 c4 10             	add    esp,0x10
c000eb66:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eb6d:	0f 85 d8 01 00 00    	jne    c000ed4b <Computer::displayFeatures()+0x2a9>
c000eb73:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000eb78:	83 ec 08             	sub    esp,0x8
c000eb7b:	50                   	push   eax
c000eb7c:	68 a1 a0 02 c0       	push   0xc002a0a1
c000eb81:	e8 ae 43 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c000eb86:	83 c4 10             	add    esp,0x10
c000eb89:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000eb90:	0f 85 ab 01 00 00    	jne    c000ed41 <Computer::displayFeatures()+0x29f>
c000eb96:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000eb9b:	83 ec 08             	sub    esp,0x8
c000eb9e:	50                   	push   eax
c000eb9f:	68 b2 a0 02 c0       	push   0xc002a0b2
c000eba4:	e8 8b 43 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c000eba9:	83 c4 10             	add    esp,0x10
c000ebac:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebb3:	0f 88 1b 02 00 00    	js     c000edd4 <Computer::displayFeatures()+0x332>
c000ebb9:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000ebbe:	83 ec 08             	sub    esp,0x8
c000ebc1:	50                   	push   eax
c000ebc2:	68 c3 a0 02 c0       	push   0xc002a0c3
c000ebc7:	e8 68 43 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c000ebcc:	83 c4 10             	add    esp,0x10
c000ebcf:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ebd6:	0f 85 a1 01 00 00    	jne    c000ed7d <Computer::displayFeatures()+0x2db>
c000ebdc:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000ebe1:	83 ec 08             	sub    esp,0x8
c000ebe4:	50                   	push   eax
c000ebe5:	68 d4 a0 02 c0       	push   0xc002a0d4
c000ebea:	e8 45 43 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c000ebef:	83 c4 10             	add    esp,0x10
c000ebf2:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ebf9:	0f 85 cb 01 00 00    	jne    c000edca <Computer::displayFeatures()+0x328>
c000ebff:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000ec04:	83 ec 08             	sub    esp,0x8
c000ec07:	50                   	push   eax
c000ec08:	68 e5 a0 02 c0       	push   0xc002a0e5
c000ec0d:	e8 22 43 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c000ec12:	83 c4 10             	add    esp,0x10
c000ec15:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec1c:	0f 85 9e 01 00 00    	jne    c000edc0 <Computer::displayFeatures()+0x31e>
c000ec22:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000ec27:	83 ec 08             	sub    esp,0x8
c000ec2a:	50                   	push   eax
c000ec2b:	68 f6 a0 02 c0       	push   0xc002a0f6
c000ec30:	e8 ff 42 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c000ec35:	83 c4 10             	add    esp,0x10
c000ec38:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec3f:	0f 85 71 01 00 00    	jne    c000edb6 <Computer::displayFeatures()+0x314>
c000ec45:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000ec4a:	83 ec 08             	sub    esp,0x8
c000ec4d:	50                   	push   eax
c000ec4e:	68 07 a1 02 c0       	push   0xc002a107
c000ec53:	e8 dc 42 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c000ec58:	83 c4 10             	add    esp,0x10
c000ec5b:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec62:	0f 85 44 01 00 00    	jne    c000edac <Computer::displayFeatures()+0x30a>
c000ec68:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000ec6d:	83 ec 08             	sub    esp,0x8
c000ec70:	50                   	push   eax
c000ec71:	68 18 a1 02 c0       	push   0xc002a118
c000ec76:	e8 b9 42 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c000ec7b:	83 c4 10             	add    esp,0x10
c000ec7e:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ec85:	0f 85 17 01 00 00    	jne    c000eda2 <Computer::displayFeatures()+0x300>
c000ec8b:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000ec90:	83 ec 08             	sub    esp,0x8
c000ec93:	50                   	push   eax
c000ec94:	68 29 a1 02 c0       	push   0xc002a129
c000ec99:	e8 96 42 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c000ec9e:	83 c4 10             	add    esp,0x10
c000eca1:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000eca8:	0f 85 ea 00 00 00    	jne    c000ed98 <Computer::displayFeatures()+0x2f6>
c000ecae:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000ecb3:	83 ec 08             	sub    esp,0x8
c000ecb6:	50                   	push   eax
c000ecb7:	68 3a a1 02 c0       	push   0xc002a13a
c000ecbc:	e8 73 42 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c000ecc1:	83 c4 10             	add    esp,0x10
c000ecc4:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000eccb:	0f 88 0d 01 00 00    	js     c000edde <Computer::displayFeatures()+0x33c>
c000ecd1:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000ecd6:	83 ec 08             	sub    esp,0x8
c000ecd9:	50                   	push   eax
c000ecda:	68 4b a1 02 c0       	push   0xc002a14b
c000ecdf:	e8 50 42 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c000ece4:	83 c4 10             	add    esp,0x10
c000ece7:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ecee:	0f 85 9a 00 00 00    	jne    c000ed8e <Computer::displayFeatures()+0x2ec>
c000ecf4:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000ecf9:	83 ec 08             	sub    esp,0x8
c000ecfc:	50                   	push   eax
c000ecfd:	68 5c a1 02 c0       	push   0xc002a15c
c000ed02:	e8 2d 42 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c000ed07:	83 c4 10             	add    esp,0x10
c000ed0a:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed11:	75 74                	jne    c000ed87 <Computer::displayFeatures()+0x2e5>
c000ed13:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c000ed18:	83 ec 08             	sub    esp,0x8
c000ed1b:	50                   	push   eax
c000ed1c:	68 6d a1 02 c0       	push   0xc002a16d
c000ed21:	e8 0e 42 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c000ed26:	c7 44 24 20 50 bc 02 c0 	mov    DWORD PTR [esp+0x20],0xc002bc50
c000ed2e:	83 c4 18             	add    esp,0x18
c000ed31:	5b                   	pop    ebx
c000ed32:	e9 fd 41 00 00       	jmp    c0012f34 <Dbg::kprintf(char const*, ...)>
c000ed37:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000ed3c:	e9 88 fd ff ff       	jmp    c000eac9 <Computer::displayFeatures()+0x27>
c000ed41:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000ed46:	e9 50 fe ff ff       	jmp    c000eb9b <Computer::displayFeatures()+0xf9>
c000ed4b:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000ed50:	e9 23 fe ff ff       	jmp    c000eb78 <Computer::displayFeatures()+0xd6>
c000ed55:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000ed5a:	e9 f6 fd ff ff       	jmp    c000eb55 <Computer::displayFeatures()+0xb3>
c000ed5f:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000ed64:	e9 c9 fd ff ff       	jmp    c000eb32 <Computer::displayFeatures()+0x90>
c000ed69:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000ed6e:	e9 9c fd ff ff       	jmp    c000eb0f <Computer::displayFeatures()+0x6d>
c000ed73:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000ed78:	e9 6f fd ff ff       	jmp    c000eaec <Computer::displayFeatures()+0x4a>
c000ed7d:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000ed82:	e9 5a fe ff ff       	jmp    c000ebe1 <Computer::displayFeatures()+0x13f>
c000ed87:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000ed8c:	eb 8a                	jmp    c000ed18 <Computer::displayFeatures()+0x276>
c000ed8e:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000ed93:	e9 61 ff ff ff       	jmp    c000ecf9 <Computer::displayFeatures()+0x257>
c000ed98:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000ed9d:	e9 11 ff ff ff       	jmp    c000ecb3 <Computer::displayFeatures()+0x211>
c000eda2:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000eda7:	e9 e4 fe ff ff       	jmp    c000ec90 <Computer::displayFeatures()+0x1ee>
c000edac:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000edb1:	e9 b7 fe ff ff       	jmp    c000ec6d <Computer::displayFeatures()+0x1cb>
c000edb6:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000edbb:	e9 8a fe ff ff       	jmp    c000ec4a <Computer::displayFeatures()+0x1a8>
c000edc0:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000edc5:	e9 5d fe ff ff       	jmp    c000ec27 <Computer::displayFeatures()+0x185>
c000edca:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000edcf:	e9 30 fe ff ff       	jmp    c000ec04 <Computer::displayFeatures()+0x162>
c000edd4:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000edd9:	e9 e0 fd ff ff       	jmp    c000ebbe <Computer::displayFeatures()+0x11c>
c000edde:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c000ede3:	e9 ee fe ff ff       	jmp    c000ecd6 <Computer::displayFeatures()+0x234>

c000ede8 <Computer::rdmsr(unsigned int)>:
c000ede8:	83 ec 0c             	sub    esp,0xc
c000edeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edef:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edf6:	74 0a                	je     c000ee02 <Computer::rdmsr(unsigned int)+0x1a>
c000edf8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edfc:	0f 32                	rdmsr  
c000edfe:	83 c4 0c             	add    esp,0xc
c000ee01:	c3                   	ret    
c000ee02:	83 ec 0c             	sub    esp,0xc
c000ee05:	68 7e a1 02 c0       	push   0xc002a17e
c000ee0a:	e8 c6 b7 00 00       	call   c001a5d5 <Krnl::panic(char const*)>
c000ee0f:	83 c4 10             	add    esp,0x10
c000ee12:	eb e4                	jmp    c000edf8 <Computer::rdmsr(unsigned int)+0x10>

c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee14:	57                   	push   edi
c000ee15:	56                   	push   esi
c000ee16:	52                   	push   edx
c000ee17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee1b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee1f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee23:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee2a:	74 0e                	je     c000ee3a <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee2c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee30:	89 f0                	mov    eax,esi
c000ee32:	89 fa                	mov    edx,edi
c000ee34:	0f 30                	wrmsr  
c000ee36:	58                   	pop    eax
c000ee37:	5e                   	pop    esi
c000ee38:	5f                   	pop    edi
c000ee39:	c3                   	ret    
c000ee3a:	83 ec 0c             	sub    esp,0xc
c000ee3d:	68 84 a1 02 c0       	push   0xc002a184
c000ee42:	e8 8e b7 00 00       	call   c001a5d5 <Krnl::panic(char const*)>
c000ee47:	83 c4 10             	add    esp,0x10
c000ee4a:	eb e0                	jmp    c000ee2c <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee4c <Computer::nmiEnabled()>:
c000ee4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee50:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee56:	c3                   	ret    
c000ee57:	90                   	nop

c000ee58 <Computer::readCMOS(unsigned char)>:
c000ee58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee5c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee63:	19 c0                	sbb    eax,eax
c000ee65:	83 e0 80             	and    eax,0xffffff80
c000ee68:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee6c:	e6 70                	out    0x70,al
c000ee6e:	e4 71                	in     al,0x71
c000ee70:	c3                   	ret    
c000ee71:	90                   	nop

c000ee72 <Computer::enableNMI(bool)>:
c000ee72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee7a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee80:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee88:	eb ce                	jmp    c000ee58 <Computer::readCMOS(unsigned char)>

c000ee8a <Computer::open(int, int, void*)>:
c000ee8a:	56                   	push   esi
c000ee8b:	53                   	push   ebx
c000ee8c:	83 ec 10             	sub    esp,0x10
c000ee8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee93:	f6 05 e0 e5 02 c0 04 	test   BYTE PTR ds:0xc002e5e0,0x4
c000ee9a:	68 68 12 00 00       	push   0x1268
c000ee9f:	0f 94 05 04 d5 02 c0 	sete   BYTE PTR ds:0xc002d504
c000eea6:	e8 95 09 00 00       	call   c000f840 <malloc>
c000eeab:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeae:	89 c6                	mov    esi,eax
c000eeb0:	e8 0f 93 00 00       	call   c00181c4 <ACPI::ACPI()>
c000eeb5:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eebb:	58                   	pop    eax
c000eebc:	5a                   	pop    edx
c000eebd:	56                   	push   esi
c000eebe:	53                   	push   ebx
c000eebf:	e8 96 54 00 00       	call   c001435a <Device::addChild(Device*)>
c000eec4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eec7:	e8 cc f9 ff ff       	call   c000e898 <Computer::detectFeatures()>
c000eecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecf:	e8 ce fb ff ff       	call   c000eaa2 <Computer::displayFeatures()>
c000eed4:	59                   	pop    ecx
c000eed5:	5e                   	pop    esi
c000eed6:	6a 01                	push   0x1
c000eed8:	53                   	push   ebx
c000eed9:	e8 94 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000eede:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eee5:	e8 56 09 00 00       	call   c000f840 <malloc>
c000eeea:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeed:	89 c6                	mov    esi,eax
c000eeef:	e8 b8 9e 00 00       	call   c0018dac <CPU::CPU()>
c000eef4:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eefa:	58                   	pop    eax
c000eefb:	5a                   	pop    edx
c000eefc:	56                   	push   esi
c000eefd:	53                   	push   ebx
c000eefe:	e8 57 54 00 00       	call   c001435a <Device::addChild(Device*)>
c000ef03:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef09:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef0f:	6a 00                	push   0x0
c000ef11:	6a 00                	push   0x0
c000ef13:	50                   	push   eax
c000ef14:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef17:	83 c4 20             	add    esp,0x20
c000ef1a:	e8 c1 59 00 00       	call   c00148e0 <setupFPU()>
c000ef1f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef25:	85 c0                	test   eax,eax
c000ef27:	74 1f                	je     c000ef48 <Computer::open(int, int, void*)+0xbe>
c000ef29:	83 ec 08             	sub    esp,0x8
c000ef2c:	50                   	push   eax
c000ef2d:	53                   	push   ebx
c000ef2e:	e8 27 54 00 00       	call   c001435a <Device::addChild(Device*)>
c000ef33:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef39:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef3b:	6a 00                	push   0x0
c000ef3d:	6a 00                	push   0x0
c000ef3f:	6a 00                	push   0x0
c000ef41:	50                   	push   eax
c000ef42:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef45:	83 c4 20             	add    esp,0x20
c000ef48:	83 ec 0c             	sub    esp,0xc
c000ef4b:	68 4a e6 00 c0       	push   0xc000e64a
c000ef50:	e8 d7 f0 00 00       	call   c001e02c <setupMultitasking(void (*)())>
c000ef55:	83 c4 14             	add    esp,0x14
c000ef58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef5d:	5b                   	pop    ebx
c000ef5e:	5e                   	pop    esi
c000ef5f:	c3                   	ret    

c000ef60 <Computer::disableNMI()>:
c000ef60:	6a 00                	push   0x0
c000ef62:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef66:	e8 07 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000ef6b:	58                   	pop    eax
c000ef6c:	5a                   	pop    edx
c000ef6d:	c3                   	ret    

c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef72:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef79:	19 c0                	sbb    eax,eax
c000ef7b:	83 e0 80             	and    eax,0xffffff80
c000ef7e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef82:	e6 70                	out    0x70,al
c000ef84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef88:	e6 71                	out    0x71,al
c000ef8a:	c3                   	ret    
c000ef8b:	90                   	nop

c000ef8c <Computer::handleNMI()>:
c000ef8c:	56                   	push   esi
c000ef8d:	53                   	push   ebx
c000ef8e:	83 ec 10             	sub    esp,0x10
c000ef91:	e4 92                	in     al,0x92
c000ef93:	89 c6                	mov    esi,eax
c000ef95:	e4 61                	in     al,0x61
c000ef97:	68 8a a1 02 c0       	push   0xc002a18a
c000ef9c:	88 c3                	mov    bl,al
c000ef9e:	e8 91 3f 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c000efa3:	83 c4 10             	add    esp,0x10
c000efa6:	83 e6 10             	and    esi,0x10
c000efa9:	75 0d                	jne    c000efb8 <Computer::handleNMI()+0x2c>
c000efab:	f6 c3 40             	test   bl,0x40
c000efae:	75 1d                	jne    c000efcd <Computer::handleNMI()+0x41>
c000efb0:	84 db                	test   bl,bl
c000efb2:	78 2d                	js     c000efe1 <Computer::handleNMI()+0x55>
c000efb4:	58                   	pop    eax
c000efb5:	5b                   	pop    ebx
c000efb6:	5e                   	pop    esi
c000efb7:	c3                   	ret    
c000efb8:	83 ec 0c             	sub    esp,0xc
c000efbb:	68 9b a1 02 c0       	push   0xc002a19b
c000efc0:	e8 10 b6 00 00       	call   c001a5d5 <Krnl::panic(char const*)>
c000efc5:	83 c4 10             	add    esp,0x10
c000efc8:	f6 c3 40             	test   bl,0x40
c000efcb:	74 e3                	je     c000efb0 <Computer::handleNMI()+0x24>
c000efcd:	83 ec 0c             	sub    esp,0xc
c000efd0:	68 a8 a1 02 c0       	push   0xc002a1a8
c000efd5:	e8 fb b5 00 00       	call   c001a5d5 <Krnl::panic(char const*)>
c000efda:	83 c4 10             	add    esp,0x10
c000efdd:	84 db                	test   bl,bl
c000efdf:	79 d3                	jns    c000efb4 <Computer::handleNMI()+0x28>
c000efe1:	c7 44 24 10 b2 a1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a1b2
c000efe9:	5a                   	pop    edx
c000efea:	5b                   	pop    ebx
c000efeb:	5e                   	pop    esi
c000efec:	e9 e4 b5 00 00       	jmp    c001a5d5 <Krnl::panic(char const*)>
c000eff1:	90                   	nop

c000eff2 <Computer::setDiskActivityLight(int, bool)>:
c000eff2:	56                   	push   esi
c000eff3:	53                   	push   ebx
c000eff4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eff8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000effd:	77 1b                	ja     c000f01a <Computer::setDiskActivityLight(int, bool)+0x28>
c000efff:	e4 92                	in     al,0x92
c000f001:	bb 40 00 00 00       	mov    ebx,0x40
c000f006:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f00a:	89 da                	mov    edx,ebx
c000f00c:	d3 e2                	shl    edx,cl
c000f00e:	89 f1                	mov    ecx,esi
c000f010:	f7 d2                	not    edx
c000f012:	d3 e3                	shl    ebx,cl
c000f014:	21 d0                	and    eax,edx
c000f016:	09 d8                	or     eax,ebx
c000f018:	e6 92                	out    0x92,al
c000f01a:	5b                   	pop    ebx
c000f01b:	5e                   	pop    esi
c000f01c:	c3                   	ret    
c000f01d:	90                   	nop

c000f01e <GDTEntry::setBase(unsigned int)>:
c000f01e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f022:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f026:	89 c1                	mov    ecx,eax
c000f028:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f02c:	c1 e9 10             	shr    ecx,0x10
c000f02f:	c1 e8 18             	shr    eax,0x18
c000f032:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f035:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f038:	c3                   	ret    
c000f039:	90                   	nop

c000f03a <GDTEntry::setLimit(unsigned int)>:
c000f03a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f03e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f042:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f045:	66 89 01             	mov    WORD PTR [ecx],ax
c000f048:	83 e2 f0             	and    edx,0xfffffff0
c000f04b:	c1 e8 10             	shr    eax,0x10
c000f04e:	83 e0 0f             	and    eax,0xf
c000f051:	09 d0                	or     eax,edx
c000f053:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f056:	c3                   	ret    
c000f057:	90                   	nop

c000f058 <GDT::GDT()>:
c000f058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f05c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f066:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f06c:	90                   	nop
c000f06d:	c3                   	ret    

c000f06e <GDT::addEntry(GDTEntry)>:
c000f06e:	53                   	push   ebx
c000f06f:	83 ec 0c             	sub    esp,0xc
c000f072:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f076:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f078:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f07f:	52                   	push   edx
c000f080:	50                   	push   eax
c000f081:	68 ec a1 02 c0       	push   0xc002a1ec
c000f086:	e8 a9 3e 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c000f08b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f08d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f091:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f095:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f099:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f09d:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a0:	c1 e0 03             	shl    eax,0x3
c000f0a3:	89 13                	mov    DWORD PTR [ebx],edx
c000f0a5:	83 c4 18             	add    esp,0x18
c000f0a8:	5b                   	pop    ebx
c000f0a9:	c3                   	ret    

c000f0aa <GDT::getNumberOfEntries()>:
c000f0aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b0:	c3                   	ret    
c000f0b1:	90                   	nop

c000f0b2 <GDT::flush()>:
c000f0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0b8:	83 c0 04             	add    eax,0x4
c000f0bb:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0c2:	a3 d2 e5 02 c0       	mov    ds:0xc002e5d2,eax
c000f0c7:	66 89 15 d0 e5 02 c0 	mov    WORD PTR ds:0xc002e5d0,dx
c000f0ce:	e9 75 13 ff ff       	jmp    c0000448 <loadGDT>
c000f0d3:	90                   	nop

c000f0d4 <GDT::setup()>:
c000f0d4:	55                   	push   ebp
c000f0d5:	57                   	push   edi
c000f0d6:	56                   	push   esi
c000f0d7:	53                   	push   ebx
c000f0d8:	83 ec 3c             	sub    esp,0x3c
c000f0db:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0df:	6a 00                	push   0x0
c000f0e1:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0e5:	53                   	push   ebx
c000f0e6:	e8 33 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f0eb:	6a 00                	push   0x0
c000f0ed:	53                   	push   ebx
c000f0ee:	e8 47 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f0f3:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f0fb:	6a 00                	push   0x0
c000f0fd:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f101:	53                   	push   ebx
c000f102:	e8 17 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f107:	68 ff ff ff 00       	push   0xffffff
c000f10c:	53                   	push   ebx
c000f10d:	e8 28 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f112:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f116:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f11b:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f120:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f124:	83 c4 20             	add    esp,0x20
c000f127:	6a 00                	push   0x0
c000f129:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f12d:	53                   	push   ebx
c000f12e:	e8 eb fe ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f133:	68 ff ff ff 00       	push   0xffffff
c000f138:	53                   	push   ebx
c000f139:	e8 fc fe ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f13e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f142:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f146:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f14a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f14e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f152:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f157:	0d 00 92 c0 00       	or     eax,0xc09200
c000f15c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f160:	89 d8                	mov    eax,ebx
c000f162:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f166:	80 cc 60             	or     ah,0x60
c000f169:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f16d:	83 c4 0c             	add    esp,0xc
c000f170:	89 f8                	mov    eax,edi
c000f172:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f176:	80 cc 60             	or     ah,0x60
c000f179:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f17d:	89 c7                	mov    edi,eax
c000f17f:	55                   	push   ebp
c000f180:	e8 e9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f185:	83 c4 0c             	add    esp,0xc
c000f188:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f18c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f190:	55                   	push   ebp
c000f191:	e8 d8 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f196:	83 c4 0c             	add    esp,0xc
c000f199:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f19d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a1:	55                   	push   ebp
c000f1a2:	e8 c7 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1a7:	83 c4 0c             	add    esp,0xc
c000f1aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1b2:	53                   	push   ebx
c000f1b3:	51                   	push   ecx
c000f1b4:	55                   	push   ebp
c000f1b5:	e8 b4 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1ba:	83 c4 0c             	add    esp,0xc
c000f1bd:	57                   	push   edi
c000f1be:	56                   	push   esi
c000f1bf:	55                   	push   ebp
c000f1c0:	e8 a9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1c8:	e8 e5 fe ff ff       	call   c000f0b2 <GDT::flush()>
c000f1cd:	83 c4 4c             	add    esp,0x4c
c000f1d0:	5b                   	pop    ebx
c000f1d1:	5e                   	pop    esi
c000f1d2:	5f                   	pop    edi
c000f1d3:	5d                   	pop    ebp
c000f1d4:	c3                   	ret    

c000f1d5 <idleFunction(void*)>:
c000f1d5:	53                   	push   ebx
c000f1d6:	83 ec 08             	sub    esp,0x8
c000f1d9:	e8 1e ec 00 00       	call   c001ddfc <unlockScheduler()>
c000f1de:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c000f1e3:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1e9:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1f0:	74 3c                	je     c000f22e <idleFunction(void*)+0x59>
c000f1f2:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f1f9:	74 33                	je     c000f22e <idleFunction(void*)+0x59>
c000f1fb:	31 db                	xor    ebx,ebx
c000f1fd:	52                   	push   edx
c000f1fe:	52                   	push   edx
c000f1ff:	68 e1 00 00 00       	push   0xe1
c000f204:	50                   	push   eax
c000f205:	e8 de fb ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c000f20a:	53                   	push   ebx
c000f20b:	83 e0 02             	and    eax,0x2
c000f20e:	50                   	push   eax
c000f20f:	68 e1 00 00 00       	push   0xe1
c000f214:	ff 35 c8 e5 02 c0    	push   DWORD PTR ds:0xc002e5c8
c000f21a:	e8 f5 fb ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f21f:	83 c4 20             	add    esp,0x20
c000f222:	e8 58 10 ff ff       	call   c000027f <doTPAUSE>
c000f227:	e8 b4 94 01 00       	call   c00286e0 <idleCommon()>
c000f22c:	eb f4                	jmp    c000f222 <idleFunction(void*)+0x4d>
c000f22e:	fb                   	sti    
c000f22f:	f4                   	hlt    
c000f230:	e8 ab 94 01 00       	call   c00286e0 <idleCommon()>
c000f235:	eb f7                	jmp    c000f22e <idleFunction(void*)+0x59>
c000f237:	90                   	nop

c000f238 <IDTEntry::IDTEntry(bool)>:
c000f238:	83 ec 04             	sub    esp,0x4
c000f23b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f23f:	88 04 24             	mov    BYTE PTR [esp],al
c000f242:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f246:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f24c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f250:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f258:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f25b:	83 e2 f0             	and    edx,0xfffffff0
c000f25e:	83 ca 0e             	or     edx,0xe
c000f261:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f264:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f268:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f26b:	83 e2 ef             	and    edx,0xffffffef
c000f26e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f271:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f275:	74 04                	je     c000f27b <IDTEntry::IDTEntry(bool)+0x43>
c000f277:	b2 03                	mov    dl,0x3
c000f279:	eb 02                	jmp    c000f27d <IDTEntry::IDTEntry(bool)+0x45>
c000f27b:	b2 00                	mov    dl,0x0
c000f27d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f281:	83 e2 03             	and    edx,0x3
c000f284:	88 d1                	mov    cl,dl
c000f286:	c1 e1 05             	shl    ecx,0x5
c000f289:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f28c:	83 e2 9f             	and    edx,0xffffff9f
c000f28f:	09 ca                	or     edx,ecx
c000f291:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f29b:	83 ca 80             	or     edx,0xffffff80
c000f29e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2a1:	90                   	nop
c000f2a2:	83 c4 04             	add    esp,0x4
c000f2a5:	c3                   	ret    

c000f2a6 <IDTEntry::setOffset(unsigned int)>:
c000f2a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ae:	66 89 02             	mov    WORD PTR [edx],ax
c000f2b1:	c1 e8 10             	shr    eax,0x10
c000f2b4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2b8:	c3                   	ret    
c000f2b9:	90                   	nop

c000f2ba <IDT::IDT()>:
c000f2ba:	90                   	nop
c000f2bb:	c3                   	ret    

c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c0:	83 c0 30             	add    eax,0x30
c000f2c3:	c3                   	ret    

c000f2c4 <IDT::addEntry(IDTEntry, int)>:
c000f2c4:	53                   	push   ebx
c000f2c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2d5:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2d8:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2dc:	5b                   	pop    ebx
c000f2dd:	c3                   	ret    

c000f2de <IDT::addEntry(int, void (*)(), bool)>:
c000f2de:	53                   	push   ebx
c000f2df:	83 ec 10             	sub    esp,0x10
c000f2e2:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2e7:	50                   	push   eax
c000f2e8:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2ec:	53                   	push   ebx
c000f2ed:	e8 46 ff ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f2f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2f6:	53                   	push   ebx
c000f2f7:	e8 aa ff ff ff       	call   c000f2a6 <IDTEntry::setOffset(unsigned int)>
c000f2fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f300:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f304:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f30c:	e8 b3 ff ff ff       	call   c000f2c4 <IDT::addEntry(IDTEntry, int)>
c000f311:	83 c4 30             	add    esp,0x30
c000f314:	5b                   	pop    ebx
c000f315:	c3                   	ret    

c000f316 <IDT::flush()>:
c000f316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f31a:	66 c7 05 d8 e5 02 c0 ff 07 	mov    WORD PTR ds:0xc002e5d8,0x7ff
c000f323:	a3 da e5 02 c0       	mov    ds:0xc002e5da,eax
c000f328:	0f 01 1d d8 e5 02 c0 	lidtd  ds:0xc002e5d8
c000f32f:	c3                   	ret    

c000f330 <IDT::setup()>:
c000f330:	57                   	push   edi
c000f331:	56                   	push   esi
c000f332:	53                   	push   ebx
c000f333:	83 ec 10             	sub    esp,0x10
c000f336:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f33a:	6a 00                	push   0x0
c000f33c:	68 68 04 00 c0       	push   0xc0000468
c000f341:	6a 00                	push   0x0
c000f343:	53                   	push   ebx
c000f344:	e8 95 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f349:	6a 00                	push   0x0
c000f34b:	68 78 04 00 c0       	push   0xc0000478
c000f350:	6a 01                	push   0x1
c000f352:	53                   	push   ebx
c000f353:	e8 86 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f358:	83 c4 20             	add    esp,0x20
c000f35b:	6a 00                	push   0x0
c000f35d:	68 82 04 00 c0       	push   0xc0000482
c000f362:	6a 02                	push   0x2
c000f364:	53                   	push   ebx
c000f365:	e8 74 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f36a:	6a 00                	push   0x0
c000f36c:	68 8c 04 00 c0       	push   0xc000048c
c000f371:	6a 03                	push   0x3
c000f373:	53                   	push   ebx
c000f374:	e8 65 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f379:	83 c4 20             	add    esp,0x20
c000f37c:	6a 00                	push   0x0
c000f37e:	68 96 04 00 c0       	push   0xc0000496
c000f383:	6a 04                	push   0x4
c000f385:	53                   	push   ebx
c000f386:	e8 53 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f38b:	6a 00                	push   0x0
c000f38d:	68 a0 04 00 c0       	push   0xc00004a0
c000f392:	6a 05                	push   0x5
c000f394:	53                   	push   ebx
c000f395:	e8 44 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f39a:	83 c4 20             	add    esp,0x20
c000f39d:	6a 00                	push   0x0
c000f39f:	68 aa 04 00 c0       	push   0xc00004aa
c000f3a4:	6a 06                	push   0x6
c000f3a6:	53                   	push   ebx
c000f3a7:	e8 32 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ac:	6a 00                	push   0x0
c000f3ae:	68 b4 04 00 c0       	push   0xc00004b4
c000f3b3:	6a 07                	push   0x7
c000f3b5:	53                   	push   ebx
c000f3b6:	e8 23 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3bb:	83 c4 20             	add    esp,0x20
c000f3be:	6a 00                	push   0x0
c000f3c0:	68 be 04 00 c0       	push   0xc00004be
c000f3c5:	6a 08                	push   0x8
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 11 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3cd:	6a 00                	push   0x0
c000f3cf:	68 c6 04 00 c0       	push   0xc00004c6
c000f3d4:	6a 09                	push   0x9
c000f3d6:	53                   	push   ebx
c000f3d7:	e8 02 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3dc:	83 c4 20             	add    esp,0x20
c000f3df:	6a 00                	push   0x0
c000f3e1:	68 d0 04 00 c0       	push   0xc00004d0
c000f3e6:	6a 0a                	push   0xa
c000f3e8:	53                   	push   ebx
c000f3e9:	e8 f0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ee:	6a 00                	push   0x0
c000f3f0:	68 d8 04 00 c0       	push   0xc00004d8
c000f3f5:	6a 0b                	push   0xb
c000f3f7:	53                   	push   ebx
c000f3f8:	e8 e1 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3fd:	83 c4 20             	add    esp,0x20
c000f400:	6a 00                	push   0x0
c000f402:	68 e0 04 00 c0       	push   0xc00004e0
c000f407:	6a 0c                	push   0xc
c000f409:	53                   	push   ebx
c000f40a:	e8 cf fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f40f:	6a 00                	push   0x0
c000f411:	68 e8 04 00 c0       	push   0xc00004e8
c000f416:	6a 0d                	push   0xd
c000f418:	53                   	push   ebx
c000f419:	e8 c0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f41e:	83 c4 20             	add    esp,0x20
c000f421:	6a 00                	push   0x0
c000f423:	68 f0 04 00 c0       	push   0xc00004f0
c000f428:	6a 0e                	push   0xe
c000f42a:	53                   	push   ebx
c000f42b:	e8 ae fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f430:	6a 00                	push   0x0
c000f432:	68 f8 04 00 c0       	push   0xc00004f8
c000f437:	6a 0f                	push   0xf
c000f439:	53                   	push   ebx
c000f43a:	e8 9f fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f43f:	83 c4 20             	add    esp,0x20
c000f442:	6a 00                	push   0x0
c000f444:	68 02 05 00 c0       	push   0xc0000502
c000f449:	6a 10                	push   0x10
c000f44b:	53                   	push   ebx
c000f44c:	e8 8d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f451:	6a 00                	push   0x0
c000f453:	68 0c 05 00 c0       	push   0xc000050c
c000f458:	6a 11                	push   0x11
c000f45a:	53                   	push   ebx
c000f45b:	e8 7e fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f460:	83 c4 20             	add    esp,0x20
c000f463:	6a 00                	push   0x0
c000f465:	68 16 05 00 c0       	push   0xc0000516
c000f46a:	6a 12                	push   0x12
c000f46c:	53                   	push   ebx
c000f46d:	e8 6c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f472:	6a 01                	push   0x1
c000f474:	68 b0 05 00 c0       	push   0xc00005b0
c000f479:	6a 60                	push   0x60
c000f47b:	53                   	push   ebx
c000f47c:	e8 5d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f481:	83 c4 20             	add    esp,0x20
c000f484:	6a 00                	push   0x0
c000f486:	68 b7 05 00 c0       	push   0xc00005b7
c000f48b:	6a 20                	push   0x20
c000f48d:	53                   	push   ebx
c000f48e:	e8 4b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f493:	6a 00                	push   0x0
c000f495:	68 a2 05 00 c0       	push   0xc00005a2
c000f49a:	6a 21                	push   0x21
c000f49c:	53                   	push   ebx
c000f49d:	e8 3c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4a2:	83 c4 20             	add    esp,0x20
c000f4a5:	6a 00                	push   0x0
c000f4a7:	68 a9 05 00 c0       	push   0xc00005a9
c000f4ac:	6a 22                	push   0x22
c000f4ae:	53                   	push   ebx
c000f4af:	e8 2a fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4b4:	6a 00                	push   0x0
c000f4b6:	68 20 05 00 c0       	push   0xc0000520
c000f4bb:	6a 23                	push   0x23
c000f4bd:	53                   	push   ebx
c000f4be:	e8 1b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4c3:	83 c4 20             	add    esp,0x20
c000f4c6:	6a 00                	push   0x0
c000f4c8:	68 2a 05 00 c0       	push   0xc000052a
c000f4cd:	6a 24                	push   0x24
c000f4cf:	53                   	push   ebx
c000f4d0:	e8 09 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4d5:	6a 00                	push   0x0
c000f4d7:	68 34 05 00 c0       	push   0xc0000534
c000f4dc:	6a 25                	push   0x25
c000f4de:	53                   	push   ebx
c000f4df:	e8 fa fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4e4:	83 c4 20             	add    esp,0x20
c000f4e7:	6a 00                	push   0x0
c000f4e9:	68 3e 05 00 c0       	push   0xc000053e
c000f4ee:	6a 26                	push   0x26
c000f4f0:	53                   	push   ebx
c000f4f1:	e8 e8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4f6:	6a 00                	push   0x0
c000f4f8:	68 48 05 00 c0       	push   0xc0000548
c000f4fd:	6a 27                	push   0x27
c000f4ff:	53                   	push   ebx
c000f500:	e8 d9 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f505:	83 c4 20             	add    esp,0x20
c000f508:	6a 00                	push   0x0
c000f50a:	68 52 05 00 c0       	push   0xc0000552
c000f50f:	6a 28                	push   0x28
c000f511:	53                   	push   ebx
c000f512:	e8 c7 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f517:	6a 00                	push   0x0
c000f519:	68 5c 05 00 c0       	push   0xc000055c
c000f51e:	6a 29                	push   0x29
c000f520:	53                   	push   ebx
c000f521:	e8 b8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f526:	83 c4 20             	add    esp,0x20
c000f529:	6a 00                	push   0x0
c000f52b:	68 66 05 00 c0       	push   0xc0000566
c000f530:	6a 2a                	push   0x2a
c000f532:	53                   	push   ebx
c000f533:	e8 a6 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f538:	6a 00                	push   0x0
c000f53a:	68 70 05 00 c0       	push   0xc0000570
c000f53f:	6a 2b                	push   0x2b
c000f541:	53                   	push   ebx
c000f542:	e8 97 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f547:	83 c4 20             	add    esp,0x20
c000f54a:	6a 00                	push   0x0
c000f54c:	68 7a 05 00 c0       	push   0xc000057a
c000f551:	6a 2c                	push   0x2c
c000f553:	53                   	push   ebx
c000f554:	e8 85 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f559:	6a 00                	push   0x0
c000f55b:	68 84 05 00 c0       	push   0xc0000584
c000f560:	6a 2d                	push   0x2d
c000f562:	53                   	push   ebx
c000f563:	e8 76 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f568:	83 c4 20             	add    esp,0x20
c000f56b:	6a 00                	push   0x0
c000f56d:	68 8e 05 00 c0       	push   0xc000058e
c000f572:	6a 2e                	push   0x2e
c000f574:	53                   	push   ebx
c000f575:	e8 64 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f57a:	6a 00                	push   0x0
c000f57c:	68 98 05 00 c0       	push   0xc0000598
c000f581:	6a 2f                	push   0x2f
c000f583:	53                   	push   ebx
c000f584:	e8 55 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f589:	83 c4 20             	add    esp,0x20
c000f58c:	6a 00                	push   0x0
c000f58e:	68 ed 05 00 c0       	push   0xc00005ed
c000f593:	6a 30                	push   0x30
c000f595:	53                   	push   ebx
c000f596:	e8 43 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f59b:	6a 00                	push   0x0
c000f59d:	68 f7 05 00 c0       	push   0xc00005f7
c000f5a2:	6a 31                	push   0x31
c000f5a4:	53                   	push   ebx
c000f5a5:	e8 34 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5aa:	83 c4 20             	add    esp,0x20
c000f5ad:	6a 00                	push   0x0
c000f5af:	68 01 06 00 c0       	push   0xc0000601
c000f5b4:	6a 32                	push   0x32
c000f5b6:	53                   	push   ebx
c000f5b7:	e8 22 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5bc:	6a 00                	push   0x0
c000f5be:	68 0b 06 00 c0       	push   0xc000060b
c000f5c3:	6a 33                	push   0x33
c000f5c5:	53                   	push   ebx
c000f5c6:	e8 13 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5cb:	83 c4 20             	add    esp,0x20
c000f5ce:	6a 00                	push   0x0
c000f5d0:	68 15 06 00 c0       	push   0xc0000615
c000f5d5:	6a 34                	push   0x34
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 01 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5dd:	6a 00                	push   0x0
c000f5df:	68 1f 06 00 c0       	push   0xc000061f
c000f5e4:	6a 35                	push   0x35
c000f5e6:	53                   	push   ebx
c000f5e7:	e8 f2 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5ec:	83 c4 20             	add    esp,0x20
c000f5ef:	6a 00                	push   0x0
c000f5f1:	68 29 06 00 c0       	push   0xc0000629
c000f5f6:	6a 36                	push   0x36
c000f5f8:	53                   	push   ebx
c000f5f9:	e8 e0 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5fe:	6a 00                	push   0x0
c000f600:	68 33 06 00 c0       	push   0xc0000633
c000f605:	6a 37                	push   0x37
c000f607:	53                   	push   ebx
c000f608:	e8 d1 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f60d:	83 c4 20             	add    esp,0x20
c000f610:	e8 11 28 00 00       	call   c0011e26 <Virt::getAKernelVAS()>
c000f615:	52                   	push   edx
c000f616:	6a 03                	push   0x3
c000f618:	6a 02                	push   0x2
c000f61a:	50                   	push   eax
c000f61b:	e8 42 2e 00 00       	call   c0012462 <VAS::allocatePages(int, int)>
c000f620:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f627:	89 c6                	mov    esi,eax
c000f629:	e8 12 02 00 00       	call   c000f840 <malloc>
c000f62e:	81 c6 00 20 00 00    	add    esi,0x2000
c000f634:	89 04 24             	mov    DWORD PTR [esp],eax
c000f637:	89 c7                	mov    edi,eax
c000f639:	e8 7e 1e 00 00       	call   c00114bc <TSS::TSS()>
c000f63e:	83 c4 0c             	add    esp,0xc
c000f641:	68 be 04 00 c0       	push   0xc00004be
c000f646:	56                   	push   esi
c000f647:	57                   	push   edi
c000f648:	e8 af 1e 00 00       	call   c00114fc <TSS::setup(unsigned long, unsigned long)>
c000f64d:	59                   	pop    ecx
c000f64e:	89 c6                	mov    esi,eax
c000f650:	5f                   	pop    edi
c000f651:	6a 00                	push   0x0
c000f653:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f657:	50                   	push   eax
c000f658:	e8 db fb ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f65d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f661:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f666:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f66d:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f673:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f677:	80 ce 05             	or     dh,0x5
c000f67a:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f67d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f681:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f685:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f688:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f68b:	e8 86 fc ff ff       	call   c000f316 <IDT::flush()>
c000f690:	83 c4 20             	add    esp,0x20
c000f693:	5b                   	pop    ebx
c000f694:	5e                   	pop    esi
c000f695:	5f                   	pop    edi
c000f696:	c3                   	ret    

c000f697 <sbrk>:
c000f697:	55                   	push   ebp
c000f698:	57                   	push   edi
c000f699:	56                   	push   esi
c000f69a:	53                   	push   ebx
c000f69b:	83 ec 1c             	sub    esp,0x1c
c000f69e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6a2:	85 c0                	test   eax,eax
c000f6a4:	74 3e                	je     c000f6e4 <sbrk+0x4d>
c000f6a6:	78 43                	js     c000f6eb <sbrk+0x54>
c000f6a8:	8b 15 c8 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5c8
c000f6ae:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6b4:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6ba:	83 e2 01             	and    edx,0x1
c000f6bd:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6c1:	8b 0d f4 d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d4f4
c000f6c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6cb:	05 ff 0f 00 00       	add    eax,0xfff
c000f6d0:	89 c2                	mov    edx,eax
c000f6d2:	78 2f                	js     c000f703 <sbrk+0x6c>
c000f6d4:	c1 fa 0c             	sar    edx,0xc
c000f6d7:	89 d7                	mov    edi,edx
c000f6d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6dd:	be 00 00 00 00       	mov    esi,0x0
c000f6e2:	eb 36                	jmp    c000f71a <sbrk+0x83>
c000f6e4:	a1 f4 d4 02 c0       	mov    eax,ds:0xc002d4f4
c000f6e9:	eb 74                	jmp    c000f75f <sbrk+0xc8>
c000f6eb:	83 ec 08             	sub    esp,0x8
c000f6ee:	50                   	push   eax
c000f6ef:	68 08 a2 02 c0       	push   0xc002a208
c000f6f4:	e8 3b 38 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c000f6f9:	83 c4 10             	add    esp,0x10
c000f6fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f701:	eb 5c                	jmp    c000f75f <sbrk+0xc8>
c000f703:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f709:	eb c9                	jmp    c000f6d4 <sbrk+0x3d>
c000f70b:	81 05 f4 d4 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d4f4,0x1000
c000f715:	46                   	inc    esi
c000f716:	39 f7                	cmp    edi,esi
c000f718:	74 34                	je     c000f74e <sbrk+0xb7>
c000f71a:	e8 07 27 00 00       	call   c0011e26 <Virt::getAKernelVAS()>
c000f71f:	89 c3                	mov    ebx,eax
c000f721:	8b 2d f4 d4 02 c0    	mov    ebp,DWORD PTR ds:0xc002d4f4
c000f727:	e8 b6 07 00 00       	call   c000fee2 <Phys::allocatePage()>
c000f72c:	68 01 04 00 00       	push   0x401
c000f731:	55                   	push   ebp
c000f732:	50                   	push   eax
c000f733:	53                   	push   ebx
c000f734:	e8 29 2c 00 00       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f739:	83 c4 10             	add    esp,0x10
c000f73c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f741:	74 c8                	je     c000f70b <sbrk+0x74>
c000f743:	8b 1d f4 d4 02 c0    	mov    ebx,DWORD PTR ds:0xc002d4f4
c000f749:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f74c:	eb bd                	jmp    c000f70b <sbrk+0x74>
c000f74e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f753:	75 12                	jne    c000f767 <sbrk+0xd0>
c000f755:	0f 20 d8             	mov    eax,cr3
c000f758:	0f 22 d8             	mov    cr3,eax
c000f75b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f75f:	83 c4 1c             	add    esp,0x1c
c000f762:	5b                   	pop    ebx
c000f763:	5e                   	pop    esi
c000f764:	5f                   	pop    edi
c000f765:	5d                   	pop    ebp
c000f766:	c3                   	ret    
c000f767:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f76b:	89 cb                	mov    ebx,ecx
c000f76d:	c1 eb 0a             	shr    ebx,0xa
c000f770:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f776:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f77c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f780:	c1 e0 0c             	shl    eax,0xc
c000f783:	01 c8                	add    eax,ecx
c000f785:	c1 e8 0a             	shr    eax,0xa
c000f788:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f78d:	2d 00 00 40 00       	sub    eax,0x400000
c000f792:	39 c3                	cmp    ebx,eax
c000f794:	77 c5                	ja     c000f75b <sbrk+0xc4>
c000f796:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f799:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f79f:	39 d8                	cmp    eax,ebx
c000f7a1:	73 f3                	jae    c000f796 <sbrk+0xff>
c000f7a3:	eb b6                	jmp    c000f75b <sbrk+0xc4>

c000f7a5 <mmap>:
c000f7a5:	83 ec 18             	sub    esp,0x18
c000f7a8:	68 38 a2 02 c0       	push   0xc002a238
c000f7ad:	e8 23 ae 00 00       	call   c001a5d5 <Krnl::panic(char const*)>
c000f7b2:	b8 00 00 00 00       	mov    eax,0x0
c000f7b7:	83 c4 1c             	add    esp,0x1c
c000f7ba:	c3                   	ret    

c000f7bb <munmap>:
c000f7bb:	83 ec 18             	sub    esp,0x18
c000f7be:	68 3d a2 02 c0       	push   0xc002a23d
c000f7c3:	e8 0d ae 00 00       	call   c001a5d5 <Krnl::panic(char const*)>
c000f7c8:	b8 00 00 00 00       	mov    eax,0x0
c000f7cd:	83 c4 1c             	add    esp,0x1c
c000f7d0:	c3                   	ret    

c000f7d1 <liballoc_lock()>:
c000f7d1:	83 ec 0c             	sub    esp,0xc
c000f7d4:	e8 21 e6 00 00       	call   c001ddfa <lockScheduler()>
c000f7d9:	b8 00 00 00 00       	mov    eax,0x0
c000f7de:	83 c4 0c             	add    esp,0xc
c000f7e1:	c3                   	ret    

c000f7e2 <liballoc_unlock()>:
c000f7e2:	83 ec 0c             	sub    esp,0xc
c000f7e5:	e8 12 e6 00 00       	call   c001ddfc <unlockScheduler()>
c000f7ea:	b8 00 00 00 00       	mov    eax,0x0
c000f7ef:	83 c4 0c             	add    esp,0xc
c000f7f2:	c3                   	ret    

c000f7f3 <liballoc_alloc(int)>:
c000f7f3:	83 ec 0c             	sub    esp,0xc
c000f7f6:	e8 2b 26 00 00       	call   c0011e26 <Virt::getAKernelVAS()>
c000f7fb:	83 ec 04             	sub    esp,0x4
c000f7fe:	6a 01                	push   0x1
c000f800:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f804:	50                   	push   eax
c000f805:	e8 58 2c 00 00       	call   c0012462 <VAS::allocatePages(int, int)>
c000f80a:	83 c4 1c             	add    esp,0x1c
c000f80d:	c3                   	ret    

c000f80e <liballoc_free(void*, int)>:
c000f80e:	83 ec 0c             	sub    esp,0xc
c000f811:	e8 10 26 00 00       	call   c0011e26 <Virt::getAKernelVAS()>
c000f816:	83 ec 08             	sub    esp,0x8
c000f819:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f81d:	50                   	push   eax
c000f81e:	e8 fb 28 00 00       	call   c001211e <VAS::freeAllocatedPages(unsigned long)>
c000f823:	b8 00 00 00 00       	mov    eax,0x0
c000f828:	83 c4 1c             	add    esp,0x1c
c000f82b:	c3                   	ret    

c000f82c <realloc>:
c000f82c:	83 ec 14             	sub    esp,0x14
c000f82f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f833:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f837:	e8 18 1e ff ff       	call   c0001654 <dlrealloc>
c000f83c:	83 c4 1c             	add    esp,0x1c
c000f83f:	c3                   	ret    

c000f840 <malloc>:
c000f840:	83 ec 18             	sub    esp,0x18
c000f843:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f847:	e8 cb 18 ff ff       	call   c0001117 <dlmalloc>
c000f84c:	83 c4 1c             	add    esp,0x1c
c000f84f:	c3                   	ret    

c000f850 <free>:
c000f850:	83 ec 18             	sub    esp,0x18
c000f853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f857:	e8 60 15 ff ff       	call   c0000dbc <dlfree>
c000f85c:	83 c4 1c             	add    esp,0x1c
c000f85f:	c3                   	ret    

c000f860 <rfree>:
c000f860:	83 ec 18             	sub    esp,0x18
c000f863:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f867:	e8 50 15 ff ff       	call   c0000dbc <dlfree>
c000f86c:	83 c4 1c             	add    esp,0x1c
c000f86f:	c3                   	ret    

c000f870 <calloc>:
c000f870:	56                   	push   esi
c000f871:	53                   	push   ebx
c000f872:	83 ec 10             	sub    esp,0x10
c000f875:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f879:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f87e:	53                   	push   ebx
c000f87f:	e8 bc ff ff ff       	call   c000f840 <malloc>
c000f884:	89 c6                	mov    esi,eax
c000f886:	83 c4 0c             	add    esp,0xc
c000f889:	53                   	push   ebx
c000f88a:	6a 00                	push   0x0
c000f88c:	50                   	push   eax
c000f88d:	e8 e6 0e ff ff       	call   c0000778 <memset>
c000f892:	89 f0                	mov    eax,esi
c000f894:	83 c4 14             	add    esp,0x14
c000f897:	5b                   	pop    ebx
c000f898:	5e                   	pop    esi
c000f899:	c3                   	ret    

c000f89a <hwTextMode_loadInData(VgaText*)>:
c000f89a:	55                   	push   ebp
c000f89b:	a1 00 d5 02 c0       	mov    eax,ds:0xc002d500
c000f8a0:	57                   	push   edi
c000f8a1:	56                   	push   esi
c000f8a2:	53                   	push   ebx
c000f8a3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8a7:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f8ad:	85 d2                	test   edx,edx
c000f8af:	7e 2f                	jle    c000f8e0 <hwTextMode_loadInData(VgaText*)+0x46>
c000f8b1:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f8b7:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f8ba:	31 f6                	xor    esi,esi
c000f8bc:	29 fd                	sub    ebp,edi
c000f8be:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f8c1:	31 c0                	xor    eax,eax
c000f8c3:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f8c7:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f8cb:	40                   	inc    eax
c000f8cc:	83 f8 50             	cmp    eax,0x50
c000f8cf:	75 f2                	jne    c000f8c3 <hwTextMode_loadInData(VgaText*)+0x29>
c000f8d1:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f8d7:	46                   	inc    esi
c000f8d8:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f8de:	7f de                	jg     c000f8be <hwTextMode_loadInData(VgaText*)+0x24>
c000f8e0:	5b                   	pop    ebx
c000f8e1:	5e                   	pop    esi
c000f8e2:	5f                   	pop    edi
c000f8e3:	5d                   	pop    ebp
c000f8e4:	c3                   	ret    

c000f8e5 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f8e5:	55                   	push   ebp
c000f8e6:	80 3d 60 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e660,0x0
c000f8ed:	57                   	push   edi
c000f8ee:	56                   	push   esi
c000f8ef:	53                   	push   ebx
c000f8f0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8f4:	75 50                	jne    c000f946 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f8f6:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f8fc:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f902:	8b 15 00 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d500
c000f908:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f90c:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f912:	eb 0e                	jmp    c000f922 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f914:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f91a:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f920:	89 da                	mov    edx,ebx
c000f922:	83 e5 0f             	and    ebp,0xf
c000f925:	c1 e0 04             	shl    eax,0x4
c000f928:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f92b:	0f b6 c0             	movzx  eax,al
c000f92e:	41                   	inc    ecx
c000f92f:	09 e8                	or     eax,ebp
c000f931:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f935:	c1 e0 08             	shl    eax,0x8
c000f938:	09 e8                	or     eax,ebp
c000f93a:	39 fb                	cmp    ebx,edi
c000f93c:	66 89 02             	mov    WORD PTR [edx],ax
c000f93f:	75 d3                	jne    c000f914 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f941:	5b                   	pop    ebx
c000f942:	5e                   	pop    esi
c000f943:	5f                   	pop    edi
c000f944:	5d                   	pop    ebp
c000f945:	c3                   	ret    
c000f946:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f950:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f95a:	31 c0                	xor    eax,eax
c000f95c:	bd 02 00 00 00       	mov    ebp,0x2
c000f961:	eb 9f                	jmp    c000f902 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f963 <hwTextMode_showCursor(VgaText*, bool)>:
c000f963:	56                   	push   esi
c000f964:	80 3d 60 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e660,0x0
c000f96b:	53                   	push   ebx
c000f96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f970:	75 39                	jne    c000f9ab <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f972:	84 c0                	test   al,al
c000f974:	74 38                	je     c000f9ae <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f976:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f97b:	b0 0a                	mov    al,0xa
c000f97d:	89 da                	mov    edx,ebx
c000f97f:	ee                   	out    dx,al
c000f980:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f985:	89 ca                	mov    edx,ecx
c000f987:	ec                   	in     al,dx
c000f988:	b2 0f                	mov    dl,0xf
c000f98a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f98e:	83 e0 c0             	and    eax,0xffffffc0
c000f991:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f997:	09 d0                	or     eax,edx
c000f999:	89 ca                	mov    edx,ecx
c000f99b:	ee                   	out    dx,al
c000f99c:	b0 0b                	mov    al,0xb
c000f99e:	89 da                	mov    edx,ebx
c000f9a0:	ee                   	out    dx,al
c000f9a1:	89 ca                	mov    edx,ecx
c000f9a3:	ec                   	in     al,dx
c000f9a4:	83 e0 e0             	and    eax,0xffffffe0
c000f9a7:	83 c8 0f             	or     eax,0xf
c000f9aa:	ee                   	out    dx,al
c000f9ab:	5b                   	pop    ebx
c000f9ac:	5e                   	pop    esi
c000f9ad:	c3                   	ret    
c000f9ae:	b0 0a                	mov    al,0xa
c000f9b0:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9b5:	ee                   	out    dx,al
c000f9b6:	b0 20                	mov    al,0x20
c000f9b8:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9bd:	ee                   	out    dx,al
c000f9be:	5b                   	pop    ebx
c000f9bf:	5e                   	pop    esi
c000f9c0:	c3                   	ret    

c000f9c1 <hwTextMode_update(VgaText*)>:
c000f9c1:	c3                   	ret    

c000f9c2 <hwTextMode_updateCursor(VgaText*)>:
c000f9c2:	56                   	push   esi
c000f9c3:	80 3d 60 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e660,0x0
c000f9ca:	53                   	push   ebx
c000f9cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9cf:	75 3f                	jne    c000fa10 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f9d1:	be d4 03 00 00       	mov    esi,0x3d4
c000f9d6:	b9 19 00 00 00       	mov    ecx,0x19
c000f9db:	89 f2                	mov    edx,esi
c000f9dd:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f9e3:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f9e9:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f9ec:	c1 e1 04             	shl    ecx,0x4
c000f9ef:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f9f5:	b0 0f                	mov    al,0xf
c000f9f7:	ee                   	out    dx,al
c000f9f8:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f9fd:	88 c8                	mov    al,cl
c000f9ff:	89 da                	mov    edx,ebx
c000fa01:	ee                   	out    dx,al
c000fa02:	b0 0e                	mov    al,0xe
c000fa04:	89 f2                	mov    edx,esi
c000fa06:	ee                   	out    dx,al
c000fa07:	89 c8                	mov    eax,ecx
c000fa09:	89 da                	mov    edx,ebx
c000fa0b:	66 c1 e8 08          	shr    ax,0x8
c000fa0f:	ee                   	out    dx,al
c000fa10:	5b                   	pop    ebx
c000fa11:	5e                   	pop    esi
c000fa12:	c3                   	ret    

c000fa13 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa17:	80 3d 60 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e660,0x0
c000fa1e:	75 38                	jne    c000fa58 <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa20:	ba da 03 00 00       	mov    edx,0x3da
c000fa25:	84 c0                	test   al,al
c000fa27:	75 18                	jne    c000fa41 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa29:	ec                   	in     al,dx
c000fa2a:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa2f:	b0 30                	mov    al,0x30
c000fa31:	89 ca                	mov    edx,ecx
c000fa33:	ee                   	out    dx,al
c000fa34:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa39:	ec                   	in     al,dx
c000fa3a:	83 c8 08             	or     eax,0x8
c000fa3d:	89 ca                	mov    edx,ecx
c000fa3f:	ee                   	out    dx,al
c000fa40:	c3                   	ret    
c000fa41:	ec                   	in     al,dx
c000fa42:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa47:	b0 30                	mov    al,0x30
c000fa49:	89 ca                	mov    edx,ecx
c000fa4b:	ee                   	out    dx,al
c000fa4c:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa51:	ec                   	in     al,dx
c000fa52:	83 e0 f7             	and    eax,0xfffffff7
c000fa55:	89 ca                	mov    edx,ecx
c000fa57:	ee                   	out    dx,al
c000fa58:	c3                   	ret    

c000fa59 <hwTextMode_scrollScreen(VgaText*)>:
c000fa59:	55                   	push   ebp
c000fa5a:	57                   	push   edi
c000fa5b:	56                   	push   esi
c000fa5c:	53                   	push   ebx
c000fa5d:	83 ec 1c             	sub    esp,0x1c
c000fa60:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa64:	80 3d 60 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e660,0x0
c000fa6b:	74 14                	je     c000fa81 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000fa6d:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000fa77:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000fa81:	a1 00 d5 02 c0       	mov    eax,ds:0xc002d500
c000fa86:	bd 02 00 00 00       	mov    ebp,0x2
c000fa8b:	05 a0 00 00 00       	add    eax,0xa0
c000fa90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa94:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fa98:	31 c0                	xor    eax,eax
c000fa9a:	eb 0b                	jmp    c000faa7 <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000fa9c:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faa2:	74 57                	je     c000fafb <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000faa4:	43                   	inc    ebx
c000faa5:	89 f0                	mov    eax,esi
c000faa7:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000faad:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fab3:	88 13                	mov    BYTE PTR [ebx],dl
c000fab5:	8d 70 01             	lea    esi,[eax+0x1]
c000fab8:	83 fd 18             	cmp    ebp,0x18
c000fabb:	75 df                	jne    c000fa9c <hwTextMode_scrollScreen(VgaText*)+0x43>
c000fabd:	a8 01                	test   al,0x1
c000fabf:	75 13                	jne    c000fad4 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000fac1:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fac4:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faca:	75 d8                	jne    c000faa4 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000facc:	83 c4 1c             	add    esp,0x1c
c000facf:	5b                   	pop    ebx
c000fad0:	5e                   	pop    esi
c000fad1:	5f                   	pop    edi
c000fad2:	5d                   	pop    ebp
c000fad3:	c3                   	ret    
c000fad4:	83 ec 08             	sub    esp,0x8
c000fad7:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000fade:	50                   	push   eax
c000fadf:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fae3:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000faea:	50                   	push   eax
c000faeb:	e8 9e 0c 00 00       	call   c001078e <VgaText::combineColours(unsigned char, unsigned char)>
c000faf0:	83 c4 10             	add    esp,0x10
c000faf3:	88 07                	mov    BYTE PTR [edi],al
c000faf5:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000faf9:	eb c9                	jmp    c000fac4 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000fafb:	45                   	inc    ebp
c000fafc:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb04:	eb 8e                	jmp    c000fa94 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000fb06 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb06:	57                   	push   edi
c000fb07:	80 3d 60 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e660,0x0
c000fb0e:	56                   	push   esi
c000fb0f:	53                   	push   ebx
c000fb10:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb14:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb18:	75 65                	jne    c000fb7f <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000fb1a:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb1f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb24:	83 ec 08             	sub    esp,0x8
c000fb27:	52                   	push   edx
c000fb28:	50                   	push   eax
c000fb29:	e8 60 0c 00 00       	call   c001078e <VgaText::combineColours(unsigned char, unsigned char)>
c000fb2e:	5a                   	pop    edx
c000fb2f:	0f b6 c0             	movzx  eax,al
c000fb32:	59                   	pop    ecx
c000fb33:	50                   	push   eax
c000fb34:	0f be c3             	movsx  eax,bl
c000fb37:	50                   	push   eax
c000fb38:	e8 f7 0c 00 00       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c000fb3d:	83 c4 10             	add    esp,0x10
c000fb40:	8b 35 00 d5 02 c0    	mov    esi,DWORD PTR ds:0xc002d500
c000fb46:	80 3d 60 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e660,0x0
c000fb4d:	74 07                	je     c000fb56 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb4f:	66 0f be c3          	movsx  ax,bl
c000fb53:	80 cc 02             	or     ah,0x2
c000fb56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb5a:	ba 19 00 00 00       	mov    edx,0x19
c000fb5f:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000fb65:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb68:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb6b:	c1 e1 04             	shl    ecx,0x4
c000fb6e:	c1 e2 04             	shl    edx,0x4
c000fb71:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb75:	01 ca                	add    edx,ecx
c000fb77:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb7b:	5b                   	pop    ebx
c000fb7c:	5e                   	pop    esi
c000fb7d:	5f                   	pop    edi
c000fb7e:	c3                   	ret    
c000fb7f:	b8 02 00 00 00       	mov    eax,0x2
c000fb84:	31 d2                	xor    edx,edx
c000fb86:	eb 9c                	jmp    c000fb24 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb88 <setupTextMode()>:
c000fb88:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fb8d:	83 e0 30             	and    eax,0x30
c000fb90:	66 83 f8 30          	cmp    ax,0x30
c000fb94:	75 11                	jne    c000fba7 <setupTextMode()+0x1f>
c000fb96:	81 2d 00 d5 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002d500,0x8000
c000fba0:	c6 05 60 e6 02 c0 01 	mov    BYTE PTR ds:0xc002e660,0x1
c000fba7:	c7 05 98 e6 02 c0 13 fa 00 c0 	mov    DWORD PTR ds:0xc002e698,0xc000fa13
c000fbb1:	c7 05 84 e6 02 c0 9a f8 00 c0 	mov    DWORD PTR ds:0xc002e684,0xc000f89a
c000fbbb:	c7 05 80 e6 02 c0 e5 f8 00 c0 	mov    DWORD PTR ds:0xc002e680,0xc000f8e5
c000fbc5:	c7 05 8c e6 02 c0 59 fa 00 c0 	mov    DWORD PTR ds:0xc002e68c,0xc000fa59
c000fbcf:	c7 05 94 e6 02 c0 63 f9 00 c0 	mov    DWORD PTR ds:0xc002e694,0xc000f963
c000fbd9:	c7 05 88 e6 02 c0 c1 f9 00 c0 	mov    DWORD PTR ds:0xc002e688,0xc000f9c1
c000fbe3:	c7 05 90 e6 02 c0 c2 f9 00 c0 	mov    DWORD PTR ds:0xc002e690,0xc000f9c2
c000fbed:	c7 05 9c e6 02 c0 06 fb 00 c0 	mov    DWORD PTR ds:0xc002e69c,0xc000fb06
c000fbf7:	c3                   	ret    

c000fbf8 <kernel_main>:
c000fbf8:	57                   	push   edi
c000fbf9:	bf f9 03 00 00       	mov    edi,0x3f9
c000fbfe:	56                   	push   esi
c000fbff:	31 f6                	xor    esi,esi
c000fc01:	53                   	push   ebx
c000fc02:	83 ec 10             	sub    esp,0x10
c000fc05:	e8 de 09 00 00       	call   c00105e8 <installVgaTextImplementation()>
c000fc0a:	e8 79 ff ff ff       	call   c000fb88 <setupTextMode()>
c000fc0f:	89 f0                	mov    eax,esi
c000fc11:	89 fa                	mov    edx,edi
c000fc13:	ee                   	out    dx,al
c000fc14:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc19:	b0 80                	mov    al,0x80
c000fc1b:	89 da                	mov    edx,ebx
c000fc1d:	ee                   	out    dx,al
c000fc1e:	b1 03                	mov    cl,0x3
c000fc20:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc25:	88 c8                	mov    al,cl
c000fc27:	ee                   	out    dx,al
c000fc28:	89 f0                	mov    eax,esi
c000fc2a:	89 fa                	mov    edx,edi
c000fc2c:	ee                   	out    dx,al
c000fc2d:	88 c8                	mov    al,cl
c000fc2f:	89 da                	mov    edx,ebx
c000fc31:	ee                   	out    dx,al
c000fc32:	b0 c7                	mov    al,0xc7
c000fc34:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc39:	ee                   	out    dx,al
c000fc3a:	b0 0b                	mov    al,0xb
c000fc3c:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc41:	ee                   	out    dx,al
c000fc42:	83 ec 0c             	sub    esp,0xc
c000fc45:	68 44 a2 02 c0       	push   0xc002a244
c000fc4a:	e8 e5 32 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c000fc4f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc54:	05 ff 0f 00 00       	add    eax,0xfff
c000fc59:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc5e:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc61:	e8 3d 04 00 00       	call   c00100a3 <Phys::physicalMemorySetup(unsigned int)>
c000fc66:	e8 df 20 00 00       	call   c0011d4a <Virt::virtualMemorySetup()>
c000fc6b:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc71:	83 c4 10             	add    esp,0x10
c000fc74:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc7a:	75 0e                	jne    c000fc8a <kernel_main+0x92>
c000fc7c:	89 d8                	mov    eax,ebx
c000fc7e:	25 48 03 00 00       	and    eax,0x348
c000fc83:	3d 00 03 00 00       	cmp    eax,0x300
c000fc88:	74 10                	je     c000fc9a <kernel_main+0xa2>
c000fc8a:	83 ec 0c             	sub    esp,0xc
c000fc8d:	68 51 bc 02 c0       	push   0xc002bc51
c000fc92:	e8 3e a9 00 00       	call   c001a5d5 <Krnl::panic(char const*)>
c000fc97:	83 c4 10             	add    esp,0x10
c000fc9a:	83 ec 0c             	sub    esp,0xc
c000fc9d:	89 1d e0 e5 02 c0    	mov    DWORD PTR ds:0xc002e5e0,ebx
c000fca3:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000fca7:	53                   	push   ebx
c000fca8:	e8 af 22 00 00       	call   c0011f5c <VAS::VAS()>
c000fcad:	89 1d 48 e7 02 c0    	mov    DWORD PTR ds:0xc002e748,ebx
c000fcb3:	e8 68 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcb8:	c7 04 24 5b a2 02 c0 	mov    DWORD PTR [esp],0xc002a25b
c000fcbf:	e8 70 32 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c000fcc4:	e8 00 21 00 00       	call   c0011dc9 <Virt::swappingSetup()>
c000fcc9:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fcd0:	e8 6b fb ff ff       	call   c000f840 <malloc>
c000fcd5:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcd8:	89 c6                	mov    esi,eax
c000fcda:	e8 5b ea ff ff       	call   c000e73a <Computer::Computer()>
c000fcdf:	58                   	pop    eax
c000fce0:	89 35 c8 e5 02 c0    	mov    DWORD PTR ds:0xc002e5c8,esi
c000fce6:	5a                   	pop    edx
c000fce7:	56                   	push   esi
c000fce8:	68 78 a2 02 c0       	push   0xc002a278
c000fced:	e8 42 32 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c000fcf2:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c000fcf7:	8b 10                	mov    edx,DWORD PTR [eax]
c000fcf9:	6a 00                	push   0x0
c000fcfb:	6a 00                	push   0x0
c000fcfd:	6a 00                	push   0x0
c000fcff:	50                   	push   eax
c000fd00:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fd03:	83 c4 14             	add    esp,0x14
c000fd06:	53                   	push   ebx
c000fd07:	e8 ea 24 00 00       	call   c00121f6 <VAS::~VAS()>
c000fd0c:	c7 04 24 8b a2 02 c0 	mov    DWORD PTR [esp],0xc002a28b
c000fd13:	e8 bd a8 00 00       	call   c001a5d5 <Krnl::panic(char const*)>
c000fd18:	83 c4 20             	add    esp,0x20
c000fd1b:	5b                   	pop    ebx
c000fd1c:	5e                   	pop    esi
c000fd1d:	5f                   	pop    edi
c000fd1e:	c3                   	ret    

c000fd1f <Phys::allocateDMA(unsigned long)>:
c000fd1f:	55                   	push   ebp
c000fd20:	31 d2                	xor    edx,edx
c000fd22:	57                   	push   edi
c000fd23:	31 ed                	xor    ebp,ebp
c000fd25:	56                   	push   esi
c000fd26:	31 c9                	xor    ecx,ecx
c000fd28:	53                   	push   ebx
c000fd29:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd2d:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd33:	31 c0                	xor    eax,eax
c000fd35:	c1 ee 0c             	shr    esi,0xc
c000fd38:	eb 17                	jmp    c000fd51 <Phys::allocateDMA(unsigned long)+0x32>
c000fd3a:	85 c9                	test   ecx,ecx
c000fd3c:	75 04                	jne    c000fd42 <Phys::allocateDMA(unsigned long)+0x23>
c000fd3e:	89 d5                	mov    ebp,edx
c000fd40:	89 d0                	mov    eax,edx
c000fd42:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd45:	39 de                	cmp    esi,ebx
c000fd47:	74 20                	je     c000fd69 <Phys::allocateDMA(unsigned long)+0x4a>
c000fd49:	42                   	inc    edx
c000fd4a:	89 d9                	mov    ecx,ebx
c000fd4c:	83 fa 2f             	cmp    edx,0x2f
c000fd4f:	7f 11                	jg     c000fd62 <Phys::allocateDMA(unsigned long)+0x43>
c000fd51:	80 ba 20 e6 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd19e0],0x0
c000fd58:	74 e0                	je     c000fd3a <Phys::allocateDMA(unsigned long)+0x1b>
c000fd5a:	31 c9                	xor    ecx,ecx
c000fd5c:	42                   	inc    edx
c000fd5d:	83 fa 2f             	cmp    edx,0x2f
c000fd60:	7e ef                	jle    c000fd51 <Phys::allocateDMA(unsigned long)+0x32>
c000fd62:	5b                   	pop    ebx
c000fd63:	31 c0                	xor    eax,eax
c000fd65:	5e                   	pop    esi
c000fd66:	5f                   	pop    edi
c000fd67:	5d                   	pop    ebp
c000fd68:	c3                   	ret    
c000fd69:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd6c:	89 d7                	mov    edi,edx
c000fd6e:	4f                   	dec    edi
c000fd6f:	79 03                	jns    c000fd74 <Phys::allocateDMA(unsigned long)+0x55>
c000fd71:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd74:	c1 ff 04             	sar    edi,0x4
c000fd77:	89 c2                	mov    edx,eax
c000fd79:	c1 fa 04             	sar    edx,0x4
c000fd7c:	39 fa                	cmp    edx,edi
c000fd7e:	75 2f                	jne    c000fdaf <Phys::allocateDMA(unsigned long)+0x90>
c000fd80:	85 db                	test   ebx,ebx
c000fd82:	74 1a                	je     c000fd9e <Phys::allocateDMA(unsigned long)+0x7f>
c000fd84:	be 20 e6 02 c0       	mov    esi,0xc002e620
c000fd89:	8d 90 20 e6 02 c0    	lea    edx,[eax-0x3ffd19e0]
c000fd8f:	f7 d6                	not    esi
c000fd91:	29 c6                	sub    esi,eax
c000fd93:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fd96:	42                   	inc    edx
c000fd97:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fd9a:	39 d9                	cmp    ecx,ebx
c000fd9c:	7f f5                	jg     c000fd93 <Phys::allocateDMA(unsigned long)+0x74>
c000fd9e:	85 ff                	test   edi,edi
c000fda0:	74 13                	je     c000fdb5 <Phys::allocateDMA(unsigned long)+0x96>
c000fda2:	5b                   	pop    ebx
c000fda3:	05 50 20 0c 00       	add    eax,0xc2050
c000fda8:	5e                   	pop    esi
c000fda9:	c1 e0 0c             	shl    eax,0xc
c000fdac:	5f                   	pop    edi
c000fdad:	5d                   	pop    ebp
c000fdae:	c3                   	ret    
c000fdaf:	89 ea                	mov    edx,ebp
c000fdb1:	31 c9                	xor    ecx,ecx
c000fdb3:	eb a7                	jmp    c000fd5c <Phys::allocateDMA(unsigned long)+0x3d>
c000fdb5:	5b                   	pop    ebx
c000fdb6:	c1 e0 0c             	shl    eax,0xc
c000fdb9:	5e                   	pop    esi
c000fdba:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdbf:	5f                   	pop    edi
c000fdc0:	5d                   	pop    ebp
c000fdc1:	c3                   	ret    

c000fdc2 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdc6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdca:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fdd0:	c1 e9 0c             	shr    ecx,0xc
c000fdd3:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fdd8:	76 25                	jbe    c000fdff <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fdda:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fddf:	c1 e8 0c             	shr    eax,0xc
c000fde2:	8d 50 10             	lea    edx,[eax+0x10]
c000fde5:	85 c9                	test   ecx,ecx
c000fde7:	74 15                	je     c000fdfe <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fde9:	8d 82 20 e6 02 c0    	lea    eax,[edx-0x3ffd19e0]
c000fdef:	8d 94 11 20 e6 02 c0 	lea    edx,[ecx+edx*1-0x3ffd19e0]
c000fdf6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fdf9:	40                   	inc    eax
c000fdfa:	39 d0                	cmp    eax,edx
c000fdfc:	75 f8                	jne    c000fdf6 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fdfe:	c3                   	ret    
c000fdff:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe05:	c1 ea 0c             	shr    edx,0xc
c000fe08:	eb db                	jmp    c000fde5 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe0a <Phys::setPageState(unsigned long, bool)>:
c000fe0a:	56                   	push   esi
c000fe0b:	ba 01 00 00 00       	mov    edx,0x1
c000fe10:	53                   	push   ebx
c000fe11:	8b 35 f8 d4 02 c0    	mov    esi,DWORD PTR ds:0xc002d4f8
c000fe17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe1b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe1f:	89 c8                	mov    eax,ecx
c000fe21:	83 e1 07             	and    ecx,0x7
c000fe24:	c1 e8 03             	shr    eax,0x3
c000fe27:	d3 e3                	shl    ebx,cl
c000fe29:	01 c6                	add    esi,eax
c000fe2b:	d3 e2                	shl    edx,cl
c000fe2d:	f7 d2                	not    edx
c000fe2f:	20 16                	and    BYTE PTR [esi],dl
c000fe31:	03 05 f8 d4 02 c0    	add    eax,DWORD PTR ds:0xc002d4f8
c000fe37:	08 18                	or     BYTE PTR [eax],bl
c000fe39:	5b                   	pop    ebx
c000fe3a:	5e                   	pop    esi
c000fe3b:	c3                   	ret    

c000fe3c <Phys::getPageState(unsigned long)>:
c000fe3c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe40:	8b 15 f8 d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d4f8
c000fe46:	89 c8                	mov    eax,ecx
c000fe48:	83 e1 07             	and    ecx,0x7
c000fe4b:	c1 e8 03             	shr    eax,0x3
c000fe4e:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe52:	d3 f8                	sar    eax,cl
c000fe54:	83 e0 01             	and    eax,0x1
c000fe57:	c3                   	ret    

c000fe58 <Phys::freePage(unsigned long)>:
c000fe58:	53                   	push   ebx
c000fe59:	83 ec 08             	sub    esp,0x8
c000fe5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe60:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe66:	76 57                	jbe    c000febf <Phys::freePage(unsigned long)+0x67>
c000fe68:	c1 eb 0c             	shr    ebx,0xc
c000fe6b:	53                   	push   ebx
c000fe6c:	e8 cb ff ff ff       	call   c000fe3c <Phys::getPageState(unsigned long)>
c000fe71:	5a                   	pop    edx
c000fe72:	84 c0                	test   al,al
c000fe74:	74 5b                	je     c000fed1 <Phys::freePage(unsigned long)+0x79>
c000fe76:	a1 10 e6 02 c0       	mov    eax,ds:0xc002e610
c000fe7b:	48                   	dec    eax
c000fe7c:	a3 10 e6 02 c0       	mov    ds:0xc002e610,eax
c000fe81:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe84:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe87:	c1 e0 02             	shl    eax,0x2
c000fe8a:	99                   	cdq    
c000fe8b:	f7 3d 14 e6 02 c0    	idiv   DWORD PTR ds:0xc002e614
c000fe91:	39 05 0c e6 02 c0    	cmp    DWORD PTR ds:0xc002e60c,eax
c000fe97:	75 13                	jne    c000feac <Phys::freePage(unsigned long)+0x54>
c000fe99:	83 ec 08             	sub    esp,0x8
c000fe9c:	6a 00                	push   0x0
c000fe9e:	53                   	push   ebx
c000fe9f:	e8 66 ff ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c000fea4:	83 c4 10             	add    esp,0x10
c000fea7:	83 c4 08             	add    esp,0x8
c000feaa:	5b                   	pop    ebx
c000feab:	c3                   	ret    
c000feac:	83 ec 0c             	sub    esp,0xc
c000feaf:	a3 0c e6 02 c0       	mov    ds:0xc002e60c,eax
c000feb4:	50                   	push   eax
c000feb5:	e8 c2 0a 00 00       	call   c001097c <VgaText::updateRAMUsageDisplay(int)>
c000feba:	83 c4 10             	add    esp,0x10
c000febd:	eb da                	jmp    c000fe99 <Phys::freePage(unsigned long)+0x41>
c000febf:	68 00 10 00 00       	push   0x1000
c000fec4:	53                   	push   ebx
c000fec5:	e8 f8 fe ff ff       	call   c000fdc2 <Phys::freeDMA(unsigned long, unsigned long)>
c000feca:	59                   	pop    ecx
c000fecb:	5b                   	pop    ebx
c000fecc:	83 c4 08             	add    esp,0x8
c000fecf:	5b                   	pop    ebx
c000fed0:	c3                   	ret    
c000fed1:	c7 44 24 10 a6 a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a2a6
c000fed9:	83 c4 08             	add    esp,0x8
c000fedc:	5b                   	pop    ebx
c000fedd:	e9 f3 a6 00 00       	jmp    c001a5d5 <Krnl::panic(char const*)>

c000fee2 <Phys::allocatePage()>:
c000fee2:	56                   	push   esi
c000fee3:	53                   	push   ebx
c000fee4:	83 ec 14             	sub    esp,0x14
c000fee7:	8b 35 04 e6 02 c0    	mov    esi,DWORD PTR ds:0xc002e604
c000feed:	89 f3                	mov    ebx,esi
c000feef:	eb 0a                	jmp    c000fefb <Phys::allocatePage()+0x19>
c000fef1:	89 1d 04 e6 02 c0    	mov    DWORD PTR ds:0xc002e604,ebx
c000fef7:	39 de                	cmp    esi,ebx
c000fef9:	74 24                	je     c000ff1f <Phys::allocatePage()+0x3d>
c000fefb:	53                   	push   ebx
c000fefc:	e8 3b ff ff ff       	call   c000fe3c <Phys::getPageState(unsigned long)>
c000ff01:	5a                   	pop    edx
c000ff02:	84 c0                	test   al,al
c000ff04:	74 5e                	je     c000ff64 <Phys::allocatePage()+0x82>
c000ff06:	43                   	inc    ebx
c000ff07:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff0d:	75 e2                	jne    c000fef1 <Phys::allocatePage()+0xf>
c000ff0f:	31 db                	xor    ebx,ebx
c000ff11:	c7 05 04 e6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e604,0x0
c000ff1b:	39 de                	cmp    esi,ebx
c000ff1d:	75 dc                	jne    c000fefb <Phys::allocatePage()+0x19>
c000ff1f:	83 ec 0c             	sub    esp,0xc
c000ff22:	68 d0 a2 02 c0       	push   0xc002a2d0
c000ff27:	e8 08 30 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c000ff2c:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff33:	e8 e7 fd ff ff       	call   c000fd1f <Phys::allocateDMA(unsigned long)>
c000ff38:	83 c4 10             	add    esp,0x10
c000ff3b:	85 c0                	test   eax,eax
c000ff3d:	0f 85 a8 00 00 00    	jne    c000ffeb <Phys::allocatePage()+0x109>
c000ff43:	83 ec 0c             	sub    esp,0xc
c000ff46:	68 e1 a2 02 c0       	push   0xc002a2e1
c000ff4b:	e8 85 a6 00 00       	call   c001a5d5 <Krnl::panic(char const*)>
c000ff50:	83 c4 10             	add    esp,0x10
c000ff53:	8b 1d 04 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e604
c000ff59:	53                   	push   ebx
c000ff5a:	e8 dd fe ff ff       	call   c000fe3c <Phys::getPageState(unsigned long)>
c000ff5f:	5a                   	pop    edx
c000ff60:	84 c0                	test   al,al
c000ff62:	75 a2                	jne    c000ff06 <Phys::allocatePage()+0x24>
c000ff64:	6a 01                	push   0x1
c000ff66:	53                   	push   ebx
c000ff67:	e8 9e fe ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c000ff6c:	a1 10 e6 02 c0       	mov    eax,ds:0xc002e610
c000ff71:	40                   	inc    eax
c000ff72:	a3 10 e6 02 c0       	mov    ds:0xc002e610,eax
c000ff77:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff7a:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff7d:	c1 e0 02             	shl    eax,0x2
c000ff80:	99                   	cdq    
c000ff81:	f7 3d 14 e6 02 c0    	idiv   DWORD PTR ds:0xc002e614
c000ff87:	5a                   	pop    edx
c000ff88:	39 05 0c e6 02 c0    	cmp    DWORD PTR ds:0xc002e60c,eax
c000ff8e:	59                   	pop    ecx
c000ff8f:	75 60                	jne    c000fff1 <Phys::allocatePage()+0x10f>
c000ff91:	83 f8 32             	cmp    eax,0x32
c000ff94:	7e 4d                	jle    c000ffe3 <Phys::allocatePage()+0x101>
c000ff96:	80 3d 00 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e600,0x0
c000ff9d:	75 44                	jne    c000ffe3 <Phys::allocatePage()+0x101>
c000ff9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ffa4:	85 c0                	test   eax,eax
c000ffa6:	74 3b                	je     c000ffe3 <Phys::allocatePage()+0x101>
c000ffa8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ffab:	85 c0                	test   eax,eax
c000ffad:	74 34                	je     c000ffe3 <Phys::allocatePage()+0x101>
c000ffaf:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000ffb5:	85 c0                	test   eax,eax
c000ffb7:	74 2a                	je     c000ffe3 <Phys::allocatePage()+0x101>
c000ffb9:	83 ec 0c             	sub    esp,0xc
c000ffbc:	68 bc a2 02 c0       	push   0xc002a2bc
c000ffc1:	e8 6e 2f 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c000ffc6:	83 c4 0c             	add    esp,0xc
c000ffc9:	6a 01                	push   0x1
c000ffcb:	6a 08                	push   0x8
c000ffcd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ffd2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ffd5:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000ffdb:	e8 5e 2c 00 00       	call   c0012c3e <VAS::scanForEviction(int, int)>
c000ffe0:	83 c4 10             	add    esp,0x10
c000ffe3:	a1 04 e6 02 c0       	mov    eax,ds:0xc002e604
c000ffe8:	c1 e0 0c             	shl    eax,0xc
c000ffeb:	83 c4 14             	add    esp,0x14
c000ffee:	5b                   	pop    ebx
c000ffef:	5e                   	pop    esi
c000fff0:	c3                   	ret    
c000fff1:	83 ec 0c             	sub    esp,0xc
c000fff4:	a3 0c e6 02 c0       	mov    ds:0xc002e60c,eax
c000fff9:	50                   	push   eax
c000fffa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fffe:	e8 79 09 00 00       	call   c001097c <VgaText::updateRAMUsageDisplay(int)>
c0010003:	83 c4 10             	add    esp,0x10
c0010006:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001000a:	83 f8 32             	cmp    eax,0x32
c001000d:	7e d4                	jle    c000ffe3 <Phys::allocatePage()+0x101>
c001000f:	eb 85                	jmp    c000ff96 <Phys::allocatePage()+0xb4>

c0010011 <Phys::allocateContiguousPages(int)>:
c0010011:	57                   	push   edi
c0010012:	56                   	push   esi
c0010013:	53                   	push   ebx
c0010014:	31 db                	xor    ebx,ebx
c0010016:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001001a:	e8 db dd 00 00       	call   c001ddfa <lockScheduler()>
c001001f:	85 db                	test   ebx,ebx
c0010021:	75 11                	jne    c0010034 <Phys::allocateContiguousPages(int)+0x23>
c0010023:	e8 ba fe ff ff       	call   c000fee2 <Phys::allocatePage()>
c0010028:	83 ff 01             	cmp    edi,0x1
c001002b:	89 c6                	mov    esi,eax
c001002d:	74 21                	je     c0010050 <Phys::allocateContiguousPages(int)+0x3f>
c001002f:	bb 01 00 00 00       	mov    ebx,0x1
c0010034:	e8 a9 fe ff ff       	call   c000fee2 <Phys::allocatePage()>
c0010039:	89 da                	mov    edx,ebx
c001003b:	c1 e2 0c             	shl    edx,0xc
c001003e:	01 f2                	add    edx,esi
c0010040:	39 c2                	cmp    edx,eax
c0010042:	74 17                	je     c001005b <Phys::allocateContiguousPages(int)+0x4a>
c0010044:	bb 01 00 00 00       	mov    ebx,0x1
c0010049:	89 c6                	mov    esi,eax
c001004b:	83 ff 01             	cmp    edi,0x1
c001004e:	75 e4                	jne    c0010034 <Phys::allocateContiguousPages(int)+0x23>
c0010050:	e8 a7 dd 00 00       	call   c001ddfc <unlockScheduler()>
c0010055:	89 f0                	mov    eax,esi
c0010057:	5b                   	pop    ebx
c0010058:	5e                   	pop    esi
c0010059:	5f                   	pop    edi
c001005a:	c3                   	ret    
c001005b:	43                   	inc    ebx
c001005c:	39 fb                	cmp    ebx,edi
c001005e:	75 bf                	jne    c001001f <Phys::allocateContiguousPages(int)+0xe>
c0010060:	e8 97 dd 00 00       	call   c001ddfc <unlockScheduler()>
c0010065:	89 f0                	mov    eax,esi
c0010067:	5b                   	pop    ebx
c0010068:	5e                   	pop    esi
c0010069:	5f                   	pop    edi
c001006a:	c3                   	ret    

c001006b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c001006b:	56                   	push   esi
c001006c:	53                   	push   ebx
c001006d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010071:	39 1d 08 e6 02 c0    	cmp    DWORD PTR ds:0xc002e608,ebx
c0010077:	73 06                	jae    c001007f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010079:	89 1d 08 e6 02 c0    	mov    DWORD PTR ds:0xc002e608,ebx
c001007f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010083:	c1 eb 0c             	shr    ebx,0xc
c0010086:	c1 e8 0c             	shr    eax,0xc
c0010089:	39 d8                	cmp    eax,ebx
c001008b:	73 13                	jae    c00100a0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c001008d:	6a 00                	push   0x0
c001008f:	8d 70 01             	lea    esi,[eax+0x1]
c0010092:	50                   	push   eax
c0010093:	e8 72 fd ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c0010098:	5a                   	pop    edx
c0010099:	89 f0                	mov    eax,esi
c001009b:	59                   	pop    ecx
c001009c:	39 f3                	cmp    ebx,esi
c001009e:	75 ed                	jne    c001008d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c00100a0:	5b                   	pop    ebx
c00100a1:	5e                   	pop    esi
c00100a2:	c3                   	ret    

c00100a3 <Phys::physicalMemorySetup(unsigned int)>:
c00100a3:	55                   	push   ebp
c00100a4:	57                   	push   edi
c00100a5:	56                   	push   esi
c00100a6:	53                   	push   ebx
c00100a7:	31 db                	xor    ebx,ebx
c00100a9:	83 ec 40             	sub    esp,0x40
c00100ac:	6a 30                	push   0x30
c00100ae:	6a 00                	push   0x0
c00100b0:	68 20 e6 02 c0       	push   0xc002e620
c00100b5:	e8 be 06 ff ff       	call   c0000778 <memset>
c00100ba:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00100be:	25 00 f0 ff ff       	and    eax,0xfffff000
c00100c3:	05 00 10 00 00       	add    eax,0x1000
c00100c8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00100cc:	83 c4 10             	add    esp,0x10
c00100cf:	83 ec 08             	sub    esp,0x8
c00100d2:	6a 01                	push   0x1
c00100d4:	53                   	push   ebx
c00100d5:	43                   	inc    ebx
c00100d6:	e8 2f fd ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c00100db:	83 c4 10             	add    esp,0x10
c00100de:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00100e4:	75 e9                	jne    c00100cf <Phys::physicalMemorySetup(unsigned int)+0x2c>
c00100e6:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c00100ed:	66 85 c0             	test   ax,ax
c00100f0:	0f 84 8e 01 00 00    	je     c0010284 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c00100f6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00100fa:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010102:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010106:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c001010b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001010f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0010117:	eb 15                	jmp    c001012e <Phys::physicalMemorySetup(unsigned int)+0x8b>
c0010119:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001011d:	83 c3 18             	add    ebx,0x18
c0010120:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010124:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0010128:	0f 84 66 01 00 00    	je     c0010294 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c001012e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0010131:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010134:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0010137:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001013b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001013f:	8b 33                	mov    esi,DWORD PTR [ebx]
c0010141:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0010144:	01 f0                	add    eax,esi
c0010146:	55                   	push   ebp
c0010147:	11 fa                	adc    edx,edi
c0010149:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001014d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0010151:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010155:	56                   	push   esi
c0010156:	68 1c a3 02 c0       	push   0xc002a31c
c001015b:	e8 d4 2d 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0010160:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010164:	83 c4 10             	add    esp,0x10
c0010167:	09 f8                	or     eax,edi
c0010169:	0f 85 25 01 00 00    	jne    c0010294 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c001016f:	4d                   	dec    ebp
c0010170:	75 a7                	jne    c0010119 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010172:	ba 00 00 08 00       	mov    edx,0x80000
c0010177:	89 c1                	mov    ecx,eax
c0010179:	39 f2                	cmp    edx,esi
c001017b:	19 f9                	sbb    ecx,edi
c001017d:	0f 82 a7 00 00 00    	jb     c001022a <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010183:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010187:	89 c1                	mov    ecx,eax
c0010189:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c001018d:	0f 83 97 00 00 00    	jae    c001022a <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010193:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010198:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001019c:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101a0:	39 fa                	cmp    edx,edi
c00101a2:	19 e8                	sbb    eax,ebp
c00101a4:	0f 82 14 01 00 00    	jb     c00102be <Phys::physicalMemorySetup(unsigned int)+0x21b>
c00101aa:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00101ae:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101b2:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00101b8:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101bd:	83 d5 ff             	adc    ebp,0xffffffff
c00101c0:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00101c4:	31 c0                	xor    eax,eax
c00101c6:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00101ca:	39 fa                	cmp    edx,edi
c00101cc:	89 c1                	mov    ecx,eax
c00101ce:	19 e9                	sbb    ecx,ebp
c00101d0:	0f 83 43 ff ff ff    	jae    c0010119 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101d6:	be 00 00 08 00       	mov    esi,0x80000
c00101db:	50                   	push   eax
c00101dc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00101e0:	57                   	push   edi
c00101e1:	56                   	push   esi
c00101e2:	68 40 a3 02 c0       	push   0xc002a340
c00101e7:	e8 48 2d 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c00101ec:	5a                   	pop    edx
c00101ed:	59                   	pop    ecx
c00101ee:	57                   	push   edi
c00101ef:	56                   	push   esi
c00101f0:	e8 76 fe ff ff       	call   c001006b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00101f5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00101f9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00101fd:	83 c4 0c             	add    esp,0xc
c0010200:	0f ac d0 0c          	shrd   eax,edx,0xc
c0010204:	03 05 14 e6 02 c0    	add    eax,DWORD PTR ds:0xc002e614
c001020a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010211:	a3 14 e6 02 c0       	mov    ds:0xc002e614,eax
c0010216:	52                   	push   edx
c0010217:	50                   	push   eax
c0010218:	68 fd a2 02 c0       	push   0xc002a2fd
c001021d:	e8 12 2d 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0010222:	83 c4 10             	add    esp,0x10
c0010225:	e9 ef fe ff ff       	jmp    c0010119 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001022a:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001022e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010232:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010236:	39 ea                	cmp    edx,ebp
c0010238:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c001023c:	0f 82 d7 fe ff ff    	jb     c0010119 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010242:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010247:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c001024b:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c001024f:	0f 83 c4 fe ff ff    	jae    c0010119 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010255:	39 ee                	cmp    esi,ebp
c0010257:	89 f8                	mov    eax,edi
c0010259:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c001025d:	0f 83 78 ff ff ff    	jae    c00101db <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010263:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010267:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001026b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001026f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010273:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010277:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001027b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001027f:	e9 57 ff ff ff       	jmp    c00101db <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010284:	83 ec 0c             	sub    esp,0xc
c0010287:	68 ef a2 02 c0       	push   0xc002a2ef
c001028c:	e8 44 a3 00 00       	call   c001a5d5 <Krnl::panic(char const*)>
c0010291:	83 c4 10             	add    esp,0x10
c0010294:	bb 40 01 00 00       	mov    ebx,0x140
c0010299:	83 ec 08             	sub    esp,0x8
c001029c:	6a 00                	push   0x0
c001029e:	53                   	push   ebx
c001029f:	43                   	inc    ebx
c00102a0:	e8 65 fb ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c00102a5:	ff 05 14 e6 02 c0    	inc    DWORD PTR ds:0xc002e614
c00102ab:	83 c4 10             	add    esp,0x10
c00102ae:	81 fb 80 01 00 00    	cmp    ebx,0x180
c00102b4:	75 e3                	jne    c0010299 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c00102b6:	83 c4 3c             	add    esp,0x3c
c00102b9:	5b                   	pop    ebx
c00102ba:	5e                   	pop    esi
c00102bb:	5f                   	pop    edi
c00102bc:	5d                   	pop    ebp
c00102bd:	c3                   	ret    
c00102be:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c00102c6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00102ce:	e9 d7 fe ff ff       	jmp    c00101aa <Phys::physicalMemorySetup(unsigned int)+0x107>
c00102d3:	90                   	nop

c00102d4 <Pipe::isAtty()>:
c00102d4:	31 c0                	xor    eax,eax
c00102d6:	c3                   	ret    
c00102d7:	90                   	nop

c00102d8 <Pipe::~Pipe()>:
c00102d8:	83 ec 0c             	sub    esp,0xc
c00102db:	ba ac a3 02 c0       	mov    edx,0xc002a3ac
c00102e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102e4:	89 10                	mov    DWORD PTR [eax],edx
c00102e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102ea:	83 ec 0c             	sub    esp,0xc
c00102ed:	50                   	push   eax
c00102ee:	e8 37 16 00 00       	call   c001192a <UnixFile::~UnixFile()>
c00102f3:	83 c4 10             	add    esp,0x10
c00102f6:	90                   	nop
c00102f7:	83 c4 0c             	add    esp,0xc
c00102fa:	c3                   	ret    
c00102fb:	90                   	nop

c00102fc <Pipe::~Pipe()>:
c00102fc:	83 ec 0c             	sub    esp,0xc
c00102ff:	83 ec 0c             	sub    esp,0xc
c0010302:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010306:	e8 cd ff ff ff       	call   c00102d8 <Pipe::~Pipe()>
c001030b:	83 c4 10             	add    esp,0x10
c001030e:	83 ec 08             	sub    esp,0x8
c0010311:	6a 20                	push   0x20
c0010313:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010317:	e8 38 2b 00 00       	call   c0012e54 <operator delete(void*, unsigned long)>
c001031c:	83 c4 10             	add    esp,0x10
c001031f:	83 c4 0c             	add    esp,0xc
c0010322:	c3                   	ret    
c0010323:	90                   	nop

c0010324 <Pipe::read(unsigned long long, void*, int*)>:
c0010324:	55                   	push   ebp
c0010325:	57                   	push   edi
c0010326:	56                   	push   esi
c0010327:	53                   	push   ebx
c0010328:	83 ec 1c             	sub    esp,0x1c
c001032b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001032f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010333:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010337:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c001033a:	89 c8                	mov    eax,ecx
c001033c:	99                   	cdq    
c001033d:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0010341:	74 19                	je     c001035c <Pipe::read(unsigned long long, void*, int*)+0x38>
c0010343:	39 f9                	cmp    ecx,edi
c0010345:	89 d1                	mov    ecx,edx
c0010347:	19 f1                	sbb    ecx,esi
c0010349:	73 11                	jae    c001035c <Pipe::read(unsigned long long, void*, int*)+0x38>
c001034b:	e8 aa da 00 00       	call   c001ddfa <lockScheduler()>
c0010350:	e8 e1 dd 00 00       	call   c001e136 <schedule()>
c0010355:	e8 a2 da 00 00       	call   c001ddfc <unlockScheduler()>
c001035a:	eb db                	jmp    c0010337 <Pipe::read(unsigned long long, void*, int*)+0x13>
c001035c:	39 f8                	cmp    eax,edi
c001035e:	89 d1                	mov    ecx,edx
c0010360:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010364:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0010368:	19 f1                	sbb    ecx,esi
c001036a:	73 08                	jae    c0010374 <Pipe::read(unsigned long long, void*, int*)+0x50>
c001036c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010370:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010374:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010377:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001037a:	29 c6                	sub    esi,eax
c001037c:	89 f1                	mov    ecx,esi
c001037e:	c1 f9 1f             	sar    ecx,0x1f
c0010381:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0010385:	89 ca                	mov    edx,ecx
c0010387:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001038b:	19 d1                	sbb    ecx,edx
c001038d:	73 04                	jae    c0010393 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c001038f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0010393:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010397:	89 fd                	mov    ebp,edi
c0010399:	29 f5                	sub    ebp,esi
c001039b:	85 f6                	test   esi,esi
c001039d:	74 12                	je     c00103b1 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c001039f:	52                   	push   edx
c00103a0:	56                   	push   esi
c00103a1:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c00103a4:	50                   	push   eax
c00103a5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00103a9:	e8 96 03 ff ff       	call   c0000744 <memcpy>
c00103ae:	83 c4 10             	add    esp,0x10
c00103b1:	85 ed                	test   ebp,ebp
c00103b3:	74 12                	je     c00103c7 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c00103b5:	50                   	push   eax
c00103b6:	55                   	push   ebp
c00103b7:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00103ba:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c00103be:	56                   	push   esi
c00103bf:	e8 80 03 ff ff       	call   c0000744 <memcpy>
c00103c4:	83 c4 10             	add    esp,0x10
c00103c7:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c00103ca:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00103cd:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00103d0:	99                   	cdq    
c00103d1:	89 f7                	mov    edi,esi
c00103d3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00103d7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00103db:	c1 ff 1f             	sar    edi,0x1f
c00103de:	57                   	push   edi
c00103df:	56                   	push   esi
c00103e0:	52                   	push   edx
c00103e1:	50                   	push   eax
c00103e2:	e8 f5 66 01 00       	call   c0026adc <__umoddi3>
c00103e7:	83 c4 10             	add    esp,0x10
c00103ea:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00103ed:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00103f2:	75 10                	jne    c0010404 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c00103f4:	83 ec 0c             	sub    esp,0xc
c00103f7:	68 69 a3 02 c0       	push   0xc002a369
c00103fc:	e8 d4 a1 00 00       	call   c001a5d5 <Krnl::panic(char const*)>
c0010401:	83 c4 10             	add    esp,0x10
c0010404:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010408:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001040c:	89 10                	mov    DWORD PTR [eax],edx
c001040e:	83 c4 1c             	add    esp,0x1c
c0010411:	31 c0                	xor    eax,eax
c0010413:	5b                   	pop    ebx
c0010414:	5e                   	pop    esi
c0010415:	5f                   	pop    edi
c0010416:	5d                   	pop    ebp
c0010417:	c3                   	ret    

c0010418 <Pipe::write(unsigned long long, void*, int*)>:
c0010418:	55                   	push   ebp
c0010419:	57                   	push   edi
c001041a:	56                   	push   esi
c001041b:	53                   	push   ebx
c001041c:	83 ec 1c             	sub    esp,0x1c
c001041f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010423:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010427:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001042b:	89 04 24             	mov    DWORD PTR [esp],eax
c001042e:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0010431:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c0010434:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010438:	89 de                	mov    esi,ebx
c001043a:	89 df                	mov    edi,ebx
c001043c:	c1 ff 1f             	sar    edi,0x1f
c001043f:	01 c6                	add    esi,eax
c0010441:	89 c8                	mov    eax,ecx
c0010443:	11 d7                	adc    edi,edx
c0010445:	99                   	cdq    
c0010446:	39 f1                	cmp    ecx,esi
c0010448:	89 d0                	mov    eax,edx
c001044a:	19 f8                	sbb    eax,edi
c001044c:	b8 01 00 00 00       	mov    eax,0x1
c0010451:	0f 82 80 00 00 00    	jb     c00104d7 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c0010457:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001045a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001045d:	01 d8                	add    eax,ebx
c001045f:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0010463:	99                   	cdq    
c0010464:	f7 f9                	idiv   ecx
c0010466:	29 d1                	sub    ecx,edx
c0010468:	89 d7                	mov    edi,edx
c001046a:	89 c8                	mov    eax,ecx
c001046c:	99                   	cdq    
c001046d:	39 ce                	cmp    esi,ecx
c001046f:	19 d3                	sbb    ebx,edx
c0010471:	bb 00 00 00 00       	mov    ebx,0x0
c0010476:	72 04                	jb     c001047c <Pipe::write(unsigned long long, void*, int*)+0x64>
c0010478:	89 f3                	mov    ebx,esi
c001047a:	29 cb                	sub    ebx,ecx
c001047c:	89 f1                	mov    ecx,esi
c001047e:	29 d9                	sub    ecx,ebx
c0010480:	74 1a                	je     c001049c <Pipe::write(unsigned long long, void*, int*)+0x84>
c0010482:	52                   	push   edx
c0010483:	51                   	push   ecx
c0010484:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010488:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001048c:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c001048f:	57                   	push   edi
c0010490:	e8 af 02 ff ff       	call   c0000744 <memcpy>
c0010495:	83 c4 10             	add    esp,0x10
c0010498:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001049c:	85 db                	test   ebx,ebx
c001049e:	74 12                	je     c00104b2 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c00104a0:	50                   	push   eax
c00104a1:	53                   	push   ebx
c00104a2:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c00104a6:	51                   	push   ecx
c00104a7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00104aa:	e8 95 02 ff ff       	call   c0000744 <memcpy>
c00104af:	83 c4 10             	add    esp,0x10
c00104b2:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c00104b5:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00104ba:	75 10                	jne    c00104cc <Pipe::write(unsigned long long, void*, int*)+0xb4>
c00104bc:	83 ec 0c             	sub    esp,0xc
c00104bf:	68 85 a3 02 c0       	push   0xc002a385
c00104c4:	e8 0c a1 00 00       	call   c001a5d5 <Krnl::panic(char const*)>
c00104c9:	83 c4 10             	add    esp,0x10
c00104cc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00104d0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00104d3:	89 38                	mov    DWORD PTR [eax],edi
c00104d5:	31 c0                	xor    eax,eax
c00104d7:	83 c4 1c             	add    esp,0x1c
c00104da:	5b                   	pop    ebx
c00104db:	5e                   	pop    esi
c00104dc:	5f                   	pop    edi
c00104dd:	5d                   	pop    ebp
c00104de:	c3                   	ret    
c00104df:	90                   	nop

c00104e0 <Pipe::Pipe(int)>:
c00104e0:	83 ec 0c             	sub    esp,0xc
c00104e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104e7:	83 ec 08             	sub    esp,0x8
c00104ea:	6a 00                	push   0x0
c00104ec:	50                   	push   eax
c00104ed:	e8 56 12 00 00       	call   c0011748 <UnixFile::UnixFile(int)>
c00104f2:	83 c4 10             	add    esp,0x10
c00104f5:	ba ac a3 02 c0       	mov    edx,0xc002a3ac
c00104fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104fe:	89 10                	mov    DWORD PTR [eax],edx
c0010500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010504:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010508:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001050b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001050f:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001051a:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010521:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010525:	83 ec 0c             	sub    esp,0xc
c0010528:	50                   	push   eax
c0010529:	e8 12 f3 ff ff       	call   c000f840 <malloc>
c001052e:	83 c4 10             	add    esp,0x10
c0010531:	89 c2                	mov    edx,eax
c0010533:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010537:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001053a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001053e:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010542:	90                   	nop
c0010543:	83 c4 0c             	add    esp,0xc
c0010546:	c3                   	ret    
c0010547:	90                   	nop

c0010548 <VgaText::isAtty()>:
c0010548:	b0 01                	mov    al,0x1
c001054a:	c3                   	ret    
c001054b:	90                   	nop

c001054c <VgaText::~VgaText()>:
c001054c:	83 ec 0c             	sub    esp,0xc
c001054f:	ba 68 a4 02 c0       	mov    edx,0xc002a468
c0010554:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010558:	89 10                	mov    DWORD PTR [eax],edx
c001055a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001055e:	83 ec 0c             	sub    esp,0xc
c0010561:	50                   	push   eax
c0010562:	e8 c3 13 00 00       	call   c001192a <UnixFile::~UnixFile()>
c0010567:	83 c4 10             	add    esp,0x10
c001056a:	90                   	nop
c001056b:	83 c4 0c             	add    esp,0xc
c001056e:	c3                   	ret    
c001056f:	90                   	nop

c0010570 <VgaText::~VgaText()>:
c0010570:	83 ec 0c             	sub    esp,0xc
c0010573:	83 ec 0c             	sub    esp,0xc
c0010576:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001057a:	e8 cd ff ff ff       	call   c001054c <VgaText::~VgaText()>
c001057f:	83 c4 10             	add    esp,0x10
c0010582:	83 ec 08             	sub    esp,0x8
c0010585:	68 60 12 00 00       	push   0x1260
c001058a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001058e:	e8 c1 28 00 00       	call   c0012e54 <operator delete(void*, unsigned long)>
c0010593:	83 c4 10             	add    esp,0x10
c0010596:	83 c4 0c             	add    esp,0xc
c0010599:	c3                   	ret    

c001059a <VgaText::read(unsigned long long, void*, int*)>:
c001059a:	83 ec 10             	sub    esp,0x10
c001059d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00105a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105a9:	e8 28 5d 00 00       	call   c00162d6 <readKeyboard(VgaText*, char*, unsigned long)>
c00105ae:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00105b2:	89 02                	mov    DWORD PTR [edx],eax
c00105b4:	31 c0                	xor    eax,eax
c00105b6:	83 c4 1c             	add    esp,0x1c
c00105b9:	c3                   	ret    

c00105ba <setTerminalScrollLock(bool)>:
c00105ba:	c3                   	ret    

c00105bb <addToTerminalCycle(VgaText*)>:
c00105bb:	8b 15 a0 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e6a0
c00105c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105c5:	85 d2                	test   edx,edx
c00105c7:	75 0c                	jne    c00105d5 <addToTerminalCycle(VgaText*)+0x1a>
c00105c9:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c00105cf:	a3 a0 e6 02 c0       	mov    ds:0xc002e6a0,eax
c00105d4:	c3                   	ret    
c00105d5:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c00105db:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c00105e1:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c00105e7:	c3                   	ret    

c00105e8 <installVgaTextImplementation()>:
c00105e8:	83 ec 10             	sub    esp,0x10
c00105eb:	6a 20                	push   0x20
c00105ed:	6a 00                	push   0x0
c00105ef:	68 80 e6 02 c0       	push   0xc002e680
c00105f4:	e8 7f 01 ff ff       	call   c0000778 <memset>
c00105f9:	83 c4 1c             	add    esp,0x1c
c00105fc:	c3                   	ret    

c00105fd <scrollTerminalScrollLock(int)>:
c00105fd:	c3                   	ret    

c00105fe <VgaText::load()>:
c00105fe:	53                   	push   ebx
c00105ff:	31 c0                	xor    eax,eax
c0010601:	83 ec 58             	sub    esp,0x58
c0010604:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010608:	89 e2                	mov    edx,esp
c001060a:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c001060e:	40                   	inc    eax
c001060f:	83 f8 50             	cmp    eax,0x50
c0010612:	75 f6                	jne    c001060a <VgaText::load()+0xc>
c0010614:	31 c0                	xor    eax,eax
c0010616:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c001061d:	84 c9                	test   cl,cl
c001061f:	74 06                	je     c0010627 <VgaText::load()+0x29>
c0010621:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010624:	40                   	inc    eax
c0010625:	eb ef                	jmp    c0010616 <VgaText::load()+0x18>
c0010627:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c001062d:	85 c0                	test   eax,eax
c001062f:	74 09                	je     c001063a <VgaText::load()+0x3c>
c0010631:	51                   	push   ecx
c0010632:	51                   	push   ecx
c0010633:	52                   	push   edx
c0010634:	53                   	push   ebx
c0010635:	ff d0                	call   eax
c0010637:	83 c4 10             	add    esp,0x10
c001063a:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c0010640:	85 c0                	test   eax,eax
c0010642:	74 09                	je     c001064d <VgaText::load()+0x4f>
c0010644:	83 ec 0c             	sub    esp,0xc
c0010647:	53                   	push   ebx
c0010648:	ff d0                	call   eax
c001064a:	83 c4 10             	add    esp,0x10
c001064d:	83 c4 58             	add    esp,0x58
c0010650:	5b                   	pop    ebx
c0010651:	c3                   	ret    

c0010652 <VgaText::updateCursor()>:
c0010652:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010656:	39 05 a4 e6 02 c0    	cmp    DWORD PTR ds:0xc002e6a4,eax
c001065c:	75 0c                	jne    c001066a <VgaText::updateCursor()+0x18>
c001065e:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c0010664:	85 c0                	test   eax,eax
c0010666:	74 02                	je     c001066a <VgaText::updateCursor()+0x18>
c0010668:	ff e0                	jmp    eax
c001066a:	c3                   	ret    
c001066b:	90                   	nop

c001066c <VgaText::showCursor(bool)>:
c001066c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010670:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010674:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c001067a:	c3                   	ret    
c001067b:	90                   	nop

c001067c <VgaText::disableBlink(bool)>:
c001067c:	56                   	push   esi
c001067d:	53                   	push   ebx
c001067e:	51                   	push   ecx
c001067f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010683:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010687:	39 1d a4 e6 02 c0    	cmp    DWORD PTR ds:0xc002e6a4,ebx
c001068d:	75 18                	jne    c00106a7 <VgaText::disableBlink(bool)+0x2b>
c001068f:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c0010695:	85 c0                	test   eax,eax
c0010697:	74 0e                	je     c00106a7 <VgaText::disableBlink(bool)+0x2b>
c0010699:	89 f1                	mov    ecx,esi
c001069b:	52                   	push   edx
c001069c:	52                   	push   edx
c001069d:	0f b6 d1             	movzx  edx,cl
c00106a0:	52                   	push   edx
c00106a1:	53                   	push   ebx
c00106a2:	ff d0                	call   eax
c00106a4:	83 c4 10             	add    esp,0x10
c00106a7:	89 f0                	mov    eax,esi
c00106a9:	83 f0 01             	xor    eax,0x1
c00106ac:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c00106b2:	58                   	pop    eax
c00106b3:	5b                   	pop    ebx
c00106b4:	5e                   	pop    esi
c00106b5:	c3                   	ret    

c00106b6 <VgaText::doANSI_SGR(int)>:
c00106b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106be:	85 d2                	test   edx,edx
c00106c0:	75 14                	jne    c00106d6 <VgaText::doANSI_SGR(int)+0x20>
c00106c2:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c00106c8:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00106ce:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c00106d4:	eb 65                	jmp    c001073b <VgaText::doANSI_SGR(int)+0x85>
c00106d6:	83 fa 07             	cmp    edx,0x7
c00106d9:	75 14                	jne    c00106ef <VgaText::doANSI_SGR(int)+0x39>
c00106db:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c00106e1:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c00106e7:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c00106ed:	eb 4c                	jmp    c001073b <VgaText::doANSI_SGR(int)+0x85>
c00106ef:	83 fa 1b             	cmp    edx,0x1b
c00106f2:	74 ce                	je     c00106c2 <VgaText::doANSI_SGR(int)+0xc>
c00106f4:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00106f7:	83 f9 07             	cmp    ecx,0x7
c00106fa:	77 09                	ja     c0010705 <VgaText::doANSI_SGR(int)+0x4f>
c00106fc:	8b 14 8d 20 d5 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2ae0]
c0010703:	eb 20                	jmp    c0010725 <VgaText::doANSI_SGR(int)+0x6f>
c0010705:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010708:	83 f9 07             	cmp    ecx,0x7
c001070b:	77 09                	ja     c0010716 <VgaText::doANSI_SGR(int)+0x60>
c001070d:	8b 14 8d 20 d5 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2ae0]
c0010714:	eb 25                	jmp    c001073b <VgaText::doANSI_SGR(int)+0x85>
c0010716:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010719:	83 f9 07             	cmp    ecx,0x7
c001071c:	77 0e                	ja     c001072c <VgaText::doANSI_SGR(int)+0x76>
c001071e:	8b 14 95 d8 d3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2c28]
c0010725:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001072b:	c3                   	ret    
c001072c:	8d 4a 9c             	lea    ecx,[edx-0x64]
c001072f:	83 f9 07             	cmp    ecx,0x7
c0010732:	77 0d                	ja     c0010741 <VgaText::doANSI_SGR(int)+0x8b>
c0010734:	8b 14 95 b0 d3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2c50]
c001073b:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010741:	c3                   	ret    

c0010742 <VgaText::setDefaultBgColour(VgaColour)>:
c0010742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010746:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001074a:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c0010750:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010756:	c3                   	ret    
c0010757:	90                   	nop

c0010758 <VgaText::setDefaultFgColour(VgaColour)>:
c0010758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001075c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010760:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c0010766:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001076c:	c3                   	ret    
c001076d:	90                   	nop

c001076e <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c001076e:	53                   	push   ebx
c001076f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010773:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010777:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001077b:	51                   	push   ecx
c001077c:	e8 c1 ff ff ff       	call   c0010742 <VgaText::setDefaultBgColour(VgaColour)>
c0010781:	58                   	pop    eax
c0010782:	5a                   	pop    edx
c0010783:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010787:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001078b:	5b                   	pop    ebx
c001078c:	eb ca                	jmp    c0010758 <VgaText::setDefaultFgColour(VgaColour)>

c001078e <VgaText::combineColours(unsigned char, unsigned char)>:
c001078e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010792:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010797:	83 e0 0f             	and    eax,0xf
c001079a:	c1 e2 04             	shl    edx,0x4
c001079d:	09 d0                	or     eax,edx
c001079f:	c3                   	ret    

c00107a0 <VgaText::scrollScreen()>:
c00107a0:	57                   	push   edi
c00107a1:	56                   	push   esi
c00107a2:	be 01 00 00 00       	mov    esi,0x1
c00107a7:	53                   	push   ebx
c00107a8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107ac:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00107b2:	31 ff                	xor    edi,edi
c00107b4:	01 d9                	add    ecx,ebx
c00107b6:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c00107b9:	83 fe 17             	cmp    esi,0x17
c00107bc:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c00107c2:	75 28                	jne    c00107ec <VgaText::scrollScreen()+0x4c>
c00107c4:	f7 c7 01 00 00 00    	test   edi,0x1
c00107ca:	74 1c                	je     c00107e8 <VgaText::scrollScreen()+0x48>
c00107cc:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c00107d3:	50                   	push   eax
c00107d4:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c00107db:	50                   	push   eax
c00107dc:	e8 ad ff ff ff       	call   c001078e <VgaText::combineColours(unsigned char, unsigned char)>
c00107e1:	5a                   	pop    edx
c00107e2:	5a                   	pop    edx
c00107e3:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c00107e6:	eb 04                	jmp    c00107ec <VgaText::scrollScreen()+0x4c>
c00107e8:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c00107ec:	47                   	inc    edi
c00107ed:	41                   	inc    ecx
c00107ee:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00107f4:	75 c0                	jne    c00107b6 <VgaText::scrollScreen()+0x16>
c00107f6:	46                   	inc    esi
c00107f7:	83 fe 18             	cmp    esi,0x18
c00107fa:	75 b0                	jne    c00107ac <VgaText::scrollScreen()+0xc>
c00107fc:	39 1d a4 e6 02 c0    	cmp    DWORD PTR ds:0xc002e6a4,ebx
c0010802:	75 24                	jne    c0010828 <VgaText::scrollScreen()+0x88>
c0010804:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c001080b:	74 08                	je     c0010815 <VgaText::scrollScreen()+0x75>
c001080d:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c0010813:	eb 13                	jmp    c0010828 <VgaText::scrollScreen()+0x88>
c0010815:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c001081b:	85 c0                	test   eax,eax
c001081d:	74 09                	je     c0010828 <VgaText::scrollScreen()+0x88>
c001081f:	83 ec 0c             	sub    esp,0xc
c0010822:	53                   	push   ebx
c0010823:	ff d0                	call   eax
c0010825:	83 c4 10             	add    esp,0x10
c0010828:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001082c:	5b                   	pop    ebx
c001082d:	5e                   	pop    esi
c001082e:	5f                   	pop    edi
c001082f:	e9 1e fe ff ff       	jmp    c0010652 <VgaText::updateCursor()>

c0010834 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010834:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010839:	c1 e0 08             	shl    eax,0x8
c001083c:	89 c2                	mov    edx,eax
c001083e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010843:	09 d0                	or     eax,edx
c0010845:	c3                   	ret    

c0010846 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010846:	53                   	push   ebx
c0010847:	83 ec 08             	sub    esp,0x8
c001084a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001084e:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010853:	50                   	push   eax
c0010854:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010859:	50                   	push   eax
c001085a:	e8 2f ff ff ff       	call   c001078e <VgaText::combineColours(unsigned char, unsigned char)>
c001085f:	5a                   	pop    edx
c0010860:	0f b6 c0             	movzx  eax,al
c0010863:	5b                   	pop    ebx
c0010864:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010869:	50                   	push   eax
c001086a:	53                   	push   ebx
c001086b:	e8 c4 ff ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010870:	5a                   	pop    edx
c0010871:	5a                   	pop    edx
c0010872:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010878:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c001087c:	0f b7 d2             	movzx  edx,dx
c001087f:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c0010884:	39 0d a4 e6 02 c0    	cmp    DWORD PTR ds:0xc002e6a4,ecx
c001088a:	75 14                	jne    c00108a0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c001088c:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c0010892:	85 c0                	test   eax,eax
c0010894:	74 0a                	je     c00108a0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010896:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001089a:	83 c4 08             	add    esp,0x8
c001089d:	5b                   	pop    ebx
c001089e:	ff e0                	jmp    eax
c00108a0:	83 c4 08             	add    esp,0x8
c00108a3:	5b                   	pop    ebx
c00108a4:	c3                   	ret    
c00108a5:	90                   	nop

c00108a6 <VgaText::getCursorX()>:
c00108a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108aa:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c00108b0:	c3                   	ret    
c00108b1:	90                   	nop

c00108b2 <VgaText::getCursorY()>:
c00108b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108b6:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c00108bc:	c3                   	ret    
c00108bd:	90                   	nop

c00108be <VgaText::setCursor(int, int)>:
c00108be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00108c6:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c00108cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00108d0:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c00108d6:	e9 77 fd ff ff       	jmp    c0010652 <VgaText::updateCursor()>
c00108db:	90                   	nop

c00108dc <VgaText::setCursorX(int)>:
c00108dc:	83 ec 10             	sub    esp,0x10
c00108df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108e3:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c00108e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108ed:	50                   	push   eax
c00108ee:	e8 cb ff ff ff       	call   c00108be <VgaText::setCursor(int, int)>
c00108f3:	83 c4 1c             	add    esp,0x1c
c00108f6:	c3                   	ret    
c00108f7:	90                   	nop

c00108f8 <VgaText::setCursorY(int)>:
c00108f8:	83 ec 10             	sub    esp,0x10
c00108fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108ff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010903:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c0010909:	50                   	push   eax
c001090a:	e8 af ff ff ff       	call   c00108be <VgaText::setCursor(int, int)>
c001090f:	83 c4 1c             	add    esp,0x1c
c0010912:	c3                   	ret    
c0010913:	90                   	nop

c0010914 <VgaText::incrementCursor(bool)>:
c0010914:	56                   	push   esi
c0010915:	53                   	push   ebx
c0010916:	51                   	push   ecx
c0010917:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001091b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001091f:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c0010925:	40                   	inc    eax
c0010926:	83 f8 50             	cmp    eax,0x50
c0010929:	74 08                	je     c0010933 <VgaText::incrementCursor(bool)+0x1f>
c001092b:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c0010931:	eb 33                	jmp    c0010966 <VgaText::incrementCursor(bool)+0x52>
c0010933:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010939:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010943:	8d 50 01             	lea    edx,[eax+0x1]
c0010946:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c001094c:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010952:	75 12                	jne    c0010966 <VgaText::incrementCursor(bool)+0x52>
c0010954:	83 ec 0c             	sub    esp,0xc
c0010957:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c001095d:	53                   	push   ebx
c001095e:	e8 3d fe ff ff       	call   c00107a0 <VgaText::scrollScreen()>
c0010963:	83 c4 10             	add    esp,0x10
c0010966:	89 f0                	mov    eax,esi
c0010968:	84 c0                	test   al,al
c001096a:	74 0c                	je     c0010978 <VgaText::incrementCursor(bool)+0x64>
c001096c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010970:	5a                   	pop    edx
c0010971:	5b                   	pop    ebx
c0010972:	5e                   	pop    esi
c0010973:	e9 da fc ff ff       	jmp    c0010652 <VgaText::updateCursor()>
c0010978:	58                   	pop    eax
c0010979:	5b                   	pop    ebx
c001097a:	5e                   	pop    esi
c001097b:	c3                   	ret    

c001097c <VgaText::updateRAMUsageDisplay(int)>:
c001097c:	56                   	push   esi
c001097d:	8b 35 00 d5 02 c0    	mov    esi,DWORD PTR ds:0xc002d500
c0010983:	53                   	push   ebx
c0010984:	bb 0a 00 00 00       	mov    ebx,0xa
c0010989:	6a 0f                	push   0xf
c001098b:	6a 00                	push   0x0
c001098d:	e8 fc fd ff ff       	call   c001078e <VgaText::combineColours(unsigned char, unsigned char)>
c0010992:	5a                   	pop    edx
c0010993:	59                   	pop    ecx
c0010994:	0f b6 c8             	movzx  ecx,al
c0010997:	51                   	push   ecx
c0010998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001099c:	99                   	cdq    
c001099d:	f7 fb                	idiv   ebx
c001099f:	89 d3                	mov    ebx,edx
c00109a1:	83 c0 30             	add    eax,0x30
c00109a4:	83 c3 30             	add    ebx,0x30
c00109a7:	0f be c0             	movsx  eax,al
c00109aa:	0f b6 db             	movzx  ebx,bl
c00109ad:	50                   	push   eax
c00109ae:	e8 81 fe ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c00109b3:	5a                   	pop    edx
c00109b4:	5a                   	pop    edx
c00109b5:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c00109bc:	51                   	push   ecx
c00109bd:	53                   	push   ebx
c00109be:	e8 71 fe ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c00109c3:	5b                   	pop    ebx
c00109c4:	5a                   	pop    edx
c00109c5:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c00109cc:	51                   	push   ecx
c00109cd:	6a 25                	push   0x25
c00109cf:	e8 60 fe ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c00109d4:	59                   	pop    ecx
c00109d5:	5b                   	pop    ebx
c00109d6:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c00109dd:	5b                   	pop    ebx
c00109de:	5e                   	pop    esi
c00109df:	c3                   	ret    

c00109e0 <VgaText::updateDiskUsage()>:
c00109e0:	55                   	push   ebp
c00109e1:	bd 10 27 00 00       	mov    ebp,0x2710
c00109e6:	57                   	push   edi
c00109e7:	8b 3d 00 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d500
c00109ed:	56                   	push   esi
c00109ee:	53                   	push   ebx
c00109ef:	6a 0f                	push   0xf
c00109f1:	6a 00                	push   0x0
c00109f3:	e8 96 fd ff ff       	call   c001078e <VgaText::combineColours(unsigned char, unsigned char)>
c00109f8:	5a                   	pop    edx
c00109f9:	0f b6 d8             	movzx  ebx,al
c00109fc:	59                   	pop    ecx
c00109fd:	8b 35 28 29 03 c0    	mov    esi,DWORD PTR ds:0xc0032928
c0010a03:	53                   	push   ebx
c0010a04:	b9 0a 00 00 00       	mov    ecx,0xa
c0010a09:	89 f0                	mov    eax,esi
c0010a0b:	99                   	cdq    
c0010a0c:	f7 fd                	idiv   ebp
c0010a0e:	99                   	cdq    
c0010a0f:	f7 f9                	idiv   ecx
c0010a11:	8d 42 30             	lea    eax,[edx+0x30]
c0010a14:	0f b6 c0             	movzx  eax,al
c0010a17:	50                   	push   eax
c0010a18:	e8 17 fe ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a1d:	5d                   	pop    ebp
c0010a1e:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a23:	5a                   	pop    edx
c0010a24:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010a28:	53                   	push   ebx
c0010a29:	89 f0                	mov    eax,esi
c0010a2b:	99                   	cdq    
c0010a2c:	f7 fd                	idiv   ebp
c0010a2e:	99                   	cdq    
c0010a2f:	f7 f9                	idiv   ecx
c0010a31:	8d 42 30             	lea    eax,[edx+0x30]
c0010a34:	0f b6 c0             	movzx  eax,al
c0010a37:	50                   	push   eax
c0010a38:	e8 f7 fd ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a3d:	5d                   	pop    ebp
c0010a3e:	bd 64 00 00 00       	mov    ebp,0x64
c0010a43:	5a                   	pop    edx
c0010a44:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c0010a4b:	53                   	push   ebx
c0010a4c:	89 f0                	mov    eax,esi
c0010a4e:	99                   	cdq    
c0010a4f:	f7 fd                	idiv   ebp
c0010a51:	99                   	cdq    
c0010a52:	f7 f9                	idiv   ecx
c0010a54:	8d 42 30             	lea    eax,[edx+0x30]
c0010a57:	0f b6 c0             	movzx  eax,al
c0010a5a:	50                   	push   eax
c0010a5b:	e8 d4 fd ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a60:	5d                   	pop    ebp
c0010a61:	5a                   	pop    edx
c0010a62:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010a69:	53                   	push   ebx
c0010a6a:	89 f0                	mov    eax,esi
c0010a6c:	99                   	cdq    
c0010a6d:	f7 f9                	idiv   ecx
c0010a6f:	89 d6                	mov    esi,edx
c0010a71:	99                   	cdq    
c0010a72:	f7 f9                	idiv   ecx
c0010a74:	8d 42 30             	lea    eax,[edx+0x30]
c0010a77:	0f b6 c0             	movzx  eax,al
c0010a7a:	50                   	push   eax
c0010a7b:	e8 b4 fd ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a80:	5d                   	pop    ebp
c0010a81:	5a                   	pop    edx
c0010a82:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010a89:	53                   	push   ebx
c0010a8a:	8d 46 30             	lea    eax,[esi+0x30]
c0010a8d:	0f b6 f0             	movzx  esi,al
c0010a90:	56                   	push   esi
c0010a91:	e8 9e fd ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a96:	5e                   	pop    esi
c0010a97:	8b 35 24 29 03 c0    	mov    esi,DWORD PTR ds:0xc0032924
c0010a9d:	5d                   	pop    ebp
c0010a9e:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010aa5:	bd 10 27 00 00       	mov    ebp,0x2710
c0010aaa:	53                   	push   ebx
c0010aab:	89 f0                	mov    eax,esi
c0010aad:	99                   	cdq    
c0010aae:	f7 fd                	idiv   ebp
c0010ab0:	99                   	cdq    
c0010ab1:	f7 f9                	idiv   ecx
c0010ab3:	8d 42 30             	lea    eax,[edx+0x30]
c0010ab6:	0f b6 c0             	movzx  eax,al
c0010ab9:	50                   	push   eax
c0010aba:	e8 75 fd ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010abf:	5a                   	pop    edx
c0010ac0:	5d                   	pop    ebp
c0010ac1:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010ac8:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010acd:	53                   	push   ebx
c0010ace:	89 f0                	mov    eax,esi
c0010ad0:	99                   	cdq    
c0010ad1:	f7 fd                	idiv   ebp
c0010ad3:	99                   	cdq    
c0010ad4:	f7 f9                	idiv   ecx
c0010ad6:	8d 42 30             	lea    eax,[edx+0x30]
c0010ad9:	0f b6 c0             	movzx  eax,al
c0010adc:	50                   	push   eax
c0010add:	e8 52 fd ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ae2:	5a                   	pop    edx
c0010ae3:	5d                   	pop    ebp
c0010ae4:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010aeb:	bd 64 00 00 00       	mov    ebp,0x64
c0010af0:	53                   	push   ebx
c0010af1:	89 f0                	mov    eax,esi
c0010af3:	99                   	cdq    
c0010af4:	f7 fd                	idiv   ebp
c0010af6:	99                   	cdq    
c0010af7:	f7 f9                	idiv   ecx
c0010af9:	83 c2 30             	add    edx,0x30
c0010afc:	0f b6 d2             	movzx  edx,dl
c0010aff:	52                   	push   edx
c0010b00:	e8 2f fd ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b05:	5a                   	pop    edx
c0010b06:	5d                   	pop    ebp
c0010b07:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010b0e:	53                   	push   ebx
c0010b0f:	89 f0                	mov    eax,esi
c0010b11:	99                   	cdq    
c0010b12:	f7 f9                	idiv   ecx
c0010b14:	89 d6                	mov    esi,edx
c0010b16:	99                   	cdq    
c0010b17:	f7 f9                	idiv   ecx
c0010b19:	8d 42 30             	lea    eax,[edx+0x30]
c0010b1c:	0f b6 c0             	movzx  eax,al
c0010b1f:	50                   	push   eax
c0010b20:	e8 0f fd ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b25:	5a                   	pop    edx
c0010b26:	59                   	pop    ecx
c0010b27:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010b2e:	53                   	push   ebx
c0010b2f:	8d 46 30             	lea    eax,[esi+0x30]
c0010b32:	0f b6 f0             	movzx  esi,al
c0010b35:	56                   	push   esi
c0010b36:	e8 f9 fc ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b3b:	5b                   	pop    ebx
c0010b3c:	5e                   	pop    esi
c0010b3d:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010b44:	5b                   	pop    ebx
c0010b45:	5e                   	pop    esi
c0010b46:	5f                   	pop    edi
c0010b47:	5d                   	pop    ebp
c0010b48:	c3                   	ret    
c0010b49:	90                   	nop

c0010b4a <VgaText::updateTitle()>:
c0010b4a:	53                   	push   ebx
c0010b4b:	31 c0                	xor    eax,eax
c0010b4d:	83 ec 58             	sub    esp,0x58
c0010b50:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010b54:	89 e1                	mov    ecx,esp
c0010b56:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010b5a:	40                   	inc    eax
c0010b5b:	83 f8 50             	cmp    eax,0x50
c0010b5e:	75 f6                	jne    c0010b56 <VgaText::updateTitle()+0xc>
c0010b60:	31 c0                	xor    eax,eax
c0010b62:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010b69:	84 db                	test   bl,bl
c0010b6b:	74 06                	je     c0010b73 <VgaText::updateTitle()+0x29>
c0010b6d:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010b70:	40                   	inc    eax
c0010b71:	eb ef                	jmp    c0010b62 <VgaText::updateTitle()+0x18>
c0010b73:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010b79:	85 c0                	test   eax,eax
c0010b7b:	74 09                	je     c0010b86 <VgaText::updateTitle()+0x3c>
c0010b7d:	53                   	push   ebx
c0010b7e:	53                   	push   ebx
c0010b7f:	51                   	push   ecx
c0010b80:	52                   	push   edx
c0010b81:	ff d0                	call   eax
c0010b83:	83 c4 10             	add    esp,0x10
c0010b86:	e8 55 fe ff ff       	call   c00109e0 <VgaText::updateDiskUsage()>
c0010b8b:	83 c4 58             	add    esp,0x58
c0010b8e:	5b                   	pop    ebx
c0010b8f:	c3                   	ret    

c0010b90 <VgaText::setTitleTextColour(VgaColour)>:
c0010b90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b94:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b98:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010b9e:	eb aa                	jmp    c0010b4a <VgaText::updateTitle()>

c0010ba0 <VgaText::setTitleColour(VgaColour)>:
c0010ba0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ba4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ba8:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010bae:	eb 9a                	jmp    c0010b4a <VgaText::updateTitle()>

c0010bb0 <VgaText::setTitle(char*)>:
c0010bb0:	53                   	push   ebx
c0010bb1:	83 ec 10             	sub    esp,0x10
c0010bb4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010bb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bbc:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010bc2:	50                   	push   eax
c0010bc3:	e8 6c fc fe ff       	call   c0000834 <strcpy>
c0010bc8:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010bcc:	83 c4 18             	add    esp,0x18
c0010bcf:	5b                   	pop    ebx
c0010bd0:	e9 75 ff ff ff       	jmp    c0010b4a <VgaText::updateTitle()>
c0010bd5:	90                   	nop

c0010bd6 <VgaText::decrementCursor(bool)>:
c0010bd6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010bda:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010bde:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010be4:	85 c0                	test   eax,eax
c0010be6:	74 07                	je     c0010bef <VgaText::decrementCursor(bool)+0x19>
c0010be8:	48                   	dec    eax
c0010be9:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010bef:	84 c9                	test   cl,cl
c0010bf1:	74 09                	je     c0010bfc <VgaText::decrementCursor(bool)+0x26>
c0010bf3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010bf7:	e9 56 fa ff ff       	jmp    c0010652 <VgaText::updateCursor()>
c0010bfc:	c3                   	ret    
c0010bfd:	90                   	nop

c0010bfe <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010bfe:	53                   	push   ebx
c0010bff:	83 ec 08             	sub    esp,0x8
c0010c02:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010c06:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c0a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010c0e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010c12:	3c 07                	cmp    al,0x7
c0010c14:	75 2a                	jne    c0010c40 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010c16:	a1 50 e7 02 c0       	mov    eax,ds:0xc002e750
c0010c1b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010c23:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010c2b:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010c33:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010c37:	83 c4 08             	add    esp,0x8
c0010c3a:	5b                   	pop    ebx
c0010c3b:	e9 f2 30 00 00       	jmp    c0013d32 <Buzzer::beep(int, int, bool)>
c0010c40:	3c 0d                	cmp    al,0xd
c0010c42:	75 0c                	jne    c0010c50 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010c44:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c4e:	eb 3b                	jmp    c0010c8b <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010c50:	3c 0a                	cmp    al,0xa
c0010c52:	75 40                	jne    c0010c94 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010c54:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010c5a:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c64:	8d 50 01             	lea    edx,[eax+0x1]
c0010c67:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010c6d:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010c73:	75 12                	jne    c0010c87 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010c75:	83 ec 0c             	sub    esp,0xc
c0010c78:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010c7e:	53                   	push   ebx
c0010c7f:	e8 1c fb ff ff       	call   c00107a0 <VgaText::scrollScreen()>
c0010c84:	83 c4 10             	add    esp,0x10
c0010c87:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010c8b:	83 c4 08             	add    esp,0x8
c0010c8e:	5b                   	pop    ebx
c0010c8f:	e9 be f9 ff ff       	jmp    c0010652 <VgaText::updateCursor()>
c0010c94:	3c 08                	cmp    al,0x8
c0010c96:	75 31                	jne    c0010cc9 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010c98:	50                   	push   eax
c0010c99:	50                   	push   eax
c0010c9a:	6a 01                	push   0x1
c0010c9c:	53                   	push   ebx
c0010c9d:	e8 34 ff ff ff       	call   c0010bd6 <VgaText::decrementCursor(bool)>
c0010ca2:	5a                   	pop    edx
c0010ca3:	59                   	pop    ecx
c0010ca4:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010caa:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010cb0:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010cb6:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010cbc:	6a 20                	push   0x20
c0010cbe:	53                   	push   ebx
c0010cbf:	e8 82 fb ff ff       	call   c0010846 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010cc4:	83 c4 28             	add    esp,0x28
c0010cc7:	5b                   	pop    ebx
c0010cc8:	c3                   	ret    
c0010cc9:	83 ec 08             	sub    esp,0x8
c0010ccc:	0f be c0             	movsx  eax,al
c0010ccf:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010cd5:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010cdb:	51                   	push   ecx
c0010cdc:	52                   	push   edx
c0010cdd:	50                   	push   eax
c0010cde:	53                   	push   ebx
c0010cdf:	e8 62 fb ff ff       	call   c0010846 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010ce4:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010ce8:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010cf0:	83 c4 28             	add    esp,0x28
c0010cf3:	5b                   	pop    ebx
c0010cf4:	e9 1b fc ff ff       	jmp    c0010914 <VgaText::incrementCursor(bool)>
c0010cf9:	90                   	nop

c0010cfa <VgaText::isShowingCursor()>:
c0010cfa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cfe:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010d04:	c3                   	ret    
c0010d05:	90                   	nop

c0010d06 <VgaText::isBlinkDisabled()>:
c0010d06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d0a:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010d10:	83 f0 01             	xor    eax,0x1
c0010d13:	c3                   	ret    

c0010d14 <VgaText::setCursorHeight(int)>:
c0010d14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d18:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010d1c:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010d22:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010d29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010d2d:	e9 3a f9 ff ff       	jmp    c001066c <VgaText::showCursor(bool)>

c0010d32 <VgaText::getCursorHeight()>:
c0010d32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d36:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010d3c:	c3                   	ret    

c0010d3d <setActiveTerminal(VgaText*)>:
c0010d3d:	53                   	push   ebx
c0010d3e:	83 ec 08             	sub    esp,0x8
c0010d41:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d45:	85 db                	test   ebx,ebx
c0010d47:	75 11                	jne    c0010d5a <setActiveTerminal(VgaText*)+0x1d>
c0010d49:	c7 44 24 10 c0 a3 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a3c0
c0010d51:	83 c4 08             	add    esp,0x8
c0010d54:	5b                   	pop    ebx
c0010d55:	e9 7b 98 00 00       	jmp    c001a5d5 <Krnl::panic(char const*)>
c0010d5a:	50                   	push   eax
c0010d5b:	50                   	push   eax
c0010d5c:	53                   	push   ebx
c0010d5d:	68 ce a3 02 c0       	push   0xc002a3ce
c0010d62:	e8 cd 21 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0010d67:	a1 a4 e6 02 c0       	mov    eax,ds:0xc002e6a4
c0010d6c:	83 c4 10             	add    esp,0x10
c0010d6f:	85 c0                	test   eax,eax
c0010d71:	74 0c                	je     c0010d7f <setActiveTerminal(VgaText*)+0x42>
c0010d73:	83 ec 0c             	sub    esp,0xc
c0010d76:	50                   	push   eax
c0010d77:	e8 d6 f8 ff ff       	call   c0010652 <VgaText::updateCursor()>
c0010d7c:	83 c4 10             	add    esp,0x10
c0010d7f:	89 1d a4 e6 02 c0    	mov    DWORD PTR ds:0xc002e6a4,ebx
c0010d85:	51                   	push   ecx
c0010d86:	51                   	push   ecx
c0010d87:	53                   	push   ebx
c0010d88:	68 e6 a3 02 c0       	push   0xc002a3e6
c0010d8d:	e8 a2 21 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0010d92:	83 c4 0c             	add    esp,0xc
c0010d95:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010d9b:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010da1:	53                   	push   ebx
c0010da2:	e8 17 fb ff ff       	call   c00108be <VgaText::setCursor(int, int)>
c0010da7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010daa:	e8 57 ff ff ff       	call   c0010d06 <VgaText::isBlinkDisabled()>
c0010daf:	5a                   	pop    edx
c0010db0:	0f b6 c0             	movzx  eax,al
c0010db3:	59                   	pop    ecx
c0010db4:	50                   	push   eax
c0010db5:	53                   	push   ebx
c0010db6:	e8 c1 f8 ff ff       	call   c001067c <VgaText::disableBlink(bool)>
c0010dbb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010dbe:	e8 6f ff ff ff       	call   c0010d32 <VgaText::getCursorHeight()>
c0010dc3:	5a                   	pop    edx
c0010dc4:	59                   	pop    ecx
c0010dc5:	50                   	push   eax
c0010dc6:	53                   	push   ebx
c0010dc7:	e8 48 ff ff ff       	call   c0010d14 <VgaText::setCursorHeight(int)>
c0010dcc:	83 c4 10             	add    esp,0x10
c0010dcf:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010dd6:	75 0a                	jne    c0010de2 <setActiveTerminal(VgaText*)+0xa5>
c0010dd8:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010de2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010de6:	83 c4 08             	add    esp,0x8
c0010de9:	5b                   	pop    ebx
c0010dea:	e9 0f f8 ff ff       	jmp    c00105fe <VgaText::load()>

c0010def <doTerminalCycle()>:
c0010def:	83 ec 18             	sub    esp,0x18
c0010df2:	a1 a0 e6 02 c0       	mov    eax,ds:0xc002e6a0
c0010df7:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010dfd:	50                   	push   eax
c0010dfe:	a3 a0 e6 02 c0       	mov    ds:0xc002e6a0,eax
c0010e03:	e8 35 ff ff ff       	call   c0010d3d <setActiveTerminal(VgaText*)>
c0010e08:	83 c4 1c             	add    esp,0x1c
c0010e0b:	c3                   	ret    

c0010e0c <VgaText::doUpdate()>:
c0010e0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e10:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010e16:	85 c0                	test   eax,eax
c0010e18:	74 02                	je     c0010e1c <VgaText::doUpdate()+0x10>
c0010e1a:	ff e0                	jmp    eax
c0010e1c:	c3                   	ret    
c0010e1d:	90                   	nop

c0010e1e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010e1e:	55                   	push   ebp
c0010e1f:	57                   	push   edi
c0010e20:	56                   	push   esi
c0010e21:	53                   	push   ebx
c0010e22:	83 ec 1c             	sub    esp,0x1c
c0010e25:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010e29:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e2e:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010e35:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010e38:	50                   	push   eax
c0010e39:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e3e:	50                   	push   eax
c0010e3f:	e8 4a f9 ff ff       	call   c001078e <VgaText::combineColours(unsigned char, unsigned char)>
c0010e44:	59                   	pop    ecx
c0010e45:	0f b6 c0             	movzx  eax,al
c0010e48:	5b                   	pop    ebx
c0010e49:	31 c9                	xor    ecx,ecx
c0010e4b:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e53:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010e57:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e5d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e61:	0f b7 db             	movzx  ebx,bx
c0010e64:	01 db                	add    ebx,ebx
c0010e66:	01 fb                	add    ebx,edi
c0010e68:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010e6b:	84 c0                	test   al,al
c0010e6d:	0f 84 38 01 00 00    	je     c0010fab <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010e73:	3c 0d                	cmp    al,0xd
c0010e75:	75 0f                	jne    c0010e86 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010e77:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e81:	e9 1f 01 00 00       	jmp    c0010fa5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e86:	3c 0a                	cmp    al,0xa
c0010e88:	75 5b                	jne    c0010ee5 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010e8a:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010e90:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e9a:	8d 48 01             	lea    ecx,[eax+0x1]
c0010e9d:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010ea3:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010ea9:	75 12                	jne    c0010ebd <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010eab:	83 ec 0c             	sub    esp,0xc
c0010eae:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010eb4:	55                   	push   ebp
c0010eb5:	e8 e6 f8 ff ff       	call   c00107a0 <VgaText::scrollScreen()>
c0010eba:	83 c4 10             	add    esp,0x10
c0010ebd:	83 ec 0c             	sub    esp,0xc
c0010ec0:	55                   	push   ebp
c0010ec1:	e8 8c f7 ff ff       	call   c0010652 <VgaText::updateCursor()>
c0010ec6:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010ece:	83 c4 10             	add    esp,0x10
c0010ed1:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010ed7:	31 c9                	xor    ecx,ecx
c0010ed9:	0f b7 db             	movzx  ebx,bx
c0010edc:	01 db                	add    ebx,ebx
c0010ede:	01 fb                	add    ebx,edi
c0010ee0:	e9 c0 00 00 00       	jmp    c0010fa5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ee5:	3c 08                	cmp    al,0x8
c0010ee7:	75 4e                	jne    c0010f37 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010ee9:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010eed:	53                   	push   ebx
c0010eee:	53                   	push   ebx
c0010eef:	6a 01                	push   0x1
c0010ef1:	55                   	push   ebp
c0010ef2:	e8 df fc ff ff       	call   c0010bd6 <VgaText::decrementCursor(bool)>
c0010ef7:	58                   	pop    eax
c0010ef8:	5a                   	pop    edx
c0010ef9:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010eff:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f05:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010f0b:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010f11:	6a 20                	push   0x20
c0010f13:	55                   	push   ebp
c0010f14:	e8 2d f9 ff ff       	call   c0010846 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010f19:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f21:	83 c4 20             	add    esp,0x20
c0010f24:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010f2a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010f2e:	0f b7 db             	movzx  ebx,bx
c0010f31:	01 db                	add    ebx,ebx
c0010f33:	01 fb                	add    ebx,edi
c0010f35:	eb 6e                	jmp    c0010fa5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010f37:	51                   	push   ecx
c0010f38:	51                   	push   ecx
c0010f39:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f3d:	50                   	push   eax
c0010f3e:	e8 f1 f8 ff ff       	call   c0010834 <VgaText::combineCharAndColour(char, unsigned char)>
c0010f43:	83 c4 10             	add    esp,0x10
c0010f46:	66 89 03             	mov    WORD PTR [ebx],ax
c0010f49:	39 2d a4 e6 02 c0    	cmp    DWORD PTR ds:0xc002e6a4,ebp
c0010f4f:	75 2a                	jne    c0010f7b <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f51:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010f57:	85 c0                	test   eax,eax
c0010f59:	74 20                	je     c0010f7b <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f5b:	52                   	push   edx
c0010f5c:	52                   	push   edx
c0010f5d:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f63:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f69:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f6d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f71:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010f74:	51                   	push   ecx
c0010f75:	55                   	push   ebp
c0010f76:	ff d0                	call   eax
c0010f78:	83 c4 20             	add    esp,0x20
c0010f7b:	83 c3 02             	add    ebx,0x2
c0010f7e:	50                   	push   eax
c0010f7f:	50                   	push   eax
c0010f80:	6a 00                	push   0x0
c0010f82:	55                   	push   ebp
c0010f83:	e8 8c f9 ff ff       	call   c0010914 <VgaText::incrementCursor(bool)>
c0010f88:	83 c4 10             	add    esp,0x10
c0010f8b:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010f92:	75 0f                	jne    c0010fa3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010f94:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f9c:	0f b7 db             	movzx  ebx,bx
c0010f9f:	01 db                	add    ebx,ebx
c0010fa1:	01 fb                	add    ebx,edi
c0010fa3:	b1 01                	mov    cl,0x1
c0010fa5:	46                   	inc    esi
c0010fa6:	e9 bd fe ff ff       	jmp    c0010e68 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010fab:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010faf:	83 ec 0c             	sub    esp,0xc
c0010fb2:	55                   	push   ebp
c0010fb3:	e8 9a f6 ff ff       	call   c0010652 <VgaText::updateCursor()>
c0010fb8:	83 c4 10             	add    esp,0x10
c0010fbb:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010fbf:	84 c9                	test   cl,cl
c0010fc1:	74 0c                	je     c0010fcf <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010fc3:	83 ec 0c             	sub    esp,0xc
c0010fc6:	55                   	push   ebp
c0010fc7:	e8 40 fe ff ff       	call   c0010e0c <VgaText::doUpdate()>
c0010fcc:	83 c4 10             	add    esp,0x10
c0010fcf:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010fd6:	83 c4 1c             	add    esp,0x1c
c0010fd9:	5b                   	pop    ebx
c0010fda:	5e                   	pop    esi
c0010fdb:	5f                   	pop    edi
c0010fdc:	5d                   	pop    ebp
c0010fdd:	c3                   	ret    

c0010fde <VgaText::clearScreen()>:
c0010fde:	57                   	push   edi
c0010fdf:	56                   	push   esi
c0010fe0:	31 f6                	xor    esi,esi
c0010fe2:	53                   	push   ebx
c0010fe3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010fe7:	52                   	push   edx
c0010fe8:	6a 00                	push   0x0
c0010fea:	6a 00                	push   0x0
c0010fec:	53                   	push   ebx
c0010fed:	e8 cc f8 ff ff       	call   c00108be <VgaText::setCursor(int, int)>
c0010ff2:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010ff9:	83 c4 10             	add    esp,0x10
c0010ffc:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0011002:	7e 26                	jle    c001102a <VgaText::clearScreen()+0x4c>
c0011004:	31 ff                	xor    edi,edi
c0011006:	50                   	push   eax
c0011007:	50                   	push   eax
c0011008:	56                   	push   esi
c0011009:	57                   	push   edi
c001100a:	47                   	inc    edi
c001100b:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0011011:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0011017:	6a 20                	push   0x20
c0011019:	53                   	push   ebx
c001101a:	e8 27 f8 ff ff       	call   c0010846 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001101f:	83 c4 20             	add    esp,0x20
c0011022:	83 ff 50             	cmp    edi,0x50
c0011025:	75 df                	jne    c0011006 <VgaText::clearScreen()+0x28>
c0011027:	46                   	inc    esi
c0011028:	eb d2                	jmp    c0010ffc <VgaText::clearScreen()+0x1e>
c001102a:	83 ec 0c             	sub    esp,0xc
c001102d:	53                   	push   ebx
c001102e:	e8 d9 fd ff ff       	call   c0010e0c <VgaText::doUpdate()>
c0011033:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c001103a:	83 c4 10             	add    esp,0x10
c001103d:	5b                   	pop    ebx
c001103e:	5e                   	pop    esi
c001103f:	5f                   	pop    edi
c0011040:	c3                   	ret    
c0011041:	90                   	nop

c0011042 <VgaText::putchar(char)>:
c0011042:	56                   	push   esi
c0011043:	53                   	push   ebx
c0011044:	83 ec 14             	sub    esp,0x14
c0011047:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001104b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001104f:	3c 5b                	cmp    al,0x5b
c0011051:	75 21                	jne    c0011074 <VgaText::putchar(char)+0x32>
c0011053:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c001105a:	74 28                	je     c0011084 <VgaText::putchar(char)+0x42>
c001105c:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0011065:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c001106f:	e9 e2 00 00 00       	jmp    c0011156 <VgaText::putchar(char)+0x114>
c0011074:	3c 1b                	cmp    al,0x1b
c0011076:	75 0c                	jne    c0011084 <VgaText::putchar(char)+0x42>
c0011078:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c001107f:	e9 d2 00 00 00       	jmp    c0011156 <VgaText::putchar(char)+0x114>
c0011084:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c001108a:	84 c9                	test   cl,cl
c001108c:	0f 84 ab 00 00 00    	je     c001113d <VgaText::putchar(char)+0xfb>
c0011092:	8d 50 c0             	lea    edx,[eax-0x40]
c0011095:	80 fa 3e             	cmp    dl,0x3e
c0011098:	0f 87 82 00 00 00    	ja     c0011120 <VgaText::putchar(char)+0xde>
c001109e:	3c 6d                	cmp    al,0x6d
c00110a0:	75 4d                	jne    c00110ef <VgaText::putchar(char)+0xad>
c00110a2:	31 f6                	xor    esi,esi
c00110a4:	31 d2                	xor    edx,edx
c00110a6:	31 c0                	xor    eax,eax
c00110a8:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c00110ae:	7e 30                	jle    c00110e0 <VgaText::putchar(char)+0x9e>
c00110b0:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c00110b8:	80 fa 3b             	cmp    dl,0x3b
c00110bb:	75 17                	jne    c00110d4 <VgaText::putchar(char)+0x92>
c00110bd:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00110c1:	50                   	push   eax
c00110c2:	53                   	push   ebx
c00110c3:	e8 ee f5 ff ff       	call   c00106b6 <VgaText::doANSI_SGR(int)>
c00110c8:	59                   	pop    ecx
c00110c9:	31 d2                	xor    edx,edx
c00110cb:	58                   	pop    eax
c00110cc:	31 c0                	xor    eax,eax
c00110ce:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00110d2:	eb 09                	jmp    c00110dd <VgaText::putchar(char)+0x9b>
c00110d4:	6b c0 0a             	imul   eax,eax,0xa
c00110d7:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00110db:	88 ca                	mov    dl,cl
c00110dd:	46                   	inc    esi
c00110de:	eb c8                	jmp    c00110a8 <VgaText::putchar(char)+0x66>
c00110e0:	84 d2                	test   dl,dl
c00110e2:	74 31                	je     c0011115 <VgaText::putchar(char)+0xd3>
c00110e4:	50                   	push   eax
c00110e5:	53                   	push   ebx
c00110e6:	e8 cb f5 ff ff       	call   c00106b6 <VgaText::doANSI_SGR(int)>
c00110eb:	58                   	pop    eax
c00110ec:	5a                   	pop    edx
c00110ed:	eb 26                	jmp    c0011115 <VgaText::putchar(char)+0xd3>
c00110ef:	3c 4a                	cmp    al,0x4a
c00110f1:	75 22                	jne    c0011115 <VgaText::putchar(char)+0xd3>
c00110f3:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c00110fa:	75 19                	jne    c0011115 <VgaText::putchar(char)+0xd3>
c00110fc:	83 ec 0c             	sub    esp,0xc
c00110ff:	53                   	push   ebx
c0011100:	e8 d9 fe ff ff       	call   c0010fde <VgaText::clearScreen()>
c0011105:	83 c4 0c             	add    esp,0xc
c0011108:	6a 00                	push   0x0
c001110a:	6a 00                	push   0x0
c001110c:	53                   	push   ebx
c001110d:	e8 ac f7 ff ff       	call   c00108be <VgaText::setCursor(int, int)>
c0011112:	83 c4 10             	add    esp,0x10
c0011115:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c001111e:	eb 36                	jmp    c0011156 <VgaText::putchar(char)+0x114>
c0011120:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0011126:	83 fa 0e             	cmp    edx,0xe
c0011129:	7f 2b                	jg     c0011156 <VgaText::putchar(char)+0x114>
c001112b:	8d 4a 01             	lea    ecx,[edx+0x1]
c001112e:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0011134:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c001113b:	eb 19                	jmp    c0011156 <VgaText::putchar(char)+0x114>
c001113d:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0011143:	0f be c0             	movsx  eax,al
c0011146:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c001114c:	50                   	push   eax
c001114d:	53                   	push   ebx
c001114e:	e8 ab fa ff ff       	call   c0010bfe <VgaText::putchar(char, VgaColour, VgaColour)>
c0011153:	83 c4 10             	add    esp,0x10
c0011156:	83 c4 14             	add    esp,0x14
c0011159:	5b                   	pop    ebx
c001115a:	5e                   	pop    esi
c001115b:	c3                   	ret    

c001115c <VgaText::puts(char const*)>:
c001115c:	53                   	push   ebx
c001115d:	83 ec 08             	sub    esp,0x8
c0011160:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011164:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0011167:	84 c0                	test   al,al
c0011169:	74 12                	je     c001117d <VgaText::puts(char const*)+0x21>
c001116b:	43                   	inc    ebx
c001116c:	51                   	push   ecx
c001116d:	51                   	push   ecx
c001116e:	50                   	push   eax
c001116f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011173:	e8 ca fe ff ff       	call   c0011042 <VgaText::putchar(char)>
c0011178:	83 c4 10             	add    esp,0x10
c001117b:	eb e7                	jmp    c0011164 <VgaText::puts(char const*)+0x8>
c001117d:	83 c4 08             	add    esp,0x8
c0011180:	5b                   	pop    ebx
c0011181:	c3                   	ret    

c0011182 <VgaText::putx(unsigned int)>:
c0011182:	57                   	push   edi
c0011183:	b9 11 00 00 00       	mov    ecx,0x11
c0011188:	56                   	push   esi
c0011189:	be 02 a4 02 c0       	mov    esi,0xc002a402
c001118e:	53                   	push   ebx
c001118f:	83 ec 20             	sub    esp,0x20
c0011192:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011196:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c001119a:	fc                   	cld    
c001119b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001119d:	be 08 00 00 00       	mov    esi,0x8
c00111a2:	50                   	push   eax
c00111a3:	50                   	push   eax
c00111a4:	89 d8                	mov    eax,ebx
c00111a6:	c1 e3 04             	shl    ebx,0x4
c00111a9:	c1 e8 1c             	shr    eax,0x1c
c00111ac:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00111b1:	50                   	push   eax
c00111b2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00111b6:	e8 87 fe ff ff       	call   c0011042 <VgaText::putchar(char)>
c00111bb:	83 c4 10             	add    esp,0x10
c00111be:	4e                   	dec    esi
c00111bf:	75 e1                	jne    c00111a2 <VgaText::putx(unsigned int)+0x20>
c00111c1:	83 c4 20             	add    esp,0x20
c00111c4:	5b                   	pop    ebx
c00111c5:	5e                   	pop    esi
c00111c6:	5f                   	pop    edi
c00111c7:	c3                   	ret    

c00111c8 <VgaText::VgaText(char const*)>:
c00111c8:	57                   	push   edi
c00111c9:	56                   	push   esi
c00111ca:	53                   	push   ebx
c00111cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111cf:	83 ec 08             	sub    esp,0x8
c00111d2:	6a 00                	push   0x0
c00111d4:	50                   	push   eax
c00111d5:	e8 6e 05 00 00       	call   c0011748 <UnixFile::UnixFile(int)>
c00111da:	83 c4 10             	add    esp,0x10
c00111dd:	ba 68 a4 02 c0       	mov    edx,0xc002a468
c00111e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111e6:	89 10                	mov    DWORD PTR [eax],edx
c00111e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ec:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c00111f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111fa:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0011204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011208:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c001120f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011213:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c001121a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001121e:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0011228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001122c:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0011236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001123a:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0011241:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011245:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c001124c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011250:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0011256:	bb 80 e6 02 c0       	mov    ebx,0xc002e680
c001125b:	b8 08 00 00 00       	mov    eax,0x8
c0011260:	fc                   	cld    
c0011261:	89 d7                	mov    edi,edx
c0011263:	89 de                	mov    esi,ebx
c0011265:	89 c1                	mov    ecx,eax
c0011267:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011269:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001126d:	05 1e 10 00 00       	add    eax,0x101e
c0011272:	83 ec 08             	sub    esp,0x8
c0011275:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011279:	50                   	push   eax
c001127a:	e8 b5 f5 fe ff       	call   c0000834 <strcpy>
c001127f:	83 c4 10             	add    esp,0x10
c0011282:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011286:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0011290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011294:	83 c0 0c             	add    eax,0xc
c0011297:	83 ec 04             	sub    esp,0x4
c001129a:	68 00 0f 00 00       	push   0xf00
c001129f:	6a 00                	push   0x0
c00112a1:	50                   	push   eax
c00112a2:	e8 d1 f4 fe ff       	call   c0000778 <memset>
c00112a7:	83 c4 10             	add    esp,0x10
c00112aa:	83 ec 04             	sub    esp,0x4
c00112ad:	6a 00                	push   0x0
c00112af:	6a 07                	push   0x7
c00112b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112b5:	e8 b4 f4 ff ff       	call   c001076e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00112ba:	83 c4 10             	add    esp,0x10
c00112bd:	83 ec 08             	sub    esp,0x8
c00112c0:	6a 02                	push   0x2
c00112c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112c6:	e8 49 fa ff ff       	call   c0010d14 <VgaText::setCursorHeight(int)>
c00112cb:	83 c4 10             	add    esp,0x10
c00112ce:	83 ec 04             	sub    esp,0x4
c00112d1:	6a 00                	push   0x0
c00112d3:	6a 00                	push   0x0
c00112d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112d9:	e8 e0 f5 ff ff       	call   c00108be <VgaText::setCursor(int, int)>
c00112de:	83 c4 10             	add    esp,0x10
c00112e1:	83 ec 08             	sub    esp,0x8
c00112e4:	6a 01                	push   0x1
c00112e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112ea:	e8 7d f3 ff ff       	call   c001066c <VgaText::showCursor(bool)>
c00112ef:	83 c4 10             	add    esp,0x10
c00112f2:	83 ec 08             	sub    esp,0x8
c00112f5:	6a 01                	push   0x1
c00112f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112fb:	e8 7c f3 ff ff       	call   c001067c <VgaText::disableBlink(bool)>
c0011300:	83 c4 10             	add    esp,0x10
c0011303:	83 ec 0c             	sub    esp,0xc
c0011306:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001130a:	e8 cf fc ff ff       	call   c0010fde <VgaText::clearScreen()>
c001130f:	83 c4 10             	add    esp,0x10
c0011312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011316:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c001131d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011321:	05 9e 10 00 00       	add    eax,0x109e
c0011326:	83 ec 04             	sub    esp,0x4
c0011329:	68 96 00 00 00       	push   0x96
c001132e:	6a 00                	push   0x0
c0011330:	50                   	push   eax
c0011331:	e8 42 f4 fe ff       	call   c0000778 <memset>
c0011336:	83 c4 10             	add    esp,0x10
c0011339:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001133d:	05 34 11 00 00       	add    eax,0x1134
c0011342:	83 ec 04             	sub    esp,0x4
c0011345:	68 2c 01 00 00       	push   0x12c
c001134a:	6a 00                	push   0x0
c001134c:	50                   	push   eax
c001134d:	e8 26 f4 fe ff       	call   c0000778 <memset>
c0011352:	83 c4 10             	add    esp,0x10
c0011355:	90                   	nop
c0011356:	5b                   	pop    ebx
c0011357:	5e                   	pop    esi
c0011358:	5f                   	pop    edi
c0011359:	c3                   	ret    

c001135a <VgaText::receiveKey(unsigned char)>:
c001135a:	55                   	push   ebp
c001135b:	57                   	push   edi
c001135c:	56                   	push   esi
c001135d:	53                   	push   ebx
c001135e:	83 ec 1c             	sub    esp,0x1c
c0011361:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011365:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011369:	84 db                	test   bl,bl
c001136b:	0f 84 c9 00 00 00    	je     c001143a <VgaText::receiveKey(unsigned char)+0xe0>
c0011371:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0011377:	80 fb 08             	cmp    bl,0x8
c001137a:	75 2c                	jne    c00113a8 <VgaText::receiveKey(unsigned char)+0x4e>
c001137c:	83 ec 0c             	sub    esp,0xc
c001137f:	57                   	push   edi
c0011380:	e8 0f f4 fe ff       	call   c0000794 <strlen>
c0011385:	83 c4 10             	add    esp,0x10
c0011388:	85 c0                	test   eax,eax
c001138a:	74 41                	je     c00113cd <VgaText::receiveKey(unsigned char)+0x73>
c001138c:	50                   	push   eax
c001138d:	50                   	push   eax
c001138e:	6a 08                	push   0x8
c0011390:	56                   	push   esi
c0011391:	e8 ac fc ff ff       	call   c0011042 <VgaText::putchar(char)>
c0011396:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011399:	e8 f6 f3 fe ff       	call   c0000794 <strlen>
c001139e:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c00113a6:	eb 22                	jmp    c00113ca <VgaText::receiveKey(unsigned char)+0x70>
c00113a8:	0f be c3             	movsx  eax,bl
c00113ab:	52                   	push   edx
c00113ac:	52                   	push   edx
c00113ad:	50                   	push   eax
c00113ae:	56                   	push   esi
c00113af:	e8 8e fc ff ff       	call   c0011042 <VgaText::putchar(char)>
c00113b4:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c00113b8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00113bd:	59                   	pop    ecx
c00113be:	5d                   	pop    ebp
c00113bf:	8d 44 24 16          	lea    eax,[esp+0x16]
c00113c3:	50                   	push   eax
c00113c4:	57                   	push   edi
c00113c5:	e8 aa f5 fe ff       	call   c0000974 <strcat>
c00113ca:	83 c4 10             	add    esp,0x10
c00113cd:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c00113d4:	75 05                	jne    c00113db <VgaText::receiveKey(unsigned char)+0x81>
c00113d6:	80 fb 0a             	cmp    bl,0xa
c00113d9:	75 53                	jne    c001142e <VgaText::receiveKey(unsigned char)+0xd4>
c00113db:	83 ec 0c             	sub    esp,0xc
c00113de:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c00113e4:	53                   	push   ebx
c00113e5:	e8 aa f3 fe ff       	call   c0000794 <strlen>
c00113ea:	89 3c 24             	mov    DWORD PTR [esp],edi
c00113ed:	89 c5                	mov    ebp,eax
c00113ef:	e8 a0 f3 fe ff       	call   c0000794 <strlen>
c00113f4:	83 c4 10             	add    esp,0x10
c00113f7:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c00113fb:	3d 2c 01 00 00       	cmp    eax,0x12c
c0011400:	76 10                	jbe    c0011412 <VgaText::receiveKey(unsigned char)+0xb8>
c0011402:	83 ec 0c             	sub    esp,0xc
c0011405:	68 13 a4 02 c0       	push   0xc002a413
c001140a:	e8 c6 91 00 00       	call   c001a5d5 <Krnl::panic(char const*)>
c001140f:	83 c4 10             	add    esp,0x10
c0011412:	50                   	push   eax
c0011413:	50                   	push   eax
c0011414:	57                   	push   edi
c0011415:	53                   	push   ebx
c0011416:	e8 59 f5 fe ff       	call   c0000974 <strcat>
c001141b:	83 c4 0c             	add    esp,0xc
c001141e:	68 96 00 00 00       	push   0x96
c0011423:	6a 00                	push   0x0
c0011425:	57                   	push   edi
c0011426:	e8 4d f3 fe ff       	call   c0000778 <memset>
c001142b:	83 c4 10             	add    esp,0x10
c001142e:	83 ec 0c             	sub    esp,0xc
c0011431:	56                   	push   esi
c0011432:	e8 d5 f9 ff ff       	call   c0010e0c <VgaText::doUpdate()>
c0011437:	83 c4 10             	add    esp,0x10
c001143a:	83 c4 1c             	add    esp,0x1c
c001143d:	5b                   	pop    ebx
c001143e:	5e                   	pop    esi
c001143f:	5f                   	pop    edi
c0011440:	5d                   	pop    ebp
c0011441:	c3                   	ret    

c0011442 <VgaText::write(unsigned long long, void*, int*)>:
c0011442:	55                   	push   ebp
c0011443:	57                   	push   edi
c0011444:	56                   	push   esi
c0011445:	53                   	push   ebx
c0011446:	83 ec 0c             	sub    esp,0xc
c0011449:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001144d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011451:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011455:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c001145c:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c001145f:	39 eb                	cmp    ebx,ebp
c0011461:	74 13                	je     c0011476 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011463:	43                   	inc    ebx
c0011464:	50                   	push   eax
c0011465:	50                   	push   eax
c0011466:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c001146a:	50                   	push   eax
c001146b:	56                   	push   esi
c001146c:	e8 d1 fb ff ff       	call   c0011042 <VgaText::putchar(char)>
c0011471:	83 c4 10             	add    esp,0x10
c0011474:	eb e9                	jmp    c001145f <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0011476:	83 ec 0c             	sub    esp,0xc
c0011479:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0011480:	56                   	push   esi
c0011481:	e8 86 f9 ff ff       	call   c0010e0c <VgaText::doUpdate()>
c0011486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001148a:	89 38                	mov    DWORD PTR [eax],edi
c001148c:	83 c4 1c             	add    esp,0x1c
c001148f:	31 c0                	xor    eax,eax
c0011491:	5b                   	pop    ebx
c0011492:	5e                   	pop    esi
c0011493:	5f                   	pop    edi
c0011494:	5d                   	pop    ebp
c0011495:	c3                   	ret    

c0011496 <newTerminal(char*)>:
c0011496:	83 ec 28             	sub    esp,0x28
c0011499:	68 60 12 00 00       	push   0x1260
c001149e:	e8 9d e3 ff ff       	call   c000f840 <malloc>
c00114a3:	5a                   	pop    edx
c00114a4:	59                   	pop    ecx
c00114a5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00114a9:	50                   	push   eax
c00114aa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00114ae:	e8 15 fd ff ff       	call   c00111c8 <VgaText::VgaText(char const*)>
c00114b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114b7:	83 c4 2c             	add    esp,0x2c
c00114ba:	c3                   	ret    
c00114bb:	90                   	nop

c00114bc <TSS::TSS()>:
c00114bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114c0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00114c7:	90                   	nop
c00114c8:	c3                   	ret    
c00114c9:	90                   	nop

c00114ca <TSS::setESP(unsigned long)>:
c00114ca:	55                   	push   ebp
c00114cb:	89 e5                	mov    ebp,esp
c00114cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114d3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00114d6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114d9:	90                   	nop
c00114da:	5d                   	pop    ebp
c00114db:	c3                   	ret    

c00114dc <TSS::flush()>:
c00114dc:	55                   	push   ebp
c00114dd:	89 e5                	mov    ebp,esp
c00114df:	83 ec 10             	sub    esp,0x10
c00114e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00114e7:	83 c8 03             	or     eax,0x3
c00114ea:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00114ee:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00114f2:	66 89 d0             	mov    ax,dx
c00114f5:	0f 00 d8             	ltr    ax
c00114f8:	90                   	nop
c00114f9:	c9                   	leave  
c00114fa:	c3                   	ret    
c00114fb:	90                   	nop

c00114fc <TSS::setup(unsigned long, unsigned long)>:
c00114fc:	55                   	push   ebp
c00114fd:	89 e5                	mov    ebp,esp
c00114ff:	83 ec 18             	sub    esp,0x18
c0011502:	83 ec 0c             	sub    esp,0xc
c0011505:	6a 68                	push   0x68
c0011507:	e8 34 e3 ff ff       	call   c000f840 <malloc>
c001150c:	83 c4 10             	add    esp,0x10
c001150f:	89 c2                	mov    edx,eax
c0011511:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011514:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011517:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001151a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001151d:	83 ec 04             	sub    esp,0x4
c0011520:	6a 68                	push   0x68
c0011522:	6a 00                	push   0x0
c0011524:	50                   	push   eax
c0011525:	e8 4e f2 fe ff       	call   c0000778 <memset>
c001152a:	83 c4 10             	add    esp,0x10
c001152d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011530:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011533:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0011539:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001153c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001153f:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0011545:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011548:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001154b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001154e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011551:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011554:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011557:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c001155d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011560:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011563:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011569:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001156c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001156f:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011575:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011578:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001157b:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011581:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011584:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011587:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c001158d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011590:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011593:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0011599:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001159c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001159f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00115a2:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00115a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115ab:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00115ae:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115b7:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00115be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115c1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115c4:	0f 20 da             	mov    edx,cr3
c00115c7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00115ca:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00115cd:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00115d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115d3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115d6:	83 ec 08             	sub    esp,0x8
c00115d9:	50                   	push   eax
c00115da:	8d 45 ec             	lea    eax,[ebp-0x14]
c00115dd:	50                   	push   eax
c00115de:	e8 3b da ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c00115e3:	83 c4 10             	add    esp,0x10
c00115e6:	83 ec 08             	sub    esp,0x8
c00115e9:	6a 68                	push   0x68
c00115eb:	8d 45 ec             	lea    eax,[ebp-0x14]
c00115ee:	50                   	push   eax
c00115ef:	e8 46 da ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c00115f4:	83 c4 10             	add    esp,0x10
c00115f7:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00115fb:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00115fe:	83 e0 0f             	and    eax,0xf
c0011601:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011604:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011607:	83 c8 40             	or     eax,0x40
c001160a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001160d:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0011612:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011618:	05 78 01 00 00       	add    eax,0x178
c001161d:	83 ec 04             	sub    esp,0x4
c0011620:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011623:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0011626:	50                   	push   eax
c0011627:	e8 42 da ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c001162c:	83 c4 10             	add    esp,0x10
c001162f:	89 c2                	mov    edx,eax
c0011631:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011634:	89 10                	mov    DWORD PTR [eax],edx
c0011636:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c001163b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011641:	05 78 01 00 00       	add    eax,0x178
c0011646:	83 ec 0c             	sub    esp,0xc
c0011649:	50                   	push   eax
c001164a:	e8 63 da ff ff       	call   c000f0b2 <GDT::flush()>
c001164f:	83 c4 10             	add    esp,0x10
c0011652:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011655:	8b 00                	mov    eax,DWORD PTR [eax]
c0011657:	83 ec 08             	sub    esp,0x8
c001165a:	50                   	push   eax
c001165b:	68 7c a4 02 c0       	push   0xc002a47c
c0011660:	e8 cf 18 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0011665:	83 c4 10             	add    esp,0x10
c0011668:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001166b:	8b 00                	mov    eax,DWORD PTR [eax]
c001166d:	c9                   	leave  
c001166e:	c3                   	ret    
c001166f:	90                   	nop

c0011670 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011670:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011674:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011678:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001167b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011680:	75 08                	jne    c001168a <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011682:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011688:	eb 38                	jmp    c00116c2 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c001168a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001168f:	75 17                	jne    c00116a8 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011691:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011696:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011699:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001169f:	8b 10                	mov    edx,DWORD PTR [eax]
c00116a1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116a5:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00116a8:	89 c1                	mov    ecx,eax
c00116aa:	83 e1 fd             	and    ecx,0xfffffffd
c00116ad:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00116b3:	74 cd                	je     c0011682 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00116b5:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00116ba:	83 e0 ef             	and    eax,0xffffffef
c00116bd:	83 f8 08             	cmp    eax,0x8
c00116c0:	76 c0                	jbe    c0011682 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00116c2:	31 c0                	xor    eax,eax
c00116c4:	c3                   	ret    
c00116c5:	90                   	nop

c00116c6 <ReservedFilename::isAtty()>:
c00116c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116ca:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00116cd:	31 c0                	xor    eax,eax
c00116cf:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00116d5:	74 09                	je     c00116e0 <ReservedFilename::isAtty()+0x1a>
c00116d7:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00116dd:	0f 94 c0             	sete   al
c00116e0:	c3                   	ret    
c00116e1:	90                   	nop

c00116e2 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00116e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116e6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00116ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116ed:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00116f1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00116f6:	75 08                	jne    c0011700 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00116f8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00116fe:	eb 3d                	jmp    c001173d <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011700:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011705:	75 17                	jne    c001171e <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0011707:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001170c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001170f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011715:	8b 10                	mov    edx,DWORD PTR [eax]
c0011717:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001171b:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c001171e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011723:	75 04                	jne    c0011729 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011725:	89 0a                	mov    DWORD PTR [edx],ecx
c0011727:	eb 14                	jmp    c001173d <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011729:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c001172e:	74 c8                	je     c00116f8 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011730:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011735:	83 e0 ef             	and    eax,0xffffffef
c0011738:	83 f8 08             	cmp    eax,0x8
c001173b:	76 bb                	jbe    c00116f8 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001173d:	31 c0                	xor    eax,eax
c001173f:	c3                   	ret    

c0011740 <UnixFile::getFileDescriptor()>:
c0011740:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011744:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011747:	c3                   	ret    

c0011748 <UnixFile::UnixFile(int)>:
c0011748:	53                   	push   ebx
c0011749:	83 ec 28             	sub    esp,0x28
c001174c:	ba 68 a5 02 c0       	mov    edx,0xc002a568
c0011751:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011755:	89 10                	mov    DWORD PTR [eax],edx
c0011757:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c001175f:	0f 8f 8c 01 00 00    	jg     c00118f1 <UnixFile::UnixFile(int)+0x1a9>
c0011765:	a1 60 d5 02 c0       	mov    eax,ds:0xc002d560
c001176a:	8d 50 01             	lea    edx,[eax+0x1]
c001176d:	89 15 60 d5 02 c0    	mov    DWORD PTR ds:0xc002d560,edx
c0011773:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011777:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001177a:	83 ec 08             	sub    esp,0x8
c001177d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011781:	68 38 e7 02 c0       	push   0xc002e738
c0011786:	e8 c5 6f 01 00       	call   c0028750 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001178b:	83 c4 10             	add    esp,0x10
c001178e:	a0 34 e7 02 c0       	mov    al,ds:0xc002e734
c0011793:	83 f0 01             	xor    eax,0x1
c0011796:	84 c0                	test   al,al
c0011798:	0f 84 54 01 00 00    	je     c00118f2 <UnixFile::UnixFile(int)+0x1aa>
c001179e:	c6 05 34 e7 02 c0 01 	mov    BYTE PTR ds:0xc002e734,0x1
c00117a5:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00117ad:	83 ec 0c             	sub    esp,0xc
c00117b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00117b4:	e8 87 e0 ff ff       	call   c000f840 <malloc>
c00117b9:	83 c4 10             	add    esp,0x10
c00117bc:	89 c3                	mov    ebx,eax
c00117be:	83 ec 08             	sub    esp,0x8
c00117c1:	68 03 ff ff 0f       	push   0xfffff03
c00117c6:	53                   	push   ebx
c00117c7:	e8 2c 01 00 00       	call   c00118f8 <ReservedFilename::ReservedFilename(int)>
c00117cc:	83 c4 10             	add    esp,0x10
c00117cf:	89 1d 2c e7 02 c0    	mov    DWORD PTR ds:0xc002e72c,ebx
c00117d5:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00117dd:	83 ec 0c             	sub    esp,0xc
c00117e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117e4:	e8 57 e0 ff ff       	call   c000f840 <malloc>
c00117e9:	83 c4 10             	add    esp,0x10
c00117ec:	89 c3                	mov    ebx,eax
c00117ee:	83 ec 08             	sub    esp,0x8
c00117f1:	68 01 ff ff 0f       	push   0xfffff01
c00117f6:	53                   	push   ebx
c00117f7:	e8 fc 00 00 00       	call   c00118f8 <ReservedFilename::ReservedFilename(int)>
c00117fc:	83 c4 10             	add    esp,0x10
c00117ff:	89 1d 30 e7 02 c0    	mov    DWORD PTR ds:0xc002e730,ebx
c0011805:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c001180d:	83 ec 0c             	sub    esp,0xc
c0011810:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011814:	e8 27 e0 ff ff       	call   c000f840 <malloc>
c0011819:	83 c4 10             	add    esp,0x10
c001181c:	89 c3                	mov    ebx,eax
c001181e:	83 ec 08             	sub    esp,0x8
c0011821:	68 00 ff ff 0f       	push   0xfffff00
c0011826:	53                   	push   ebx
c0011827:	e8 cc 00 00 00       	call   c00118f8 <ReservedFilename::ReservedFilename(int)>
c001182c:	83 c4 10             	add    esp,0x10
c001182f:	89 1d 24 e7 02 c0    	mov    DWORD PTR ds:0xc002e724,ebx
c0011835:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c001183d:	83 ec 0c             	sub    esp,0xc
c0011840:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011844:	e8 f7 df ff ff       	call   c000f840 <malloc>
c0011849:	83 c4 10             	add    esp,0x10
c001184c:	89 c3                	mov    ebx,eax
c001184e:	83 ec 08             	sub    esp,0x8
c0011851:	68 02 ff ff 0f       	push   0xfffff02
c0011856:	53                   	push   ebx
c0011857:	e8 9c 00 00 00       	call   c00118f8 <ReservedFilename::ReservedFilename(int)>
c001185c:	83 c4 10             	add    esp,0x10
c001185f:	89 1d 28 e7 02 c0    	mov    DWORD PTR ds:0xc002e728,ebx
c0011865:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001186d:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011872:	7f 7e                	jg     c00118f2 <UnixFile::UnixFile(int)+0x1aa>
c0011874:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c001187c:	83 ec 0c             	sub    esp,0xc
c001187f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011883:	e8 b8 df ff ff       	call   c000f840 <malloc>
c0011888:	83 c4 10             	add    esp,0x10
c001188b:	89 c3                	mov    ebx,eax
c001188d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011891:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011896:	83 ec 08             	sub    esp,0x8
c0011899:	50                   	push   eax
c001189a:	53                   	push   ebx
c001189b:	e8 58 00 00 00       	call   c00118f8 <ReservedFilename::ReservedFilename(int)>
c00118a0:	83 c4 10             	add    esp,0x10
c00118a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118a7:	89 1c 85 00 e7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1900],ebx
c00118ae:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00118b6:	83 ec 0c             	sub    esp,0xc
c00118b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00118bd:	e8 7e df ff ff       	call   c000f840 <malloc>
c00118c2:	83 c4 10             	add    esp,0x10
c00118c5:	89 c3                	mov    ebx,eax
c00118c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118cb:	05 20 ff ff 0f       	add    eax,0xfffff20
c00118d0:	83 ec 08             	sub    esp,0x8
c00118d3:	50                   	push   eax
c00118d4:	53                   	push   ebx
c00118d5:	e8 1e 00 00 00       	call   c00118f8 <ReservedFilename::ReservedFilename(int)>
c00118da:	83 c4 10             	add    esp,0x10
c00118dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118e1:	89 1c 85 c0 e6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1940],ebx
c00118e8:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118ec:	e9 7c ff ff ff       	jmp    c001186d <UnixFile::UnixFile(int)+0x125>
c00118f1:	90                   	nop
c00118f2:	83 c4 28             	add    esp,0x28
c00118f5:	5b                   	pop    ebx
c00118f6:	c3                   	ret    
c00118f7:	90                   	nop

c00118f8 <ReservedFilename::ReservedFilename(int)>:
c00118f8:	83 ec 0c             	sub    esp,0xc
c00118fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118ff:	83 ec 08             	sub    esp,0x8
c0011902:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011906:	50                   	push   eax
c0011907:	e8 3c fe ff ff       	call   c0011748 <UnixFile::UnixFile(int)>
c001190c:	83 c4 10             	add    esp,0x10
c001190f:	ba 84 a5 02 c0       	mov    edx,0xc002a584
c0011914:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011918:	89 10                	mov    DWORD PTR [eax],edx
c001191a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001191e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011922:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011925:	90                   	nop
c0011926:	83 c4 0c             	add    esp,0xc
c0011929:	c3                   	ret    

c001192a <UnixFile::~UnixFile()>:
c001192a:	83 ec 1c             	sub    esp,0x1c
c001192d:	ba 68 a5 02 c0       	mov    edx,0xc002a568
c0011932:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011936:	89 10                	mov    DWORD PTR [eax],edx
c0011938:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001193c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001193f:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011944:	7f 73                	jg     c00119b9 <UnixFile::~UnixFile()+0x8f>
c0011946:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001194e:	83 ec 0c             	sub    esp,0xc
c0011951:	68 38 e7 02 c0       	push   0xc002e738
c0011956:	e8 c9 6e 01 00       	call   c0028824 <LinkedList<UnixFile>::getFirstElement()>
c001195b:	83 c4 10             	add    esp,0x10
c001195e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011962:	83 ec 0c             	sub    esp,0xc
c0011965:	68 38 e7 02 c0       	push   0xc002e738
c001196a:	e8 bd 6e 01 00       	call   c002882c <LinkedList<UnixFile>::removeFirst()>
c001196f:	83 c4 10             	add    esp,0x10
c0011972:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011976:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001197a:	74 40                	je     c00119bc <UnixFile::~UnixFile()+0x92>
c001197c:	83 ec 08             	sub    esp,0x8
c001197f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011983:	68 38 e7 02 c0       	push   0xc002e738
c0011988:	e8 c3 6d 01 00       	call   c0028750 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001198d:	83 c4 10             	add    esp,0x10
c0011990:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011994:	8d 50 01             	lea    edx,[eax+0x1]
c0011997:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001199b:	3d 88 13 00 00       	cmp    eax,0x1388
c00119a0:	0f 94 c0             	sete   al
c00119a3:	84 c0                	test   al,al
c00119a5:	74 a7                	je     c001194e <UnixFile::~UnixFile()+0x24>
c00119a7:	83 ec 0c             	sub    esp,0xc
c00119aa:	68 40 a5 02 c0       	push   0xc002a540
c00119af:	e8 21 8c 00 00       	call   c001a5d5 <Krnl::panic(char const*)>
c00119b4:	83 c4 10             	add    esp,0x10
c00119b7:	eb 95                	jmp    c001194e <UnixFile::~UnixFile()+0x24>
c00119b9:	90                   	nop
c00119ba:	eb 01                	jmp    c00119bd <UnixFile::~UnixFile()+0x93>
c00119bc:	90                   	nop
c00119bd:	90                   	nop
c00119be:	83 c4 1c             	add    esp,0x1c
c00119c1:	c3                   	ret    

c00119c2 <UnixFile::~UnixFile()>:
c00119c2:	83 ec 0c             	sub    esp,0xc
c00119c5:	83 ec 0c             	sub    esp,0xc
c00119c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119cc:	e8 59 ff ff ff       	call   c001192a <UnixFile::~UnixFile()>
c00119d1:	83 c4 10             	add    esp,0x10
c00119d4:	83 ec 08             	sub    esp,0x8
c00119d7:	6a 0c                	push   0xc
c00119d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119dd:	e8 72 14 00 00       	call   c0012e54 <operator delete(void*, unsigned long)>
c00119e2:	83 c4 10             	add    esp,0x10
c00119e5:	83 c4 0c             	add    esp,0xc
c00119e8:	c3                   	ret    
c00119e9:	90                   	nop

c00119ea <ReservedFilename::~ReservedFilename()>:
c00119ea:	83 ec 0c             	sub    esp,0xc
c00119ed:	ba 84 a5 02 c0       	mov    edx,0xc002a584
c00119f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119f6:	89 10                	mov    DWORD PTR [eax],edx
c00119f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119fc:	83 ec 0c             	sub    esp,0xc
c00119ff:	50                   	push   eax
c0011a00:	e8 25 ff ff ff       	call   c001192a <UnixFile::~UnixFile()>
c0011a05:	83 c4 10             	add    esp,0x10
c0011a08:	90                   	nop
c0011a09:	83 c4 0c             	add    esp,0xc
c0011a0c:	c3                   	ret    
c0011a0d:	90                   	nop

c0011a0e <ReservedFilename::~ReservedFilename()>:
c0011a0e:	83 ec 0c             	sub    esp,0xc
c0011a11:	83 ec 0c             	sub    esp,0xc
c0011a14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a18:	e8 cd ff ff ff       	call   c00119ea <ReservedFilename::~ReservedFilename()>
c0011a1d:	83 c4 10             	add    esp,0x10
c0011a20:	83 ec 08             	sub    esp,0x8
c0011a23:	6a 0c                	push   0xc
c0011a25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a29:	e8 26 14 00 00       	call   c0012e54 <operator delete(void*, unsigned long)>
c0011a2e:	83 c4 10             	add    esp,0x10
c0011a31:	83 c4 0c             	add    esp,0xc
c0011a34:	c3                   	ret    

c0011a35 <getFromFileDescriptor(int)>:
c0011a35:	53                   	push   ebx
c0011a36:	83 ec 08             	sub    esp,0x8
c0011a39:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011a3d:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011a43:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011a49:	7f 2c                	jg     c0011a77 <getFromFileDescriptor(int)+0x42>
c0011a4b:	83 ec 0c             	sub    esp,0xc
c0011a4e:	68 38 e7 02 c0       	push   0xc002e738
c0011a53:	e8 cc 6d 01 00       	call   c0028824 <LinkedList<UnixFile>::getFirstElement()>
c0011a58:	83 c4 10             	add    esp,0x10
c0011a5b:	85 c0                	test   eax,eax
c0011a5d:	75 04                	jne    c0011a63 <getFromFileDescriptor(int)+0x2e>
c0011a5f:	31 c0                	xor    eax,eax
c0011a61:	eb 6e                	jmp    c0011ad1 <getFromFileDescriptor(int)+0x9c>
c0011a63:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011a66:	74 69                	je     c0011ad1 <getFromFileDescriptor(int)+0x9c>
c0011a68:	52                   	push   edx
c0011a69:	52                   	push   edx
c0011a6a:	50                   	push   eax
c0011a6b:	68 38 e7 02 c0       	push   0xc002e738
c0011a70:	e8 59 6e 01 00       	call   c00288ce <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011a75:	eb e1                	jmp    c0011a58 <getFromFileDescriptor(int)+0x23>
c0011a77:	a1 2c e7 02 c0       	mov    eax,ds:0xc002e72c
c0011a7c:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011a82:	74 4d                	je     c0011ad1 <getFromFileDescriptor(int)+0x9c>
c0011a84:	a1 30 e7 02 c0       	mov    eax,ds:0xc002e730
c0011a89:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011a8f:	74 40                	je     c0011ad1 <getFromFileDescriptor(int)+0x9c>
c0011a91:	a1 28 e7 02 c0       	mov    eax,ds:0xc002e728
c0011a96:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011a9c:	74 33                	je     c0011ad1 <getFromFileDescriptor(int)+0x9c>
c0011a9e:	a1 24 e7 02 c0       	mov    eax,ds:0xc002e724
c0011aa3:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011aa9:	74 26                	je     c0011ad1 <getFromFileDescriptor(int)+0x9c>
c0011aab:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011ab1:	83 f8 08             	cmp    eax,0x8
c0011ab4:	77 09                	ja     c0011abf <getFromFileDescriptor(int)+0x8a>
c0011ab6:	8b 04 85 00 e7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1900]
c0011abd:	eb 12                	jmp    c0011ad1 <getFromFileDescriptor(int)+0x9c>
c0011abf:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011ac5:	83 fb 08             	cmp    ebx,0x8
c0011ac8:	77 95                	ja     c0011a5f <getFromFileDescriptor(int)+0x2a>
c0011aca:	8b 04 9d c0 e6 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1940]
c0011ad1:	83 c4 08             	add    esp,0x8
c0011ad4:	5b                   	pop    ebx
c0011ad5:	c3                   	ret    

c0011ad6 <__static_initialization_and_destruction_0(int, int)>:
c0011ad6:	83 ec 0c             	sub    esp,0xc
c0011ad9:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011ade:	75 34                	jne    c0011b14 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011ae0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011ae8:	75 2a                	jne    c0011b14 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011aea:	83 ec 0c             	sub    esp,0xc
c0011aed:	68 38 e7 02 c0       	push   0xc002e738
c0011af2:	e8 01 6c 01 00       	call   c00286f8 <LinkedList<UnixFile>::LinkedList()>
c0011af7:	83 c4 10             	add    esp,0x10
c0011afa:	83 ec 04             	sub    esp,0x4
c0011afd:	68 f0 d4 02 c0       	push   0xc002d4f0
c0011b02:	68 38 e7 02 c0       	push   0xc002e738
c0011b07:	68 f6 86 02 c0       	push   0xc00286f6
c0011b0c:	e8 bd 12 00 00       	call   c0012dce <__cxa_atexit>
c0011b11:	83 c4 10             	add    esp,0x10
c0011b14:	90                   	nop
c0011b15:	83 c4 0c             	add    esp,0xc
c0011b18:	c3                   	ret    

c0011b19 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011b19:	83 ec 0c             	sub    esp,0xc
c0011b1c:	83 ec 08             	sub    esp,0x8
c0011b1f:	68 ff ff 00 00       	push   0xffff
c0011b24:	6a 01                	push   0x1
c0011b26:	e8 ab ff ff ff       	call   c0011ad6 <__static_initialization_and_destruction_0(int, int)>
c0011b2b:	83 c4 10             	add    esp,0x10
c0011b2e:	83 c4 0c             	add    esp,0xc
c0011b31:	c3                   	ret    

c0011b32 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011b32:	53                   	push   ebx
c0011b33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011b37:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b3b:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011b41:	89 c8                	mov    eax,ecx
c0011b43:	d1 e8                	shr    eax,1
c0011b45:	03 05 68 d5 02 c0    	add    eax,DWORD PTR ds:0xc002d568
c0011b4b:	83 e1 01             	and    ecx,0x1
c0011b4e:	8a 10                	mov    dl,BYTE PTR [eax]
c0011b50:	75 09                	jne    c0011b5b <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011b52:	83 e2 f0             	and    edx,0xfffffff0
c0011b55:	09 da                	or     edx,ebx
c0011b57:	88 10                	mov    BYTE PTR [eax],dl
c0011b59:	5b                   	pop    ebx
c0011b5a:	c3                   	ret    
c0011b5b:	c1 e3 04             	shl    ebx,0x4
c0011b5e:	83 e2 0f             	and    edx,0xf
c0011b61:	09 da                	or     edx,ebx
c0011b63:	88 10                	mov    BYTE PTR [eax],dl
c0011b65:	5b                   	pop    ebx
c0011b66:	c3                   	ret    

c0011b67 <Virt::getPageState(unsigned long)>:
c0011b67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b6b:	8b 0d 68 d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d568
c0011b71:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011b77:	89 d0                	mov    eax,edx
c0011b79:	d1 e8                	shr    eax,1
c0011b7b:	83 e2 01             	and    edx,0x1
c0011b7e:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011b81:	75 04                	jne    c0011b87 <Virt::getPageState(unsigned long)+0x20>
c0011b83:	83 e0 0f             	and    eax,0xf
c0011b86:	c3                   	ret    
c0011b87:	c0 e8 04             	shr    al,0x4
c0011b8a:	c3                   	ret    

c0011b8b <Virt::allocateKernelVirtualPages(int)>:
c0011b8b:	55                   	push   ebp
c0011b8c:	31 ed                	xor    ebp,ebp
c0011b8e:	57                   	push   edi
c0011b8f:	56                   	push   esi
c0011b90:	53                   	push   ebx
c0011b91:	31 db                	xor    ebx,ebx
c0011b93:	83 ec 1c             	sub    esp,0x1c
c0011b96:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011b9a:	8b 3d 64 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d564
c0011ba0:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011ba5:	57                   	push   edi
c0011ba6:	e8 bc ff ff ff       	call   c0011b67 <Virt::getPageState(unsigned long)>
c0011bab:	5a                   	pop    edx
c0011bac:	84 c0                	test   al,al
c0011bae:	75 3a                	jne    c0011bea <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011bb0:	85 db                	test   ebx,ebx
c0011bb2:	75 02                	jne    c0011bb6 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011bb4:	89 fd                	mov    ebp,edi
c0011bb6:	43                   	inc    ebx
c0011bb7:	39 f3                	cmp    ebx,esi
c0011bb9:	74 5a                	je     c0011c15 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011bbb:	47                   	inc    edi
c0011bbc:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011bc2:	76 31                	jbe    c0011bf5 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011bc4:	c7 05 64 d5 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d564,0xc8000
c0011bce:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011bd3:	75 28                	jne    c0011bfd <Virt::allocateKernelVirtualPages(int)+0x72>
c0011bd5:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011bda:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011bdf:	57                   	push   edi
c0011be0:	e8 82 ff ff ff       	call   c0011b67 <Virt::getPageState(unsigned long)>
c0011be5:	5a                   	pop    edx
c0011be6:	84 c0                	test   al,al
c0011be8:	74 c6                	je     c0011bb0 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011bea:	31 db                	xor    ebx,ebx
c0011bec:	47                   	inc    edi
c0011bed:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011bf3:	77 cf                	ja     c0011bc4 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011bf5:	89 3d 64 d5 02 c0    	mov    DWORD PTR ds:0xc002d564,edi
c0011bfb:	eb a8                	jmp    c0011ba5 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011bfd:	83 ec 0c             	sub    esp,0xc
c0011c00:	68 98 a5 02 c0       	push   0xc002a598
c0011c05:	e8 cb 89 00 00       	call   c001a5d5 <Krnl::panic(char const*)>
c0011c0a:	8b 3d 64 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d564
c0011c10:	83 c4 10             	add    esp,0x10
c0011c13:	eb 90                	jmp    c0011ba5 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011c15:	89 2d 64 d5 02 c0    	mov    DWORD PTR ds:0xc002d564,ebp
c0011c1b:	4b                   	dec    ebx
c0011c1c:	74 5f                	je     c0011c7d <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011c1e:	85 f6                	test   esi,esi
c0011c20:	74 3d                	je     c0011c5f <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c22:	89 e8                	mov    eax,ebp
c0011c24:	31 db                	xor    ebx,ebx
c0011c26:	8d 7e ff             	lea    edi,[esi-0x1]
c0011c29:	eb 14                	jmp    c0011c3f <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011c2b:	6a 01                	push   0x1
c0011c2d:	43                   	inc    ebx
c0011c2e:	50                   	push   eax
c0011c2f:	e8 fe fe ff ff       	call   c0011b32 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c34:	58                   	pop    eax
c0011c35:	39 f3                	cmp    ebx,esi
c0011c37:	5a                   	pop    edx
c0011c38:	74 25                	je     c0011c5f <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c3a:	a1 64 d5 02 c0       	mov    eax,ds:0xc002d564
c0011c3f:	8d 50 01             	lea    edx,[eax+0x1]
c0011c42:	85 db                	test   ebx,ebx
c0011c44:	89 15 64 d5 02 c0    	mov    DWORD PTR ds:0xc002d564,edx
c0011c4a:	74 20                	je     c0011c6c <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011c4c:	39 df                	cmp    edi,ebx
c0011c4e:	75 db                	jne    c0011c2b <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011c50:	6a 03                	push   0x3
c0011c52:	43                   	inc    ebx
c0011c53:	50                   	push   eax
c0011c54:	e8 d9 fe ff ff       	call   c0011b32 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c59:	59                   	pop    ecx
c0011c5a:	39 f3                	cmp    ebx,esi
c0011c5c:	58                   	pop    eax
c0011c5d:	75 db                	jne    c0011c3a <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c5f:	83 c4 1c             	add    esp,0x1c
c0011c62:	89 e8                	mov    eax,ebp
c0011c64:	5b                   	pop    ebx
c0011c65:	c1 e0 0c             	shl    eax,0xc
c0011c68:	5e                   	pop    esi
c0011c69:	5f                   	pop    edi
c0011c6a:	5d                   	pop    ebp
c0011c6b:	c3                   	ret    
c0011c6c:	6a 02                	push   0x2
c0011c6e:	bb 01 00 00 00       	mov    ebx,0x1
c0011c73:	50                   	push   eax
c0011c74:	e8 b9 fe ff ff       	call   c0011b32 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c79:	58                   	pop    eax
c0011c7a:	5a                   	pop    edx
c0011c7b:	eb bd                	jmp    c0011c3a <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c7d:	6a 04                	push   0x4
c0011c7f:	8d 45 01             	lea    eax,[ebp+0x1]
c0011c82:	55                   	push   ebp
c0011c83:	a3 64 d5 02 c0       	mov    ds:0xc002d564,eax
c0011c88:	e8 a5 fe ff ff       	call   c0011b32 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c8d:	59                   	pop    ecx
c0011c8e:	89 e8                	mov    eax,ebp
c0011c90:	5b                   	pop    ebx
c0011c91:	c1 e0 0c             	shl    eax,0xc
c0011c94:	83 c4 1c             	add    esp,0x1c
c0011c97:	5b                   	pop    ebx
c0011c98:	5e                   	pop    esi
c0011c99:	5f                   	pop    edi
c0011c9a:	5d                   	pop    ebp
c0011c9b:	c3                   	ret    

c0011c9c <Virt::freeSwapfilePage(unsigned long)>:
c0011c9c:	53                   	push   ebx
c0011c9d:	8b 15 44 e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e744
c0011ca3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011ca7:	b8 01 00 00 00       	mov    eax,0x1
c0011cac:	89 cb                	mov    ebx,ecx
c0011cae:	d3 e0                	shl    eax,cl
c0011cb0:	c1 eb 05             	shr    ebx,0x5
c0011cb3:	f7 d0                	not    eax
c0011cb5:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011cb8:	5b                   	pop    ebx
c0011cb9:	c3                   	ret    

c0011cba <Virt::swapIDToSector(unsigned long)>:
c0011cba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cbe:	0f af 05 6c d5 02 c0 	imul   eax,DWORD PTR ds:0xc002d56c
c0011cc5:	03 05 74 d5 02 c0    	add    eax,DWORD PTR ds:0xc002d574
c0011ccb:	c3                   	ret    

c0011ccc <Virt::allocateSwapfilePage()>:
c0011ccc:	55                   	push   ebp
c0011ccd:	31 d2                	xor    edx,edx
c0011ccf:	57                   	push   edi
c0011cd0:	56                   	push   esi
c0011cd1:	53                   	push   ebx
c0011cd2:	83 ec 0c             	sub    esp,0xc
c0011cd5:	8b 0d 6c d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d56c
c0011cdb:	a1 70 d5 02 c0       	mov    eax,ds:0xc002d570
c0011ce0:	f7 f1                	div    ecx
c0011ce2:	39 0d 70 d5 02 c0    	cmp    DWORD PTR ds:0xc002d570,ecx
c0011ce8:	72 2d                	jb     c0011d17 <Virt::allocateSwapfilePage()+0x4b>
c0011cea:	8b 35 44 e7 02 c0    	mov    esi,DWORD PTR ds:0xc002e744
c0011cf0:	8b 16                	mov    edx,DWORD PTR [esi]
c0011cf2:	f6 c2 01             	test   dl,0x1
c0011cf5:	74 3c                	je     c0011d33 <Virt::allocateSwapfilePage()+0x67>
c0011cf7:	31 c9                	xor    ecx,ecx
c0011cf9:	bf 01 00 00 00       	mov    edi,0x1
c0011cfe:	eb 12                	jmp    c0011d12 <Virt::allocateSwapfilePage()+0x46>
c0011d00:	89 fd                	mov    ebp,edi
c0011d02:	89 ca                	mov    edx,ecx
c0011d04:	d3 e5                	shl    ebp,cl
c0011d06:	c1 ea 05             	shr    edx,0x5
c0011d09:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011d0c:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011d0e:	85 ea                	test   edx,ebp
c0011d10:	74 2a                	je     c0011d3c <Virt::allocateSwapfilePage()+0x70>
c0011d12:	41                   	inc    ecx
c0011d13:	39 c8                	cmp    eax,ecx
c0011d15:	77 e9                	ja     c0011d00 <Virt::allocateSwapfilePage()+0x34>
c0011d17:	83 ec 0c             	sub    esp,0xc
c0011d1a:	68 0a a8 02 c0       	push   0xc002a80a
c0011d1f:	e8 b1 88 00 00       	call   c001a5d5 <Krnl::panic(char const*)>
c0011d24:	83 c4 10             	add    esp,0x10
c0011d27:	31 c9                	xor    ecx,ecx
c0011d29:	83 c4 0c             	add    esp,0xc
c0011d2c:	89 c8                	mov    eax,ecx
c0011d2e:	5b                   	pop    ebx
c0011d2f:	5e                   	pop    esi
c0011d30:	5f                   	pop    edi
c0011d31:	5d                   	pop    ebp
c0011d32:	c3                   	ret    
c0011d33:	89 f3                	mov    ebx,esi
c0011d35:	bd 01 00 00 00       	mov    ebp,0x1
c0011d3a:	31 c9                	xor    ecx,ecx
c0011d3c:	09 ea                	or     edx,ebp
c0011d3e:	89 c8                	mov    eax,ecx
c0011d40:	89 13                	mov    DWORD PTR [ebx],edx
c0011d42:	83 c4 0c             	add    esp,0xc
c0011d45:	5b                   	pop    ebx
c0011d46:	5e                   	pop    esi
c0011d47:	5f                   	pop    edi
c0011d48:	5d                   	pop    ebp
c0011d49:	c3                   	ret    

c0011d4a <Virt::virtualMemorySetup()>:
c0011d4a:	53                   	push   ebx
c0011d4b:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d50:	83 ec 08             	sub    esp,0x8
c0011d53:	6a 0f                	push   0xf
c0011d55:	53                   	push   ebx
c0011d56:	43                   	inc    ebx
c0011d57:	e8 d6 fd ff ff       	call   c0011b32 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d5c:	59                   	pop    ecx
c0011d5d:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d63:	58                   	pop    eax
c0011d64:	75 ed                	jne    c0011d53 <Virt::virtualMemorySetup()+0x9>
c0011d66:	83 ec 08             	sub    esp,0x8
c0011d69:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d6e:	68 00 00 00 c8       	push   0xc8000000
c0011d73:	68 21 a8 02 c0       	push   0xc002a821
c0011d78:	e8 b7 11 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0011d7d:	58                   	pop    eax
c0011d7e:	5a                   	pop    edx
c0011d7f:	68 00 f0 ff ef       	push   0xeffff000
c0011d84:	68 35 a8 02 c0       	push   0xc002a835
c0011d89:	e8 a6 11 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0011d8e:	83 c4 10             	add    esp,0x10
c0011d91:	83 ec 08             	sub    esp,0x8
c0011d94:	6a 00                	push   0x0
c0011d96:	53                   	push   ebx
c0011d97:	43                   	inc    ebx
c0011d98:	e8 95 fd ff ff       	call   c0011b32 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d9d:	83 c4 10             	add    esp,0x10
c0011da0:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011da6:	75 e9                	jne    c0011d91 <Virt::virtualMemorySetup()+0x47>
c0011da8:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011dad:	83 ec 08             	sub    esp,0x8
c0011db0:	6a 0f                	push   0xf
c0011db2:	53                   	push   ebx
c0011db3:	43                   	inc    ebx
c0011db4:	e8 79 fd ff ff       	call   c0011b32 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011db9:	83 c4 10             	add    esp,0x10
c0011dbc:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011dc2:	75 e9                	jne    c0011dad <Virt::virtualMemorySetup()+0x63>
c0011dc4:	83 c4 08             	add    esp,0x8
c0011dc7:	5b                   	pop    ebx
c0011dc8:	c3                   	ret    

c0011dc9 <Virt::swappingSetup()>:
c0011dc9:	83 ec 14             	sub    esp,0x14
c0011dcc:	31 d2                	xor    edx,edx
c0011dce:	a1 70 d5 02 c0       	mov    eax,ds:0xc002d570
c0011dd3:	f7 35 6c d5 02 c0    	div    DWORD PTR ds:0xc002d56c
c0011dd9:	c1 e8 05             	shr    eax,0x5
c0011ddc:	50                   	push   eax
c0011ddd:	68 49 a8 02 c0       	push   0xc002a849
c0011de2:	e8 4d 11 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0011de7:	a1 70 d5 02 c0       	mov    eax,ds:0xc002d570
c0011dec:	31 d2                	xor    edx,edx
c0011dee:	f7 35 6c d5 02 c0    	div    DWORD PTR ds:0xc002d56c
c0011df4:	c1 e8 05             	shr    eax,0x5
c0011df7:	89 04 24             	mov    DWORD PTR [esp],eax
c0011dfa:	e8 41 da ff ff       	call   c000f840 <malloc>
c0011dff:	83 c4 0c             	add    esp,0xc
c0011e02:	89 c1                	mov    ecx,eax
c0011e04:	a3 44 e7 02 c0       	mov    ds:0xc002e744,eax
c0011e09:	31 d2                	xor    edx,edx
c0011e0b:	a1 70 d5 02 c0       	mov    eax,ds:0xc002d570
c0011e10:	f7 35 6c d5 02 c0    	div    DWORD PTR ds:0xc002d56c
c0011e16:	c1 e8 05             	shr    eax,0x5
c0011e19:	50                   	push   eax
c0011e1a:	6a 00                	push   0x0
c0011e1c:	51                   	push   ecx
c0011e1d:	e8 56 e9 fe ff       	call   c0000778 <memset>
c0011e22:	83 c4 1c             	add    esp,0x1c
c0011e25:	c3                   	ret    

c0011e26 <Virt::getAKernelVAS()>:
c0011e26:	a1 48 e7 02 c0       	mov    eax,ds:0xc002e748
c0011e2b:	c3                   	ret    

c0011e2c <Virt::setupPageSwapping(int)>:
c0011e2c:	57                   	push   edi
c0011e2d:	56                   	push   esi
c0011e2e:	53                   	push   ebx
c0011e2f:	83 ec 1c             	sub    esp,0x1c
c0011e32:	68 14 01 00 00       	push   0x114
c0011e37:	e8 04 da ff ff       	call   c000f840 <malloc>
c0011e3c:	83 c4 0c             	add    esp,0xc
c0011e3f:	89 c6                	mov    esi,eax
c0011e41:	ff 35 34 1b 03 c0    	push   DWORD PTR ds:0xc0031b34
c0011e47:	68 64 a8 02 c0       	push   0xc002a864
c0011e4c:	50                   	push   eax
c0011e4d:	e8 3a 16 00 00       	call   c001348c <File::File(char const*, Process*)>
c0011e52:	89 34 24             	mov    DWORD PTR [esp],esi
c0011e55:	e8 0e 18 00 00       	call   c0013668 <File::unlink()>
c0011e5a:	58                   	pop    eax
c0011e5b:	5a                   	pop    edx
c0011e5c:	6a 12                	push   0x12
c0011e5e:	56                   	push   esi
c0011e5f:	e8 8c 16 00 00       	call   c00134f0 <File::open(FileOpenMode)>
c0011e64:	83 c4 10             	add    esp,0x10
c0011e67:	85 c0                	test   eax,eax
c0011e69:	0f 85 ca 00 00 00    	jne    c0011f39 <Virt::setupPageSwapping(int)+0x10d>
c0011e6f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e73:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011e7b:	c1 e3 08             	shl    ebx,0x8
c0011e7e:	83 ec 0c             	sub    esp,0xc
c0011e81:	68 00 00 01 00       	push   0x10000
c0011e86:	e8 b5 d9 ff ff       	call   c000f840 <malloc>
c0011e8b:	83 c4 0c             	add    esp,0xc
c0011e8e:	89 c7                	mov    edi,eax
c0011e90:	68 00 00 01 00       	push   0x10000
c0011e95:	6a 00                	push   0x0
c0011e97:	50                   	push   eax
c0011e98:	e8 db e8 fe ff       	call   c0000778 <memset>
c0011e9d:	83 c4 10             	add    esp,0x10
c0011ea0:	85 db                	test   ebx,ebx
c0011ea2:	79 03                	jns    c0011ea7 <Virt::setupPageSwapping(int)+0x7b>
c0011ea4:	83 c3 0f             	add    ebx,0xf
c0011ea7:	c1 fb 04             	sar    ebx,0x4
c0011eaa:	4b                   	dec    ebx
c0011eab:	83 fb ff             	cmp    ebx,0xffffffff
c0011eae:	74 4b                	je     c0011efb <Virt::setupPageSwapping(int)+0xcf>
c0011eb0:	83 ec 0c             	sub    esp,0xc
c0011eb3:	8b 06                	mov    eax,DWORD PTR [esi]
c0011eb5:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011eb9:	52                   	push   edx
c0011eba:	57                   	push   edi
c0011ebb:	6a 00                	push   0x0
c0011ebd:	68 00 00 01 00       	push   0x10000
c0011ec2:	56                   	push   esi
c0011ec3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011ec6:	83 c4 20             	add    esp,0x20
c0011ec9:	85 c0                	test   eax,eax
c0011ecb:	75 59                	jne    c0011f26 <Virt::setupPageSwapping(int)+0xfa>
c0011ecd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ed1:	3d 00 00 01 00       	cmp    eax,0x10000
c0011ed6:	74 d2                	je     c0011eaa <Virt::setupPageSwapping(int)+0x7e>
c0011ed8:	83 ec 08             	sub    esp,0x8
c0011edb:	4b                   	dec    ebx
c0011edc:	50                   	push   eax
c0011edd:	68 b7 a8 02 c0       	push   0xc002a8b7
c0011ee2:	e8 4d 10 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0011ee7:	c7 04 24 c0 a8 02 c0 	mov    DWORD PTR [esp],0xc002a8c0
c0011eee:	e8 e2 86 00 00       	call   c001a5d5 <Krnl::panic(char const*)>
c0011ef3:	83 c4 10             	add    esp,0x10
c0011ef6:	83 fb ff             	cmp    ebx,0xffffffff
c0011ef9:	75 b5                	jne    c0011eb0 <Virt::setupPageSwapping(int)+0x84>
c0011efb:	83 ec 0c             	sub    esp,0xc
c0011efe:	56                   	push   esi
c0011eff:	e8 4a 16 00 00       	call   c001354e <File::close()>
c0011f04:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011f07:	e8 54 d9 ff ff       	call   c000f860 <rfree>
c0011f0c:	83 c4 10             	add    esp,0x10
c0011f0f:	85 f6                	test   esi,esi
c0011f11:	74 0c                	je     c0011f1f <Virt::setupPageSwapping(int)+0xf3>
c0011f13:	83 ec 0c             	sub    esp,0xc
c0011f16:	8b 06                	mov    eax,DWORD PTR [esi]
c0011f18:	56                   	push   esi
c0011f19:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f1c:	83 c4 10             	add    esp,0x10
c0011f1f:	83 c4 10             	add    esp,0x10
c0011f22:	5b                   	pop    ebx
c0011f23:	5e                   	pop    esi
c0011f24:	5f                   	pop    edi
c0011f25:	c3                   	ret    
c0011f26:	83 ec 08             	sub    esp,0x8
c0011f29:	50                   	push   eax
c0011f2a:	68 9f a8 02 c0       	push   0xc002a89f
c0011f2f:	e8 00 10 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0011f34:	83 c4 10             	add    esp,0x10
c0011f37:	eb 94                	jmp    c0011ecd <Virt::setupPageSwapping(int)+0xa1>
c0011f39:	83 ec 08             	sub    esp,0x8
c0011f3c:	50                   	push   eax
c0011f3d:	68 7b a8 02 c0       	push   0xc002a87b
c0011f42:	e8 ed 0f 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0011f47:	c7 04 24 84 a8 02 c0 	mov    DWORD PTR [esp],0xc002a884
c0011f4e:	e8 82 86 00 00       	call   c001a5d5 <Krnl::panic(char const*)>
c0011f53:	83 c4 10             	add    esp,0x10
c0011f56:	e9 14 ff ff ff       	jmp    c0011e6f <Virt::setupPageSwapping(int)+0x43>
c0011f5b:	90                   	nop

c0011f5c <VAS::VAS()>:
c0011f5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f60:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f6b:	a3 48 e7 02 c0       	mov    ds:0xc002e748,eax
c0011f70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f74:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011f78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f7c:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011f7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f83:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011f8a:	90                   	nop
c0011f8b:	c3                   	ret    

c0011f8c <VAS::VAS(VAS*)>:
c0011f8c:	83 ec 0c             	sub    esp,0xc
c0011f8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f93:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f9a:	83 ec 0c             	sub    esp,0xc
c0011f9d:	68 b8 a5 02 c0       	push   0xc002a5b8
c0011fa2:	e8 2e 86 00 00       	call   c001a5d5 <Krnl::panic(char const*)>
c0011fa7:	83 c4 10             	add    esp,0x10
c0011faa:	90                   	nop
c0011fab:	83 c4 0c             	add    esp,0xc
c0011fae:	c3                   	ret    
c0011faf:	90                   	nop

c0011fb0 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011fb0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011fb4:	89 c2                	mov    edx,eax
c0011fb6:	c1 e8 0a             	shr    eax,0xa
c0011fb9:	c1 ea 16             	shr    edx,0x16
c0011fbc:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011fc1:	19 c9                	sbb    ecx,ecx
c0011fc3:	c1 e2 0c             	shl    edx,0xc
c0011fc6:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011fcc:	25 fc 0f 00 00       	and    eax,0xffc
c0011fd1:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011fd8:	01 d0                	add    eax,edx
c0011fda:	c3                   	ret    
c0011fdb:	90                   	nop

c0011fdc <VAS::getPageTableEntry(unsigned long)>:
c0011fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011fe0:	89 ca                	mov    edx,ecx
c0011fe2:	c1 e9 0a             	shr    ecx,0xa
c0011fe5:	c1 ea 16             	shr    edx,0x16
c0011fe8:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011fee:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011ff4:	c1 e0 0c             	shl    eax,0xc
c0011ff7:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011ffa:	c3                   	ret    

c0011ffb <Virt::freeKernelVirtualPages(unsigned long)>:
c0011ffb:	57                   	push   edi
c0011ffc:	56                   	push   esi
c0011ffd:	be 01 00 00 00       	mov    esi,0x1
c0012002:	53                   	push   ebx
c0012003:	83 ec 10             	sub    esp,0x10
c0012006:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001200a:	c1 eb 0c             	shr    ebx,0xc
c001200d:	eb 3f                	jmp    c001204e <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c001200f:	e8 12 fe ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c0012014:	83 ec 08             	sub    esp,0x8
c0012017:	57                   	push   edi
c0012018:	50                   	push   eax
c0012019:	e8 be ff ff ff       	call   c0011fdc <VAS::getPageTableEntry(unsigned long)>
c001201e:	83 c4 10             	add    esp,0x10
c0012021:	8b 00                	mov    eax,DWORD PTR [eax]
c0012023:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012027:	f6 c4 04             	test   ah,0x4
c001202a:	75 5f                	jne    c001208b <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c001202c:	80 fa 04             	cmp    dl,0x4
c001202f:	74 78                	je     c00120a9 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0012031:	80 fa 02             	cmp    dl,0x2
c0012034:	0f 84 88 00 00 00    	je     c00120c2 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001203a:	80 fa 03             	cmp    dl,0x3
c001203d:	0f 84 ad 00 00 00    	je     c00120f0 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0012043:	fe ca                	dec    dl
c0012045:	0f 84 92 00 00 00    	je     c00120dd <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c001204b:	43                   	inc    ebx
c001204c:	31 f6                	xor    esi,esi
c001204e:	53                   	push   ebx
c001204f:	e8 13 fb ff ff       	call   c0011b67 <Virt::getPageState(unsigned long)>
c0012054:	5f                   	pop    edi
c0012055:	89 df                	mov    edi,ebx
c0012057:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001205b:	c1 e7 0c             	shl    edi,0xc
c001205e:	84 c0                	test   al,al
c0012060:	75 ad                	jne    c001200f <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0012062:	83 ec 0c             	sub    esp,0xc
c0012065:	68 c6 a8 02 c0       	push   0xc002a8c6
c001206a:	e8 66 85 00 00       	call   c001a5d5 <Krnl::panic(char const*)>
c001206f:	e8 b2 fd ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c0012074:	5a                   	pop    edx
c0012075:	59                   	pop    ecx
c0012076:	57                   	push   edi
c0012077:	50                   	push   eax
c0012078:	e8 5f ff ff ff       	call   c0011fdc <VAS::getPageTableEntry(unsigned long)>
c001207d:	83 c4 10             	add    esp,0x10
c0012080:	8b 00                	mov    eax,DWORD PTR [eax]
c0012082:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012086:	f6 c4 04             	test   ah,0x4
c0012089:	74 c0                	je     c001204b <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001208b:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001208f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012094:	83 ec 0c             	sub    esp,0xc
c0012097:	50                   	push   eax
c0012098:	e8 bb dd ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c001209d:	83 c4 10             	add    esp,0x10
c00120a0:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00120a4:	80 fa 04             	cmp    dl,0x4
c00120a7:	75 88                	jne    c0012031 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00120a9:	89 f0                	mov    eax,esi
c00120ab:	84 c0                	test   al,al
c00120ad:	75 47                	jne    c00120f6 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c00120af:	c7 44 24 20 dc a5 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a5dc
c00120b7:	83 c4 10             	add    esp,0x10
c00120ba:	5b                   	pop    ebx
c00120bb:	5e                   	pop    esi
c00120bc:	5f                   	pop    edi
c00120bd:	e9 13 85 00 00       	jmp    c001a5d5 <Krnl::panic(char const*)>
c00120c2:	89 f0                	mov    eax,esi
c00120c4:	84 c0                	test   al,al
c00120c6:	75 15                	jne    c00120dd <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00120c8:	83 ec 0c             	sub    esp,0xc
c00120cb:	68 e2 a8 02 c0       	push   0xc002a8e2
c00120d0:	e8 00 85 00 00       	call   c001a5d5 <Krnl::panic(char const*)>
c00120d5:	83 c4 10             	add    esp,0x10
c00120d8:	e9 6e ff ff ff       	jmp    c001204b <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120dd:	83 ec 08             	sub    esp,0x8
c00120e0:	6a 00                	push   0x0
c00120e2:	53                   	push   ebx
c00120e3:	e8 4a fa ff ff       	call   c0011b32 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00120e8:	83 c4 10             	add    esp,0x10
c00120eb:	e9 5b ff ff ff       	jmp    c001204b <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120f0:	89 f0                	mov    eax,esi
c00120f2:	84 c0                	test   al,al
c00120f4:	75 15                	jne    c001210b <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c00120f6:	83 ec 08             	sub    esp,0x8
c00120f9:	6a 00                	push   0x0
c00120fb:	53                   	push   ebx
c00120fc:	e8 31 fa ff ff       	call   c0011b32 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012101:	83 c4 10             	add    esp,0x10
c0012104:	83 c4 10             	add    esp,0x10
c0012107:	5b                   	pop    ebx
c0012108:	5e                   	pop    esi
c0012109:	5f                   	pop    edi
c001210a:	c3                   	ret    
c001210b:	c7 44 24 20 fe a8 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a8fe
c0012113:	83 c4 10             	add    esp,0x10
c0012116:	5b                   	pop    ebx
c0012117:	5e                   	pop    esi
c0012118:	5f                   	pop    edi
c0012119:	e9 b7 84 00 00       	jmp    c001a5d5 <Krnl::panic(char const*)>

c001211e <VAS::freeAllocatedPages(unsigned long)>:
c001211e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012122:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012126:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001212a:	74 09                	je     c0012135 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001212c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012130:	e9 c6 fe ff ff       	jmp    c0011ffb <Virt::freeKernelVirtualPages(unsigned long)>
c0012135:	c7 44 24 04 00 a6 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a600
c001213d:	e9 f2 0d 00 00       	jmp    c0012f34 <Dbg::kprintf(char const*, ...)>

c0012142 <VAS::virtualToPhysical(unsigned long)>:
c0012142:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012146:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001214a:	e8 8d fe ff ff       	call   c0011fdc <VAS::getPageTableEntry(unsigned long)>
c001214f:	5a                   	pop    edx
c0012150:	8b 00                	mov    eax,DWORD PTR [eax]
c0012152:	59                   	pop    ecx
c0012153:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012158:	c3                   	ret    
c0012159:	90                   	nop

c001215a <VAS::reflagRange(unsigned long, int, int, int)>:
c001215a:	55                   	push   ebp
c001215b:	57                   	push   edi
c001215c:	56                   	push   esi
c001215d:	53                   	push   ebx
c001215e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012162:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0012166:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001216a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001216e:	85 db                	test   ebx,ebx
c0012170:	7e 22                	jle    c0012194 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0012172:	c1 e3 0c             	shl    ebx,0xc
c0012175:	01 f3                	add    ebx,esi
c0012177:	56                   	push   esi
c0012178:	81 c6 00 10 00 00    	add    esi,0x1000
c001217e:	55                   	push   ebp
c001217f:	e8 58 fe ff ff       	call   c0011fdc <VAS::getPageTableEntry(unsigned long)>
c0012184:	5a                   	pop    edx
c0012185:	59                   	pop    ecx
c0012186:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012188:	21 f9                	and    ecx,edi
c001218a:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c001218e:	39 f3                	cmp    ebx,esi
c0012190:	89 08                	mov    DWORD PTR [eax],ecx
c0012192:	75 e3                	jne    c0012177 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0012194:	5b                   	pop    ebx
c0012195:	5e                   	pop    esi
c0012196:	5f                   	pop    edi
c0012197:	5d                   	pop    ebp
c0012198:	c3                   	ret    
c0012199:	90                   	nop

c001219a <VAS::setToWriteCombining(unsigned long, int)>:
c001219a:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c001219f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00121a5:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00121ac:	75 01                	jne    c00121af <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00121ae:	c3                   	ret    
c00121af:	68 80 00 00 00       	push   0x80
c00121b4:	6a ff                	push   0xffffffff
c00121b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121c2:	e8 93 ff ff ff       	call   c001215a <VAS::reflagRange(unsigned long, int, int, int)>
c00121c7:	83 c4 14             	add    esp,0x14
c00121ca:	c3                   	ret    
c00121cb:	90                   	nop

c00121cc <VAS::mapOtherVASIn(bool, VAS*)>:
c00121cc:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00121d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121d5:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00121d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121dc:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00121df:	19 c0                	sbb    eax,eax
c00121e1:	83 ca 03             	or     edx,0x3
c00121e4:	83 e0 fc             	and    eax,0xfffffffc
c00121e7:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00121ee:	0f 20 d8             	mov    eax,cr3
c00121f1:	0f 22 d8             	mov    cr3,eax
c00121f4:	c3                   	ret    
c00121f5:	90                   	nop

c00121f6 <VAS::~VAS()>:
c00121f6:	83 ec 2c             	sub    esp,0x2c
c00121f9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012201:	e8 f4 bb 00 00       	call   c001ddfa <lockScheduler()>
c0012206:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001220b:	8b 00                	mov    eax,DWORD PTR [eax]
c001220d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012210:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012216:	83 ec 04             	sub    esp,0x4
c0012219:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001221d:	6a 01                	push   0x1
c001221f:	50                   	push   eax
c0012220:	e8 a7 ff ff ff       	call   c00121cc <VAS::mapOtherVASIn(bool, VAS*)>
c0012225:	83 c4 10             	add    esp,0x10
c0012228:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012230:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0012238:	0f 8f d7 00 00 00    	jg     c0012315 <VAS::~VAS()+0x11f>
c001223e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012242:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012245:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012249:	c1 e2 02             	shl    edx,0x2
c001224c:	01 d0                	add    eax,edx
c001224e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012250:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012254:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012258:	83 e0 01             	and    eax,0x1
c001225b:	0f 84 ab 00 00 00    	je     c001230c <VAS::~VAS()+0x116>
c0012261:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012269:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0012271:	7f 75                	jg     c00122e8 <VAS::~VAS()+0xf2>
c0012273:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012277:	c1 e0 0a             	shl    eax,0xa
c001227a:	89 c2                	mov    edx,eax
c001227c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012280:	01 d0                	add    eax,edx
c0012282:	c1 e0 0c             	shl    eax,0xc
c0012285:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012289:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001228e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012290:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012293:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012299:	83 ec 04             	sub    esp,0x4
c001229c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00122a0:	6a 01                	push   0x1
c00122a2:	50                   	push   eax
c00122a3:	e8 08 fd ff ff       	call   c0011fb0 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00122a8:	83 c4 10             	add    esp,0x10
c00122ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00122af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00122b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00122b5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00122b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122bd:	25 01 04 00 00       	and    eax,0x401
c00122c2:	3d 01 04 00 00       	cmp    eax,0x401
c00122c7:	75 19                	jne    c00122e2 <VAS::~VAS()+0xec>
c00122c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122cd:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122d2:	83 ec 0c             	sub    esp,0xc
c00122d5:	50                   	push   eax
c00122d6:	e8 7d db ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c00122db:	83 c4 10             	add    esp,0x10
c00122de:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00122e2:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00122e6:	eb 81                	jmp    c0012269 <VAS::~VAS()+0x73>
c00122e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122ec:	25 00 04 00 00       	and    eax,0x400
c00122f1:	74 19                	je     c001230c <VAS::~VAS()+0x116>
c00122f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122f7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122fc:	83 ec 0c             	sub    esp,0xc
c00122ff:	50                   	push   eax
c0012300:	e8 53 db ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c0012305:	83 c4 10             	add    esp,0x10
c0012308:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001230c:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012310:	e9 1b ff ff ff       	jmp    c0012230 <VAS::~VAS()+0x3a>
c0012315:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012319:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001231c:	83 ec 0c             	sub    esp,0xc
c001231f:	50                   	push   eax
c0012320:	e8 d6 fc ff ff       	call   c0011ffb <Virt::freeKernelVirtualPages(unsigned long)>
c0012325:	83 c4 10             	add    esp,0x10
c0012328:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001232c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001232f:	83 ec 0c             	sub    esp,0xc
c0012332:	50                   	push   eax
c0012333:	e8 20 db ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c0012338:	83 c4 10             	add    esp,0x10
c001233b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001233f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012343:	c1 e0 02             	shl    eax,0x2
c0012346:	83 ec 08             	sub    esp,0x8
c0012349:	50                   	push   eax
c001234a:	68 24 a6 02 c0       	push   0xc002a624
c001234f:	e8 e0 0b 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0012354:	83 c4 10             	add    esp,0x10
c0012357:	e8 a0 ba 00 00       	call   c001ddfc <unlockScheduler()>
c001235c:	90                   	nop
c001235d:	83 c4 2c             	add    esp,0x2c
c0012360:	c3                   	ret    
c0012361:	90                   	nop

c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0012362:	55                   	push   ebp
c0012363:	57                   	push   edi
c0012364:	56                   	push   esi
c0012365:	53                   	push   ebx
c0012366:	83 ec 1c             	sub    esp,0x1c
c0012369:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001236d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012371:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0012377:	77 08                	ja     c0012381 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0012379:	0f 20 d8             	mov    eax,cr3
c001237c:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c001237f:	75 47                	jne    c00123c8 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0012381:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012385:	09 d8                	or     eax,ebx
c0012387:	a9 ff 0f 00 00       	test   eax,0xfff
c001238c:	75 57                	jne    c00123e5 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c001238e:	89 de                	mov    esi,ebx
c0012390:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012393:	c1 ee 16             	shr    esi,0x16
c0012396:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c001239d:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00123a1:	74 54                	je     c00123f7 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c00123a3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00123a7:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00123ad:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00123b1:	c1 e6 0c             	shl    esi,0xc
c00123b4:	c1 eb 0a             	shr    ebx,0xa
c00123b7:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00123bd:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00123c0:	83 c4 1c             	add    esp,0x1c
c00123c3:	5b                   	pop    ebx
c00123c4:	5e                   	pop    esi
c00123c5:	5f                   	pop    edi
c00123c6:	5d                   	pop    ebp
c00123c7:	c3                   	ret    
c00123c8:	83 ec 0c             	sub    esp,0xc
c00123cb:	68 44 a6 02 c0       	push   0xc002a644
c00123d0:	e8 5f 0b 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c00123d5:	83 c4 10             	add    esp,0x10
c00123d8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123dc:	09 d8                	or     eax,ebx
c00123de:	a9 ff 0f 00 00       	test   eax,0xfff
c00123e3:	74 a9                	je     c001238e <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00123e5:	83 ec 0c             	sub    esp,0xc
c00123e8:	68 ac a6 02 c0       	push   0xc002a6ac
c00123ed:	e8 e3 81 00 00       	call   c001a5d5 <Krnl::panic(char const*)>
c00123f2:	83 c4 10             	add    esp,0x10
c00123f5:	eb 97                	jmp    c001238e <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00123f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00123fb:	e8 e2 da ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012400:	89 c5                	mov    ebp,eax
c0012402:	e8 1f fa ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c0012407:	83 ec 0c             	sub    esp,0xc
c001240a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001240e:	6a 01                	push   0x1
c0012410:	e8 76 f7 ff ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c0012415:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001241c:	6a 01                	push   0x1
c001241e:	50                   	push   eax
c001241f:	55                   	push   ebp
c0012420:	81 cd 07 04 00 00    	or     ebp,0x407
c0012426:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001242a:	51                   	push   ecx
c001242b:	e8 26 02 00 00       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012430:	83 c4 1c             	add    esp,0x1c
c0012433:	68 00 10 00 00       	push   0x1000
c0012438:	6a 00                	push   0x0
c001243a:	50                   	push   eax
c001243b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001243f:	e8 34 e3 fe ff       	call   c0000778 <memset>
c0012444:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012448:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001244b:	e8 ab fb ff ff       	call   c0011ffb <Virt::freeKernelVirtualPages(unsigned long)>
c0012450:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012454:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012457:	83 c4 10             	add    esp,0x10
c001245a:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c001245d:	e9 41 ff ff ff       	jmp    c00123a3 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0012462 <VAS::allocatePages(int, int)>:
c0012462:	55                   	push   ebp
c0012463:	57                   	push   edi
c0012464:	56                   	push   esi
c0012465:	53                   	push   ebx
c0012466:	83 ec 1c             	sub    esp,0x1c
c0012469:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001246d:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0012472:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012478:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001247e:	83 e0 01             	and    eax,0x1
c0012481:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0012485:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012489:	0f 85 cc 00 00 00    	jne    c001255b <VAS::allocatePages(int, int)+0xf9>
c001248f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012492:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012496:	85 c0                	test   eax,eax
c0012498:	0f 84 a1 00 00 00    	je     c001253f <VAS::allocatePages(int, int)+0xdd>
c001249e:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00124a2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00124a6:	c1 e6 0c             	shl    esi,0xc
c00124a9:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00124ad:	85 c0                	test   eax,eax
c00124af:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00124b2:	7e 33                	jle    c00124e7 <VAS::allocatePages(int, int)+0x85>
c00124b4:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00124b8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124bc:	81 cd 00 04 00 00    	or     ebp,0x400
c00124c2:	e8 1b da ff ff       	call   c000fee2 <Phys::allocatePage()>
c00124c7:	55                   	push   ebp
c00124c8:	53                   	push   ebx
c00124c9:	50                   	push   eax
c00124ca:	57                   	push   edi
c00124cb:	e8 92 fe ff ff       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c00124d0:	83 c4 10             	add    esp,0x10
c00124d3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124d8:	74 03                	je     c00124dd <VAS::allocatePages(int, int)+0x7b>
c00124da:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124dd:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124e3:	39 de                	cmp    esi,ebx
c00124e5:	75 db                	jne    c00124c2 <VAS::allocatePages(int, int)+0x60>
c00124e7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124ec:	75 12                	jne    c0012500 <VAS::allocatePages(int, int)+0x9e>
c00124ee:	0f 20 d8             	mov    eax,cr3
c00124f1:	0f 22 d8             	mov    cr3,eax
c00124f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124f8:	83 c4 1c             	add    esp,0x1c
c00124fb:	5b                   	pop    ebx
c00124fc:	5e                   	pop    esi
c00124fd:	5f                   	pop    edi
c00124fe:	5d                   	pop    ebp
c00124ff:	c3                   	ret    
c0012500:	c1 ee 0a             	shr    esi,0xa
c0012503:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012507:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c001250d:	c1 eb 0a             	shr    ebx,0xa
c0012510:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0012516:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001251c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012522:	39 c3                	cmp    ebx,eax
c0012524:	77 ce                	ja     c00124f4 <VAS::allocatePages(int, int)+0x92>
c0012526:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012529:	81 c3 00 10 00 00    	add    ebx,0x1000
c001252f:	39 d8                	cmp    eax,ebx
c0012531:	73 f3                	jae    c0012526 <VAS::allocatePages(int, int)+0xc4>
c0012533:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012537:	83 c4 1c             	add    esp,0x1c
c001253a:	5b                   	pop    ebx
c001253b:	5e                   	pop    esi
c001253c:	5f                   	pop    edi
c001253d:	5d                   	pop    ebp
c001253e:	c3                   	ret    
c001253f:	83 ec 0c             	sub    esp,0xc
c0012542:	68 d0 a6 02 c0       	push   0xc002a6d0
c0012547:	e8 89 80 00 00       	call   c001a5d5 <Krnl::panic(char const*)>
c001254c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001254f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012553:	83 c4 10             	add    esp,0x10
c0012556:	e9 43 ff ff ff       	jmp    c001249e <VAS::allocatePages(int, int)+0x3c>
c001255b:	83 ec 0c             	sub    esp,0xc
c001255e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012562:	e8 24 f6 ff ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c0012567:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001256b:	83 c4 10             	add    esp,0x10
c001256e:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0012573:	0f 87 9b 00 00 00    	ja     c0012614 <VAS::allocatePages(int, int)+0x1b2>
c0012579:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001257d:	85 d2                	test   edx,edx
c001257f:	7e 3c                	jle    c00125bd <VAS::allocatePages(int, int)+0x15b>
c0012581:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012585:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012589:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001258d:	c1 e5 0c             	shl    ebp,0xc
c0012590:	81 ce 00 04 00 00    	or     esi,0x400
c0012596:	01 dd                	add    ebp,ebx
c0012598:	e8 45 d9 ff ff       	call   c000fee2 <Phys::allocatePage()>
c001259d:	56                   	push   esi
c001259e:	53                   	push   ebx
c001259f:	50                   	push   eax
c00125a0:	57                   	push   edi
c00125a1:	e8 bc fd ff ff       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c00125a6:	83 c4 10             	add    esp,0x10
c00125a9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125ae:	74 03                	je     c00125b3 <VAS::allocatePages(int, int)+0x151>
c00125b0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125b3:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125b9:	39 dd                	cmp    ebp,ebx
c00125bb:	75 db                	jne    c0012598 <VAS::allocatePages(int, int)+0x136>
c00125bd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125c2:	0f 84 26 ff ff ff    	je     c00124ee <VAS::allocatePages(int, int)+0x8c>
c00125c8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00125cc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00125d0:	89 d3                	mov    ebx,edx
c00125d2:	c1 e0 0c             	shl    eax,0xc
c00125d5:	c1 eb 0a             	shr    ebx,0xa
c00125d8:	01 d0                	add    eax,edx
c00125da:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00125e0:	c1 e8 0a             	shr    eax,0xa
c00125e3:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00125e9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00125ee:	2d 00 00 40 00       	sub    eax,0x400000
c00125f3:	39 c3                	cmp    ebx,eax
c00125f5:	0f 87 f9 fe ff ff    	ja     c00124f4 <VAS::allocatePages(int, int)+0x92>
c00125fb:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125fe:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012604:	39 d8                	cmp    eax,ebx
c0012606:	73 f3                	jae    c00125fb <VAS::allocatePages(int, int)+0x199>
c0012608:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001260c:	83 c4 1c             	add    esp,0x1c
c001260f:	5b                   	pop    ebx
c0012610:	5e                   	pop    esi
c0012611:	5f                   	pop    edi
c0012612:	5d                   	pop    ebp
c0012613:	c3                   	ret    
c0012614:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0012619:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001261f:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0012626:	0f 84 4d ff ff ff    	je     c0012579 <VAS::allocatePages(int, int)+0x117>
c001262c:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0012634:	e9 40 ff ff ff       	jmp    c0012579 <VAS::allocatePages(int, int)+0x117>
c0012639:	90                   	nop

c001263a <VAS::setCPUSpecific(unsigned long)>:
c001263a:	83 ec 0c             	sub    esp,0xc
c001263d:	6a 05                	push   0x5
c001263f:	68 00 00 40 c2       	push   0xc2400000
c0012644:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012648:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001264c:	e8 11 fd ff ff       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012651:	83 c4 1c             	add    esp,0x1c
c0012654:	c3                   	ret    
c0012655:	90                   	nop

c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012656:	55                   	push   ebp
c0012657:	57                   	push   edi
c0012658:	56                   	push   esi
c0012659:	53                   	push   ebx
c001265a:	83 ec 1c             	sub    esp,0x1c
c001265d:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0012662:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012666:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001266c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012670:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012676:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001267a:	83 e0 01             	and    eax,0x1
c001267d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012681:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012685:	85 c0                	test   eax,eax
c0012687:	7e 39                	jle    c00126c2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012689:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001268d:	89 f3                	mov    ebx,esi
c001268f:	c1 e0 0c             	shl    eax,0xc
c0012692:	01 f0                	add    eax,esi
c0012694:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012698:	55                   	push   ebp
c0012699:	53                   	push   ebx
c001269a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001269e:	29 f0                	sub    eax,esi
c00126a0:	01 d8                	add    eax,ebx
c00126a2:	50                   	push   eax
c00126a3:	57                   	push   edi
c00126a4:	e8 b9 fc ff ff       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c00126a9:	83 c4 10             	add    esp,0x10
c00126ac:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00126b1:	74 03                	je     c00126b6 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c00126b3:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00126b6:	81 c3 00 10 00 00    	add    ebx,0x1000
c00126bc:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c00126c0:	75 d6                	jne    c0012698 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c00126c2:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00126c7:	75 10                	jne    c00126d9 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c00126c9:	0f 20 d8             	mov    eax,cr3
c00126cc:	0f 22 d8             	mov    cr3,eax
c00126cf:	83 c4 1c             	add    esp,0x1c
c00126d2:	89 f0                	mov    eax,esi
c00126d4:	5b                   	pop    ebx
c00126d5:	5e                   	pop    esi
c00126d6:	5f                   	pop    edi
c00126d7:	5d                   	pop    ebp
c00126d8:	c3                   	ret    
c00126d9:	89 f3                	mov    ebx,esi
c00126db:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126df:	c1 eb 0a             	shr    ebx,0xa
c00126e2:	c1 e0 0c             	shl    eax,0xc
c00126e5:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00126eb:	01 f0                	add    eax,esi
c00126ed:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00126f3:	c1 e8 0a             	shr    eax,0xa
c00126f6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00126fb:	2d 00 00 40 00       	sub    eax,0x400000
c0012700:	39 c3                	cmp    ebx,eax
c0012702:	77 cb                	ja     c00126cf <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0012704:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012707:	81 c3 00 10 00 00    	add    ebx,0x1000
c001270d:	39 d8                	cmp    eax,ebx
c001270f:	73 f3                	jae    c0012704 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0012711:	83 c4 1c             	add    esp,0x1c
c0012714:	89 f0                	mov    eax,esi
c0012716:	5b                   	pop    ebx
c0012717:	5e                   	pop    esi
c0012718:	5f                   	pop    edi
c0012719:	5d                   	pop    ebp
c001271a:	c3                   	ret    
c001271b:	90                   	nop

c001271c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c001271c:	55                   	push   ebp
c001271d:	57                   	push   edi
c001271e:	56                   	push   esi
c001271f:	53                   	push   ebx
c0012720:	83 ec 1c             	sub    esp,0x1c
c0012723:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012727:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001272b:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c001272f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012733:	a9 ff 0f 00 00       	test   eax,0xfff
c0012738:	75 4a                	jne    c0012784 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c001273a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001273e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012741:	c1 eb 16             	shr    ebx,0x16
c0012744:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c001274b:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c001274f:	74 4d                	je     c001279e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0012751:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012755:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012759:	c1 e8 0a             	shr    eax,0xa
c001275c:	80 fa 01             	cmp    dl,0x1
c001275f:	19 d2                	sbb    edx,edx
c0012761:	c1 e3 0c             	shl    ebx,0xc
c0012764:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012768:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c001276e:	25 fc 0f 00 00       	and    eax,0xffc
c0012773:	01 d8                	add    eax,ebx
c0012775:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c001277c:	83 c4 1c             	add    esp,0x1c
c001277f:	5b                   	pop    ebx
c0012780:	5e                   	pop    esi
c0012781:	5f                   	pop    edi
c0012782:	5d                   	pop    ebp
c0012783:	c3                   	ret    
c0012784:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012788:	83 ec 0c             	sub    esp,0xc
c001278b:	68 fc a6 02 c0       	push   0xc002a6fc
c0012790:	e8 40 7e 00 00       	call   c001a5d5 <Krnl::panic(char const*)>
c0012795:	83 c4 10             	add    esp,0x10
c0012798:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001279c:	eb 9c                	jmp    c001273a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c001279e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00127a2:	e8 3b d7 ff ff       	call   c000fee2 <Phys::allocatePage()>
c00127a7:	89 c5                	mov    ebp,eax
c00127a9:	e8 78 f6 ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c00127ae:	83 ec 0c             	sub    esp,0xc
c00127b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00127b5:	6a 01                	push   0x1
c00127b7:	e8 cf f3 ff ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c00127bc:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00127c3:	6a 01                	push   0x1
c00127c5:	50                   	push   eax
c00127c6:	55                   	push   ebp
c00127c7:	81 cd 07 04 00 00    	or     ebp,0x407
c00127cd:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00127d1:	51                   	push   ecx
c00127d2:	e8 7f fe ff ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00127d7:	83 c4 1c             	add    esp,0x1c
c00127da:	68 00 10 00 00       	push   0x1000
c00127df:	6a 00                	push   0x0
c00127e1:	50                   	push   eax
c00127e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00127e6:	e8 8d df fe ff       	call   c0000778 <memset>
c00127eb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00127ef:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00127f2:	e8 04 f8 ff ff       	call   c0011ffb <Virt::freeKernelVirtualPages(unsigned long)>
c00127f7:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00127fa:	83 c4 10             	add    esp,0x10
c00127fd:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0012800:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012804:	e9 48 ff ff ff       	jmp    c0012751 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0012809:	90                   	nop

c001280a <VAS::VAS(bool)>:
c001280a:	53                   	push   ebx
c001280b:	83 ec 28             	sub    esp,0x28
c001280e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012812:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012816:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001281a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012821:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012825:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012829:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c001282c:	e8 b1 d6 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012831:	89 c2                	mov    edx,eax
c0012833:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012837:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001283a:	e8 e7 f5 ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c001283f:	89 c3                	mov    ebx,eax
c0012841:	83 ec 0c             	sub    esp,0xc
c0012844:	6a 01                	push   0x1
c0012846:	e8 40 f3 ff ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c001284b:	83 c4 10             	add    esp,0x10
c001284e:	89 c2                	mov    edx,eax
c0012850:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012854:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012857:	83 ec 0c             	sub    esp,0xc
c001285a:	6a 03                	push   0x3
c001285c:	6a 01                	push   0x1
c001285e:	52                   	push   edx
c001285f:	50                   	push   eax
c0012860:	53                   	push   ebx
c0012861:	e8 f0 fd ff ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012866:	83 c4 20             	add    esp,0x20
c0012869:	89 c2                	mov    edx,eax
c001286b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001286f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012872:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001287a:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012882:	7f 1c                	jg     c00128a0 <VAS::VAS(bool)+0x96>
c0012884:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012888:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001288b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001288f:	c1 e2 02             	shl    edx,0x2
c0012892:	01 d0                	add    eax,edx
c0012894:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001289a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001289e:	eb da                	jmp    c001287a <VAS::VAS(bool)+0x70>
c00128a0:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00128a8:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00128b0:	7f 7a                	jg     c001292c <VAS::VAS(bool)+0x122>
c00128b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128b6:	2d 00 02 00 00       	sub    eax,0x200
c00128bb:	c1 e0 0c             	shl    eax,0xc
c00128be:	83 c8 03             	or     eax,0x3
c00128c1:	89 c2                	mov    edx,eax
c00128c3:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c00128c8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128ce:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00128d4:	83 e0 10             	and    eax,0x10
c00128d7:	84 c0                	test   al,al
c00128d9:	74 07                	je     c00128e2 <VAS::VAS(bool)+0xd8>
c00128db:	b8 00 01 00 00       	mov    eax,0x100
c00128e0:	eb 05                	jmp    c00128e7 <VAS::VAS(bool)+0xdd>
c00128e2:	b8 00 00 00 00       	mov    eax,0x0
c00128e7:	09 d0                	or     eax,edx
c00128e9:	89 c1                	mov    ecx,eax
c00128eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128ef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00128f2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00128f6:	c1 e2 02             	shl    edx,0x2
c00128f9:	01 d0                	add    eax,edx
c00128fb:	89 ca                	mov    edx,ecx
c00128fd:	89 10                	mov    DWORD PTR [eax],edx
c00128ff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012903:	2d 40 03 00 00       	sub    eax,0x340
c0012908:	83 f8 7f             	cmp    eax,0x7f
c001290b:	77 16                	ja     c0012923 <VAS::VAS(bool)+0x119>
c001290d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012911:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012914:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012918:	c1 e2 02             	shl    edx,0x2
c001291b:	01 d0                	add    eax,edx
c001291d:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012923:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012927:	e9 7c ff ff ff       	jmp    c00128a8 <VAS::VAS(bool)+0x9e>
c001292c:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0012931:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012937:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001293d:	83 e0 10             	and    eax,0x10
c0012940:	84 c0                	test   al,al
c0012942:	74 07                	je     c001294b <VAS::VAS(bool)+0x141>
c0012944:	b8 03 41 00 00       	mov    eax,0x4103
c0012949:	eb 05                	jmp    c0012950 <VAS::VAS(bool)+0x146>
c001294b:	b8 03 40 00 00       	mov    eax,0x4003
c0012950:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012954:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012957:	81 c2 20 0c 00 00    	add    edx,0xc20
c001295d:	89 02                	mov    DWORD PTR [edx],eax
c001295f:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0012964:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001296a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012970:	83 ec 08             	sub    esp,0x8
c0012973:	50                   	push   eax
c0012974:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012978:	e8 bd fc ff ff       	call   c001263a <VAS::setCPUSpecific(unsigned long)>
c001297d:	83 c4 10             	add    esp,0x10
c0012980:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012984:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012987:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c001298c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012992:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012998:	83 e0 10             	and    eax,0x10
c001299b:	84 c0                	test   al,al
c001299d:	74 07                	je     c00129a6 <VAS::VAS(bool)+0x19c>
c001299f:	b8 00 01 00 00       	mov    eax,0x100
c00129a4:	eb 05                	jmp    c00129ab <VAS::VAS(bool)+0x1a1>
c00129a6:	b8 00 00 00 00       	mov    eax,0x0
c00129ab:	09 c2                	or     edx,eax
c00129ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129b1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00129b4:	05 fc 0f 00 00       	add    eax,0xffc
c00129b9:	83 ca 03             	or     edx,0x3
c00129bc:	89 10                	mov    DWORD PTR [eax],edx
c00129be:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c00129c3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129c9:	83 ec 0c             	sub    esp,0xc
c00129cc:	50                   	push   eax
c00129cd:	e8 74 1c 00 00       	call   c0014646 <Device::getName()>
c00129d2:	83 c4 10             	add    esp,0x10
c00129d5:	83 ec 08             	sub    esp,0x8
c00129d8:	68 18 a9 02 c0       	push   0xc002a918
c00129dd:	50                   	push   eax
c00129de:	e8 dd de fe ff       	call   c00008c0 <strcmp>
c00129e3:	83 c4 10             	add    esp,0x10
c00129e6:	85 c0                	test   eax,eax
c00129e8:	0f 94 c0             	sete   al
c00129eb:	84 c0                	test   al,al
c00129ed:	74 70                	je     c0012a5f <VAS::VAS(bool)+0x255>
c00129ef:	e8 e9 b3 00 00       	call   c001dddd <disableIRQs()>
c00129f4:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c00129f9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129ff:	05 7c 09 00 00       	add    eax,0x97c
c0012a04:	83 ec 0c             	sub    esp,0xc
c0012a07:	50                   	push   eax
c0012a08:	e8 af c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a0d:	83 c4 10             	add    esp,0x10
c0012a10:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a15:	89 c3                	mov    ebx,eax
c0012a17:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0012a1c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a22:	05 7c 09 00 00       	add    eax,0x97c
c0012a27:	83 ec 0c             	sub    esp,0xc
c0012a2a:	50                   	push   eax
c0012a2b:	e8 8c c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a30:	83 c4 10             	add    esp,0x10
c0012a33:	83 ec 08             	sub    esp,0x8
c0012a36:	50                   	push   eax
c0012a37:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a3b:	e8 9c f5 ff ff       	call   c0011fdc <VAS::getPageTableEntry(unsigned long)>
c0012a40:	83 c4 10             	add    esp,0x10
c0012a43:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a45:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a4a:	6a 11                	push   0x11
c0012a4c:	53                   	push   ebx
c0012a4d:	50                   	push   eax
c0012a4e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a52:	e8 0b f9 ff ff       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012a57:	83 c4 10             	add    esp,0x10
c0012a5a:	e8 8c b3 00 00       	call   c001ddeb <enableIRQs()>
c0012a5f:	90                   	nop
c0012a60:	83 c4 28             	add    esp,0x28
c0012a63:	5b                   	pop    ebx
c0012a64:	c3                   	ret    
c0012a65:	90                   	nop

c0012a66 <VAS::evict(unsigned long)>:
c0012a66:	57                   	push   edi
c0012a67:	56                   	push   esi
c0012a68:	53                   	push   ebx
c0012a69:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0012a6d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012a71:	e8 84 b3 00 00       	call   c001ddfa <lockScheduler()>
c0012a76:	83 ec 08             	sub    esp,0x8
c0012a79:	56                   	push   esi
c0012a7a:	68 20 a7 02 c0       	push   0xc002a720
c0012a7f:	e8 b0 04 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0012a84:	e8 43 f2 ff ff       	call   c0011ccc <Virt::allocateSwapfilePage()>
c0012a89:	83 c4 0c             	add    esp,0xc
c0012a8c:	89 c3                	mov    ebx,eax
c0012a8e:	50                   	push   eax
c0012a8f:	50                   	push   eax
c0012a90:	68 26 a9 02 c0       	push   0xc002a926
c0012a95:	e8 9a 04 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0012a9a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012a9d:	e8 18 f2 ff ff       	call   c0011cba <Virt::swapIDToSector(unsigned long)>
c0012aa2:	c1 e3 0b             	shl    ebx,0xb
c0012aa5:	89 34 24             	mov    DWORD PTR [esp],esi
c0012aa8:	31 d2                	xor    edx,edx
c0012aaa:	6a 08                	push   0x8
c0012aac:	52                   	push   edx
c0012aad:	50                   	push   eax
c0012aae:	0f be 05 78 d5 02 c0 	movsx  eax,BYTE PTR ds:0xc002d578
c0012ab5:	ff 34 85 dc ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd1524]
c0012abc:	e8 ef 3c 00 00       	call   c00167b0 <LogicalDisk::write(unsigned long long, int, void*)>
c0012ac1:	83 c4 18             	add    esp,0x18
c0012ac4:	56                   	push   esi
c0012ac5:	57                   	push   edi
c0012ac6:	e8 11 f5 ff ff       	call   c0011fdc <VAS::getPageTableEntry(unsigned long)>
c0012acb:	89 c6                	mov    esi,eax
c0012acd:	8b 00                	mov    eax,DWORD PTR [eax]
c0012acf:	c1 e8 0c             	shr    eax,0xc
c0012ad2:	89 04 24             	mov    DWORD PTR [esp],eax
c0012ad5:	e8 7e d3 ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c0012ada:	8b 16                	mov    edx,DWORD PTR [esi]
c0012adc:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012ae2:	09 d3                	or     ebx,edx
c0012ae4:	89 1e                	mov    DWORD PTR [esi],ebx
c0012ae6:	c7 04 24 36 a9 02 c0 	mov    DWORD PTR [esp],0xc002a936
c0012aed:	e8 42 04 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0012af2:	83 c4 10             	add    esp,0x10
c0012af5:	5b                   	pop    ebx
c0012af6:	5e                   	pop    esi
c0012af7:	5f                   	pop    edi
c0012af8:	e9 ff b2 00 00       	jmp    c001ddfc <unlockScheduler()>
c0012afd:	90                   	nop

c0012afe <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012afe:	57                   	push   edi
c0012aff:	56                   	push   esi
c0012b00:	53                   	push   ebx
c0012b01:	83 ec 18             	sub    esp,0x18
c0012b04:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0012b08:	56                   	push   esi
c0012b09:	68 46 a9 02 c0       	push   0xc002a946
c0012b0e:	e8 21 04 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0012b13:	e8 e2 b2 00 00       	call   c001ddfa <lockScheduler()>
c0012b18:	5f                   	pop    edi
c0012b19:	58                   	pop    eax
c0012b1a:	56                   	push   esi
c0012b1b:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012b21:	68 40 a7 02 c0       	push   0xc002a740
c0012b26:	e8 09 04 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0012b2b:	58                   	pop    eax
c0012b2c:	5a                   	pop    edx
c0012b2d:	56                   	push   esi
c0012b2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012b32:	e8 a5 f4 ff ff       	call   c0011fdc <VAS::getPageTableEntry(unsigned long)>
c0012b37:	59                   	pop    ecx
c0012b38:	5b                   	pop    ebx
c0012b39:	89 c3                	mov    ebx,eax
c0012b3b:	50                   	push   eax
c0012b3c:	68 59 a9 02 c0       	push   0xc002a959
c0012b41:	e8 ee 03 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0012b46:	83 c4 10             	add    esp,0x10
c0012b49:	85 db                	test   ebx,ebx
c0012b4b:	74 08                	je     c0012b55 <VAS::tryLoadBackOffDisk(unsigned long)+0x57>
c0012b4d:	f7 03 00 04 00 00    	test   DWORD PTR [ebx],0x400
c0012b53:	75 1e                	jne    c0012b73 <VAS::tryLoadBackOffDisk(unsigned long)+0x75>
c0012b55:	83 ec 0c             	sub    esp,0xc
c0012b58:	68 d1 a9 02 c0       	push   0xc002a9d1
c0012b5d:	e8 d2 03 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0012b62:	e8 95 b2 00 00       	call   c001ddfc <unlockScheduler()>
c0012b67:	83 c4 10             	add    esp,0x10
c0012b6a:	31 c0                	xor    eax,eax
c0012b6c:	83 c4 10             	add    esp,0x10
c0012b6f:	5b                   	pop    ebx
c0012b70:	5e                   	pop    esi
c0012b71:	5f                   	pop    edi
c0012b72:	c3                   	ret    
c0012b73:	83 ec 0c             	sub    esp,0xc
c0012b76:	68 67 a9 02 c0       	push   0xc002a967
c0012b7b:	e8 b4 03 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0012b80:	c6 05 00 e6 02 c0 01 	mov    BYTE PTR ds:0xc002e600,0x1
c0012b87:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0012b89:	e8 54 d3 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012b8e:	c1 ef 0b             	shr    edi,0xb
c0012b91:	5a                   	pop    edx
c0012b92:	c6 05 00 e6 02 c0 00 	mov    BYTE PTR ds:0xc002e600,0x0
c0012b99:	59                   	pop    ecx
c0012b9a:	50                   	push   eax
c0012b9b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012b9f:	68 7f a9 02 c0       	push   0xc002a97f
c0012ba4:	e8 8b 03 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0012ba9:	58                   	pop    eax
c0012baa:	5a                   	pop    edx
c0012bab:	ff 33                	push   DWORD PTR [ebx]
c0012bad:	68 99 a9 02 c0       	push   0xc002a999
c0012bb2:	e8 7d 03 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0012bb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012bbb:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012bbd:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012bc3:	09 d0                	or     eax,edx
c0012bc5:	0d 01 08 00 00       	or     eax,0x801
c0012bca:	89 03                	mov    DWORD PTR [ebx],eax
c0012bcc:	59                   	pop    ecx
c0012bcd:	5b                   	pop    ebx
c0012bce:	50                   	push   eax
c0012bcf:	68 ac a9 02 c0       	push   0xc002a9ac
c0012bd4:	e8 5b 03 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0012bd9:	58                   	pop    eax
c0012bda:	5a                   	pop    edx
c0012bdb:	56                   	push   esi
c0012bdc:	68 bf a9 02 c0       	push   0xc002a9bf
c0012be1:	e8 4e 03 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0012be6:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012be9:	e8 cc f0 ff ff       	call   c0011cba <Virt::swapIDToSector(unsigned long)>
c0012bee:	89 34 24             	mov    DWORD PTR [esp],esi
c0012bf1:	31 d2                	xor    edx,edx
c0012bf3:	ff 35 6c d5 02 c0    	push   DWORD PTR ds:0xc002d56c
c0012bf9:	52                   	push   edx
c0012bfa:	50                   	push   eax
c0012bfb:	0f be 05 78 d5 02 c0 	movsx  eax,BYTE PTR ds:0xc002d578
c0012c02:	ff 34 85 dc ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd1524]
c0012c09:	e8 36 3b 00 00       	call   c0016744 <LogicalDisk::read(unsigned long long, int, void*)>
c0012c0e:	83 c4 14             	add    esp,0x14
c0012c11:	57                   	push   edi
c0012c12:	e8 85 f0 ff ff       	call   c0011c9c <Virt::freeSwapfilePage(unsigned long)>
c0012c17:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012c1a:	e8 9b f0 ff ff       	call   c0011cba <Virt::swapIDToSector(unsigned long)>
c0012c1f:	59                   	pop    ecx
c0012c20:	5b                   	pop    ebx
c0012c21:	50                   	push   eax
c0012c22:	68 6c a7 02 c0       	push   0xc002a76c
c0012c27:	e8 08 03 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0012c2c:	e8 cb b1 00 00       	call   c001ddfc <unlockScheduler()>
c0012c31:	83 c4 10             	add    esp,0x10
c0012c34:	b0 01                	mov    al,0x1
c0012c36:	83 c4 10             	add    esp,0x10
c0012c39:	5b                   	pop    ebx
c0012c3a:	5e                   	pop    esi
c0012c3b:	5f                   	pop    edi
c0012c3c:	c3                   	ret    
c0012c3d:	90                   	nop

c0012c3e <VAS::scanForEviction(int, int)>:
c0012c3e:	55                   	push   ebp
c0012c3f:	57                   	push   edi
c0012c40:	56                   	push   esi
c0012c41:	53                   	push   ebx
c0012c42:	83 ec 0c             	sub    esp,0xc
c0012c45:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012c49:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012c4d:	85 c9                	test   ecx,ecx
c0012c4f:	75 08                	jne    c0012c59 <VAS::scanForEviction(int, int)+0x1b>
c0012c51:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0012c59:	83 ec 0c             	sub    esp,0xc
c0012c5c:	31 ed                	xor    ebp,ebp
c0012c5e:	68 8c a7 02 c0       	push   0xc002a78c
c0012c63:	e8 cc 02 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0012c68:	83 c4 10             	add    esp,0x10
c0012c6b:	eb 0f                	jmp    c0012c7c <VAS::scanForEviction(int, int)+0x3e>
c0012c6d:	83 c5 04             	add    ebp,0x4
c0012c70:	81 fd 00 0c 00 00    	cmp    ebp,0xc00
c0012c76:	0f 84 8e 00 00 00    	je     c0012d0a <VAS::scanForEviction(int, int)+0xcc>
c0012c7c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012c7f:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0012c83:	74 e8                	je     c0012c6d <VAS::scanForEviction(int, int)+0x2f>
c0012c85:	89 eb                	mov    ebx,ebp
c0012c87:	31 f6                	xor    esi,esi
c0012c89:	c1 e3 14             	shl    ebx,0x14
c0012c8c:	eb 0f                	jmp    c0012c9d <VAS::scanForEviction(int, int)+0x5f>
c0012c8e:	46                   	inc    esi
c0012c8f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012c95:	81 fe 00 04 00 00    	cmp    esi,0x400
c0012c9b:	74 d0                	je     c0012c6d <VAS::scanForEviction(int, int)+0x2f>
c0012c9d:	83 ec 08             	sub    esp,0x8
c0012ca0:	53                   	push   ebx
c0012ca1:	57                   	push   edi
c0012ca2:	e8 35 f3 ff ff       	call   c0011fdc <VAS::getPageTableEntry(unsigned long)>
c0012ca7:	83 c4 10             	add    esp,0x10
c0012caa:	8b 00                	mov    eax,DWORD PTR [eax]
c0012cac:	89 c2                	mov    edx,eax
c0012cae:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012cb4:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012cba:	75 d2                	jne    c0012c8e <VAS::scanForEviction(int, int)+0x50>
c0012cbc:	a8 01                	test   al,0x1
c0012cbe:	74 37                	je     c0012cf7 <VAS::scanForEviction(int, int)+0xb9>
c0012cc0:	83 ec 08             	sub    esp,0x8
c0012cc3:	53                   	push   ebx
c0012cc4:	68 b0 a7 02 c0       	push   0xc002a7b0
c0012cc9:	e8 66 02 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0012cce:	89 f0                	mov    eax,esi
c0012cd0:	99                   	cdq    
c0012cd1:	f7 7c 24 34          	idiv   DWORD PTR [esp+0x34]
c0012cd5:	83 c4 10             	add    esp,0x10
c0012cd8:	85 d2                	test   edx,edx
c0012cda:	75 b2                	jne    c0012c8e <VAS::scanForEviction(int, int)+0x50>
c0012cdc:	83 ec 0c             	sub    esp,0xc
c0012cdf:	68 ea a9 02 c0       	push   0xc002a9ea
c0012ce4:	e8 4b 02 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0012ce9:	58                   	pop    eax
c0012cea:	5a                   	pop    edx
c0012ceb:	53                   	push   ebx
c0012cec:	57                   	push   edi
c0012ced:	e8 74 fd ff ff       	call   c0012a66 <VAS::evict(unsigned long)>
c0012cf2:	83 c4 10             	add    esp,0x10
c0012cf5:	eb 97                	jmp    c0012c8e <VAS::scanForEviction(int, int)+0x50>
c0012cf7:	83 ec 08             	sub    esp,0x8
c0012cfa:	53                   	push   ebx
c0012cfb:	68 dc a7 02 c0       	push   0xc002a7dc
c0012d00:	e8 2f 02 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0012d05:	83 c4 10             	add    esp,0x10
c0012d08:	eb 84                	jmp    c0012c8e <VAS::scanForEviction(int, int)+0x50>
c0012d0a:	83 c4 0c             	add    esp,0xc
c0012d0d:	5b                   	pop    ebx
c0012d0e:	5e                   	pop    esi
c0012d0f:	5f                   	pop    edi
c0012d10:	5d                   	pop    ebp
c0012d11:	c3                   	ret    

c0012d12 <mapVASFirstTime>:
c0012d12:	55                   	push   ebp
c0012d13:	57                   	push   edi
c0012d14:	56                   	push   esi
c0012d15:	53                   	push   ebx
c0012d16:	83 ec 0c             	sub    esp,0xc
c0012d19:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012d1e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012d21:	4a                   	dec    edx
c0012d22:	0f 84 8e 00 00 00    	je     c0012db6 <mapVASFirstTime+0xa4>
c0012d28:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012d2b:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012d2e:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012d33:	c1 e5 15             	shl    ebp,0x15
c0012d36:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012d3b:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012d41:	29 eb                	sub    ebx,ebp
c0012d43:	29 ee                	sub    esi,ebp
c0012d45:	e8 98 d1 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012d4a:	83 ec 0c             	sub    esp,0xc
c0012d4d:	68 03 04 00 00       	push   0x403
c0012d52:	6a 01                	push   0x1
c0012d54:	53                   	push   ebx
c0012d55:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012d5b:	50                   	push   eax
c0012d5c:	57                   	push   edi
c0012d5d:	e8 f4 f8 ff ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012d62:	83 c4 20             	add    esp,0x20
c0012d65:	39 f3                	cmp    ebx,esi
c0012d67:	75 dc                	jne    c0012d45 <mapVASFirstTime+0x33>
c0012d69:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012d6e:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012d73:	29 ee                	sub    esi,ebp
c0012d75:	29 e8                	sub    eax,ebp
c0012d77:	89 c5                	mov    ebp,eax
c0012d79:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012d7d:	19 db                	sbb    ebx,ebx
c0012d7f:	e8 5e d1 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012d84:	83 e3 04             	and    ebx,0x4
c0012d87:	83 ec 0c             	sub    esp,0xc
c0012d8a:	81 c3 03 04 00 00    	add    ebx,0x403
c0012d90:	53                   	push   ebx
c0012d91:	6a 01                	push   0x1
c0012d93:	56                   	push   esi
c0012d94:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012d9a:	50                   	push   eax
c0012d9b:	57                   	push   edi
c0012d9c:	e8 b5 f8 ff ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012da1:	83 c4 20             	add    esp,0x20
c0012da4:	39 f5                	cmp    ebp,esi
c0012da6:	75 d1                	jne    c0012d79 <mapVASFirstTime+0x67>
c0012da8:	0f 20 d8             	mov    eax,cr3
c0012dab:	0f 22 d8             	mov    cr3,eax
c0012dae:	83 c4 0c             	add    esp,0xc
c0012db1:	5b                   	pop    ebx
c0012db2:	5e                   	pop    esi
c0012db3:	5f                   	pop    edi
c0012db4:	5d                   	pop    ebp
c0012db5:	c3                   	ret    
c0012db6:	83 ec 0c             	sub    esp,0xc
c0012db9:	68 f5 a9 02 c0       	push   0xc002a9f5
c0012dbe:	e8 71 01 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0012dc3:	83 c4 10             	add    esp,0x10
c0012dc6:	83 c4 0c             	add    esp,0xc
c0012dc9:	5b                   	pop    ebx
c0012dca:	5e                   	pop    esi
c0012dcb:	5f                   	pop    edi
c0012dcc:	5d                   	pop    ebp
c0012dcd:	c3                   	ret    

c0012dce <__cxa_atexit>:
c0012dce:	31 c0                	xor    eax,eax
c0012dd0:	c3                   	ret    

c0012dd1 <__cxa_finalize>:
c0012dd1:	c3                   	ret    

c0012dd2 <__stack_chk_fail>:
c0012dd2:	55                   	push   ebp
c0012dd3:	89 e5                	mov    ebp,esp
c0012dd5:	83 ec 14             	sub    esp,0x14
c0012dd8:	68 0e aa 02 c0       	push   0xc002aa0e
c0012ddd:	e8 52 01 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0012de2:	58                   	pop    eax
c0012de3:	5a                   	pop    edx
c0012de4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012de7:	68 5e aa 02 c0       	push   0xc002aa5e
c0012dec:	e8 43 01 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0012df1:	59                   	pop    ecx
c0012df2:	58                   	pop    eax
c0012df3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012df6:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012df9:	68 5e aa 02 c0       	push   0xc002aa5e
c0012dfe:	e8 31 01 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0012e03:	5a                   	pop    edx
c0012e04:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012e07:	59                   	pop    ecx
c0012e08:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e0a:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012e0d:	68 5e aa 02 c0       	push   0xc002aa5e
c0012e12:	e8 1d 01 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0012e17:	5a                   	pop    edx
c0012e18:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012e1b:	59                   	pop    ecx
c0012e1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e20:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012e23:	68 5e aa 02 c0       	push   0xc002aa5e
c0012e28:	e8 07 01 00 00       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0012e2d:	c7 04 24 66 aa 02 c0 	mov    DWORD PTR [esp],0xc002aa66
c0012e34:	e8 9c 77 00 00       	call   c001a5d5 <Krnl::panic(char const*)>
c0012e39:	83 c4 10             	add    esp,0x10
c0012e3c:	c9                   	leave  
c0012e3d:	c3                   	ret    

c0012e3e <__cxa_pure_virtual>:
c0012e3e:	83 ec 18             	sub    esp,0x18
c0012e41:	68 7e aa 02 c0       	push   0xc002aa7e
c0012e46:	e8 8a 77 00 00       	call   c001a5d5 <Krnl::panic(char const*)>
c0012e4b:	83 c4 1c             	add    esp,0x1c
c0012e4e:	c3                   	ret    

c0012e4f <operator new[](unsigned long)>:
c0012e4f:	e9 ec c9 ff ff       	jmp    c000f840 <malloc>

c0012e54 <operator delete(void*, unsigned long)>:
c0012e54:	e9 07 ca ff ff       	jmp    c000f860 <rfree>

c0012e59 <operator delete[](void*)>:
c0012e59:	e9 02 ca ff ff       	jmp    c000f860 <rfree>

c0012e5e <operator delete[](void*, unsigned long)>:
c0012e5e:	e9 fd c9 ff ff       	jmp    c000f860 <rfree>

c0012e63 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012e63:	57                   	push   edi
c0012e64:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012e69:	56                   	push   esi
c0012e6a:	be 94 aa 02 c0       	mov    esi,0xc002aa94
c0012e6f:	53                   	push   ebx
c0012e70:	83 ec 40             	sub    esp,0x40
c0012e73:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012e77:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012e7b:	fc                   	cld    
c0012e7c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012e7e:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012e82:	83 f9 3e             	cmp    ecx,0x3e
c0012e85:	7e 05                	jle    c0012e8c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012e87:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012e8c:	89 df                	mov    edi,ebx
c0012e8e:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012e92:	eb 02                	jmp    c0012e96 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012e94:	89 c7                	mov    edi,eax
c0012e96:	31 d2                	xor    edx,edx
c0012e98:	46                   	inc    esi
c0012e99:	89 f8                	mov    eax,edi
c0012e9b:	f7 f1                	div    ecx
c0012e9d:	39 cf                	cmp    edi,ecx
c0012e9f:	73 f3                	jae    c0012e94 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012ea1:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012ea4:	eb 02                	jmp    c0012ea8 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012ea6:	89 c3                	mov    ebx,eax
c0012ea8:	31 d2                	xor    edx,edx
c0012eaa:	4e                   	dec    esi
c0012eab:	89 d8                	mov    eax,ebx
c0012ead:	f7 f1                	div    ecx
c0012eaf:	39 cb                	cmp    ebx,ecx
c0012eb1:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012eb5:	88 16                	mov    BYTE PTR [esi],dl
c0012eb7:	73 ed                	jae    c0012ea6 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012eb9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012ebd:	83 c4 40             	add    esp,0x40
c0012ec0:	5b                   	pop    ebx
c0012ec1:	5e                   	pop    esi
c0012ec2:	5f                   	pop    edi
c0012ec3:	c3                   	ret    

c0012ec4 <Dbg::logc(char)>:
c0012ec4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012ec8:	ba fd 03 00 00       	mov    edx,0x3fd
c0012ecd:	ec                   	in     al,dx
c0012ece:	a8 20                	test   al,0x20
c0012ed0:	74 fb                	je     c0012ecd <Dbg::logc(char)+0x9>
c0012ed2:	ba f8 03 00 00       	mov    edx,0x3f8
c0012ed7:	88 c8                	mov    al,cl
c0012ed9:	ee                   	out    dx,al
c0012eda:	c3                   	ret    

c0012edb <Dbg::logs(char*)>:
c0012edb:	53                   	push   ebx
c0012edc:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012ee0:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012ee3:	84 c0                	test   al,al
c0012ee5:	74 0f                	je     c0012ef6 <Dbg::logs(char*)+0x1b>
c0012ee7:	50                   	push   eax
c0012ee8:	43                   	inc    ebx
c0012ee9:	e8 d6 ff ff ff       	call   c0012ec4 <Dbg::logc(char)>
c0012eee:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012ef1:	5a                   	pop    edx
c0012ef2:	84 c0                	test   al,al
c0012ef4:	75 f1                	jne    c0012ee7 <Dbg::logs(char*)+0xc>
c0012ef6:	5b                   	pop    ebx
c0012ef7:	c3                   	ret    

c0012ef8 <Dbg::logWriteInt(unsigned int)>:
c0012ef8:	83 ec 10             	sub    esp,0x10
c0012efb:	6a 0a                	push   0xa
c0012efd:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012f01:	50                   	push   eax
c0012f02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f06:	e8 58 ff ff ff       	call   c0012e63 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012f0b:	50                   	push   eax
c0012f0c:	e8 ca ff ff ff       	call   c0012edb <Dbg::logs(char*)>
c0012f11:	83 c4 20             	add    esp,0x20
c0012f14:	c3                   	ret    

c0012f15 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012f15:	83 ec 10             	sub    esp,0x10
c0012f18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f1c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012f20:	50                   	push   eax
c0012f21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f25:	e8 39 ff ff ff       	call   c0012e63 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012f2a:	50                   	push   eax
c0012f2b:	e8 ab ff ff ff       	call   c0012edb <Dbg::logs(char*)>
c0012f30:	83 c4 20             	add    esp,0x20
c0012f33:	c3                   	ret    

c0012f34 <Dbg::kprintf(char const*, ...)>:
c0012f34:	55                   	push   ebp
c0012f35:	57                   	push   edi
c0012f36:	56                   	push   esi
c0012f37:	53                   	push   ebx
c0012f38:	83 ec 0c             	sub    esp,0xc
c0012f3b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012f3f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012f43:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012f47:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012f4a:	84 c0                	test   al,al
c0012f4c:	74 4a                	je     c0012f98 <Dbg::kprintf(char const*, ...)+0x64>
c0012f4e:	31 db                	xor    ebx,ebx
c0012f50:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012f53:	3c 25                	cmp    al,0x25
c0012f55:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012f58:	0f 85 e4 00 00 00    	jne    c0013042 <Dbg::kprintf(char const*, ...)+0x10e>
c0012f5e:	83 c3 02             	add    ebx,0x2
c0012f61:	8a 07                	mov    al,BYTE PTR [edi]
c0012f63:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012f66:	83 e8 25             	sub    eax,0x25
c0012f69:	3c 53                	cmp    al,0x53
c0012f6b:	0f 87 ba 00 00 00    	ja     c001302b <Dbg::kprintf(char const*, ...)+0xf7>
c0012f71:	0f b6 c0             	movzx  eax,al
c0012f74:	ff 24 85 d4 aa 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd552c]
c0012f7b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f7f:	89 c8                	mov    eax,ecx
c0012f81:	83 c1 04             	add    ecx,0x4
c0012f84:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f88:	ff 30                	push   DWORD PTR [eax]
c0012f8a:	e8 4c ff ff ff       	call   c0012edb <Dbg::logs(char*)>
c0012f8f:	58                   	pop    eax
c0012f90:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012f94:	84 c0                	test   al,al
c0012f96:	75 b8                	jne    c0012f50 <Dbg::kprintf(char const*, ...)+0x1c>
c0012f98:	83 c4 0c             	add    esp,0xc
c0012f9b:	5b                   	pop    ebx
c0012f9c:	5e                   	pop    esi
c0012f9d:	5f                   	pop    edi
c0012f9e:	5d                   	pop    ebp
c0012f9f:	c3                   	ret    
c0012fa0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012fa4:	89 d0                	mov    eax,edx
c0012fa6:	83 c2 04             	add    edx,0x4
c0012fa9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012fad:	ff 30                	push   DWORD PTR [eax]
c0012faf:	e8 44 ff ff ff       	call   c0012ef8 <Dbg::logWriteInt(unsigned int)>
c0012fb4:	58                   	pop    eax
c0012fb5:	eb d9                	jmp    c0012f90 <Dbg::kprintf(char const*, ...)+0x5c>
c0012fb7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012fbb:	89 d0                	mov    eax,edx
c0012fbd:	83 c2 04             	add    edx,0x4
c0012fc0:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012fc3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012fc7:	50                   	push   eax
c0012fc8:	e8 f7 fe ff ff       	call   c0012ec4 <Dbg::logc(char)>
c0012fcd:	58                   	pop    eax
c0012fce:	eb c0                	jmp    c0012f90 <Dbg::kprintf(char const*, ...)+0x5c>
c0012fd0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012fd4:	89 c8                	mov    eax,ecx
c0012fd6:	83 c1 04             	add    ecx,0x4
c0012fd9:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012fdd:	ff 30                	push   DWORD PTR [eax]
c0012fdf:	e8 14 ff ff ff       	call   c0012ef8 <Dbg::logWriteInt(unsigned int)>
c0012fe4:	5f                   	pop    edi
c0012fe5:	eb a9                	jmp    c0012f90 <Dbg::kprintf(char const*, ...)+0x5c>
c0012fe7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012feb:	89 c8                	mov    eax,ecx
c0012fed:	83 c1 04             	add    ecx,0x4
c0012ff0:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012ff4:	6a 10                	push   0x10
c0012ff6:	ff 30                	push   DWORD PTR [eax]
c0012ff8:	e8 18 ff ff ff       	call   c0012f15 <Dbg::logWriteIntBase(unsigned int, int)>
c0012ffd:	59                   	pop    ecx
c0012ffe:	5f                   	pop    edi
c0012fff:	eb 8f                	jmp    c0012f90 <Dbg::kprintf(char const*, ...)+0x5c>
c0013001:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013005:	89 d0                	mov    eax,edx
c0013007:	83 c2 08             	add    edx,0x8
c001300a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001300e:	6a 10                	push   0x10
c0013010:	ff 30                	push   DWORD PTR [eax]
c0013012:	e8 fe fe ff ff       	call   c0012f15 <Dbg::logWriteIntBase(unsigned int, int)>
c0013017:	58                   	pop    eax
c0013018:	5a                   	pop    edx
c0013019:	e9 72 ff ff ff       	jmp    c0012f90 <Dbg::kprintf(char const*, ...)+0x5c>
c001301e:	6a 25                	push   0x25
c0013020:	e8 9f fe ff ff       	call   c0012ec4 <Dbg::logc(char)>
c0013025:	58                   	pop    eax
c0013026:	e9 65 ff ff ff       	jmp    c0012f90 <Dbg::kprintf(char const*, ...)+0x5c>
c001302b:	6a 25                	push   0x25
c001302d:	e8 92 fe ff ff       	call   c0012ec4 <Dbg::logc(char)>
c0013032:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0013035:	50                   	push   eax
c0013036:	e8 89 fe ff ff       	call   c0012ec4 <Dbg::logc(char)>
c001303b:	5a                   	pop    edx
c001303c:	59                   	pop    ecx
c001303d:	e9 4e ff ff ff       	jmp    c0012f90 <Dbg::kprintf(char const*, ...)+0x5c>
c0013042:	50                   	push   eax
c0013043:	89 eb                	mov    ebx,ebp
c0013045:	e8 7a fe ff ff       	call   c0012ec4 <Dbg::logc(char)>
c001304a:	89 fd                	mov    ebp,edi
c001304c:	58                   	pop    eax
c001304d:	e9 3e ff ff ff       	jmp    c0012f90 <Dbg::kprintf(char const*, ...)+0x5c>

c0013052 <File::read(unsigned long long, void*, int*)>:
c0013052:	53                   	push   ebx
c0013053:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013057:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001305b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013062:	3c 19                	cmp    al,0x19
c0013064:	77 35                	ja     c001309b <File::read(unsigned long long, void*, int*)+0x49>
c0013066:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c001306d:	85 c0                	test   eax,eax
c001306f:	74 2a                	je     c001309b <File::read(unsigned long long, void*, int*)+0x49>
c0013071:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013077:	85 c0                	test   eax,eax
c0013079:	74 20                	je     c001309b <File::read(unsigned long long, void*, int*)+0x49>
c001307b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001307f:	74 21                	je     c00130a2 <File::read(unsigned long long, void*, int*)+0x50>
c0013081:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013083:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013087:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001308d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013091:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013095:	5b                   	pop    ebx
c0013096:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0013099:	ff e0                	jmp    eax
c001309b:	b8 0b 00 00 00       	mov    eax,0xb
c00130a0:	eb 05                	jmp    c00130a7 <File::read(unsigned long long, void*, int*)+0x55>
c00130a2:	b8 05 00 00 00       	mov    eax,0x5
c00130a7:	5b                   	pop    ebx
c00130a8:	c3                   	ret    
c00130a9:	90                   	nop

c00130aa <File::write(unsigned long long, void*, int*)>:
c00130aa:	53                   	push   ebx
c00130ab:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00130af:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00130b3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00130ba:	3c 19                	cmp    al,0x19
c00130bc:	77 35                	ja     c00130f3 <File::write(unsigned long long, void*, int*)+0x49>
c00130be:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c00130c5:	85 c0                	test   eax,eax
c00130c7:	74 2a                	je     c00130f3 <File::write(unsigned long long, void*, int*)+0x49>
c00130c9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00130cf:	85 c0                	test   eax,eax
c00130d1:	74 20                	je     c00130f3 <File::write(unsigned long long, void*, int*)+0x49>
c00130d3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130d7:	74 21                	je     c00130fa <File::write(unsigned long long, void*, int*)+0x50>
c00130d9:	8b 08                	mov    ecx,DWORD PTR [eax]
c00130db:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00130df:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00130e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00130e9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00130ed:	5b                   	pop    ebx
c00130ee:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c00130f1:	ff e0                	jmp    eax
c00130f3:	b8 0b 00 00 00       	mov    eax,0xb
c00130f8:	eb 05                	jmp    c00130ff <File::write(unsigned long long, void*, int*)+0x55>
c00130fa:	b8 05 00 00 00       	mov    eax,0x5
c00130ff:	5b                   	pop    ebx
c0013100:	c3                   	ret    
c0013101:	90                   	nop

c0013102 <Directory::read(unsigned long long, void*, int*)>:
c0013102:	53                   	push   ebx
c0013103:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013107:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001310b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013112:	3c 19                	cmp    al,0x19
c0013114:	77 35                	ja     c001314b <Directory::read(unsigned long long, void*, int*)+0x49>
c0013116:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c001311d:	85 c0                	test   eax,eax
c001311f:	74 2a                	je     c001314b <Directory::read(unsigned long long, void*, int*)+0x49>
c0013121:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013127:	85 c0                	test   eax,eax
c0013129:	74 20                	je     c001314b <Directory::read(unsigned long long, void*, int*)+0x49>
c001312b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001312f:	74 21                	je     c0013152 <Directory::read(unsigned long long, void*, int*)+0x50>
c0013131:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013133:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013137:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001313d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013141:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013145:	5b                   	pop    ebx
c0013146:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0013149:	ff e0                	jmp    eax
c001314b:	b8 0b 00 00 00       	mov    eax,0xb
c0013150:	eb 05                	jmp    c0013157 <Directory::read(unsigned long long, void*, int*)+0x55>
c0013152:	b8 05 00 00 00       	mov    eax,0x5
c0013157:	5b                   	pop    ebx
c0013158:	c3                   	ret    
c0013159:	90                   	nop

c001315a <Directory::write(unsigned long long, void*, int*)>:
c001315a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001315e:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0013165:	b8 0b 00 00 00       	mov    eax,0xb
c001316a:	80 fa 19             	cmp    dl,0x19
c001316d:	77 18                	ja     c0013187 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001316f:	8b 14 95 e0 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1420]
c0013176:	85 d2                	test   edx,edx
c0013178:	74 0d                	je     c0013187 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001317a:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0013181:	19 c0                	sbb    eax,eax
c0013183:	83 e0 0a             	and    eax,0xa
c0013186:	40                   	inc    eax
c0013187:	c3                   	ret    

c0013188 <File::isAtty()>:
c0013188:	31 c0                	xor    eax,eax
c001318a:	c3                   	ret    
c001318b:	90                   	nop

c001318c <Directory::isAtty()>:
c001318c:	31 c0                	xor    eax,eax
c001318e:	c3                   	ret    
c001318f:	90                   	nop

c0013190 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0013190:	b8 0a 00 00 00       	mov    eax,0xa
c0013195:	c3                   	ret    

c0013196 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0013196:	b8 0a 00 00 00       	mov    eax,0xa
c001319b:	c3                   	ret    

c001319c <File::~File()>:
c001319c:	83 ec 0c             	sub    esp,0xc
c001319f:	ba 90 ac 02 c0       	mov    edx,0xc002ac90
c00131a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131a8:	89 10                	mov    DWORD PTR [eax],edx
c00131aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131ae:	83 ec 0c             	sub    esp,0xc
c00131b1:	50                   	push   eax
c00131b2:	e8 73 e7 ff ff       	call   c001192a <UnixFile::~UnixFile()>
c00131b7:	83 c4 10             	add    esp,0x10
c00131ba:	90                   	nop
c00131bb:	83 c4 0c             	add    esp,0xc
c00131be:	c3                   	ret    
c00131bf:	90                   	nop

c00131c0 <File::~File()>:
c00131c0:	83 ec 0c             	sub    esp,0xc
c00131c3:	83 ec 0c             	sub    esp,0xc
c00131c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131ca:	e8 cd ff ff ff       	call   c001319c <File::~File()>
c00131cf:	83 c4 10             	add    esp,0x10
c00131d2:	83 ec 08             	sub    esp,0x8
c00131d5:	68 14 01 00 00       	push   0x114
c00131da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131de:	e8 71 fc ff ff       	call   c0012e54 <operator delete(void*, unsigned long)>
c00131e3:	83 c4 10             	add    esp,0x10
c00131e6:	83 c4 0c             	add    esp,0xc
c00131e9:	c3                   	ret    

c00131ea <Directory::~Directory()>:
c00131ea:	83 ec 0c             	sub    esp,0xc
c00131ed:	ba ac ac 02 c0       	mov    edx,0xc002acac
c00131f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131f6:	89 10                	mov    DWORD PTR [eax],edx
c00131f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131fc:	83 ec 0c             	sub    esp,0xc
c00131ff:	50                   	push   eax
c0013200:	e8 25 e7 ff ff       	call   c001192a <UnixFile::~UnixFile()>
c0013205:	83 c4 10             	add    esp,0x10
c0013208:	90                   	nop
c0013209:	83 c4 0c             	add    esp,0xc
c001320c:	c3                   	ret    
c001320d:	90                   	nop

c001320e <Directory::~Directory()>:
c001320e:	83 ec 0c             	sub    esp,0xc
c0013211:	83 ec 0c             	sub    esp,0xc
c0013214:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013218:	e8 cd ff ff ff       	call   c00131ea <Directory::~Directory()>
c001321d:	83 c4 10             	add    esp,0x10
c0013220:	83 ec 08             	sub    esp,0x8
c0013223:	68 14 01 00 00       	push   0x114
c0013228:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001322c:	e8 23 fc ff ff       	call   c0012e54 <operator delete(void*, unsigned long)>
c0013231:	83 c4 10             	add    esp,0x10
c0013234:	83 c4 0c             	add    esp,0xc
c0013237:	c3                   	ret    

c0013238 <Filesystem::Filesystem()>:
c0013238:	ba 2c ac 02 c0       	mov    edx,0xc002ac2c
c001323d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013241:	89 10                	mov    DWORD PTR [eax],edx
c0013243:	8b 15 4c e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e74c
c0013249:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001324d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013250:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013254:	a3 4c e7 02 c0       	mov    ds:0xc002e74c,eax
c0013259:	90                   	nop
c001325a:	c3                   	ret    
c001325b:	90                   	nop

c001325c <Filesystem::~Filesystem()>:
c001325c:	ba 2c ac 02 c0       	mov    edx,0xc002ac2c
c0013261:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013265:	89 10                	mov    DWORD PTR [eax],edx
c0013267:	90                   	nop
c0013268:	c3                   	ret    
c0013269:	90                   	nop

c001326a <Filesystem::~Filesystem()>:
c001326a:	83 ec 0c             	sub    esp,0xc
c001326d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013271:	e8 e6 ff ff ff       	call   c001325c <Filesystem::~Filesystem()>
c0013276:	83 c4 04             	add    esp,0x4
c0013279:	83 ec 08             	sub    esp,0x8
c001327c:	6a 08                	push   0x8
c001327e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013282:	e8 cd fb ff ff       	call   c0012e54 <operator delete(void*, unsigned long)>
c0013287:	83 c4 10             	add    esp,0x10
c001328a:	83 c4 0c             	add    esp,0xc
c001328d:	c3                   	ret    

c001328e <Fs::getcwd(Process*, char*, int)>:
c001328e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013292:	31 c0                	xor    eax,eax
c0013294:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0013297:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001329b:	7d 15                	jge    c00132b2 <Fs::getcwd(Process*, char*, int)+0x24>
c001329d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00132a1:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c00132a8:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00132ab:	84 c9                	test   cl,cl
c00132ad:	74 06                	je     c00132b5 <Fs::getcwd(Process*, char*, int)+0x27>
c00132af:	40                   	inc    eax
c00132b0:	eb e2                	jmp    c0013294 <Fs::getcwd(Process*, char*, int)+0x6>
c00132b2:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00132b5:	31 c0                	xor    eax,eax
c00132b7:	c3                   	ret    

c00132b8 <Fs::initVFS()>:
c00132b8:	83 ec 18             	sub    esp,0x18
c00132bb:	6a 08                	push   0x8
c00132bd:	e8 7e c5 ff ff       	call   c000f840 <malloc>
c00132c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00132c5:	e8 a4 dc 00 00       	call   c0020f6e <FAT::FAT()>
c00132ca:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00132d1:	e8 6a c5 ff ff       	call   c000f840 <malloc>
c00132d6:	89 04 24             	mov    DWORD PTR [esp],eax
c00132d9:	e8 e8 ee 00 00       	call   c00221c6 <ISO9660::ISO9660()>
c00132de:	83 c4 1c             	add    esp,0x1c
c00132e1:	c3                   	ret    

c00132e2 <Fs::standardiseFiles(char*, char const*, char const*)>:
c00132e2:	55                   	push   ebp
c00132e3:	57                   	push   edi
c00132e4:	56                   	push   esi
c00132e5:	53                   	push   ebx
c00132e6:	81 ec 10 04 00 00    	sub    esp,0x410
c00132ec:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c00132f3:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c00132fa:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0013301:	68 00 04 00 00       	push   0x400
c0013306:	6a 00                	push   0x0
c0013308:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001330c:	56                   	push   esi
c001330d:	e8 66 d4 fe ff       	call   c0000778 <memset>
c0013312:	83 c4 10             	add    esp,0x10
c0013315:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0013319:	75 0b                	jne    c0013326 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c001331b:	50                   	push   eax
c001331c:	50                   	push   eax
c001331d:	57                   	push   edi
c001331e:	56                   	push   esi
c001331f:	e8 10 d5 fe ff       	call   c0000834 <strcpy>
c0013324:	eb 41                	jmp    c0013367 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0013326:	8a 07                	mov    al,BYTE PTR [edi]
c0013328:	3c 5c                	cmp    al,0x5c
c001332a:	74 04                	je     c0013330 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c001332c:	3c 2f                	cmp    al,0x2f
c001332e:	75 18                	jne    c0013348 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0013330:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0013333:	3c 60                	cmp    al,0x60
c0013335:	7e 03                	jle    c001333a <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0013337:	83 e8 20             	sub    eax,0x20
c001333a:	88 04 24             	mov    BYTE PTR [esp],al
c001333d:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0013344:	50                   	push   eax
c0013345:	50                   	push   eax
c0013346:	eb 18                	jmp    c0013360 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0013348:	50                   	push   eax
c0013349:	50                   	push   eax
c001334a:	55                   	push   ebp
c001334b:	56                   	push   esi
c001334c:	e8 e3 d4 fe ff       	call   c0000834 <strcpy>
c0013351:	5a                   	pop    edx
c0013352:	59                   	pop    ecx
c0013353:	68 b4 c3 02 c0       	push   0xc002c3b4
c0013358:	56                   	push   esi
c0013359:	e8 16 d6 fe ff       	call   c0000974 <strcat>
c001335e:	5d                   	pop    ebp
c001335f:	58                   	pop    eax
c0013360:	57                   	push   edi
c0013361:	56                   	push   esi
c0013362:	e8 0d d6 fe ff       	call   c0000974 <strcat>
c0013367:	83 c4 10             	add    esp,0x10
c001336a:	8a 04 24             	mov    al,BYTE PTR [esp]
c001336d:	3c 60                	cmp    al,0x60
c001336f:	7e 03                	jle    c0013374 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0013371:	83 e8 20             	sub    eax,0x20
c0013374:	88 04 24             	mov    BYTE PTR [esp],al
c0013377:	88 03                	mov    BYTE PTR [ebx],al
c0013379:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0013380:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0013386:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c001338a:	bf 03 00 00 00       	mov    edi,0x3
c001338f:	b8 03 00 00 00       	mov    eax,0x3
c0013394:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0013397:	84 d2                	test   dl,dl
c0013399:	0f 84 91 00 00 00    	je     c0013430 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c001339f:	8d 4f 01             	lea    ecx,[edi+0x1]
c00133a2:	80 fa 5c             	cmp    dl,0x5c
c00133a5:	74 05                	je     c00133ac <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c00133a7:	80 fa 2f             	cmp    dl,0x2f
c00133aa:	75 12                	jne    c00133be <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00133ac:	89 c5                	mov    ebp,eax
c00133ae:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00133b3:	74 09                	je     c00133be <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00133b5:	40                   	inc    eax
c00133b6:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c00133ba:	89 cf                	mov    edi,ecx
c00133bc:	eb d6                	jmp    c0013394 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c00133be:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c00133c3:	75 5b                	jne    c0013420 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00133c5:	80 fa 2e             	cmp    dl,0x2e
c00133c8:	75 56                	jne    c0013420 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00133ca:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c00133ce:	74 19                	je     c00133e9 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c00133d0:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00133d5:	74 53                	je     c001342a <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c00133d7:	89 f9                	mov    ecx,edi
c00133d9:	41                   	inc    ecx
c00133da:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00133dd:	80 fa 2f             	cmp    dl,0x2f
c00133e0:	74 f7                	je     c00133d9 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c00133e2:	80 fa 5c             	cmp    dl,0x5c
c00133e5:	74 f2                	je     c00133d9 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c00133e7:	eb d1                	jmp    c00133ba <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133e9:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00133ee:	74 3a                	je     c001342a <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c00133f0:	83 f8 03             	cmp    eax,0x3
c00133f3:	74 c5                	je     c00133ba <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133f5:	41                   	inc    ecx
c00133f6:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00133f9:	80 fa 2f             	cmp    dl,0x2f
c00133fc:	74 f7                	je     c00133f5 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c00133fe:	80 fa 5c             	cmp    dl,0x5c
c0013401:	74 f2                	je     c00133f5 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013403:	48                   	dec    eax
c0013404:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013408:	75 06                	jne    c0013410 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c001340a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001340e:	eb f3                	jmp    c0013403 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0013410:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013414:	74 07                	je     c001341d <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0013416:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001341a:	48                   	dec    eax
c001341b:	eb f3                	jmp    c0013410 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c001341d:	40                   	inc    eax
c001341e:	eb 9a                	jmp    c00133ba <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013420:	80 fa 2f             	cmp    dl,0x2f
c0013423:	74 95                	je     c00133ba <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013425:	80 fa 5c             	cmp    dl,0x5c
c0013428:	74 90                	je     c00133ba <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001342a:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c001342d:	40                   	inc    eax
c001342e:	eb 8a                	jmp    c00133ba <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013430:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013434:	83 ec 0c             	sub    esp,0xc
c0013437:	53                   	push   ebx
c0013438:	e8 57 d3 fe ff       	call   c0000794 <strlen>
c001343d:	83 c4 10             	add    esp,0x10
c0013440:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0013445:	75 26                	jne    c001346d <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0013447:	83 ec 0c             	sub    esp,0xc
c001344a:	53                   	push   ebx
c001344b:	e8 44 d3 fe ff       	call   c0000794 <strlen>
c0013450:	83 c4 10             	add    esp,0x10
c0013453:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0013458:	74 26                	je     c0013480 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c001345a:	83 ec 0c             	sub    esp,0xc
c001345d:	53                   	push   ebx
c001345e:	e8 31 d3 fe ff       	call   c0000794 <strlen>
c0013463:	83 c4 10             	add    esp,0x10
c0013466:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001346b:	eb c7                	jmp    c0013434 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c001346d:	83 ec 0c             	sub    esp,0xc
c0013470:	53                   	push   ebx
c0013471:	e8 1e d3 fe ff       	call   c0000794 <strlen>
c0013476:	83 c4 10             	add    esp,0x10
c0013479:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c001347e:	74 c7                	je     c0013447 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0013480:	81 c4 0c 04 00 00    	add    esp,0x40c
c0013486:	5b                   	pop    ebx
c0013487:	5e                   	pop    esi
c0013488:	5f                   	pop    edi
c0013489:	5d                   	pop    ebp
c001348a:	c3                   	ret    
c001348b:	90                   	nop

c001348c <File::File(char const*, Process*)>:
c001348c:	83 ec 0c             	sub    esp,0xc
c001348f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013493:	83 ec 08             	sub    esp,0x8
c0013496:	6a 00                	push   0x0
c0013498:	50                   	push   eax
c0013499:	e8 aa e2 ff ff       	call   c0011748 <UnixFile::UnixFile(int)>
c001349e:	83 c4 10             	add    esp,0x10
c00134a1:	ba 90 ac 02 c0       	mov    edx,0xc002ac90
c00134a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134aa:	89 10                	mov    DWORD PTR [eax],edx
c00134ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00134b0:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00134b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134ba:	83 c0 0d             	add    eax,0xd
c00134bd:	83 ec 04             	sub    esp,0x4
c00134c0:	52                   	push   edx
c00134c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134c5:	50                   	push   eax
c00134c6:	e8 17 fe ff ff       	call   c00132e2 <Fs::standardiseFiles(char*, char const*, char const*)>
c00134cb:	83 c4 10             	add    esp,0x10
c00134ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134d2:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00134d5:	8d 50 bf             	lea    edx,[eax-0x41]
c00134d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134dc:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00134e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134e6:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00134ea:	90                   	nop
c00134eb:	83 c4 0c             	add    esp,0xc
c00134ee:	c3                   	ret    
c00134ef:	90                   	nop

c00134f0 <File::open(FileOpenMode)>:
c00134f0:	53                   	push   ebx
c00134f1:	b8 0b 00 00 00       	mov    eax,0xb
c00134f6:	83 ec 08             	sub    esp,0x8
c00134f9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00134fd:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013504:	80 fa 19             	cmp    dl,0x19
c0013507:	77 40                	ja     c0013549 <File::open(FileOpenMode)+0x59>
c0013509:	8b 14 95 e0 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1420]
c0013510:	85 d2                	test   edx,edx
c0013512:	74 35                	je     c0013549 <File::open(FileOpenMode)+0x59>
c0013514:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001351a:	85 d2                	test   edx,edx
c001351c:	74 2b                	je     c0013549 <File::open(FileOpenMode)+0x59>
c001351e:	b8 06 00 00 00       	mov    eax,0x6
c0013523:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013527:	75 20                	jne    c0013549 <File::open(FileOpenMode)+0x59>
c0013529:	8b 02                	mov    eax,DWORD PTR [edx]
c001352b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013531:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013535:	51                   	push   ecx
c0013536:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013539:	51                   	push   ecx
c001353a:	52                   	push   edx
c001353b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001353e:	83 c4 10             	add    esp,0x10
c0013541:	85 c0                	test   eax,eax
c0013543:	75 04                	jne    c0013549 <File::open(FileOpenMode)+0x59>
c0013545:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013549:	83 c4 08             	add    esp,0x8
c001354c:	5b                   	pop    ebx
c001354d:	c3                   	ret    

c001354e <File::close()>:
c001354e:	53                   	push   ebx
c001354f:	b8 0b 00 00 00       	mov    eax,0xb
c0013554:	83 ec 08             	sub    esp,0x8
c0013557:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001355b:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013562:	80 fa 19             	cmp    dl,0x19
c0013565:	77 41                	ja     c00135a8 <File::close()+0x5a>
c0013567:	8b 1c 95 e0 eb 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1420]
c001356e:	85 db                	test   ebx,ebx
c0013570:	74 36                	je     c00135a8 <File::close()+0x5a>
c0013572:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013579:	74 2d                	je     c00135a8 <File::close()+0x5a>
c001357b:	b8 05 00 00 00       	mov    eax,0x5
c0013580:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013584:	74 22                	je     c00135a8 <File::close()+0x5a>
c0013586:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001358a:	8b 04 95 e0 eb 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1420]
c0013591:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013597:	53                   	push   ebx
c0013598:	53                   	push   ebx
c0013599:	8b 10                	mov    edx,DWORD PTR [eax]
c001359b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00135a1:	50                   	push   eax
c00135a2:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c00135a5:	83 c4 10             	add    esp,0x10
c00135a8:	83 c4 08             	add    esp,0x8
c00135ab:	5b                   	pop    ebx
c00135ac:	c3                   	ret    
c00135ad:	90                   	nop

c00135ae <File::seek(unsigned long long)>:
c00135ae:	56                   	push   esi
c00135af:	53                   	push   ebx
c00135b0:	b8 0b 00 00 00       	mov    eax,0xb
c00135b5:	51                   	push   ecx
c00135b6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00135ba:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00135be:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00135c5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00135c9:	80 fa 19             	cmp    dl,0x19
c00135cc:	77 31                	ja     c00135ff <File::seek(unsigned long long)+0x51>
c00135ce:	8b 14 95 e0 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1420]
c00135d5:	85 d2                	test   edx,edx
c00135d7:	74 26                	je     c00135ff <File::seek(unsigned long long)+0x51>
c00135d9:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00135df:	85 d2                	test   edx,edx
c00135e1:	74 1c                	je     c00135ff <File::seek(unsigned long long)+0x51>
c00135e3:	b8 05 00 00 00       	mov    eax,0x5
c00135e8:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00135ec:	74 11                	je     c00135ff <File::seek(unsigned long long)+0x51>
c00135ee:	8b 02                	mov    eax,DWORD PTR [edx]
c00135f0:	53                   	push   ebx
c00135f1:	51                   	push   ecx
c00135f2:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00135f8:	52                   	push   edx
c00135f9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00135fc:	83 c4 10             	add    esp,0x10
c00135ff:	5a                   	pop    edx
c0013600:	5b                   	pop    ebx
c0013601:	5e                   	pop    esi
c0013602:	c3                   	ret    
c0013603:	90                   	nop

c0013604 <File::tell(unsigned long long*)>:
c0013604:	83 ec 0c             	sub    esp,0xc
c0013607:	b8 0b 00 00 00       	mov    eax,0xb
c001360c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013610:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013617:	80 fa 19             	cmp    dl,0x19
c001361a:	77 34                	ja     c0013650 <File::tell(unsigned long long*)+0x4c>
c001361c:	8b 14 95 e0 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1420]
c0013623:	85 d2                	test   edx,edx
c0013625:	74 29                	je     c0013650 <File::tell(unsigned long long*)+0x4c>
c0013627:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001362d:	85 d2                	test   edx,edx
c001362f:	74 1f                	je     c0013650 <File::tell(unsigned long long*)+0x4c>
c0013631:	b8 05 00 00 00       	mov    eax,0x5
c0013636:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001363a:	74 14                	je     c0013650 <File::tell(unsigned long long*)+0x4c>
c001363c:	50                   	push   eax
c001363d:	8b 02                	mov    eax,DWORD PTR [edx]
c001363f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013643:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013649:	52                   	push   edx
c001364a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001364d:	83 c4 10             	add    esp,0x10
c0013650:	83 c4 0c             	add    esp,0xc
c0013653:	c3                   	ret    

c0013654 <File::rewind()>:
c0013654:	83 ec 10             	sub    esp,0x10
c0013657:	6a 00                	push   0x0
c0013659:	6a 00                	push   0x0
c001365b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001365f:	e8 4a ff ff ff       	call   c00135ae <File::seek(unsigned long long)>
c0013664:	83 c4 1c             	add    esp,0x1c
c0013667:	c3                   	ret    

c0013668 <File::unlink()>:
c0013668:	83 ec 0c             	sub    esp,0xc
c001366b:	b8 0b 00 00 00       	mov    eax,0xb
c0013670:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013674:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001367b:	80 f9 19             	cmp    cl,0x19
c001367e:	77 2f                	ja     c00136af <File::unlink()+0x47>
c0013680:	8b 0c 8d e0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1420]
c0013687:	85 c9                	test   ecx,ecx
c0013689:	74 24                	je     c00136af <File::unlink()+0x47>
c001368b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013691:	85 c9                	test   ecx,ecx
c0013693:	74 1a                	je     c00136af <File::unlink()+0x47>
c0013695:	b8 06 00 00 00       	mov    eax,0x6
c001369a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001369e:	75 0f                	jne    c00136af <File::unlink()+0x47>
c00136a0:	83 c2 0d             	add    edx,0xd
c00136a3:	50                   	push   eax
c00136a4:	50                   	push   eax
c00136a5:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136a7:	52                   	push   edx
c00136a8:	51                   	push   ecx
c00136a9:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00136ac:	83 c4 10             	add    esp,0x10
c00136af:	83 c4 0c             	add    esp,0xc
c00136b2:	c3                   	ret    
c00136b3:	90                   	nop

c00136b4 <File::rename(char const*)>:
c00136b4:	83 ec 0c             	sub    esp,0xc
c00136b7:	b8 0b 00 00 00       	mov    eax,0xb
c00136bc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136c0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136c7:	80 f9 19             	cmp    cl,0x19
c00136ca:	77 32                	ja     c00136fe <File::rename(char const*)+0x4a>
c00136cc:	8b 0c 8d e0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1420]
c00136d3:	85 c9                	test   ecx,ecx
c00136d5:	74 27                	je     c00136fe <File::rename(char const*)+0x4a>
c00136d7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136dd:	85 c9                	test   ecx,ecx
c00136df:	74 1d                	je     c00136fe <File::rename(char const*)+0x4a>
c00136e1:	b8 06 00 00 00       	mov    eax,0x6
c00136e6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00136ea:	75 12                	jne    c00136fe <File::rename(char const*)+0x4a>
c00136ec:	83 c2 0d             	add    edx,0xd
c00136ef:	50                   	push   eax
c00136f0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00136f6:	52                   	push   edx
c00136f7:	51                   	push   ecx
c00136f8:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00136fb:	83 c4 10             	add    esp,0x10
c00136fe:	83 c4 0c             	add    esp,0xc
c0013701:	c3                   	ret    

c0013702 <File::chfatattr(unsigned char, unsigned char)>:
c0013702:	57                   	push   edi
c0013703:	b8 0b 00 00 00       	mov    eax,0xb
c0013708:	56                   	push   esi
c0013709:	53                   	push   ebx
c001370a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001370e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013712:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013719:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001371d:	80 f9 19             	cmp    cl,0x19
c0013720:	77 37                	ja     c0013759 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013722:	8b 0c 8d e0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1420]
c0013729:	85 c9                	test   ecx,ecx
c001372b:	74 2c                	je     c0013759 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001372d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013733:	85 c9                	test   ecx,ecx
c0013735:	74 22                	je     c0013759 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013737:	b8 06 00 00 00       	mov    eax,0x6
c001373c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013740:	75 17                	jne    c0013759 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013742:	8b 39                	mov    edi,DWORD PTR [ecx]
c0013744:	89 f0                	mov    eax,esi
c0013746:	83 c2 0d             	add    edx,0xd
c0013749:	0f b6 f0             	movzx  esi,al
c001374c:	0f b6 db             	movzx  ebx,bl
c001374f:	56                   	push   esi
c0013750:	53                   	push   ebx
c0013751:	52                   	push   edx
c0013752:	51                   	push   ecx
c0013753:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0013756:	83 c4 10             	add    esp,0x10
c0013759:	5b                   	pop    ebx
c001375a:	5e                   	pop    esi
c001375b:	5f                   	pop    edi
c001375c:	c3                   	ret    
c001375d:	90                   	nop

c001375e <File::exists()>:
c001375e:	83 ec 0c             	sub    esp,0xc
c0013761:	31 c0                	xor    eax,eax
c0013763:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013767:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001376e:	80 f9 19             	cmp    cl,0x19
c0013771:	77 24                	ja     c0013797 <File::exists()+0x39>
c0013773:	8b 0c 8d e0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1420]
c001377a:	85 c9                	test   ecx,ecx
c001377c:	74 19                	je     c0013797 <File::exists()+0x39>
c001377e:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013784:	85 c9                	test   ecx,ecx
c0013786:	74 0f                	je     c0013797 <File::exists()+0x39>
c0013788:	83 c2 0d             	add    edx,0xd
c001378b:	50                   	push   eax
c001378c:	50                   	push   eax
c001378d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001378f:	52                   	push   edx
c0013790:	51                   	push   ecx
c0013791:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013794:	83 c4 10             	add    esp,0x10
c0013797:	83 c4 0c             	add    esp,0xc
c001379a:	c3                   	ret    
c001379b:	90                   	nop

c001379c <File::stat(unsigned long long*, bool*)>:
c001379c:	56                   	push   esi
c001379d:	53                   	push   ebx
c001379e:	50                   	push   eax
c001379f:	b8 0b 00 00 00       	mov    eax,0xb
c00137a4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00137a8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00137ac:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00137b3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00137b7:	80 f9 19             	cmp    cl,0x19
c00137ba:	77 3d                	ja     c00137f9 <File::stat(unsigned long long*, bool*)+0x5d>
c00137bc:	8b 0c 8d e0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1420]
c00137c3:	85 c9                	test   ecx,ecx
c00137c5:	74 32                	je     c00137f9 <File::stat(unsigned long long*, bool*)+0x5d>
c00137c7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00137cd:	85 c9                	test   ecx,ecx
c00137cf:	74 28                	je     c00137f9 <File::stat(unsigned long long*, bool*)+0x5d>
c00137d1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00137d3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00137d7:	74 13                	je     c00137ec <File::stat(unsigned long long*, bool*)+0x50>
c00137d9:	83 ec 04             	sub    esp,0x4
c00137dc:	56                   	push   esi
c00137dd:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00137e3:	51                   	push   ecx
c00137e4:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00137e7:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00137ea:	eb 0a                	jmp    c00137f6 <File::stat(unsigned long long*, bool*)+0x5a>
c00137ec:	53                   	push   ebx
c00137ed:	83 c2 0d             	add    edx,0xd
c00137f0:	56                   	push   esi
c00137f1:	52                   	push   edx
c00137f2:	51                   	push   ecx
c00137f3:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00137f6:	83 c4 10             	add    esp,0x10
c00137f9:	5a                   	pop    edx
c00137fa:	5b                   	pop    ebx
c00137fb:	5e                   	pop    esi
c00137fc:	c3                   	ret    

c00137fd <Fs::setcwd(Process*, char*)>:
c00137fd:	55                   	push   ebp
c00137fe:	57                   	push   edi
c00137ff:	56                   	push   esi
c0013800:	53                   	push   ebx
c0013801:	81 ec 20 02 00 00    	sub    esp,0x220
c0013807:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c001380e:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0013814:	57                   	push   edi
c0013815:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001381c:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0013820:	56                   	push   esi
c0013821:	e8 bc fa ff ff       	call   c00132e2 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013826:	89 34 24             	mov    DWORD PTR [esp],esi
c0013829:	e8 66 cf fe ff       	call   c0000794 <strlen>
c001382e:	83 c4 10             	add    esp,0x10
c0013831:	83 f8 02             	cmp    eax,0x2
c0013834:	77 17                	ja     c001384d <Fs::setcwd(Process*, char*)+0x50>
c0013836:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c001383b:	83 e8 41             	sub    eax,0x41
c001383e:	83 f8 19             	cmp    eax,0x19
c0013841:	76 24                	jbe    c0013867 <Fs::setcwd(Process*, char*)+0x6a>
c0013843:	b8 03 00 00 00       	mov    eax,0x3
c0013848:	e9 e0 00 00 00       	jmp    c001392d <Fs::setcwd(Process*, char*)+0x130>
c001384d:	83 ec 0c             	sub    esp,0xc
c0013850:	56                   	push   esi
c0013851:	e8 3e cf fe ff       	call   c0000794 <strlen>
c0013856:	83 c4 10             	add    esp,0x10
c0013859:	83 f8 03             	cmp    eax,0x3
c001385c:	75 34                	jne    c0013892 <Fs::setcwd(Process*, char*)+0x95>
c001385e:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013863:	75 2d                	jne    c0013892 <Fs::setcwd(Process*, char*)+0x95>
c0013865:	eb cf                	jmp    c0013836 <Fs::setcwd(Process*, char*)+0x39>
c0013867:	8b 14 85 e0 eb 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1420]
c001386e:	b8 05 00 00 00       	mov    eax,0x5
c0013873:	85 d2                	test   edx,edx
c0013875:	0f 84 b2 00 00 00    	je     c001392d <Fs::setcwd(Process*, char*)+0x130>
c001387b:	b8 06 00 00 00       	mov    eax,0x6
c0013880:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013887:	0f 85 92 00 00 00    	jne    c001391f <Fs::setcwd(Process*, char*)+0x122>
c001388d:	e9 9b 00 00 00       	jmp    c001392d <Fs::setcwd(Process*, char*)+0x130>
c0013892:	83 ec 0c             	sub    esp,0xc
c0013895:	68 14 01 00 00       	push   0x114
c001389a:	e8 a1 bf ff ff       	call   c000f840 <malloc>
c001389f:	83 c4 0c             	add    esp,0xc
c00138a2:	89 c3                	mov    ebx,eax
c00138a4:	55                   	push   ebp
c00138a5:	56                   	push   esi
c00138a6:	50                   	push   eax
c00138a7:	e8 e0 fb ff ff       	call   c001348c <File::File(char const*, Process*)>
c00138ac:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00138b1:	83 c4 0c             	add    esp,0xc
c00138b4:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00138b8:	50                   	push   eax
c00138b9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00138bd:	50                   	push   eax
c00138be:	53                   	push   ebx
c00138bf:	e8 d8 fe ff ff       	call   c001379c <File::stat(unsigned long long*, bool*)>
c00138c4:	83 c4 10             	add    esp,0x10
c00138c7:	83 f8 02             	cmp    eax,0x2
c00138ca:	74 04                	je     c00138d0 <Fs::setcwd(Process*, char*)+0xd3>
c00138cc:	85 c0                	test   eax,eax
c00138ce:	74 1c                	je     c00138ec <Fs::setcwd(Process*, char*)+0xef>
c00138d0:	b8 01 00 00 00       	mov    eax,0x1
c00138d5:	85 db                	test   ebx,ebx
c00138d7:	74 54                	je     c001392d <Fs::setcwd(Process*, char*)+0x130>
c00138d9:	83 ec 0c             	sub    esp,0xc
c00138dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138de:	53                   	push   ebx
c00138df:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00138e2:	83 c4 10             	add    esp,0x10
c00138e5:	b8 01 00 00 00       	mov    eax,0x1
c00138ea:	eb 41                	jmp    c001392d <Fs::setcwd(Process*, char*)+0x130>
c00138ec:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00138f1:	75 1c                	jne    c001390f <Fs::setcwd(Process*, char*)+0x112>
c00138f3:	b8 02 00 00 00       	mov    eax,0x2
c00138f8:	85 db                	test   ebx,ebx
c00138fa:	74 31                	je     c001392d <Fs::setcwd(Process*, char*)+0x130>
c00138fc:	83 ec 0c             	sub    esp,0xc
c00138ff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013901:	53                   	push   ebx
c0013902:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013905:	83 c4 10             	add    esp,0x10
c0013908:	b8 02 00 00 00       	mov    eax,0x2
c001390d:	eb 1e                	jmp    c001392d <Fs::setcwd(Process*, char*)+0x130>
c001390f:	85 db                	test   ebx,ebx
c0013911:	74 0c                	je     c001391f <Fs::setcwd(Process*, char*)+0x122>
c0013913:	83 ec 0c             	sub    esp,0xc
c0013916:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013918:	53                   	push   ebx
c0013919:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001391c:	83 c4 10             	add    esp,0x10
c001391f:	50                   	push   eax
c0013920:	50                   	push   eax
c0013921:	56                   	push   esi
c0013922:	57                   	push   edi
c0013923:	e8 0c cf fe ff       	call   c0000834 <strcpy>
c0013928:	83 c4 10             	add    esp,0x10
c001392b:	31 c0                	xor    eax,eax
c001392d:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013933:	5b                   	pop    ebx
c0013934:	5e                   	pop    esi
c0013935:	5f                   	pop    edi
c0013936:	5d                   	pop    ebp
c0013937:	c3                   	ret    

c0013938 <Directory::Directory(char const*, Process*)>:
c0013938:	83 ec 0c             	sub    esp,0xc
c001393b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001393f:	83 ec 08             	sub    esp,0x8
c0013942:	6a 00                	push   0x0
c0013944:	50                   	push   eax
c0013945:	e8 fe dd ff ff       	call   c0011748 <UnixFile::UnixFile(int)>
c001394a:	83 c4 10             	add    esp,0x10
c001394d:	ba ac ac 02 c0       	mov    edx,0xc002acac
c0013952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013956:	89 10                	mov    DWORD PTR [eax],edx
c0013958:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001395c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013966:	83 c0 0d             	add    eax,0xd
c0013969:	83 ec 04             	sub    esp,0x4
c001396c:	52                   	push   edx
c001396d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013971:	50                   	push   eax
c0013972:	e8 6b f9 ff ff       	call   c00132e2 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013977:	83 c4 10             	add    esp,0x10
c001397a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001397e:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013981:	8d 50 bf             	lea    edx,[eax-0x41]
c0013984:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013988:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001398e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013992:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013996:	90                   	nop
c0013997:	83 c4 0c             	add    esp,0xc
c001399a:	c3                   	ret    
c001399b:	90                   	nop

c001399c <Directory::open()>:
c001399c:	53                   	push   ebx
c001399d:	b8 0b 00 00 00       	mov    eax,0xb
c00139a2:	83 ec 08             	sub    esp,0x8
c00139a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00139a9:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00139b0:	80 fa 19             	cmp    dl,0x19
c00139b3:	77 3d                	ja     c00139f2 <Directory::open()+0x56>
c00139b5:	8b 14 95 e0 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1420]
c00139bc:	85 d2                	test   edx,edx
c00139be:	74 32                	je     c00139f2 <Directory::open()+0x56>
c00139c0:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00139c6:	85 d2                	test   edx,edx
c00139c8:	74 28                	je     c00139f2 <Directory::open()+0x56>
c00139ca:	b8 06 00 00 00       	mov    eax,0x6
c00139cf:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00139d3:	75 1d                	jne    c00139f2 <Directory::open()+0x56>
c00139d5:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00139db:	50                   	push   eax
c00139dc:	8b 02                	mov    eax,DWORD PTR [edx]
c00139de:	51                   	push   ecx
c00139df:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00139e2:	51                   	push   ecx
c00139e3:	52                   	push   edx
c00139e4:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c00139e7:	83 c4 10             	add    esp,0x10
c00139ea:	85 c0                	test   eax,eax
c00139ec:	75 04                	jne    c00139f2 <Directory::open()+0x56>
c00139ee:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00139f2:	83 c4 08             	add    esp,0x8
c00139f5:	5b                   	pop    ebx
c00139f6:	c3                   	ret    
c00139f7:	90                   	nop

c00139f8 <Directory::close()>:
c00139f8:	53                   	push   ebx
c00139f9:	b8 0b 00 00 00       	mov    eax,0xb
c00139fe:	83 ec 08             	sub    esp,0x8
c0013a01:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013a05:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013a0c:	80 fa 19             	cmp    dl,0x19
c0013a0f:	77 41                	ja     c0013a52 <Directory::close()+0x5a>
c0013a11:	8b 1c 95 e0 eb 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1420]
c0013a18:	85 db                	test   ebx,ebx
c0013a1a:	74 36                	je     c0013a52 <Directory::close()+0x5a>
c0013a1c:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013a23:	74 2d                	je     c0013a52 <Directory::close()+0x5a>
c0013a25:	b8 05 00 00 00       	mov    eax,0x5
c0013a2a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013a2e:	74 22                	je     c0013a52 <Directory::close()+0x5a>
c0013a30:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013a34:	8b 04 95 e0 eb 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1420]
c0013a3b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013a41:	53                   	push   ebx
c0013a42:	53                   	push   ebx
c0013a43:	8b 10                	mov    edx,DWORD PTR [eax]
c0013a45:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013a4b:	50                   	push   eax
c0013a4c:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013a4f:	83 c4 10             	add    esp,0x10
c0013a52:	83 c4 08             	add    esp,0x8
c0013a55:	5b                   	pop    ebx
c0013a56:	c3                   	ret    
c0013a57:	90                   	nop

c0013a58 <Directory::unlink()>:
c0013a58:	83 ec 0c             	sub    esp,0xc
c0013a5b:	b8 0b 00 00 00       	mov    eax,0xb
c0013a60:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a64:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a6b:	80 f9 19             	cmp    cl,0x19
c0013a6e:	77 2f                	ja     c0013a9f <Directory::unlink()+0x47>
c0013a70:	8b 0c 8d e0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1420]
c0013a77:	85 c9                	test   ecx,ecx
c0013a79:	74 24                	je     c0013a9f <Directory::unlink()+0x47>
c0013a7b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a81:	85 c9                	test   ecx,ecx
c0013a83:	74 1a                	je     c0013a9f <Directory::unlink()+0x47>
c0013a85:	b8 06 00 00 00       	mov    eax,0x6
c0013a8a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013a8e:	75 0f                	jne    c0013a9f <Directory::unlink()+0x47>
c0013a90:	83 c2 0d             	add    edx,0xd
c0013a93:	50                   	push   eax
c0013a94:	50                   	push   eax
c0013a95:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a97:	52                   	push   edx
c0013a98:	51                   	push   ecx
c0013a99:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013a9c:	83 c4 10             	add    esp,0x10
c0013a9f:	83 c4 0c             	add    esp,0xc
c0013aa2:	c3                   	ret    
c0013aa3:	90                   	nop

c0013aa4 <Directory::rename(char const*)>:
c0013aa4:	83 ec 0c             	sub    esp,0xc
c0013aa7:	b8 0b 00 00 00       	mov    eax,0xb
c0013aac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013ab0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013ab7:	80 f9 19             	cmp    cl,0x19
c0013aba:	77 32                	ja     c0013aee <Directory::rename(char const*)+0x4a>
c0013abc:	8b 0c 8d e0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1420]
c0013ac3:	85 c9                	test   ecx,ecx
c0013ac5:	74 27                	je     c0013aee <Directory::rename(char const*)+0x4a>
c0013ac7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013acd:	85 c9                	test   ecx,ecx
c0013acf:	74 1d                	je     c0013aee <Directory::rename(char const*)+0x4a>
c0013ad1:	b8 06 00 00 00       	mov    eax,0x6
c0013ad6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013ada:	75 12                	jne    c0013aee <Directory::rename(char const*)+0x4a>
c0013adc:	83 c2 0d             	add    edx,0xd
c0013adf:	50                   	push   eax
c0013ae0:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013ae2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ae6:	52                   	push   edx
c0013ae7:	51                   	push   ecx
c0013ae8:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013aeb:	83 c4 10             	add    esp,0x10
c0013aee:	83 c4 0c             	add    esp,0xc
c0013af1:	c3                   	ret    

c0013af2 <Directory::exists()>:
c0013af2:	83 ec 0c             	sub    esp,0xc
c0013af5:	31 c0                	xor    eax,eax
c0013af7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013afb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b02:	80 f9 19             	cmp    cl,0x19
c0013b05:	77 24                	ja     c0013b2b <Directory::exists()+0x39>
c0013b07:	8b 0c 8d e0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1420]
c0013b0e:	85 c9                	test   ecx,ecx
c0013b10:	74 19                	je     c0013b2b <Directory::exists()+0x39>
c0013b12:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b18:	85 c9                	test   ecx,ecx
c0013b1a:	74 0f                	je     c0013b2b <Directory::exists()+0x39>
c0013b1c:	83 c2 0d             	add    edx,0xd
c0013b1f:	50                   	push   eax
c0013b20:	50                   	push   eax
c0013b21:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b23:	52                   	push   edx
c0013b24:	51                   	push   ecx
c0013b25:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013b28:	83 c4 10             	add    esp,0x10
c0013b2b:	83 c4 0c             	add    esp,0xc
c0013b2e:	c3                   	ret    
c0013b2f:	90                   	nop

c0013b30 <Directory::read(dirent*)>:
c0013b30:	83 ec 1c             	sub    esp,0x1c
c0013b33:	b8 0b 00 00 00       	mov    eax,0xb
c0013b38:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013b3c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013b43:	80 fa 19             	cmp    dl,0x19
c0013b46:	77 30                	ja     c0013b78 <Directory::read(dirent*)+0x48>
c0013b48:	8b 14 95 e0 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1420]
c0013b4f:	85 d2                	test   edx,edx
c0013b51:	74 25                	je     c0013b78 <Directory::read(dirent*)+0x48>
c0013b53:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013b5a:	74 1c                	je     c0013b78 <Directory::read(dirent*)+0x48>
c0013b5c:	83 ec 0c             	sub    esp,0xc
c0013b5f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b61:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013b65:	52                   	push   edx
c0013b66:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013b6a:	6a 00                	push   0x0
c0013b6c:	68 10 01 00 00       	push   0x110
c0013b71:	51                   	push   ecx
c0013b72:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013b75:	83 c4 20             	add    esp,0x20
c0013b78:	83 c4 1c             	add    esp,0x1c
c0013b7b:	c3                   	ret    

c0013b7c <Directory::create()>:
c0013b7c:	83 ec 0c             	sub    esp,0xc
c0013b7f:	b8 0b 00 00 00       	mov    eax,0xb
c0013b84:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b88:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b8f:	80 f9 19             	cmp    cl,0x19
c0013b92:	77 2f                	ja     c0013bc3 <Directory::create()+0x47>
c0013b94:	8b 0c 8d e0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1420]
c0013b9b:	85 c9                	test   ecx,ecx
c0013b9d:	74 24                	je     c0013bc3 <Directory::create()+0x47>
c0013b9f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013ba5:	85 c9                	test   ecx,ecx
c0013ba7:	74 1a                	je     c0013bc3 <Directory::create()+0x47>
c0013ba9:	b8 06 00 00 00       	mov    eax,0x6
c0013bae:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013bb2:	75 0f                	jne    c0013bc3 <Directory::create()+0x47>
c0013bb4:	83 c2 0d             	add    edx,0xd
c0013bb7:	50                   	push   eax
c0013bb8:	50                   	push   eax
c0013bb9:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013bbb:	52                   	push   edx
c0013bbc:	51                   	push   ecx
c0013bbd:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013bc0:	83 c4 10             	add    esp,0x10
c0013bc3:	83 c4 0c             	add    esp,0xc
c0013bc6:	c3                   	ret    
c0013bc7:	90                   	nop

c0013bc8 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013bc8:	b8 0a 00 00 00       	mov    eax,0xa
c0013bcd:	c3                   	ret    

c0013bce <Bus::Bus(char const*)>:
c0013bce:	83 ec 0c             	sub    esp,0xc
c0013bd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bd5:	83 ec 08             	sub    esp,0x8
c0013bd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bdc:	50                   	push   eax
c0013bdd:	e8 68 09 00 00       	call   c001454a <Device::Device(char const*)>
c0013be2:	83 c4 10             	add    esp,0x10
c0013be5:	ba c8 ac 02 c0       	mov    edx,0xc002acc8
c0013bea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bee:	89 10                	mov    DWORD PTR [eax],edx
c0013bf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bf4:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013bfe:	90                   	nop
c0013bff:	83 c4 0c             	add    esp,0xc
c0013c02:	c3                   	ret    
c0013c03:	90                   	nop

c0013c04 <Bus::~Bus()>:
c0013c04:	83 ec 0c             	sub    esp,0xc
c0013c07:	ba c8 ac 02 c0       	mov    edx,0xc002acc8
c0013c0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c10:	89 10                	mov    DWORD PTR [eax],edx
c0013c12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c16:	83 ec 0c             	sub    esp,0xc
c0013c19:	50                   	push   eax
c0013c1a:	e8 0d 06 00 00       	call   c001422c <Device::~Device()>
c0013c1f:	83 c4 10             	add    esp,0x10
c0013c22:	90                   	nop
c0013c23:	83 c4 0c             	add    esp,0xc
c0013c26:	c3                   	ret    
c0013c27:	90                   	nop

c0013c28 <Bus::~Bus()>:
c0013c28:	83 ec 0c             	sub    esp,0xc
c0013c2b:	83 ec 0c             	sub    esp,0xc
c0013c2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c32:	e8 cd ff ff ff       	call   c0013c04 <Bus::~Bus()>
c0013c37:	83 c4 10             	add    esp,0x10
c0013c3a:	83 ec 08             	sub    esp,0x8
c0013c3d:	68 58 01 00 00       	push   0x158
c0013c42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c46:	e8 09 f2 ff ff       	call   c0012e54 <operator delete(void*, unsigned long)>
c0013c4b:	83 c4 10             	add    esp,0x10
c0013c4e:	83 c4 0c             	add    esp,0xc
c0013c51:	c3                   	ret    

c0013c52 <Buzzer::Buzzer(char const*)>:
c0013c52:	83 ec 0c             	sub    esp,0xc
c0013c55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c59:	83 ec 08             	sub    esp,0x8
c0013c5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c60:	50                   	push   eax
c0013c61:	e8 e4 08 00 00       	call   c001454a <Device::Device(char const*)>
c0013c66:	83 c4 10             	add    esp,0x10
c0013c69:	ba f4 ac 02 c0       	mov    edx,0xc002acf4
c0013c6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c72:	89 10                	mov    DWORD PTR [eax],edx
c0013c74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c78:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c86:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013c90:	90                   	nop
c0013c91:	83 c4 0c             	add    esp,0xc
c0013c94:	c3                   	ret    
c0013c95:	90                   	nop

c0013c96 <Buzzer::~Buzzer()>:
c0013c96:	83 ec 0c             	sub    esp,0xc
c0013c99:	ba f4 ac 02 c0       	mov    edx,0xc002acf4
c0013c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ca2:	89 10                	mov    DWORD PTR [eax],edx
c0013ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ca8:	83 ec 0c             	sub    esp,0xc
c0013cab:	50                   	push   eax
c0013cac:	e8 7b 05 00 00       	call   c001422c <Device::~Device()>
c0013cb1:	83 c4 10             	add    esp,0x10
c0013cb4:	90                   	nop
c0013cb5:	83 c4 0c             	add    esp,0xc
c0013cb8:	c3                   	ret    
c0013cb9:	90                   	nop

c0013cba <Buzzer::~Buzzer()>:
c0013cba:	83 ec 0c             	sub    esp,0xc
c0013cbd:	83 ec 0c             	sub    esp,0xc
c0013cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cc4:	e8 cd ff ff ff       	call   c0013c96 <Buzzer::~Buzzer()>
c0013cc9:	83 c4 10             	add    esp,0x10
c0013ccc:	83 ec 08             	sub    esp,0x8
c0013ccf:	68 5c 01 00 00       	push   0x15c
c0013cd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cd8:	e8 77 f1 ff ff       	call   c0012e54 <operator delete(void*, unsigned long)>
c0013cdd:	83 c4 10             	add    esp,0x10
c0013ce0:	83 c4 0c             	add    esp,0xc
c0013ce3:	c3                   	ret    

c0013ce4 <Buzzer::stop()>:
c0013ce4:	83 ec 14             	sub    esp,0x14
c0013ce7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ceb:	8b 10                	mov    edx,DWORD PTR [eax]
c0013ced:	6a 00                	push   0x0
c0013cef:	50                   	push   eax
c0013cf0:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013cf3:	83 c4 1c             	add    esp,0x1c
c0013cf6:	c3                   	ret    

c0013cf7 <beepThread(void*)>:
c0013cf7:	53                   	push   ebx
c0013cf8:	83 ec 08             	sub    esp,0x8
c0013cfb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013cff:	e8 f8 a0 00 00       	call   c001ddfc <unlockScheduler()>
c0013d04:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013d09:	52                   	push   edx
c0013d0a:	52                   	push   edx
c0013d0b:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013d11:	52                   	push   edx
c0013d12:	50                   	push   eax
c0013d13:	e8 32 a6 00 00       	call   c001e34a <nanoSleep(unsigned long long)>
c0013d18:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d1b:	e8 c4 ff ff ff       	call   c0013ce4 <Buzzer::stop()>
c0013d20:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013d28:	83 c4 18             	add    esp,0x18
c0013d2b:	5b                   	pop    ebx
c0013d2c:	e9 5f a5 00 00       	jmp    c001e290 <blockTask(TaskState)>
c0013d31:	90                   	nop

c0013d32 <Buzzer::beep(int, int, bool)>:
c0013d32:	57                   	push   edi
c0013d33:	56                   	push   esi
c0013d34:	53                   	push   ebx
c0013d35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d39:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013d3d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d41:	52                   	push   edx
c0013d42:	52                   	push   edx
c0013d43:	8b 06                	mov    eax,DWORD PTR [esi]
c0013d45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d49:	56                   	push   esi
c0013d4a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013d4d:	83 c4 10             	add    esp,0x10
c0013d50:	89 f8                	mov    eax,edi
c0013d52:	84 c0                	test   al,al
c0013d54:	74 1f                	je     c0013d75 <Buzzer::beep(int, int, bool)+0x43>
c0013d56:	50                   	push   eax
c0013d57:	50                   	push   eax
c0013d58:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013d5e:	99                   	cdq    
c0013d5f:	52                   	push   edx
c0013d60:	50                   	push   eax
c0013d61:	e8 e4 a5 00 00       	call   c001e34a <nanoSleep(unsigned long long)>
c0013d66:	83 c4 10             	add    esp,0x10
c0013d69:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013d6d:	5b                   	pop    ebx
c0013d6e:	5e                   	pop    esi
c0013d6f:	5f                   	pop    edi
c0013d70:	e9 6f ff ff ff       	jmp    c0013ce4 <Buzzer::stop()>
c0013d75:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013d7b:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0013d80:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013d88:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013d8c:	c7 44 24 14 f7 3c 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013cf7
c0013d94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013d98:	5b                   	pop    ebx
c0013d99:	5e                   	pop    esi
c0013d9a:	5f                   	pop    edi
c0013d9b:	e9 8c a1 00 00       	jmp    c001df2c <Process::createThread(void (*)(void*), void*, int)>

c0013da0 <User::loadClockSettings(int)>:
c0013da0:	53                   	push   ebx
c0013da1:	83 ec 14             	sub    esp,0x14
c0013da4:	68 14 01 00 00       	push   0x114
c0013da9:	e8 92 ba ff ff       	call   c000f840 <malloc>
c0013dae:	83 c4 0c             	add    esp,0xc
c0013db1:	89 c3                	mov    ebx,eax
c0013db3:	ff 35 34 1b 03 c0    	push   DWORD PTR ds:0xc0031b34
c0013db9:	68 1c ad 02 c0       	push   0xc002ad1c
c0013dbe:	50                   	push   eax
c0013dbf:	e8 c8 f6 ff ff       	call   c001348c <File::File(char const*, Process*)>
c0013dc4:	58                   	pop    eax
c0013dc5:	5a                   	pop    edx
c0013dc6:	6a 01                	push   0x1
c0013dc8:	53                   	push   ebx
c0013dc9:	e8 22 f7 ff ff       	call   c00134f0 <File::open(FileOpenMode)>
c0013dce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013dd1:	e8 78 f7 ff ff       	call   c001354e <File::close()>
c0013dd6:	83 c4 10             	add    esp,0x10
c0013dd9:	85 db                	test   ebx,ebx
c0013ddb:	74 0f                	je     c0013dec <User::loadClockSettings(int)+0x4c>
c0013ddd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ddf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013de3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013de6:	83 c4 08             	add    esp,0x8
c0013de9:	5b                   	pop    ebx
c0013dea:	ff e0                	jmp    eax
c0013dec:	83 c4 08             	add    esp,0x8
c0013def:	5b                   	pop    ebx
c0013df0:	c3                   	ret    
c0013df1:	90                   	nop

c0013df2 <Clock::Clock(char const*)>:
c0013df2:	83 ec 0c             	sub    esp,0xc
c0013df5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013df9:	83 ec 08             	sub    esp,0x8
c0013dfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e00:	50                   	push   eax
c0013e01:	e8 44 07 00 00       	call   c001454a <Device::Device(char const*)>
c0013e06:	83 c4 10             	add    esp,0x10
c0013e09:	ba 44 ad 02 c0       	mov    edx,0xc002ad44
c0013e0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e12:	89 10                	mov    DWORD PTR [eax],edx
c0013e14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e18:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013e22:	90                   	nop
c0013e23:	83 c4 0c             	add    esp,0xc
c0013e26:	c3                   	ret    
c0013e27:	90                   	nop

c0013e28 <Clock::~Clock()>:
c0013e28:	83 ec 0c             	sub    esp,0xc
c0013e2b:	ba 44 ad 02 c0       	mov    edx,0xc002ad44
c0013e30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e34:	89 10                	mov    DWORD PTR [eax],edx
c0013e36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e3a:	83 ec 0c             	sub    esp,0xc
c0013e3d:	50                   	push   eax
c0013e3e:	e8 e9 03 00 00       	call   c001422c <Device::~Device()>
c0013e43:	83 c4 10             	add    esp,0x10
c0013e46:	90                   	nop
c0013e47:	83 c4 0c             	add    esp,0xc
c0013e4a:	c3                   	ret    
c0013e4b:	90                   	nop

c0013e4c <Clock::~Clock()>:
c0013e4c:	83 ec 0c             	sub    esp,0xc
c0013e4f:	83 ec 0c             	sub    esp,0xc
c0013e52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e56:	e8 cd ff ff ff       	call   c0013e28 <Clock::~Clock()>
c0013e5b:	83 c4 10             	add    esp,0x10
c0013e5e:	83 ec 08             	sub    esp,0x8
c0013e61:	68 58 01 00 00       	push   0x158
c0013e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e6a:	e8 e5 ef ff ff       	call   c0012e54 <operator delete(void*, unsigned long)>
c0013e6f:	83 c4 10             	add    esp,0x10
c0013e72:	83 c4 0c             	add    esp,0xc
c0013e75:	c3                   	ret    

c0013e76 <Clock::timeInSecondsLocal()>:
c0013e76:	53                   	push   ebx
c0013e77:	83 ec 14             	sub    esp,0x14
c0013e7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e7e:	8b 10                	mov    edx,DWORD PTR [eax]
c0013e80:	50                   	push   eax
c0013e81:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013e84:	0f b6 0d 54 e7 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e754
c0013e8b:	03 0d 58 e7 02 c0    	add    ecx,DWORD PTR ds:0xc002e758
c0013e91:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013e97:	89 cb                	mov    ebx,ecx
c0013e99:	c1 fb 1f             	sar    ebx,0x1f
c0013e9c:	01 c8                	add    eax,ecx
c0013e9e:	11 da                	adc    edx,ebx
c0013ea0:	83 c4 10             	add    esp,0x10
c0013ea3:	31 c9                	xor    ecx,ecx
c0013ea5:	80 3d 55 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e755,0x0
c0013eac:	74 05                	je     c0013eb3 <Clock::timeInSecondsLocal()+0x3d>
c0013eae:	b9 08 07 00 00       	mov    ecx,0x708
c0013eb3:	31 db                	xor    ebx,ebx
c0013eb5:	01 c8                	add    eax,ecx
c0013eb7:	11 da                	adc    edx,ebx
c0013eb9:	83 c4 08             	add    esp,0x8
c0013ebc:	5b                   	pop    ebx
c0013ebd:	c3                   	ret    

c0013ebe <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013ebe:	57                   	push   edi
c0013ebf:	56                   	push   esi
c0013ec0:	53                   	push   ebx
c0013ec1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013ec5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013ec9:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013ecb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013ecf:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013ed2:	0f b6 05 54 e7 02 c0 	movzx  eax,BYTE PTR ds:0xc002e754
c0013ed9:	03 05 58 e7 02 c0    	add    eax,DWORD PTR ds:0xc002e758
c0013edf:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013ee5:	99                   	cdq    
c0013ee6:	29 c6                	sub    esi,eax
c0013ee8:	19 d7                	sbb    edi,edx
c0013eea:	89 f0                	mov    eax,esi
c0013eec:	89 fa                	mov    edx,edi
c0013eee:	31 f6                	xor    esi,esi
c0013ef0:	80 3d 55 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e755,0x0
c0013ef7:	74 05                	je     c0013efe <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013ef9:	be 08 07 00 00       	mov    esi,0x708
c0013efe:	31 ff                	xor    edi,edi
c0013f00:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013f04:	29 f0                	sub    eax,esi
c0013f06:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013f0a:	19 fa                	sbb    edx,edi
c0013f0c:	89 d8                	mov    eax,ebx
c0013f0e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013f12:	5b                   	pop    ebx
c0013f13:	5e                   	pop    esi
c0013f14:	5f                   	pop    edi
c0013f15:	ff e0                	jmp    eax

c0013f17 <datetimeToSeconds(datetime_t)>:
c0013f17:	55                   	push   ebp
c0013f18:	57                   	push   edi
c0013f19:	56                   	push   esi
c0013f1a:	53                   	push   ebx
c0013f1b:	83 ec 14             	sub    esp,0x14
c0013f1e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013f22:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013f26:	89 d3                	mov    ebx,edx
c0013f28:	0f b6 c6             	movzx  eax,dh
c0013f2b:	c1 eb 10             	shr    ebx,0x10
c0013f2e:	48                   	dec    eax
c0013f2f:	66 81 eb 6c 07       	sub    bx,0x76c
c0013f34:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013f38:	0f b6 f5             	movzx  esi,ch
c0013f3b:	89 cf                	mov    edi,ecx
c0013f3d:	6b f6 3c             	imul   esi,esi,0x3c
c0013f40:	c1 ef 10             	shr    edi,0x10
c0013f43:	0f b6 c9             	movzx  ecx,cl
c0013f46:	89 f8                	mov    eax,edi
c0013f48:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013f4e:	0f b6 f8             	movzx  edi,al
c0013f51:	0f b6 d2             	movzx  edx,dl
c0013f54:	01 fe                	add    esi,edi
c0013f56:	01 f1                	add    ecx,esi
c0013f58:	0f b7 f3             	movzx  esi,bx
c0013f5b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013f5f:	c1 f9 1f             	sar    ecx,0x1f
c0013f62:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013f67:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013f6b:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013f70:	8b 0c 8d 80 ad 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5280]
c0013f77:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013f7b:	76 29                	jbe    c0013fa6 <datetimeToSeconds(datetime_t)+0x8f>
c0013f7d:	f6 c3 03             	test   bl,0x3
c0013f80:	75 24                	jne    c0013fa6 <datetimeToSeconds(datetime_t)+0x8f>
c0013f82:	31 d2                	xor    edx,edx
c0013f84:	bf 64 00 00 00       	mov    edi,0x64
c0013f89:	89 d8                	mov    eax,ebx
c0013f8b:	66 f7 f7             	div    di
c0013f8e:	66 85 d2             	test   dx,dx
c0013f91:	75 12                	jne    c0013fa5 <datetimeToSeconds(datetime_t)+0x8e>
c0013f93:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013f99:	bf 90 01 00 00       	mov    edi,0x190
c0013f9e:	99                   	cdq    
c0013f9f:	f7 ff                	idiv   edi
c0013fa1:	85 d2                	test   edx,edx
c0013fa3:	75 01                	jne    c0013fa6 <datetimeToSeconds(datetime_t)+0x8f>
c0013fa5:	41                   	inc    ecx
c0013fa6:	66 83 fb 46          	cmp    bx,0x46
c0013faa:	76 45                	jbe    c0013ff1 <datetimeToSeconds(datetime_t)+0xda>
c0013fac:	bb 46 00 00 00       	mov    ebx,0x46
c0013fb1:	bf 64 00 00 00       	mov    edi,0x64
c0013fb6:	bd 90 01 00 00       	mov    ebp,0x190
c0013fbb:	b8 6d 01 00 00       	mov    eax,0x16d
c0013fc0:	f6 c3 03             	test   bl,0x3
c0013fc3:	75 23                	jne    c0013fe8 <datetimeToSeconds(datetime_t)+0xd1>
c0013fc5:	89 d8                	mov    eax,ebx
c0013fc7:	99                   	cdq    
c0013fc8:	f7 ff                	idiv   edi
c0013fca:	b8 6e 01 00 00       	mov    eax,0x16e
c0013fcf:	85 d2                	test   edx,edx
c0013fd1:	75 15                	jne    c0013fe8 <datetimeToSeconds(datetime_t)+0xd1>
c0013fd3:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013fd9:	99                   	cdq    
c0013fda:	f7 fd                	idiv   ebp
c0013fdc:	83 fa 01             	cmp    edx,0x1
c0013fdf:	19 c0                	sbb    eax,eax
c0013fe1:	f7 d0                	not    eax
c0013fe3:	05 6e 01 00 00       	add    eax,0x16e
c0013fe8:	01 c1                	add    ecx,eax
c0013fea:	43                   	inc    ebx
c0013feb:	39 f3                	cmp    ebx,esi
c0013fed:	7c cc                	jl     c0013fbb <datetimeToSeconds(datetime_t)+0xa4>
c0013fef:	eb 35                	jmp    c0014026 <datetimeToSeconds(datetime_t)+0x10f>
c0013ff1:	74 33                	je     c0014026 <datetimeToSeconds(datetime_t)+0x10f>
c0013ff3:	b8 45 00 00 00       	mov    eax,0x45
c0013ff8:	89 c2                	mov    edx,eax
c0013ffa:	83 e2 03             	and    edx,0x3
c0013ffd:	39 f0                	cmp    eax,esi
c0013fff:	7e 0f                	jle    c0014010 <datetimeToSeconds(datetime_t)+0xf9>
c0014001:	83 fa 01             	cmp    edx,0x1
c0014004:	19 d2                	sbb    edx,edx
c0014006:	48                   	dec    eax
c0014007:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c001400e:	eb e8                	jmp    c0013ff8 <datetimeToSeconds(datetime_t)+0xe1>
c0014010:	b8 6d 01 00 00       	mov    eax,0x16d
c0014015:	85 d2                	test   edx,edx
c0014017:	75 0b                	jne    c0014024 <datetimeToSeconds(datetime_t)+0x10d>
c0014019:	66 83 fb 01          	cmp    bx,0x1
c001401d:	19 c0                	sbb    eax,eax
c001401f:	05 6e 01 00 00       	add    eax,0x16e
c0014024:	29 c1                	sub    ecx,eax
c0014026:	b8 80 51 01 00       	mov    eax,0x15180
c001402b:	f7 e9                	imul   ecx
c001402d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0014031:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0014035:	83 c4 14             	add    esp,0x14
c0014038:	5b                   	pop    ebx
c0014039:	5e                   	pop    esi
c001403a:	5f                   	pop    edi
c001403b:	5d                   	pop    ebp
c001403c:	c3                   	ret    
c001403d:	90                   	nop

c001403e <Clock::setTimeInDatetimeLocal(datetime_t)>:
c001403e:	57                   	push   edi
c001403f:	56                   	push   esi
c0014040:	53                   	push   ebx
c0014041:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014045:	8b 06                	mov    eax,DWORD PTR [esi]
c0014047:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c001404a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001404e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014052:	e8 c0 fe ff ff       	call   c0013f17 <datetimeToSeconds(datetime_t)>
c0014057:	59                   	pop    ecx
c0014058:	0f b6 0d 54 e7 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e754
c001405f:	5b                   	pop    ebx
c0014060:	03 0d 58 e7 02 c0    	add    ecx,DWORD PTR ds:0xc002e758
c0014066:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001406c:	89 cb                	mov    ebx,ecx
c001406e:	c1 fb 1f             	sar    ebx,0x1f
c0014071:	29 c8                	sub    eax,ecx
c0014073:	19 da                	sbb    edx,ebx
c0014075:	31 c9                	xor    ecx,ecx
c0014077:	80 3d 55 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e755,0x0
c001407e:	74 05                	je     c0014085 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0014080:	b9 08 07 00 00       	mov    ecx,0x708
c0014085:	31 db                	xor    ebx,ebx
c0014087:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001408b:	29 c8                	sub    eax,ecx
c001408d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014091:	19 da                	sbb    edx,ebx
c0014093:	89 f8                	mov    eax,edi
c0014095:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0014099:	5b                   	pop    ebx
c001409a:	5e                   	pop    esi
c001409b:	5f                   	pop    edi
c001409c:	ff e0                	jmp    eax

c001409e <secondsToDatetime(unsigned long long)>:
c001409e:	55                   	push   ebp
c001409f:	57                   	push   edi
c00140a0:	56                   	push   esi
c00140a1:	53                   	push   ebx
c00140a2:	83 ec 1c             	sub    esp,0x1c
c00140a5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00140a9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00140ad:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00140b1:	6a 00                	push   0x0
c00140b3:	68 80 51 01 00       	push   0x15180
c00140b8:	55                   	push   ebp
c00140b9:	57                   	push   edi
c00140ba:	e8 1d 29 01 00       	call   c00269dc <__udivdi3>
c00140bf:	83 c4 10             	add    esp,0x10
c00140c2:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00140c8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00140cc:	6a 00                	push   0x0
c00140ce:	68 80 51 01 00       	push   0x15180
c00140d3:	55                   	push   ebp
c00140d4:	57                   	push   edi
c00140d5:	bf 10 0e 00 00       	mov    edi,0xe10
c00140da:	e8 fd 29 01 00       	call   c0026adc <__umoddi3>
c00140df:	83 c4 10             	add    esp,0x10
c00140e2:	99                   	cdq    
c00140e3:	f7 ff                	idiv   edi
c00140e5:	bf 3c 00 00 00       	mov    edi,0x3c
c00140ea:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00140ed:	89 d0                	mov    eax,edx
c00140ef:	99                   	cdq    
c00140f0:	f7 ff                	idiv   edi
c00140f2:	85 db                	test   ebx,ebx
c00140f4:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00140f7:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00140fa:	79 11                	jns    c001410d <secondsToDatetime(unsigned long long)+0x6f>
c00140fc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014100:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0014106:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001410b:	eb 07                	jmp    c0014114 <secondsToDatetime(unsigned long long)+0x76>
c001410d:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0014112:	89 d8                	mov    eax,ebx
c0014114:	bf b4 05 00 00       	mov    edi,0x5b4
c0014119:	99                   	cdq    
c001411a:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c001411f:	f7 f9                	idiv   ecx
c0014121:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0014126:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001412a:	31 d2                	xor    edx,edx
c001412c:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0014134:	01 c3                	add    ebx,eax
c0014136:	89 d8                	mov    eax,ebx
c0014138:	f7 f1                	div    ecx
c001413a:	31 d2                	xor    edx,edx
c001413c:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c001413f:	89 d8                	mov    eax,ebx
c0014141:	f7 f7                	div    edi
c0014143:	31 d2                	xor    edx,edx
c0014145:	29 c1                	sub    ecx,eax
c0014147:	89 d8                	mov    eax,ebx
c0014149:	f7 f5                	div    ebp
c001414b:	bd 6d 01 00 00       	mov    ebp,0x16d
c0014150:	29 c1                	sub    ecx,eax
c0014152:	31 d2                	xor    edx,edx
c0014154:	89 c8                	mov    eax,ecx
c0014156:	f7 f5                	div    ebp
c0014158:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001415d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014161:	31 d2                	xor    edx,edx
c0014163:	89 c8                	mov    eax,ecx
c0014165:	f7 f5                	div    ebp
c0014167:	31 d2                	xor    edx,edx
c0014169:	01 c3                	add    ebx,eax
c001416b:	89 c8                	mov    eax,ecx
c001416d:	f7 f7                	div    edi
c001416f:	bf 99 00 00 00       	mov    edi,0x99
c0014174:	29 c3                	sub    ebx,eax
c0014176:	31 d2                	xor    edx,edx
c0014178:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0014180:	29 c3                	sub    ebx,eax
c0014182:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0014185:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0014188:	bb 05 00 00 00       	mov    ebx,0x5
c001418d:	83 c1 02             	add    ecx,0x2
c0014190:	89 c8                	mov    eax,ecx
c0014192:	f7 f7                	div    edi
c0014194:	31 d2                	xor    edx,edx
c0014196:	89 c7                	mov    edi,eax
c0014198:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001419e:	83 c0 02             	add    eax,0x2
c00141a1:	f7 f3                	div    ebx
c00141a3:	89 eb                	mov    ebx,ebp
c00141a5:	29 c3                	sub    ebx,eax
c00141a7:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c00141ad:	88 1e                	mov    BYTE PTR [esi],bl
c00141af:	19 c0                	sbb    eax,eax
c00141b1:	31 d2                	xor    edx,edx
c00141b3:	83 e0 0c             	and    eax,0xc
c00141b6:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00141ba:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00141c2:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00141c6:	83 f9 01             	cmp    ecx,0x1
c00141c9:	0f 96 c2             	setbe  dl
c00141cc:	41                   	inc    ecx
c00141cd:	01 d0                	add    eax,edx
c00141cf:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00141d2:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00141d6:	83 c4 1c             	add    esp,0x1c
c00141d9:	89 f0                	mov    eax,esi
c00141db:	5b                   	pop    ebx
c00141dc:	5e                   	pop    esi
c00141dd:	5f                   	pop    edi
c00141de:	5d                   	pop    ebp
c00141df:	c2 04 00             	ret    0x4

c00141e2 <Clock::timeInDatetimeLocal()>:
c00141e2:	53                   	push   ebx
c00141e3:	83 ec 14             	sub    esp,0x14
c00141e6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00141ea:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00141ee:	e8 83 fc ff ff       	call   c0013e76 <Clock::timeInSecondsLocal()>
c00141f3:	83 c4 0c             	add    esp,0xc
c00141f6:	52                   	push   edx
c00141f7:	50                   	push   eax
c00141f8:	53                   	push   ebx
c00141f9:	e8 a0 fe ff ff       	call   c001409e <secondsToDatetime(unsigned long long)>
c00141fe:	89 d8                	mov    eax,ebx
c0014200:	83 c4 14             	add    esp,0x14
c0014203:	5b                   	pop    ebx
c0014204:	c2 04 00             	ret    0x4
c0014207:	90                   	nop

c0014208 <Device::hibernate()>:
c0014208:	c3                   	ret    
c0014209:	90                   	nop

c001420a <Device::wake()>:
c001420a:	c3                   	ret    
c001420b:	90                   	nop

c001420c <Device::detect()>:
c001420c:	c3                   	ret    
c001420d:	90                   	nop

c001420e <Device::disableLegacy()>:
c001420e:	c3                   	ret    
c001420f:	90                   	nop

c0014210 <Device::powerSaving(PowerSavingLevel)>:
c0014210:	c3                   	ret    
c0014211:	90                   	nop

c0014212 <DriverlessDevice::close(int, int, void*)>:
c0014212:	31 c0                	xor    eax,eax
c0014214:	c3                   	ret    
c0014215:	90                   	nop

c0014216 <DriverlessDevice::detect()>:
c0014216:	c3                   	ret    
c0014217:	90                   	nop

c0014218 <DriverlessDevice::open(int, int, void*)>:
c0014218:	83 ec 18             	sub    esp,0x18
c001421b:	68 b0 ad 02 c0       	push   0xc002adb0
c0014220:	e8 b0 63 00 00       	call   c001a5d5 <Krnl::panic(char const*)>
c0014225:	83 c8 ff             	or     eax,0xffffffff
c0014228:	83 c4 1c             	add    esp,0x1c
c001422b:	c3                   	ret    

c001422c <Device::~Device()>:
c001422c:	ba d8 ad 02 c0       	mov    edx,0xc002add8
c0014231:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014235:	89 10                	mov    DWORD PTR [eax],edx
c0014237:	90                   	nop
c0014238:	c3                   	ret    
c0014239:	90                   	nop

c001423a <Device::~Device()>:
c001423a:	83 ec 0c             	sub    esp,0xc
c001423d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014241:	e8 e6 ff ff ff       	call   c001422c <Device::~Device()>
c0014246:	83 c4 04             	add    esp,0x4
c0014249:	83 ec 08             	sub    esp,0x8
c001424c:	68 58 01 00 00       	push   0x158
c0014251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014255:	e8 fa eb ff ff       	call   c0012e54 <operator delete(void*, unsigned long)>
c001425a:	83 c4 10             	add    esp,0x10
c001425d:	83 c4 0c             	add    esp,0xc
c0014260:	c3                   	ret    
c0014261:	90                   	nop

c0014262 <Device::findAndLoadDriver()>:
c0014262:	c3                   	ret    
c0014263:	90                   	nop

c0014264 <Device::preOpenPCI(PCIDeviceInfo)>:
c0014264:	57                   	push   edi
c0014265:	b9 09 00 00 00       	mov    ecx,0x9
c001426a:	56                   	push   esi
c001426b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001426f:	8d 74 24 10          	lea    esi,[esp+0x10]
c0014273:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001427d:	81 c7 18 01 00 00    	add    edi,0x118
c0014283:	fc                   	cld    
c0014284:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014286:	5e                   	pop    esi
c0014287:	5f                   	pop    edi
c0014288:	c3                   	ret    
c0014289:	90                   	nop

c001428a <Device::preOpenACPI(void*, char*, char*)>:
c001428a:	56                   	push   esi
c001428b:	53                   	push   ebx
c001428c:	83 ec 08             	sub    esp,0x8
c001428f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014293:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014297:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c00142a1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00142a5:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c00142ab:	6a 1e                	push   0x1e
c00142ad:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c00142b3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00142b7:	81 c3 3a 01 00 00    	add    ebx,0x13a
c00142bd:	50                   	push   eax
c00142be:	e8 81 c4 fe ff       	call   c0000744 <memcpy>
c00142c3:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00142c7:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00142cb:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c00142d3:	83 c4 14             	add    esp,0x14
c00142d6:	5b                   	pop    ebx
c00142d7:	5e                   	pop    esi
c00142d8:	e9 67 c4 fe ff       	jmp    c0000744 <memcpy>
c00142dd:	90                   	nop

c00142de <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00142de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00142e2:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00142e7:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00142ee:	75 0b                	jne    c00142fb <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c00142f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00142f2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00142f6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00142f9:	eb 1e                	jmp    c0014319 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c00142fb:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0014300:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014306:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001430c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001430e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014312:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014316:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0014319:	ff e0                	jmp    eax
c001431b:	90                   	nop

c001431c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c001431c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014320:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0014325:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001432c:	75 0b                	jne    c0014339 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001432e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014330:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014334:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0014337:	eb 1e                	jmp    c0014357 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0014339:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c001433e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014344:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001434a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001434c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014350:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014354:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0014357:	ff e0                	jmp    eax
c0014359:	90                   	nop

c001435a <Device::addChild(Device*)>:
c001435a:	53                   	push   ebx
c001435b:	83 ec 08             	sub    esp,0x8
c001435e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014362:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014366:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c001436c:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0014372:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014374:	85 d2                	test   edx,edx
c0014376:	74 04                	je     c001437c <Device::addChild(Device*)+0x22>
c0014378:	89 d3                	mov    ebx,edx
c001437a:	eb f6                	jmp    c0014372 <Device::addChild(Device*)+0x18>
c001437c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001437f:	83 ec 0c             	sub    esp,0xc
c0014382:	6a 08                	push   0x8
c0014384:	e8 b7 b4 ff ff       	call   c000f840 <malloc>
c0014389:	89 03                	mov    DWORD PTR [ebx],eax
c001438b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014391:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014398:	83 c4 18             	add    esp,0x18
c001439b:	5b                   	pop    ebx
c001439c:	c3                   	ret    
c001439d:	90                   	nop

c001439e <Device::removeAllChildren()>:
c001439e:	56                   	push   esi
c001439f:	53                   	push   ebx
c00143a0:	52                   	push   edx
c00143a1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00143a5:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00143ab:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143ae:	74 17                	je     c00143c7 <Device::removeAllChildren()+0x29>
c00143b0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00143b3:	85 c0                	test   eax,eax
c00143b5:	74 0c                	je     c00143c3 <Device::removeAllChildren()+0x25>
c00143b7:	83 ec 0c             	sub    esp,0xc
c00143ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00143bc:	50                   	push   eax
c00143bd:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00143c0:	83 c4 10             	add    esp,0x10
c00143c3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143c5:	eb e4                	jmp    c00143ab <Device::removeAllChildren()+0xd>
c00143c7:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00143cd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00143d3:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00143d9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00143e0:	58                   	pop    eax
c00143e1:	5b                   	pop    ebx
c00143e2:	5e                   	pop    esi
c00143e3:	c3                   	ret    

c00143e4 <Device::hibernateAll()>:
c00143e4:	53                   	push   ebx
c00143e5:	83 ec 14             	sub    esp,0x14
c00143e8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00143ec:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143ee:	53                   	push   ebx
c00143ef:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00143f2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143f8:	83 c4 10             	add    esp,0x10
c00143fb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143fe:	74 0f                	je     c001440f <Device::hibernateAll()+0x2b>
c0014400:	83 ec 0c             	sub    esp,0xc
c0014403:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014406:	e8 d9 ff ff ff       	call   c00143e4 <Device::hibernateAll()>
c001440b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001440d:	eb e9                	jmp    c00143f8 <Device::hibernateAll()+0x14>
c001440f:	83 c4 08             	add    esp,0x8
c0014412:	5b                   	pop    ebx
c0014413:	c3                   	ret    

c0014414 <Device::wakeAll()>:
c0014414:	53                   	push   ebx
c0014415:	83 ec 14             	sub    esp,0x14
c0014418:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001441c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001441e:	53                   	push   ebx
c001441f:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0014422:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014428:	83 c4 10             	add    esp,0x10
c001442b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001442e:	74 0f                	je     c001443f <Device::wakeAll()+0x2b>
c0014430:	83 ec 0c             	sub    esp,0xc
c0014433:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014436:	e8 d9 ff ff ff       	call   c0014414 <Device::wakeAll()>
c001443b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001443d:	eb e9                	jmp    c0014428 <Device::wakeAll()+0x14>
c001443f:	83 c4 08             	add    esp,0x8
c0014442:	5b                   	pop    ebx
c0014443:	c3                   	ret    

c0014444 <Device::detectAll()>:
c0014444:	53                   	push   ebx
c0014445:	83 ec 14             	sub    esp,0x14
c0014448:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001444c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001444e:	53                   	push   ebx
c001444f:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0014452:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014458:	83 c4 10             	add    esp,0x10
c001445b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001445e:	74 0f                	je     c001446f <Device::detectAll()+0x2b>
c0014460:	83 ec 0c             	sub    esp,0xc
c0014463:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014466:	e8 d9 ff ff ff       	call   c0014444 <Device::detectAll()>
c001446b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001446d:	eb e9                	jmp    c0014458 <Device::detectAll()+0x14>
c001446f:	83 c4 08             	add    esp,0x8
c0014472:	5b                   	pop    ebx
c0014473:	c3                   	ret    

c0014474 <Device::disableLegacyAll()>:
c0014474:	53                   	push   ebx
c0014475:	83 ec 14             	sub    esp,0x14
c0014478:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001447c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001447e:	53                   	push   ebx
c001447f:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0014482:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014488:	83 c4 10             	add    esp,0x10
c001448b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001448e:	74 0f                	je     c001449f <Device::disableLegacyAll()+0x2b>
c0014490:	83 ec 0c             	sub    esp,0xc
c0014493:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014496:	e8 d9 ff ff ff       	call   c0014474 <Device::disableLegacyAll()>
c001449b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001449d:	eb e9                	jmp    c0014488 <Device::disableLegacyAll()+0x14>
c001449f:	83 c4 08             	add    esp,0x8
c00144a2:	5b                   	pop    ebx
c00144a3:	c3                   	ret    

c00144a4 <Device::loadDriversForAll()>:
c00144a4:	53                   	push   ebx
c00144a5:	83 ec 08             	sub    esp,0x8
c00144a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144ac:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00144b2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00144b4:	85 db                	test   ebx,ebx
c00144b6:	74 12                	je     c00144ca <Device::loadDriversForAll()+0x26>
c00144b8:	83 ec 0c             	sub    esp,0xc
c00144bb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00144be:	e8 e1 ff ff ff       	call   c00144a4 <Device::loadDriversForAll()>
c00144c3:	83 c4 10             	add    esp,0x10
c00144c6:	89 d8                	mov    eax,ebx
c00144c8:	eb e8                	jmp    c00144b2 <Device::loadDriversForAll()+0xe>
c00144ca:	83 c4 08             	add    esp,0x8
c00144cd:	5b                   	pop    ebx
c00144ce:	c3                   	ret    
c00144cf:	90                   	nop

c00144d0 <Device::closeAll()>:
c00144d0:	53                   	push   ebx
c00144d1:	83 ec 08             	sub    esp,0x8
c00144d4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00144d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144da:	6a 00                	push   0x0
c00144dc:	6a 00                	push   0x0
c00144de:	6a 00                	push   0x0
c00144e0:	53                   	push   ebx
c00144e1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00144e4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144ea:	83 c4 10             	add    esp,0x10
c00144ed:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00144f0:	74 0f                	je     c0014501 <Device::closeAll()+0x31>
c00144f2:	83 ec 0c             	sub    esp,0xc
c00144f5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144f8:	e8 d3 ff ff ff       	call   c00144d0 <Device::closeAll()>
c00144fd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144ff:	eb e9                	jmp    c00144ea <Device::closeAll()+0x1a>
c0014501:	83 c4 08             	add    esp,0x8
c0014504:	5b                   	pop    ebx
c0014505:	c3                   	ret    

c0014506 <Device::powerSavingAll(PowerSavingLevel)>:
c0014506:	56                   	push   esi
c0014507:	53                   	push   ebx
c0014508:	83 ec 0c             	sub    esp,0xc
c001450b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001450f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014513:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014515:	56                   	push   esi
c0014516:	53                   	push   ebx
c0014517:	ff 50 20             	call   DWORD PTR [eax+0x20]
c001451a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014520:	83 c4 10             	add    esp,0x10
c0014523:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014526:	74 0f                	je     c0014537 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0014528:	52                   	push   edx
c0014529:	52                   	push   edx
c001452a:	56                   	push   esi
c001452b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001452e:	e8 d3 ff ff ff       	call   c0014506 <Device::powerSavingAll(PowerSavingLevel)>
c0014533:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014535:	eb e9                	jmp    c0014520 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0014537:	58                   	pop    eax
c0014538:	5b                   	pop    ebx
c0014539:	5e                   	pop    esi
c001453a:	c3                   	ret    
c001453b:	90                   	nop

c001453c <Device::setName(char const*)>:
c001453c:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0014544:	e9 eb c2 fe ff       	jmp    c0000834 <strcpy>
c0014549:	90                   	nop

c001454a <Device::Device(char const*)>:
c001454a:	83 ec 1c             	sub    esp,0x1c
c001454d:	ba d8 ad 02 c0       	mov    edx,0xc002add8
c0014552:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014556:	89 10                	mov    DWORD PTR [eax],edx
c0014558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001455c:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0014566:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001456a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014574:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014578:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014582:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014586:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014590:	83 ec 08             	sub    esp,0x8
c0014593:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014597:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001459b:	e8 9c ff ff ff       	call   c001453c <Device::setName(char const*)>
c00145a0:	83 c4 10             	add    esp,0x10
c00145a3:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c00145ab:	83 ec 0c             	sub    esp,0xc
c00145ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145b2:	e8 89 b2 ff ff       	call   c000f840 <malloc>
c00145b7:	83 c4 10             	add    esp,0x10
c00145ba:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00145c0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00145c7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00145cb:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00145d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145d5:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00145db:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00145e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145e5:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00145eb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00145f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145f6:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00145fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014601:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0014608:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001460c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014616:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001461a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014624:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014628:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014632:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014636:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0014640:	90                   	nop
c0014641:	83 c4 1c             	add    esp,0x1c
c0014644:	c3                   	ret    
c0014645:	90                   	nop

c0014646 <Device::getName()>:
c0014646:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001464a:	05 d0 00 00 00       	add    eax,0xd0
c001464f:	c3                   	ret    

c0014650 <DriverlessDevice::DriverlessDevice(char const*)>:
c0014650:	83 ec 0c             	sub    esp,0xc
c0014653:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014657:	83 ec 08             	sub    esp,0x8
c001465a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001465e:	50                   	push   eax
c001465f:	e8 e6 fe ff ff       	call   c001454a <Device::Device(char const*)>
c0014664:	83 c4 10             	add    esp,0x10
c0014667:	ba 04 ae 02 c0       	mov    edx,0xc002ae04
c001466c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014670:	89 10                	mov    DWORD PTR [eax],edx
c0014672:	90                   	nop
c0014673:	83 c4 0c             	add    esp,0xc
c0014676:	c3                   	ret    
c0014677:	90                   	nop

c0014678 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0014678:	57                   	push   edi
c0014679:	56                   	push   esi
c001467a:	53                   	push   ebx
c001467b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001467f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014683:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014687:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001468d:	75 0c                	jne    c001469b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001468f:	52                   	push   edx
c0014690:	52                   	push   edx
c0014691:	53                   	push   ebx
c0014692:	56                   	push   esi
c0014693:	e8 82 42 01 00       	call   c002891a <LinkedList<Device>::addElement(Device*)>
c0014698:	83 c4 10             	add    esp,0x10
c001469b:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00146a1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00146a4:	74 12                	je     c00146b8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c00146a6:	50                   	push   eax
c00146a7:	57                   	push   edi
c00146a8:	56                   	push   esi
c00146a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00146ac:	e8 c7 ff ff ff       	call   c0014678 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00146b1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00146b3:	83 c4 10             	add    esp,0x10
c00146b6:	eb e9                	jmp    c00146a1 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00146b8:	5b                   	pop    ebx
c00146b9:	5e                   	pop    esi
c00146ba:	5f                   	pop    edi
c00146bb:	c3                   	ret    

c00146bc <getDevicesOfType(DeviceType)>:
c00146bc:	53                   	push   ebx
c00146bd:	83 ec 14             	sub    esp,0x14
c00146c0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00146c4:	53                   	push   ebx
c00146c5:	e8 2c 43 01 00       	call   c00289f6 <LinkedList<Device>::LinkedList()>
c00146ca:	83 c4 0c             	add    esp,0xc
c00146cd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00146d1:	53                   	push   ebx
c00146d2:	ff 35 c8 e5 02 c0    	push   DWORD PTR ds:0xc002e5c8
c00146d8:	e8 9b ff ff ff       	call   c0014678 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00146dd:	89 d8                	mov    eax,ebx
c00146df:	83 c4 18             	add    esp,0x18
c00146e2:	5b                   	pop    ebx
c00146e3:	c2 04 00             	ret    0x4

c00146e6 <HardDiskController::HardDiskController(char const*)>:
c00146e6:	83 ec 0c             	sub    esp,0xc
c00146e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146ed:	83 ec 08             	sub    esp,0x8
c00146f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146f4:	50                   	push   eax
c00146f5:	e8 50 fe ff ff       	call   c001454a <Device::Device(char const*)>
c00146fa:	83 c4 10             	add    esp,0x10
c00146fd:	ba 30 ae 02 c0       	mov    edx,0xc002ae30
c0014702:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014706:	89 10                	mov    DWORD PTR [eax],edx
c0014708:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001470c:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0014716:	90                   	nop
c0014717:	83 c4 0c             	add    esp,0xc
c001471a:	c3                   	ret    
c001471b:	90                   	nop

c001471c <HardDiskController::~HardDiskController()>:
c001471c:	83 ec 0c             	sub    esp,0xc
c001471f:	ba 30 ae 02 c0       	mov    edx,0xc002ae30
c0014724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014728:	89 10                	mov    DWORD PTR [eax],edx
c001472a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001472e:	83 ec 0c             	sub    esp,0xc
c0014731:	50                   	push   eax
c0014732:	e8 f5 fa ff ff       	call   c001422c <Device::~Device()>
c0014737:	83 c4 10             	add    esp,0x10
c001473a:	90                   	nop
c001473b:	83 c4 0c             	add    esp,0xc
c001473e:	c3                   	ret    
c001473f:	90                   	nop

c0014740 <HardDiskController::~HardDiskController()>:
c0014740:	83 ec 0c             	sub    esp,0xc
c0014743:	83 ec 0c             	sub    esp,0xc
c0014746:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001474a:	e8 cd ff ff ff       	call   c001471c <HardDiskController::~HardDiskController()>
c001474f:	83 c4 10             	add    esp,0x10
c0014752:	83 ec 08             	sub    esp,0x8
c0014755:	68 58 01 00 00       	push   0x158
c001475a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001475e:	e8 f1 e6 ff ff       	call   c0012e54 <operator delete(void*, unsigned long)>
c0014763:	83 c4 10             	add    esp,0x10
c0014766:	83 c4 0c             	add    esp,0xc
c0014769:	c3                   	ret    

c001476a <PhysicalDisk::eject()>:
c001476a:	83 ec 18             	sub    esp,0x18
c001476d:	68 54 ae 02 c0       	push   0xc002ae54
c0014772:	e8 bd e7 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0014777:	83 c8 ff             	or     eax,0xffffffff
c001477a:	83 c4 1c             	add    esp,0x1c
c001477d:	c3                   	ret    

c001477e <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001477e:	83 ec 0c             	sub    esp,0xc
c0014781:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014785:	83 ec 08             	sub    esp,0x8
c0014788:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001478c:	50                   	push   eax
c001478d:	e8 b8 fd ff ff       	call   c001454a <Device::Device(char const*)>
c0014792:	83 c4 10             	add    esp,0x10
c0014795:	ba 84 ae 02 c0       	mov    edx,0xc002ae84
c001479a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001479e:	89 10                	mov    DWORD PTR [eax],edx
c00147a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147a4:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00147ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147af:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c00147b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147ba:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00147c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147c8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00147cc:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00147d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147d6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00147e0:	90                   	nop
c00147e1:	83 c4 0c             	add    esp,0xc
c00147e4:	c3                   	ret    
c00147e5:	90                   	nop

c00147e6 <PhysicalDisk::startCache()>:
c00147e6:	56                   	push   esi
c00147e7:	53                   	push   ebx
c00147e8:	83 ec 10             	sub    esp,0x10
c00147eb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00147ef:	6a 44                	push   0x44
c00147f1:	e8 4a b0 ff ff       	call   c000f840 <malloc>
c00147f6:	89 c6                	mov    esi,eax
c00147f8:	58                   	pop    eax
c00147f9:	5a                   	pop    edx
c00147fa:	53                   	push   ebx
c00147fb:	56                   	push   esi
c00147fc:	e8 29 27 00 00       	call   c0016f2a <VCache::VCache(PhysicalDisk*)>
c0014801:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0014807:	83 c4 14             	add    esp,0x14
c001480a:	5b                   	pop    ebx
c001480b:	5e                   	pop    esi
c001480c:	c3                   	ret    
c001480d:	90                   	nop

c001480e <PhysicalDisk::~PhysicalDisk()>:
c001480e:	83 ec 0c             	sub    esp,0xc
c0014811:	ba 84 ae 02 c0       	mov    edx,0xc002ae84
c0014816:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001481a:	89 10                	mov    DWORD PTR [eax],edx
c001481c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014820:	83 ec 0c             	sub    esp,0xc
c0014823:	50                   	push   eax
c0014824:	e8 03 fa ff ff       	call   c001422c <Device::~Device()>
c0014829:	83 c4 10             	add    esp,0x10
c001482c:	90                   	nop
c001482d:	83 c4 0c             	add    esp,0xc
c0014830:	c3                   	ret    
c0014831:	90                   	nop

c0014832 <PhysicalDisk::~PhysicalDisk()>:
c0014832:	83 ec 0c             	sub    esp,0xc
c0014835:	83 ec 0c             	sub    esp,0xc
c0014838:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001483c:	e8 cd ff ff ff       	call   c001480e <PhysicalDisk::~PhysicalDisk()>
c0014841:	83 c4 10             	add    esp,0x10
c0014844:	83 ec 08             	sub    esp,0x8
c0014847:	68 6c 01 00 00       	push   0x16c
c001484c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014850:	e8 ff e5 ff ff       	call   c0012e54 <operator delete(void*, unsigned long)>
c0014855:	83 c4 10             	add    esp,0x10
c0014858:	83 c4 0c             	add    esp,0xc
c001485b:	c3                   	ret    

c001485c <FPU::FPU(char const*)>:
c001485c:	83 ec 0c             	sub    esp,0xc
c001485f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014863:	83 ec 08             	sub    esp,0x8
c0014866:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001486a:	50                   	push   eax
c001486b:	e8 da fc ff ff       	call   c001454a <Device::Device(char const*)>
c0014870:	83 c4 10             	add    esp,0x10
c0014873:	ba c8 ae 02 c0       	mov    edx,0xc002aec8
c0014878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001487c:	89 10                	mov    DWORD PTR [eax],edx
c001487e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014882:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001488c:	90                   	nop
c001488d:	83 c4 0c             	add    esp,0xc
c0014890:	c3                   	ret    
c0014891:	90                   	nop

c0014892 <FPU::~FPU()>:
c0014892:	83 ec 0c             	sub    esp,0xc
c0014895:	ba c8 ae 02 c0       	mov    edx,0xc002aec8
c001489a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001489e:	89 10                	mov    DWORD PTR [eax],edx
c00148a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148a4:	83 ec 0c             	sub    esp,0xc
c00148a7:	50                   	push   eax
c00148a8:	e8 7f f9 ff ff       	call   c001422c <Device::~Device()>
c00148ad:	83 c4 10             	add    esp,0x10
c00148b0:	90                   	nop
c00148b1:	83 c4 0c             	add    esp,0xc
c00148b4:	c3                   	ret    
c00148b5:	90                   	nop

c00148b6 <FPU::~FPU()>:
c00148b6:	83 ec 0c             	sub    esp,0xc
c00148b9:	83 ec 0c             	sub    esp,0xc
c00148bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148c0:	e8 cd ff ff ff       	call   c0014892 <FPU::~FPU()>
c00148c5:	83 c4 10             	add    esp,0x10
c00148c8:	83 ec 08             	sub    esp,0x8
c00148cb:	68 58 01 00 00       	push   0x158
c00148d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148d4:	e8 7b e5 ff ff       	call   c0012e54 <operator delete(void*, unsigned long)>
c00148d9:	83 c4 10             	add    esp,0x10
c00148dc:	83 c4 0c             	add    esp,0xc
c00148df:	c3                   	ret    

c00148e0 <setupFPU()>:
c00148e0:	53                   	push   ebx
c00148e1:	83 ec 08             	sub    esp,0x8
c00148e4:	8b 15 c8 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5c8
c00148ea:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00148f1:	74 19                	je     c001490c <setupFPU()+0x2c>
c00148f3:	83 ec 0c             	sub    esp,0xc
c00148f6:	68 58 01 00 00       	push   0x158
c00148fb:	e8 40 af ff ff       	call   c000f840 <malloc>
c0014900:	89 c3                	mov    ebx,eax
c0014902:	89 04 24             	mov    DWORD PTR [esp],eax
c0014905:	e8 56 0c 01 00       	call   c0025560 <AVX::AVX()>
c001490a:	eb 5b                	jmp    c0014967 <setupFPU()+0x87>
c001490c:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014912:	84 c0                	test   al,al
c0014914:	79 19                	jns    c001492f <setupFPU()+0x4f>
c0014916:	83 ec 0c             	sub    esp,0xc
c0014919:	68 58 01 00 00       	push   0x158
c001491e:	e8 1d af ff ff       	call   c000f840 <malloc>
c0014923:	89 c3                	mov    ebx,eax
c0014925:	89 04 24             	mov    DWORD PTR [esp],eax
c0014928:	e8 59 0d 01 00       	call   c0025686 <SSE::SSE()>
c001492d:	eb 38                	jmp    c0014967 <setupFPU()+0x87>
c001492f:	a8 20                	test   al,0x20
c0014931:	74 19                	je     c001494c <setupFPU()+0x6c>
c0014933:	83 ec 0c             	sub    esp,0xc
c0014936:	68 58 01 00 00       	push   0x158
c001493b:	e8 00 af ff ff       	call   c000f840 <malloc>
c0014940:	89 c3                	mov    ebx,eax
c0014942:	89 04 24             	mov    DWORD PTR [esp],eax
c0014945:	e8 a6 0c 01 00       	call   c00255f0 <MMX::MMX()>
c001494a:	eb 1b                	jmp    c0014967 <setupFPU()+0x87>
c001494c:	a8 10                	test   al,0x10
c001494e:	74 1c                	je     c001496c <setupFPU()+0x8c>
c0014950:	83 ec 0c             	sub    esp,0xc
c0014953:	68 58 01 00 00       	push   0x158
c0014958:	e8 e3 ae ff ff       	call   c000f840 <malloc>
c001495d:	89 c3                	mov    ebx,eax
c001495f:	89 04 24             	mov    DWORD PTR [esp],eax
c0014962:	e8 ad 0d 01 00       	call   c0025714 <x87::x87()>
c0014967:	83 c4 10             	add    esp,0x10
c001496a:	eb 24                	jmp    c0014990 <setupFPU()+0xb0>
c001496c:	83 e0 ef             	and    eax,0xffffffef
c001496f:	83 ec 0c             	sub    esp,0xc
c0014972:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014978:	68 b4 ae 02 c0       	push   0xc002aeb4
c001497d:	e8 b2 e5 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0014982:	0f 20 c0             	mov    eax,cr0
c0014985:	83 c8 04             	or     eax,0x4
c0014988:	0f 22 c0             	mov    cr0,eax
c001498b:	31 db                	xor    ebx,ebx
c001498d:	83 c4 10             	add    esp,0x10
c0014990:	89 d8                	mov    eax,ebx
c0014992:	83 c4 08             	add    esp,0x8
c0014995:	5b                   	pop    ebx
c0014996:	c3                   	ret    
c0014997:	90                   	nop

c0014998 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014998:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001499c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00149a0:	c1 e0 04             	shl    eax,0x4
c00149a3:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00149a7:	8d 50 10             	lea    edx,[eax+0x10]
c00149aa:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c00149b0:	74 08                	je     c00149ba <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c00149b2:	83 c0 04             	add    eax,0x4
c00149b5:	39 d0                	cmp    eax,edx
c00149b7:	75 f1                	jne    c00149aa <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c00149b9:	c3                   	ret    
c00149ba:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00149c4:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00149ce:	eb e2                	jmp    c00149b2 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00149d0 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00149d0:	57                   	push   edi
c00149d1:	31 c0                	xor    eax,eax
c00149d3:	56                   	push   esi
c00149d4:	53                   	push   ebx
c00149d5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00149d9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00149dd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00149e1:	89 da                	mov    edx,ebx
c00149e3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00149e7:	c1 e2 04             	shl    edx,0x4
c00149ea:	01 ca                	add    edx,ecx
c00149ec:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00149f4:	74 16                	je     c0014a0c <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00149f6:	40                   	inc    eax
c00149f7:	83 f8 04             	cmp    eax,0x4
c00149fa:	75 f0                	jne    c00149ec <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00149fc:	c7 44 24 10 f8 ae 02 c0 	mov    DWORD PTR [esp+0x10],0xc002aef8
c0014a04:	5b                   	pop    ebx
c0014a05:	5e                   	pop    esi
c0014a06:	5f                   	pop    edi
c0014a07:	e9 c9 5b 00 00       	jmp    c001a5d5 <Krnl::panic(char const*)>
c0014a0c:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014a0f:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014a12:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014a18:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014a1e:	5b                   	pop    ebx
c0014a1f:	5e                   	pop    esi
c0014a20:	5f                   	pop    edi
c0014a21:	c3                   	ret    

c0014a22 <doubleFault(regs*, void*)>:
c0014a22:	55                   	push   ebp
c0014a23:	89 e5                	mov    ebp,esp
c0014a25:	83 ec 08             	sub    esp,0x8
c0014a28:	83 ec 0c             	sub    esp,0xc
c0014a2b:	68 33 af 02 c0       	push   0xc002af33
c0014a30:	e8 a0 5b 00 00       	call   c001a5d5 <Krnl::panic(char const*)>
c0014a35:	83 c4 10             	add    esp,0x10
c0014a38:	90                   	nop
c0014a39:	c9                   	leave  
c0014a3a:	c3                   	ret    
c0014a3b:	90                   	nop

c0014a3c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014a3c:	56                   	push   esi
c0014a3d:	53                   	push   ebx
c0014a3e:	50                   	push   eax
c0014a3f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014a43:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014a47:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014a4c:	75 35                	jne    c0014a83 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014a4e:	8d 43 20             	lea    eax,[ebx+0x20]
c0014a51:	31 d2                	xor    edx,edx
c0014a53:	89 c1                	mov    ecx,eax
c0014a55:	c1 e1 04             	shl    ecx,0x4
c0014a58:	01 f1                	add    ecx,esi
c0014a5a:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014a62:	74 3e                	je     c0014aa2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014a64:	42                   	inc    edx
c0014a65:	83 fa 04             	cmp    edx,0x4
c0014a68:	75 f0                	jne    c0014a5a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014a6a:	83 ec 0c             	sub    esp,0xc
c0014a6d:	68 78 af 02 c0       	push   0xc002af78
c0014a72:	e8 5e 5b 00 00       	call   c001a5d5 <Krnl::panic(char const*)>
c0014a77:	83 c4 10             	add    esp,0x10
c0014a7a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014a7f:	5a                   	pop    edx
c0014a80:	5b                   	pop    ebx
c0014a81:	5e                   	pop    esi
c0014a82:	c3                   	ret    
c0014a83:	83 ec 0c             	sub    esp,0xc
c0014a86:	56                   	push   esi
c0014a87:	e8 ba fb ff ff       	call   c0014646 <Device::getName()>
c0014a8c:	83 c4 10             	add    esp,0x10
c0014a8f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014a92:	75 ba                	jne    c0014a4e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a94:	83 fb 0f             	cmp    ebx,0xf
c0014a97:	7f 29                	jg     c0014ac2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014a99:	0f b6 9b 20 d8 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd27e0]
c0014aa0:	eb ac                	jmp    c0014a4e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014aa2:	8d 04 82             	lea    eax,[edx+eax*4]
c0014aa5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014aa9:	8d 04 86             	lea    eax,[esi+eax*4]
c0014aac:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014ab2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014ab6:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014abc:	89 d8                	mov    eax,ebx
c0014abe:	5a                   	pop    edx
c0014abf:	5b                   	pop    ebx
c0014ac0:	5e                   	pop    esi
c0014ac1:	c3                   	ret    
c0014ac2:	83 ec 0c             	sub    esp,0xc
c0014ac5:	68 40 af 02 c0       	push   0xc002af40
c0014aca:	e8 06 5b 00 00       	call   c001a5d5 <Krnl::panic(char const*)>
c0014acf:	83 c4 10             	add    esp,0x10
c0014ad2:	e9 77 ff ff ff       	jmp    c0014a4e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014ad7:	90                   	nop

c0014ad8 <InterruptController::clearAllHandlers(int, bool)>:
c0014ad8:	56                   	push   esi
c0014ad9:	53                   	push   ebx
c0014ada:	52                   	push   edx
c0014adb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014adf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014ae3:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014ae8:	75 61                	jne    c0014b4b <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014aea:	8d 46 20             	lea    eax,[esi+0x20]
c0014aed:	c1 e6 04             	shl    esi,0x4
c0014af0:	c1 e0 04             	shl    eax,0x4
c0014af3:	01 de                	add    esi,ebx
c0014af5:	01 d8                	add    eax,ebx
c0014af7:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014b01:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014b0b:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014b15:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014b1f:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014b29:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014b33:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014b3d:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014b47:	58                   	pop    eax
c0014b48:	5b                   	pop    ebx
c0014b49:	5e                   	pop    esi
c0014b4a:	c3                   	ret    
c0014b4b:	83 ec 0c             	sub    esp,0xc
c0014b4e:	53                   	push   ebx
c0014b4f:	e8 f2 fa ff ff       	call   c0014646 <Device::getName()>
c0014b54:	83 c4 10             	add    esp,0x10
c0014b57:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014b5a:	75 8e                	jne    c0014aea <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b5c:	83 fe 0f             	cmp    esi,0xf
c0014b5f:	7f 09                	jg     c0014b6a <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014b61:	0f b6 b6 20 d8 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd27e0]
c0014b68:	eb 80                	jmp    c0014aea <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b6a:	83 ec 0c             	sub    esp,0xc
c0014b6d:	68 b4 af 02 c0       	push   0xc002afb4
c0014b72:	e8 5e 5a 00 00       	call   c001a5d5 <Krnl::panic(char const*)>
c0014b77:	83 c4 10             	add    esp,0x10
c0014b7a:	e9 6b ff ff ff       	jmp    c0014aea <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b7f:	90                   	nop

c0014b80 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014b80:	56                   	push   esi
c0014b81:	53                   	push   ebx
c0014b82:	52                   	push   edx
c0014b83:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014b87:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014b8b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014b90:	75 3a                	jne    c0014bcc <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014b92:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b96:	8d 50 20             	lea    edx,[eax+0x20]
c0014b99:	c1 e2 04             	shl    edx,0x4
c0014b9c:	8d 04 16             	lea    eax,[esi+edx*1]
c0014b9f:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014ba3:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014ba9:	74 0b                	je     c0014bb6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014bab:	83 c0 04             	add    eax,0x4
c0014bae:	39 d0                	cmp    eax,edx
c0014bb0:	75 f1                	jne    c0014ba3 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014bb2:	58                   	pop    eax
c0014bb3:	5b                   	pop    ebx
c0014bb4:	5e                   	pop    esi
c0014bb5:	c3                   	ret    
c0014bb6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014bc0:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014bca:	eb df                	jmp    c0014bab <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014bcc:	83 ec 0c             	sub    esp,0xc
c0014bcf:	56                   	push   esi
c0014bd0:	e8 71 fa ff ff       	call   c0014646 <Device::getName()>
c0014bd5:	83 c4 10             	add    esp,0x10
c0014bd8:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014bdb:	75 b5                	jne    c0014b92 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014bdd:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014be2:	7f 11                	jg     c0014bf5 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014be4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014be8:	0f b6 80 20 d8 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd27e0]
c0014bef:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014bf3:	eb 9d                	jmp    c0014b92 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014bf5:	83 ec 0c             	sub    esp,0xc
c0014bf8:	68 b4 af 02 c0       	push   0xc002afb4
c0014bfd:	e8 d3 59 00 00       	call   c001a5d5 <Krnl::panic(char const*)>
c0014c02:	83 c4 10             	add    esp,0x10
c0014c05:	eb 8b                	jmp    c0014b92 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014c07 <nmiHandler(regs*, void*)>:
c0014c07:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0014c0c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014c10:	e9 77 a3 ff ff       	jmp    c000ef8c <Computer::handleNMI()>

c0014c15 <int_handler>:
c0014c15:	55                   	push   ebp
c0014c16:	57                   	push   edi
c0014c17:	56                   	push   esi
c0014c18:	53                   	push   ebx
c0014c19:	83 ec 0c             	sub    esp,0xc
c0014c1c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014c20:	80 3d 24 11 03 c0 00 	cmp    BYTE PTR ds:0xc0031124,0x0
c0014c27:	74 0b                	je     c0014c34 <int_handler+0x1f>
c0014c29:	fa                   	cli    
c0014c2a:	f4                   	hlt    
c0014c2b:	80 3d 24 11 03 c0 00 	cmp    BYTE PTR ds:0xc0031124,0x0
c0014c32:	75 f5                	jne    c0014c29 <int_handler+0x14>
c0014c34:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0014c39:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014c3c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014c42:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014c48:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014c4b:	83 f8 17             	cmp    eax,0x17
c0014c4e:	77 13                	ja     c0014c63 <int_handler+0x4e>
c0014c50:	83 ec 08             	sub    esp,0x8
c0014c53:	8b 17                	mov    edx,DWORD PTR [edi]
c0014c55:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014c58:	0f b6 c0             	movzx  eax,al
c0014c5b:	50                   	push   eax
c0014c5c:	57                   	push   edi
c0014c5d:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014c60:	83 c4 10             	add    esp,0x10
c0014c63:	83 c3 15             	add    ebx,0x15
c0014c66:	c1 e3 04             	shl    ebx,0x4
c0014c69:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014c6d:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014c74:	31 db                	xor    ebx,ebx
c0014c76:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014c7a:	85 c0                	test   eax,eax
c0014c7c:	74 13                	je     c0014c91 <int_handler+0x7c>
c0014c7e:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014c81:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014c85:	74 1c                	je     c0014ca3 <int_handler+0x8e>
c0014c87:	83 ec 08             	sub    esp,0x8
c0014c8a:	52                   	push   edx
c0014c8b:	56                   	push   esi
c0014c8c:	ff d0                	call   eax
c0014c8e:	83 c4 10             	add    esp,0x10
c0014c91:	43                   	inc    ebx
c0014c92:	83 fb 04             	cmp    ebx,0x4
c0014c95:	75 df                	jne    c0014c76 <int_handler+0x61>
c0014c97:	83 c4 0c             	add    esp,0xc
c0014c9a:	31 c0                	xor    eax,eax
c0014c9c:	5b                   	pop    ebx
c0014c9d:	31 d2                	xor    edx,edx
c0014c9f:	5e                   	pop    esi
c0014ca0:	5f                   	pop    edi
c0014ca1:	5d                   	pop    ebp
c0014ca2:	c3                   	ret    
c0014ca3:	83 ec 08             	sub    esp,0x8
c0014ca6:	52                   	push   edx
c0014ca7:	56                   	push   esi
c0014ca8:	ff d0                	call   eax
c0014caa:	83 c4 10             	add    esp,0x10
c0014cad:	83 c4 0c             	add    esp,0xc
c0014cb0:	5b                   	pop    ebx
c0014cb1:	5e                   	pop    esi
c0014cb2:	5f                   	pop    edi
c0014cb3:	5d                   	pop    ebp
c0014cb4:	c3                   	ret    
c0014cb5:	90                   	nop

c0014cb6 <InterruptController::InterruptController(char const*)>:
c0014cb6:	83 ec 1c             	sub    esp,0x1c
c0014cb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cbd:	83 ec 08             	sub    esp,0x8
c0014cc0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014cc4:	50                   	push   eax
c0014cc5:	e8 80 f8 ff ff       	call   c001454a <Device::Device(char const*)>
c0014cca:	83 c4 10             	add    esp,0x10
c0014ccd:	ba 50 b2 02 c0       	mov    edx,0xc002b250
c0014cd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cd6:	89 10                	mov    DWORD PTR [eax],edx
c0014cd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cdc:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014ce6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014cee:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014cf6:	7f 5e                	jg     c0014d56 <InterruptController::InterruptController(char const*)+0xa0>
c0014cf8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014d00:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014d05:	7f 49                	jg     c0014d50 <InterruptController::InterruptController(char const*)+0x9a>
c0014d07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d0b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014d0f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014d16:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014d1a:	01 ca                	add    edx,ecx
c0014d1c:	83 c2 54             	add    edx,0x54
c0014d1f:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014d27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d2b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014d2f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014d36:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014d3a:	01 ca                	add    edx,ecx
c0014d3c:	81 c2 54 04 00 00    	add    edx,0x454
c0014d42:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014d4a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014d4e:	eb b0                	jmp    c0014d00 <InterruptController::InterruptController(char const*)+0x4a>
c0014d50:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014d54:	eb 98                	jmp    c0014cee <InterruptController::InterruptController(char const*)+0x38>
c0014d56:	90                   	nop
c0014d57:	83 c4 1c             	add    esp,0x1c
c0014d5a:	c3                   	ret    
c0014d5b:	90                   	nop

c0014d5c <InterruptController::~InterruptController()>:
c0014d5c:	83 ec 0c             	sub    esp,0xc
c0014d5f:	ba 50 b2 02 c0       	mov    edx,0xc002b250
c0014d64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d68:	89 10                	mov    DWORD PTR [eax],edx
c0014d6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d6e:	83 ec 0c             	sub    esp,0xc
c0014d71:	50                   	push   eax
c0014d72:	e8 b5 f4 ff ff       	call   c001422c <Device::~Device()>
c0014d77:	83 c4 10             	add    esp,0x10
c0014d7a:	90                   	nop
c0014d7b:	83 c4 0c             	add    esp,0xc
c0014d7e:	c3                   	ret    
c0014d7f:	90                   	nop

c0014d80 <InterruptController::~InterruptController()>:
c0014d80:	83 ec 0c             	sub    esp,0xc
c0014d83:	83 ec 0c             	sub    esp,0xc
c0014d86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d8a:	e8 cd ff ff ff       	call   c0014d5c <InterruptController::~InterruptController()>
c0014d8f:	83 c4 10             	add    esp,0x10
c0014d92:	83 ec 08             	sub    esp,0x8
c0014d95:	68 58 21 00 00       	push   0x2158
c0014d9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d9e:	e8 b1 e0 ff ff       	call   c0012e54 <operator delete(void*, unsigned long)>
c0014da3:	83 c4 10             	add    esp,0x10
c0014da6:	83 c4 0c             	add    esp,0xc
c0014da9:	c3                   	ret    

c0014daa <displayDebugInfo(regs*)>:
c0014daa:	55                   	push   ebp
c0014dab:	57                   	push   edi
c0014dac:	56                   	push   esi
c0014dad:	53                   	push   ebx
c0014dae:	83 ec 24             	sub    esp,0x24
c0014db1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014db5:	0f 20 c2             	mov    edx,cr0
c0014db8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014dbc:	0f 20 d7             	mov    edi,cr2
c0014dbf:	0f 20 de             	mov    esi,cr3
c0014dc2:	0f 20 e5             	mov    ebp,cr4
c0014dc5:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014dc8:	68 ee af 02 c0       	push   0xc002afee
c0014dcd:	e8 62 e1 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0014dd2:	59                   	pop    ecx
c0014dd3:	58                   	pop    eax
c0014dd4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014dd7:	68 f9 af 02 c0       	push   0xc002aff9
c0014ddc:	e8 53 e1 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0014de1:	58                   	pop    eax
c0014de2:	5a                   	pop    edx
c0014de3:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014de6:	68 04 b0 02 c0       	push   0xc002b004
c0014deb:	e8 44 e1 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0014df0:	59                   	pop    ecx
c0014df1:	58                   	pop    eax
c0014df2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014df5:	68 0f b0 02 c0       	push   0xc002b00f
c0014dfa:	e8 35 e1 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0014dff:	58                   	pop    eax
c0014e00:	5a                   	pop    edx
c0014e01:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014e04:	68 1a b0 02 c0       	push   0xc002b01a
c0014e09:	e8 26 e1 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0014e0e:	59                   	pop    ecx
c0014e0f:	58                   	pop    eax
c0014e10:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014e13:	68 25 b0 02 c0       	push   0xc002b025
c0014e18:	e8 17 e1 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0014e1d:	58                   	pop    eax
c0014e1e:	5a                   	pop    edx
c0014e1f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014e22:	68 30 b0 02 c0       	push   0xc002b030
c0014e27:	e8 08 e1 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0014e2c:	59                   	pop    ecx
c0014e2d:	58                   	pop    eax
c0014e2e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014e31:	68 3b b0 02 c0       	push   0xc002b03b
c0014e36:	e8 f9 e0 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0014e3b:	58                   	pop    eax
c0014e3c:	5a                   	pop    edx
c0014e3d:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014e40:	68 46 b0 02 c0       	push   0xc002b046
c0014e45:	e8 ea e0 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0014e4a:	59                   	pop    ecx
c0014e4b:	58                   	pop    eax
c0014e4c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014e4f:	68 55 b0 02 c0       	push   0xc002b055
c0014e54:	e8 db e0 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0014e59:	58                   	pop    eax
c0014e5a:	5a                   	pop    edx
c0014e5b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014e5e:	68 60 b0 02 c0       	push   0xc002b060
c0014e63:	e8 cc e0 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0014e68:	59                   	pop    ecx
c0014e69:	58                   	pop    eax
c0014e6a:	57                   	push   edi
c0014e6b:	68 6b b0 02 c0       	push   0xc002b06b
c0014e70:	e8 bf e0 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0014e75:	58                   	pop    eax
c0014e76:	5a                   	pop    edx
c0014e77:	56                   	push   esi
c0014e78:	68 76 b0 02 c0       	push   0xc002b076
c0014e7d:	e8 b2 e0 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0014e82:	59                   	pop    ecx
c0014e83:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014e88:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e8e:	e8 aa be ff ff       	call   c0010d3d <setActiveTerminal(VgaText*)>
c0014e93:	58                   	pop    eax
c0014e94:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014e97:	5a                   	pop    edx
c0014e98:	c1 e0 05             	shl    eax,0x5
c0014e9b:	05 80 d5 02 c0       	add    eax,0xc002d580
c0014ea0:	50                   	push   eax
c0014ea1:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014ea6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014eac:	e8 ab c2 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0014eb1:	59                   	pop    ecx
c0014eb2:	58                   	pop    eax
c0014eb3:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014eb8:	68 81 b0 02 c0       	push   0xc002b081
c0014ebd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ec3:	e8 94 c2 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0014ec8:	58                   	pop    eax
c0014ec9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ece:	5a                   	pop    edx
c0014ecf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014ed2:	83 c0 0c             	add    eax,0xc
c0014ed5:	50                   	push   eax
c0014ed6:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014edb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ee1:	e8 76 c2 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0014ee6:	59                   	pop    ecx
c0014ee7:	58                   	pop    eax
c0014ee8:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014eed:	68 8a b0 02 c0       	push   0xc002b08a
c0014ef2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ef8:	e8 5f c2 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0014efd:	58                   	pop    eax
c0014efe:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014f03:	5a                   	pop    edx
c0014f04:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014f07:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f0d:	e8 70 c2 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0014f12:	59                   	pop    ecx
c0014f13:	58                   	pop    eax
c0014f14:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014f19:	68 92 b0 02 c0       	push   0xc002b092
c0014f1e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f24:	e8 33 c2 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0014f29:	58                   	pop    eax
c0014f2a:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014f2f:	5a                   	pop    edx
c0014f30:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014f33:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f39:	e8 44 c2 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0014f3e:	59                   	pop    ecx
c0014f3f:	58                   	pop    eax
c0014f40:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014f45:	68 9a b0 02 c0       	push   0xc002b09a
c0014f4a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f50:	e8 07 c2 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0014f55:	58                   	pop    eax
c0014f56:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014f5b:	5a                   	pop    edx
c0014f5c:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014f5f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f65:	e8 18 c2 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0014f6a:	59                   	pop    ecx
c0014f6b:	58                   	pop    eax
c0014f6c:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014f71:	68 a2 b0 02 c0       	push   0xc002b0a2
c0014f76:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f7c:	e8 db c1 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0014f81:	58                   	pop    eax
c0014f82:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014f87:	5a                   	pop    edx
c0014f88:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014f8b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f91:	e8 ec c1 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0014f96:	59                   	pop    ecx
c0014f97:	58                   	pop    eax
c0014f98:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014f9d:	68 aa b0 02 c0       	push   0xc002b0aa
c0014fa2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fa8:	e8 af c1 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0014fad:	58                   	pop    eax
c0014fae:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014fb3:	5a                   	pop    edx
c0014fb4:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014fb7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fbd:	e8 c0 c1 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0014fc2:	59                   	pop    ecx
c0014fc3:	58                   	pop    eax
c0014fc4:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014fc9:	68 b2 b0 02 c0       	push   0xc002b0b2
c0014fce:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fd4:	e8 83 c1 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0014fd9:	58                   	pop    eax
c0014fda:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014fdf:	5a                   	pop    edx
c0014fe0:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014fe3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fe9:	e8 94 c1 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0014fee:	59                   	pop    ecx
c0014fef:	58                   	pop    eax
c0014ff0:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014ff5:	68 ba b0 02 c0       	push   0xc002b0ba
c0014ffa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015000:	e8 57 c1 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0015005:	58                   	pop    eax
c0015006:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001500b:	5a                   	pop    edx
c001500c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015010:	52                   	push   edx
c0015011:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015017:	e8 66 c1 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c001501c:	59                   	pop    ecx
c001501d:	58                   	pop    eax
c001501e:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0015023:	68 c3 b0 02 c0       	push   0xc002b0c3
c0015028:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001502e:	e8 29 c1 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0015033:	58                   	pop    eax
c0015034:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0015039:	5a                   	pop    edx
c001503a:	57                   	push   edi
c001503b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015041:	e8 3c c1 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0015046:	59                   	pop    ecx
c0015047:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001504c:	5f                   	pop    edi
c001504d:	68 cb b0 02 c0       	push   0xc002b0cb
c0015052:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015058:	e8 ff c0 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001505d:	58                   	pop    eax
c001505e:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0015063:	5a                   	pop    edx
c0015064:	56                   	push   esi
c0015065:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001506b:	e8 12 c1 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0015070:	59                   	pop    ecx
c0015071:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0015076:	5e                   	pop    esi
c0015077:	68 d3 b0 02 c0       	push   0xc002b0d3
c001507c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015082:	e8 d5 c0 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0015087:	5f                   	pop    edi
c0015088:	58                   	pop    eax
c0015089:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001508e:	55                   	push   ebp
c001508f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015095:	e8 e8 c0 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c001509a:	58                   	pop    eax
c001509b:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c00150a0:	5a                   	pop    edx
c00150a1:	68 db b0 02 c0       	push   0xc002b0db
c00150a6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150ac:	e8 ab c0 ff ff       	call   c001115c <VgaText::puts(char const*)>
c00150b1:	0f 21 c0             	mov    eax,db0
c00150b4:	59                   	pop    ecx
c00150b5:	5e                   	pop    esi
c00150b6:	50                   	push   eax
c00150b7:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c00150bc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150c2:	e8 bb c0 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c00150c7:	5f                   	pop    edi
c00150c8:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c00150cd:	5d                   	pop    ebp
c00150ce:	68 e4 b0 02 c0       	push   0xc002b0e4
c00150d3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150d9:	e8 7e c0 ff ff       	call   c001115c <VgaText::puts(char const*)>
c00150de:	0f 21 c8             	mov    eax,db1
c00150e1:	5a                   	pop    edx
c00150e2:	59                   	pop    ecx
c00150e3:	50                   	push   eax
c00150e4:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c00150e9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150ef:	e8 8e c0 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c00150f4:	5e                   	pop    esi
c00150f5:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c00150fa:	5f                   	pop    edi
c00150fb:	68 ec b0 02 c0       	push   0xc002b0ec
c0015100:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015106:	e8 51 c0 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001510b:	0f 21 d0             	mov    eax,db2
c001510e:	5d                   	pop    ebp
c001510f:	5a                   	pop    edx
c0015110:	50                   	push   eax
c0015111:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0015116:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001511c:	e8 61 c0 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0015121:	59                   	pop    ecx
c0015122:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0015127:	5e                   	pop    esi
c0015128:	68 f4 b0 02 c0       	push   0xc002b0f4
c001512d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015133:	e8 24 c0 ff ff       	call   c001115c <VgaText::puts(char const*)>
c0015138:	0f 21 d8             	mov    eax,db3
c001513b:	5f                   	pop    edi
c001513c:	5d                   	pop    ebp
c001513d:	50                   	push   eax
c001513e:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0015143:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015149:	e8 34 c0 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c001514e:	58                   	pop    eax
c001514f:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0015154:	5a                   	pop    edx
c0015155:	68 fc b0 02 c0       	push   0xc002b0fc
c001515a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015160:	e8 f7 bf ff ff       	call   c001115c <VgaText::puts(char const*)>
c0015165:	0f 21 f0             	mov    eax,db6
c0015168:	59                   	pop    ecx
c0015169:	5e                   	pop    esi
c001516a:	50                   	push   eax
c001516b:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0015170:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015176:	e8 07 c0 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c001517b:	5f                   	pop    edi
c001517c:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0015181:	5d                   	pop    ebp
c0015182:	68 04 b1 02 c0       	push   0xc002b104
c0015187:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001518d:	e8 ca bf ff ff       	call   c001115c <VgaText::puts(char const*)>
c0015192:	0f 21 f8             	mov    eax,db7
c0015195:	5a                   	pop    edx
c0015196:	59                   	pop    ecx
c0015197:	50                   	push   eax
c0015198:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001519d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151a3:	e8 da bf ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c00151a8:	5e                   	pop    esi
c00151a9:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00151ac:	e8 50 85 00 00       	call   c001d701 <Thr::getDriverNameFromAddress(unsigned long)>
c00151b1:	83 c4 10             	add    esp,0x10
c00151b4:	85 c0                	test   eax,eax
c00151b6:	74 7d                	je     c0015235 <displayDebugInfo(regs*)+0x48b>
c00151b8:	89 c6                	mov    esi,eax
c00151ba:	50                   	push   eax
c00151bb:	50                   	push   eax
c00151bc:	56                   	push   esi
c00151bd:	68 0c b1 02 c0       	push   0xc002b10c
c00151c2:	e8 6d dd ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c00151c7:	5a                   	pop    edx
c00151c8:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c00151cd:	59                   	pop    ecx
c00151ce:	68 1a b1 02 c0       	push   0xc002b11a
c00151d3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151d9:	e8 7e bf ff ff       	call   c001115c <VgaText::puts(char const*)>
c00151de:	5f                   	pop    edi
c00151df:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c00151e4:	5d                   	pop    ebp
c00151e5:	56                   	push   esi
c00151e6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151ec:	e8 6b bf ff ff       	call   c001115c <VgaText::puts(char const*)>
c00151f1:	58                   	pop    eax
c00151f2:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c00151f7:	5a                   	pop    edx
c00151f8:	68 26 b1 02 c0       	push   0xc002b126
c00151fd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015203:	e8 54 bf ff ff       	call   c001115c <VgaText::puts(char const*)>
c0015208:	59                   	pop    ecx
c0015209:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001520e:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0015214:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015217:	e8 1c 85 00 00       	call   c001d738 <Thr::getDriverOffsetFromAddress(unsigned long)>
c001521c:	5b                   	pop    ebx
c001521d:	5d                   	pop    ebp
c001521e:	50                   	push   eax
c001521f:	57                   	push   edi
c0015220:	e8 5d bf ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c0015225:	58                   	pop    eax
c0015226:	5a                   	pop    edx
c0015227:	56                   	push   esi
c0015228:	68 32 b1 02 c0       	push   0xc002b132
c001522d:	e8 02 dd ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0015232:	83 c4 10             	add    esp,0x10
c0015235:	fa                   	cli    
c0015236:	f4                   	hlt    
c0015237:	eb fe                	jmp    c0015237 <displayDebugInfo(regs*)+0x48d>

c0015239 <x87EmulHandler(regs*, void*)>:
c0015239:	53                   	push   ebx
c001523a:	83 ec 14             	sub    esp,0x14
c001523d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015241:	53                   	push   ebx
c0015242:	e8 47 a8 00 00       	call   c001fa8e <Vm::x87Handler(regs*)>
c0015247:	83 c4 10             	add    esp,0x10
c001524a:	84 c0                	test   al,al
c001524c:	74 05                	je     c0015253 <x87EmulHandler(regs*, void*)+0x1a>
c001524e:	83 c4 08             	add    esp,0x8
c0015251:	5b                   	pop    ebx
c0015252:	c3                   	ret    
c0015253:	83 ec 0c             	sub    esp,0xc
c0015256:	68 42 b1 02 c0       	push   0xc002b142
c001525b:	e8 d4 dc ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0015260:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015263:	e8 42 fb ff ff       	call   c0014daa <displayDebugInfo(regs*)>

c0015268 <gpFault(regs*, void*)>:
c0015268:	53                   	push   ebx
c0015269:	83 ec 14             	sub    esp,0x14
c001526c:	c7 05 74 e7 02 c0 0b ee 01 c0 	mov    DWORD PTR ds:0xc002e774,0xc001ee0b
c0015276:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001527a:	53                   	push   ebx
c001527b:	e8 8b 9b 00 00       	call   c001ee0b <Vm::faultHandler(regs*)>
c0015280:	83 c4 10             	add    esp,0x10
c0015283:	84 c0                	test   al,al
c0015285:	74 05                	je     c001528c <gpFault(regs*, void*)+0x24>
c0015287:	83 c4 08             	add    esp,0x8
c001528a:	5b                   	pop    ebx
c001528b:	c3                   	ret    
c001528c:	83 ec 0c             	sub    esp,0xc
c001528f:	68 58 b1 02 c0       	push   0xc002b158
c0015294:	e8 9b dc ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0015299:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001529c:	e8 09 fb ff ff       	call   c0014daa <displayDebugInfo(regs*)>

c00152a1 <pgFault(regs*, void*)>:
c00152a1:	83 ec 18             	sub    esp,0x18
c00152a4:	68 73 b1 02 c0       	push   0xc002b173
c00152a9:	e8 86 dc ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c00152ae:	0f 20 d0             	mov    eax,cr2
c00152b1:	5a                   	pop    edx
c00152b2:	59                   	pop    ecx
c00152b3:	50                   	push   eax
c00152b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152b9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00152bc:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00152c2:	e8 37 d8 ff ff       	call   c0012afe <VAS::tryLoadBackOffDisk(unsigned long)>
c00152c7:	83 c4 10             	add    esp,0x10
c00152ca:	84 c0                	test   al,al
c00152cc:	74 04                	je     c00152d2 <pgFault(regs*, void*)+0x31>
c00152ce:	83 c4 0c             	add    esp,0xc
c00152d1:	c3                   	ret    
c00152d2:	83 ec 0c             	sub    esp,0xc
c00152d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00152d9:	e8 cc fa ff ff       	call   c0014daa <displayDebugInfo(regs*)>

c00152de <otherISRHandler(regs*, void*)>:
c00152de:	53                   	push   ebx
c00152df:	83 ec 0c             	sub    esp,0xc
c00152e2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00152e6:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00152e9:	50                   	push   eax
c00152ea:	50                   	push   eax
c00152eb:	68 80 b1 02 c0       	push   0xc002b180
c00152f0:	e8 3f dc ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c00152f5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00152f8:	e8 ad fa ff ff       	call   c0014daa <displayDebugInfo(regs*)>

c00152fd <opcodeFault(regs*, void*)>:
c00152fd:	55                   	push   ebp
c00152fe:	89 e5                	mov    ebp,esp
c0015300:	56                   	push   esi
c0015301:	53                   	push   ebx
c0015302:	83 ec 40             	sub    esp,0x40
c0015305:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c001530a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015310:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0015316:	84 c0                	test   al,al
c0015318:	74 24                	je     c001533e <opcodeFault(regs*, void*)+0x41>
c001531a:	83 ec 0c             	sub    esp,0xc
c001531d:	68 a0 b1 02 c0       	push   0xc002b1a0
c0015322:	e8 0d dc ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0015327:	83 c4 10             	add    esp,0x10
c001532a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001532d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015330:	8d 50 19             	lea    edx,[eax+0x19]
c0015333:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015336:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015339:	e9 be 05 00 00       	jmp    c00158fc <opcodeFault(regs*, void*)+0x5ff>
c001533e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015341:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015344:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015347:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c001534b:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c001534f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015352:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015355:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0015358:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001535b:	8a 00                	mov    al,BYTE PTR [eax]
c001535d:	3c f0                	cmp    al,0xf0
c001535f:	75 17                	jne    c0015378 <opcodeFault(regs*, void*)+0x7b>
c0015361:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015364:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015367:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001536a:	8d 50 01             	lea    edx,[eax+0x1]
c001536d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015370:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015373:	e9 da 00 00 00       	jmp    c0015452 <opcodeFault(regs*, void*)+0x155>
c0015378:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001537b:	8a 00                	mov    al,BYTE PTR [eax]
c001537d:	3c f2                	cmp    al,0xf2
c001537f:	74 09                	je     c001538a <opcodeFault(regs*, void*)+0x8d>
c0015381:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015384:	8a 00                	mov    al,BYTE PTR [eax]
c0015386:	3c f3                	cmp    al,0xf3
c0015388:	75 1b                	jne    c00153a5 <opcodeFault(regs*, void*)+0xa8>
c001538a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001538e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015391:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015394:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015397:	8d 50 01             	lea    edx,[eax+0x1]
c001539a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001539d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153a0:	e9 ad 00 00 00       	jmp    c0015452 <opcodeFault(regs*, void*)+0x155>
c00153a5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153a8:	8a 00                	mov    al,BYTE PTR [eax]
c00153aa:	3c 66                	cmp    al,0x66
c00153ac:	75 1f                	jne    c00153cd <opcodeFault(regs*, void*)+0xd0>
c00153ae:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153b2:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c00153b6:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153bc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153bf:	8d 50 01             	lea    edx,[eax+0x1]
c00153c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153c5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153c8:	e9 85 00 00 00       	jmp    c0015452 <opcodeFault(regs*, void*)+0x155>
c00153cd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153d0:	8a 00                	mov    al,BYTE PTR [eax]
c00153d2:	3c 67                	cmp    al,0x67
c00153d4:	75 18                	jne    c00153ee <opcodeFault(regs*, void*)+0xf1>
c00153d6:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153da:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153e0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153e3:	8d 50 01             	lea    edx,[eax+0x1]
c00153e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153e9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153ec:	eb 64                	jmp    c0015452 <opcodeFault(regs*, void*)+0x155>
c00153ee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153f1:	8a 00                	mov    al,BYTE PTR [eax]
c00153f3:	3c 2e                	cmp    al,0x2e
c00153f5:	74 09                	je     c0015400 <opcodeFault(regs*, void*)+0x103>
c00153f7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153fa:	8a 00                	mov    al,BYTE PTR [eax]
c00153fc:	3c 3e                	cmp    al,0x3e
c00153fe:	75 18                	jne    c0015418 <opcodeFault(regs*, void*)+0x11b>
c0015400:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015404:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015407:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001540a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001540d:	8d 50 01             	lea    edx,[eax+0x1]
c0015410:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015413:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015416:	eb 3a                	jmp    c0015452 <opcodeFault(regs*, void*)+0x155>
c0015418:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001541b:	8a 00                	mov    al,BYTE PTR [eax]
c001541d:	3c 36                	cmp    al,0x36
c001541f:	74 1b                	je     c001543c <opcodeFault(regs*, void*)+0x13f>
c0015421:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015424:	8a 00                	mov    al,BYTE PTR [eax]
c0015426:	3c 26                	cmp    al,0x26
c0015428:	74 12                	je     c001543c <opcodeFault(regs*, void*)+0x13f>
c001542a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001542d:	8a 00                	mov    al,BYTE PTR [eax]
c001542f:	3c 64                	cmp    al,0x64
c0015431:	74 09                	je     c001543c <opcodeFault(regs*, void*)+0x13f>
c0015433:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015436:	8a 00                	mov    al,BYTE PTR [eax]
c0015438:	3c 65                	cmp    al,0x65
c001543a:	75 16                	jne    c0015452 <opcodeFault(regs*, void*)+0x155>
c001543c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015440:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015443:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015446:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015449:	8d 50 01             	lea    edx,[eax+0x1]
c001544c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001544f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015452:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015455:	8a 00                	mov    al,BYTE PTR [eax]
c0015457:	3c 0f                	cmp    al,0xf
c0015459:	0f 85 ad 00 00 00    	jne    c001550c <opcodeFault(regs*, void*)+0x20f>
c001545f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015462:	40                   	inc    eax
c0015463:	8a 00                	mov    al,BYTE PTR [eax]
c0015465:	3c c2                	cmp    al,0xc2
c0015467:	74 0e                	je     c0015477 <opcodeFault(regs*, void*)+0x17a>
c0015469:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001546c:	40                   	inc    eax
c001546d:	8a 00                	mov    al,BYTE PTR [eax]
c001546f:	3c c3                	cmp    al,0xc3
c0015471:	0f 85 95 00 00 00    	jne    c001550c <opcodeFault(regs*, void*)+0x20f>
c0015477:	83 ec 0c             	sub    esp,0xc
c001547a:	68 c3 b1 02 c0       	push   0xc002b1c3
c001547f:	e8 b0 da ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0015484:	83 c4 10             	add    esp,0x10
c0015487:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001548a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001548d:	8d 50 01             	lea    edx,[eax+0x1]
c0015490:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015493:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015496:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015499:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001549c:	8a 00                	mov    al,BYTE PTR [eax]
c001549e:	8d 50 fe             	lea    edx,[eax-0x2]
c00154a1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154a4:	88 10                	mov    BYTE PTR [eax],dl
c00154a6:	8d 45 c2             	lea    eax,[ebp-0x3e]
c00154a9:	50                   	push   eax
c00154aa:	8d 45 c3             	lea    eax,[ebp-0x3d]
c00154ad:	50                   	push   eax
c00154ae:	8d 45 c4             	lea    eax,[ebp-0x3c]
c00154b1:	50                   	push   eax
c00154b2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00154b5:	e8 e2 47 00 00       	call   c0019c9c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00154ba:	83 c4 10             	add    esp,0x10
c00154bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154c0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154c3:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00154c6:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c00154c9:	01 d0                	add    eax,edx
c00154cb:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00154ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154d1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154d4:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00154d7:	48                   	dec    eax
c00154d8:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00154db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154de:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00154e1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154e7:	83 ec 04             	sub    esp,0x4
c00154ea:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00154ed:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00154f0:	50                   	push   eax
c00154f1:	e8 be ac fe ff       	call   c00001b4 <voodooXADD>
c00154f6:	83 c4 10             	add    esp,0x10
c00154f9:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00154fc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00154ff:	01 c2                	add    edx,eax
c0015501:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015504:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015507:	e9 f0 03 00 00       	jmp    c00158fc <opcodeFault(regs*, void*)+0x5ff>
c001550c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001550f:	8a 00                	mov    al,BYTE PTR [eax]
c0015511:	3c 0f                	cmp    al,0xf
c0015513:	0f 85 8b 01 00 00    	jne    c00156a4 <opcodeFault(regs*, void*)+0x3a7>
c0015519:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001551c:	40                   	inc    eax
c001551d:	8a 00                	mov    al,BYTE PTR [eax]
c001551f:	3c c7                	cmp    al,0xc7
c0015521:	0f 86 7d 01 00 00    	jbe    c00156a4 <opcodeFault(regs*, void*)+0x3a7>
c0015527:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001552a:	40                   	inc    eax
c001552b:	8a 00                	mov    al,BYTE PTR [eax]
c001552d:	3c cf                	cmp    al,0xcf
c001552f:	0f 87 6f 01 00 00    	ja     c00156a4 <opcodeFault(regs*, void*)+0x3a7>
c0015535:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015538:	40                   	inc    eax
c0015539:	8a 00                	mov    al,BYTE PTR [eax]
c001553b:	83 c0 38             	add    eax,0x38
c001553e:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0015541:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015545:	75 0b                	jne    c0015552 <opcodeFault(regs*, void*)+0x255>
c0015547:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001554a:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001554d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015550:	eb 75                	jmp    c00155c7 <opcodeFault(regs*, void*)+0x2ca>
c0015552:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015556:	75 0b                	jne    c0015563 <opcodeFault(regs*, void*)+0x266>
c0015558:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001555b:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001555e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015561:	eb 64                	jmp    c00155c7 <opcodeFault(regs*, void*)+0x2ca>
c0015563:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015567:	75 0b                	jne    c0015574 <opcodeFault(regs*, void*)+0x277>
c0015569:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001556c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001556f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015572:	eb 53                	jmp    c00155c7 <opcodeFault(regs*, void*)+0x2ca>
c0015574:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015578:	75 0b                	jne    c0015585 <opcodeFault(regs*, void*)+0x288>
c001557a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001557d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015580:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015583:	eb 42                	jmp    c00155c7 <opcodeFault(regs*, void*)+0x2ca>
c0015585:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015589:	75 0b                	jne    c0015596 <opcodeFault(regs*, void*)+0x299>
c001558b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001558e:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0015591:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015594:	eb 31                	jmp    c00155c7 <opcodeFault(regs*, void*)+0x2ca>
c0015596:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c001559a:	75 0b                	jne    c00155a7 <opcodeFault(regs*, void*)+0x2aa>
c001559c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001559f:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00155a2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155a5:	eb 20                	jmp    c00155c7 <opcodeFault(regs*, void*)+0x2ca>
c00155a7:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00155ab:	75 0b                	jne    c00155b8 <opcodeFault(regs*, void*)+0x2bb>
c00155ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155b0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00155b3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155b6:	eb 0f                	jmp    c00155c7 <opcodeFault(regs*, void*)+0x2ca>
c00155b8:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00155bc:	75 09                	jne    c00155c7 <opcodeFault(regs*, void*)+0x2ca>
c00155be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155c1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00155c4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155c7:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c00155cb:	74 10                	je     c00155dd <opcodeFault(regs*, void*)+0x2e0>
c00155cd:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c00155d4:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c00155db:	eb 2d                	jmp    c001560a <opcodeFault(regs*, void*)+0x30d>
c00155dd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00155e0:	c1 e0 18             	shl    eax,0x18
c00155e3:	89 c2                	mov    edx,eax
c00155e5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00155e8:	c1 e0 08             	shl    eax,0x8
c00155eb:	25 00 00 ff 00       	and    eax,0xff0000
c00155f0:	09 c2                	or     edx,eax
c00155f2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00155f5:	c1 e8 08             	shr    eax,0x8
c00155f8:	25 00 ff 00 00       	and    eax,0xff00
c00155fd:	09 c2                	or     edx,eax
c00155ff:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015602:	c1 e8 18             	shr    eax,0x18
c0015605:	09 d0                	or     eax,edx
c0015607:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001560a:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001560e:	75 0b                	jne    c001561b <opcodeFault(regs*, void*)+0x31e>
c0015610:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015613:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015616:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015619:	eb 75                	jmp    c0015690 <opcodeFault(regs*, void*)+0x393>
c001561b:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001561f:	75 0b                	jne    c001562c <opcodeFault(regs*, void*)+0x32f>
c0015621:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015624:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015627:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001562a:	eb 64                	jmp    c0015690 <opcodeFault(regs*, void*)+0x393>
c001562c:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015630:	75 0b                	jne    c001563d <opcodeFault(regs*, void*)+0x340>
c0015632:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015635:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015638:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001563b:	eb 53                	jmp    c0015690 <opcodeFault(regs*, void*)+0x393>
c001563d:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015641:	75 0b                	jne    c001564e <opcodeFault(regs*, void*)+0x351>
c0015643:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015646:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015649:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001564c:	eb 42                	jmp    c0015690 <opcodeFault(regs*, void*)+0x393>
c001564e:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015652:	75 0b                	jne    c001565f <opcodeFault(regs*, void*)+0x362>
c0015654:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015657:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001565a:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c001565d:	eb 31                	jmp    c0015690 <opcodeFault(regs*, void*)+0x393>
c001565f:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015663:	75 0b                	jne    c0015670 <opcodeFault(regs*, void*)+0x373>
c0015665:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015668:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001566b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001566e:	eb 20                	jmp    c0015690 <opcodeFault(regs*, void*)+0x393>
c0015670:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015674:	75 0b                	jne    c0015681 <opcodeFault(regs*, void*)+0x384>
c0015676:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015679:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001567c:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001567f:	eb 0f                	jmp    c0015690 <opcodeFault(regs*, void*)+0x393>
c0015681:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015685:	75 09                	jne    c0015690 <opcodeFault(regs*, void*)+0x393>
c0015687:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001568a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001568d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0015690:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015693:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015696:	8d 50 02             	lea    edx,[eax+0x2]
c0015699:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001569c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001569f:	e9 58 02 00 00       	jmp    c00158fc <opcodeFault(regs*, void*)+0x5ff>
c00156a4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156a7:	8a 00                	mov    al,BYTE PTR [eax]
c00156a9:	3c 0f                	cmp    al,0xf
c00156ab:	0f 85 76 01 00 00    	jne    c0015827 <opcodeFault(regs*, void*)+0x52a>
c00156b1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156b4:	40                   	inc    eax
c00156b5:	8a 00                	mov    al,BYTE PTR [eax]
c00156b7:	3c c7                	cmp    al,0xc7
c00156b9:	0f 85 68 01 00 00    	jne    c0015827 <opcodeFault(regs*, void*)+0x52a>
c00156bf:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00156c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156c5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00156c8:	8d 50 01             	lea    edx,[eax+0x1]
c00156cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ce:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00156d1:	8d 45 ba             	lea    eax,[ebp-0x46]
c00156d4:	50                   	push   eax
c00156d5:	8d 45 bb             	lea    eax,[ebp-0x45]
c00156d8:	50                   	push   eax
c00156d9:	8d 45 bc             	lea    eax,[ebp-0x44]
c00156dc:	50                   	push   eax
c00156dd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00156e0:	e8 b7 45 00 00       	call   c0019c9c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00156e5:	83 c4 10             	add    esp,0x10
c00156e8:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00156eb:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c00156ee:	83 f0 01             	xor    eax,0x1
c00156f1:	84 c0                	test   al,al
c00156f3:	0f 84 2e 01 00 00    	je     c0015827 <opcodeFault(regs*, void*)+0x52a>
c00156f9:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c00156fc:	3c 01                	cmp    al,0x1
c00156fe:	0f 85 23 01 00 00    	jne    c0015827 <opcodeFault(regs*, void*)+0x52a>
c0015704:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0015707:	83 f0 01             	xor    eax,0x1
c001570a:	84 c0                	test   al,al
c001570c:	0f 84 15 01 00 00    	je     c0015827 <opcodeFault(regs*, void*)+0x52a>
c0015712:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015715:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015718:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001571b:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0015722:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015725:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015728:	89 c2                	mov    edx,eax
c001572a:	b8 00 00 00 00       	mov    eax,0x0
c001572f:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015732:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015735:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015738:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001573b:	ba 00 00 00 00       	mov    edx,0x0
c0015740:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0015743:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0015746:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015749:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001574c:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001574f:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0015756:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015759:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001575c:	89 c2                	mov    edx,eax
c001575e:	b8 00 00 00 00       	mov    eax,0x0
c0015763:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015766:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0015769:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001576c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001576f:	ba 00 00 00 00       	mov    edx,0x0
c0015774:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0015777:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c001577a:	e8 7b 86 00 00       	call   c001ddfa <lockScheduler()>
c001577f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015782:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015785:	8b 00                	mov    eax,DWORD PTR [eax]
c0015787:	89 c1                	mov    ecx,eax
c0015789:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c001578c:	89 cb                	mov    ebx,ecx
c001578e:	89 d0                	mov    eax,edx
c0015790:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0015793:	89 c6                	mov    esi,eax
c0015795:	89 f0                	mov    eax,esi
c0015797:	09 d8                	or     eax,ebx
c0015799:	85 c0                	test   eax,eax
c001579b:	75 21                	jne    c00157be <opcodeFault(regs*, void*)+0x4c1>
c001579d:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00157a0:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00157a3:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00157a6:	89 01                	mov    DWORD PTR [ecx],eax
c00157a8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00157ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ae:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00157b1:	83 c8 40             	or     eax,0x40
c00157b4:	89 c2                	mov    edx,eax
c00157b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157b9:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00157bc:	eb 3e                	jmp    c00157fc <opcodeFault(regs*, void*)+0x4ff>
c00157be:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00157c1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00157c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00157c6:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00157c9:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00157cc:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00157cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d2:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00157d5:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00157d8:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00157db:	89 d0                	mov    eax,edx
c00157dd:	31 d2                	xor    edx,edx
c00157df:	89 c3                	mov    ebx,eax
c00157e1:	89 d6                	mov    esi,edx
c00157e3:	89 da                	mov    edx,ebx
c00157e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157e8:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00157eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ee:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00157f1:	83 e0 bf             	and    eax,0xffffffbf
c00157f4:	89 c2                	mov    edx,eax
c00157f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f9:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00157fc:	e8 fb 85 00 00       	call   c001ddfc <unlockScheduler()>
c0015801:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015804:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015807:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c001580a:	01 c2                	add    edx,eax
c001580c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001580f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015812:	83 ec 0c             	sub    esp,0xc
c0015815:	68 d2 b1 02 c0       	push   0xc002b1d2
c001581a:	e8 15 d7 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001581f:	83 c4 10             	add    esp,0x10
c0015822:	e9 d5 00 00 00       	jmp    c00158fc <opcodeFault(regs*, void*)+0x5ff>
c0015827:	83 ec 0c             	sub    esp,0xc
c001582a:	68 e5 b1 02 c0       	push   0xc002b1e5
c001582f:	e8 00 d7 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0015834:	83 c4 10             	add    esp,0x10
c0015837:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001583a:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001583d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015840:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015843:	c1 e0 04             	shl    eax,0x4
c0015846:	01 d0                	add    eax,edx
c0015848:	83 c0 03             	add    eax,0x3
c001584b:	8a 00                	mov    al,BYTE PTR [eax]
c001584d:	0f b6 d8             	movzx  ebx,al
c0015850:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015853:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015856:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015859:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001585c:	c1 e0 04             	shl    eax,0x4
c001585f:	01 d0                	add    eax,edx
c0015861:	83 c0 02             	add    eax,0x2
c0015864:	8a 00                	mov    al,BYTE PTR [eax]
c0015866:	0f b6 c8             	movzx  ecx,al
c0015869:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001586c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001586f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015872:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015875:	c1 e0 04             	shl    eax,0x4
c0015878:	01 d0                	add    eax,edx
c001587a:	40                   	inc    eax
c001587b:	8a 00                	mov    al,BYTE PTR [eax]
c001587d:	0f b6 d0             	movzx  edx,al
c0015880:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015883:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0015886:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015889:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001588c:	c1 e0 04             	shl    eax,0x4
c001588f:	01 f0                	add    eax,esi
c0015891:	8a 00                	mov    al,BYTE PTR [eax]
c0015893:	0f b6 c0             	movzx  eax,al
c0015896:	83 ec 0c             	sub    esp,0xc
c0015899:	53                   	push   ebx
c001589a:	51                   	push   ecx
c001589b:	52                   	push   edx
c001589c:	50                   	push   eax
c001589d:	68 f8 b1 02 c0       	push   0xc002b1f8
c00158a2:	e8 8d d6 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c00158a7:	83 c4 20             	add    esp,0x20
c00158aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ad:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158b0:	83 c0 03             	add    eax,0x3
c00158b3:	8a 00                	mov    al,BYTE PTR [eax]
c00158b5:	0f b6 d8             	movzx  ebx,al
c00158b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158bb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158be:	83 c0 02             	add    eax,0x2
c00158c1:	8a 00                	mov    al,BYTE PTR [eax]
c00158c3:	0f b6 c8             	movzx  ecx,al
c00158c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158c9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158cc:	40                   	inc    eax
c00158cd:	8a 00                	mov    al,BYTE PTR [eax]
c00158cf:	0f b6 d0             	movzx  edx,al
c00158d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158d5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158d8:	8a 00                	mov    al,BYTE PTR [eax]
c00158da:	0f b6 c0             	movzx  eax,al
c00158dd:	83 ec 0c             	sub    esp,0xc
c00158e0:	53                   	push   ebx
c00158e1:	51                   	push   ecx
c00158e2:	52                   	push   edx
c00158e3:	50                   	push   eax
c00158e4:	68 20 b2 02 c0       	push   0xc002b220
c00158e9:	e8 46 d6 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c00158ee:	83 c4 20             	add    esp,0x20
c00158f1:	83 ec 0c             	sub    esp,0xc
c00158f4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00158f7:	e8 ae f4 ff ff       	call   c0014daa <displayDebugInfo(regs*)>
c00158fc:	8d 65 f8             	lea    esp,[ebp-0x8]
c00158ff:	5b                   	pop    ebx
c0015900:	5e                   	pop    esi
c0015901:	5d                   	pop    ebp
c0015902:	c3                   	ret    

c0015903 <displayProgramFault(char const*)>:
c0015903:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015908:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001590b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015911:	85 c0                	test   eax,eax
c0015913:	74 15                	je     c001592a <displayProgramFault(char const*)+0x27>
c0015915:	83 ec 0c             	sub    esp,0xc
c0015918:	6a 04                	push   0x4
c001591a:	6a 0f                	push   0xf
c001591c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015920:	50                   	push   eax
c0015921:	e8 f8 b4 ff ff       	call   c0010e1e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015926:	83 c4 1c             	add    esp,0x1c
c0015929:	c3                   	ret    
c001592a:	c3                   	ret    

c001592b <setupInterruptController()>:
c001592b:	55                   	push   ebp
c001592c:	89 e5                	mov    ebp,esp
c001592e:	53                   	push   ebx
c001592f:	83 ec 24             	sub    esp,0x24
c0015932:	b8 00 00 00 00       	mov    eax,0x0
c0015937:	85 c0                	test   eax,eax
c0015939:	0f 95 c0             	setne  al
c001593c:	84 c0                	test   al,al
c001593e:	74 5b                	je     c001599b <setupInterruptController()+0x70>
c0015940:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015947:	83 ec 0c             	sub    esp,0xc
c001594a:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c001594d:	e8 ee 9e ff ff       	call   c000f840 <malloc>
c0015952:	83 c4 10             	add    esp,0x10
c0015955:	89 c3                	mov    ebx,eax
c0015957:	83 ec 0c             	sub    esp,0xc
c001595a:	53                   	push   ebx
c001595b:	e8 f2 ff 00 00       	call   c0025952 <APIC::APIC()>
c0015960:	83 c4 10             	add    esp,0x10
c0015963:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015966:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015969:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001596c:	8b 00                	mov    eax,DWORD PTR [eax]
c001596e:	83 c0 08             	add    eax,0x8
c0015971:	8b 00                	mov    eax,DWORD PTR [eax]
c0015973:	6a 00                	push   0x0
c0015975:	6a 00                	push   0x0
c0015977:	6a 00                	push   0x0
c0015979:	52                   	push   edx
c001597a:	ff d0                	call   eax
c001597c:	83 c4 10             	add    esp,0x10
c001597f:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0015984:	83 ec 08             	sub    esp,0x8
c0015987:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001598a:	50                   	push   eax
c001598b:	e8 ca e9 ff ff       	call   c001435a <Device::addChild(Device*)>
c0015990:	83 c4 10             	add    esp,0x10
c0015993:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015996:	e9 52 03 00 00       	jmp    c0015ced <setupInterruptController()+0x3c2>
c001599b:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c00159a0:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00159a6:	83 e0 01             	and    eax,0x1
c00159a9:	84 c0                	test   al,al
c00159ab:	0f 95 c0             	setne  al
c00159ae:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00159b1:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c00159b8:	83 ec 0c             	sub    esp,0xc
c00159bb:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00159be:	e8 7d 9e ff ff       	call   c000f840 <malloc>
c00159c3:	83 c4 10             	add    esp,0x10
c00159c6:	89 c3                	mov    ebx,eax
c00159c8:	83 ec 0c             	sub    esp,0xc
c00159cb:	53                   	push   ebx
c00159cc:	e8 d9 04 01 00       	call   c0025eaa <PIC::PIC()>
c00159d1:	83 c4 10             	add    esp,0x10
c00159d4:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00159d7:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00159da:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00159df:	83 c0 08             	add    eax,0x8
c00159e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00159e4:	6a 00                	push   0x0
c00159e6:	6a 00                	push   0x0
c00159e8:	6a 00                	push   0x0
c00159ea:	52                   	push   edx
c00159eb:	ff d0                	call   eax
c00159ed:	83 c4 10             	add    esp,0x10
c00159f0:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c00159f4:	74 73                	je     c0015a69 <setupInterruptController()+0x13e>
c00159f6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00159f9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00159fe:	83 c0 0c             	add    eax,0xc
c0015a01:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a03:	6a 00                	push   0x0
c0015a05:	6a 00                	push   0x0
c0015a07:	6a 00                	push   0x0
c0015a09:	52                   	push   edx
c0015a0a:	ff d0                	call   eax
c0015a0c:	83 c4 10             	add    esp,0x10
c0015a0f:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015a13:	74 15                	je     c0015a2a <setupInterruptController()+0xff>
c0015a15:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a18:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a1a:	83 c0 04             	add    eax,0x4
c0015a1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a1f:	83 ec 0c             	sub    esp,0xc
c0015a22:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a25:	ff d0                	call   eax
c0015a27:	83 c4 10             	add    esp,0x10
c0015a2a:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015a31:	83 ec 0c             	sub    esp,0xc
c0015a34:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015a37:	e8 04 9e ff ff       	call   c000f840 <malloc>
c0015a3c:	83 c4 10             	add    esp,0x10
c0015a3f:	89 c3                	mov    ebx,eax
c0015a41:	83 ec 0c             	sub    esp,0xc
c0015a44:	53                   	push   ebx
c0015a45:	e8 08 ff 00 00       	call   c0025952 <APIC::APIC()>
c0015a4a:	83 c4 10             	add    esp,0x10
c0015a4d:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015a50:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a53:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a56:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a58:	83 c0 08             	add    eax,0x8
c0015a5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a5d:	6a 00                	push   0x0
c0015a5f:	6a 00                	push   0x0
c0015a61:	6a 00                	push   0x0
c0015a63:	52                   	push   edx
c0015a64:	ff d0                	call   eax
c0015a66:	83 c4 10             	add    esp,0x10
c0015a69:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0015a6e:	83 ec 08             	sub    esp,0x8
c0015a71:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a74:	50                   	push   eax
c0015a75:	e8 e0 e8 ff ff       	call   c001435a <Device::addChild(Device*)>
c0015a7a:	83 c4 10             	add    esp,0x10
c0015a7d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a80:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a82:	83 c0 24             	add    eax,0x24
c0015a85:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a87:	6a 00                	push   0x0
c0015a89:	68 de 52 01 c0       	push   0xc00152de
c0015a8e:	6a 00                	push   0x0
c0015a90:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a93:	ff d0                	call   eax
c0015a95:	83 c4 10             	add    esp,0x10
c0015a98:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a9d:	83 c0 24             	add    eax,0x24
c0015aa0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aa2:	6a 00                	push   0x0
c0015aa4:	68 de 52 01 c0       	push   0xc00152de
c0015aa9:	6a 01                	push   0x1
c0015aab:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015aae:	ff d0                	call   eax
c0015ab0:	83 c4 10             	add    esp,0x10
c0015ab3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ab6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ab8:	83 c0 24             	add    eax,0x24
c0015abb:	8b 00                	mov    eax,DWORD PTR [eax]
c0015abd:	6a 00                	push   0x0
c0015abf:	68 07 4c 01 c0       	push   0xc0014c07
c0015ac4:	6a 02                	push   0x2
c0015ac6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ac9:	ff d0                	call   eax
c0015acb:	83 c4 10             	add    esp,0x10
c0015ace:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ad1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ad3:	83 c0 24             	add    eax,0x24
c0015ad6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ad8:	6a 00                	push   0x0
c0015ada:	68 de 52 01 c0       	push   0xc00152de
c0015adf:	6a 03                	push   0x3
c0015ae1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ae4:	ff d0                	call   eax
c0015ae6:	83 c4 10             	add    esp,0x10
c0015ae9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aec:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aee:	83 c0 24             	add    eax,0x24
c0015af1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015af3:	6a 00                	push   0x0
c0015af5:	68 de 52 01 c0       	push   0xc00152de
c0015afa:	6a 04                	push   0x4
c0015afc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015aff:	ff d0                	call   eax
c0015b01:	83 c4 10             	add    esp,0x10
c0015b04:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b07:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b09:	83 c0 24             	add    eax,0x24
c0015b0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b0e:	6a 00                	push   0x0
c0015b10:	68 de 52 01 c0       	push   0xc00152de
c0015b15:	6a 05                	push   0x5
c0015b17:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b1a:	ff d0                	call   eax
c0015b1c:	83 c4 10             	add    esp,0x10
c0015b1f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b22:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b24:	83 c0 24             	add    eax,0x24
c0015b27:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b29:	6a 00                	push   0x0
c0015b2b:	68 fd 52 01 c0       	push   0xc00152fd
c0015b30:	6a 06                	push   0x6
c0015b32:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b35:	ff d0                	call   eax
c0015b37:	83 c4 10             	add    esp,0x10
c0015b3a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b3d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b3f:	83 c0 24             	add    eax,0x24
c0015b42:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b44:	6a 00                	push   0x0
c0015b46:	68 39 52 01 c0       	push   0xc0015239
c0015b4b:	6a 07                	push   0x7
c0015b4d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b50:	ff d0                	call   eax
c0015b52:	83 c4 10             	add    esp,0x10
c0015b55:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b58:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b5a:	83 c0 24             	add    eax,0x24
c0015b5d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b5f:	6a 00                	push   0x0
c0015b61:	68 22 4a 01 c0       	push   0xc0014a22
c0015b66:	6a 08                	push   0x8
c0015b68:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b6b:	ff d0                	call   eax
c0015b6d:	83 c4 10             	add    esp,0x10
c0015b70:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b73:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b75:	83 c0 24             	add    eax,0x24
c0015b78:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b7a:	6a 00                	push   0x0
c0015b7c:	68 de 52 01 c0       	push   0xc00152de
c0015b81:	6a 09                	push   0x9
c0015b83:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b86:	ff d0                	call   eax
c0015b88:	83 c4 10             	add    esp,0x10
c0015b8b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b90:	83 c0 24             	add    eax,0x24
c0015b93:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b95:	6a 00                	push   0x0
c0015b97:	68 de 52 01 c0       	push   0xc00152de
c0015b9c:	6a 0a                	push   0xa
c0015b9e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ba1:	ff d0                	call   eax
c0015ba3:	83 c4 10             	add    esp,0x10
c0015ba6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ba9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bab:	83 c0 24             	add    eax,0x24
c0015bae:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bb0:	6a 00                	push   0x0
c0015bb2:	68 de 52 01 c0       	push   0xc00152de
c0015bb7:	6a 0b                	push   0xb
c0015bb9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bbc:	ff d0                	call   eax
c0015bbe:	83 c4 10             	add    esp,0x10
c0015bc1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bc4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bc6:	83 c0 24             	add    eax,0x24
c0015bc9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bcb:	6a 00                	push   0x0
c0015bcd:	68 de 52 01 c0       	push   0xc00152de
c0015bd2:	6a 0c                	push   0xc
c0015bd4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bd7:	ff d0                	call   eax
c0015bd9:	83 c4 10             	add    esp,0x10
c0015bdc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bdf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015be1:	83 c0 24             	add    eax,0x24
c0015be4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015be6:	6a 00                	push   0x0
c0015be8:	68 68 52 01 c0       	push   0xc0015268
c0015bed:	6a 0d                	push   0xd
c0015bef:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bf2:	ff d0                	call   eax
c0015bf4:	83 c4 10             	add    esp,0x10
c0015bf7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bfc:	83 c0 24             	add    eax,0x24
c0015bff:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c01:	6a 00                	push   0x0
c0015c03:	68 a1 52 01 c0       	push   0xc00152a1
c0015c08:	6a 0e                	push   0xe
c0015c0a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c0d:	ff d0                	call   eax
c0015c0f:	83 c4 10             	add    esp,0x10
c0015c12:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c15:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c17:	83 c0 24             	add    eax,0x24
c0015c1a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c1c:	6a 00                	push   0x0
c0015c1e:	68 de 52 01 c0       	push   0xc00152de
c0015c23:	6a 0f                	push   0xf
c0015c25:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c28:	ff d0                	call   eax
c0015c2a:	83 c4 10             	add    esp,0x10
c0015c2d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c30:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c32:	83 c0 24             	add    eax,0x24
c0015c35:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c37:	6a 00                	push   0x0
c0015c39:	68 de 52 01 c0       	push   0xc00152de
c0015c3e:	6a 10                	push   0x10
c0015c40:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c43:	ff d0                	call   eax
c0015c45:	83 c4 10             	add    esp,0x10
c0015c48:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c4d:	83 c0 24             	add    eax,0x24
c0015c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c52:	6a 00                	push   0x0
c0015c54:	68 de 52 01 c0       	push   0xc00152de
c0015c59:	6a 11                	push   0x11
c0015c5b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c5e:	ff d0                	call   eax
c0015c60:	83 c4 10             	add    esp,0x10
c0015c63:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c66:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c68:	83 c0 24             	add    eax,0x24
c0015c6b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c6d:	6a 00                	push   0x0
c0015c6f:	68 de 52 01 c0       	push   0xc00152de
c0015c74:	6a 12                	push   0x12
c0015c76:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c79:	ff d0                	call   eax
c0015c7b:	83 c4 10             	add    esp,0x10
c0015c7e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c81:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c83:	83 c0 24             	add    eax,0x24
c0015c86:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c88:	6a 00                	push   0x0
c0015c8a:	68 de 52 01 c0       	push   0xc00152de
c0015c8f:	6a 13                	push   0x13
c0015c91:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c94:	ff d0                	call   eax
c0015c96:	83 c4 10             	add    esp,0x10
c0015c99:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c9e:	83 c0 24             	add    eax,0x24
c0015ca1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ca3:	6a 00                	push   0x0
c0015ca5:	68 de 52 01 c0       	push   0xc00152de
c0015caa:	6a 14                	push   0x14
c0015cac:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015caf:	ff d0                	call   eax
c0015cb1:	83 c4 10             	add    esp,0x10
c0015cb4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cb7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cb9:	83 c0 24             	add    eax,0x24
c0015cbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cbe:	6a 00                	push   0x0
c0015cc0:	68 de 52 01 c0       	push   0xc00152de
c0015cc5:	6a 1e                	push   0x1e
c0015cc7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cca:	ff d0                	call   eax
c0015ccc:	83 c4 10             	add    esp,0x10
c0015ccf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cd2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cd4:	83 c0 24             	add    eax,0x24
c0015cd7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cd9:	6a 00                	push   0x0
c0015cdb:	68 a9 c7 01 c0       	push   0xc001c7a9
c0015ce0:	6a 60                	push   0x60
c0015ce2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ce5:	ff d0                	call   eax
c0015ce7:	83 c4 10             	add    esp,0x10
c0015cea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ced:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015cf0:	c9                   	leave  
c0015cf1:	c3                   	ret    

c0015cf2 <InterruptController::convertLegacyIRQNumber(int)>:
c0015cf2:	55                   	push   ebp
c0015cf3:	89 e5                	mov    ebp,esp
c0015cf5:	83 ec 08             	sub    esp,0x8
c0015cf8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cfb:	83 ec 0c             	sub    esp,0xc
c0015cfe:	50                   	push   eax
c0015cff:	e8 42 e9 ff ff       	call   c0014646 <Device::getName()>
c0015d04:	83 c4 10             	add    esp,0x10
c0015d07:	8a 00                	mov    al,BYTE PTR [eax]
c0015d09:	3c 41                	cmp    al,0x41
c0015d0b:	0f 94 c0             	sete   al
c0015d0e:	84 c0                	test   al,al
c0015d10:	74 28                	je     c0015d3a <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015d12:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015d16:	7f 12                	jg     c0015d2a <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015d18:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d1b:	05 20 d8 02 c0       	add    eax,0xc002d820
c0015d20:	8a 00                	mov    al,BYTE PTR [eax]
c0015d22:	0f b6 c0             	movzx  eax,al
c0015d25:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015d28:	eb 10                	jmp    c0015d3a <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015d2a:	83 ec 0c             	sub    esp,0xc
c0015d2d:	68 40 af 02 c0       	push   0xc002af40
c0015d32:	e8 9e 48 00 00       	call   c001a5d5 <Krnl::panic(char const*)>
c0015d37:	83 c4 10             	add    esp,0x10
c0015d3a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d3d:	c9                   	leave  
c0015d3e:	c3                   	ret    
c0015d3f:	90                   	nop

c0015d40 <startGUI(void*)>:
c0015d40:	55                   	push   ebp
c0015d41:	89 e5                	mov    ebp,esp
c0015d43:	53                   	push   ebx
c0015d44:	83 ec 04             	sub    esp,0x4
c0015d47:	e8 b0 80 00 00       	call   c001ddfc <unlockScheduler()>
c0015d4c:	8b 1d c8 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5c8
c0015d52:	83 ec 08             	sub    esp,0x8
c0015d55:	6a 01                	push   0x1
c0015d57:	68 90 b2 02 c0       	push   0xc002b290
c0015d5c:	e8 f1 79 00 00       	call   c001d752 <Thr::loadDLL(char const*, bool)>
c0015d61:	83 c4 10             	add    esp,0x10
c0015d64:	83 ec 08             	sub    esp,0x8
c0015d67:	53                   	push   ebx
c0015d68:	50                   	push   eax
c0015d69:	e8 18 7c 00 00       	call   c001d986 <Thr::executeDLL(unsigned long, void*)>
c0015d6e:	83 c4 10             	add    esp,0x10
c0015d71:	8b 1d c8 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5c8
c0015d77:	83 ec 08             	sub    esp,0x8
c0015d7a:	6a 01                	push   0x1
c0015d7c:	68 aa b2 02 c0       	push   0xc002b2aa
c0015d81:	e8 cc 79 00 00       	call   c001d752 <Thr::loadDLL(char const*, bool)>
c0015d86:	83 c4 10             	add    esp,0x10
c0015d89:	83 ec 08             	sub    esp,0x8
c0015d8c:	53                   	push   ebx
c0015d8d:	50                   	push   eax
c0015d8e:	e8 f3 7b 00 00       	call   c001d986 <Thr::executeDLL(unsigned long, void*)>
c0015d93:	83 c4 10             	add    esp,0x10
c0015d96:	90                   	nop
c0015d97:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015d9a:	c9                   	leave  
c0015d9b:	c3                   	ret    

c0015d9c <startGUIVESA(void*)>:
c0015d9c:	55                   	push   ebp
c0015d9d:	89 e5                	mov    ebp,esp
c0015d9f:	53                   	push   ebx
c0015da0:	83 ec 04             	sub    esp,0x4
c0015da3:	e8 54 80 00 00       	call   c001ddfc <unlockScheduler()>
c0015da8:	8b 1d c8 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5c8
c0015dae:	83 ec 08             	sub    esp,0x8
c0015db1:	6a 01                	push   0x1
c0015db3:	68 c4 b2 02 c0       	push   0xc002b2c4
c0015db8:	e8 95 79 00 00       	call   c001d752 <Thr::loadDLL(char const*, bool)>
c0015dbd:	83 c4 10             	add    esp,0x10
c0015dc0:	83 ec 08             	sub    esp,0x8
c0015dc3:	53                   	push   ebx
c0015dc4:	50                   	push   eax
c0015dc5:	e8 bc 7b 00 00       	call   c001d986 <Thr::executeDLL(unsigned long, void*)>
c0015dca:	83 c4 10             	add    esp,0x10
c0015dcd:	8b 1d c8 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5c8
c0015dd3:	83 ec 08             	sub    esp,0x8
c0015dd6:	6a 01                	push   0x1
c0015dd8:	68 aa b2 02 c0       	push   0xc002b2aa
c0015ddd:	e8 70 79 00 00       	call   c001d752 <Thr::loadDLL(char const*, bool)>
c0015de2:	83 c4 10             	add    esp,0x10
c0015de5:	83 ec 08             	sub    esp,0x8
c0015de8:	53                   	push   ebx
c0015de9:	50                   	push   eax
c0015dea:	e8 97 7b 00 00       	call   c001d986 <Thr::executeDLL(unsigned long, void*)>
c0015def:	83 c4 10             	add    esp,0x10
c0015df2:	90                   	nop
c0015df3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015df6:	c9                   	leave  
c0015df7:	c3                   	ret    

c0015df8 <sendKeyToTerminal(unsigned char)>:
c0015df8:	55                   	push   ebp
c0015df9:	89 e5                	mov    ebp,esp
c0015dfb:	83 ec 28             	sub    esp,0x28
c0015dfe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e01:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015e04:	a1 a4 e6 02 c0       	mov    eax,ds:0xc002e6a4
c0015e09:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015e0d:	83 ec 08             	sub    esp,0x8
c0015e10:	52                   	push   edx
c0015e11:	50                   	push   eax
c0015e12:	e8 43 b5 ff ff       	call   c001135a <VgaText::receiveKey(unsigned char)>
c0015e17:	83 c4 10             	add    esp,0x10
c0015e1a:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015e1e:	75 41                	jne    c0015e61 <sendKeyToTerminal(unsigned char)+0x69>
c0015e20:	e8 fc 7f 00 00       	call   c001de21 <lockStuff()>
c0015e25:	a1 80 e7 02 c0       	mov    eax,ds:0xc002e780
c0015e2a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e2d:	c7 05 80 e7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e780,0x0
c0015e37:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015e3b:	74 1f                	je     c0015e5c <sendKeyToTerminal(unsigned char)+0x64>
c0015e3d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e40:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015e43:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015e46:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015e49:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e4c:	83 ec 0c             	sub    esp,0xc
c0015e4f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015e52:	e8 bb 85 00 00       	call   c001e412 <unblockTask(ThreadControlBlock*)>
c0015e57:	83 c4 10             	add    esp,0x10
c0015e5a:	eb db                	jmp    c0015e37 <sendKeyToTerminal(unsigned char)+0x3f>
c0015e5c:	e8 5a 83 00 00       	call   c001e1bb <unlockStuff()>
c0015e61:	90                   	nop
c0015e62:	c9                   	leave  
c0015e63:	c3                   	ret    

c0015e64 <sendKeyboardToken(KeyboardToken)>:
c0015e64:	55                   	push   ebp
c0015e65:	89 e5                	mov    ebp,esp
c0015e67:	83 ec 18             	sub    esp,0x18
c0015e6a:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015e6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e70:	0f b7 c0             	movzx  eax,ax
c0015e73:	83 f2 01             	xor    edx,0x1
c0015e76:	88 90 a0 e7 02 c0    	mov    BYTE PTR [eax-0x3ffd1860],dl
c0015e7c:	a1 88 e7 02 c0       	mov    eax,ds:0xc002e788
c0015e81:	85 c0                	test   eax,eax
c0015e83:	74 24                	je     c0015ea9 <sendKeyboardToken(KeyboardToken)+0x45>
c0015e85:	8b 0d 88 e7 02 c0    	mov    ecx,DWORD PTR ds:0xc002e788
c0015e8b:	83 ec 04             	sub    esp,0x4
c0015e8e:	68 a0 e7 02 c0       	push   0xc002e7a0
c0015e93:	83 ec 08             	sub    esp,0x8
c0015e96:	89 e2                	mov    edx,esp
c0015e98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e9b:	89 02                	mov    DWORD PTR [edx],eax
c0015e9d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015ea0:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015ea4:	ff d1                	call   ecx
c0015ea6:	83 c4 10             	add    esp,0x10
c0015ea9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015eac:	66 3d 03 02          	cmp    ax,0x203
c0015eb0:	75 07                	jne    c0015eb9 <sendKeyboardToken(KeyboardToken)+0x55>
c0015eb2:	a0 a0 e8 02 c0       	mov    al,ds:0xc002e8a0
c0015eb7:	84 c0                	test   al,al
c0015eb9:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015ebd:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015ec0:	a0 a8 eb 02 c0       	mov    al,ds:0xc002eba8
c0015ec5:	38 c2                	cmp    dl,al
c0015ec7:	74 1c                	je     c0015ee5 <sendKeyboardToken(KeyboardToken)+0x81>
c0015ec9:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015ecc:	a2 a8 eb 02 c0       	mov    ds:0xc002eba8,al
c0015ed1:	a0 a8 eb 02 c0       	mov    al,ds:0xc002eba8
c0015ed6:	0f b6 c0             	movzx  eax,al
c0015ed9:	83 ec 0c             	sub    esp,0xc
c0015edc:	50                   	push   eax
c0015edd:	e8 d8 a6 ff ff       	call   c00105ba <setTerminalScrollLock(bool)>
c0015ee2:	83 c4 10             	add    esp,0x10
c0015ee5:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015ee8:	84 c0                	test   al,al
c0015eea:	0f 84 ae 00 00 00    	je     c0015f9e <sendKeyboardToken(KeyboardToken)+0x13a>
c0015ef0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ef3:	66 3d 10 03          	cmp    ax,0x310
c0015ef7:	75 06                	jne    c0015eff <sendKeyboardToken(KeyboardToken)+0x9b>
c0015ef9:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015eff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f02:	66 3d 11 03          	cmp    ax,0x311
c0015f06:	75 06                	jne    c0015f0e <sendKeyboardToken(KeyboardToken)+0xaa>
c0015f08:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015f0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f11:	66 3d 12 03          	cmp    ax,0x312
c0015f15:	75 06                	jne    c0015f1d <sendKeyboardToken(KeyboardToken)+0xb9>
c0015f17:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015f1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f20:	66 3d 13 03          	cmp    ax,0x313
c0015f24:	75 06                	jne    c0015f2c <sendKeyboardToken(KeyboardToken)+0xc8>
c0015f26:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015f2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f2f:	66 3d 14 03          	cmp    ax,0x314
c0015f33:	75 06                	jne    c0015f3b <sendKeyboardToken(KeyboardToken)+0xd7>
c0015f35:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015f3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f3e:	66 3d 15 03          	cmp    ax,0x315
c0015f42:	75 06                	jne    c0015f4a <sendKeyboardToken(KeyboardToken)+0xe6>
c0015f44:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015f4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f4d:	66 3d 16 03          	cmp    ax,0x316
c0015f51:	75 06                	jne    c0015f59 <sendKeyboardToken(KeyboardToken)+0xf5>
c0015f53:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015f59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f5c:	66 3d 17 03          	cmp    ax,0x317
c0015f60:	75 06                	jne    c0015f68 <sendKeyboardToken(KeyboardToken)+0x104>
c0015f62:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015f68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f6b:	66 3d 18 03          	cmp    ax,0x318
c0015f6f:	75 06                	jne    c0015f77 <sendKeyboardToken(KeyboardToken)+0x113>
c0015f71:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015f77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f7a:	66 3d 19 03          	cmp    ax,0x319
c0015f7e:	75 06                	jne    c0015f86 <sendKeyboardToken(KeyboardToken)+0x122>
c0015f80:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015f86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f89:	66 3d 1a 03          	cmp    ax,0x31a
c0015f8d:	0f 85 c9 00 00 00    	jne    c001605c <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015f93:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015f99:	e9 be 00 00 00       	jmp    c001605c <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015f9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fa1:	66 3d 10 03          	cmp    ax,0x310
c0015fa5:	75 0a                	jne    c0015fb1 <sendKeyboardToken(KeyboardToken)+0x14d>
c0015fa7:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015fad:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fb4:	66 3d 11 03          	cmp    ax,0x311
c0015fb8:	75 0a                	jne    c0015fc4 <sendKeyboardToken(KeyboardToken)+0x160>
c0015fba:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015fc0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fc7:	66 3d 12 03          	cmp    ax,0x312
c0015fcb:	75 0a                	jne    c0015fd7 <sendKeyboardToken(KeyboardToken)+0x173>
c0015fcd:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015fd3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fda:	66 3d 13 03          	cmp    ax,0x313
c0015fde:	75 0a                	jne    c0015fea <sendKeyboardToken(KeyboardToken)+0x186>
c0015fe0:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015fe6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fed:	66 3d 14 03          	cmp    ax,0x314
c0015ff1:	75 0a                	jne    c0015ffd <sendKeyboardToken(KeyboardToken)+0x199>
c0015ff3:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015ff9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ffd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016000:	66 3d 15 03          	cmp    ax,0x315
c0016004:	75 0a                	jne    c0016010 <sendKeyboardToken(KeyboardToken)+0x1ac>
c0016006:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001600c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016010:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016013:	66 3d 16 03          	cmp    ax,0x316
c0016017:	75 0a                	jne    c0016023 <sendKeyboardToken(KeyboardToken)+0x1bf>
c0016019:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001601f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016023:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016026:	66 3d 17 03          	cmp    ax,0x317
c001602a:	75 0a                	jne    c0016036 <sendKeyboardToken(KeyboardToken)+0x1d2>
c001602c:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0016032:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016036:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016039:	66 3d 18 03          	cmp    ax,0x318
c001603d:	75 0a                	jne    c0016049 <sendKeyboardToken(KeyboardToken)+0x1e5>
c001603f:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0016045:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016049:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001604c:	66 3d 19 03          	cmp    ax,0x319
c0016050:	75 0a                	jne    c001605c <sendKeyboardToken(KeyboardToken)+0x1f8>
c0016052:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0016058:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001605c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001605f:	66 3d 00 02          	cmp    ax,0x200
c0016063:	75 2c                	jne    c0016091 <sendKeyboardToken(KeyboardToken)+0x22d>
c0016065:	a0 a0 eb 02 c0       	mov    al,ds:0xc002eba0
c001606a:	83 f0 01             	xor    eax,0x1
c001606d:	84 c0                	test   al,al
c001606f:	74 20                	je     c0016091 <sendKeyboardToken(KeyboardToken)+0x22d>
c0016071:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0016076:	6a 01                	push   0x1
c0016078:	6a 00                	push   0x0
c001607a:	68 40 5d 01 c0       	push   0xc0015d40
c001607f:	50                   	push   eax
c0016080:	e8 a7 7e 00 00       	call   c001df2c <Process::createThread(void (*)(void*), void*, int)>
c0016085:	83 c4 10             	add    esp,0x10
c0016088:	c6 05 a0 eb 02 c0 01 	mov    BYTE PTR ds:0xc002eba0,0x1
c001608f:	eb 33                	jmp    c00160c4 <sendKeyboardToken(KeyboardToken)+0x260>
c0016091:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016094:	66 3d 01 02          	cmp    ax,0x201
c0016098:	75 2a                	jne    c00160c4 <sendKeyboardToken(KeyboardToken)+0x260>
c001609a:	a0 a0 eb 02 c0       	mov    al,ds:0xc002eba0
c001609f:	83 f0 01             	xor    eax,0x1
c00160a2:	84 c0                	test   al,al
c00160a4:	74 1e                	je     c00160c4 <sendKeyboardToken(KeyboardToken)+0x260>
c00160a6:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c00160ab:	6a 01                	push   0x1
c00160ad:	6a 00                	push   0x0
c00160af:	68 9c 5d 01 c0       	push   0xc0015d9c
c00160b4:	50                   	push   eax
c00160b5:	e8 72 7e 00 00       	call   c001df2c <Process::createThread(void (*)(void*), void*, int)>
c00160ba:	83 c4 10             	add    esp,0x10
c00160bd:	c6 05 a0 eb 02 c0 01 	mov    BYTE PTR ds:0xc002eba0,0x1
c00160c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160c7:	66 3d 1d 03          	cmp    ax,0x31d
c00160cb:	75 06                	jne    c00160d3 <sendKeyboardToken(KeyboardToken)+0x26f>
c00160cd:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00160d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160d6:	66 3d 1c 03          	cmp    ax,0x31c
c00160da:	75 06                	jne    c00160e2 <sendKeyboardToken(KeyboardToken)+0x27e>
c00160dc:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00160e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160e5:	66 3d 1b 03          	cmp    ax,0x31b
c00160e9:	75 06                	jne    c00160f1 <sendKeyboardToken(KeyboardToken)+0x28d>
c00160eb:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00160f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160f4:	66 3d 1e 03          	cmp    ax,0x31e
c00160f8:	75 06                	jne    c0016100 <sendKeyboardToken(KeyboardToken)+0x29c>
c00160fa:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0016100:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016103:	66 3d 1f 03          	cmp    ax,0x31f
c0016107:	75 06                	jne    c001610f <sendKeyboardToken(KeyboardToken)+0x2ab>
c0016109:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001610f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016112:	66 3d 1a 03          	cmp    ax,0x31a
c0016116:	75 06                	jne    c001611e <sendKeyboardToken(KeyboardToken)+0x2ba>
c0016118:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001611e:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0016122:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016125:	83 f0 01             	xor    eax,0x1
c0016128:	84 c0                	test   al,al
c001612a:	74 77                	je     c00161a3 <sendKeyboardToken(KeyboardToken)+0x33f>
c001612c:	a0 a1 e8 02 c0       	mov    al,ds:0xc002e8a1
c0016131:	84 c0                	test   al,al
c0016133:	74 41                	je     c0016176 <sendKeyboardToken(KeyboardToken)+0x312>
c0016135:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016139:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c001613d:	74 2b                	je     c001616a <sendKeyboardToken(KeyboardToken)+0x306>
c001613f:	8b 15 a4 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eba4
c0016145:	89 d0                	mov    eax,edx
c0016147:	c1 e0 02             	shl    eax,0x2
c001614a:	01 d0                	add    eax,edx
c001614c:	01 c0                	add    eax,eax
c001614e:	a3 a4 eb 02 c0       	mov    ds:0xc002eba4,eax
c0016153:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016156:	0f b7 c0             	movzx  eax,ax
c0016159:	8d 50 d0             	lea    edx,[eax-0x30]
c001615c:	a1 a4 eb 02 c0       	mov    eax,ds:0xc002eba4
c0016161:	01 d0                	add    eax,edx
c0016163:	a3 a4 eb 02 c0       	mov    ds:0xc002eba4,eax
c0016168:	eb 6d                	jmp    c00161d7 <sendKeyboardToken(KeyboardToken)+0x373>
c001616a:	c7 05 a4 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eba4,0x0
c0016174:	eb 61                	jmp    c00161d7 <sendKeyboardToken(KeyboardToken)+0x373>
c0016176:	a1 a4 eb 02 c0       	mov    eax,ds:0xc002eba4
c001617b:	85 c0                	test   eax,eax
c001617d:	74 18                	je     c0016197 <sendKeyboardToken(KeyboardToken)+0x333>
c001617f:	a1 a4 eb 02 c0       	mov    eax,ds:0xc002eba4
c0016184:	0f b6 c0             	movzx  eax,al
c0016187:	83 ec 0c             	sub    esp,0xc
c001618a:	50                   	push   eax
c001618b:	e8 68 fc ff ff       	call   c0015df8 <sendKeyToTerminal(unsigned char)>
c0016190:	83 c4 10             	add    esp,0x10
c0016193:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016197:	c7 05 a4 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eba4,0x0
c00161a1:	eb 34                	jmp    c00161d7 <sendKeyboardToken(KeyboardToken)+0x373>
c00161a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161a6:	66 3d 01 01          	cmp    ax,0x101
c00161aa:	75 2b                	jne    c00161d7 <sendKeyboardToken(KeyboardToken)+0x373>
c00161ac:	a1 a4 eb 02 c0       	mov    eax,ds:0xc002eba4
c00161b1:	85 c0                	test   eax,eax
c00161b3:	74 18                	je     c00161cd <sendKeyboardToken(KeyboardToken)+0x369>
c00161b5:	a1 a4 eb 02 c0       	mov    eax,ds:0xc002eba4
c00161ba:	0f b6 c0             	movzx  eax,al
c00161bd:	83 ec 0c             	sub    esp,0xc
c00161c0:	50                   	push   eax
c00161c1:	e8 32 fc ff ff       	call   c0015df8 <sendKeyToTerminal(unsigned char)>
c00161c6:	83 c4 10             	add    esp,0x10
c00161c9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161cd:	c7 05 a4 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eba4,0x0
c00161d7:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00161da:	83 f0 01             	xor    eax,0x1
c00161dd:	84 c0                	test   al,al
c00161df:	74 4c                	je     c001622d <sendKeyboardToken(KeyboardToken)+0x3c9>
c00161e1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00161e4:	83 f0 01             	xor    eax,0x1
c00161e7:	84 c0                	test   al,al
c00161e9:	74 42                	je     c001622d <sendKeyboardToken(KeyboardToken)+0x3c9>
c00161eb:	a0 a0 e8 02 c0       	mov    al,ds:0xc002e8a0
c00161f0:	83 f0 01             	xor    eax,0x1
c00161f3:	84 c0                	test   al,al
c00161f5:	74 36                	je     c001622d <sendKeyboardToken(KeyboardToken)+0x3c9>
c00161f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161fa:	66 83 f8 1f          	cmp    ax,0x1f
c00161fe:	76 09                	jbe    c0016209 <sendKeyboardToken(KeyboardToken)+0x3a5>
c0016200:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016203:	66 83 f8 7e          	cmp    ax,0x7e
c0016207:	76 12                	jbe    c001621b <sendKeyboardToken(KeyboardToken)+0x3b7>
c0016209:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001620c:	66 83 f8 0a          	cmp    ax,0xa
c0016210:	74 09                	je     c001621b <sendKeyboardToken(KeyboardToken)+0x3b7>
c0016212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016215:	66 83 f8 08          	cmp    ax,0x8
c0016219:	75 12                	jne    c001622d <sendKeyboardToken(KeyboardToken)+0x3c9>
c001621b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001621e:	0f b6 c0             	movzx  eax,al
c0016221:	83 ec 0c             	sub    esp,0xc
c0016224:	50                   	push   eax
c0016225:	e8 ce fb ff ff       	call   c0015df8 <sendKeyToTerminal(unsigned char)>
c001622a:	83 c4 10             	add    esp,0x10
c001622d:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0016230:	83 f0 01             	xor    eax,0x1
c0016233:	84 c0                	test   al,al
c0016235:	74 4f                	je     c0016286 <sendKeyboardToken(KeyboardToken)+0x422>
c0016237:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001623a:	83 f0 01             	xor    eax,0x1
c001623d:	84 c0                	test   al,al
c001623f:	74 45                	je     c0016286 <sendKeyboardToken(KeyboardToken)+0x422>
c0016241:	a0 a0 e8 02 c0       	mov    al,ds:0xc002e8a0
c0016246:	84 c0                	test   al,al
c0016248:	74 3c                	je     c0016286 <sendKeyboardToken(KeyboardToken)+0x422>
c001624a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001624d:	66 83 f8 3f          	cmp    ax,0x3f
c0016251:	76 33                	jbe    c0016286 <sendKeyboardToken(KeyboardToken)+0x422>
c0016253:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016256:	66 83 f8 7f          	cmp    ax,0x7f
c001625a:	77 2a                	ja     c0016286 <sendKeyboardToken(KeyboardToken)+0x422>
c001625c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001625f:	88 c2                	mov    dl,al
c0016261:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016264:	66 83 f8 5f          	cmp    ax,0x5f
c0016268:	76 04                	jbe    c001626e <sendKeyboardToken(KeyboardToken)+0x40a>
c001626a:	b0 20                	mov    al,0x20
c001626c:	eb 02                	jmp    c0016270 <sendKeyboardToken(KeyboardToken)+0x40c>
c001626e:	b0 00                	mov    al,0x0
c0016270:	29 c2                	sub    edx,eax
c0016272:	88 d0                	mov    al,dl
c0016274:	83 e8 40             	sub    eax,0x40
c0016277:	0f b6 c0             	movzx  eax,al
c001627a:	83 ec 0c             	sub    esp,0xc
c001627d:	50                   	push   eax
c001627e:	e8 75 fb ff ff       	call   c0015df8 <sendKeyToTerminal(unsigned char)>
c0016283:	83 c4 10             	add    esp,0x10
c0016286:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016289:	66 3d 00 03          	cmp    ax,0x300
c001628d:	75 0f                	jne    c001629e <sendKeyboardToken(KeyboardToken)+0x43a>
c001628f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016292:	83 f0 01             	xor    eax,0x1
c0016295:	84 c0                	test   al,al
c0016297:	74 05                	je     c001629e <sendKeyboardToken(KeyboardToken)+0x43a>
c0016299:	e8 51 ab ff ff       	call   c0010def <doTerminalCycle()>
c001629e:	90                   	nop
c001629f:	c9                   	leave  
c00162a0:	c3                   	ret    

c00162a1 <clearInternalKeybuffer(VgaText*)>:
c00162a1:	55                   	push   ebp
c00162a2:	89 e5                	mov    ebp,esp
c00162a4:	83 ec 08             	sub    esp,0x8
c00162a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162aa:	05 34 11 00 00       	add    eax,0x1134
c00162af:	83 ec 0c             	sub    esp,0xc
c00162b2:	50                   	push   eax
c00162b3:	e8 dc a4 fe ff       	call   c0000794 <strlen>
c00162b8:	83 c4 10             	add    esp,0x10
c00162bb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00162be:	81 c2 34 11 00 00    	add    edx,0x1134
c00162c4:	83 ec 04             	sub    esp,0x4
c00162c7:	50                   	push   eax
c00162c8:	6a 00                	push   0x0
c00162ca:	52                   	push   edx
c00162cb:	e8 a8 a4 fe ff       	call   c0000778 <memset>
c00162d0:	83 c4 10             	add    esp,0x10
c00162d3:	90                   	nop
c00162d4:	c9                   	leave  
c00162d5:	c3                   	ret    

c00162d6 <readKeyboard(VgaText*, char*, unsigned long)>:
c00162d6:	55                   	push   ebp
c00162d7:	89 e5                	mov    ebp,esp
c00162d9:	83 ec 18             	sub    esp,0x18
c00162dc:	fb                   	sti    
c00162dd:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00162e4:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00162e8:	0f 84 8a 00 00 00    	je     c0016378 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c00162ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162f1:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00162f7:	84 c0                	test   al,al
c00162f9:	75 11                	jne    c001630c <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c00162fb:	e8 fa 7a 00 00       	call   c001ddfa <lockScheduler()>
c0016300:	e8 31 7e 00 00       	call   c001e136 <schedule()>
c0016305:	e8 f2 7a 00 00       	call   c001ddfc <unlockScheduler()>
c001630a:	eb e2                	jmp    c00162ee <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c001630c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001630f:	8d 50 01             	lea    edx,[eax+0x1]
c0016312:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0016315:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016318:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c001631e:	88 10                	mov    BYTE PTR [eax],dl
c0016320:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016323:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0016329:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001632c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001632f:	05 34 11 00 00       	add    eax,0x1134
c0016334:	83 ec 0c             	sub    esp,0xc
c0016337:	50                   	push   eax
c0016338:	e8 57 a4 fe ff       	call   c0000794 <strlen>
c001633d:	83 c4 10             	add    esp,0x10
c0016340:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016343:	81 c2 34 11 00 00    	add    edx,0x1134
c0016349:	8d 4a 01             	lea    ecx,[edx+0x1]
c001634c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001634f:	81 c2 34 11 00 00    	add    edx,0x1134
c0016355:	83 ec 04             	sub    esp,0x4
c0016358:	50                   	push   eax
c0016359:	51                   	push   ecx
c001635a:	52                   	push   edx
c001635b:	e8 1c a3 fe ff       	call   c000067c <memmove>
c0016360:	83 c4 10             	add    esp,0x10
c0016363:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0016366:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0016369:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c001636d:	0f 85 71 ff ff ff    	jne    c00162e4 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0016373:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016376:	eb 03                	jmp    c001637b <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c0016378:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001637b:	c9                   	leave  
c001637c:	c3                   	ret    
c001637d:	90                   	nop

c001637e <Keyboard::Keyboard(char const*)>:
c001637e:	83 ec 0c             	sub    esp,0xc
c0016381:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016385:	83 ec 08             	sub    esp,0x8
c0016388:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001638c:	50                   	push   eax
c001638d:	e8 b8 e1 ff ff       	call   c001454a <Device::Device(char const*)>
c0016392:	83 c4 10             	add    esp,0x10
c0016395:	ba e8 b2 02 c0       	mov    edx,0xc002b2e8
c001639a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001639e:	89 10                	mov    DWORD PTR [eax],edx
c00163a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163a4:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00163ae:	c6 05 84 e7 02 c0 01 	mov    BYTE PTR ds:0xc002e784,0x1
c00163b5:	90                   	nop
c00163b6:	83 c4 0c             	add    esp,0xc
c00163b9:	c3                   	ret    

c00163ba <Keyboard::~Keyboard()>:
c00163ba:	83 ec 0c             	sub    esp,0xc
c00163bd:	ba e8 b2 02 c0       	mov    edx,0xc002b2e8
c00163c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163c6:	89 10                	mov    DWORD PTR [eax],edx
c00163c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163cc:	83 ec 0c             	sub    esp,0xc
c00163cf:	50                   	push   eax
c00163d0:	e8 57 de ff ff       	call   c001422c <Device::~Device()>
c00163d5:	83 c4 10             	add    esp,0x10
c00163d8:	90                   	nop
c00163d9:	83 c4 0c             	add    esp,0xc
c00163dc:	c3                   	ret    
c00163dd:	90                   	nop

c00163de <Keyboard::~Keyboard()>:
c00163de:	83 ec 0c             	sub    esp,0xc
c00163e1:	83 ec 0c             	sub    esp,0xc
c00163e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163e8:	e8 cd ff ff ff       	call   c00163ba <Keyboard::~Keyboard()>
c00163ed:	83 c4 10             	add    esp,0x10
c00163f0:	83 ec 08             	sub    esp,0x8
c00163f3:	68 5c 01 00 00       	push   0x15c
c00163f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163fc:	e8 53 ca ff ff       	call   c0012e54 <operator delete(void*, unsigned long)>
c0016401:	83 c4 10             	add    esp,0x10
c0016404:	83 c4 0c             	add    esp,0xc
c0016407:	c3                   	ret    

c0016408 <LogicalDisk::close(int, int, void*)>:
c0016408:	83 c8 ff             	or     eax,0xffffffff
c001640b:	c3                   	ret    

c001640c <LogicalDisk::~LogicalDisk()>:
c001640c:	83 ec 0c             	sub    esp,0xc
c001640f:	ba 98 b3 02 c0       	mov    edx,0xc002b398
c0016414:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016418:	89 10                	mov    DWORD PTR [eax],edx
c001641a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001641e:	83 ec 0c             	sub    esp,0xc
c0016421:	50                   	push   eax
c0016422:	e8 05 de ff ff       	call   c001422c <Device::~Device()>
c0016427:	83 c4 10             	add    esp,0x10
c001642a:	90                   	nop
c001642b:	83 c4 0c             	add    esp,0xc
c001642e:	c3                   	ret    
c001642f:	90                   	nop

c0016430 <LogicalDisk::~LogicalDisk()>:
c0016430:	83 ec 0c             	sub    esp,0xc
c0016433:	83 ec 0c             	sub    esp,0xc
c0016436:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001643a:	e8 cd ff ff ff       	call   c001640c <LogicalDisk::~LogicalDisk()>
c001643f:	83 c4 10             	add    esp,0x10
c0016442:	83 ec 08             	sub    esp,0x8
c0016445:	68 74 01 00 00       	push   0x174
c001644a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001644e:	e8 01 ca ff ff       	call   c0012e54 <operator delete(void*, unsigned long)>
c0016453:	83 c4 10             	add    esp,0x10
c0016456:	83 c4 0c             	add    esp,0xc
c0016459:	c3                   	ret    

c001645a <LogicalDisk::open(int, int, void*)>:
c001645a:	83 ec 18             	sub    esp,0x18
c001645d:	68 14 b3 02 c0       	push   0xc002b314
c0016462:	e8 6e 41 00 00       	call   c001a5d5 <Krnl::panic(char const*)>
c0016467:	83 c8 ff             	or     eax,0xffffffff
c001646a:	83 c4 1c             	add    esp,0x1c
c001646d:	c3                   	ret    

c001646e <LogicalDisk::absoluteToRelative(unsigned long long)>:
c001646e:	53                   	push   ebx
c001646f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016473:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016477:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001647b:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0016481:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0016487:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c001648d:	77 10                	ja     c001649f <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c001648f:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0016495:	89 d3                	mov    ebx,edx
c0016497:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c001649d:	72 05                	jb     c00164a4 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c001649f:	83 c8 ff             	or     eax,0xffffffff
c00164a2:	89 c2                	mov    edx,eax
c00164a4:	5b                   	pop    ebx
c00164a5:	c3                   	ret    

c00164a6 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00164a6:	56                   	push   esi
c00164a7:	83 c8 ff             	or     eax,0xffffffff
c00164aa:	53                   	push   ebx
c00164ab:	89 c2                	mov    edx,eax
c00164ad:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00164b1:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00164b5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00164b9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00164bf:	77 27                	ja     c00164e8 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00164c1:	89 d8                	mov    eax,ebx
c00164c3:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c00164c9:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c00164cf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00164d4:	89 c2                	mov    edx,eax
c00164d6:	73 10                	jae    c00164e8 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00164d8:	89 c8                	mov    eax,ecx
c00164da:	89 da                	mov    edx,ebx
c00164dc:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00164e2:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c00164e8:	5b                   	pop    ebx
c00164e9:	5e                   	pop    esi
c00164ea:	c3                   	ret    
c00164eb:	90                   	nop

c00164ec <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c00164ec:	83 ec 1c             	sub    esp,0x1c
c00164ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00164f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00164f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00164fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00164ff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016503:	89 04 24             	mov    DWORD PTR [esp],eax
c0016506:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001650a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001650e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016512:	83 ec 08             	sub    esp,0x8
c0016515:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016519:	50                   	push   eax
c001651a:	e8 2b e0 ff ff       	call   c001454a <Device::Device(char const*)>
c001651f:	83 c4 10             	add    esp,0x10
c0016522:	ba 98 b3 02 c0       	mov    edx,0xc002b398
c0016527:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001652b:	89 10                	mov    DWORD PTR [eax],edx
c001652d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016531:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016538:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001653c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016543:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016547:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0016551:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016555:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016559:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001655d:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0016563:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0016569:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001656d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016574:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001657a:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0016580:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016584:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016588:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c001658e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016592:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001659c:	90                   	nop
c001659d:	83 c4 1c             	add    esp,0x1c
c00165a0:	c3                   	ret    
c00165a1:	90                   	nop

c00165a2 <LogicalDisk::assignDriveLetter()>:
c00165a2:	55                   	push   ebp
c00165a3:	57                   	push   edi
c00165a4:	56                   	push   esi
c00165a5:	53                   	push   ebx
c00165a6:	83 ec 14             	sub    esp,0x14
c00165a9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00165ad:	8b 3d c0 eb 02 c0    	mov    edi,DWORD PTR ds:0xc002ebc0
c00165b3:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00165b9:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00165bd:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00165c3:	8b 3d c4 eb 02 c0    	mov    edi,DWORD PTR ds:0xc002ebc4
c00165c9:	3c 01                	cmp    al,0x1
c00165cb:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00165cf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00165d3:	19 c0                	sbb    eax,eax
c00165d5:	83 e0 02             	and    eax,0x2
c00165d8:	83 c0 41             	add    eax,0x41
c00165db:	0f be e8             	movsx  ebp,al
c00165de:	3c 43                	cmp    al,0x43
c00165e0:	75 10                	jne    c00165f2 <LogicalDisk::assignDriveLetter()+0x50>
c00165e2:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c00165e9:	75 5d                	jne    c0016648 <LogicalDisk::assignDriveLetter()+0xa6>
c00165eb:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00165f0:	75 56                	jne    c0016648 <LogicalDisk::assignDriveLetter()+0xa6>
c00165f2:	8d 75 bf             	lea    esi,[ebp-0x41]
c00165f5:	ba 01 00 00 00       	mov    edx,0x1
c00165fa:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00165fe:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0016602:	d3 e2                	shl    edx,cl
c0016604:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016608:	89 d7                	mov    edi,edx
c001660a:	89 d6                	mov    esi,edx
c001660c:	c1 ff 1f             	sar    edi,0x1f
c001660f:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0016613:	21 f9                	and    ecx,edi
c0016615:	09 d1                	or     ecx,edx
c0016617:	75 2f                	jne    c0016648 <LogicalDisk::assignDriveLetter()+0xa6>
c0016619:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001661d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016621:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0016627:	09 f2                	or     edx,esi
c0016629:	89 15 c0 eb 02 c0    	mov    DWORD PTR ds:0xc002ebc0,edx
c001662f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016633:	09 fa                	or     edx,edi
c0016635:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0016639:	89 15 c4 eb 02 c0    	mov    DWORD PTR ds:0xc002ebc4,edx
c001663f:	89 1c bd e0 eb 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1420],ebx
c0016646:	eb 08                	jmp    c0016650 <LogicalDisk::assignDriveLetter()+0xae>
c0016648:	45                   	inc    ebp
c0016649:	40                   	inc    eax
c001664a:	3c 5b                	cmp    al,0x5b
c001664c:	75 90                	jne    c00165de <LogicalDisk::assignDriveLetter()+0x3c>
c001664e:	31 c0                	xor    eax,eax
c0016650:	83 c4 14             	add    esp,0x14
c0016653:	5b                   	pop    ebx
c0016654:	5e                   	pop    esi
c0016655:	5f                   	pop    edi
c0016656:	5d                   	pop    ebp
c0016657:	c3                   	ret    

c0016658 <LogicalDisk::mount()>:
c0016658:	56                   	push   esi
c0016659:	53                   	push   ebx
c001665a:	51                   	push   ecx
c001665b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001665f:	8b 1d 4c e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e74c
c0016665:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c001666f:	85 db                	test   ebx,ebx
c0016671:	74 50                	je     c00166c3 <LogicalDisk::mount()+0x6b>
c0016673:	e8 6d 77 00 00       	call   c001dde5 <getIRQNestingLevel()>
c0016678:	52                   	push   edx
c0016679:	52                   	push   edx
c001667a:	50                   	push   eax
c001667b:	68 38 b3 02 c0       	push   0xc002b338
c0016680:	e8 af c8 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0016685:	83 c4 0c             	add    esp,0xc
c0016688:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001668f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016691:	83 e8 41             	sub    eax,0x41
c0016694:	50                   	push   eax
c0016695:	56                   	push   esi
c0016696:	53                   	push   ebx
c0016697:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001669a:	83 c4 10             	add    esp,0x10
c001669d:	84 c0                	test   al,al
c001669f:	74 08                	je     c00166a9 <LogicalDisk::mount()+0x51>
c00166a1:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00166a7:	eb 1c                	jmp    c00166c5 <LogicalDisk::mount()+0x6d>
c00166a9:	e8 37 77 00 00       	call   c001dde5 <getIRQNestingLevel()>
c00166ae:	51                   	push   ecx
c00166af:	51                   	push   ecx
c00166b0:	50                   	push   eax
c00166b1:	68 53 b3 02 c0       	push   0xc002b353
c00166b6:	e8 79 c8 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c00166bb:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00166be:	83 c4 10             	add    esp,0x10
c00166c1:	eb ac                	jmp    c001666f <LogicalDisk::mount()+0x17>
c00166c3:	31 c0                	xor    eax,eax
c00166c5:	5a                   	pop    edx
c00166c6:	5b                   	pop    ebx
c00166c7:	5e                   	pop    esi
c00166c8:	c3                   	ret    
c00166c9:	90                   	nop

c00166ca <LogicalDisk::unmount()>:
c00166ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00166ce:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00166d8:	c3                   	ret    
c00166d9:	90                   	nop

c00166da <LogicalDisk::eject()>:
c00166da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00166de:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00166e4:	8b 10                	mov    edx,DWORD PTR [eax]
c00166e6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00166ea:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c00166ed:	90                   	nop

c00166ee <LogicalDisk::unassignDriveLetter()>:
c00166ee:	57                   	push   edi
c00166ef:	56                   	push   esi
c00166f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00166f4:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c00166fb:	84 c9                	test   cl,cl
c00166fd:	75 0f                	jne    c001670e <LogicalDisk::unassignDriveLetter()+0x20>
c00166ff:	c7 44 24 0c 6e b3 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b36e
c0016707:	5e                   	pop    esi
c0016708:	5f                   	pop    edi
c0016709:	e9 c7 3e 00 00       	jmp    c001a5d5 <Krnl::panic(char const*)>
c001670e:	83 e9 41             	sub    ecx,0x41
c0016711:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0016718:	b8 01 00 00 00       	mov    eax,0x1
c001671d:	c7 04 8d e0 eb 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1420],0x0
c0016728:	d3 e0                	shl    eax,cl
c001672a:	89 c7                	mov    edi,eax
c001672c:	f7 d0                	not    eax
c001672e:	c1 ff 1f             	sar    edi,0x1f
c0016731:	21 05 c0 eb 02 c0    	and    DWORD PTR ds:0xc002ebc0,eax
c0016737:	89 fe                	mov    esi,edi
c0016739:	f7 d6                	not    esi
c001673b:	21 35 c4 eb 02 c0    	and    DWORD PTR ds:0xc002ebc4,esi
c0016741:	5e                   	pop    esi
c0016742:	5f                   	pop    edi
c0016743:	c3                   	ret    

c0016744 <LogicalDisk::read(unsigned long long, int, void*)>:
c0016744:	57                   	push   edi
c0016745:	56                   	push   esi
c0016746:	53                   	push   ebx
c0016747:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001674b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001674f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016753:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016757:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001675d:	77 41                	ja     c00167a0 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001675f:	99                   	cdq    
c0016760:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016766:	01 c8                	add    eax,ecx
c0016768:	11 da                	adc    edx,ebx
c001676a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016770:	19 d7                	sbb    edi,edx
c0016772:	72 33                	jb     c00167a7 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0016774:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001677a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016780:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016784:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016788:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001678e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016794:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016798:	5b                   	pop    ebx
c0016799:	5e                   	pop    esi
c001679a:	5f                   	pop    edi
c001679b:	e9 b0 0a 00 00       	jmp    c0017250 <VCache::read(unsigned long long, int, void*)>
c00167a0:	b8 05 00 00 00       	mov    eax,0x5
c00167a5:	eb 05                	jmp    c00167ac <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00167a7:	b8 07 00 00 00       	mov    eax,0x7
c00167ac:	5b                   	pop    ebx
c00167ad:	5e                   	pop    esi
c00167ae:	5f                   	pop    edi
c00167af:	c3                   	ret    

c00167b0 <LogicalDisk::write(unsigned long long, int, void*)>:
c00167b0:	57                   	push   edi
c00167b1:	56                   	push   esi
c00167b2:	53                   	push   ebx
c00167b3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00167b7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00167bb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00167bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00167c3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00167c9:	77 41                	ja     c001680c <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00167cb:	99                   	cdq    
c00167cc:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00167d2:	01 c8                	add    eax,ecx
c00167d4:	11 da                	adc    edx,ebx
c00167d6:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00167dc:	19 d7                	sbb    edi,edx
c00167de:	72 33                	jb     c0016813 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00167e0:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00167e6:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00167ec:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00167f0:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00167f4:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00167fa:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016800:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016804:	5b                   	pop    ebx
c0016805:	5e                   	pop    esi
c0016806:	5f                   	pop    edi
c0016807:	e9 4e 09 00 00       	jmp    c001715a <VCache::write(unsigned long long, int, void*)>
c001680c:	b8 05 00 00 00       	mov    eax,0x5
c0016811:	eb 05                	jmp    c0016818 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0016813:	b8 07 00 00 00       	mov    eax,0x7
c0016818:	5b                   	pop    ebx
c0016819:	5e                   	pop    esi
c001681a:	5f                   	pop    edi
c001681b:	c3                   	ret    

c001681c <Mouse::Mouse(char const*)>:
c001681c:	83 ec 0c             	sub    esp,0xc
c001681f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016823:	83 ec 08             	sub    esp,0x8
c0016826:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001682a:	50                   	push   eax
c001682b:	e8 1a dd ff ff       	call   c001454a <Device::Device(char const*)>
c0016830:	83 c4 10             	add    esp,0x10
c0016833:	ba c4 b3 02 c0       	mov    edx,0xc002b3c4
c0016838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001683c:	89 10                	mov    DWORD PTR [eax],edx
c001683e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016842:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001684c:	90                   	nop
c001684d:	83 c4 0c             	add    esp,0xc
c0016850:	c3                   	ret    
c0016851:	90                   	nop

c0016852 <Mouse::~Mouse()>:
c0016852:	83 ec 0c             	sub    esp,0xc
c0016855:	ba c4 b3 02 c0       	mov    edx,0xc002b3c4
c001685a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001685e:	89 10                	mov    DWORD PTR [eax],edx
c0016860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016864:	83 ec 0c             	sub    esp,0xc
c0016867:	50                   	push   eax
c0016868:	e8 bf d9 ff ff       	call   c001422c <Device::~Device()>
c001686d:	83 c4 10             	add    esp,0x10
c0016870:	90                   	nop
c0016871:	83 c4 0c             	add    esp,0xc
c0016874:	c3                   	ret    
c0016875:	90                   	nop

c0016876 <Mouse::~Mouse()>:
c0016876:	83 ec 0c             	sub    esp,0xc
c0016879:	83 ec 0c             	sub    esp,0xc
c001687c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016880:	e8 cd ff ff ff       	call   c0016852 <Mouse::~Mouse()>
c0016885:	83 c4 10             	add    esp,0x10
c0016888:	83 ec 08             	sub    esp,0x8
c001688b:	68 58 01 00 00       	push   0x158
c0016890:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016894:	e8 bb c5 ff ff       	call   c0012e54 <operator delete(void*, unsigned long)>
c0016899:	83 c4 10             	add    esp,0x10
c001689c:	83 c4 0c             	add    esp,0xc
c001689f:	c3                   	ret    

c00168a0 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00168a0:	55                   	push   ebp
c00168a1:	57                   	push   edi
c00168a2:	56                   	push   esi
c00168a3:	53                   	push   ebx
c00168a4:	81 ec 28 01 00 00    	sub    esp,0x128
c00168aa:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00168b1:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00168b8:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00168bf:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00168c6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00168ca:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00168ce:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00168d5:	e8 6c dd ff ff       	call   c0014646 <Device::getName()>
c00168da:	5a                   	pop    edx
c00168db:	59                   	pop    ecx
c00168dc:	50                   	push   eax
c00168dd:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00168e1:	55                   	push   ebp
c00168e2:	e8 4d 9f fe ff       	call   c0000834 <strcpy>
c00168e7:	5b                   	pop    ebx
c00168e8:	58                   	pop    eax
c00168e9:	68 e8 b3 02 c0       	push   0xc002b3e8
c00168ee:	55                   	push   ebp
c00168ef:	e8 80 a0 fe ff       	call   c0000974 <strcat>
c00168f4:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00168fb:	e8 40 8f ff ff       	call   c000f840 <malloc>
c0016900:	83 c4 0c             	add    esp,0xc
c0016903:	89 c3                	mov    ebx,eax
c0016905:	57                   	push   edi
c0016906:	56                   	push   esi
c0016907:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001690b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001690f:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016916:	55                   	push   ebp
c0016917:	50                   	push   eax
c0016918:	e8 cf fb ff ff       	call   c00164ec <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001691d:	83 c4 14             	add    esp,0x14
c0016920:	53                   	push   ebx
c0016921:	e8 7c fc ff ff       	call   c00165a2 <LogicalDisk::assignDriveLetter()>
c0016926:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016929:	89 c6                	mov    esi,eax
c001692b:	e8 28 fd ff ff       	call   c0016658 <LogicalDisk::mount()>
c0016930:	58                   	pop    eax
c0016931:	5a                   	pop    edx
c0016932:	53                   	push   ebx
c0016933:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001693a:	e8 1b da ff ff       	call   c001435a <Device::addChild(Device*)>
c001693f:	59                   	pop    ecx
c0016940:	89 f0                	mov    eax,esi
c0016942:	5b                   	pop    ebx
c0016943:	0f be f0             	movsx  esi,al
c0016946:	56                   	push   esi
c0016947:	68 f3 b3 02 c0       	push   0xc002b3f3
c001694c:	e8 e3 c5 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0016951:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016957:	5b                   	pop    ebx
c0016958:	5e                   	pop    esi
c0016959:	5f                   	pop    edi
c001695a:	5d                   	pop    ebp
c001695b:	c3                   	ret    

c001695c <createPartitionsForDisk(PhysicalDisk*)>:
c001695c:	55                   	push   ebp
c001695d:	57                   	push   edi
c001695e:	56                   	push   esi
c001695f:	53                   	push   ebx
c0016960:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016966:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001696d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016973:	3d 00 02 00 00       	cmp    eax,0x200
c0016978:	74 27                	je     c00169a1 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001697a:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016980:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016986:	83 ec 10             	sub    esp,0x10
c0016989:	0f a4 f7 0a          	shld   edi,esi,0xa
c001698d:	99                   	cdq    
c001698e:	c1 e6 0a             	shl    esi,0xa
c0016991:	52                   	push   edx
c0016992:	89 fd                	mov    ebp,edi
c0016994:	50                   	push   eax
c0016995:	55                   	push   ebp
c0016996:	56                   	push   esi
c0016997:	e8 40 00 01 00       	call   c00269dc <__udivdi3>
c001699c:	e9 b1 00 00 00       	jmp    c0016a52 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00169a1:	83 ec 0c             	sub    esp,0xc
c00169a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00169a6:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00169aa:	56                   	push   esi
c00169ab:	6a 01                	push   0x1
c00169ad:	6a 00                	push   0x0
c00169af:	6a 00                	push   0x0
c00169b1:	53                   	push   ebx
c00169b2:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00169b5:	83 c4 20             	add    esp,0x20
c00169b8:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00169c0:	75 0a                	jne    c00169cc <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00169c2:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00169ca:	74 2c                	je     c00169f8 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00169cc:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00169d2:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00169d8:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00169de:	83 ec 10             	sub    esp,0x10
c00169e1:	0f a4 c2 0a          	shld   edx,eax,0xa
c00169e5:	89 f7                	mov    edi,esi
c00169e7:	c1 e0 0a             	shl    eax,0xa
c00169ea:	c1 ff 1f             	sar    edi,0x1f
c00169ed:	57                   	push   edi
c00169ee:	56                   	push   esi
c00169ef:	52                   	push   edx
c00169f0:	50                   	push   eax
c00169f1:	e8 e6 ff 00 00       	call   c00269dc <__udivdi3>
c00169f6:	eb 5a                	jmp    c0016a52 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00169f8:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00169ff:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016a06:	83 e1 7f             	and    ecx,0x7f
c0016a09:	83 e0 7f             	and    eax,0x7f
c0016a0c:	01 c1                	add    ecx,eax
c0016a0e:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016a15:	83 e0 7f             	and    eax,0x7f
c0016a18:	01 c1                	add    ecx,eax
c0016a1a:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016a21:	83 e0 7f             	and    eax,0x7f
c0016a24:	00 c1                	add    cl,al
c0016a26:	74 41                	je     c0016a69 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016a28:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016a2e:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016a34:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016a3a:	83 ec 10             	sub    esp,0x10
c0016a3d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016a41:	89 f7                	mov    edi,esi
c0016a43:	c1 e0 0a             	shl    eax,0xa
c0016a46:	c1 ff 1f             	sar    edi,0x1f
c0016a49:	57                   	push   edi
c0016a4a:	56                   	push   esi
c0016a4b:	52                   	push   edx
c0016a4c:	50                   	push   eax
c0016a4d:	e8 8a ff 00 00       	call   c00269dc <__udivdi3>
c0016a52:	83 c4 14             	add    esp,0x14
c0016a55:	52                   	push   edx
c0016a56:	50                   	push   eax
c0016a57:	6a 00                	push   0x0
c0016a59:	6a 00                	push   0x0
c0016a5b:	53                   	push   ebx
c0016a5c:	e8 3f fe ff ff       	call   c00168a0 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016a61:	83 c4 20             	add    esp,0x20
c0016a64:	e9 79 01 00 00       	jmp    c0016be2 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016a69:	89 f0                	mov    eax,esi
c0016a6b:	31 f6                	xor    esi,esi
c0016a6d:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016a74:	75 02                	jne    c0016a78 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016a76:	89 f1                	mov    ecx,esi
c0016a78:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016a7f:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016a86:	c1 e2 08             	shl    edx,0x8
c0016a89:	c1 e7 10             	shl    edi,0x10
c0016a8c:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016a94:	09 fa                	or     edx,edi
c0016a96:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016a9e:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016aa5:	83 c0 10             	add    eax,0x10
c0016aa8:	09 fa                	or     edx,edi
c0016aaa:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016ab1:	c1 e7 18             	shl    edi,0x18
c0016ab4:	09 fa                	or     edx,edi
c0016ab6:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016abd:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016ac1:	c1 e7 10             	shl    edi,0x10
c0016ac4:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016acb:	c1 e2 08             	shl    edx,0x8
c0016ace:	09 fa                	or     edx,edi
c0016ad0:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016ad7:	09 fa                	or     edx,edi
c0016ad9:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016ae0:	c1 e7 18             	shl    edi,0x18
c0016ae3:	09 fa                	or     edx,edi
c0016ae5:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016ae9:	46                   	inc    esi
c0016aea:	83 fe 04             	cmp    esi,0x4
c0016aed:	0f 85 7a ff ff ff    	jne    c0016a6d <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016af3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016af7:	83 f0 01             	xor    eax,0x1
c0016afa:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016afe:	75 57                	jne    c0016b57 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016b00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b04:	83 f0 01             	xor    eax,0x1
c0016b07:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016b0b:	75 4a                	jne    c0016b57 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016b0d:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016b11:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016b19:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016b21:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016b27:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016b2d:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016b33:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016b37:	89 f7                	mov    edi,esi
c0016b39:	c1 e0 0a             	shl    eax,0xa
c0016b3c:	c1 ff 1f             	sar    edi,0x1f
c0016b3f:	57                   	push   edi
c0016b40:	56                   	push   esi
c0016b41:	52                   	push   edx
c0016b42:	50                   	push   eax
c0016b43:	e8 94 fe 00 00       	call   c00269dc <__udivdi3>
c0016b48:	83 c4 10             	add    esp,0x10
c0016b4b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016b4f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016b53:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016b57:	84 c9                	test   cl,cl
c0016b59:	74 53                	je     c0016bae <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016b5b:	0f b6 c9             	movzx  ecx,cl
c0016b5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b62:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016b66:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016b6a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016b6e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016b72:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016b76:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016b7a:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016b7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016b82:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016b86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016b8a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016b8e:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016b92:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016b96:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016b9a:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016b9e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016ba2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016ba6:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016baa:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016bae:	31 ed                	xor    ebp,ebp
c0016bb0:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016bb4:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016bb8:	89 f8                	mov    eax,edi
c0016bba:	09 f0                	or     eax,esi
c0016bbc:	74 1e                	je     c0016bdc <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016bbe:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016bc2:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016bc6:	89 d1                	mov    ecx,edx
c0016bc8:	09 c1                	or     ecx,eax
c0016bca:	74 10                	je     c0016bdc <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016bcc:	83 ec 0c             	sub    esp,0xc
c0016bcf:	57                   	push   edi
c0016bd0:	56                   	push   esi
c0016bd1:	52                   	push   edx
c0016bd2:	50                   	push   eax
c0016bd3:	53                   	push   ebx
c0016bd4:	e8 c7 fc ff ff       	call   c00168a0 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016bd9:	83 c4 20             	add    esp,0x20
c0016bdc:	45                   	inc    ebp
c0016bdd:	83 fd 04             	cmp    ebp,0x4
c0016be0:	75 ce                	jne    c0016bb0 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016be2:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016be8:	5b                   	pop    ebx
c0016be9:	5e                   	pop    esi
c0016bea:	5f                   	pop    edi
c0016beb:	5d                   	pop    ebp
c0016bec:	c3                   	ret    
c0016bed:	90                   	nop

c0016bee <Serial::Serial(char const*)>:
c0016bee:	83 ec 0c             	sub    esp,0xc
c0016bf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bf5:	83 ec 08             	sub    esp,0x8
c0016bf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016bfc:	50                   	push   eax
c0016bfd:	e8 48 d9 ff ff       	call   c001454a <Device::Device(char const*)>
c0016c02:	83 c4 10             	add    esp,0x10
c0016c05:	ba 20 b4 02 c0       	mov    edx,0xc002b420
c0016c0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c0e:	89 10                	mov    DWORD PTR [eax],edx
c0016c10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c14:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016c1e:	90                   	nop
c0016c1f:	83 c4 0c             	add    esp,0xc
c0016c22:	c3                   	ret    
c0016c23:	90                   	nop

c0016c24 <Serial::~Serial()>:
c0016c24:	83 ec 0c             	sub    esp,0xc
c0016c27:	ba 20 b4 02 c0       	mov    edx,0xc002b420
c0016c2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c30:	89 10                	mov    DWORD PTR [eax],edx
c0016c32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c36:	83 ec 0c             	sub    esp,0xc
c0016c39:	50                   	push   eax
c0016c3a:	e8 ed d5 ff ff       	call   c001422c <Device::~Device()>
c0016c3f:	83 c4 10             	add    esp,0x10
c0016c42:	90                   	nop
c0016c43:	83 c4 0c             	add    esp,0xc
c0016c46:	c3                   	ret    
c0016c47:	90                   	nop

c0016c48 <Serial::~Serial()>:
c0016c48:	83 ec 0c             	sub    esp,0xc
c0016c4b:	83 ec 0c             	sub    esp,0xc
c0016c4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c52:	e8 cd ff ff ff       	call   c0016c24 <Serial::~Serial()>
c0016c57:	83 c4 10             	add    esp,0x10
c0016c5a:	83 ec 08             	sub    esp,0x8
c0016c5d:	68 58 01 00 00       	push   0x158
c0016c62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c66:	e8 e9 c1 ff ff       	call   c0012e54 <operator delete(void*, unsigned long)>
c0016c6b:	83 c4 10             	add    esp,0x10
c0016c6e:	83 c4 0c             	add    esp,0xc
c0016c71:	c3                   	ret    

c0016c72 <Timer::Timer(char const*)>:
c0016c72:	83 ec 0c             	sub    esp,0xc
c0016c75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c79:	83 ec 08             	sub    esp,0x8
c0016c7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c80:	50                   	push   eax
c0016c81:	e8 c4 d8 ff ff       	call   c001454a <Device::Device(char const*)>
c0016c86:	83 c4 10             	add    esp,0x10
c0016c89:	ba 64 b4 02 c0       	mov    edx,0xc002b464
c0016c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c92:	89 10                	mov    DWORD PTR [eax],edx
c0016c94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c98:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016ca2:	90                   	nop
c0016ca3:	83 c4 0c             	add    esp,0xc
c0016ca6:	c3                   	ret    
c0016ca7:	90                   	nop

c0016ca8 <Timer::~Timer()>:
c0016ca8:	83 ec 0c             	sub    esp,0xc
c0016cab:	ba 64 b4 02 c0       	mov    edx,0xc002b464
c0016cb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cb4:	89 10                	mov    DWORD PTR [eax],edx
c0016cb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cba:	83 ec 0c             	sub    esp,0xc
c0016cbd:	50                   	push   eax
c0016cbe:	e8 69 d5 ff ff       	call   c001422c <Device::~Device()>
c0016cc3:	83 c4 10             	add    esp,0x10
c0016cc6:	90                   	nop
c0016cc7:	83 c4 0c             	add    esp,0xc
c0016cca:	c3                   	ret    
c0016ccb:	90                   	nop

c0016ccc <Timer::~Timer()>:
c0016ccc:	83 ec 0c             	sub    esp,0xc
c0016ccf:	83 ec 0c             	sub    esp,0xc
c0016cd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cd6:	e8 cd ff ff ff       	call   c0016ca8 <Timer::~Timer()>
c0016cdb:	83 c4 10             	add    esp,0x10
c0016cde:	83 ec 08             	sub    esp,0x8
c0016ce1:	68 5c 01 00 00       	push   0x15c
c0016ce6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cea:	e8 65 c1 ff ff       	call   c0012e54 <operator delete(void*, unsigned long)>
c0016cef:	83 c4 10             	add    esp,0x10
c0016cf2:	83 c4 0c             	add    esp,0xc
c0016cf5:	c3                   	ret    

c0016cf6 <Timer::read()>:
c0016cf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016cfa:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016d00:	c3                   	ret    

c0016d01 <timerHandler(unsigned long long)>:
c0016d01:	55                   	push   ebp
c0016d02:	57                   	push   edi
c0016d03:	56                   	push   esi
c0016d04:	53                   	push   ebx
c0016d05:	83 ec 0c             	sub    esp,0xc
c0016d08:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016d0c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016d10:	01 35 50 ec 02 c0    	add    DWORD PTR ds:0xc002ec50,esi
c0016d16:	11 3d 54 ec 02 c0    	adc    DWORD PTR ds:0xc002ec54,edi
c0016d1c:	80 3d cd e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e5cd,0x0
c0016d23:	0f 84 07 01 00 00    	je     c0016e30 <timerHandler(unsigned long long)+0x12f>
c0016d29:	e8 f3 70 00 00       	call   c001de21 <lockStuff()>
c0016d2e:	83 ec 0c             	sub    esp,0xc
c0016d31:	68 1c 1b 03 c0       	push   0xc0031b1c
c0016d36:	e8 13 1d 01 00       	call   c0028a4e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d3b:	c7 04 24 1c 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b1c
c0016d42:	89 c3                	mov    ebx,eax
c0016d44:	e8 0d 1d 01 00       	call   c0028a56 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016d49:	83 c4 10             	add    esp,0x10
c0016d4c:	84 c0                	test   al,al
c0016d4e:	74 60                	je     c0016db0 <timerHandler(unsigned long long)+0xaf>
c0016d50:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016d56:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016d59:	85 c0                	test   eax,eax
c0016d5b:	0f 85 91 00 00 00    	jne    c0016df2 <timerHandler(unsigned long long)+0xf1>
c0016d61:	e9 be 00 00 00       	jmp    c0016e24 <timerHandler(unsigned long long)+0x123>
c0016d66:	83 ec 0c             	sub    esp,0xc
c0016d69:	55                   	push   ebp
c0016d6a:	e8 a3 76 00 00       	call   c001e412 <unblockTask(ThreadControlBlock*)>
c0016d6f:	83 c4 10             	add    esp,0x10
c0016d72:	39 eb                	cmp    ebx,ebp
c0016d74:	75 12                	jne    c0016d88 <timerHandler(unsigned long long)+0x87>
c0016d76:	83 ec 0c             	sub    esp,0xc
c0016d79:	68 1c 1b 03 c0       	push   0xc0031b1c
c0016d7e:	e8 cb 1c 01 00       	call   c0028a4e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d83:	89 c3                	mov    ebx,eax
c0016d85:	83 c4 10             	add    esp,0x10
c0016d88:	83 ec 0c             	sub    esp,0xc
c0016d8b:	68 1c 1b 03 c0       	push   0xc0031b1c
c0016d90:	e8 c1 1c 01 00       	call   c0028a56 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016d95:	83 c4 10             	add    esp,0x10
c0016d98:	84 c0                	test   al,al
c0016d9a:	75 b4                	jne    c0016d50 <timerHandler(unsigned long long)+0x4f>
c0016d9c:	83 ec 0c             	sub    esp,0xc
c0016d9f:	68 1c 1b 03 c0       	push   0xc0031b1c
c0016da4:	e8 a5 1c 01 00       	call   c0028a4e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016da9:	83 c4 10             	add    esp,0x10
c0016dac:	39 d8                	cmp    eax,ebx
c0016dae:	74 a0                	je     c0016d50 <timerHandler(unsigned long long)+0x4f>
c0016db0:	83 ec 0c             	sub    esp,0xc
c0016db3:	68 1c 1b 03 c0       	push   0xc0031b1c
c0016db8:	e8 91 1c 01 00       	call   c0028a4e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016dbd:	c7 04 24 1c 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b1c
c0016dc4:	89 c5                	mov    ebp,eax
c0016dc6:	e8 a7 1c 01 00       	call   c0028a72 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016dcb:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016dce:	83 c4 10             	add    esp,0x10
c0016dd1:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016dd4:	39 15 50 ec 02 c0    	cmp    DWORD PTR ds:0xc002ec50,edx
c0016dda:	a1 54 ec 02 c0       	mov    eax,ds:0xc002ec54
c0016ddf:	19 c8                	sbb    eax,ecx
c0016de1:	73 83                	jae    c0016d66 <timerHandler(unsigned long long)+0x65>
c0016de3:	50                   	push   eax
c0016de4:	50                   	push   eax
c0016de5:	55                   	push   ebp
c0016de6:	68 1c 1b 03 c0       	push   0xc0031b1c
c0016deb:	e8 30 1d 01 00       	call   c0028b20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016df0:	eb 93                	jmp    c0016d85 <timerHandler(unsigned long long)+0x84>
c0016df2:	80 3d cc e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e5cc,0x0
c0016df9:	74 29                	je     c0016e24 <timerHandler(unsigned long long)+0x123>
c0016dfb:	39 c6                	cmp    esi,eax
c0016dfd:	bb 00 00 00 00       	mov    ebx,0x0
c0016e02:	19 df                	sbb    edi,ebx
c0016e04:	72 19                	jb     c0016e1f <timerHandler(unsigned long long)+0x11e>
c0016e06:	e8 ef 6f 00 00       	call   c001ddfa <lockScheduler()>
c0016e0b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e10:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016e13:	e8 1e 73 00 00       	call   c001e136 <schedule()>
c0016e18:	e8 df 6f 00 00       	call   c001ddfc <unlockScheduler()>
c0016e1d:	eb 05                	jmp    c0016e24 <timerHandler(unsigned long long)+0x123>
c0016e1f:	29 f0                	sub    eax,esi
c0016e21:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016e24:	83 c4 0c             	add    esp,0xc
c0016e27:	5b                   	pop    ebx
c0016e28:	5e                   	pop    esi
c0016e29:	5f                   	pop    edi
c0016e2a:	5d                   	pop    ebp
c0016e2b:	e9 8b 73 00 00       	jmp    c001e1bb <unlockStuff()>
c0016e30:	83 c4 0c             	add    esp,0xc
c0016e33:	5b                   	pop    ebx
c0016e34:	5e                   	pop    esi
c0016e35:	5f                   	pop    edi
c0016e36:	5d                   	pop    ebp
c0016e37:	c3                   	ret    

c0016e38 <setupTimer(int)>:
c0016e38:	57                   	push   edi
c0016e39:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0016e3e:	56                   	push   esi
c0016e3f:	53                   	push   ebx
c0016e40:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016e44:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016e4a:	83 ec 0c             	sub    esp,0xc
c0016e4d:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016e53:	e8 ee d7 ff ff       	call   c0014646 <Device::getName()>
c0016e58:	83 c4 10             	add    esp,0x10
c0016e5b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016e5e:	0f 85 8d 00 00 00    	jne    c0016ef1 <setupTimer(int)+0xb9>
c0016e64:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0016e69:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016e70:	74 7f                	je     c0016ef1 <setupTimer(int)+0xb9>
c0016e72:	83 ec 0c             	sub    esp,0xc
c0016e75:	68 5c 01 00 00       	push   0x15c
c0016e7a:	e8 c1 89 ff ff       	call   c000f840 <malloc>
c0016e7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0016e82:	89 c3                	mov    ebx,eax
c0016e84:	e8 2b f7 00 00       	call   c00265b4 <PIT::PIT()>
c0016e89:	59                   	pop    ecx
c0016e8a:	5f                   	pop    edi
c0016e8b:	53                   	push   ebx
c0016e8c:	ff 35 c8 e5 02 c0    	push   DWORD PTR ds:0xc002e5c8
c0016e92:	e8 c3 d4 ff ff       	call   c001435a <Device::addChild(Device*)>
c0016e97:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016e99:	6a 00                	push   0x0
c0016e9b:	6a 00                	push   0x0
c0016e9d:	56                   	push   esi
c0016e9e:	53                   	push   ebx
c0016e9f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016ea2:	83 c4 14             	add    esp,0x14
c0016ea5:	68 60 01 00 00       	push   0x160
c0016eaa:	e8 91 89 ff ff       	call   c000f840 <malloc>
c0016eaf:	89 04 24             	mov    DWORD PTR [esp],eax
c0016eb2:	89 c7                	mov    edi,eax
c0016eb4:	e8 ab f5 00 00       	call   c0026464 <APICTimer::APICTimer()>
c0016eb9:	6a 00                	push   0x0
c0016ebb:	6a 00                	push   0x0
c0016ebd:	56                   	push   esi
c0016ebe:	57                   	push   edi
c0016ebf:	e8 a2 f4 00 00       	call   c0026366 <APICTimer::open(int, int, void*)>
c0016ec4:	83 c4 20             	add    esp,0x20
c0016ec7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016ec9:	6a 00                	push   0x0
c0016ecb:	6a 00                	push   0x0
c0016ecd:	6a 00                	push   0x0
c0016ecf:	53                   	push   ebx
c0016ed0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016ed3:	58                   	pop    eax
c0016ed4:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0016ed9:	5a                   	pop    edx
c0016eda:	57                   	push   edi
c0016edb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016ee1:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016ee7:	e8 6e d4 ff ff       	call   c001435a <Device::addChild(Device*)>
c0016eec:	83 c4 10             	add    esp,0x10
c0016eef:	eb 33                	jmp    c0016f24 <setupTimer(int)+0xec>
c0016ef1:	83 ec 0c             	sub    esp,0xc
c0016ef4:	68 5c 01 00 00       	push   0x15c
c0016ef9:	e8 42 89 ff ff       	call   c000f840 <malloc>
c0016efe:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f01:	89 c3                	mov    ebx,eax
c0016f03:	e8 ac f6 00 00       	call   c00265b4 <PIT::PIT()>
c0016f08:	58                   	pop    eax
c0016f09:	5a                   	pop    edx
c0016f0a:	53                   	push   ebx
c0016f0b:	ff 35 c8 e5 02 c0    	push   DWORD PTR ds:0xc002e5c8
c0016f11:	e8 44 d4 ff ff       	call   c001435a <Device::addChild(Device*)>
c0016f16:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f18:	6a 00                	push   0x0
c0016f1a:	6a 00                	push   0x0
c0016f1c:	56                   	push   esi
c0016f1d:	53                   	push   ebx
c0016f1e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016f21:	83 c4 20             	add    esp,0x20
c0016f24:	89 d8                	mov    eax,ebx
c0016f26:	5b                   	pop    ebx
c0016f27:	5e                   	pop    esi
c0016f28:	5f                   	pop    edi
c0016f29:	c3                   	ret    

c0016f2a <VCache::VCache(PhysicalDisk*)>:
c0016f2a:	53                   	push   ebx
c0016f2b:	83 ec 18             	sub    esp,0x18
c0016f2e:	ba 94 b4 02 c0       	mov    edx,0xc002b494
c0016f33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f37:	89 10                	mov    DWORD PTR [eax],edx
c0016f39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f3d:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016f44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f48:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016f4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f53:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016f5a:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f65:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016f6c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016f73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f77:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016f7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f82:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016f86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f8a:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016f91:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016f98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f9c:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016fa0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fa4:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016fa8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fac:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016fb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fb4:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016fbb:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016fc3:	83 ec 0c             	sub    esp,0xc
c0016fc6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016fca:	e8 71 88 ff ff       	call   c000f840 <malloc>
c0016fcf:	83 c4 10             	add    esp,0x10
c0016fd2:	89 c3                	mov    ebx,eax
c0016fd4:	83 ec 0c             	sub    esp,0xc
c0016fd7:	53                   	push   ebx
c0016fd8:	e8 3d 6f 00 00       	call   c001df1a <Mutex::Mutex()>
c0016fdd:	83 c4 10             	add    esp,0x10
c0016fe0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fe4:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016fe7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016feb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016fef:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016ff2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ff6:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016ffd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017001:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017007:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001700b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001700e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017012:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0017018:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001701e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0017022:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0017025:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0017028:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001702c:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0017030:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017034:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001703a:	05 00 01 00 00       	add    eax,0x100
c001703f:	c1 e0 04             	shl    eax,0x4
c0017042:	83 ec 0c             	sub    esp,0xc
c0017045:	50                   	push   eax
c0017046:	e8 f5 87 ff ff       	call   c000f840 <malloc>
c001704b:	83 c4 10             	add    esp,0x10
c001704e:	89 c2                	mov    edx,eax
c0017050:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017054:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017057:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001705b:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0017062:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017066:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001706a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001706e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017074:	c1 e0 07             	shl    eax,0x7
c0017077:	83 ec 0c             	sub    esp,0xc
c001707a:	50                   	push   eax
c001707b:	e8 c0 87 ff ff       	call   c000f840 <malloc>
c0017080:	83 c4 10             	add    esp,0x10
c0017083:	89 c2                	mov    edx,eax
c0017085:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017089:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001708c:	90                   	nop
c001708d:	83 c4 18             	add    esp,0x18
c0017090:	5b                   	pop    ebx
c0017091:	c3                   	ret    

c0017092 <VCache::invalidateReadBuffer()>:
c0017092:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017096:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c001709c:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00170a0:	c3                   	ret    
c00170a1:	90                   	nop

c00170a2 <VCache::writeWriteBuffer()>:
c00170a2:	53                   	push   ebx
c00170a3:	83 ec 14             	sub    esp,0x14
c00170a6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00170aa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00170ad:	8b 10                	mov    edx,DWORD PTR [eax]
c00170af:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00170b2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00170b5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00170b8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00170bb:	50                   	push   eax
c00170bc:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00170bf:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00170c6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00170cd:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00170d1:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00170d8:	83 c4 28             	add    esp,0x28
c00170db:	5b                   	pop    ebx
c00170dc:	c3                   	ret    
c00170dd:	90                   	nop

c00170de <VCache::~VCache()>:
c00170de:	83 ec 0c             	sub    esp,0xc
c00170e1:	ba 94 b4 02 c0       	mov    edx,0xc002b494
c00170e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170ea:	89 10                	mov    DWORD PTR [eax],edx
c00170ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170f0:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c00170f3:	84 c0                	test   al,al
c00170f5:	74 0f                	je     c0017106 <VCache::~VCache()+0x28>
c00170f7:	83 ec 0c             	sub    esp,0xc
c00170fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00170fe:	e8 9f ff ff ff       	call   c00170a2 <VCache::writeWriteBuffer()>
c0017103:	83 c4 10             	add    esp,0x10
c0017106:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001710a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001710d:	83 ec 0c             	sub    esp,0xc
c0017110:	50                   	push   eax
c0017111:	e8 3a 87 ff ff       	call   c000f850 <free>
c0017116:	83 c4 10             	add    esp,0x10
c0017119:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001711d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017120:	83 ec 0c             	sub    esp,0xc
c0017123:	50                   	push   eax
c0017124:	e8 27 87 ff ff       	call   c000f850 <free>
c0017129:	83 c4 10             	add    esp,0x10
c001712c:	90                   	nop
c001712d:	83 c4 0c             	add    esp,0xc
c0017130:	c3                   	ret    
c0017131:	90                   	nop

c0017132 <VCache::~VCache()>:
c0017132:	83 ec 0c             	sub    esp,0xc
c0017135:	83 ec 0c             	sub    esp,0xc
c0017138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001713c:	e8 9d ff ff ff       	call   c00170de <VCache::~VCache()>
c0017141:	83 c4 10             	add    esp,0x10
c0017144:	83 ec 08             	sub    esp,0x8
c0017147:	6a 44                	push   0x44
c0017149:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001714d:	e8 02 bd ff ff       	call   c0012e54 <operator delete(void*, unsigned long)>
c0017152:	83 c4 10             	add    esp,0x10
c0017155:	83 c4 0c             	add    esp,0xc
c0017158:	c3                   	ret    
c0017159:	90                   	nop

c001715a <VCache::write(unsigned long long, int, void*)>:
c001715a:	55                   	push   ebp
c001715b:	57                   	push   edi
c001715c:	56                   	push   esi
c001715d:	53                   	push   ebx
c001715e:	83 ec 28             	sub    esp,0x28
c0017161:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017165:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017169:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001716d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0017171:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017174:	e8 03 72 00 00       	call   c001e37c <Semaphore::acquire()>
c0017179:	83 c4 10             	add    esp,0x10
c001717c:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017180:	74 0c                	je     c001718e <VCache::write(unsigned long long, int, void*)+0x34>
c0017182:	83 ec 0c             	sub    esp,0xc
c0017185:	53                   	push   ebx
c0017186:	e8 07 ff ff ff       	call   c0017092 <VCache::invalidateReadBuffer()>
c001718b:	83 c4 10             	add    esp,0x10
c001718e:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017192:	74 66                	je     c00171fa <VCache::write(unsigned long long, int, void*)+0xa0>
c0017194:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017197:	99                   	cdq    
c0017198:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001719c:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001719f:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00171a2:	89 c1                	mov    ecx,eax
c00171a4:	89 d0                	mov    eax,edx
c00171a6:	31 f1                	xor    ecx,esi
c00171a8:	31 f8                	xor    eax,edi
c00171aa:	89 ca                	mov    edx,ecx
c00171ac:	09 c2                	or     edx,eax
c00171ae:	75 3e                	jne    c00171ee <VCache::write(unsigned long long, int, void*)+0x94>
c00171b0:	83 fd 01             	cmp    ebp,0x1
c00171b3:	75 39                	jne    c00171ee <VCache::write(unsigned long long, int, void*)+0x94>
c00171b5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00171b8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00171be:	51                   	push   ecx
c00171bf:	50                   	push   eax
c00171c0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00171c4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00171c8:	0f af c8             	imul   ecx,eax
c00171cb:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00171ce:	51                   	push   ecx
c00171cf:	e8 70 95 fe ff       	call   c0000744 <memcpy>
c00171d4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00171d7:	83 c4 10             	add    esp,0x10
c00171da:	40                   	inc    eax
c00171db:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00171de:	83 c0 80             	add    eax,0xffffff80
c00171e1:	75 57                	jne    c001723a <VCache::write(unsigned long long, int, void*)+0xe0>
c00171e3:	83 ec 0c             	sub    esp,0xc
c00171e6:	53                   	push   ebx
c00171e7:	e8 b6 fe ff ff       	call   c00170a2 <VCache::writeWriteBuffer()>
c00171ec:	eb 34                	jmp    c0017222 <VCache::write(unsigned long long, int, void*)+0xc8>
c00171ee:	83 ec 0c             	sub    esp,0xc
c00171f1:	53                   	push   ebx
c00171f2:	e8 ab fe ff ff       	call   c00170a2 <VCache::writeWriteBuffer()>
c00171f7:	83 c4 10             	add    esp,0x10
c00171fa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00171fd:	83 fd 7f             	cmp    ebp,0x7f
c0017200:	7f 25                	jg     c0017227 <VCache::write(unsigned long long, int, void*)+0xcd>
c0017202:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0017205:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0017208:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c001720b:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c001720f:	52                   	push   edx
c0017210:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0017216:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001721a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001721d:	e8 22 95 fe ff       	call   c0000744 <memcpy>
c0017222:	83 c4 10             	add    esp,0x10
c0017225:	eb 13                	jmp    c001723a <VCache::write(unsigned long long, int, void*)+0xe0>
c0017227:	83 ec 0c             	sub    esp,0xc
c001722a:	8b 10                	mov    edx,DWORD PTR [eax]
c001722c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017230:	55                   	push   ebp
c0017231:	57                   	push   edi
c0017232:	56                   	push   esi
c0017233:	50                   	push   eax
c0017234:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0017237:	83 c4 20             	add    esp,0x20
c001723a:	83 ec 0c             	sub    esp,0xc
c001723d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017240:	e8 e5 76 00 00       	call   c001e92a <Semaphore::release()>
c0017245:	83 c4 2c             	add    esp,0x2c
c0017248:	31 c0                	xor    eax,eax
c001724a:	5b                   	pop    ebx
c001724b:	5e                   	pop    esi
c001724c:	5f                   	pop    edi
c001724d:	5d                   	pop    ebp
c001724e:	c3                   	ret    
c001724f:	90                   	nop

c0017250 <VCache::read(unsigned long long, int, void*)>:
c0017250:	55                   	push   ebp
c0017251:	57                   	push   edi
c0017252:	56                   	push   esi
c0017253:	53                   	push   ebx
c0017254:	83 ec 28             	sub    esp,0x28
c0017257:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001725b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001725f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017263:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017267:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001726b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c001726f:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0017273:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017276:	e8 01 71 00 00       	call   c001e37c <Semaphore::acquire()>
c001727b:	83 c4 10             	add    esp,0x10
c001727e:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017282:	74 0c                	je     c0017290 <VCache::read(unsigned long long, int, void*)+0x40>
c0017284:	83 ec 0c             	sub    esp,0xc
c0017287:	53                   	push   ebx
c0017288:	e8 15 fe ff ff       	call   c00170a2 <VCache::writeWriteBuffer()>
c001728d:	83 c4 10             	add    esp,0x10
c0017290:	83 fe 01             	cmp    esi,0x1
c0017293:	0f 85 80 00 00 00    	jne    c0017319 <VCache::read(unsigned long long, int, void*)+0xc9>
c0017299:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001729c:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c00172a3:	75 74                	jne    c0017319 <VCache::read(unsigned long long, int, void*)+0xc9>
c00172a5:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00172a8:	89 d1                	mov    ecx,edx
c00172aa:	f7 d9                	neg    ecx
c00172ac:	89 cf                	mov    edi,ecx
c00172ae:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00172b2:	c1 ff 1f             	sar    edi,0x1f
c00172b5:	23 0c 24             	and    ecx,DWORD PTR [esp]
c00172b8:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00172bc:	89 ce                	mov    esi,ecx
c00172be:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00172c2:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c00172c6:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00172ca:	89 cf                	mov    edi,ecx
c00172cc:	74 0a                	je     c00172d8 <VCache::read(unsigned long long, int, void*)+0x88>
c00172ce:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c00172d1:	75 05                	jne    c00172d8 <VCache::read(unsigned long long, int, void*)+0x88>
c00172d3:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c00172d6:	74 1c                	je     c00172f4 <VCache::read(unsigned long long, int, void*)+0xa4>
c00172d8:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c00172dc:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00172df:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c00172e2:	83 ec 0c             	sub    esp,0xc
c00172e5:	8b 08                	mov    ecx,DWORD PTR [eax]
c00172e7:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00172ea:	52                   	push   edx
c00172eb:	57                   	push   edi
c00172ec:	56                   	push   esi
c00172ed:	50                   	push   eax
c00172ee:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c00172f1:	83 c4 20             	add    esp,0x20
c00172f4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00172f7:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00172fd:	50                   	push   eax
c00172fe:	52                   	push   edx
c00172ff:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017302:	48                   	dec    eax
c0017303:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c0017307:	0f af c2             	imul   eax,edx
c001730a:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001730d:	50                   	push   eax
c001730e:	55                   	push   ebp
c001730f:	e8 30 94 fe ff       	call   c0000744 <memcpy>
c0017314:	83 c4 10             	add    esp,0x10
c0017317:	eb 21                	jmp    c001733a <VCache::read(unsigned long long, int, void*)+0xea>
c0017319:	83 ec 0c             	sub    esp,0xc
c001731c:	53                   	push   ebx
c001731d:	e8 70 fd ff ff       	call   c0017092 <VCache::invalidateReadBuffer()>
c0017322:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017325:	8b 10                	mov    edx,DWORD PTR [eax]
c0017327:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001732a:	56                   	push   esi
c001732b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001732f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017333:	50                   	push   eax
c0017334:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0017337:	83 c4 20             	add    esp,0x20
c001733a:	83 ec 0c             	sub    esp,0xc
c001733d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017340:	e8 e5 75 00 00       	call   c001e92a <Semaphore::release()>
c0017345:	83 c4 2c             	add    esp,0x2c
c0017348:	31 c0                	xor    eax,eax
c001734a:	5b                   	pop    ebx
c001734b:	5e                   	pop    esi
c001734c:	5f                   	pop    edi
c001734d:	5d                   	pop    ebp
c001734e:	c3                   	ret    
c001734f:	90                   	nop

c0017350 <Video::putrect(int, int, int, int, unsigned int)>:
c0017350:	55                   	push   ebp
c0017351:	57                   	push   edi
c0017352:	56                   	push   esi
c0017353:	53                   	push   ebx
c0017354:	83 ec 1c             	sub    esp,0x1c
c0017357:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001735b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001735f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0017363:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0017367:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001736b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001736f:	01 df                	add    edi,ebx
c0017371:	39 fb                	cmp    ebx,edi
c0017373:	7d 1f                	jge    c0017394 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0017375:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017379:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001737d:	7d 12                	jge    c0017391 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c001737f:	8b 16                	mov    edx,DWORD PTR [esi]
c0017381:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0017385:	53                   	push   ebx
c0017386:	55                   	push   ebp
c0017387:	45                   	inc    ebp
c0017388:	56                   	push   esi
c0017389:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001738c:	83 c4 10             	add    esp,0x10
c001738f:	eb e8                	jmp    c0017379 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0017391:	43                   	inc    ebx
c0017392:	eb dd                	jmp    c0017371 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0017394:	83 c4 1c             	add    esp,0x1c
c0017397:	5b                   	pop    ebx
c0017398:	5e                   	pop    esi
c0017399:	5f                   	pop    edi
c001739a:	5d                   	pop    ebp
c001739b:	c3                   	ret    

c001739c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001739c:	55                   	push   ebp
c001739d:	57                   	push   edi
c001739e:	31 ff                	xor    edi,edi
c00173a0:	56                   	push   esi
c00173a1:	53                   	push   ebx
c00173a2:	83 ec 1c             	sub    esp,0x1c
c00173a5:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00173a9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00173ad:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c00173b4:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c00173b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00173bd:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00173c1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00173c5:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c00173c8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00173cc:	01 f9                	add    ecx,edi
c00173ce:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c00173d2:	7d 2f                	jge    c0017403 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c00173d4:	31 f6                	xor    esi,esi
c00173d6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00173da:	01 f2                	add    edx,esi
c00173dc:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c00173e0:	7d 1a                	jge    c00173fc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c00173e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00173e5:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c00173e8:	46                   	inc    esi
c00173e9:	51                   	push   ecx
c00173ea:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00173ee:	52                   	push   edx
c00173ef:	55                   	push   ebp
c00173f0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00173f3:	83 c4 10             	add    esp,0x10
c00173f6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00173fa:	eb da                	jmp    c00173d6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c00173fc:	47                   	inc    edi
c00173fd:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0017401:	eb c5                	jmp    c00173c8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0017403:	83 c4 1c             	add    esp,0x1c
c0017406:	5b                   	pop    ebx
c0017407:	5e                   	pop    esi
c0017408:	5f                   	pop    edi
c0017409:	5d                   	pop    ebp
c001740a:	c3                   	ret    
c001740b:	90                   	nop

c001740c <Video::blit(unsigned int*, int, int, int, int)>:
c001740c:	55                   	push   ebp
c001740d:	57                   	push   edi
c001740e:	56                   	push   esi
c001740f:	53                   	push   ebx
c0017410:	83 ec 1c             	sub    esp,0x1c
c0017413:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017417:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001741b:	85 c0                	test   eax,eax
c001741d:	79 02                	jns    c0017421 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c001741f:	31 c0                	xor    eax,eax
c0017421:	c1 e0 02             	shl    eax,0x2
c0017424:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017428:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001742c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017430:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0017434:	39 d8                	cmp    eax,ebx
c0017436:	7e 49                	jle    c0017481 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017438:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001743e:	7c 41                	jl     c0017481 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017440:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0017444:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017448:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001744c:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0017450:	39 f9                	cmp    ecx,edi
c0017452:	7e 22                	jle    c0017476 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0017454:	83 c5 04             	add    ebp,0x4
c0017457:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001745d:	7c 14                	jl     c0017473 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c001745f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017461:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0017464:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017468:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001746c:	56                   	push   esi
c001746d:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0017470:	83 c4 10             	add    esp,0x10
c0017473:	47                   	inc    edi
c0017474:	eb d2                	jmp    c0017448 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0017476:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001747a:	43                   	inc    ebx
c001747b:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001747f:	eb ab                	jmp    c001742c <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0017481:	83 c4 1c             	add    esp,0x1c
c0017484:	5b                   	pop    ebx
c0017485:	5e                   	pop    esi
c0017486:	5f                   	pop    edi
c0017487:	5d                   	pop    ebp
c0017488:	c3                   	ret    
c0017489:	90                   	nop

c001748a <Video::clearScreen(unsigned int)>:
c001748a:	57                   	push   edi
c001748b:	56                   	push   esi
c001748c:	53                   	push   ebx
c001748d:	31 db                	xor    ebx,ebx
c001748f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017493:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017499:	7e 1f                	jle    c00174ba <Video::clearScreen(unsigned int)+0x30>
c001749b:	31 ff                	xor    edi,edi
c001749d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00174a3:	7e 12                	jle    c00174b7 <Video::clearScreen(unsigned int)+0x2d>
c00174a5:	8b 06                	mov    eax,DWORD PTR [esi]
c00174a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00174ab:	53                   	push   ebx
c00174ac:	57                   	push   edi
c00174ad:	47                   	inc    edi
c00174ae:	56                   	push   esi
c00174af:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00174b2:	83 c4 10             	add    esp,0x10
c00174b5:	eb e6                	jmp    c001749d <Video::clearScreen(unsigned int)+0x13>
c00174b7:	43                   	inc    ebx
c00174b8:	eb d9                	jmp    c0017493 <Video::clearScreen(unsigned int)+0x9>
c00174ba:	5b                   	pop    ebx
c00174bb:	5e                   	pop    esi
c00174bc:	5f                   	pop    edi
c00174bd:	c3                   	ret    

c00174be <Video::putpixel(int, int, unsigned int)>:
c00174be:	c7 44 24 04 9c b4 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b49c
c00174c6:	e9 0a 31 00 00       	jmp    c001a5d5 <Krnl::panic(char const*)>
c00174cb:	90                   	nop

c00174cc <Video::Video(char const*)>:
c00174cc:	83 ec 0c             	sub    esp,0xc
c00174cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174d3:	83 ec 08             	sub    esp,0x8
c00174d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00174da:	50                   	push   eax
c00174db:	e8 6a d0 ff ff       	call   c001454a <Device::Device(char const*)>
c00174e0:	83 c4 10             	add    esp,0x10
c00174e3:	ba 20 b5 02 c0       	mov    edx,0xc002b520
c00174e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174ec:	89 10                	mov    DWORD PTR [eax],edx
c00174ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174f2:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00174fc:	90                   	nop
c00174fd:	83 c4 0c             	add    esp,0xc
c0017500:	c3                   	ret    
c0017501:	90                   	nop

c0017502 <Video::~Video()>:
c0017502:	83 ec 0c             	sub    esp,0xc
c0017505:	ba 20 b5 02 c0       	mov    edx,0xc002b520
c001750a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001750e:	89 10                	mov    DWORD PTR [eax],edx
c0017510:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017514:	83 ec 0c             	sub    esp,0xc
c0017517:	50                   	push   eax
c0017518:	e8 0f cd ff ff       	call   c001422c <Device::~Device()>
c001751d:	83 c4 10             	add    esp,0x10
c0017520:	90                   	nop
c0017521:	83 c4 0c             	add    esp,0xc
c0017524:	c3                   	ret    
c0017525:	90                   	nop

c0017526 <Video::~Video()>:
c0017526:	83 ec 0c             	sub    esp,0xc
c0017529:	83 ec 0c             	sub    esp,0xc
c001752c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017530:	e8 cd ff ff ff       	call   c0017502 <Video::~Video()>
c0017535:	83 c4 10             	add    esp,0x10
c0017538:	83 ec 08             	sub    esp,0x8
c001753b:	68 64 01 00 00       	push   0x164
c0017540:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017544:	e8 0b b9 ff ff       	call   c0012e54 <operator delete(void*, unsigned long)>
c0017549:	83 c4 10             	add    esp,0x10
c001754c:	83 c4 0c             	add    esp,0xc
c001754f:	c3                   	ret    

c0017550 <Video::isMonochrome()>:
c0017550:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017554:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001755a:	c3                   	ret    
c001755b:	90                   	nop

c001755c <Video::getWidth()>:
c001755c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017560:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0017566:	c3                   	ret    
c0017567:	90                   	nop

c0017568 <Video::getHeight()>:
c0017568:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001756c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017572:	c3                   	ret    
c0017573:	90                   	nop

c0017574 <Video::drawCursor(int, int, unsigned char*, int)>:
c0017574:	55                   	push   ebp
c0017575:	57                   	push   edi
c0017576:	56                   	push   esi
c0017577:	53                   	push   ebx
c0017578:	83 ec 2c             	sub    esp,0x2c
c001757b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001757f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017583:	83 f8 01             	cmp    eax,0x1
c0017586:	19 c9                	sbb    ecx,ecx
c0017588:	31 db                	xor    ebx,ebx
c001758a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001758e:	89 cd                	mov    ebp,ecx
c0017590:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0017598:	f7 d5                	not    ebp
c001759a:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00175a0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00175a4:	01 d8                	add    eax,ebx
c00175a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00175aa:	56                   	push   esi
c00175ab:	e8 b8 ff ff ff       	call   c0017568 <Video::getHeight()>
c00175b0:	59                   	pop    ecx
c00175b1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00175b5:	7e 70                	jle    c0017627 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00175b7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00175bb:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00175bf:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00175c2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00175c6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00175ca:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00175d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00175d5:	89 f8                	mov    eax,edi
c00175d7:	83 c0 20             	add    eax,0x20
c00175da:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00175de:	56                   	push   esi
c00175df:	e8 78 ff ff ff       	call   c001755c <Video::getWidth()>
c00175e4:	5a                   	pop    edx
c00175e5:	39 c7                	cmp    edi,eax
c00175e7:	7d 34                	jge    c001761d <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00175e9:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00175ee:	74 05                	je     c00175f5 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00175f0:	8b 06                	mov    eax,DWORD PTR [esi]
c00175f2:	55                   	push   ebp
c00175f3:	eb 0d                	jmp    c0017602 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00175f5:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00175fa:	74 12                	je     c001760e <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00175fc:	8b 06                	mov    eax,DWORD PTR [esi]
c00175fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017602:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017606:	57                   	push   edi
c0017607:	56                   	push   esi
c0017608:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001760b:	83 c4 10             	add    esp,0x10
c001760e:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0017612:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0017616:	47                   	inc    edi
c0017617:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001761b:	75 c1                	jne    c00175de <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c001761d:	43                   	inc    ebx
c001761e:	83 fb 20             	cmp    ebx,0x20
c0017621:	0f 85 79 ff ff ff    	jne    c00175a0 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0017627:	83 c4 2c             	add    esp,0x2c
c001762a:	5b                   	pop    ebx
c001762b:	5e                   	pop    esi
c001762c:	5f                   	pop    edi
c001762d:	5d                   	pop    ebp
c001762e:	c3                   	ret    
c001762f:	90                   	nop

c0017630 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0017630:	55                   	push   ebp
c0017631:	57                   	push   edi
c0017632:	56                   	push   esi
c0017633:	53                   	push   ebx
c0017634:	83 ec 28             	sub    esp,0x28
c0017637:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001763b:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c001763f:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0017643:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0017647:	c1 e7 08             	shl    edi,0x8
c001764a:	01 c7                	add    edi,eax
c001764c:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0017650:	c1 e0 08             	shl    eax,0x8
c0017653:	01 d0                	add    eax,edx
c0017655:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017659:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001765d:	0f af c7             	imul   eax,edi
c0017660:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0017667:	50                   	push   eax
c0017668:	e8 d3 81 ff ff       	call   c000f840 <malloc>
c001766d:	83 c4 10             	add    esp,0x10
c0017670:	89 c5                	mov    ebp,eax
c0017672:	85 c0                	test   eax,eax
c0017674:	75 15                	jne    c001768b <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0017676:	83 ec 0c             	sub    esp,0xc
c0017679:	68 bd b4 02 c0       	push   0xc002b4bd
c001767e:	e8 b1 b8 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0017683:	83 c4 10             	add    esp,0x10
c0017686:	e9 1c 01 00 00       	jmp    c00177a7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001768b:	be 12 00 00 00       	mov    esi,0x12
c0017690:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017694:	74 11                	je     c00176a7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0017696:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c001769a:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c001769e:	c1 fe 03             	sar    esi,0x3
c00176a1:	0f af f0             	imul   esi,eax
c00176a4:	83 c6 12             	add    esi,0x12
c00176a7:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00176ab:	74 04                	je     c00176b1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c00176ad:	85 ff                	test   edi,edi
c00176af:	75 12                	jne    c00176c3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c00176b1:	83 ec 0c             	sub    esp,0xc
c00176b4:	68 d4 b4 02 c0       	push   0xc002b4d4
c00176b9:	e8 76 b8 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c00176be:	e9 ce 00 00 00       	jmp    c0017791 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c00176c3:	52                   	push   edx
c00176c4:	52                   	push   edx
c00176c5:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c00176c9:	50                   	push   eax
c00176ca:	68 e9 b4 02 c0       	push   0xc002b4e9
c00176cf:	e8 60 b8 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c00176d4:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c00176d8:	83 c4 10             	add    esp,0x10
c00176db:	80 fa 02             	cmp    dl,0x2
c00176de:	0f 85 98 00 00 00    	jne    c001777c <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c00176e4:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c00176e9:	75 10                	jne    c00176fb <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00176eb:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00176ef:	75 0a                	jne    c00176fb <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00176f1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00176f4:	83 e8 18             	sub    eax,0x18
c00176f7:	a8 f7                	test   al,0xf7
c00176f9:	74 0a                	je     c0017705 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c00176fb:	83 ec 0c             	sub    esp,0xc
c00176fe:	68 f6 b4 02 c0       	push   0xc002b4f6
c0017703:	eb 7f                	jmp    c0017784 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0017705:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001770d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017715:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017719:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017721:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0017725:	75 0c                	jne    c0017733 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0017727:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c001772c:	c1 e0 18             	shl    eax,0x18
c001772f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017733:	41                   	inc    ecx
c0017734:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0017739:	c1 e2 10             	shl    edx,0x10
c001773c:	89 d0                	mov    eax,edx
c001773e:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0017743:	c1 e2 08             	shl    edx,0x8
c0017746:	09 c2                	or     edx,eax
c0017748:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c001774c:	09 c2                	or     edx,eax
c001774e:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0017752:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c0017756:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001775a:	c1 f8 03             	sar    eax,0x3
c001775d:	01 c6                	add    esi,eax
c001775f:	89 c8                	mov    eax,ecx
c0017761:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0017765:	39 c7                	cmp    edi,eax
c0017767:	7f b0                	jg     c0017719 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0017769:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001776d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017771:	39 14 24             	cmp    DWORD PTR [esp],edx
c0017774:	7e 22                	jle    c0017798 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0017776:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001777a:	eb 99                	jmp    c0017715 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c001777c:	50                   	push   eax
c001777d:	50                   	push   eax
c001777e:	52                   	push   edx
c001777f:	68 04 b5 02 c0       	push   0xc002b504
c0017784:	e8 ab b7 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0017789:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001778c:	e8 bf 80 ff ff       	call   c000f850 <free>
c0017791:	83 c4 10             	add    esp,0x10
c0017794:	31 ed                	xor    ebp,ebp
c0017796:	eb 0f                	jmp    c00177a7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017798:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001779c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001779f:	89 38                	mov    DWORD PTR [eax],edi
c00177a1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00177a5:	89 08                	mov    DWORD PTR [eax],ecx
c00177a7:	83 c4 1c             	add    esp,0x1c
c00177aa:	89 e8                	mov    eax,ebp
c00177ac:	5b                   	pop    ebx
c00177ad:	5e                   	pop    esi
c00177ae:	5f                   	pop    edi
c00177af:	5d                   	pop    ebp
c00177b0:	c3                   	ret    
c00177b1:	90                   	nop

c00177b2 <Video::putTGA(int, int, unsigned char*, int)>:
c00177b2:	55                   	push   ebp
c00177b3:	57                   	push   edi
c00177b4:	56                   	push   esi
c00177b5:	53                   	push   ebx
c00177b6:	83 ec 28             	sub    esp,0x28
c00177b9:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00177bd:	8d 44 24 18          	lea    eax,[esp+0x18]
c00177c1:	50                   	push   eax
c00177c2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00177c6:	50                   	push   eax
c00177c7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00177cb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00177cf:	56                   	push   esi
c00177d0:	e8 5b fe ff ff       	call   c0017630 <Video::tgaParse(unsigned char*, int, int*, int*)>
c00177d5:	83 c4 20             	add    esp,0x20
c00177d8:	85 c0                	test   eax,eax
c00177da:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00177de:	74 35                	je     c0017815 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00177e0:	89 c7                	mov    edi,eax
c00177e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00177e6:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00177ea:	39 d8                	cmp    eax,ebx
c00177ec:	7e 27                	jle    c0017815 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00177ee:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00177f2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00177f6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00177fa:	39 e8                	cmp    eax,ebp
c00177fc:	7e 14                	jle    c0017812 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00177fe:	8b 06                	mov    eax,DWORD PTR [esi]
c0017800:	83 c7 04             	add    edi,0x4
c0017803:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0017806:	53                   	push   ebx
c0017807:	55                   	push   ebp
c0017808:	45                   	inc    ebp
c0017809:	56                   	push   esi
c001780a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001780d:	83 c4 10             	add    esp,0x10
c0017810:	eb e0                	jmp    c00177f2 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0017812:	43                   	inc    ebx
c0017813:	eb cd                	jmp    c00177e2 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0017815:	83 c4 1c             	add    esp,0x1c
c0017818:	5b                   	pop    ebx
c0017819:	5e                   	pop    esi
c001781a:	5f                   	pop    edi
c001781b:	5d                   	pop    ebp
c001781c:	c3                   	ret    
c001781d:	90                   	nop

c001781e <ACPI::close(int, int, void*)>:
c001781e:	83 ec 1c             	sub    esp,0x1c
c0017821:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0017829:	74 0a                	je     c0017835 <ACPI::close(int, int, void*)+0x17>
c001782b:	b8 00 00 00 00       	mov    eax,0x0
c0017830:	e9 9a 00 00 00       	jmp    c00178cf <ACPI::close(int, int, void*)+0xb1>
c0017835:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001783a:	75 37                	jne    c0017873 <ACPI::close(int, int, void*)+0x55>
c001783c:	83 ec 0c             	sub    esp,0xc
c001783f:	68 60 b5 02 c0       	push   0xc002b560
c0017844:	e8 eb b6 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0017849:	83 c4 10             	add    esp,0x10
c001784c:	a1 88 0c 03 c0       	mov    eax,ds:0xc0030c88
c0017851:	85 c0                	test   eax,eax
c0017853:	74 07                	je     c001785c <ACPI::close(int, int, void*)+0x3e>
c0017855:	a1 88 0c 03 c0       	mov    eax,ds:0xc0030c88
c001785a:	ff d0                	call   eax
c001785c:	83 ec 0c             	sub    esp,0xc
c001785f:	68 84 b6 02 c0       	push   0xc002b684
c0017864:	e8 6c 2d 00 00       	call   c001a5d5 <Krnl::panic(char const*)>
c0017869:	83 c4 10             	add    esp,0x10
c001786c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017871:	eb 5c                	jmp    c00178cf <ACPI::close(int, int, void*)+0xb1>
c0017873:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0017878:	75 50                	jne    c00178ca <ACPI::close(int, int, void*)+0xac>
c001787a:	a1 84 0c 03 c0       	mov    eax,ds:0xc0030c84
c001787f:	85 c0                	test   eax,eax
c0017881:	74 07                	je     c001788a <ACPI::close(int, int, void*)+0x6c>
c0017883:	a1 84 0c 03 c0       	mov    eax,ds:0xc0030c84
c0017888:	ff d0                	call   eax
c001788a:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001788f:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017894:	83 e0 02             	and    eax,0x2
c0017897:	74 1c                	je     c00178b5 <ACPI::close(int, int, void*)+0x97>
c0017899:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00178a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00178a4:	89 c2                	mov    edx,eax
c00178a6:	ec                   	in     al,dx
c00178a7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00178ab:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00178af:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00178b3:	eb da                	jmp    c001788f <ACPI::close(int, int, void*)+0x71>
c00178b5:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00178bc:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00178c1:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00178c5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00178c9:	ee                   	out    dx,al
c00178ca:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00178cf:	83 c4 1c             	add    esp,0x1c
c00178d2:	c3                   	ret    

c00178d3 <findRSDP()>:
c00178d3:	83 ec 1c             	sub    esp,0x1c
c00178d6:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c00178db:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00178e1:	83 e0 04             	and    eax,0x4
c00178e4:	84 c0                	test   al,al
c00178e6:	75 07                	jne    c00178ef <findRSDP()+0x1c>
c00178e8:	b8 00 00 00 00       	mov    eax,0x0
c00178ed:	eb 6a                	jmp    c0017959 <findRSDP()+0x86>
c00178ef:	a1 14 e6 02 c0       	mov    eax,ds:0xc002e614
c00178f4:	3d ff 07 00 00       	cmp    eax,0x7ff
c00178f9:	7f 1b                	jg     c0017916 <findRSDP()+0x43>
c00178fb:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0017900:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017906:	83 e2 fb             	and    edx,0xfffffffb
c0017909:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001790f:	b8 00 00 00 00       	mov    eax,0x0
c0017914:	eb 43                	jmp    c0017959 <findRSDP()+0x86>
c0017916:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001791e:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017926:	77 2c                	ja     c0017954 <findRSDP()+0x81>
c0017928:	83 ec 04             	sub    esp,0x4
c001792b:	6a 08                	push   0x8
c001792d:	68 6d b5 02 c0       	push   0xc002b56d
c0017932:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017936:	e8 05 8d fe ff       	call   c0000640 <memcmp>
c001793b:	83 c4 10             	add    esp,0x10
c001793e:	85 c0                	test   eax,eax
c0017940:	0f 94 c0             	sete   al
c0017943:	84 c0                	test   al,al
c0017945:	74 06                	je     c001794d <findRSDP()+0x7a>
c0017947:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001794b:	eb 0c                	jmp    c0017959 <findRSDP()+0x86>
c001794d:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017952:	eb ca                	jmp    c001791e <findRSDP()+0x4b>
c0017954:	b8 00 00 00 00       	mov    eax,0x0
c0017959:	83 c4 1c             	add    esp,0x1c
c001795c:	c3                   	ret    

c001795d <loadACPITables(unsigned char*)>:
c001795d:	56                   	push   esi
c001795e:	53                   	push   ebx
c001795f:	83 ec 44             	sub    esp,0x44
c0017962:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0017967:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001796d:	83 e0 04             	and    eax,0x4
c0017970:	84 c0                	test   al,al
c0017972:	0f 84 05 02 00 00    	je     c0017b7d <loadACPITables(unsigned char*)+0x220>
c0017978:	a0 a0 0e 03 c0       	mov    al,ds:0xc0030ea0
c001797d:	84 c0                	test   al,al
c001797f:	74 75                	je     c00179f6 <loadACPITables(unsigned char*)+0x99>
c0017981:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017985:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017989:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001798d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017990:	83 e8 24             	sub    eax,0x24
c0017993:	c1 e8 03             	shr    eax,0x3
c0017996:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001799a:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00179a2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00179a6:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00179aa:	0f 8d b2 00 00 00    	jge    c0017a62 <loadACPITables(unsigned char*)+0x105>
c00179b0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00179b4:	83 c0 24             	add    eax,0x24
c00179b7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00179bb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179bf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00179c3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00179c7:	c1 e0 03             	shl    eax,0x3
c00179ca:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c00179ce:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00179d2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00179d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00179d7:	89 c1                	mov    ecx,eax
c00179d9:	a1 8c 0c 03 c0       	mov    eax,ds:0xc0030c8c
c00179de:	8d 50 01             	lea    edx,[eax+0x1]
c00179e1:	89 15 8c 0c 03 c0    	mov    DWORD PTR ds:0xc0030c8c,edx
c00179e7:	89 ca                	mov    edx,ecx
c00179e9:	89 14 c5 a4 0c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf35c],edx
c00179f0:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c00179f4:	eb ac                	jmp    c00179a2 <loadACPITables(unsigned char*)+0x45>
c00179f6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00179fa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00179fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a02:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a05:	83 e8 24             	sub    eax,0x24
c0017a08:	c1 e8 02             	shr    eax,0x2
c0017a0b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017a0f:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0017a17:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017a1b:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0017a1f:	7d 41                	jge    c0017a62 <loadACPITables(unsigned char*)+0x105>
c0017a21:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a25:	83 c0 24             	add    eax,0x24
c0017a28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017a2c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017a30:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017a34:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017a38:	c1 e0 02             	shl    eax,0x2
c0017a3b:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0017a3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017a43:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017a45:	a1 8c 0c 03 c0       	mov    eax,ds:0xc0030c8c
c0017a4a:	8d 50 01             	lea    edx,[eax+0x1]
c0017a4d:	89 15 8c 0c 03 c0    	mov    DWORD PTR ds:0xc0030c8c,edx
c0017a53:	89 ca                	mov    edx,ecx
c0017a55:	89 14 c5 a4 0c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf35c],edx
c0017a5c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017a60:	eb b5                	jmp    c0017a17 <loadACPITables(unsigned char*)+0xba>
c0017a62:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017a6a:	a1 8c 0c 03 c0       	mov    eax,ds:0xc0030c8c
c0017a6f:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017a73:	0f 8d 05 01 00 00    	jge    c0017b7e <loadACPITables(unsigned char*)+0x221>
c0017a79:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a7d:	8b 04 c5 a4 0c 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf35c]
c0017a84:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017a88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017a90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a94:	25 ff 0f 00 00       	and    eax,0xfff
c0017a99:	89 c6                	mov    esi,eax
c0017a9b:	e8 86 a3 ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c0017aa0:	89 c3                	mov    ebx,eax
c0017aa2:	83 ec 0c             	sub    esp,0xc
c0017aa5:	6a 01                	push   0x1
c0017aa7:	e8 df a0 ff ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c0017aac:	83 c4 10             	add    esp,0x10
c0017aaf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017ab3:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017ab9:	83 ec 0c             	sub    esp,0xc
c0017abc:	6a 01                	push   0x1
c0017abe:	6a 01                	push   0x1
c0017ac0:	50                   	push   eax
c0017ac1:	52                   	push   edx
c0017ac2:	53                   	push   ebx
c0017ac3:	e8 8e ab ff ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017ac8:	83 c4 20             	add    esp,0x20
c0017acb:	09 f0                	or     eax,esi
c0017acd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017ad1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ad5:	c1 e0 03             	shl    eax,0x3
c0017ad8:	05 a0 0c 03 c0       	add    eax,0xc0030ca0
c0017add:	83 ec 04             	sub    esp,0x4
c0017ae0:	6a 04                	push   0x4
c0017ae2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017ae6:	50                   	push   eax
c0017ae7:	e8 58 8c fe ff       	call   c0000744 <memcpy>
c0017aec:	83 c4 10             	add    esp,0x10
c0017aef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017af3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017af6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017afa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017afe:	05 00 10 00 00       	add    eax,0x1000
c0017b03:	c1 e8 0c             	shr    eax,0xc
c0017b06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017b0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b0e:	89 04 24             	mov    DWORD PTR [esp],eax
c0017b11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b15:	25 ff 0f 00 00       	and    eax,0xfff
c0017b1a:	89 c6                	mov    esi,eax
c0017b1c:	e8 05 a3 ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c0017b21:	89 c3                	mov    ebx,eax
c0017b23:	83 ec 0c             	sub    esp,0xc
c0017b26:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017b2a:	e8 5c a0 ff ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c0017b2f:	83 c4 10             	add    esp,0x10
c0017b32:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017b36:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017b3c:	83 ec 0c             	sub    esp,0xc
c0017b3f:	6a 01                	push   0x1
c0017b41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017b45:	50                   	push   eax
c0017b46:	52                   	push   edx
c0017b47:	53                   	push   ebx
c0017b48:	e8 09 ab ff ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017b4d:	83 c4 20             	add    esp,0x20
c0017b50:	09 f0                	or     eax,esi
c0017b52:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b56:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017b59:	83 ec 0c             	sub    esp,0xc
c0017b5c:	50                   	push   eax
c0017b5d:	e8 99 a4 ff ff       	call   c0011ffb <Virt::freeKernelVirtualPages(unsigned long)>
c0017b62:	83 c4 10             	add    esp,0x10
c0017b65:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b69:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017b6d:	89 14 c5 a4 0c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf35c],edx
c0017b74:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017b78:	e9 ed fe ff ff       	jmp    c0017a6a <loadACPITables(unsigned char*)+0x10d>
c0017b7d:	90                   	nop
c0017b7e:	83 c4 44             	add    esp,0x44
c0017b81:	5b                   	pop    ebx
c0017b82:	5e                   	pop    esi
c0017b83:	c3                   	ret    

c0017b84 <findRSDT(unsigned char*)>:
c0017b84:	56                   	push   esi
c0017b85:	53                   	push   ebx
c0017b86:	83 ec 44             	sub    esp,0x44
c0017b89:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0017b8e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017b94:	83 e0 04             	and    eax,0x4
c0017b97:	84 c0                	test   al,al
c0017b99:	75 0a                	jne    c0017ba5 <findRSDT(unsigned char*)+0x21>
c0017b9b:	b8 00 00 00 00       	mov    eax,0x0
c0017ba0:	e9 f7 00 00 00       	jmp    c0017c9c <findRSDT(unsigned char*)+0x118>
c0017ba5:	83 ec 04             	sub    esp,0x4
c0017ba8:	6a 24                	push   0x24
c0017baa:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017bae:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017bb2:	50                   	push   eax
c0017bb3:	e8 8c 8b fe ff       	call   c0000744 <memcpy>
c0017bb8:	83 c4 10             	add    esp,0x10
c0017bbb:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017bbf:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017bc3:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017bcb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017bcf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017bd3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017bd7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017bdb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017bdf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017be3:	25 ff 0f 00 00       	and    eax,0xfff
c0017be8:	89 c6                	mov    esi,eax
c0017bea:	e8 37 a2 ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c0017bef:	89 c3                	mov    ebx,eax
c0017bf1:	83 ec 0c             	sub    esp,0xc
c0017bf4:	6a 02                	push   0x2
c0017bf6:	e8 90 9f ff ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c0017bfb:	83 c4 10             	add    esp,0x10
c0017bfe:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017c02:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c08:	83 ec 0c             	sub    esp,0xc
c0017c0b:	6a 01                	push   0x1
c0017c0d:	6a 02                	push   0x2
c0017c0f:	50                   	push   eax
c0017c10:	52                   	push   edx
c0017c11:	53                   	push   ebx
c0017c12:	e8 3f aa ff ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c17:	83 c4 20             	add    esp,0x20
c0017c1a:	09 f0                	or     eax,esi
c0017c1c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017c20:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c24:	25 ff 0f 00 00       	and    eax,0xfff
c0017c29:	89 c6                	mov    esi,eax
c0017c2b:	e8 f6 a1 ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c0017c30:	89 c3                	mov    ebx,eax
c0017c32:	83 ec 0c             	sub    esp,0xc
c0017c35:	6a 02                	push   0x2
c0017c37:	e8 4f 9f ff ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c0017c3c:	83 c4 10             	add    esp,0x10
c0017c3f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017c43:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c49:	83 ec 0c             	sub    esp,0xc
c0017c4c:	6a 01                	push   0x1
c0017c4e:	6a 02                	push   0x2
c0017c50:	50                   	push   eax
c0017c51:	52                   	push   edx
c0017c52:	53                   	push   ebx
c0017c53:	e8 fe a9 ff ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c58:	83 c4 20             	add    esp,0x20
c0017c5b:	09 f0                	or     eax,esi
c0017c5d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017c61:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017c66:	75 11                	jne    c0017c79 <findRSDT(unsigned char*)+0xf5>
c0017c68:	c6 05 a0 0e 03 c0 00 	mov    BYTE PTR ds:0xc0030ea0,0x0
c0017c6f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c73:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017c77:	eb 1f                	jmp    c0017c98 <findRSDT(unsigned char*)+0x114>
c0017c79:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017c7e:	75 11                	jne    c0017c91 <findRSDT(unsigned char*)+0x10d>
c0017c80:	c6 05 a0 0e 03 c0 01 	mov    BYTE PTR ds:0xc0030ea0,0x1
c0017c87:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c8b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017c8f:	eb 07                	jmp    c0017c98 <findRSDT(unsigned char*)+0x114>
c0017c91:	b8 00 00 00 00       	mov    eax,0x0
c0017c96:	eb 04                	jmp    c0017c9c <findRSDT(unsigned char*)+0x118>
c0017c98:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017c9c:	83 c4 44             	add    esp,0x44
c0017c9f:	5b                   	pop    ebx
c0017ca0:	5e                   	pop    esi
c0017ca1:	c3                   	ret    

c0017ca2 <findDataTable(unsigned char*, char*)>:
c0017ca2:	83 ec 1c             	sub    esp,0x1c
c0017ca5:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0017caa:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017cb0:	83 e0 04             	and    eax,0x4
c0017cb3:	84 c0                	test   al,al
c0017cb5:	75 07                	jne    c0017cbe <findDataTable(unsigned char*, char*)+0x1c>
c0017cb7:	b8 00 00 00 00       	mov    eax,0x0
c0017cbc:	eb 7c                	jmp    c0017d3a <findDataTable(unsigned char*, char*)+0x98>
c0017cbe:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017cc6:	a1 8c 0c 03 c0       	mov    eax,ds:0xc0030c8c
c0017ccb:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017ccf:	7d 3a                	jge    c0017d0b <findDataTable(unsigned char*, char*)+0x69>
c0017cd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017cd5:	c1 e0 03             	shl    eax,0x3
c0017cd8:	05 a0 0c 03 c0       	add    eax,0xc0030ca0
c0017cdd:	83 ec 04             	sub    esp,0x4
c0017ce0:	6a 04                	push   0x4
c0017ce2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017ce6:	50                   	push   eax
c0017ce7:	e8 54 89 fe ff       	call   c0000640 <memcmp>
c0017cec:	83 c4 10             	add    esp,0x10
c0017cef:	85 c0                	test   eax,eax
c0017cf1:	0f 94 c0             	sete   al
c0017cf4:	84 c0                	test   al,al
c0017cf6:	74 0d                	je     c0017d05 <findDataTable(unsigned char*, char*)+0x63>
c0017cf8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017cfc:	8b 04 c5 a4 0c 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf35c]
c0017d03:	eb 35                	jmp    c0017d3a <findDataTable(unsigned char*, char*)+0x98>
c0017d05:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017d09:	eb bb                	jmp    c0017cc6 <findDataTable(unsigned char*, char*)+0x24>
c0017d0b:	a0 a0 0e 03 c0       	mov    al,ds:0xc0030ea0
c0017d10:	84 c0                	test   al,al
c0017d12:	74 07                	je     c0017d1b <findDataTable(unsigned char*, char*)+0x79>
c0017d14:	b8 58 00 00 00       	mov    eax,0x58
c0017d19:	eb 05                	jmp    c0017d20 <findDataTable(unsigned char*, char*)+0x7e>
c0017d1b:	b8 52 00 00 00       	mov    eax,0x52
c0017d20:	83 ec 04             	sub    esp,0x4
c0017d23:	50                   	push   eax
c0017d24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d28:	68 a8 b6 02 c0       	push   0xc002b6a8
c0017d2d:	e8 02 b2 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0017d32:	83 c4 10             	add    esp,0x10
c0017d35:	b8 00 00 00 00       	mov    eax,0x0
c0017d3a:	83 c4 1c             	add    esp,0x1c
c0017d3d:	c3                   	ret    

c0017d3e <scanMADT()>:
c0017d3e:	53                   	push   ebx
c0017d3f:	83 ec 38             	sub    esp,0x38
c0017d42:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0017d47:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017d4d:	83 e0 04             	and    eax,0x4
c0017d50:	84 c0                	test   al,al
c0017d52:	0f 84 63 04 00 00    	je     c00181bb <scanMADT()+0x47d>
c0017d58:	e8 76 fb ff ff       	call   c00178d3 <findRSDP()>
c0017d5d:	a3 ac 0e 03 c0       	mov    ds:0xc0030eac,eax
c0017d62:	a1 ac 0e 03 c0       	mov    eax,ds:0xc0030eac
c0017d67:	85 c0                	test   eax,eax
c0017d69:	75 19                	jne    c0017d84 <scanMADT()+0x46>
c0017d6b:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0017d70:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017d76:	83 e2 fb             	and    edx,0xfffffffb
c0017d79:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017d7f:	e9 3b 04 00 00       	jmp    c00181bf <scanMADT()+0x481>
c0017d84:	a1 ac 0e 03 c0       	mov    eax,ds:0xc0030eac
c0017d89:	83 ec 0c             	sub    esp,0xc
c0017d8c:	50                   	push   eax
c0017d8d:	e8 f2 fd ff ff       	call   c0017b84 <findRSDT(unsigned char*)>
c0017d92:	83 c4 10             	add    esp,0x10
c0017d95:	a3 a8 0e 03 c0       	mov    ds:0xc0030ea8,eax
c0017d9a:	a1 a8 0e 03 c0       	mov    eax,ds:0xc0030ea8
c0017d9f:	85 c0                	test   eax,eax
c0017da1:	75 19                	jne    c0017dbc <scanMADT()+0x7e>
c0017da3:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0017da8:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017dae:	83 e2 fb             	and    edx,0xfffffffb
c0017db1:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017db7:	e9 03 04 00 00       	jmp    c00181bf <scanMADT()+0x481>
c0017dbc:	a1 a8 0e 03 c0       	mov    eax,ds:0xc0030ea8
c0017dc1:	83 ec 0c             	sub    esp,0xc
c0017dc4:	50                   	push   eax
c0017dc5:	e8 93 fb ff ff       	call   c001795d <loadACPITables(unsigned char*)>
c0017dca:	83 c4 10             	add    esp,0x10
c0017dcd:	a1 a8 0e 03 c0       	mov    eax,ds:0xc0030ea8
c0017dd2:	83 ec 08             	sub    esp,0x8
c0017dd5:	68 76 b5 02 c0       	push   0xc002b576
c0017dda:	50                   	push   eax
c0017ddb:	e8 c2 fe ff ff       	call   c0017ca2 <findDataTable(unsigned char*, char*)>
c0017de0:	83 c4 10             	add    esp,0x10
c0017de3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017de7:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017dec:	75 19                	jne    c0017e07 <scanMADT()+0xc9>
c0017dee:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0017df3:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017df9:	83 e2 fe             	and    edx,0xfffffffe
c0017dfc:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017e02:	e9 b8 03 00 00       	jmp    c00181bf <scanMADT()+0x481>
c0017e07:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017e0f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e13:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017e16:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017e1a:	0f 87 9f 03 00 00    	ja     c00181bf <scanMADT()+0x481>
c0017e20:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017e28:	0f 87 91 03 00 00    	ja     c00181bf <scanMADT()+0x481>
c0017e2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e32:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017e36:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e3a:	8d 50 01             	lea    edx,[eax+0x1]
c0017e3d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e41:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e45:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017e49:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017e4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e51:	8d 50 01             	lea    edx,[eax+0x1]
c0017e54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e58:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e5c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017e60:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017e64:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017e69:	0f 86 4f 03 00 00    	jbe    c00181be <scanMADT()+0x480>
c0017e6f:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017e74:	75 57                	jne    c0017ecd <scanMADT()+0x18f>
c0017e76:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e7a:	8d 50 01             	lea    edx,[eax+0x1]
c0017e7d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e81:	8a 15 a0 10 03 c0    	mov    dl,BYTE PTR ds:0xc00310a0
c0017e87:	0f b6 d2             	movzx  edx,dl
c0017e8a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017e8e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017e92:	88 82 e0 10 03 c0    	mov    BYTE PTR [edx-0x3ffcef20],al
c0017e98:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e9c:	8d 50 01             	lea    edx,[eax+0x1]
c0017e9f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ea3:	8a 15 a0 10 03 c0    	mov    dl,BYTE PTR ds:0xc00310a0
c0017ea9:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017eac:	88 0d a0 10 03 c0    	mov    BYTE PTR ds:0xc00310a0,cl
c0017eb2:	0f b6 d2             	movzx  edx,dl
c0017eb5:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017eb9:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017ebd:	88 82 c0 10 03 c0    	mov    BYTE PTR [edx-0x3ffcef40],al
c0017ec3:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017ec8:	e9 da 02 00 00       	jmp    c00181a7 <scanMADT()+0x469>
c0017ecd:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017ed2:	0f 85 14 01 00 00    	jne    c0017fec <scanMADT()+0x2ae>
c0017ed8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017edc:	8d 50 01             	lea    edx,[eax+0x1]
c0017edf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ee3:	8a 15 60 0f 03 c0    	mov    dl,BYTE PTR ds:0xc0030f60
c0017ee9:	0f b6 d2             	movzx  edx,dl
c0017eec:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017ef0:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017ef4:	88 82 80 0f 03 c0    	mov    BYTE PTR [edx-0x3ffcf080],al
c0017efa:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017efe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f02:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f06:	01 d0                	add    eax,edx
c0017f08:	83 c0 2c             	add    eax,0x2c
c0017f0b:	8a 00                	mov    al,BYTE PTR [eax]
c0017f0d:	0f b6 d0             	movzx  edx,al
c0017f10:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f14:	8d 48 01             	lea    ecx,[eax+0x1]
c0017f17:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f1b:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017f1f:	0f b6 c0             	movzx  eax,al
c0017f22:	c1 e0 08             	shl    eax,0x8
c0017f25:	89 d1                	mov    ecx,edx
c0017f27:	09 c1                	or     ecx,eax
c0017f29:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f2d:	8d 50 02             	lea    edx,[eax+0x2]
c0017f30:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f34:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f38:	0f b6 c0             	movzx  eax,al
c0017f3b:	c1 e0 10             	shl    eax,0x10
c0017f3e:	09 c1                	or     ecx,eax
c0017f40:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f44:	8d 50 03             	lea    edx,[eax+0x3]
c0017f47:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f4b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f4f:	0f b6 c0             	movzx  eax,al
c0017f52:	c1 e0 18             	shl    eax,0x18
c0017f55:	09 c1                	or     ecx,eax
c0017f57:	89 ca                	mov    edx,ecx
c0017f59:	a0 60 0f 03 c0       	mov    al,ds:0xc0030f60
c0017f5e:	0f b6 c0             	movzx  eax,al
c0017f61:	89 14 85 a0 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf060],edx
c0017f68:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017f6d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f71:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f75:	01 d0                	add    eax,edx
c0017f77:	83 c0 2c             	add    eax,0x2c
c0017f7a:	8a 00                	mov    al,BYTE PTR [eax]
c0017f7c:	0f b6 d0             	movzx  edx,al
c0017f7f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f83:	8d 48 01             	lea    ecx,[eax+0x1]
c0017f86:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f8a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017f8e:	0f b6 c0             	movzx  eax,al
c0017f91:	c1 e0 08             	shl    eax,0x8
c0017f94:	89 d1                	mov    ecx,edx
c0017f96:	09 c1                	or     ecx,eax
c0017f98:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f9c:	8d 50 02             	lea    edx,[eax+0x2]
c0017f9f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fa3:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017fa7:	0f b6 c0             	movzx  eax,al
c0017faa:	c1 e0 10             	shl    eax,0x10
c0017fad:	09 c1                	or     ecx,eax
c0017faf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fb3:	8d 50 03             	lea    edx,[eax+0x3]
c0017fb6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fba:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017fbe:	0f b6 c0             	movzx  eax,al
c0017fc1:	c1 e0 18             	shl    eax,0x18
c0017fc4:	09 c1                	or     ecx,eax
c0017fc6:	89 ca                	mov    edx,ecx
c0017fc8:	a0 60 0f 03 c0       	mov    al,ds:0xc0030f60
c0017fcd:	0f b6 c0             	movzx  eax,al
c0017fd0:	89 14 85 20 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcefe0],edx
c0017fd7:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017fdc:	a0 60 0f 03 c0       	mov    al,ds:0xc0030f60
c0017fe1:	40                   	inc    eax
c0017fe2:	a2 60 0f 03 c0       	mov    ds:0xc0030f60,al
c0017fe7:	e9 bb 01 00 00       	jmp    c00181a7 <scanMADT()+0x469>
c0017fec:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017ff1:	0f 85 e9 00 00 00    	jne    c00180e0 <scanMADT()+0x3a2>
c0017ff7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ffb:	8d 50 01             	lea    edx,[eax+0x1]
c0017ffe:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018002:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018006:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001800a:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001800e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018012:	8d 50 01             	lea    edx,[eax+0x1]
c0018015:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018019:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001801d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018021:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018025:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018029:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001802d:	01 d0                	add    eax,edx
c001802f:	83 c0 2c             	add    eax,0x2c
c0018032:	8a 00                	mov    al,BYTE PTR [eax]
c0018034:	0f b6 d0             	movzx  edx,al
c0018037:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001803b:	8d 48 01             	lea    ecx,[eax+0x1]
c001803e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018042:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018046:	0f b6 c0             	movzx  eax,al
c0018049:	c1 e0 08             	shl    eax,0x8
c001804c:	89 d1                	mov    ecx,edx
c001804e:	09 c1                	or     ecx,eax
c0018050:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018054:	8d 50 02             	lea    edx,[eax+0x2]
c0018057:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001805b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001805f:	0f b6 c0             	movzx  eax,al
c0018062:	c1 e0 10             	shl    eax,0x10
c0018065:	09 c1                	or     ecx,eax
c0018067:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001806b:	8d 50 03             	lea    edx,[eax+0x3]
c001806e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018072:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018076:	0f b6 c0             	movzx  eax,al
c0018079:	c1 e0 18             	shl    eax,0x18
c001807c:	09 c8                	or     eax,ecx
c001807e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018082:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018087:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001808b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001808f:	01 d0                	add    eax,edx
c0018091:	83 c0 2c             	add    eax,0x2c
c0018094:	8a 00                	mov    al,BYTE PTR [eax]
c0018096:	0f b6 c0             	movzx  eax,al
c0018099:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001809d:	8d 4a 01             	lea    ecx,[edx+0x1]
c00180a0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180a4:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00180a8:	0f b6 d2             	movzx  edx,dl
c00180ab:	c1 e2 08             	shl    edx,0x8
c00180ae:	09 d0                	or     eax,edx
c00180b0:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00180b5:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00180ba:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00180bf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00180c3:	88 90 20 d8 02 c0    	mov    BYTE PTR [eax-0x3ffd27e0],dl
c00180c9:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00180ce:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00180d3:	66 89 84 12 40 0f 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcf0c0],ax
c00180db:	e9 c7 00 00 00       	jmp    c00181a7 <scanMADT()+0x469>
c00180e0:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00180e5:	0f 85 b0 00 00 00    	jne    c001819b <scanMADT()+0x45d>
c00180eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180ef:	8d 50 01             	lea    edx,[eax+0x1]
c00180f2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00180f6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180fa:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00180fe:	0f b6 c0             	movzx  eax,al
c0018101:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018105:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018109:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001810d:	01 d0                	add    eax,edx
c001810f:	83 c0 2c             	add    eax,0x2c
c0018112:	8a 00                	mov    al,BYTE PTR [eax]
c0018114:	0f b6 d0             	movzx  edx,al
c0018117:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001811b:	8d 48 01             	lea    ecx,[eax+0x1]
c001811e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018122:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018126:	0f b6 c0             	movzx  eax,al
c0018129:	c1 e0 08             	shl    eax,0x8
c001812c:	09 d0                	or     eax,edx
c001812e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018132:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0018137:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001813b:	8d 50 01             	lea    edx,[eax+0x1]
c001813e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018142:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018146:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001814a:	0f b6 c0             	movzx  eax,al
c001814d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018151:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018155:	c1 e0 08             	shl    eax,0x8
c0018158:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001815c:	89 c1                	mov    ecx,eax
c001815e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018162:	c1 e0 18             	shl    eax,0x18
c0018165:	89 c3                	mov    ebx,eax
c0018167:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c001816c:	8d 50 01             	lea    edx,[eax+0x1]
c001816f:	89 15 b0 0e 03 c0    	mov    DWORD PTR ds:0xc0030eb0,edx
c0018175:	09 d9                	or     ecx,ebx
c0018177:	89 ca                	mov    edx,ecx
c0018179:	89 14 85 c0 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf140],edx
c0018180:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018184:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018188:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001818c:	68 d8 b6 02 c0       	push   0xc002b6d8
c0018191:	e8 9e ad ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0018196:	83 c4 10             	add    esp,0x10
c0018199:	eb 0c                	jmp    c00181a7 <scanMADT()+0x469>
c001819b:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c00181a0:	75 05                	jne    c00181a7 <scanMADT()+0x469>
c00181a2:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c00181a7:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c00181ac:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00181b0:	01 d0                	add    eax,edx
c00181b2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00181b6:	e9 54 fc ff ff       	jmp    c0017e0f <scanMADT()+0xd1>
c00181bb:	90                   	nop
c00181bc:	eb 01                	jmp    c00181bf <scanMADT()+0x481>
c00181be:	90                   	nop
c00181bf:	83 c4 38             	add    esp,0x38
c00181c2:	5b                   	pop    ebx
c00181c3:	c3                   	ret    

c00181c4 <ACPI::ACPI()>:
c00181c4:	83 ec 0c             	sub    esp,0xc
c00181c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181cb:	83 ec 08             	sub    esp,0x8
c00181ce:	68 7b b5 02 c0       	push   0xc002b57b
c00181d3:	50                   	push   eax
c00181d4:	e8 71 c3 ff ff       	call   c001454a <Device::Device(char const*)>
c00181d9:	83 c4 10             	add    esp,0x10
c00181dc:	ba 4c b7 02 c0       	mov    edx,0xc002b74c
c00181e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181e5:	89 10                	mov    DWORD PTR [eax],edx
c00181e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181eb:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00181f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181f6:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0018200:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018204:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c001820e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018212:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018219:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001821d:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0018224:	e8 15 fb ff ff       	call   c0017d3e <scanMADT()>
c0018229:	90                   	nop
c001822a:	83 c4 0c             	add    esp,0xc
c001822d:	c3                   	ret    

c001822e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c001822e:	83 ec 2c             	sub    esp,0x2c
c0018231:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0018235:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018239:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001823d:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018241:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018246:	88 d0                	mov    al,dl
c0018248:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001824c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0018251:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0018259:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001825d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018263:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0018267:	0f 8d 97 00 00 00    	jge    c0018304 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c001826d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018271:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018275:	83 c2 2a             	add    edx,0x2a
c0018278:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001827c:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0018281:	75 78                	jne    c00182fb <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018283:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018287:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001828b:	83 c2 2a             	add    edx,0x2a
c001828e:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0018292:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0018296:	75 63                	jne    c00182fb <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018298:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001829d:	74 3a                	je     c00182d9 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c001829f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182a7:	83 c2 2a             	add    edx,0x2a
c00182aa:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00182ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00182b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00182b5:	39 c2                	cmp    edx,eax
c00182b7:	74 10                	je     c00182c9 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c00182b9:	83 ec 0c             	sub    esp,0xc
c00182bc:	68 14 b7 02 c0       	push   0xc002b714
c00182c1:	e8 0f 23 00 00       	call   c001a5d5 <Krnl::panic(char const*)>
c00182c6:	83 c4 10             	add    esp,0x10
c00182c9:	83 ec 0c             	sub    esp,0xc
c00182cc:	68 80 b5 02 c0       	push   0xc002b580
c00182d1:	e8 ff 22 00 00       	call   c001a5d5 <Krnl::panic(char const*)>
c00182d6:	83 c4 10             	add    esp,0x10
c00182d9:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00182dd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182e1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182e5:	83 c2 2a             	add    edx,0x2a
c00182e8:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00182ec:	8b 02                	mov    eax,DWORD PTR [edx]
c00182ee:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00182f1:	89 01                	mov    DWORD PTR [ecx],eax
c00182f3:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00182f6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00182fb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00182ff:	e9 55 ff ff ff       	jmp    c0018259 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0018304:	90                   	nop
c0018305:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018309:	83 c4 2c             	add    esp,0x2c
c001830c:	c2 04 00             	ret    0x4
c001830f:	90                   	nop

c0018310 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0018310:	83 ec 1c             	sub    esp,0x1c
c0018313:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018317:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001831b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001831f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018324:	88 c8                	mov    al,cl
c0018326:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001832a:	88 d0                	mov    al,dl
c001832c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018330:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018334:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001833a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001833e:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018341:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0018345:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0018349:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001834d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018353:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018357:	8d 48 2a             	lea    ecx,[eax+0x2a]
c001835a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001835e:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0018363:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018367:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001836d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018371:	8d 48 01             	lea    ecx,[eax+0x1]
c0018374:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018378:	83 c2 2a             	add    edx,0x2a
c001837b:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001837f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018383:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018389:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001838d:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018390:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018394:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0018398:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001839c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00183a2:	8d 50 01             	lea    edx,[eax+0x1]
c00183a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183a9:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c00183af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183b3:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00183b9:	3d 00 02 00 00       	cmp    eax,0x200
c00183be:	75 10                	jne    c00183d0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c00183c0:	83 ec 0c             	sub    esp,0xc
c00183c3:	68 8f b5 02 c0       	push   0xc002b58f
c00183c8:	e8 08 22 00 00       	call   c001a5d5 <Krnl::panic(char const*)>
c00183cd:	83 c4 10             	add    esp,0x10
c00183d0:	90                   	nop
c00183d1:	83 c4 1c             	add    esp,0x1c
c00183d4:	c3                   	ret    
c00183d5:	90                   	nop

c00183d6 <ACPI::setScreenBrightnessLevel(void*, int)>:
c00183d6:	b8 00 00 00 00       	mov    eax,0x0
c00183db:	c3                   	ret    

c00183dc <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00183dc:	83 ec 1c             	sub    esp,0x1c
c00183df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00183e3:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00183e6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00183ea:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c00183ef:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00183f4:	83 ec 08             	sub    esp,0x8
c00183f7:	52                   	push   edx
c00183f8:	50                   	push   eax
c00183f9:	e8 5a 6a ff ff       	call   c000ee58 <Computer::readCMOS(unsigned char)>
c00183fe:	83 c4 10             	add    esp,0x10
c0018401:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018405:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c001840a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001840f:	83 ec 04             	sub    esp,0x4
c0018412:	6a 01                	push   0x1
c0018414:	52                   	push   edx
c0018415:	50                   	push   eax
c0018416:	e8 53 6b ff ff       	call   c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>
c001841b:	83 c4 10             	add    esp,0x10
c001841e:	90                   	nop
c001841f:	83 c4 1c             	add    esp,0x1c
c0018422:	c3                   	ret    
c0018423:	90                   	nop

c0018424 <ACPI::open(int, int, void*)>:
c0018424:	53                   	push   ebx
c0018425:	83 ec 28             	sub    esp,0x28
c0018428:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001842c:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018433:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018437:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c001843e:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0018443:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018449:	83 e0 04             	and    eax,0x4
c001844c:	84 c0                	test   al,al
c001844e:	74 47                	je     c0018497 <ACPI::open(int, int, void*)+0x73>
c0018450:	a1 a8 0e 03 c0       	mov    eax,ds:0xc0030ea8
c0018455:	83 ec 08             	sub    esp,0x8
c0018458:	68 ac b5 02 c0       	push   0xc002b5ac
c001845d:	50                   	push   eax
c001845e:	e8 3f f8 ff ff       	call   c0017ca2 <findDataTable(unsigned char*, char*)>
c0018463:	83 c4 10             	add    esp,0x10
c0018466:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001846a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001846f:	74 26                	je     c0018497 <ACPI::open(int, int, void*)+0x73>
c0018471:	83 ec 0c             	sub    esp,0xc
c0018474:	68 b1 b5 02 c0       	push   0xc002b5b1
c0018479:	e8 b6 aa ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001847e:	83 c4 10             	add    esp,0x10
c0018481:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018485:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001848c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018490:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018497:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c001849f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00184a3:	8a 00                	mov    al,BYTE PTR [eax]
c00184a5:	3c 01                	cmp    al,0x1
c00184a7:	75 28                	jne    c00184d1 <ACPI::open(int, int, void*)+0xad>
c00184a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184ad:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00184b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184b8:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00184bf:	83 ec 0c             	sub    esp,0xc
c00184c2:	68 c2 b5 02 c0       	push   0xc002b5c2
c00184c7:	e8 68 aa ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c00184cc:	83 c4 10             	add    esp,0x10
c00184cf:	eb 25                	jmp    c00184f6 <ACPI::open(int, int, void*)+0xd2>
c00184d1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00184d5:	8a 00                	mov    al,BYTE PTR [eax]
c00184d7:	3c 02                	cmp    al,0x2
c00184d9:	75 1b                	jne    c00184f6 <ACPI::open(int, int, void*)+0xd2>
c00184db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184df:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00184e6:	83 ec 0c             	sub    esp,0xc
c00184e9:	68 ca b5 02 c0       	push   0xc002b5ca
c00184ee:	e8 41 aa ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c00184f3:	83 c4 10             	add    esp,0x10
c00184f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184fa:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018500:	83 f0 01             	xor    eax,0x1
c0018503:	84 c0                	test   al,al
c0018505:	74 6a                	je     c0018571 <ACPI::open(int, int, void*)+0x14d>
c0018507:	83 ec 0c             	sub    esp,0xc
c001850a:	68 d2 b5 02 c0       	push   0xc002b5d2
c001850f:	e8 20 aa ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0018514:	83 c4 10             	add    esp,0x10
c0018517:	e8 34 7c fe ff       	call   c0000150 <manualPCIProbe>
c001851c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018520:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0018525:	75 28                	jne    c001854f <ACPI::open(int, int, void*)+0x12b>
c0018527:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001852b:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018532:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018536:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001853d:	83 ec 0c             	sub    esp,0xc
c0018540:	68 e0 b5 02 c0       	push   0xc002b5e0
c0018545:	e8 ea a9 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001854a:	83 c4 10             	add    esp,0x10
c001854d:	eb 22                	jmp    c0018571 <ACPI::open(int, int, void*)+0x14d>
c001854f:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c0018554:	75 1b                	jne    c0018571 <ACPI::open(int, int, void*)+0x14d>
c0018556:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001855a:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018561:	83 ec 0c             	sub    esp,0xc
c0018564:	68 ea b5 02 c0       	push   0xc002b5ea
c0018569:	e8 c6 a9 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001856e:	83 c4 10             	add    esp,0x10
c0018571:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018575:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001857b:	84 c0                	test   al,al
c001857d:	74 13                	je     c0018592 <ACPI::open(int, int, void*)+0x16e>
c001857f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018583:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c0018589:	83 f0 01             	xor    eax,0x1
c001858c:	0f b6 c0             	movzx  eax,al
c001858f:	40                   	inc    eax
c0018590:	eb 05                	jmp    c0018597 <ACPI::open(int, int, void*)+0x173>
c0018592:	b8 00 00 00 00       	mov    eax,0x0
c0018597:	83 ec 08             	sub    esp,0x8
c001859a:	50                   	push   eax
c001859b:	68 f4 b5 02 c0       	push   0xc002b5f4
c00185a0:	e8 8f a9 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c00185a5:	83 c4 10             	add    esp,0x10
c00185a8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185ac:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00185b2:	84 c0                	test   al,al
c00185b4:	74 67                	je     c001861d <ACPI::open(int, int, void*)+0x1f9>
c00185b6:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c00185be:	83 ec 0c             	sub    esp,0xc
c00185c1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00185c5:	e8 76 72 ff ff       	call   c000f840 <malloc>
c00185ca:	83 c4 10             	add    esp,0x10
c00185cd:	89 c3                	mov    ebx,eax
c00185cf:	83 ec 0c             	sub    esp,0xc
c00185d2:	53                   	push   ebx
c00185d3:	e8 26 a3 00 00       	call   c00228fe <PCI::PCI()>
c00185d8:	83 c4 10             	add    esp,0x10
c00185db:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00185df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185e3:	83 ec 08             	sub    esp,0x8
c00185e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00185ea:	50                   	push   eax
c00185eb:	e8 6a bd ff ff       	call   c001435a <Device::addChild(Device*)>
c00185f0:	83 c4 10             	add    esp,0x10
c00185f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00185f9:	83 c0 08             	add    eax,0x8
c00185fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00185fe:	6a 00                	push   0x0
c0018600:	6a 00                	push   0x0
c0018602:	6a 00                	push   0x0
c0018604:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018608:	ff d0                	call   eax
c001860a:	83 c4 10             	add    esp,0x10
c001860d:	83 ec 0c             	sub    esp,0xc
c0018610:	68 fd b5 02 c0       	push   0xc002b5fd
c0018615:	e8 1a a9 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001861a:	83 c4 10             	add    esp,0x10
c001861d:	83 ec 0c             	sub    esp,0xc
c0018620:	68 08 b6 02 c0       	push   0xc002b608
c0018625:	e8 cb 46 00 00       	call   c001ccf5 <Thr::loadKernelSymbolTable(char const*)>
c001862a:	83 c4 10             	add    esp,0x10
c001862d:	8b 1d c8 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5c8
c0018633:	83 ec 08             	sub    esp,0x8
c0018636:	6a 01                	push   0x1
c0018638:	68 26 b6 02 c0       	push   0xc002b626
c001863d:	e8 10 51 00 00       	call   c001d752 <Thr::loadDLL(char const*, bool)>
c0018642:	83 c4 10             	add    esp,0x10
c0018645:	83 ec 08             	sub    esp,0x8
c0018648:	53                   	push   ebx
c0018649:	50                   	push   eax
c001864a:	e8 37 53 00 00       	call   c001d986 <Thr::executeDLL(unsigned long, void*)>
c001864f:	83 c4 10             	add    esp,0x10
c0018652:	8b 1d c8 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5c8
c0018658:	83 ec 08             	sub    esp,0x8
c001865b:	6a 01                	push   0x1
c001865d:	68 43 b6 02 c0       	push   0xc002b643
c0018662:	e8 eb 50 00 00       	call   c001d752 <Thr::loadDLL(char const*, bool)>
c0018667:	83 c4 10             	add    esp,0x10
c001866a:	83 ec 08             	sub    esp,0x8
c001866d:	53                   	push   ebx
c001866e:	50                   	push   eax
c001866f:	e8 12 53 00 00       	call   c001d986 <Thr::executeDLL(unsigned long, void*)>
c0018674:	83 c4 10             	add    esp,0x10
c0018677:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c001867c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018682:	83 e0 04             	and    eax,0x4
c0018685:	84 c0                	test   al,al
c0018687:	0f 84 d2 00 00 00    	je     c001875f <ACPI::open(int, int, void*)+0x33b>
c001868d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018694:	83 ec 0c             	sub    esp,0xc
c0018697:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001869b:	e8 a0 71 ff ff       	call   c000f840 <malloc>
c00186a0:	83 c4 10             	add    esp,0x10
c00186a3:	89 c3                	mov    ebx,eax
c00186a5:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c00186aa:	83 ec 04             	sub    esp,0x4
c00186ad:	50                   	push   eax
c00186ae:	68 60 b6 02 c0       	push   0xc002b660
c00186b3:	53                   	push   ebx
c00186b4:	e8 d3 ad ff ff       	call   c001348c <File::File(char const*, Process*)>
c00186b9:	83 c4 10             	add    esp,0x10
c00186bc:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00186c0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00186c5:	74 17                	je     c00186de <ACPI::open(int, int, void*)+0x2ba>
c00186c7:	83 ec 0c             	sub    esp,0xc
c00186ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00186ce:	e8 8b b0 ff ff       	call   c001375e <File::exists()>
c00186d3:	83 c4 10             	add    esp,0x10
c00186d6:	84 c0                	test   al,al
c00186d8:	74 04                	je     c00186de <ACPI::open(int, int, void*)+0x2ba>
c00186da:	b0 01                	mov    al,0x1
c00186dc:	eb 02                	jmp    c00186e0 <ACPI::open(int, int, void*)+0x2bc>
c00186de:	b0 00                	mov    al,0x0
c00186e0:	84 c0                	test   al,al
c00186e2:	74 22                	je     c0018706 <ACPI::open(int, int, void*)+0x2e2>
c00186e4:	83 ec 08             	sub    esp,0x8
c00186e7:	6a 01                	push   0x1
c00186e9:	68 60 b6 02 c0       	push   0xc002b660
c00186ee:	e8 5f 50 00 00       	call   c001d752 <Thr::loadDLL(char const*, bool)>
c00186f3:	83 c4 10             	add    esp,0x10
c00186f6:	83 ec 08             	sub    esp,0x8
c00186f9:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00186fd:	50                   	push   eax
c00186fe:	e8 83 52 00 00       	call   c001d986 <Thr::executeDLL(unsigned long, void*)>
c0018703:	83 c4 10             	add    esp,0x10
c0018706:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001870b:	74 1e                	je     c001872b <ACPI::open(int, int, void*)+0x307>
c001870d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018712:	74 17                	je     c001872b <ACPI::open(int, int, void*)+0x307>
c0018714:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018718:	8b 00                	mov    eax,DWORD PTR [eax]
c001871a:	83 c0 08             	add    eax,0x8
c001871d:	8b 00                	mov    eax,DWORD PTR [eax]
c001871f:	83 ec 0c             	sub    esp,0xc
c0018722:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018726:	ff d0                	call   eax
c0018728:	83 c4 10             	add    esp,0x10
c001872b:	a1 a8 0e 03 c0       	mov    eax,ds:0xc0030ea8
c0018730:	83 ec 08             	sub    esp,0x8
c0018733:	68 7d b6 02 c0       	push   0xc002b67d
c0018738:	50                   	push   eax
c0018739:	e8 64 f5 ff ff       	call   c0017ca2 <findDataTable(unsigned char*, char*)>
c001873e:	83 c4 10             	add    esp,0x10
c0018741:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018745:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001874a:	74 13                	je     c001875f <ACPI::open(int, int, void*)+0x33b>
c001874c:	83 ec 08             	sub    esp,0x8
c001874f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018753:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018757:	e8 80 fc ff ff       	call   c00183dc <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001875c:	83 c4 10             	add    esp,0x10
c001875f:	b8 00 00 00 00       	mov    eax,0x0
c0018764:	83 c4 28             	add    esp,0x28
c0018767:	5b                   	pop    ebx
c0018768:	c3                   	ret    
c0018769:	90                   	nop

c001876a <ACPI::sleep()>:
c001876a:	83 ec 0c             	sub    esp,0xc
c001876d:	a1 80 0c 03 c0       	mov    eax,ds:0xc0030c80
c0018772:	85 c0                	test   eax,eax
c0018774:	74 07                	je     c001877d <ACPI::sleep()+0x13>
c0018776:	a1 80 0c 03 c0       	mov    eax,ds:0xc0030c80
c001877b:	ff d0                	call   eax
c001877d:	90                   	nop
c001877e:	83 c4 0c             	add    esp,0xc
c0018781:	c3                   	ret    

c0018782 <CPU::close(int, int, void*)>:
c0018782:	31 c0                	xor    eax,eax
c0018784:	c3                   	ret    
c0018785:	90                   	nop

c0018786 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018786:	55                   	push   ebp
c0018787:	57                   	push   edi
c0018788:	56                   	push   esi
c0018789:	53                   	push   ebx
c001878a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001878e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018792:	89 ce                	mov    esi,ecx
c0018794:	89 d5                	mov    ebp,edx
c0018796:	80 f9 04             	cmp    cl,0x4
c0018799:	75 28                	jne    c00187c3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c001879b:	8d 42 f9             	lea    eax,[edx-0x7]
c001879e:	3c 03                	cmp    al,0x3
c00187a0:	0f 86 63 01 00 00    	jbe    c0018909 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00187a6:	80 fa 03             	cmp    dl,0x3
c00187a9:	0f 84 5a 01 00 00    	je     c0018909 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00187af:	8d 7a f2             	lea    edi,[edx-0xe]
c00187b2:	b8 f0 d9 02 c0       	mov    eax,0xc002d9f0
c00187b7:	89 fb                	mov    ebx,edi
c00187b9:	80 fb 01             	cmp    bl,0x1
c00187bc:	77 4e                	ja     c001880c <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00187be:	e9 52 01 00 00       	jmp    c0018915 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187c3:	80 f9 05             	cmp    cl,0x5
c00187c6:	75 4d                	jne    c0018815 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00187c8:	b8 00 da 02 c0       	mov    eax,0xc002da00
c00187cd:	80 fa 03             	cmp    dl,0x3
c00187d0:	0f 86 3f 01 00 00    	jbe    c0018915 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187d6:	8d 7a fa             	lea    edi,[edx-0x6]
c00187d9:	b8 10 da 02 c0       	mov    eax,0xc002da10
c00187de:	89 fb                	mov    ebx,edi
c00187e0:	80 fb 01             	cmp    bl,0x1
c00187e3:	0f 86 2c 01 00 00    	jbe    c0018915 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187e9:	b8 20 da 02 c0       	mov    eax,0xc002da20
c00187ee:	80 fa 08             	cmp    dl,0x8
c00187f1:	0f 84 1e 01 00 00    	je     c0018915 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187f7:	89 d7                	mov    edi,edx
c00187f9:	b8 30 da 02 c0       	mov    eax,0xc002da30
c00187fe:	83 e7 fb             	and    edi,0xfffffffb
c0018801:	89 fb                	mov    ebx,edi
c0018803:	80 fb 09             	cmp    bl,0x9
c0018806:	0f 84 09 01 00 00    	je     c0018915 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001880c:	31 c0                	xor    eax,eax
c001880e:	89 eb                	mov    ebx,ebp
c0018810:	0f b6 fb             	movzx  edi,bl
c0018813:	eb 30                	jmp    c0018845 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018815:	31 c0                	xor    eax,eax
c0018817:	80 f9 06             	cmp    cl,0x6
c001881a:	75 f2                	jne    c001880e <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001881c:	80 fa 0a             	cmp    dl,0xa
c001881f:	77 ed                	ja     c001880e <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018821:	bf de 05 00 00       	mov    edi,0x5de
c0018826:	0f a3 d7             	bt     edi,edx
c0018829:	73 e3                	jae    c001880e <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001882b:	b8 40 da 02 c0       	mov    eax,0xc002da40
c0018830:	e9 e0 00 00 00       	jmp    c0018915 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018835:	39 c7                	cmp    edi,eax
c0018837:	0f 84 d3 00 00 00    	je     c0018910 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001883d:	40                   	inc    eax
c001883e:	3d d0 00 00 00       	cmp    eax,0xd0
c0018843:	74 09                	je     c001884e <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018845:	89 f3                	mov    ebx,esi
c0018847:	80 fb 0f             	cmp    bl,0xf
c001884a:	75 f1                	jne    c001883d <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c001884c:	eb e7                	jmp    c0018835 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c001884e:	80 f9 10             	cmp    cl,0x10
c0018851:	75 14                	jne    c0018867 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018853:	8d 42 fc             	lea    eax,[edx-0x4]
c0018856:	83 e0 fb             	and    eax,0xfffffffb
c0018859:	3c 02                	cmp    al,0x2
c001885b:	76 34                	jbe    c0018891 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c001885d:	b8 62 ba 02 c0       	mov    eax,0xc002ba62
c0018862:	80 fa 02             	cmp    dl,0x2
c0018865:	eb 24                	jmp    c001888b <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018867:	80 f9 11             	cmp    cl,0x11
c001886a:	75 13                	jne    c001887f <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c001886c:	b8 62 ba 02 c0       	mov    eax,0xc002ba62
c0018871:	80 fa 03             	cmp    dl,0x3
c0018874:	0f 85 9b 00 00 00    	jne    c0018915 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001887a:	e9 91 00 00 00       	jmp    c0018910 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001887f:	80 f9 12             	cmp    cl,0x12
c0018882:	75 14                	jne    c0018898 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018884:	b8 62 ba 02 c0       	mov    eax,0xc002ba62
c0018889:	fe ca                	dec    dl
c001888b:	0f 85 84 00 00 00    	jne    c0018915 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018891:	b8 60 da 02 c0       	mov    eax,0xc002da60
c0018896:	eb 7d                	jmp    c0018915 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018898:	80 f9 14             	cmp    cl,0x14
c001889b:	75 12                	jne    c00188af <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c001889d:	4a                   	dec    edx
c001889e:	b8 62 ba 02 c0       	mov    eax,0xc002ba62
c00188a3:	80 fa 01             	cmp    dl,0x1
c00188a6:	77 6d                	ja     c0018915 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188a8:	b8 70 da 02 c0       	mov    eax,0xc002da70
c00188ad:	eb 66                	jmp    c0018915 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188af:	80 f9 15             	cmp    cl,0x15
c00188b2:	75 31                	jne    c00188e5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00188b4:	b8 80 da 02 c0       	mov    eax,0xc002da80
c00188b9:	80 fa 01             	cmp    dl,0x1
c00188bc:	74 57                	je     c0018915 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188be:	b8 62 ba 02 c0       	mov    eax,0xc002ba62
c00188c3:	80 fa 13             	cmp    dl,0x13
c00188c6:	76 0c                	jbe    c00188d4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00188c8:	80 fa 30             	cmp    dl,0x30
c00188cb:	75 48                	jne    c0018915 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188cd:	b8 a0 da 02 c0       	mov    eax,0xc002daa0
c00188d2:	eb 41                	jmp    c0018915 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188d4:	b9 04 00 09 00       	mov    ecx,0x90004
c00188d9:	0f a3 d1             	bt     ecx,edx
c00188dc:	73 37                	jae    c0018915 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188de:	b8 90 da 02 c0       	mov    eax,0xc002da90
c00188e3:	eb 30                	jmp    c0018915 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188e5:	b8 62 ba 02 c0       	mov    eax,0xc002ba62
c00188ea:	80 f9 16             	cmp    cl,0x16
c00188ed:	75 26                	jne    c0018915 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188ef:	b8 b0 da 02 c0       	mov    eax,0xc002dab0
c00188f4:	84 d2                	test   dl,dl
c00188f6:	74 1d                	je     c0018915 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188f8:	b8 62 ba 02 c0       	mov    eax,0xc002ba62
c00188fd:	80 fa 30             	cmp    dl,0x30
c0018900:	75 13                	jne    c0018915 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018902:	b8 c0 da 02 c0       	mov    eax,0xc002dac0
c0018907:	eb 0c                	jmp    c0018915 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018909:	b8 e0 d9 02 c0       	mov    eax,0xc002d9e0
c001890e:	eb 05                	jmp    c0018915 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018910:	b8 50 da 02 c0       	mov    eax,0xc002da50
c0018915:	5b                   	pop    ebx
c0018916:	5e                   	pop    esi
c0018917:	5f                   	pop    edi
c0018918:	5d                   	pop    ebp
c0018919:	c3                   	ret    

c001891a <CPU::lookupIntelName(unsigned char, unsigned char)>:
c001891a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001891e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018922:	80 f9 04             	cmp    cl,0x4
c0018925:	75 6b                	jne    c0018992 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018927:	b8 40 d8 02 c0       	mov    eax,0xc002d840
c001892c:	80 fa 01             	cmp    dl,0x1
c001892f:	0f 86 92 02 00 00    	jbe    c0018bc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018935:	b8 50 d8 02 c0       	mov    eax,0xc002d850
c001893a:	80 fa 02             	cmp    dl,0x2
c001893d:	0f 84 84 02 00 00    	je     c0018bc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018943:	b8 60 d8 02 c0       	mov    eax,0xc002d860
c0018948:	80 fa 03             	cmp    dl,0x3
c001894b:	0f 84 76 02 00 00    	je     c0018bc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018951:	b8 70 d8 02 c0       	mov    eax,0xc002d870
c0018956:	80 fa 04             	cmp    dl,0x4
c0018959:	0f 84 68 02 00 00    	je     c0018bc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001895f:	b8 80 d8 02 c0       	mov    eax,0xc002d880
c0018964:	80 fa 05             	cmp    dl,0x5
c0018967:	0f 84 5a 02 00 00    	je     c0018bc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001896d:	b8 60 d8 02 c0       	mov    eax,0xc002d860
c0018972:	80 fa 07             	cmp    dl,0x7
c0018975:	0f 84 4c 02 00 00    	je     c0018bc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001897b:	83 ea 08             	sub    edx,0x8
c001897e:	b8 62 ba 02 c0       	mov    eax,0xc002ba62
c0018983:	80 fa 01             	cmp    dl,0x1
c0018986:	0f 87 3b 02 00 00    	ja     c0018bc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001898c:	b8 90 d8 02 c0       	mov    eax,0xc002d890
c0018991:	c3                   	ret    
c0018992:	80 f9 05             	cmp    cl,0x5
c0018995:	75 45                	jne    c00189dc <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018997:	8d 4a ff             	lea    ecx,[edx-0x1]
c001899a:	b8 a0 d8 02 c0       	mov    eax,0xc002d8a0
c001899f:	80 f9 02             	cmp    cl,0x2
c00189a2:	0f 86 1f 02 00 00    	jbe    c0018bc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189a8:	80 fa 04             	cmp    dl,0x4
c00189ab:	0f 84 f3 01 00 00    	je     c0018ba4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00189b1:	80 fa 07             	cmp    dl,0x7
c00189b4:	0f 84 0d 02 00 00    	je     c0018bc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189ba:	b8 b0 d8 02 c0       	mov    eax,0xc002d8b0
c00189bf:	80 fa 08             	cmp    dl,0x8
c00189c2:	0f 84 ff 01 00 00    	je     c0018bc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189c8:	b8 62 ba 02 c0       	mov    eax,0xc002ba62
c00189cd:	80 fa 09             	cmp    dl,0x9
c00189d0:	0f 85 f1 01 00 00    	jne    c0018bc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189d6:	b8 c0 d8 02 c0       	mov    eax,0xc002d8c0
c00189db:	c3                   	ret    
c00189dc:	80 f9 06             	cmp    cl,0x6
c00189df:	0f 85 85 01 00 00    	jne    c0018b6a <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c00189e5:	b8 d0 d8 02 c0       	mov    eax,0xc002d8d0
c00189ea:	80 fa 01             	cmp    dl,0x1
c00189ed:	0f 84 d4 01 00 00    	je     c0018bc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189f3:	8d 42 fb             	lea    eax,[edx-0x5]
c00189f6:	3c 01                	cmp    al,0x1
c00189f8:	0f 86 ac 01 00 00    	jbe    c0018baa <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00189fe:	80 fa 03             	cmp    dl,0x3
c0018a01:	0f 84 a3 01 00 00    	je     c0018baa <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018a07:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018a0a:	b8 f0 d8 02 c0       	mov    eax,0xc002d8f0
c0018a0f:	80 f9 01             	cmp    cl,0x1
c0018a12:	0f 86 af 01 00 00    	jbe    c0018bc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a18:	80 fa 09             	cmp    dl,0x9
c0018a1b:	0f 84 8f 01 00 00    	je     c0018bb0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018a21:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018a24:	80 f9 01             	cmp    cl,0x1
c0018a27:	0f 86 9a 01 00 00    	jbe    c0018bc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a2d:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c0018a32:	80 fa 0d             	cmp    dl,0xd
c0018a35:	0f 84 8c 01 00 00    	je     c0018bc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a3b:	b8 10 d9 02 c0       	mov    eax,0xc002d910
c0018a40:	80 fa 0e             	cmp    dl,0xe
c0018a43:	0f 84 7e 01 00 00    	je     c0018bc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a49:	b8 20 d9 02 c0       	mov    eax,0xc002d920
c0018a4e:	80 fa 0f             	cmp    dl,0xf
c0018a51:	0f 84 70 01 00 00    	je     c0018bc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a57:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c0018a5c:	80 fa 15             	cmp    dl,0x15
c0018a5f:	0f 84 62 01 00 00    	je     c0018bc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a65:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018a68:	b8 20 d9 02 c0       	mov    eax,0xc002d920
c0018a6d:	80 f9 01             	cmp    cl,0x1
c0018a70:	0f 86 51 01 00 00    	jbe    c0018bc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a76:	80 fa 1a             	cmp    dl,0x1a
c0018a79:	0f 84 37 01 00 00    	je     c0018bb6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018a7f:	80 fa 1c             	cmp    dl,0x1c
c0018a82:	0f 84 34 01 00 00    	je     c0018bbc <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018a88:	80 fa 1d             	cmp    dl,0x1d
c0018a8b:	0f 84 36 01 00 00    	je     c0018bc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a91:	b8 50 d9 02 c0       	mov    eax,0xc002d950
c0018a96:	80 fa 25             	cmp    dl,0x25
c0018a99:	0f 84 28 01 00 00    	je     c0018bc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a9f:	8d 4a da             	lea    ecx,[edx-0x26]
c0018aa2:	b8 40 d9 02 c0       	mov    eax,0xc002d940
c0018aa7:	80 f9 01             	cmp    cl,0x1
c0018aaa:	0f 86 17 01 00 00    	jbe    c0018bc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ab0:	b8 60 d9 02 c0       	mov    eax,0xc002d960
c0018ab5:	80 fa 2a             	cmp    dl,0x2a
c0018ab8:	0f 84 09 01 00 00    	je     c0018bc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018abe:	b8 50 d9 02 c0       	mov    eax,0xc002d950
c0018ac3:	80 fa 2c             	cmp    dl,0x2c
c0018ac6:	0f 84 fb 00 00 00    	je     c0018bc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018acc:	b8 60 d9 02 c0       	mov    eax,0xc002d960
c0018ad1:	80 fa 2d             	cmp    dl,0x2d
c0018ad4:	0f 84 ed 00 00 00    	je     c0018bc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ada:	b8 30 d9 02 c0       	mov    eax,0xc002d930
c0018adf:	80 fa 2e             	cmp    dl,0x2e
c0018ae2:	0f 84 df 00 00 00    	je     c0018bc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ae8:	b8 50 d9 02 c0       	mov    eax,0xc002d950
c0018aed:	80 fa 2f             	cmp    dl,0x2f
c0018af0:	0f 84 d1 00 00 00    	je     c0018bc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018af6:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018af9:	b8 40 d9 02 c0       	mov    eax,0xc002d940
c0018afe:	80 f9 01             	cmp    cl,0x1
c0018b01:	0f 86 c0 00 00 00    	jbe    c0018bc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b07:	b8 70 d9 02 c0       	mov    eax,0xc002d970
c0018b0c:	80 fa 37             	cmp    dl,0x37
c0018b0f:	0f 84 b2 00 00 00    	je     c0018bc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b15:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c0018b1a:	80 fa 3a             	cmp    dl,0x3a
c0018b1d:	0f 84 a4 00 00 00    	je     c0018bc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b23:	b8 90 d9 02 c0       	mov    eax,0xc002d990
c0018b28:	80 fa 3c             	cmp    dl,0x3c
c0018b2b:	0f 84 96 00 00 00    	je     c0018bc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b31:	b8 a0 d9 02 c0       	mov    eax,0xc002d9a0
c0018b36:	80 fa 3d             	cmp    dl,0x3d
c0018b39:	0f 84 88 00 00 00    	je     c0018bc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b3f:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c0018b44:	80 fa 3e             	cmp    dl,0x3e
c0018b47:	74 7e                	je     c0018bc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b49:	8d 42 bb             	lea    eax,[edx-0x45]
c0018b4c:	3c 01                	cmp    al,0x1
c0018b4e:	76 72                	jbe    c0018bc2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018b50:	80 fa 3f             	cmp    dl,0x3f
c0018b53:	74 6d                	je     c0018bc2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018b55:	80 fa 4a             	cmp    dl,0x4a
c0018b58:	74 0a                	je     c0018b64 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018b5a:	b8 62 ba 02 c0       	mov    eax,0xc002ba62
c0018b5f:	80 fa 4d             	cmp    dl,0x4d
c0018b62:	75 63                	jne    c0018bc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b64:	b8 70 d9 02 c0       	mov    eax,0xc002d970
c0018b69:	c3                   	ret    
c0018b6a:	b8 62 ba 02 c0       	mov    eax,0xc002ba62
c0018b6f:	80 f9 0b             	cmp    cl,0xb
c0018b72:	75 0a                	jne    c0018b7e <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018b74:	fe ca                	dec    dl
c0018b76:	75 4f                	jne    c0018bc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b78:	b8 b0 d9 02 c0       	mov    eax,0xc002d9b0
c0018b7d:	c3                   	ret    
c0018b7e:	80 f9 0f             	cmp    cl,0xf
c0018b81:	75 44                	jne    c0018bc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b83:	b8 c0 d9 02 c0       	mov    eax,0xc002d9c0
c0018b88:	80 fa 02             	cmp    dl,0x2
c0018b8b:	76 3a                	jbe    c0018bc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b8d:	8d 42 fd             	lea    eax,[edx-0x3]
c0018b90:	3c 01                	cmp    al,0x1
c0018b92:	76 0a                	jbe    c0018b9e <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018b94:	b8 62 ba 02 c0       	mov    eax,0xc002ba62
c0018b99:	80 fa 06             	cmp    dl,0x6
c0018b9c:	75 29                	jne    c0018bc7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b9e:	b8 d0 d9 02 c0       	mov    eax,0xc002d9d0
c0018ba3:	c3                   	ret    
c0018ba4:	b8 b0 d8 02 c0       	mov    eax,0xc002d8b0
c0018ba9:	c3                   	ret    
c0018baa:	b8 e0 d8 02 c0       	mov    eax,0xc002d8e0
c0018baf:	c3                   	ret    
c0018bb0:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c0018bb5:	c3                   	ret    
c0018bb6:	b8 30 d9 02 c0       	mov    eax,0xc002d930
c0018bbb:	c3                   	ret    
c0018bbc:	b8 40 d9 02 c0       	mov    eax,0xc002d940
c0018bc1:	c3                   	ret    
c0018bc2:	b8 90 d9 02 c0       	mov    eax,0xc002d990
c0018bc7:	c3                   	ret    

c0018bc8 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018bc8:	60                   	pusha  
c0018bc9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018bcd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018bd1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018bd5:	9c                   	pushf  
c0018bd6:	fa                   	cli    
c0018bd7:	0f 09                	wbinvd 
c0018bd9:	0f 30                	wrmsr  
c0018bdb:	9d                   	popf   
c0018bdc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018be0:	89 02                	mov    DWORD PTR [edx],eax
c0018be2:	61                   	popa   
c0018be3:	c3                   	ret    

c0018be4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018be4:	60                   	pusha  
c0018be5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018be9:	9c                   	pushf  
c0018bea:	fa                   	cli    
c0018beb:	0f 09                	wbinvd 
c0018bed:	31 c0                	xor    eax,eax
c0018bef:	31 d2                	xor    edx,edx
c0018bf1:	0f 32                	rdmsr  
c0018bf3:	9d                   	popf   
c0018bf4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018bf8:	89 02                	mov    DWORD PTR [edx],eax
c0018bfa:	61                   	popa   
c0018bfb:	c3                   	ret    

c0018bfc <CPU::AMD_K6_writeback(int, int, int)>:
c0018bfc:	56                   	push   esi
c0018bfd:	53                   	push   ebx
c0018bfe:	83 ec 10             	sub    esp,0x10
c0018c01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c05:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018c0a:	75 5d                	jne    c0018c69 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c0c:	83 f8 08             	cmp    eax,0x8
c0018c0f:	75 09                	jne    c0018c1a <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018c11:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018c16:	7e 13                	jle    c0018c2b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018c18:	eb 30                	jmp    c0018c4a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018c1a:	83 f8 06             	cmp    eax,0x6
c0018c1d:	7c 4a                	jl     c0018c69 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c1f:	83 f8 07             	cmp    eax,0x7
c0018c22:	7e 07                	jle    c0018c2b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018c24:	83 f8 09             	cmp    eax,0x9
c0018c27:	74 21                	je     c0018c4a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018c29:	eb 3e                	jmp    c0018c69 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c2b:	89 e6                	mov    esi,esp
c0018c2d:	8b 1d 08 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e608
c0018c33:	56                   	push   esi
c0018c34:	c1 eb 15             	shr    ebx,0x15
c0018c37:	68 82 00 00 c0       	push   0xc0000082
c0018c3c:	83 e3 7e             	and    ebx,0x7e
c0018c3f:	e8 a0 ff ff ff       	call   c0018be4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018c44:	56                   	push   esi
c0018c45:	6a 00                	push   0x0
c0018c47:	53                   	push   ebx
c0018c48:	eb 12                	jmp    c0018c5c <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018c4a:	89 e3                	mov    ebx,esp
c0018c4c:	53                   	push   ebx
c0018c4d:	68 82 00 00 c0       	push   0xc0000082
c0018c52:	e8 8d ff ff ff       	call   c0018be4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018c57:	53                   	push   ebx
c0018c58:	6a 00                	push   0x0
c0018c5a:	6a 00                	push   0x0
c0018c5c:	68 82 00 00 c0       	push   0xc0000082
c0018c61:	e8 62 ff ff ff       	call   c0018bc8 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018c66:	83 c4 18             	add    esp,0x18
c0018c69:	83 c4 10             	add    esp,0x10
c0018c6c:	5b                   	pop    ebx
c0018c6d:	5e                   	pop    esi
c0018c6e:	c3                   	ret    
c0018c6f:	90                   	nop

c0018c70 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018c70:	55                   	push   ebp
c0018c71:	57                   	push   edi
c0018c72:	56                   	push   esi
c0018c73:	53                   	push   ebx
c0018c74:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c78:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018c7c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018c80:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018c84:	39 05 e0 da 02 c0    	cmp    DWORD PTR ds:0xc002dae0,eax
c0018c8a:	75 23                	jne    c0018caf <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018c8c:	a1 0c 11 03 c0       	mov    eax,ds:0xc003110c
c0018c91:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018c95:	89 06                	mov    DWORD PTR [esi],eax
c0018c97:	a1 08 11 03 c0       	mov    eax,ds:0xc0031108
c0018c9c:	89 07                	mov    DWORD PTR [edi],eax
c0018c9e:	a1 04 11 03 c0       	mov    eax,ds:0xc0031104
c0018ca3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018ca6:	a1 00 11 03 c0       	mov    eax,ds:0xc0031100
c0018cab:	89 02                	mov    DWORD PTR [edx],eax
c0018cad:	eb 3f                	jmp    c0018cee <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018caf:	31 c9                	xor    ecx,ecx
c0018cb1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018cb5:	0f a2                	cpuid  
c0018cb7:	89 06                	mov    DWORD PTR [esi],eax
c0018cb9:	89 1f                	mov    DWORD PTR [edi],ebx
c0018cbb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018cbf:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018cc2:	89 10                	mov    DWORD PTR [eax],edx
c0018cc4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018cc8:	a3 e0 da 02 c0       	mov    ds:0xc002dae0,eax
c0018ccd:	8b 06                	mov    eax,DWORD PTR [esi]
c0018ccf:	a3 0c 11 03 c0       	mov    ds:0xc003110c,eax
c0018cd4:	8b 07                	mov    eax,DWORD PTR [edi]
c0018cd6:	a3 08 11 03 c0       	mov    ds:0xc0031108,eax
c0018cdb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018cde:	a3 04 11 03 c0       	mov    ds:0xc0031104,eax
c0018ce3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018ce7:	8b 00                	mov    eax,DWORD PTR [eax]
c0018ce9:	a3 00 11 03 c0       	mov    ds:0xc0031100,eax
c0018cee:	5b                   	pop    ebx
c0018cef:	5e                   	pop    esi
c0018cf0:	5f                   	pop    edi
c0018cf1:	5d                   	pop    ebp
c0018cf2:	c3                   	ret    
c0018cf3:	90                   	nop

c0018cf4 <CPU::cpuidCheckEDX(unsigned int)>:
c0018cf4:	83 ec 10             	sub    esp,0x10
c0018cf7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cfb:	50                   	push   eax
c0018cfc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d00:	50                   	push   eax
c0018d01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d05:	50                   	push   eax
c0018d06:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d0a:	50                   	push   eax
c0018d0b:	6a 01                	push   0x1
c0018d0d:	e8 5e ff ff ff       	call   c0018c70 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d12:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d16:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018d1a:	0f 95 c0             	setne  al
c0018d1d:	83 c4 24             	add    esp,0x24
c0018d20:	c3                   	ret    
c0018d21:	90                   	nop

c0018d22 <CPU::cpuidCheckECX(unsigned int)>:
c0018d22:	83 ec 10             	sub    esp,0x10
c0018d25:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d29:	50                   	push   eax
c0018d2a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d2e:	50                   	push   eax
c0018d2f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d33:	50                   	push   eax
c0018d34:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d38:	50                   	push   eax
c0018d39:	6a 01                	push   0x1
c0018d3b:	e8 30 ff ff ff       	call   c0018c70 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d40:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d44:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018d48:	0f 95 c0             	setne  al
c0018d4b:	83 c4 24             	add    esp,0x24
c0018d4e:	c3                   	ret    
c0018d4f:	90                   	nop

c0018d50 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018d50:	83 ec 10             	sub    esp,0x10
c0018d53:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d57:	50                   	push   eax
c0018d58:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d5c:	50                   	push   eax
c0018d5d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d61:	50                   	push   eax
c0018d62:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d66:	50                   	push   eax
c0018d67:	6a 07                	push   0x7
c0018d69:	e8 02 ff ff ff       	call   c0018c70 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d6e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d72:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018d76:	0f 95 c0             	setne  al
c0018d79:	83 c4 24             	add    esp,0x24
c0018d7c:	c3                   	ret    
c0018d7d:	90                   	nop

c0018d7e <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018d7e:	83 ec 10             	sub    esp,0x10
c0018d81:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d85:	50                   	push   eax
c0018d86:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d8a:	50                   	push   eax
c0018d8b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d8f:	50                   	push   eax
c0018d90:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d94:	50                   	push   eax
c0018d95:	6a 07                	push   0x7
c0018d97:	e8 d4 fe ff ff       	call   c0018c70 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d9c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018da0:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018da4:	0f 95 c0             	setne  al
c0018da7:	83 c4 24             	add    esp,0x24
c0018daa:	c3                   	ret    
c0018dab:	90                   	nop

c0018dac <CPU::CPU()>:
c0018dac:	83 ec 0c             	sub    esp,0xc
c0018daf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018db3:	83 ec 08             	sub    esp,0x8
c0018db6:	68 62 ba 02 c0       	push   0xc002ba62
c0018dbb:	50                   	push   eax
c0018dbc:	e8 89 b7 ff ff       	call   c001454a <Device::Device(char const*)>
c0018dc1:	83 c4 10             	add    esp,0x10
c0018dc4:	ba 3c bb 02 c0       	mov    edx,0xc002bb3c
c0018dc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018dcd:	89 10                	mov    DWORD PTR [eax],edx
c0018dcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018dd3:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018ddd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018de1:	05 78 01 00 00       	add    eax,0x178
c0018de6:	83 ec 0c             	sub    esp,0xc
c0018de9:	50                   	push   eax
c0018dea:	e8 69 62 ff ff       	call   c000f058 <GDT::GDT()>
c0018def:	83 c4 10             	add    esp,0x10
c0018df2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018df6:	05 7c 09 00 00       	add    eax,0x97c
c0018dfb:	83 ec 0c             	sub    esp,0xc
c0018dfe:	50                   	push   eax
c0018dff:	e8 b6 64 ff ff       	call   c000f2ba <IDT::IDT()>
c0018e04:	83 c4 10             	add    esp,0x10
c0018e07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e0b:	05 7c 11 00 00       	add    eax,0x117c
c0018e10:	83 ec 0c             	sub    esp,0xc
c0018e13:	50                   	push   eax
c0018e14:	e8 a3 86 ff ff       	call   c00114bc <TSS::TSS()>
c0018e19:	83 c4 10             	add    esp,0x10
c0018e1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e20:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018e27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e2b:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018e35:	90                   	nop
c0018e36:	83 c4 0c             	add    esp,0xc
c0018e39:	c3                   	ret    

c0018e3a <CPU::displayFeatures()>:
c0018e3a:	53                   	push   ebx
c0018e3b:	83 ec 10             	sub    esp,0x10
c0018e3e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018e42:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018e48:	68 70 b7 02 c0       	push   0xc002b770
c0018e4d:	e8 e2 a0 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0018e52:	59                   	pop    ecx
c0018e53:	58                   	pop    eax
c0018e54:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018e5a:	50                   	push   eax
c0018e5b:	68 81 b7 02 c0       	push   0xc002b781
c0018e60:	e8 cf a0 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0018e65:	58                   	pop    eax
c0018e66:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e6c:	5a                   	pop    edx
c0018e6d:	c1 e8 0e             	shr    eax,0xe
c0018e70:	0f b6 c0             	movzx  eax,al
c0018e73:	50                   	push   eax
c0018e74:	68 92 b7 02 c0       	push   0xc002b792
c0018e79:	e8 b6 a0 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0018e7e:	59                   	pop    ecx
c0018e7f:	58                   	pop    eax
c0018e80:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e86:	66 c1 e8 06          	shr    ax,0x6
c0018e8a:	0f b6 c0             	movzx  eax,al
c0018e8d:	50                   	push   eax
c0018e8e:	68 a3 b7 02 c0       	push   0xc002b7a3
c0018e93:	e8 9c a0 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0018e98:	c7 04 24 50 bc 02 c0 	mov    DWORD PTR [esp],0xc002bc50
c0018e9f:	e8 90 a0 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0018ea4:	83 c4 10             	add    esp,0x10
c0018ea7:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c0018eac:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018eb3:	74 05                	je     c0018eba <CPU::displayFeatures()+0x80>
c0018eb5:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0018eba:	52                   	push   edx
c0018ebb:	52                   	push   edx
c0018ebc:	50                   	push   eax
c0018ebd:	68 b4 b7 02 c0       	push   0xc002b7b4
c0018ec2:	e8 6d a0 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0018ec7:	83 c4 10             	add    esp,0x10
c0018eca:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0018ecf:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018ed6:	78 05                	js     c0018edd <CPU::displayFeatures()+0xa3>
c0018ed8:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c0018edd:	51                   	push   ecx
c0018ede:	51                   	push   ecx
c0018edf:	50                   	push   eax
c0018ee0:	68 cb b7 02 c0       	push   0xc002b7cb
c0018ee5:	e8 4a a0 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0018eea:	83 c4 10             	add    esp,0x10
c0018eed:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0018ef2:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018ef9:	75 05                	jne    c0018f00 <CPU::displayFeatures()+0xc6>
c0018efb:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c0018f00:	52                   	push   edx
c0018f01:	52                   	push   edx
c0018f02:	50                   	push   eax
c0018f03:	68 e2 b7 02 c0       	push   0xc002b7e2
c0018f08:	e8 27 a0 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0018f0d:	83 c4 10             	add    esp,0x10
c0018f10:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0018f15:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018f1c:	75 05                	jne    c0018f23 <CPU::displayFeatures()+0xe9>
c0018f1e:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c0018f23:	51                   	push   ecx
c0018f24:	51                   	push   ecx
c0018f25:	50                   	push   eax
c0018f26:	68 f9 b7 02 c0       	push   0xc002b7f9
c0018f2b:	e8 04 a0 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0018f30:	83 c4 10             	add    esp,0x10
c0018f33:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0018f38:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018f3f:	75 05                	jne    c0018f46 <CPU::displayFeatures()+0x10c>
c0018f41:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c0018f46:	52                   	push   edx
c0018f47:	52                   	push   edx
c0018f48:	50                   	push   eax
c0018f49:	68 10 b8 02 c0       	push   0xc002b810
c0018f4e:	e8 e1 9f ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0018f53:	83 c4 10             	add    esp,0x10
c0018f56:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0018f5b:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018f62:	75 05                	jne    c0018f69 <CPU::displayFeatures()+0x12f>
c0018f64:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c0018f69:	51                   	push   ecx
c0018f6a:	51                   	push   ecx
c0018f6b:	50                   	push   eax
c0018f6c:	68 27 b8 02 c0       	push   0xc002b827
c0018f71:	e8 be 9f ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0018f76:	83 c4 10             	add    esp,0x10
c0018f79:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0018f7e:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018f85:	75 05                	jne    c0018f8c <CPU::displayFeatures()+0x152>
c0018f87:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c0018f8c:	52                   	push   edx
c0018f8d:	52                   	push   edx
c0018f8e:	50                   	push   eax
c0018f8f:	68 3e b8 02 c0       	push   0xc002b83e
c0018f94:	e8 9b 9f ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0018f99:	83 c4 10             	add    esp,0x10
c0018f9c:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0018fa1:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018fa8:	75 05                	jne    c0018faf <CPU::displayFeatures()+0x175>
c0018faa:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c0018faf:	51                   	push   ecx
c0018fb0:	51                   	push   ecx
c0018fb1:	50                   	push   eax
c0018fb2:	68 55 b8 02 c0       	push   0xc002b855
c0018fb7:	e8 78 9f ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0018fbc:	83 c4 10             	add    esp,0x10
c0018fbf:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0018fc4:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018fcb:	75 05                	jne    c0018fd2 <CPU::displayFeatures()+0x198>
c0018fcd:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c0018fd2:	52                   	push   edx
c0018fd3:	52                   	push   edx
c0018fd4:	50                   	push   eax
c0018fd5:	68 6c b8 02 c0       	push   0xc002b86c
c0018fda:	e8 55 9f ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0018fdf:	83 c4 10             	add    esp,0x10
c0018fe2:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0018fe7:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0018fee:	75 05                	jne    c0018ff5 <CPU::displayFeatures()+0x1bb>
c0018ff0:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c0018ff5:	51                   	push   ecx
c0018ff6:	51                   	push   ecx
c0018ff7:	50                   	push   eax
c0018ff8:	68 83 b8 02 c0       	push   0xc002b883
c0018ffd:	e8 32 9f ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0019002:	83 c4 10             	add    esp,0x10
c0019005:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c001900a:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0019011:	75 05                	jne    c0019018 <CPU::displayFeatures()+0x1de>
c0019013:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c0019018:	52                   	push   edx
c0019019:	52                   	push   edx
c001901a:	50                   	push   eax
c001901b:	68 9a b8 02 c0       	push   0xc002b89a
c0019020:	e8 0f 9f ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0019025:	83 c4 10             	add    esp,0x10
c0019028:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c001902d:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0019034:	75 05                	jne    c001903b <CPU::displayFeatures()+0x201>
c0019036:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c001903b:	51                   	push   ecx
c001903c:	51                   	push   ecx
c001903d:	50                   	push   eax
c001903e:	68 b1 b8 02 c0       	push   0xc002b8b1
c0019043:	e8 ec 9e ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0019048:	83 c4 10             	add    esp,0x10
c001904b:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0019050:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0019057:	75 05                	jne    c001905e <CPU::displayFeatures()+0x224>
c0019059:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c001905e:	52                   	push   edx
c001905f:	52                   	push   edx
c0019060:	50                   	push   eax
c0019061:	68 c8 b8 02 c0       	push   0xc002b8c8
c0019066:	e8 c9 9e ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001906b:	83 c4 10             	add    esp,0x10
c001906e:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0019073:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c001907a:	78 05                	js     c0019081 <CPU::displayFeatures()+0x247>
c001907c:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c0019081:	51                   	push   ecx
c0019082:	51                   	push   ecx
c0019083:	50                   	push   eax
c0019084:	68 df b8 02 c0       	push   0xc002b8df
c0019089:	e8 a6 9e ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001908e:	83 c4 10             	add    esp,0x10
c0019091:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0019096:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c001909d:	75 05                	jne    c00190a4 <CPU::displayFeatures()+0x26a>
c001909f:	b8 36 a0 02 c0       	mov    eax,0xc002a036
c00190a4:	52                   	push   edx
c00190a5:	52                   	push   edx
c00190a6:	50                   	push   eax
c00190a7:	68 f6 b8 02 c0       	push   0xc002b8f6
c00190ac:	e8 83 9e ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c00190b1:	83 c4 18             	add    esp,0x18
c00190b4:	5b                   	pop    ebx
c00190b5:	c3                   	ret    

c00190b6 <CPU::detectFeatures()>:
c00190b6:	55                   	push   ebp
c00190b7:	57                   	push   edi
c00190b8:	56                   	push   esi
c00190b9:	53                   	push   ebx
c00190ba:	83 ec 50             	sub    esp,0x50
c00190bd:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00190c1:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c00190cb:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c00190d2:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c00190d8:	6a 0d                	push   0xd
c00190da:	6a 00                	push   0x0
c00190dc:	57                   	push   edi
c00190dd:	e8 96 76 fe ff       	call   c0000778 <memset>
c00190e2:	83 c4 10             	add    esp,0x10
c00190e5:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c00190ea:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00190f1:	0f 84 20 09 00 00    	je     c0019a17 <CPU::detectFeatures()+0x961>
c00190f7:	83 ec 0c             	sub    esp,0xc
c00190fa:	6a 10                	push   0x10
c00190fc:	e8 f3 fb ff ff       	call   c0018cf4 <CPU::cpuidCheckEDX(unsigned int)>
c0019101:	83 e0 01             	and    eax,0x1
c0019104:	8d 14 00             	lea    edx,[eax+eax*1]
c0019107:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001910d:	83 e0 fd             	and    eax,0xfffffffd
c0019110:	09 d0                	or     eax,edx
c0019112:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019118:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001911f:	e8 d0 fb ff ff       	call   c0018cf4 <CPU::cpuidCheckEDX(unsigned int)>
c0019124:	83 e0 01             	and    eax,0x1
c0019127:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001912e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019134:	83 e0 fb             	and    eax,0xfffffffb
c0019137:	09 d0                	or     eax,edx
c0019139:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001913f:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0019146:	e8 a9 fb ff ff       	call   c0018cf4 <CPU::cpuidCheckEDX(unsigned int)>
c001914b:	83 e0 01             	and    eax,0x1
c001914e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0019155:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001915b:	83 e0 f7             	and    eax,0xfffffff7
c001915e:	09 d0                	or     eax,edx
c0019160:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019166:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001916d:	e8 82 fb ff ff       	call   c0018cf4 <CPU::cpuidCheckEDX(unsigned int)>
c0019172:	83 e0 01             	and    eax,0x1
c0019175:	c1 e0 04             	shl    eax,0x4
c0019178:	88 c2                	mov    dl,al
c001917a:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019180:	83 e0 ef             	and    eax,0xffffffef
c0019183:	09 d0                	or     eax,edx
c0019185:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001918b:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0019192:	e8 5d fb ff ff       	call   c0018cf4 <CPU::cpuidCheckEDX(unsigned int)>
c0019197:	83 e0 01             	and    eax,0x1
c001919a:	c1 e0 05             	shl    eax,0x5
c001919d:	88 c2                	mov    dl,al
c001919f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191a5:	83 e0 df             	and    eax,0xffffffdf
c00191a8:	09 d0                	or     eax,edx
c00191aa:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191b0:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00191b7:	e8 38 fb ff ff       	call   c0018cf4 <CPU::cpuidCheckEDX(unsigned int)>
c00191bc:	83 e0 01             	and    eax,0x1
c00191bf:	8d 14 00             	lea    edx,[eax+eax*1]
c00191c2:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00191c8:	83 e0 fd             	and    eax,0xfffffffd
c00191cb:	09 d0                	or     eax,edx
c00191cd:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00191d3:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00191da:	e8 15 fb ff ff       	call   c0018cf4 <CPU::cpuidCheckEDX(unsigned int)>
c00191df:	83 e0 01             	and    eax,0x1
c00191e2:	c1 e0 06             	shl    eax,0x6
c00191e5:	88 c2                	mov    dl,al
c00191e7:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00191ed:	83 e0 bf             	and    eax,0xffffffbf
c00191f0:	09 d0                	or     eax,edx
c00191f2:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00191f8:	58                   	pop    eax
c00191f9:	8d 74 24 28          	lea    esi,[esp+0x28]
c00191fd:	56                   	push   esi
c00191fe:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019202:	55                   	push   ebp
c0019203:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019207:	50                   	push   eax
c0019208:	8d 54 24 28          	lea    edx,[esp+0x28]
c001920c:	52                   	push   edx
c001920d:	6a 00                	push   0x0
c001920f:	e8 5c fa ff ff       	call   c0018c70 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019214:	83 c4 1c             	add    esp,0x1c
c0019217:	6a 04                	push   0x4
c0019219:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001921d:	50                   	push   eax
c001921e:	57                   	push   edi
c001921f:	e8 20 75 fe ff       	call   c0000744 <memcpy>
c0019224:	83 c4 0c             	add    esp,0xc
c0019227:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c001922d:	6a 04                	push   0x4
c001922f:	56                   	push   esi
c0019230:	50                   	push   eax
c0019231:	e8 0e 75 fe ff       	call   c0000744 <memcpy>
c0019236:	83 c4 0c             	add    esp,0xc
c0019239:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c001923f:	6a 04                	push   0x4
c0019241:	55                   	push   ebp
c0019242:	50                   	push   eax
c0019243:	e8 fc 74 fe ff       	call   c0000744 <memcpy>
c0019248:	58                   	pop    eax
c0019249:	5a                   	pop    edx
c001924a:	68 0d b9 02 c0       	push   0xc002b90d
c001924f:	57                   	push   edi
c0019250:	e8 6b 76 fe ff       	call   c00008c0 <strcmp>
c0019255:	83 c4 10             	add    esp,0x10
c0019258:	85 c0                	test   eax,eax
c001925a:	75 0f                	jne    c001926b <CPU::detectFeatures()+0x1b5>
c001925c:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0019266:	e9 22 02 00 00       	jmp    c001948d <CPU::detectFeatures()+0x3d7>
c001926b:	50                   	push   eax
c001926c:	50                   	push   eax
c001926d:	68 1a b9 02 c0       	push   0xc002b91a
c0019272:	57                   	push   edi
c0019273:	e8 48 76 fe ff       	call   c00008c0 <strcmp>
c0019278:	83 c4 10             	add    esp,0x10
c001927b:	85 c0                	test   eax,eax
c001927d:	74 dd                	je     c001925c <CPU::detectFeatures()+0x1a6>
c001927f:	51                   	push   ecx
c0019280:	51                   	push   ecx
c0019281:	68 27 b9 02 c0       	push   0xc002b927
c0019286:	57                   	push   edi
c0019287:	e8 34 76 fe ff       	call   c00008c0 <strcmp>
c001928c:	83 c4 10             	add    esp,0x10
c001928f:	85 c0                	test   eax,eax
c0019291:	74 2a                	je     c00192bd <CPU::detectFeatures()+0x207>
c0019293:	52                   	push   edx
c0019294:	52                   	push   edx
c0019295:	68 34 b9 02 c0       	push   0xc002b934
c001929a:	57                   	push   edi
c001929b:	e8 20 76 fe ff       	call   c00008c0 <strcmp>
c00192a0:	83 c4 10             	add    esp,0x10
c00192a3:	85 c0                	test   eax,eax
c00192a5:	74 16                	je     c00192bd <CPU::detectFeatures()+0x207>
c00192a7:	50                   	push   eax
c00192a8:	50                   	push   eax
c00192a9:	68 41 b9 02 c0       	push   0xc002b941
c00192ae:	57                   	push   edi
c00192af:	e8 0c 76 fe ff       	call   c00008c0 <strcmp>
c00192b4:	83 c4 10             	add    esp,0x10
c00192b7:	85 c0                	test   eax,eax
c00192b9:	74 48                	je     c0019303 <CPU::detectFeatures()+0x24d>
c00192bb:	eb 0f                	jmp    c00192cc <CPU::detectFeatures()+0x216>
c00192bd:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00192c7:	e9 c1 01 00 00       	jmp    c001948d <CPU::detectFeatures()+0x3d7>
c00192cc:	50                   	push   eax
c00192cd:	50                   	push   eax
c00192ce:	68 4e b9 02 c0       	push   0xc002b94e
c00192d3:	57                   	push   edi
c00192d4:	e8 e7 75 fe ff       	call   c00008c0 <strcmp>
c00192d9:	83 c4 10             	add    esp,0x10
c00192dc:	85 c0                	test   eax,eax
c00192de:	74 23                	je     c0019303 <CPU::detectFeatures()+0x24d>
c00192e0:	50                   	push   eax
c00192e1:	50                   	push   eax
c00192e2:	68 5b b9 02 c0       	push   0xc002b95b
c00192e7:	57                   	push   edi
c00192e8:	e8 d3 75 fe ff       	call   c00008c0 <strcmp>
c00192ed:	83 c4 10             	add    esp,0x10
c00192f0:	85 c0                	test   eax,eax
c00192f2:	75 1e                	jne    c0019312 <CPU::detectFeatures()+0x25c>
c00192f4:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00192fe:	e9 8a 01 00 00       	jmp    c001948d <CPU::detectFeatures()+0x3d7>
c0019303:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001930d:	e9 7b 01 00 00       	jmp    c001948d <CPU::detectFeatures()+0x3d7>
c0019312:	50                   	push   eax
c0019313:	50                   	push   eax
c0019314:	68 68 b9 02 c0       	push   0xc002b968
c0019319:	57                   	push   edi
c001931a:	e8 a1 75 fe ff       	call   c00008c0 <strcmp>
c001931f:	83 c4 10             	add    esp,0x10
c0019322:	85 c0                	test   eax,eax
c0019324:	75 0f                	jne    c0019335 <CPU::detectFeatures()+0x27f>
c0019326:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0019330:	e9 58 01 00 00       	jmp    c001948d <CPU::detectFeatures()+0x3d7>
c0019335:	50                   	push   eax
c0019336:	50                   	push   eax
c0019337:	68 27 b9 02 c0       	push   0xc002b927
c001933c:	57                   	push   edi
c001933d:	e8 7e 75 fe ff       	call   c00008c0 <strcmp>
c0019342:	83 c4 10             	add    esp,0x10
c0019345:	85 c0                	test   eax,eax
c0019347:	75 0f                	jne    c0019358 <CPU::detectFeatures()+0x2a2>
c0019349:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0019353:	e9 35 01 00 00       	jmp    c001948d <CPU::detectFeatures()+0x3d7>
c0019358:	50                   	push   eax
c0019359:	50                   	push   eax
c001935a:	68 75 b9 02 c0       	push   0xc002b975
c001935f:	57                   	push   edi
c0019360:	e8 5b 75 fe ff       	call   c00008c0 <strcmp>
c0019365:	83 c4 10             	add    esp,0x10
c0019368:	85 c0                	test   eax,eax
c001936a:	75 0f                	jne    c001937b <CPU::detectFeatures()+0x2c5>
c001936c:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0019376:	e9 12 01 00 00       	jmp    c001948d <CPU::detectFeatures()+0x3d7>
c001937b:	51                   	push   ecx
c001937c:	51                   	push   ecx
c001937d:	68 82 b9 02 c0       	push   0xc002b982
c0019382:	57                   	push   edi
c0019383:	e8 38 75 fe ff       	call   c00008c0 <strcmp>
c0019388:	83 c4 10             	add    esp,0x10
c001938b:	85 c0                	test   eax,eax
c001938d:	75 0f                	jne    c001939e <CPU::detectFeatures()+0x2e8>
c001938f:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0019399:	e9 ef 00 00 00       	jmp    c001948d <CPU::detectFeatures()+0x3d7>
c001939e:	52                   	push   edx
c001939f:	52                   	push   edx
c00193a0:	68 8f b9 02 c0       	push   0xc002b98f
c00193a5:	57                   	push   edi
c00193a6:	e8 15 75 fe ff       	call   c00008c0 <strcmp>
c00193ab:	83 c4 10             	add    esp,0x10
c00193ae:	85 c0                	test   eax,eax
c00193b0:	75 0f                	jne    c00193c1 <CPU::detectFeatures()+0x30b>
c00193b2:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00193bc:	e9 cc 00 00 00       	jmp    c001948d <CPU::detectFeatures()+0x3d7>
c00193c1:	50                   	push   eax
c00193c2:	50                   	push   eax
c00193c3:	68 9c b9 02 c0       	push   0xc002b99c
c00193c8:	57                   	push   edi
c00193c9:	e8 f2 74 fe ff       	call   c00008c0 <strcmp>
c00193ce:	83 c4 10             	add    esp,0x10
c00193d1:	85 c0                	test   eax,eax
c00193d3:	75 0f                	jne    c00193e4 <CPU::detectFeatures()+0x32e>
c00193d5:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00193df:	e9 a9 00 00 00       	jmp    c001948d <CPU::detectFeatures()+0x3d7>
c00193e4:	50                   	push   eax
c00193e5:	50                   	push   eax
c00193e6:	68 a9 b9 02 c0       	push   0xc002b9a9
c00193eb:	57                   	push   edi
c00193ec:	e8 cf 74 fe ff       	call   c00008c0 <strcmp>
c00193f1:	83 c4 10             	add    esp,0x10
c00193f4:	85 c0                	test   eax,eax
c00193f6:	75 0f                	jne    c0019407 <CPU::detectFeatures()+0x351>
c00193f8:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0019402:	e9 86 00 00 00       	jmp    c001948d <CPU::detectFeatures()+0x3d7>
c0019407:	50                   	push   eax
c0019408:	50                   	push   eax
c0019409:	68 b6 b9 02 c0       	push   0xc002b9b6
c001940e:	57                   	push   edi
c001940f:	e8 ac 74 fe ff       	call   c00008c0 <strcmp>
c0019414:	83 c4 10             	add    esp,0x10
c0019417:	85 c0                	test   eax,eax
c0019419:	75 0c                	jne    c0019427 <CPU::detectFeatures()+0x371>
c001941b:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0019425:	eb 66                	jmp    c001948d <CPU::detectFeatures()+0x3d7>
c0019427:	50                   	push   eax
c0019428:	50                   	push   eax
c0019429:	68 c3 b9 02 c0       	push   0xc002b9c3
c001942e:	57                   	push   edi
c001942f:	e8 8c 74 fe ff       	call   c00008c0 <strcmp>
c0019434:	83 c4 10             	add    esp,0x10
c0019437:	85 c0                	test   eax,eax
c0019439:	75 0c                	jne    c0019447 <CPU::detectFeatures()+0x391>
c001943b:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0019445:	eb 46                	jmp    c001948d <CPU::detectFeatures()+0x3d7>
c0019447:	50                   	push   eax
c0019448:	50                   	push   eax
c0019449:	68 d0 b9 02 c0       	push   0xc002b9d0
c001944e:	57                   	push   edi
c001944f:	e8 6c 74 fe ff       	call   c00008c0 <strcmp>
c0019454:	83 c4 10             	add    esp,0x10
c0019457:	85 c0                	test   eax,eax
c0019459:	74 e0                	je     c001943b <CPU::detectFeatures()+0x385>
c001945b:	50                   	push   eax
c001945c:	50                   	push   eax
c001945d:	68 dd b9 02 c0       	push   0xc002b9dd
c0019462:	57                   	push   edi
c0019463:	e8 58 74 fe ff       	call   c00008c0 <strcmp>
c0019468:	83 c4 10             	add    esp,0x10
c001946b:	85 c0                	test   eax,eax
c001946d:	74 cc                	je     c001943b <CPU::detectFeatures()+0x385>
c001946f:	51                   	push   ecx
c0019470:	51                   	push   ecx
c0019471:	68 ea b9 02 c0       	push   0xc002b9ea
c0019476:	57                   	push   edi
c0019477:	e8 44 74 fe ff       	call   c00008c0 <strcmp>
c001947c:	83 c4 10             	add    esp,0x10
c001947f:	85 c0                	test   eax,eax
c0019481:	74 b8                	je     c001943b <CPU::detectFeatures()+0x385>
c0019483:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001948d:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0019492:	0f 86 be 00 00 00    	jbe    c0019556 <CPU::detectFeatures()+0x4a0>
c0019498:	83 ec 0c             	sub    esp,0xc
c001949b:	68 80 00 00 00       	push   0x80
c00194a0:	e8 ab f8 ff ff       	call   c0018d50 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00194a5:	83 e0 01             	and    eax,0x1
c00194a8:	c1 e0 06             	shl    eax,0x6
c00194ab:	88 c2                	mov    dl,al
c00194ad:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00194b3:	83 e0 bf             	and    eax,0xffffffbf
c00194b6:	09 d0                	or     eax,edx
c00194b8:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00194be:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00194c5:	e8 86 f8 ff ff       	call   c0018d50 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00194ca:	83 e0 01             	and    eax,0x1
c00194cd:	c1 e0 04             	shl    eax,0x4
c00194d0:	88 c2                	mov    dl,al
c00194d2:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00194d8:	83 e0 ef             	and    eax,0xffffffef
c00194db:	09 d0                	or     eax,edx
c00194dd:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00194e3:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00194ea:	e8 61 f8 ff ff       	call   c0018d50 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00194ef:	c1 e0 07             	shl    eax,0x7
c00194f2:	88 c2                	mov    dl,al
c00194f4:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00194fa:	83 e0 7f             	and    eax,0x7f
c00194fd:	09 d0                	or     eax,edx
c00194ff:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019505:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001950c:	e8 6d f8 ff ff       	call   c0018d7e <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019511:	83 e0 01             	and    eax,0x1
c0019514:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001951b:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019521:	83 e0 f7             	and    eax,0xfffffff7
c0019524:	09 d0                	or     eax,edx
c0019526:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001952c:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0019533:	e8 46 f8 ff ff       	call   c0018d7e <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019538:	83 c4 10             	add    esp,0x10
c001953b:	83 e0 01             	and    eax,0x1
c001953e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019545:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001954b:	83 e0 fb             	and    eax,0xfffffffb
c001954e:	09 d0                	or     eax,edx
c0019550:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019556:	83 ec 0c             	sub    esp,0xc
c0019559:	56                   	push   esi
c001955a:	55                   	push   ebp
c001955b:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001955f:	57                   	push   edi
c0019560:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019564:	50                   	push   eax
c0019565:	6a 01                	push   0x1
c0019567:	e8 04 f7 ff ff       	call   c0018c70 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001956c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0019570:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019576:	88 ca                	mov    dl,cl
c0019578:	83 e0 f0             	and    eax,0xfffffff0
c001957b:	83 e2 0f             	and    edx,0xf
c001957e:	09 d0                	or     eax,edx
c0019580:	88 ca                	mov    dl,cl
c0019582:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0019588:	c0 ea 04             	shr    dl,0x4
c001958b:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c001958f:	0f b6 c2             	movzx  eax,dl
c0019592:	83 c4 20             	add    esp,0x20
c0019595:	c1 e0 06             	shl    eax,0x6
c0019598:	89 c5                	mov    ebp,eax
c001959a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00195a0:	66 25 3f c0          	and    ax,0xc03f
c00195a4:	09 e8                	or     eax,ebp
c00195a6:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00195ad:	89 c8                	mov    eax,ecx
c00195af:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00195b5:	c1 e8 08             	shr    eax,0x8
c00195b8:	83 e2 3f             	and    edx,0x3f
c00195bb:	83 e0 0f             	and    eax,0xf
c00195be:	89 c5                	mov    ebp,eax
c00195c0:	c1 e5 06             	shl    ebp,0x6
c00195c3:	09 d5                	or     ebp,edx
c00195c5:	89 ea                	mov    edx,ebp
c00195c7:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00195cd:	88 c2                	mov    dl,al
c00195cf:	c0 ea 02             	shr    dl,0x2
c00195d2:	89 d5                	mov    ebp,edx
c00195d4:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00195da:	83 e2 c0             	and    edx,0xffffffc0
c00195dd:	09 d5                	or     ebp,edx
c00195df:	89 ea                	mov    edx,ebp
c00195e1:	89 cd                	mov    ebp,ecx
c00195e3:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00195e9:	c1 ed 0c             	shr    ebp,0xc
c00195ec:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00195f2:	83 e5 03             	and    ebp,0x3
c00195f5:	83 e2 cf             	and    edx,0xffffffcf
c00195f8:	c1 e5 04             	shl    ebp,0x4
c00195fb:	09 d5                	or     ebp,edx
c00195fd:	3c 06                	cmp    al,0x6
c00195ff:	89 ea                	mov    edx,ebp
c0019601:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0019607:	74 04                	je     c001960d <CPU::detectFeatures()+0x557>
c0019609:	3c 0f                	cmp    al,0xf
c001960b:	75 5c                	jne    c0019669 <CPU::detectFeatures()+0x5b3>
c001960d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019611:	89 cd                	mov    ebp,ecx
c0019613:	c1 ed 10             	shr    ebp,0x10
c0019616:	c1 e5 04             	shl    ebp,0x4
c0019619:	09 ea                	or     edx,ebp
c001961b:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0019621:	0f b6 d2             	movzx  edx,dl
c0019624:	66 81 e5 3f c0       	and    bp,0xc03f
c0019629:	c1 e2 06             	shl    edx,0x6
c001962c:	09 ea                	or     edx,ebp
c001962e:	3c 0f                	cmp    al,0xf
c0019630:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0019637:	75 30                	jne    c0019669 <CPU::detectFeatures()+0x5b3>
c0019639:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c001963f:	c1 e9 14             	shr    ecx,0x14
c0019642:	83 e0 3f             	and    eax,0x3f
c0019645:	83 c1 0f             	add    ecx,0xf
c0019648:	88 ca                	mov    dl,cl
c001964a:	c0 e9 02             	shr    cl,0x2
c001964d:	c1 e2 06             	shl    edx,0x6
c0019650:	09 d0                	or     eax,edx
c0019652:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0019658:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c001965e:	83 e0 c0             	and    eax,0xffffffc0
c0019661:	09 c1                	or     ecx,eax
c0019663:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0019669:	83 ec 0c             	sub    esp,0xc
c001966c:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019673:	56                   	push   esi
c0019674:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019678:	50                   	push   eax
c0019679:	57                   	push   edi
c001967a:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001967e:	55                   	push   ebp
c001967f:	68 00 00 00 80       	push   0x80000000
c0019684:	e8 e7 f5 ff ff       	call   c0018c70 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019689:	83 c4 20             	add    esp,0x20
c001968c:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0019694:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019698:	76 1e                	jbe    c00196b8 <CPU::detectFeatures()+0x602>
c001969a:	83 ec 0c             	sub    esp,0xc
c001969d:	56                   	push   esi
c001969e:	50                   	push   eax
c001969f:	57                   	push   edi
c00196a0:	55                   	push   ebp
c00196a1:	68 01 00 00 80       	push   0x80000001
c00196a6:	e8 c5 f5 ff ff       	call   c0018c70 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00196ab:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00196b5:	83 c4 20             	add    esp,0x20
c00196b8:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00196be:	83 f8 01             	cmp    eax,0x1
c00196c1:	75 6f                	jne    c0019732 <CPU::detectFeatures()+0x67c>
c00196c3:	51                   	push   ecx
c00196c4:	51                   	push   ecx
c00196c5:	68 f6 b9 02 c0       	push   0xc002b9f6
c00196ca:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00196ce:	56                   	push   esi
c00196cf:	e8 60 71 fe ff       	call   c0000834 <strcpy>
c00196d4:	5f                   	pop    edi
c00196d5:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00196db:	5d                   	pop    ebp
c00196dc:	66 c1 e8 06          	shr    ax,0x6
c00196e0:	0f b6 c0             	movzx  eax,al
c00196e3:	50                   	push   eax
c00196e4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00196ea:	c1 e8 0e             	shr    eax,0xe
c00196ed:	0f b6 c0             	movzx  eax,al
c00196f0:	50                   	push   eax
c00196f1:	e8 24 f2 ff ff       	call   c001891a <CPU::lookupIntelName(unsigned char, unsigned char)>
c00196f6:	5a                   	pop    edx
c00196f7:	59                   	pop    ecx
c00196f8:	50                   	push   eax
c00196f9:	56                   	push   esi
c00196fa:	e8 75 72 fe ff       	call   c0000974 <strcat>
c00196ff:	5f                   	pop    edi
c0019700:	5d                   	pop    ebp
c0019701:	56                   	push   esi
c0019702:	53                   	push   ebx
c0019703:	e8 34 ae ff ff       	call   c001453c <Device::setName(char const*)>
c0019708:	58                   	pop    eax
c0019709:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001970f:	5a                   	pop    edx
c0019710:	68 fd b9 02 c0       	push   0xc002b9fd
c0019715:	50                   	push   eax
c0019716:	e8 a5 71 fe ff       	call   c00008c0 <strcmp>
c001971b:	83 c4 10             	add    esp,0x10
c001971e:	85 c0                	test   eax,eax
c0019720:	0f 85 71 03 00 00    	jne    c0019a97 <CPU::detectFeatures()+0x9e1>
c0019726:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c001972d:	e9 65 03 00 00       	jmp    c0019a97 <CPU::detectFeatures()+0x9e1>
c0019732:	83 f8 02             	cmp    eax,0x2
c0019735:	0f 85 b5 00 00 00    	jne    c00197f0 <CPU::detectFeatures()+0x73a>
c001973b:	57                   	push   edi
c001973c:	57                   	push   edi
c001973d:	68 0f ba 02 c0       	push   0xc002ba0f
c0019742:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019746:	56                   	push   esi
c0019747:	e8 e8 70 fe ff       	call   c0000834 <strcpy>
c001974c:	5d                   	pop    ebp
c001974d:	58                   	pop    eax
c001974e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019754:	66 c1 e8 06          	shr    ax,0x6
c0019758:	0f b6 c0             	movzx  eax,al
c001975b:	50                   	push   eax
c001975c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019762:	c1 e8 0e             	shr    eax,0xe
c0019765:	0f b6 c0             	movzx  eax,al
c0019768:	50                   	push   eax
c0019769:	e8 18 f0 ff ff       	call   c0018786 <CPU::lookupAMDName(unsigned char, unsigned char)>
c001976e:	5a                   	pop    edx
c001976f:	59                   	pop    ecx
c0019770:	50                   	push   eax
c0019771:	56                   	push   esi
c0019772:	e8 fd 71 fe ff       	call   c0000974 <strcat>
c0019777:	5f                   	pop    edi
c0019778:	5d                   	pop    ebp
c0019779:	56                   	push   esi
c001977a:	53                   	push   ebx
c001977b:	e8 bc ad ff ff       	call   c001453c <Device::setName(char const*)>
c0019780:	58                   	pop    eax
c0019781:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019787:	5a                   	pop    edx
c0019788:	68 14 ba 02 c0       	push   0xc002ba14
c001978d:	50                   	push   eax
c001978e:	e8 2d 71 fe ff       	call   c00008c0 <strcmp>
c0019793:	83 c4 10             	add    esp,0x10
c0019796:	85 c0                	test   eax,eax
c0019798:	75 20                	jne    c00197ba <CPU::detectFeatures()+0x704>
c001979a:	8b 15 c8 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5c8
c00197a0:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00197a6:	a8 01                	test   al,0x1
c00197a8:	74 10                	je     c00197ba <CPU::detectFeatures()+0x704>
c00197aa:	83 e0 fe             	and    eax,0xfffffffe
c00197ad:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00197b3:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00197ba:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197c0:	c1 e8 0e             	shr    eax,0xe
c00197c3:	3c 05                	cmp    al,0x5
c00197c5:	0f 85 cc 02 00 00    	jne    c0019a97 <CPU::detectFeatures()+0x9e1>
c00197cb:	56                   	push   esi
c00197cc:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00197d2:	83 e0 0f             	and    eax,0xf
c00197d5:	50                   	push   eax
c00197d6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197dc:	66 c1 e8 06          	shr    ax,0x6
c00197e0:	0f b6 c0             	movzx  eax,al
c00197e3:	50                   	push   eax
c00197e4:	6a 05                	push   0x5
c00197e6:	e8 11 f4 ff ff       	call   c0018bfc <CPU::AMD_K6_writeback(int, int, int)>
c00197eb:	e9 1f 02 00 00       	jmp    c0019a0f <CPU::detectFeatures()+0x959>
c00197f0:	8d 50 fd             	lea    edx,[eax-0x3]
c00197f3:	83 fa 01             	cmp    edx,0x1
c00197f6:	76 09                	jbe    c0019801 <CPU::detectFeatures()+0x74b>
c00197f8:	83 f8 06             	cmp    eax,0x6
c00197fb:	0f 85 91 01 00 00    	jne    c0019992 <CPU::detectFeatures()+0x8dc>
c0019801:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019807:	c1 ea 0e             	shr    edx,0xe
c001980a:	80 fa 05             	cmp    dl,0x5
c001980d:	75 7b                	jne    c001988a <CPU::detectFeatures()+0x7d4>
c001980f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019815:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001981a:	66 81 fa 00 01       	cmp    dx,0x100
c001981f:	75 0c                	jne    c001982d <CPU::detectFeatures()+0x777>
c0019821:	51                   	push   ecx
c0019822:	51                   	push   ecx
c0019823:	68 1b ba 02 c0       	push   0xc002ba1b
c0019828:	e9 dc 01 00 00       	jmp    c0019a09 <CPU::detectFeatures()+0x953>
c001982d:	66 81 fa 00 02       	cmp    dx,0x200
c0019832:	75 0c                	jne    c0019840 <CPU::detectFeatures()+0x78a>
c0019834:	52                   	push   edx
c0019835:	52                   	push   edx
c0019836:	68 2e ba 02 c0       	push   0xc002ba2e
c001983b:	e9 c9 01 00 00       	jmp    c0019a09 <CPU::detectFeatures()+0x953>
c0019840:	66 81 fa 40 02       	cmp    dx,0x240
c0019845:	75 0c                	jne    c0019853 <CPU::detectFeatures()+0x79d>
c0019847:	50                   	push   eax
c0019848:	50                   	push   eax
c0019849:	68 40 ba 02 c0       	push   0xc002ba40
c001984e:	e9 b6 01 00 00       	jmp    c0019a09 <CPU::detectFeatures()+0x953>
c0019853:	83 f8 06             	cmp    eax,0x6
c0019856:	75 0c                	jne    c0019864 <CPU::detectFeatures()+0x7ae>
c0019858:	50                   	push   eax
c0019859:	50                   	push   eax
c001985a:	68 52 ba 02 c0       	push   0xc002ba52
c001985f:	e9 a5 01 00 00       	jmp    c0019a09 <CPU::detectFeatures()+0x953>
c0019864:	83 f8 04             	cmp    eax,0x4
c0019867:	75 0c                	jne    c0019875 <CPU::detectFeatures()+0x7bf>
c0019869:	50                   	push   eax
c001986a:	50                   	push   eax
c001986b:	68 5e ba 02 c0       	push   0xc002ba5e
c0019870:	e9 94 01 00 00       	jmp    c0019a09 <CPU::detectFeatures()+0x953>
c0019875:	83 f8 03             	cmp    eax,0x3
c0019878:	0f 85 19 02 00 00    	jne    c0019a97 <CPU::detectFeatures()+0x9e1>
c001987e:	50                   	push   eax
c001987f:	50                   	push   eax
c0019880:	68 66 ba 02 c0       	push   0xc002ba66
c0019885:	e9 7f 01 00 00       	jmp    c0019a09 <CPU::detectFeatures()+0x953>
c001988a:	80 fa 06             	cmp    dl,0x6
c001988d:	0f 85 db 00 00 00    	jne    c001996e <CPU::detectFeatures()+0x8b8>
c0019893:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019899:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001989e:	66 81 fa 80 01       	cmp    dx,0x180
c00198a3:	75 0c                	jne    c00198b1 <CPU::detectFeatures()+0x7fb>
c00198a5:	50                   	push   eax
c00198a6:	50                   	push   eax
c00198a7:	68 71 ba 02 c0       	push   0xc002ba71
c00198ac:	e9 58 01 00 00       	jmp    c0019a09 <CPU::detectFeatures()+0x953>
c00198b1:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00198b7:	66 f7 c1 80 ff       	test   cx,0xff80
c00198bc:	75 0c                	jne    c00198ca <CPU::detectFeatures()+0x814>
c00198be:	50                   	push   eax
c00198bf:	50                   	push   eax
c00198c0:	68 81 ba 02 c0       	push   0xc002ba81
c00198c5:	e9 3f 01 00 00       	jmp    c0019a09 <CPU::detectFeatures()+0x953>
c00198ca:	66 81 fa 40 02       	cmp    dx,0x240
c00198cf:	75 0c                	jne    c00198dd <CPU::detectFeatures()+0x827>
c00198d1:	55                   	push   ebp
c00198d2:	55                   	push   ebp
c00198d3:	68 88 ba 02 c0       	push   0xc002ba88
c00198d8:	e9 2c 01 00 00       	jmp    c0019a09 <CPU::detectFeatures()+0x953>
c00198dd:	66 81 fa 80 02       	cmp    dx,0x280
c00198e2:	75 0c                	jne    c00198f0 <CPU::detectFeatures()+0x83a>
c00198e4:	57                   	push   edi
c00198e5:	57                   	push   edi
c00198e6:	68 91 ba 02 c0       	push   0xc002ba91
c00198eb:	e9 19 01 00 00       	jmp    c0019a09 <CPU::detectFeatures()+0x953>
c00198f0:	66 81 fa 40 03       	cmp    dx,0x340
c00198f5:	74 ed                	je     c00198e4 <CPU::detectFeatures()+0x82e>
c00198f7:	66 81 fa c0 03       	cmp    dx,0x3c0
c00198fc:	75 0c                	jne    c001990a <CPU::detectFeatures()+0x854>
c00198fe:	56                   	push   esi
c00198ff:	56                   	push   esi
c0019900:	68 98 ba 02 c0       	push   0xc002ba98
c0019905:	e9 ff 00 00 00       	jmp    c0019a09 <CPU::detectFeatures()+0x953>
c001990a:	83 f8 06             	cmp    eax,0x6
c001990d:	0f 84 45 ff ff ff    	je     c0019858 <CPU::detectFeatures()+0x7a2>
c0019913:	83 f8 04             	cmp    eax,0x4
c0019916:	0f 84 4d ff ff ff    	je     c0019869 <CPU::detectFeatures()+0x7b3>
c001991c:	83 f8 03             	cmp    eax,0x3
c001991f:	0f 85 72 01 00 00    	jne    c0019a97 <CPU::detectFeatures()+0x9e1>
c0019925:	51                   	push   ecx
c0019926:	51                   	push   ecx
c0019927:	68 a1 ba 02 c0       	push   0xc002baa1
c001992c:	53                   	push   ebx
c001992d:	e8 0a ac ff ff       	call   c001453c <Device::setName(char const*)>
c0019932:	b1 c1                	mov    cl,0xc1
c0019934:	88 c8                	mov    al,cl
c0019936:	e6 22                	out    0x22,al
c0019938:	e4 23                	in     al,0x23
c001993a:	88 c2                	mov    dl,al
c001993c:	88 c8                	mov    al,cl
c001993e:	e6 22                	out    0x22,al
c0019940:	88 d0                	mov    al,dl
c0019942:	83 c8 10             	or     eax,0x10
c0019945:	e6 23                	out    0x23,al
c0019947:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001994e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019951:	89 d0                	mov    eax,edx
c0019953:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019959:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c001995d:	40                   	inc    eax
c001995e:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019964:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019969:	e9 a1 00 00 00       	jmp    c0019a0f <CPU::detectFeatures()+0x959>
c001996e:	83 f8 06             	cmp    eax,0x6
c0019971:	0f 84 e1 fe ff ff    	je     c0019858 <CPU::detectFeatures()+0x7a2>
c0019977:	83 f8 04             	cmp    eax,0x4
c001997a:	0f 84 e9 fe ff ff    	je     c0019869 <CPU::detectFeatures()+0x7b3>
c0019980:	83 f8 03             	cmp    eax,0x3
c0019983:	0f 85 0e 01 00 00    	jne    c0019a97 <CPU::detectFeatures()+0x9e1>
c0019989:	52                   	push   edx
c001998a:	52                   	push   edx
c001998b:	68 ac ba 02 c0       	push   0xc002baac
c0019990:	eb 77                	jmp    c0019a09 <CPU::detectFeatures()+0x953>
c0019992:	83 f8 07             	cmp    eax,0x7
c0019995:	75 09                	jne    c00199a0 <CPU::detectFeatures()+0x8ea>
c0019997:	50                   	push   eax
c0019998:	50                   	push   eax
c0019999:	68 b6 ba 02 c0       	push   0xc002bab6
c001999e:	eb 69                	jmp    c0019a09 <CPU::detectFeatures()+0x953>
c00199a0:	83 f8 0a             	cmp    eax,0xa
c00199a3:	75 09                	jne    c00199ae <CPU::detectFeatures()+0x8f8>
c00199a5:	50                   	push   eax
c00199a6:	50                   	push   eax
c00199a7:	68 c1 ba 02 c0       	push   0xc002bac1
c00199ac:	eb 5b                	jmp    c0019a09 <CPU::detectFeatures()+0x953>
c00199ae:	83 f8 0b             	cmp    eax,0xb
c00199b1:	75 09                	jne    c00199bc <CPU::detectFeatures()+0x906>
c00199b3:	50                   	push   eax
c00199b4:	50                   	push   eax
c00199b5:	68 c9 ba 02 c0       	push   0xc002bac9
c00199ba:	eb 4d                	jmp    c0019a09 <CPU::detectFeatures()+0x953>
c00199bc:	83 f8 08             	cmp    eax,0x8
c00199bf:	75 09                	jne    c00199ca <CPU::detectFeatures()+0x914>
c00199c1:	50                   	push   eax
c00199c2:	50                   	push   eax
c00199c3:	68 d2 ba 02 c0       	push   0xc002bad2
c00199c8:	eb 3f                	jmp    c0019a09 <CPU::detectFeatures()+0x953>
c00199ca:	83 f8 09             	cmp    eax,0x9
c00199cd:	75 09                	jne    c00199d8 <CPU::detectFeatures()+0x922>
c00199cf:	50                   	push   eax
c00199d0:	50                   	push   eax
c00199d1:	68 da ba 02 c0       	push   0xc002bada
c00199d6:	eb 31                	jmp    c0019a09 <CPU::detectFeatures()+0x953>
c00199d8:	83 f8 05             	cmp    eax,0x5
c00199db:	75 09                	jne    c00199e6 <CPU::detectFeatures()+0x930>
c00199dd:	50                   	push   eax
c00199de:	50                   	push   eax
c00199df:	68 e2 ba 02 c0       	push   0xc002bae2
c00199e4:	eb 23                	jmp    c0019a09 <CPU::detectFeatures()+0x953>
c00199e6:	83 f8 0c             	cmp    eax,0xc
c00199e9:	75 09                	jne    c00199f4 <CPU::detectFeatures()+0x93e>
c00199eb:	55                   	push   ebp
c00199ec:	55                   	push   ebp
c00199ed:	68 f0 ba 02 c0       	push   0xc002baf0
c00199f2:	eb 15                	jmp    c0019a09 <CPU::detectFeatures()+0x953>
c00199f4:	83 f8 0d             	cmp    eax,0xd
c00199f7:	75 09                	jne    c0019a02 <CPU::detectFeatures()+0x94c>
c00199f9:	57                   	push   edi
c00199fa:	57                   	push   edi
c00199fb:	68 fb ba 02 c0       	push   0xc002bafb
c0019a00:	eb 07                	jmp    c0019a09 <CPU::detectFeatures()+0x953>
c0019a02:	56                   	push   esi
c0019a03:	56                   	push   esi
c0019a04:	68 0f bb 02 c0       	push   0xc002bb0f
c0019a09:	53                   	push   ebx
c0019a0a:	e8 2d ab ff ff       	call   c001453c <Device::setName(char const*)>
c0019a0f:	83 c4 10             	add    esp,0x10
c0019a12:	e9 80 00 00 00       	jmp    c0019a97 <CPU::detectFeatures()+0x9e1>
c0019a17:	51                   	push   ecx
c0019a18:	51                   	push   ecx
c0019a19:	68 5b b9 02 c0       	push   0xc002b95b
c0019a1e:	57                   	push   edi
c0019a1f:	e8 10 6e fe ff       	call   c0000834 <strcpy>
c0019a24:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019a2e:	e8 7b 68 fe ff       	call   c00002ae <is486>
c0019a33:	83 c4 10             	add    esp,0x10
c0019a36:	85 c0                	test   eax,eax
c0019a38:	74 2b                	je     c0019a65 <CPU::detectFeatures()+0x9af>
c0019a3a:	52                   	push   edx
c0019a3b:	52                   	push   edx
c0019a3c:	68 1b bb 02 c0       	push   0xc002bb1b
c0019a41:	53                   	push   ebx
c0019a42:	e8 f5 aa ff ff       	call   c001453c <Device::setName(char const*)>
c0019a47:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019a4e:	0f 20 c0             	mov    eax,cr0
c0019a51:	83 e0 14             	and    eax,0x14
c0019a54:	83 c4 10             	add    esp,0x10
c0019a57:	83 f8 04             	cmp    eax,0x4
c0019a5a:	75 1f                	jne    c0019a7b <CPU::detectFeatures()+0x9c5>
c0019a5c:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019a63:	eb 32                	jmp    c0019a97 <CPU::detectFeatures()+0x9e1>
c0019a65:	50                   	push   eax
c0019a66:	50                   	push   eax
c0019a67:	68 26 bb 02 c0       	push   0xc002bb26
c0019a6c:	53                   	push   ebx
c0019a6d:	e8 ca aa ff ff       	call   c001453c <Device::setName(char const*)>
c0019a72:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019a79:	eb d3                	jmp    c0019a4e <CPU::detectFeatures()+0x998>
c0019a7b:	e8 09 68 fe ff       	call   c0000289 <hasLegacyFPU>
c0019a80:	83 e0 01             	and    eax,0x1
c0019a83:	8d 14 00             	lea    edx,[eax+eax*1]
c0019a86:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019a8c:	83 e0 fd             	and    eax,0xfffffffd
c0019a8f:	09 d0                	or     eax,edx
c0019a91:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019a97:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019a9e:	83 c4 4c             	add    esp,0x4c
c0019aa1:	5b                   	pop    ebx
c0019aa2:	5e                   	pop    esi
c0019aa3:	5f                   	pop    edi
c0019aa4:	5d                   	pop    ebp
c0019aa5:	c3                   	ret    

c0019aa6 <CPU::setupSMEP()>:
c0019aa6:	0f 20 e0             	mov    eax,cr4
c0019aa9:	0d 00 00 10 00       	or     eax,0x100000
c0019aae:	0f 22 e0             	mov    cr4,eax
c0019ab1:	c3                   	ret    

c0019ab2 <CPU::setupUMIP()>:
c0019ab2:	0f 20 e0             	mov    eax,cr4
c0019ab5:	80 cc 08             	or     ah,0x8
c0019ab8:	0f 22 e0             	mov    cr4,eax
c0019abb:	c3                   	ret    

c0019abc <CPU::setupTSC()>:
c0019abc:	0f 20 e0             	mov    eax,cr4
c0019abf:	83 c8 04             	or     eax,0x4
c0019ac2:	0f 22 e0             	mov    cr4,eax
c0019ac5:	c3                   	ret    

c0019ac6 <CPU::setupLargePages()>:
c0019ac6:	0f 20 e0             	mov    eax,cr4
c0019ac9:	83 c8 10             	or     eax,0x10
c0019acc:	0f 22 e0             	mov    cr4,eax
c0019acf:	c3                   	ret    

c0019ad0 <CPU::setupPAT()>:
c0019ad0:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0019ad5:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019adc:	74 2c                	je     c0019b0a <CPU::setupPAT()+0x3a>
c0019ade:	53                   	push   ebx
c0019adf:	83 ec 10             	sub    esp,0x10
c0019ae2:	68 77 02 00 00       	push   0x277
c0019ae7:	50                   	push   eax
c0019ae8:	e8 fb 52 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019aed:	83 e2 f8             	and    edx,0xfffffff8
c0019af0:	83 ca 01             	or     edx,0x1
c0019af3:	52                   	push   edx
c0019af4:	50                   	push   eax
c0019af5:	68 77 02 00 00       	push   0x277
c0019afa:	ff 35 c8 e5 02 c0    	push   DWORD PTR ds:0xc002e5c8
c0019b00:	e8 0f 53 ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c0019b05:	83 c4 28             	add    esp,0x28
c0019b08:	5b                   	pop    ebx
c0019b09:	c3                   	ret    
c0019b0a:	c3                   	ret    
c0019b0b:	90                   	nop

c0019b0c <CPU::setupMTRR()>:
c0019b0c:	c3                   	ret    
c0019b0d:	90                   	nop

c0019b0e <CPU::setupGlobalPages()>:
c0019b0e:	0f 20 e0             	mov    eax,cr4
c0019b11:	0c 80                	or     al,0x80
c0019b13:	0f 22 e0             	mov    cr4,eax
c0019b16:	c3                   	ret    
c0019b17:	90                   	nop

c0019b18 <CPU::allowUsermodeDataAccess()>:
c0019b18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b1c:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019b23:	74 03                	je     c0019b28 <CPU::allowUsermodeDataAccess()+0x10>
c0019b25:	0f 01 cb             	stac   
c0019b28:	c3                   	ret    
c0019b29:	90                   	nop

c0019b2a <CPU::prohibitUsermodeDataAccess()>:
c0019b2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b2e:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019b35:	74 03                	je     c0019b3a <CPU::prohibitUsermodeDataAccess()+0x10>
c0019b37:	0f 01 ca             	clac   
c0019b3a:	c3                   	ret    
c0019b3b:	90                   	nop

c0019b3c <CPU::setupSMAP()>:
c0019b3c:	0f 20 e0             	mov    eax,cr4
c0019b3f:	0d 00 00 20 00       	or     eax,0x200000
c0019b44:	0f 22 e0             	mov    cr4,eax
c0019b47:	eb e1                	jmp    c0019b2a <CPU::prohibitUsermodeDataAccess()>
c0019b49:	90                   	nop

c0019b4a <CPU::setupFeatures()>:
c0019b4a:	83 ec 0c             	sub    esp,0xc
c0019b4d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019b51:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019b58:	74 07                	je     c0019b61 <CPU::setupFeatures()+0x17>
c0019b5a:	52                   	push   edx
c0019b5b:	e8 46 ff ff ff       	call   c0019aa6 <CPU::setupSMEP()>
c0019b60:	58                   	pop    eax
c0019b61:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019b68:	74 07                	je     c0019b71 <CPU::setupFeatures()+0x27>
c0019b6a:	52                   	push   edx
c0019b6b:	e8 cc ff ff ff       	call   c0019b3c <CPU::setupSMAP()>
c0019b70:	58                   	pop    eax
c0019b71:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019b78:	74 07                	je     c0019b81 <CPU::setupFeatures()+0x37>
c0019b7a:	52                   	push   edx
c0019b7b:	e8 32 ff ff ff       	call   c0019ab2 <CPU::setupUMIP()>
c0019b80:	58                   	pop    eax
c0019b81:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019b88:	74 07                	je     c0019b91 <CPU::setupFeatures()+0x47>
c0019b8a:	52                   	push   edx
c0019b8b:	e8 2c ff ff ff       	call   c0019abc <CPU::setupTSC()>
c0019b90:	58                   	pop    eax
c0019b91:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019b98:	74 07                	je     c0019ba1 <CPU::setupFeatures()+0x57>
c0019b9a:	52                   	push   edx
c0019b9b:	e8 26 ff ff ff       	call   c0019ac6 <CPU::setupLargePages()>
c0019ba0:	59                   	pop    ecx
c0019ba1:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019ba8:	74 07                	je     c0019bb1 <CPU::setupFeatures()+0x67>
c0019baa:	52                   	push   edx
c0019bab:	e8 5e ff ff ff       	call   c0019b0e <CPU::setupGlobalPages()>
c0019bb0:	58                   	pop    eax
c0019bb1:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019bb8:	74 0c                	je     c0019bc6 <CPU::setupFeatures()+0x7c>
c0019bba:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019bbe:	83 c4 0c             	add    esp,0xc
c0019bc1:	e9 0a ff ff ff       	jmp    c0019ad0 <CPU::setupPAT()>
c0019bc6:	83 c4 0c             	add    esp,0xc
c0019bc9:	c3                   	ret    

c0019bca <CPU::open(int, int, void*)>:
c0019bca:	57                   	push   edi
c0019bcb:	56                   	push   esi
c0019bcc:	53                   	push   ebx
c0019bcd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019bd1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019bd5:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019bdb:	83 ec 0c             	sub    esp,0xc
c0019bde:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019be4:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019bea:	50                   	push   eax
c0019beb:	e8 e4 54 ff ff       	call   c000f0d4 <GDT::setup()>
c0019bf0:	83 c4 0c             	add    esp,0xc
c0019bf3:	6a 00                	push   0x0
c0019bf5:	68 ef be ad de       	push   0xdeadbeef
c0019bfa:	57                   	push   edi
c0019bfb:	e8 fc 78 ff ff       	call   c00114fc <TSS::setup(unsigned long, unsigned long)>
c0019c00:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019c03:	e8 d4 78 ff ff       	call   c00114dc <TSS::flush()>
c0019c08:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019c0e:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c11:	e8 1a 57 ff ff       	call   c000f330 <IDT::setup()>
c0019c16:	b8 00 04 00 00       	mov    eax,0x400
c0019c1b:	0f 23 f8             	mov    db7,eax
c0019c1e:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019c28:	e8 b5 62 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0019c2d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019c33:	89 30                	mov    DWORD PTR [eax],esi
c0019c35:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019c3b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019c3e:	58                   	pop    eax
c0019c3f:	5a                   	pop    edx
c0019c40:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019c4a:	e8 eb 89 ff ff       	call   c001263a <VAS::setCPUSpecific(unsigned long)>
c0019c4f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c52:	e8 5f f4 ff ff       	call   c00190b6 <CPU::detectFeatures()>
c0019c57:	e8 cf bc ff ff       	call   c001592b <setupInterruptController()>
c0019c5c:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019c62:	a1 e0 e5 02 c0       	mov    eax,ds:0xc002e5e0
c0019c67:	83 e0 10             	and    eax,0x10
c0019c6a:	83 f8 01             	cmp    eax,0x1
c0019c6d:	19 c0                	sbb    eax,eax
c0019c6f:	83 e0 46             	and    eax,0x46
c0019c72:	83 c0 1e             	add    eax,0x1e
c0019c75:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c78:	e8 bb d1 ff ff       	call   c0016e38 <setupTimer(int)>
c0019c7d:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019c83:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c86:	e8 bf fe ff ff       	call   c0019b4a <CPU::setupFeatures()>
c0019c8b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c8e:	e8 a7 f1 ff ff       	call   c0018e3a <CPU::displayFeatures()>
c0019c93:	83 c4 10             	add    esp,0x10
c0019c96:	31 c0                	xor    eax,eax
c0019c98:	5b                   	pop    ebx
c0019c99:	5e                   	pop    esi
c0019c9a:	5f                   	pop    edi
c0019c9b:	c3                   	ret    

c0019c9c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019c9c:	57                   	push   edi
c0019c9d:	56                   	push   esi
c0019c9e:	53                   	push   ebx
c0019c9f:	51                   	push   ecx
c0019ca0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019ca4:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019ca7:	0f 02 c0             	lar    eax,ax
c0019caa:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019cad:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019cb1:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019cb4:	88 ca                	mov    dl,cl
c0019cb6:	c0 ea 06             	shr    dl,0x6
c0019cb9:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019cbd:	89 ca                	mov    edx,ecx
c0019cbf:	66 c1 ea 03          	shr    dx,0x3
c0019cc3:	83 e2 07             	and    edx,0x7
c0019cc6:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019ccb:	88 17                	mov    BYTE PTR [edi],dl
c0019ccd:	0f 84 a6 01 00 00    	je     c0019e79 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019cd3:	83 e1 07             	and    ecx,0x7
c0019cd6:	80 f9 04             	cmp    cl,0x4
c0019cd9:	0f 84 98 00 00 00    	je     c0019d77 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019cdf:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019ce4:	0f 95 c0             	setne  al
c0019ce7:	80 f9 05             	cmp    cl,0x5
c0019cea:	0f 95 c2             	setne  dl
c0019ced:	08 c2                	or     dl,al
c0019cef:	74 79                	je     c0019d6a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019cf1:	84 c9                	test   cl,cl
c0019cf3:	75 05                	jne    c0019cfa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019cf5:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019cf8:	eb 3c                	jmp    c0019d36 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019cfa:	80 f9 01             	cmp    cl,0x1
c0019cfd:	75 05                	jne    c0019d04 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019cff:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019d02:	eb 32                	jmp    c0019d36 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d04:	80 f9 02             	cmp    cl,0x2
c0019d07:	75 05                	jne    c0019d0e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019d09:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019d0c:	eb 28                	jmp    c0019d36 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d0e:	31 c0                	xor    eax,eax
c0019d10:	80 f9 03             	cmp    cl,0x3
c0019d13:	75 05                	jne    c0019d1a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019d15:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019d18:	eb 1c                	jmp    c0019d36 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d1a:	80 f9 05             	cmp    cl,0x5
c0019d1d:	75 05                	jne    c0019d24 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019d1f:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019d22:	eb 12                	jmp    c0019d36 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d24:	80 f9 06             	cmp    cl,0x6
c0019d27:	75 05                	jne    c0019d2e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019d29:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019d2c:	eb 08                	jmp    c0019d36 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d2e:	80 f9 07             	cmp    cl,0x7
c0019d31:	75 03                	jne    c0019d36 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d33:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019d36:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019d3b:	75 10                	jne    c0019d4d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019d3d:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019d41:	b9 03 00 00 00       	mov    ecx,0x3
c0019d46:	01 d0                	add    eax,edx
c0019d48:	e9 37 01 00 00       	jmp    c0019e84 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d4d:	b9 02 00 00 00       	mov    ecx,0x2
c0019d52:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019d57:	0f 85 27 01 00 00    	jne    c0019e84 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d5d:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019d60:	b9 06 00 00 00       	mov    ecx,0x6
c0019d65:	e9 1a 01 00 00       	jmp    c0019e84 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d6a:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019d6d:	b9 06 00 00 00       	mov    ecx,0x6
c0019d72:	e9 0f 01 00 00       	jmp    c0019e86 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019d77:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019d7a:	88 ca                	mov    dl,cl
c0019d7c:	c0 ea 06             	shr    dl,0x6
c0019d7f:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019d83:	89 ca                	mov    edx,ecx
c0019d85:	66 c1 ea 03          	shr    dx,0x3
c0019d89:	83 e2 07             	and    edx,0x7
c0019d8c:	80 e1 07             	and    cl,0x7
c0019d8f:	75 05                	jne    c0019d96 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019d91:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019d94:	eb 4c                	jmp    c0019de2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d96:	80 f9 01             	cmp    cl,0x1
c0019d99:	75 05                	jne    c0019da0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019d9b:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019d9e:	eb 42                	jmp    c0019de2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019da0:	80 f9 02             	cmp    cl,0x2
c0019da3:	75 05                	jne    c0019daa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019da5:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019da8:	eb 38                	jmp    c0019de2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019daa:	80 f9 03             	cmp    cl,0x3
c0019dad:	75 05                	jne    c0019db4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019daf:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019db2:	eb 2e                	jmp    c0019de2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019db4:	80 f9 04             	cmp    cl,0x4
c0019db7:	75 12                	jne    c0019dcb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019db9:	f6 c4 60             	test   ah,0x60
c0019dbc:	75 08                	jne    c0019dc6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019dbe:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019dc1:	8d 78 14             	lea    edi,[eax+0x14]
c0019dc4:	eb 1c                	jmp    c0019de2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019dc6:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019dc9:	eb 17                	jmp    c0019de2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019dcb:	80 f9 05             	cmp    cl,0x5
c0019dce:	75 05                	jne    c0019dd5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019dd0:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019dd3:	eb 0d                	jmp    c0019de2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019dd5:	80 f9 06             	cmp    cl,0x6
c0019dd8:	75 05                	jne    c0019ddf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019dda:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019ddd:	eb 03                	jmp    c0019de2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ddf:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019de2:	84 d2                	test   dl,dl
c0019de4:	75 05                	jne    c0019deb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019de6:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019de9:	eb 3c                	jmp    c0019e27 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019deb:	80 fa 01             	cmp    dl,0x1
c0019dee:	75 05                	jne    c0019df5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019df0:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019df3:	eb 32                	jmp    c0019e27 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019df5:	80 fa 02             	cmp    dl,0x2
c0019df8:	75 05                	jne    c0019dff <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019dfa:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019dfd:	eb 28                	jmp    c0019e27 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019dff:	80 fa 03             	cmp    dl,0x3
c0019e02:	75 05                	jne    c0019e09 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019e04:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019e07:	eb 1e                	jmp    c0019e27 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e09:	31 c0                	xor    eax,eax
c0019e0b:	80 fa 04             	cmp    dl,0x4
c0019e0e:	74 17                	je     c0019e27 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e10:	80 fa 05             	cmp    dl,0x5
c0019e13:	75 05                	jne    c0019e1a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019e15:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019e18:	eb 0d                	jmp    c0019e27 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e1a:	80 fa 06             	cmp    dl,0x6
c0019e1d:	75 05                	jne    c0019e24 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019e1f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019e22:	eb 03                	jmp    c0019e27 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e24:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019e27:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019e2c:	0f 94 c2             	sete   dl
c0019e2f:	80 f9 05             	cmp    cl,0x5
c0019e32:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019e36:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019e3b:	d3 e0                	shl    eax,cl
c0019e3d:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019e41:	74 0a                	je     c0019e4d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019e43:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019e46:	b9 07 00 00 00       	mov    ecx,0x7
c0019e4b:	eb 37                	jmp    c0019e84 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019e4d:	01 f8                	add    eax,edi
c0019e4f:	b9 03 00 00 00       	mov    ecx,0x3
c0019e54:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019e59:	74 2b                	je     c0019e86 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e5b:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019e60:	75 0d                	jne    c0019e6f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019e62:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019e66:	01 c8                	add    eax,ecx
c0019e68:	b9 04 00 00 00       	mov    ecx,0x4
c0019e6d:	eb 17                	jmp    c0019e86 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e6f:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019e72:	b9 07 00 00 00       	mov    ecx,0x7
c0019e77:	eb 0d                	jmp    c0019e86 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e79:	b9 02 00 00 00       	mov    ecx,0x2
c0019e7e:	b2 01                	mov    dl,0x1
c0019e80:	31 c0                	xor    eax,eax
c0019e82:	eb 02                	jmp    c0019e86 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e84:	31 d2                	xor    edx,edx
c0019e86:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019e8a:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019e8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019e90:	88 11                	mov    BYTE PTR [ecx],dl
c0019e92:	5a                   	pop    edx
c0019e93:	5b                   	pop    ebx
c0019e94:	5e                   	pop    esi
c0019e95:	5f                   	pop    edi
c0019e96:	c3                   	ret    

c0019e97 <Krnl::smpEntry()>:
c0019e97:	eb fe                	jmp    c0019e97 <Krnl::smpEntry()>

c0019e99 <Krnl::startCPU(int)>:
c0019e99:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0019e9e:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019ea5:	0f 84 36 01 00 00    	je     c0019fe1 <Krnl::startCPU(int)+0x148>
c0019eab:	53                   	push   ebx
c0019eac:	83 ec 08             	sub    esp,0x8
c0019eaf:	e8 46 3f 00 00       	call   c001ddfa <lockScheduler()>
c0019eb4:	52                   	push   edx
c0019eb5:	52                   	push   edx
c0019eb6:	6a 1b                	push   0x1b
c0019eb8:	ff 35 c8 e5 02 c0    	push   DWORD PTR ds:0xc002e5c8
c0019ebe:	e8 25 4f ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019ec3:	59                   	pop    ecx
c0019ec4:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019ec9:	89 c3                	mov    ebx,eax
c0019ecb:	58                   	pop    eax
c0019ecc:	53                   	push   ebx
c0019ecd:	68 60 bb 02 c0       	push   0xc002bb60
c0019ed2:	e8 5d 90 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0019ed7:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019ee1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ee5:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019eef:	c1 e0 18             	shl    eax,0x18
c0019ef2:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019ef8:	83 c4 10             	add    esp,0x10
c0019efb:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019f01:	09 c2                	or     edx,eax
c0019f03:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019f09:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019f0f:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019f15:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019f1b:	80 cd c5             	or     ch,0xc5
c0019f1e:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019f24:	f3 90                	pause  
c0019f26:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019f28:	0f ba e1 0c          	bt     ecx,0xc
c0019f2c:	72 f6                	jb     c0019f24 <Krnl::startCPU(int)+0x8b>
c0019f2e:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019f34:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019f3a:	09 c1                	or     ecx,eax
c0019f3c:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019f42:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019f48:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019f4e:	80 cd 85             	or     ch,0x85
c0019f51:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019f57:	f3 90                	pause  
c0019f59:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019f5b:	0f ba e1 0c          	bt     ecx,0xc
c0019f5f:	72 f6                	jb     c0019f57 <Krnl::startCPU(int)+0xbe>
c0019f61:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f6b:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019f71:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019f77:	09 c1                	or     ecx,eax
c0019f79:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019f7f:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019f85:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019f8b:	81 c9 02 06 00 00    	or     ecx,0x602
c0019f91:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019f97:	f3 90                	pause  
c0019f99:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019f9b:	0f ba e1 0c          	bt     ecx,0xc
c0019f9f:	72 f6                	jb     c0019f97 <Krnl::startCPU(int)+0xfe>
c0019fa1:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019fab:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019fb1:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019fb7:	09 c8                	or     eax,ecx
c0019fb9:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019fbf:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019fc5:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019fca:	0d 02 06 00 00       	or     eax,0x602
c0019fcf:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019fd5:	f3 90                	pause  
c0019fd7:	8b 02                	mov    eax,DWORD PTR [edx]
c0019fd9:	0f ba e0 0c          	bt     eax,0xc
c0019fdd:	72 f6                	jb     c0019fd5 <Krnl::startCPU(int)+0x13c>
c0019fdf:	eb fe                	jmp    c0019fdf <Krnl::startCPU(int)+0x146>
c0019fe1:	c3                   	ret    

c0019fe2 <Krnl::startCPUs()>:
c0019fe2:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0019fe7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019fed:	88 c2                	mov    dl,al
c0019fef:	83 e2 0a             	and    edx,0xa
c0019ff2:	80 fa 0a             	cmp    dl,0xa
c0019ff5:	75 09                	jne    c001a000 <Krnl::startCPUs()+0x1e>
c0019ff7:	a8 01                	test   al,0x1
c0019ff9:	74 05                	je     c001a000 <Krnl::startCPUs()+0x1e>
c0019ffb:	e9 9b 61 fe ff       	jmp    c000019b <prepareTramp>
c001a000:	c3                   	ret    
c001a001:	90                   	nop

c001a002 <EnvVarContainer::getEnv(char const*)>:
c001a002:	57                   	push   edi
c001a003:	56                   	push   esi
c001a004:	53                   	push   ebx
c001a005:	31 db                	xor    ebx,ebx
c001a007:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a00b:	39 1e                	cmp    DWORD PTR [esi],ebx
c001a00d:	7e 2b                	jle    c001a03a <EnvVarContainer::getEnv(char const*)+0x38>
c001a00f:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001a016:	50                   	push   eax
c001a017:	50                   	push   eax
c001a018:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a01b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001a01e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a022:	e8 99 68 fe ff       	call   c00008c0 <strcmp>
c001a027:	83 c4 10             	add    esp,0x10
c001a02a:	85 c0                	test   eax,eax
c001a02c:	75 09                	jne    c001a037 <EnvVarContainer::getEnv(char const*)+0x35>
c001a02e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a031:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a035:	eb 05                	jmp    c001a03c <EnvVarContainer::getEnv(char const*)+0x3a>
c001a037:	43                   	inc    ebx
c001a038:	eb d1                	jmp    c001a00b <EnvVarContainer::getEnv(char const*)+0x9>
c001a03a:	31 c0                	xor    eax,eax
c001a03c:	5b                   	pop    ebx
c001a03d:	5e                   	pop    esi
c001a03e:	5f                   	pop    edi
c001a03f:	c3                   	ret    

c001a040 <EnvVarContainer::setEnv(char const*, char const*)>:
c001a040:	57                   	push   edi
c001a041:	56                   	push   esi
c001a042:	53                   	push   ebx
c001a043:	83 ec 1c             	sub    esp,0x1c
c001a046:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a04a:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a04e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a052:	57                   	push   edi
c001a053:	e8 3c 67 fe ff       	call   c0000794 <strlen>
c001a058:	40                   	inc    eax
c001a059:	89 04 24             	mov    DWORD PTR [esp],eax
c001a05c:	e8 df 57 ff ff       	call   c000f840 <malloc>
c001a061:	89 34 24             	mov    DWORD PTR [esp],esi
c001a064:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a068:	e8 27 67 fe ff       	call   c0000794 <strlen>
c001a06d:	40                   	inc    eax
c001a06e:	89 04 24             	mov    DWORD PTR [esp],eax
c001a071:	e8 ca 57 ff ff       	call   c000f840 <malloc>
c001a076:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a079:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a07d:	e8 12 67 fe ff       	call   c0000794 <strlen>
c001a082:	83 c4 0c             	add    esp,0xc
c001a085:	40                   	inc    eax
c001a086:	50                   	push   eax
c001a087:	6a 00                	push   0x0
c001a089:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a08d:	e8 e6 66 fe ff       	call   c0000778 <memset>
c001a092:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a095:	e8 fa 66 fe ff       	call   c0000794 <strlen>
c001a09a:	83 c4 0c             	add    esp,0xc
c001a09d:	40                   	inc    eax
c001a09e:	50                   	push   eax
c001a09f:	57                   	push   edi
c001a0a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a0a4:	e8 9b 66 fe ff       	call   c0000744 <memcpy>
c001a0a9:	89 34 24             	mov    DWORD PTR [esp],esi
c001a0ac:	e8 e3 66 fe ff       	call   c0000794 <strlen>
c001a0b1:	83 c4 0c             	add    esp,0xc
c001a0b4:	40                   	inc    eax
c001a0b5:	50                   	push   eax
c001a0b6:	6a 00                	push   0x0
c001a0b8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a0bc:	e8 b7 66 fe ff       	call   c0000778 <memset>
c001a0c1:	89 34 24             	mov    DWORD PTR [esp],esi
c001a0c4:	e8 cb 66 fe ff       	call   c0000794 <strlen>
c001a0c9:	83 c4 0c             	add    esp,0xc
c001a0cc:	40                   	inc    eax
c001a0cd:	50                   	push   eax
c001a0ce:	56                   	push   esi
c001a0cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a0d3:	e8 6c 66 fe ff       	call   c0000744 <memcpy>
c001a0d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a0da:	40                   	inc    eax
c001a0db:	89 03                	mov    DWORD PTR [ebx],eax
c001a0dd:	c1 e0 03             	shl    eax,0x3
c001a0e0:	5a                   	pop    edx
c001a0e1:	59                   	pop    ecx
c001a0e2:	50                   	push   eax
c001a0e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001a0e6:	e8 41 57 ff ff       	call   c000f82c <realloc>
c001a0eb:	83 c4 0c             	add    esp,0xc
c001a0ee:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a0f1:	6a 08                	push   0x8
c001a0f3:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a0f7:	52                   	push   edx
c001a0f8:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a0fa:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a0fe:	50                   	push   eax
c001a0ff:	e8 40 66 fe ff       	call   c0000744 <memcpy>
c001a104:	83 c4 20             	add    esp,0x20
c001a107:	5b                   	pop    ebx
c001a108:	5e                   	pop    esi
c001a109:	5f                   	pop    edi
c001a10a:	c3                   	ret    
c001a10b:	90                   	nop

c001a10c <EnvVarContainer::deleteEnv(char const*)>:
c001a10c:	c3                   	ret    
c001a10d:	90                   	nop

c001a10e <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a10e:	55                   	push   ebp
c001a10f:	57                   	push   edi
c001a110:	56                   	push   esi
c001a111:	53                   	push   ebx
c001a112:	81 ec 38 01 00 00    	sub    esp,0x138
c001a118:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c001a11f:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c001a126:	68 14 01 00 00       	push   0x114
c001a12b:	e8 10 57 ff ff       	call   c000f840 <malloc>
c001a130:	83 c4 0c             	add    esp,0xc
c001a133:	89 c7                	mov    edi,eax
c001a135:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001a138:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a13f:	50                   	push   eax
c001a140:	e8 47 93 ff ff       	call   c001348c <File::File(char const*, Process*)>
c001a145:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a148:	e8 11 96 ff ff       	call   c001375e <File::exists()>
c001a14d:	83 c4 10             	add    esp,0x10
c001a150:	84 c0                	test   al,al
c001a152:	75 31                	jne    c001a185 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001a154:	51                   	push   ecx
c001a155:	51                   	push   ecx
c001a156:	6a 12                	push   0x12
c001a158:	57                   	push   edi
c001a159:	e8 92 93 ff ff       	call   c00134f0 <File::open(FileOpenMode)>
c001a15e:	8b 07                	mov    eax,DWORD PTR [edi]
c001a160:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001a163:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a166:	e8 29 66 fe ff       	call   c0000794 <strlen>
c001a16b:	5a                   	pop    edx
c001a16c:	31 d2                	xor    edx,edx
c001a16e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a172:	51                   	push   ecx
c001a173:	55                   	push   ebp
c001a174:	52                   	push   edx
c001a175:	50                   	push   eax
c001a176:	57                   	push   edi
c001a177:	ff d3                	call   ebx
c001a179:	83 c4 14             	add    esp,0x14
c001a17c:	57                   	push   edi
c001a17d:	e8 cc 93 ff ff       	call   c001354e <File::close()>
c001a182:	83 c4 10             	add    esp,0x10
c001a185:	31 db                	xor    ebx,ebx
c001a187:	50                   	push   eax
c001a188:	31 ed                	xor    ebp,ebp
c001a18a:	68 00 01 00 00       	push   0x100
c001a18f:	6a 00                	push   0x0
c001a191:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a195:	50                   	push   eax
c001a196:	e8 dd 65 fe ff       	call   c0000778 <memset>
c001a19b:	58                   	pop    eax
c001a19c:	5a                   	pop    edx
c001a19d:	6a 01                	push   0x1
c001a19f:	57                   	push   edi
c001a1a0:	e8 4b 93 ff ff       	call   c00134f0 <File::open(FileOpenMode)>
c001a1a5:	83 c4 10             	add    esp,0x10
c001a1a8:	83 ec 0c             	sub    esp,0xc
c001a1ab:	8b 07                	mov    eax,DWORD PTR [edi]
c001a1ad:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a1b1:	51                   	push   ecx
c001a1b2:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a1b6:	52                   	push   edx
c001a1b7:	6a 00                	push   0x0
c001a1b9:	6a 01                	push   0x1
c001a1bb:	57                   	push   edi
c001a1bc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a1bf:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a1c3:	83 c4 20             	add    esp,0x20
c001a1c6:	3c 0d                	cmp    al,0xd
c001a1c8:	0f 84 12 01 00 00    	je     c001a2e0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a1ce:	85 db                	test   ebx,ebx
c001a1d0:	0f 84 fd 00 00 00    	je     c001a2d3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a1d6:	3c 0a                	cmp    al,0xa
c001a1d8:	74 13                	je     c001a1ed <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a1da:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a1df:	74 0c                	je     c001a1ed <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a1e1:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a1e7:	0f 8e e6 00 00 00    	jle    c001a2d3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a1ed:	83 ec 0c             	sub    esp,0xc
c001a1f0:	8d 53 01             	lea    edx,[ebx+0x1]
c001a1f3:	29 dd                	sub    ebp,ebx
c001a1f5:	52                   	push   edx
c001a1f6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a1fa:	e8 41 56 ff ff       	call   c000f840 <malloc>
c001a1ff:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a202:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a206:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a209:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a20d:	e8 2e 56 ff ff       	call   c000f840 <malloc>
c001a212:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a216:	83 c4 0c             	add    esp,0xc
c001a219:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a21d:	52                   	push   edx
c001a21e:	6a 00                	push   0x0
c001a220:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a224:	e8 4f 65 fe ff       	call   c0000778 <memset>
c001a229:	83 c4 0c             	add    esp,0xc
c001a22c:	53                   	push   ebx
c001a22d:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a231:	55                   	push   ebp
c001a232:	01 eb                	add    ebx,ebp
c001a234:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a238:	e8 07 65 fe ff       	call   c0000744 <memcpy>
c001a23d:	83 c4 0c             	add    esp,0xc
c001a240:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a244:	51                   	push   ecx
c001a245:	6a 00                	push   0x0
c001a247:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a24b:	e8 28 65 fe ff       	call   c0000778 <memset>
c001a250:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a253:	e8 3c 65 fe ff       	call   c0000794 <strlen>
c001a258:	83 c4 0c             	add    esp,0xc
c001a25b:	50                   	push   eax
c001a25c:	53                   	push   ebx
c001a25d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a261:	e8 de 64 fe ff       	call   c0000744 <memcpy>
c001a266:	5b                   	pop    ebx
c001a267:	58                   	pop    eax
c001a268:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a26c:	68 71 bb 02 c0       	push   0xc002bb71
c001a271:	e8 be 8c ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001a276:	8b 06                	mov    eax,DWORD PTR [esi]
c001a278:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a27b:	40                   	inc    eax
c001a27c:	83 c4 10             	add    esp,0x10
c001a27f:	89 06                	mov    DWORD PTR [esi],eax
c001a281:	85 d2                	test   edx,edx
c001a283:	75 0c                	jne    c001a291 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a285:	83 ec 0c             	sub    esp,0xc
c001a288:	6a 08                	push   0x8
c001a28a:	e8 b1 55 ff ff       	call   c000f840 <malloc>
c001a28f:	eb 0c                	jmp    c001a29d <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a291:	c1 e0 03             	shl    eax,0x3
c001a294:	51                   	push   ecx
c001a295:	51                   	push   ecx
c001a296:	50                   	push   eax
c001a297:	52                   	push   edx
c001a298:	e8 8f 55 ff ff       	call   c000f82c <realloc>
c001a29d:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a2a0:	83 c4 10             	add    esp,0x10
c001a2a3:	31 db                	xor    ebx,ebx
c001a2a5:	52                   	push   edx
c001a2a6:	6a 08                	push   0x8
c001a2a8:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a2ac:	50                   	push   eax
c001a2ad:	8b 16                	mov    edx,DWORD PTR [esi]
c001a2af:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a2b2:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a2b6:	50                   	push   eax
c001a2b7:	e8 88 64 fe ff       	call   c0000744 <memcpy>
c001a2bc:	83 c4 0c             	add    esp,0xc
c001a2bf:	68 00 01 00 00       	push   0x100
c001a2c4:	6a 00                	push   0x0
c001a2c6:	55                   	push   ebp
c001a2c7:	31 ed                	xor    ebp,ebp
c001a2c9:	e8 aa 64 fe ff       	call   c0000778 <memset>
c001a2ce:	83 c4 10             	add    esp,0x10
c001a2d1:	eb 0d                	jmp    c001a2e0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a2d3:	3c 3d                	cmp    al,0x3d
c001a2d5:	74 07                	je     c001a2de <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a2d7:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a2db:	45                   	inc    ebp
c001a2dc:	eb 02                	jmp    c001a2e0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a2de:	89 eb                	mov    ebx,ebp
c001a2e0:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a2e5:	0f 85 bd fe ff ff    	jne    c001a1a8 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a2eb:	50                   	push   eax
c001a2ec:	50                   	push   eax
c001a2ed:	ff 36                	push   DWORD PTR [esi]
c001a2ef:	68 7f bb 02 c0       	push   0xc002bb7f
c001a2f4:	e8 3b 8c ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001a2f9:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a2ff:	5b                   	pop    ebx
c001a300:	5e                   	pop    esi
c001a301:	5f                   	pop    edi
c001a302:	5d                   	pop    ebp
c001a303:	c3                   	ret    

c001a304 <EnvVarContainer::__loadSystem()>:
c001a304:	83 ec 10             	sub    esp,0x10
c001a307:	68 00 db 02 c0       	push   0xc002db00
c001a30c:	68 aa bb 02 c0       	push   0xc002bbaa
c001a311:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a315:	e8 f4 fd ff ff       	call   c001a10e <EnvVarContainer::loadFrom(char const*, char const*)>
c001a31a:	83 c4 1c             	add    esp,0x1c
c001a31d:	c3                   	ret    

c001a31e <EnvVarContainer::__loadUser()>:
c001a31e:	c3                   	ret    
c001a31f:	90                   	nop

c001a320 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a320:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a324:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a32a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a32e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a332:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a335:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a339:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a340:	90                   	nop
c001a341:	c3                   	ret    

c001a342 <EnvVarContainer::~EnvVarContainer()>:
c001a342:	83 ec 0c             	sub    esp,0xc
c001a345:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a349:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a34c:	85 c0                	test   eax,eax
c001a34e:	74 1d                	je     c001a36d <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a354:	8b 00                	mov    eax,DWORD PTR [eax]
c001a356:	85 c0                	test   eax,eax
c001a358:	74 13                	je     c001a36d <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a35a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a35e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a361:	83 ec 0c             	sub    esp,0xc
c001a364:	50                   	push   eax
c001a365:	e8 e6 54 ff ff       	call   c000f850 <free>
c001a36a:	83 c4 10             	add    esp,0x10
c001a36d:	90                   	nop
c001a36e:	83 c4 0c             	add    esp,0xc
c001a371:	c3                   	ret    

c001a372 <Krnl::getEnv(Process*, char const*)>:
c001a372:	53                   	push   ebx
c001a373:	83 ec 08             	sub    esp,0x8
c001a376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a37a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a37e:	39 05 34 1b 03 c0    	cmp    DWORD PTR ds:0xc0031b34,eax
c001a384:	74 04                	je     c001a38a <Krnl::getEnv(Process*, char const*)+0x18>
c001a386:	85 c0                	test   eax,eax
c001a388:	75 0b                	jne    c001a395 <Krnl::getEnv(Process*, char const*)+0x23>
c001a38a:	a1 14 11 03 c0       	mov    eax,ds:0xc0031114
c001a38f:	85 c0                	test   eax,eax
c001a391:	75 19                	jne    c001a3ac <Krnl::getEnv(Process*, char const*)+0x3a>
c001a393:	eb 27                	jmp    c001a3bc <Krnl::getEnv(Process*, char const*)+0x4a>
c001a395:	52                   	push   edx
c001a396:	52                   	push   edx
c001a397:	53                   	push   ebx
c001a398:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a39e:	e8 5f fc ff ff       	call   c001a002 <EnvVarContainer::getEnv(char const*)>
c001a3a3:	83 c4 10             	add    esp,0x10
c001a3a6:	85 c0                	test   eax,eax
c001a3a8:	75 28                	jne    c001a3d2 <Krnl::getEnv(Process*, char const*)+0x60>
c001a3aa:	eb de                	jmp    c001a38a <Krnl::getEnv(Process*, char const*)+0x18>
c001a3ac:	52                   	push   edx
c001a3ad:	52                   	push   edx
c001a3ae:	53                   	push   ebx
c001a3af:	50                   	push   eax
c001a3b0:	e8 4d fc ff ff       	call   c001a002 <EnvVarContainer::getEnv(char const*)>
c001a3b5:	83 c4 10             	add    esp,0x10
c001a3b8:	85 c0                	test   eax,eax
c001a3ba:	75 16                	jne    c001a3d2 <Krnl::getEnv(Process*, char const*)+0x60>
c001a3bc:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a3c0:	a1 18 11 03 c0       	mov    eax,ds:0xc0031118
c001a3c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a3c9:	83 c4 08             	add    esp,0x8
c001a3cc:	5b                   	pop    ebx
c001a3cd:	e9 30 fc ff ff       	jmp    c001a002 <EnvVarContainer::getEnv(char const*)>
c001a3d2:	83 c4 08             	add    esp,0x8
c001a3d5:	5b                   	pop    ebx
c001a3d6:	c3                   	ret    

c001a3d7 <Krnl::setEnvSystem(char const*, char const*)>:
c001a3d7:	83 ec 10             	sub    esp,0x10
c001a3da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a3de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a3e2:	ff 35 18 11 03 c0    	push   DWORD PTR ds:0xc0031118
c001a3e8:	e8 53 fc ff ff       	call   c001a040 <EnvVarContainer::setEnv(char const*, char const*)>
c001a3ed:	83 c4 1c             	add    esp,0x1c
c001a3f0:	c3                   	ret    

c001a3f1 <Krnl::setEnvUser(char const*, char const*)>:
c001a3f1:	a1 14 11 03 c0       	mov    eax,ds:0xc0031114
c001a3f6:	85 c0                	test   eax,eax
c001a3f8:	74 15                	je     c001a40f <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a3fa:	83 ec 10             	sub    esp,0x10
c001a3fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a401:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a405:	50                   	push   eax
c001a406:	e8 35 fc ff ff       	call   c001a040 <EnvVarContainer::setEnv(char const*, char const*)>
c001a40b:	83 c4 1c             	add    esp,0x1c
c001a40e:	c3                   	ret    
c001a40f:	c3                   	ret    

c001a410 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a410:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a414:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a41a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a41e:	e9 1d fc ff ff       	jmp    c001a040 <EnvVarContainer::setEnv(char const*, char const*)>

c001a423 <Krnl::deleteEnvSystem(char const*)>:
c001a423:	c3                   	ret    

c001a424 <Krnl::deleteEnvUser(char const*)>:
c001a424:	c3                   	ret    

c001a425 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a425:	c3                   	ret    

c001a426 <Krnl::newProcessEnv(Process*)>:
c001a426:	83 ec 28             	sub    esp,0x28
c001a429:	6a 0c                	push   0xc
c001a42b:	e8 10 54 ff ff       	call   c000f840 <malloc>
c001a430:	5a                   	pop    edx
c001a431:	59                   	pop    ecx
c001a432:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a436:	50                   	push   eax
c001a437:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a43b:	e8 e0 fe ff ff       	call   c001a320 <EnvVarContainer::EnvVarContainer(Process*)>
c001a440:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a444:	83 c4 2c             	add    esp,0x2c
c001a447:	c3                   	ret    

c001a448 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a448:	56                   	push   esi
c001a449:	53                   	push   ebx
c001a44a:	83 ec 10             	sub    esp,0x10
c001a44d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a451:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001a457:	6a 0c                	push   0xc
c001a459:	e8 e2 53 ff ff       	call   c000f840 <malloc>
c001a45e:	89 c3                	mov    ebx,eax
c001a460:	58                   	pop    eax
c001a461:	5a                   	pop    edx
c001a462:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a466:	53                   	push   ebx
c001a467:	e8 b4 fe ff ff       	call   c001a320 <EnvVarContainer::EnvVarContainer(Process*)>
c001a46c:	8b 06                	mov    eax,DWORD PTR [esi]
c001a46e:	89 03                	mov    DWORD PTR [ebx],eax
c001a470:	c1 e0 03             	shl    eax,0x3
c001a473:	89 04 24             	mov    DWORD PTR [esp],eax
c001a476:	e8 c5 53 ff ff       	call   c000f840 <malloc>
c001a47b:	83 c4 0c             	add    esp,0xc
c001a47e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a481:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a483:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a48a:	52                   	push   edx
c001a48b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a48e:	50                   	push   eax
c001a48f:	e8 b0 62 fe ff       	call   c0000744 <memcpy>
c001a494:	89 d8                	mov    eax,ebx
c001a496:	83 c4 14             	add    esp,0x14
c001a499:	5b                   	pop    ebx
c001a49a:	5e                   	pop    esi
c001a49b:	c3                   	ret    

c001a49c <Krnl::loadSystemEnv()>:
c001a49c:	53                   	push   ebx
c001a49d:	83 ec 14             	sub    esp,0x14
c001a4a0:	6a 0c                	push   0xc
c001a4a2:	e8 99 53 ff ff       	call   c000f840 <malloc>
c001a4a7:	89 c3                	mov    ebx,eax
c001a4a9:	58                   	pop    eax
c001a4aa:	5a                   	pop    edx
c001a4ab:	ff 35 34 1b 03 c0    	push   DWORD PTR ds:0xc0031b34
c001a4b1:	53                   	push   ebx
c001a4b2:	e8 69 fe ff ff       	call   c001a320 <EnvVarContainer::EnvVarContainer(Process*)>
c001a4b7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a4ba:	89 1d 18 11 03 c0    	mov    DWORD PTR ds:0xc0031118,ebx
c001a4c0:	e8 3f fe ff ff       	call   c001a304 <EnvVarContainer::__loadSystem()>
c001a4c5:	83 c4 18             	add    esp,0x18
c001a4c8:	5b                   	pop    ebx
c001a4c9:	c3                   	ret    

c001a4ca <Krnl::loadUserEnv()>:
c001a4ca:	53                   	push   ebx
c001a4cb:	83 ec 14             	sub    esp,0x14
c001a4ce:	6a 0c                	push   0xc
c001a4d0:	e8 6b 53 ff ff       	call   c000f840 <malloc>
c001a4d5:	89 c3                	mov    ebx,eax
c001a4d7:	58                   	pop    eax
c001a4d8:	5a                   	pop    edx
c001a4d9:	ff 35 34 1b 03 c0    	push   DWORD PTR ds:0xc0031b34
c001a4df:	53                   	push   ebx
c001a4e0:	e8 3b fe ff ff       	call   c001a320 <EnvVarContainer::EnvVarContainer(Process*)>
c001a4e5:	89 1d 14 11 03 c0    	mov    DWORD PTR ds:0xc0031114,ebx
c001a4eb:	83 c4 18             	add    esp,0x18
c001a4ee:	5b                   	pop    ebx
c001a4ef:	c3                   	ret    

c001a4f0 <Krnl::flushEnv()>:
c001a4f0:	c3                   	ret    

c001a4f1 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a4f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a4f5:	8b 15 14 11 03 c0    	mov    edx,DWORD PTR ds:0xc0031114
c001a4fb:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a501:	a1 18 11 03 c0       	mov    eax,ds:0xc0031118
c001a506:	8b 00                	mov    eax,DWORD PTR [eax]
c001a508:	03 01                	add    eax,DWORD PTR [ecx]
c001a50a:	85 d2                	test   edx,edx
c001a50c:	74 02                	je     c001a510 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a50e:	03 02                	add    eax,DWORD PTR [edx]
c001a510:	c3                   	ret    

c001a511 <Krnl::getProcessEnvPair(Process*, int)>:
c001a511:	57                   	push   edi
c001a512:	8b 0d 14 11 03 c0    	mov    ecx,DWORD PTR ds:0xc0031114
c001a518:	56                   	push   esi
c001a519:	85 c9                	test   ecx,ecx
c001a51b:	53                   	push   ebx
c001a51c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a520:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a524:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a52a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a52e:	8b 02                	mov    eax,DWORD PTR [edx]
c001a530:	75 47                	jne    c001a579 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a532:	39 c3                	cmp    ebx,eax
c001a534:	7c 47                	jl     c001a57d <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a536:	8b 15 18 11 03 c0    	mov    edx,DWORD PTR ds:0xc0031118
c001a53c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a53e:	01 c1                	add    ecx,eax
c001a540:	39 d9                	cmp    ecx,ebx
c001a542:	7e 6c                	jle    c001a5b0 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a544:	51                   	push   ecx
c001a545:	89 d9                	mov    ecx,ebx
c001a547:	29 c1                	sub    ecx,eax
c001a549:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a54c:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a550:	53                   	push   ebx
c001a551:	68 cc bb 02 c0       	push   0xc002bbcc
c001a556:	e8 d9 89 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001a55b:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a561:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a563:	a1 18 11 03 c0       	mov    eax,ds:0xc0031118
c001a568:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a56b:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a56f:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a572:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a575:	89 06                	mov    DWORD PTR [esi],eax
c001a577:	eb 51                	jmp    c001a5ca <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a579:	39 c3                	cmp    ebx,eax
c001a57b:	7d 05                	jge    c001a582 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a57d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a580:	eb 20                	jmp    c001a5a2 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a582:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a584:	8d 14 07             	lea    edx,[edi+eax*1]
c001a587:	39 da                	cmp    edx,ebx
c001a589:	7e 04                	jle    c001a58f <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a58b:	29 c3                	sub    ebx,eax
c001a58d:	eb 10                	jmp    c001a59f <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a58f:	8b 0d 18 11 03 c0    	mov    ecx,DWORD PTR ds:0xc0031118
c001a595:	03 11                	add    edx,DWORD PTR [ecx]
c001a597:	39 da                	cmp    edx,ebx
c001a599:	7e 15                	jle    c001a5b0 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a59b:	29 c3                	sub    ebx,eax
c001a59d:	29 fb                	sub    ebx,edi
c001a59f:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a5a2:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a5a6:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a5a9:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a5ac:	89 06                	mov    DWORD PTR [esi],eax
c001a5ae:	eb 1d                	jmp    c001a5cd <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a5b0:	83 ec 0c             	sub    esp,0xc
c001a5b3:	68 e0 bb 02 c0       	push   0xc002bbe0
c001a5b8:	e8 18 00 00 00       	call   c001a5d5 <Krnl::panic(char const*)>
c001a5bd:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a5c3:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a5ca:	83 c4 10             	add    esp,0x10
c001a5cd:	89 f0                	mov    eax,esi
c001a5cf:	5b                   	pop    ebx
c001a5d0:	5e                   	pop    esi
c001a5d1:	5f                   	pop    edi
c001a5d2:	c2 04 00             	ret    0x4

c001a5d5 <Krnl::panic(char const*)>:
c001a5d5:	55                   	push   ebp
c001a5d6:	89 e5                	mov    ebp,esp
c001a5d8:	53                   	push   ebx
c001a5d9:	83 ec 0c             	sub    esp,0xc
c001a5dc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a5df:	fa                   	cli    
c001a5e0:	c6 05 24 11 03 c0 01 	mov    BYTE PTR ds:0xc0031124,0x1
c001a5e7:	53                   	push   ebx
c001a5e8:	c6 05 04 d5 02 c0 00 	mov    BYTE PTR ds:0xc002d504,0x0
c001a5ef:	68 fa bb 02 c0       	push   0xc002bbfa
c001a5f4:	e8 3b 89 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001a5f9:	58                   	pop    eax
c001a5fa:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a5ff:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a605:	e8 33 67 ff ff       	call   c0010d3d <setActiveTerminal(VgaText*)>
c001a60a:	83 c4 0c             	add    esp,0xc
c001a60d:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a612:	6a 01                	push   0x1
c001a614:	6a 0f                	push   0xf
c001a616:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a61c:	e8 4d 61 ff ff       	call   c001076e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a621:	58                   	pop    eax
c001a622:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a627:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a62d:	e8 ac 69 ff ff       	call   c0010fde <VgaText::clearScreen()>
c001a632:	58                   	pop    eax
c001a633:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a638:	5a                   	pop    edx
c001a639:	68 13 bc 02 c0       	push   0xc002bc13
c001a63e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a644:	e8 13 6b ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a649:	59                   	pop    ecx
c001a64a:	58                   	pop    eax
c001a64b:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a650:	68 b8 bc 02 c0       	push   0xc002bcb8
c001a655:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a65b:	e8 fc 6a ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a660:	58                   	pop    eax
c001a661:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a666:	5a                   	pop    edx
c001a667:	68 2f bc 02 c0       	push   0xc002bc2f
c001a66c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a672:	e8 e5 6a ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a677:	59                   	pop    ecx
c001a678:	58                   	pop    eax
c001a679:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a67e:	53                   	push   ebx
c001a67f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a685:	e8 d2 6a ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a68a:	58                   	pop    eax
c001a68b:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a690:	5a                   	pop    edx
c001a691:	68 4f bc 02 c0       	push   0xc002bc4f
c001a696:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a69c:	e8 bb 6a ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a6a1:	a1 20 11 03 c0       	mov    eax,ds:0xc0031120
c001a6a6:	83 c4 10             	add    esp,0x10
c001a6a9:	85 c0                	test   eax,eax
c001a6ab:	74 02                	je     c001a6af <Krnl::panic(char const*)+0xda>
c001a6ad:	ff d0                	call   eax
c001a6af:	83 ec 0c             	sub    esp,0xc
c001a6b2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a6b5:	e8 47 30 00 00       	call   c001d701 <Thr::getDriverNameFromAddress(unsigned long)>
c001a6ba:	83 c4 10             	add    esp,0x10
c001a6bd:	89 c3                	mov    ebx,eax
c001a6bf:	85 c0                	test   eax,eax
c001a6c1:	0f 84 50 02 00 00    	je     c001a917 <Krnl::panic(char const*)+0x342>
c001a6c7:	83 ec 08             	sub    esp,0x8
c001a6ca:	8b 15 34 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b34
c001a6d0:	68 f4 bc 02 c0       	push   0xc002bcf4
c001a6d5:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a6db:	e8 7c 6a ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a6e0:	58                   	pop    eax
c001a6e1:	5a                   	pop    edx
c001a6e2:	8b 15 34 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b34
c001a6e8:	68 2f bc 02 c0       	push   0xc002bc2f
c001a6ed:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a6f3:	e8 64 6a ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a6f8:	59                   	pop    ecx
c001a6f9:	58                   	pop    eax
c001a6fa:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a6ff:	53                   	push   ebx
c001a700:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a706:	e8 51 6a ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a70b:	83 c4 10             	add    esp,0x10
c001a70e:	83 ec 08             	sub    esp,0x8
c001a711:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a716:	68 4e bc 02 c0       	push   0xc002bc4e
c001a71b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a721:	e8 36 6a ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a726:	58                   	pop    eax
c001a727:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a72c:	5a                   	pop    edx
c001a72d:	68 4c bd 02 c0       	push   0xc002bd4c
c001a732:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a738:	e8 1f 6a ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a73d:	59                   	pop    ecx
c001a73e:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a743:	5b                   	pop    ebx
c001a744:	68 8c bd 02 c0       	push   0xc002bd8c
c001a749:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a74f:	e8 08 6a ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a754:	58                   	pop    eax
c001a755:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a75a:	5a                   	pop    edx
c001a75b:	68 3a bc 02 c0       	push   0xc002bc3a
c001a760:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a766:	e8 f1 69 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a76b:	59                   	pop    ecx
c001a76c:	5b                   	pop    ebx
c001a76d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a770:	68 52 bc 02 c0       	push   0xc002bc52
c001a775:	e8 ba 87 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001a77a:	58                   	pop    eax
c001a77b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a77e:	5a                   	pop    edx
c001a77f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a782:	68 5b bc 02 c0       	push   0xc002bc5b
c001a787:	e8 a8 87 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001a78c:	59                   	pop    ecx
c001a78d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a790:	5b                   	pop    ebx
c001a791:	8b 00                	mov    eax,DWORD PTR [eax]
c001a793:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a796:	68 64 bc 02 c0       	push   0xc002bc64
c001a79b:	e8 94 87 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001a7a0:	58                   	pop    eax
c001a7a1:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a7a6:	5a                   	pop    edx
c001a7a7:	68 d0 bd 02 c0       	push   0xc002bdd0
c001a7ac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7b2:	e8 a5 69 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a7b7:	59                   	pop    ecx
c001a7b8:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a7bd:	5b                   	pop    ebx
c001a7be:	68 6d bc 02 c0       	push   0xc002bc6d
c001a7c3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7c9:	e8 8e 69 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a7ce:	0f 20 c0             	mov    eax,cr0
c001a7d1:	5a                   	pop    edx
c001a7d2:	59                   	pop    ecx
c001a7d3:	50                   	push   eax
c001a7d4:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a7d9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7df:	e8 9e 69 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c001a7e4:	5b                   	pop    ebx
c001a7e5:	58                   	pop    eax
c001a7e6:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a7eb:	68 77 bc 02 c0       	push   0xc002bc77
c001a7f0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7f6:	e8 61 69 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a7fb:	0f 20 d0             	mov    eax,cr2
c001a7fe:	5a                   	pop    edx
c001a7ff:	59                   	pop    ecx
c001a800:	50                   	push   eax
c001a801:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a806:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a80c:	e8 71 69 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c001a811:	5b                   	pop    ebx
c001a812:	58                   	pop    eax
c001a813:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a818:	68 81 bc 02 c0       	push   0xc002bc81
c001a81d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a823:	e8 34 69 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a828:	0f 20 d8             	mov    eax,cr3
c001a82b:	5a                   	pop    edx
c001a82c:	59                   	pop    ecx
c001a82d:	50                   	push   eax
c001a82e:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a833:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a839:	e8 44 69 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c001a83e:	5b                   	pop    ebx
c001a83f:	58                   	pop    eax
c001a840:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a845:	68 94 bc 02 c0       	push   0xc002bc94
c001a84a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a850:	e8 07 69 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a855:	0f 20 e0             	mov    eax,cr4
c001a858:	5a                   	pop    edx
c001a859:	59                   	pop    ecx
c001a85a:	50                   	push   eax
c001a85b:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a860:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a866:	e8 17 69 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c001a86b:	5b                   	pop    ebx
c001a86c:	58                   	pop    eax
c001a86d:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a872:	68 9e bc 02 c0       	push   0xc002bc9e
c001a877:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a87d:	e8 da 68 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a882:	5a                   	pop    edx
c001a883:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a888:	59                   	pop    ecx
c001a889:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a88f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a892:	50                   	push   eax
c001a893:	e8 ea 68 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c001a898:	5b                   	pop    ebx
c001a899:	58                   	pop    eax
c001a89a:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a89f:	68 b5 bc 02 c0       	push   0xc002bcb5
c001a8a4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8aa:	e8 ad 68 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a8af:	5a                   	pop    edx
c001a8b0:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a8b5:	59                   	pop    ecx
c001a8b6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a8bc:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a8bf:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a8c2:	50                   	push   eax
c001a8c3:	e8 ba 68 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c001a8c8:	5b                   	pop    ebx
c001a8c9:	58                   	pop    eax
c001a8ca:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a8cf:	68 b5 bc 02 c0       	push   0xc002bcb5
c001a8d4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8da:	e8 7d 68 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a8df:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a8e4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a8e7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a8ed:	8b 12                	mov    edx,DWORD PTR [edx]
c001a8ef:	59                   	pop    ecx
c001a8f0:	5b                   	pop    ebx
c001a8f1:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a8f4:	50                   	push   eax
c001a8f5:	e8 88 68 ff ff       	call   c0011182 <VgaText::putx(unsigned int)>
c001a8fa:	83 c4 10             	add    esp,0x10
c001a8fd:	b2 fe                	mov    dl,0xfe
c001a8ff:	e4 60                	in     al,0x60
c001a901:	3c 1c                	cmp    al,0x1c
c001a903:	74 04                	je     c001a909 <Krnl::panic(char const*)+0x334>
c001a905:	3c 5a                	cmp    al,0x5a
c001a907:	75 f6                	jne    c001a8ff <Krnl::panic(char const*)+0x32a>
c001a909:	e4 64                	in     al,0x64
c001a90b:	a8 02                	test   al,0x2
c001a90d:	75 fa                	jne    c001a909 <Krnl::panic(char const*)+0x334>
c001a90f:	88 d0                	mov    al,dl
c001a911:	e6 64                	out    0x64,al
c001a913:	fa                   	cli    
c001a914:	f4                   	hlt    
c001a915:	eb e8                	jmp    c001a8ff <Krnl::panic(char const*)+0x32a>
c001a917:	50                   	push   eax
c001a918:	50                   	push   eax
c001a919:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a91e:	68 20 bd 02 c0       	push   0xc002bd20
c001a923:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a929:	e8 2e 68 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a92e:	58                   	pop    eax
c001a92f:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a934:	5a                   	pop    edx
c001a935:	68 2f bc 02 c0       	push   0xc002bc2f
c001a93a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a940:	e8 17 68 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a945:	59                   	pop    ecx
c001a946:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a94b:	5b                   	pop    ebx
c001a94c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a94f:	83 c0 0c             	add    eax,0xc
c001a952:	50                   	push   eax
c001a953:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a958:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a95e:	e8 f9 67 ff ff       	call   c001115c <VgaText::puts(char const*)>
c001a963:	83 c4 10             	add    esp,0x10
c001a966:	e9 a3 fd ff ff       	jmp    c001a70e <Krnl::panic(char const*)+0x139>

c001a96b <Net::switchEndian16(unsigned short)>:
c001a96b:	83 ec 04             	sub    esp,0x4
c001a96e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a972:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a976:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a97a:	c1 f8 08             	sar    eax,0x8
c001a97d:	89 c2                	mov    edx,eax
c001a97f:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a983:	c1 e0 08             	shl    eax,0x8
c001a986:	09 d0                	or     eax,edx
c001a988:	83 c4 04             	add    esp,0x4
c001a98b:	c3                   	ret    

c001a98c <Net::switchEndian32(unsigned int)>:
c001a98c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a990:	c1 e8 18             	shr    eax,0x18
c001a993:	89 c2                	mov    edx,eax
c001a995:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a999:	c1 e0 08             	shl    eax,0x8
c001a99c:	25 00 00 ff 00       	and    eax,0xff0000
c001a9a1:	09 c2                	or     edx,eax
c001a9a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9a7:	c1 e8 08             	shr    eax,0x8
c001a9aa:	25 00 ff 00 00       	and    eax,0xff00
c001a9af:	09 c2                	or     edx,eax
c001a9b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9b5:	c1 e0 18             	shl    eax,0x18
c001a9b8:	09 d0                	or     eax,edx
c001a9ba:	c3                   	ret    

c001a9bb <Net::crc32Calc(unsigned char*, int)>:
c001a9bb:	83 ec 10             	sub    esp,0x10
c001a9be:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a9c3:	75 07                	jne    c001a9cc <Net::crc32Calc(unsigned char*, int)+0x11>
c001a9c5:	b8 00 00 00 00       	mov    eax,0x0
c001a9ca:	eb 7c                	jmp    c001aa48 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a9cc:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a9d1:	7f 07                	jg     c001a9da <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a9d3:	b8 00 00 00 00       	mov    eax,0x0
c001a9d8:	eb 6e                	jmp    c001aa48 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a9da:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a9e2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a9ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9ee:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a9f2:	7d 4e                	jge    c001aa42 <Net::crc32Calc(unsigned char*, int)+0x87>
c001a9f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a9f8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a9fc:	01 d0                	add    eax,edx
c001a9fe:	8a 00                	mov    al,BYTE PTR [eax]
c001aa00:	0f b6 c0             	movzx  eax,al
c001aa03:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001aa07:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aa0f:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001aa14:	7f 26                	jg     c001aa3c <Net::crc32Calc(unsigned char*, int)+0x81>
c001aa16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa1a:	83 e0 01             	and    eax,0x1
c001aa1d:	74 0d                	je     c001aa2c <Net::crc32Calc(unsigned char*, int)+0x71>
c001aa1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa23:	d1 e8                	shr    eax,1
c001aa25:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001aa2a:	eb 06                	jmp    c001aa32 <Net::crc32Calc(unsigned char*, int)+0x77>
c001aa2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa30:	d1 e8                	shr    eax,1
c001aa32:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aa36:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aa3a:	eb d3                	jmp    c001aa0f <Net::crc32Calc(unsigned char*, int)+0x54>
c001aa3c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001aa40:	eb a8                	jmp    c001a9ea <Net::crc32Calc(unsigned char*, int)+0x2f>
c001aa42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa46:	f7 d0                	not    eax
c001aa48:	83 c4 10             	add    esp,0x10
c001aa4b:	c3                   	ret    

c001aa4c <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001aa4c:	83 ec 1c             	sub    esp,0x1c
c001aa4f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aa57:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aa5f:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001aa64:	7f 14                	jg     c001aa7a <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001aa66:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa6a:	8d 50 01             	lea    edx,[eax+0x1]
c001aa6d:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa71:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001aa74:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aa78:	eb e5                	jmp    c001aa5f <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001aa7a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa7e:	8d 50 01             	lea    edx,[eax+0x1]
c001aa81:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa85:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001aa88:	83 ec 04             	sub    esp,0x4
c001aa8b:	6a 06                	push   0x6
c001aa8d:	8d 44 24 36          	lea    eax,[esp+0x36]
c001aa91:	50                   	push   eax
c001aa92:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aa96:	e8 a9 5c fe ff       	call   c0000744 <memcpy>
c001aa9b:	83 c4 10             	add    esp,0x10
c001aa9e:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001aaa3:	83 ec 04             	sub    esp,0x4
c001aaa6:	6a 06                	push   0x6
c001aaa8:	8d 44 24 30          	lea    eax,[esp+0x30]
c001aaac:	50                   	push   eax
c001aaad:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aab1:	e8 8e 5c fe ff       	call   c0000744 <memcpy>
c001aab6:	83 c4 10             	add    esp,0x10
c001aab9:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001aabe:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aac2:	0f b7 c0             	movzx  eax,ax
c001aac5:	c1 f8 08             	sar    eax,0x8
c001aac8:	89 c1                	mov    ecx,eax
c001aaca:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aace:	8d 50 01             	lea    edx,[eax+0x1]
c001aad1:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aad5:	88 ca                	mov    dl,cl
c001aad7:	88 10                	mov    BYTE PTR [eax],dl
c001aad9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001aadd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aae1:	8d 48 01             	lea    ecx,[eax+0x1]
c001aae4:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001aae8:	88 10                	mov    BYTE PTR [eax],dl
c001aaea:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001aaee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aaf2:	83 ec 04             	sub    esp,0x4
c001aaf5:	52                   	push   edx
c001aaf6:	50                   	push   eax
c001aaf7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aafb:	e8 44 5c fe ff       	call   c0000744 <memcpy>
c001ab00:	83 c4 10             	add    esp,0x10
c001ab03:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ab07:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001ab0b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab0f:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001ab13:	83 ec 08             	sub    esp,0x8
c001ab16:	50                   	push   eax
c001ab17:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ab1b:	e8 9b fe ff ff       	call   c001a9bb <Net::crc32Calc(unsigned char*, int)>
c001ab20:	83 c4 10             	add    esp,0x10
c001ab23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ab27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab2b:	c1 e8 18             	shr    eax,0x18
c001ab2e:	89 c1                	mov    ecx,eax
c001ab30:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab34:	8d 50 01             	lea    edx,[eax+0x1]
c001ab37:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab3b:	88 ca                	mov    dl,cl
c001ab3d:	88 10                	mov    BYTE PTR [eax],dl
c001ab3f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab43:	c1 e8 10             	shr    eax,0x10
c001ab46:	89 c1                	mov    ecx,eax
c001ab48:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab4c:	8d 50 01             	lea    edx,[eax+0x1]
c001ab4f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab53:	88 ca                	mov    dl,cl
c001ab55:	88 10                	mov    BYTE PTR [eax],dl
c001ab57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab5b:	c1 e8 08             	shr    eax,0x8
c001ab5e:	89 c1                	mov    ecx,eax
c001ab60:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab64:	8d 50 01             	lea    edx,[eax+0x1]
c001ab67:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab6b:	88 ca                	mov    dl,cl
c001ab6d:	88 10                	mov    BYTE PTR [eax],dl
c001ab6f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab73:	8d 50 01             	lea    edx,[eax+0x1]
c001ab76:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab7a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ab7e:	88 10                	mov    BYTE PTR [eax],dl
c001ab80:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ab84:	83 c4 1c             	add    esp,0x1c
c001ab87:	c3                   	ret    

c001ab88 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001ab88:	83 ec 2c             	sub    esp,0x2c
c001ab8b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab8f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ab93:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001ab98:	83 ec 04             	sub    esp,0x4
c001ab9b:	6a 06                	push   0x6
c001ab9d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001aba1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001aba5:	83 c0 0e             	add    eax,0xe
c001aba8:	50                   	push   eax
c001aba9:	e8 96 5b fe ff       	call   c0000744 <memcpy>
c001abae:	83 c4 10             	add    esp,0x10
c001abb1:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001abb6:	83 ec 04             	sub    esp,0x4
c001abb9:	6a 06                	push   0x6
c001abbb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001abbf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001abc3:	83 c0 08             	add    eax,0x8
c001abc6:	50                   	push   eax
c001abc7:	e8 78 5b fe ff       	call   c0000744 <memcpy>
c001abcc:	83 c4 10             	add    esp,0x10
c001abcf:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001abd4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001abd8:	8d 50 01             	lea    edx,[eax+0x1]
c001abdb:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001abdf:	8a 00                	mov    al,BYTE PTR [eax]
c001abe1:	0f b6 c0             	movzx  eax,al
c001abe4:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001abe9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001abed:	8d 50 01             	lea    edx,[eax+0x1]
c001abf0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001abf4:	8a 00                	mov    al,BYTE PTR [eax]
c001abf6:	0f b6 c0             	movzx  eax,al
c001abf9:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001abfe:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001ac03:	c1 e0 08             	shl    eax,0x8
c001ac06:	89 c2                	mov    edx,eax
c001ac08:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ac0c:	09 d0                	or     eax,edx
c001ac0e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ac12:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001ac16:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001ac1b:	75 3a                	jne    c001ac57 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ac1d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac21:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ac24:	66 3d dc 05          	cmp    ax,0x5dc
c001ac28:	77 10                	ja     c001ac3a <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001ac2a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac2e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ac31:	0f b7 c0             	movzx  eax,ax
c001ac34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ac38:	eb 1d                	jmp    c001ac57 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ac3a:	83 ec 0c             	sub    esp,0xc
c001ac3d:	68 f8 bd 02 c0       	push   0xc002bdf8
c001ac42:	e8 ed 82 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001ac47:	83 c4 10             	add    esp,0x10
c001ac4a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac4e:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001ac52:	e9 c0 00 00 00       	jmp    c001ad17 <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001ac57:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ac5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac5f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac61:	83 ec 04             	sub    esp,0x4
c001ac64:	52                   	push   edx
c001ac65:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ac69:	50                   	push   eax
c001ac6a:	e8 d5 5a fe ff       	call   c0000744 <memcpy>
c001ac6f:	83 c4 10             	add    esp,0x10
c001ac72:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac76:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001ac7a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac7e:	8d 50 01             	lea    edx,[eax+0x1]
c001ac81:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac85:	8a 00                	mov    al,BYTE PTR [eax]
c001ac87:	0f b6 c0             	movzx  eax,al
c001ac8a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ac8e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac92:	8d 50 01             	lea    edx,[eax+0x1]
c001ac95:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac99:	8a 00                	mov    al,BYTE PTR [eax]
c001ac9b:	0f b6 c0             	movzx  eax,al
c001ac9e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001aca2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aca6:	8d 50 01             	lea    edx,[eax+0x1]
c001aca9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001acad:	8a 00                	mov    al,BYTE PTR [eax]
c001acaf:	0f b6 c0             	movzx  eax,al
c001acb2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001acb6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001acba:	8d 50 01             	lea    edx,[eax+0x1]
c001acbd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001acc1:	8a 00                	mov    al,BYTE PTR [eax]
c001acc3:	0f b6 c0             	movzx  eax,al
c001acc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001acca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001acce:	c1 e0 18             	shl    eax,0x18
c001acd1:	89 c2                	mov    edx,eax
c001acd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acd7:	c1 e0 10             	shl    eax,0x10
c001acda:	09 c2                	or     edx,eax
c001acdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ace0:	c1 e0 08             	shl    eax,0x8
c001ace3:	09 d0                	or     eax,edx
c001ace5:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001ace9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aced:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001acf1:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001acf5:	83 e8 04             	sub    eax,0x4
c001acf8:	83 ec 08             	sub    esp,0x8
c001acfb:	50                   	push   eax
c001acfc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ad00:	e8 b6 fc ff ff       	call   c001a9bb <Net::crc32Calc(unsigned char*, int)>
c001ad05:	83 c4 10             	add    esp,0x10
c001ad08:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001ad0c:	0f 94 c2             	sete   dl
c001ad0f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad13:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001ad16:	90                   	nop
c001ad17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad1b:	83 c4 2c             	add    esp,0x2c
c001ad1e:	c2 04 00             	ret    0x4

c001ad21 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001ad21:	55                   	push   ebp
c001ad22:	57                   	push   edi
c001ad23:	56                   	push   esi
c001ad24:	53                   	push   ebx
c001ad25:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ad2b:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001ad32:	8a 1e                	mov    bl,BYTE PTR [esi]
c001ad34:	8d 6e 01             	lea    ebp,[esi+0x1]
c001ad37:	80 fb 40             	cmp    bl,0x40
c001ad3a:	75 1b                	jne    c001ad57 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001ad3c:	8a 16                	mov    dl,BYTE PTR [esi]
c001ad3e:	84 d2                	test   dl,dl
c001ad40:	0f 84 f1 00 00 00    	je     c001ae37 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad46:	8d 46 01             	lea    eax,[esi+0x1]
c001ad49:	80 fa 3a             	cmp    dl,0x3a
c001ad4c:	74 04                	je     c001ad52 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001ad4e:	89 c6                	mov    esi,eax
c001ad50:	eb ea                	jmp    c001ad3c <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001ad52:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ad55:	89 c6                	mov    esi,eax
c001ad57:	50                   	push   eax
c001ad58:	6a 40                	push   0x40
c001ad5a:	6a 00                	push   0x0
c001ad5c:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ad60:	50                   	push   eax
c001ad61:	e8 12 5a fe ff       	call   c0000778 <memset>
c001ad66:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ad6d:	31 c0                	xor    eax,eax
c001ad6f:	83 c4 10             	add    esp,0x10
c001ad72:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ad74:	84 c9                	test   cl,cl
c001ad76:	0f 84 bb 00 00 00    	je     c001ae37 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad7c:	3d c7 00 00 00       	cmp    eax,0xc7
c001ad81:	0f 8f b0 00 00 00    	jg     c001ae37 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad87:	80 f9 0a             	cmp    cl,0xa
c001ad8a:	0f 85 98 00 00 00    	jne    c001ae28 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001ad90:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001ad95:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001ad99:	a8 df                	test   al,0xdf
c001ad9b:	0f 94 c1             	sete   cl
c001ad9e:	3c 23                	cmp    al,0x23
c001ada0:	0f 94 c2             	sete   dl
c001ada3:	08 d1                	or     cl,dl
c001ada5:	75 4a                	jne    c001adf1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ada7:	8d 50 f7             	lea    edx,[eax-0x9]
c001adaa:	80 fa 01             	cmp    dl,0x1
c001adad:	76 42                	jbe    c001adf1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001adaf:	3c 5b                	cmp    al,0x5b
c001adb1:	75 42                	jne    c001adf5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001adb3:	80 fb 40             	cmp    bl,0x40
c001adb6:	75 39                	jne    c001adf1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001adb8:	83 ec 0c             	sub    esp,0xc
c001adbb:	8d 54 24 65          	lea    edx,[esp+0x65]
c001adbf:	52                   	push   edx
c001adc0:	e8 cf 59 fe ff       	call   c0000794 <strlen>
c001adc5:	83 c4 10             	add    esp,0x10
c001adc8:	83 f8 3f             	cmp    eax,0x3f
c001adcb:	77 6a                	ja     c001ae37 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001adcd:	50                   	push   eax
c001adce:	50                   	push   eax
c001adcf:	8d 54 24 61          	lea    edx,[esp+0x61]
c001add3:	52                   	push   edx
c001add4:	8d 54 24 24          	lea    edx,[esp+0x24]
c001add8:	52                   	push   edx
c001add9:	e8 56 5a fe ff       	call   c0000834 <strcpy>
c001adde:	58                   	pop    eax
c001addf:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ade3:	52                   	push   edx
c001ade4:	e8 ab 59 fe ff       	call   c0000794 <strlen>
c001ade9:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001adee:	83 c4 10             	add    esp,0x10
c001adf1:	31 d2                	xor    edx,edx
c001adf3:	eb 3a                	jmp    c001ae2f <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001adf5:	80 fb 40             	cmp    bl,0x40
c001adf8:	74 06                	je     c001ae00 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001adfa:	8d 44 24 58          	lea    eax,[esp+0x58]
c001adfe:	eb 20                	jmp    c001ae20 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001ae00:	50                   	push   eax
c001ae01:	50                   	push   eax
c001ae02:	55                   	push   ebp
c001ae03:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ae07:	50                   	push   eax
c001ae08:	e8 b3 5a fe ff       	call   c00008c0 <strcmp>
c001ae0d:	83 c4 10             	add    esp,0x10
c001ae10:	85 c0                	test   eax,eax
c001ae12:	75 dd                	jne    c001adf1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae14:	eb e4                	jmp    c001adfa <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001ae16:	8d 50 01             	lea    edx,[eax+0x1]
c001ae19:	80 f9 3d             	cmp    cl,0x3d
c001ae1c:	74 1d                	je     c001ae3b <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001ae1e:	89 d0                	mov    eax,edx
c001ae20:	8a 08                	mov    cl,BYTE PTR [eax]
c001ae22:	84 c9                	test   cl,cl
c001ae24:	75 f0                	jne    c001ae16 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001ae26:	eb 0f                	jmp    c001ae37 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae28:	8d 50 01             	lea    edx,[eax+0x1]
c001ae2b:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001ae2f:	47                   	inc    edi
c001ae30:	89 d0                	mov    eax,edx
c001ae32:	e9 3b ff ff ff       	jmp    c001ad72 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001ae37:	31 c0                	xor    eax,eax
c001ae39:	eb 33                	jmp    c001ae6e <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001ae3b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ae3f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001ae42:	50                   	push   eax
c001ae43:	50                   	push   eax
c001ae44:	8d 44 24 60          	lea    eax,[esp+0x60]
c001ae48:	50                   	push   eax
c001ae49:	56                   	push   esi
c001ae4a:	e8 71 5a fe ff       	call   c00008c0 <strcmp>
c001ae4f:	83 c4 10             	add    esp,0x10
c001ae52:	85 c0                	test   eax,eax
c001ae54:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ae58:	75 97                	jne    c001adf1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae5a:	51                   	push   ecx
c001ae5b:	51                   	push   ecx
c001ae5c:	52                   	push   edx
c001ae5d:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001ae64:	e8 cb 59 fe ff       	call   c0000834 <strcpy>
c001ae69:	83 c4 10             	add    esp,0x10
c001ae6c:	b0 01                	mov    al,0x1
c001ae6e:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ae74:	5b                   	pop    ebx
c001ae75:	5e                   	pop    esi
c001ae76:	5f                   	pop    edi
c001ae77:	5d                   	pop    ebp
c001ae78:	c3                   	ret    

c001ae79 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001ae79:	57                   	push   edi
c001ae7a:	56                   	push   esi
c001ae7b:	53                   	push   ebx
c001ae7c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ae82:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001ae89:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001ae90:	53                   	push   ebx
c001ae91:	e8 fe 58 fe ff       	call   c0000794 <strlen>
c001ae96:	89 34 24             	mov    DWORD PTR [esp],esi
c001ae99:	89 c7                	mov    edi,eax
c001ae9b:	e8 f4 58 fe ff       	call   c0000794 <strlen>
c001aea0:	83 c4 10             	add    esp,0x10
c001aea3:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001aea7:	3d ff 00 00 00       	cmp    eax,0xff
c001aeac:	0f 87 d3 00 00 00    	ja     c001af85 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001aeb2:	57                   	push   edi
c001aeb3:	57                   	push   edi
c001aeb4:	56                   	push   esi
c001aeb5:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001aeb9:	56                   	push   esi
c001aeba:	e8 75 59 fe ff       	call   c0000834 <strcpy>
c001aebf:	58                   	pop    eax
c001aec0:	5a                   	pop    edx
c001aec1:	68 b4 c3 02 c0       	push   0xc002c3b4
c001aec6:	56                   	push   esi
c001aec7:	e8 a8 5a fe ff       	call   c0000974 <strcat>
c001aecc:	59                   	pop    ecx
c001aecd:	5f                   	pop    edi
c001aece:	53                   	push   ebx
c001aecf:	56                   	push   esi
c001aed0:	e8 9f 5a fe ff       	call   c0000974 <strcat>
c001aed5:	58                   	pop    eax
c001aed6:	5a                   	pop    edx
c001aed7:	68 44 be 02 c0       	push   0xc002be44
c001aedc:	56                   	push   esi
c001aedd:	e8 92 5a fe ff       	call   c0000974 <strcat>
c001aee2:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001aee9:	e8 52 49 ff ff       	call   c000f840 <malloc>
c001aeee:	83 c4 0c             	add    esp,0xc
c001aef1:	89 c3                	mov    ebx,eax
c001aef3:	ff 35 34 1b 03 c0    	push   DWORD PTR ds:0xc0031b34
c001aef9:	56                   	push   esi
c001aefa:	50                   	push   eax
c001aefb:	e8 8c 85 ff ff       	call   c001348c <File::File(char const*, Process*)>
c001af00:	83 c4 10             	add    esp,0x10
c001af03:	85 db                	test   ebx,ebx
c001af05:	74 7e                	je     c001af85 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001af07:	51                   	push   ecx
c001af08:	51                   	push   ecx
c001af09:	6a 01                	push   0x1
c001af0b:	53                   	push   ebx
c001af0c:	e8 df 85 ff ff       	call   c00134f0 <File::open(FileOpenMode)>
c001af11:	83 c4 10             	add    esp,0x10
c001af14:	85 c0                	test   eax,eax
c001af16:	74 08                	je     c001af20 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001af18:	83 ec 0c             	sub    esp,0xc
c001af1b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af1d:	53                   	push   ebx
c001af1e:	eb 5f                	jmp    c001af7f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001af20:	52                   	push   edx
c001af21:	8d 44 24 17          	lea    eax,[esp+0x17]
c001af25:	50                   	push   eax
c001af26:	8d 44 24 20          	lea    eax,[esp+0x20]
c001af2a:	50                   	push   eax
c001af2b:	53                   	push   ebx
c001af2c:	e8 6b 88 ff ff       	call   c001379c <File::stat(unsigned long long*, bool*)>
c001af31:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001af35:	83 c4 10             	add    esp,0x10
c001af38:	89 c1                	mov    ecx,eax
c001af3a:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001af3e:	74 31                	je     c001af71 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001af40:	83 ec 0c             	sub    esp,0xc
c001af43:	50                   	push   eax
c001af44:	e8 f7 48 ff ff       	call   c000f840 <malloc>
c001af49:	89 c6                	mov    esi,eax
c001af4b:	58                   	pop    eax
c001af4c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af4e:	8d 54 24 20          	lea    edx,[esp+0x20]
c001af52:	52                   	push   edx
c001af53:	56                   	push   esi
c001af54:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af58:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af5c:	53                   	push   ebx
c001af5d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001af60:	83 c4 20             	add    esp,0x20
c001af63:	85 c0                	test   eax,eax
c001af65:	75 0a                	jne    c001af71 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001af67:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af6b:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001af6f:	74 18                	je     c001af89 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001af71:	83 ec 0c             	sub    esp,0xc
c001af74:	53                   	push   ebx
c001af75:	e8 d4 85 ff ff       	call   c001354e <File::close()>
c001af7a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af7c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af7f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001af82:	83 c4 10             	add    esp,0x10
c001af85:	31 c0                	xor    eax,eax
c001af87:	eb 3b                	jmp    c001afc4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001af89:	83 ec 0c             	sub    esp,0xc
c001af8c:	53                   	push   ebx
c001af8d:	e8 bc 85 ff ff       	call   c001354e <File::close()>
c001af92:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af94:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af97:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001af9a:	83 c4 0c             	add    esp,0xc
c001af9d:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001afa4:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001afab:	56                   	push   esi
c001afac:	e8 70 fd ff ff       	call   c001ad21 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001afb1:	89 34 24             	mov    DWORD PTR [esp],esi
c001afb4:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001afb8:	e8 93 48 ff ff       	call   c000f850 <free>
c001afbd:	83 c4 10             	add    esp,0x10
c001afc0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001afc4:	81 c4 20 01 00 00    	add    esp,0x120
c001afca:	5b                   	pop    ebx
c001afcb:	5e                   	pop    esi
c001afcc:	5f                   	pop    edi
c001afcd:	c3                   	ret    

c001afce <Reg::getLine(char*, char*, char*)>:
c001afce:	57                   	push   edi
c001afcf:	56                   	push   esi
c001afd0:	53                   	push   ebx
c001afd1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001afd5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001afd9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001afdd:	57                   	push   edi
c001afde:	56                   	push   esi
c001afdf:	53                   	push   ebx
c001afe0:	68 49 be 02 c0       	push   0xc002be49
c001afe5:	e8 8f fe ff ff       	call   c001ae79 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001afea:	83 c4 10             	add    esp,0x10
c001afed:	84 c0                	test   al,al
c001afef:	75 10                	jne    c001b001 <Reg::getLine(char*, char*, char*)+0x33>
c001aff1:	57                   	push   edi
c001aff2:	56                   	push   esi
c001aff3:	53                   	push   ebx
c001aff4:	68 6e be 02 c0       	push   0xc002be6e
c001aff9:	e8 7b fe ff ff       	call   c001ae79 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001affe:	83 c4 10             	add    esp,0x10
c001b001:	5b                   	pop    ebx
c001b002:	5e                   	pop    esi
c001b003:	5f                   	pop    edi
c001b004:	c3                   	ret    

c001b005 <Reg::readInt(char*, char*, int*)>:
c001b005:	55                   	push   ebp
c001b006:	57                   	push   edi
c001b007:	56                   	push   esi
c001b008:	53                   	push   ebx
c001b009:	81 ec f0 00 00 00    	sub    esp,0xf0
c001b00f:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b013:	57                   	push   edi
c001b014:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b01b:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b022:	e8 a7 ff ff ff       	call   c001afce <Reg::getLine(char*, char*, char*)>
c001b027:	83 c4 10             	add    esp,0x10
c001b02a:	84 c0                	test   al,al
c001b02c:	0f 84 b3 00 00 00    	je     c001b0e5 <Reg::readInt(char*, char*, int*)+0xe0>
c001b032:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b036:	80 fa 2b             	cmp    dl,0x2b
c001b039:	74 0c                	je     c001b047 <Reg::readInt(char*, char*, int*)+0x42>
c001b03b:	80 fa 2d             	cmp    dl,0x2d
c001b03e:	75 0e                	jne    c001b04e <Reg::readInt(char*, char*, int*)+0x49>
c001b040:	ba 01 00 00 00       	mov    edx,0x1
c001b045:	eb 0b                	jmp    c001b052 <Reg::readInt(char*, char*, int*)+0x4d>
c001b047:	ba 01 00 00 00       	mov    edx,0x1
c001b04c:	eb 02                	jmp    c001b050 <Reg::readInt(char*, char*, int*)+0x4b>
c001b04e:	31 d2                	xor    edx,edx
c001b050:	31 c0                	xor    eax,eax
c001b052:	be 0a 00 00 00       	mov    esi,0xa
c001b057:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b05c:	75 20                	jne    c001b07e <Reg::readInt(char*, char*, int*)+0x79>
c001b05e:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b062:	80 f9 78             	cmp    cl,0x78
c001b065:	75 0a                	jne    c001b071 <Reg::readInt(char*, char*, int*)+0x6c>
c001b067:	83 c2 02             	add    edx,0x2
c001b06a:	be 10 00 00 00       	mov    esi,0x10
c001b06f:	eb 0d                	jmp    c001b07e <Reg::readInt(char*, char*, int*)+0x79>
c001b071:	80 f9 62             	cmp    cl,0x62
c001b074:	75 08                	jne    c001b07e <Reg::readInt(char*, char*, int*)+0x79>
c001b076:	83 c2 02             	add    edx,0x2
c001b079:	be 02 00 00 00       	mov    esi,0x2
c001b07e:	01 d7                	add    edi,edx
c001b080:	31 d2                	xor    edx,edx
c001b082:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b084:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b088:	80 fb 0d             	cmp    bl,0xd
c001b08b:	0f 94 c3             	sete   bl
c001b08e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b093:	0f 94 c1             	sete   cl
c001b096:	08 cb                	or     bl,cl
c001b098:	75 3a                	jne    c001b0d4 <Reg::readInt(char*, char*, int*)+0xcf>
c001b09a:	0f af d6             	imul   edx,esi
c001b09d:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b0a2:	83 fe 10             	cmp    esi,0x10
c001b0a5:	75 26                	jne    c001b0cd <Reg::readInt(char*, char*, int*)+0xc8>
c001b0a7:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b0ab:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b0ae:	89 e9                	mov    ecx,ebp
c001b0b0:	80 f9 05             	cmp    cl,0x5
c001b0b3:	77 06                	ja     c001b0bb <Reg::readInt(char*, char*, int*)+0xb6>
c001b0b5:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b0b9:	eb 16                	jmp    c001b0d1 <Reg::readInt(char*, char*, int*)+0xcc>
c001b0bb:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b0bf:	83 e9 61             	sub    ecx,0x61
c001b0c2:	80 f9 05             	cmp    cl,0x5
c001b0c5:	77 06                	ja     c001b0cd <Reg::readInt(char*, char*, int*)+0xc8>
c001b0c7:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b0cb:	eb 04                	jmp    c001b0d1 <Reg::readInt(char*, char*, int*)+0xcc>
c001b0cd:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b0d1:	47                   	inc    edi
c001b0d2:	eb ae                	jmp    c001b082 <Reg::readInt(char*, char*, int*)+0x7d>
c001b0d4:	84 c0                	test   al,al
c001b0d6:	74 02                	je     c001b0da <Reg::readInt(char*, char*, int*)+0xd5>
c001b0d8:	f7 da                	neg    edx
c001b0da:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b0e1:	89 10                	mov    DWORD PTR [eax],edx
c001b0e3:	88 d8                	mov    al,bl
c001b0e5:	81 c4 ec 00 00 00    	add    esp,0xec
c001b0eb:	5b                   	pop    ebx
c001b0ec:	5e                   	pop    esi
c001b0ed:	5f                   	pop    edi
c001b0ee:	5d                   	pop    ebp
c001b0ef:	c3                   	ret    

c001b0f0 <Reg::readString(char*, char*, char*, int)>:
c001b0f0:	57                   	push   edi
c001b0f1:	56                   	push   esi
c001b0f2:	53                   	push   ebx
c001b0f3:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b0f9:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b100:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b104:	57                   	push   edi
c001b105:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b10c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b113:	e8 b6 fe ff ff       	call   c001afce <Reg::getLine(char*, char*, char*)>
c001b118:	83 c4 10             	add    esp,0x10
c001b11b:	89 c6                	mov    esi,eax
c001b11d:	84 c0                	test   al,al
c001b11f:	74 44                	je     c001b165 <Reg::readString(char*, char*, char*, int)+0x75>
c001b121:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b128:	31 c0                	xor    eax,eax
c001b12a:	4a                   	dec    edx
c001b12b:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b12e:	84 c9                	test   cl,cl
c001b130:	74 0f                	je     c001b141 <Reg::readString(char*, char*, char*, int)+0x51>
c001b132:	39 c2                	cmp    edx,eax
c001b134:	7e 0b                	jle    c001b141 <Reg::readString(char*, char*, char*, int)+0x51>
c001b136:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b139:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b13e:	40                   	inc    eax
c001b13f:	eb ea                	jmp    c001b12b <Reg::readString(char*, char*, char*, int)+0x3b>
c001b141:	83 ec 0c             	sub    esp,0xc
c001b144:	53                   	push   ebx
c001b145:	e8 4a 56 fe ff       	call   c0000794 <strlen>
c001b14a:	83 c4 10             	add    esp,0x10
c001b14d:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b152:	75 11                	jne    c001b165 <Reg::readString(char*, char*, char*, int)+0x75>
c001b154:	83 ec 0c             	sub    esp,0xc
c001b157:	53                   	push   ebx
c001b158:	e8 37 56 fe ff       	call   c0000794 <strlen>
c001b15d:	83 c4 10             	add    esp,0x10
c001b160:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b165:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b16b:	89 f0                	mov    eax,esi
c001b16d:	5b                   	pop    ebx
c001b16e:	5e                   	pop    esi
c001b16f:	5f                   	pop    edi
c001b170:	c3                   	ret    

c001b171 <Reg::readBool(char*, char*, bool*)>:
c001b171:	83 ec 20             	sub    esp,0x20
c001b174:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b178:	50                   	push   eax
c001b179:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b17d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b181:	e8 7f fe ff ff       	call   c001b005 <Reg::readInt(char*, char*, int*)>
c001b186:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b18b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b18f:	0f 95 02             	setne  BYTE PTR [edx]
c001b192:	83 c4 2c             	add    esp,0x2c
c001b195:	c3                   	ret    

c001b196 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b196:	53                   	push   ebx
c001b197:	83 ec 1c             	sub    esp,0x1c
c001b19a:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b19e:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b1a2:	50                   	push   eax
c001b1a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1a7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1ab:	e8 c1 ff ff ff       	call   c001b171 <Reg::readBool(char*, char*, bool*)>
c001b1b0:	83 c4 10             	add    esp,0x10
c001b1b3:	84 c0                	test   al,al
c001b1b5:	74 04                	je     c001b1bb <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b1b7:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b1bb:	88 d8                	mov    al,bl
c001b1bd:	83 c4 18             	add    esp,0x18
c001b1c0:	5b                   	pop    ebx
c001b1c1:	c3                   	ret    

c001b1c2 <Reg::readIntWithDefault(char*, char*, int)>:
c001b1c2:	53                   	push   ebx
c001b1c3:	83 ec 1c             	sub    esp,0x1c
c001b1c6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b1ca:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b1ce:	50                   	push   eax
c001b1cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1d3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1d7:	e8 29 fe ff ff       	call   c001b005 <Reg::readInt(char*, char*, int*)>
c001b1dc:	83 c4 10             	add    esp,0x10
c001b1df:	84 c0                	test   al,al
c001b1e1:	74 04                	je     c001b1e7 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b1e3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b1e7:	89 d8                	mov    eax,ebx
c001b1e9:	83 c4 18             	add    esp,0x18
c001b1ec:	5b                   	pop    ebx
c001b1ed:	c3                   	ret    

c001b1ee <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b1ee:	57                   	push   edi
c001b1ef:	56                   	push   esi
c001b1f0:	53                   	push   ebx
c001b1f1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b1f5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b1f9:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b1fd:	56                   	push   esi
c001b1fe:	53                   	push   ebx
c001b1ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b203:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b207:	e8 e4 fe ff ff       	call   c001b0f0 <Reg::readString(char*, char*, char*, int)>
c001b20c:	83 c4 10             	add    esp,0x10
c001b20f:	84 c0                	test   al,al
c001b211:	75 1b                	jne    c001b22e <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b213:	50                   	push   eax
c001b214:	56                   	push   esi
c001b215:	4e                   	dec    esi
c001b216:	6a 00                	push   0x0
c001b218:	53                   	push   ebx
c001b219:	e8 5a 55 fe ff       	call   c0000778 <memset>
c001b21e:	83 c4 0c             	add    esp,0xc
c001b221:	56                   	push   esi
c001b222:	57                   	push   edi
c001b223:	53                   	push   ebx
c001b224:	89 fb                	mov    ebx,edi
c001b226:	e8 19 55 fe ff       	call   c0000744 <memcpy>
c001b22b:	83 c4 10             	add    esp,0x10
c001b22e:	89 d8                	mov    eax,ebx
c001b230:	5b                   	pop    ebx
c001b231:	5e                   	pop    esi
c001b232:	5f                   	pop    edi
c001b233:	c3                   	ret    

c001b234 <Sys::eject(regs*)>:
c001b234:	83 ec 0c             	sub    esp,0xc
c001b237:	83 ca ff             	or     edx,0xffffffff
c001b23a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b23e:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b241:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b246:	83 e9 41             	sub    ecx,0x41
c001b249:	83 f9 19             	cmp    ecx,0x19
c001b24c:	77 18                	ja     c001b266 <Sys::eject(regs*)+0x32>
c001b24e:	8b 0c 8d e0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1420]
c001b255:	85 c9                	test   ecx,ecx
c001b257:	74 0d                	je     c001b266 <Sys::eject(regs*)+0x32>
c001b259:	83 ec 0c             	sub    esp,0xc
c001b25c:	51                   	push   ecx
c001b25d:	e8 78 b4 ff ff       	call   c00166da <LogicalDisk::eject()>
c001b262:	83 c4 10             	add    esp,0x10
c001b265:	99                   	cdq    
c001b266:	83 c4 0c             	add    esp,0xc
c001b269:	c3                   	ret    

c001b26a <Sys::exit(regs*)>:
c001b26a:	83 ec 18             	sub    esp,0x18
c001b26d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b271:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b274:	e8 c4 35 00 00       	call   c001e83d <terminateTask(int)>
c001b279:	83 c8 ff             	or     eax,0xffffffff
c001b27c:	83 c4 1c             	add    esp,0x1c
c001b27f:	89 c2                	mov    edx,eax
c001b281:	c3                   	ret    

c001b282 <Sys::getCwd(regs*)>:
c001b282:	83 ec 10             	sub    esp,0x10
c001b285:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b289:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b28c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b28f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b294:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b297:	e8 f2 7f ff ff       	call   c001328e <Fs::getcwd(Process*, char*, int)>
c001b29c:	83 c4 1c             	add    esp,0x1c
c001b29f:	99                   	cdq    
c001b2a0:	c3                   	ret    

c001b2a1 <Sys::getPID(regs*)>:
c001b2a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2a6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b2a9:	8b 00                	mov    eax,DWORD PTR [eax]
c001b2ab:	99                   	cdq    
c001b2ac:	c3                   	ret    

c001b2ad <Sys::getRAMData(regs*)>:
c001b2ad:	8b 0d 14 e6 02 c0    	mov    ecx,DWORD PTR ds:0xc002e614
c001b2b3:	6b 05 10 e6 02 c0 64 	imul   eax,DWORD PTR ds:0xc002e610,0x64
c001b2ba:	99                   	cdq    
c001b2bb:	f7 f9                	idiv   ecx
c001b2bd:	c1 e0 18             	shl    eax,0x18
c001b2c0:	09 c8                	or     eax,ecx
c001b2c2:	99                   	cdq    
c001b2c3:	c3                   	ret    

c001b2c4 <Sys::loadDLL(regs*)>:
c001b2c4:	56                   	push   esi
c001b2c5:	53                   	push   ebx
c001b2c6:	31 d2                	xor    edx,edx
c001b2c8:	51                   	push   ecx
c001b2c9:	b8 01 00 00 00       	mov    eax,0x1
c001b2ce:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b2d2:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b2d6:	0f 84 8c 00 00 00    	je     c001b368 <Sys::loadDLL(regs*)+0xa4>
c001b2dc:	83 ec 0c             	sub    esp,0xc
c001b2df:	68 14 01 00 00       	push   0x114
c001b2e4:	e8 57 45 ff ff       	call   c000f840 <malloc>
c001b2e9:	83 c4 0c             	add    esp,0xc
c001b2ec:	89 c3                	mov    ebx,eax
c001b2ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2f3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b2f6:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b2f9:	53                   	push   ebx
c001b2fa:	e8 8d 81 ff ff       	call   c001348c <File::File(char const*, Process*)>
c001b2ff:	83 c4 10             	add    esp,0x10
c001b302:	31 d2                	xor    edx,edx
c001b304:	b8 02 00 00 00       	mov    eax,0x2
c001b309:	85 db                	test   ebx,ebx
c001b30b:	74 5b                	je     c001b368 <Sys::loadDLL(regs*)+0xa4>
c001b30d:	83 ec 0c             	sub    esp,0xc
c001b310:	53                   	push   ebx
c001b311:	e8 48 84 ff ff       	call   c001375e <File::exists()>
c001b316:	83 c4 10             	add    esp,0x10
c001b319:	84 c0                	test   al,al
c001b31b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b31d:	75 11                	jne    c001b330 <Sys::loadDLL(regs*)+0x6c>
c001b31f:	83 ec 0c             	sub    esp,0xc
c001b322:	53                   	push   ebx
c001b323:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b326:	83 c4 10             	add    esp,0x10
c001b329:	b8 03 00 00 00       	mov    eax,0x3
c001b32e:	eb 36                	jmp    c001b366 <Sys::loadDLL(regs*)+0xa2>
c001b330:	83 ec 0c             	sub    esp,0xc
c001b333:	53                   	push   ebx
c001b334:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b337:	58                   	pop    eax
c001b338:	5a                   	pop    edx
c001b339:	6a 00                	push   0x0
c001b33b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b33e:	e8 0f 24 00 00       	call   c001d752 <Thr::loadDLL(char const*, bool)>
c001b343:	83 c4 10             	add    esp,0x10
c001b346:	89 c1                	mov    ecx,eax
c001b348:	31 d2                	xor    edx,edx
c001b34a:	b8 04 00 00 00       	mov    eax,0x4
c001b34f:	85 c9                	test   ecx,ecx
c001b351:	74 15                	je     c001b368 <Sys::loadDLL(regs*)+0xa4>
c001b353:	53                   	push   ebx
c001b354:	53                   	push   ebx
c001b355:	ff 35 c8 e5 02 c0    	push   DWORD PTR ds:0xc002e5c8
c001b35b:	51                   	push   ecx
c001b35c:	e8 25 26 00 00       	call   c001d986 <Thr::executeDLL(unsigned long, void*)>
c001b361:	83 c4 10             	add    esp,0x10
c001b364:	31 c0                	xor    eax,eax
c001b366:	31 d2                	xor    edx,edx
c001b368:	59                   	pop    ecx
c001b369:	5b                   	pop    ebx
c001b36a:	5e                   	pop    esi
c001b36b:	c3                   	ret    

c001b36c <Sys::read(regs*)>:
c001b36c:	57                   	push   edi
c001b36d:	56                   	push   esi
c001b36e:	53                   	push   ebx
c001b36f:	83 ec 10             	sub    esp,0x10
c001b372:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b376:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b379:	83 f8 02             	cmp    eax,0x2
c001b37c:	77 10                	ja     c001b38e <Sys::read(regs*)+0x22>
c001b37e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b383:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b386:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b38c:	eb 0e                	jmp    c001b39c <Sys::read(regs*)+0x30>
c001b38e:	83 ec 0c             	sub    esp,0xc
c001b391:	50                   	push   eax
c001b392:	e8 9e 66 ff ff       	call   c0011a35 <getFromFileDescriptor(int)>
c001b397:	83 c4 10             	add    esp,0x10
c001b39a:	89 c1                	mov    ecx,eax
c001b39c:	83 c8 ff             	or     eax,0xffffffff
c001b39f:	85 c9                	test   ecx,ecx
c001b3a1:	89 c2                	mov    edx,eax
c001b3a3:	74 28                	je     c001b3cd <Sys::read(regs*)+0x61>
c001b3a5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b3ad:	31 ff                	xor    edi,edi
c001b3af:	83 ec 0c             	sub    esp,0xc
c001b3b2:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b3b4:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b3b8:	52                   	push   edx
c001b3b9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b3bc:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b3bf:	57                   	push   edi
c001b3c0:	56                   	push   esi
c001b3c1:	51                   	push   ecx
c001b3c2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b3c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b3c9:	83 c4 20             	add    esp,0x20
c001b3cc:	99                   	cdq    
c001b3cd:	83 c4 10             	add    esp,0x10
c001b3d0:	5b                   	pop    ebx
c001b3d1:	5e                   	pop    esi
c001b3d2:	5f                   	pop    edi
c001b3d3:	c3                   	ret    

c001b3d4 <Sys::sbrk(regs*)>:
c001b3d4:	56                   	push   esi
c001b3d5:	53                   	push   ebx
c001b3d6:	83 ec 0c             	sub    esp,0xc
c001b3d9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b3dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3e2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b3e5:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001b3eb:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c001b3ee:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b3f1:	68 89 be 02 c0       	push   0xc002be89
c001b3f6:	e8 39 7b ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001b3fb:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b3fe:	83 c4 10             	add    esp,0x10
c001b401:	85 c0                	test   eax,eax
c001b403:	75 0a                	jne    c001b40f <Sys::sbrk(regs*)+0x3b>
c001b405:	50                   	push   eax
c001b406:	50                   	push   eax
c001b407:	53                   	push   ebx
c001b408:	68 a5 be 02 c0       	push   0xc002bea5
c001b40d:	eb 54                	jmp    c001b463 <Sys::sbrk(regs*)+0x8f>
c001b40f:	79 0a                	jns    c001b41b <Sys::sbrk(regs*)+0x47>
c001b411:	56                   	push   esi
c001b412:	56                   	push   esi
c001b413:	53                   	push   ebx
c001b414:	68 b8 be 02 c0       	push   0xc002beb8
c001b419:	eb 48                	jmp    c001b463 <Sys::sbrk(regs*)+0x8f>
c001b41b:	3d 00 00 00 04       	cmp    eax,0x4000000
c001b420:	76 17                	jbe    c001b439 <Sys::sbrk(regs*)+0x65>
c001b422:	51                   	push   ecx
c001b423:	51                   	push   ecx
c001b424:	53                   	push   ebx
c001b425:	68 ca be 02 c0       	push   0xc002beca
c001b42a:	e8 05 7b ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001b42f:	83 c8 ff             	or     eax,0xffffffff
c001b432:	83 c4 10             	add    esp,0x10
c001b435:	89 c2                	mov    edx,eax
c001b437:	eb 36                	jmp    c001b46f <Sys::sbrk(regs*)+0x9b>
c001b439:	05 ff 0f 00 00       	add    eax,0xfff
c001b43e:	56                   	push   esi
c001b43f:	c1 e8 0c             	shr    eax,0xc
c001b442:	68 07 04 00 00       	push   0x407
c001b447:	50                   	push   eax
c001b448:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b44d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b450:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b456:	e8 07 70 ff ff       	call   c0012462 <VAS::allocatePages(int, int)>
c001b45b:	58                   	pop    eax
c001b45c:	5a                   	pop    edx
c001b45d:	53                   	push   ebx
c001b45e:	68 e3 be 02 c0       	push   0xc002bee3
c001b463:	e8 cc 7a ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001b468:	89 d8                	mov    eax,ebx
c001b46a:	31 d2                	xor    edx,edx
c001b46c:	83 c4 10             	add    esp,0x10
c001b46f:	59                   	pop    ecx
c001b470:	5b                   	pop    ebx
c001b471:	5e                   	pop    esi
c001b472:	c3                   	ret    

c001b473 <Sys::setCwd(regs*)>:
c001b473:	83 ec 14             	sub    esp,0x14
c001b476:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b47a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b47d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b482:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b485:	e8 73 83 ff ff       	call   c00137fd <Fs::setcwd(Process*, char*)>
c001b48a:	83 c4 1c             	add    esp,0x1c
c001b48d:	99                   	cdq    
c001b48e:	c3                   	ret    

c001b48f <Sys::setTime(regs*)>:
c001b48f:	55                   	push   ebp
c001b490:	31 d2                	xor    edx,edx
c001b492:	57                   	push   edi
c001b493:	bf 18 00 00 00       	mov    edi,0x18
c001b498:	56                   	push   esi
c001b499:	53                   	push   ebx
c001b49a:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b49f:	83 ec 30             	sub    esp,0x30
c001b4a2:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b4a6:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b4a9:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b4ac:	f7 f3                	div    ebx
c001b4ae:	89 d6                	mov    esi,edx
c001b4b0:	31 d2                	xor    edx,edx
c001b4b2:	f7 f3                	div    ebx
c001b4b4:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b4b7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b4bb:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b4c0:	31 d2                	xor    edx,edx
c001b4c2:	f7 f3                	div    ebx
c001b4c4:	31 d2                	xor    edx,edx
c001b4c6:	bb 0c 00 00 00       	mov    ebx,0xc
c001b4cb:	f7 f7                	div    edi
c001b4cd:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b4d0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b4d4:	0f b7 cd             	movzx  ecx,bp
c001b4d7:	56                   	push   esi
c001b4d8:	89 c7                	mov    edi,eax
c001b4da:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b4de:	c1 e6 10             	shl    esi,0x10
c001b4e1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b4e5:	83 e7 1f             	and    edi,0x1f
c001b4e8:	51                   	push   ecx
c001b4e9:	47                   	inc    edi
c001b4ea:	c1 e8 05             	shr    eax,0x5
c001b4ed:	31 d2                	xor    edx,edx
c001b4ef:	f7 f3                	div    ebx
c001b4f1:	31 db                	xor    ebx,ebx
c001b4f3:	52                   	push   edx
c001b4f4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b4f8:	57                   	push   edi
c001b4f9:	68 09 bf 02 c0       	push   0xc002bf09
c001b4fe:	e8 31 7a ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001b503:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b507:	89 f8                	mov    eax,edi
c001b509:	31 c9                	xor    ecx,ecx
c001b50b:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b50f:	88 c1                	mov    cl,al
c001b511:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b517:	88 d5                	mov    ch,dl
c001b519:	c1 e0 10             	shl    eax,0x10
c001b51c:	0f b7 d1             	movzx  edx,cx
c001b51f:	09 c2                	or     edx,eax
c001b521:	89 d8                	mov    eax,ebx
c001b523:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b528:	09 f0                	or     eax,esi
c001b52a:	89 c3                	mov    ebx,eax
c001b52c:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b530:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b534:	83 c4 18             	add    esp,0x18
c001b537:	53                   	push   ebx
c001b538:	52                   	push   edx
c001b539:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b53d:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b541:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b545:	e8 cd 89 ff ff       	call   c0013f17 <datetimeToSeconds(datetime_t)>
c001b54a:	83 c4 0c             	add    esp,0xc
c001b54d:	52                   	push   edx
c001b54e:	50                   	push   eax
c001b54f:	56                   	push   esi
c001b550:	e8 49 8b ff ff       	call   c001409e <secondsToDatetime(unsigned long long)>
c001b555:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b559:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b55d:	51                   	push   ecx
c001b55e:	89 d6                	mov    esi,edx
c001b560:	51                   	push   ecx
c001b561:	c1 ee 10             	shr    esi,0x10
c001b564:	89 f3                	mov    ebx,esi
c001b566:	0f b6 f3             	movzx  esi,bl
c001b569:	56                   	push   esi
c001b56a:	0f b6 f6             	movzx  esi,dh
c001b56d:	0f b6 d2             	movzx  edx,dl
c001b570:	56                   	push   esi
c001b571:	52                   	push   edx
c001b572:	89 c2                	mov    edx,eax
c001b574:	c1 ea 10             	shr    edx,0x10
c001b577:	52                   	push   edx
c001b578:	0f b6 d4             	movzx  edx,ah
c001b57b:	0f b6 c0             	movzx  eax,al
c001b57e:	52                   	push   edx
c001b57f:	50                   	push   eax
c001b580:	68 25 bf 02 c0       	push   0xc002bf25
c001b585:	e8 aa 79 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001b58a:	83 c4 2c             	add    esp,0x2c
c001b58d:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c001b592:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b596:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b59a:	53                   	push   ebx
c001b59b:	51                   	push   ecx
c001b59c:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b5a2:	e8 97 8a ff ff       	call   c001403e <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b5a7:	83 f0 01             	xor    eax,0x1
c001b5aa:	31 d2                	xor    edx,edx
c001b5ac:	0f b6 c0             	movzx  eax,al
c001b5af:	83 c4 3c             	add    esp,0x3c
c001b5b2:	5b                   	pop    ebx
c001b5b3:	5e                   	pop    esi
c001b5b4:	5f                   	pop    edi
c001b5b5:	5d                   	pop    ebp
c001b5b6:	c3                   	ret    

c001b5b7 <Sys::timezone(regs*)>:
c001b5b7:	53                   	push   ebx
c001b5b8:	83 ec 08             	sub    esp,0x8
c001b5bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b5bf:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b5c3:	75 17                	jne    c001b5dc <Sys::timezone(regs*)+0x25>
c001b5c5:	83 ec 0c             	sub    esp,0xc
c001b5c8:	68 41 bf 02 c0       	push   0xc002bf41
c001b5cd:	e8 62 79 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001b5d2:	83 c8 ff             	or     eax,0xffffffff
c001b5d5:	83 c4 10             	add    esp,0x10
c001b5d8:	89 c2                	mov    edx,eax
c001b5da:	eb 20                	jmp    c001b5fc <Sys::timezone(regs*)+0x45>
c001b5dc:	83 ec 0c             	sub    esp,0xc
c001b5df:	68 79 bf 02 c0       	push   0xc002bf79
c001b5e4:	e8 4b 79 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001b5e9:	58                   	pop    eax
c001b5ea:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b5ed:	e8 ae 87 ff ff       	call   c0013da0 <User::loadClockSettings(int)>
c001b5f2:	83 c4 10             	add    esp,0x10
c001b5f5:	b8 01 00 00 00       	mov    eax,0x1
c001b5fa:	31 d2                	xor    edx,edx
c001b5fc:	83 c4 08             	add    esp,0x8
c001b5ff:	5b                   	pop    ebx
c001b600:	c3                   	ret    

c001b601 <Sys::write(regs*)>:
c001b601:	57                   	push   edi
c001b602:	56                   	push   esi
c001b603:	53                   	push   ebx
c001b604:	83 ec 10             	sub    esp,0x10
c001b607:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b60b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b60e:	83 f8 02             	cmp    eax,0x2
c001b611:	77 10                	ja     c001b623 <Sys::write(regs*)+0x22>
c001b613:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b618:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b61b:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b621:	eb 0e                	jmp    c001b631 <Sys::write(regs*)+0x30>
c001b623:	83 ec 0c             	sub    esp,0xc
c001b626:	50                   	push   eax
c001b627:	e8 09 64 ff ff       	call   c0011a35 <getFromFileDescriptor(int)>
c001b62c:	83 c4 10             	add    esp,0x10
c001b62f:	89 c1                	mov    ecx,eax
c001b631:	83 c8 ff             	or     eax,0xffffffff
c001b634:	85 c9                	test   ecx,ecx
c001b636:	89 c2                	mov    edx,eax
c001b638:	74 28                	je     c001b662 <Sys::write(regs*)+0x61>
c001b63a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b642:	31 ff                	xor    edi,edi
c001b644:	83 ec 0c             	sub    esp,0xc
c001b647:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b649:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b64d:	52                   	push   edx
c001b64e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b651:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b654:	57                   	push   edi
c001b655:	56                   	push   esi
c001b656:	51                   	push   ecx
c001b657:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b65a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b65e:	83 c4 20             	add    esp,0x20
c001b661:	99                   	cdq    
c001b662:	83 c4 10             	add    esp,0x10
c001b665:	5b                   	pop    ebx
c001b666:	5e                   	pop    esi
c001b667:	5f                   	pop    edi
c001b668:	c3                   	ret    

c001b669 <Sys::wsbe(regs*)>:
c001b669:	57                   	push   edi
c001b66a:	b9 0b 00 00 00       	mov    ecx,0xb
c001b66f:	56                   	push   esi
c001b670:	be b8 bf 02 c0       	mov    esi,0xc002bfb8
c001b675:	53                   	push   ebx
c001b676:	83 ec 30             	sub    esp,0x30
c001b679:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b67d:	fc                   	cld    
c001b67e:	83 ec 0c             	sub    esp,0xc
c001b681:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b683:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b687:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b68c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b68f:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b695:	8b 06                	mov    eax,DWORD PTR [esi]
c001b697:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b69a:	57                   	push   edi
c001b69b:	e8 f4 50 fe ff       	call   c0000794 <strlen>
c001b6a0:	5a                   	pop    edx
c001b6a1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b6a5:	52                   	push   edx
c001b6a6:	31 d2                	xor    edx,edx
c001b6a8:	57                   	push   edi
c001b6a9:	52                   	push   edx
c001b6aa:	50                   	push   eax
c001b6ab:	56                   	push   esi
c001b6ac:	ff d3                	call   ebx
c001b6ae:	83 c4 14             	add    esp,0x14
c001b6b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b6b5:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b6b8:	e8 80 31 00 00       	call   c001e83d <terminateTask(int)>
c001b6bd:	83 c4 40             	add    esp,0x40
c001b6c0:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b6c5:	5b                   	pop    ebx
c001b6c6:	31 d2                	xor    edx,edx
c001b6c8:	5e                   	pop    esi
c001b6c9:	5f                   	pop    edi
c001b6ca:	c3                   	ret    

c001b6cb <Sys::yield(regs*)>:
c001b6cb:	57                   	push   edi
c001b6cc:	56                   	push   esi
c001b6cd:	53                   	push   ebx
c001b6ce:	e8 27 27 00 00       	call   c001ddfa <lockScheduler()>
c001b6d3:	e8 5e 2a 00 00       	call   c001e136 <schedule()>
c001b6d8:	e8 1f 27 00 00       	call   c001ddfc <unlockScheduler()>
c001b6dd:	8b 35 50 ec 02 c0    	mov    esi,DWORD PTR ds:0xc002ec50
c001b6e3:	8b 3d 54 ec 02 c0    	mov    edi,DWORD PTR ds:0xc002ec54
c001b6e9:	89 f0                	mov    eax,esi
c001b6eb:	89 fb                	mov    ebx,edi
c001b6ed:	89 f1                	mov    ecx,esi
c001b6ef:	c1 e0 07             	shl    eax,0x7
c001b6f2:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b6f6:	25 80 30 0f 00       	and    eax,0xf3080
c001b6fb:	c1 eb 17             	shr    ebx,0x17
c001b6fe:	31 c8                	xor    eax,ecx
c001b700:	89 da                	mov    edx,ebx
c001b702:	5b                   	pop    ebx
c001b703:	5e                   	pop    esi
c001b704:	5f                   	pop    edi
c001b705:	c3                   	ret    

c001b706 <sysCallSeekDir(regs*)>:
c001b706:	31 c0                	xor    eax,eax
c001b708:	31 d2                	xor    edx,edx
c001b70a:	c3                   	ret    

c001b70b <sysCallTellDir(regs*)>:
c001b70b:	31 c0                	xor    eax,eax
c001b70d:	31 d2                	xor    edx,edx
c001b70f:	c3                   	ret    

c001b710 <sysCallVerify(regs*)>:
c001b710:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b714:	31 d2                	xor    edx,edx
c001b716:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b719:	c3                   	ret    

c001b71a <sysFormatDisk(regs*)>:
c001b71a:	56                   	push   esi
c001b71b:	53                   	push   ebx
c001b71c:	53                   	push   ebx
c001b71d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b721:	8b 1d 4c e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e74c
c001b727:	eb 25                	jmp    c001b74e <sysFormatDisk(regs*)+0x34>
c001b729:	83 ec 0c             	sub    esp,0xc
c001b72c:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b72f:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b731:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b734:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b737:	50                   	push   eax
c001b738:	ff 34 85 e0 eb 02 c0 	push   DWORD PTR [eax*4-0x3ffd1420]
c001b73f:	53                   	push   ebx
c001b740:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b743:	83 c4 20             	add    esp,0x20
c001b746:	83 f8 08             	cmp    eax,0x8
c001b749:	75 12                	jne    c001b75d <sysFormatDisk(regs*)+0x43>
c001b74b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b74e:	85 db                	test   ebx,ebx
c001b750:	75 d7                	jne    c001b729 <sysFormatDisk(regs*)+0xf>
c001b752:	59                   	pop    ecx
c001b753:	b8 03 00 00 00       	mov    eax,0x3
c001b758:	31 d2                	xor    edx,edx
c001b75a:	5b                   	pop    ebx
c001b75b:	5e                   	pop    esi
c001b75c:	c3                   	ret    
c001b75d:	85 c0                	test   eax,eax
c001b75f:	74 1b                	je     c001b77c <sysFormatDisk(regs*)+0x62>
c001b761:	83 f8 09             	cmp    eax,0x9
c001b764:	74 0b                	je     c001b771 <sysFormatDisk(regs*)+0x57>
c001b766:	59                   	pop    ecx
c001b767:	b8 02 00 00 00       	mov    eax,0x2
c001b76c:	31 d2                	xor    edx,edx
c001b76e:	5b                   	pop    ebx
c001b76f:	5e                   	pop    esi
c001b770:	c3                   	ret    
c001b771:	59                   	pop    ecx
c001b772:	b8 01 00 00 00       	mov    eax,0x1
c001b777:	31 d2                	xor    edx,edx
c001b779:	5b                   	pop    ebx
c001b77a:	5e                   	pop    esi
c001b77b:	c3                   	ret    
c001b77c:	59                   	pop    ecx
c001b77d:	31 c0                	xor    eax,eax
c001b77f:	31 d2                	xor    edx,edx
c001b781:	5b                   	pop    ebx
c001b782:	5e                   	pop    esi
c001b783:	c3                   	ret    

c001b784 <sysSetDiskVolumeLabel(regs*)>:
c001b784:	56                   	push   esi
c001b785:	53                   	push   ebx
c001b786:	53                   	push   ebx
c001b787:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b78b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b78e:	83 f8 19             	cmp    eax,0x19
c001b791:	77 29                	ja     c001b7bc <sysSetDiskVolumeLabel(regs*)+0x38>
c001b793:	8b 0c 85 e0 eb 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1420]
c001b79a:	85 c9                	test   ecx,ecx
c001b79c:	74 1e                	je     c001b7bc <sysSetDiskVolumeLabel(regs*)+0x38>
c001b79e:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b7a1:	85 d2                	test   edx,edx
c001b7a3:	74 17                	je     c001b7bc <sysSetDiskVolumeLabel(regs*)+0x38>
c001b7a5:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b7ab:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b7ad:	52                   	push   edx
c001b7ae:	50                   	push   eax
c001b7af:	51                   	push   ecx
c001b7b0:	53                   	push   ebx
c001b7b1:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b7b4:	83 c4 10             	add    esp,0x10
c001b7b7:	99                   	cdq    
c001b7b8:	59                   	pop    ecx
c001b7b9:	5b                   	pop    ebx
c001b7ba:	5e                   	pop    esi
c001b7bb:	c3                   	ret    
c001b7bc:	59                   	pop    ecx
c001b7bd:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b7c2:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b7c7:	5b                   	pop    ebx
c001b7c8:	5e                   	pop    esi
c001b7c9:	c3                   	ret    

c001b7ca <sysGetDiskVolumeLabel(regs*)>:
c001b7ca:	57                   	push   edi
c001b7cb:	56                   	push   esi
c001b7cc:	53                   	push   ebx
c001b7cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7d1:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b7d4:	83 fa 19             	cmp    edx,0x19
c001b7d7:	77 34                	ja     c001b80d <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7d9:	8b 0c 95 e0 eb 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1420]
c001b7e0:	85 c9                	test   ecx,ecx
c001b7e2:	74 29                	je     c001b80d <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7e4:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b7e7:	85 db                	test   ebx,ebx
c001b7e9:	74 22                	je     c001b80d <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7eb:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b7ee:	85 c0                	test   eax,eax
c001b7f0:	74 1b                	je     c001b80d <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7f2:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b7f8:	83 ec 0c             	sub    esp,0xc
c001b7fb:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b7fd:	50                   	push   eax
c001b7fe:	53                   	push   ebx
c001b7ff:	52                   	push   edx
c001b800:	51                   	push   ecx
c001b801:	56                   	push   esi
c001b802:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b805:	83 c4 20             	add    esp,0x20
c001b808:	99                   	cdq    
c001b809:	5b                   	pop    ebx
c001b80a:	5e                   	pop    esi
c001b80b:	5f                   	pop    edi
c001b80c:	c3                   	ret    
c001b80d:	5b                   	pop    ebx
c001b80e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b813:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b818:	5e                   	pop    esi
c001b819:	5f                   	pop    edi
c001b81a:	c3                   	ret    

c001b81b <sysShutdown(regs*)>:
c001b81b:	83 ec 0c             	sub    esp,0xc
c001b81e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b822:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b825:	85 c0                	test   eax,eax
c001b827:	74 18                	je     c001b841 <sysShutdown(regs*)+0x26>
c001b829:	83 f8 01             	cmp    eax,0x1
c001b82c:	74 38                	je     c001b866 <sysShutdown(regs*)+0x4b>
c001b82e:	83 f8 02             	cmp    eax,0x2
c001b831:	74 24                	je     c001b857 <sysShutdown(regs*)+0x3c>
c001b833:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b838:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b83d:	83 c4 0c             	add    esp,0xc
c001b840:	c3                   	ret    
c001b841:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c001b846:	8b 10                	mov    edx,DWORD PTR [eax]
c001b848:	6a 00                	push   0x0
c001b84a:	6a 00                	push   0x0
c001b84c:	6a 00                	push   0x0
c001b84e:	50                   	push   eax
c001b84f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b852:	83 c4 10             	add    esp,0x10
c001b855:	eb dc                	jmp    c001b833 <sysShutdown(regs*)+0x18>
c001b857:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c001b85c:	8b 10                	mov    edx,DWORD PTR [eax]
c001b85e:	6a 00                	push   0x0
c001b860:	6a 00                	push   0x0
c001b862:	6a 01                	push   0x1
c001b864:	eb e8                	jmp    c001b84e <sysShutdown(regs*)+0x33>
c001b866:	a1 80 0c 03 c0       	mov    eax,ds:0xc0030c80
c001b86b:	85 c0                	test   eax,eax
c001b86d:	74 02                	je     c001b871 <sysShutdown(regs*)+0x56>
c001b86f:	ff d0                	call   eax
c001b871:	31 c0                	xor    eax,eax
c001b873:	31 d2                	xor    edx,edx
c001b875:	83 c4 0c             	add    esp,0xc
c001b878:	c3                   	ret    

c001b879 <sysCallRealpath(regs*)>:
c001b879:	83 ec 0c             	sub    esp,0xc
c001b87c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b880:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b883:	85 d2                	test   edx,edx
c001b885:	74 07                	je     c001b88e <sysCallRealpath(regs*)+0x15>
c001b887:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b88a:	85 c0                	test   eax,eax
c001b88c:	75 0b                	jne    c001b899 <sysCallRealpath(regs*)+0x20>
c001b88e:	b8 01 00 00 00       	mov    eax,0x1
c001b893:	31 d2                	xor    edx,edx
c001b895:	83 c4 0c             	add    esp,0xc
c001b898:	c3                   	ret    
c001b899:	51                   	push   ecx
c001b89a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b8a0:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b8a3:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b8a9:	51                   	push   ecx
c001b8aa:	52                   	push   edx
c001b8ab:	50                   	push   eax
c001b8ac:	e8 31 7a ff ff       	call   c00132e2 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b8b1:	83 c4 10             	add    esp,0x10
c001b8b4:	31 c0                	xor    eax,eax
c001b8b6:	31 d2                	xor    edx,edx
c001b8b8:	83 c4 0c             	add    esp,0xc
c001b8bb:	c3                   	ret    

c001b8bc <sysCallGetArgc(regs*)>:
c001b8bc:	83 ec 14             	sub    esp,0x14
c001b8bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8c4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8c7:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001b8cd:	68 e4 bf 02 c0       	push   0xc002bfe4
c001b8d2:	e8 5d 76 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001b8d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8dc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8df:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b8e5:	83 c4 1c             	add    esp,0x1c
c001b8e8:	99                   	cdq    
c001b8e9:	c3                   	ret    

c001b8ea <sysCallReadDir(regs*)>:
c001b8ea:	53                   	push   ebx
c001b8eb:	83 ec 18             	sub    esp,0x18
c001b8ee:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b8f2:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b8f5:	83 f8 02             	cmp    eax,0x2
c001b8f8:	76 53                	jbe    c001b94d <sysCallReadDir(regs*)+0x63>
c001b8fa:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b8fd:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b903:	77 4f                	ja     c001b954 <sysCallReadDir(regs*)+0x6a>
c001b905:	83 ec 0c             	sub    esp,0xc
c001b908:	50                   	push   eax
c001b909:	e8 27 61 ff ff       	call   c0011a35 <getFromFileDescriptor(int)>
c001b90e:	83 c4 10             	add    esp,0x10
c001b911:	85 c0                	test   eax,eax
c001b913:	74 50                	je     c001b965 <sysCallReadDir(regs*)+0x7b>
c001b915:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b91d:	83 ec 0c             	sub    esp,0xc
c001b920:	8b 10                	mov    edx,DWORD PTR [eax]
c001b922:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b926:	51                   	push   ecx
c001b927:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b92a:	6a 00                	push   0x0
c001b92c:	68 10 01 00 00       	push   0x110
c001b931:	50                   	push   eax
c001b932:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b935:	83 c4 20             	add    esp,0x20
c001b938:	85 c0                	test   eax,eax
c001b93a:	74 38                	je     c001b974 <sysCallReadDir(regs*)+0x8a>
c001b93c:	83 f8 07             	cmp    eax,0x7
c001b93f:	74 0c                	je     c001b94d <sysCallReadDir(regs*)+0x63>
c001b941:	b8 02 00 00 00       	mov    eax,0x2
c001b946:	31 d2                	xor    edx,edx
c001b948:	83 c4 18             	add    esp,0x18
c001b94b:	5b                   	pop    ebx
c001b94c:	c3                   	ret    
c001b94d:	b8 01 00 00 00       	mov    eax,0x1
c001b952:	eb f2                	jmp    c001b946 <sysCallReadDir(regs*)+0x5c>
c001b954:	83 ec 08             	sub    esp,0x8
c001b957:	52                   	push   edx
c001b958:	68 fc c0 02 c0       	push   0xc002c0fc
c001b95d:	e8 d2 75 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001b962:	83 c4 10             	add    esp,0x10
c001b965:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b96a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b96f:	83 c4 18             	add    esp,0x18
c001b972:	5b                   	pop    ebx
c001b973:	c3                   	ret    
c001b974:	31 c0                	xor    eax,eax
c001b976:	eb ce                	jmp    c001b946 <sysCallReadDir(regs*)+0x5c>

c001b978 <sysCallIsATTY(regs*)>:
c001b978:	83 ec 0c             	sub    esp,0xc
c001b97b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b97f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b982:	83 f8 02             	cmp    eax,0x2
c001b985:	76 07                	jbe    c001b98e <sysCallIsATTY(regs*)+0x16>
c001b987:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b98c:	75 26                	jne    c001b9b4 <sysCallIsATTY(regs*)+0x3c>
c001b98e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b993:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b996:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b99c:	85 c0                	test   eax,eax
c001b99e:	74 24                	je     c001b9c4 <sysCallIsATTY(regs*)+0x4c>
c001b9a0:	83 ec 0c             	sub    esp,0xc
c001b9a3:	8b 10                	mov    edx,DWORD PTR [eax]
c001b9a5:	50                   	push   eax
c001b9a6:	ff 12                	call   DWORD PTR [edx]
c001b9a8:	31 d2                	xor    edx,edx
c001b9aa:	0f b6 c0             	movzx  eax,al
c001b9ad:	83 c4 10             	add    esp,0x10
c001b9b0:	83 c4 0c             	add    esp,0xc
c001b9b3:	c3                   	ret    
c001b9b4:	83 ec 0c             	sub    esp,0xc
c001b9b7:	50                   	push   eax
c001b9b8:	e8 78 60 ff ff       	call   c0011a35 <getFromFileDescriptor(int)>
c001b9bd:	83 c4 10             	add    esp,0x10
c001b9c0:	85 c0                	test   eax,eax
c001b9c2:	75 dc                	jne    c001b9a0 <sysCallIsATTY(regs*)+0x28>
c001b9c4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b9c9:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b9ce:	83 c4 0c             	add    esp,0xc
c001b9d1:	c3                   	ret    

c001b9d2 <sysCallSeek(regs*)>:
c001b9d2:	53                   	push   ebx
c001b9d3:	83 ec 08             	sub    esp,0x8
c001b9d6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b9da:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b9dd:	83 f8 02             	cmp    eax,0x2
c001b9e0:	76 4a                	jbe    c001ba2c <sysCallSeek(regs*)+0x5a>
c001b9e2:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b9e7:	77 32                	ja     c001ba1b <sysCallSeek(regs*)+0x49>
c001b9e9:	83 ec 0c             	sub    esp,0xc
c001b9ec:	50                   	push   eax
c001b9ed:	e8 43 60 ff ff       	call   c0011a35 <getFromFileDescriptor(int)>
c001b9f2:	83 c4 0c             	add    esp,0xc
c001b9f5:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b9f8:	31 db                	xor    ebx,ebx
c001b9fa:	53                   	push   ebx
c001b9fb:	51                   	push   ecx
c001b9fc:	50                   	push   eax
c001b9fd:	e8 ac 7b ff ff       	call   c00135ae <File::seek(unsigned long long)>
c001ba02:	83 c4 10             	add    esp,0x10
c001ba05:	85 c0                	test   eax,eax
c001ba07:	0f 95 c0             	setne  al
c001ba0a:	31 d2                	xor    edx,edx
c001ba0c:	0f b6 c0             	movzx  eax,al
c001ba0f:	f7 d8                	neg    eax
c001ba11:	83 d2 00             	adc    edx,0x0
c001ba14:	83 c4 08             	add    esp,0x8
c001ba17:	f7 da                	neg    edx
c001ba19:	5b                   	pop    ebx
c001ba1a:	c3                   	ret    
c001ba1b:	83 ec 08             	sub    esp,0x8
c001ba1e:	50                   	push   eax
c001ba1f:	68 ef bf 02 c0       	push   0xc002bfef
c001ba24:	e8 0b 75 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001ba29:	83 c4 10             	add    esp,0x10
c001ba2c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba31:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba36:	83 c4 08             	add    esp,0x8
c001ba39:	5b                   	pop    ebx
c001ba3a:	c3                   	ret    

c001ba3b <sysCallTell(regs*)>:
c001ba3b:	53                   	push   ebx
c001ba3c:	83 ec 08             	sub    esp,0x8
c001ba3f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba43:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba46:	83 f8 02             	cmp    eax,0x2
c001ba49:	76 5e                	jbe    c001baa9 <sysCallTell(regs*)+0x6e>
c001ba4b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba50:	77 2d                	ja     c001ba7f <sysCallTell(regs*)+0x44>
c001ba52:	83 ec 0c             	sub    esp,0xc
c001ba55:	50                   	push   eax
c001ba56:	e8 da 5f ff ff       	call   c0011a35 <getFromFileDescriptor(int)>
c001ba5b:	5a                   	pop    edx
c001ba5c:	59                   	pop    ecx
c001ba5d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001ba60:	50                   	push   eax
c001ba61:	e8 9e 7b ff ff       	call   c0013604 <File::tell(unsigned long long*)>
c001ba66:	83 c4 10             	add    esp,0x10
c001ba69:	85 c0                	test   eax,eax
c001ba6b:	0f 95 c0             	setne  al
c001ba6e:	31 d2                	xor    edx,edx
c001ba70:	0f b6 c0             	movzx  eax,al
c001ba73:	f7 d8                	neg    eax
c001ba75:	83 d2 00             	adc    edx,0x0
c001ba78:	83 c4 08             	add    esp,0x8
c001ba7b:	f7 da                	neg    edx
c001ba7d:	5b                   	pop    ebx
c001ba7e:	c3                   	ret    
c001ba7f:	83 ec 08             	sub    esp,0x8
c001ba82:	50                   	push   eax
c001ba83:	68 09 c0 02 c0       	push   0xc002c009
c001ba88:	e8 a7 74 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001ba8d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001ba90:	83 c4 10             	add    esp,0x10
c001ba93:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ba99:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001baa0:	31 d2                	xor    edx,edx
c001baa2:	31 c0                	xor    eax,eax
c001baa4:	83 c4 08             	add    esp,0x8
c001baa7:	5b                   	pop    ebx
c001baa8:	c3                   	ret    
c001baa9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001baae:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bab3:	83 c4 08             	add    esp,0x8
c001bab6:	5b                   	pop    ebx
c001bab7:	c3                   	ret    

c001bab8 <sysCallSize(regs*)>:
c001bab8:	53                   	push   ebx
c001bab9:	83 ec 18             	sub    esp,0x18
c001babc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bac0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bac3:	83 f8 02             	cmp    eax,0x2
c001bac6:	76 64                	jbe    c001bb2c <sysCallSize(regs*)+0x74>
c001bac8:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bacd:	77 33                	ja     c001bb02 <sysCallSize(regs*)+0x4a>
c001bacf:	83 ec 0c             	sub    esp,0xc
c001bad2:	50                   	push   eax
c001bad3:	e8 5d 5f ff ff       	call   c0011a35 <getFromFileDescriptor(int)>
c001bad8:	83 c4 0c             	add    esp,0xc
c001badb:	8d 54 24 13          	lea    edx,[esp+0x13]
c001badf:	52                   	push   edx
c001bae0:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bae3:	50                   	push   eax
c001bae4:	e8 b3 7c ff ff       	call   c001379c <File::stat(unsigned long long*, bool*)>
c001bae9:	83 c4 10             	add    esp,0x10
c001baec:	85 c0                	test   eax,eax
c001baee:	0f 95 c0             	setne  al
c001baf1:	31 d2                	xor    edx,edx
c001baf3:	0f b6 c0             	movzx  eax,al
c001baf6:	f7 d8                	neg    eax
c001baf8:	83 d2 00             	adc    edx,0x0
c001bafb:	83 c4 18             	add    esp,0x18
c001bafe:	f7 da                	neg    edx
c001bb00:	5b                   	pop    ebx
c001bb01:	c3                   	ret    
c001bb02:	83 ec 08             	sub    esp,0x8
c001bb05:	50                   	push   eax
c001bb06:	68 23 c0 02 c0       	push   0xc002c023
c001bb0b:	e8 24 74 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001bb10:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bb13:	83 c4 10             	add    esp,0x10
c001bb16:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb1c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb23:	31 d2                	xor    edx,edx
c001bb25:	31 c0                	xor    eax,eax
c001bb27:	83 c4 18             	add    esp,0x18
c001bb2a:	5b                   	pop    ebx
c001bb2b:	c3                   	ret    
c001bb2c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb31:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb36:	83 c4 18             	add    esp,0x18
c001bb39:	5b                   	pop    ebx
c001bb3a:	c3                   	ret    

c001bb3b <sysCallSizeFromFilename(regs*)>:
c001bb3b:	57                   	push   edi
c001bb3c:	56                   	push   esi
c001bb3d:	53                   	push   ebx
c001bb3e:	83 ec 20             	sub    esp,0x20
c001bb41:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bb45:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001bb48:	83 fb 02             	cmp    ebx,0x2
c001bb4b:	0f 86 99 00 00 00    	jbe    c001bbea <sysCallSizeFromFilename(regs*)+0xaf>
c001bb51:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001bb57:	77 65                	ja     c001bbbe <sysCallSizeFromFilename(regs*)+0x83>
c001bb59:	83 ec 0c             	sub    esp,0xc
c001bb5c:	68 14 01 00 00       	push   0x114
c001bb61:	e8 da 3c ff ff       	call   c000f840 <malloc>
c001bb66:	83 c4 0c             	add    esp,0xc
c001bb69:	89 c6                	mov    esi,eax
c001bb6b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb70:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb73:	53                   	push   ebx
c001bb74:	56                   	push   esi
c001bb75:	e8 12 79 ff ff       	call   c001348c <File::File(char const*, Process*)>
c001bb7a:	83 c4 0c             	add    esp,0xc
c001bb7d:	8d 44 24 23          	lea    eax,[esp+0x23]
c001bb81:	50                   	push   eax
c001bb82:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001bb85:	56                   	push   esi
c001bb86:	e8 11 7c ff ff       	call   c001379c <File::stat(unsigned long long*, bool*)>
c001bb8b:	83 c4 10             	add    esp,0x10
c001bb8e:	85 f6                	test   esi,esi
c001bb90:	74 14                	je     c001bba6 <sysCallSizeFromFilename(regs*)+0x6b>
c001bb92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb96:	8b 16                	mov    edx,DWORD PTR [esi]
c001bb98:	83 ec 0c             	sub    esp,0xc
c001bb9b:	56                   	push   esi
c001bb9c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bb9f:	83 c4 10             	add    esp,0x10
c001bba2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bba6:	85 c0                	test   eax,eax
c001bba8:	0f 95 c0             	setne  al
c001bbab:	31 d2                	xor    edx,edx
c001bbad:	0f b6 c0             	movzx  eax,al
c001bbb0:	f7 d8                	neg    eax
c001bbb2:	83 d2 00             	adc    edx,0x0
c001bbb5:	83 c4 20             	add    esp,0x20
c001bbb8:	f7 da                	neg    edx
c001bbba:	5b                   	pop    ebx
c001bbbb:	5e                   	pop    esi
c001bbbc:	5f                   	pop    edi
c001bbbd:	c3                   	ret    
c001bbbe:	83 ec 08             	sub    esp,0x8
c001bbc1:	53                   	push   ebx
c001bbc2:	68 23 c0 02 c0       	push   0xc002c023
c001bbc7:	e8 68 73 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001bbcc:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bbcf:	83 c4 10             	add    esp,0x10
c001bbd2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bbd8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bbdf:	31 d2                	xor    edx,edx
c001bbe1:	83 c4 20             	add    esp,0x20
c001bbe4:	31 c0                	xor    eax,eax
c001bbe6:	5b                   	pop    ebx
c001bbe7:	5e                   	pop    esi
c001bbe8:	5f                   	pop    edi
c001bbe9:	c3                   	ret    
c001bbea:	83 c4 20             	add    esp,0x20
c001bbed:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bbf2:	5b                   	pop    ebx
c001bbf3:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bbf8:	5e                   	pop    esi
c001bbf9:	5f                   	pop    edi
c001bbfa:	c3                   	ret    

c001bbfb <sysCallClose(regs*)>:
c001bbfb:	53                   	push   ebx
c001bbfc:	83 ec 08             	sub    esp,0x8
c001bbff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc03:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bc06:	83 f8 02             	cmp    eax,0x2
c001bc09:	76 50                	jbe    c001bc5b <sysCallClose(regs*)+0x60>
c001bc0b:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bc10:	74 58                	je     c001bc6a <sysCallClose(regs*)+0x6f>
c001bc12:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bc17:	74 60                	je     c001bc79 <sysCallClose(regs*)+0x7e>
c001bc19:	77 2f                	ja     c001bc4a <sysCallClose(regs*)+0x4f>
c001bc1b:	83 ec 0c             	sub    esp,0xc
c001bc1e:	50                   	push   eax
c001bc1f:	e8 11 5e ff ff       	call   c0011a35 <getFromFileDescriptor(int)>
c001bc24:	89 c3                	mov    ebx,eax
c001bc26:	89 04 24             	mov    DWORD PTR [esp],eax
c001bc29:	e8 20 79 ff ff       	call   c001354e <File::close()>
c001bc2e:	83 c4 10             	add    esp,0x10
c001bc31:	85 db                	test   ebx,ebx
c001bc33:	74 0c                	je     c001bc41 <sysCallClose(regs*)+0x46>
c001bc35:	83 ec 0c             	sub    esp,0xc
c001bc38:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc3a:	53                   	push   ebx
c001bc3b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bc3e:	83 c4 10             	add    esp,0x10
c001bc41:	31 c0                	xor    eax,eax
c001bc43:	31 d2                	xor    edx,edx
c001bc45:	83 c4 08             	add    esp,0x8
c001bc48:	5b                   	pop    ebx
c001bc49:	c3                   	ret    
c001bc4a:	83 ec 08             	sub    esp,0x8
c001bc4d:	50                   	push   eax
c001bc4e:	68 20 c1 02 c0       	push   0xc002c120
c001bc53:	e8 dc 72 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001bc58:	83 c4 10             	add    esp,0x10
c001bc5b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc60:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc65:	83 c4 08             	add    esp,0x8
c001bc68:	5b                   	pop    ebx
c001bc69:	c3                   	ret    
c001bc6a:	83 ec 0c             	sub    esp,0xc
c001bc6d:	68 3e c0 02 c0       	push   0xc002c03e
c001bc72:	e8 bd 72 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001bc77:	eb c5                	jmp    c001bc3e <sysCallClose(regs*)+0x43>
c001bc79:	83 ec 0c             	sub    esp,0xc
c001bc7c:	68 4c c0 02 c0       	push   0xc002c04c
c001bc81:	eb ef                	jmp    c001bc72 <sysCallClose(regs*)+0x77>

c001bc83 <sysCallOpenDir(regs*)>:
c001bc83:	56                   	push   esi
c001bc84:	53                   	push   ebx
c001bc85:	53                   	push   ebx
c001bc86:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bc8a:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bc8d:	85 f6                	test   esi,esi
c001bc8f:	74 59                	je     c001bcea <sysCallOpenDir(regs*)+0x67>
c001bc91:	83 ec 0c             	sub    esp,0xc
c001bc94:	68 14 01 00 00       	push   0x114
c001bc99:	e8 a2 3b ff ff       	call   c000f840 <malloc>
c001bc9e:	83 c4 0c             	add    esp,0xc
c001bca1:	89 c6                	mov    esi,eax
c001bca3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bca8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bcab:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bcae:	56                   	push   esi
c001bcaf:	e8 84 7c ff ff       	call   c0013938 <Directory::Directory(char const*, Process*)>
c001bcb4:	83 c4 10             	add    esp,0x10
c001bcb7:	85 f6                	test   esi,esi
c001bcb9:	74 2f                	je     c001bcea <sysCallOpenDir(regs*)+0x67>
c001bcbb:	83 ec 0c             	sub    esp,0xc
c001bcbe:	56                   	push   esi
c001bcbf:	e8 d8 7c ff ff       	call   c001399c <Directory::open()>
c001bcc4:	83 c4 10             	add    esp,0x10
c001bcc7:	85 c0                	test   eax,eax
c001bcc9:	75 1f                	jne    c001bcea <sysCallOpenDir(regs*)+0x67>
c001bccb:	83 ec 0c             	sub    esp,0xc
c001bcce:	56                   	push   esi
c001bccf:	e8 6c 5a ff ff       	call   c0011740 <UnixFile::getFileDescriptor()>
c001bcd4:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bcd7:	83 c4 10             	add    esp,0x10
c001bcda:	89 02                	mov    DWORD PTR [edx],eax
c001bcdc:	c1 f8 1f             	sar    eax,0x1f
c001bcdf:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bce2:	31 c0                	xor    eax,eax
c001bce4:	59                   	pop    ecx
c001bce5:	31 d2                	xor    edx,edx
c001bce7:	5b                   	pop    ebx
c001bce8:	5e                   	pop    esi
c001bce9:	c3                   	ret    
c001bcea:	59                   	pop    ecx
c001bceb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bcf0:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bcf5:	5b                   	pop    ebx
c001bcf6:	5e                   	pop    esi
c001bcf7:	c3                   	ret    

c001bcf8 <sysCallCloseDir(regs*)>:
c001bcf8:	53                   	push   ebx
c001bcf9:	83 ec 08             	sub    esp,0x8
c001bcfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd00:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bd03:	83 f8 02             	cmp    eax,0x2
c001bd06:	76 47                	jbe    c001bd4f <sysCallCloseDir(regs*)+0x57>
c001bd08:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bd0d:	77 2f                	ja     c001bd3e <sysCallCloseDir(regs*)+0x46>
c001bd0f:	83 ec 0c             	sub    esp,0xc
c001bd12:	50                   	push   eax
c001bd13:	e8 1d 5d ff ff       	call   c0011a35 <getFromFileDescriptor(int)>
c001bd18:	89 c3                	mov    ebx,eax
c001bd1a:	89 04 24             	mov    DWORD PTR [esp],eax
c001bd1d:	e8 d6 7c ff ff       	call   c00139f8 <Directory::close()>
c001bd22:	83 c4 10             	add    esp,0x10
c001bd25:	85 db                	test   ebx,ebx
c001bd27:	74 0c                	je     c001bd35 <sysCallCloseDir(regs*)+0x3d>
c001bd29:	83 ec 0c             	sub    esp,0xc
c001bd2c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd2e:	53                   	push   ebx
c001bd2f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bd32:	83 c4 10             	add    esp,0x10
c001bd35:	31 c0                	xor    eax,eax
c001bd37:	31 d2                	xor    edx,edx
c001bd39:	83 c4 08             	add    esp,0x8
c001bd3c:	5b                   	pop    ebx
c001bd3d:	c3                   	ret    
c001bd3e:	83 ec 08             	sub    esp,0x8
c001bd41:	50                   	push   eax
c001bd42:	68 48 c1 02 c0       	push   0xc002c148
c001bd47:	e8 e8 71 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001bd4c:	83 c4 10             	add    esp,0x10
c001bd4f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd54:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd59:	83 c4 08             	add    esp,0x8
c001bd5c:	5b                   	pop    ebx
c001bd5d:	c3                   	ret    

c001bd5e <sysCallMakeDir(regs*)>:
c001bd5e:	56                   	push   esi
c001bd5f:	53                   	push   ebx
c001bd60:	83 ec 10             	sub    esp,0x10
c001bd63:	68 14 01 00 00       	push   0x114
c001bd68:	e8 d3 3a ff ff       	call   c000f840 <malloc>
c001bd6d:	83 c4 0c             	add    esp,0xc
c001bd70:	89 c3                	mov    ebx,eax
c001bd72:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd77:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd7a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bd7e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bd81:	53                   	push   ebx
c001bd82:	e8 b1 7b ff ff       	call   c0013938 <Directory::Directory(char const*, Process*)>
c001bd87:	83 c4 10             	add    esp,0x10
c001bd8a:	85 db                	test   ebx,ebx
c001bd8c:	74 32                	je     c001bdc0 <sysCallMakeDir(regs*)+0x62>
c001bd8e:	83 ec 0c             	sub    esp,0xc
c001bd91:	53                   	push   ebx
c001bd92:	e8 e5 7d ff ff       	call   c0013b7c <Directory::create()>
c001bd97:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd9a:	89 c6                	mov    esi,eax
c001bd9c:	e8 57 7c ff ff       	call   c00139f8 <Directory::close()>
c001bda1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bda3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bda6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bda9:	83 c4 10             	add    esp,0x10
c001bdac:	31 c0                	xor    eax,eax
c001bdae:	59                   	pop    ecx
c001bdaf:	85 f6                	test   esi,esi
c001bdb1:	5b                   	pop    ebx
c001bdb2:	0f 95 c0             	setne  al
c001bdb5:	5e                   	pop    esi
c001bdb6:	31 d2                	xor    edx,edx
c001bdb8:	f7 d8                	neg    eax
c001bdba:	83 d2 00             	adc    edx,0x0
c001bdbd:	f7 da                	neg    edx
c001bdbf:	c3                   	ret    
c001bdc0:	59                   	pop    ecx
c001bdc1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bdc6:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bdcb:	5b                   	pop    ebx
c001bdcc:	5e                   	pop    esi
c001bdcd:	c3                   	ret    

c001bdce <sysCallWait(regs*)>:
c001bdce:	83 ec 10             	sub    esp,0x10
c001bdd1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bdd5:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001bdd8:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bddb:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001bdde:	e8 ce 24 00 00       	call   c001e2b1 <waitTask(int, int*, int)>
c001bde3:	83 c4 1c             	add    esp,0x1c
c001bde6:	99                   	cdq    
c001bde7:	c3                   	ret    

c001bde8 <sysCallNotImpl(regs*)>:
c001bde8:	83 ec 18             	sub    esp,0x18
c001bdeb:	68 5a c0 02 c0       	push   0xc002c05a
c001bdf0:	e8 e0 e7 ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c001bdf5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bdfa:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bdff:	83 c4 1c             	add    esp,0x1c
c001be02:	c3                   	ret    

c001be03 <sysPanic(regs*)>:
c001be03:	83 ec 18             	sub    esp,0x18
c001be06:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001be0a:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001be0d:	e8 c3 e7 ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c001be12:	c7 04 24 74 c0 02 c0 	mov    DWORD PTR [esp],0xc002c074
c001be19:	e8 b7 e7 ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c001be1e:	b8 01 00 00 00       	mov    eax,0x1
c001be23:	31 d2                	xor    edx,edx
c001be25:	83 c4 1c             	add    esp,0x1c
c001be28:	c3                   	ret    

c001be29 <sysCallRmdir(regs*)>:
c001be29:	56                   	push   esi
c001be2a:	53                   	push   ebx
c001be2b:	83 ec 20             	sub    esp,0x20
c001be2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001be32:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001be35:	68 14 01 00 00       	push   0x114
c001be3a:	e8 01 3a ff ff       	call   c000f840 <malloc>
c001be3f:	83 c4 0c             	add    esp,0xc
c001be42:	89 c3                	mov    ebx,eax
c001be44:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be49:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be4c:	56                   	push   esi
c001be4d:	53                   	push   ebx
c001be4e:	e8 39 76 ff ff       	call   c001348c <File::File(char const*, Process*)>
c001be53:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be56:	e8 0d 78 ff ff       	call   c0013668 <File::unlink()>
c001be5b:	83 c4 10             	add    esp,0x10
c001be5e:	85 db                	test   ebx,ebx
c001be60:	74 14                	je     c001be76 <sysCallRmdir(regs*)+0x4d>
c001be62:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be66:	8b 13                	mov    edx,DWORD PTR [ebx]
c001be68:	83 ec 0c             	sub    esp,0xc
c001be6b:	53                   	push   ebx
c001be6c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001be6f:	83 c4 10             	add    esp,0x10
c001be72:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be76:	85 c0                	test   eax,eax
c001be78:	0f 95 c0             	setne  al
c001be7b:	31 d2                	xor    edx,edx
c001be7d:	0f b6 c0             	movzx  eax,al
c001be80:	f7 d8                	neg    eax
c001be82:	83 d2 00             	adc    edx,0x0
c001be85:	83 c4 14             	add    esp,0x14
c001be88:	f7 da                	neg    edx
c001be8a:	5b                   	pop    ebx
c001be8b:	5e                   	pop    esi
c001be8c:	c3                   	ret    

c001be8d <sysCallUnlink(regs*)>:
c001be8d:	56                   	push   esi
c001be8e:	53                   	push   ebx
c001be8f:	83 ec 20             	sub    esp,0x20
c001be92:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001be96:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001be99:	68 14 01 00 00       	push   0x114
c001be9e:	e8 9d 39 ff ff       	call   c000f840 <malloc>
c001bea3:	83 c4 0c             	add    esp,0xc
c001bea6:	89 c3                	mov    ebx,eax
c001bea8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bead:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001beb0:	56                   	push   esi
c001beb1:	53                   	push   ebx
c001beb2:	e8 d5 75 ff ff       	call   c001348c <File::File(char const*, Process*)>
c001beb7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001beba:	e8 a9 77 ff ff       	call   c0013668 <File::unlink()>
c001bebf:	83 c4 10             	add    esp,0x10
c001bec2:	85 db                	test   ebx,ebx
c001bec4:	74 14                	je     c001beda <sysCallUnlink(regs*)+0x4d>
c001bec6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001beca:	8b 13                	mov    edx,DWORD PTR [ebx]
c001becc:	83 ec 0c             	sub    esp,0xc
c001becf:	53                   	push   ebx
c001bed0:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bed3:	83 c4 10             	add    esp,0x10
c001bed6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001beda:	85 c0                	test   eax,eax
c001bedc:	0f 95 c0             	setne  al
c001bedf:	31 d2                	xor    edx,edx
c001bee1:	0f b6 c0             	movzx  eax,al
c001bee4:	f7 d8                	neg    eax
c001bee6:	83 d2 00             	adc    edx,0x0
c001bee9:	83 c4 14             	add    esp,0x14
c001beec:	f7 da                	neg    edx
c001beee:	5b                   	pop    ebx
c001beef:	5e                   	pop    esi
c001bef0:	c3                   	ret    

c001bef1 <sysCallGetArgv(regs*)>:
c001bef1:	83 ec 0c             	sub    esp,0xc
c001bef4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bef8:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001befb:	85 c0                	test   eax,eax
c001befd:	78 2b                	js     c001bf2a <sysCallGetArgv(regs*)+0x39>
c001beff:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bf05:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bf08:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001bf0e:	7d 1a                	jge    c001bf2a <sysCallGetArgv(regs*)+0x39>
c001bf10:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001bf17:	85 c0                	test   eax,eax
c001bf19:	74 17                	je     c001bf32 <sysCallGetArgv(regs*)+0x41>
c001bf1b:	83 ec 08             	sub    esp,0x8
c001bf1e:	50                   	push   eax
c001bf1f:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bf22:	e8 0d 49 fe ff       	call   c0000834 <strcpy>
c001bf27:	83 c4 10             	add    esp,0x10
c001bf2a:	31 c0                	xor    eax,eax
c001bf2c:	31 d2                	xor    edx,edx
c001bf2e:	83 c4 0c             	add    esp,0xc
c001bf31:	c3                   	ret    
c001bf32:	b8 01 00 00 00       	mov    eax,0x1
c001bf37:	31 d2                	xor    edx,edx
c001bf39:	83 c4 0c             	add    esp,0xc
c001bf3c:	c3                   	ret    

c001bf3d <sysCallTTYName(regs*)>:
c001bf3d:	56                   	push   esi
c001bf3e:	53                   	push   ebx
c001bf3f:	53                   	push   ebx
c001bf40:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bf44:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001bf47:	85 c0                	test   eax,eax
c001bf49:	74 5f                	je     c001bfaa <sysCallTTYName(regs*)+0x6d>
c001bf4b:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bf4e:	83 f8 02             	cmp    eax,0x2
c001bf51:	77 3e                	ja     c001bf91 <sysCallTTYName(regs*)+0x54>
c001bf53:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf58:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bf5b:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001bf61:	85 db                	test   ebx,ebx
c001bf63:	74 45                	je     c001bfaa <sysCallTTYName(regs*)+0x6d>
c001bf65:	83 ec 0c             	sub    esp,0xc
c001bf68:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bf6a:	53                   	push   ebx
c001bf6b:	ff 10                	call   DWORD PTR [eax]
c001bf6d:	83 c4 10             	add    esp,0x10
c001bf70:	84 c0                	test   al,al
c001bf72:	74 41                	je     c001bfb5 <sysCallTTYName(regs*)+0x78>
c001bf74:	83 ec 08             	sub    esp,0x8
c001bf77:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001bf7d:	53                   	push   ebx
c001bf7e:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bf81:	e8 ae 48 fe ff       	call   c0000834 <strcpy>
c001bf86:	83 c4 10             	add    esp,0x10
c001bf89:	31 c0                	xor    eax,eax
c001bf8b:	59                   	pop    ecx
c001bf8c:	31 d2                	xor    edx,edx
c001bf8e:	5b                   	pop    ebx
c001bf8f:	5e                   	pop    esi
c001bf90:	c3                   	ret    
c001bf91:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bf96:	74 bb                	je     c001bf53 <sysCallTTYName(regs*)+0x16>
c001bf98:	83 ec 0c             	sub    esp,0xc
c001bf9b:	50                   	push   eax
c001bf9c:	e8 94 5a ff ff       	call   c0011a35 <getFromFileDescriptor(int)>
c001bfa1:	83 c4 10             	add    esp,0x10
c001bfa4:	89 c3                	mov    ebx,eax
c001bfa6:	85 db                	test   ebx,ebx
c001bfa8:	75 bb                	jne    c001bf65 <sysCallTTYName(regs*)+0x28>
c001bfaa:	59                   	pop    ecx
c001bfab:	b8 01 00 00 00       	mov    eax,0x1
c001bfb0:	31 d2                	xor    edx,edx
c001bfb2:	5b                   	pop    ebx
c001bfb3:	5e                   	pop    esi
c001bfb4:	c3                   	ret    
c001bfb5:	59                   	pop    ecx
c001bfb6:	b8 02 00 00 00       	mov    eax,0x2
c001bfbb:	31 d2                	xor    edx,edx
c001bfbd:	5b                   	pop    ebx
c001bfbe:	5e                   	pop    esi
c001bfbf:	c3                   	ret    

c001bfc0 <sysCallUSleep(regs*)>:
c001bfc0:	83 ec 14             	sub    esp,0x14
c001bfc3:	b8 e8 03 00 00       	mov    eax,0x3e8
c001bfc8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bfcc:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001bfd3:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001bfd6:	01 ca                	add    edx,ecx
c001bfd8:	52                   	push   edx
c001bfd9:	50                   	push   eax
c001bfda:	e8 6b 23 00 00       	call   c001e34a <nanoSleep(unsigned long long)>
c001bfdf:	31 c0                	xor    eax,eax
c001bfe1:	31 d2                	xor    edx,edx
c001bfe3:	83 c4 1c             	add    esp,0x1c
c001bfe6:	c3                   	ret    

c001bfe7 <sysCallSpawn(regs*)>:
c001bfe7:	56                   	push   esi
c001bfe8:	53                   	push   ebx
c001bfe9:	53                   	push   ebx
c001bfea:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bfee:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001bff1:	85 f6                	test   esi,esi
c001bff3:	75 08                	jne    c001bffd <sysCallSpawn(regs*)+0x16>
c001bff5:	59                   	pop    ecx
c001bff6:	31 c0                	xor    eax,eax
c001bff8:	31 d2                	xor    edx,edx
c001bffa:	5b                   	pop    ebx
c001bffb:	5e                   	pop    esi
c001bffc:	c3                   	ret    
c001bffd:	83 ec 0c             	sub    esp,0xc
c001c000:	68 3f 07 00 00       	push   0x73f
c001c005:	e8 36 38 ff ff       	call   c000f840 <malloc>
c001c00a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001c00d:	89 c6                	mov    esi,eax
c001c00f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c014:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c017:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c01a:	56                   	push   esi
c001c01b:	e8 2a 1a 00 00       	call   c001da4a <Process::Process(char const*, Process*, char**)>
c001c020:	83 c4 20             	add    esp,0x20
c001c023:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c02a:	75 c9                	jne    c001bff5 <sysCallSpawn(regs*)+0xe>
c001c02c:	83 ec 0c             	sub    esp,0xc
c001c02f:	56                   	push   esi
c001c030:	e8 db 1f 00 00       	call   c001e010 <Process::createUserThread()>
c001c035:	8b 06                	mov    eax,DWORD PTR [esi]
c001c037:	83 c4 10             	add    esp,0x10
c001c03a:	99                   	cdq    
c001c03b:	59                   	pop    ecx
c001c03c:	5b                   	pop    ebx
c001c03d:	5e                   	pop    esi
c001c03e:	c3                   	ret    

c001c03f <sysCallGetEnv(regs*)>:
c001c03f:	55                   	push   ebp
c001c040:	57                   	push   edi
c001c041:	56                   	push   esi
c001c042:	53                   	push   ebx
c001c043:	83 ec 28             	sub    esp,0x28
c001c046:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c04a:	68 83 c0 02 c0       	push   0xc002c083
c001c04f:	e8 e0 6e ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001c054:	5f                   	pop    edi
c001c055:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c058:	5d                   	pop    ebp
c001c059:	53                   	push   ebx
c001c05a:	68 4c a9 02 c0       	push   0xc002a94c
c001c05f:	e8 d0 6e ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001c064:	58                   	pop    eax
c001c065:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c068:	5a                   	pop    edx
c001c069:	57                   	push   edi
c001c06a:	68 8c c0 02 c0       	push   0xc002c08c
c001c06f:	e8 c0 6e ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001c074:	59                   	pop    ecx
c001c075:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c07a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c07d:	e8 6f e4 ff ff       	call   c001a4f1 <Krnl::getProcessTotalEnvCount(Process*)>
c001c082:	5a                   	pop    edx
c001c083:	89 c5                	mov    ebp,eax
c001c085:	59                   	pop    ecx
c001c086:	50                   	push   eax
c001c087:	68 96 c0 02 c0       	push   0xc002c096
c001c08c:	e8 a3 6e ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001c091:	83 c4 10             	add    esp,0x10
c001c094:	39 ef                	cmp    edi,ebp
c001c096:	7c 15                	jl     c001c0ad <sysCallGetEnv(regs*)+0x6e>
c001c098:	85 db                	test   ebx,ebx
c001c09a:	75 0c                	jne    c001c0a8 <sysCallGetEnv(regs*)+0x69>
c001c09c:	83 c4 1c             	add    esp,0x1c
c001c09f:	31 c0                	xor    eax,eax
c001c0a1:	5b                   	pop    ebx
c001c0a2:	31 d2                	xor    edx,edx
c001c0a4:	5e                   	pop    esi
c001c0a5:	5f                   	pop    edi
c001c0a6:	5d                   	pop    ebp
c001c0a7:	c3                   	ret    
c001c0a8:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c0ab:	eb ef                	jmp    c001c09c <sysCallGetEnv(regs*)+0x5d>
c001c0ad:	83 ec 0c             	sub    esp,0xc
c001c0b0:	68 a2 c0 02 c0       	push   0xc002c0a2
c001c0b5:	e8 7a 6e ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001c0ba:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c0be:	83 c4 0c             	add    esp,0xc
c001c0c1:	57                   	push   edi
c001c0c2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c0c8:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c0cb:	50                   	push   eax
c001c0cc:	e8 40 e4 ff ff       	call   c001a511 <Krnl::getProcessEnvPair(Process*, int)>
c001c0d1:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c0d5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c0d9:	68 24 c4 02 c0       	push   0xc002c424
c001c0de:	e8 51 6e ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001c0e3:	83 c4 10             	add    esp,0x10
c001c0e6:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c0e9:	85 f6                	test   esi,esi
c001c0eb:	75 47                	jne    c001c134 <sysCallGetEnv(regs*)+0xf5>
c001c0ed:	83 ec 0c             	sub    esp,0xc
c001c0f0:	55                   	push   ebp
c001c0f1:	e8 9e 46 fe ff       	call   c0000794 <strlen>
c001c0f6:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c0f9:	89 c3                	mov    ebx,eax
c001c0fb:	e8 94 46 fe ff       	call   c0000794 <strlen>
c001c100:	5a                   	pop    edx
c001c101:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c105:	59                   	pop    ecx
c001c106:	50                   	push   eax
c001c107:	68 a5 c0 02 c0       	push   0xc002c0a5
c001c10c:	e8 23 6e ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001c111:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c114:	e8 7b 46 fe ff       	call   c0000794 <strlen>
c001c119:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c11c:	89 c3                	mov    ebx,eax
c001c11e:	e8 71 46 fe ff       	call   c0000794 <strlen>
c001c123:	83 c4 10             	add    esp,0x10
c001c126:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c12a:	83 c4 1c             	add    esp,0x1c
c001c12d:	31 d2                	xor    edx,edx
c001c12f:	5b                   	pop    ebx
c001c130:	5e                   	pop    esi
c001c131:	5f                   	pop    edi
c001c132:	5d                   	pop    ebp
c001c133:	c3                   	ret    
c001c134:	83 ec 0c             	sub    esp,0xc
c001c137:	68 3e c4 02 c0       	push   0xc002c43e
c001c13c:	e8 f3 6d ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001c141:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c144:	58                   	pop    eax
c001c145:	5a                   	pop    edx
c001c146:	55                   	push   ebp
c001c147:	53                   	push   ebx
c001c148:	e8 e7 46 fe ff       	call   c0000834 <strcpy>
c001c14d:	59                   	pop    ecx
c001c14e:	5e                   	pop    esi
c001c14f:	68 af c0 02 c0       	push   0xc002c0af
c001c154:	53                   	push   ebx
c001c155:	e8 1a 48 fe ff       	call   c0000974 <strcat>
c001c15a:	5d                   	pop    ebp
c001c15b:	58                   	pop    eax
c001c15c:	57                   	push   edi
c001c15d:	53                   	push   ebx
c001c15e:	e8 11 48 fe ff       	call   c0000974 <strcat>
c001c163:	c7 04 24 58 c4 02 c0 	mov    DWORD PTR [esp],0xc002c458
c001c16a:	e8 c5 6d ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001c16f:	83 c4 10             	add    esp,0x10
c001c172:	e9 25 ff ff ff       	jmp    c001c09c <sysCallGetEnv(regs*)+0x5d>

c001c177 <sysAppSettings(regs*)>:
c001c177:	53                   	push   ebx
c001c178:	83 ec 08             	sub    esp,0x8
c001c17b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c17f:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001c182:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001c188:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c18d:	66 3d c0 09          	cmp    ax,0x9c0
c001c191:	75 2f                	jne    c001c1c2 <sysAppSettings(regs*)+0x4b>
c001c193:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001c199:	83 e0 1f             	and    eax,0x1f
c001c19c:	3c 01                	cmp    al,0x1
c001c19e:	74 2e                	je     c001c1ce <sysAppSettings(regs*)+0x57>
c001c1a0:	3c 07                	cmp    al,0x7
c001c1a2:	0f 84 bd 00 00 00    	je     c001c265 <sysAppSettings(regs*)+0xee>
c001c1a8:	84 c0                	test   al,al
c001c1aa:	0f 84 dc 00 00 00    	je     c001c28c <sysAppSettings(regs*)+0x115>
c001c1b0:	3c 08                	cmp    al,0x8
c001c1b2:	74 6d                	je     c001c221 <sysAppSettings(regs*)+0xaa>
c001c1b4:	0f b6 c0             	movzx  eax,al
c001c1b7:	83 c4 08             	add    esp,0x8
c001c1ba:	05 e8 03 00 00       	add    eax,0x3e8
c001c1bf:	5b                   	pop    ebx
c001c1c0:	99                   	cdq    
c001c1c1:	c3                   	ret    
c001c1c2:	b8 01 00 00 00       	mov    eax,0x1
c001c1c7:	31 d2                	xor    edx,edx
c001c1c9:	83 c4 08             	add    esp,0x8
c001c1cc:	5b                   	pop    ebx
c001c1cd:	c3                   	ret    
c001c1ce:	51                   	push   ecx
c001c1cf:	68 00 01 00 00       	push   0x100
c001c1d4:	6a 00                	push   0x0
c001c1d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1db:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1de:	83 c0 0c             	add    eax,0xc
c001c1e1:	50                   	push   eax
c001c1e2:	e8 91 45 fe ff       	call   c0000778 <memset>
c001c1e7:	83 c4 0c             	add    esp,0xc
c001c1ea:	68 ff 00 00 00       	push   0xff
c001c1ef:	53                   	push   ebx
c001c1f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1f5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1f8:	83 c0 0c             	add    eax,0xc
c001c1fb:	50                   	push   eax
c001c1fc:	e8 43 45 fe ff       	call   c0000744 <memcpy>
c001c201:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c206:	5b                   	pop    ebx
c001c207:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c20a:	5a                   	pop    edx
c001c20b:	8d 50 0c             	lea    edx,[eax+0xc]
c001c20e:	52                   	push   edx
c001c20f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c215:	e8 96 49 ff ff       	call   c0010bb0 <VgaText::setTitle(char*)>
c001c21a:	83 c4 10             	add    esp,0x10
c001c21d:	31 c0                	xor    eax,eax
c001c21f:	eb a6                	jmp    c001c1c7 <sysAppSettings(regs*)+0x50>
c001c221:	83 ec 08             	sub    esp,0x8
c001c224:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c22a:	83 e0 0f             	and    eax,0xf
c001c22d:	50                   	push   eax
c001c22e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c233:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c236:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c23c:	e8 5f 49 ff ff       	call   c0010ba0 <VgaText::setTitleColour(VgaColour)>
c001c241:	58                   	pop    eax
c001c242:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c248:	5a                   	pop    edx
c001c249:	c1 e8 04             	shr    eax,0x4
c001c24c:	83 e0 0f             	and    eax,0xf
c001c24f:	50                   	push   eax
c001c250:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c255:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c258:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c25e:	e8 2d 49 ff ff       	call   c0010b90 <VgaText::setTitleTextColour(VgaColour)>
c001c263:	eb b5                	jmp    c001c21a <sysAppSettings(regs*)+0xa3>
c001c265:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c26a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c26d:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c273:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c279:	c0 e8 06             	shr    al,0x6
c001c27c:	83 e0 01             	and    eax,0x1
c001c27f:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001c285:	31 c0                	xor    eax,eax
c001c287:	e9 3b ff ff ff       	jmp    c001c1c7 <sysAppSettings(regs*)+0x50>
c001c28c:	b8 02 00 00 00       	mov    eax,0x2
c001c291:	e9 31 ff ff ff       	jmp    c001c1c7 <sysAppSettings(regs*)+0x50>

c001c296 <sysSetFatAttrib(regs*)>:
c001c296:	57                   	push   edi
c001c297:	56                   	push   esi
c001c298:	53                   	push   ebx
c001c299:	83 ec 1c             	sub    esp,0x1c
c001c29c:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c2a0:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c2a3:	68 14 01 00 00       	push   0x114
c001c2a8:	e8 93 35 ff ff       	call   c000f840 <malloc>
c001c2ad:	83 c4 0c             	add    esp,0xc
c001c2b0:	89 c3                	mov    ebx,eax
c001c2b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2b7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c2ba:	57                   	push   edi
c001c2bb:	53                   	push   ebx
c001c2bc:	e8 cb 71 ff ff       	call   c001348c <File::File(char const*, Process*)>
c001c2c1:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c2c4:	83 c4 0c             	add    esp,0xc
c001c2c7:	0f b6 d4             	movzx  edx,ah
c001c2ca:	0f b6 c0             	movzx  eax,al
c001c2cd:	52                   	push   edx
c001c2ce:	50                   	push   eax
c001c2cf:	53                   	push   ebx
c001c2d0:	e8 2d 74 ff ff       	call   c0013702 <File::chfatattr(unsigned char, unsigned char)>
c001c2d5:	83 c4 10             	add    esp,0x10
c001c2d8:	85 db                	test   ebx,ebx
c001c2da:	74 14                	je     c001c2f0 <sysSetFatAttrib(regs*)+0x5a>
c001c2dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c2e0:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c2e2:	83 ec 0c             	sub    esp,0xc
c001c2e5:	53                   	push   ebx
c001c2e6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c2e9:	83 c4 10             	add    esp,0x10
c001c2ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c2f0:	85 c0                	test   eax,eax
c001c2f2:	0f 95 c0             	setne  al
c001c2f5:	31 d2                	xor    edx,edx
c001c2f7:	0f b6 c0             	movzx  eax,al
c001c2fa:	f7 d8                	neg    eax
c001c2fc:	83 d2 00             	adc    edx,0x0
c001c2ff:	83 c4 10             	add    esp,0x10
c001c302:	f7 da                	neg    edx
c001c304:	5b                   	pop    ebx
c001c305:	5e                   	pop    esi
c001c306:	5f                   	pop    edi
c001c307:	c3                   	ret    

c001c308 <sysPipe(regs*)>:
c001c308:	57                   	push   edi
c001c309:	56                   	push   esi
c001c30a:	53                   	push   ebx
c001c30b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c30f:	83 ec 0c             	sub    esp,0xc
c001c312:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c315:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c318:	6a 20                	push   0x20
c001c31a:	e8 21 35 ff ff       	call   c000f840 <malloc>
c001c31f:	89 c3                	mov    ebx,eax
c001c321:	58                   	pop    eax
c001c322:	5a                   	pop    edx
c001c323:	68 00 50 00 00       	push   0x5000
c001c328:	53                   	push   ebx
c001c329:	e8 b2 41 ff ff       	call   c00104e0 <Pipe::Pipe(int)>
c001c32e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c331:	e8 0a 54 ff ff       	call   c0011740 <UnixFile::getFileDescriptor()>
c001c336:	89 07                	mov    DWORD PTR [edi],eax
c001c338:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c33b:	e8 00 54 ff ff       	call   c0011740 <UnixFile::getFileDescriptor()>
c001c340:	83 c4 10             	add    esp,0x10
c001c343:	89 06                	mov    DWORD PTR [esi],eax
c001c345:	31 d2                	xor    edx,edx
c001c347:	5b                   	pop    ebx
c001c348:	31 c0                	xor    eax,eax
c001c34a:	5e                   	pop    esi
c001c34b:	5f                   	pop    edi
c001c34c:	c3                   	ret    

c001c34d <sysGetUnixTime(regs*)>:
c001c34d:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c001c352:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c358:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c35c:	e9 15 7b ff ff       	jmp    c0013e76 <Clock::timeInSecondsLocal()>

c001c361 <string_ends_with(char const*, char const*)>:
c001c361:	57                   	push   edi
c001c362:	56                   	push   esi
c001c363:	53                   	push   ebx
c001c364:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c368:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c36c:	83 ec 0c             	sub    esp,0xc
c001c36f:	53                   	push   ebx
c001c370:	e8 1f 44 fe ff       	call   c0000794 <strlen>
c001c375:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c378:	89 c6                	mov    esi,eax
c001c37a:	e8 15 44 fe ff       	call   c0000794 <strlen>
c001c37f:	83 c4 10             	add    esp,0x10
c001c382:	39 c6                	cmp    esi,eax
c001c384:	7d 06                	jge    c001c38c <string_ends_with(char const*, char const*)+0x2b>
c001c386:	5b                   	pop    ebx
c001c387:	31 c0                	xor    eax,eax
c001c389:	5e                   	pop    esi
c001c38a:	5f                   	pop    edi
c001c38b:	c3                   	ret    
c001c38c:	83 ec 08             	sub    esp,0x8
c001c38f:	29 c6                	sub    esi,eax
c001c391:	57                   	push   edi
c001c392:	01 f3                	add    ebx,esi
c001c394:	53                   	push   ebx
c001c395:	e8 26 45 fe ff       	call   c00008c0 <strcmp>
c001c39a:	83 c4 10             	add    esp,0x10
c001c39d:	85 c0                	test   eax,eax
c001c39f:	5b                   	pop    ebx
c001c3a0:	0f 94 c0             	sete   al
c001c3a3:	5e                   	pop    esi
c001c3a4:	0f b6 c0             	movzx  eax,al
c001c3a7:	5f                   	pop    edi
c001c3a8:	c3                   	ret    

c001c3a9 <sysCallOpen(regs*)>:
c001c3a9:	56                   	push   esi
c001c3aa:	53                   	push   ebx
c001c3ab:	81 ec 04 01 00 00    	sub    esp,0x104
c001c3b1:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c3b8:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c3bb:	85 c9                	test   ecx,ecx
c001c3bd:	0f 84 b3 00 00 00    	je     c001c476 <sysCallOpen(regs*)+0xcd>
c001c3c3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c3c6:	85 c0                	test   eax,eax
c001c3c8:	0f 84 a8 00 00 00    	je     c001c476 <sysCallOpen(regs*)+0xcd>
c001c3ce:	52                   	push   edx
c001c3cf:	68 b1 c0 02 c0       	push   0xc002c0b1
c001c3d4:	50                   	push   eax
c001c3d5:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c3d9:	56                   	push   esi
c001c3da:	e8 03 6f ff ff       	call   c00132e2 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c3df:	89 34 24             	mov    DWORD PTR [esp],esi
c001c3e2:	e8 ad 43 fe ff       	call   c0000794 <strlen>
c001c3e7:	83 c4 10             	add    esp,0x10
c001c3ea:	48                   	dec    eax
c001c3eb:	74 1d                	je     c001c40a <sysCallOpen(regs*)+0x61>
c001c3ed:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c3f0:	eb 0f                	jmp    c001c401 <sysCallOpen(regs*)+0x58>
c001c3f2:	80 fa 3a             	cmp    dl,0x3a
c001c3f5:	74 0f                	je     c001c406 <sysCallOpen(regs*)+0x5d>
c001c3f7:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c3fb:	48                   	dec    eax
c001c3fc:	74 0c                	je     c001c40a <sysCallOpen(regs*)+0x61>
c001c3fe:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c401:	80 fa 2e             	cmp    dl,0x2e
c001c404:	75 ec                	jne    c001c3f2 <sysCallOpen(regs*)+0x49>
c001c406:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c40a:	83 ec 08             	sub    esp,0x8
c001c40d:	68 b5 c0 02 c0       	push   0xc002c0b5
c001c412:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c415:	e8 47 ff ff ff       	call   c001c361 <string_ends_with(char const*, char const*)>
c001c41a:	83 c4 10             	add    esp,0x10
c001c41d:	85 c0                	test   eax,eax
c001c41f:	75 17                	jne    c001c438 <sysCallOpen(regs*)+0x8f>
c001c421:	83 ec 08             	sub    esp,0x8
c001c424:	68 d6 c0 02 c0       	push   0xc002c0d6
c001c429:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c42c:	e8 30 ff ff ff       	call   c001c361 <string_ends_with(char const*, char const*)>
c001c431:	83 c4 10             	add    esp,0x10
c001c434:	85 c0                	test   eax,eax
c001c436:	74 51                	je     c001c489 <sysCallOpen(regs*)+0xe0>
c001c438:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c43b:	83 ec 08             	sub    esp,0x8
c001c43e:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c444:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c44b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c44e:	ff 30                	push   DWORD PTR [eax]
c001c450:	68 ba c0 02 c0       	push   0xc002c0ba
c001c455:	e8 da 6a ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001c45a:	c7 04 24 c9 c0 02 c0 	mov    DWORD PTR [esp],0xc002c0c9
c001c461:	e8 ce 6a ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001c466:	83 c4 10             	add    esp,0x10
c001c469:	81 c4 04 01 00 00    	add    esp,0x104
c001c46f:	31 c0                	xor    eax,eax
c001c471:	31 d2                	xor    edx,edx
c001c473:	5b                   	pop    ebx
c001c474:	5e                   	pop    esi
c001c475:	c3                   	ret    
c001c476:	81 c4 04 01 00 00    	add    esp,0x104
c001c47c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c481:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c486:	5b                   	pop    ebx
c001c487:	5e                   	pop    esi
c001c488:	c3                   	ret    
c001c489:	83 ec 08             	sub    esp,0x8
c001c48c:	68 b6 c0 02 c0       	push   0xc002c0b6
c001c491:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c494:	e8 27 44 fe ff       	call   c00008c0 <strcmp>
c001c499:	83 c4 10             	add    esp,0x10
c001c49c:	85 c0                	test   eax,eax
c001c49e:	74 98                	je     c001c438 <sysCallOpen(regs*)+0x8f>
c001c4a0:	83 ec 08             	sub    esp,0x8
c001c4a3:	68 b5 c0 02 c0       	push   0xc002c0b5
c001c4a8:	56                   	push   esi
c001c4a9:	e8 b3 fe ff ff       	call   c001c361 <string_ends_with(char const*, char const*)>
c001c4ae:	83 c4 10             	add    esp,0x10
c001c4b1:	85 c0                	test   eax,eax
c001c4b3:	75 83                	jne    c001c438 <sysCallOpen(regs*)+0x8f>
c001c4b5:	83 ec 08             	sub    esp,0x8
c001c4b8:	68 db c0 02 c0       	push   0xc002c0db
c001c4bd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4c0:	e8 9c fe ff ff       	call   c001c361 <string_ends_with(char const*, char const*)>
c001c4c5:	83 c4 10             	add    esp,0x10
c001c4c8:	85 c0                	test   eax,eax
c001c4ca:	0f 85 d9 00 00 00    	jne    c001c5a9 <sysCallOpen(regs*)+0x200>
c001c4d0:	83 ec 08             	sub    esp,0x8
c001c4d3:	68 e0 c0 02 c0       	push   0xc002c0e0
c001c4d8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4db:	e8 81 fe ff ff       	call   c001c361 <string_ends_with(char const*, char const*)>
c001c4e0:	83 c4 10             	add    esp,0x10
c001c4e3:	85 c0                	test   eax,eax
c001c4e5:	0f 85 be 00 00 00    	jne    c001c5a9 <sysCallOpen(regs*)+0x200>
c001c4eb:	83 ec 08             	sub    esp,0x8
c001c4ee:	68 dc c0 02 c0       	push   0xc002c0dc
c001c4f3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4f6:	e8 c5 43 fe ff       	call   c00008c0 <strcmp>
c001c4fb:	83 c4 10             	add    esp,0x10
c001c4fe:	85 c0                	test   eax,eax
c001c500:	0f 84 a3 00 00 00    	je     c001c5a9 <sysCallOpen(regs*)+0x200>
c001c506:	83 ec 08             	sub    esp,0x8
c001c509:	68 db c0 02 c0       	push   0xc002c0db
c001c50e:	56                   	push   esi
c001c50f:	e8 4d fe ff ff       	call   c001c361 <string_ends_with(char const*, char const*)>
c001c514:	83 c4 10             	add    esp,0x10
c001c517:	85 c0                	test   eax,eax
c001c519:	0f 85 8a 00 00 00    	jne    c001c5a9 <sysCallOpen(regs*)+0x200>
c001c51f:	83 ec 0c             	sub    esp,0xc
c001c522:	68 14 01 00 00       	push   0x114
c001c527:	e8 14 33 ff ff       	call   c000f840 <malloc>
c001c52c:	83 c4 0c             	add    esp,0xc
c001c52f:	89 c6                	mov    esi,eax
c001c531:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c536:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c539:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c53c:	56                   	push   esi
c001c53d:	e8 4a 6f ff ff       	call   c001348c <File::File(char const*, Process*)>
c001c542:	83 c4 10             	add    esp,0x10
c001c545:	85 f6                	test   esi,esi
c001c547:	0f 84 29 ff ff ff    	je     c001c476 <sysCallOpen(regs*)+0xcd>
c001c54d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c550:	0f b6 c2             	movzx  eax,dl
c001c553:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c556:	89 d0                	mov    eax,edx
c001c558:	83 e0 01             	and    eax,0x1
c001c55b:	f6 c2 02             	test   dl,0x2
c001c55e:	74 03                	je     c001c563 <sysCallOpen(regs*)+0x1ba>
c001c560:	83 c8 02             	or     eax,0x2
c001c563:	f6 c2 04             	test   dl,0x4
c001c566:	74 03                	je     c001c56b <sysCallOpen(regs*)+0x1c2>
c001c568:	83 c8 04             	or     eax,0x4
c001c56b:	f6 c2 08             	test   dl,0x8
c001c56e:	74 03                	je     c001c573 <sysCallOpen(regs*)+0x1ca>
c001c570:	83 c8 0a             	or     eax,0xa
c001c573:	83 e2 10             	and    edx,0x10
c001c576:	74 03                	je     c001c57b <sysCallOpen(regs*)+0x1d2>
c001c578:	83 c8 12             	or     eax,0x12
c001c57b:	83 ec 08             	sub    esp,0x8
c001c57e:	50                   	push   eax
c001c57f:	56                   	push   esi
c001c580:	e8 6b 6f ff ff       	call   c00134f0 <File::open(FileOpenMode)>
c001c585:	83 c4 10             	add    esp,0x10
c001c588:	85 c0                	test   eax,eax
c001c58a:	0f 85 e6 fe ff ff    	jne    c001c476 <sysCallOpen(regs*)+0xcd>
c001c590:	83 ec 0c             	sub    esp,0xc
c001c593:	56                   	push   esi
c001c594:	e8 a7 51 ff ff       	call   c0011740 <UnixFile::getFileDescriptor()>
c001c599:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c59c:	89 02                	mov    DWORD PTR [edx],eax
c001c59e:	c1 f8 1f             	sar    eax,0x1f
c001c5a1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c5a4:	e9 bd fe ff ff       	jmp    c001c466 <sysCallOpen(regs*)+0xbd>
c001c5a9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c5ac:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c5b2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c5b9:	e9 ab fe ff ff       	jmp    c001c469 <sysCallOpen(regs*)+0xc0>

c001c5be <Sys::loadSyscalls()>:
c001c5be:	c7 05 40 11 03 c0 cb b6 01 c0 	mov    DWORD PTR ds:0xc0031140,0xc001b6cb
c001c5c8:	c7 05 44 11 03 c0 6a b2 01 c0 	mov    DWORD PTR ds:0xc0031144,0xc001b26a
c001c5d2:	c7 05 48 11 03 c0 d4 b3 01 c0 	mov    DWORD PTR ds:0xc0031148,0xc001b3d4
c001c5dc:	c7 05 4c 11 03 c0 01 b6 01 c0 	mov    DWORD PTR ds:0xc003114c,0xc001b601
c001c5e6:	c7 05 50 11 03 c0 6c b3 01 c0 	mov    DWORD PTR ds:0xc0031150,0xc001b36c
c001c5f0:	c7 05 54 11 03 c0 a1 b2 01 c0 	mov    DWORD PTR ds:0xc0031154,0xc001b2a1
c001c5fa:	c7 05 58 11 03 c0 82 b2 01 c0 	mov    DWORD PTR ds:0xc0031158,0xc001b282
c001c604:	c7 05 5c 11 03 c0 73 b4 01 c0 	mov    DWORD PTR ds:0xc003115c,0xc001b473
c001c60e:	c7 05 64 11 03 c0 fb bb 01 c0 	mov    DWORD PTR ds:0xc0031164,0xc001bbfb
c001c618:	c7 05 60 11 03 c0 a9 c3 01 c0 	mov    DWORD PTR ds:0xc0031160,0xc001c3a9
c001c622:	c7 05 68 11 03 c0 83 bc 01 c0 	mov    DWORD PTR ds:0xc0031168,0xc001bc83
c001c62c:	c7 05 6c 11 03 c0 ea b8 01 c0 	mov    DWORD PTR ds:0xc003116c,0xc001b8ea
c001c636:	c7 05 70 11 03 c0 06 b7 01 c0 	mov    DWORD PTR ds:0xc0031170,0xc001b706
c001c640:	c7 05 74 11 03 c0 0b b7 01 c0 	mov    DWORD PTR ds:0xc0031174,0xc001b70b
c001c64a:	c7 05 78 11 03 c0 5e bd 01 c0 	mov    DWORD PTR ds:0xc0031178,0xc001bd5e
c001c654:	c7 05 7c 11 03 c0 f8 bc 01 c0 	mov    DWORD PTR ds:0xc003117c,0xc001bcf8
c001c65e:	c7 05 80 11 03 c0 d2 b9 01 c0 	mov    DWORD PTR ds:0xc0031180,0xc001b9d2
c001c668:	c7 05 84 11 03 c0 3b ba 01 c0 	mov    DWORD PTR ds:0xc0031184,0xc001ba3b
c001c672:	c7 05 88 11 03 c0 b8 ba 01 c0 	mov    DWORD PTR ds:0xc0031188,0xc001bab8
c001c67c:	c7 05 8c 11 03 c0 10 b7 01 c0 	mov    DWORD PTR ds:0xc003118c,0xc001b710
c001c686:	c7 05 90 11 03 c0 ce bd 01 c0 	mov    DWORD PTR ds:0xc0031190,0xc001bdce
c001c690:	c7 05 94 11 03 c0 e8 bd 01 c0 	mov    DWORD PTR ds:0xc0031194,0xc001bde8
c001c69a:	c7 05 98 11 03 c0 e8 bd 01 c0 	mov    DWORD PTR ds:0xc0031198,0xc001bde8
c001c6a4:	c7 05 9c 11 03 c0 29 be 01 c0 	mov    DWORD PTR ds:0xc003119c,0xc001be29
c001c6ae:	c7 05 a0 11 03 c0 8d be 01 c0 	mov    DWORD PTR ds:0xc00311a0,0xc001be8d
c001c6b8:	c7 05 a4 11 03 c0 bc b8 01 c0 	mov    DWORD PTR ds:0xc00311a4,0xc001b8bc
c001c6c2:	c7 05 a8 11 03 c0 f1 be 01 c0 	mov    DWORD PTR ds:0xc00311a8,0xc001bef1
c001c6cc:	c7 05 ac 11 03 c0 79 b8 01 c0 	mov    DWORD PTR ds:0xc00311ac,0xc001b879
c001c6d6:	c7 05 b0 11 03 c0 3d bf 01 c0 	mov    DWORD PTR ds:0xc00311b0,0xc001bf3d
c001c6e0:	c7 05 b4 11 03 c0 78 b9 01 c0 	mov    DWORD PTR ds:0xc00311b4,0xc001b978
c001c6ea:	c7 05 b8 11 03 c0 c0 bf 01 c0 	mov    DWORD PTR ds:0xc00311b8,0xc001bfc0
c001c6f4:	c7 05 bc 11 03 c0 3b bb 01 c0 	mov    DWORD PTR ds:0xc00311bc,0xc001bb3b
c001c6fe:	c7 05 c0 11 03 c0 e7 bf 01 c0 	mov    DWORD PTR ds:0xc00311c0,0xc001bfe7
c001c708:	c7 05 c4 11 03 c0 3f c0 01 c0 	mov    DWORD PTR ds:0xc00311c4,0xc001c03f
c001c712:	c7 05 c8 11 03 c0 77 c1 01 c0 	mov    DWORD PTR ds:0xc00311c8,0xc001c177
c001c71c:	c7 05 cc 11 03 c0 1a b7 01 c0 	mov    DWORD PTR ds:0xc00311cc,0xc001b71a
c001c726:	c7 05 d0 11 03 c0 84 b7 01 c0 	mov    DWORD PTR ds:0xc00311d0,0xc001b784
c001c730:	c7 05 d4 11 03 c0 ca b7 01 c0 	mov    DWORD PTR ds:0xc00311d4,0xc001b7ca
c001c73a:	c7 05 d8 11 03 c0 96 c2 01 c0 	mov    DWORD PTR ds:0xc00311d8,0xc001c296
c001c744:	c7 05 dc 11 03 c0 03 be 01 c0 	mov    DWORD PTR ds:0xc00311dc,0xc001be03
c001c74e:	c7 05 e0 11 03 c0 1b b8 01 c0 	mov    DWORD PTR ds:0xc00311e0,0xc001b81b
c001c758:	c7 05 e4 11 03 c0 08 c3 01 c0 	mov    DWORD PTR ds:0xc00311e4,0xc001c308
c001c762:	c7 05 e8 11 03 c0 4d c3 01 c0 	mov    DWORD PTR ds:0xc00311e8,0xc001c34d
c001c76c:	c7 05 ec 11 03 c0 c4 b2 01 c0 	mov    DWORD PTR ds:0xc00311ec,0xc001b2c4
c001c776:	c7 05 f0 11 03 c0 8f b4 01 c0 	mov    DWORD PTR ds:0xc00311f0,0xc001b48f
c001c780:	c7 05 f4 11 03 c0 b7 b5 01 c0 	mov    DWORD PTR ds:0xc00311f4,0xc001b5b7
c001c78a:	c7 05 f8 11 03 c0 34 b2 01 c0 	mov    DWORD PTR ds:0xc00311f8,0xc001b234
c001c794:	c7 05 fc 11 03 c0 69 b6 01 c0 	mov    DWORD PTR ds:0xc00311fc,0xc001b669
c001c79e:	c7 05 00 12 03 c0 ad b2 01 c0 	mov    DWORD PTR ds:0xc0031200,0xc001b2ad
c001c7a8:	c3                   	ret    

c001c7a9 <Sys::systemCall(regs*, void*)>:
c001c7a9:	53                   	push   ebx
c001c7aa:	83 ec 08             	sub    esp,0x8
c001c7ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c7b1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c7b4:	83 f8 7f             	cmp    eax,0x7f
c001c7b7:	77 16                	ja     c001c7cf <Sys::systemCall(regs*, void*)+0x26>
c001c7b9:	8b 14 85 40 11 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffceec0]
c001c7c0:	85 d2                	test   edx,edx
c001c7c2:	74 0b                	je     c001c7cf <Sys::systemCall(regs*, void*)+0x26>
c001c7c4:	83 ec 0c             	sub    esp,0xc
c001c7c7:	53                   	push   ebx
c001c7c8:	ff d2                	call   edx
c001c7ca:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c7cd:	eb 0d                	jmp    c001c7dc <Sys::systemCall(regs*, void*)+0x33>
c001c7cf:	52                   	push   edx
c001c7d0:	52                   	push   edx
c001c7d1:	50                   	push   eax
c001c7d2:	68 e5 c0 02 c0       	push   0xc002c0e5
c001c7d7:	e8 58 67 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001c7dc:	83 c4 10             	add    esp,0x10
c001c7df:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c7e4:	31 d2                	xor    edx,edx
c001c7e6:	83 c4 08             	add    esp,0x8
c001c7e9:	5b                   	pop    ebx
c001c7ea:	c3                   	ret    

c001c7eb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c7eb:	55                   	push   ebp
c001c7ec:	57                   	push   edi
c001c7ed:	56                   	push   esi
c001c7ee:	53                   	push   ebx
c001c7ef:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c7f5:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c7fc:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c803:	85 c0                	test   eax,eax
c001c805:	0f 95 c1             	setne  cl
c001c808:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c810:	0f 94 c2             	sete   dl
c001c813:	84 d1                	test   cl,dl
c001c815:	74 23                	je     c001c83a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c817:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c81d:	74 1b                	je     c001c83a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c81f:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c825:	89 da                	mov    edx,ebx
c001c827:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c82d:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c833:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c83a:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001c841:	05 ff 0f 00 00       	add    eax,0xfff
c001c846:	83 ec 0c             	sub    esp,0xc
c001c849:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c84d:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001c853:	c1 e8 0c             	shr    eax,0xc
c001c856:	89 ef                	mov    edi,ebp
c001c858:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c85c:	c1 ef 0c             	shr    edi,0xc
c001c85f:	6a 01                	push   0x1
c001c861:	e8 25 53 ff ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c001c866:	89 c6                	mov    esi,eax
c001c868:	58                   	pop    eax
c001c869:	5a                   	pop    edx
c001c86a:	57                   	push   edi
c001c86b:	68 6b c1 02 c0       	push   0xc002c16b
c001c870:	e8 bf 66 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001c875:	59                   	pop    ecx
c001c876:	58                   	pop    eax
c001c877:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c87b:	68 7d c1 02 c0       	push   0xc002c17d
c001c880:	e8 af 66 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001c885:	83 c4 10             	add    esp,0x10
c001c888:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001c88e:	0f 86 24 01 00 00    	jbe    c001c9b8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001c894:	c1 e7 0c             	shl    edi,0xc
c001c897:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001c89a:	89 df                	mov    edi,ebx
c001c89c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8a0:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001c8a7:	01 dd                	add    ebp,ebx
c001c8a9:	29 fd                	sub    ebp,edi
c001c8ab:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001c8af:	0f 84 01 01 00 00    	je     c001c9b6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c8b5:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001c8bb:	76 05                	jbe    c001c8c2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001c8bd:	bd 00 10 00 00       	mov    ebp,0x1000
c001c8c2:	83 ec 0c             	sub    esp,0xc
c001c8c5:	31 d2                	xor    edx,edx
c001c8c7:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c8ce:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c8d0:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c8d4:	50                   	push   eax
c001c8d5:	8d 44 24 30          	lea    eax,[esp+0x30]
c001c8d9:	50                   	push   eax
c001c8da:	52                   	push   edx
c001c8db:	55                   	push   ebp
c001c8dc:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c8e3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c8e6:	83 c4 20             	add    esp,0x20
c001c8e9:	85 c0                	test   eax,eax
c001c8eb:	74 0a                	je     c001c8f7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001c8ed:	53                   	push   ebx
c001c8ee:	53                   	push   ebx
c001c8ef:	50                   	push   eax
c001c8f0:	68 8f c1 02 c0       	push   0xc002c18f
c001c8f5:	eb 0f                	jmp    c001c906 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001c8f7:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001c8fb:	74 20                	je     c001c91d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001c8fd:	51                   	push   ecx
c001c8fe:	51                   	push   ecx
c001c8ff:	6a 00                	push   0x0
c001c901:	68 ba c1 02 c0       	push   0xc002c1ba
c001c906:	e8 29 66 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001c90b:	89 34 24             	mov    DWORD PTR [esp],esi
c001c90e:	e8 e8 56 ff ff       	call   c0011ffb <Virt::freeKernelVirtualPages(unsigned long)>
c001c913:	83 c4 10             	add    esp,0x10
c001c916:	31 c0                	xor    eax,eax
c001c918:	e9 55 01 00 00       	jmp    c001ca72 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001c91d:	e8 d8 14 00 00       	call   c001ddfa <lockScheduler()>
c001c922:	e8 bb 35 ff ff       	call   c000fee2 <Phys::allocatePage()>
c001c927:	6a 07                	push   0x7
c001c929:	89 c5                	mov    ebp,eax
c001c92b:	56                   	push   esi
c001c92c:	50                   	push   eax
c001c92d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c932:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c935:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c93b:	e8 22 5a ff ff       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c940:	83 c4 0c             	add    esp,0xc
c001c943:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c94a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c950:	6a 00                	push   0x0
c001c952:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c957:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c95a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c960:	e8 67 58 ff ff       	call   c00121cc <VAS::mapOtherVASIn(bool, VAS*)>
c001c965:	58                   	pop    eax
c001c966:	5a                   	pop    edx
c001c967:	68 07 0c 00 00       	push   0xc07
c001c96c:	57                   	push   edi
c001c96d:	81 c7 00 10 00 00    	add    edi,0x1000
c001c973:	55                   	push   ebp
c001c974:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c97b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c981:	6a 00                	push   0x0
c001c983:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c988:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c98b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c991:	e8 86 5d ff ff       	call   c001271c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c996:	83 c4 1c             	add    esp,0x1c
c001c999:	68 00 10 00 00       	push   0x1000
c001c99e:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c9a2:	50                   	push   eax
c001c9a3:	56                   	push   esi
c001c9a4:	e8 9b 3d fe ff       	call   c0000744 <memcpy>
c001c9a9:	e8 4e 14 00 00       	call   c001ddfc <unlockScheduler()>
c001c9ae:	83 c4 10             	add    esp,0x10
c001c9b1:	e9 ea fe ff ff       	jmp    c001c8a0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001c9b6:	89 fb                	mov    ebx,edi
c001c9b8:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c9c0:	0f 86 9e 00 00 00    	jbe    c001ca64 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001c9c6:	e8 2f 14 00 00       	call   c001ddfa <lockScheduler()>
c001c9cb:	51                   	push   ecx
c001c9cc:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c9d3:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9d9:	6a 00                	push   0x0
c001c9db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9e0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9e3:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9e9:	e8 de 57 ff ff       	call   c00121cc <VAS::mapOtherVASIn(bool, VAS*)>
c001c9ee:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c9f2:	c1 e7 0c             	shl    edi,0xc
c001c9f5:	01 df                	add    edi,ebx
c001c9f7:	83 c4 10             	add    esp,0x10
c001c9fa:	39 fb                	cmp    ebx,edi
c001c9fc:	74 61                	je     c001ca5f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x274>
c001c9fe:	e8 df 34 ff ff       	call   c000fee2 <Phys::allocatePage()>
c001ca03:	6a 07                	push   0x7
c001ca05:	89 c5                	mov    ebp,eax
c001ca07:	56                   	push   esi
c001ca08:	50                   	push   eax
c001ca09:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca0e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca11:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca17:	e8 46 59 ff ff       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ca1c:	58                   	pop    eax
c001ca1d:	5a                   	pop    edx
c001ca1e:	68 07 0c 00 00       	push   0xc07
c001ca23:	53                   	push   ebx
c001ca24:	81 c3 00 10 00 00    	add    ebx,0x1000
c001ca2a:	55                   	push   ebp
c001ca2b:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001ca32:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca38:	6a 00                	push   0x0
c001ca3a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca3f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca42:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca48:	e8 cf 5c ff ff       	call   c001271c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ca4d:	83 c4 1c             	add    esp,0x1c
c001ca50:	68 00 10 00 00       	push   0x1000
c001ca55:	6a 00                	push   0x0
c001ca57:	56                   	push   esi
c001ca58:	e8 1b 3d fe ff       	call   c0000778 <memset>
c001ca5d:	eb 98                	jmp    c001c9f7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x20c>
c001ca5f:	e8 98 13 00 00       	call   c001ddfc <unlockScheduler()>
c001ca64:	83 ec 0c             	sub    esp,0xc
c001ca67:	56                   	push   esi
c001ca68:	e8 8e 55 ff ff       	call   c0011ffb <Virt::freeKernelVirtualPages(unsigned long)>
c001ca6d:	83 c4 10             	add    esp,0x10
c001ca70:	b0 01                	mov    al,0x1
c001ca72:	81 c4 2c 10 00 00    	add    esp,0x102c
c001ca78:	5b                   	pop    ebx
c001ca79:	5e                   	pop    esi
c001ca7a:	5f                   	pop    edi
c001ca7b:	5d                   	pop    ebp
c001ca7c:	c3                   	ret    

c001ca7d <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001ca7d:	55                   	push   ebp
c001ca7e:	57                   	push   edi
c001ca7f:	56                   	push   esi
c001ca80:	53                   	push   ebx
c001ca81:	83 ec 48             	sub    esp,0x48
c001ca84:	68 14 01 00 00       	push   0x114
c001ca89:	e8 b2 2d ff ff       	call   c000f840 <malloc>
c001ca8e:	83 c4 0c             	add    esp,0xc
c001ca91:	89 c6                	mov    esi,eax
c001ca93:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001ca97:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001ca9b:	50                   	push   eax
c001ca9c:	e8 eb 69 ff ff       	call   c001348c <File::File(char const*, Process*)>
c001caa1:	58                   	pop    eax
c001caa2:	5a                   	pop    edx
c001caa3:	6a 01                	push   0x1
c001caa5:	56                   	push   esi
c001caa6:	e8 45 6a ff ff       	call   c00134f0 <File::open(FileOpenMode)>
c001caab:	83 c4 10             	add    esp,0x10
c001caae:	85 c0                	test   eax,eax
c001cab0:	0f 85 47 01 00 00    	jne    c001cbfd <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cab6:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001cabe:	83 ec 0c             	sub    esp,0xc
c001cac1:	6a 34                	push   0x34
c001cac3:	e8 78 2d ff ff       	call   c000f840 <malloc>
c001cac8:	89 c3                	mov    ebx,eax
c001caca:	58                   	pop    eax
c001cacb:	8b 06                	mov    eax,DWORD PTR [esi]
c001cacd:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001cad1:	57                   	push   edi
c001cad2:	53                   	push   ebx
c001cad3:	6a 00                	push   0x0
c001cad5:	6a 34                	push   0x34
c001cad7:	56                   	push   esi
c001cad8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cadb:	83 c4 20             	add    esp,0x20
c001cade:	85 c0                	test   eax,eax
c001cae0:	0f 85 17 01 00 00    	jne    c001cbfd <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cae6:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001caec:	0f 85 0b 01 00 00    	jne    c001cbfd <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001caf2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001caf5:	85 c0                	test   eax,eax
c001caf7:	0f 84 00 01 00 00    	je     c001cbfd <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cafd:	31 d2                	xor    edx,edx
c001caff:	55                   	push   ebp
c001cb00:	52                   	push   edx
c001cb01:	50                   	push   eax
c001cb02:	56                   	push   esi
c001cb03:	e8 a6 6a ff ff       	call   c00135ae <File::seek(unsigned long long)>
c001cb08:	83 c4 10             	add    esp,0x10
c001cb0b:	85 c0                	test   eax,eax
c001cb0d:	0f 85 ea 00 00 00    	jne    c001cbfd <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb13:	83 ec 0c             	sub    esp,0xc
c001cb16:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001cb19:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cb1d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cb21:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cb25:	0f af c2             	imul   eax,edx
c001cb28:	50                   	push   eax
c001cb29:	e8 12 2d ff ff       	call   c000f840 <malloc>
c001cb2e:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cb30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cb34:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cb37:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cb3b:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cb3f:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cb43:	0f af c2             	imul   eax,edx
c001cb46:	99                   	cdq    
c001cb47:	52                   	push   edx
c001cb48:	50                   	push   eax
c001cb49:	56                   	push   esi
c001cb4a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb4d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001cb50:	83 c4 20             	add    esp,0x20
c001cb53:	85 c0                	test   eax,eax
c001cb55:	0f 84 a2 00 00 00    	je     c001cbfd <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb5b:	31 d2                	xor    edx,edx
c001cb5d:	51                   	push   ecx
c001cb5e:	52                   	push   edx
c001cb5f:	50                   	push   eax
c001cb60:	56                   	push   esi
c001cb61:	e8 48 6a ff ff       	call   c00135ae <File::seek(unsigned long long)>
c001cb66:	83 c4 10             	add    esp,0x10
c001cb69:	85 c0                	test   eax,eax
c001cb6b:	0f 85 8c 00 00 00    	jne    c001cbfd <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb71:	83 ec 0c             	sub    esp,0xc
c001cb74:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cb78:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cb7c:	31 ed                	xor    ebp,ebp
c001cb7e:	0f af c2             	imul   eax,edx
c001cb81:	50                   	push   eax
c001cb82:	e8 b9 2c ff ff       	call   c000f840 <malloc>
c001cb87:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cb89:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cb8d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cb90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb94:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cb98:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cb9c:	0f af c2             	imul   eax,edx
c001cb9f:	99                   	cdq    
c001cba0:	52                   	push   edx
c001cba1:	50                   	push   eax
c001cba2:	56                   	push   esi
c001cba3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cba6:	83 c4 20             	add    esp,0x20
c001cba9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cbb1:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cbb5:	0f 86 80 00 00 00    	jbe    c001cc3b <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cbbb:	0f b7 fd             	movzx  edi,bp
c001cbbe:	c1 e7 05             	shl    edi,0x5
c001cbc1:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cbc5:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cbc8:	75 6b                	jne    c001cc35 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cbca:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cbcd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cbd1:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cbd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cbd8:	52                   	push   edx
c001cbd9:	31 d2                	xor    edx,edx
c001cbdb:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cbde:	52                   	push   edx
c001cbdf:	50                   	push   eax
c001cbe0:	56                   	push   esi
c001cbe1:	e8 c8 69 ff ff       	call   c00135ae <File::seek(unsigned long long)>
c001cbe6:	83 c4 10             	add    esp,0x10
c001cbe9:	85 c0                	test   eax,eax
c001cbeb:	74 17                	je     c001cc04 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001cbed:	83 ec 0c             	sub    esp,0xc
c001cbf0:	68 e6 c1 02 c0       	push   0xc002c1e6
c001cbf5:	e8 3a 63 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001cbfa:	83 c4 10             	add    esp,0x10
c001cbfd:	31 c0                	xor    eax,eax
c001cbff:	e9 87 00 00 00       	jmp    c001cc8b <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cc04:	83 ec 0c             	sub    esp,0xc
c001cc07:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cc0a:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cc0d:	50                   	push   eax
c001cc0e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cc12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cc16:	56                   	push   esi
c001cc17:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cc1b:	e8 cb fb ff ff       	call   c001c7eb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cc20:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cc24:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cc28:	83 c4 20             	add    esp,0x20
c001cc2b:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cc2f:	73 04                	jae    c001cc35 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cc31:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cc35:	45                   	inc    ebp
c001cc36:	e9 76 ff ff ff       	jmp    c001cbb1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cc3b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cc3f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cc43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cc47:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001cc4d:	83 ec 0c             	sub    esp,0xc
c001cc50:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001cc56:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cc5b:	05 00 10 00 00       	add    eax,0x1000
c001cc60:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cc63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc67:	e8 e4 2b ff ff       	call   c000f850 <free>
c001cc6c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cc6f:	e8 dc 2b ff ff       	call   c000f850 <free>
c001cc74:	58                   	pop    eax
c001cc75:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc79:	e8 d2 2b ff ff       	call   c000f850 <free>
c001cc7e:	89 34 24             	mov    DWORD PTR [esp],esi
c001cc81:	e8 c8 68 ff ff       	call   c001354e <File::close()>
c001cc86:	83 c4 10             	add    esp,0x10
c001cc89:	b0 01                	mov    al,0x1
c001cc8b:	83 c4 3c             	add    esp,0x3c
c001cc8e:	5b                   	pop    ebx
c001cc8f:	5e                   	pop    esi
c001cc90:	5f                   	pop    edi
c001cc91:	5d                   	pop    ebp
c001cc92:	c3                   	ret    

c001cc93 <Thr::runtimeReferenceHelper()>:
c001cc93:	83 ec 18             	sub    esp,0x18
c001cc96:	68 ee c1 02 c0       	push   0xc002c1ee
c001cc9b:	e8 94 62 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001cca0:	fa                   	cli    
c001cca1:	83 c4 10             	add    esp,0x10
c001cca4:	eb fe                	jmp    c001cca4 <Thr::runtimeReferenceHelper()+0x11>

c001cca6 <Thr::getAddressOfKernelSymbol(char const*)>:
c001cca6:	57                   	push   edi
c001cca7:	56                   	push   esi
c001cca8:	53                   	push   ebx
c001cca9:	31 db                	xor    ebx,ebx
c001ccab:	39 1d e0 1a 03 c0    	cmp    DWORD PTR ds:0xc0031ae0,ebx
c001ccb1:	7e 3c                	jle    c001ccef <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001ccb3:	8b 34 9d 60 1a 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffce5a0]
c001ccba:	31 ff                	xor    edi,edi
c001ccbc:	39 3c 9d 60 19 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffce6a0],edi
c001ccc3:	7e 27                	jle    c001ccec <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001ccc5:	50                   	push   eax
c001ccc6:	50                   	push   eax
c001ccc7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cccb:	8b 06                	mov    eax,DWORD PTR [esi]
c001cccd:	03 04 9d e0 19 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffce620]
c001ccd4:	50                   	push   eax
c001ccd5:	e8 e6 3b fe ff       	call   c00008c0 <strcmp>
c001ccda:	83 c4 10             	add    esp,0x10
c001ccdd:	85 c0                	test   eax,eax
c001ccdf:	75 05                	jne    c001cce6 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001cce1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cce4:	eb 0b                	jmp    c001ccf1 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001cce6:	83 c6 10             	add    esi,0x10
c001cce9:	47                   	inc    edi
c001ccea:	eb d0                	jmp    c001ccbc <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001ccec:	43                   	inc    ebx
c001cced:	eb bc                	jmp    c001ccab <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001ccef:	31 c0                	xor    eax,eax
c001ccf1:	5b                   	pop    ebx
c001ccf2:	5e                   	pop    esi
c001ccf3:	5f                   	pop    edi
c001ccf4:	c3                   	ret    

c001ccf5 <Thr::loadKernelSymbolTable(char const*)>:
c001ccf5:	55                   	push   ebp
c001ccf6:	57                   	push   edi
c001ccf7:	56                   	push   esi
c001ccf8:	53                   	push   ebx
c001ccf9:	83 ec 68             	sub    esp,0x68
c001ccfc:	8b 35 34 1b 03 c0    	mov    esi,DWORD PTR ds:0xc0031b34
c001cd02:	68 14 01 00 00       	push   0x114
c001cd07:	e8 34 2b ff ff       	call   c000f840 <malloc>
c001cd0c:	83 c4 0c             	add    esp,0xc
c001cd0f:	89 c3                	mov    ebx,eax
c001cd11:	56                   	push   esi
c001cd12:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cd16:	50                   	push   eax
c001cd17:	e8 70 67 ff ff       	call   c001348c <File::File(char const*, Process*)>
c001cd1c:	5e                   	pop    esi
c001cd1d:	5f                   	pop    edi
c001cd1e:	6a 01                	push   0x1
c001cd20:	53                   	push   ebx
c001cd21:	e8 ca 67 ff ff       	call   c00134f0 <File::open(FileOpenMode)>
c001cd26:	83 c4 10             	add    esp,0x10
c001cd29:	85 c0                	test   eax,eax
c001cd2b:	74 0a                	je     c001cd37 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cd2d:	83 ec 0c             	sub    esp,0xc
c001cd30:	68 10 c2 02 c0       	push   0xc002c210
c001cd35:	eb 34                	jmp    c001cd6b <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cd37:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001cd3f:	83 ec 0c             	sub    esp,0xc
c001cd42:	6a 34                	push   0x34
c001cd44:	e8 f7 2a ff ff       	call   c000f840 <malloc>
c001cd49:	59                   	pop    ecx
c001cd4a:	89 c7                	mov    edi,eax
c001cd4c:	8d 74 24 34          	lea    esi,[esp+0x34]
c001cd50:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd52:	56                   	push   esi
c001cd53:	57                   	push   edi
c001cd54:	6a 00                	push   0x0
c001cd56:	6a 34                	push   0x34
c001cd58:	53                   	push   ebx
c001cd59:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cd5c:	83 c4 20             	add    esp,0x20
c001cd5f:	85 c0                	test   eax,eax
c001cd61:	74 17                	je     c001cd7a <Thr::loadKernelSymbolTable(char const*)+0x85>
c001cd63:	83 ec 0c             	sub    esp,0xc
c001cd66:	68 27 c2 02 c0       	push   0xc002c227
c001cd6b:	e8 65 d8 ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c001cd70:	83 c4 10             	add    esp,0x10
c001cd73:	31 c0                	xor    eax,eax
c001cd75:	e9 31 02 00 00       	jmp    c001cfab <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001cd7a:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cd80:	75 e1                	jne    c001cd63 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd82:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cd85:	85 c0                	test   eax,eax
c001cd87:	74 da                	je     c001cd63 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd89:	52                   	push   edx
c001cd8a:	31 d2                	xor    edx,edx
c001cd8c:	52                   	push   edx
c001cd8d:	50                   	push   eax
c001cd8e:	53                   	push   ebx
c001cd8f:	e8 1a 68 ff ff       	call   c00135ae <File::seek(unsigned long long)>
c001cd94:	83 c4 10             	add    esp,0x10
c001cd97:	85 c0                	test   eax,eax
c001cd99:	75 c8                	jne    c001cd63 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd9b:	83 ec 0c             	sub    esp,0xc
c001cd9e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cda2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cda6:	31 ed                	xor    ebp,ebp
c001cda8:	0f af c2             	imul   eax,edx
c001cdab:	50                   	push   eax
c001cdac:	e8 8f 2a ff ff       	call   c000f840 <malloc>
c001cdb1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cdb3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cdb7:	89 34 24             	mov    DWORD PTR [esp],esi
c001cdba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cdbe:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cdc2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cdc6:	0f af c2             	imul   eax,edx
c001cdc9:	99                   	cdq    
c001cdca:	52                   	push   edx
c001cdcb:	50                   	push   eax
c001cdcc:	53                   	push   ebx
c001cdcd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cdd0:	83 c4 20             	add    esp,0x20
c001cdd3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cddb:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cde3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cdeb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cdf3:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001cdf7:	0f 86 aa 00 00 00    	jbe    c001cea7 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001cdfd:	0f b7 f5             	movzx  esi,bp
c001ce00:	6b f6 28             	imul   esi,esi,0x28
c001ce03:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ce07:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ce0a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ce0e:	50                   	push   eax
c001ce0f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ce13:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001ce17:	8b 16                	mov    edx,DWORD PTR [esi]
c001ce19:	6b c0 28             	imul   eax,eax,0x28
c001ce1c:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001ce20:	89 d0                	mov    eax,edx
c001ce22:	31 d2                	xor    edx,edx
c001ce24:	52                   	push   edx
c001ce25:	50                   	push   eax
c001ce26:	53                   	push   ebx
c001ce27:	e8 82 67 ff ff       	call   c00135ae <File::seek(unsigned long long)>
c001ce2c:	83 c4 0c             	add    esp,0xc
c001ce2f:	6a 20                	push   0x20
c001ce31:	6a 00                	push   0x0
c001ce33:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ce37:	52                   	push   edx
c001ce38:	e8 3b 39 fe ff       	call   c0000778 <memset>
c001ce3d:	58                   	pop    eax
c001ce3e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce40:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001ce44:	51                   	push   ecx
c001ce45:	8d 54 24 40          	lea    edx,[esp+0x40]
c001ce49:	52                   	push   edx
c001ce4a:	6a 00                	push   0x0
c001ce4c:	6a 1f                	push   0x1f
c001ce4e:	53                   	push   ebx
c001ce4f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce52:	83 c4 18             	add    esp,0x18
c001ce55:	68 3e c2 02 c0       	push   0xc002c23e
c001ce5a:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ce5e:	52                   	push   edx
c001ce5f:	e8 5c 3a fe ff       	call   c00008c0 <strcmp>
c001ce64:	83 c4 10             	add    esp,0x10
c001ce67:	85 c0                	test   eax,eax
c001ce69:	75 0f                	jne    c001ce7a <Thr::loadKernelSymbolTable(char const*)+0x185>
c001ce6b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ce6e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ce72:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce76:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ce7a:	50                   	push   eax
c001ce7b:	50                   	push   eax
c001ce7c:	68 46 c2 02 c0       	push   0xc002c246
c001ce81:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001ce85:	50                   	push   eax
c001ce86:	e8 35 3a fe ff       	call   c00008c0 <strcmp>
c001ce8b:	83 c4 10             	add    esp,0x10
c001ce8e:	85 c0                	test   eax,eax
c001ce90:	75 0f                	jne    c001cea1 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001ce92:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ce95:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ce99:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce9d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cea1:	45                   	inc    ebp
c001cea2:	e9 4c ff ff ff       	jmp    c001cdf3 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001cea7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ceac:	75 10                	jne    c001cebe <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001ceae:	83 ec 0c             	sub    esp,0xc
c001ceb1:	68 4e c2 02 c0       	push   0xc002c24e
c001ceb6:	e8 1a d7 ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c001cebb:	83 c4 10             	add    esp,0x10
c001cebe:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001cec3:	75 10                	jne    c001ced5 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001cec5:	83 ec 0c             	sub    esp,0xc
c001cec8:	68 4e c2 02 c0       	push   0xc002c24e
c001cecd:	e8 03 d7 ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c001ced2:	83 c4 10             	add    esp,0x10
c001ced5:	31 d2                	xor    edx,edx
c001ced7:	50                   	push   eax
c001ced8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cedc:	52                   	push   edx
c001cedd:	50                   	push   eax
c001cede:	53                   	push   ebx
c001cedf:	e8 ca 66 ff ff       	call   c00135ae <File::seek(unsigned long long)>
c001cee4:	5a                   	pop    edx
c001cee5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cee9:	e8 52 29 ff ff       	call   c000f840 <malloc>
c001ceee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cef2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cef6:	31 c9                	xor    ecx,ecx
c001cef8:	5e                   	pop    esi
c001cef9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cefb:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001ceff:	55                   	push   ebp
c001cf00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf04:	51                   	push   ecx
c001cf05:	52                   	push   edx
c001cf06:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cf0a:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001cf0e:	53                   	push   ebx
c001cf0f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf12:	83 c4 14             	add    esp,0x14
c001cf15:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cf19:	e8 22 29 ff ff       	call   c000f840 <malloc>
c001cf1e:	89 c6                	mov    esi,eax
c001cf20:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf22:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf25:	56                   	push   esi
c001cf26:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cf2a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cf2e:	51                   	push   ecx
c001cf2f:	52                   	push   edx
c001cf30:	53                   	push   ebx
c001cf31:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf34:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf38:	8b 15 e0 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031ae0
c001cf3e:	83 c4 1c             	add    esp,0x1c
c001cf41:	c1 e8 04             	shr    eax,0x4
c001cf44:	89 04 95 60 19 03 c0 	mov    DWORD PTR [edx*4-0x3ffce6a0],eax
c001cf4b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cf4f:	31 d2                	xor    edx,edx
c001cf51:	52                   	push   edx
c001cf52:	50                   	push   eax
c001cf53:	53                   	push   ebx
c001cf54:	e8 55 66 ff ff       	call   c00135ae <File::seek(unsigned long long)>
c001cf59:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cf5b:	31 d2                	xor    edx,edx
c001cf5d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf60:	56                   	push   esi
c001cf61:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cf65:	52                   	push   edx
c001cf66:	50                   	push   eax
c001cf67:	53                   	push   ebx
c001cf68:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cf6b:	83 c4 14             	add    esp,0x14
c001cf6e:	53                   	push   ebx
c001cf6f:	e8 da 65 ff ff       	call   c001354e <File::close()>
c001cf74:	5d                   	pop    ebp
c001cf75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf79:	e8 d2 28 ff ff       	call   c000f850 <free>
c001cf7e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cf81:	e8 ca 28 ff ff       	call   c000f850 <free>
c001cf86:	a1 e0 1a 03 c0       	mov    eax,ds:0xc0031ae0
c001cf8b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cf8f:	8d 50 01             	lea    edx,[eax+0x1]
c001cf92:	89 0c 85 60 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5a0],ecx
c001cf99:	89 34 85 e0 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce620],esi
c001cfa0:	89 15 e0 1a 03 c0    	mov    DWORD PTR ds:0xc0031ae0,edx
c001cfa6:	83 c4 10             	add    esp,0x10
c001cfa9:	b0 01                	mov    al,0x1
c001cfab:	83 c4 5c             	add    esp,0x5c
c001cfae:	5b                   	pop    ebx
c001cfaf:	5e                   	pop    esi
c001cfb0:	5f                   	pop    edi
c001cfb1:	5d                   	pop    ebp
c001cfb2:	c3                   	ret    

c001cfb3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001cfb3:	55                   	push   ebp
c001cfb4:	57                   	push   edi
c001cfb5:	56                   	push   esi
c001cfb6:	53                   	push   ebx
c001cfb7:	81 ec 68 03 00 00    	sub    esp,0x368
c001cfbd:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001cfc4:	8b 1d 34 1b 03 c0    	mov    ebx,DWORD PTR ds:0xc0031b34
c001cfca:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001cfce:	68 14 01 00 00       	push   0x114
c001cfd3:	e8 68 28 ff ff       	call   c000f840 <malloc>
c001cfd8:	83 c4 0c             	add    esp,0xc
c001cfdb:	89 c5                	mov    ebp,eax
c001cfdd:	53                   	push   ebx
c001cfde:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001cfe5:	50                   	push   eax
c001cfe6:	e8 a1 64 ff ff       	call   c001348c <File::File(char const*, Process*)>
c001cfeb:	5e                   	pop    esi
c001cfec:	5f                   	pop    edi
c001cfed:	6a 01                	push   0x1
c001cfef:	55                   	push   ebp
c001cff0:	e8 fb 64 ff ff       	call   c00134f0 <File::open(FileOpenMode)>
c001cff5:	83 c4 10             	add    esp,0x10
c001cff8:	85 c0                	test   eax,eax
c001cffa:	0f 85 8d 06 00 00    	jne    c001d68d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d000:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001d008:	83 ec 0c             	sub    esp,0xc
c001d00b:	6a 34                	push   0x34
c001d00d:	e8 2e 28 ff ff       	call   c000f840 <malloc>
c001d012:	5b                   	pop    ebx
c001d013:	89 c7                	mov    edi,eax
c001d015:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d019:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d01c:	53                   	push   ebx
c001d01d:	57                   	push   edi
c001d01e:	6a 00                	push   0x0
c001d020:	6a 34                	push   0x34
c001d022:	55                   	push   ebp
c001d023:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d026:	83 c4 20             	add    esp,0x20
c001d029:	85 c0                	test   eax,eax
c001d02b:	0f 85 5c 06 00 00    	jne    c001d68d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d031:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d037:	0f 85 50 06 00 00    	jne    c001d68d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d03d:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d040:	85 c0                	test   eax,eax
c001d042:	0f 84 45 06 00 00    	je     c001d68d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d048:	31 d2                	xor    edx,edx
c001d04a:	51                   	push   ecx
c001d04b:	52                   	push   edx
c001d04c:	50                   	push   eax
c001d04d:	55                   	push   ebp
c001d04e:	e8 5b 65 ff ff       	call   c00135ae <File::seek(unsigned long long)>
c001d053:	83 c4 10             	add    esp,0x10
c001d056:	85 c0                	test   eax,eax
c001d058:	0f 85 2f 06 00 00    	jne    c001d68d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d05e:	83 ec 0c             	sub    esp,0xc
c001d061:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d064:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d068:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d06c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d070:	0f af c2             	imul   eax,edx
c001d073:	50                   	push   eax
c001d074:	e8 c7 27 ff ff       	call   c000f840 <malloc>
c001d079:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d07c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d080:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d083:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d087:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d08b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d08f:	0f af c2             	imul   eax,edx
c001d092:	99                   	cdq    
c001d093:	52                   	push   edx
c001d094:	50                   	push   eax
c001d095:	55                   	push   ebp
c001d096:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d099:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d09c:	83 c4 20             	add    esp,0x20
c001d09f:	85 c0                	test   eax,eax
c001d0a1:	0f 84 e6 05 00 00    	je     c001d68d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0a7:	52                   	push   edx
c001d0a8:	31 d2                	xor    edx,edx
c001d0aa:	52                   	push   edx
c001d0ab:	50                   	push   eax
c001d0ac:	55                   	push   ebp
c001d0ad:	e8 fc 64 ff ff       	call   c00135ae <File::seek(unsigned long long)>
c001d0b2:	83 c4 10             	add    esp,0x10
c001d0b5:	85 c0                	test   eax,eax
c001d0b7:	0f 85 d0 05 00 00    	jne    c001d68d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0bd:	83 ec 0c             	sub    esp,0xc
c001d0c0:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d0c4:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d0c8:	31 f6                	xor    esi,esi
c001d0ca:	0f af c2             	imul   eax,edx
c001d0cd:	50                   	push   eax
c001d0ce:	e8 6d 27 ff ff       	call   c000f840 <malloc>
c001d0d3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d0d6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d0da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d0dd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d0e1:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d0e5:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d0e9:	0f af c2             	imul   eax,edx
c001d0ec:	99                   	cdq    
c001d0ed:	52                   	push   edx
c001d0ee:	50                   	push   eax
c001d0ef:	55                   	push   ebp
c001d0f0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d0f3:	83 c4 20             	add    esp,0x20
c001d0f6:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d0fa:	0f 86 8a 00 00 00    	jbe    c001d18a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d100:	0f b7 de             	movzx  ebx,si
c001d103:	c1 e3 05             	shl    ebx,0x5
c001d106:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d10a:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d10d:	75 75                	jne    c001d184 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d10f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d112:	31 d2                	xor    edx,edx
c001d114:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d118:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d11b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d11f:	50                   	push   eax
c001d120:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d123:	52                   	push   edx
c001d124:	50                   	push   eax
c001d125:	55                   	push   ebp
c001d126:	e8 83 64 ff ff       	call   c00135ae <File::seek(unsigned long long)>
c001d12b:	83 c4 10             	add    esp,0x10
c001d12e:	85 c0                	test   eax,eax
c001d130:	0f 85 57 05 00 00    	jne    c001d68d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d136:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d13d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d140:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d144:	31 d2                	xor    edx,edx
c001d146:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d14a:	83 ec 0c             	sub    esp,0xc
c001d14d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d151:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d158:	50                   	push   eax
c001d159:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d15d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d161:	52                   	push   edx
c001d162:	50                   	push   eax
c001d163:	55                   	push   ebp
c001d164:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d167:	83 c4 1c             	add    esp,0x1c
c001d16a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d16d:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d170:	50                   	push   eax
c001d171:	6a 00                	push   0x0
c001d173:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d177:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d17b:	50                   	push   eax
c001d17c:	e8 f7 35 fe ff       	call   c0000778 <memset>
c001d181:	83 c4 10             	add    esp,0x10
c001d184:	46                   	inc    esi
c001d185:	e9 6c ff ff ff       	jmp    c001d0f6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d18a:	53                   	push   ebx
c001d18b:	31 db                	xor    ebx,ebx
c001d18d:	68 00 01 00 00       	push   0x100
c001d192:	6a 00                	push   0x0
c001d194:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d198:	50                   	push   eax
c001d199:	e8 da 35 fe ff       	call   c0000778 <memset>
c001d19e:	83 c4 0c             	add    esp,0xc
c001d1a1:	68 00 01 00 00       	push   0x100
c001d1a6:	6a 00                	push   0x0
c001d1a8:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d1af:	50                   	push   eax
c001d1b0:	e8 c3 35 fe ff       	call   c0000778 <memset>
c001d1b5:	83 c4 10             	add    esp,0x10
c001d1b8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d1c0:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d1c8:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d1d0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d1d8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d1e0:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d1e4:	0f 86 30 01 00 00    	jbe    c001d31a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d1ea:	0f b7 f3             	movzx  esi,bx
c001d1ed:	6b f6 28             	imul   esi,esi,0x28
c001d1f0:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d1f4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d1f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d1fb:	52                   	push   edx
c001d1fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d200:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d204:	8b 06                	mov    eax,DWORD PTR [esi]
c001d206:	6b d2 28             	imul   edx,edx,0x28
c001d209:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d20d:	31 d2                	xor    edx,edx
c001d20f:	52                   	push   edx
c001d210:	50                   	push   eax
c001d211:	55                   	push   ebp
c001d212:	e8 97 63 ff ff       	call   c00135ae <File::seek(unsigned long long)>
c001d217:	83 c4 0c             	add    esp,0xc
c001d21a:	6a 20                	push   0x20
c001d21c:	6a 00                	push   0x0
c001d21e:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d225:	51                   	push   ecx
c001d226:	e8 4d 35 fe ff       	call   c0000778 <memset>
c001d22b:	59                   	pop    ecx
c001d22c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d22f:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d233:	52                   	push   edx
c001d234:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d23b:	51                   	push   ecx
c001d23c:	6a 00                	push   0x0
c001d23e:	6a 1f                	push   0x1f
c001d240:	55                   	push   ebp
c001d241:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d244:	83 c4 1c             	add    esp,0x1c
c001d247:	6a 09                	push   0x9
c001d249:	68 68 c2 02 c0       	push   0xc002c268
c001d24e:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d255:	51                   	push   ecx
c001d256:	e8 e5 33 fe ff       	call   c0000640 <memcmp>
c001d25b:	83 c4 10             	add    esp,0x10
c001d25e:	85 c0                	test   eax,eax
c001d260:	75 21                	jne    c001d283 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d262:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d266:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d26a:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d26e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d272:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d275:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d27c:	89 d0                	mov    eax,edx
c001d27e:	40                   	inc    eax
c001d27f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d283:	50                   	push   eax
c001d284:	6a 09                	push   0x9
c001d286:	68 72 c2 02 c0       	push   0xc002c272
c001d28b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d292:	50                   	push   eax
c001d293:	e8 a8 33 fe ff       	call   c0000640 <memcmp>
c001d298:	83 c4 10             	add    esp,0x10
c001d29b:	85 c0                	test   eax,eax
c001d29d:	75 21                	jne    c001d2c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d29f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d2a3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d2a7:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d2ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d2af:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d2b2:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d2b9:	89 d0                	mov    eax,edx
c001d2bb:	40                   	inc    eax
c001d2bc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d2c0:	50                   	push   eax
c001d2c1:	50                   	push   eax
c001d2c2:	68 3e c2 02 c0       	push   0xc002c23e
c001d2c7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2ce:	50                   	push   eax
c001d2cf:	e8 ec 35 fe ff       	call   c00008c0 <strcmp>
c001d2d4:	83 c4 10             	add    esp,0x10
c001d2d7:	85 c0                	test   eax,eax
c001d2d9:	75 0f                	jne    c001d2ea <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d2db:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d2de:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d2e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d2e6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d2ea:	50                   	push   eax
c001d2eb:	50                   	push   eax
c001d2ec:	68 46 c2 02 c0       	push   0xc002c246
c001d2f1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2f8:	50                   	push   eax
c001d2f9:	e8 c2 35 fe ff       	call   c00008c0 <strcmp>
c001d2fe:	83 c4 10             	add    esp,0x10
c001d301:	85 c0                	test   eax,eax
c001d303:	75 0f                	jne    c001d314 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d305:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d308:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d30c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d310:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d314:	43                   	inc    ebx
c001d315:	e9 c6 fe ff ff       	jmp    c001d1e0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d31a:	31 d2                	xor    edx,edx
c001d31c:	50                   	push   eax
c001d31d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d321:	52                   	push   edx
c001d322:	50                   	push   eax
c001d323:	55                   	push   ebp
c001d324:	e8 85 62 ff ff       	call   c00135ae <File::seek(unsigned long long)>
c001d329:	58                   	pop    eax
c001d32a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d32e:	e8 0d 25 ff ff       	call   c000f840 <malloc>
c001d333:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d336:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d33a:	31 d2                	xor    edx,edx
c001d33c:	58                   	pop    eax
c001d33d:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d341:	53                   	push   ebx
c001d342:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d346:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d34a:	52                   	push   edx
c001d34b:	50                   	push   eax
c001d34c:	55                   	push   ebp
c001d34d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d350:	83 c4 14             	add    esp,0x14
c001d353:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d357:	e8 e4 24 ff ff       	call   c000f840 <malloc>
c001d35c:	31 d2                	xor    edx,edx
c001d35e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d362:	83 c4 0c             	add    esp,0xc
c001d365:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d369:	52                   	push   edx
c001d36a:	50                   	push   eax
c001d36b:	55                   	push   ebp
c001d36c:	e8 3d 62 ff ff       	call   c00135ae <File::seek(unsigned long long)>
c001d371:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d374:	31 d2                	xor    edx,edx
c001d376:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d379:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d37d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d381:	52                   	push   edx
c001d382:	50                   	push   eax
c001d383:	55                   	push   ebp
c001d384:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d387:	83 c4 20             	add    esp,0x20
c001d38a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d392:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d396:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d39a:	0f 84 f1 02 00 00    	je     c001d691 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001d3a0:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d3a7:	31 d2                	xor    edx,edx
c001d3a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d3ad:	c1 e8 03             	shr    eax,0x3
c001d3b0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d3b4:	51                   	push   ecx
c001d3b5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d3b9:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d3bd:	52                   	push   edx
c001d3be:	50                   	push   eax
c001d3bf:	55                   	push   ebp
c001d3c0:	e8 e9 61 ff ff       	call   c00135ae <File::seek(unsigned long long)>
c001d3c5:	5b                   	pop    ebx
c001d3c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3ca:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d3d1:	e8 6a 24 ff ff       	call   c000f840 <malloc>
c001d3d6:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d3d9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d3dd:	31 d2                	xor    edx,edx
c001d3df:	5e                   	pop    esi
c001d3e0:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d3e4:	50                   	push   eax
c001d3e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3e9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d3ed:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d3f4:	52                   	push   edx
c001d3f5:	50                   	push   eax
c001d3f6:	55                   	push   ebp
c001d3f7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d3fa:	83 c4 20             	add    esp,0x20
c001d3fd:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d405:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d409:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d40d:	0f 8d 62 02 00 00    	jge    c001d675 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001d413:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d417:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d41b:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d420:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d423:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d427:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d42b:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d42f:	89 d8                	mov    eax,ebx
c001d431:	c1 e8 08             	shr    eax,0x8
c001d434:	89 c6                	mov    esi,eax
c001d436:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d43a:	c1 e6 04             	shl    esi,0x4
c001d43d:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d441:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d444:	85 d2                	test   edx,edx
c001d446:	0f 85 bf 00 00 00    	jne    c001d50b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d44c:	83 ec 0c             	sub    esp,0xc
c001d44f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d453:	03 06                	add    eax,DWORD PTR [esi]
c001d455:	50                   	push   eax
c001d456:	e8 4b f8 ff ff       	call   c001cca6 <Thr::getAddressOfKernelSymbol(char const*)>
c001d45b:	83 c4 10             	add    esp,0x10
c001d45e:	89 c2                	mov    edx,eax
c001d460:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d465:	85 c0                	test   eax,eax
c001d467:	0f 85 9e 00 00 00    	jne    c001d50b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d46d:	83 ec 0c             	sub    esp,0xc
c001d470:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d474:	03 06                	add    eax,DWORD PTR [esi]
c001d476:	50                   	push   eax
c001d477:	e8 79 10 ff ff       	call   c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>
c001d47c:	83 c4 10             	add    esp,0x10
c001d47f:	89 c2                	mov    edx,eax
c001d481:	85 c0                	test   eax,eax
c001d483:	0f 85 82 00 00 00    	jne    c001d50b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d489:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d48d:	50                   	push   eax
c001d48e:	50                   	push   eax
c001d48f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d493:	03 06                	add    eax,DWORD PTR [esi]
c001d495:	50                   	push   eax
c001d496:	68 7c c2 02 c0       	push   0xc002c27c
c001d49b:	e8 94 5a ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001d4a0:	58                   	pop    eax
c001d4a1:	5a                   	pop    edx
c001d4a2:	68 96 c2 02 c0       	push   0xc002c296
c001d4a7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4ae:	50                   	push   eax
c001d4af:	e8 80 33 fe ff       	call   c0000834 <strcpy>
c001d4b4:	59                   	pop    ecx
c001d4b5:	58                   	pop    eax
c001d4b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4ba:	03 06                	add    eax,DWORD PTR [esi]
c001d4bc:	50                   	push   eax
c001d4bd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4c4:	50                   	push   eax
c001d4c5:	e8 aa 34 fe ff       	call   c0000974 <strcat>
c001d4ca:	58                   	pop    eax
c001d4cb:	5a                   	pop    edx
c001d4cc:	68 2c c3 02 c0       	push   0xc002c32c
c001d4d1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4d8:	50                   	push   eax
c001d4d9:	e8 96 34 fe ff       	call   c0000974 <strcat>
c001d4de:	83 c4 10             	add    esp,0x10
c001d4e1:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d4e6:	0f 84 43 01 00 00    	je     c001d62f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d4ec:	83 ec 0c             	sub    esp,0xc
c001d4ef:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4f6:	50                   	push   eax
c001d4f7:	e8 d9 d0 ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c001d4fc:	83 c4 10             	add    esp,0x10
c001d4ff:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d503:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d507:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d50b:	80 fb 01             	cmp    bl,0x1
c001d50e:	75 7d                	jne    c001d58d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001d510:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d517:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d51b:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d51f:	01 ce                	add    esi,ecx
c001d521:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d527:	0f 94 c0             	sete   al
c001d52a:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d530:	0f 94 c3             	sete   bl
c001d533:	09 c3                	or     ebx,eax
c001d535:	8b 06                	mov    eax,DWORD PTR [esi]
c001d537:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d53c:	74 36                	je     c001d574 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001d53e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d541:	84 db                	test   bl,bl
c001d543:	75 0a                	jne    c001d54f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001d545:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d549:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d54d:	76 37                	jbe    c001d586 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d54f:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d553:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d558:	0f 84 d1 00 00 00    	je     c001d62f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d55e:	83 ec 0c             	sub    esp,0xc
c001d561:	68 ad c2 02 c0       	push   0xc002c2ad
c001d566:	e8 6a d0 ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c001d56b:	83 c4 10             	add    esp,0x10
c001d56e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d572:	eb 12                	jmp    c001d586 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d574:	01 c1                	add    ecx,eax
c001d576:	84 db                	test   bl,bl
c001d578:	75 0c                	jne    c001d586 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d57a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d57e:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d582:	77 02                	ja     c001d586 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d584:	01 d1                	add    ecx,edx
c001d586:	89 0e                	mov    DWORD PTR [esi],ecx
c001d588:	e9 df 00 00 00       	jmp    c001d66c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d58d:	80 fb 02             	cmp    bl,0x2
c001d590:	75 71                	jne    c001d603 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001d592:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d599:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d59d:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d5a1:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d5a7:	74 15                	je     c001d5be <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d5a9:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d5af:	74 0d                	je     c001d5be <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d5b1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d5b5:	83 e8 04             	sub    eax,0x4
c001d5b8:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d5bc:	76 1f                	jbe    c001d5dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001d5be:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d5c2:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d5c7:	74 66                	je     c001d62f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d5c9:	83 ec 0c             	sub    esp,0xc
c001d5cc:	68 c9 c2 02 c0       	push   0xc002c2c9
c001d5d1:	e8 ff cf ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c001d5d6:	83 c4 10             	add    esp,0x10
c001d5d9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d5dd:	8b 06                	mov    eax,DWORD PTR [esi]
c001d5df:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d5e4:	74 13                	je     c001d5f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001d5e6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d5ea:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d5f1:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d5f5:	01 c8                	add    eax,ecx
c001d5f7:	eb 04                	jmp    c001d5fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001d5f9:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d5fd:	01 c2                	add    edx,eax
c001d5ff:	89 16                	mov    DWORD PTR [esi],edx
c001d601:	eb 69                	jmp    c001d66c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d603:	0f b6 db             	movzx  ebx,bl
c001d606:	50                   	push   eax
c001d607:	50                   	push   eax
c001d608:	53                   	push   ebx
c001d609:	68 e5 c2 02 c0       	push   0xc002c2e5
c001d60e:	e8 21 59 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001d613:	83 c4 10             	add    esp,0x10
c001d616:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d61b:	74 12                	je     c001d62f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d61d:	83 ec 0c             	sub    esp,0xc
c001d620:	68 f0 c2 02 c0       	push   0xc002c2f0
c001d625:	e8 ab cf ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c001d62a:	83 c4 10             	add    esp,0x10
c001d62d:	eb 3d                	jmp    c001d66c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d62f:	83 ec 0c             	sub    esp,0xc
c001d632:	55                   	push   ebp
c001d633:	e8 16 5f ff ff       	call   c001354e <File::close()>
c001d638:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d63b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d63e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d641:	59                   	pop    ecx
c001d642:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d646:	e8 05 22 ff ff       	call   c000f850 <free>
c001d64b:	5b                   	pop    ebx
c001d64c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d650:	e8 fb 21 ff ff       	call   c000f850 <free>
c001d655:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d658:	e8 f3 21 ff ff       	call   c000f850 <free>
c001d65d:	5e                   	pop    esi
c001d65e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d662:	e8 e9 21 ff ff       	call   c000f850 <free>
c001d667:	83 c4 10             	add    esp,0x10
c001d66a:	eb 21                	jmp    c001d68d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d66c:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d670:	e9 90 fd ff ff       	jmp    c001d405 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d675:	83 ec 0c             	sub    esp,0xc
c001d678:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d67c:	e8 cf 21 ff ff       	call   c000f850 <free>
c001d681:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d685:	83 c4 10             	add    esp,0x10
c001d688:	e9 05 fd ff ff       	jmp    c001d392 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d68d:	31 c0                	xor    eax,eax
c001d68f:	eb 33                	jmp    c001d6c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001d691:	83 ec 0c             	sub    esp,0xc
c001d694:	55                   	push   ebp
c001d695:	e8 b4 5e ff ff       	call   c001354e <File::close()>
c001d69a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d69d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d6a0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d6a3:	58                   	pop    eax
c001d6a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d6a8:	e8 a3 21 ff ff       	call   c000f850 <free>
c001d6ad:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d6b0:	e8 9b 21 ff ff       	call   c000f850 <free>
c001d6b5:	5a                   	pop    edx
c001d6b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d6ba:	e8 91 21 ff ff       	call   c000f850 <free>
c001d6bf:	83 c4 10             	add    esp,0x10
c001d6c2:	b0 01                	mov    al,0x1
c001d6c4:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d6ca:	5b                   	pop    ebx
c001d6cb:	5e                   	pop    esi
c001d6cc:	5f                   	pop    edi
c001d6cd:	5d                   	pop    ebp
c001d6ce:	c3                   	ret    

c001d6cf <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d6cf:	56                   	push   esi
c001d6d0:	31 d2                	xor    edx,edx
c001d6d2:	53                   	push   ebx
c001d6d3:	8b 1d 40 13 03 c0    	mov    ebx,DWORD PTR ds:0xc0031340
c001d6d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d6dd:	39 d3                	cmp    ebx,edx
c001d6df:	7e 1b                	jle    c001d6fc <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d6e1:	8b 04 95 60 15 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffceaa0]
c001d6e8:	39 c8                	cmp    eax,ecx
c001d6ea:	77 0d                	ja     c001d6f9 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d6ec:	8b 34 95 60 13 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffceca0]
c001d6f3:	01 c6                	add    esi,eax
c001d6f5:	39 ce                	cmp    esi,ecx
c001d6f7:	77 05                	ja     c001d6fe <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d6f9:	42                   	inc    edx
c001d6fa:	eb e1                	jmp    c001d6dd <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d6fc:	31 c0                	xor    eax,eax
c001d6fe:	5b                   	pop    ebx
c001d6ff:	5e                   	pop    esi
c001d700:	c3                   	ret    

c001d701 <Thr::getDriverNameFromAddress(unsigned long)>:
c001d701:	53                   	push   ebx
c001d702:	31 c0                	xor    eax,eax
c001d704:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d708:	8b 1d 40 13 03 c0    	mov    ebx,DWORD PTR ds:0xc0031340
c001d70e:	39 c3                	cmp    ebx,eax
c001d710:	7e 22                	jle    c001d734 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d712:	8b 14 85 60 15 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffceaa0]
c001d719:	39 ca                	cmp    edx,ecx
c001d71b:	77 14                	ja     c001d731 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d71d:	03 14 85 60 13 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffceca0]
c001d724:	39 ca                	cmp    edx,ecx
c001d726:	76 09                	jbe    c001d731 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d728:	8b 04 85 60 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce8a0]
c001d72f:	eb 05                	jmp    c001d736 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d731:	40                   	inc    eax
c001d732:	eb da                	jmp    c001d70e <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d734:	31 c0                	xor    eax,eax
c001d736:	5b                   	pop    ebx
c001d737:	c3                   	ret    

c001d738 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d738:	53                   	push   ebx
c001d739:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d73d:	53                   	push   ebx
c001d73e:	e8 8c ff ff ff       	call   c001d6cf <Thr::getDriverBaseFromAddress(unsigned long)>
c001d743:	5a                   	pop    edx
c001d744:	31 d2                	xor    edx,edx
c001d746:	85 c0                	test   eax,eax
c001d748:	74 04                	je     c001d74e <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d74a:	89 da                	mov    edx,ebx
c001d74c:	29 c2                	sub    edx,eax
c001d74e:	89 d0                	mov    eax,edx
c001d750:	5b                   	pop    ebx
c001d751:	c3                   	ret    

c001d752 <Thr::loadDLL(char const*, bool)>:
c001d752:	55                   	push   ebp
c001d753:	57                   	push   edi
c001d754:	56                   	push   esi
c001d755:	53                   	push   ebx
c001d756:	81 ec 34 01 00 00    	sub    esp,0x134
c001d75c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d763:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d76a:	56                   	push   esi
c001d76b:	68 08 c3 02 c0       	push   0xc002c308
c001d770:	e8 bf 57 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001d775:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d77c:	e8 bf 20 ff ff       	call   c000f840 <malloc>
c001d781:	83 c4 0c             	add    esp,0xc
c001d784:	89 c3                	mov    ebx,eax
c001d786:	ff 35 34 1b 03 c0    	push   DWORD PTR ds:0xc0031b34
c001d78c:	56                   	push   esi
c001d78d:	50                   	push   eax
c001d78e:	e8 f9 5c ff ff       	call   c001348c <File::File(char const*, Process*)>
c001d793:	83 c4 10             	add    esp,0x10
c001d796:	85 db                	test   ebx,ebx
c001d798:	75 3c                	jne    c001d7d6 <Thr::loadDLL(char const*, bool)+0x84>
c001d79a:	89 e8                	mov    eax,ebp
c001d79c:	84 c0                	test   al,al
c001d79e:	0f 84 d5 01 00 00    	je     c001d979 <Thr::loadDLL(char const*, bool)+0x227>
c001d7a4:	57                   	push   edi
c001d7a5:	57                   	push   edi
c001d7a6:	68 19 c3 02 c0       	push   0xc002c319
c001d7ab:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d7af:	57                   	push   edi
c001d7b0:	e8 7f 30 fe ff       	call   c0000834 <strcpy>
c001d7b5:	58                   	pop    eax
c001d7b6:	5a                   	pop    edx
c001d7b7:	56                   	push   esi
c001d7b8:	57                   	push   edi
c001d7b9:	e8 b6 31 fe ff       	call   c0000974 <strcat>
c001d7be:	59                   	pop    ecx
c001d7bf:	58                   	pop    eax
c001d7c0:	68 2c c3 02 c0       	push   0xc002c32c
c001d7c5:	57                   	push   edi
c001d7c6:	e8 a9 31 fe ff       	call   c0000974 <strcat>
c001d7cb:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d7ce:	e8 02 ce ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c001d7d3:	83 c4 10             	add    esp,0x10
c001d7d6:	51                   	push   ecx
c001d7d7:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d7db:	50                   	push   eax
c001d7dc:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d7e0:	50                   	push   eax
c001d7e1:	53                   	push   ebx
c001d7e2:	e8 b5 5f ff ff       	call   c001379c <File::stat(unsigned long long*, bool*)>
c001d7e7:	83 c4 10             	add    esp,0x10
c001d7ea:	85 db                	test   ebx,ebx
c001d7ec:	74 0c                	je     c001d7fa <Thr::loadDLL(char const*, bool)+0xa8>
c001d7ee:	83 ec 0c             	sub    esp,0xc
c001d7f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d7f3:	53                   	push   ebx
c001d7f4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d7f7:	83 c4 10             	add    esp,0x10
c001d7fa:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d7ff:	75 0a                	jne    c001d80b <Thr::loadDLL(char const*, bool)+0xb9>
c001d801:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d805:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d809:	75 3c                	jne    c001d847 <Thr::loadDLL(char const*, bool)+0xf5>
c001d80b:	89 e8                	mov    eax,ebp
c001d80d:	84 c0                	test   al,al
c001d80f:	0f 84 4c 01 00 00    	je     c001d961 <Thr::loadDLL(char const*, bool)+0x20f>
c001d815:	51                   	push   ecx
c001d816:	51                   	push   ecx
c001d817:	68 19 c3 02 c0       	push   0xc002c319
c001d81c:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d820:	53                   	push   ebx
c001d821:	e8 0e 30 fe ff       	call   c0000834 <strcpy>
c001d826:	5f                   	pop    edi
c001d827:	58                   	pop    eax
c001d828:	56                   	push   esi
c001d829:	53                   	push   ebx
c001d82a:	e8 45 31 fe ff       	call   c0000974 <strcat>
c001d82f:	58                   	pop    eax
c001d830:	5a                   	pop    edx
c001d831:	68 2c c3 02 c0       	push   0xc002c32c
c001d836:	53                   	push   ebx
c001d837:	e8 38 31 fe ff       	call   c0000974 <strcat>
c001d83c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d83f:	e8 91 cd ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c001d844:	83 c4 10             	add    esp,0x10
c001d847:	e8 da 45 ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c001d84c:	51                   	push   ecx
c001d84d:	6a 03                	push   0x3
c001d84f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d853:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d857:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d85d:	83 d3 00             	adc    ebx,0x0
c001d860:	89 ca                	mov    edx,ecx
c001d862:	89 d1                	mov    ecx,edx
c001d864:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d868:	51                   	push   ecx
c001d869:	50                   	push   eax
c001d86a:	e8 f3 4b ff ff       	call   c0012462 <VAS::allocatePages(int, int)>
c001d86f:	5f                   	pop    edi
c001d870:	89 c3                	mov    ebx,eax
c001d872:	58                   	pop    eax
c001d873:	53                   	push   ebx
c001d874:	68 c4 a9 02 c0       	push   0xc002a9c4
c001d879:	e8 b6 56 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001d87e:	89 34 24             	mov    DWORD PTR [esp],esi
c001d881:	e8 0e 2f fe ff       	call   c0000794 <strlen>
c001d886:	8b 3d 40 13 03 c0    	mov    edi,DWORD PTR ds:0xc0031340
c001d88c:	40                   	inc    eax
c001d88d:	89 04 24             	mov    DWORD PTR [esp],eax
c001d890:	e8 ab 1f ff ff       	call   c000f840 <malloc>
c001d895:	89 04 bd 60 17 03 c0 	mov    DWORD PTR [edi*4-0x3ffce8a0],eax
c001d89c:	58                   	pop    eax
c001d89d:	a1 40 13 03 c0       	mov    eax,ds:0xc0031340
c001d8a2:	5a                   	pop    edx
c001d8a3:	56                   	push   esi
c001d8a4:	ff 34 85 60 17 03 c0 	push   DWORD PTR [eax*4-0x3ffce8a0]
c001d8ab:	e8 84 2f fe ff       	call   c0000834 <strcpy>
c001d8b0:	a1 40 13 03 c0       	mov    eax,ds:0xc0031340
c001d8b5:	8d 50 01             	lea    edx,[eax+0x1]
c001d8b8:	89 1c 85 60 15 03 c0 	mov    DWORD PTR [eax*4-0x3ffceaa0],ebx
c001d8bf:	89 15 40 13 03 c0    	mov    DWORD PTR ds:0xc0031340,edx
c001d8c5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d8c9:	83 c4 0c             	add    esp,0xc
c001d8cc:	89 14 85 60 13 03 c0 	mov    DWORD PTR [eax*4-0x3ffceca0],edx
c001d8d3:	6a 01                	push   0x1
c001d8d5:	53                   	push   ebx
c001d8d6:	56                   	push   esi
c001d8d7:	e8 d7 f6 ff ff       	call   c001cfb3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d8dc:	83 c4 10             	add    esp,0x10
c001d8df:	89 c7                	mov    edi,eax
c001d8e1:	84 c0                	test   al,al
c001d8e3:	0f 85 8c 00 00 00    	jne    c001d975 <Thr::loadDLL(char const*, bool)+0x223>
c001d8e9:	89 e8                	mov    eax,ebp
c001d8eb:	84 c0                	test   al,al
c001d8ed:	74 76                	je     c001d965 <Thr::loadDLL(char const*, bool)+0x213>
c001d8ef:	83 ec 0c             	sub    esp,0xc
c001d8f2:	68 2e c3 02 c0       	push   0xc002c32e
c001d8f7:	e8 d9 cc ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c001d8fc:	83 c4 10             	add    esp,0x10
c001d8ff:	eb 64                	jmp    c001d965 <Thr::loadDLL(char const*, bool)+0x213>
c001d901:	e8 20 45 ff ff       	call   c0011e26 <Virt::getAKernelVAS()>
c001d906:	89 f5                	mov    ebp,esi
c001d908:	c1 e5 0c             	shl    ebp,0xc
c001d90b:	52                   	push   edx
c001d90c:	01 dd                	add    ebp,ebx
c001d90e:	52                   	push   edx
c001d90f:	55                   	push   ebp
c001d910:	50                   	push   eax
c001d911:	e8 c6 46 ff ff       	call   c0011fdc <VAS::getPageTableEntry(unsigned long)>
c001d916:	83 c4 10             	add    esp,0x10
c001d919:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d91c:	75 0c                	jne    c001d92a <Thr::loadDLL(char const*, bool)+0x1d8>
c001d91e:	83 ec 0c             	sub    esp,0xc
c001d921:	55                   	push   ebp
c001d922:	e8 31 25 ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c001d927:	83 c4 10             	add    esp,0x10
c001d92a:	46                   	inc    esi
c001d92b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d92f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d933:	05 ff 0f 00 00       	add    eax,0xfff
c001d938:	83 d2 00             	adc    edx,0x0
c001d93b:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d93f:	c1 ea 0c             	shr    edx,0xc
c001d942:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d946:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d94a:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d94e:	ba 00 00 00 00       	mov    edx,0x0
c001d953:	89 d0                	mov    eax,edx
c001d955:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d959:	72 a6                	jb     c001d901 <Thr::loadDLL(char const*, bool)+0x1af>
c001d95b:	89 f8                	mov    eax,edi
c001d95d:	84 c0                	test   al,al
c001d95f:	75 18                	jne    c001d979 <Thr::loadDLL(char const*, bool)+0x227>
c001d961:	31 db                	xor    ebx,ebx
c001d963:	eb 14                	jmp    c001d979 <Thr::loadDLL(char const*, bool)+0x227>
c001d965:	83 ec 0c             	sub    esp,0xc
c001d968:	68 4d c3 02 c0       	push   0xc002c34d
c001d96d:	e8 63 cc ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c001d972:	83 c4 10             	add    esp,0x10
c001d975:	31 f6                	xor    esi,esi
c001d977:	eb b2                	jmp    c001d92b <Thr::loadDLL(char const*, bool)+0x1d9>
c001d979:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d97f:	89 d8                	mov    eax,ebx
c001d981:	5b                   	pop    ebx
c001d982:	5e                   	pop    esi
c001d983:	5f                   	pop    edi
c001d984:	5d                   	pop    ebp
c001d985:	c3                   	ret    

c001d986 <Thr::executeDLL(unsigned long, void*)>:
c001d986:	56                   	push   esi
c001d987:	53                   	push   ebx
c001d988:	52                   	push   edx
c001d989:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d98d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d991:	85 db                	test   ebx,ebx
c001d993:	75 10                	jne    c001d9a5 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d995:	83 ec 0c             	sub    esp,0xc
c001d998:	68 69 c3 02 c0       	push   0xc002c369
c001d99d:	e8 33 cc ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c001d9a2:	83 c4 10             	add    esp,0x10
c001d9a5:	50                   	push   eax
c001d9a6:	50                   	push   eax
c001d9a7:	53                   	push   ebx
c001d9a8:	68 93 c3 02 c0       	push   0xc002c393
c001d9ad:	e8 82 55 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001d9b2:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d9b6:	89 d8                	mov    eax,ebx
c001d9b8:	83 c4 14             	add    esp,0x14
c001d9bb:	5b                   	pop    ebx
c001d9bc:	5e                   	pop    esi
c001d9bd:	ff e0                	jmp    eax
c001d9bf:	90                   	nop

c001d9c0 <changeTSS>:
c001d9c0:	83 ec 14             	sub    esp,0x14
c001d9c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d9c8:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d9cb:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d9d0:	c1 e2 15             	shl    edx,0x15
c001d9d3:	29 d0                	sub    eax,edx
c001d9d5:	50                   	push   eax
c001d9d6:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c001d9db:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d9e1:	05 7c 11 00 00       	add    eax,0x117c
c001d9e6:	50                   	push   eax
c001d9e7:	e8 de 3a ff ff       	call   c00114ca <TSS::setESP(unsigned long)>
c001d9ec:	83 c4 1c             	add    esp,0x1c
c001d9ef:	c3                   	ret    

c001d9f0 <Process::addArgs(char**)>:
c001d9f0:	57                   	push   edi
c001d9f1:	56                   	push   esi
c001d9f2:	53                   	push   ebx
c001d9f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d9f7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d9fb:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001da05:	85 ff                	test   edi,edi
c001da07:	74 3d                	je     c001da46 <Process::addArgs(char**)+0x56>
c001da09:	8b 07                	mov    eax,DWORD PTR [edi]
c001da0b:	85 c0                	test   eax,eax
c001da0d:	74 37                	je     c001da46 <Process::addArgs(char**)+0x56>
c001da0f:	31 db                	xor    ebx,ebx
c001da11:	83 ec 0c             	sub    esp,0xc
c001da14:	50                   	push   eax
c001da15:	e8 7a 2d fe ff       	call   c0000794 <strlen>
c001da1a:	40                   	inc    eax
c001da1b:	89 04 24             	mov    DWORD PTR [esp],eax
c001da1e:	e8 1d 1e ff ff       	call   c000f840 <malloc>
c001da23:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001da2a:	5a                   	pop    edx
c001da2b:	59                   	pop    ecx
c001da2c:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001da2f:	43                   	inc    ebx
c001da30:	50                   	push   eax
c001da31:	e8 fe 2d fe ff       	call   c0000834 <strcpy>
c001da36:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001da3c:	83 c4 10             	add    esp,0x10
c001da3f:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001da42:	85 c0                	test   eax,eax
c001da44:	75 cb                	jne    c001da11 <Process::addArgs(char**)+0x21>
c001da46:	5b                   	pop    ebx
c001da47:	5e                   	pop    esi
c001da48:	5f                   	pop    edi
c001da49:	c3                   	ret    

c001da4a <Process::Process(char const*, Process*, char**)>:
c001da4a:	56                   	push   esi
c001da4b:	53                   	push   ebx
c001da4c:	83 ec 14             	sub    esp,0x14
c001da4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da53:	05 0c 02 00 00       	add    eax,0x20c
c001da58:	bb 07 00 00 00       	mov    ebx,0x7
c001da5d:	89 c6                	mov    esi,eax
c001da5f:	85 db                	test   ebx,ebx
c001da61:	78 12                	js     c001da75 <Process::Process(char const*, Process*, char**)+0x2b>
c001da63:	83 ec 0c             	sub    esp,0xc
c001da66:	56                   	push   esi
c001da67:	e8 26 b2 00 00       	call   c0028c92 <ThreadControlBlock::ThreadControlBlock()>
c001da6c:	83 c4 10             	add    esp,0x10
c001da6f:	83 c6 63             	add    esi,0x63
c001da72:	4b                   	dec    ebx
c001da73:	eb ea                	jmp    c001da5f <Process::Process(char const*, Process*, char**)+0x15>
c001da75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da79:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001da80:	83 ec 0c             	sub    esp,0xc
c001da83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da87:	e8 9a c9 ff ff       	call   c001a426 <Krnl::newProcessEnv(Process*)>
c001da8c:	83 c4 10             	add    esp,0x10
c001da8f:	89 c2                	mov    edx,eax
c001da91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da95:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001da9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da9f:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001daa8:	a1 50 db 02 c0       	mov    eax,ds:0xc002db50
c001daad:	8d 50 01             	lea    edx,[eax+0x1]
c001dab0:	89 15 50 db 02 c0    	mov    DWORD PTR ds:0xc002db50,edx
c001dab6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001daba:	89 02                	mov    DWORD PTR [edx],eax
c001dabc:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001dac4:	83 ec 0c             	sub    esp,0xc
c001dac7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001dacb:	e8 70 1d ff ff       	call   c000f840 <malloc>
c001dad0:	83 c4 10             	add    esp,0x10
c001dad3:	89 c3                	mov    ebx,eax
c001dad5:	83 ec 08             	sub    esp,0x8
c001dad8:	6a 00                	push   0x0
c001dada:	53                   	push   ebx
c001dadb:	e8 2a 4d ff ff       	call   c001280a <VAS::VAS(bool)>
c001dae0:	83 c4 10             	add    esp,0x10
c001dae3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dae7:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001daed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daf1:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dafb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daff:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001db03:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001db09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db0d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db13:	85 c0                	test   eax,eax
c001db15:	74 42                	je     c001db59 <Process::Process(char const*, Process*, char**)+0x10f>
c001db17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db1b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db21:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001db27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db2b:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001db31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db35:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db3b:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001db41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db45:	05 0c 01 00 00       	add    eax,0x10c
c001db4a:	83 ec 08             	sub    esp,0x8
c001db4d:	52                   	push   edx
c001db4e:	50                   	push   eax
c001db4f:	e8 e0 2c fe ff       	call   c0000834 <strcpy>
c001db54:	83 c4 10             	add    esp,0x10
c001db57:	eb 63                	jmp    c001dbbc <Process::Process(char const*, Process*, char**)+0x172>
c001db59:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001db61:	83 ec 0c             	sub    esp,0xc
c001db64:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001db68:	e8 d3 1c ff ff       	call   c000f840 <malloc>
c001db6d:	83 c4 10             	add    esp,0x10
c001db70:	89 c3                	mov    ebx,eax
c001db72:	83 ec 08             	sub    esp,0x8
c001db75:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db79:	53                   	push   ebx
c001db7a:	e8 49 36 ff ff       	call   c00111c8 <VgaText::VgaText(char const*)>
c001db7f:	83 c4 10             	add    esp,0x10
c001db82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db86:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001db8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db90:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001db96:	83 ec 0c             	sub    esp,0xc
c001db99:	50                   	push   eax
c001db9a:	e8 1c 2a ff ff       	call   c00105bb <addToTerminalCycle(VgaText*)>
c001db9f:	83 c4 10             	add    esp,0x10
c001dba2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dba6:	05 0c 01 00 00       	add    eax,0x10c
c001dbab:	83 ec 08             	sub    esp,0x8
c001dbae:	68 b2 c3 02 c0       	push   0xc002c3b2
c001dbb3:	50                   	push   eax
c001dbb4:	e8 7b 2c fe ff       	call   c0000834 <strcpy>
c001dbb9:	83 c4 10             	add    esp,0x10
c001dbbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbc0:	83 c0 0c             	add    eax,0xc
c001dbc3:	83 ec 08             	sub    esp,0x8
c001dbc6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbca:	50                   	push   eax
c001dbcb:	e8 64 2c fe ff       	call   c0000834 <strcpy>
c001dbd0:	83 c4 10             	add    esp,0x10
c001dbd3:	83 ec 08             	sub    esp,0x8
c001dbd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dbda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbde:	e8 0d fe ff ff       	call   c001d9f0 <Process::addArgs(char**)>
c001dbe3:	83 c4 10             	add    esp,0x10
c001dbe6:	83 ec 08             	sub    esp,0x8
c001dbe9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbf1:	e8 87 ee ff ff       	call   c001ca7d <Thr::loadProgramIntoMemory(Process*, char const*)>
c001dbf6:	83 c4 10             	add    esp,0x10
c001dbf9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dbfd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dc01:	83 f0 01             	xor    eax,0x1
c001dc04:	88 c2                	mov    dl,al
c001dc06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc0a:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001dc10:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dc15:	83 ec 08             	sub    esp,0x8
c001dc18:	50                   	push   eax
c001dc19:	68 b0 c4 02 c0       	push   0xc002c4b0
c001dc1e:	e8 11 53 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001dc23:	83 c4 10             	add    esp,0x10
c001dc26:	90                   	nop
c001dc27:	83 c4 14             	add    esp,0x14
c001dc2a:	5b                   	pop    ebx
c001dc2b:	5e                   	pop    esi
c001dc2c:	c3                   	ret    
c001dc2d:	90                   	nop

c001dc2e <Process::Process(bool, char const*, Process*, char**)>:
c001dc2e:	56                   	push   esi
c001dc2f:	53                   	push   ebx
c001dc30:	83 ec 24             	sub    esp,0x24
c001dc33:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dc37:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dc3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc3f:	05 0c 02 00 00       	add    eax,0x20c
c001dc44:	bb 07 00 00 00       	mov    ebx,0x7
c001dc49:	89 c6                	mov    esi,eax
c001dc4b:	85 db                	test   ebx,ebx
c001dc4d:	78 12                	js     c001dc61 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001dc4f:	83 ec 0c             	sub    esp,0xc
c001dc52:	56                   	push   esi
c001dc53:	e8 3a b0 00 00       	call   c0028c92 <ThreadControlBlock::ThreadControlBlock()>
c001dc58:	83 c4 10             	add    esp,0x10
c001dc5b:	83 c6 63             	add    esi,0x63
c001dc5e:	4b                   	dec    ebx
c001dc5f:	eb ea                	jmp    c001dc4b <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001dc61:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc65:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dc6c:	83 ec 0c             	sub    esp,0xc
c001dc6f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dc73:	e8 ae c7 ff ff       	call   c001a426 <Krnl::newProcessEnv(Process*)>
c001dc78:	83 c4 10             	add    esp,0x10
c001dc7b:	89 c2                	mov    edx,eax
c001dc7d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc81:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dc87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc8b:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dc94:	a1 50 db 02 c0       	mov    eax,ds:0xc002db50
c001dc99:	8d 50 01             	lea    edx,[eax+0x1]
c001dc9c:	89 15 50 db 02 c0    	mov    DWORD PTR ds:0xc002db50,edx
c001dca2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dca6:	89 02                	mov    DWORD PTR [edx],eax
c001dca8:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001dcb0:	83 ec 0c             	sub    esp,0xc
c001dcb3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001dcb7:	e8 84 1b ff ff       	call   c000f840 <malloc>
c001dcbc:	83 c4 10             	add    esp,0x10
c001dcbf:	89 c3                	mov    ebx,eax
c001dcc1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dcc6:	83 ec 08             	sub    esp,0x8
c001dcc9:	50                   	push   eax
c001dcca:	53                   	push   ebx
c001dccb:	e8 3a 4b ff ff       	call   c001280a <VAS::VAS(bool)>
c001dcd0:	83 c4 10             	add    esp,0x10
c001dcd3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcd7:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dcdd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dce1:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dceb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcef:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dcf3:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dcf9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcfd:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd03:	85 c0                	test   eax,eax
c001dd05:	74 42                	je     c001dd49 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001dd07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd0b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd11:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dd17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd1b:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dd21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd25:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd2b:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dd31:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd35:	05 0c 01 00 00       	add    eax,0x10c
c001dd3a:	83 ec 08             	sub    esp,0x8
c001dd3d:	52                   	push   edx
c001dd3e:	50                   	push   eax
c001dd3f:	e8 f0 2a fe ff       	call   c0000834 <strcpy>
c001dd44:	83 c4 10             	add    esp,0x10
c001dd47:	eb 63                	jmp    c001ddac <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001dd49:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001dd51:	83 ec 0c             	sub    esp,0xc
c001dd54:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001dd58:	e8 e3 1a ff ff       	call   c000f840 <malloc>
c001dd5d:	83 c4 10             	add    esp,0x10
c001dd60:	89 c3                	mov    ebx,eax
c001dd62:	83 ec 08             	sub    esp,0x8
c001dd65:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dd69:	53                   	push   ebx
c001dd6a:	e8 59 34 ff ff       	call   c00111c8 <VgaText::VgaText(char const*)>
c001dd6f:	83 c4 10             	add    esp,0x10
c001dd72:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd76:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dd7c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd80:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dd86:	83 ec 0c             	sub    esp,0xc
c001dd89:	50                   	push   eax
c001dd8a:	e8 2c 28 ff ff       	call   c00105bb <addToTerminalCycle(VgaText*)>
c001dd8f:	83 c4 10             	add    esp,0x10
c001dd92:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd96:	05 0c 01 00 00       	add    eax,0x10c
c001dd9b:	83 ec 08             	sub    esp,0x8
c001dd9e:	68 b2 c3 02 c0       	push   0xc002c3b2
c001dda3:	50                   	push   eax
c001dda4:	e8 8b 2a fe ff       	call   c0000834 <strcpy>
c001dda9:	83 c4 10             	add    esp,0x10
c001ddac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddb0:	83 c0 0c             	add    eax,0xc
c001ddb3:	83 ec 08             	sub    esp,0x8
c001ddb6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001ddba:	50                   	push   eax
c001ddbb:	e8 74 2a fe ff       	call   c0000834 <strcpy>
c001ddc0:	83 c4 10             	add    esp,0x10
c001ddc3:	83 ec 08             	sub    esp,0x8
c001ddc6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ddca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ddce:	e8 1d fc ff ff       	call   c001d9f0 <Process::addArgs(char**)>
c001ddd3:	83 c4 10             	add    esp,0x10
c001ddd6:	90                   	nop
c001ddd7:	83 c4 24             	add    esp,0x24
c001ddda:	5b                   	pop    ebx
c001dddb:	5e                   	pop    esi
c001dddc:	c3                   	ret    

c001dddd <disableIRQs()>:
c001dddd:	fa                   	cli    
c001ddde:	ff 05 0c 1b 03 c0    	inc    DWORD PTR ds:0xc0031b0c
c001dde4:	c3                   	ret    

c001dde5 <getIRQNestingLevel()>:
c001dde5:	a1 0c 1b 03 c0       	mov    eax,ds:0xc0031b0c
c001ddea:	c3                   	ret    

c001ddeb <enableIRQs()>:
c001ddeb:	a1 0c 1b 03 c0       	mov    eax,ds:0xc0031b0c
c001ddf0:	48                   	dec    eax
c001ddf1:	a3 0c 1b 03 c0       	mov    ds:0xc0031b0c,eax
c001ddf6:	75 01                	jne    c001ddf9 <enableIRQs()+0xe>
c001ddf8:	fb                   	sti    
c001ddf9:	c3                   	ret    

c001ddfa <lockScheduler()>:
c001ddfa:	eb e1                	jmp    c001dddd <disableIRQs()>

c001ddfc <unlockScheduler()>:
c001ddfc:	eb ed                	jmp    c001ddeb <enableIRQs()>

c001ddfe <userModeEntryPoint(void*)>:
c001ddfe:	83 ec 0c             	sub    esp,0xc
c001de01:	e8 f6 ff ff ff       	call   c001ddfc <unlockScheduler()>
c001de06:	fb                   	sti    
c001de07:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de0c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001de0f:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001de15:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001de19:	83 c4 0c             	add    esp,0xc
c001de1c:	e9 09 25 fe ff       	jmp    c000032a <goToUsermode>

c001de21 <lockStuff()>:
c001de21:	e8 b7 ff ff ff       	call   c001dddd <disableIRQs()>
c001de26:	ff 05 08 1b 03 c0    	inc    DWORD PTR ds:0xc0031b08
c001de2c:	c3                   	ret    

c001de2d <taskStartupFunction>:
c001de2d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de32:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001de35:	c3                   	ret    

c001de36 <updateTimeUsed()>:
c001de36:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c001de3b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001de41:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001de48:	74 50                	je     c001de9a <updateTimeUsed()+0x64>
c001de4a:	57                   	push   edi
c001de4b:	56                   	push   esi
c001de4c:	53                   	push   ebx
c001de4d:	0f 31                	rdtsc  
c001de4f:	89 c1                	mov    ecx,eax
c001de51:	a3 48 1b 03 c0       	mov    ds:0xc0031b48,eax
c001de56:	2b 0d 38 1b 03 c0    	sub    ecx,DWORD PTR ds:0xc0031b38
c001de5c:	89 d3                	mov    ebx,edx
c001de5e:	89 0d 40 1b 03 c0    	mov    DWORD PTR ds:0xc0031b40,ecx
c001de64:	1b 1d 3c 1b 03 c0    	sbb    ebx,DWORD PTR ds:0xc0031b3c
c001de6a:	a3 38 1b 03 c0       	mov    ds:0xc0031b38,eax
c001de6f:	89 1d 44 1b 03 c0    	mov    DWORD PTR ds:0xc0031b44,ebx
c001de75:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de7a:	89 15 4c 1b 03 c0    	mov    DWORD PTR ds:0xc0031b4c,edx
c001de80:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001de83:	89 15 3c 1b 03 c0    	mov    DWORD PTR ds:0xc0031b3c,edx
c001de89:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001de8c:	01 f1                	add    ecx,esi
c001de8e:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001de91:	11 fb                	adc    ebx,edi
c001de93:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001de96:	5b                   	pop    ebx
c001de97:	5e                   	pop    esi
c001de98:	5f                   	pop    edi
c001de99:	c3                   	ret    
c001de9a:	c3                   	ret    

c001de9b <switchToThread(ThreadControlBlock*)>:
c001de9b:	53                   	push   ebx
c001de9c:	83 ec 08             	sub    esp,0x8
c001de9f:	a1 08 1b 03 c0       	mov    eax,ds:0xc0031b08
c001dea4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dea8:	85 c0                	test   eax,eax
c001deaa:	75 30                	jne    c001dedc <switchToThread(ThreadControlBlock*)+0x41>
c001deac:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001deaf:	3c ff                	cmp    al,0xff
c001deb1:	74 25                	je     c001ded8 <switchToThread(ThreadControlBlock*)+0x3d>
c001deb3:	0f b6 d0             	movzx  edx,al
c001deb6:	b8 84 03 00 00       	mov    eax,0x384
c001debb:	29 d0                	sub    eax,edx
c001debd:	c1 e0 10             	shl    eax,0x10
c001dec0:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001dec3:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001dec6:	e8 6b ff ff ff       	call   c001de36 <updateTimeUsed()>
c001decb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001decf:	83 c4 08             	add    esp,0x8
c001ded2:	5b                   	pop    ebx
c001ded3:	e9 8a 24 fe ff       	jmp    c0000362 <switchToThreadASM>
c001ded8:	31 c0                	xor    eax,eax
c001deda:	eb e7                	jmp    c001dec3 <switchToThread(ThreadControlBlock*)+0x28>
c001dedc:	c7 05 04 1b 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031b04,0x1
c001dee6:	83 c4 08             	add    esp,0x8
c001dee9:	5b                   	pop    ebx
c001deea:	c3                   	ret    
c001deeb:	90                   	nop

c001deec <Semaphore::Semaphore(int)>:
c001deec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001def0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001def4:	89 10                	mov    DWORD PTR [eax],edx
c001def6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001defa:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001df01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df05:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001df0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df10:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001df17:	90                   	nop
c001df18:	c3                   	ret    
c001df19:	90                   	nop

c001df1a <Mutex::Mutex()>:
c001df1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df1e:	6a 01                	push   0x1
c001df20:	50                   	push   eax
c001df21:	e8 c6 ff ff ff       	call   c001deec <Semaphore::Semaphore(int)>
c001df26:	83 c4 08             	add    esp,0x8
c001df29:	90                   	nop
c001df2a:	c3                   	ret    
c001df2b:	90                   	nop

c001df2c <Process::createThread(void (*)(void*), void*, int)>:
c001df2c:	55                   	push   ebp
c001df2d:	31 c9                	xor    ecx,ecx
c001df2f:	57                   	push   edi
c001df30:	56                   	push   esi
c001df31:	53                   	push   ebx
c001df32:	83 ec 1c             	sub    esp,0x1c
c001df35:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001df39:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001df40:	89 f2                	mov    edx,esi
c001df42:	0f b7 c2             	movzx  eax,dx
c001df45:	83 e2 01             	and    edx,0x1
c001df48:	74 14                	je     c001df5e <Process::createThread(void (*)(void*), void*, int)+0x32>
c001df4a:	d1 f8                	sar    eax,1
c001df4c:	41                   	inc    ecx
c001df4d:	89 c2                	mov    edx,eax
c001df4f:	83 f9 10             	cmp    ecx,0x10
c001df52:	75 ee                	jne    c001df42 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001df54:	83 c4 1c             	add    esp,0x1c
c001df57:	31 c0                	xor    eax,eax
c001df59:	5b                   	pop    ebx
c001df5a:	5e                   	pop    esi
c001df5b:	5f                   	pop    edi
c001df5c:	5d                   	pop    ebp
c001df5d:	c3                   	ret    
c001df5e:	83 ec 08             	sub    esp,0x8
c001df61:	b8 01 00 00 00       	mov    eax,0x1
c001df66:	d3 e0                	shl    eax,cl
c001df68:	09 c6                	or     esi,eax
c001df6a:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001df70:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001df77:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001df7a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001df7d:	01 ce                	add    esi,ecx
c001df7f:	89 f0                	mov    eax,esi
c001df81:	c1 e0 05             	shl    eax,0x5
c001df84:	01 c6                	add    esi,eax
c001df86:	8d 04 33             	lea    eax,[ebx+esi*1]
c001df89:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001df8f:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001df95:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001df99:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001df9f:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001dfa5:	89 ca                	mov    edx,ecx
c001dfa7:	f7 da                	neg    edx
c001dfa9:	c1 e2 15             	shl    edx,0x15
c001dfac:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001dfb2:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001dfb8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001dfbc:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001dfc6:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001dfcc:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dfd0:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001dfd6:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001dfe0:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001dfea:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001dff1:	50                   	push   eax
c001dff2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dff6:	68 28 1b 03 c0       	push   0xc0031b28
c001dffb:	e8 20 ab 00 00       	call   c0028b20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e000:	83 c4 10             	add    esp,0x10
c001e003:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e007:	83 c4 1c             	add    esp,0x1c
c001e00a:	5b                   	pop    ebx
c001e00b:	5e                   	pop    esi
c001e00c:	5f                   	pop    edi
c001e00d:	5d                   	pop    ebp
c001e00e:	c3                   	ret    
c001e00f:	90                   	nop

c001e010 <Process::createUserThread()>:
c001e010:	83 ec 0c             	sub    esp,0xc
c001e013:	68 80 00 00 00       	push   0x80
c001e018:	6a 00                	push   0x0
c001e01a:	68 fe dd 01 c0       	push   0xc001ddfe
c001e01f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e023:	e8 04 ff ff ff       	call   c001df2c <Process::createThread(void (*)(void*), void*, int)>
c001e028:	83 c4 1c             	add    esp,0x1c
c001e02b:	c3                   	ret    

c001e02c <setupMultitasking(void (*)())>:
c001e02c:	56                   	push   esi
c001e02d:	53                   	push   ebx
c001e02e:	53                   	push   ebx
c001e02f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e033:	eb 10                	jmp    c001e045 <setupMultitasking(void (*)())+0x19>
c001e035:	83 ec 0c             	sub    esp,0xc
c001e038:	68 28 1b 03 c0       	push   0xc0031b28
c001e03d:	e8 30 aa 00 00       	call   c0028a72 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e042:	83 c4 10             	add    esp,0x10
c001e045:	83 ec 0c             	sub    esp,0xc
c001e048:	68 28 1b 03 c0       	push   0xc0031b28
c001e04d:	e8 04 aa 00 00       	call   c0028a56 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e052:	83 c4 10             	add    esp,0x10
c001e055:	84 c0                	test   al,al
c001e057:	74 dc                	je     c001e035 <setupMultitasking(void (*)())+0x9>
c001e059:	83 ec 0c             	sub    esp,0xc
c001e05c:	68 3f 07 00 00       	push   0x73f
c001e061:	e8 da 17 ff ff       	call   c000f840 <malloc>
c001e066:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e06d:	89 c3                	mov    ebx,eax
c001e06f:	6a 00                	push   0x0
c001e071:	68 b6 c3 02 c0       	push   0xc002c3b6
c001e076:	6a 01                	push   0x1
c001e078:	50                   	push   eax
c001e079:	e8 b0 fb ff ff       	call   c001dc2e <Process::Process(bool, char const*, Process*, char**)>
c001e07e:	83 c4 18             	add    esp,0x18
c001e081:	89 1d 34 1b 03 c0    	mov    DWORD PTR ds:0xc0031b34,ebx
c001e087:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e08d:	68 d8 c4 02 c0       	push   0xc002c4d8
c001e092:	e8 9d 4e ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001e097:	58                   	pop    eax
c001e098:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e09e:	e8 9a 2c ff ff       	call   c0010d3d <setActiveTerminal(VgaText*)>
c001e0a3:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e0ab:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e0b1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e0b4:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e0be:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e0c4:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e0ca:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e0d4:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e0de:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e0e8:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e0ee:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e0f4:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e0fe:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e104:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e10e:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e114:	5a                   	pop    edx
c001e115:	59                   	pop    ecx
c001e116:	68 b2 c3 02 c0       	push   0xc002c3b2
c001e11b:	50                   	push   eax
c001e11c:	e8 13 27 fe ff       	call   c0000834 <strcpy>
c001e121:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e128:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e12c:	83 c4 14             	add    esp,0x14
c001e12f:	5b                   	pop    ebx
c001e130:	5e                   	pop    esi
c001e131:	e9 1e 22 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e136 <schedule()>:
c001e136:	a1 08 1b 03 c0       	mov    eax,ds:0xc0031b08
c001e13b:	85 c0                	test   eax,eax
c001e13d:	74 0b                	je     c001e14a <schedule()+0x14>
c001e13f:	c7 05 04 1b 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031b04,0x1
c001e149:	c3                   	ret    
c001e14a:	53                   	push   ebx
c001e14b:	83 ec 14             	sub    esp,0x14
c001e14e:	68 28 1b 03 c0       	push   0xc0031b28
c001e153:	e8 fe a8 00 00       	call   c0028a56 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e158:	83 c4 10             	add    esp,0x10
c001e15b:	84 c0                	test   al,al
c001e15d:	75 38                	jne    c001e197 <schedule()+0x61>
c001e15f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e164:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e167:	4a                   	dec    edx
c001e168:	74 32                	je     c001e19c <schedule()+0x66>
c001e16a:	83 ec 0c             	sub    esp,0xc
c001e16d:	68 28 1b 03 c0       	push   0xc0031b28
c001e172:	e8 d7 a8 00 00       	call   c0028a4e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e177:	c7 04 24 28 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b28
c001e17e:	89 c3                	mov    ebx,eax
c001e180:	e8 ed a8 00 00       	call   c0028a72 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e185:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e18c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e18f:	e8 07 fd ff ff       	call   c001de9b <switchToThread(ThreadControlBlock*)>
c001e194:	83 c4 10             	add    esp,0x10
c001e197:	83 c4 08             	add    esp,0x8
c001e19a:	5b                   	pop    ebx
c001e19b:	c3                   	ret    
c001e19c:	83 ec 08             	sub    esp,0x8
c001e19f:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e1a6:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e1ac:	68 28 1b 03 c0       	push   0xc0031b28
c001e1b1:	e8 6a a9 00 00       	call   c0028b20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e1b6:	83 c4 10             	add    esp,0x10
c001e1b9:	eb af                	jmp    c001e16a <schedule()+0x34>

c001e1bb <unlockStuff()>:
c001e1bb:	a1 08 1b 03 c0       	mov    eax,ds:0xc0031b08
c001e1c0:	48                   	dec    eax
c001e1c1:	a3 08 1b 03 c0       	mov    ds:0xc0031b08,eax
c001e1c6:	75 09                	jne    c001e1d1 <unlockStuff()+0x16>
c001e1c8:	a1 04 1b 03 c0       	mov    eax,ds:0xc0031b04
c001e1cd:	85 c0                	test   eax,eax
c001e1cf:	75 05                	jne    c001e1d6 <unlockStuff()+0x1b>
c001e1d1:	e9 15 fc ff ff       	jmp    c001ddeb <enableIRQs()>
c001e1d6:	83 ec 0c             	sub    esp,0xc
c001e1d9:	c7 05 04 1b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031b04,0x0
c001e1e3:	e8 4e ff ff ff       	call   c001e136 <schedule()>
c001e1e8:	83 c4 0c             	add    esp,0xc
c001e1eb:	e9 fb fb ff ff       	jmp    c001ddeb <enableIRQs()>

c001e1f0 <Semaphore::tryAcquire()>:
c001e1f0:	83 ec 0c             	sub    esp,0xc
c001e1f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1f7:	e8 25 fc ff ff       	call   c001de21 <lockStuff()>
c001e1fc:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e1ff:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e201:	7c 0b                	jl     c001e20e <Semaphore::tryAcquire()+0x1e>
c001e203:	e8 b3 ff ff ff       	call   c001e1bb <unlockStuff()>
c001e208:	31 c0                	xor    eax,eax
c001e20a:	83 c4 0c             	add    esp,0xc
c001e20d:	c3                   	ret    
c001e20e:	42                   	inc    edx
c001e20f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e212:	e8 a4 ff ff ff       	call   c001e1bb <unlockStuff()>
c001e217:	b0 01                	mov    al,0x1
c001e219:	83 c4 0c             	add    esp,0xc
c001e21c:	c3                   	ret    
c001e21d:	90                   	nop

c001e21e <Semaphore::assertLocked(char const*)>:
c001e21e:	83 ec 0c             	sub    esp,0xc
c001e221:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e225:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e229:	e8 f3 fb ff ff       	call   c001de21 <lockStuff()>
c001e22e:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e230:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001e233:	7c 05                	jl     c001e23a <Semaphore::assertLocked(char const*)+0x1c>
c001e235:	83 c4 0c             	add    esp,0xc
c001e238:	eb 81                	jmp    c001e1bb <unlockStuff()>
c001e23a:	83 ec 0c             	sub    esp,0xc
c001e23d:	52                   	push   edx
c001e23e:	e8 92 c3 ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c001e243:	83 c4 10             	add    esp,0x10
c001e246:	83 c4 0c             	add    esp,0xc
c001e249:	e9 6d ff ff ff       	jmp    c001e1bb <unlockStuff()>

c001e24e <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e24e:	83 ec 0c             	sub    esp,0xc
c001e251:	e8 8f fb ff ff       	call   c001dde5 <getIRQNestingLevel()>
c001e256:	83 ec 08             	sub    esp,0x8
c001e259:	50                   	push   eax
c001e25a:	68 0c c5 02 c0       	push   0xc002c50c
c001e25f:	e8 d0 4c ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001e264:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e268:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e26d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e270:	e8 c1 fe ff ff       	call   c001e136 <schedule()>
c001e275:	e8 82 fb ff ff       	call   c001ddfc <unlockScheduler()>
c001e27a:	e8 66 fb ff ff       	call   c001dde5 <getIRQNestingLevel()>
c001e27f:	5a                   	pop    edx
c001e280:	59                   	pop    ecx
c001e281:	50                   	push   eax
c001e282:	68 40 c5 02 c0       	push   0xc002c540
c001e287:	e8 a8 4c ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001e28c:	83 c4 1c             	add    esp,0x1c
c001e28f:	c3                   	ret    

c001e290 <blockTask(TaskState)>:
c001e290:	83 ec 0c             	sub    esp,0xc
c001e293:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e297:	e8 5e fb ff ff       	call   c001ddfa <lockScheduler()>
c001e29c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2a1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e2a4:	e8 8d fe ff ff       	call   c001e136 <schedule()>
c001e2a9:	83 c4 0c             	add    esp,0xc
c001e2ac:	e9 4b fb ff ff       	jmp    c001ddfc <unlockScheduler()>

c001e2b1 <waitTask(int, int*, int)>:
c001e2b1:	83 ec 18             	sub    esp,0x18
c001e2b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2b9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e2bd:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e2c0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e2c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2c9:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e2cc:	6a 07                	push   0x7
c001e2ce:	e8 bd ff ff ff       	call   c001e290 <blockTask(TaskState)>
c001e2d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2d8:	83 c4 10             	add    esp,0x10
c001e2db:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e2de:	85 d2                	test   edx,edx
c001e2e0:	74 0a                	je     c001e2ec <waitTask(int, int*, int)+0x3b>
c001e2e2:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e2e5:	89 02                	mov    DWORD PTR [edx],eax
c001e2e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2ec:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e2ef:	83 c4 0c             	add    esp,0xc
c001e2f2:	c3                   	ret    

c001e2f3 <nanoSleepUntil(unsigned long long)>:
c001e2f3:	83 ec 0c             	sub    esp,0xc
c001e2f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2fa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e2fe:	3b 05 50 ec 02 c0    	cmp    eax,DWORD PTR ds:0xc002ec50
c001e304:	89 d1                	mov    ecx,edx
c001e306:	1b 0d 54 ec 02 c0    	sbb    ecx,DWORD PTR ds:0xc002ec54
c001e30c:	73 04                	jae    c001e312 <nanoSleepUntil(unsigned long long)+0x1f>
c001e30e:	83 c4 0c             	add    esp,0xc
c001e311:	c3                   	ret    
c001e312:	e8 0a fb ff ff       	call   c001de21 <lockStuff()>
c001e317:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e31d:	83 ec 08             	sub    esp,0x8
c001e320:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e323:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e326:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e32c:	68 1c 1b 03 c0       	push   0xc0031b1c
c001e331:	e8 ea a7 00 00       	call   c0028b20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e336:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e33d:	e8 4e ff ff ff       	call   c001e290 <blockTask(TaskState)>
c001e342:	83 c4 1c             	add    esp,0x1c
c001e345:	e9 71 fe ff ff       	jmp    c001e1bb <unlockStuff()>

c001e34a <nanoSleep(unsigned long long)>:
c001e34a:	a1 50 ec 02 c0       	mov    eax,ds:0xc002ec50
c001e34f:	8b 15 54 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ec54
c001e355:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e359:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e35d:	eb 94                	jmp    c001e2f3 <nanoSleepUntil(unsigned long long)>

c001e35f <sleep(unsigned long long)>:
c001e35f:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e367:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e36c:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e370:	01 ca                	add    edx,ecx
c001e372:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e376:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e37a:	eb ce                	jmp    c001e34a <nanoSleep(unsigned long long)>

c001e37c <Semaphore::acquire()>:
c001e37c:	83 ec 0c             	sub    esp,0xc
c001e37f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e383:	e8 99 fa ff ff       	call   c001de21 <lockStuff()>
c001e388:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e38b:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e38d:	7d 0c                	jge    c001e39b <Semaphore::acquire()+0x1f>
c001e38f:	42                   	inc    edx
c001e390:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e393:	83 c4 0c             	add    esp,0xc
c001e396:	e9 20 fe ff ff       	jmp    c001e1bb <unlockStuff()>
c001e39b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e3a1:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001e3a8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e3ab:	85 d2                	test   edx,edx
c001e3ad:	74 2a                	je     c001e3d9 <Semaphore::acquire()+0x5d>
c001e3af:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e3b2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e3b8:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001e3bb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e3c1:	83 ec 0c             	sub    esp,0xc
c001e3c4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e3c7:	6a 05                	push   0x5
c001e3c9:	e8 c2 fe ff ff       	call   c001e290 <blockTask(TaskState)>
c001e3ce:	83 c4 10             	add    esp,0x10
c001e3d1:	83 c4 0c             	add    esp,0xc
c001e3d4:	e9 e2 fd ff ff       	jmp    c001e1bb <unlockStuff()>
c001e3d9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e3df:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e3e2:	eb d7                	jmp    c001e3bb <Semaphore::acquire()+0x3f>

c001e3e4 <taskReturned>:
c001e3e4:	83 ec 18             	sub    esp,0x18
c001e3e7:	68 74 c5 02 c0       	push   0xc002c574
c001e3ec:	e8 e4 c1 ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c001e3f1:	83 c4 10             	add    esp,0x10
c001e3f4:	83 ec 0c             	sub    esp,0xc
c001e3f7:	6a 02                	push   0x2
c001e3f9:	e8 92 fe ff ff       	call   c001e290 <blockTask(TaskState)>
c001e3fe:	e8 f7 f9 ff ff       	call   c001ddfa <lockScheduler()>
c001e403:	e8 2e fd ff ff       	call   c001e136 <schedule()>
c001e408:	e8 ef f9 ff ff       	call   c001ddfc <unlockScheduler()>
c001e40d:	83 c4 10             	add    esp,0x10
c001e410:	eb e2                	jmp    c001e3f4 <taskReturned+0x10>

c001e412 <unblockTask(ThreadControlBlock*)>:
c001e412:	53                   	push   ebx
c001e413:	83 ec 08             	sub    esp,0x8
c001e416:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e41a:	e8 db f9 ff ff       	call   c001ddfa <lockScheduler()>
c001e41f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e422:	85 c0                	test   eax,eax
c001e424:	74 5c                	je     c001e482 <unblockTask(ThreadControlBlock*)+0x70>
c001e426:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e429:	48                   	dec    eax
c001e42a:	74 31                	je     c001e45d <unblockTask(ThreadControlBlock*)+0x4b>
c001e42c:	83 ec 0c             	sub    esp,0xc
c001e42f:	68 28 1b 03 c0       	push   0xc0031b28
c001e434:	e8 15 a6 00 00       	call   c0028a4e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e439:	83 c4 10             	add    esp,0x10
c001e43c:	85 c0                	test   eax,eax
c001e43e:	75 17                	jne    c001e457 <unblockTask(ThreadControlBlock*)+0x45>
c001e440:	eb 65                	jmp    c001e4a7 <unblockTask(ThreadControlBlock*)+0x95>
c001e442:	83 ec 08             	sub    esp,0x8
c001e445:	50                   	push   eax
c001e446:	68 28 1b 03 c0       	push   0xc0031b28
c001e44b:	e8 d8 a8 00 00       	call   c0028d28 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e450:	83 c4 10             	add    esp,0x10
c001e453:	85 c0                	test   eax,eax
c001e455:	74 50                	je     c001e4a7 <unblockTask(ThreadControlBlock*)+0x95>
c001e457:	39 c3                	cmp    ebx,eax
c001e459:	75 e7                	jne    c001e442 <unblockTask(ThreadControlBlock*)+0x30>
c001e45b:	eb 1c                	jmp    c001e479 <unblockTask(ThreadControlBlock*)+0x67>
c001e45d:	83 ec 0c             	sub    esp,0xc
c001e460:	68 64 c6 02 c0       	push   0xc002c664
c001e465:	e8 ca 4a ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001e46a:	c7 04 24 f0 c5 02 c0 	mov    DWORD PTR [esp],0xc002c5f0
c001e471:	e8 be 4a ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001e476:	83 c4 10             	add    esp,0x10
c001e479:	83 c4 08             	add    esp,0x8
c001e47c:	5b                   	pop    ebx
c001e47d:	e9 7a f9 ff ff       	jmp    c001ddfc <unlockScheduler()>
c001e482:	83 ec 0c             	sub    esp,0xc
c001e485:	68 a8 c5 02 c0       	push   0xc002c5a8
c001e48a:	e8 a5 4a ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001e48f:	c7 04 24 f0 c5 02 c0 	mov    DWORD PTR [esp],0xc002c5f0
c001e496:	e8 99 4a ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001e49b:	83 c4 10             	add    esp,0x10
c001e49e:	83 c4 08             	add    esp,0x8
c001e4a1:	5b                   	pop    ebx
c001e4a2:	e9 55 f9 ff ff       	jmp    c001ddfc <unlockScheduler()>
c001e4a7:	83 ec 08             	sub    esp,0x8
c001e4aa:	53                   	push   ebx
c001e4ab:	68 28 1b 03 c0       	push   0xc0031b28
c001e4b0:	e8 6b a6 00 00       	call   c0028b20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e4b5:	83 c4 10             	add    esp,0x10
c001e4b8:	83 c4 08             	add    esp,0x8
c001e4bb:	5b                   	pop    ebx
c001e4bc:	e9 3b f9 ff ff       	jmp    c001ddfc <unlockScheduler()>

c001e4c1 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e4c1:	55                   	push   ebp
c001e4c2:	57                   	push   edi
c001e4c3:	56                   	push   esi
c001e4c4:	53                   	push   ebx
c001e4c5:	83 ec 1c             	sub    esp,0x1c
c001e4c8:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e4cc:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e4cf:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e4d5:	85 ff                	test   edi,edi
c001e4d7:	7e 20                	jle    c001e4f9 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e4d9:	31 f6                	xor    esi,esi
c001e4db:	83 ec 0c             	sub    esp,0xc
c001e4de:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e4e5:	46                   	inc    esi
c001e4e6:	e8 65 13 ff ff       	call   c000f850 <free>
c001e4eb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e4ee:	83 c4 10             	add    esp,0x10
c001e4f1:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e4f7:	7f e2                	jg     c001e4db <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e4f9:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e503:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e508:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e50b:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e50e:	d3 c0                	rol    eax,cl
c001e510:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e517:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e51a:	89 f7                	mov    edi,esi
c001e51c:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e524:	0f 85 74 01 00 00    	jne    c001e69e <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e52a:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e530:	85 ed                	test   ebp,ebp
c001e532:	74 1b                	je     c001e54f <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e534:	83 ec 0c             	sub    esp,0xc
c001e537:	55                   	push   ebp
c001e538:	e8 05 be ff ff       	call   c001a342 <EnvVarContainer::~EnvVarContainer()>
c001e53d:	59                   	pop    ecx
c001e53e:	5e                   	pop    esi
c001e53f:	6a 0c                	push   0xc
c001e541:	55                   	push   ebp
c001e542:	e8 0d 49 ff ff       	call   c0012e54 <operator delete(void*, unsigned long)>
c001e547:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e54a:	83 c4 10             	add    esp,0x10
c001e54d:	89 f7                	mov    edi,esi
c001e54f:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e555:	85 c0                	test   eax,eax
c001e557:	0f 84 aa 00 00 00    	je     c001e607 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e55d:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e560:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e564:	31 c9                	xor    ecx,ecx
c001e566:	eb 10                	jmp    c001e578 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e568:	41                   	inc    ecx
c001e569:	83 f9 10             	cmp    ecx,0x10
c001e56c:	0f 84 95 00 00 00    	je     c001e607 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e572:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e578:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e57f:	d3 fa                	sar    edx,cl
c001e581:	83 e2 01             	and    edx,0x1
c001e584:	74 e2                	je     c001e568 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e586:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e589:	01 ca                	add    edx,ecx
c001e58b:	89 d5                	mov    ebp,edx
c001e58d:	c1 e5 05             	shl    ebp,0x5
c001e590:	01 ea                	add    edx,ebp
c001e592:	01 d0                	add    eax,edx
c001e594:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e59a:	83 fd 07             	cmp    ebp,0x7
c001e59d:	75 c9                	jne    c001e568 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e59f:	05 40 02 00 00       	add    eax,0x240
c001e5a4:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e5a7:	83 fd ff             	cmp    ebp,0xffffffff
c001e5aa:	0f 8c 08 01 00 00    	jl     c001e6b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e5b0:	0f 84 b9 01 00 00    	je     c001e76f <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e5b6:	85 ed                	test   ebp,ebp
c001e5b8:	0f 84 a0 01 00 00    	je     c001e75e <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e5be:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e5c0:	75 a6                	jne    c001e568 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e5c2:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e5c8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e5cc:	01 d0                	add    eax,edx
c001e5ce:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e5d2:	83 ec 0c             	sub    esp,0xc
c001e5d5:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e5db:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e5de:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e5e4:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e5eb:	50                   	push   eax
c001e5ec:	e8 21 fe ff ff       	call   c001e412 <unblockTask(ThreadControlBlock*)>
c001e5f1:	83 c4 10             	add    esp,0x10
c001e5f4:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e5f7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e5fb:	89 f7                	mov    edi,esi
c001e5fd:	41                   	inc    ecx
c001e5fe:	83 f9 10             	cmp    ecx,0x10
c001e601:	0f 85 6b ff ff ff    	jne    c001e572 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e607:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e60d:	85 c0                	test   eax,eax
c001e60f:	74 5d                	je     c001e66e <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e611:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e617:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e61d:	74 4f                	je     c001e66e <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e61f:	83 ec 0c             	sub    esp,0xc
c001e622:	68 28 1b 03 c0       	push   0xc0031b28
c001e627:	e8 22 a4 00 00       	call   c0028a4e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e62c:	c7 04 24 28 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b28
c001e633:	89 c7                	mov    edi,eax
c001e635:	e8 1c a4 00 00       	call   c0028a56 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e63a:	83 c4 10             	add    esp,0x10
c001e63d:	84 c0                	test   al,al
c001e63f:	0f 84 e4 00 00 00    	je     c001e729 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e645:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e648:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e64e:	85 d2                	test   edx,edx
c001e650:	74 0f                	je     c001e661 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e652:	83 ec 0c             	sub    esp,0xc
c001e655:	8b 02                	mov    eax,DWORD PTR [edx]
c001e657:	52                   	push   edx
c001e658:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e65b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e65e:	83 c4 10             	add    esp,0x10
c001e661:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e66b:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e66e:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e674:	85 db                	test   ebx,ebx
c001e676:	74 16                	je     c001e68e <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e678:	83 ec 0c             	sub    esp,0xc
c001e67b:	53                   	push   ebx
c001e67c:	e8 75 3b ff ff       	call   c00121f6 <VAS::~VAS()>
c001e681:	58                   	pop    eax
c001e682:	5a                   	pop    edx
c001e683:	6a 10                	push   0x10
c001e685:	53                   	push   ebx
c001e686:	e8 c9 47 ff ff       	call   c0012e54 <operator delete(void*, unsigned long)>
c001e68b:	83 c4 10             	add    esp,0x10
c001e68e:	83 ec 0c             	sub    esp,0xc
c001e691:	68 bd c3 02 c0       	push   0xc002c3bd
c001e696:	e8 99 48 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001e69b:	83 c4 10             	add    esp,0x10
c001e69e:	83 ec 08             	sub    esp,0x8
c001e6a1:	68 3f 07 00 00       	push   0x73f
c001e6a6:	68 cb c3 02 c0       	push   0xc002c3cb
c001e6ab:	e8 84 48 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001e6b0:	83 c4 2c             	add    esp,0x2c
c001e6b3:	5b                   	pop    ebx
c001e6b4:	5e                   	pop    esi
c001e6b5:	5f                   	pop    edi
c001e6b6:	5d                   	pop    ebp
c001e6b7:	c3                   	ret    
c001e6b8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e6bc:	83 ec 0c             	sub    esp,0xc
c001e6bf:	68 a8 c6 02 c0       	push   0xc002c6a8
c001e6c4:	e8 0c bf ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c001e6c9:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e6cc:	83 c4 10             	add    esp,0x10
c001e6cf:	89 f7                	mov    edi,esi
c001e6d1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e6d5:	e9 8e fe ff ff       	jmp    c001e568 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e6da:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e6e0:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e6e6:	75 1c                	jne    c001e704 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e6e8:	83 ec 0c             	sub    esp,0xc
c001e6eb:	68 10 c7 02 c0       	push   0xc002c710
c001e6f0:	e8 3f 48 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001e6f5:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e6fc:	e8 8f fb ff ff       	call   c001e290 <blockTask(TaskState)>
c001e701:	83 c4 10             	add    esp,0x10
c001e704:	83 ec 08             	sub    esp,0x8
c001e707:	56                   	push   esi
c001e708:	68 28 1b 03 c0       	push   0xc0031b28
c001e70d:	e8 0e a4 00 00       	call   c0028b20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e712:	c7 04 24 28 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b28
c001e719:	e8 30 a3 00 00       	call   c0028a4e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e71e:	83 c4 10             	add    esp,0x10
c001e721:	39 f8                	cmp    eax,edi
c001e723:	0f 84 1c ff ff ff    	je     c001e645 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e729:	83 ec 0c             	sub    esp,0xc
c001e72c:	68 28 1b 03 c0       	push   0xc0031b28
c001e731:	e8 18 a3 00 00       	call   c0028a4e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e736:	c7 04 24 28 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b28
c001e73d:	89 c6                	mov    esi,eax
c001e73f:	e8 2e a3 00 00       	call   c0028a72 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e744:	83 c4 10             	add    esp,0x10
c001e747:	39 f3                	cmp    ebx,esi
c001e749:	74 b9                	je     c001e704 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e74b:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e74e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e751:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e757:	75 ab                	jne    c001e704 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e759:	e9 7c ff ff ff       	jmp    c001e6da <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e75e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e762:	83 ec 0c             	sub    esp,0xc
c001e765:	68 dc c6 02 c0       	push   0xc002c6dc
c001e76a:	e9 55 ff ff ff       	jmp    c001e6c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e76f:	8b 36                	mov    esi,DWORD PTR [esi]
c001e771:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e775:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e778:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e77b:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e781:	01 d7                	add    edi,edx
c001e783:	89 f8                	mov    eax,edi
c001e785:	e9 44 fe ff ff       	jmp    c001e5ce <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e78a <cleanerTaskFunction(void*)>:
c001e78a:	53                   	push   ebx
c001e78b:	83 ec 08             	sub    esp,0x8
c001e78e:	e8 69 f6 ff ff       	call   c001ddfc <unlockScheduler()>
c001e793:	e8 62 f6 ff ff       	call   c001ddfa <lockScheduler()>
c001e798:	80 3d ec 1a 03 c0 00 	cmp    BYTE PTR ds:0xc0031aec,0x0
c001e79f:	0f 85 8e 00 00 00    	jne    c001e833 <cleanerTaskFunction(void*)+0xa9>
c001e7a5:	83 ec 0c             	sub    esp,0xc
c001e7a8:	6a 02                	push   0x2
c001e7aa:	e8 9f fa ff ff       	call   c001e24e <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e7af:	83 c4 10             	add    esp,0x10
c001e7b2:	c6 05 ec 1a 03 c0 00 	mov    BYTE PTR ds:0xc0031aec,0x0
c001e7b9:	e8 63 f6 ff ff       	call   c001de21 <lockStuff()>
c001e7be:	e8 37 f6 ff ff       	call   c001ddfa <lockScheduler()>
c001e7c3:	83 ec 0c             	sub    esp,0xc
c001e7c6:	68 10 1b 03 c0       	push   0xc0031b10
c001e7cb:	e8 86 a2 00 00       	call   c0028a56 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e7d0:	83 c4 10             	add    esp,0x10
c001e7d3:	84 c0                	test   al,al
c001e7d5:	75 40                	jne    c001e817 <cleanerTaskFunction(void*)+0x8d>
c001e7d7:	83 ec 0c             	sub    esp,0xc
c001e7da:	68 10 1b 03 c0       	push   0xc0031b10
c001e7df:	e8 6a a2 00 00       	call   c0028a4e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e7e4:	c7 04 24 10 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b10
c001e7eb:	89 c3                	mov    ebx,eax
c001e7ed:	e8 80 a2 00 00       	call   c0028a72 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e7f2:	c7 04 24 e1 c3 02 c0 	mov    DWORD PTR [esp],0xc002c3e1
c001e7f9:	e8 36 47 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001e7fe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e801:	e8 bb fc ff ff       	call   c001e4c1 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e806:	c7 04 24 fa c3 02 c0 	mov    DWORD PTR [esp],0xc002c3fa
c001e80d:	e8 22 47 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001e812:	83 c4 10             	add    esp,0x10
c001e815:	eb ac                	jmp    c001e7c3 <cleanerTaskFunction(void*)+0x39>
c001e817:	e8 e0 f5 ff ff       	call   c001ddfc <unlockScheduler()>
c001e81c:	e8 9a f9 ff ff       	call   c001e1bb <unlockStuff()>
c001e821:	e8 d4 f5 ff ff       	call   c001ddfa <lockScheduler()>
c001e826:	80 3d ec 1a 03 c0 00 	cmp    BYTE PTR ds:0xc0031aec,0x0
c001e82d:	0f 84 72 ff ff ff    	je     c001e7a5 <cleanerTaskFunction(void*)+0x1b>
c001e833:	e8 c4 f5 ff ff       	call   c001ddfc <unlockScheduler()>
c001e838:	e9 75 ff ff ff       	jmp    c001e7b2 <cleanerTaskFunction(void*)+0x28>

c001e83d <terminateTask(int)>:
c001e83d:	83 ec 14             	sub    esp,0x14
c001e840:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e845:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e848:	83 c0 0c             	add    eax,0xc
c001e84b:	50                   	push   eax
c001e84c:	68 38 c7 02 c0       	push   0xc002c738
c001e851:	e8 de 46 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001e856:	e8 c6 f5 ff ff       	call   c001de21 <lockStuff()>
c001e85b:	e8 9a f5 ff ff       	call   c001ddfa <lockScheduler()>
c001e860:	c7 04 24 0d c4 02 c0 	mov    DWORD PTR [esp],0xc002c40d
c001e867:	e8 c8 46 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001e86c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e870:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e875:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e878:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e87d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e880:	5a                   	pop    edx
c001e881:	59                   	pop    ecx
c001e882:	50                   	push   eax
c001e883:	68 10 1b 03 c0       	push   0xc0031b10
c001e888:	e8 93 a2 00 00       	call   c0028b20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e88d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e892:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e899:	c7 04 24 27 c4 02 c0 	mov    DWORD PTR [esp],0xc002c427
c001e8a0:	e8 8f 46 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001e8a5:	83 c4 10             	add    esp,0x10
c001e8a8:	a1 e8 1a 03 c0       	mov    eax,ds:0xc0031ae8
c001e8ad:	85 c0                	test   eax,eax
c001e8af:	74 5a                	je     c001e90b <terminateTask(int)+0xce>
c001e8b1:	83 ec 0c             	sub    esp,0xc
c001e8b4:	68 41 c4 02 c0       	push   0xc002c441
c001e8b9:	e8 76 46 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001e8be:	58                   	pop    eax
c001e8bf:	c6 05 ec 1a 03 c0 01 	mov    BYTE PTR ds:0xc0031aec,0x1
c001e8c6:	ff 35 e8 1a 03 c0    	push   DWORD PTR ds:0xc0031ae8
c001e8cc:	e8 41 fb ff ff       	call   c001e412 <unblockTask(ThreadControlBlock*)>
c001e8d1:	c7 04 24 5b c4 02 c0 	mov    DWORD PTR [esp],0xc002c45b
c001e8d8:	e8 57 46 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001e8dd:	83 c4 10             	add    esp,0x10
c001e8e0:	e8 17 f5 ff ff       	call   c001ddfc <unlockScheduler()>
c001e8e5:	e8 d1 f8 ff ff       	call   c001e1bb <unlockStuff()>
c001e8ea:	83 ec 0c             	sub    esp,0xc
c001e8ed:	68 93 c4 02 c0       	push   0xc002c493
c001e8f2:	e8 3d 46 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001e8f7:	83 c4 10             	add    esp,0x10
c001e8fa:	e8 fb f4 ff ff       	call   c001ddfa <lockScheduler()>
c001e8ff:	e8 32 f8 ff ff       	call   c001e136 <schedule()>
c001e904:	e8 f3 f4 ff ff       	call   c001ddfc <unlockScheduler()>
c001e909:	eb ef                	jmp    c001e8fa <terminateTask(int)+0xbd>
c001e90b:	83 ec 0c             	sub    esp,0xc
c001e90e:	68 75 c4 02 c0       	push   0xc002c475
c001e913:	e8 1c 46 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001e918:	83 c4 10             	add    esp,0x10
c001e91b:	eb c3                	jmp    c001e8e0 <terminateTask(int)+0xa3>

c001e91d <Thr::terminateFromIRQ(int)>:
c001e91d:	83 ec 18             	sub    esp,0x18
c001e920:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e924:	e8 14 ff ff ff       	call   c001e83d <terminateTask(int)>
c001e929:	90                   	nop

c001e92a <Semaphore::release()>:
c001e92a:	83 ec 0c             	sub    esp,0xc
c001e92d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e931:	e8 eb f4 ff ff       	call   c001de21 <lockStuff()>
c001e936:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e939:	85 d2                	test   edx,edx
c001e93b:	74 1a                	je     c001e957 <Semaphore::release()+0x2d>
c001e93d:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001e940:	83 ec 0c             	sub    esp,0xc
c001e943:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e946:	52                   	push   edx
c001e947:	e8 c6 fa ff ff       	call   c001e412 <unblockTask(ThreadControlBlock*)>
c001e94c:	83 c4 10             	add    esp,0x10
c001e94f:	83 c4 0c             	add    esp,0xc
c001e952:	e9 64 f8 ff ff       	jmp    c001e1bb <unlockStuff()>
c001e957:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e95a:	83 c4 0c             	add    esp,0xc
c001e95d:	e9 59 f8 ff ff       	jmp    c001e1bb <unlockStuff()>

c001e962 <__static_initialization_and_destruction_0(int, int)>:
c001e962:	83 ec 0c             	sub    esp,0xc
c001e965:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e96a:	0f 85 88 00 00 00    	jne    c001e9f8 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e970:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e978:	75 7e                	jne    c001e9f8 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e97a:	83 ec 0c             	sub    esp,0xc
c001e97d:	68 28 1b 03 c0       	push   0xc0031b28
c001e982:	e8 49 a3 00 00       	call   c0028cd0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e987:	83 c4 10             	add    esp,0x10
c001e98a:	83 ec 04             	sub    esp,0x4
c001e98d:	68 f0 d4 02 c0       	push   0xc002d4f0
c001e992:	68 28 1b 03 c0       	push   0xc0031b28
c001e997:	68 90 8c 02 c0       	push   0xc0028c90
c001e99c:	e8 2d 44 ff ff       	call   c0012dce <__cxa_atexit>
c001e9a1:	83 c4 10             	add    esp,0x10
c001e9a4:	83 ec 0c             	sub    esp,0xc
c001e9a7:	68 1c 1b 03 c0       	push   0xc0031b1c
c001e9ac:	e8 1f a3 00 00       	call   c0028cd0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e9b1:	83 c4 10             	add    esp,0x10
c001e9b4:	83 ec 04             	sub    esp,0x4
c001e9b7:	68 f0 d4 02 c0       	push   0xc002d4f0
c001e9bc:	68 1c 1b 03 c0       	push   0xc0031b1c
c001e9c1:	68 90 8c 02 c0       	push   0xc0028c90
c001e9c6:	e8 03 44 ff ff       	call   c0012dce <__cxa_atexit>
c001e9cb:	83 c4 10             	add    esp,0x10
c001e9ce:	83 ec 0c             	sub    esp,0xc
c001e9d1:	68 10 1b 03 c0       	push   0xc0031b10
c001e9d6:	e8 f5 a2 00 00       	call   c0028cd0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e9db:	83 c4 10             	add    esp,0x10
c001e9de:	83 ec 04             	sub    esp,0x4
c001e9e1:	68 f0 d4 02 c0       	push   0xc002d4f0
c001e9e6:	68 10 1b 03 c0       	push   0xc0031b10
c001e9eb:	68 90 8c 02 c0       	push   0xc0028c90
c001e9f0:	e8 d9 43 ff ff       	call   c0012dce <__cxa_atexit>
c001e9f5:	83 c4 10             	add    esp,0x10
c001e9f8:	90                   	nop
c001e9f9:	83 c4 0c             	add    esp,0xc
c001e9fc:	c3                   	ret    

c001e9fd <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e9fd:	83 ec 0c             	sub    esp,0xc
c001ea00:	83 ec 08             	sub    esp,0x8
c001ea03:	68 ff ff 00 00       	push   0xffff
c001ea08:	6a 01                	push   0x1
c001ea0a:	e8 53 ff ff ff       	call   c001e962 <__static_initialization_and_destruction_0(int, int)>
c001ea0f:	83 c4 10             	add    esp,0x10
c001ea12:	83 c4 0c             	add    esp,0xc
c001ea15:	c3                   	ret    

c001ea16 <Vm::inbv(unsigned short)>:
c001ea16:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ea1a:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ea1f:	75 06                	jne    c001ea27 <Vm::inbv(unsigned short)+0x11>
c001ea21:	a0 6c 1b 03 c0       	mov    al,ds:0xc0031b6c
c001ea26:	c3                   	ret    
c001ea27:	ec                   	in     al,dx
c001ea28:	c3                   	ret    

c001ea29 <Vm::outbv(unsigned short, unsigned char)>:
c001ea29:	53                   	push   ebx
c001ea2a:	83 ec 08             	sub    esp,0x8
c001ea2d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ea31:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ea35:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ea3a:	75 38                	jne    c001ea74 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001ea3c:	0f b6 c3             	movzx  eax,bl
c001ea3f:	51                   	push   ecx
c001ea40:	51                   	push   ecx
c001ea41:	50                   	push   eax
c001ea42:	68 57 c7 02 c0       	push   0xc002c757
c001ea47:	e8 e8 44 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001ea4c:	8b 15 6c 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b6c
c001ea52:	83 c4 10             	add    esp,0x10
c001ea55:	8d 42 01             	lea    eax,[edx+0x1]
c001ea58:	88 9a 80 1b 03 c0    	mov    BYTE PTR [edx-0x3ffce480],bl
c001ea5e:	a3 6c 1b 03 c0       	mov    ds:0xc0031b6c,eax
c001ea63:	83 f8 20             	cmp    eax,0x20
c001ea66:	75 0f                	jne    c001ea77 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001ea68:	c7 05 6c 1b 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0031b6c,0x1f
c001ea72:	eb 03                	jmp    c001ea77 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001ea74:	88 d8                	mov    al,bl
c001ea76:	ee                   	out    dx,al
c001ea77:	83 c4 08             	add    esp,0x8
c001ea7a:	5b                   	pop    ebx
c001ea7b:	c3                   	ret    

c001ea7c <Vm::realToLinear(unsigned short, unsigned short)>:
c001ea7c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ea81:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ea86:	c1 e0 04             	shl    eax,0x4
c001ea89:	01 d0                	add    eax,edx
c001ea8b:	c3                   	ret    

c001ea8c <Vm::getSegment(unsigned int)>:
c001ea8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea90:	c1 e8 10             	shr    eax,0x10
c001ea93:	c3                   	ret    

c001ea94 <Vm::getOffset(unsigned int)>:
c001ea94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea98:	c3                   	ret    

c001ea99 <Vm::mainloop2()>:
c001ea99:	83 ec 0c             	sub    esp,0xc
c001ea9c:	e8 59 f3 ff ff       	call   c001ddfa <lockScheduler()>
c001eaa1:	83 ec 0c             	sub    esp,0xc
c001eaa4:	c6 05 65 1b 03 c0 01 	mov    BYTE PTR ds:0xc0031b65,0x1
c001eaab:	6a 02                	push   0x2
c001eaad:	e8 9c f7 ff ff       	call   c001e24e <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eab2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eab7:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001eabb:	52                   	push   edx
c001eabc:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001eac0:	52                   	push   edx
c001eac1:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001eac5:	52                   	push   edx
c001eac6:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001eaca:	50                   	push   eax
c001eacb:	e8 2a 18 fe ff       	call   c00002fa <goToVM86>
c001ead0:	83 c4 2c             	add    esp,0x2c
c001ead3:	c3                   	ret    

c001ead4 <Vm::mainVm8086Loop(void*)>:
c001ead4:	83 ec 0c             	sub    esp,0xc
c001ead7:	e8 20 f3 ff ff       	call   c001ddfc <unlockScheduler()>
c001eadc:	83 c4 0c             	add    esp,0xc
c001eadf:	eb b8                	jmp    c001ea99 <Vm::mainloop2()>

c001eae1 <Vm::mainloop3(unsigned long)>:
c001eae1:	53                   	push   ebx
c001eae2:	83 ec 08             	sub    esp,0x8
c001eae5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eae9:	e8 0c f3 ff ff       	call   c001ddfa <lockScheduler()>
c001eaee:	83 ec 0c             	sub    esp,0xc
c001eaf1:	89 1d 60 1b 03 c0    	mov    DWORD PTR ds:0xc0031b60,ebx
c001eaf7:	6a 02                	push   0x2
c001eaf9:	c6 05 64 1b 03 c0 01 	mov    BYTE PTR ds:0xc0031b64,0x1
c001eb00:	e8 49 f7 ff ff       	call   c001e24e <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eb05:	83 c4 18             	add    esp,0x18
c001eb08:	5b                   	pop    ebx
c001eb09:	eb 8e                	jmp    c001ea99 <Vm::mainloop2()>

c001eb0b <Vm::initialise8086()>:
c001eb0b:	83 ec 0c             	sub    esp,0xc
c001eb0e:	68 80 00 00 00       	push   0x80
c001eb13:	6a 00                	push   0x0
c001eb15:	68 d4 ea 01 c0       	push   0xc001ead4
c001eb1a:	ff 35 34 1b 03 c0    	push   DWORD PTR ds:0xc0031b34
c001eb20:	e8 07 f4 ff ff       	call   c001df2c <Process::createThread(void (*)(void*), void*, int)>
c001eb25:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001eb2c:	a3 68 1b 03 c0       	mov    ds:0xc0031b68,eax
c001eb31:	68 00 01 00 00       	push   0x100
c001eb36:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001eb3b:	6a 00                	push   0x0
c001eb3d:	6a 00                	push   0x0
c001eb3f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001eb45:	e8 0c 3b ff ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001eb4a:	83 c4 2c             	add    esp,0x2c
c001eb4d:	c3                   	ret    

c001eb4e <Vm::finish8086()>:
c001eb4e:	53                   	push   ebx
c001eb4f:	83 ec 08             	sub    esp,0x8
c001eb52:	e8 a3 f2 ff ff       	call   c001ddfa <lockScheduler()>
c001eb57:	80 3d 64 1b 03 c0 00 	cmp    BYTE PTR ds:0xc0031b64,0x0
c001eb5e:	75 0c                	jne    c001eb6c <Vm::finish8086()+0x1e>
c001eb60:	e8 d1 f5 ff ff       	call   c001e136 <schedule()>
c001eb65:	e8 92 f2 ff ff       	call   c001ddfc <unlockScheduler()>
c001eb6a:	eb e6                	jmp    c001eb52 <Vm::finish8086()+0x4>
c001eb6c:	83 ec 0c             	sub    esp,0xc
c001eb6f:	8b 1d 60 1b 03 c0    	mov    ebx,DWORD PTR ds:0xc0031b60
c001eb75:	ff 35 68 1b 03 c0    	push   DWORD PTR ds:0xc0031b68
c001eb7b:	c6 05 64 1b 03 c0 00 	mov    BYTE PTR ds:0xc0031b64,0x0
c001eb82:	e8 8b f8 ff ff       	call   c001e412 <unblockTask(ThreadControlBlock*)>
c001eb87:	e8 70 f2 ff ff       	call   c001ddfc <unlockScheduler()>
c001eb8c:	89 d8                	mov    eax,ebx
c001eb8e:	83 c4 18             	add    esp,0x18
c001eb91:	5b                   	pop    ebx
c001eb92:	c3                   	ret    

c001eb93 <Vm::getOutput8086(unsigned char*)>:
c001eb93:	83 ec 10             	sub    esp,0x10
c001eb96:	ff 35 6c 1b 03 c0    	push   DWORD PTR ds:0xc0031b6c
c001eb9c:	68 80 1b 03 c0       	push   0xc0031b80
c001eba1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eba5:	e8 9a 1b fe ff       	call   c0000744 <memcpy>
c001ebaa:	a1 6c 1b 03 c0       	mov    eax,ds:0xc0031b6c
c001ebaf:	c7 05 6c 1b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031b6c,0x0
c001ebb9:	83 c4 1c             	add    esp,0x1c
c001ebbc:	c3                   	ret    

c001ebbd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001ebbd:	55                   	push   ebp
c001ebbe:	57                   	push   edi
c001ebbf:	56                   	push   esi
c001ebc0:	53                   	push   ebx
c001ebc1:	83 ec 2c             	sub    esp,0x2c
c001ebc4:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ebc8:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001ebcc:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001ebd0:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ebd4:	e8 21 f2 ff ff       	call   c001ddfa <lockScheduler()>
c001ebd9:	a0 65 1b 03 c0       	mov    al,ds:0xc0031b65
c001ebde:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ebe2:	84 c0                	test   al,al
c001ebe4:	75 0c                	jne    c001ebf2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001ebe6:	e8 4b f5 ff ff       	call   c001e136 <schedule()>
c001ebeb:	e8 0c f2 ff ff       	call   c001ddfc <unlockScheduler()>
c001ebf0:	eb e2                	jmp    c001ebd4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ebf2:	a1 68 1b 03 c0       	mov    eax,ds:0xc0031b68
c001ebf7:	c7 05 6c 1b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031b6c,0x0
c001ec01:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001ec05:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001ec09:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001ec0d:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001ec11:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ec15:	50                   	push   eax
c001ec16:	6a 20                	push   0x20
c001ec18:	6a 00                	push   0x0
c001ec1a:	68 80 1b 03 c0       	push   0xc0031b80
c001ec1f:	e8 54 1b fe ff       	call   c0000778 <memset>
c001ec24:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ec2b:	e8 10 0c ff ff       	call   c000f840 <malloc>
c001ec30:	83 c4 0c             	add    esp,0xc
c001ec33:	89 c7                	mov    edi,eax
c001ec35:	ff 35 34 1b 03 c0    	push   DWORD PTR ds:0xc0031b34
c001ec3b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ec3f:	50                   	push   eax
c001ec40:	e8 47 48 ff ff       	call   c001348c <File::File(char const*, Process*)>
c001ec45:	83 c4 10             	add    esp,0x10
c001ec48:	85 ff                	test   edi,edi
c001ec4a:	75 0a                	jne    c001ec56 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001ec4c:	83 ec 0c             	sub    esp,0xc
c001ec4f:	68 73 c7 02 c0       	push   0xc002c773
c001ec54:	eb 27                	jmp    c001ec7d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001ec56:	50                   	push   eax
c001ec57:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ec5b:	50                   	push   eax
c001ec5c:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ec60:	50                   	push   eax
c001ec61:	57                   	push   edi
c001ec62:	e8 35 4b ff ff       	call   c001379c <File::stat(unsigned long long*, bool*)>
c001ec67:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001ec6c:	83 c4 10             	add    esp,0x10
c001ec6f:	89 e8                	mov    eax,ebp
c001ec71:	84 c0                	test   al,al
c001ec73:	74 19                	je     c001ec8e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001ec75:	83 ec 0c             	sub    esp,0xc
c001ec78:	68 87 c7 02 c0       	push   0xc002c787
c001ec7d:	e8 53 b9 ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c001ec82:	31 ed                	xor    ebp,ebp
c001ec84:	e8 73 f1 ff ff       	call   c001ddfc <unlockScheduler()>
c001ec89:	83 c4 10             	add    esp,0x10
c001ec8c:	eb 75                	jmp    c001ed03 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ec8e:	50                   	push   eax
c001ec8f:	50                   	push   eax
c001ec90:	6a 01                	push   0x1
c001ec92:	57                   	push   edi
c001ec93:	e8 58 48 ff ff       	call   c00134f0 <File::open(FileOpenMode)>
c001ec98:	83 c4 10             	add    esp,0x10
c001ec9b:	85 c0                	test   eax,eax
c001ec9d:	74 17                	je     c001ecb6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001ec9f:	83 ec 0c             	sub    esp,0xc
c001eca2:	68 a0 c7 02 c0       	push   0xc002c7a0
c001eca7:	e8 29 b9 ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c001ecac:	e8 4b f1 ff ff       	call   c001ddfc <unlockScheduler()>
c001ecb1:	83 c4 10             	add    esp,0x10
c001ecb4:	eb 4d                	jmp    c001ed03 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ecb6:	0f b7 f6             	movzx  esi,si
c001ecb9:	50                   	push   eax
c001ecba:	0f b7 db             	movzx  ebx,bx
c001ecbd:	50                   	push   eax
c001ecbe:	56                   	push   esi
c001ecbf:	53                   	push   ebx
c001ecc0:	e8 b7 fd ff ff       	call   c001ea7c <Vm::realToLinear(unsigned short, unsigned short)>
c001ecc5:	5a                   	pop    edx
c001ecc6:	8b 17                	mov    edx,DWORD PTR [edi]
c001ecc8:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001eccc:	51                   	push   ecx
c001eccd:	50                   	push   eax
c001ecce:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ecd2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ecd6:	57                   	push   edi
c001ecd7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ecda:	83 c4 14             	add    esp,0x14
c001ecdd:	57                   	push   edi
c001ecde:	e8 6b 48 ff ff       	call   c001354e <File::close()>
c001ece3:	c6 05 65 1b 03 c0 00 	mov    BYTE PTR ds:0xc0031b65,0x0
c001ecea:	e8 0d f1 ff ff       	call   c001ddfc <unlockScheduler()>
c001ecef:	59                   	pop    ecx
c001ecf0:	ff 35 68 1b 03 c0    	push   DWORD PTR ds:0xc0031b68
c001ecf6:	e8 17 f7 ff ff       	call   c001e412 <unblockTask(ThreadControlBlock*)>
c001ecfb:	83 c4 10             	add    esp,0x10
c001ecfe:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001ed03:	83 c4 2c             	add    esp,0x2c
c001ed06:	89 e8                	mov    eax,ebp
c001ed08:	5b                   	pop    ebx
c001ed09:	5e                   	pop    esi
c001ed0a:	5f                   	pop    edi
c001ed0b:	5d                   	pop    ebp
c001ed0c:	c3                   	ret    

c001ed0d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001ed0d:	57                   	push   edi
c001ed0e:	56                   	push   esi
c001ed0f:	53                   	push   ebx
c001ed10:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ed14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed18:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ed1c:	83 e8 06             	sub    eax,0x6
c001ed1f:	0f b7 c0             	movzx  eax,ax
c001ed22:	50                   	push   eax
c001ed23:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001ed28:	50                   	push   eax
c001ed29:	e8 4e fd ff ff       	call   c001ea7c <Vm::realToLinear(unsigned short, unsigned short)>
c001ed2e:	5a                   	pop    edx
c001ed2f:	5e                   	pop    esi
c001ed30:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001ed33:	8d 56 fa             	lea    edx,[esi-0x6]
c001ed36:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ed3c:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001ed3f:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001ed42:	83 c2 02             	add    edx,0x2
c001ed45:	66 89 10             	mov    WORD PTR [eax],dx
c001ed48:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001ed4b:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001ed4f:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001ed52:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001ed56:	89 d6                	mov    esi,edx
c001ed58:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001ed5e:	66 81 e6 ff fd       	and    si,0xfdff
c001ed63:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001ed67:	74 07                	je     c001ed70 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001ed69:	89 d6                	mov    esi,edx
c001ed6b:	66 81 ce 00 02       	or     si,0x200
c001ed70:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001ed74:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ed79:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ed7d:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001ed85:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001ed88:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001ed90:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001ed93:	5b                   	pop    ebx
c001ed94:	5e                   	pop    esi
c001ed95:	5f                   	pop    edi
c001ed96:	c3                   	ret    

c001ed97 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001ed97:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed9c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eda1:	c1 e0 04             	shl    eax,0x4
c001eda4:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001eda7:	c3                   	ret    

c001eda8 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001eda8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edad:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edb2:	c1 e0 04             	shl    eax,0x4
c001edb5:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001edb9:	c3                   	ret    

c001edba <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001edba:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edbf:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edc4:	c1 e0 04             	shl    eax,0x4
c001edc7:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001edca:	c3                   	ret    

c001edcb <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001edcb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edd0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edd5:	c1 e0 04             	shl    eax,0x4
c001edd8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eddc:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001eddf:	c3                   	ret    

c001ede0 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001ede0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ede5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edea:	c1 e0 04             	shl    eax,0x4
c001eded:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001edf1:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001edf5:	c3                   	ret    

c001edf6 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001edf6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edfb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee00:	c1 e0 04             	shl    eax,0x4
c001ee03:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee07:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001ee0a:	c3                   	ret    

c001ee0b <Vm::faultHandler(regs*)>:
c001ee0b:	55                   	push   ebp
c001ee0c:	57                   	push   edi
c001ee0d:	56                   	push   esi
c001ee0e:	53                   	push   ebx
c001ee0f:	83 ec 1c             	sub    esp,0x1c
c001ee12:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ee16:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001ee19:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001ee1c:	0f b7 c1             	movzx  eax,cx
c001ee1f:	50                   	push   eax
c001ee20:	0f b7 c3             	movzx  eax,bx
c001ee23:	c1 e3 04             	shl    ebx,0x4
c001ee26:	50                   	push   eax
c001ee27:	e8 50 fc ff ff       	call   c001ea7c <Vm::realToLinear(unsigned short, unsigned short)>
c001ee2c:	5a                   	pop    edx
c001ee2d:	89 c5                	mov    ebp,eax
c001ee2f:	5e                   	pop    esi
c001ee30:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001ee34:	50                   	push   eax
c001ee35:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001ee39:	50                   	push   eax
c001ee3a:	e8 3d fc ff ff       	call   c001ea7c <Vm::realToLinear(unsigned short, unsigned short)>
c001ee3f:	01 cb                	add    ebx,ecx
c001ee41:	89 c6                	mov    esi,eax
c001ee43:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001ee47:	50                   	push   eax
c001ee48:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee4c:	50                   	push   eax
c001ee4d:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ee51:	50                   	push   eax
c001ee52:	55                   	push   ebp
c001ee53:	53                   	push   ebx
c001ee54:	b3 06                	mov    bl,0x6
c001ee56:	68 b9 c7 02 c0       	push   0xc002c7b9
c001ee5b:	e8 d4 40 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001ee60:	83 c4 20             	add    esp,0x20
c001ee63:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001ee68:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ee6d:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ee71:	3c 9d                	cmp    al,0x9d
c001ee73:	0f 84 d7 02 00 00    	je     c001f150 <Vm::faultHandler(regs*)+0x345>
c001ee79:	0f 87 a3 00 00 00    	ja     c001ef22 <Vm::faultHandler(regs*)+0x117>
c001ee7f:	3c 66                	cmp    al,0x66
c001ee81:	0f 84 15 02 00 00    	je     c001f09c <Vm::faultHandler(regs*)+0x291>
c001ee87:	77 5f                	ja     c001eee8 <Vm::faultHandler(regs*)+0xdd>
c001ee89:	3c 36                	cmp    al,0x36
c001ee8b:	0f 84 f1 01 00 00    	je     c001f082 <Vm::faultHandler(regs*)+0x277>
c001ee91:	77 28                	ja     c001eebb <Vm::faultHandler(regs*)+0xb0>
c001ee93:	3c 26                	cmp    al,0x26
c001ee95:	0f 84 99 01 00 00    	je     c001f034 <Vm::faultHandler(regs*)+0x229>
c001ee9b:	3c 2e                	cmp    al,0x2e
c001ee9d:	0f 85 3b 07 00 00    	jne    c001f5de <Vm::faultHandler(regs*)+0x7d3>
c001eea3:	83 ec 0c             	sub    esp,0xc
c001eea6:	31 db                	xor    ebx,ebx
c001eea8:	68 ce c7 02 c0       	push   0xc002c7ce
c001eead:	e8 82 40 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001eeb2:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eeb5:	83 c4 10             	add    esp,0x10
c001eeb8:	45                   	inc    ebp
c001eeb9:	eb b2                	jmp    c001ee6d <Vm::faultHandler(regs*)+0x62>
c001eebb:	3c 64                	cmp    al,0x64
c001eebd:	0f 84 8b 01 00 00    	je     c001f04e <Vm::faultHandler(regs*)+0x243>
c001eec3:	0f 87 9f 01 00 00    	ja     c001f068 <Vm::faultHandler(regs*)+0x25d>
c001eec9:	3c 3e                	cmp    al,0x3e
c001eecb:	0f 85 0d 07 00 00    	jne    c001f5de <Vm::faultHandler(regs*)+0x7d3>
c001eed1:	83 ec 0c             	sub    esp,0xc
c001eed4:	b3 01                	mov    bl,0x1
c001eed6:	68 d2 c7 02 c0       	push   0xc002c7d2
c001eedb:	e8 54 40 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001eee0:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eee3:	83 c4 10             	add    esp,0x10
c001eee6:	eb d0                	jmp    c001eeb8 <Vm::faultHandler(regs*)+0xad>
c001eee8:	3c 6d                	cmp    al,0x6d
c001eeea:	0f 84 af 03 00 00    	je     c001f29f <Vm::faultHandler(regs*)+0x494>
c001eef0:	77 15                	ja     c001ef07 <Vm::faultHandler(regs*)+0xfc>
c001eef2:	3c 67                	cmp    al,0x67
c001eef4:	0f 84 bf 01 00 00    	je     c001f0b9 <Vm::faultHandler(regs*)+0x2ae>
c001eefa:	3c 6c                	cmp    al,0x6c
c001eefc:	0f 84 3f 03 00 00    	je     c001f241 <Vm::faultHandler(regs*)+0x436>
c001ef02:	e9 d7 06 00 00       	jmp    c001f5de <Vm::faultHandler(regs*)+0x7d3>
c001ef07:	3c 6f                	cmp    al,0x6f
c001ef09:	0f 84 a4 04 00 00    	je     c001f3b3 <Vm::faultHandler(regs*)+0x5a8>
c001ef0f:	0f 82 11 04 00 00    	jb     c001f326 <Vm::faultHandler(regs*)+0x51b>
c001ef15:	3c 9c                	cmp    al,0x9c
c001ef17:	0f 84 ba 01 00 00    	je     c001f0d7 <Vm::faultHandler(regs*)+0x2cc>
c001ef1d:	e9 bc 06 00 00       	jmp    c001f5de <Vm::faultHandler(regs*)+0x7d3>
c001ef22:	3c ec                	cmp    al,0xec
c001ef24:	0f 84 24 06 00 00    	je     c001f54e <Vm::faultHandler(regs*)+0x743>
c001ef2a:	0f 87 93 00 00 00    	ja     c001efc3 <Vm::faultHandler(regs*)+0x1b8>
c001ef30:	3c e4                	cmp    al,0xe4
c001ef32:	0f 84 5c 05 00 00    	je     c001f494 <Vm::faultHandler(regs*)+0x689>
c001ef38:	77 6a                	ja     c001efa4 <Vm::faultHandler(regs*)+0x199>
c001ef3a:	3c cd                	cmp    al,0xcd
c001ef3c:	0f 84 7e 02 00 00    	je     c001f1c0 <Vm::faultHandler(regs*)+0x3b5>
c001ef42:	3c cf                	cmp    al,0xcf
c001ef44:	0f 85 94 06 00 00    	jne    c001f5de <Vm::faultHandler(regs*)+0x7d3>
c001ef4a:	83 ec 0c             	sub    esp,0xc
c001ef4d:	68 16 c8 02 c0       	push   0xc002c816
c001ef52:	e8 dd 3f ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001ef57:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001ef5a:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001ef5d:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001ef61:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001ef64:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001ef68:	0d 00 02 02 00       	or     eax,0x20200
c001ef6d:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001ef70:	56                   	push   esi
c001ef71:	53                   	push   ebx
c001ef72:	52                   	push   edx
c001ef73:	68 1c c8 02 c0       	push   0xc002c81c
c001ef78:	e8 b7 3f ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001ef7d:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001ef81:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ef87:	66 c1 e8 09          	shr    ax,0x9
c001ef8b:	83 e0 01             	and    eax,0x1
c001ef8e:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ef91:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001ef94:	83 c0 06             	add    eax,0x6
c001ef97:	25 ff ff 00 00       	and    eax,0xffff
c001ef9c:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001ef9f:	e9 95 02 00 00       	jmp    c001f239 <Vm::faultHandler(regs*)+0x42e>
c001efa4:	3c e6                	cmp    al,0xe6
c001efa6:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001efaa:	0f 84 4e 05 00 00    	je     c001f4fe <Vm::faultHandler(regs*)+0x6f3>
c001efb0:	0f 82 0a 05 00 00    	jb     c001f4c0 <Vm::faultHandler(regs*)+0x6b5>
c001efb6:	3c e7                	cmp    al,0xe7
c001efb8:	0f 84 69 05 00 00    	je     c001f527 <Vm::faultHandler(regs*)+0x71c>
c001efbe:	e9 1b 06 00 00       	jmp    c001f5de <Vm::faultHandler(regs*)+0x7d3>
c001efc3:	3c ef                	cmp    al,0xef
c001efc5:	0f 84 e6 05 00 00    	je     c001f5b1 <Vm::faultHandler(regs*)+0x7a6>
c001efcb:	77 37                	ja     c001f004 <Vm::faultHandler(regs*)+0x1f9>
c001efcd:	3c ed                	cmp    al,0xed
c001efcf:	0f 84 a3 05 00 00    	je     c001f578 <Vm::faultHandler(regs*)+0x76d>
c001efd5:	3c ee                	cmp    al,0xee
c001efd7:	0f 85 01 06 00 00    	jne    c001f5de <Vm::faultHandler(regs*)+0x7d3>
c001efdd:	52                   	push   edx
c001efde:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001efe1:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001efe4:	68 b7 c8 02 c0       	push   0xc002c8b7
c001efe9:	e8 46 3f ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001efee:	59                   	pop    ecx
c001efef:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001eff3:	5b                   	pop    ebx
c001eff4:	50                   	push   eax
c001eff5:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001eff9:	50                   	push   eax
c001effa:	e8 2a fa ff ff       	call   c001ea29 <Vm::outbv(unsigned short, unsigned char)>
c001efff:	e9 a5 05 00 00       	jmp    c001f5a9 <Vm::faultHandler(regs*)+0x79e>
c001f004:	3c fa                	cmp    al,0xfa
c001f006:	0f 84 f7 01 00 00    	je     c001f203 <Vm::faultHandler(regs*)+0x3f8>
c001f00c:	3c fb                	cmp    al,0xfb
c001f00e:	0f 84 0a 02 00 00    	je     c001f21e <Vm::faultHandler(regs*)+0x413>
c001f014:	3c f3                	cmp    al,0xf3
c001f016:	0f 85 c2 05 00 00    	jne    c001f5de <Vm::faultHandler(regs*)+0x7d3>
c001f01c:	83 ec 0c             	sub    esp,0xc
c001f01f:	68 ef c7 02 c0       	push   0xc002c7ef
c001f024:	e8 0b 3f ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001f029:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f02c:	83 c4 10             	add    esp,0x10
c001f02f:	e9 84 fe ff ff       	jmp    c001eeb8 <Vm::faultHandler(regs*)+0xad>
c001f034:	83 ec 0c             	sub    esp,0xc
c001f037:	b3 02                	mov    bl,0x2
c001f039:	68 ca c7 02 c0       	push   0xc002c7ca
c001f03e:	e8 f1 3e ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001f043:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f046:	83 c4 10             	add    esp,0x10
c001f049:	e9 6a fe ff ff       	jmp    c001eeb8 <Vm::faultHandler(regs*)+0xad>
c001f04e:	83 ec 0c             	sub    esp,0xc
c001f051:	b3 03                	mov    bl,0x3
c001f053:	68 d6 c7 02 c0       	push   0xc002c7d6
c001f058:	e8 d7 3e ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001f05d:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f060:	83 c4 10             	add    esp,0x10
c001f063:	e9 50 fe ff ff       	jmp    c001eeb8 <Vm::faultHandler(regs*)+0xad>
c001f068:	83 ec 0c             	sub    esp,0xc
c001f06b:	b3 04                	mov    bl,0x4
c001f06d:	68 da c7 02 c0       	push   0xc002c7da
c001f072:	e8 bd 3e ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001f077:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f07a:	83 c4 10             	add    esp,0x10
c001f07d:	e9 36 fe ff ff       	jmp    c001eeb8 <Vm::faultHandler(regs*)+0xad>
c001f082:	83 ec 0c             	sub    esp,0xc
c001f085:	b3 05                	mov    bl,0x5
c001f087:	68 de c7 02 c0       	push   0xc002c7de
c001f08c:	e8 a3 3e ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001f091:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f094:	83 c4 10             	add    esp,0x10
c001f097:	e9 1c fe ff ff       	jmp    c001eeb8 <Vm::faultHandler(regs*)+0xad>
c001f09c:	83 ec 0c             	sub    esp,0xc
c001f09f:	68 e2 c7 02 c0       	push   0xc002c7e2
c001f0a4:	e8 8b 3e ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001f0a9:	83 c4 10             	add    esp,0x10
c001f0ac:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0af:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f0b4:	e9 ff fd ff ff       	jmp    c001eeb8 <Vm::faultHandler(regs*)+0xad>
c001f0b9:	50                   	push   eax
c001f0ba:	50                   	push   eax
c001f0bb:	6a 01                	push   0x1
c001f0bd:	68 e7 c7 02 c0       	push   0xc002c7e7
c001f0c2:	e8 6d 3e ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001f0c7:	83 c4 10             	add    esp,0x10
c001f0ca:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0cd:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f0d2:	e9 e1 fd ff ff       	jmp    c001eeb8 <Vm::faultHandler(regs*)+0xad>
c001f0d7:	83 ec 0c             	sub    esp,0xc
c001f0da:	68 f5 c7 02 c0       	push   0xc002c7f5
c001f0df:	e8 50 3e ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001f0e4:	83 c4 10             	add    esp,0x10
c001f0e7:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f0ea:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f0ef:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f0f2:	74 2f                	je     c001f123 <Vm::faultHandler(regs*)+0x318>
c001f0f4:	83 ea 04             	sub    edx,0x4
c001f0f7:	25 ff 0d 00 00       	and    eax,0xdff
c001f0fc:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f102:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f105:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f108:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f10e:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f112:	0f 84 bf 04 00 00    	je     c001f5d7 <Vm::faultHandler(regs*)+0x7cc>
c001f118:	80 cc 02             	or     ah,0x2
c001f11b:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f11e:	e9 b4 04 00 00       	jmp    c001f5d7 <Vm::faultHandler(regs*)+0x7cc>
c001f123:	83 ea 02             	sub    edx,0x2
c001f126:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f12c:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f12f:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f133:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f139:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f13d:	74 05                	je     c001f144 <Vm::faultHandler(regs*)+0x339>
c001f13f:	80 cc 02             	or     ah,0x2
c001f142:	eb 03                	jmp    c001f147 <Vm::faultHandler(regs*)+0x33c>
c001f144:	80 e4 fd             	and    ah,0xfd
c001f147:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f14b:	e9 87 04 00 00       	jmp    c001f5d7 <Vm::faultHandler(regs*)+0x7cc>
c001f150:	83 ec 0c             	sub    esp,0xc
c001f153:	68 fc c7 02 c0       	push   0xc002c7fc
c001f158:	e8 d7 3d ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001f15d:	83 c4 10             	add    esp,0x10
c001f160:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f165:	74 28                	je     c001f18f <Vm::faultHandler(regs*)+0x384>
c001f167:	8b 06                	mov    eax,DWORD PTR [esi]
c001f169:	25 ff 0d 00 00       	and    eax,0xdff
c001f16e:	0d 00 02 02 00       	or     eax,0x20200
c001f173:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f176:	8b 06                	mov    eax,DWORD PTR [esi]
c001f178:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f17e:	c1 e8 09             	shr    eax,0x9
c001f181:	83 e0 01             	and    eax,0x1
c001f184:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f187:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f18a:	83 c0 04             	add    eax,0x4
c001f18d:	eb 24                	jmp    c001f1b3 <Vm::faultHandler(regs*)+0x3a8>
c001f18f:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f192:	0d 00 02 02 00       	or     eax,0x20200
c001f197:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f19a:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f19d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f1a3:	66 c1 e8 09          	shr    ax,0x9
c001f1a7:	83 e0 01             	and    eax,0x1
c001f1aa:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f1ad:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f1b0:	83 c0 02             	add    eax,0x2
c001f1b3:	25 ff ff 00 00       	and    eax,0xffff
c001f1b8:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f1bb:	e9 17 04 00 00       	jmp    c001f5d7 <Vm::faultHandler(regs*)+0x7cc>
c001f1c0:	53                   	push   ebx
c001f1c1:	53                   	push   ebx
c001f1c2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f1c6:	50                   	push   eax
c001f1c7:	68 02 c8 02 c0       	push   0xc002c802
c001f1cc:	e8 63 3d ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001f1d1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f1d5:	83 c4 10             	add    esp,0x10
c001f1d8:	3c ee                	cmp    al,0xee
c001f1da:	75 10                	jne    c001f1ec <Vm::faultHandler(regs*)+0x3e1>
c001f1dc:	83 ec 0c             	sub    esp,0xc
c001f1df:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f1e2:	e8 fa f8 ff ff       	call   c001eae1 <Vm::mainloop3(unsigned long)>
c001f1e7:	e9 c0 03 00 00       	jmp    c001f5ac <Vm::faultHandler(regs*)+0x7a1>
c001f1ec:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f1f0:	83 ec 0c             	sub    esp,0xc
c001f1f3:	53                   	push   ebx
c001f1f4:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f1f8:	53                   	push   ebx
c001f1f9:	55                   	push   ebp
c001f1fa:	50                   	push   eax
c001f1fb:	57                   	push   edi
c001f1fc:	e8 0c fb ff ff       	call   c001ed0d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f201:	eb 36                	jmp    c001f239 <Vm::faultHandler(regs*)+0x42e>
c001f203:	83 ec 0c             	sub    esp,0xc
c001f206:	68 0c c8 02 c0       	push   0xc002c80c
c001f20b:	e8 24 3d ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001f210:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f215:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f219:	e9 8b 03 00 00       	jmp    c001f5a9 <Vm::faultHandler(regs*)+0x79e>
c001f21e:	83 ec 0c             	sub    esp,0xc
c001f221:	68 11 c8 02 c0       	push   0xc002c811
c001f226:	e8 09 3d ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001f22b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f230:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f234:	e9 70 03 00 00       	jmp    c001f5a9 <Vm::faultHandler(regs*)+0x79e>
c001f239:	83 c4 20             	add    esp,0x20
c001f23c:	e9 99 03 00 00       	jmp    c001f5da <Vm::faultHandler(regs*)+0x7cf>
c001f241:	83 ec 0c             	sub    esp,0xc
c001f244:	68 4f c8 02 c0       	push   0xc002c84f
c001f249:	e8 e6 3c ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001f24e:	83 c4 10             	add    esp,0x10
c001f251:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f254:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f259:	74 0d                	je     c001f268 <Vm::faultHandler(regs*)+0x45d>
c001f25b:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f262:	0f 87 9e 01 00 00    	ja     c001f406 <Vm::faultHandler(regs*)+0x5fb>
c001f268:	83 ec 0c             	sub    esp,0xc
c001f26b:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f26f:	0f b7 db             	movzx  ebx,bx
c001f272:	50                   	push   eax
c001f273:	e8 9e f7 ff ff       	call   c001ea16 <Vm::inbv(unsigned short)>
c001f278:	83 c4 0c             	add    esp,0xc
c001f27b:	0f b6 c0             	movzx  eax,al
c001f27e:	50                   	push   eax
c001f27f:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f283:	50                   	push   eax
c001f284:	53                   	push   ebx
c001f285:	e8 41 fb ff ff       	call   c001edcb <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f28a:	83 c4 10             	add    esp,0x10
c001f28d:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f290:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f294:	74 03                	je     c001f299 <Vm::faultHandler(regs*)+0x48e>
c001f296:	48                   	dec    eax
c001f297:	eb 01                	jmp    c001f29a <Vm::faultHandler(regs*)+0x48f>
c001f299:	40                   	inc    eax
c001f29a:	0f b7 c0             	movzx  eax,ax
c001f29d:	eb 7f                	jmp    c001f31e <Vm::faultHandler(regs*)+0x513>
c001f29f:	83 ec 0c             	sub    esp,0xc
c001f2a2:	68 81 c8 02 c0       	push   0xc002c881
c001f2a7:	e8 88 3c ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001f2ac:	83 c4 10             	add    esp,0x10
c001f2af:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f2b2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f2b7:	74 0d                	je     c001f2c6 <Vm::faultHandler(regs*)+0x4bb>
c001f2b9:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f2c0:	0f 87 40 01 00 00    	ja     c001f406 <Vm::faultHandler(regs*)+0x5fb>
c001f2c6:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f2c9:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f2cd:	0f b7 db             	movzx  ebx,bx
c001f2d0:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f2d5:	74 20                	je     c001f2f7 <Vm::faultHandler(regs*)+0x4ec>
c001f2d7:	ed                   	in     eax,dx
c001f2d8:	51                   	push   ecx
c001f2d9:	50                   	push   eax
c001f2da:	56                   	push   esi
c001f2db:	53                   	push   ebx
c001f2dc:	e8 15 fb ff ff       	call   c001edf6 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f2e1:	83 c4 10             	add    esp,0x10
c001f2e4:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f2e7:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f2eb:	74 05                	je     c001f2f2 <Vm::faultHandler(regs*)+0x4e7>
c001f2ed:	83 e8 04             	sub    eax,0x4
c001f2f0:	eb 27                	jmp    c001f319 <Vm::faultHandler(regs*)+0x50e>
c001f2f2:	83 c0 04             	add    eax,0x4
c001f2f5:	eb 22                	jmp    c001f319 <Vm::faultHandler(regs*)+0x50e>
c001f2f7:	66 ed                	in     ax,dx
c001f2f9:	0f b7 c0             	movzx  eax,ax
c001f2fc:	52                   	push   edx
c001f2fd:	50                   	push   eax
c001f2fe:	56                   	push   esi
c001f2ff:	53                   	push   ebx
c001f300:	e8 db fa ff ff       	call   c001ede0 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f305:	83 c4 10             	add    esp,0x10
c001f308:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f30b:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f30f:	74 05                	je     c001f316 <Vm::faultHandler(regs*)+0x50b>
c001f311:	83 e8 02             	sub    eax,0x2
c001f314:	eb 03                	jmp    c001f319 <Vm::faultHandler(regs*)+0x50e>
c001f316:	83 c0 02             	add    eax,0x2
c001f319:	25 ff ff 00 00       	and    eax,0xffff
c001f31e:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f321:	e9 b1 02 00 00       	jmp    c001f5d7 <Vm::faultHandler(regs*)+0x7cc>
c001f326:	83 ec 0c             	sub    esp,0xc
c001f329:	4b                   	dec    ebx
c001f32a:	68 87 c8 02 c0       	push   0xc002c887
c001f32f:	e8 00 3c ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001f334:	83 c4 10             	add    esp,0x10
c001f337:	80 fb 05             	cmp    bl,0x5
c001f33a:	77 0a                	ja     c001f346 <Vm::faultHandler(regs*)+0x53b>
c001f33c:	0f b6 db             	movzx  ebx,bl
c001f33f:	ff 24 9d f8 c8 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3708]
c001f346:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f34a:	eb 1b                	jmp    c001f367 <Vm::faultHandler(regs*)+0x55c>
c001f34c:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f350:	eb 15                	jmp    c001f367 <Vm::faultHandler(regs*)+0x55c>
c001f352:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f356:	eb 0f                	jmp    c001f367 <Vm::faultHandler(regs*)+0x55c>
c001f358:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f35c:	eb 09                	jmp    c001f367 <Vm::faultHandler(regs*)+0x55c>
c001f35e:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f361:	eb 04                	jmp    c001f367 <Vm::faultHandler(regs*)+0x55c>
c001f363:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f367:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f36c:	74 0d                	je     c001f37b <Vm::faultHandler(regs*)+0x570>
c001f36e:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f375:	0f 87 8b 00 00 00    	ja     c001f406 <Vm::faultHandler(regs*)+0x5fb>
c001f37b:	53                   	push   ebx
c001f37c:	53                   	push   ebx
c001f37d:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f381:	52                   	push   edx
c001f382:	50                   	push   eax
c001f383:	e8 0f fa ff ff       	call   c001ed97 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f388:	5e                   	pop    esi
c001f389:	0f b6 c0             	movzx  eax,al
c001f38c:	5d                   	pop    ebp
c001f38d:	50                   	push   eax
c001f38e:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f392:	50                   	push   eax
c001f393:	e8 91 f6 ff ff       	call   c001ea29 <Vm::outbv(unsigned short, unsigned char)>
c001f398:	83 c4 10             	add    esp,0x10
c001f39b:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f39e:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f3a2:	74 03                	je     c001f3a7 <Vm::faultHandler(regs*)+0x59c>
c001f3a4:	48                   	dec    eax
c001f3a5:	eb 01                	jmp    c001f3a8 <Vm::faultHandler(regs*)+0x59d>
c001f3a7:	40                   	inc    eax
c001f3a8:	0f b7 c0             	movzx  eax,ax
c001f3ab:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f3ae:	e9 24 02 00 00       	jmp    c001f5d7 <Vm::faultHandler(regs*)+0x7cc>
c001f3b3:	83 ec 0c             	sub    esp,0xc
c001f3b6:	4b                   	dec    ebx
c001f3b7:	68 87 c8 02 c0       	push   0xc002c887
c001f3bc:	e8 73 3b ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001f3c1:	83 c4 10             	add    esp,0x10
c001f3c4:	80 fb 05             	cmp    bl,0x5
c001f3c7:	77 0a                	ja     c001f3d3 <Vm::faultHandler(regs*)+0x5c8>
c001f3c9:	0f b6 db             	movzx  ebx,bl
c001f3cc:	ff 24 9d 10 c9 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd36f0]
c001f3d3:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f3d7:	eb 1b                	jmp    c001f3f4 <Vm::faultHandler(regs*)+0x5e9>
c001f3d9:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f3dd:	eb 15                	jmp    c001f3f4 <Vm::faultHandler(regs*)+0x5e9>
c001f3df:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f3e3:	eb 0f                	jmp    c001f3f4 <Vm::faultHandler(regs*)+0x5e9>
c001f3e5:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f3e9:	eb 09                	jmp    c001f3f4 <Vm::faultHandler(regs*)+0x5e9>
c001f3eb:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f3ee:	eb 04                	jmp    c001f3f4 <Vm::faultHandler(regs*)+0x5e9>
c001f3f0:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f3f4:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001f3f7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f3fc:	74 39                	je     c001f437 <Vm::faultHandler(regs*)+0x62c>
c001f3fe:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001f404:	76 31                	jbe    c001f437 <Vm::faultHandler(regs*)+0x62c>
c001f406:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f40a:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f40e:	51                   	push   ecx
c001f40f:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f413:	51                   	push   ecx
c001f414:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f418:	51                   	push   ecx
c001f419:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f41d:	51                   	push   ecx
c001f41e:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f422:	52                   	push   edx
c001f423:	50                   	push   eax
c001f424:	50                   	push   eax
c001f425:	68 54 c8 02 c0       	push   0xc002c854
c001f42a:	e8 05 3b ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001f42f:	83 c4 20             	add    esp,0x20
c001f432:	e9 fb 01 00 00       	jmp    c001f632 <Vm::faultHandler(regs*)+0x827>
c001f437:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001f43a:	0f b7 d3             	movzx  edx,bx
c001f43d:	81 e6 00 04 00 00    	and    esi,0x400
c001f443:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001f446:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f44b:	74 1d                	je     c001f46a <Vm::faultHandler(regs*)+0x65f>
c001f44d:	51                   	push   ecx
c001f44e:	51                   	push   ecx
c001f44f:	52                   	push   edx
c001f450:	50                   	push   eax
c001f451:	e8 64 f9 ff ff       	call   c001edba <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f456:	83 c4 10             	add    esp,0x10
c001f459:	89 ea                	mov    edx,ebp
c001f45b:	ef                   	out    dx,eax
c001f45c:	85 f6                	test   esi,esi
c001f45e:	74 05                	je     c001f465 <Vm::faultHandler(regs*)+0x65a>
c001f460:	83 eb 04             	sub    ebx,0x4
c001f463:	eb 21                	jmp    c001f486 <Vm::faultHandler(regs*)+0x67b>
c001f465:	83 c3 04             	add    ebx,0x4
c001f468:	eb 1c                	jmp    c001f486 <Vm::faultHandler(regs*)+0x67b>
c001f46a:	51                   	push   ecx
c001f46b:	51                   	push   ecx
c001f46c:	52                   	push   edx
c001f46d:	50                   	push   eax
c001f46e:	e8 35 f9 ff ff       	call   c001eda8 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f473:	83 c4 10             	add    esp,0x10
c001f476:	89 ea                	mov    edx,ebp
c001f478:	66 ef                	out    dx,ax
c001f47a:	85 f6                	test   esi,esi
c001f47c:	74 05                	je     c001f483 <Vm::faultHandler(regs*)+0x678>
c001f47e:	83 eb 02             	sub    ebx,0x2
c001f481:	eb 03                	jmp    c001f486 <Vm::faultHandler(regs*)+0x67b>
c001f483:	83 c3 02             	add    ebx,0x2
c001f486:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001f48c:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001f48f:	e9 43 01 00 00       	jmp    c001f5d7 <Vm::faultHandler(regs*)+0x7cc>
c001f494:	53                   	push   ebx
c001f495:	53                   	push   ebx
c001f496:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f49a:	50                   	push   eax
c001f49b:	68 8d c8 02 c0       	push   0xc002c88d
c001f4a0:	e8 8f 3a ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001f4a5:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f4ac:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4b0:	89 04 24             	mov    DWORD PTR [esp],eax
c001f4b3:	e8 5e f5 ff ff       	call   c001ea16 <Vm::inbv(unsigned short)>
c001f4b8:	0f b6 c0             	movzx  eax,al
c001f4bb:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f4be:	eb 5e                	jmp    c001f51e <Vm::faultHandler(regs*)+0x713>
c001f4c0:	51                   	push   ecx
c001f4c1:	51                   	push   ecx
c001f4c2:	53                   	push   ebx
c001f4c3:	68 93 c8 02 c0       	push   0xc002c893
c001f4c8:	e8 67 3a ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001f4cd:	83 c4 10             	add    esp,0x10
c001f4d0:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f4d5:	74 07                	je     c001f4de <Vm::faultHandler(regs*)+0x6d3>
c001f4d7:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f4db:	ed                   	in     eax,dx
c001f4dc:	eb 14                	jmp    c001f4f2 <Vm::faultHandler(regs*)+0x6e7>
c001f4de:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001f4e1:	66 31 db             	xor    bx,bx
c001f4e4:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001f4e7:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f4eb:	66 ed                	in     ax,dx
c001f4ed:	0f b7 c0             	movzx  eax,ax
c001f4f0:	09 d8                	or     eax,ebx
c001f4f2:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f4f5:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f4f9:	e9 dc 00 00 00       	jmp    c001f5da <Vm::faultHandler(regs*)+0x7cf>
c001f4fe:	50                   	push   eax
c001f4ff:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f502:	53                   	push   ebx
c001f503:	68 99 c8 02 c0       	push   0xc002c899
c001f508:	e8 27 3a ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001f50d:	58                   	pop    eax
c001f50e:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f512:	5a                   	pop    edx
c001f513:	50                   	push   eax
c001f514:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f518:	50                   	push   eax
c001f519:	e8 0b f5 ff ff       	call   c001ea29 <Vm::outbv(unsigned short, unsigned char)>
c001f51e:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f522:	e9 85 00 00 00       	jmp    c001f5ac <Vm::faultHandler(regs*)+0x7a1>
c001f527:	50                   	push   eax
c001f528:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f52b:	53                   	push   ebx
c001f52c:	68 a2 c8 02 c0       	push   0xc002c8a2
c001f531:	e8 fe 39 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001f536:	83 c4 10             	add    esp,0x10
c001f539:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f53d:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f542:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f545:	74 03                	je     c001f54a <Vm::faultHandler(regs*)+0x73f>
c001f547:	ef                   	out    dx,eax
c001f548:	eb ab                	jmp    c001f4f5 <Vm::faultHandler(regs*)+0x6ea>
c001f54a:	66 ef                	out    dx,ax
c001f54c:	eb a7                	jmp    c001f4f5 <Vm::faultHandler(regs*)+0x6ea>
c001f54e:	55                   	push   ebp
c001f54f:	55                   	push   ebp
c001f550:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f553:	68 ab c8 02 c0       	push   0xc002c8ab
c001f558:	e8 d7 39 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001f55d:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f564:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f568:	89 04 24             	mov    DWORD PTR [esp],eax
c001f56b:	e8 a6 f4 ff ff       	call   c001ea16 <Vm::inbv(unsigned short)>
c001f570:	0f b6 c0             	movzx  eax,al
c001f573:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f576:	eb 31                	jmp    c001f5a9 <Vm::faultHandler(regs*)+0x79e>
c001f578:	56                   	push   esi
c001f579:	56                   	push   esi
c001f57a:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f57d:	68 b1 c8 02 c0       	push   0xc002c8b1
c001f582:	e8 ad 39 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001f587:	83 c4 10             	add    esp,0x10
c001f58a:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f58d:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f592:	74 03                	je     c001f597 <Vm::faultHandler(regs*)+0x78c>
c001f594:	ed                   	in     eax,dx
c001f595:	eb 0d                	jmp    c001f5a4 <Vm::faultHandler(regs*)+0x799>
c001f597:	66 ed                	in     ax,dx
c001f599:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001f59c:	0f b7 c0             	movzx  eax,ax
c001f59f:	66 31 d2             	xor    dx,dx
c001f5a2:	09 d0                	or     eax,edx
c001f5a4:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f5a7:	eb 2e                	jmp    c001f5d7 <Vm::faultHandler(regs*)+0x7cc>
c001f5a9:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f5ac:	83 c4 10             	add    esp,0x10
c001f5af:	eb 29                	jmp    c001f5da <Vm::faultHandler(regs*)+0x7cf>
c001f5b1:	50                   	push   eax
c001f5b2:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f5b5:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f5b8:	68 c0 c8 02 c0       	push   0xc002c8c0
c001f5bd:	e8 72 39 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001f5c2:	83 c4 10             	add    esp,0x10
c001f5c5:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f5c8:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f5cd:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f5d0:	74 03                	je     c001f5d5 <Vm::faultHandler(regs*)+0x7ca>
c001f5d2:	ef                   	out    dx,eax
c001f5d3:	eb 02                	jmp    c001f5d7 <Vm::faultHandler(regs*)+0x7cc>
c001f5d5:	66 ef                	out    dx,ax
c001f5d7:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f5da:	b0 01                	mov    al,0x1
c001f5dc:	eb 56                	jmp    c001f634 <Vm::faultHandler(regs*)+0x829>
c001f5de:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f5e2:	51                   	push   ecx
c001f5e3:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f5e7:	51                   	push   ecx
c001f5e8:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f5ec:	51                   	push   ecx
c001f5ed:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f5f1:	51                   	push   ecx
c001f5f2:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f5f6:	52                   	push   edx
c001f5f7:	50                   	push   eax
c001f5f8:	50                   	push   eax
c001f5f9:	68 c9 c8 02 c0       	push   0xc002c8c9
c001f5fe:	e8 31 39 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c001f603:	83 c4 20             	add    esp,0x20
c001f606:	83 ec 0c             	sub    esp,0xc
c001f609:	6a 60                	push   0x60
c001f60b:	e8 06 f4 ff ff       	call   c001ea16 <Vm::inbv(unsigned short)>
c001f610:	83 c4 10             	add    esp,0x10
c001f613:	3c 1c                	cmp    al,0x1c
c001f615:	74 04                	je     c001f61b <Vm::faultHandler(regs*)+0x810>
c001f617:	3c 5a                	cmp    al,0x5a
c001f619:	75 eb                	jne    c001f606 <Vm::faultHandler(regs*)+0x7fb>
c001f61b:	3c 1c                	cmp    al,0x1c
c001f61d:	74 04                	je     c001f623 <Vm::faultHandler(regs*)+0x818>
c001f61f:	3c 5a                	cmp    al,0x5a
c001f621:	75 0f                	jne    c001f632 <Vm::faultHandler(regs*)+0x827>
c001f623:	83 ec 0c             	sub    esp,0xc
c001f626:	6a 60                	push   0x60
c001f628:	e8 e9 f3 ff ff       	call   c001ea16 <Vm::inbv(unsigned short)>
c001f62d:	83 c4 10             	add    esp,0x10
c001f630:	eb e9                	jmp    c001f61b <Vm::faultHandler(regs*)+0x810>
c001f632:	31 c0                	xor    eax,eax
c001f634:	83 c4 1c             	add    esp,0x1c
c001f637:	5b                   	pop    ebx
c001f638:	5e                   	pop    esi
c001f639:	5f                   	pop    edi
c001f63a:	5d                   	pop    ebp
c001f63b:	c3                   	ret    

c001f63c <Vm::fpuInternalTo32(unsigned long long)>:
c001f63c:	57                   	push   edi
c001f63d:	56                   	push   esi
c001f63e:	53                   	push   ebx
c001f63f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f643:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f647:	89 d6                	mov    esi,edx
c001f649:	89 d7                	mov    edi,edx
c001f64b:	89 c1                	mov    ecx,eax
c001f64d:	c1 ef 14             	shr    edi,0x14
c001f650:	89 d3                	mov    ebx,edx
c001f652:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f658:	31 d2                	xor    edx,edx
c001f65a:	89 f8                	mov    eax,edi
c001f65c:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f662:	bf ff 00 00 00       	mov    edi,0xff
c001f667:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f66c:	83 d2 ff             	adc    edx,0xffffffff
c001f66f:	39 c7                	cmp    edi,eax
c001f671:	bf 00 00 00 00       	mov    edi,0x0
c001f676:	19 d7                	sbb    edi,edx
c001f678:	72 15                	jb     c001f68f <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f67a:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f67e:	c1 e0 17             	shl    eax,0x17
c001f681:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f687:	09 f1                	or     ecx,esi
c001f689:	09 c1                	or     ecx,eax
c001f68b:	89 cf                	mov    edi,ecx
c001f68d:	eb 02                	jmp    c001f691 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f68f:	31 ff                	xor    edi,edi
c001f691:	89 f8                	mov    eax,edi
c001f693:	5b                   	pop    ebx
c001f694:	5e                   	pop    esi
c001f695:	5f                   	pop    edi
c001f696:	c3                   	ret    

c001f697 <Vm::fpuInternalTo64(unsigned long long)>:
c001f697:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f69b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f69f:	c3                   	ret    

c001f6a0 <Vm::fpu32ToInternal(unsigned int)>:
c001f6a0:	57                   	push   edi
c001f6a1:	31 ff                	xor    edi,edi
c001f6a3:	56                   	push   esi
c001f6a4:	53                   	push   ebx
c001f6a5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f6a9:	89 cb                	mov    ebx,ecx
c001f6ab:	89 ce                	mov    esi,ecx
c001f6ad:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f6b3:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f6b9:	c1 e9 17             	shr    ecx,0x17
c001f6bc:	89 f0                	mov    eax,esi
c001f6be:	0f b6 d1             	movzx  edx,cl
c001f6c1:	81 c2 80 03 00 00    	add    edx,0x380
c001f6c7:	89 d1                	mov    ecx,edx
c001f6c9:	89 fa                	mov    edx,edi
c001f6cb:	c1 e1 14             	shl    ecx,0x14
c001f6ce:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f6d2:	c1 e0 1d             	shl    eax,0x1d
c001f6d5:	89 d7                	mov    edi,edx
c001f6d7:	89 c6                	mov    esi,eax
c001f6d9:	89 ca                	mov    edx,ecx
c001f6db:	89 f0                	mov    eax,esi
c001f6dd:	09 fa                	or     edx,edi
c001f6df:	09 da                	or     edx,ebx
c001f6e1:	5b                   	pop    ebx
c001f6e2:	5e                   	pop    esi
c001f6e3:	5f                   	pop    edi
c001f6e4:	c3                   	ret    

c001f6e5 <Vm::fpu64ToInternal(unsigned long long)>:
c001f6e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6e9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f6ed:	c3                   	ret    

c001f6ee <Vm::fpuFloatToLong(unsigned long long)>:
c001f6ee:	57                   	push   edi
c001f6ef:	31 c0                	xor    eax,eax
c001f6f1:	56                   	push   esi
c001f6f2:	31 d2                	xor    edx,edx
c001f6f4:	53                   	push   ebx
c001f6f5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f6f9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f6fd:	89 d9                	mov    ecx,ebx
c001f6ff:	c1 e9 14             	shr    ecx,0x14
c001f702:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f708:	89 cf                	mov    edi,ecx
c001f70a:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f710:	78 33                	js     c001f745 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f712:	89 d9                	mov    ecx,ebx
c001f714:	89 f0                	mov    eax,esi
c001f716:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f71c:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f722:	89 ca                	mov    edx,ecx
c001f724:	b9 34 00 00 00       	mov    ecx,0x34
c001f729:	29 f9                	sub    ecx,edi
c001f72b:	0f ad d0             	shrd   eax,edx,cl
c001f72e:	d3 fa                	sar    edx,cl
c001f730:	f6 c1 20             	test   cl,0x20
c001f733:	74 05                	je     c001f73a <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f735:	89 d0                	mov    eax,edx
c001f737:	c1 fa 1f             	sar    edx,0x1f
c001f73a:	85 db                	test   ebx,ebx
c001f73c:	79 07                	jns    c001f745 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f73e:	f7 d8                	neg    eax
c001f740:	83 d2 00             	adc    edx,0x0
c001f743:	f7 da                	neg    edx
c001f745:	5b                   	pop    ebx
c001f746:	5e                   	pop    esi
c001f747:	5f                   	pop    edi
c001f748:	c3                   	ret    

c001f749 <Vm::fpuULongToFloat(unsigned long long)>:
c001f749:	57                   	push   edi
c001f74a:	31 c9                	xor    ecx,ecx
c001f74c:	56                   	push   esi
c001f74d:	53                   	push   ebx
c001f74e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f752:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f756:	0f ba e7 14          	bt     edi,0x14
c001f75a:	72 07                	jb     c001f763 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f75c:	01 f6                	add    esi,esi
c001f75e:	11 ff                	adc    edi,edi
c001f760:	41                   	inc    ecx
c001f761:	eb f3                	jmp    c001f756 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f763:	89 fa                	mov    edx,edi
c001f765:	89 f0                	mov    eax,esi
c001f767:	bb 33 04 00 00       	mov    ebx,0x433
c001f76c:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f772:	29 cb                	sub    ebx,ecx
c001f774:	89 d9                	mov    ecx,ebx
c001f776:	5b                   	pop    ebx
c001f777:	c1 e1 14             	shl    ecx,0x14
c001f77a:	5e                   	pop    esi
c001f77b:	09 ca                	or     edx,ecx
c001f77d:	5f                   	pop    edi
c001f77e:	c3                   	ret    

c001f77f <Vm::fpuLongToFloat(long long)>:
c001f77f:	56                   	push   esi
c001f780:	31 c0                	xor    eax,eax
c001f782:	53                   	push   ebx
c001f783:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f787:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f78b:	39 c8                	cmp    eax,ecx
c001f78d:	19 d8                	sbb    eax,ebx
c001f78f:	7d 04                	jge    c001f795 <Vm::fpuLongToFloat(long long)+0x16>
c001f791:	31 f6                	xor    esi,esi
c001f793:	eb 0c                	jmp    c001f7a1 <Vm::fpuLongToFloat(long long)+0x22>
c001f795:	f7 d9                	neg    ecx
c001f797:	be 01 00 00 00       	mov    esi,0x1
c001f79c:	83 d3 00             	adc    ebx,0x0
c001f79f:	f7 db                	neg    ebx
c001f7a1:	31 c0                	xor    eax,eax
c001f7a3:	0f ba e3 14          	bt     ebx,0x14
c001f7a7:	72 07                	jb     c001f7b0 <Vm::fpuLongToFloat(long long)+0x31>
c001f7a9:	01 c9                	add    ecx,ecx
c001f7ab:	11 db                	adc    ebx,ebx
c001f7ad:	40                   	inc    eax
c001f7ae:	eb f3                	jmp    c001f7a3 <Vm::fpuLongToFloat(long long)+0x24>
c001f7b0:	ba 33 04 00 00       	mov    edx,0x433
c001f7b5:	29 c2                	sub    edx,eax
c001f7b7:	89 c8                	mov    eax,ecx
c001f7b9:	c1 e2 14             	shl    edx,0x14
c001f7bc:	89 d9                	mov    ecx,ebx
c001f7be:	89 f3                	mov    ebx,esi
c001f7c0:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f7c6:	09 ca                	or     edx,ecx
c001f7c8:	84 db                	test   bl,bl
c001f7ca:	74 06                	je     c001f7d2 <Vm::fpuLongToFloat(long long)+0x53>
c001f7cc:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f7d2:	5b                   	pop    ebx
c001f7d3:	5e                   	pop    esi
c001f7d4:	c3                   	ret    

c001f7d5 <Vm::fpuGet0()>:
c001f7d5:	31 c0                	xor    eax,eax
c001f7d7:	31 d2                	xor    edx,edx
c001f7d9:	c3                   	ret    

c001f7da <Vm::fpuGet1()>:
c001f7da:	b8 01 00 00 00       	mov    eax,0x1
c001f7df:	31 d2                	xor    edx,edx
c001f7e1:	c3                   	ret    

c001f7e2 <Vm::fpuGetPi()>:
c001f7e2:	b8 03 00 00 00       	mov    eax,0x3
c001f7e7:	31 d2                	xor    edx,edx
c001f7e9:	c3                   	ret    

c001f7ea <Vm::fpuGetLog2E()>:
c001f7ea:	83 ec 18             	sub    esp,0x18
c001f7ed:	68 28 c9 02 c0       	push   0xc002c928
c001f7f2:	e8 de ad ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c001f7f7:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f7fc:	31 d2                	xor    edx,edx
c001f7fe:	83 c4 1c             	add    esp,0x1c
c001f801:	c3                   	ret    

c001f802 <Vm::fpuGetLogE2()>:
c001f802:	83 ec 18             	sub    esp,0x18
c001f805:	68 34 c9 02 c0       	push   0xc002c934
c001f80a:	e8 c6 ad ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c001f80f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f814:	31 d2                	xor    edx,edx
c001f816:	83 c4 1c             	add    esp,0x1c
c001f819:	c3                   	ret    

c001f81a <Vm::fpuGetLog210()>:
c001f81a:	83 ec 18             	sub    esp,0x18
c001f81d:	68 40 c9 02 c0       	push   0xc002c940
c001f822:	e8 ae ad ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c001f827:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f82c:	31 d2                	xor    edx,edx
c001f82e:	83 c4 1c             	add    esp,0x1c
c001f831:	c3                   	ret    

c001f832 <Vm::fpuGetLog102()>:
c001f832:	83 ec 18             	sub    esp,0x18
c001f835:	68 4d c9 02 c0       	push   0xc002c94d
c001f83a:	e8 96 ad ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c001f83f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f844:	31 d2                	xor    edx,edx
c001f846:	83 c4 1c             	add    esp,0x1c
c001f849:	c3                   	ret    

c001f84a <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f84a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f84e:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f852:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f856:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f85a:	0f 92 c0             	setb   al
c001f85d:	c3                   	ret    

c001f85e <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f85e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f862:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f866:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f86a:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f86e:	09 c2                	or     edx,eax
c001f870:	0f 94 c0             	sete   al
c001f873:	c3                   	ret    

c001f874 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f874:	57                   	push   edi
c001f875:	56                   	push   esi
c001f876:	53                   	push   ebx
c001f877:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f87b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f87f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f883:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f887:	57                   	push   edi
c001f888:	56                   	push   esi
c001f889:	53                   	push   ebx
c001f88a:	51                   	push   ecx
c001f88b:	e8 ce ff ff ff       	call   c001f85e <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f890:	83 c4 10             	add    esp,0x10
c001f893:	88 c2                	mov    dl,al
c001f895:	31 c0                	xor    eax,eax
c001f897:	84 d2                	test   dl,dl
c001f899:	75 0c                	jne    c001f8a7 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f89b:	57                   	push   edi
c001f89c:	56                   	push   esi
c001f89d:	53                   	push   ebx
c001f89e:	51                   	push   ecx
c001f89f:	e8 a6 ff ff ff       	call   c001f84a <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f8a4:	83 c4 10             	add    esp,0x10
c001f8a7:	83 e0 01             	and    eax,0x1
c001f8aa:	5b                   	pop    ebx
c001f8ab:	88 c1                	mov    cl,al
c001f8ad:	83 e2 01             	and    edx,0x1
c001f8b0:	a0 a1 1b 03 c0       	mov    al,ds:0xc0031ba1
c001f8b5:	c1 e2 06             	shl    edx,0x6
c001f8b8:	83 e0 ba             	and    eax,0xffffffba
c001f8bb:	5e                   	pop    esi
c001f8bc:	09 c8                	or     eax,ecx
c001f8be:	5f                   	pop    edi
c001f8bf:	09 d0                	or     eax,edx
c001f8c1:	a2 a1 1b 03 c0       	mov    ds:0xc0031ba1,al
c001f8c6:	c3                   	ret    

c001f8c7 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f8c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f8cb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f8cf:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f8d3:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f8d7:	c3                   	ret    

c001f8d8 <Vm::fpuAbs(unsigned long long)>:
c001f8d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f8e0:	c3                   	ret    

c001f8e1 <Vm::fpuChs(unsigned long long)>:
c001f8e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8e5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f8e9:	f7 d8                	neg    eax
c001f8eb:	83 d2 00             	adc    edx,0x0
c001f8ee:	f7 da                	neg    edx
c001f8f0:	c3                   	ret    

c001f8f1 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f8f1:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f8f5:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f8fa:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f8fe:	eb c7                	jmp    c001f8c7 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f900 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f900:	53                   	push   ebx
c001f901:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f905:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f909:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f90d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f911:	0f af ca             	imul   ecx,edx
c001f914:	0f af d8             	imul   ebx,eax
c001f917:	f7 e2                	mul    edx
c001f919:	01 d9                	add    ecx,ebx
c001f91b:	5b                   	pop    ebx
c001f91c:	01 ca                	add    edx,ecx
c001f91e:	c3                   	ret    

c001f91f <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f91f:	83 ec 0c             	sub    esp,0xc
c001f922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f92a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f92e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f932:	e8 a5 70 00 00       	call   c00269dc <__udivdi3>
c001f937:	83 c4 1c             	add    esp,0x1c
c001f93a:	c3                   	ret    

c001f93b <Vm::fpuSquare(unsigned long long)>:
c001f93b:	50                   	push   eax
c001f93c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f940:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f944:	52                   	push   edx
c001f945:	50                   	push   eax
c001f946:	52                   	push   edx
c001f947:	50                   	push   eax
c001f948:	e8 b3 ff ff ff       	call   c001f900 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f94d:	83 c4 14             	add    esp,0x14
c001f950:	c3                   	ret    

c001f951 <Vm::fpuGetReg(int)>:
c001f951:	83 ec 0c             	sub    esp,0xc
c001f954:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f959:	76 10                	jbe    c001f96b <Vm::fpuGetReg(int)+0x1a>
c001f95b:	83 ec 0c             	sub    esp,0xc
c001f95e:	68 5a c9 02 c0       	push   0xc002c95a
c001f963:	e8 6d ac ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c001f968:	83 c4 10             	add    esp,0x10
c001f96b:	a0 a1 1b 03 c0       	mov    al,ds:0xc0031ba1
c001f970:	b9 08 00 00 00       	mov    ecx,0x8
c001f975:	c0 e8 03             	shr    al,0x3
c001f978:	83 e0 07             	and    eax,0x7
c001f97b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f97f:	99                   	cdq    
c001f980:	f7 f9                	idiv   ecx
c001f982:	8b 04 d5 a4 1b 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffce45c]
c001f989:	8b 14 d5 a8 1b 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffce458]
c001f990:	83 c4 0c             	add    esp,0xc
c001f993:	c3                   	ret    

c001f994 <Vm::fpuSetReg(int, unsigned long long)>:
c001f994:	57                   	push   edi
c001f995:	56                   	push   esi
c001f996:	52                   	push   edx
c001f997:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f99b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f99f:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f9a4:	76 10                	jbe    c001f9b6 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f9a6:	83 ec 0c             	sub    esp,0xc
c001f9a9:	68 6d c9 02 c0       	push   0xc002c96d
c001f9ae:	e8 22 ac ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c001f9b3:	83 c4 10             	add    esp,0x10
c001f9b6:	a0 a1 1b 03 c0       	mov    al,ds:0xc0031ba1
c001f9bb:	b9 08 00 00 00       	mov    ecx,0x8
c001f9c0:	c0 e8 03             	shr    al,0x3
c001f9c3:	83 e0 07             	and    eax,0x7
c001f9c6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f9ca:	99                   	cdq    
c001f9cb:	f7 f9                	idiv   ecx
c001f9cd:	89 34 d5 a4 1b 03 c0 	mov    DWORD PTR [edx*8-0x3ffce45c],esi
c001f9d4:	89 3c d5 a8 1b 03 c0 	mov    DWORD PTR [edx*8-0x3ffce458],edi
c001f9db:	58                   	pop    eax
c001f9dc:	5e                   	pop    esi
c001f9dd:	5f                   	pop    edi
c001f9de:	c3                   	ret    

c001f9df <Vm::fpuPush(unsigned long long)>:
c001f9df:	a0 a1 1b 03 c0       	mov    al,ds:0xc0031ba1
c001f9e4:	c0 e8 03             	shr    al,0x3
c001f9e7:	83 e0 07             	and    eax,0x7
c001f9ea:	83 c0 07             	add    eax,0x7
c001f9ed:	88 c2                	mov    dl,al
c001f9ef:	83 e0 07             	and    eax,0x7
c001f9f2:	83 e2 07             	and    edx,0x7
c001f9f5:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f9fc:	8a 15 a1 1b 03 c0    	mov    dl,BYTE PTR ds:0xc0031ba1
c001fa02:	83 e2 c7             	and    edx,0xffffffc7
c001fa05:	09 ca                	or     edx,ecx
c001fa07:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fa0b:	88 15 a1 1b 03 c0    	mov    BYTE PTR ds:0xc0031ba1,dl
c001fa11:	89 0c c5 a8 1b 03 c0 	mov    DWORD PTR [eax*8-0x3ffce458],ecx
c001fa18:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fa1c:	89 14 c5 a4 1b 03 c0 	mov    DWORD PTR [eax*8-0x3ffce45c],edx
c001fa23:	a1 e4 1b 03 c0       	mov    eax,ds:0xc0031be4
c001fa28:	83 f8 08             	cmp    eax,0x8
c001fa2b:	75 08                	jne    c001fa35 <Vm::fpuPush(unsigned long long)+0x56>
c001fa2d:	80 0d a0 1b 03 c0 40 	or     BYTE PTR ds:0xc0031ba0,0x40
c001fa34:	c3                   	ret    
c001fa35:	40                   	inc    eax
c001fa36:	a3 e4 1b 03 c0       	mov    ds:0xc0031be4,eax
c001fa3b:	c3                   	ret    

c001fa3c <Vm::fpuPop()>:
c001fa3c:	8a 0d a1 1b 03 c0    	mov    cl,BYTE PTR ds:0xc0031ba1
c001fa42:	53                   	push   ebx
c001fa43:	c0 e9 03             	shr    cl,0x3
c001fa46:	8a 1d a1 1b 03 c0    	mov    bl,BYTE PTR ds:0xc0031ba1
c001fa4c:	83 e1 07             	and    ecx,0x7
c001fa4f:	83 e3 c7             	and    ebx,0xffffffc7
c001fa52:	8b 04 cd a4 1b 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffce45c]
c001fa59:	8b 14 cd a8 1b 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffce458]
c001fa60:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001fa67:	83 e1 38             	and    ecx,0x38
c001fa6a:	09 d9                	or     ecx,ebx
c001fa6c:	88 0d a1 1b 03 c0    	mov    BYTE PTR ds:0xc0031ba1,cl
c001fa72:	8b 0d e4 1b 03 c0    	mov    ecx,DWORD PTR ds:0xc0031be4
c001fa78:	85 c9                	test   ecx,ecx
c001fa7a:	74 09                	je     c001fa85 <Vm::fpuPop()+0x49>
c001fa7c:	49                   	dec    ecx
c001fa7d:	89 0d e4 1b 03 c0    	mov    DWORD PTR ds:0xc0031be4,ecx
c001fa83:	eb 07                	jmp    c001fa8c <Vm::fpuPop()+0x50>
c001fa85:	80 0d a0 1b 03 c0 40 	or     BYTE PTR ds:0xc0031ba0,0x40
c001fa8c:	5b                   	pop    ebx
c001fa8d:	c3                   	ret    

c001fa8e <Vm::x87Handler(regs*)>:
c001fa8e:	55                   	push   ebp
c001fa8f:	57                   	push   edi
c001fa90:	56                   	push   esi
c001fa91:	53                   	push   ebx
c001fa92:	83 ec 1c             	sub    esp,0x1c
c001fa95:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001fa99:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001fa9e:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001faa1:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001faa9:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001faad:	50                   	push   eax
c001faae:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001fab2:	50                   	push   eax
c001fab3:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fab7:	50                   	push   eax
c001fab8:	53                   	push   ebx
c001fab9:	e8 de a1 ff ff       	call   c0019c9c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001fabe:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001fac1:	83 c4 10             	add    esp,0x10
c001fac4:	89 c6                	mov    esi,eax
c001fac6:	80 fa d9             	cmp    dl,0xd9
c001fac9:	0f 85 52 01 00 00    	jne    c001fc21 <Vm::x87Handler(regs*)+0x193>
c001facf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fad3:	8d 50 20             	lea    edx,[eax+0x20]
c001fad6:	80 fa 0e             	cmp    dl,0xe
c001fad9:	0f 87 86 00 00 00    	ja     c001fb65 <Vm::x87Handler(regs*)+0xd7>
c001fadf:	0f b6 d2             	movzx  edx,dl
c001fae2:	ff 24 95 80 c9 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd3680]
c001fae9:	e8 e7 fc ff ff       	call   c001f7d5 <Vm::fpuGet0()>
c001faee:	eb 05                	jmp    c001faf5 <Vm::x87Handler(regs*)+0x67>
c001faf0:	e8 e5 fc ff ff       	call   c001f7da <Vm::fpuGet1()>
c001faf5:	57                   	push   edi
c001faf6:	57                   	push   edi
c001faf7:	52                   	push   edx
c001faf8:	50                   	push   eax
c001faf9:	e8 e1 fe ff ff       	call   c001f9df <Vm::fpuPush(unsigned long long)>
c001fafe:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fb02:	83 c4 10             	add    esp,0x10
c001fb05:	b0 01                	mov    al,0x1
c001fb07:	e9 e3 09 00 00       	jmp    c00204ef <Vm::x87Handler(regs*)+0xa61>
c001fb0c:	83 ec 0c             	sub    esp,0xc
c001fb0f:	6a 00                	push   0x0
c001fb11:	e8 3b fe ff ff       	call   c001f951 <Vm::fpuGetReg(int)>
c001fb16:	59                   	pop    ecx
c001fb17:	5e                   	pop    esi
c001fb18:	52                   	push   edx
c001fb19:	50                   	push   eax
c001fb1a:	e8 c2 fd ff ff       	call   c001f8e1 <Vm::fpuChs(unsigned long long)>
c001fb1f:	eb 13                	jmp    c001fb34 <Vm::x87Handler(regs*)+0xa6>
c001fb21:	83 ec 0c             	sub    esp,0xc
c001fb24:	6a 00                	push   0x0
c001fb26:	e8 26 fe ff ff       	call   c001f951 <Vm::fpuGetReg(int)>
c001fb2b:	5f                   	pop    edi
c001fb2c:	5d                   	pop    ebp
c001fb2d:	52                   	push   edx
c001fb2e:	50                   	push   eax
c001fb2f:	e8 a4 fd ff ff       	call   c001f8d8 <Vm::fpuAbs(unsigned long long)>
c001fb34:	83 c4 0c             	add    esp,0xc
c001fb37:	52                   	push   edx
c001fb38:	50                   	push   eax
c001fb39:	6a 00                	push   0x0
c001fb3b:	e8 54 fe ff ff       	call   c001f994 <Vm::fpuSetReg(int, unsigned long long)>
c001fb40:	eb bc                	jmp    c001fafe <Vm::x87Handler(regs*)+0x70>
c001fb42:	e8 d3 fc ff ff       	call   c001f81a <Vm::fpuGetLog210()>
c001fb47:	eb ac                	jmp    c001faf5 <Vm::x87Handler(regs*)+0x67>
c001fb49:	e8 9c fc ff ff       	call   c001f7ea <Vm::fpuGetLog2E()>
c001fb4e:	eb a5                	jmp    c001faf5 <Vm::x87Handler(regs*)+0x67>
c001fb50:	e8 8d fc ff ff       	call   c001f7e2 <Vm::fpuGetPi()>
c001fb55:	eb 9e                	jmp    c001faf5 <Vm::x87Handler(regs*)+0x67>
c001fb57:	e8 d6 fc ff ff       	call   c001f832 <Vm::fpuGetLog102()>
c001fb5c:	eb 97                	jmp    c001faf5 <Vm::x87Handler(regs*)+0x67>
c001fb5e:	e8 9f fc ff ff       	call   c001f802 <Vm::fpuGetLogE2()>
c001fb63:	eb 90                	jmp    c001faf5 <Vm::x87Handler(regs*)+0x67>
c001fb65:	8d 50 40             	lea    edx,[eax+0x40]
c001fb68:	80 fa 07             	cmp    dl,0x7
c001fb6b:	77 15                	ja     c001fb82 <Vm::x87Handler(regs*)+0xf4>
c001fb6d:	83 ec 0c             	sub    esp,0xc
c001fb70:	2d c0 00 00 00       	sub    eax,0xc0
c001fb75:	50                   	push   eax
c001fb76:	e8 d6 fd ff ff       	call   c001f951 <Vm::fpuGetReg(int)>
c001fb7b:	59                   	pop    ecx
c001fb7c:	5e                   	pop    esi
c001fb7d:	e9 75 ff ff ff       	jmp    c001faf7 <Vm::x87Handler(regs*)+0x69>
c001fb82:	8d 50 38             	lea    edx,[eax+0x38]
c001fb85:	80 fa 07             	cmp    dl,0x7
c001fb88:	77 3c                	ja     c001fbc6 <Vm::x87Handler(regs*)+0x138>
c001fb8a:	83 ec 0c             	sub    esp,0xc
c001fb8d:	2d c8 00 00 00       	sub    eax,0xc8
c001fb92:	50                   	push   eax
c001fb93:	e8 b9 fd ff ff       	call   c001f951 <Vm::fpuGetReg(int)>
c001fb98:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb9f:	89 c6                	mov    esi,eax
c001fba1:	89 d7                	mov    edi,edx
c001fba3:	e8 a9 fd ff ff       	call   c001f951 <Vm::fpuGetReg(int)>
c001fba8:	83 c4 0c             	add    esp,0xc
c001fbab:	52                   	push   edx
c001fbac:	50                   	push   eax
c001fbad:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fbb1:	2d c8 00 00 00       	sub    eax,0xc8
c001fbb6:	50                   	push   eax
c001fbb7:	e8 d8 fd ff ff       	call   c001f994 <Vm::fpuSetReg(int, unsigned long long)>
c001fbbc:	83 c4 0c             	add    esp,0xc
c001fbbf:	57                   	push   edi
c001fbc0:	56                   	push   esi
c001fbc1:	e9 73 ff ff ff       	jmp    c001fb39 <Vm::x87Handler(regs*)+0xab>
c001fbc6:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fbca:	84 d2                	test   dl,dl
c001fbcc:	75 0f                	jne    c001fbdd <Vm::x87Handler(regs*)+0x14f>
c001fbce:	83 ec 0c             	sub    esp,0xc
c001fbd1:	ff 36                	push   DWORD PTR [esi]
c001fbd3:	e8 c8 fa ff ff       	call   c001f6a0 <Vm::fpu32ToInternal(unsigned int)>
c001fbd8:	e9 bf 00 00 00       	jmp    c001fc9c <Vm::x87Handler(regs*)+0x20e>
c001fbdd:	80 fa 03             	cmp    dl,0x3
c001fbe0:	75 13                	jne    c001fbf5 <Vm::x87Handler(regs*)+0x167>
c001fbe2:	e8 55 fe ff ff       	call   c001fa3c <Vm::fpuPop()>
c001fbe7:	55                   	push   ebp
c001fbe8:	55                   	push   ebp
c001fbe9:	52                   	push   edx
c001fbea:	50                   	push   eax
c001fbeb:	e8 4c fa ff ff       	call   c001f63c <Vm::fpuInternalTo32(unsigned long long)>
c001fbf0:	e9 88 00 00 00       	jmp    c001fc7d <Vm::x87Handler(regs*)+0x1ef>
c001fbf5:	80 fa 05             	cmp    dl,0x5
c001fbf8:	75 0e                	jne    c001fc08 <Vm::x87Handler(regs*)+0x17a>
c001fbfa:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fbfd:	66 a3 a2 1b 03 c0    	mov    ds:0xc0031ba2,ax
c001fc03:	e9 df 00 00 00       	jmp    c001fce7 <Vm::x87Handler(regs*)+0x259>
c001fc08:	31 c0                	xor    eax,eax
c001fc0a:	80 fa 07             	cmp    dl,0x7
c001fc0d:	0f 85 dc 08 00 00    	jne    c00204ef <Vm::x87Handler(regs*)+0xa61>
c001fc13:	66 a1 a2 1b 03 c0    	mov    ax,ds:0xc0031ba2
c001fc19:	66 89 06             	mov    WORD PTR [esi],ax
c001fc1c:	e9 c6 00 00 00       	jmp    c001fce7 <Vm::x87Handler(regs*)+0x259>
c001fc21:	80 fa d8             	cmp    dl,0xd8
c001fc24:	0f 84 c9 00 00 00    	je     c001fcf3 <Vm::x87Handler(regs*)+0x265>
c001fc2a:	80 fa dc             	cmp    dl,0xdc
c001fc2d:	0f 84 0d 02 00 00    	je     c001fe40 <Vm::x87Handler(regs*)+0x3b2>
c001fc33:	80 fa de             	cmp    dl,0xde
c001fc36:	0f 84 cd 02 00 00    	je     c001ff09 <Vm::x87Handler(regs*)+0x47b>
c001fc3c:	80 fa dd             	cmp    dl,0xdd
c001fc3f:	0f 84 5f 04 00 00    	je     c00200a4 <Vm::x87Handler(regs*)+0x616>
c001fc45:	80 fa da             	cmp    dl,0xda
c001fc48:	0f 84 24 05 00 00    	je     c0020172 <Vm::x87Handler(regs*)+0x6e4>
c001fc4e:	80 fa df             	cmp    dl,0xdf
c001fc51:	0f 84 68 05 00 00    	je     c00201bf <Vm::x87Handler(regs*)+0x731>
c001fc57:	31 c0                	xor    eax,eax
c001fc59:	80 fa db             	cmp    dl,0xdb
c001fc5c:	0f 85 8d 08 00 00    	jne    c00204ef <Vm::x87Handler(regs*)+0xa61>
c001fc62:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc66:	80 fa 03             	cmp    dl,0x3
c001fc69:	0f 85 70 06 00 00    	jne    c00202df <Vm::x87Handler(regs*)+0x851>
c001fc6f:	e8 c8 fd ff ff       	call   c001fa3c <Vm::fpuPop()>
c001fc74:	55                   	push   ebp
c001fc75:	55                   	push   ebp
c001fc76:	52                   	push   edx
c001fc77:	50                   	push   eax
c001fc78:	e8 71 fa ff ff       	call   c001f6ee <Vm::fpuFloatToLong(unsigned long long)>
c001fc7d:	83 c4 10             	add    esp,0x10
c001fc80:	89 06                	mov    DWORD PTR [esi],eax
c001fc82:	eb 63                	jmp    c001fce7 <Vm::x87Handler(regs*)+0x259>
c001fc84:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc88:	84 d2                	test   dl,dl
c001fc8a:	0f 85 e6 05 00 00    	jne    c0020276 <Vm::x87Handler(regs*)+0x7e8>
c001fc90:	57                   	push   edi
c001fc91:	57                   	push   edi
c001fc92:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc95:	ff 36                	push   DWORD PTR [esi]
c001fc97:	e8 49 fa ff ff       	call   c001f6e5 <Vm::fpu64ToInternal(unsigned long long)>
c001fc9c:	5e                   	pop    esi
c001fc9d:	5f                   	pop    edi
c001fc9e:	52                   	push   edx
c001fc9f:	50                   	push   eax
c001fca0:	e8 3a fd ff ff       	call   c001f9df <Vm::fpuPush(unsigned long long)>
c001fca5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fca9:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fcac:	e9 51 fe ff ff       	jmp    c001fb02 <Vm::x87Handler(regs*)+0x74>
c001fcb1:	80 fa 03             	cmp    dl,0x3
c001fcb4:	0f 85 d7 06 00 00    	jne    c0020391 <Vm::x87Handler(regs*)+0x903>
c001fcba:	57                   	push   edi
c001fcbb:	57                   	push   edi
c001fcbc:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fcbf:	ff 36                	push   DWORD PTR [esi]
c001fcc1:	e8 1f fa ff ff       	call   c001f6e5 <Vm::fpu64ToInternal(unsigned long long)>
c001fcc6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fccd:	89 c6                	mov    esi,eax
c001fccf:	89 d7                	mov    edi,edx
c001fcd1:	e8 7b fc ff ff       	call   c001f951 <Vm::fpuGetReg(int)>
c001fcd6:	57                   	push   edi
c001fcd7:	56                   	push   esi
c001fcd8:	52                   	push   edx
c001fcd9:	50                   	push   eax
c001fcda:	e8 95 fb ff ff       	call   c001f874 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fcdf:	83 c4 20             	add    esp,0x20
c001fce2:	e8 55 fd ff ff       	call   c001fa3c <Vm::fpuPop()>
c001fce7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fceb:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fcee:	e9 12 fe ff ff       	jmp    c001fb05 <Vm::x87Handler(regs*)+0x77>
c001fcf3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fcf7:	8d 50 40             	lea    edx,[eax+0x40]
c001fcfa:	80 fa 07             	cmp    dl,0x7
c001fcfd:	77 29                	ja     c001fd28 <Vm::x87Handler(regs*)+0x29a>
c001fcff:	83 ec 0c             	sub    esp,0xc
c001fd02:	2d c0 00 00 00       	sub    eax,0xc0
c001fd07:	50                   	push   eax
c001fd08:	e8 44 fc ff ff       	call   c001f951 <Vm::fpuGetReg(int)>
c001fd0d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd14:	89 c6                	mov    esi,eax
c001fd16:	89 d7                	mov    edi,edx
c001fd18:	e8 34 fc ff ff       	call   c001f951 <Vm::fpuGetReg(int)>
c001fd1d:	57                   	push   edi
c001fd1e:	56                   	push   esi
c001fd1f:	52                   	push   edx
c001fd20:	50                   	push   eax
c001fd21:	e8 a1 fb ff ff       	call   c001f8c7 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fd26:	eb 2f                	jmp    c001fd57 <Vm::x87Handler(regs*)+0x2c9>
c001fd28:	8d 50 38             	lea    edx,[eax+0x38]
c001fd2b:	80 fa 07             	cmp    dl,0x7
c001fd2e:	77 2f                	ja     c001fd5f <Vm::x87Handler(regs*)+0x2d1>
c001fd30:	83 ec 0c             	sub    esp,0xc
c001fd33:	2d c8 00 00 00       	sub    eax,0xc8
c001fd38:	50                   	push   eax
c001fd39:	e8 13 fc ff ff       	call   c001f951 <Vm::fpuGetReg(int)>
c001fd3e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd45:	89 c6                	mov    esi,eax
c001fd47:	89 d7                	mov    edi,edx
c001fd49:	e8 03 fc ff ff       	call   c001f951 <Vm::fpuGetReg(int)>
c001fd4e:	57                   	push   edi
c001fd4f:	56                   	push   esi
c001fd50:	52                   	push   edx
c001fd51:	50                   	push   eax
c001fd52:	e8 a9 fb ff ff       	call   c001f900 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fd57:	83 c4 1c             	add    esp,0x1c
c001fd5a:	e9 d8 fd ff ff       	jmp    c001fb37 <Vm::x87Handler(regs*)+0xa9>
c001fd5f:	8d 50 30             	lea    edx,[eax+0x30]
c001fd62:	80 fa 07             	cmp    dl,0x7
c001fd65:	77 0d                	ja     c001fd74 <Vm::x87Handler(regs*)+0x2e6>
c001fd67:	83 ec 0c             	sub    esp,0xc
c001fd6a:	2d d0 00 00 00       	sub    eax,0xd0
c001fd6f:	e9 99 03 00 00       	jmp    c002010d <Vm::x87Handler(regs*)+0x67f>
c001fd74:	8d 50 28             	lea    edx,[eax+0x28]
c001fd77:	80 fa 07             	cmp    dl,0x7
c001fd7a:	77 0d                	ja     c001fd89 <Vm::x87Handler(regs*)+0x2fb>
c001fd7c:	83 ec 0c             	sub    esp,0xc
c001fd7f:	2d d8 00 00 00       	sub    eax,0xd8
c001fd84:	e9 c0 03 00 00       	jmp    c0020149 <Vm::x87Handler(regs*)+0x6bb>
c001fd89:	8d 50 20             	lea    edx,[eax+0x20]
c001fd8c:	80 fa 07             	cmp    dl,0x7
c001fd8f:	77 1b                	ja     c001fdac <Vm::x87Handler(regs*)+0x31e>
c001fd91:	83 ec 0c             	sub    esp,0xc
c001fd94:	2d e0 00 00 00       	sub    eax,0xe0
c001fd99:	50                   	push   eax
c001fd9a:	e8 b2 fb ff ff       	call   c001f951 <Vm::fpuGetReg(int)>
c001fd9f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fda6:	89 c6                	mov    esi,eax
c001fda8:	89 d7                	mov    edi,edx
c001fdaa:	eb 22                	jmp    c001fdce <Vm::x87Handler(regs*)+0x340>
c001fdac:	8d 50 18             	lea    edx,[eax+0x18]
c001fdaf:	80 fa 07             	cmp    dl,0x7
c001fdb2:	77 2d                	ja     c001fde1 <Vm::x87Handler(regs*)+0x353>
c001fdb4:	83 ec 0c             	sub    esp,0xc
c001fdb7:	6a 00                	push   0x0
c001fdb9:	e8 93 fb ff ff       	call   c001f951 <Vm::fpuGetReg(int)>
c001fdbe:	89 c6                	mov    esi,eax
c001fdc0:	89 d7                	mov    edi,edx
c001fdc2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdc6:	2d e8 00 00 00       	sub    eax,0xe8
c001fdcb:	89 04 24             	mov    DWORD PTR [esp],eax
c001fdce:	e8 7e fb ff ff       	call   c001f951 <Vm::fpuGetReg(int)>
c001fdd3:	57                   	push   edi
c001fdd4:	56                   	push   esi
c001fdd5:	52                   	push   edx
c001fdd6:	50                   	push   eax
c001fdd7:	e8 15 fb ff ff       	call   c001f8f1 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fddc:	e9 76 ff ff ff       	jmp    c001fd57 <Vm::x87Handler(regs*)+0x2c9>
c001fde1:	8d 50 10             	lea    edx,[eax+0x10]
c001fde4:	80 fa 07             	cmp    dl,0x7
c001fde7:	77 1b                	ja     c001fe04 <Vm::x87Handler(regs*)+0x376>
c001fde9:	83 ec 0c             	sub    esp,0xc
c001fdec:	2d f0 00 00 00       	sub    eax,0xf0
c001fdf1:	50                   	push   eax
c001fdf2:	e8 5a fb ff ff       	call   c001f951 <Vm::fpuGetReg(int)>
c001fdf7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdfe:	89 c6                	mov    esi,eax
c001fe00:	89 d7                	mov    edi,edx
c001fe02:	eb 22                	jmp    c001fe26 <Vm::x87Handler(regs*)+0x398>
c001fe04:	3c f7                	cmp    al,0xf7
c001fe06:	0f 86 d1 03 00 00    	jbe    c00201dd <Vm::x87Handler(regs*)+0x74f>
c001fe0c:	83 ec 0c             	sub    esp,0xc
c001fe0f:	6a 00                	push   0x0
c001fe11:	e8 3b fb ff ff       	call   c001f951 <Vm::fpuGetReg(int)>
c001fe16:	89 c6                	mov    esi,eax
c001fe18:	89 d7                	mov    edi,edx
c001fe1a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe1e:	2d f8 00 00 00       	sub    eax,0xf8
c001fe23:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe26:	e8 26 fb ff ff       	call   c001f951 <Vm::fpuGetReg(int)>
c001fe2b:	57                   	push   edi
c001fe2c:	56                   	push   esi
c001fe2d:	52                   	push   edx
c001fe2e:	50                   	push   eax
c001fe2f:	e8 eb fa ff ff       	call   c001f91f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fe34:	83 c4 1c             	add    esp,0x1c
c001fe37:	52                   	push   edx
c001fe38:	50                   	push   eax
c001fe39:	6a 00                	push   0x0
c001fe3b:	e9 51 02 00 00       	jmp    c0020091 <Vm::x87Handler(regs*)+0x603>
c001fe40:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe44:	8d 50 40             	lea    edx,[eax+0x40]
c001fe47:	80 fa 07             	cmp    dl,0x7
c001fe4a:	77 37                	ja     c001fe83 <Vm::x87Handler(regs*)+0x3f5>
c001fe4c:	83 ec 0c             	sub    esp,0xc
c001fe4f:	2d c0 00 00 00       	sub    eax,0xc0
c001fe54:	50                   	push   eax
c001fe55:	e8 f7 fa ff ff       	call   c001f951 <Vm::fpuGetReg(int)>
c001fe5a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe61:	89 c6                	mov    esi,eax
c001fe63:	89 d7                	mov    edi,edx
c001fe65:	e8 e7 fa ff ff       	call   c001f951 <Vm::fpuGetReg(int)>
c001fe6a:	57                   	push   edi
c001fe6b:	56                   	push   esi
c001fe6c:	52                   	push   edx
c001fe6d:	50                   	push   eax
c001fe6e:	e8 54 fa ff ff       	call   c001f8c7 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fe73:	83 c4 1c             	add    esp,0x1c
c001fe76:	52                   	push   edx
c001fe77:	50                   	push   eax
c001fe78:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe7c:	2d c0 00 00 00       	sub    eax,0xc0
c001fe81:	eb 3d                	jmp    c001fec0 <Vm::x87Handler(regs*)+0x432>
c001fe83:	8d 50 38             	lea    edx,[eax+0x38]
c001fe86:	80 fa 07             	cmp    dl,0x7
c001fe89:	77 3b                	ja     c001fec6 <Vm::x87Handler(regs*)+0x438>
c001fe8b:	83 ec 0c             	sub    esp,0xc
c001fe8e:	2d c8 00 00 00       	sub    eax,0xc8
c001fe93:	50                   	push   eax
c001fe94:	e8 b8 fa ff ff       	call   c001f951 <Vm::fpuGetReg(int)>
c001fe99:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fea0:	89 c6                	mov    esi,eax
c001fea2:	89 d7                	mov    edi,edx
c001fea4:	e8 a8 fa ff ff       	call   c001f951 <Vm::fpuGetReg(int)>
c001fea9:	57                   	push   edi
c001feaa:	56                   	push   esi
c001feab:	52                   	push   edx
c001feac:	50                   	push   eax
c001fead:	e8 4e fa ff ff       	call   c001f900 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001feb2:	83 c4 1c             	add    esp,0x1c
c001feb5:	52                   	push   edx
c001feb6:	50                   	push   eax
c001feb7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001febb:	2d c8 00 00 00       	sub    eax,0xc8
c001fec0:	50                   	push   eax
c001fec1:	e9 75 fc ff ff       	jmp    c001fb3b <Vm::x87Handler(regs*)+0xad>
c001fec6:	83 c0 18             	add    eax,0x18
c001fec9:	3c 07                	cmp    al,0x7
c001fecb:	0f 87 3b 04 00 00    	ja     c002030c <Vm::x87Handler(regs*)+0x87e>
c001fed1:	83 ec 0c             	sub    esp,0xc
c001fed4:	6a 00                	push   0x0
c001fed6:	e8 76 fa ff ff       	call   c001f951 <Vm::fpuGetReg(int)>
c001fedb:	89 c6                	mov    esi,eax
c001fedd:	89 d7                	mov    edi,edx
c001fedf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fee3:	2d e8 00 00 00       	sub    eax,0xe8
c001fee8:	89 04 24             	mov    DWORD PTR [esp],eax
c001feeb:	e8 61 fa ff ff       	call   c001f951 <Vm::fpuGetReg(int)>
c001fef0:	57                   	push   edi
c001fef1:	56                   	push   esi
c001fef2:	52                   	push   edx
c001fef3:	50                   	push   eax
c001fef4:	e8 f8 f9 ff ff       	call   c001f8f1 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fef9:	83 c4 1c             	add    esp,0x1c
c001fefc:	52                   	push   edx
c001fefd:	50                   	push   eax
c001fefe:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff02:	2d e8 00 00 00       	sub    eax,0xe8
c001ff07:	eb b7                	jmp    c001fec0 <Vm::x87Handler(regs*)+0x432>
c001ff09:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff0d:	8d 50 40             	lea    edx,[eax+0x40]
c001ff10:	80 fa 07             	cmp    dl,0x7
c001ff13:	77 3a                	ja     c001ff4f <Vm::x87Handler(regs*)+0x4c1>
c001ff15:	83 ec 0c             	sub    esp,0xc
c001ff18:	2d c0 00 00 00       	sub    eax,0xc0
c001ff1d:	50                   	push   eax
c001ff1e:	e8 2e fa ff ff       	call   c001f951 <Vm::fpuGetReg(int)>
c001ff23:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff2a:	89 c6                	mov    esi,eax
c001ff2c:	89 d7                	mov    edi,edx
c001ff2e:	e8 1e fa ff ff       	call   c001f951 <Vm::fpuGetReg(int)>
c001ff33:	57                   	push   edi
c001ff34:	56                   	push   esi
c001ff35:	52                   	push   edx
c001ff36:	50                   	push   eax
c001ff37:	e8 8b f9 ff ff       	call   c001f8c7 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ff3c:	83 c4 1c             	add    esp,0x1c
c001ff3f:	52                   	push   edx
c001ff40:	50                   	push   eax
c001ff41:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff45:	2d c0 00 00 00       	sub    eax,0xc0
c001ff4a:	e9 9e 01 00 00       	jmp    c00200ed <Vm::x87Handler(regs*)+0x65f>
c001ff4f:	8d 50 20             	lea    edx,[eax+0x20]
c001ff52:	80 fa 07             	cmp    dl,0x7
c001ff55:	77 3a                	ja     c001ff91 <Vm::x87Handler(regs*)+0x503>
c001ff57:	83 ec 0c             	sub    esp,0xc
c001ff5a:	2d e0 00 00 00       	sub    eax,0xe0
c001ff5f:	50                   	push   eax
c001ff60:	e8 ec f9 ff ff       	call   c001f951 <Vm::fpuGetReg(int)>
c001ff65:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff6c:	89 c6                	mov    esi,eax
c001ff6e:	89 d7                	mov    edi,edx
c001ff70:	e8 dc f9 ff ff       	call   c001f951 <Vm::fpuGetReg(int)>
c001ff75:	57                   	push   edi
c001ff76:	56                   	push   esi
c001ff77:	52                   	push   edx
c001ff78:	50                   	push   eax
c001ff79:	e8 73 f9 ff ff       	call   c001f8f1 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ff7e:	83 c4 1c             	add    esp,0x1c
c001ff81:	52                   	push   edx
c001ff82:	50                   	push   eax
c001ff83:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff87:	2d e0 00 00 00       	sub    eax,0xe0
c001ff8c:	e9 5c 01 00 00       	jmp    c00200ed <Vm::x87Handler(regs*)+0x65f>
c001ff91:	8d 50 18             	lea    edx,[eax+0x18]
c001ff94:	80 fa 07             	cmp    dl,0x7
c001ff97:	77 3b                	ja     c001ffd4 <Vm::x87Handler(regs*)+0x546>
c001ff99:	83 ec 0c             	sub    esp,0xc
c001ff9c:	6a 00                	push   0x0
c001ff9e:	e8 ae f9 ff ff       	call   c001f951 <Vm::fpuGetReg(int)>
c001ffa3:	89 c6                	mov    esi,eax
c001ffa5:	89 d7                	mov    edi,edx
c001ffa7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffab:	2d e8 00 00 00       	sub    eax,0xe8
c001ffb0:	89 04 24             	mov    DWORD PTR [esp],eax
c001ffb3:	e8 99 f9 ff ff       	call   c001f951 <Vm::fpuGetReg(int)>
c001ffb8:	57                   	push   edi
c001ffb9:	56                   	push   esi
c001ffba:	52                   	push   edx
c001ffbb:	50                   	push   eax
c001ffbc:	e8 30 f9 ff ff       	call   c001f8f1 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ffc1:	83 c4 1c             	add    esp,0x1c
c001ffc4:	52                   	push   edx
c001ffc5:	50                   	push   eax
c001ffc6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffca:	2d e8 00 00 00       	sub    eax,0xe8
c001ffcf:	e9 19 01 00 00       	jmp    c00200ed <Vm::x87Handler(regs*)+0x65f>
c001ffd4:	8d 50 38             	lea    edx,[eax+0x38]
c001ffd7:	80 fa 07             	cmp    dl,0x7
c001ffda:	77 37                	ja     c0020013 <Vm::x87Handler(regs*)+0x585>
c001ffdc:	83 ec 0c             	sub    esp,0xc
c001ffdf:	2d c8 00 00 00       	sub    eax,0xc8
c001ffe4:	50                   	push   eax
c001ffe5:	e8 67 f9 ff ff       	call   c001f951 <Vm::fpuGetReg(int)>
c001ffea:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fff1:	89 c6                	mov    esi,eax
c001fff3:	89 d7                	mov    edi,edx
c001fff5:	e8 57 f9 ff ff       	call   c001f951 <Vm::fpuGetReg(int)>
c001fffa:	57                   	push   edi
c001fffb:	56                   	push   esi
c001fffc:	52                   	push   edx
c001fffd:	50                   	push   eax
c001fffe:	e8 fd f8 ff ff       	call   c001f900 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020003:	83 c4 1c             	add    esp,0x1c
c0020006:	52                   	push   edx
c0020007:	50                   	push   eax
c0020008:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002000c:	2d c8 00 00 00       	sub    eax,0xc8
c0020011:	eb 7d                	jmp    c0020090 <Vm::x87Handler(regs*)+0x602>
c0020013:	3c f7                	cmp    al,0xf7
c0020015:	76 38                	jbe    c002004f <Vm::x87Handler(regs*)+0x5c1>
c0020017:	83 ec 0c             	sub    esp,0xc
c002001a:	6a 00                	push   0x0
c002001c:	e8 30 f9 ff ff       	call   c001f951 <Vm::fpuGetReg(int)>
c0020021:	89 c6                	mov    esi,eax
c0020023:	89 d7                	mov    edi,edx
c0020025:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020029:	2d f8 00 00 00       	sub    eax,0xf8
c002002e:	89 04 24             	mov    DWORD PTR [esp],eax
c0020031:	e8 1b f9 ff ff       	call   c001f951 <Vm::fpuGetReg(int)>
c0020036:	57                   	push   edi
c0020037:	56                   	push   esi
c0020038:	52                   	push   edx
c0020039:	50                   	push   eax
c002003a:	e8 e0 f8 ff ff       	call   c001f91f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002003f:	83 c4 1c             	add    esp,0x1c
c0020042:	52                   	push   edx
c0020043:	50                   	push   eax
c0020044:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020048:	2d f8 00 00 00       	sub    eax,0xf8
c002004d:	eb 41                	jmp    c0020090 <Vm::x87Handler(regs*)+0x602>
c002004f:	8d 50 10             	lea    edx,[eax+0x10]
c0020052:	80 fa 07             	cmp    dl,0x7
c0020055:	0f 87 5a 01 00 00    	ja     c00201b5 <Vm::x87Handler(regs*)+0x727>
c002005b:	83 ec 0c             	sub    esp,0xc
c002005e:	2d f0 00 00 00       	sub    eax,0xf0
c0020063:	50                   	push   eax
c0020064:	e8 e8 f8 ff ff       	call   c001f951 <Vm::fpuGetReg(int)>
c0020069:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020070:	89 c6                	mov    esi,eax
c0020072:	89 d7                	mov    edi,edx
c0020074:	e8 d8 f8 ff ff       	call   c001f951 <Vm::fpuGetReg(int)>
c0020079:	57                   	push   edi
c002007a:	56                   	push   esi
c002007b:	52                   	push   edx
c002007c:	50                   	push   eax
c002007d:	e8 9d f8 ff ff       	call   c001f91f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020082:	83 c4 1c             	add    esp,0x1c
c0020085:	52                   	push   edx
c0020086:	50                   	push   eax
c0020087:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002008b:	2d f0 00 00 00       	sub    eax,0xf0
c0020090:	50                   	push   eax
c0020091:	e8 fe f8 ff ff       	call   c001f994 <Vm::fpuSetReg(int, unsigned long long)>
c0020096:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002009a:	e8 9d f9 ff ff       	call   c001fa3c <Vm::fpuPop()>
c002009f:	e9 5e fa ff ff       	jmp    c001fb02 <Vm::x87Handler(regs*)+0x74>
c00200a4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200a8:	8d 50 30             	lea    edx,[eax+0x30]
c00200ab:	80 fa 07             	cmp    dl,0x7
c00200ae:	77 1d                	ja     c00200cd <Vm::x87Handler(regs*)+0x63f>
c00200b0:	83 ec 0c             	sub    esp,0xc
c00200b3:	6a 00                	push   0x0
c00200b5:	e8 97 f8 ff ff       	call   c001f951 <Vm::fpuGetReg(int)>
c00200ba:	83 c4 0c             	add    esp,0xc
c00200bd:	52                   	push   edx
c00200be:	50                   	push   eax
c00200bf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200c3:	2d d0 00 00 00       	sub    eax,0xd0
c00200c8:	e9 f3 fd ff ff       	jmp    c001fec0 <Vm::x87Handler(regs*)+0x432>
c00200cd:	8d 50 28             	lea    edx,[eax+0x28]
c00200d0:	80 fa 07             	cmp    dl,0x7
c00200d3:	77 28                	ja     c00200fd <Vm::x87Handler(regs*)+0x66f>
c00200d5:	83 ec 0c             	sub    esp,0xc
c00200d8:	6a 00                	push   0x0
c00200da:	e8 72 f8 ff ff       	call   c001f951 <Vm::fpuGetReg(int)>
c00200df:	83 c4 0c             	add    esp,0xc
c00200e2:	52                   	push   edx
c00200e3:	50                   	push   eax
c00200e4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200e8:	2d d8 00 00 00       	sub    eax,0xd8
c00200ed:	50                   	push   eax
c00200ee:	e8 a1 f8 ff ff       	call   c001f994 <Vm::fpuSetReg(int, unsigned long long)>
c00200f3:	e8 44 f9 ff ff       	call   c001fa3c <Vm::fpuPop()>
c00200f8:	e9 01 fa ff ff       	jmp    c001fafe <Vm::x87Handler(regs*)+0x70>
c00200fd:	8d 50 20             	lea    edx,[eax+0x20]
c0020100:	80 fa 07             	cmp    dl,0x7
c0020103:	77 30                	ja     c0020135 <Vm::x87Handler(regs*)+0x6a7>
c0020105:	83 ec 0c             	sub    esp,0xc
c0020108:	2d e0 00 00 00       	sub    eax,0xe0
c002010d:	50                   	push   eax
c002010e:	e8 3e f8 ff ff       	call   c001f951 <Vm::fpuGetReg(int)>
c0020113:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002011a:	89 c6                	mov    esi,eax
c002011c:	89 d7                	mov    edi,edx
c002011e:	e8 2e f8 ff ff       	call   c001f951 <Vm::fpuGetReg(int)>
c0020123:	57                   	push   edi
c0020124:	56                   	push   esi
c0020125:	52                   	push   edx
c0020126:	50                   	push   eax
c0020127:	e8 48 f7 ff ff       	call   c001f874 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002012c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020130:	e9 54 02 00 00       	jmp    c0020389 <Vm::x87Handler(regs*)+0x8fb>
c0020135:	8d 50 18             	lea    edx,[eax+0x18]
c0020138:	80 fa 07             	cmp    dl,0x7
c002013b:	0f 87 43 fb ff ff    	ja     c001fc84 <Vm::x87Handler(regs*)+0x1f6>
c0020141:	83 ec 0c             	sub    esp,0xc
c0020144:	2d e8 00 00 00       	sub    eax,0xe8
c0020149:	50                   	push   eax
c002014a:	e8 02 f8 ff ff       	call   c001f951 <Vm::fpuGetReg(int)>
c002014f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020156:	89 c6                	mov    esi,eax
c0020158:	89 d7                	mov    edi,edx
c002015a:	e8 f2 f7 ff ff       	call   c001f951 <Vm::fpuGetReg(int)>
c002015f:	57                   	push   edi
c0020160:	56                   	push   esi
c0020161:	52                   	push   edx
c0020162:	50                   	push   eax
c0020163:	e8 0c f7 ff ff       	call   c001f874 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020168:	83 c4 20             	add    esp,0x20
c002016b:	e8 cc f8 ff ff       	call   c001fa3c <Vm::fpuPop()>
c0020170:	eb 62                	jmp    c00201d4 <Vm::x87Handler(regs*)+0x746>
c0020172:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c0020176:	0f 85 0f 01 00 00    	jne    c002028b <Vm::x87Handler(regs*)+0x7fd>
c002017c:	83 ec 0c             	sub    esp,0xc
c002017f:	6a 01                	push   0x1
c0020181:	e8 cb f7 ff ff       	call   c001f951 <Vm::fpuGetReg(int)>
c0020186:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002018d:	89 c6                	mov    esi,eax
c002018f:	89 d7                	mov    edi,edx
c0020191:	e8 bb f7 ff ff       	call   c001f951 <Vm::fpuGetReg(int)>
c0020196:	57                   	push   edi
c0020197:	56                   	push   esi
c0020198:	52                   	push   edx
c0020199:	50                   	push   eax
c002019a:	e8 d5 f6 ff ff       	call   c001f874 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002019f:	83 c4 20             	add    esp,0x20
c00201a2:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00201a6:	e8 91 f8 ff ff       	call   c001fa3c <Vm::fpuPop()>
c00201ab:	e8 8c f8 ff ff       	call   c001fa3c <Vm::fpuPop()>
c00201b0:	e9 50 f9 ff ff       	jmp    c001fb05 <Vm::x87Handler(regs*)+0x77>
c00201b5:	3c d9                	cmp    al,0xd9
c00201b7:	0f 85 b5 02 00 00    	jne    c0020472 <Vm::x87Handler(regs*)+0x9e4>
c00201bd:	eb bd                	jmp    c002017c <Vm::x87Handler(regs*)+0x6ee>
c00201bf:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c00201c3:	0f 85 ea 02 00 00    	jne    c00204b3 <Vm::x87Handler(regs*)+0xa25>
c00201c9:	0f b7 05 a0 1b 03 c0 	movzx  eax,WORD PTR ds:0xc0031ba0
c00201d0:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c00201d4:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00201d8:	e9 28 f9 ff ff       	jmp    c001fb05 <Vm::x87Handler(regs*)+0x77>
c00201dd:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00201e1:	84 d2                	test   dl,dl
c00201e3:	75 0f                	jne    c00201f4 <Vm::x87Handler(regs*)+0x766>
c00201e5:	83 ec 0c             	sub    esp,0xc
c00201e8:	ff 36                	push   DWORD PTR [esi]
c00201ea:	e8 b1 f4 ff ff       	call   c001f6a0 <Vm::fpu32ToInternal(unsigned int)>
c00201ef:	e9 2c 01 00 00       	jmp    c0020320 <Vm::x87Handler(regs*)+0x892>
c00201f4:	80 fa 01             	cmp    dl,0x1
c00201f7:	75 0f                	jne    c0020208 <Vm::x87Handler(regs*)+0x77a>
c00201f9:	83 ec 0c             	sub    esp,0xc
c00201fc:	ff 36                	push   DWORD PTR [esi]
c00201fe:	e8 9d f4 ff ff       	call   c001f6a0 <Vm::fpu32ToInternal(unsigned int)>
c0020203:	e9 81 02 00 00       	jmp    c0020489 <Vm::x87Handler(regs*)+0x9fb>
c0020208:	80 fa 04             	cmp    dl,0x4
c002020b:	75 0f                	jne    c002021c <Vm::x87Handler(regs*)+0x78e>
c002020d:	83 ec 0c             	sub    esp,0xc
c0020210:	ff 36                	push   DWORD PTR [esi]
c0020212:	e8 89 f4 ff ff       	call   c001f6a0 <Vm::fpu32ToInternal(unsigned int)>
c0020217:	e9 86 01 00 00       	jmp    c00203a2 <Vm::x87Handler(regs*)+0x914>
c002021c:	80 fa 05             	cmp    dl,0x5
c002021f:	75 1b                	jne    c002023c <Vm::x87Handler(regs*)+0x7ae>
c0020221:	83 ec 0c             	sub    esp,0xc
c0020224:	6a 00                	push   0x0
c0020226:	e8 26 f7 ff ff       	call   c001f951 <Vm::fpuGetReg(int)>
c002022b:	89 c7                	mov    edi,eax
c002022d:	89 d5                	mov    ebp,edx
c002022f:	58                   	pop    eax
c0020230:	ff 36                	push   DWORD PTR [esi]
c0020232:	e8 69 f4 ff ff       	call   c001f6a0 <Vm::fpu32ToInternal(unsigned int)>
c0020237:	e9 a3 01 00 00       	jmp    c00203df <Vm::x87Handler(regs*)+0x951>
c002023c:	80 fa 06             	cmp    dl,0x6
c002023f:	75 0f                	jne    c0020250 <Vm::x87Handler(regs*)+0x7c2>
c0020241:	83 ec 0c             	sub    esp,0xc
c0020244:	ff 36                	push   DWORD PTR [esi]
c0020246:	e8 55 f4 ff ff       	call   c001f6a0 <Vm::fpu32ToInternal(unsigned int)>
c002024b:	e9 ae 01 00 00       	jmp    c00203fe <Vm::x87Handler(regs*)+0x970>
c0020250:	31 c0                	xor    eax,eax
c0020252:	80 fa 07             	cmp    dl,0x7
c0020255:	0f 85 94 02 00 00    	jne    c00204ef <Vm::x87Handler(regs*)+0xa61>
c002025b:	83 ec 0c             	sub    esp,0xc
c002025e:	6a 00                	push   0x0
c0020260:	e8 ec f6 ff ff       	call   c001f951 <Vm::fpuGetReg(int)>
c0020265:	89 c7                	mov    edi,eax
c0020267:	89 d5                	mov    ebp,edx
c0020269:	58                   	pop    eax
c002026a:	ff 36                	push   DWORD PTR [esi]
c002026c:	e8 2f f4 ff ff       	call   c001f6a0 <Vm::fpu32ToInternal(unsigned int)>
c0020271:	e9 cb 01 00 00       	jmp    c0020441 <Vm::x87Handler(regs*)+0x9b3>
c0020276:	80 fa 03             	cmp    dl,0x3
c0020279:	0f 85 d3 01 00 00    	jne    c0020452 <Vm::x87Handler(regs*)+0x9c4>
c002027f:	e8 b8 f7 ff ff       	call   c001fa3c <Vm::fpuPop()>
c0020284:	51                   	push   ecx
c0020285:	51                   	push   ecx
c0020286:	e9 de 01 00 00       	jmp    c0020469 <Vm::x87Handler(regs*)+0x9db>
c002028b:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002028f:	80 fa 01             	cmp    dl,0x1
c0020292:	75 09                	jne    c002029d <Vm::x87Handler(regs*)+0x80f>
c0020294:	57                   	push   edi
c0020295:	57                   	push   edi
c0020296:	8b 06                	mov    eax,DWORD PTR [esi]
c0020298:	e9 e3 01 00 00       	jmp    c0020480 <Vm::x87Handler(regs*)+0x9f2>
c002029d:	80 fa 04             	cmp    dl,0x4
c00202a0:	75 12                	jne    c00202b4 <Vm::x87Handler(regs*)+0x826>
c00202a2:	31 d2                	xor    edx,edx
c00202a4:	51                   	push   ecx
c00202a5:	51                   	push   ecx
c00202a6:	8b 06                	mov    eax,DWORD PTR [esi]
c00202a8:	52                   	push   edx
c00202a9:	50                   	push   eax
c00202aa:	e8 d0 f4 ff ff       	call   c001f77f <Vm::fpuLongToFloat(long long)>
c00202af:	e9 ee 00 00 00       	jmp    c00203a2 <Vm::x87Handler(regs*)+0x914>
c00202b4:	31 c0                	xor    eax,eax
c00202b6:	80 fa 07             	cmp    dl,0x7
c00202b9:	0f 85 30 02 00 00    	jne    c00204ef <Vm::x87Handler(regs*)+0xa61>
c00202bf:	83 ec 0c             	sub    esp,0xc
c00202c2:	6a 00                	push   0x0
c00202c4:	e8 88 f6 ff ff       	call   c001f951 <Vm::fpuGetReg(int)>
c00202c9:	89 c7                	mov    edi,eax
c00202cb:	89 d5                	mov    ebp,edx
c00202cd:	58                   	pop    eax
c00202ce:	8b 06                	mov    eax,DWORD PTR [esi]
c00202d0:	5a                   	pop    edx
c00202d1:	31 d2                	xor    edx,edx
c00202d3:	52                   	push   edx
c00202d4:	50                   	push   eax
c00202d5:	e8 a5 f4 ff ff       	call   c001f77f <Vm::fpuLongToFloat(long long)>
c00202da:	e9 62 01 00 00       	jmp    c0020441 <Vm::x87Handler(regs*)+0x9b3>
c00202df:	84 d2                	test   dl,dl
c00202e1:	75 0d                	jne    c00202f0 <Vm::x87Handler(regs*)+0x862>
c00202e3:	31 d2                	xor    edx,edx
c00202e5:	55                   	push   ebp
c00202e6:	55                   	push   ebp
c00202e7:	8b 06                	mov    eax,DWORD PTR [esi]
c00202e9:	52                   	push   edx
c00202ea:	50                   	push   eax
c00202eb:	e9 d3 01 00 00       	jmp    c00204c3 <Vm::x87Handler(regs*)+0xa35>
c00202f0:	31 c0                	xor    eax,eax
c00202f2:	80 fa 02             	cmp    dl,0x2
c00202f5:	0f 85 f4 01 00 00    	jne    c00204ef <Vm::x87Handler(regs*)+0xa61>
c00202fb:	83 ec 0c             	sub    esp,0xc
c00202fe:	6a 00                	push   0x0
c0020300:	e8 4c f6 ff ff       	call   c001f951 <Vm::fpuGetReg(int)>
c0020305:	59                   	pop    ecx
c0020306:	5f                   	pop    edi
c0020307:	e9 6a f9 ff ff       	jmp    c001fc76 <Vm::x87Handler(regs*)+0x1e8>
c002030c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020310:	84 d2                	test   dl,dl
c0020312:	75 2a                	jne    c002033e <Vm::x87Handler(regs*)+0x8b0>
c0020314:	50                   	push   eax
c0020315:	50                   	push   eax
c0020316:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020319:	ff 36                	push   DWORD PTR [esi]
c002031b:	e8 c5 f3 ff ff       	call   c001f6e5 <Vm::fpu64ToInternal(unsigned long long)>
c0020320:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020327:	89 c6                	mov    esi,eax
c0020329:	89 d7                	mov    edi,edx
c002032b:	e8 21 f6 ff ff       	call   c001f951 <Vm::fpuGetReg(int)>
c0020330:	57                   	push   edi
c0020331:	56                   	push   esi
c0020332:	52                   	push   edx
c0020333:	50                   	push   eax
c0020334:	e8 8e f5 ff ff       	call   c001f8c7 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020339:	e9 64 01 00 00       	jmp    c00204a2 <Vm::x87Handler(regs*)+0xa14>
c002033e:	80 fa 01             	cmp    dl,0x1
c0020341:	75 11                	jne    c0020354 <Vm::x87Handler(regs*)+0x8c6>
c0020343:	50                   	push   eax
c0020344:	50                   	push   eax
c0020345:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020348:	ff 36                	push   DWORD PTR [esi]
c002034a:	e8 96 f3 ff ff       	call   c001f6e5 <Vm::fpu64ToInternal(unsigned long long)>
c002034f:	e9 35 01 00 00       	jmp    c0020489 <Vm::x87Handler(regs*)+0x9fb>
c0020354:	80 fa 02             	cmp    dl,0x2
c0020357:	0f 85 54 f9 ff ff    	jne    c001fcb1 <Vm::x87Handler(regs*)+0x223>
c002035d:	55                   	push   ebp
c002035e:	55                   	push   ebp
c002035f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020362:	ff 36                	push   DWORD PTR [esi]
c0020364:	e8 7c f3 ff ff       	call   c001f6e5 <Vm::fpu64ToInternal(unsigned long long)>
c0020369:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020370:	89 c6                	mov    esi,eax
c0020372:	89 d7                	mov    edi,edx
c0020374:	e8 d8 f5 ff ff       	call   c001f951 <Vm::fpuGetReg(int)>
c0020379:	57                   	push   edi
c002037a:	56                   	push   esi
c002037b:	52                   	push   edx
c002037c:	50                   	push   eax
c002037d:	e8 f2 f4 ff ff       	call   c001f874 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020382:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020386:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020389:	83 c4 20             	add    esp,0x20
c002038c:	e9 74 f7 ff ff       	jmp    c001fb05 <Vm::x87Handler(regs*)+0x77>
c0020391:	80 fa 04             	cmp    dl,0x4
c0020394:	75 2a                	jne    c00203c0 <Vm::x87Handler(regs*)+0x932>
c0020396:	51                   	push   ecx
c0020397:	51                   	push   ecx
c0020398:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002039b:	ff 36                	push   DWORD PTR [esi]
c002039d:	e8 43 f3 ff ff       	call   c001f6e5 <Vm::fpu64ToInternal(unsigned long long)>
c00203a2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203a9:	89 c6                	mov    esi,eax
c00203ab:	89 d7                	mov    edi,edx
c00203ad:	e8 9f f5 ff ff       	call   c001f951 <Vm::fpuGetReg(int)>
c00203b2:	57                   	push   edi
c00203b3:	56                   	push   esi
c00203b4:	52                   	push   edx
c00203b5:	50                   	push   eax
c00203b6:	e8 36 f5 ff ff       	call   c001f8f1 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00203bb:	e9 e2 00 00 00       	jmp    c00204a2 <Vm::x87Handler(regs*)+0xa14>
c00203c0:	80 fa 05             	cmp    dl,0x5
c00203c3:	75 28                	jne    c00203ed <Vm::x87Handler(regs*)+0x95f>
c00203c5:	83 ec 0c             	sub    esp,0xc
c00203c8:	6a 00                	push   0x0
c00203ca:	e8 82 f5 ff ff       	call   c001f951 <Vm::fpuGetReg(int)>
c00203cf:	89 c7                	mov    edi,eax
c00203d1:	89 d5                	mov    ebp,edx
c00203d3:	58                   	pop    eax
c00203d4:	5a                   	pop    edx
c00203d5:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203d8:	ff 36                	push   DWORD PTR [esi]
c00203da:	e8 06 f3 ff ff       	call   c001f6e5 <Vm::fpu64ToInternal(unsigned long long)>
c00203df:	83 c4 10             	add    esp,0x10
c00203e2:	55                   	push   ebp
c00203e3:	57                   	push   edi
c00203e4:	52                   	push   edx
c00203e5:	50                   	push   eax
c00203e6:	e8 06 f5 ff ff       	call   c001f8f1 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00203eb:	eb 60                	jmp    c002044d <Vm::x87Handler(regs*)+0x9bf>
c00203ed:	80 fa 06             	cmp    dl,0x6
c00203f0:	75 2a                	jne    c002041c <Vm::x87Handler(regs*)+0x98e>
c00203f2:	51                   	push   ecx
c00203f3:	51                   	push   ecx
c00203f4:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203f7:	ff 36                	push   DWORD PTR [esi]
c00203f9:	e8 e7 f2 ff ff       	call   c001f6e5 <Vm::fpu64ToInternal(unsigned long long)>
c00203fe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020405:	89 c6                	mov    esi,eax
c0020407:	89 d7                	mov    edi,edx
c0020409:	e8 43 f5 ff ff       	call   c001f951 <Vm::fpuGetReg(int)>
c002040e:	57                   	push   edi
c002040f:	56                   	push   esi
c0020410:	52                   	push   edx
c0020411:	50                   	push   eax
c0020412:	e8 08 f5 ff ff       	call   c001f91f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020417:	e9 86 00 00 00       	jmp    c00204a2 <Vm::x87Handler(regs*)+0xa14>
c002041c:	31 c0                	xor    eax,eax
c002041e:	80 fa 07             	cmp    dl,0x7
c0020421:	0f 85 c8 00 00 00    	jne    c00204ef <Vm::x87Handler(regs*)+0xa61>
c0020427:	83 ec 0c             	sub    esp,0xc
c002042a:	6a 00                	push   0x0
c002042c:	e8 20 f5 ff ff       	call   c001f951 <Vm::fpuGetReg(int)>
c0020431:	89 c7                	mov    edi,eax
c0020433:	89 d5                	mov    ebp,edx
c0020435:	58                   	pop    eax
c0020436:	5a                   	pop    edx
c0020437:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002043a:	ff 36                	push   DWORD PTR [esi]
c002043c:	e8 a4 f2 ff ff       	call   c001f6e5 <Vm::fpu64ToInternal(unsigned long long)>
c0020441:	83 c4 10             	add    esp,0x10
c0020444:	55                   	push   ebp
c0020445:	57                   	push   edi
c0020446:	52                   	push   edx
c0020447:	50                   	push   eax
c0020448:	e8 d2 f4 ff ff       	call   c001f91f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002044d:	83 c4 0c             	add    esp,0xc
c0020450:	eb 53                	jmp    c00204a5 <Vm::x87Handler(regs*)+0xa17>
c0020452:	31 c0                	xor    eax,eax
c0020454:	80 fa 02             	cmp    dl,0x2
c0020457:	0f 85 92 00 00 00    	jne    c00204ef <Vm::x87Handler(regs*)+0xa61>
c002045d:	83 ec 0c             	sub    esp,0xc
c0020460:	6a 00                	push   0x0
c0020462:	e8 ea f4 ff ff       	call   c001f951 <Vm::fpuGetReg(int)>
c0020467:	59                   	pop    ecx
c0020468:	5f                   	pop    edi
c0020469:	52                   	push   edx
c002046a:	50                   	push   eax
c002046b:	e8 27 f2 ff ff       	call   c001f697 <Vm::fpuInternalTo64(unsigned long long)>
c0020470:	eb 70                	jmp    c00204e2 <Vm::x87Handler(regs*)+0xa54>
c0020472:	31 c0                	xor    eax,eax
c0020474:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020479:	75 74                	jne    c00204ef <Vm::x87Handler(regs*)+0xa61>
c002047b:	50                   	push   eax
c002047c:	50                   	push   eax
c002047d:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0020480:	31 d2                	xor    edx,edx
c0020482:	52                   	push   edx
c0020483:	50                   	push   eax
c0020484:	e8 f6 f2 ff ff       	call   c001f77f <Vm::fpuLongToFloat(long long)>
c0020489:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020490:	89 c6                	mov    esi,eax
c0020492:	89 d7                	mov    edi,edx
c0020494:	e8 b8 f4 ff ff       	call   c001f951 <Vm::fpuGetReg(int)>
c0020499:	57                   	push   edi
c002049a:	56                   	push   esi
c002049b:	52                   	push   edx
c002049c:	50                   	push   eax
c002049d:	e8 5e f4 ff ff       	call   c001f900 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00204a2:	83 c4 1c             	add    esp,0x1c
c00204a5:	52                   	push   edx
c00204a6:	50                   	push   eax
c00204a7:	6a 00                	push   0x0
c00204a9:	e8 e6 f4 ff ff       	call   c001f994 <Vm::fpuSetReg(int, unsigned long long)>
c00204ae:	e9 f2 f7 ff ff       	jmp    c001fca5 <Vm::x87Handler(regs*)+0x217>
c00204b3:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00204b7:	80 fa 05             	cmp    dl,0x5
c00204ba:	75 11                	jne    c00204cd <Vm::x87Handler(regs*)+0xa3f>
c00204bc:	55                   	push   ebp
c00204bd:	55                   	push   ebp
c00204be:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00204c1:	ff 36                	push   DWORD PTR [esi]
c00204c3:	e8 81 f2 ff ff       	call   c001f749 <Vm::fpuULongToFloat(unsigned long long)>
c00204c8:	e9 cf f7 ff ff       	jmp    c001fc9c <Vm::x87Handler(regs*)+0x20e>
c00204cd:	31 c0                	xor    eax,eax
c00204cf:	80 fa 07             	cmp    dl,0x7
c00204d2:	75 1b                	jne    c00204ef <Vm::x87Handler(regs*)+0xa61>
c00204d4:	e8 63 f5 ff ff       	call   c001fa3c <Vm::fpuPop()>
c00204d9:	51                   	push   ecx
c00204da:	51                   	push   ecx
c00204db:	52                   	push   edx
c00204dc:	50                   	push   eax
c00204dd:	e8 0c f2 ff ff       	call   c001f6ee <Vm::fpuFloatToLong(unsigned long long)>
c00204e2:	83 c4 10             	add    esp,0x10
c00204e5:	89 06                	mov    DWORD PTR [esi],eax
c00204e7:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c00204ea:	e9 f8 f7 ff ff       	jmp    c001fce7 <Vm::x87Handler(regs*)+0x259>
c00204ef:	83 c4 1c             	add    esp,0x1c
c00204f2:	5b                   	pop    ebx
c00204f3:	5e                   	pop    esi
c00204f4:	5f                   	pop    edi
c00204f5:	5d                   	pop    ebp
c00204f6:	c3                   	ret    

c00204f7 <__static_initialization_and_destruction_0(int, int)>:
c00204f7:	83 ec 0c             	sub    esp,0xc
c00204fa:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00204ff:	75 1a                	jne    c002051b <__static_initialization_and_destruction_0(int, int)+0x24>
c0020501:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0020509:	75 10                	jne    c002051b <__static_initialization_and_destruction_0(int, int)+0x24>
c002050b:	83 ec 0c             	sub    esp,0xc
c002050e:	68 a0 1b 03 c0       	push   0xc0031ba0
c0020513:	e8 18 88 00 00       	call   c0028d30 <Vm::_FPUState::_FPUState()>
c0020518:	83 c4 10             	add    esp,0x10
c002051b:	90                   	nop
c002051c:	83 c4 0c             	add    esp,0xc
c002051f:	c3                   	ret    

c0020520 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0020520:	83 ec 0c             	sub    esp,0xc
c0020523:	83 ec 08             	sub    esp,0x8
c0020526:	68 ff ff 00 00       	push   0xffff
c002052b:	6a 01                	push   0x1
c002052d:	e8 c5 ff ff ff       	call   c00204f7 <__static_initialization_and_destruction_0(int, int)>
c0020532:	83 c4 10             	add    esp,0x10
c0020535:	83 c4 0c             	add    esp,0xc
c0020538:	c3                   	ret    
c0020539:	90                   	nop

c002053a <FAT::getName()>:
c002053a:	b8 bc c9 02 c0       	mov    eax,0xc002c9bc
c002053f:	c3                   	ret    

c0020540 <FAT::tell(void*, unsigned long long*)>:
c0020540:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020545:	75 06                	jne    c002054d <FAT::tell(void*, unsigned long long*)+0xd>
c0020547:	b8 04 00 00 00       	mov    eax,0x4
c002054c:	c3                   	ret    
c002054d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020552:	75 06                	jne    c002055a <FAT::tell(void*, unsigned long long*)+0x1a>
c0020554:	b8 04 00 00 00       	mov    eax,0x4
c0020559:	c3                   	ret    
c002055a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002055e:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0020561:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0020564:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020568:	89 01                	mov    DWORD PTR [ecx],eax
c002056a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002056d:	b8 00 00 00 00       	mov    eax,0x0
c0020572:	c3                   	ret    
c0020573:	90                   	nop

c0020574 <FAT::stat(void*, unsigned long long*)>:
c0020574:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020579:	75 06                	jne    c0020581 <FAT::stat(void*, unsigned long long*)+0xd>
c002057b:	b8 04 00 00 00       	mov    eax,0x4
c0020580:	c3                   	ret    
c0020581:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020586:	75 06                	jne    c002058e <FAT::stat(void*, unsigned long long*)+0x1a>
c0020588:	b8 04 00 00 00       	mov    eax,0x4
c002058d:	c3                   	ret    
c002058e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020592:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020595:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020598:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002059c:	89 01                	mov    DWORD PTR [ecx],eax
c002059e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00205a1:	b8 00 00 00 00       	mov    eax,0x0
c00205a6:	c3                   	ret    
c00205a7:	90                   	nop

c00205a8 <FAT::~FAT()>:
c00205a8:	83 ec 0c             	sub    esp,0xc
c00205ab:	ba 40 ca 02 c0       	mov    edx,0xc002ca40
c00205b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205b4:	89 10                	mov    DWORD PTR [eax],edx
c00205b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205ba:	83 ec 0c             	sub    esp,0xc
c00205bd:	50                   	push   eax
c00205be:	e8 99 2c ff ff       	call   c001325c <Filesystem::~Filesystem()>
c00205c3:	83 c4 10             	add    esp,0x10
c00205c6:	90                   	nop
c00205c7:	83 c4 0c             	add    esp,0xc
c00205ca:	c3                   	ret    
c00205cb:	90                   	nop

c00205cc <FAT::~FAT()>:
c00205cc:	83 ec 0c             	sub    esp,0xc
c00205cf:	83 ec 0c             	sub    esp,0xc
c00205d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205d6:	e8 cd ff ff ff       	call   c00205a8 <FAT::~FAT()>
c00205db:	83 c4 10             	add    esp,0x10
c00205de:	83 ec 08             	sub    esp,0x8
c00205e1:	6a 08                	push   0x8
c00205e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205e7:	e8 68 28 ff ff       	call   c0012e54 <operator delete(void*, unsigned long)>
c00205ec:	83 c4 10             	add    esp,0x10
c00205ef:	83 c4 0c             	add    esp,0xc
c00205f2:	c3                   	ret    
c00205f3:	90                   	nop

c00205f4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00205f4:	83 ec 1c             	sub    esp,0x1c
c00205f7:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00205fe:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0020603:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020607:	8b 04 85 20 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3e0]
c002060e:	83 f8 ff             	cmp    eax,0xffffffff
c0020611:	75 34                	jne    c0020647 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0020613:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020617:	88 c2                	mov    dl,al
c0020619:	a1 00 1c 03 c0       	mov    eax,ds:0xc0031c00
c002061e:	01 d0                	add    eax,edx
c0020620:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020624:	8b 15 00 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c00
c002062a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002062e:	89 14 85 20 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce3e0],edx
c0020635:	a1 00 1c 03 c0       	mov    eax,ds:0xc0031c00
c002063a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002063e:	89 14 85 a0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce360],edx
c0020645:	eb 17                	jmp    c002065e <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0020647:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002064b:	88 c2                	mov    dl,al
c002064d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020651:	8b 04 85 20 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3e0]
c0020658:	01 d0                	add    eax,edx
c002065a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002065e:	83 ec 04             	sub    esp,0x4
c0020661:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020665:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020669:	8d 44 24 15          	lea    eax,[esp+0x15]
c002066d:	50                   	push   eax
c002066e:	e8 c5 66 fe ff       	call   c0006d38 <f_getlabel>
c0020673:	83 c4 10             	add    esp,0x10
c0020676:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002067a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002067f:	75 07                	jne    c0020688 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020681:	b8 00 00 00 00       	mov    eax,0x0
c0020686:	eb 05                	jmp    c002068d <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020688:	b8 01 00 00 00       	mov    eax,0x1
c002068d:	83 c4 1c             	add    esp,0x1c
c0020690:	c3                   	ret    
c0020691:	90                   	nop

c0020692 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0020692:	57                   	push   edi
c0020693:	83 ec 58             	sub    esp,0x58
c0020696:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c002069e:	8d 54 24 10          	lea    edx,[esp+0x10]
c00206a2:	b9 0f 00 00 00       	mov    ecx,0xf
c00206a7:	b8 00 00 00 00       	mov    eax,0x0
c00206ac:	fc                   	cld    
c00206ad:	89 d7                	mov    edi,edx
c00206af:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00206b1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00206b5:	8b 04 85 20 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3e0]
c00206bc:	83 f8 ff             	cmp    eax,0xffffffff
c00206bf:	75 34                	jne    c00206f5 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c00206c1:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00206c5:	88 c2                	mov    dl,al
c00206c7:	a1 00 1c 03 c0       	mov    eax,ds:0xc0031c00
c00206cc:	01 d0                	add    eax,edx
c00206ce:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00206d2:	8b 15 00 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c00
c00206d8:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00206dc:	89 14 85 20 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce3e0],edx
c00206e3:	a1 00 1c 03 c0       	mov    eax,ds:0xc0031c00
c00206e8:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00206ec:	89 14 85 a0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce360],edx
c00206f3:	eb 17                	jmp    c002070c <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c00206f5:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00206f9:	88 c2                	mov    dl,al
c00206fb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00206ff:	8b 04 85 20 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3e0]
c0020706:	01 d0                	add    eax,edx
c0020708:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002070c:	83 ec 08             	sub    esp,0x8
c002070f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0020713:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020717:	50                   	push   eax
c0020718:	e8 57 02 fe ff       	call   c0000974 <strcat>
c002071d:	83 c4 10             	add    esp,0x10
c0020720:	83 ec 0c             	sub    esp,0xc
c0020723:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020727:	50                   	push   eax
c0020728:	e8 f9 67 fe ff       	call   c0006f26 <f_setlabel>
c002072d:	83 c4 10             	add    esp,0x10
c0020730:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020734:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020739:	75 07                	jne    c0020742 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c002073b:	b8 00 00 00 00       	mov    eax,0x0
c0020740:	eb 05                	jmp    c0020747 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020742:	b8 01 00 00 00       	mov    eax,0x1
c0020747:	83 c4 58             	add    esp,0x58
c002074a:	5f                   	pop    edi
c002074b:	c3                   	ret    

c002074c <FAT::format(LogicalDisk*, int, char const*, int)>:
c002074c:	83 ec 2c             	sub    esp,0x2c
c002074f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020757:	83 ec 08             	sub    esp,0x8
c002075a:	68 e0 c9 02 c0       	push   0xc002c9e0
c002075f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020763:	e8 58 01 fe ff       	call   c00008c0 <strcmp>
c0020768:	83 c4 10             	add    esp,0x10
c002076b:	85 c0                	test   eax,eax
c002076d:	0f 94 c0             	sete   al
c0020770:	84 c0                	test   al,al
c0020772:	74 0d                	je     c0020781 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020774:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002077c:	e9 a6 00 00 00       	jmp    c0020827 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020781:	83 ec 08             	sub    esp,0x8
c0020784:	68 d2 c9 02 c0       	push   0xc002c9d2
c0020789:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002078d:	e8 2e 01 fe ff       	call   c00008c0 <strcmp>
c0020792:	83 c4 10             	add    esp,0x10
c0020795:	85 c0                	test   eax,eax
c0020797:	0f 94 c0             	sete   al
c002079a:	84 c0                	test   al,al
c002079c:	74 0a                	je     c00207a8 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c002079e:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00207a6:	eb 7f                	jmp    c0020827 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00207a8:	83 ec 08             	sub    esp,0x8
c00207ab:	68 d8 c9 02 c0       	push   0xc002c9d8
c00207b0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00207b4:	e8 07 01 fe ff       	call   c00008c0 <strcmp>
c00207b9:	83 c4 10             	add    esp,0x10
c00207bc:	85 c0                	test   eax,eax
c00207be:	0f 94 c0             	sete   al
c00207c1:	84 c0                	test   al,al
c00207c3:	74 0a                	je     c00207cf <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c00207c5:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00207cd:	eb 58                	jmp    c0020827 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00207cf:	83 ec 08             	sub    esp,0x8
c00207d2:	68 8c 94 02 c0       	push   0xc002948c
c00207d7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00207db:	e8 e0 00 fe ff       	call   c00008c0 <strcmp>
c00207e0:	83 c4 10             	add    esp,0x10
c00207e3:	85 c0                	test   eax,eax
c00207e5:	0f 94 c0             	sete   al
c00207e8:	84 c0                	test   al,al
c00207ea:	74 0a                	je     c00207f6 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c00207ec:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00207f4:	eb 31                	jmp    c0020827 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00207f6:	83 ec 08             	sub    esp,0x8
c00207f9:	68 de c9 02 c0       	push   0xc002c9de
c00207fe:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020802:	e8 b9 00 fe ff       	call   c00008c0 <strcmp>
c0020807:	83 c4 10             	add    esp,0x10
c002080a:	85 c0                	test   eax,eax
c002080c:	0f 94 c0             	sete   al
c002080f:	84 c0                	test   al,al
c0020811:	74 0a                	je     c002081d <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0020813:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c002081b:	eb 0a                	jmp    c0020827 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002081d:	b8 08 00 00 00       	mov    eax,0x8
c0020822:	e9 04 01 00 00       	jmp    c002092b <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020827:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c002082e:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0020833:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020837:	8b 04 85 20 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3e0]
c002083e:	83 f8 ff             	cmp    eax,0xffffffff
c0020841:	75 34                	jne    c0020877 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020843:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020847:	88 c2                	mov    dl,al
c0020849:	a1 00 1c 03 c0       	mov    eax,ds:0xc0031c00
c002084e:	01 d0                	add    eax,edx
c0020850:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020854:	8b 15 00 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c00
c002085a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002085e:	89 14 85 20 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce3e0],edx
c0020865:	a1 00 1c 03 c0       	mov    eax,ds:0xc0031c00
c002086a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002086e:	89 14 85 a0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce360],edx
c0020875:	eb 17                	jmp    c002088e <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020877:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002087b:	88 c2                	mov    dl,al
c002087d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020881:	8b 04 85 20 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3e0]
c0020888:	01 d0                	add    eax,edx
c002088a:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002088e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020892:	88 04 24             	mov    BYTE PTR [esp],al
c0020895:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020899:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002089d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00208a5:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00208aa:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00208b2:	83 ec 0c             	sub    esp,0xc
c00208b5:	68 00 20 00 00       	push   0x2000
c00208ba:	e8 81 ef fe ff       	call   c000f840 <malloc>
c00208bf:	83 c4 10             	add    esp,0x10
c00208c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00208c6:	68 00 20 00 00       	push   0x2000
c00208cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00208cf:	8d 44 24 08          	lea    eax,[esp+0x8]
c00208d3:	50                   	push   eax
c00208d4:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00208d8:	50                   	push   eax
c00208d9:	e8 93 6a fe ff       	call   c0007371 <f_mkfs>
c00208de:	83 c4 10             	add    esp,0x10
c00208e1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00208e5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00208ea:	75 07                	jne    c00208f3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c00208ec:	b8 00 00 00 00       	mov    eax,0x0
c00208f1:	eb 38                	jmp    c002092b <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00208f3:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00208f8:	75 17                	jne    c0020911 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c00208fa:	83 ec 0c             	sub    esp,0xc
c00208fd:	68 10 ca 02 c0       	push   0xc002ca10
c0020902:	e8 2d 26 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0020907:	83 c4 10             	add    esp,0x10
c002090a:	b8 09 00 00 00       	mov    eax,0x9
c002090f:	eb 1a                	jmp    c002092b <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020911:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020915:	83 ec 08             	sub    esp,0x8
c0020918:	50                   	push   eax
c0020919:	68 e4 c9 02 c0       	push   0xc002c9e4
c002091e:	e8 11 26 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0020923:	83 c4 10             	add    esp,0x10
c0020926:	b8 01 00 00 00       	mov    eax,0x1
c002092b:	83 c4 2c             	add    esp,0x2c
c002092e:	c3                   	ret    
c002092f:	90                   	nop

c0020930 <FAT::tryMount(LogicalDisk*, int)>:
c0020930:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020936:	a1 00 1c 03 c0       	mov    eax,ds:0xc0031c00
c002093b:	83 f8 14             	cmp    eax,0x14
c002093e:	75 17                	jne    c0020957 <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020940:	83 ec 0c             	sub    esp,0xc
c0020943:	68 f6 c9 02 c0       	push   0xc002c9f6
c0020948:	e8 88 9c ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c002094d:	83 c4 10             	add    esp,0x10
c0020950:	b0 00                	mov    al,0x0
c0020952:	e9 d7 01 00 00       	jmp    c0020b2e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020957:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c002095e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020964:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002096a:	3d 00 02 00 00       	cmp    eax,0x200
c002096f:	74 07                	je     c0020978 <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020971:	b0 00                	mov    al,0x0
c0020973:	e9 b6 01 00 00       	jmp    c0020b2e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020978:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020980:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020987:	8b 04 85 20 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3e0]
c002098e:	83 f8 ff             	cmp    eax,0xffffffff
c0020991:	74 07                	je     c002099a <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020993:	b0 01                	mov    al,0x1
c0020995:	e9 94 01 00 00       	jmp    c0020b2e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002099a:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c00209a4:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c00209ac:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c00209b3:	88 c2                	mov    dl,al
c00209b5:	a1 00 1c 03 c0       	mov    eax,ds:0xc0031c00
c00209ba:	01 d0                	add    eax,edx
c00209bc:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c00209c3:	8b 15 00 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c00
c00209c9:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00209d0:	89 14 85 20 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce3e0],edx
c00209d7:	a1 00 1c 03 c0       	mov    eax,ds:0xc0031c00
c00209dc:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00209e3:	89 14 85 a0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce360],edx
c00209ea:	83 ec 0c             	sub    esp,0xc
c00209ed:	68 54 02 00 00       	push   0x254
c00209f2:	e8 49 ee fe ff       	call   c000f840 <malloc>
c00209f7:	83 c4 10             	add    esp,0x10
c00209fa:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020a01:	83 ec 04             	sub    esp,0x4
c0020a04:	6a 00                	push   0x0
c0020a06:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020a0d:	50                   	push   eax
c0020a0e:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020a15:	e8 15 45 fe ff       	call   c0004f2f <f_mount>
c0020a1a:	83 c4 10             	add    esp,0x10
c0020a1d:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020a24:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020a2c:	74 19                	je     c0020a47 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020a2e:	83 ec 0c             	sub    esp,0xc
c0020a31:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020a38:	e8 23 ee fe ff       	call   c000f860 <rfree>
c0020a3d:	83 c4 10             	add    esp,0x10
c0020a40:	b0 00                	mov    al,0x0
c0020a42:	e9 e7 00 00 00       	jmp    c0020b2e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a47:	83 ec 04             	sub    esp,0x4
c0020a4a:	68 00 01 00 00       	push   0x100
c0020a4f:	6a 00                	push   0x0
c0020a51:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020a58:	50                   	push   eax
c0020a59:	e8 1a fd fd ff       	call   c0000778 <memset>
c0020a5e:	83 c4 10             	add    esp,0x10
c0020a61:	83 ec 08             	sub    esp,0x8
c0020a64:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020a6b:	50                   	push   eax
c0020a6c:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020a73:	50                   	push   eax
c0020a74:	e8 fb fe fd ff       	call   c0000974 <strcat>
c0020a79:	83 c4 10             	add    esp,0x10
c0020a7c:	83 ec 08             	sub    esp,0x8
c0020a7f:	68 04 ca 02 c0       	push   0xc002ca04
c0020a84:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020a8b:	50                   	push   eax
c0020a8c:	e8 e3 fe fd ff       	call   c0000974 <strcat>
c0020a91:	83 c4 10             	add    esp,0x10
c0020a94:	83 ec 04             	sub    esp,0x4
c0020a97:	6a 01                	push   0x1
c0020a99:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020aa0:	50                   	push   eax
c0020aa1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020aa5:	50                   	push   eax
c0020aa6:	e8 e6 44 fe ff       	call   c0004f91 <f_open>
c0020aab:	83 c4 10             	add    esp,0x10
c0020aae:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020ab5:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020abc:	85 c0                	test   eax,eax
c0020abe:	74 0a                	je     c0020aca <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020ac0:	78 2d                	js     c0020aef <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020ac2:	83 e8 04             	sub    eax,0x4
c0020ac5:	83 f8 01             	cmp    eax,0x1
c0020ac8:	77 25                	ja     c0020aef <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020aca:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020ad2:	83 ec 0c             	sub    esp,0xc
c0020ad5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020ad9:	50                   	push   eax
c0020ada:	e8 04 50 fe ff       	call   c0005ae3 <f_close>
c0020adf:	83 c4 10             	add    esp,0x10
c0020ae2:	90                   	nop
c0020ae3:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020aeb:	74 3a                	je     c0020b27 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020aed:	eb 2d                	jmp    c0020b1c <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020aef:	83 ec 0c             	sub    esp,0xc
c0020af2:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020af9:	e8 62 ed fe ff       	call   c000f860 <rfree>
c0020afe:	83 c4 10             	add    esp,0x10
c0020b01:	83 ec 04             	sub    esp,0x4
c0020b04:	6a 00                	push   0x0
c0020b06:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020b0d:	50                   	push   eax
c0020b0e:	6a 00                	push   0x0
c0020b10:	e8 1a 44 fe ff       	call   c0004f2f <f_mount>
c0020b15:	83 c4 10             	add    esp,0x10
c0020b18:	b0 00                	mov    al,0x0
c0020b1a:	eb 12                	jmp    c0020b2e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020b1c:	a1 00 1c 03 c0       	mov    eax,ds:0xc0031c00
c0020b21:	40                   	inc    eax
c0020b22:	a3 00 1c 03 c0       	mov    ds:0xc0031c00,eax
c0020b27:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020b2e:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020b34:	c3                   	ret    
c0020b35:	90                   	nop

c0020b36 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020b36:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0020b3c:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0020b44:	74 0a                	je     c0020b50 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0020b46:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0020b4e:	75 0a                	jne    c0020b5a <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0020b50:	b8 04 00 00 00       	mov    eax,0x4
c0020b55:	e9 db 00 00 00       	jmp    c0020c35 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020b5a:	83 ec 08             	sub    esp,0x8
c0020b5d:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020b64:	50                   	push   eax
c0020b65:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0020b6c:	e8 7c 55 fe ff       	call   c00060ed <f_readdir>
c0020b71:	83 c4 10             	add    esp,0x10
c0020b74:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0020b7b:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020b81:	83 ec 0c             	sub    esp,0xc
c0020b84:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020b8b:	83 c0 1a             	add    eax,0x1a
c0020b8e:	50                   	push   eax
c0020b8f:	e8 00 fc fd ff       	call   c0000794 <strlen>
c0020b94:	83 c4 10             	add    esp,0x10
c0020b97:	ba 00 00 00 00       	mov    edx,0x0
c0020b9c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020ba0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020ba4:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0020bab:	0f b6 c0             	movzx  eax,al
c0020bae:	83 e0 10             	and    eax,0x10
c0020bb1:	74 07                	je     c0020bba <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020bb3:	b8 02 00 00 00       	mov    eax,0x2
c0020bb8:	eb 05                	jmp    c0020bbf <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0020bba:	b8 01 00 00 00       	mov    eax,0x1
c0020bbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020bc3:	83 ec 08             	sub    esp,0x8
c0020bc6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020bcd:	83 c0 1a             	add    eax,0x1a
c0020bd0:	50                   	push   eax
c0020bd1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020bd5:	83 c0 10             	add    eax,0x10
c0020bd8:	50                   	push   eax
c0020bd9:	e8 56 fc fd ff       	call   c0000834 <strcpy>
c0020bde:	83 c4 10             	add    esp,0x10
c0020be1:	83 ec 04             	sub    esp,0x4
c0020be4:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020beb:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020bef:	50                   	push   eax
c0020bf0:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020bf7:	e8 48 fb fd ff       	call   c0000744 <memcpy>
c0020bfc:	83 c4 10             	add    esp,0x10
c0020bff:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020c06:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020c0c:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020c13:	84 c0                	test   al,al
c0020c15:	75 07                	jne    c0020c1e <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020c17:	b8 07 00 00 00       	mov    eax,0x7
c0020c1c:	eb 17                	jmp    c0020c35 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020c1e:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020c25:	85 c0                	test   eax,eax
c0020c27:	75 07                	jne    c0020c30 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020c29:	b8 00 00 00 00       	mov    eax,0x0
c0020c2e:	eb 05                	jmp    c0020c35 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020c30:	b8 01 00 00 00       	mov    eax,0x1
c0020c35:	81 c4 3c 02 00 00    	add    esp,0x23c
c0020c3b:	c3                   	ret    

c0020c3c <FAT::read(void*, unsigned long, void*, int*)>:
c0020c3c:	83 ec 1c             	sub    esp,0x1c
c0020c3f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c44:	74 07                	je     c0020c4d <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020c46:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020c4b:	75 07                	jne    c0020c54 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020c4d:	b8 04 00 00 00       	mov    eax,0x4
c0020c52:	eb 3d                	jmp    c0020c91 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020c54:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c58:	50                   	push   eax
c0020c59:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020c5d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020c61:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c65:	e8 63 47 fe ff       	call   c00053cd <f_read>
c0020c6a:	83 c4 10             	add    esp,0x10
c0020c6d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c71:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c75:	89 c2                	mov    edx,eax
c0020c77:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020c7b:	89 10                	mov    DWORD PTR [eax],edx
c0020c7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020c81:	85 c0                	test   eax,eax
c0020c83:	75 07                	jne    c0020c8c <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020c85:	b8 00 00 00 00       	mov    eax,0x0
c0020c8a:	eb 05                	jmp    c0020c91 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020c8c:	b8 01 00 00 00       	mov    eax,0x1
c0020c91:	83 c4 1c             	add    esp,0x1c
c0020c94:	c3                   	ret    
c0020c95:	90                   	nop

c0020c96 <FAT::write(void*, unsigned long, void*, int*)>:
c0020c96:	83 ec 1c             	sub    esp,0x1c
c0020c99:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c9e:	74 07                	je     c0020ca7 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020ca0:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020ca5:	75 07                	jne    c0020cae <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020ca7:	b8 04 00 00 00       	mov    eax,0x4
c0020cac:	eb 3d                	jmp    c0020ceb <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020cae:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020cb2:	50                   	push   eax
c0020cb3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020cb7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020cbb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020cbf:	e8 89 49 fe ff       	call   c000564d <f_write>
c0020cc4:	83 c4 10             	add    esp,0x10
c0020cc7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020ccb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020ccf:	89 c2                	mov    edx,eax
c0020cd1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020cd5:	89 10                	mov    DWORD PTR [eax],edx
c0020cd7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020cdb:	85 c0                	test   eax,eax
c0020cdd:	75 07                	jne    c0020ce6 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020cdf:	b8 00 00 00 00       	mov    eax,0x0
c0020ce4:	eb 05                	jmp    c0020ceb <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020ce6:	b8 01 00 00 00       	mov    eax,0x1
c0020ceb:	83 c4 1c             	add    esp,0x1c
c0020cee:	c3                   	ret    
c0020cef:	90                   	nop

c0020cf0 <FAT::close(void*)>:
c0020cf0:	83 ec 1c             	sub    esp,0x1c
c0020cf3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020cf8:	75 07                	jne    c0020d01 <FAT::close(void*)+0x11>
c0020cfa:	b8 04 00 00 00       	mov    eax,0x4
c0020cff:	eb 36                	jmp    c0020d37 <FAT::close(void*)+0x47>
c0020d01:	83 ec 0c             	sub    esp,0xc
c0020d04:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d08:	e8 d6 4d fe ff       	call   c0005ae3 <f_close>
c0020d0d:	83 c4 10             	add    esp,0x10
c0020d10:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d14:	83 ec 0c             	sub    esp,0xc
c0020d17:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d1b:	e8 30 eb fe ff       	call   c000f850 <free>
c0020d20:	83 c4 10             	add    esp,0x10
c0020d23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d27:	85 c0                	test   eax,eax
c0020d29:	75 07                	jne    c0020d32 <FAT::close(void*)+0x42>
c0020d2b:	b8 00 00 00 00       	mov    eax,0x0
c0020d30:	eb 05                	jmp    c0020d37 <FAT::close(void*)+0x47>
c0020d32:	b8 01 00 00 00       	mov    eax,0x1
c0020d37:	83 c4 1c             	add    esp,0x1c
c0020d3a:	c3                   	ret    
c0020d3b:	90                   	nop

c0020d3c <FAT::closeDir(void*)>:
c0020d3c:	83 ec 1c             	sub    esp,0x1c
c0020d3f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d44:	75 07                	jne    c0020d4d <FAT::closeDir(void*)+0x11>
c0020d46:	b8 04 00 00 00       	mov    eax,0x4
c0020d4b:	eb 36                	jmp    c0020d83 <FAT::closeDir(void*)+0x47>
c0020d4d:	83 ec 0c             	sub    esp,0xc
c0020d50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d54:	e8 72 53 fe ff       	call   c00060cb <f_closedir>
c0020d59:	83 c4 10             	add    esp,0x10
c0020d5c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d60:	83 ec 0c             	sub    esp,0xc
c0020d63:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d67:	e8 e4 ea fe ff       	call   c000f850 <free>
c0020d6c:	83 c4 10             	add    esp,0x10
c0020d6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d73:	85 c0                	test   eax,eax
c0020d75:	75 07                	jne    c0020d7e <FAT::closeDir(void*)+0x42>
c0020d77:	b8 00 00 00 00       	mov    eax,0x0
c0020d7c:	eb 05                	jmp    c0020d83 <FAT::closeDir(void*)+0x47>
c0020d7e:	b8 01 00 00 00       	mov    eax,0x1
c0020d83:	83 c4 1c             	add    esp,0x1c
c0020d86:	c3                   	ret    
c0020d87:	90                   	nop

c0020d88 <FAT::seek(void*, unsigned long long)>:
c0020d88:	83 ec 2c             	sub    esp,0x2c
c0020d8b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020d8f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020d93:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020d97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d9b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020da0:	75 07                	jne    c0020da9 <FAT::seek(void*, unsigned long long)+0x21>
c0020da2:	b8 04 00 00 00       	mov    eax,0x4
c0020da7:	eb 2f                	jmp    c0020dd8 <FAT::seek(void*, unsigned long long)+0x50>
c0020da9:	83 ec 04             	sub    esp,0x4
c0020dac:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020db0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020db4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020db8:	e8 55 4d fe ff       	call   c0005b12 <f_lseek>
c0020dbd:	83 c4 10             	add    esp,0x10
c0020dc0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020dc4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020dc8:	85 c0                	test   eax,eax
c0020dca:	75 07                	jne    c0020dd3 <FAT::seek(void*, unsigned long long)+0x4b>
c0020dcc:	b8 00 00 00 00       	mov    eax,0x0
c0020dd1:	eb 05                	jmp    c0020dd8 <FAT::seek(void*, unsigned long long)+0x50>
c0020dd3:	b8 01 00 00 00       	mov    eax,0x1
c0020dd8:	83 c4 2c             	add    esp,0x2c
c0020ddb:	c3                   	ret    

c0020ddc <fatWrapperReadDisk>:
c0020ddc:	83 ec 1c             	sub    esp,0x1c
c0020ddf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020de3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020de7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020deb:	89 04 24             	mov    DWORD PTR [esp],eax
c0020dee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020df2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020df6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020dfb:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c0020e02:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e06:	83 ec 0c             	sub    esp,0xc
c0020e09:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e0d:	52                   	push   edx
c0020e0e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e12:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e16:	50                   	push   eax
c0020e17:	e8 28 59 ff ff       	call   c0016744 <LogicalDisk::read(unsigned long long, int, void*)>
c0020e1c:	83 c4 20             	add    esp,0x20
c0020e1f:	83 c4 1c             	add    esp,0x1c
c0020e22:	c3                   	ret    

c0020e23 <fatWrapperWriteDisk>:
c0020e23:	83 ec 1c             	sub    esp,0x1c
c0020e26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e2a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020e2e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020e32:	89 04 24             	mov    DWORD PTR [esp],eax
c0020e35:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020e39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020e3d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e42:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c0020e49:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e4d:	83 ec 0c             	sub    esp,0xc
c0020e50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e54:	52                   	push   edx
c0020e55:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e59:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e5d:	50                   	push   eax
c0020e5e:	e8 4d 59 ff ff       	call   c00167b0 <LogicalDisk::write(unsigned long long, int, void*)>
c0020e63:	83 c4 20             	add    esp,0x20
c0020e66:	83 c4 1c             	add    esp,0x1c
c0020e69:	c3                   	ret    

c0020e6a <fatWrapperIoctl>:
c0020e6a:	53                   	push   ebx
c0020e6b:	83 ec 28             	sub    esp,0x28
c0020e6e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e72:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020e76:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020e7a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020e7e:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020e83:	75 31                	jne    c0020eb6 <fatWrapperIoctl+0x4c>
c0020e85:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e89:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020e8d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e92:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c0020e99:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020e9f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020ea5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020ea9:	66 89 02             	mov    WORD PTR [edx],ax
c0020eac:	b8 00 00 00 00       	mov    eax,0x0
c0020eb1:	e9 b2 00 00 00       	jmp    c0020f68 <fatWrapperIoctl+0xfe>
c0020eb6:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020ebb:	75 6a                	jne    c0020f27 <fatWrapperIoctl+0xbd>
c0020ebd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020ec1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020ec5:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020eca:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c0020ed1:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020ed7:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020edd:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020ee3:	89 c8                	mov    eax,ecx
c0020ee5:	89 da                	mov    edx,ebx
c0020ee7:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020eeb:	c1 e0 0a             	shl    eax,0xa
c0020eee:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020ef3:	8b 0c 8d e0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1420]
c0020efa:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020f00:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020f06:	89 cb                	mov    ebx,ecx
c0020f08:	c1 fb 1f             	sar    ebx,0x1f
c0020f0b:	53                   	push   ebx
c0020f0c:	51                   	push   ecx
c0020f0d:	52                   	push   edx
c0020f0e:	50                   	push   eax
c0020f0f:	e8 c8 5a 00 00       	call   c00269dc <__udivdi3>
c0020f14:	83 c4 10             	add    esp,0x10
c0020f17:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020f1b:	89 01                	mov    DWORD PTR [ecx],eax
c0020f1d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020f20:	b8 00 00 00 00       	mov    eax,0x0
c0020f25:	eb 41                	jmp    c0020f68 <fatWrapperIoctl+0xfe>
c0020f27:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020f2c:	75 07                	jne    c0020f35 <fatWrapperIoctl+0xcb>
c0020f2e:	b8 00 00 00 00       	mov    eax,0x0
c0020f33:	eb 33                	jmp    c0020f68 <fatWrapperIoctl+0xfe>
c0020f35:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020f3a:	75 19                	jne    c0020f55 <fatWrapperIoctl+0xeb>
c0020f3c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f40:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020f44:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f48:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020f4e:	b8 00 00 00 00       	mov    eax,0x0
c0020f53:	eb 13                	jmp    c0020f68 <fatWrapperIoctl+0xfe>
c0020f55:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020f5a:	75 07                	jne    c0020f63 <fatWrapperIoctl+0xf9>
c0020f5c:	b8 00 00 00 00       	mov    eax,0x0
c0020f61:	eb 05                	jmp    c0020f68 <fatWrapperIoctl+0xfe>
c0020f63:	b8 04 00 00 00       	mov    eax,0x4
c0020f68:	83 c4 28             	add    esp,0x28
c0020f6b:	5b                   	pop    ebx
c0020f6c:	c3                   	ret    
c0020f6d:	90                   	nop

c0020f6e <FAT::FAT()>:
c0020f6e:	83 ec 1c             	sub    esp,0x1c
c0020f71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f75:	83 ec 0c             	sub    esp,0xc
c0020f78:	50                   	push   eax
c0020f79:	e8 ba 22 ff ff       	call   c0013238 <Filesystem::Filesystem()>
c0020f7e:	83 c4 10             	add    esp,0x10
c0020f81:	ba 40 ca 02 c0       	mov    edx,0xc002ca40
c0020f86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f8a:	89 10                	mov    DWORD PTR [eax],edx
c0020f8c:	c7 05 00 1c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031c00,0x0
c0020f96:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020f9e:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020fa3:	7f 15                	jg     c0020fba <FAT::FAT()+0x4c>
c0020fa5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020fa9:	c7 04 85 20 1c 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffce3e0],0xffffffff
c0020fb4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020fb8:	eb e4                	jmp    c0020f9e <FAT::FAT()+0x30>
c0020fba:	90                   	nop
c0020fbb:	83 c4 1c             	add    esp,0x1c
c0020fbe:	c3                   	ret    
c0020fbf:	90                   	nop

c0020fc0 <FAT::fixFilepath(char*)>:
c0020fc0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fc4:	8a 00                	mov    al,BYTE PTR [eax]
c0020fc6:	3c 40                	cmp    al,0x40
c0020fc8:	7e 2c                	jle    c0020ff6 <FAT::fixFilepath(char*)+0x36>
c0020fca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fce:	8a 00                	mov    al,BYTE PTR [eax]
c0020fd0:	83 e8 41             	sub    eax,0x41
c0020fd3:	88 c2                	mov    dl,al
c0020fd5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fd9:	88 10                	mov    BYTE PTR [eax],dl
c0020fdb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fdf:	8a 00                	mov    al,BYTE PTR [eax]
c0020fe1:	0f be c0             	movsx  eax,al
c0020fe4:	8b 04 85 20 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3e0]
c0020feb:	83 c0 30             	add    eax,0x30
c0020fee:	88 c2                	mov    dl,al
c0020ff0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020ff4:	88 10                	mov    BYTE PTR [eax],dl
c0020ff6:	90                   	nop
c0020ff7:	c3                   	ret    

c0020ff8 <FAT::open(char const*, void**, FileOpenMode)>:
c0020ff8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020ffe:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021006:	74 0a                	je     c0021012 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0021008:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021010:	75 0a                	jne    c002101c <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0021012:	b8 04 00 00 00       	mov    eax,0x4
c0021017:	e9 fd 00 00 00       	jmp    c0021119 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c002101c:	83 ec 08             	sub    esp,0x8
c002101f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021026:	8d 44 24 14          	lea    eax,[esp+0x14]
c002102a:	50                   	push   eax
c002102b:	e8 04 f8 fd ff       	call   c0000834 <strcpy>
c0021030:	83 c4 10             	add    esp,0x10
c0021033:	83 ec 08             	sub    esp,0x8
c0021036:	8d 44 24 10          	lea    eax,[esp+0x10]
c002103a:	50                   	push   eax
c002103b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021042:	e8 79 ff ff ff       	call   c0020fc0 <FAT::fixFilepath(char*)>
c0021047:	83 c4 10             	add    esp,0x10
c002104a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0021052:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021059:	83 e0 01             	and    eax,0x1
c002105c:	74 08                	je     c0021066 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c002105e:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0021066:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002106d:	83 e0 04             	and    eax,0x4
c0021070:	74 10                	je     c0021082 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0021072:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c002107a:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021082:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021089:	83 e0 02             	and    eax,0x2
c002108c:	74 08                	je     c0021096 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c002108e:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021096:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002109d:	83 e0 08             	and    eax,0x8
c00210a0:	74 08                	je     c00210aa <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c00210a2:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00210aa:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00210b1:	83 e0 10             	and    eax,0x10
c00210b4:	74 08                	je     c00210be <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c00210b6:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00210be:	83 ec 0c             	sub    esp,0xc
c00210c1:	68 50 02 00 00       	push   0x250
c00210c6:	e8 75 e7 fe ff       	call   c000f840 <malloc>
c00210cb:	83 c4 10             	add    esp,0x10
c00210ce:	89 c2                	mov    edx,eax
c00210d0:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00210d7:	89 10                	mov    DWORD PTR [eax],edx
c00210d9:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00210e1:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00210e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00210ea:	83 ec 04             	sub    esp,0x4
c00210ed:	52                   	push   edx
c00210ee:	8d 54 24 10          	lea    edx,[esp+0x10]
c00210f2:	52                   	push   edx
c00210f3:	50                   	push   eax
c00210f4:	e8 98 3e fe ff       	call   c0004f91 <f_open>
c00210f9:	83 c4 10             	add    esp,0x10
c00210fc:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0021103:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c002110b:	74 07                	je     c0021114 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c002110d:	b8 01 00 00 00       	mov    eax,0x1
c0021112:	eb 05                	jmp    c0021119 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0021114:	b8 00 00 00 00       	mov    eax,0x0
c0021119:	81 c4 1c 01 00 00    	add    esp,0x11c
c002111f:	c3                   	ret    

c0021120 <FAT::openDir(char const*, void**)>:
c0021120:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021126:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002112e:	74 0a                	je     c002113a <FAT::openDir(char const*, void**)+0x1a>
c0021130:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021138:	75 07                	jne    c0021141 <FAT::openDir(char const*, void**)+0x21>
c002113a:	b8 04 00 00 00       	mov    eax,0x4
c002113f:	eb 7d                	jmp    c00211be <FAT::openDir(char const*, void**)+0x9e>
c0021141:	83 ec 08             	sub    esp,0x8
c0021144:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002114b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002114f:	50                   	push   eax
c0021150:	e8 df f6 fd ff       	call   c0000834 <strcpy>
c0021155:	83 c4 10             	add    esp,0x10
c0021158:	83 ec 08             	sub    esp,0x8
c002115b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002115f:	50                   	push   eax
c0021160:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021167:	e8 54 fe ff ff       	call   c0020fc0 <FAT::fixFilepath(char*)>
c002116c:	83 c4 10             	add    esp,0x10
c002116f:	83 ec 0c             	sub    esp,0xc
c0021172:	6a 4c                	push   0x4c
c0021174:	e8 c7 e6 fe ff       	call   c000f840 <malloc>
c0021179:	83 c4 10             	add    esp,0x10
c002117c:	89 c2                	mov    edx,eax
c002117e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021185:	89 10                	mov    DWORD PTR [eax],edx
c0021187:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002118e:	8b 00                	mov    eax,DWORD PTR [eax]
c0021190:	83 ec 08             	sub    esp,0x8
c0021193:	8d 54 24 14          	lea    edx,[esp+0x14]
c0021197:	52                   	push   edx
c0021198:	50                   	push   eax
c0021199:	e8 2b 4e fe ff       	call   c0005fc9 <f_opendir>
c002119e:	83 c4 10             	add    esp,0x10
c00211a1:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00211a8:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00211b0:	74 07                	je     c00211b9 <FAT::openDir(char const*, void**)+0x99>
c00211b2:	b8 01 00 00 00       	mov    eax,0x1
c00211b7:	eb 05                	jmp    c00211be <FAT::openDir(char const*, void**)+0x9e>
c00211b9:	b8 00 00 00 00       	mov    eax,0x0
c00211be:	81 c4 1c 01 00 00    	add    esp,0x11c
c00211c4:	c3                   	ret    
c00211c5:	90                   	nop

c00211c6 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00211c6:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00211cc:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00211d4:	75 0a                	jne    c00211e0 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c00211d6:	b8 04 00 00 00       	mov    eax,0x4
c00211db:	e9 c9 00 00 00       	jmp    c00212a9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00211e0:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00211e8:	75 0a                	jne    c00211f4 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c00211ea:	b8 04 00 00 00       	mov    eax,0x4
c00211ef:	e9 b5 00 00 00       	jmp    c00212a9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00211f4:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00211fc:	75 0a                	jne    c0021208 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c00211fe:	b8 04 00 00 00       	mov    eax,0x4
c0021203:	e9 a1 00 00 00       	jmp    c00212a9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021208:	83 ec 08             	sub    esp,0x8
c002120b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021212:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021219:	50                   	push   eax
c002121a:	e8 15 f6 fd ff       	call   c0000834 <strcpy>
c002121f:	83 c4 10             	add    esp,0x10
c0021222:	83 ec 08             	sub    esp,0x8
c0021225:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c002122c:	50                   	push   eax
c002122d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021234:	e8 87 fd ff ff       	call   c0020fc0 <FAT::fixFilepath(char*)>
c0021239:	83 c4 10             	add    esp,0x10
c002123c:	83 ec 08             	sub    esp,0x8
c002123f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021243:	50                   	push   eax
c0021244:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c002124b:	50                   	push   eax
c002124c:	e8 37 4f fe ff       	call   c0006188 <f_stat>
c0021251:	83 c4 10             	add    esp,0x10
c0021254:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c002125b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021262:	85 c0                	test   eax,eax
c0021264:	74 07                	je     c002126d <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0021266:	83 f8 04             	cmp    eax,0x4
c0021269:	74 32                	je     c002129d <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c002126b:	eb 37                	jmp    c00212a4 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c002126d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0021271:	0f b6 c0             	movzx  eax,al
c0021274:	83 e0 10             	and    eax,0x10
c0021277:	0f 95 c2             	setne  dl
c002127a:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0021281:	88 10                	mov    BYTE PTR [eax],dl
c0021283:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021286:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002128a:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0021291:	89 01                	mov    DWORD PTR [ecx],eax
c0021293:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021296:	b8 00 00 00 00       	mov    eax,0x0
c002129b:	eb 0c                	jmp    c00212a9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002129d:	b8 02 00 00 00       	mov    eax,0x2
c00212a2:	eb 05                	jmp    c00212a9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00212a4:	b8 01 00 00 00       	mov    eax,0x1
c00212a9:	81 c4 2c 02 00 00    	add    esp,0x22c
c00212af:	c3                   	ret    

c00212b0 <FAT::unlink(char const*)>:
c00212b0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00212b6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00212be:	75 07                	jne    c00212c7 <FAT::unlink(char const*)+0x17>
c00212c0:	b8 04 00 00 00       	mov    eax,0x4
c00212c5:	eb 5c                	jmp    c0021323 <FAT::unlink(char const*)+0x73>
c00212c7:	83 ec 08             	sub    esp,0x8
c00212ca:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00212d1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00212d5:	50                   	push   eax
c00212d6:	e8 59 f5 fd ff       	call   c0000834 <strcpy>
c00212db:	83 c4 10             	add    esp,0x10
c00212de:	83 ec 08             	sub    esp,0x8
c00212e1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00212e5:	50                   	push   eax
c00212e6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00212ed:	e8 ce fc ff ff       	call   c0020fc0 <FAT::fixFilepath(char*)>
c00212f2:	83 c4 10             	add    esp,0x10
c00212f5:	83 ec 0c             	sub    esp,0xc
c00212f8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00212fc:	50                   	push   eax
c00212fd:	e8 d8 51 fe ff       	call   c00064da <f_unlink>
c0021302:	83 c4 10             	add    esp,0x10
c0021305:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002130c:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021313:	85 c0                	test   eax,eax
c0021315:	75 07                	jne    c002131e <FAT::unlink(char const*)+0x6e>
c0021317:	b8 00 00 00 00       	mov    eax,0x0
c002131c:	eb 05                	jmp    c0021323 <FAT::unlink(char const*)+0x73>
c002131e:	b8 01 00 00 00       	mov    eax,0x1
c0021323:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021329:	c3                   	ret    

c002132a <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c002132a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0021330:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0021337:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c002133e:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021342:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021346:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c002134e:	75 0a                	jne    c002135a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0021350:	b8 04 00 00 00       	mov    eax,0x4
c0021355:	e9 1c 01 00 00       	jmp    c0021476 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c002135a:	83 ec 08             	sub    esp,0x8
c002135d:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021364:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021368:	50                   	push   eax
c0021369:	e8 c6 f4 fd ff       	call   c0000834 <strcpy>
c002136e:	83 c4 10             	add    esp,0x10
c0021371:	83 ec 08             	sub    esp,0x8
c0021374:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021378:	50                   	push   eax
c0021379:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021380:	e8 3b fc ff ff       	call   c0020fc0 <FAT::fixFilepath(char*)>
c0021385:	83 c4 10             	add    esp,0x10
c0021388:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0021390:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021398:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002139d:	83 e0 01             	and    eax,0x1
c00213a0:	74 08                	je     c00213aa <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c00213a2:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00213aa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213af:	83 e0 02             	and    eax,0x2
c00213b2:	74 08                	je     c00213bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c00213b4:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00213bc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213c1:	83 e0 04             	and    eax,0x4
c00213c4:	74 08                	je     c00213ce <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c00213c6:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00213ce:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213d3:	83 e0 08             	and    eax,0x8
c00213d6:	74 08                	je     c00213e0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c00213d8:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00213e0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213e5:	83 e0 01             	and    eax,0x1
c00213e8:	74 08                	je     c00213f2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c00213ea:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00213f2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213f7:	83 e0 02             	and    eax,0x2
c00213fa:	74 08                	je     c0021404 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c00213fc:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0021404:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021409:	83 e0 04             	and    eax,0x4
c002140c:	74 08                	je     c0021416 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c002140e:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0021416:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002141b:	83 e0 08             	and    eax,0x8
c002141e:	74 08                	je     c0021428 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0021420:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0021428:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c002142f:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0021436:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c002143e:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0021446:	83 ec 04             	sub    esp,0x4
c0021449:	52                   	push   edx
c002144a:	50                   	push   eax
c002144b:	8d 44 24 24          	lea    eax,[esp+0x24]
c002144f:	50                   	push   eax
c0021450:	e8 27 57 fe ff       	call   c0006b7c <f_chmod>
c0021455:	83 c4 10             	add    esp,0x10
c0021458:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c002145f:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021466:	85 c0                	test   eax,eax
c0021468:	75 07                	jne    c0021471 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c002146a:	b8 00 00 00 00       	mov    eax,0x0
c002146f:	eb 05                	jmp    c0021476 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021471:	b8 01 00 00 00       	mov    eax,0x1
c0021476:	81 c4 2c 01 00 00    	add    esp,0x12c
c002147c:	c3                   	ret    
c002147d:	90                   	nop

c002147e <FAT::rename(char const*, char const*)>:
c002147e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021484:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c002148c:	74 0a                	je     c0021498 <FAT::rename(char const*, char const*)+0x1a>
c002148e:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021496:	75 0a                	jne    c00214a2 <FAT::rename(char const*, char const*)+0x24>
c0021498:	b8 04 00 00 00       	mov    eax,0x4
c002149d:	e9 98 00 00 00       	jmp    c002153a <FAT::rename(char const*, char const*)+0xbc>
c00214a2:	83 ec 08             	sub    esp,0x8
c00214a5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00214ac:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00214b3:	50                   	push   eax
c00214b4:	e8 7b f3 fd ff       	call   c0000834 <strcpy>
c00214b9:	83 c4 10             	add    esp,0x10
c00214bc:	83 ec 08             	sub    esp,0x8
c00214bf:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00214c6:	50                   	push   eax
c00214c7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00214ce:	e8 ed fa ff ff       	call   c0020fc0 <FAT::fixFilepath(char*)>
c00214d3:	83 c4 10             	add    esp,0x10
c00214d6:	83 ec 08             	sub    esp,0x8
c00214d9:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00214e0:	8d 44 24 18          	lea    eax,[esp+0x18]
c00214e4:	50                   	push   eax
c00214e5:	e8 4a f3 fd ff       	call   c0000834 <strcpy>
c00214ea:	83 c4 10             	add    esp,0x10
c00214ed:	83 ec 08             	sub    esp,0x8
c00214f0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00214f4:	50                   	push   eax
c00214f5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00214fc:	e8 bf fa ff ff       	call   c0020fc0 <FAT::fixFilepath(char*)>
c0021501:	83 c4 10             	add    esp,0x10
c0021504:	83 ec 08             	sub    esp,0x8
c0021507:	8d 44 24 14          	lea    eax,[esp+0x14]
c002150b:	50                   	push   eax
c002150c:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021513:	50                   	push   eax
c0021514:	e8 70 53 fe ff       	call   c0006889 <f_rename>
c0021519:	83 c4 10             	add    esp,0x10
c002151c:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0021523:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c002152a:	85 c0                	test   eax,eax
c002152c:	75 07                	jne    c0021535 <FAT::rename(char const*, char const*)+0xb7>
c002152e:	b8 00 00 00 00       	mov    eax,0x0
c0021533:	eb 05                	jmp    c002153a <FAT::rename(char const*, char const*)+0xbc>
c0021535:	b8 01 00 00 00       	mov    eax,0x1
c002153a:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021540:	c3                   	ret    
c0021541:	90                   	nop

c0021542 <FAT::mkdir(char const*)>:
c0021542:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021548:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021550:	75 07                	jne    c0021559 <FAT::mkdir(char const*)+0x17>
c0021552:	b8 04 00 00 00       	mov    eax,0x4
c0021557:	eb 5c                	jmp    c00215b5 <FAT::mkdir(char const*)+0x73>
c0021559:	83 ec 08             	sub    esp,0x8
c002155c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021563:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021567:	50                   	push   eax
c0021568:	e8 c7 f2 fd ff       	call   c0000834 <strcpy>
c002156d:	83 c4 10             	add    esp,0x10
c0021570:	83 ec 08             	sub    esp,0x8
c0021573:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021577:	50                   	push   eax
c0021578:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002157f:	e8 3c fa ff ff       	call   c0020fc0 <FAT::fixFilepath(char*)>
c0021584:	83 c4 10             	add    esp,0x10
c0021587:	83 ec 0c             	sub    esp,0xc
c002158a:	8d 44 24 18          	lea    eax,[esp+0x18]
c002158e:	50                   	push   eax
c002158f:	e8 c9 50 fe ff       	call   c000665d <f_mkdir>
c0021594:	83 c4 10             	add    esp,0x10
c0021597:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002159e:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00215a5:	85 c0                	test   eax,eax
c00215a7:	75 07                	jne    c00215b0 <FAT::mkdir(char const*)+0x6e>
c00215a9:	b8 00 00 00 00       	mov    eax,0x0
c00215ae:	eb 05                	jmp    c00215b5 <FAT::mkdir(char const*)+0x73>
c00215b0:	b8 01 00 00 00       	mov    eax,0x1
c00215b5:	81 c4 1c 01 00 00    	add    esp,0x11c
c00215bb:	c3                   	ret    

c00215bc <FAT::exists(char const*)>:
c00215bc:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00215c2:	83 ec 08             	sub    esp,0x8
c00215c5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00215cc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00215d0:	50                   	push   eax
c00215d1:	e8 5e f2 fd ff       	call   c0000834 <strcpy>
c00215d6:	83 c4 10             	add    esp,0x10
c00215d9:	83 ec 08             	sub    esp,0x8
c00215dc:	8d 44 24 08          	lea    eax,[esp+0x8]
c00215e0:	50                   	push   eax
c00215e1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00215e8:	e8 d3 f9 ff ff       	call   c0020fc0 <FAT::fixFilepath(char*)>
c00215ed:	83 c4 10             	add    esp,0x10
c00215f0:	83 ec 08             	sub    esp,0x8
c00215f3:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c00215fa:	50                   	push   eax
c00215fb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00215ff:	50                   	push   eax
c0021600:	e8 83 4b fe ff       	call   c0006188 <f_stat>
c0021605:	83 c4 10             	add    esp,0x10
c0021608:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c002160f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021616:	85 c0                	test   eax,eax
c0021618:	75 04                	jne    c002161e <FAT::exists(char const*)+0x62>
c002161a:	b0 01                	mov    al,0x1
c002161c:	eb 02                	jmp    c0021620 <FAT::exists(char const*)+0x64>
c002161e:	b0 00                	mov    al,0x0
c0021620:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021626:	c3                   	ret    
c0021627:	90                   	nop

c0021628 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0021628:	b8 08 00 00 00       	mov    eax,0x8
c002162d:	c3                   	ret    

c002162e <ISO9660::seek(void*, unsigned long long)>:
c002162e:	53                   	push   ebx
c002162f:	b8 04 00 00 00       	mov    eax,0x4
c0021634:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021638:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002163c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021640:	85 d2                	test   edx,edx
c0021642:	74 17                	je     c002165b <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021644:	89 c8                	mov    eax,ecx
c0021646:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0021649:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c002164c:	b8 01 00 00 00       	mov    eax,0x1
c0021651:	73 08                	jae    c002165b <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021653:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021656:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021659:	31 c0                	xor    eax,eax
c002165b:	5b                   	pop    ebx
c002165c:	c3                   	ret    
c002165d:	90                   	nop

c002165e <ISO9660::tell(void*, unsigned long long*)>:
c002165e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021662:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021666:	85 d2                	test   edx,edx
c0021668:	74 12                	je     c002167c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002166a:	85 c0                	test   eax,eax
c002166c:	74 0e                	je     c002167c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002166e:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021671:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021674:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021677:	89 10                	mov    DWORD PTR [eax],edx
c0021679:	31 c0                	xor    eax,eax
c002167b:	c3                   	ret    
c002167c:	b8 04 00 00 00       	mov    eax,0x4
c0021681:	c3                   	ret    

c0021682 <ISO9660::getName()>:
c0021682:	b8 9c ca 02 c0       	mov    eax,0xc002ca9c
c0021687:	c3                   	ret    

c0021688 <ISO9660::stat(void*, unsigned long long*)>:
c0021688:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002168c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021690:	85 d2                	test   edx,edx
c0021692:	74 12                	je     c00216a6 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021694:	85 c0                	test   eax,eax
c0021696:	74 0e                	je     c00216a6 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021698:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c002169b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c002169e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00216a1:	89 10                	mov    DWORD PTR [eax],edx
c00216a3:	31 c0                	xor    eax,eax
c00216a5:	c3                   	ret    
c00216a6:	b8 04 00 00 00       	mov    eax,0x4
c00216ab:	c3                   	ret    

c00216ac <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00216ac:	b8 01 00 00 00       	mov    eax,0x1
c00216b1:	c3                   	ret    

c00216b2 <ISO9660::unlink(char const*)>:
c00216b2:	b8 01 00 00 00       	mov    eax,0x1
c00216b7:	c3                   	ret    

c00216b8 <ISO9660::write(void*, unsigned long, void*, int*)>:
c00216b8:	b8 01 00 00 00       	mov    eax,0x1
c00216bd:	c3                   	ret    

c00216be <ISO9660::rename(char const*, char const*)>:
c00216be:	b8 01 00 00 00       	mov    eax,0x1
c00216c3:	c3                   	ret    

c00216c4 <ISO9660::mkdir(char const*)>:
c00216c4:	b8 01 00 00 00       	mov    eax,0x1
c00216c9:	c3                   	ret    

c00216ca <ISO9660::close(void*)>:
c00216ca:	83 ec 0c             	sub    esp,0xc
c00216cd:	b8 04 00 00 00       	mov    eax,0x4
c00216d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00216d6:	85 d2                	test   edx,edx
c00216d8:	74 0e                	je     c00216e8 <ISO9660::close(void*)+0x1e>
c00216da:	83 ec 0c             	sub    esp,0xc
c00216dd:	52                   	push   edx
c00216de:	e8 6d e1 fe ff       	call   c000f850 <free>
c00216e3:	83 c4 10             	add    esp,0x10
c00216e6:	31 c0                	xor    eax,eax
c00216e8:	83 c4 0c             	add    esp,0xc
c00216eb:	c3                   	ret    

c00216ec <ISO9660::closeDir(void*)>:
c00216ec:	83 ec 0c             	sub    esp,0xc
c00216ef:	b8 04 00 00 00       	mov    eax,0x4
c00216f4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00216f8:	85 d2                	test   edx,edx
c00216fa:	74 0e                	je     c002170a <ISO9660::closeDir(void*)+0x1e>
c00216fc:	83 ec 0c             	sub    esp,0xc
c00216ff:	52                   	push   edx
c0021700:	e8 4b e1 fe ff       	call   c000f850 <free>
c0021705:	83 c4 10             	add    esp,0x10
c0021708:	31 c0                	xor    eax,eax
c002170a:	83 c4 0c             	add    esp,0xc
c002170d:	c3                   	ret    

c002170e <ISO9660::~ISO9660()>:
c002170e:	83 ec 0c             	sub    esp,0xc
c0021711:	ba 00 cb 02 c0       	mov    edx,0xc002cb00
c0021716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002171a:	89 10                	mov    DWORD PTR [eax],edx
c002171c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021720:	83 ec 0c             	sub    esp,0xc
c0021723:	50                   	push   eax
c0021724:	e8 33 1b ff ff       	call   c001325c <Filesystem::~Filesystem()>
c0021729:	83 c4 10             	add    esp,0x10
c002172c:	90                   	nop
c002172d:	83 c4 0c             	add    esp,0xc
c0021730:	c3                   	ret    
c0021731:	90                   	nop

c0021732 <ISO9660::~ISO9660()>:
c0021732:	83 ec 0c             	sub    esp,0xc
c0021735:	83 ec 0c             	sub    esp,0xc
c0021738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002173c:	e8 cd ff ff ff       	call   c002170e <ISO9660::~ISO9660()>
c0021741:	83 c4 10             	add    esp,0x10
c0021744:	83 ec 08             	sub    esp,0x8
c0021747:	6a 08                	push   0x8
c0021749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002174d:	e8 02 17 ff ff       	call   c0012e54 <operator delete(void*, unsigned long)>
c0021752:	83 c4 10             	add    esp,0x10
c0021755:	83 c4 0c             	add    esp,0xc
c0021758:	c3                   	ret    

c0021759 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021759:	55                   	push   ebp
c002175a:	31 c9                	xor    ecx,ecx
c002175c:	57                   	push   edi
c002175d:	56                   	push   esi
c002175e:	53                   	push   ebx
c002175f:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021763:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021767:	89 eb                	mov    ebx,ebp
c0021769:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c002176d:	39 ce                	cmp    esi,ecx
c002176f:	7e 17                	jle    c0021788 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021771:	31 d2                	xor    edx,edx
c0021773:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021777:	7d 13                	jge    c002178c <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021779:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002177d:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021780:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021783:	75 0d                	jne    c0021792 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021785:	42                   	inc    edx
c0021786:	eb eb                	jmp    c0021773 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021788:	31 c0                	xor    eax,eax
c002178a:	eb 0a                	jmp    c0021796 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002178c:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021790:	eb 04                	jmp    c0021796 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021792:	41                   	inc    ecx
c0021793:	43                   	inc    ebx
c0021794:	eb d7                	jmp    c002176d <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021796:	5b                   	pop    ebx
c0021797:	5e                   	pop    esi
c0021798:	5f                   	pop    edi
c0021799:	5d                   	pop    ebp
c002179a:	c3                   	ret    

c002179b <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c002179b:	56                   	push   esi
c002179c:	53                   	push   ebx
c002179d:	52                   	push   edx
c002179e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00217a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00217a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00217aa:	39 0d 00 1d 03 c0    	cmp    DWORD PTR ds:0xc0031d00,ecx
c00217b0:	75 08                	jne    c00217ba <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c00217b2:	38 05 54 db 02 c0    	cmp    BYTE PTR ds:0xc002db54,al
c00217b8:	74 2b                	je     c00217e5 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c00217ba:	83 ec 0c             	sub    esp,0xc
c00217bd:	a2 54 db 02 c0       	mov    ds:0xc002db54,al
c00217c2:	68 20 1d 03 c0       	push   0xc0031d20
c00217c7:	0f be c0             	movsx  eax,al
c00217ca:	6a 01                	push   0x1
c00217cc:	89 0d 00 1d 03 c0    	mov    DWORD PTR ds:0xc0031d00,ecx
c00217d2:	31 db                	xor    ebx,ebx
c00217d4:	53                   	push   ebx
c00217d5:	51                   	push   ecx
c00217d6:	ff 34 85 dc ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd1524]
c00217dd:	e8 62 4f ff ff       	call   c0016744 <LogicalDisk::read(unsigned long long, int, void*)>
c00217e2:	83 c4 20             	add    esp,0x20
c00217e5:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c00217ed:	c7 44 24 14 20 1d 03 c0 	mov    DWORD PTR [esp+0x14],0xc0031d20
c00217f5:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00217f9:	58                   	pop    eax
c00217fa:	5b                   	pop    ebx
c00217fb:	5e                   	pop    esi
c00217fc:	e9 43 ef fd ff       	jmp    c0000744 <memcpy>
c0021801:	90                   	nop

c0021802 <ISO9660::tryMount(LogicalDisk*, int)>:
c0021802:	81 ec 10 08 00 00    	sub    esp,0x810
c0021808:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c002180f:	83 c0 41             	add    eax,0x41
c0021812:	0f be c0             	movsx  eax,al
c0021815:	50                   	push   eax
c0021816:	8d 44 24 08          	lea    eax,[esp+0x8]
c002181a:	50                   	push   eax
c002181b:	6a 10                	push   0x10
c002181d:	e8 79 ff ff ff       	call   c002179b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021822:	83 c4 10             	add    esp,0x10
c0021825:	31 c0                	xor    eax,eax
c0021827:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c002182c:	75 1d                	jne    c002184b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002182e:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0021833:	75 16                	jne    c002184b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021835:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c002183a:	75 0f                	jne    c002184b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002183c:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021841:	75 08                	jne    c002184b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021843:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021848:	0f 94 c0             	sete   al
c002184b:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021851:	c3                   	ret    

c0021852 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021852:	55                   	push   ebp
c0021853:	57                   	push   edi
c0021854:	56                   	push   esi
c0021855:	53                   	push   ebx
c0021856:	81 ec 2c 08 00 00    	sub    esp,0x82c
c002185c:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021863:	85 ed                	test   ebp,ebp
c0021865:	0f 84 d6 01 00 00    	je     c0021a41 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c002186b:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021873:	0f 84 c8 01 00 00    	je     c0021a41 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021879:	b8 01 00 00 00       	mov    eax,0x1
c002187e:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021882:	0f 85 be 01 00 00    	jne    c0021a46 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021888:	31 d2                	xor    edx,edx
c002188a:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021891:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021894:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0021897:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002189b:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c002189e:	89 04 24             	mov    DWORD PTR [esp],eax
c00218a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00218a5:	01 f0                	add    eax,esi
c00218a7:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00218aa:	11 fa                	adc    edx,edi
c00218ac:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00218b0:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00218b4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00218b8:	19 d1                	sbb    ecx,edx
c00218ba:	72 0a                	jb     c00218c6 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c00218bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00218c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00218c4:	eb 13                	jmp    c00218d9 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c00218c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00218ca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00218ce:	29 f0                	sub    eax,esi
c00218d0:	19 fa                	sbb    edx,edi
c00218d2:	89 04 24             	mov    DWORD PTR [esp],eax
c00218d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00218d9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00218dc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00218df:	0f a4 c2 0b          	shld   edx,eax,0xb
c00218e3:	51                   	push   ecx
c00218e4:	c1 e0 0b             	shl    eax,0xb
c00218e7:	01 c6                	add    esi,eax
c00218e9:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00218ed:	11 d7                	adc    edi,edx
c00218ef:	50                   	push   eax
c00218f0:	89 fa                	mov    edx,edi
c00218f2:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c00218f6:	89 f0                	mov    eax,esi
c00218f8:	53                   	push   ebx
c00218f9:	0f ac d0 0b          	shrd   eax,edx,0xb
c00218fd:	50                   	push   eax
c00218fe:	e8 98 fe ff ff       	call   c002179b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021903:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021907:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c002190a:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c002190e:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0021914:	83 c4 10             	add    esp,0x10
c0021917:	b8 00 08 00 00       	mov    eax,0x800
c002191c:	29 d0                	sub    eax,edx
c002191e:	39 c1                	cmp    ecx,eax
c0021920:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0021924:	83 d9 00             	sbb    ecx,0x0
c0021927:	7d 1c                	jge    c0021945 <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c0021929:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c002192e:	75 12                	jne    c0021942 <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c0021930:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021937:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002193d:	e9 fb 00 00 00       	jmp    c0021a3d <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c0021942:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021945:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c0021948:	31 d2                	xor    edx,edx
c002194a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c002194e:	39 c2                	cmp    edx,eax
c0021950:	7d 14                	jge    c0021966 <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c0021952:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021959:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002195d:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021960:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021963:	42                   	inc    edx
c0021964:	eb e8                	jmp    c002194e <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c0021966:	89 c3                	mov    ebx,eax
c0021968:	85 c0                	test   eax,eax
c002196a:	79 02                	jns    c002196e <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c002196c:	31 db                	xor    ebx,ebx
c002196e:	99                   	cdq    
c002196f:	01 c3                	add    ebx,eax
c0021971:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c0021978:	01 c6                	add    esi,eax
c002197a:	11 d7                	adc    edi,edx
c002197c:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021980:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021984:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021987:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c002198b:	29 c6                	sub    esi,eax
c002198d:	19 d7                	sbb    edi,edx
c002198f:	89 34 24             	mov    DWORD PTR [esp],esi
c0021992:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021996:	b8 ff 07 00 00       	mov    eax,0x7ff
c002199b:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c002199e:	b8 00 00 00 00       	mov    eax,0x0
c00219a3:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00219a7:	7d 3e                	jge    c00219e7 <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c00219a9:	52                   	push   edx
c00219aa:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00219ae:	50                   	push   eax
c00219af:	53                   	push   ebx
c00219b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00219b4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00219b8:	0f ac d0 0b          	shrd   eax,edx,0xb
c00219bc:	50                   	push   eax
c00219bd:	e8 d9 fd ff ff       	call   c002179b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00219c2:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c00219ca:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c00219cf:	81 c3 00 08 00 00    	add    ebx,0x800
c00219d5:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c00219dd:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c00219e2:	83 c4 10             	add    esp,0x10
c00219e5:	eb af                	jmp    c0021996 <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c00219e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00219eb:	0b 04 24             	or     eax,DWORD PTR [esp]
c00219ee:	74 32                	je     c0021a22 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c00219f0:	50                   	push   eax
c00219f1:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00219f5:	50                   	push   eax
c00219f6:	8d 44 24 28          	lea    eax,[esp+0x28]
c00219fa:	50                   	push   eax
c00219fb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00219ff:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0021a03:	0f ac fe 0b          	shrd   esi,edi,0xb
c0021a07:	56                   	push   esi
c0021a08:	e8 8e fd ff ff       	call   c002179b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a0d:	83 c4 0c             	add    esp,0xc
c0021a10:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0021a14:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021a18:	50                   	push   eax
c0021a19:	53                   	push   ebx
c0021a1a:	e8 25 ed fd ff       	call   c0000744 <memcpy>
c0021a1f:	83 c4 10             	add    esp,0x10
c0021a22:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021a29:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021a2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021a31:	89 38                	mov    DWORD PTR [eax],edi
c0021a33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a37:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021a3a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021a3d:	31 c0                	xor    eax,eax
c0021a3f:	eb 05                	jmp    c0021a46 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021a41:	b8 04 00 00 00       	mov    eax,0x4
c0021a46:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021a4c:	5b                   	pop    ebx
c0021a4d:	5e                   	pop    esi
c0021a4e:	5f                   	pop    edi
c0021a4f:	5d                   	pop    ebp
c0021a50:	c3                   	ret    
c0021a51:	90                   	nop

c0021a52 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021a52:	55                   	push   ebp
c0021a53:	57                   	push   edi
c0021a54:	56                   	push   esi
c0021a55:	53                   	push   ebx
c0021a56:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021a5c:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0021a63:	85 f6                	test   esi,esi
c0021a65:	0f 84 64 02 00 00    	je     c0021ccf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021a6b:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021a73:	0f 84 56 02 00 00    	je     c0021ccf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021a79:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0021a7c:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0021a7f:	75 0a                	jne    c0021a8b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021a81:	b8 07 00 00 00       	mov    eax,0x7
c0021a86:	e9 49 02 00 00       	jmp    c0021cd4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021a8b:	50                   	push   eax
c0021a8c:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021a90:	50                   	push   eax
c0021a91:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021a98:	53                   	push   ebx
c0021a99:	8b 06                	mov    eax,DWORD PTR [esi]
c0021a9b:	c1 e0 0b             	shl    eax,0xb
c0021a9e:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0021aa1:	c1 e8 0b             	shr    eax,0xb
c0021aa4:	50                   	push   eax
c0021aa5:	e8 f1 fc ff ff       	call   c002179b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021aaa:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021aad:	83 c4 10             	add    esp,0x10
c0021ab0:	89 c1                	mov    ecx,eax
c0021ab2:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0021ab5:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021abb:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021abe:	84 db                	test   bl,bl
c0021ac0:	0f 85 90 00 00 00    	jne    c0021b56 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0021ac6:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0021acc:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021ad2:	29 c7                	sub    edi,eax
c0021ad4:	89 fb                	mov    ebx,edi
c0021ad6:	c1 fb 1f             	sar    ebx,0x1f
c0021ad9:	01 f8                	add    eax,edi
c0021adb:	11 da                	adc    edx,ebx
c0021add:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021ae1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021ae5:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0021ae8:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0021aeb:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021aee:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021af1:	89 04 24             	mov    DWORD PTR [esp],eax
c0021af4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021af8:	89 d8                	mov    eax,ebx
c0021afa:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021afd:	ba 00 00 00 00       	mov    edx,0x0
c0021b02:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021b06:	b8 00 00 00 00       	mov    eax,0x0
c0021b0b:	73 0b                	jae    c0021b18 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0021b0d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021b10:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021b14:	29 f8                	sub    eax,edi
c0021b16:	19 da                	sbb    edx,ebx
c0021b18:	89 d3                	mov    ebx,edx
c0021b1a:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021b1d:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021b20:	09 c3                	or     ebx,eax
c0021b22:	0f 84 59 ff ff ff    	je     c0021a81 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021b28:	55                   	push   ebp
c0021b29:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021b2d:	50                   	push   eax
c0021b2e:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021b35:	53                   	push   ebx
c0021b36:	8b 06                	mov    eax,DWORD PTR [esi]
c0021b38:	c1 e0 0b             	shl    eax,0xb
c0021b3b:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0021b3f:	c1 e8 0b             	shr    eax,0xb
c0021b42:	50                   	push   eax
c0021b43:	e8 53 fc ff ff       	call   c002179b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021b48:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021b4b:	83 c4 10             	add    esp,0x10
c0021b4e:	25 ff 07 00 00       	and    eax,0x7ff
c0021b53:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021b56:	57                   	push   edi
c0021b57:	6a 28                	push   0x28
c0021b59:	6a 00                	push   0x0
c0021b5b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021b5f:	50                   	push   eax
c0021b60:	e8 13 ec fd ff       	call   c0000778 <memset>
c0021b65:	31 d2                	xor    edx,edx
c0021b67:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0021b6a:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021b70:	89 f8                	mov    eax,edi
c0021b72:	83 c0 21             	add    eax,0x21
c0021b75:	83 d2 00             	adc    edx,0x0
c0021b78:	89 c7                	mov    edi,eax
c0021b7a:	89 d5                	mov    ebp,edx
c0021b7c:	83 c4 10             	add    esp,0x10
c0021b7f:	31 c9                	xor    ecx,ecx
c0021b81:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0021b88:	83 f9 28             	cmp    ecx,0x28
c0021b8b:	88 04 24             	mov    BYTE PTR [esp],al
c0021b8e:	0f 94 c2             	sete   dl
c0021b91:	88 d0                	mov    al,dl
c0021b93:	ba ff 07 00 00       	mov    edx,0x7ff
c0021b98:	39 fa                	cmp    edx,edi
c0021b9a:	ba 00 00 00 00       	mov    edx,0x0
c0021b9f:	19 ea                	sbb    edx,ebp
c0021ba1:	0f 92 c2             	setb   dl
c0021ba4:	09 c2                	or     edx,eax
c0021ba6:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021baa:	0f 94 c0             	sete   al
c0021bad:	08 d0                	or     al,dl
c0021baf:	75 16                	jne    c0021bc7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021bb1:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021bb5:	74 10                	je     c0021bc7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021bb7:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021bba:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021bbe:	41                   	inc    ecx
c0021bbf:	83 c7 01             	add    edi,0x1
c0021bc2:	83 d5 00             	adc    ebp,0x0
c0021bc5:	eb ba                	jmp    c0021b81 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021bc7:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021bce:	83 ec 0c             	sub    esp,0xc
c0021bd1:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021bd5:	57                   	push   edi
c0021bd6:	e8 b9 eb fd ff       	call   c0000794 <strlen>
c0021bdb:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021be3:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021be7:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021bee:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021bf1:	5a                   	pop    edx
c0021bf2:	25 ff 07 00 00       	and    eax,0x7ff
c0021bf7:	01 c8                	add    eax,ecx
c0021bf9:	59                   	pop    ecx
c0021bfa:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021c00:	83 e0 02             	and    eax,0x2
c0021c03:	3c 01                	cmp    al,0x1
c0021c05:	19 c0                	sbb    eax,eax
c0021c07:	83 c0 02             	add    eax,0x2
c0021c0a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021c0e:	57                   	push   edi
c0021c0f:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021c13:	50                   	push   eax
c0021c14:	e8 1b ec fd ff       	call   c0000834 <strcpy>
c0021c19:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021c1d:	83 c4 10             	add    esp,0x10
c0021c20:	84 c0                	test   al,al
c0021c22:	75 21                	jne    c0021c45 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021c24:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021c2c:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021c34:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021c3c:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021c43:	eb 28                	jmp    c0021c6d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021c45:	fe c8                	dec    al
c0021c47:	75 24                	jne    c0021c6d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021c49:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021c51:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021c59:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021c61:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021c68:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021c6d:	0f b6 fb             	movzx  edi,bl
c0021c70:	31 db                	xor    ebx,ebx
c0021c72:	50                   	push   eax
c0021c73:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0021c7a:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021c7e:	50                   	push   eax
c0021c7f:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0021c86:	e8 b9 ea fd ff       	call   c0000744 <memcpy>
c0021c8b:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0021c92:	89 f9                	mov    ecx,edi
c0021c94:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021c9a:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0021c9d:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021ca0:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021ca3:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021ca6:	83 c4 10             	add    esp,0x10
c0021ca9:	39 c7                	cmp    edi,eax
c0021cab:	89 df                	mov    edi,ebx
c0021cad:	19 d7                	sbb    edi,edx
c0021caf:	72 10                	jb     c0021cc1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021cb1:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021cb8:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021cbf:	eb 0a                	jmp    c0021ccb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021cc1:	29 c8                	sub    eax,ecx
c0021cc3:	19 da                	sbb    edx,ebx
c0021cc5:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021cc8:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021ccb:	31 c0                	xor    eax,eax
c0021ccd:	eb 05                	jmp    c0021cd4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021ccf:	b8 04 00 00 00       	mov    eax,0x4
c0021cd4:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021cda:	5b                   	pop    ebx
c0021cdb:	5e                   	pop    esi
c0021cdc:	5f                   	pop    edi
c0021cdd:	5d                   	pop    ebp
c0021cde:	c3                   	ret    

c0021cdf <readRoot(unsigned int*, unsigned int*, char)>:
c0021cdf:	81 ec 40 08 00 00    	sub    esp,0x840
c0021ce5:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021ced:	50                   	push   eax
c0021cee:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021cf2:	50                   	push   eax
c0021cf3:	6a 10                	push   0x10
c0021cf5:	e8 a1 fa ff ff       	call   c002179b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021cfa:	83 c4 0c             	add    esp,0xc
c0021cfd:	6a 22                	push   0x22
c0021cff:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021d06:	50                   	push   eax
c0021d07:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021d0b:	50                   	push   eax
c0021d0c:	e8 33 ea fd ff       	call   c0000744 <memcpy>
c0021d11:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021d18:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021d1c:	89 10                	mov    DWORD PTR [eax],edx
c0021d1e:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021d25:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021d29:	89 10                	mov    DWORD PTR [eax],edx
c0021d2b:	b0 01                	mov    al,0x1
c0021d2d:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021d33:	c3                   	ret    

c0021d34 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021d34:	55                   	push   ebp
c0021d35:	57                   	push   edi
c0021d36:	56                   	push   esi
c0021d37:	53                   	push   ebx
c0021d38:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021d3e:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021d45:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021d4c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021d50:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021d54:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021d58:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021d5c:	75 03                	jne    c0021d61 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021d5e:	83 c3 02             	add    ebx,0x2
c0021d61:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021d64:	75 03                	jne    c0021d69 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021d66:	43                   	inc    ebx
c0021d67:	eb f8                	jmp    c0021d61 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021d69:	51                   	push   ecx
c0021d6a:	68 00 01 00 00       	push   0x100
c0021d6f:	6a 00                	push   0x0
c0021d71:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021d75:	50                   	push   eax
c0021d76:	e8 fd e9 fd ff       	call   c0000778 <memset>
c0021d7b:	83 c4 10             	add    esp,0x10
c0021d7e:	31 d2                	xor    edx,edx
c0021d80:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021d83:	84 c0                	test   al,al
c0021d85:	74 21                	je     c0021da8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021d87:	3c 2f                	cmp    al,0x2f
c0021d89:	75 0b                	jne    c0021d96 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021d8b:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021d8f:	bd 01 00 00 00       	mov    ebp,0x1
c0021d94:	eb 14                	jmp    c0021daa <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021d96:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021d99:	80 f9 19             	cmp    cl,0x19
c0021d9c:	77 03                	ja     c0021da1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021d9e:	83 e8 20             	sub    eax,0x20
c0021da1:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021da5:	42                   	inc    edx
c0021da6:	eb d8                	jmp    c0021d80 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021da8:	31 ed                	xor    ebp,ebp
c0021daa:	83 ec 0c             	sub    esp,0xc
c0021dad:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021db4:	e8 87 da fe ff       	call   c000f840 <malloc>
c0021db9:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021dc0:	89 c6                	mov    esi,eax
c0021dc2:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021dc8:	c1 ef 0b             	shr    edi,0xb
c0021dcb:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021dd2:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021dd6:	83 c4 10             	add    esp,0x10
c0021dd9:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021dde:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021de2:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021de9:	74 28                	je     c0021e13 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021deb:	52                   	push   edx
c0021dec:	57                   	push   edi
c0021ded:	50                   	push   eax
c0021dee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021df2:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021df9:	e8 9d f9 ff ff       	call   c002179b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021dfe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021e02:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021e09:	05 00 08 00 00       	add    eax,0x800
c0021e0e:	83 c4 10             	add    esp,0x10
c0021e11:	eb cb                	jmp    c0021dde <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021e13:	83 ec 0c             	sub    esp,0xc
c0021e16:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021e1a:	57                   	push   edi
c0021e1b:	e8 74 e9 fd ff       	call   c0000794 <strlen>
c0021e20:	50                   	push   eax
c0021e21:	57                   	push   edi
c0021e22:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021e29:	56                   	push   esi
c0021e2a:	e8 2a f9 ff ff       	call   c0021759 <__memmem(unsigned char*, int, unsigned char*, int)>
c0021e2f:	83 c4 20             	add    esp,0x20
c0021e32:	85 c0                	test   eax,eax
c0021e34:	75 13                	jne    c0021e49 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021e36:	83 ec 0c             	sub    esp,0xc
c0021e39:	56                   	push   esi
c0021e3a:	e8 11 da fe ff       	call   c000f850 <free>
c0021e3f:	83 c4 10             	add    esp,0x10
c0021e42:	31 c0                	xor    eax,eax
c0021e44:	e9 b3 00 00 00       	jmp    c0021efc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021e49:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021e4d:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021e51:	c1 e7 08             	shl    edi,0x8
c0021e54:	c1 e2 10             	shl    edx,0x10
c0021e57:	09 d7                	or     edi,edx
c0021e59:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021e5d:	09 d7                	or     edi,edx
c0021e5f:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021e63:	c1 e2 18             	shl    edx,0x18
c0021e66:	09 d7                	or     edi,edx
c0021e68:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021e6c:	89 d1                	mov    ecx,edx
c0021e6e:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021e72:	c1 e1 08             	shl    ecx,0x8
c0021e75:	c1 e2 10             	shl    edx,0x10
c0021e78:	09 ca                	or     edx,ecx
c0021e7a:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021e7e:	09 ca                	or     edx,ecx
c0021e80:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021e84:	c1 e1 18             	shl    ecx,0x18
c0021e87:	09 ca                	or     edx,ecx
c0021e89:	89 e9                	mov    ecx,ebp
c0021e8b:	84 c9                	test   cl,cl
c0021e8d:	74 3c                	je     c0021ecb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021e8f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021e93:	83 ec 0c             	sub    esp,0xc
c0021e96:	56                   	push   esi
c0021e97:	e8 b4 d9 fe ff       	call   c000f850 <free>
c0021e9c:	83 c4 0c             	add    esp,0xc
c0021e9f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021ea6:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021eab:	50                   	push   eax
c0021eac:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021eb3:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021eba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021ebe:	52                   	push   edx
c0021ebf:	57                   	push   edi
c0021ec0:	53                   	push   ebx
c0021ec1:	e8 6e fe ff ff       	call   c0021d34 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021ec6:	83 c4 20             	add    esp,0x20
c0021ec9:	eb 31                	jmp    c0021efc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021ecb:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021ece:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021ed5:	d0 e8                	shr    al,1
c0021ed7:	89 3b                	mov    DWORD PTR [ebx],edi
c0021ed9:	83 e0 01             	and    eax,0x1
c0021edc:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021ee3:	83 ec 0c             	sub    esp,0xc
c0021ee6:	89 13                	mov    DWORD PTR [ebx],edx
c0021ee8:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021eef:	89 03                	mov    DWORD PTR [ebx],eax
c0021ef1:	56                   	push   esi
c0021ef2:	e8 59 d9 fe ff       	call   c000f850 <free>
c0021ef7:	83 c4 10             	add    esp,0x10
c0021efa:	b0 01                	mov    al,0x1
c0021efc:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021f02:	5b                   	pop    ebx
c0021f03:	5e                   	pop    esi
c0021f04:	5f                   	pop    edi
c0021f05:	5d                   	pop    ebp
c0021f06:	c3                   	ret    

c0021f07 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021f07:	55                   	push   ebp
c0021f08:	57                   	push   edi
c0021f09:	56                   	push   esi
c0021f0a:	53                   	push   ebx
c0021f0b:	83 ec 20             	sub    esp,0x20
c0021f0e:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021f12:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021f16:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021f1a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021f22:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021f2a:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021f2f:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021f35:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021f3b:	57                   	push   edi
c0021f3c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021f40:	50                   	push   eax
c0021f41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021f45:	50                   	push   eax
c0021f46:	e8 94 fd ff ff       	call   c0021cdf <readRoot(unsigned int*, unsigned int*, char)>
c0021f4b:	5a                   	pop    edx
c0021f4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021f50:	e8 3f e8 fd ff       	call   c0000794 <strlen>
c0021f55:	83 c4 10             	add    esp,0x10
c0021f58:	83 f8 03             	cmp    eax,0x3
c0021f5b:	77 17                	ja     c0021f74 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021f5d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021f61:	89 03                	mov    DWORD PTR [ebx],eax
c0021f63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f67:	89 06                	mov    DWORD PTR [esi],eax
c0021f69:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021f70:	b0 01                	mov    al,0x1
c0021f72:	eb 19                	jmp    c0021f8d <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021f74:	50                   	push   eax
c0021f75:	55                   	push   ebp
c0021f76:	57                   	push   edi
c0021f77:	56                   	push   esi
c0021f78:	53                   	push   ebx
c0021f79:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021f7d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021f81:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021f85:	e8 aa fd ff ff       	call   c0021d34 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021f8a:	83 c4 20             	add    esp,0x20
c0021f8d:	83 c4 1c             	add    esp,0x1c
c0021f90:	5b                   	pop    ebx
c0021f91:	5e                   	pop    esi
c0021f92:	5f                   	pop    edi
c0021f93:	5d                   	pop    ebp
c0021f94:	c3                   	ret    
c0021f95:	90                   	nop

c0021f96 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021f96:	57                   	push   edi
c0021f97:	56                   	push   esi
c0021f98:	53                   	push   ebx
c0021f99:	83 ec 10             	sub    esp,0x10
c0021f9c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021fa0:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021fa4:	85 ff                	test   edi,edi
c0021fa6:	0f 84 9d 00 00 00    	je     c0022049 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021fac:	85 f6                	test   esi,esi
c0021fae:	0f 84 95 00 00 00    	je     c0022049 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021fb4:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021fb9:	74 17                	je     c0021fd2 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0021fbb:	83 ec 0c             	sub    esp,0xc
c0021fbe:	68 b7 ca 02 c0       	push   0xc002cab7
c0021fc3:	e8 6c 0f ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0021fc8:	83 c4 10             	add    esp,0x10
c0021fcb:	b8 03 00 00 00       	mov    eax,0x3
c0021fd0:	eb 7c                	jmp    c002204e <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021fd2:	83 ec 0c             	sub    esp,0xc
c0021fd5:	6a 1c                	push   0x1c
c0021fd7:	e8 64 d8 fe ff       	call   c000f840 <malloc>
c0021fdc:	89 07                	mov    DWORD PTR [edi],eax
c0021fde:	89 c3                	mov    ebx,eax
c0021fe0:	58                   	pop    eax
c0021fe1:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021fe5:	50                   	push   eax
c0021fe6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021fe9:	50                   	push   eax
c0021fea:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021fee:	50                   	push   eax
c0021fef:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021ff3:	50                   	push   eax
c0021ff4:	56                   	push   esi
c0021ff5:	e8 0d ff ff ff       	call   c0021f07 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021ffa:	83 c4 20             	add    esp,0x20
c0021ffd:	84 c0                	test   al,al
c0021fff:	74 07                	je     c0022008 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c0022001:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022006:	74 0b                	je     c0022013 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0022008:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c002200c:	b8 01 00 00 00       	mov    eax,0x1
c0022011:	eb 3b                	jmp    c002204e <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022013:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022017:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c002201b:	89 03                	mov    DWORD PTR [ebx],eax
c002201d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022024:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022028:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002202f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022036:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022039:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022040:	8a 06                	mov    al,BYTE PTR [esi]
c0022042:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022045:	31 c0                	xor    eax,eax
c0022047:	eb 05                	jmp    c002204e <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022049:	b8 04 00 00 00       	mov    eax,0x4
c002204e:	83 c4 10             	add    esp,0x10
c0022051:	5b                   	pop    ebx
c0022052:	5e                   	pop    esi
c0022053:	5f                   	pop    edi
c0022054:	c3                   	ret    
c0022055:	90                   	nop

c0022056 <ISO9660::exists(char const*)>:
c0022056:	83 ec 28             	sub    esp,0x28
c0022059:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002205d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0022061:	52                   	push   edx
c0022062:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0022065:	52                   	push   edx
c0022066:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002206a:	52                   	push   edx
c002206b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002206f:	52                   	push   edx
c0022070:	50                   	push   eax
c0022071:	e8 91 fe ff ff       	call   c0021f07 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022076:	83 c4 3c             	add    esp,0x3c
c0022079:	c3                   	ret    

c002207a <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c002207a:	56                   	push   esi
c002207b:	53                   	push   ebx
c002207c:	83 ec 14             	sub    esp,0x14
c002207f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022083:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022087:	85 db                	test   ebx,ebx
c0022089:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002208d:	0f 94 c2             	sete   dl
c0022090:	85 f6                	test   esi,esi
c0022092:	0f 94 c0             	sete   al
c0022095:	08 c2                	or     dl,al
c0022097:	75 68                	jne    c0022101 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022099:	85 c9                	test   ecx,ecx
c002209b:	74 64                	je     c0022101 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c002209d:	83 ec 0c             	sub    esp,0xc
c00220a0:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00220a3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00220a7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00220ad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00220b4:	50                   	push   eax
c00220b5:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c00220b8:	50                   	push   eax
c00220b9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220bd:	50                   	push   eax
c00220be:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220c2:	50                   	push   eax
c00220c3:	51                   	push   ecx
c00220c4:	e8 3e fe ff ff       	call   c0021f07 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00220c9:	83 c4 20             	add    esp,0x20
c00220cc:	ba 01 00 00 00       	mov    edx,0x1
c00220d1:	84 c0                	test   al,al
c00220d3:	74 31                	je     c0022106 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00220d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00220d9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00220e0:	89 03                	mov    DWORD PTR [ebx],eax
c00220e2:	ba 00 00 00 00       	mov    edx,0x0
c00220e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00220eb:	85 c0                	test   eax,eax
c00220ed:	0f 95 06             	setne  BYTE PTR [esi]
c00220f0:	74 14                	je     c0022106 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00220f2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00220f8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00220ff:	eb 05                	jmp    c0022106 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022101:	ba 04 00 00 00       	mov    edx,0x4
c0022106:	83 c4 14             	add    esp,0x14
c0022109:	89 d0                	mov    eax,edx
c002210b:	5b                   	pop    ebx
c002210c:	5e                   	pop    esi
c002210d:	c3                   	ret    

c002210e <ISO9660::openDir(char const*, void**)>:
c002210e:	57                   	push   edi
c002210f:	56                   	push   esi
c0022110:	53                   	push   ebx
c0022111:	83 ec 10             	sub    esp,0x10
c0022114:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022118:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002211c:	85 ff                	test   edi,edi
c002211e:	0f 84 95 00 00 00    	je     c00221b9 <ISO9660::openDir(char const*, void**)+0xab>
c0022124:	85 f6                	test   esi,esi
c0022126:	0f 84 8d 00 00 00    	je     c00221b9 <ISO9660::openDir(char const*, void**)+0xab>
c002212c:	83 ec 0c             	sub    esp,0xc
c002212f:	6a 1c                	push   0x1c
c0022131:	e8 0a d7 fe ff       	call   c000f840 <malloc>
c0022136:	89 07                	mov    DWORD PTR [edi],eax
c0022138:	89 c3                	mov    ebx,eax
c002213a:	59                   	pop    ecx
c002213b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002213f:	50                   	push   eax
c0022140:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022143:	50                   	push   eax
c0022144:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022148:	50                   	push   eax
c0022149:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002214d:	50                   	push   eax
c002214e:	56                   	push   esi
c002214f:	e8 b3 fd ff ff       	call   c0021f07 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022154:	83 c4 20             	add    esp,0x20
c0022157:	84 c0                	test   al,al
c0022159:	74 07                	je     c0022162 <ISO9660::openDir(char const*, void**)+0x54>
c002215b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022160:	75 21                	jne    c0022183 <ISO9660::openDir(char const*, void**)+0x75>
c0022162:	0f b6 c0             	movzx  eax,al
c0022165:	52                   	push   edx
c0022166:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002216a:	50                   	push   eax
c002216b:	68 dd ca 02 c0       	push   0xc002cadd
c0022170:	e8 bf 0d ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0022175:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022179:	83 c4 10             	add    esp,0x10
c002217c:	b8 01 00 00 00       	mov    eax,0x1
c0022181:	eb 3b                	jmp    c00221be <ISO9660::openDir(char const*, void**)+0xb0>
c0022183:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022187:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c002218b:	89 03                	mov    DWORD PTR [ebx],eax
c002218d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022194:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022198:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002219f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00221a6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00221a9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00221b0:	8a 06                	mov    al,BYTE PTR [esi]
c00221b2:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00221b5:	31 c0                	xor    eax,eax
c00221b7:	eb 05                	jmp    c00221be <ISO9660::openDir(char const*, void**)+0xb0>
c00221b9:	b8 04 00 00 00       	mov    eax,0x4
c00221be:	83 c4 10             	add    esp,0x10
c00221c1:	5b                   	pop    ebx
c00221c2:	5e                   	pop    esi
c00221c3:	5f                   	pop    edi
c00221c4:	c3                   	ret    
c00221c5:	90                   	nop

c00221c6 <ISO9660::ISO9660()>:
c00221c6:	83 ec 0c             	sub    esp,0xc
c00221c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221cd:	83 ec 0c             	sub    esp,0xc
c00221d0:	50                   	push   eax
c00221d1:	e8 62 10 ff ff       	call   c0013238 <Filesystem::Filesystem()>
c00221d6:	83 c4 10             	add    esp,0x10
c00221d9:	ba 00 cb 02 c0       	mov    edx,0xc002cb00
c00221de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221e2:	89 10                	mov    DWORD PTR [eax],edx
c00221e4:	90                   	nop
c00221e5:	83 c4 0c             	add    esp,0xc
c00221e8:	c3                   	ret    
c00221e9:	90                   	nop

c00221ea <SoundChannel::~SoundChannel()>:
c00221ea:	83 ec 0c             	sub    esp,0xc
c00221ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221f1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00221f4:	83 ec 0c             	sub    esp,0xc
c00221f7:	50                   	push   eax
c00221f8:	e8 53 d6 fe ff       	call   c000f850 <free>
c00221fd:	83 c4 10             	add    esp,0x10
c0022200:	90                   	nop
c0022201:	83 c4 0c             	add    esp,0xc
c0022204:	c3                   	ret    
c0022205:	90                   	nop

c0022206 <SoundChannel::setSpeed(float)>:
c0022206:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002220a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002220e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0022211:	c3                   	ret    

c0022212 <SoundChannel::getSpeed()>:
c0022212:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022216:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0022219:	c3                   	ret    

c002221a <SoundChannel::setVolume(int)>:
c002221a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002221e:	83 f8 64             	cmp    eax,0x64
c0022221:	7e 05                	jle    c0022228 <SoundChannel::setVolume(int)+0xe>
c0022223:	b8 64 00 00 00       	mov    eax,0x64
c0022228:	85 c0                	test   eax,eax
c002222a:	79 02                	jns    c002222e <SoundChannel::setVolume(int)+0x14>
c002222c:	31 c0                	xor    eax,eax
c002222e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022232:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0022235:	c3                   	ret    

c0022236 <SoundChannel::getVolume()>:
c0022236:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002223a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c002223d:	c3                   	ret    

c002223e <SoundChannel::pause()>:
c002223e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022242:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0022246:	c3                   	ret    
c0022247:	90                   	nop

c0022248 <SoundChannel::SoundChannel(int, int, int, int)>:
c0022248:	83 ec 1c             	sub    esp,0x1c
c002224b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002224f:	e8 ea ff ff ff       	call   c002223e <SoundChannel::pause()>
c0022254:	83 c4 04             	add    esp,0x4
c0022257:	6a 50                	push   0x50
c0022259:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002225d:	e8 b8 ff ff ff       	call   c002221a <SoundChannel::setVolume(int)>
c0022262:	83 c4 08             	add    esp,0x8
c0022265:	a1 78 cb 02 c0       	mov    eax,ds:0xc002cb78
c002226a:	50                   	push   eax
c002226b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002226f:	e8 92 ff ff ff       	call   c0022206 <SoundChannel::setSpeed(float)>
c0022274:	83 c4 08             	add    esp,0x8
c0022277:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002227b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002227f:	89 10                	mov    DWORD PTR [eax],edx
c0022281:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022285:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022289:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002228c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022290:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022294:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022297:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c002229c:	75 23                	jne    c00222c1 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c002229e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222a2:	8b 10                	mov    edx,DWORD PTR [eax]
c00222a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00222ab:	0f af c2             	imul   eax,edx
c00222ae:	85 c0                	test   eax,eax
c00222b0:	79 03                	jns    c00222b5 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c00222b2:	83 c0 03             	add    eax,0x3
c00222b5:	c1 f8 02             	sar    eax,0x2
c00222b8:	05 a0 0f 00 00       	add    eax,0xfa0
c00222bd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00222c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222c5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00222c9:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00222cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222d0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00222d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222db:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00222e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222e6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00222e9:	c1 e0 02             	shl    eax,0x2
c00222ec:	83 ec 0c             	sub    esp,0xc
c00222ef:	50                   	push   eax
c00222f0:	e8 4b d5 fe ff       	call   c000f840 <malloc>
c00222f5:	83 c4 10             	add    esp,0x10
c00222f8:	89 c2                	mov    edx,eax
c00222fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222fe:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0022301:	83 ec 04             	sub    esp,0x4
c0022304:	8d 44 24 08          	lea    eax,[esp+0x8]
c0022308:	50                   	push   eax
c0022309:	6a 01                	push   0x1
c002230b:	6a 04                	push   0x4
c002230d:	e8 8d 68 fe ff       	call   c0008b9f <src_new>
c0022312:	83 c4 10             	add    esp,0x10
c0022315:	89 c2                	mov    edx,eax
c0022317:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002231b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c002231e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022322:	85 c0                	test   eax,eax
c0022324:	74 10                	je     c0022336 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0022326:	83 ec 0c             	sub    esp,0xc
c0022329:	68 5c cb 02 c0       	push   0xc002cb5c
c002232e:	e8 a2 82 ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c0022333:	83 c4 10             	add    esp,0x10
c0022336:	a0 20 29 03 c0       	mov    al,ds:0xc0032920
c002233b:	83 f0 01             	xor    eax,0x1
c002233e:	84 c0                	test   al,al
c0022340:	74 57                	je     c0022399 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0022342:	a1 7c cb 02 c0       	mov    eax,ds:0xc002cb7c
c0022347:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002234b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022353:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c002235b:	7f 35                	jg     c0022392 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c002235d:	83 ec 0c             	sub    esp,0xc
c0022360:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022364:	e8 9e 4f 00 00       	call   c0027307 <__floatsisf>
c0022369:	83 c4 10             	add    esp,0x10
c002236c:	8b 15 7c cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb7c
c0022372:	83 ec 08             	sub    esp,0x8
c0022375:	52                   	push   edx
c0022376:	50                   	push   eax
c0022377:	e8 9d 4b 00 00       	call   c0026f19 <__mulsf3>
c002237c:	83 c4 10             	add    esp,0x10
c002237f:	89 c2                	mov    edx,eax
c0022381:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022385:	89 14 85 20 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdae0],edx
c002238c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022390:	eb c1                	jmp    c0022353 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0022392:	c6 05 20 29 03 c0 01 	mov    BYTE PTR ds:0xc0032920,0x1
c0022399:	90                   	nop
c002239a:	83 c4 1c             	add    esp,0x1c
c002239d:	c3                   	ret    

c002239e <SoundChannel::play()>:
c002239e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223a2:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c00223a6:	c3                   	ret    
c00223a7:	90                   	nop

c00223a8 <SoundChannel::paused()>:
c00223a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223ac:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c00223af:	c3                   	ret    

c00223b0 <SoundChannel::getSampleRate()>:
c00223b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00223b6:	c3                   	ret    
c00223b7:	90                   	nop

c00223b8 <SoundChannel::getBits()>:
c00223b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00223bf:	c3                   	ret    

c00223c0 <SoundChannel::getBufferUsed()>:
c00223c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223c4:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00223c7:	c3                   	ret    

c00223c8 <SoundChannel::getBufferSize()>:
c00223c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223cc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00223cf:	c3                   	ret    

c00223d0 <SoundChannel::unbuffer(float*, int, int)>:
c00223d0:	56                   	push   esi
c00223d1:	53                   	push   ebx
c00223d2:	83 ec 40             	sub    esp,0x40
c00223d5:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00223d9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00223dc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00223e0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00223e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00223e7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00223eb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00223ef:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00223f3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00223f7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00223fb:	e8 07 4f 00 00       	call   c0027307 <__floatsisf>
c0022400:	5a                   	pop    edx
c0022401:	89 c6                	mov    esi,eax
c0022403:	ff 33                	push   DWORD PTR [ebx]
c0022405:	e8 fd 4e 00 00       	call   c0027307 <__floatsisf>
c002240a:	59                   	pop    ecx
c002240b:	5a                   	pop    edx
c002240c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c002240f:	50                   	push   eax
c0022410:	e8 04 4b 00 00       	call   c0026f19 <__mulsf3>
c0022415:	59                   	pop    ecx
c0022416:	5a                   	pop    edx
c0022417:	50                   	push   eax
c0022418:	56                   	push   esi
c0022419:	e8 be 4c 00 00       	call   c00270dc <__divsf3>
c002241e:	89 04 24             	mov    DWORD PTR [esp],eax
c0022421:	e8 b1 61 00 00       	call   c00285d7 <__extendsfdf2>
c0022426:	59                   	pop    ecx
c0022427:	5e                   	pop    esi
c0022428:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002242c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0022430:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0022438:	8d 44 24 14          	lea    eax,[esp+0x14]
c002243c:	50                   	push   eax
c002243d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0022440:	e8 4f 63 fe ff       	call   c0008794 <src_process>
c0022445:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022449:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c002244c:	83 c4 0c             	add    esp,0xc
c002244f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0022452:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0022455:	29 d0                	sub    eax,edx
c0022457:	c1 e0 02             	shl    eax,0x2
c002245a:	50                   	push   eax
c002245b:	8d 04 91             	lea    eax,[ecx+edx*4]
c002245e:	50                   	push   eax
c002245f:	51                   	push   ecx
c0022460:	e8 17 e2 fd ff       	call   c000067c <memmove>
c0022465:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022469:	83 c4 44             	add    esp,0x44
c002246c:	5b                   	pop    ebx
c002246d:	5e                   	pop    esi
c002246e:	c3                   	ret    
c002246f:	90                   	nop

c0022470 <SoundChannel::buffer8(unsigned char*, int)>:
c0022470:	55                   	push   ebp
c0022471:	57                   	push   edi
c0022472:	56                   	push   esi
c0022473:	53                   	push   ebx
c0022474:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022478:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c002247c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c002247f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022483:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022486:	74 7a                	je     c0022502 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022488:	85 ff                	test   edi,edi
c002248a:	7e 76                	jle    c0022502 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c002248c:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0022490:	8d 70 01             	lea    esi,[eax+0x1]
c0022493:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022496:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022499:	8b 1c 9d 20 25 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdae0]
c00224a0:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00224a3:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00224a6:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00224a9:	74 5e                	je     c0022509 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c00224ab:	83 ff 01             	cmp    edi,0x1
c00224ae:	74 4b                	je     c00224fb <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c00224b0:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00224b4:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00224b7:	8d 70 01             	lea    esi,[eax+0x1]
c00224ba:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00224bd:	8b 1c 9d 20 25 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdae0]
c00224c4:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00224c7:	b8 02 00 00 00       	mov    eax,0x2
c00224cc:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00224cf:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00224d2:	75 23                	jne    c00224f7 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c00224d4:	eb 27                	jmp    c00224fd <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00224d6:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c00224db:	8d 71 01             	lea    esi,[ecx+0x1]
c00224de:	40                   	inc    eax
c00224df:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00224e2:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c00224e5:	8b 1c 9d 20 25 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdae0]
c00224ec:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c00224ef:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00224f2:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00224f5:	74 06                	je     c00224fd <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00224f7:	39 c7                	cmp    edi,eax
c00224f9:	75 db                	jne    c00224d6 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c00224fb:	89 f8                	mov    eax,edi
c00224fd:	5b                   	pop    ebx
c00224fe:	5e                   	pop    esi
c00224ff:	5f                   	pop    edi
c0022500:	5d                   	pop    ebp
c0022501:	c3                   	ret    
c0022502:	5b                   	pop    ebx
c0022503:	31 c0                	xor    eax,eax
c0022505:	5e                   	pop    esi
c0022506:	5f                   	pop    edi
c0022507:	5d                   	pop    ebp
c0022508:	c3                   	ret    
c0022509:	b8 01 00 00 00       	mov    eax,0x1
c002250e:	eb ed                	jmp    c00224fd <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0022510 <SoundDevice::SoundDevice(char const*)>:
c0022510:	83 ec 1c             	sub    esp,0x1c
c0022513:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022517:	83 ec 08             	sub    esp,0x8
c002251a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002251e:	50                   	push   eax
c002251f:	e8 26 20 ff ff       	call   c001454a <Device::Device(char const*)>
c0022524:	83 c4 10             	add    esp,0x10
c0022527:	ba 88 cb 02 c0       	mov    edx,0xc002cb88
c002252c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022530:	89 10                	mov    DWORD PTR [eax],edx
c0022532:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022536:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0022540:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022544:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c002254e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022556:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c002255b:	7f 19                	jg     c0022576 <SoundDevice::SoundDevice(char const*)+0x66>
c002255d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022561:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022565:	83 c2 54             	add    edx,0x54
c0022568:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0022570:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022574:	eb e0                	jmp    c0022556 <SoundDevice::SoundDevice(char const*)+0x46>
c0022576:	90                   	nop
c0022577:	83 c4 1c             	add    esp,0x1c
c002257a:	c3                   	ret    
c002257b:	90                   	nop

c002257c <SoundDevice::~SoundDevice()>:
c002257c:	53                   	push   ebx
c002257d:	83 ec 18             	sub    esp,0x18
c0022580:	ba 88 cb 02 c0       	mov    edx,0xc002cb88
c0022585:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022589:	89 10                	mov    DWORD PTR [eax],edx
c002258b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022593:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022598:	7f 46                	jg     c00225e0 <SoundDevice::~SoundDevice()+0x64>
c002259a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002259e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00225a2:	83 c2 54             	add    edx,0x54
c00225a5:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c00225a9:	85 c0                	test   eax,eax
c00225ab:	74 2d                	je     c00225da <SoundDevice::~SoundDevice()+0x5e>
c00225ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225b1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00225b5:	83 c2 54             	add    edx,0x54
c00225b8:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c00225bc:	85 db                	test   ebx,ebx
c00225be:	74 1a                	je     c00225da <SoundDevice::~SoundDevice()+0x5e>
c00225c0:	83 ec 0c             	sub    esp,0xc
c00225c3:	53                   	push   ebx
c00225c4:	e8 21 fc ff ff       	call   c00221ea <SoundChannel::~SoundChannel()>
c00225c9:	83 c4 10             	add    esp,0x10
c00225cc:	83 ec 08             	sub    esp,0x8
c00225cf:	6a 2c                	push   0x2c
c00225d1:	53                   	push   ebx
c00225d2:	e8 7d 08 ff ff       	call   c0012e54 <operator delete(void*, unsigned long)>
c00225d7:	83 c4 10             	add    esp,0x10
c00225da:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00225de:	eb b3                	jmp    c0022593 <SoundDevice::~SoundDevice()+0x17>
c00225e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225e4:	83 ec 0c             	sub    esp,0xc
c00225e7:	50                   	push   eax
c00225e8:	e8 3f 1c ff ff       	call   c001422c <Device::~Device()>
c00225ed:	83 c4 10             	add    esp,0x10
c00225f0:	90                   	nop
c00225f1:	83 c4 18             	add    esp,0x18
c00225f4:	5b                   	pop    ebx
c00225f5:	c3                   	ret    

c00225f6 <SoundDevice::~SoundDevice()>:
c00225f6:	83 ec 0c             	sub    esp,0xc
c00225f9:	83 ec 0c             	sub    esp,0xc
c00225fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022600:	e8 77 ff ff ff       	call   c002257c <SoundDevice::~SoundDevice()>
c0022605:	83 c4 10             	add    esp,0x10
c0022608:	83 ec 08             	sub    esp,0x8
c002260b:	68 e4 01 00 00       	push   0x1e4
c0022610:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022614:	e8 3b 08 ff ff       	call   c0012e54 <operator delete(void*, unsigned long)>
c0022619:	83 c4 10             	add    esp,0x10
c002261c:	83 c4 0c             	add    esp,0xc
c002261f:	c3                   	ret    

c0022620 <SoundDevice::getFreeChannelNum()>:
c0022620:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022624:	31 c0                	xor    eax,eax
c0022626:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c002262e:	74 09                	je     c0022639 <SoundDevice::getFreeChannelNum()+0x19>
c0022630:	40                   	inc    eax
c0022631:	83 f8 20             	cmp    eax,0x20
c0022634:	75 f0                	jne    c0022626 <SoundDevice::getFreeChannelNum()+0x6>
c0022636:	83 c8 ff             	or     eax,0xffffffff
c0022639:	c3                   	ret    

c002263a <SoundDevice::addChannel(SoundChannel*)>:
c002263a:	56                   	push   esi
c002263b:	53                   	push   ebx
c002263c:	51                   	push   ecx
c002263d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022641:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022645:	53                   	push   ebx
c0022646:	e8 d5 ff ff ff       	call   c0022620 <SoundDevice::getFreeChannelNum()>
c002264b:	5a                   	pop    edx
c002264c:	83 f8 ff             	cmp    eax,0xffffffff
c002264f:	74 51                	je     c00226a2 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022651:	85 f6                	test   esi,esi
c0022653:	74 4d                	je     c00226a2 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022655:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c002265c:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022663:	75 30                	jne    c0022695 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0022665:	83 ec 0c             	sub    esp,0xc
c0022668:	56                   	push   esi
c0022669:	e8 42 fd ff ff       	call   c00223b0 <SoundChannel::getSampleRate()>
c002266e:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0022674:	89 34 24             	mov    DWORD PTR [esp],esi
c0022677:	e8 3c fd ff ff       	call   c00223b8 <SoundChannel::getBits()>
c002267c:	83 c4 0c             	add    esp,0xc
c002267f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022685:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022687:	50                   	push   eax
c0022688:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c002268e:	53                   	push   ebx
c002268f:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0022692:	83 c4 10             	add    esp,0x10
c0022695:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c002269b:	b8 01 00 00 00       	mov    eax,0x1
c00226a0:	eb 03                	jmp    c00226a5 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c00226a2:	83 c8 ff             	or     eax,0xffffffff
c00226a5:	5a                   	pop    edx
c00226a6:	5b                   	pop    ebx
c00226a7:	5e                   	pop    esi
c00226a8:	c3                   	ret    
c00226a9:	90                   	nop

c00226aa <SoundDevice::removeChannel(int)>:
c00226aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00226ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00226b2:	83 fa 1f             	cmp    edx,0x1f
c00226b5:	77 23                	ja     c00226da <SoundDevice::removeChannel(int)+0x30>
c00226b7:	8d 14 90             	lea    edx,[eax+edx*4]
c00226ba:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c00226c1:	74 17                	je     c00226da <SoundDevice::removeChannel(int)+0x30>
c00226c3:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c00226cd:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c00226d3:	75 05                	jne    c00226da <SoundDevice::removeChannel(int)+0x30>
c00226d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00226d7:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c00226da:	c3                   	ret    
c00226db:	90                   	nop

c00226dc <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c00226dc:	57                   	push   edi
c00226dd:	56                   	push   esi
c00226de:	53                   	push   ebx
c00226df:	31 db                	xor    ebx,ebx
c00226e1:	83 ec 10             	sub    esp,0x10
c00226e4:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00226e8:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00226ec:	0f 8d cb 00 00 00    	jge    c00227bd <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c00226f2:	83 ec 0c             	sub    esp,0xc
c00226f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00226f9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00226fc:	e8 d6 5e 00 00       	call   c00285d7 <__extendsfdf2>
c0022701:	83 c4 10             	add    esp,0x10
c0022704:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022708:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002270c:	68 00 00 f0 3f       	push   0x3ff00000
c0022711:	6a 00                	push   0x0
c0022713:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022717:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002271b:	e8 43 4e 00 00       	call   c0027563 <__adddf3>
c0022720:	83 c4 10             	add    esp,0x10
c0022723:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022727:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002272b:	68 00 00 e0 3f       	push   0x3fe00000
c0022730:	6a 00                	push   0x0
c0022732:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022736:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002273a:	e8 a1 54 00 00       	call   c0027be0 <__muldf3>
c002273f:	83 c4 10             	add    esp,0x10
c0022742:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022746:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002274a:	68 00 00 60 40       	push   0x40600000
c002274f:	6a 00                	push   0x0
c0022751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022755:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022759:	e8 82 54 00 00       	call   c0027be0 <__muldf3>
c002275e:	59                   	pop    ecx
c002275f:	5f                   	pop    edi
c0022760:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022764:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022768:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002276c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022770:	e8 3e 5d 00 00       	call   c00284b3 <__truncdfsf2>
c0022775:	5a                   	pop    edx
c0022776:	89 c7                	mov    edi,eax
c0022778:	59                   	pop    ecx
c0022779:	68 00 00 fe 42       	push   0x42fe0000
c002277e:	50                   	push   eax
c002277f:	e8 d9 4d 00 00       	call   c002755d <__gesf2>
c0022784:	83 c4 10             	add    esp,0x10
c0022787:	85 c0                	test   eax,eax
c0022789:	78 06                	js     c0022791 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c002278b:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c002278f:	eb 26                	jmp    c00227b7 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022791:	50                   	push   eax
c0022792:	50                   	push   eax
c0022793:	6a 00                	push   0x0
c0022795:	57                   	push   edi
c0022796:	e8 c6 4d 00 00       	call   c0027561 <__lesf2>
c002279b:	83 c4 10             	add    esp,0x10
c002279e:	85 c0                	test   eax,eax
c00227a0:	7f 06                	jg     c00227a8 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c00227a2:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c00227a6:	eb 0f                	jmp    c00227b7 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00227a8:	83 ec 0c             	sub    esp,0xc
c00227ab:	57                   	push   edi
c00227ac:	e8 bb 5e 00 00       	call   c002866c <lrintf>
c00227b1:	83 c4 10             	add    esp,0x10
c00227b4:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00227b7:	43                   	inc    ebx
c00227b8:	e9 2b ff ff ff       	jmp    c00226e8 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c00227bd:	83 c4 10             	add    esp,0x10
c00227c0:	5b                   	pop    ebx
c00227c1:	5e                   	pop    esi
c00227c2:	5f                   	pop    edi
c00227c3:	c3                   	ret    

c00227c4 <SoundDevice::getAudio(int, float*, float*)>:
c00227c4:	55                   	push   ebp
c00227c5:	57                   	push   edi
c00227c6:	56                   	push   esi
c00227c7:	53                   	push   ebx
c00227c8:	31 db                	xor    ebx,ebx
c00227ca:	83 ec 20             	sub    esp,0x20
c00227cd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00227d1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00227d5:	c1 e0 02             	shl    eax,0x2
c00227d8:	50                   	push   eax
c00227d9:	6a 00                	push   0x0
c00227db:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00227df:	e8 94 df fd ff       	call   c0000778 <memset>
c00227e4:	83 c4 10             	add    esp,0x10
c00227e7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00227eb:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c00227f2:	85 c0                	test   eax,eax
c00227f4:	0f 84 d7 00 00 00    	je     c00228d1 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00227fa:	83 ec 0c             	sub    esp,0xc
c00227fd:	50                   	push   eax
c00227fe:	e8 a5 fb ff ff       	call   c00223a8 <SoundChannel::paused()>
c0022803:	83 c4 10             	add    esp,0x10
c0022806:	84 c0                	test   al,al
c0022808:	0f 85 c3 00 00 00    	jne    c00228d1 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002280e:	83 ec 0c             	sub    esp,0xc
c0022811:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022818:	e8 19 fa ff ff       	call   c0022236 <SoundChannel::getVolume()>
c002281d:	83 c4 10             	add    esp,0x10
c0022820:	85 c0                	test   eax,eax
c0022822:	0f 84 a9 00 00 00    	je     c00228d1 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022828:	83 ec 0c             	sub    esp,0xc
c002282b:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022832:	e8 ff f9 ff ff       	call   c0022236 <SoundChannel::getVolume()>
c0022837:	83 ec 0c             	sub    esp,0xc
c002283a:	50                   	push   eax
c002283b:	e8 c7 4a 00 00       	call   c0027307 <__floatsisf>
c0022840:	59                   	pop    ecx
c0022841:	5d                   	pop    ebp
c0022842:	31 ed                	xor    ebp,ebp
c0022844:	68 00 00 c8 42       	push   0x42c80000
c0022849:	50                   	push   eax
c002284a:	e8 8d 48 00 00       	call   c00270dc <__divsf3>
c002284f:	83 c4 10             	add    esp,0x10
c0022852:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022856:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c002285a:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0022860:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0022864:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002286b:	e8 60 fb ff ff       	call   c00223d0 <SoundChannel::unbuffer(float*, int, int)>
c0022870:	83 c4 20             	add    esp,0x20
c0022873:	89 c1                	mov    ecx,eax
c0022875:	39 cd                	cmp    ebp,ecx
c0022877:	7d 52                	jge    c00228cb <SoundDevice::getAudio(int, float*, float*)+0x107>
c0022879:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002287d:	50                   	push   eax
c002287e:	50                   	push   eax
c002287f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0022883:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022886:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002288a:	e8 8a 46 00 00       	call   c0026f19 <__mulsf3>
c002288f:	5a                   	pop    edx
c0022890:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022894:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c002289a:	e8 68 4a 00 00       	call   c0027307 <__floatsisf>
c002289f:	59                   	pop    ecx
c00228a0:	5a                   	pop    edx
c00228a1:	50                   	push   eax
c00228a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00228a6:	e8 31 48 00 00       	call   c00270dc <__divsf3>
c00228ab:	59                   	pop    ecx
c00228ac:	5a                   	pop    edx
c00228ad:	50                   	push   eax
c00228ae:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00228b2:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00228b5:	e8 3c 43 00 00       	call   c0026bf6 <__addsf3>
c00228ba:	83 c4 10             	add    esp,0x10
c00228bd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00228c1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00228c5:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c00228c8:	45                   	inc    ebp
c00228c9:	eb aa                	jmp    c0022875 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c00228cb:	39 cf                	cmp    edi,ecx
c00228cd:	7e 02                	jle    c00228d1 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00228cf:	89 cf                	mov    edi,ecx
c00228d1:	43                   	inc    ebx
c00228d2:	83 fb 20             	cmp    ebx,0x20
c00228d5:	0f 85 10 ff ff ff    	jne    c00227eb <SoundDevice::getAudio(int, float*, float*)+0x27>
c00228db:	83 c4 1c             	add    esp,0x1c
c00228de:	89 f8                	mov    eax,edi
c00228e0:	5b                   	pop    ebx
c00228e1:	5e                   	pop    esi
c00228e2:	5f                   	pop    edi
c00228e3:	5d                   	pop    ebp
c00228e4:	c3                   	ret    
c00228e5:	90                   	nop

c00228e6 <PCI::open(int, int, void*)>:
c00228e6:	83 ec 18             	sub    esp,0x18
c00228e9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00228ed:	8b 10                	mov    edx,DWORD PTR [eax]
c00228ef:	50                   	push   eax
c00228f0:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00228f3:	31 c0                	xor    eax,eax
c00228f5:	83 c4 1c             	add    esp,0x1c
c00228f8:	c3                   	ret    
c00228f9:	90                   	nop

c00228fa <PCI::close(int, int, void*)>:
c00228fa:	31 c0                	xor    eax,eax
c00228fc:	c3                   	ret    
c00228fd:	90                   	nop

c00228fe <PCI::PCI()>:
c00228fe:	83 ec 0c             	sub    esp,0xc
c0022901:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022905:	83 ec 08             	sub    esp,0x8
c0022908:	68 b8 cb 02 c0       	push   0xc002cbb8
c002290d:	50                   	push   eax
c002290e:	e8 bb 12 ff ff       	call   c0013bce <Bus::Bus(char const*)>
c0022913:	83 c4 10             	add    esp,0x10
c0022916:	ba 24 cc 02 c0       	mov    edx,0xc002cc24
c002291b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002291f:	89 10                	mov    DWORD PTR [eax],edx
c0022921:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022925:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002292b:	0f b6 d0             	movzx  edx,al
c002292e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022932:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0022939:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002293d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022943:	0f b6 d0             	movzx  edx,al
c0022946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002294a:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c002294f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022953:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022959:	8d 50 01             	lea    edx,[eax+0x1]
c002295c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022960:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022966:	0f b6 d0             	movzx  edx,al
c0022969:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002296d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022971:	83 c9 c0             	or     ecx,0xffffffc0
c0022974:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022978:	90                   	nop
c0022979:	83 c4 0c             	add    esp,0xc
c002297c:	c3                   	ret    
c002297d:	90                   	nop

c002297e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002297e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0022982:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022987:	89 ca                	mov    edx,ecx
c0022989:	c1 e0 10             	shl    eax,0x10
c002298c:	81 e2 fc 00 00 00    	and    edx,0xfc
c0022992:	09 d0                	or     eax,edx
c0022994:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0022999:	c1 e2 08             	shl    edx,0x8
c002299c:	09 d0                	or     eax,edx
c002299e:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c00229a3:	c1 e2 0b             	shl    edx,0xb
c00229a6:	09 d0                	or     eax,edx
c00229a8:	ba f8 0c 00 00       	mov    edx,0xcf8
c00229ad:	0d 00 00 00 80       	or     eax,0x80000000
c00229b2:	ef                   	out    dx,eax
c00229b3:	ba fc 0c 00 00       	mov    edx,0xcfc
c00229b8:	ed                   	in     eax,dx
c00229b9:	83 e1 02             	and    ecx,0x2
c00229bc:	0f b6 c9             	movzx  ecx,cl
c00229bf:	c1 e1 03             	shl    ecx,0x3
c00229c2:	d3 e8                	shr    eax,cl
c00229c4:	c3                   	ret    
c00229c5:	90                   	nop

c00229c6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00229c6:	6a 00                	push   0x0
c00229c8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229cd:	50                   	push   eax
c00229ce:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229d3:	50                   	push   eax
c00229d4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229d9:	50                   	push   eax
c00229da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229de:	e8 9b ff ff ff       	call   c002297e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229e3:	83 c4 14             	add    esp,0x14
c00229e6:	c3                   	ret    
c00229e7:	90                   	nop

c00229e8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00229e8:	6a 0e                	push   0xe
c00229ea:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229ef:	50                   	push   eax
c00229f0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229f5:	50                   	push   eax
c00229f6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229fb:	50                   	push   eax
c00229fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a00:	e8 79 ff ff ff       	call   c002297e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a05:	83 c4 14             	add    esp,0x14
c0022a08:	0f b6 c0             	movzx  eax,al
c0022a0b:	c3                   	ret    

c0022a0c <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022a0c:	55                   	push   ebp
c0022a0d:	57                   	push   edi
c0022a0e:	56                   	push   esi
c0022a0f:	53                   	push   ebx
c0022a10:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0022a15:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0022a1a:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0022a1f:	6a 0a                	push   0xa
c0022a21:	56                   	push   esi
c0022a22:	55                   	push   ebp
c0022a23:	57                   	push   edi
c0022a24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022a28:	e8 51 ff ff ff       	call   c002297e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a2d:	6a 0a                	push   0xa
c0022a2f:	89 c3                	mov    ebx,eax
c0022a31:	56                   	push   esi
c0022a32:	0f b6 db             	movzx  ebx,bl
c0022a35:	55                   	push   ebp
c0022a36:	57                   	push   edi
c0022a37:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022a3b:	e8 3e ff ff ff       	call   c002297e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a40:	83 c4 28             	add    esp,0x28
c0022a43:	25 00 ff 00 00       	and    eax,0xff00
c0022a48:	09 d8                	or     eax,ebx
c0022a4a:	5b                   	pop    ebx
c0022a4b:	5e                   	pop    esi
c0022a4c:	5f                   	pop    edi
c0022a4d:	5d                   	pop    ebp
c0022a4e:	c3                   	ret    
c0022a4f:	90                   	nop

c0022a50 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022a50:	6a 08                	push   0x8
c0022a52:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a57:	50                   	push   eax
c0022a58:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a5d:	50                   	push   eax
c0022a5e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a63:	50                   	push   eax
c0022a64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a68:	e8 11 ff ff ff       	call   c002297e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a6d:	83 c4 14             	add    esp,0x14
c0022a70:	0f b6 c4             	movzx  eax,ah
c0022a73:	c3                   	ret    

c0022a74 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022a74:	6a 08                	push   0x8
c0022a76:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a7b:	50                   	push   eax
c0022a7c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a81:	50                   	push   eax
c0022a82:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a87:	50                   	push   eax
c0022a88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a8c:	e8 ed fe ff ff       	call   c002297e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a91:	83 c4 14             	add    esp,0x14
c0022a94:	c3                   	ret    
c0022a95:	90                   	nop

c0022a96 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022a96:	6a 3c                	push   0x3c
c0022a98:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a9d:	50                   	push   eax
c0022a9e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022aa3:	50                   	push   eax
c0022aa4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022aa9:	50                   	push   eax
c0022aaa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022aae:	e8 cb fe ff ff       	call   c002297e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ab3:	83 c4 14             	add    esp,0x14
c0022ab6:	c3                   	ret    
c0022ab7:	90                   	nop

c0022ab8 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022ab8:	6a 18                	push   0x18
c0022aba:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022abf:	50                   	push   eax
c0022ac0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ac5:	50                   	push   eax
c0022ac6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022acb:	50                   	push   eax
c0022acc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ad0:	e8 a9 fe ff ff       	call   c002297e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ad5:	83 c4 14             	add    esp,0x14
c0022ad8:	0f b6 c4             	movzx  eax,ah
c0022adb:	c3                   	ret    

c0022adc <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022adc:	55                   	push   ebp
c0022add:	57                   	push   edi
c0022ade:	56                   	push   esi
c0022adf:	53                   	push   ebx
c0022ae0:	50                   	push   eax
c0022ae1:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0022ae5:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0022aea:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022aef:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0022af4:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022afb:	8d 43 12             	lea    eax,[ebx+0x12]
c0022afe:	83 c3 10             	add    ebx,0x10
c0022b01:	0f b6 c0             	movzx  eax,al
c0022b04:	0f b6 db             	movzx  ebx,bl
c0022b07:	50                   	push   eax
c0022b08:	51                   	push   ecx
c0022b09:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022b0d:	57                   	push   edi
c0022b0e:	55                   	push   ebp
c0022b0f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0022b13:	e8 66 fe ff ff       	call   c002297e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b18:	53                   	push   ebx
c0022b19:	89 c6                	mov    esi,eax
c0022b1b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022b1f:	c1 e6 10             	shl    esi,0x10
c0022b22:	51                   	push   ecx
c0022b23:	57                   	push   edi
c0022b24:	55                   	push   ebp
c0022b25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022b29:	e8 50 fe ff ff       	call   c002297e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b2e:	83 c4 2c             	add    esp,0x2c
c0022b31:	0f b7 c0             	movzx  eax,ax
c0022b34:	5b                   	pop    ebx
c0022b35:	09 f0                	or     eax,esi
c0022b37:	5e                   	pop    esi
c0022b38:	5f                   	pop    edi
c0022b39:	5d                   	pop    ebp
c0022b3a:	c3                   	ret    
c0022b3b:	90                   	nop

c0022b3c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022b3c:	53                   	push   ebx
c0022b3d:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022b42:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0022b47:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022b4b:	c1 e1 10             	shl    ecx,0x10
c0022b4e:	25 fc 00 00 00       	and    eax,0xfc
c0022b53:	09 c1                	or     ecx,eax
c0022b55:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b5a:	c1 e0 08             	shl    eax,0x8
c0022b5d:	09 c1                	or     ecx,eax
c0022b5f:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022b64:	c1 e0 0b             	shl    eax,0xb
c0022b67:	09 c1                	or     ecx,eax
c0022b69:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022b6f:	89 c8                	mov    eax,ecx
c0022b71:	ef                   	out    dx,eax
c0022b72:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022b77:	ed                   	in     eax,dx
c0022b78:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0022b7d:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0022b82:	74 0a                	je     c0022b8e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0022b84:	0f b7 d8             	movzx  ebx,ax
c0022b87:	89 d0                	mov    eax,edx
c0022b89:	c1 e0 10             	shl    eax,0x10
c0022b8c:	eb 05                	jmp    c0022b93 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0022b8e:	66 31 c0             	xor    ax,ax
c0022b91:	89 d3                	mov    ebx,edx
c0022b93:	09 c3                	or     ebx,eax
c0022b95:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022b9a:	89 c8                	mov    eax,ecx
c0022b9c:	ef                   	out    dx,eax
c0022b9d:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022ba2:	89 d8                	mov    eax,ebx
c0022ba4:	ef                   	out    dx,eax
c0022ba5:	5b                   	pop    ebx
c0022ba6:	c3                   	ret    
c0022ba7:	90                   	nop

c0022ba8 <PCI::checkBus(unsigned char)>:
c0022ba8:	56                   	push   esi
c0022ba9:	53                   	push   ebx
c0022baa:	31 db                	xor    ebx,ebx
c0022bac:	51                   	push   ecx
c0022bad:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022bb2:	52                   	push   edx
c0022bb3:	53                   	push   ebx
c0022bb4:	43                   	inc    ebx
c0022bb5:	56                   	push   esi
c0022bb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022bba:	e8 2b 03 00 00       	call   c0022eea <PCI::checkDevice(unsigned char, unsigned char)>
c0022bbf:	83 c4 10             	add    esp,0x10
c0022bc2:	83 fb 20             	cmp    ebx,0x20
c0022bc5:	75 eb                	jne    c0022bb2 <PCI::checkBus(unsigned char)+0xa>
c0022bc7:	58                   	pop    eax
c0022bc8:	5b                   	pop    ebx
c0022bc9:	5e                   	pop    esi
c0022bca:	c3                   	ret    
c0022bcb:	90                   	nop

c0022bcc <PCI::foundDevice(PCIDeviceInfo)>:
c0022bcc:	55                   	push   ebp
c0022bcd:	57                   	push   edi
c0022bce:	56                   	push   esi
c0022bcf:	53                   	push   ebx
c0022bd0:	83 ec 1c             	sub    esp,0x1c
c0022bd3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022bd7:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022bdd:	0f 84 52 01 00 00    	je     c0022d35 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022be3:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022be7:	66 81 f9 06 04       	cmp    cx,0x406
c0022bec:	75 2c                	jne    c0022c1a <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022bee:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022bf3:	50                   	push   eax
c0022bf4:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022bf9:	50                   	push   eax
c0022bfa:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022bff:	50                   	push   eax
c0022c00:	56                   	push   esi
c0022c01:	e8 b2 fe ff ff       	call   c0022ab8 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022c06:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022c0a:	0f b6 c0             	movzx  eax,al
c0022c0d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022c11:	83 c4 2c             	add    esp,0x2c
c0022c14:	5b                   	pop    ebx
c0022c15:	5e                   	pop    esi
c0022c16:	5f                   	pop    edi
c0022c17:	5d                   	pop    ebp
c0022c18:	eb 8e                	jmp    c0022ba8 <PCI::checkBus(unsigned char)>
c0022c1a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022c1e:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022c24:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022c28:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022c2c:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022c30:	88 d3                	mov    bl,dl
c0022c32:	85 c0                	test   eax,eax
c0022c34:	74 33                	je     c0022c69 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022c36:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022c39:	85 d2                	test   edx,edx
c0022c3b:	74 28                	je     c0022c65 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c3d:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022c43:	31 ef                	xor    edi,ebp
c0022c45:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022c4b:	75 18                	jne    c0022c65 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022c51:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022c57:	75 0c                	jne    c0022c65 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c59:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022c5f:	0f 84 d0 00 00 00    	je     c0022d35 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022c65:	8b 00                	mov    eax,DWORD PTR [eax]
c0022c67:	eb c9                	jmp    c0022c32 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022c69:	66 81 f9 01 06       	cmp    cx,0x601
c0022c6e:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022c72:	75 19                	jne    c0022c8d <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022c74:	83 ec 0c             	sub    esp,0xc
c0022c77:	68 64 01 00 00       	push   0x164
c0022c7c:	e8 bf cb fe ff       	call   c000f840 <malloc>
c0022c81:	89 c5                	mov    ebp,eax
c0022c83:	89 04 24             	mov    DWORD PTR [esp],eax
c0022c86:	e8 95 0f 00 00       	call   c0023c20 <SATABus::SATABus()>
c0022c8b:	eb 1e                	jmp    c0022cab <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022c8d:	66 81 f9 01 01       	cmp    cx,0x101
c0022c92:	75 60                	jne    c0022cf4 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022c94:	83 ec 0c             	sub    esp,0xc
c0022c97:	68 70 02 00 00       	push   0x270
c0022c9c:	e8 9f cb fe ff       	call   c000f840 <malloc>
c0022ca1:	89 c5                	mov    ebp,eax
c0022ca3:	89 04 24             	mov    DWORD PTR [esp],eax
c0022ca6:	e8 03 03 00 00       	call   c0022fae <IDE::IDE()>
c0022cab:	58                   	pop    eax
c0022cac:	5a                   	pop    edx
c0022cad:	55                   	push   ebp
c0022cae:	56                   	push   esi
c0022caf:	e8 a6 16 ff ff       	call   c001435a <Device::addChild(Device*)>
c0022cb4:	83 ec 1c             	sub    esp,0x1c
c0022cb7:	b9 09 00 00 00       	mov    ecx,0x9
c0022cbc:	fc                   	cld    
c0022cbd:	89 e7                	mov    edi,esp
c0022cbf:	89 de                	mov    esi,ebx
c0022cc1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022cc3:	55                   	push   ebp
c0022cc4:	e8 9b 15 ff ff       	call   c0014264 <Device::preOpenPCI(PCIDeviceInfo)>
c0022cc9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022ccc:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022cd0:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022cd8:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022ce0:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022ce8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022ceb:	83 c4 4c             	add    esp,0x4c
c0022cee:	5b                   	pop    ebx
c0022cef:	5e                   	pop    esi
c0022cf0:	5f                   	pop    edi
c0022cf1:	5d                   	pop    ebp
c0022cf2:	ff e0                	jmp    eax
c0022cf4:	83 ec 0c             	sub    esp,0xc
c0022cf7:	68 58 01 00 00       	push   0x158
c0022cfc:	e8 3f cb fe ff       	call   c000f840 <malloc>
c0022d01:	89 c5                	mov    ebp,eax
c0022d03:	58                   	pop    eax
c0022d04:	5a                   	pop    edx
c0022d05:	68 c0 cb 02 c0       	push   0xc002cbc0
c0022d0a:	55                   	push   ebp
c0022d0b:	e8 40 19 ff ff       	call   c0014650 <DriverlessDevice::DriverlessDevice(char const*)>
c0022d10:	59                   	pop    ecx
c0022d11:	5f                   	pop    edi
c0022d12:	55                   	push   ebp
c0022d13:	56                   	push   esi
c0022d14:	e8 41 16 ff ff       	call   c001435a <Device::addChild(Device*)>
c0022d19:	b9 09 00 00 00       	mov    ecx,0x9
c0022d1e:	fc                   	cld    
c0022d1f:	89 df                	mov    edi,ebx
c0022d21:	89 de                	mov    esi,ebx
c0022d23:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022d25:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022d29:	83 c4 2c             	add    esp,0x2c
c0022d2c:	5b                   	pop    ebx
c0022d2d:	5e                   	pop    esi
c0022d2e:	5f                   	pop    edi
c0022d2f:	5d                   	pop    ebp
c0022d30:	e9 2f 15 ff ff       	jmp    c0014264 <Device::preOpenPCI(PCIDeviceInfo)>
c0022d35:	83 c4 1c             	add    esp,0x1c
c0022d38:	5b                   	pop    ebx
c0022d39:	5e                   	pop    esi
c0022d3a:	5f                   	pop    edi
c0022d3b:	5d                   	pop    ebp
c0022d3c:	c3                   	ret    
c0022d3d:	90                   	nop

c0022d3e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022d3e:	55                   	push   ebp
c0022d3f:	57                   	push   edi
c0022d40:	56                   	push   esi
c0022d41:	53                   	push   ebx
c0022d42:	83 ec 5c             	sub    esp,0x5c
c0022d45:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022d49:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022d4d:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022d51:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022d56:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022d5a:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022d5e:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022d63:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022d67:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0022d6c:	6a 0c                	push   0xc
c0022d6e:	55                   	push   ebp
c0022d6f:	53                   	push   ebx
c0022d70:	57                   	push   edi
c0022d71:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022d78:	e8 01 fc ff ff       	call   c002297e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d7d:	55                   	push   ebp
c0022d7e:	53                   	push   ebx
c0022d7f:	57                   	push   edi
c0022d80:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022d87:	e8 80 fc ff ff       	call   c0022a0c <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022d8c:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0022d91:	83 c4 24             	add    esp,0x24
c0022d94:	55                   	push   ebp
c0022d95:	53                   	push   ebx
c0022d96:	57                   	push   edi
c0022d97:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022d9b:	e8 f6 fc ff ff       	call   c0022a96 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022da0:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022da4:	6a 3c                	push   0x3c
c0022da6:	55                   	push   ebp
c0022da7:	53                   	push   ebx
c0022da8:	57                   	push   edi
c0022da9:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022db0:	e8 c9 fb ff ff       	call   c002297e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022db5:	0f b6 c4             	movzx  eax,ah
c0022db8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022dbc:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022dc0:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022dc4:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0022dc9:	83 c4 24             	add    esp,0x24
c0022dcc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022dd2:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022dd9:	74 6c                	je     c0022e47 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022ddb:	31 f6                	xor    esi,esi
c0022ddd:	8b 15 c8 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5c8
c0022de3:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022de9:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022def:	7e 56                	jle    c0022e47 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022df1:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022df4:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022dfb:	39 cb                	cmp    ebx,ecx
c0022dfd:	75 45                	jne    c0022e44 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022dff:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022e06:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022e0a:	75 38                	jne    c0022e44 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022e0c:	83 ec 0c             	sub    esp,0xc
c0022e0f:	68 da cb 02 c0       	push   0xc002cbda
c0022e14:	e8 1b 01 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0022e19:	8b 15 c8 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5c8
c0022e1f:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022e25:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022e2d:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022e31:	52                   	push   edx
c0022e32:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022e36:	53                   	push   ebx
c0022e37:	68 ff cb 02 c0       	push   0xc002cbff
c0022e3c:	e8 f3 00 ff ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0022e41:	83 c4 20             	add    esp,0x20
c0022e44:	46                   	inc    esi
c0022e45:	eb 96                	jmp    c0022ddd <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022e47:	31 d2                	xor    edx,edx
c0022e49:	83 ec 0c             	sub    esp,0xc
c0022e4c:	55                   	push   ebp
c0022e4d:	53                   	push   ebx
c0022e4e:	57                   	push   edi
c0022e4f:	52                   	push   edx
c0022e50:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022e54:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022e5b:	e8 7c fc ff ff       	call   c0022adc <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e60:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022e64:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022e68:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022e6c:	42                   	inc    edx
c0022e6d:	83 c4 20             	add    esp,0x20
c0022e70:	83 fa 06             	cmp    edx,0x6
c0022e73:	75 d4                	jne    c0022e49 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022e75:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022e79:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022e7d:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022e81:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022e85:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022e89:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022e8d:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022e92:	86 e0                	xchg   al,ah
c0022e94:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022e99:	55                   	push   ebp
c0022e9a:	53                   	push   ebx
c0022e9b:	57                   	push   edi
c0022e9c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022ea0:	e8 ab fb ff ff       	call   c0022a50 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022ea5:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022ea9:	55                   	push   ebp
c0022eaa:	53                   	push   ebx
c0022eab:	57                   	push   edi
c0022eac:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022eb3:	e8 0e fb ff ff       	call   c00229c6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022eb8:	83 ec 0c             	sub    esp,0xc
c0022ebb:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022ec0:	b9 09 00 00 00       	mov    ecx,0x9
c0022ec5:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022ec9:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022ecd:	fc                   	cld    
c0022ece:	89 e7                	mov    edi,esp
c0022ed0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022ed2:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022ed9:	e8 ee fc ff ff       	call   c0022bcc <PCI::foundDevice(PCIDeviceInfo)>
c0022ede:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022ee4:	5b                   	pop    ebx
c0022ee5:	5e                   	pop    esi
c0022ee6:	5f                   	pop    edi
c0022ee7:	5d                   	pop    ebp
c0022ee8:	c3                   	ret    
c0022ee9:	90                   	nop

c0022eea <PCI::checkDevice(unsigned char, unsigned char)>:
c0022eea:	55                   	push   ebp
c0022eeb:	57                   	push   edi
c0022eec:	56                   	push   esi
c0022eed:	53                   	push   ebx
c0022eee:	83 ec 0c             	sub    esp,0xc
c0022ef1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022ef5:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022efa:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022eff:	6a 00                	push   0x0
c0022f01:	56                   	push   esi
c0022f02:	57                   	push   edi
c0022f03:	55                   	push   ebp
c0022f04:	e8 bd fa ff ff       	call   c00229c6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f09:	6a 00                	push   0x0
c0022f0b:	56                   	push   esi
c0022f0c:	57                   	push   edi
c0022f0d:	55                   	push   ebp
c0022f0e:	e8 2b fe ff ff       	call   c0022d3e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022f13:	83 c4 20             	add    esp,0x20
c0022f16:	6a 00                	push   0x0
c0022f18:	56                   	push   esi
c0022f19:	57                   	push   edi
c0022f1a:	55                   	push   ebp
c0022f1b:	e8 c8 fa ff ff       	call   c00229e8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022f20:	83 c4 10             	add    esp,0x10
c0022f23:	84 c0                	test   al,al
c0022f25:	79 27                	jns    c0022f4e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022f27:	bb 01 00 00 00       	mov    ebx,0x1
c0022f2c:	53                   	push   ebx
c0022f2d:	56                   	push   esi
c0022f2e:	57                   	push   edi
c0022f2f:	55                   	push   ebp
c0022f30:	e8 91 fa ff ff       	call   c00229c6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f35:	83 c4 10             	add    esp,0x10
c0022f38:	66 40                	inc    ax
c0022f3a:	74 0c                	je     c0022f48 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022f3c:	53                   	push   ebx
c0022f3d:	56                   	push   esi
c0022f3e:	57                   	push   edi
c0022f3f:	55                   	push   ebp
c0022f40:	e8 f9 fd ff ff       	call   c0022d3e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022f45:	83 c4 10             	add    esp,0x10
c0022f48:	43                   	inc    ebx
c0022f49:	83 fb 08             	cmp    ebx,0x8
c0022f4c:	75 de                	jne    c0022f2c <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022f4e:	83 c4 0c             	add    esp,0xc
c0022f51:	5b                   	pop    ebx
c0022f52:	5e                   	pop    esi
c0022f53:	5f                   	pop    edi
c0022f54:	5d                   	pop    ebp
c0022f55:	c3                   	ret    

c0022f56 <PCI::detect()>:
c0022f56:	56                   	push   esi
c0022f57:	53                   	push   ebx
c0022f58:	53                   	push   ebx
c0022f59:	31 db                	xor    ebx,ebx
c0022f5b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022f5f:	6a 00                	push   0x0
c0022f61:	6a 00                	push   0x0
c0022f63:	6a 00                	push   0x0
c0022f65:	56                   	push   esi
c0022f66:	e8 7d fa ff ff       	call   c00229e8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022f6b:	83 c4 10             	add    esp,0x10
c0022f6e:	a8 80                	test   al,0x80
c0022f70:	75 21                	jne    c0022f93 <PCI::detect()+0x3d>
c0022f72:	51                   	push   ecx
c0022f73:	51                   	push   ecx
c0022f74:	6a 00                	push   0x0
c0022f76:	56                   	push   esi
c0022f77:	e8 2c fc ff ff       	call   c0022ba8 <PCI::checkBus(unsigned char)>
c0022f7c:	83 c4 10             	add    esp,0x10
c0022f7f:	eb 24                	jmp    c0022fa5 <PCI::detect()+0x4f>
c0022f81:	52                   	push   edx
c0022f82:	52                   	push   edx
c0022f83:	53                   	push   ebx
c0022f84:	43                   	inc    ebx
c0022f85:	56                   	push   esi
c0022f86:	e8 1d fc ff ff       	call   c0022ba8 <PCI::checkBus(unsigned char)>
c0022f8b:	83 c4 10             	add    esp,0x10
c0022f8e:	83 fb 08             	cmp    ebx,0x8
c0022f91:	74 12                	je     c0022fa5 <PCI::detect()+0x4f>
c0022f93:	53                   	push   ebx
c0022f94:	6a 00                	push   0x0
c0022f96:	6a 00                	push   0x0
c0022f98:	56                   	push   esi
c0022f99:	e8 28 fa ff ff       	call   c00229c6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f9e:	83 c4 10             	add    esp,0x10
c0022fa1:	66 40                	inc    ax
c0022fa3:	74 dc                	je     c0022f81 <PCI::detect()+0x2b>
c0022fa5:	58                   	pop    eax
c0022fa6:	5b                   	pop    ebx
c0022fa7:	5e                   	pop    esi
c0022fa8:	c3                   	ret    
c0022fa9:	90                   	nop

c0022faa <IDE::close(int, int, void*)>:
c0022faa:	83 c8 ff             	or     eax,0xffffffff
c0022fad:	c3                   	ret    

c0022fae <IDE::IDE()>:
c0022fae:	83 ec 0c             	sub    esp,0xc
c0022fb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fb5:	83 ec 08             	sub    esp,0x8
c0022fb8:	68 48 cc 02 c0       	push   0xc002cc48
c0022fbd:	50                   	push   eax
c0022fbe:	e8 23 17 ff ff       	call   c00146e6 <HardDiskController::HardDiskController(char const*)>
c0022fc3:	83 c4 10             	add    esp,0x10
c0022fc6:	ba 88 ce 02 c0       	mov    edx,0xc002ce88
c0022fcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fcf:	89 10                	mov    DWORD PTR [eax],edx
c0022fd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fd5:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022fdc:	90                   	nop
c0022fdd:	83 c4 0c             	add    esp,0xc
c0022fe0:	c3                   	ret    
c0022fe1:	90                   	nop

c0022fe2 <IDE::prepareInterrupt(unsigned char)>:
c0022fe2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022fe7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022feb:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022ff3:	c3                   	ret    

c0022ff4 <selectDrive(unsigned char, unsigned char)>:
c0022ff4:	c3                   	ret    
c0022ff5:	90                   	nop

c0022ff6 <IDE::getBase(unsigned char)>:
c0022ff6:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022ffb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fff:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0023007:	c3                   	ret    

c0023008 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0023008:	55                   	push   ebp
c0023009:	57                   	push   edi
c002300a:	56                   	push   esi
c002300b:	53                   	push   ebx
c002300c:	83 ec 1c             	sub    esp,0x1c
c002300f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023013:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023017:	8d 4b f8             	lea    ecx,[ebx-0x8]
c002301a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002301e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023022:	80 f9 03             	cmp    cl,0x3
c0023025:	77 51                	ja     c0023078 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0023027:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002302b:	0f b6 f2             	movzx  esi,dl
c002302e:	0f b6 db             	movzx  ebx,bl
c0023031:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023034:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0023038:	83 ca 80             	or     edx,0xffffff80
c002303b:	0f b6 d2             	movzx  edx,dl
c002303e:	52                   	push   edx
c002303f:	6a 0c                	push   0xc
c0023041:	56                   	push   esi
c0023042:	57                   	push   edi
c0023043:	e8 c0 ff ff ff       	call   c0023008 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023048:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c002304d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023051:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0023055:	ee                   	out    dx,al
c0023056:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c002305b:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c002305f:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0023063:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023067:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002306f:	83 c4 2c             	add    esp,0x2c
c0023072:	5b                   	pop    ebx
c0023073:	5e                   	pop    esi
c0023074:	5f                   	pop    edi
c0023075:	5d                   	pop    ebp
c0023076:	eb 90                	jmp    c0023008 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023078:	80 fb 07             	cmp    bl,0x7
c002307b:	77 12                	ja     c002308f <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c002307d:	0f b6 d2             	movzx  edx,dl
c0023080:	0f b6 db             	movzx  ebx,bl
c0023083:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c002308b:	89 da                	mov    edx,ebx
c002308d:	eb 2f                	jmp    c00230be <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002308f:	80 fb 0d             	cmp    bl,0xd
c0023092:	77 13                	ja     c00230a7 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0023094:	0f b6 d2             	movzx  edx,dl
c0023097:	0f b6 db             	movzx  ebx,bl
c002309a:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c00230a1:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c00230a5:	eb 17                	jmp    c00230be <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00230a7:	80 fb 15             	cmp    bl,0x15
c00230aa:	77 13                	ja     c00230bf <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c00230ac:	0f b6 d2             	movzx  edx,dl
c00230af:	0f b6 db             	movzx  ebx,bl
c00230b2:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c00230ba:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c00230be:	ee                   	out    dx,al
c00230bf:	83 c4 1c             	add    esp,0x1c
c00230c2:	5b                   	pop    ebx
c00230c3:	5e                   	pop    esi
c00230c4:	5f                   	pop    edi
c00230c5:	5d                   	pop    ebp
c00230c6:	c3                   	ret    
c00230c7:	90                   	nop

c00230c8 <IDE::read(unsigned char, unsigned char)>:
c00230c8:	55                   	push   ebp
c00230c9:	57                   	push   edi
c00230ca:	56                   	push   esi
c00230cb:	53                   	push   ebx
c00230cc:	83 ec 1c             	sub    esp,0x1c
c00230cf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00230d3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00230d7:	8d 43 f8             	lea    eax,[ebx-0x8]
c00230da:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00230de:	3c 03                	cmp    al,0x3
c00230e0:	77 43                	ja     c0023125 <IDE::read(unsigned char, unsigned char)+0x5d>
c00230e2:	0f b6 f2             	movzx  esi,dl
c00230e5:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00230e8:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00230ec:	83 c8 80             	or     eax,0xffffff80
c00230ef:	0f b6 c0             	movzx  eax,al
c00230f2:	50                   	push   eax
c00230f3:	6a 0c                	push   0xc
c00230f5:	56                   	push   esi
c00230f6:	57                   	push   edi
c00230f7:	e8 0c ff ff ff       	call   c0023008 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230fc:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0023101:	0f b6 c3             	movzx  eax,bl
c0023104:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0023108:	ec                   	in     al,dx
c0023109:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002310d:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0023112:	52                   	push   edx
c0023113:	6a 0c                	push   0xc
c0023115:	56                   	push   esi
c0023116:	57                   	push   edi
c0023117:	e8 ec fe ff ff       	call   c0023008 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002311c:	83 c4 20             	add    esp,0x20
c002311f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023123:	eb 49                	jmp    c002316e <IDE::read(unsigned char, unsigned char)+0xa6>
c0023125:	80 fb 07             	cmp    bl,0x7
c0023128:	77 12                	ja     c002313c <IDE::read(unsigned char, unsigned char)+0x74>
c002312a:	0f b6 d2             	movzx  edx,dl
c002312d:	0f b6 c3             	movzx  eax,bl
c0023130:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023138:	89 c2                	mov    edx,eax
c002313a:	eb 31                	jmp    c002316d <IDE::read(unsigned char, unsigned char)+0xa5>
c002313c:	80 fb 0d             	cmp    bl,0xd
c002313f:	77 13                	ja     c0023154 <IDE::read(unsigned char, unsigned char)+0x8c>
c0023141:	0f b6 d2             	movzx  edx,dl
c0023144:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c002314b:	0f b6 d3             	movzx  edx,bl
c002314e:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0023152:	eb 19                	jmp    c002316d <IDE::read(unsigned char, unsigned char)+0xa5>
c0023154:	31 c0                	xor    eax,eax
c0023156:	80 fb 15             	cmp    bl,0x15
c0023159:	77 13                	ja     c002316e <IDE::read(unsigned char, unsigned char)+0xa6>
c002315b:	0f b6 d2             	movzx  edx,dl
c002315e:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023166:	0f b6 d3             	movzx  edx,bl
c0023169:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002316d:	ec                   	in     al,dx
c002316e:	83 c4 1c             	add    esp,0x1c
c0023171:	5b                   	pop    ebx
c0023172:	5e                   	pop    esi
c0023173:	5f                   	pop    edi
c0023174:	5d                   	pop    ebp
c0023175:	c3                   	ret    

c0023176 <IDE::waitInterrupt(unsigned char)>:
c0023176:	55                   	push   ebp
c0023177:	57                   	push   edi
c0023178:	56                   	push   esi
c0023179:	53                   	push   ebx
c002317a:	31 db                	xor    ebx,ebx
c002317c:	83 ec 0c             	sub    esp,0xc
c002317f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023183:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023188:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023190:	89 e8                	mov    eax,ebp
c0023192:	84 c0                	test   al,al
c0023194:	75 34                	jne    c00231ca <IDE::waitInterrupt(unsigned char)+0x54>
c0023196:	52                   	push   edx
c0023197:	6a 0c                	push   0xc
c0023199:	56                   	push   esi
c002319a:	57                   	push   edi
c002319b:	e8 28 ff ff ff       	call   c00230c8 <IDE::read(unsigned char, unsigned char)>
c00231a0:	83 c4 10             	add    esp,0x10
c00231a3:	a8 01                	test   al,0x1
c00231a5:	75 2b                	jne    c00231d2 <IDE::waitInterrupt(unsigned char)+0x5c>
c00231a7:	f6 c3 04             	test   bl,0x4
c00231aa:	75 16                	jne    c00231c2 <IDE::waitInterrupt(unsigned char)+0x4c>
c00231ac:	83 fb 32             	cmp    ebx,0x32
c00231af:	7e 11                	jle    c00231c2 <IDE::waitInterrupt(unsigned char)+0x4c>
c00231b1:	50                   	push   eax
c00231b2:	50                   	push   eax
c00231b3:	6a 00                	push   0x0
c00231b5:	68 80 96 98 00       	push   0x989680
c00231ba:	e8 8b b1 ff ff       	call   c001e34a <nanoSleep(unsigned long long)>
c00231bf:	83 c4 10             	add    esp,0x10
c00231c2:	83 fb 3c             	cmp    ebx,0x3c
c00231c5:	74 0b                	je     c00231d2 <IDE::waitInterrupt(unsigned char)+0x5c>
c00231c7:	43                   	inc    ebx
c00231c8:	eb be                	jmp    c0023188 <IDE::waitInterrupt(unsigned char)+0x12>
c00231ca:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c00231d2:	83 c4 0c             	add    esp,0xc
c00231d5:	89 e8                	mov    eax,ebp
c00231d7:	5b                   	pop    ebx
c00231d8:	5e                   	pop    esi
c00231d9:	5f                   	pop    edi
c00231da:	5d                   	pop    ebp
c00231db:	c3                   	ret    

c00231dc <ideChannel0IRQHandler(regs*, void*)>:
c00231dc:	83 ec 10             	sub    esp,0x10
c00231df:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00231e3:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00231ea:	6a 07                	push   0x7
c00231ec:	6a 00                	push   0x0
c00231ee:	50                   	push   eax
c00231ef:	e8 d4 fe ff ff       	call   c00230c8 <IDE::read(unsigned char, unsigned char)>
c00231f4:	83 c4 1c             	add    esp,0x1c
c00231f7:	c3                   	ret    

c00231f8 <ideChannel1IRQHandler(regs*, void*)>:
c00231f8:	83 ec 10             	sub    esp,0x10
c00231fb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00231ff:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023206:	6a 07                	push   0x7
c0023208:	6a 01                	push   0x1
c002320a:	50                   	push   eax
c002320b:	e8 b8 fe ff ff       	call   c00230c8 <IDE::read(unsigned char, unsigned char)>
c0023210:	83 c4 1c             	add    esp,0x1c
c0023213:	c3                   	ret    

c0023214 <IDE::enableIRQs(unsigned char, bool)>:
c0023214:	57                   	push   edi
c0023215:	56                   	push   esi
c0023216:	be 04 00 00 00       	mov    esi,0x4
c002321b:	53                   	push   ebx
c002321c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023221:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023225:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c002322a:	0f 94 c0             	sete   al
c002322d:	d1 e0                	shl    eax,1
c002322f:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023236:	0f b6 c0             	movzx  eax,al
c0023239:	50                   	push   eax
c002323a:	6a 0c                	push   0xc
c002323c:	57                   	push   edi
c002323d:	53                   	push   ebx
c002323e:	e8 c5 fd ff ff       	call   c0023008 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023243:	83 c4 10             	add    esp,0x10
c0023246:	50                   	push   eax
c0023247:	6a 0c                	push   0xc
c0023249:	57                   	push   edi
c002324a:	53                   	push   ebx
c002324b:	e8 78 fe ff ff       	call   c00230c8 <IDE::read(unsigned char, unsigned char)>
c0023250:	83 c4 10             	add    esp,0x10
c0023253:	4e                   	dec    esi
c0023254:	75 f0                	jne    c0023246 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023256:	5b                   	pop    ebx
c0023257:	5e                   	pop    esi
c0023258:	5f                   	pop    edi
c0023259:	c3                   	ret    

c002325a <IDE::open(int, int, void*)>:
c002325a:	55                   	push   ebp
c002325b:	57                   	push   edi
c002325c:	56                   	push   esi
c002325d:	53                   	push   ebx
c002325e:	83 ec 1c             	sub    esp,0x1c
c0023261:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023265:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c002326e:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023277:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002327e:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023285:	0f 85 b0 02 00 00    	jne    c002353b <IDE::open(int, int, void*)+0x2e1>
c002328b:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023291:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023295:	83 e0 7f             	and    eax,0x7f
c0023298:	3c 05                	cmp    al,0x5
c002329a:	74 04                	je     c00232a0 <IDE::open(int, int, void*)+0x46>
c002329c:	3c 0f                	cmp    al,0xf
c002329e:	75 32                	jne    c00232d2 <IDE::open(int, int, void*)+0x78>
c00232a0:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00232a6:	83 e0 fc             	and    eax,0xfffffffc
c00232a9:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00232b0:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c00232b6:	83 e0 fc             	and    eax,0xfffffffc
c00232b9:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00232c0:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00232c6:	83 e0 fc             	and    eax,0xfffffffc
c00232c9:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00232d0:	eb 14                	jmp    c00232e6 <IDE::open(int, int, void*)+0x8c>
c00232d2:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00232dc:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00232e6:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00232ed:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00232f4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00232f8:	89 c6                	mov    esi,eax
c00232fa:	bf f8 0c 00 00       	mov    edi,0xcf8
c00232ff:	c1 e6 10             	shl    esi,0x10
c0023302:	89 e8                	mov    eax,ebp
c0023304:	89 fa                	mov    edx,edi
c0023306:	c1 e0 0b             	shl    eax,0xb
c0023309:	09 f0                	or     eax,esi
c002330b:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023312:	c1 e6 08             	shl    esi,0x8
c0023315:	09 c6                	or     esi,eax
c0023317:	89 f0                	mov    eax,esi
c0023319:	0d 08 00 00 80       	or     eax,0x80000008
c002331e:	ef                   	out    dx,eax
c002331f:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023324:	89 ca                	mov    edx,ecx
c0023326:	ed                   	in     eax,dx
c0023327:	c1 e8 10             	shr    eax,0x10
c002332a:	3d ff ff 00 00       	cmp    eax,0xffff
c002332f:	0f 84 f5 00 00 00    	je     c002342a <IDE::open(int, int, void*)+0x1d0>
c0023335:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c002333b:	89 fa                	mov    edx,edi
c002333d:	89 f0                	mov    eax,esi
c002333f:	ef                   	out    dx,eax
c0023340:	b0 fe                	mov    al,0xfe
c0023342:	89 ca                	mov    edx,ecx
c0023344:	ee                   	out    dx,al
c0023345:	89 f0                	mov    eax,esi
c0023347:	89 fa                	mov    edx,edi
c0023349:	ef                   	out    dx,eax
c002334a:	89 ca                	mov    edx,ecx
c002334c:	ed                   	in     eax,dx
c002334d:	3c fe                	cmp    al,0xfe
c002334f:	0f 85 a9 00 00 00    	jne    c00233fe <IDE::open(int, int, void*)+0x1a4>
c0023355:	8b 15 c8 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5c8
c002335b:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023362:	74 33                	je     c0023397 <IDE::open(int, int, void*)+0x13d>
c0023364:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c002336a:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c002336e:	40                   	inc    eax
c002336f:	83 ec 0c             	sub    esp,0xc
c0023372:	0f b6 c0             	movzx  eax,al
c0023375:	50                   	push   eax
c0023376:	55                   	push   ebp
c0023377:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002337b:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023381:	51                   	push   ecx
c0023382:	e8 a7 4e ff ff       	call   c001822e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023387:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c002338c:	83 c4 1c             	add    esp,0x1c
c002338f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023395:	eb 0a                	jmp    c00233a1 <IDE::open(int, int, void*)+0x147>
c0023397:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00233a1:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00233a8:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00233af:	c1 e1 10             	shl    ecx,0x10
c00233b2:	c1 e0 08             	shl    eax,0x8
c00233b5:	bf f8 0c 00 00       	mov    edi,0xcf8
c00233ba:	09 c1                	or     ecx,eax
c00233bc:	89 fa                	mov    edx,edi
c00233be:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00233c5:	c1 e0 0b             	shl    eax,0xb
c00233c8:	09 c1                	or     ecx,eax
c00233ca:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00233d0:	89 c8                	mov    eax,ecx
c00233d2:	ef                   	out    dx,eax
c00233d3:	be fc 0c 00 00       	mov    esi,0xcfc
c00233d8:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00233de:	89 f2                	mov    edx,esi
c00233e0:	ee                   	out    dx,al
c00233e1:	89 c8                	mov    eax,ecx
c00233e3:	89 fa                	mov    edx,edi
c00233e5:	ef                   	out    dx,eax
c00233e6:	89 f2                	mov    edx,esi
c00233e8:	ed                   	in     eax,dx
c00233e9:	0f b6 c0             	movzx  eax,al
c00233ec:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00233f2:	74 46                	je     c002343a <IDE::open(int, int, void*)+0x1e0>
c00233f4:	83 ec 0c             	sub    esp,0xc
c00233f7:	68 60 cc 02 c0       	push   0xc002cc60
c00233fc:	eb 34                	jmp    c0023432 <IDE::open(int, int, void*)+0x1d8>
c00233fe:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023407:	75 17                	jne    c0023420 <IDE::open(int, int, void*)+0x1c6>
c0023409:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c002340e:	74 07                	je     c0023417 <IDE::open(int, int, void*)+0x1bd>
c0023410:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023415:	75 09                	jne    c0023420 <IDE::open(int, int, void*)+0x1c6>
c0023417:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002341e:	eb 1a                	jmp    c002343a <IDE::open(int, int, void*)+0x1e0>
c0023420:	83 ec 0c             	sub    esp,0xc
c0023423:	68 68 cc 02 c0       	push   0xc002cc68
c0023428:	eb 08                	jmp    c0023432 <IDE::open(int, int, void*)+0x1d8>
c002342a:	83 ec 0c             	sub    esp,0xc
c002342d:	68 99 cc 02 c0       	push   0xc002cc99
c0023432:	e8 9e 71 ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c0023437:	83 c4 10             	add    esp,0x10
c002343a:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023441:	79 1a                	jns    c002345d <IDE::open(int, int, void*)+0x203>
c0023443:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023449:	83 e0 fc             	and    eax,0xfffffffc
c002344c:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023453:	83 c0 08             	add    eax,0x8
c0023456:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c002345d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023463:	89 c2                	mov    edx,eax
c0023465:	83 e2 0f             	and    edx,0xf
c0023468:	66 83 fa 08          	cmp    dx,0x8
c002346c:	75 0a                	jne    c0023478 <IDE::open(int, int, void*)+0x21e>
c002346e:	83 e8 02             	sub    eax,0x2
c0023471:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023478:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c002347e:	89 c2                	mov    edx,eax
c0023480:	83 e2 0f             	and    edx,0xf
c0023483:	66 83 fa 08          	cmp    dx,0x8
c0023487:	75 0a                	jne    c0023493 <IDE::open(int, int, void*)+0x239>
c0023489:	83 e8 02             	sub    eax,0x2
c002348c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023493:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c002349a:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00234a1:	89 d0                	mov    eax,edx
c00234a3:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00234a6:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00234aa:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00234ae:	8d 4a 01             	lea    ecx,[edx+0x1]
c00234b1:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00234b6:	0f b6 c9             	movzx  ecx,cl
c00234b9:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00234c0:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00234c3:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00234c7:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00234cb:	8d 50 02             	lea    edx,[eax+0x2]
c00234ce:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00234d3:	0f b6 d2             	movzx  edx,dl
c00234d6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00234dc:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00234df:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00234e3:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00234e7:	8d 48 03             	lea    ecx,[eax+0x3]
c00234ea:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00234ef:	0f b6 c9             	movzx  ecx,cl
c00234f2:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00234f8:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00234fb:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00234ff:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023503:	8d 50 04             	lea    edx,[eax+0x4]
c0023506:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c002350c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023511:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023518:	66 85 f6             	test   si,si
c002351b:	74 3e                	je     c002355b <IDE::open(int, int, void*)+0x301>
c002351d:	0f b6 d2             	movzx  edx,dl
c0023520:	83 c0 05             	add    eax,0x5
c0023523:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023526:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002352a:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c002352e:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023534:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023539:	eb 20                	jmp    c002355b <IDE::open(int, int, void*)+0x301>
c002353b:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023545:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002354f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023556:	e9 02 ff ff ff       	jmp    c002345d <IDE::open(int, int, void*)+0x203>
c002355b:	52                   	push   edx
c002355c:	52                   	push   edx
c002355d:	6a 00                	push   0x0
c002355f:	53                   	push   ebx
c0023560:	e8 7d fa ff ff       	call   c0022fe2 <IDE::prepareInterrupt(unsigned char)>
c0023565:	59                   	pop    ecx
c0023566:	5e                   	pop    esi
c0023567:	6a 01                	push   0x1
c0023569:	53                   	push   ebx
c002356a:	e8 73 fa ff ff       	call   c0022fe2 <IDE::prepareInterrupt(unsigned char)>
c002356f:	83 c4 0c             	add    esp,0xc
c0023572:	6a 00                	push   0x0
c0023574:	6a 00                	push   0x0
c0023576:	53                   	push   ebx
c0023577:	e8 98 fc ff ff       	call   c0023214 <IDE::enableIRQs(unsigned char, bool)>
c002357c:	83 c4 0c             	add    esp,0xc
c002357f:	6a 00                	push   0x0
c0023581:	6a 01                	push   0x1
c0023583:	53                   	push   ebx
c0023584:	e8 8b fc ff ff       	call   c0023214 <IDE::enableIRQs(unsigned char, bool)>
c0023589:	83 c4 10             	add    esp,0x10
c002358c:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023593:	74 40                	je     c00235d5 <IDE::open(int, int, void*)+0x37b>
c0023595:	83 ec 0c             	sub    esp,0xc
c0023598:	68 c3 cc 02 c0       	push   0xc002ccc3
c002359d:	e8 92 f9 fe ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c00235a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00235a5:	6a 01                	push   0x1
c00235a7:	68 dc 31 02 c0       	push   0xc00231dc
c00235ac:	6a 0e                	push   0xe
c00235ae:	53                   	push   ebx
c00235af:	e8 2a 0d ff ff       	call   c00142de <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235b4:	83 c4 14             	add    esp,0x14
c00235b7:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00235bd:	53                   	push   ebx
c00235be:	6a 01                	push   0x1
c00235c0:	68 f8 31 02 c0       	push   0xc00231f8
c00235c5:	6a 0f                	push   0xf
c00235c7:	53                   	push   ebx
c00235c8:	e8 11 0d ff ff       	call   c00142de <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235cd:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00235d3:	eb 4a                	jmp    c002361f <IDE::open(int, int, void*)+0x3c5>
c00235d5:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00235df:	50                   	push   eax
c00235e0:	6a 0f                	push   0xf
c00235e2:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00235e8:	68 df cc 02 c0       	push   0xc002ccdf
c00235ed:	e8 42 f9 fe ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c00235f2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00235f5:	6a 00                	push   0x0
c00235f7:	68 dc 31 02 c0       	push   0xc00231dc
c00235fc:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023602:	53                   	push   ebx
c0023603:	e8 d6 0c ff ff       	call   c00142de <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023608:	83 c4 14             	add    esp,0x14
c002360b:	53                   	push   ebx
c002360c:	6a 00                	push   0x0
c002360e:	68 f8 31 02 c0       	push   0xc00231f8
c0023613:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023619:	53                   	push   ebx
c002361a:	e8 bf 0c ff ff       	call   c00142de <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002361f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023621:	83 c4 20             	add    esp,0x20
c0023624:	83 ec 0c             	sub    esp,0xc
c0023627:	53                   	push   ebx
c0023628:	ff 50 18             	call   DWORD PTR [eax+0x18]
c002362b:	83 c4 0c             	add    esp,0xc
c002362e:	6a 07                	push   0x7
c0023630:	6a 00                	push   0x0
c0023632:	53                   	push   ebx
c0023633:	e8 90 fa ff ff       	call   c00230c8 <IDE::read(unsigned char, unsigned char)>
c0023638:	83 c4 0c             	add    esp,0xc
c002363b:	6a 07                	push   0x7
c002363d:	6a 01                	push   0x1
c002363f:	53                   	push   ebx
c0023640:	e8 83 fa ff ff       	call   c00230c8 <IDE::read(unsigned char, unsigned char)>
c0023645:	83 c4 0c             	add    esp,0xc
c0023648:	6a 01                	push   0x1
c002364a:	6a 00                	push   0x0
c002364c:	53                   	push   ebx
c002364d:	e8 c2 fb ff ff       	call   c0023214 <IDE::enableIRQs(unsigned char, bool)>
c0023652:	83 c4 0c             	add    esp,0xc
c0023655:	6a 01                	push   0x1
c0023657:	6a 01                	push   0x1
c0023659:	53                   	push   ebx
c002365a:	e8 b5 fb ff ff       	call   c0023214 <IDE::enableIRQs(unsigned char, bool)>
c002365f:	83 c4 2c             	add    esp,0x2c
c0023662:	31 c0                	xor    eax,eax
c0023664:	5b                   	pop    ebx
c0023665:	5e                   	pop    esi
c0023666:	5f                   	pop    edi
c0023667:	5d                   	pop    ebp
c0023668:	c3                   	ret    
c0023669:	90                   	nop

c002366a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c002366a:	55                   	push   ebp
c002366b:	57                   	push   edi
c002366c:	56                   	push   esi
c002366d:	53                   	push   ebx
c002366e:	83 ec 1c             	sub    esp,0x1c
c0023671:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023675:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023679:	8d 50 f8             	lea    edx,[eax-0x8]
c002367c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023680:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023684:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023688:	80 fa 03             	cmp    dl,0x3
c002368b:	77 5d                	ja     c00236ea <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c002368d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023691:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023695:	0f b6 db             	movzx  ebx,bl
c0023698:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c002369b:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c002369f:	83 ca 80             	or     edx,0xffffff80
c00236a2:	0f b6 d2             	movzx  edx,dl
c00236a5:	52                   	push   edx
c00236a6:	6a 0c                	push   0xc
c00236a8:	53                   	push   ebx
c00236a9:	56                   	push   esi
c00236aa:	e8 59 f9 ff ff       	call   c0023008 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236af:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00236b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00236b8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00236bc:	0f b6 c0             	movzx  eax,al
c00236bf:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00236c3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00236c5:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00236ca:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00236ce:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00236d2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00236d6:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00236de:	83 c4 2c             	add    esp,0x2c
c00236e1:	5b                   	pop    ebx
c00236e2:	5e                   	pop    esi
c00236e3:	5f                   	pop    edi
c00236e4:	5d                   	pop    ebp
c00236e5:	e9 1e f9 ff ff       	jmp    c0023008 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236ea:	3c 07                	cmp    al,0x7
c00236ec:	77 10                	ja     c00236fe <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00236ee:	0f b6 db             	movzx  ebx,bl
c00236f1:	0f b6 d0             	movzx  edx,al
c00236f4:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00236fc:	eb 2d                	jmp    c002372b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00236fe:	3c 0d                	cmp    al,0xd
c0023700:	77 13                	ja     c0023715 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0023702:	0f b6 db             	movzx  ebx,bl
c0023705:	0f b6 c0             	movzx  eax,al
c0023708:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c002370f:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023713:	eb 16                	jmp    c002372b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023715:	3c 15                	cmp    al,0x15
c0023717:	77 14                	ja     c002372d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023719:	0f b6 db             	movzx  ebx,bl
c002371c:	0f b6 c0             	movzx  eax,al
c002371f:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023727:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c002372b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002372d:	83 c4 1c             	add    esp,0x1c
c0023730:	5b                   	pop    ebx
c0023731:	5e                   	pop    esi
c0023732:	5f                   	pop    edi
c0023733:	5d                   	pop    ebp
c0023734:	c3                   	ret    
c0023735:	90                   	nop

c0023736 <IDE::detect()>:
c0023736:	55                   	push   ebp
c0023737:	57                   	push   edi
c0023738:	56                   	push   esi
c0023739:	53                   	push   ebx
c002373a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023740:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023747:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c002374e:	0f 85 be 02 00 00    	jne    c0023a12 <IDE::detect()+0x2dc>
c0023754:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c002375b:	31 f6                	xor    esi,esi
c002375d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023765:	31 ed                	xor    ebp,ebp
c0023767:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002376b:	c1 e0 06             	shl    eax,0x6
c002376e:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023776:	89 e8                	mov    eax,ebp
c0023778:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002377c:	c1 e0 04             	shl    eax,0x4
c002377f:	83 c8 a0             	or     eax,0xffffffa0
c0023782:	0f b6 c0             	movzx  eax,al
c0023785:	50                   	push   eax
c0023786:	6a 06                	push   0x6
c0023788:	56                   	push   esi
c0023789:	53                   	push   ebx
c002378a:	e8 79 f8 ff ff       	call   c0023008 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002378f:	83 c4 0c             	add    esp,0xc
c0023792:	6a 0c                	push   0xc
c0023794:	56                   	push   esi
c0023795:	53                   	push   ebx
c0023796:	e8 2d f9 ff ff       	call   c00230c8 <IDE::read(unsigned char, unsigned char)>
c002379b:	83 c4 0c             	add    esp,0xc
c002379e:	6a 0c                	push   0xc
c00237a0:	56                   	push   esi
c00237a1:	53                   	push   ebx
c00237a2:	e8 21 f9 ff ff       	call   c00230c8 <IDE::read(unsigned char, unsigned char)>
c00237a7:	83 c4 0c             	add    esp,0xc
c00237aa:	6a 0c                	push   0xc
c00237ac:	56                   	push   esi
c00237ad:	53                   	push   ebx
c00237ae:	e8 15 f9 ff ff       	call   c00230c8 <IDE::read(unsigned char, unsigned char)>
c00237b3:	83 c4 0c             	add    esp,0xc
c00237b6:	6a 0c                	push   0xc
c00237b8:	56                   	push   esi
c00237b9:	53                   	push   ebx
c00237ba:	e8 09 f9 ff ff       	call   c00230c8 <IDE::read(unsigned char, unsigned char)>
c00237bf:	68 ec 00 00 00       	push   0xec
c00237c4:	6a 07                	push   0x7
c00237c6:	56                   	push   esi
c00237c7:	53                   	push   ebx
c00237c8:	e8 3b f8 ff ff       	call   c0023008 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00237cd:	83 c4 1c             	add    esp,0x1c
c00237d0:	6a 0c                	push   0xc
c00237d2:	56                   	push   esi
c00237d3:	53                   	push   ebx
c00237d4:	e8 ef f8 ff ff       	call   c00230c8 <IDE::read(unsigned char, unsigned char)>
c00237d9:	83 c4 0c             	add    esp,0xc
c00237dc:	6a 0c                	push   0xc
c00237de:	56                   	push   esi
c00237df:	53                   	push   ebx
c00237e0:	e8 e3 f8 ff ff       	call   c00230c8 <IDE::read(unsigned char, unsigned char)>
c00237e5:	83 c4 0c             	add    esp,0xc
c00237e8:	6a 0c                	push   0xc
c00237ea:	56                   	push   esi
c00237eb:	53                   	push   ebx
c00237ec:	e8 d7 f8 ff ff       	call   c00230c8 <IDE::read(unsigned char, unsigned char)>
c00237f1:	83 c4 0c             	add    esp,0xc
c00237f4:	6a 0c                	push   0xc
c00237f6:	56                   	push   esi
c00237f7:	53                   	push   ebx
c00237f8:	e8 cb f8 ff ff       	call   c00230c8 <IDE::read(unsigned char, unsigned char)>
c00237fd:	83 c4 0c             	add    esp,0xc
c0023800:	6a 0c                	push   0xc
c0023802:	56                   	push   esi
c0023803:	53                   	push   ebx
c0023804:	e8 bf f8 ff ff       	call   c00230c8 <IDE::read(unsigned char, unsigned char)>
c0023809:	83 c4 10             	add    esp,0x10
c002380c:	84 c0                	test   al,al
c002380e:	0f 84 8b 01 00 00    	je     c002399f <IDE::detect()+0x269>
c0023814:	31 ff                	xor    edi,edi
c0023816:	50                   	push   eax
c0023817:	6a 0c                	push   0xc
c0023819:	56                   	push   esi
c002381a:	53                   	push   ebx
c002381b:	e8 a8 f8 ff ff       	call   c00230c8 <IDE::read(unsigned char, unsigned char)>
c0023820:	83 c4 10             	add    esp,0x10
c0023823:	a8 01                	test   al,0x1
c0023825:	0f 85 8e 01 00 00    	jne    c00239b9 <IDE::detect()+0x283>
c002382b:	84 c0                	test   al,al
c002382d:	78 04                	js     c0023833 <IDE::detect()+0xfd>
c002382f:	a8 08                	test   al,0x8
c0023831:	75 27                	jne    c002385a <IDE::detect()+0x124>
c0023833:	47                   	inc    edi
c0023834:	81 ff 17 01 00 00    	cmp    edi,0x117
c002383a:	7e da                	jle    c0023816 <IDE::detect()+0xe0>
c002383c:	50                   	push   eax
c002383d:	50                   	push   eax
c002383e:	6a 00                	push   0x0
c0023840:	68 40 4b 4c 00       	push   0x4c4b40
c0023845:	e8 00 ab ff ff       	call   c001e34a <nanoSleep(unsigned long long)>
c002384a:	83 c4 10             	add    esp,0x10
c002384d:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0023853:	75 c1                	jne    c0023816 <IDE::detect()+0xe0>
c0023855:	e9 5f 01 00 00       	jmp    c00239b9 <IDE::detect()+0x283>
c002385a:	31 c9                	xor    ecx,ecx
c002385c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0023860:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023864:	83 ec 0c             	sub    esp,0xc
c0023867:	68 80 00 00 00       	push   0x80
c002386c:	57                   	push   edi
c002386d:	6a 00                	push   0x0
c002386f:	56                   	push   esi
c0023870:	53                   	push   ebx
c0023871:	e8 f4 fd ff ff       	call   c002366a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0023876:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c002387b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002387f:	89 d1                	mov    ecx,edx
c0023881:	c1 e0 06             	shl    eax,0x6
c0023884:	01 d8                	add    eax,ebx
c0023886:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002388d:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0023894:	89 f2                	mov    edx,esi
c0023896:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c002389c:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00238a0:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00238a6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00238aa:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00238b1:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00238b9:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00238c0:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00238c8:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00238ce:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00238d5:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00238db:	8d 54 24 58          	lea    edx,[esp+0x58]
c00238df:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00238e3:	83 c4 20             	add    esp,0x20
c00238e6:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00238e9:	83 c0 02             	add    eax,0x2
c00238ec:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00238f2:	83 c7 02             	add    edi,0x2
c00238f5:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00238f8:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00238fe:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0023902:	75 e2                	jne    c00238e6 <IDE::detect()+0x1b0>
c0023904:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023908:	c1 e0 06             	shl    eax,0x6
c002390b:	01 d8                	add    eax,ebx
c002390d:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0023913:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c002391a:	66 c1 ea 09          	shr    dx,0x9
c002391e:	83 e2 01             	and    edx,0x1
c0023921:	84 c9                	test   cl,cl
c0023923:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023929:	75 2f                	jne    c002395a <IDE::detect()+0x224>
c002392b:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0023931:	85 c0                	test   eax,eax
c0023933:	74 66                	je     c002399b <IDE::detect()+0x265>
c0023935:	50                   	push   eax
c0023936:	55                   	push   ebp
c0023937:	56                   	push   esi
c0023938:	68 fb cc 02 c0       	push   0xc002ccfb
c002393d:	e8 f2 f5 fe ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0023942:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023949:	e8 f2 be fe ff       	call   c000f840 <malloc>
c002394e:	89 c7                	mov    edi,eax
c0023950:	89 04 24             	mov    DWORD PTR [esp],eax
c0023953:	e8 78 06 00 00       	call   c0023fd0 <ATA::ATA()>
c0023958:	eb 28                	jmp    c0023982 <IDE::detect()+0x24c>
c002395a:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0023960:	55                   	push   ebp
c0023961:	56                   	push   esi
c0023962:	68 2a cd 02 c0       	push   0xc002cd2a
c0023967:	e8 c8 f5 fe ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c002396c:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023973:	e8 c8 be fe ff       	call   c000f840 <malloc>
c0023978:	89 c7                	mov    edi,eax
c002397a:	89 04 24             	mov    DWORD PTR [esp],eax
c002397d:	e8 8e 0c 00 00       	call   c0024610 <ATAPI::ATAPI()>
c0023982:	5a                   	pop    edx
c0023983:	59                   	pop    ecx
c0023984:	57                   	push   edi
c0023985:	53                   	push   ebx
c0023986:	e8 cf 09 ff ff       	call   c001435a <Device::addChild(Device*)>
c002398b:	8b 07                	mov    eax,DWORD PTR [edi]
c002398d:	53                   	push   ebx
c002398e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023992:	6a 00                	push   0x0
c0023994:	57                   	push   edi
c0023995:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023998:	83 c4 20             	add    esp,0x20
c002399b:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c002399f:	4d                   	dec    ebp
c00239a0:	74 0a                	je     c00239ac <IDE::detect()+0x276>
c00239a2:	bd 01 00 00 00       	mov    ebp,0x1
c00239a7:	e9 bb fd ff ff       	jmp    c0023767 <IDE::detect()+0x31>
c00239ac:	4e                   	dec    esi
c00239ad:	74 63                	je     c0023a12 <IDE::detect()+0x2dc>
c00239af:	be 01 00 00 00       	mov    esi,0x1
c00239b4:	e9 ac fd ff ff       	jmp    c0023765 <IDE::detect()+0x2f>
c00239b9:	50                   	push   eax
c00239ba:	6a 04                	push   0x4
c00239bc:	56                   	push   esi
c00239bd:	53                   	push   ebx
c00239be:	e8 05 f7 ff ff       	call   c00230c8 <IDE::read(unsigned char, unsigned char)>
c00239c3:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00239c7:	83 c4 0c             	add    esp,0xc
c00239ca:	6a 05                	push   0x5
c00239cc:	56                   	push   esi
c00239cd:	53                   	push   ebx
c00239ce:	e8 f5 f6 ff ff       	call   c00230c8 <IDE::read(unsigned char, unsigned char)>
c00239d3:	83 c4 10             	add    esp,0x10
c00239d6:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00239da:	80 fa 14             	cmp    dl,0x14
c00239dd:	75 04                	jne    c00239e3 <IDE::detect()+0x2ad>
c00239df:	3c eb                	cmp    al,0xeb
c00239e1:	eb 07                	jmp    c00239ea <IDE::detect()+0x2b4>
c00239e3:	3c 96                	cmp    al,0x96
c00239e5:	75 b8                	jne    c002399f <IDE::detect()+0x269>
c00239e7:	80 fa 69             	cmp    dl,0x69
c00239ea:	75 b3                	jne    c002399f <IDE::detect()+0x269>
c00239ec:	68 a1 00 00 00       	push   0xa1
c00239f1:	6a 07                	push   0x7
c00239f3:	56                   	push   esi
c00239f4:	53                   	push   ebx
c00239f5:	e8 0e f6 ff ff       	call   c0023008 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00239fa:	5f                   	pop    edi
c00239fb:	58                   	pop    eax
c00239fc:	6a 00                	push   0x0
c00239fe:	68 40 42 0f 00       	push   0xf4240
c0023a03:	e8 42 a9 ff ff       	call   c001e34a <nanoSleep(unsigned long long)>
c0023a08:	83 c4 10             	add    esp,0x10
c0023a0b:	b1 01                	mov    cl,0x1
c0023a0d:	e9 4a fe ff ff       	jmp    c002385c <IDE::detect()+0x126>
c0023a12:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023a18:	5b                   	pop    ebx
c0023a19:	5e                   	pop    esi
c0023a1a:	5f                   	pop    edi
c0023a1b:	5d                   	pop    ebp
c0023a1c:	c3                   	ret    
c0023a1d:	90                   	nop

c0023a1e <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023a1e:	55                   	push   ebp
c0023a1f:	57                   	push   edi
c0023a20:	56                   	push   esi
c0023a21:	53                   	push   ebx
c0023a22:	83 ec 1c             	sub    esp,0x1c
c0023a25:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023a29:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023a2d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023a31:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023a35:	88 c3                	mov    bl,al
c0023a37:	84 c0                	test   al,al
c0023a39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023a3d:	0f 84 67 01 00 00    	je     c0023baa <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0023a43:	83 ec 0c             	sub    esp,0xc
c0023a46:	68 5b cd 02 c0       	push   0xc002cd5b
c0023a4b:	e8 e4 f4 fe ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0023a50:	83 c4 10             	add    esp,0x10
c0023a53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023a57:	3c 01                	cmp    al,0x1
c0023a59:	75 17                	jne    c0023a72 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0023a5b:	83 ec 0c             	sub    esp,0xc
c0023a5e:	b3 13                	mov    bl,0x13
c0023a60:	68 67 cd 02 c0       	push   0xc002cd67
c0023a65:	e8 ca f4 fe ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0023a6a:	83 c4 10             	add    esp,0x10
c0023a6d:	e9 25 01 00 00       	jmp    c0023b97 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023a72:	3c 02                	cmp    al,0x2
c0023a74:	0f 85 ef 00 00 00    	jne    c0023b69 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0023a7a:	d1 e6                	shl    esi,1
c0023a7c:	09 ee                	or     esi,ebp
c0023a7e:	52                   	push   edx
c0023a7f:	89 f0                	mov    eax,esi
c0023a81:	6a 01                	push   0x1
c0023a83:	0f b6 f0             	movzx  esi,al
c0023a86:	c1 e6 06             	shl    esi,0x6
c0023a89:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023a91:	50                   	push   eax
c0023a92:	57                   	push   edi
c0023a93:	e8 30 f6 ff ff       	call   c00230c8 <IDE::read(unsigned char, unsigned char)>
c0023a98:	83 c4 10             	add    esp,0x10
c0023a9b:	89 c6                	mov    esi,eax
c0023a9d:	a8 01                	test   al,0x1
c0023a9f:	74 12                	je     c0023ab3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0023aa1:	83 ec 0c             	sub    esp,0xc
c0023aa4:	b3 07                	mov    bl,0x7
c0023aa6:	68 7c cd 02 c0       	push   0xc002cd7c
c0023aab:	e8 84 f4 fe ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0023ab0:	83 c4 10             	add    esp,0x10
c0023ab3:	f7 c6 02 00 00 00    	test   esi,0x2
c0023ab9:	74 12                	je     c0023acd <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0023abb:	83 ec 0c             	sub    esp,0xc
c0023abe:	b3 03                	mov    bl,0x3
c0023ac0:	68 9a cd 02 c0       	push   0xc002cd9a
c0023ac5:	e8 6a f4 fe ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0023aca:	83 c4 10             	add    esp,0x10
c0023acd:	f7 c6 04 00 00 00    	test   esi,0x4
c0023ad3:	74 12                	je     c0023ae7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0023ad5:	83 ec 0c             	sub    esp,0xc
c0023ad8:	b3 14                	mov    bl,0x14
c0023ada:	68 ba cd 02 c0       	push   0xc002cdba
c0023adf:	e8 50 f4 fe ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0023ae4:	83 c4 10             	add    esp,0x10
c0023ae7:	f7 c6 08 00 00 00    	test   esi,0x8
c0023aed:	74 12                	je     c0023b01 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0023aef:	83 ec 0c             	sub    esp,0xc
c0023af2:	b3 03                	mov    bl,0x3
c0023af4:	68 9a cd 02 c0       	push   0xc002cd9a
c0023af9:	e8 36 f4 fe ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0023afe:	83 c4 10             	add    esp,0x10
c0023b01:	f7 c6 10 00 00 00    	test   esi,0x10
c0023b07:	74 12                	je     c0023b1b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0023b09:	83 ec 0c             	sub    esp,0xc
c0023b0c:	b3 15                	mov    bl,0x15
c0023b0e:	68 d2 cd 02 c0       	push   0xc002cdd2
c0023b13:	e8 1c f4 fe ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0023b18:	83 c4 10             	add    esp,0x10
c0023b1b:	f7 c6 20 00 00 00    	test   esi,0x20
c0023b21:	74 12                	je     c0023b35 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0023b23:	83 ec 0c             	sub    esp,0xc
c0023b26:	b3 03                	mov    bl,0x3
c0023b28:	68 9a cd 02 c0       	push   0xc002cd9a
c0023b2d:	e8 02 f4 fe ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0023b32:	83 c4 10             	add    esp,0x10
c0023b35:	f7 c6 40 00 00 00    	test   esi,0x40
c0023b3b:	74 12                	je     c0023b4f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0023b3d:	83 ec 0c             	sub    esp,0xc
c0023b40:	b3 16                	mov    bl,0x16
c0023b42:	68 ec cd 02 c0       	push   0xc002cdec
c0023b47:	e8 e8 f3 fe ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0023b4c:	83 c4 10             	add    esp,0x10
c0023b4f:	89 f0                	mov    eax,esi
c0023b51:	84 c0                	test   al,al
c0023b53:	79 42                	jns    c0023b97 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b55:	83 ec 0c             	sub    esp,0xc
c0023b58:	b3 0d                	mov    bl,0xd
c0023b5a:	68 0d ce 02 c0       	push   0xc002ce0d
c0023b5f:	e8 d0 f3 fe ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0023b64:	83 c4 10             	add    esp,0x10
c0023b67:	eb 2e                	jmp    c0023b97 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b69:	3c 03                	cmp    al,0x3
c0023b6b:	75 14                	jne    c0023b81 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0023b6d:	83 ec 0c             	sub    esp,0xc
c0023b70:	b3 17                	mov    bl,0x17
c0023b72:	68 21 ce 02 c0       	push   0xc002ce21
c0023b77:	e8 b8 f3 fe ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0023b7c:	83 c4 10             	add    esp,0x10
c0023b7f:	eb 16                	jmp    c0023b97 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b81:	3c 04                	cmp    al,0x4
c0023b83:	75 12                	jne    c0023b97 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b85:	83 ec 0c             	sub    esp,0xc
c0023b88:	b3 08                	mov    bl,0x8
c0023b8a:	68 37 ce 02 c0       	push   0xc002ce37
c0023b8f:	e8 a0 f3 fe ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0023b94:	83 c4 10             	add    esp,0x10
c0023b97:	50                   	push   eax
c0023b98:	50                   	push   eax
c0023b99:	0f b6 c3             	movzx  eax,bl
c0023b9c:	50                   	push   eax
c0023b9d:	68 4f ce 02 c0       	push   0xc002ce4f
c0023ba2:	e8 8d f3 fe ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0023ba7:	83 c4 10             	add    esp,0x10
c0023baa:	83 c4 1c             	add    esp,0x1c
c0023bad:	88 d8                	mov    al,bl
c0023baf:	5b                   	pop    ebx
c0023bb0:	5e                   	pop    esi
c0023bb1:	5f                   	pop    edi
c0023bb2:	5d                   	pop    ebp
c0023bb3:	c3                   	ret    

c0023bb4 <IDE::polling(unsigned char, unsigned int)>:
c0023bb4:	57                   	push   edi
c0023bb5:	56                   	push   esi
c0023bb6:	53                   	push   ebx
c0023bb7:	bb 04 00 00 00       	mov    ebx,0x4
c0023bbc:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023bc0:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023bc5:	52                   	push   edx
c0023bc6:	6a 0c                	push   0xc
c0023bc8:	56                   	push   esi
c0023bc9:	57                   	push   edi
c0023bca:	e8 f9 f4 ff ff       	call   c00230c8 <IDE::read(unsigned char, unsigned char)>
c0023bcf:	83 c4 10             	add    esp,0x10
c0023bd2:	4b                   	dec    ebx
c0023bd3:	75 f0                	jne    c0023bc5 <IDE::polling(unsigned char, unsigned int)+0x11>
c0023bd5:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023bda:	50                   	push   eax
c0023bdb:	6a 0c                	push   0xc
c0023bdd:	56                   	push   esi
c0023bde:	57                   	push   edi
c0023bdf:	e8 e4 f4 ff ff       	call   c00230c8 <IDE::read(unsigned char, unsigned char)>
c0023be4:	83 c4 10             	add    esp,0x10
c0023be7:	a8 01                	test   al,0x1
c0023be9:	74 12                	je     c0023bfd <IDE::polling(unsigned char, unsigned int)+0x49>
c0023beb:	83 ec 0c             	sub    esp,0xc
c0023bee:	68 69 ce 02 c0       	push   0xc002ce69
c0023bf3:	e8 3c f3 fe ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0023bf8:	83 c4 10             	add    esp,0x10
c0023bfb:	eb 17                	jmp    c0023c14 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023bfd:	a8 20                	test   al,0x20
c0023bff:	75 0f                	jne    c0023c10 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0023c01:	4b                   	dec    ebx
c0023c02:	74 10                	je     c0023c14 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023c04:	84 c0                	test   al,al
c0023c06:	78 d2                	js     c0023bda <IDE::polling(unsigned char, unsigned int)+0x26>
c0023c08:	a8 08                	test   al,0x8
c0023c0a:	74 ce                	je     c0023bda <IDE::polling(unsigned char, unsigned int)+0x26>
c0023c0c:	31 c0                	xor    eax,eax
c0023c0e:	eb 06                	jmp    c0023c16 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023c10:	b0 01                	mov    al,0x1
c0023c12:	eb 02                	jmp    c0023c16 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023c14:	b0 02                	mov    al,0x2
c0023c16:	5b                   	pop    ebx
c0023c17:	5e                   	pop    esi
c0023c18:	5f                   	pop    edi
c0023c19:	c3                   	ret    

c0023c1a <SATABus::close(int, int, void*)>:
c0023c1a:	31 c0                	xor    eax,eax
c0023c1c:	c3                   	ret    
c0023c1d:	90                   	nop

c0023c1e <SATABus::detect()>:
c0023c1e:	c3                   	ret    
c0023c1f:	90                   	nop

c0023c20 <SATABus::SATABus()>:
c0023c20:	83 ec 0c             	sub    esp,0xc
c0023c23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c27:	83 ec 08             	sub    esp,0x8
c0023c2a:	68 ac ce 02 c0       	push   0xc002ceac
c0023c2f:	50                   	push   eax
c0023c30:	e8 b1 0a ff ff       	call   c00146e6 <HardDiskController::HardDiskController(char const*)>
c0023c35:	83 c4 10             	add    esp,0x10
c0023c38:	ba 68 cf 02 c0       	mov    edx,0xc002cf68
c0023c3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c41:	89 10                	mov    DWORD PTR [eax],edx
c0023c43:	83 ec 0c             	sub    esp,0xc
c0023c46:	6a 50                	push   0x50
c0023c48:	e8 c4 c3 fe ff       	call   c0010011 <Phys::allocateContiguousPages(int)>
c0023c4d:	83 c4 10             	add    esp,0x10
c0023c50:	89 c2                	mov    edx,eax
c0023c52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c56:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023c5c:	83 ec 0c             	sub    esp,0xc
c0023c5f:	6a 50                	push   0x50
c0023c61:	e8 25 df fe ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c0023c66:	83 c4 10             	add    esp,0x10
c0023c69:	89 c2                	mov    edx,eax
c0023c6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c6f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023c75:	e8 ac e1 fe ff       	call   c0011e26 <Virt::getAKernelVAS()>
c0023c7a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023c7e:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023c84:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023c88:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023c8e:	83 ec 0c             	sub    esp,0xc
c0023c91:	6a 03                	push   0x3
c0023c93:	6a 50                	push   0x50
c0023c95:	51                   	push   ecx
c0023c96:	52                   	push   edx
c0023c97:	50                   	push   eax
c0023c98:	e8 b9 e9 fe ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023c9d:	83 c4 20             	add    esp,0x20
c0023ca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ca4:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0023caa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cae:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023cb4:	83 ec 04             	sub    esp,0x4
c0023cb7:	52                   	push   edx
c0023cb8:	50                   	push   eax
c0023cb9:	68 d0 ce 02 c0       	push   0xc002ced0
c0023cbe:	e8 71 f2 fe ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0023cc3:	83 c4 10             	add    esp,0x10
c0023cc6:	90                   	nop
c0023cc7:	83 c4 0c             	add    esp,0xc
c0023cca:	c3                   	ret    
c0023ccb:	90                   	nop

c0023ccc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023ccc:	83 ec 0c             	sub    esp,0xc
c0023ccf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023cd3:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023cd6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023cd9:	09 c2                	or     edx,eax
c0023cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cdf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023ce5:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023ce7:	31 c0                	xor    eax,eax
c0023ce9:	c1 e9 08             	shr    ecx,0x8
c0023cec:	83 e1 0f             	and    ecx,0xf
c0023cef:	39 c8                	cmp    eax,ecx
c0023cf1:	74 0a                	je     c0023cfd <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023cf3:	f6 c2 01             	test   dl,0x1
c0023cf6:	74 18                	je     c0023d10 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023cf8:	d1 ea                	shr    edx,1
c0023cfa:	40                   	inc    eax
c0023cfb:	eb f2                	jmp    c0023cef <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023cfd:	83 ec 0c             	sub    esp,0xc
c0023d00:	68 f4 ce 02 c0       	push   0xc002cef4
c0023d05:	e8 cb 68 ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c0023d0a:	83 c4 10             	add    esp,0x10
c0023d0d:	83 c8 ff             	or     eax,0xffffffff
c0023d10:	83 c4 0c             	add    esp,0xc
c0023d13:	c3                   	ret    

c0023d14 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023d14:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023d18:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023d1b:	89 c2                	mov    edx,eax
c0023d1d:	c1 ea 08             	shr    edx,0x8
c0023d20:	83 e2 0f             	and    edx,0xf
c0023d23:	fe ca                	dec    dl
c0023d25:	75 31                	jne    c0023d58 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023d27:	83 e0 0f             	and    eax,0xf
c0023d2a:	3c 03                	cmp    al,0x3
c0023d2c:	75 2a                	jne    c0023d58 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023d2e:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023d31:	b8 02 00 00 00       	mov    eax,0x2
c0023d36:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023d3c:	74 1c                	je     c0023d5a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023d3e:	b8 04 00 00 00       	mov    eax,0x4
c0023d43:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023d49:	74 0f                	je     c0023d5a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023d4b:	31 c0                	xor    eax,eax
c0023d4d:	83 fa 03             	cmp    edx,0x3
c0023d50:	0f 94 c0             	sete   al
c0023d53:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023d57:	c3                   	ret    
c0023d58:	31 c0                	xor    eax,eax
c0023d5a:	c3                   	ret    
c0023d5b:	90                   	nop

c0023d5c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023d5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023d60:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d63:	0f ba e2 0f          	bt     edx,0xf
c0023d67:	72 f7                	jb     c0023d60 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023d69:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d6c:	83 ca 10             	or     edx,0x10
c0023d6f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d72:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d75:	83 ca 01             	or     edx,0x1
c0023d78:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d7b:	c3                   	ret    

c0023d7c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023d7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023d80:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d83:	83 e2 fe             	and    edx,0xfffffffe
c0023d86:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d89:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d8c:	83 e2 ef             	and    edx,0xffffffef
c0023d8f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d92:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d95:	0f ba e2 0e          	bt     edx,0xe
c0023d99:	72 f7                	jb     c0023d92 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023d9b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d9e:	0f ba e2 0f          	bt     edx,0xf
c0023da2:	72 ee                	jb     c0023d92 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023da4:	c3                   	ret    
c0023da5:	90                   	nop

c0023da6 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023da6:	55                   	push   ebp
c0023da7:	57                   	push   edi
c0023da8:	56                   	push   esi
c0023da9:	53                   	push   ebx
c0023daa:	83 ec 1c             	sub    esp,0x1c
c0023dad:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023db1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023db5:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023db9:	53                   	push   ebx
c0023dba:	89 fd                	mov    ebp,edi
c0023dbc:	56                   	push   esi
c0023dbd:	c1 e5 0a             	shl    ebp,0xa
c0023dc0:	e8 b7 ff ff ff       	call   c0023d7c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023dc5:	83 ec 0c             	sub    esp,0xc
c0023dc8:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023dce:	01 e8                	add    eax,ebp
c0023dd0:	89 03                	mov    DWORD PTR [ebx],eax
c0023dd2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023dd4:	68 00 04 00 00       	push   0x400
c0023dd9:	6a 00                	push   0x0
c0023ddb:	50                   	push   eax
c0023ddc:	e8 97 c9 fd ff       	call   c0000778 <memset>
c0023de1:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023de7:	89 fa                	mov    edx,edi
c0023de9:	01 e8                	add    eax,ebp
c0023deb:	c1 e7 0d             	shl    edi,0xd
c0023dee:	89 03                	mov    DWORD PTR [ebx],eax
c0023df0:	c1 e2 08             	shl    edx,0x8
c0023df3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023dfa:	81 c2 00 80 00 00    	add    edx,0x8000
c0023e00:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023e04:	89 d0                	mov    eax,edx
c0023e06:	83 c4 1c             	add    esp,0x1c
c0023e09:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023e0f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023e12:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023e15:	68 00 01 00 00       	push   0x100
c0023e1a:	6a 00                	push   0x0
c0023e1c:	50                   	push   eax
c0023e1d:	e8 56 c9 fd ff       	call   c0000778 <memset>
c0023e22:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023e26:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023e2c:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023e32:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023e36:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023e39:	83 c4 10             	add    esp,0x10
c0023e3c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023e43:	31 ff                	xor    edi,edi
c0023e45:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023e4b:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023e51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023e55:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023e5b:	83 c5 20             	add    ebp,0x20
c0023e5e:	01 f8                	add    eax,edi
c0023e60:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023e63:	52                   	push   edx
c0023e64:	68 00 01 00 00       	push   0x100
c0023e69:	6a 00                	push   0x0
c0023e6b:	50                   	push   eax
c0023e6c:	e8 07 c9 fd ff       	call   c0000778 <memset>
c0023e71:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023e75:	83 c4 10             	add    esp,0x10
c0023e78:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023e7e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023e85:	01 f8                	add    eax,edi
c0023e87:	81 c7 00 01 00 00    	add    edi,0x100
c0023e8d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023e90:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023e96:	75 b3                	jne    c0023e4b <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023e98:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023e9c:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023ea0:	83 c4 1c             	add    esp,0x1c
c0023ea3:	5b                   	pop    ebx
c0023ea4:	5e                   	pop    esi
c0023ea5:	5f                   	pop    edi
c0023ea6:	5d                   	pop    ebp
c0023ea7:	e9 b0 fe ff ff       	jmp    c0023d5c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023eac <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023eac:	55                   	push   ebp
c0023ead:	57                   	push   edi
c0023eae:	56                   	push   esi
c0023eaf:	53                   	push   ebx
c0023eb0:	31 db                	xor    ebx,ebx
c0023eb2:	83 ec 0c             	sub    esp,0xc
c0023eb5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023eb9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023ebd:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023ec0:	f7 c7 01 00 00 00    	test   edi,0x1
c0023ec6:	0f 84 aa 00 00 00    	je     c0023f76 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023ecc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023ed0:	89 d8                	mov    eax,ebx
c0023ed2:	c1 e0 07             	shl    eax,0x7
c0023ed5:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023edc:	55                   	push   ebp
c0023edd:	56                   	push   esi
c0023ede:	e8 31 fe ff ff       	call   c0023d14 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023ee3:	5a                   	pop    edx
c0023ee4:	83 f8 01             	cmp    eax,0x1
c0023ee7:	59                   	pop    ecx
c0023ee8:	75 30                	jne    c0023f1a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0023eea:	50                   	push   eax
c0023eeb:	50                   	push   eax
c0023eec:	53                   	push   ebx
c0023eed:	68 19 cf 02 c0       	push   0xc002cf19
c0023ef2:	e8 3d f0 fe ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0023ef7:	83 c4 0c             	add    esp,0xc
c0023efa:	53                   	push   ebx
c0023efb:	55                   	push   ebp
c0023efc:	56                   	push   esi
c0023efd:	e8 a4 fe ff ff       	call   c0023da6 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023f02:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023f09:	e8 32 b9 fe ff       	call   c000f840 <malloc>
c0023f0e:	89 c5                	mov    ebp,eax
c0023f10:	89 04 24             	mov    DWORD PTR [esp],eax
c0023f13:	e8 60 0d 00 00       	call   c0024c78 <SATA::SATA()>
c0023f18:	eb 33                	jmp    c0023f4d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0023f1a:	83 f8 04             	cmp    eax,0x4
c0023f1d:	75 47                	jne    c0023f66 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0023f1f:	50                   	push   eax
c0023f20:	50                   	push   eax
c0023f21:	53                   	push   ebx
c0023f22:	68 30 cf 02 c0       	push   0xc002cf30
c0023f27:	e8 08 f0 fe ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0023f2c:	83 c4 0c             	add    esp,0xc
c0023f2f:	53                   	push   ebx
c0023f30:	55                   	push   ebp
c0023f31:	56                   	push   esi
c0023f32:	e8 6f fe ff ff       	call   c0023da6 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023f37:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023f3e:	e8 fd b8 fe ff       	call   c000f840 <malloc>
c0023f43:	89 c5                	mov    ebp,eax
c0023f45:	89 04 24             	mov    DWORD PTR [esp],eax
c0023f48:	e8 d7 10 00 00       	call   c0025024 <SATAPI::SATAPI()>
c0023f4d:	5a                   	pop    edx
c0023f4e:	59                   	pop    ecx
c0023f4f:	55                   	push   ebp
c0023f50:	56                   	push   esi
c0023f51:	e8 04 04 ff ff       	call   c001435a <Device::addChild(Device*)>
c0023f56:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023f59:	56                   	push   esi
c0023f5a:	6a 00                	push   0x0
c0023f5c:	53                   	push   ebx
c0023f5d:	55                   	push   ebp
c0023f5e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023f61:	83 c4 20             	add    esp,0x20
c0023f64:	eb 10                	jmp    c0023f76 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023f66:	50                   	push   eax
c0023f67:	50                   	push   eax
c0023f68:	53                   	push   ebx
c0023f69:	68 49 cf 02 c0       	push   0xc002cf49
c0023f6e:	e8 c1 ef fe ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0023f73:	83 c4 10             	add    esp,0x10
c0023f76:	d1 ef                	shr    edi,1
c0023f78:	43                   	inc    ebx
c0023f79:	83 fb 20             	cmp    ebx,0x20
c0023f7c:	0f 85 3e ff ff ff    	jne    c0023ec0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023f82:	83 c4 0c             	add    esp,0xc
c0023f85:	5b                   	pop    ebx
c0023f86:	5e                   	pop    esi
c0023f87:	5f                   	pop    edi
c0023f88:	5d                   	pop    ebp
c0023f89:	c3                   	ret    

c0023f8a <SATABus::open(int, int, void*)>:
c0023f8a:	83 ec 14             	sub    esp,0x14
c0023f8d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023f91:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023f97:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023f9d:	52                   	push   edx
c0023f9e:	50                   	push   eax
c0023f9f:	e8 08 ff ff ff       	call   c0023eac <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023fa4:	31 c0                	xor    eax,eax
c0023fa6:	83 c4 1c             	add    esp,0x1c
c0023fa9:	c3                   	ret    

c0023faa <ATA::close(int, int, void*)>:
c0023faa:	83 ec 0c             	sub    esp,0xc
c0023fad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023fb1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023fb7:	85 c0                	test   eax,eax
c0023fb9:	74 0c                	je     c0023fc7 <ATA::close(int, int, void*)+0x1d>
c0023fbb:	83 ec 0c             	sub    esp,0xc
c0023fbe:	8b 10                	mov    edx,DWORD PTR [eax]
c0023fc0:	50                   	push   eax
c0023fc1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023fc4:	83 c4 10             	add    esp,0x10
c0023fc7:	31 c0                	xor    eax,eax
c0023fc9:	83 c4 0c             	add    esp,0xc
c0023fcc:	c3                   	ret    
c0023fcd:	90                   	nop

c0023fce <ATA::powerSaving(PowerSavingLevel)>:
c0023fce:	c3                   	ret    
c0023fcf:	90                   	nop

c0023fd0 <ATA::ATA()>:
c0023fd0:	83 ec 0c             	sub    esp,0xc
c0023fd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023fd7:	83 ec 04             	sub    esp,0x4
c0023fda:	68 00 02 00 00       	push   0x200
c0023fdf:	68 31 d0 02 c0       	push   0xc002d031
c0023fe4:	50                   	push   eax
c0023fe5:	e8 94 07 ff ff       	call   c001477e <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023fea:	83 c4 10             	add    esp,0x10
c0023fed:	ba b4 cf 02 c0       	mov    edx,0xc002cfb4
c0023ff2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ff6:	89 10                	mov    DWORD PTR [eax],edx
c0023ff8:	90                   	nop
c0023ff9:	83 c4 0c             	add    esp,0xc
c0023ffc:	c3                   	ret    
c0023ffd:	90                   	nop

c0023ffe <ATA::flush(bool)>:
c0023ffe:	53                   	push   ebx
c0023fff:	83 ec 08             	sub    esp,0x8
c0024002:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0024007:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002400b:	19 c0                	sbb    eax,eax
c002400d:	83 e0 fd             	and    eax,0xfffffffd
c0024010:	05 ea 00 00 00       	add    eax,0xea
c0024015:	50                   	push   eax
c0024016:	6a 07                	push   0x7
c0024018:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002401f:	50                   	push   eax
c0024020:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024026:	e8 dd ef ff ff       	call   c0023008 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002402b:	83 c4 0c             	add    esp,0xc
c002402e:	6a 00                	push   0x0
c0024030:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024037:	50                   	push   eax
c0024038:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002403e:	e8 71 fb ff ff       	call   c0023bb4 <IDE::polling(unsigned char, unsigned int)>
c0024043:	83 c4 18             	add    esp,0x18
c0024046:	5b                   	pop    ebx
c0024047:	c3                   	ret    

c0024048 <ATA::readyForCommand()>:
c0024048:	56                   	push   esi
c0024049:	53                   	push   ebx
c002404a:	31 db                	xor    ebx,ebx
c002404c:	50                   	push   eax
c002404d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024051:	50                   	push   eax
c0024052:	6a 0c                	push   0xc
c0024054:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002405b:	50                   	push   eax
c002405c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024062:	e8 61 f0 ff ff       	call   c00230c8 <IDE::read(unsigned char, unsigned char)>
c0024067:	83 c4 10             	add    esp,0x10
c002406a:	a8 88                	test   al,0x88
c002406c:	74 23                	je     c0024091 <ATA::readyForCommand()+0x49>
c002406e:	43                   	inc    ebx
c002406f:	83 fb 63             	cmp    ebx,0x63
c0024072:	7e dd                	jle    c0024051 <ATA::readyForCommand()+0x9>
c0024074:	51                   	push   ecx
c0024075:	51                   	push   ecx
c0024076:	6a 00                	push   0x0
c0024078:	68 40 42 0f 00       	push   0xf4240
c002407d:	e8 c8 a2 ff ff       	call   c001e34a <nanoSleep(unsigned long long)>
c0024082:	83 c4 10             	add    esp,0x10
c0024085:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002408b:	75 c4                	jne    c0024051 <ATA::readyForCommand()+0x9>
c002408d:	31 c0                	xor    eax,eax
c002408f:	eb 02                	jmp    c0024093 <ATA::readyForCommand()+0x4b>
c0024091:	b0 01                	mov    al,0x1
c0024093:	5a                   	pop    edx
c0024094:	5b                   	pop    ebx
c0024095:	5e                   	pop    esi
c0024096:	c3                   	ret    
c0024097:	90                   	nop

c0024098 <ATA::access(unsigned long long, int, void*, bool)>:
c0024098:	55                   	push   ebp
c0024099:	57                   	push   edi
c002409a:	56                   	push   esi
c002409b:	53                   	push   ebx
c002409c:	83 ec 2c             	sub    esp,0x2c
c002409f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00240a3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00240a7:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00240ab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00240af:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00240b3:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00240b7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00240bb:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00240c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00240c5:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00240cb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00240cf:	c1 e0 06             	shl    eax,0x6
c00240d2:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c00240da:	74 5d                	je     c0024139 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c00240dc:	89 fa                	mov    edx,edi
c00240de:	89 f0                	mov    eax,esi
c00240e0:	0f ac d0 1c          	shrd   eax,edx,0x1c
c00240e4:	c1 ea 1c             	shr    edx,0x1c
c00240e7:	89 d1                	mov    ecx,edx
c00240e9:	09 c1                	or     ecx,eax
c00240eb:	74 25                	je     c0024112 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c00240ed:	31 ed                	xor    ebp,ebp
c00240ef:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c00240f6:	89 fa                	mov    edx,edi
c00240f8:	89 f0                	mov    eax,esi
c00240fa:	0f ad d0             	shrd   eax,edx,cl
c00240fd:	d3 ea                	shr    edx,cl
c00240ff:	f6 c1 20             	test   cl,0x20
c0024102:	74 02                	je     c0024106 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0024104:	89 d0                	mov    eax,edx
c0024106:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c002410a:	45                   	inc    ebp
c002410b:	83 fd 06             	cmp    ebp,0x6
c002410e:	75 df                	jne    c00240ef <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0024110:	eb 76                	jmp    c0024188 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0024112:	89 f0                	mov    eax,esi
c0024114:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0024119:	89 fa                	mov    edx,edi
c002411b:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024122:	0f ac d0 10          	shrd   eax,edx,0x10
c0024126:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002412b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002412f:	c1 ee 18             	shr    esi,0x18
c0024132:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0024137:	eb 56                	jmp    c002418f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024139:	6a 00                	push   0x0
c002413b:	6a 3f                	push   0x3f
c002413d:	57                   	push   edi
c002413e:	56                   	push   esi
c002413f:	e8 98 29 00 00       	call   c0026adc <__umoddi3>
c0024144:	83 c4 10             	add    esp,0x10
c0024147:	40                   	inc    eax
c0024148:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c002414c:	6a 00                	push   0x0
c002414e:	68 f0 03 00 00       	push   0x3f0
c0024153:	57                   	push   edi
c0024154:	56                   	push   esi
c0024155:	e8 82 28 00 00       	call   c00269dc <__udivdi3>
c002415a:	83 c4 10             	add    esp,0x10
c002415d:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0024162:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024169:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002416e:	6a 00                	push   0x0
c0024170:	6a 3f                	push   0x3f
c0024172:	57                   	push   edi
c0024173:	56                   	push   esi
c0024174:	e8 63 28 00 00       	call   c00269dc <__udivdi3>
c0024179:	83 c4 10             	add    esp,0x10
c002417c:	89 c6                	mov    esi,eax
c002417e:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0024183:	83 e6 0f             	and    esi,0xf
c0024186:	eb 07                	jmp    c002418f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024188:	31 f6                	xor    esi,esi
c002418a:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c002418f:	bf 01 00 00 00       	mov    edi,0x1
c0024194:	50                   	push   eax
c0024195:	6a 00                	push   0x0
c0024197:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002419e:	50                   	push   eax
c002419f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00241a3:	e8 6c f0 ff ff       	call   c0023214 <IDE::enableIRQs(unsigned char, bool)>
c00241a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00241ab:	e8 98 fe ff ff       	call   c0024048 <ATA::readyForCommand()>
c00241b0:	83 c4 10             	add    esp,0x10
c00241b3:	84 c0                	test   al,al
c00241b5:	0f 84 5a 02 00 00    	je     c0024415 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c00241bb:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00241c1:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00241c7:	c1 e0 04             	shl    eax,0x4
c00241ca:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c00241d1:	09 c6                	or     esi,eax
c00241d3:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c00241d8:	75 05                	jne    c00241df <ATA::access(unsigned long long, int, void*, bool)+0x147>
c00241da:	83 ce a0             	or     esi,0xffffffa0
c00241dd:	eb 03                	jmp    c00241e2 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c00241df:	83 ce e0             	or     esi,0xffffffe0
c00241e2:	89 f0                	mov    eax,esi
c00241e4:	0f b6 f0             	movzx  esi,al
c00241e7:	56                   	push   esi
c00241e8:	6a 06                	push   0x6
c00241ea:	51                   	push   ecx
c00241eb:	52                   	push   edx
c00241ec:	e8 17 ee ff ff       	call   c0023008 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241f1:	83 c4 10             	add    esp,0x10
c00241f4:	6a 00                	push   0x0
c00241f6:	6a 01                	push   0x1
c00241f8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241ff:	50                   	push   eax
c0024200:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024206:	e8 fd ed ff ff       	call   c0023008 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002420b:	83 c4 10             	add    esp,0x10
c002420e:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024213:	75 6e                	jne    c0024283 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0024215:	6a 00                	push   0x0
c0024217:	6a 08                	push   0x8
c0024219:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024220:	50                   	push   eax
c0024221:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024227:	e8 dc ed ff ff       	call   c0023008 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002422c:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0024231:	50                   	push   eax
c0024232:	6a 09                	push   0x9
c0024234:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002423b:	50                   	push   eax
c002423c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024242:	e8 c1 ed ff ff       	call   c0023008 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024247:	83 c4 20             	add    esp,0x20
c002424a:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c002424f:	50                   	push   eax
c0024250:	6a 0a                	push   0xa
c0024252:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024259:	50                   	push   eax
c002425a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024260:	e8 a3 ed ff ff       	call   c0023008 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024265:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c002426a:	50                   	push   eax
c002426b:	6a 0b                	push   0xb
c002426d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024274:	50                   	push   eax
c0024275:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002427b:	e8 88 ed ff ff       	call   c0023008 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024280:	83 c4 20             	add    esp,0x20
c0024283:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024288:	50                   	push   eax
c0024289:	6a 02                	push   0x2
c002428b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024292:	50                   	push   eax
c0024293:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024299:	e8 6a ed ff ff       	call   c0023008 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002429e:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c00242a3:	50                   	push   eax
c00242a4:	6a 03                	push   0x3
c00242a6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242ad:	50                   	push   eax
c00242ae:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242b4:	e8 4f ed ff ff       	call   c0023008 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242b9:	83 c4 20             	add    esp,0x20
c00242bc:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00242c1:	50                   	push   eax
c00242c2:	6a 04                	push   0x4
c00242c4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242cb:	50                   	push   eax
c00242cc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242d2:	e8 31 ed ff ff       	call   c0023008 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242d7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00242dc:	50                   	push   eax
c00242dd:	6a 05                	push   0x5
c00242df:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242e6:	50                   	push   eax
c00242e7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242ed:	e8 16 ed ff ff       	call   c0023008 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242f2:	83 c4 20             	add    esp,0x20
c00242f5:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00242fa:	0f 94 c0             	sete   al
c00242fd:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024302:	74 09                	je     c002430d <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0024304:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c002430b:	eb 07                	jmp    c0024314 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c002430d:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0024314:	0f b6 c0             	movzx  eax,al
c0024317:	50                   	push   eax
c0024318:	6a 07                	push   0x7
c002431a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024321:	50                   	push   eax
c0024322:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024328:	e8 db ec ff ff       	call   c0023008 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002432d:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0024331:	83 c4 10             	add    esp,0x10
c0024334:	85 f6                	test   esi,esi
c0024336:	0f 84 ba 00 00 00    	je     c00243f6 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c002433c:	50                   	push   eax
c002433d:	6a 01                	push   0x1
c002433f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024346:	50                   	push   eax
c0024347:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002434d:	e8 62 f8 ff ff       	call   c0023bb4 <IDE::polling(unsigned char, unsigned int)>
c0024352:	83 c4 10             	add    esp,0x10
c0024355:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002435b:	84 c0                	test   al,al
c002435d:	74 2c                	je     c002438b <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c002435f:	0f b6 f8             	movzx  edi,al
c0024362:	0f b6 d2             	movzx  edx,dl
c0024365:	57                   	push   edi
c0024366:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c002436d:	50                   	push   eax
c002436e:	52                   	push   edx
c002436f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024375:	e8 a4 f6 ff ff       	call   c0023a1e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002437a:	c7 04 24 8c cf 02 c0 	mov    DWORD PTR [esp],0xc002cf8c
c0024381:	e8 ae eb fe ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0024386:	e9 87 00 00 00       	jmp    c0024412 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c002438b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024390:	74 33                	je     c00243c5 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024392:	31 ed                	xor    ebp,ebp
c0024394:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024398:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c002439c:	50                   	push   eax
c002439d:	50                   	push   eax
c002439e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243a5:	50                   	push   eax
c00243a6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243ac:	e8 45 ec ff ff       	call   c0022ff6 <IDE::getBase(unsigned char)>
c00243b1:	89 c2                	mov    edx,eax
c00243b3:	89 f8                	mov    eax,edi
c00243b5:	66 ef                	out    dx,ax
c00243b7:	45                   	inc    ebp
c00243b8:	83 c4 10             	add    esp,0x10
c00243bb:	81 fd 00 01 00 00    	cmp    ebp,0x100
c00243c1:	75 d1                	jne    c0024394 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c00243c3:	eb 23                	jmp    c00243e8 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c00243c5:	0f b6 d2             	movzx  edx,dl
c00243c8:	51                   	push   ecx
c00243c9:	51                   	push   ecx
c00243ca:	52                   	push   edx
c00243cb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243d1:	e8 20 ec ff ff       	call   c0022ff6 <IDE::getBase(unsigned char)>
c00243d6:	b9 00 01 00 00       	mov    ecx,0x100
c00243db:	89 c2                	mov    edx,eax
c00243dd:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c00243e1:	fc                   	cld    
c00243e2:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c00243e5:	83 c4 10             	add    esp,0x10
c00243e8:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c00243f0:	4e                   	dec    esi
c00243f1:	e9 3e ff ff ff       	jmp    c0024334 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c00243f6:	31 ff                	xor    edi,edi
c00243f8:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00243fd:	74 16                	je     c0024415 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c00243ff:	50                   	push   eax
c0024400:	50                   	push   eax
c0024401:	31 c0                	xor    eax,eax
c0024403:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024408:	0f 94 c0             	sete   al
c002440b:	50                   	push   eax
c002440c:	53                   	push   ebx
c002440d:	e8 ec fb ff ff       	call   c0023ffe <ATA::flush(bool)>
c0024412:	83 c4 10             	add    esp,0x10
c0024415:	83 c4 2c             	add    esp,0x2c
c0024418:	89 f8                	mov    eax,edi
c002441a:	5b                   	pop    ebx
c002441b:	5e                   	pop    esi
c002441c:	5f                   	pop    edi
c002441d:	5d                   	pop    ebp
c002441e:	c3                   	ret    
c002441f:	90                   	nop

c0024420 <ATA::read(unsigned long long, int, void*)>:
c0024420:	57                   	push   edi
c0024421:	b8 04 00 00 00       	mov    eax,0x4
c0024426:	56                   	push   esi
c0024427:	53                   	push   ebx
c0024428:	83 ec 10             	sub    esp,0x10
c002442b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002442f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024433:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024436:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002443a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002443e:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024444:	77 3b                	ja     c0024481 <ATA::read(unsigned long long, int, void*)+0x61>
c0024446:	b8 06 00 00 00       	mov    eax,0x6
c002444b:	85 d2                	test   edx,edx
c002444d:	74 32                	je     c0024481 <ATA::read(unsigned long long, int, void*)+0x61>
c002444f:	50                   	push   eax
c0024450:	50                   	push   eax
c0024451:	6a 00                	push   0x0
c0024453:	52                   	push   edx
c0024454:	53                   	push   ebx
c0024455:	57                   	push   edi
c0024456:	56                   	push   esi
c0024457:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002445b:	e8 38 fc ff ff       	call   c0024098 <ATA::access(unsigned long long, int, void*, bool)>
c0024460:	83 c4 20             	add    esp,0x20
c0024463:	85 c0                	test   eax,eax
c0024465:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024469:	75 11                	jne    c002447c <ATA::read(unsigned long long, int, void*)+0x5c>
c002446b:	01 1d 28 29 03 c0    	add    DWORD PTR ds:0xc0032928,ebx
c0024471:	e8 6a c5 fe ff       	call   c00109e0 <VgaText::updateDiskUsage()>
c0024476:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002447a:	eb 05                	jmp    c0024481 <ATA::read(unsigned long long, int, void*)+0x61>
c002447c:	b8 01 00 00 00       	mov    eax,0x1
c0024481:	83 c4 10             	add    esp,0x10
c0024484:	5b                   	pop    ebx
c0024485:	5e                   	pop    esi
c0024486:	5f                   	pop    edi
c0024487:	c3                   	ret    

c0024488 <ATA::write(unsigned long long, int, void*)>:
c0024488:	57                   	push   edi
c0024489:	b8 04 00 00 00       	mov    eax,0x4
c002448e:	56                   	push   esi
c002448f:	53                   	push   ebx
c0024490:	83 ec 10             	sub    esp,0x10
c0024493:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024497:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002449b:	8d 4b ff             	lea    ecx,[ebx-0x1]
c002449e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00244a2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00244a6:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00244ac:	77 3b                	ja     c00244e9 <ATA::write(unsigned long long, int, void*)+0x61>
c00244ae:	b8 06 00 00 00       	mov    eax,0x6
c00244b3:	85 d2                	test   edx,edx
c00244b5:	74 32                	je     c00244e9 <ATA::write(unsigned long long, int, void*)+0x61>
c00244b7:	50                   	push   eax
c00244b8:	50                   	push   eax
c00244b9:	6a 01                	push   0x1
c00244bb:	52                   	push   edx
c00244bc:	53                   	push   ebx
c00244bd:	57                   	push   edi
c00244be:	56                   	push   esi
c00244bf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00244c3:	e8 d0 fb ff ff       	call   c0024098 <ATA::access(unsigned long long, int, void*, bool)>
c00244c8:	83 c4 20             	add    esp,0x20
c00244cb:	85 c0                	test   eax,eax
c00244cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00244d1:	75 11                	jne    c00244e4 <ATA::write(unsigned long long, int, void*)+0x5c>
c00244d3:	01 1d 24 29 03 c0    	add    DWORD PTR ds:0xc0032924,ebx
c00244d9:	e8 02 c5 fe ff       	call   c00109e0 <VgaText::updateDiskUsage()>
c00244de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00244e2:	eb 05                	jmp    c00244e9 <ATA::write(unsigned long long, int, void*)+0x61>
c00244e4:	b8 01 00 00 00       	mov    eax,0x1
c00244e9:	83 c4 10             	add    esp,0x10
c00244ec:	5b                   	pop    ebx
c00244ed:	5e                   	pop    esi
c00244ee:	5f                   	pop    edi
c00244ef:	c3                   	ret    

c00244f0 <ATA::detectCHS()>:
c00244f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00244f4:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c00244fa:	c1 e0 06             	shl    eax,0x6
c00244fd:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024503:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002450d:	c7 44 24 04 97 cf 02 c0 	mov    DWORD PTR [esp+0x4],0xc002cf97
c0024515:	e9 bb 60 ff ff       	jmp    c001a5d5 <Krnl::panic(char const*)>

c002451a <ATA::open(int, int, void*)>:
c002451a:	53                   	push   ebx
c002451b:	83 ec 08             	sub    esp,0x8
c002451e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024522:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024526:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002452a:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024530:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024536:	c1 e0 06             	shl    eax,0x6
c0024539:	01 d0                	add    eax,edx
c002453b:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024542:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024548:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002454f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024559:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c002455f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024566:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002456d:	75 0c                	jne    c002457b <ATA::open(int, int, void*)+0x61>
c002456f:	83 ec 0c             	sub    esp,0xc
c0024572:	53                   	push   ebx
c0024573:	e8 78 ff ff ff       	call   c00244f0 <ATA::detectCHS()>
c0024578:	83 c4 10             	add    esp,0x10
c002457b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024581:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024587:	c1 e0 06             	shl    eax,0x6
c002458a:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024591:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002459b:	d1 e8                	shr    eax,1
c002459d:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00245a3:	6a 04                	push   0x4
c00245a5:	6a 0c                	push   0xc
c00245a7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00245ae:	50                   	push   eax
c00245af:	52                   	push   edx
c00245b0:	e8 53 ea ff ff       	call   c0023008 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245b5:	90                   	nop
c00245b6:	90                   	nop
c00245b7:	6a 00                	push   0x0
c00245b9:	6a 0c                	push   0xc
c00245bb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00245c2:	50                   	push   eax
c00245c3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00245c9:	e8 3a ea ff ff       	call   c0023008 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245ce:	83 c4 14             	add    esp,0x14
c00245d1:	53                   	push   ebx
c00245d2:	e8 0f 02 ff ff       	call   c00147e6 <PhysicalDisk::startCache()>
c00245d7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00245da:	e8 7d 23 ff ff       	call   c001695c <createPartitionsForDisk(PhysicalDisk*)>
c00245df:	31 c0                	xor    eax,eax
c00245e1:	83 c4 18             	add    esp,0x18
c00245e4:	5b                   	pop    ebx
c00245e5:	c3                   	ret    

c00245e6 <ATAPI::write(unsigned long long, int, void*)>:
c00245e6:	b8 03 00 00 00       	mov    eax,0x3
c00245eb:	c3                   	ret    

c00245ec <ATAPI::close(int, int, void*)>:
c00245ec:	83 ec 0c             	sub    esp,0xc
c00245ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245f3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00245f9:	85 c0                	test   eax,eax
c00245fb:	74 0c                	je     c0024609 <ATAPI::close(int, int, void*)+0x1d>
c00245fd:	83 ec 0c             	sub    esp,0xc
c0024600:	8b 10                	mov    edx,DWORD PTR [eax]
c0024602:	50                   	push   eax
c0024603:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024606:	83 c4 10             	add    esp,0x10
c0024609:	31 c0                	xor    eax,eax
c002460b:	83 c4 0c             	add    esp,0xc
c002460e:	c3                   	ret    
c002460f:	90                   	nop

c0024610 <ATAPI::ATAPI()>:
c0024610:	83 ec 0c             	sub    esp,0xc
c0024613:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024617:	83 ec 04             	sub    esp,0x4
c002461a:	68 00 08 00 00       	push   0x800
c002461f:	68 d1 d0 02 c0       	push   0xc002d0d1
c0024624:	50                   	push   eax
c0024625:	e8 54 01 ff ff       	call   c001477e <PhysicalDisk::PhysicalDisk(char const*, int)>
c002462a:	83 c4 10             	add    esp,0x10
c002462d:	ba ec cf 02 c0       	mov    edx,0xc002cfec
c0024632:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024636:	89 10                	mov    DWORD PTR [eax],edx
c0024638:	90                   	nop
c0024639:	83 c4 0c             	add    esp,0xc
c002463c:	c3                   	ret    
c002463d:	90                   	nop

c002463e <ATAPI::readyForCommand()>:
c002463e:	56                   	push   esi
c002463f:	53                   	push   ebx
c0024640:	31 db                	xor    ebx,ebx
c0024642:	50                   	push   eax
c0024643:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024647:	50                   	push   eax
c0024648:	6a 0c                	push   0xc
c002464a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024651:	50                   	push   eax
c0024652:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024658:	e8 6b ea ff ff       	call   c00230c8 <IDE::read(unsigned char, unsigned char)>
c002465d:	83 c4 10             	add    esp,0x10
c0024660:	a8 88                	test   al,0x88
c0024662:	74 23                	je     c0024687 <ATAPI::readyForCommand()+0x49>
c0024664:	43                   	inc    ebx
c0024665:	83 fb 63             	cmp    ebx,0x63
c0024668:	7e dd                	jle    c0024647 <ATAPI::readyForCommand()+0x9>
c002466a:	51                   	push   ecx
c002466b:	51                   	push   ecx
c002466c:	6a 00                	push   0x0
c002466e:	68 40 42 0f 00       	push   0xf4240
c0024673:	e8 d2 9c ff ff       	call   c001e34a <nanoSleep(unsigned long long)>
c0024678:	83 c4 10             	add    esp,0x10
c002467b:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024681:	75 c4                	jne    c0024647 <ATAPI::readyForCommand()+0x9>
c0024683:	31 c0                	xor    eax,eax
c0024685:	eb 02                	jmp    c0024689 <ATAPI::readyForCommand()+0x4b>
c0024687:	b0 01                	mov    al,0x1
c0024689:	5a                   	pop    edx
c002468a:	5b                   	pop    ebx
c002468b:	5e                   	pop    esi
c002468c:	c3                   	ret    
c002468d:	90                   	nop

c002468e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c002468e:	55                   	push   ebp
c002468f:	57                   	push   edi
c0024690:	56                   	push   esi
c0024691:	53                   	push   ebx
c0024692:	83 ec 20             	sub    esp,0x20
c0024695:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024699:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002469d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00246a1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00246a5:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00246a9:	6a 01                	push   0x1
c00246ab:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246b2:	50                   	push   eax
c00246b3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246b9:	e8 56 eb ff ff       	call   c0023214 <IDE::enableIRQs(unsigned char, bool)>
c00246be:	5e                   	pop    esi
c00246bf:	58                   	pop    eax
c00246c0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246c7:	50                   	push   eax
c00246c8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246ce:	e8 0f e9 ff ff       	call   c0022fe2 <IDE::prepareInterrupt(unsigned char)>
c00246d3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00246d6:	e8 63 ff ff ff       	call   c002463e <ATAPI::readyForCommand()>
c00246db:	83 c4 10             	add    esp,0x10
c00246de:	84 c0                	test   al,al
c00246e0:	75 0a                	jne    c00246ec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c00246e2:	bb 01 00 00 00       	mov    ebx,0x1
c00246e7:	e9 57 02 00 00       	jmp    c0024943 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00246ec:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c00246f2:	c1 e0 04             	shl    eax,0x4
c00246f5:	0f b6 c0             	movzx  eax,al
c00246f8:	50                   	push   eax
c00246f9:	6a 06                	push   0x6
c00246fb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024702:	50                   	push   eax
c0024703:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024709:	e8 fa e8 ff ff       	call   c0023008 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002470e:	6a 00                	push   0x0
c0024710:	6a 01                	push   0x1
c0024712:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024719:	50                   	push   eax
c002471a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024720:	e8 e3 e8 ff ff       	call   c0023008 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024725:	83 c4 20             	add    esp,0x20
c0024728:	0f b6 c3             	movzx  eax,bl
c002472b:	0f b6 df             	movzx  ebx,bh
c002472e:	50                   	push   eax
c002472f:	6a 04                	push   0x4
c0024731:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024738:	50                   	push   eax
c0024739:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002473f:	e8 c4 e8 ff ff       	call   c0023008 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024744:	53                   	push   ebx
c0024745:	6a 05                	push   0x5
c0024747:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002474e:	50                   	push   eax
c002474f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024755:	e8 ae e8 ff ff       	call   c0023008 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002475a:	83 c4 20             	add    esp,0x20
c002475d:	68 a0 00 00 00       	push   0xa0
c0024762:	6a 07                	push   0x7
c0024764:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002476b:	50                   	push   eax
c002476c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024772:	e8 91 e8 ff ff       	call   c0023008 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024777:	83 c4 0c             	add    esp,0xc
c002477a:	6a 01                	push   0x1
c002477c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024783:	50                   	push   eax
c0024784:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002478a:	e8 25 f4 ff ff       	call   c0023bb4 <IDE::polling(unsigned char, unsigned int)>
c002478f:	83 c4 10             	add    esp,0x10
c0024792:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024798:	84 c0                	test   al,al
c002479a:	74 23                	je     c00247bf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c002479c:	0f b6 d8             	movzx  ebx,al
c002479f:	0f b6 d2             	movzx  edx,dl
c00247a2:	53                   	push   ebx
c00247a3:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c00247aa:	50                   	push   eax
c00247ab:	52                   	push   edx
c00247ac:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247b2:	e8 67 f2 ff ff       	call   c0023a1e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00247b7:	83 c4 10             	add    esp,0x10
c00247ba:	e9 84 01 00 00       	jmp    c0024943 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00247bf:	0f b6 d2             	movzx  edx,dl
c00247c2:	53                   	push   ebx
c00247c3:	53                   	push   ebx
c00247c4:	52                   	push   edx
c00247c5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247cb:	e8 26 e8 ff ff       	call   c0022ff6 <IDE::getBase(unsigned char)>
c00247d0:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00247d4:	b9 06 00 00 00       	mov    ecx,0x6
c00247d9:	89 c2                	mov    edx,eax
c00247db:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00247de:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00247e2:	83 c4 10             	add    esp,0x10
c00247e5:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00247eb:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00247f2:	85 db                	test   ebx,ebx
c00247f4:	0f 84 ec 00 00 00    	je     c00248e6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c00247fa:	51                   	push   ecx
c00247fb:	51                   	push   ecx
c00247fc:	52                   	push   edx
c00247fd:	50                   	push   eax
c00247fe:	e8 73 e9 ff ff       	call   c0023176 <IDE::waitInterrupt(unsigned char)>
c0024803:	83 c4 10             	add    esp,0x10
c0024806:	84 c0                	test   al,al
c0024808:	0f 84 d4 fe ff ff    	je     c00246e2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002480e:	56                   	push   esi
c002480f:	56                   	push   esi
c0024810:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024817:	50                   	push   eax
c0024818:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002481e:	e8 bf e7 ff ff       	call   c0022fe2 <IDE::prepareInterrupt(unsigned char)>
c0024823:	83 c4 0c             	add    esp,0xc
c0024826:	6a 04                	push   0x4
c0024828:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002482f:	50                   	push   eax
c0024830:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024836:	e8 8d e8 ff ff       	call   c00230c8 <IDE::read(unsigned char, unsigned char)>
c002483b:	83 c4 0c             	add    esp,0xc
c002483e:	89 c6                	mov    esi,eax
c0024840:	6a 05                	push   0x5
c0024842:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024849:	50                   	push   eax
c002484a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024850:	e8 73 e8 ff ff       	call   c00230c8 <IDE::read(unsigned char, unsigned char)>
c0024855:	89 f1                	mov    ecx,esi
c0024857:	0f b6 c0             	movzx  eax,al
c002485a:	0f b6 f1             	movzx  esi,cl
c002485d:	c1 e0 08             	shl    eax,0x8
c0024860:	09 c6                	or     esi,eax
c0024862:	d1 fe                	sar    esi,1
c0024864:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0024868:	83 c4 10             	add    esp,0x10
c002486b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0024870:	74 41                	je     c00248b3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0024872:	31 c9                	xor    ecx,ecx
c0024874:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002487a:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024881:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0024885:	75 0a                	jne    c0024891 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0024887:	01 c9                	add    ecx,ecx
c0024889:	01 cd                	add    ebp,ecx
c002488b:	4b                   	dec    ebx
c002488c:	e9 54 ff ff ff       	jmp    c00247e5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0024891:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0024896:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002489a:	51                   	push   ecx
c002489b:	51                   	push   ecx
c002489c:	52                   	push   edx
c002489d:	50                   	push   eax
c002489e:	e8 53 e7 ff ff       	call   c0022ff6 <IDE::getBase(unsigned char)>
c00248a3:	89 c2                	mov    edx,eax
c00248a5:	89 f0                	mov    eax,esi
c00248a7:	66 ef                	out    dx,ax
c00248a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00248ad:	83 c4 10             	add    esp,0x10
c00248b0:	41                   	inc    ecx
c00248b1:	eb c1                	jmp    c0024874 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c00248b3:	31 f6                	xor    esi,esi
c00248b5:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00248bb:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00248c2:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00248c6:	75 06                	jne    c00248ce <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c00248c8:	01 f6                	add    esi,esi
c00248ca:	01 f5                	add    ebp,esi
c00248cc:	eb bd                	jmp    c002488b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c00248ce:	51                   	push   ecx
c00248cf:	51                   	push   ecx
c00248d0:	52                   	push   edx
c00248d1:	50                   	push   eax
c00248d2:	e8 1f e7 ff ff       	call   c0022ff6 <IDE::getBase(unsigned char)>
c00248d7:	89 c2                	mov    edx,eax
c00248d9:	66 ed                	in     ax,dx
c00248db:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00248e0:	83 c4 10             	add    esp,0x10
c00248e3:	46                   	inc    esi
c00248e4:	eb cf                	jmp    c00248b5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c00248e6:	51                   	push   ecx
c00248e7:	51                   	push   ecx
c00248e8:	52                   	push   edx
c00248e9:	50                   	push   eax
c00248ea:	e8 87 e8 ff ff       	call   c0023176 <IDE::waitInterrupt(unsigned char)>
c00248ef:	83 c4 10             	add    esp,0x10
c00248f2:	84 c0                	test   al,al
c00248f4:	0f 84 e8 fd ff ff    	je     c00246e2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00248fa:	bb a0 86 01 00       	mov    ebx,0x186a0
c00248ff:	52                   	push   edx
c0024900:	52                   	push   edx
c0024901:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024908:	50                   	push   eax
c0024909:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002490f:	e8 ce e6 ff ff       	call   c0022fe2 <IDE::prepareInterrupt(unsigned char)>
c0024914:	83 c4 10             	add    esp,0x10
c0024917:	50                   	push   eax
c0024918:	50                   	push   eax
c0024919:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024920:	50                   	push   eax
c0024921:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024927:	e8 ca e6 ff ff       	call   c0022ff6 <IDE::getBase(unsigned char)>
c002492c:	8d 50 07             	lea    edx,[eax+0x7]
c002492f:	ec                   	in     al,dx
c0024930:	83 c4 10             	add    esp,0x10
c0024933:	a8 88                	test   al,0x88
c0024935:	74 0a                	je     c0024941 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0024937:	4b                   	dec    ebx
c0024938:	75 dd                	jne    c0024917 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c002493a:	bb 02 00 00 00       	mov    ebx,0x2
c002493f:	eb 02                	jmp    c0024943 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024941:	31 db                	xor    ebx,ebx
c0024943:	83 c4 1c             	add    esp,0x1c
c0024946:	89 d8                	mov    eax,ebx
c0024948:	5b                   	pop    ebx
c0024949:	5e                   	pop    esi
c002494a:	5f                   	pop    edi
c002494b:	5d                   	pop    ebp
c002494c:	c3                   	ret    
c002494d:	90                   	nop

c002494e <ATAPI::diskRemoved()>:
c002494e:	83 ec 18             	sub    esp,0x18
c0024951:	68 dd d0 02 c0       	push   0xc002d0dd
c0024956:	e8 d9 e5 fe ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c002495b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002495f:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0024966:	83 c4 1c             	add    esp,0x1c
c0024969:	c3                   	ret    

c002496a <ATAPI::eject()>:
c002496a:	57                   	push   edi
c002496b:	b9 03 00 00 00       	mov    ecx,0x3
c0024970:	53                   	push   ebx
c0024971:	83 ec 14             	sub    esp,0x14
c0024974:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024978:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002497c:	fc                   	cld    
c002497d:	31 c0                	xor    eax,eax
c002497f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024981:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024986:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002498b:	50                   	push   eax
c002498c:	50                   	push   eax
c002498d:	6a 00                	push   0x0
c002498f:	6a 00                	push   0x0
c0024991:	6a 00                	push   0x0
c0024993:	6a 02                	push   0x2
c0024995:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024999:	50                   	push   eax
c002499a:	53                   	push   ebx
c002499b:	e8 ee fc ff ff       	call   c002468e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00249a0:	83 c4 14             	add    esp,0x14
c00249a3:	53                   	push   ebx
c00249a4:	e8 a5 ff ff ff       	call   c002494e <ATAPI::diskRemoved()>
c00249a9:	83 c4 24             	add    esp,0x24
c00249ac:	31 c0                	xor    eax,eax
c00249ae:	5b                   	pop    ebx
c00249af:	5f                   	pop    edi
c00249b0:	c3                   	ret    
c00249b1:	90                   	nop

c00249b2 <ATAPI::diskInserted()>:
c00249b2:	53                   	push   ebx
c00249b3:	83 ec 14             	sub    esp,0x14
c00249b6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00249ba:	68 f4 d0 02 c0       	push   0xc002d0f4
c00249bf:	e8 70 e5 fe ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c00249c4:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c00249cb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00249ce:	e8 13 fe fe ff       	call   c00147e6 <PhysicalDisk::startCache()>
c00249d3:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00249d7:	83 c4 18             	add    esp,0x18
c00249da:	5b                   	pop    ebx
c00249db:	e9 7c 1f ff ff       	jmp    c001695c <createPartitionsForDisk(PhysicalDisk*)>

c00249e0 <ATAPI::detectMedia()>:
c00249e0:	56                   	push   esi
c00249e1:	53                   	push   ebx
c00249e2:	83 ec 28             	sub    esp,0x28
c00249e5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00249e9:	6a 0c                	push   0xc
c00249eb:	6a 00                	push   0x0
c00249ed:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00249f1:	56                   	push   esi
c00249f2:	e8 81 bd fd ff       	call   c0000778 <memset>
c00249f7:	58                   	pop    eax
c00249f8:	5a                   	pop    edx
c00249f9:	6a 00                	push   0x0
c00249fb:	6a 00                	push   0x0
c00249fd:	6a 00                	push   0x0
c00249ff:	6a 00                	push   0x0
c0024a01:	56                   	push   esi
c0024a02:	53                   	push   ebx
c0024a03:	e8 86 fc ff ff       	call   c002468e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024a08:	83 c4 1c             	add    esp,0x1c
c0024a0b:	6a 0c                	push   0xc
c0024a0d:	6a 00                	push   0x0
c0024a0f:	56                   	push   esi
c0024a10:	e8 63 bd fd ff       	call   c0000778 <memset>
c0024a15:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024a1a:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024a1f:	59                   	pop    ecx
c0024a20:	58                   	pop    eax
c0024a21:	6a 01                	push   0x1
c0024a23:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024a27:	50                   	push   eax
c0024a28:	6a 00                	push   0x0
c0024a2a:	6a 12                	push   0x12
c0024a2c:	56                   	push   esi
c0024a2d:	53                   	push   ebx
c0024a2e:	e8 5b fc ff ff       	call   c002468e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024a33:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024a37:	83 c4 20             	add    esp,0x20
c0024a3a:	83 e0 7f             	and    eax,0x7f
c0024a3d:	3c 70                	cmp    al,0x70
c0024a3f:	74 15                	je     c0024a56 <ATAPI::detectMedia()+0x76>
c0024a41:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a48:	75 0c                	jne    c0024a56 <ATAPI::detectMedia()+0x76>
c0024a4a:	83 ec 0c             	sub    esp,0xc
c0024a4d:	53                   	push   ebx
c0024a4e:	e8 5f ff ff ff       	call   c00249b2 <ATAPI::diskInserted()>
c0024a53:	83 c4 10             	add    esp,0x10
c0024a56:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024a5a:	83 e0 0f             	and    eax,0xf
c0024a5d:	3c 02                	cmp    al,0x2
c0024a5f:	75 1b                	jne    c0024a7c <ATAPI::detectMedia()+0x9c>
c0024a61:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024a66:	75 2d                	jne    c0024a95 <ATAPI::detectMedia()+0xb5>
c0024a68:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a6f:	74 24                	je     c0024a95 <ATAPI::detectMedia()+0xb5>
c0024a71:	83 ec 0c             	sub    esp,0xc
c0024a74:	53                   	push   ebx
c0024a75:	e8 d4 fe ff ff       	call   c002494e <ATAPI::diskRemoved()>
c0024a7a:	eb 16                	jmp    c0024a92 <ATAPI::detectMedia()+0xb2>
c0024a7c:	84 c0                	test   al,al
c0024a7e:	75 15                	jne    c0024a95 <ATAPI::detectMedia()+0xb5>
c0024a80:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a87:	75 0c                	jne    c0024a95 <ATAPI::detectMedia()+0xb5>
c0024a89:	83 ec 0c             	sub    esp,0xc
c0024a8c:	53                   	push   ebx
c0024a8d:	e8 20 ff ff ff       	call   c00249b2 <ATAPI::diskInserted()>
c0024a92:	83 c4 10             	add    esp,0x10
c0024a95:	83 c4 24             	add    esp,0x24
c0024a98:	5b                   	pop    ebx
c0024a99:	5e                   	pop    esi
c0024a9a:	c3                   	ret    
c0024a9b:	90                   	nop

c0024a9c <ATAPI::open(int, int, void*)>:
c0024a9c:	53                   	push   ebx
c0024a9d:	83 ec 08             	sub    esp,0x8
c0024aa0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024aa4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024aa8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024aac:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024ab2:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024ab8:	c1 e0 06             	shl    eax,0x6
c0024abb:	01 d0                	add    eax,edx
c0024abd:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024ac4:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024aca:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024ad1:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024adb:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024ae1:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024ae8:	6a 04                	push   0x4
c0024aea:	6a 0c                	push   0xc
c0024aec:	51                   	push   ecx
c0024aed:	52                   	push   edx
c0024aee:	e8 15 e5 ff ff       	call   c0023008 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024af3:	90                   	nop
c0024af4:	90                   	nop
c0024af5:	6a 00                	push   0x0
c0024af7:	6a 0c                	push   0xc
c0024af9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b00:	50                   	push   eax
c0024b01:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b07:	e8 fc e4 ff ff       	call   c0023008 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b0c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024b13:	83 c4 14             	add    esp,0x14
c0024b16:	53                   	push   ebx
c0024b17:	e8 c4 fe ff ff       	call   c00249e0 <ATAPI::detectMedia()>
c0024b1c:	31 c0                	xor    eax,eax
c0024b1e:	83 c4 18             	add    esp,0x18
c0024b21:	5b                   	pop    ebx
c0024b22:	c3                   	ret    
c0024b23:	90                   	nop

c0024b24 <ATAPI::read(unsigned long long, int, void*)>:
c0024b24:	55                   	push   ebp
c0024b25:	57                   	push   edi
c0024b26:	56                   	push   esi
c0024b27:	53                   	push   ebx
c0024b28:	83 ec 1c             	sub    esp,0x1c
c0024b2b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024b2f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024b33:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024b37:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024b3e:	74 41                	je     c0024b81 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024b40:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024b44:	b9 03 00 00 00       	mov    ecx,0x3
c0024b49:	fc                   	cld    
c0024b4a:	31 c0                	xor    eax,eax
c0024b4c:	86 fb                	xchg   bl,bh
c0024b4e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024b50:	c1 c3 10             	rol    ebx,0x10
c0024b53:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024b58:	89 e8                	mov    eax,ebp
c0024b5a:	86 fb                	xchg   bl,bh
c0024b5c:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024b60:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024b64:	50                   	push   eax
c0024b65:	50                   	push   eax
c0024b66:	55                   	push   ebp
c0024b67:	c1 e5 0b             	shl    ebp,0xb
c0024b6a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024b6e:	6a 00                	push   0x0
c0024b70:	55                   	push   ebp
c0024b71:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024b75:	50                   	push   eax
c0024b76:	56                   	push   esi
c0024b77:	e8 12 fb ff ff       	call   c002468e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024b7c:	83 c4 20             	add    esp,0x20
c0024b7f:	eb 1a                	jmp    c0024b9b <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024b81:	83 ec 0c             	sub    esp,0xc
c0024b84:	56                   	push   esi
c0024b85:	e8 56 fe ff ff       	call   c00249e0 <ATAPI::detectMedia()>
c0024b8a:	83 c4 10             	add    esp,0x10
c0024b8d:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024b94:	75 aa                	jne    c0024b40 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024b96:	b8 02 00 00 00       	mov    eax,0x2
c0024b9b:	83 c4 1c             	add    esp,0x1c
c0024b9e:	5b                   	pop    ebx
c0024b9f:	5e                   	pop    esi
c0024ba0:	5f                   	pop    edi
c0024ba1:	5d                   	pop    ebp
c0024ba2:	c3                   	ret    
c0024ba3:	90                   	nop

c0024ba4 <SATA::close(int, int, void*)>:
c0024ba4:	83 ec 0c             	sub    esp,0xc
c0024ba7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024bab:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024bb1:	85 c0                	test   eax,eax
c0024bb3:	74 0c                	je     c0024bc1 <SATA::close(int, int, void*)+0x1d>
c0024bb5:	83 ec 0c             	sub    esp,0xc
c0024bb8:	8b 10                	mov    edx,DWORD PTR [eax]
c0024bba:	50                   	push   eax
c0024bbb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024bbe:	83 c4 10             	add    esp,0x10
c0024bc1:	31 c0                	xor    eax,eax
c0024bc3:	83 c4 0c             	add    esp,0xc
c0024bc6:	c3                   	ret    
c0024bc7:	90                   	nop

c0024bc8 <SATA::powerSaving(PowerSavingLevel)>:
c0024bc8:	c3                   	ret    
c0024bc9:	90                   	nop

c0024bca <SATA::open(int, int, void*)>:
c0024bca:	56                   	push   esi
c0024bcb:	53                   	push   ebx
c0024bcc:	50                   	push   eax
c0024bcd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024bd1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024bd5:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024bdf:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024be5:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024bef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024bf3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024bfd:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024c03:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024c0a:	e8 d3 b2 fe ff       	call   c000fee2 <Phys::allocatePage()>
c0024c0f:	89 c6                	mov    esi,eax
c0024c11:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024c17:	81 c6 00 10 00 00    	add    esi,0x1000
c0024c1d:	e8 c0 b2 fe ff       	call   c000fee2 <Phys::allocatePage()>
c0024c22:	39 c6                	cmp    esi,eax
c0024c24:	74 10                	je     c0024c36 <SATA::open(int, int, void*)+0x6c>
c0024c26:	83 ec 0c             	sub    esp,0xc
c0024c29:	68 1c d0 02 c0       	push   0xc002d01c
c0024c2e:	e8 a2 59 ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c0024c33:	83 c4 10             	add    esp,0x10
c0024c36:	83 ec 0c             	sub    esp,0xc
c0024c39:	6a 02                	push   0x2
c0024c3b:	e8 4b cf fe ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c0024c40:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024c46:	e8 db d1 fe ff       	call   c0011e26 <Virt::getAKernelVAS()>
c0024c4b:	6a 03                	push   0x3
c0024c4d:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024c53:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024c59:	50                   	push   eax
c0024c5a:	e8 03 d7 fe ff       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c0024c5f:	83 c4 14             	add    esp,0x14
c0024c62:	53                   	push   ebx
c0024c63:	e8 7e fb fe ff       	call   c00147e6 <PhysicalDisk::startCache()>
c0024c68:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024c6b:	e8 ec 1c ff ff       	call   c001695c <createPartitionsForDisk(PhysicalDisk*)>
c0024c70:	83 c4 14             	add    esp,0x14
c0024c73:	31 c0                	xor    eax,eax
c0024c75:	5b                   	pop    ebx
c0024c76:	5e                   	pop    esi
c0024c77:	c3                   	ret    

c0024c78 <SATA::SATA()>:
c0024c78:	83 ec 0c             	sub    esp,0xc
c0024c7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c7f:	83 ec 04             	sub    esp,0x4
c0024c82:	68 00 02 00 00       	push   0x200
c0024c87:	68 30 d0 02 c0       	push   0xc002d030
c0024c8c:	50                   	push   eax
c0024c8d:	e8 ec fa fe ff       	call   c001477e <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024c92:	83 c4 10             	add    esp,0x10
c0024c95:	ba a0 d0 02 c0       	mov    edx,0xc002d0a0
c0024c9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c9e:	89 10                	mov    DWORD PTR [eax],edx
c0024ca0:	90                   	nop
c0024ca1:	83 c4 0c             	add    esp,0xc
c0024ca4:	c3                   	ret    
c0024ca5:	90                   	nop

c0024ca6 <SATA::access(unsigned long long, int, void*, bool)>:
c0024ca6:	55                   	push   ebp
c0024ca7:	57                   	push   edi
c0024ca8:	56                   	push   esi
c0024ca9:	53                   	push   ebx
c0024caa:	83 ec 2c             	sub    esp,0x2c
c0024cad:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024cb1:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024cb5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024cb9:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0024cbd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024cc1:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024cc6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024cca:	7e 10                	jle    c0024cdc <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024ccc:	83 ec 0c             	sub    esp,0xc
c0024ccf:	68 40 d0 02 c0       	push   0xc002d040
c0024cd4:	e8 fc 58 ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c0024cd9:	83 c4 10             	add    esp,0x10
c0024cdc:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c0024ce2:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024ce8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024cee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024cf2:	89 f0                	mov    eax,esi
c0024cf4:	c1 e0 07             	shl    eax,0x7
c0024cf7:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024cfb:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024d05:	53                   	push   ebx
c0024d06:	8d 46 02             	lea    eax,[esi+0x2]
c0024d09:	53                   	push   ebx
c0024d0a:	c1 e0 07             	shl    eax,0x7
c0024d0d:	bb 01 00 00 00       	mov    ebx,0x1
c0024d12:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0024d16:	50                   	push   eax
c0024d17:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024d1d:	e8 aa ef ff ff       	call   c0023ccc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024d22:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024d26:	83 c4 10             	add    esp,0x10
c0024d29:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024d2e:	0f 84 ce 01 00 00    	je     c0024f02 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024d34:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024d38:	c1 e0 09             	shl    eax,0x9
c0024d3b:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024d40:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024d44:	74 17                	je     c0024d5d <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c0024d46:	51                   	push   ecx
c0024d47:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024d4b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024d4f:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024d55:	e8 ea b9 fd ff       	call   c0000744 <memcpy>
c0024d5a:	83 c4 10             	add    esp,0x10
c0024d5d:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024d63:	8d 46 02             	lea    eax,[esi+0x2]
c0024d66:	c1 e0 07             	shl    eax,0x7
c0024d69:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024d6d:	8b 00                	mov    eax,DWORD PTR [eax]
c0024d6f:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024d75:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024d7b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024d7f:	c1 e1 05             	shl    ecx,0x5
c0024d82:	01 c8                	add    eax,ecx
c0024d84:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024d88:	8a 18                	mov    bl,BYTE PTR [eax]
c0024d8a:	83 e1 01             	and    ecx,0x1
c0024d8d:	83 e3 bf             	and    ebx,0xffffffbf
c0024d90:	c1 e1 06             	shl    ecx,0x6
c0024d93:	09 d9                	or     ecx,ebx
c0024d95:	88 08                	mov    BYTE PTR [eax],cl
c0024d97:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024d99:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024d9f:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024da5:	89 08                	mov    DWORD PTR [eax],ecx
c0024da7:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024dad:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024db3:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024db9:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024dbc:	52                   	push   edx
c0024dbd:	68 90 00 00 00       	push   0x90
c0024dc2:	6a 00                	push   0x0
c0024dc4:	53                   	push   ebx
c0024dc5:	e8 ae b9 fd ff       	call   c0000778 <memset>
c0024dca:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024dd0:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0024dd4:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024dda:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024dde:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024de2:	83 c4 10             	add    esp,0x10
c0024de5:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024de8:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024dee:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024df4:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024df9:	09 c8                	or     eax,ecx
c0024dfb:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024e01:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024e04:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024e0b:	66 25 00 7f          	and    ax,0x7f00
c0024e0f:	66 0d 27 80          	or     ax,0x8027
c0024e13:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0024e18:	66 89 03             	mov    WORD PTR [ebx],ax
c0024e1b:	19 c0                	sbb    eax,eax
c0024e1d:	83 e0 f0             	and    eax,0xfffffff0
c0024e20:	83 c0 35             	add    eax,0x35
c0024e23:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0024e26:	89 f8                	mov    eax,edi
c0024e28:	c1 e8 10             	shr    eax,0x10
c0024e2b:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024e2e:	89 f8                	mov    eax,edi
c0024e30:	c1 e8 18             	shr    eax,0x18
c0024e33:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024e36:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024e3a:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024e3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024e41:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024e44:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024e48:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024e4c:	89 f3                	mov    ebx,esi
c0024e4e:	31 c0                	xor    eax,eax
c0024e50:	c1 e3 07             	shl    ebx,0x7
c0024e53:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0024e57:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0024e5d:	80 e1 88             	and    cl,0x88
c0024e60:	74 0a                	je     c0024e6c <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0024e62:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e67:	74 0a                	je     c0024e73 <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c0024e69:	40                   	inc    eax
c0024e6a:	eb eb                	jmp    c0024e57 <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0024e6c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e71:	75 0a                	jne    c0024e7d <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c0024e73:	83 ec 0c             	sub    esp,0xc
c0024e76:	68 79 d0 02 c0       	push   0xc002d079
c0024e7b:	eb 56                	jmp    c0024ed3 <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0024e7d:	b8 01 00 00 00       	mov    eax,0x1
c0024e82:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0024e86:	c1 e6 07             	shl    esi,0x7
c0024e89:	d3 e0                	shl    eax,cl
c0024e8b:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0024e8f:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0024e95:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c0024e9b:	85 c8                	test   eax,ecx
c0024e9d:	74 20                	je     c0024ebf <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0024e9f:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0024ea5:	0f ba e1 1e          	bt     ecx,0x1e
c0024ea9:	73 ea                	jae    c0024e95 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0024eab:	83 ec 0c             	sub    esp,0xc
c0024eae:	31 db                	xor    ebx,ebx
c0024eb0:	68 87 d0 02 c0       	push   0xc002d087
c0024eb5:	e8 1b 57 ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c0024eba:	83 c4 10             	add    esp,0x10
c0024ebd:	eb 43                	jmp    c0024f02 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024ebf:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0024ec5:	0f ba e0 1e          	bt     eax,0x1e
c0024ec9:	73 17                	jae    c0024ee2 <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0024ecb:	83 ec 0c             	sub    esp,0xc
c0024ece:	68 87 d0 02 c0       	push   0xc002d087
c0024ed3:	e8 fd 56 ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c0024ed8:	bb 01 00 00 00       	mov    ebx,0x1
c0024edd:	83 c4 10             	add    esp,0x10
c0024ee0:	eb 20                	jmp    c0024f02 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024ee2:	31 db                	xor    ebx,ebx
c0024ee4:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024ee9:	75 17                	jne    c0024f02 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024eeb:	50                   	push   eax
c0024eec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024ef0:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024ef6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024efa:	e8 45 b8 fd ff       	call   c0000744 <memcpy>
c0024eff:	83 c4 10             	add    esp,0x10
c0024f02:	83 c4 2c             	add    esp,0x2c
c0024f05:	89 d8                	mov    eax,ebx
c0024f07:	5b                   	pop    ebx
c0024f08:	5e                   	pop    esi
c0024f09:	5f                   	pop    edi
c0024f0a:	5d                   	pop    ebp
c0024f0b:	c3                   	ret    

c0024f0c <SATA::read(unsigned long long, int, void*)>:
c0024f0c:	57                   	push   edi
c0024f0d:	b8 04 00 00 00       	mov    eax,0x4
c0024f12:	56                   	push   esi
c0024f13:	53                   	push   ebx
c0024f14:	83 ec 10             	sub    esp,0x10
c0024f17:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024f1b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024f1f:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024f22:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024f26:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024f2a:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024f30:	77 3b                	ja     c0024f6d <SATA::read(unsigned long long, int, void*)+0x61>
c0024f32:	b8 06 00 00 00       	mov    eax,0x6
c0024f37:	85 d2                	test   edx,edx
c0024f39:	74 32                	je     c0024f6d <SATA::read(unsigned long long, int, void*)+0x61>
c0024f3b:	50                   	push   eax
c0024f3c:	50                   	push   eax
c0024f3d:	6a 00                	push   0x0
c0024f3f:	52                   	push   edx
c0024f40:	53                   	push   ebx
c0024f41:	57                   	push   edi
c0024f42:	56                   	push   esi
c0024f43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024f47:	e8 5a fd ff ff       	call   c0024ca6 <SATA::access(unsigned long long, int, void*, bool)>
c0024f4c:	83 c4 20             	add    esp,0x20
c0024f4f:	85 c0                	test   eax,eax
c0024f51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024f55:	75 11                	jne    c0024f68 <SATA::read(unsigned long long, int, void*)+0x5c>
c0024f57:	01 1d 28 29 03 c0    	add    DWORD PTR ds:0xc0032928,ebx
c0024f5d:	e8 7e ba fe ff       	call   c00109e0 <VgaText::updateDiskUsage()>
c0024f62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024f66:	eb 05                	jmp    c0024f6d <SATA::read(unsigned long long, int, void*)+0x61>
c0024f68:	b8 01 00 00 00       	mov    eax,0x1
c0024f6d:	83 c4 10             	add    esp,0x10
c0024f70:	5b                   	pop    ebx
c0024f71:	5e                   	pop    esi
c0024f72:	5f                   	pop    edi
c0024f73:	c3                   	ret    

c0024f74 <SATA::write(unsigned long long, int, void*)>:
c0024f74:	55                   	push   ebp
c0024f75:	b8 04 00 00 00       	mov    eax,0x4
c0024f7a:	57                   	push   edi
c0024f7b:	56                   	push   esi
c0024f7c:	53                   	push   ebx
c0024f7d:	83 ec 1c             	sub    esp,0x1c
c0024f80:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024f84:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0024f88:	8d 75 ff             	lea    esi,[ebp-0x1]
c0024f8b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0024f8f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0024f93:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024f99:	77 56                	ja     c0024ff1 <SATA::write(unsigned long long, int, void*)+0x7d>
c0024f9b:	b8 06 00 00 00       	mov    eax,0x6
c0024fa0:	85 ff                	test   edi,edi
c0024fa2:	74 4d                	je     c0024ff1 <SATA::write(unsigned long long, int, void*)+0x7d>
c0024fa4:	89 ee                	mov    esi,ebp
c0024fa6:	c1 e6 09             	shl    esi,0x9
c0024fa9:	01 fe                	add    esi,edi
c0024fab:	89 c8                	mov    eax,ecx
c0024fad:	89 da                	mov    edx,ebx
c0024faf:	83 c0 01             	add    eax,0x1
c0024fb2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024fb6:	83 d2 00             	adc    edx,0x0
c0024fb9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0024fbd:	50                   	push   eax
c0024fbe:	50                   	push   eax
c0024fbf:	6a 01                	push   0x1
c0024fc1:	57                   	push   edi
c0024fc2:	81 c7 00 02 00 00    	add    edi,0x200
c0024fc8:	6a 01                	push   0x1
c0024fca:	53                   	push   ebx
c0024fcb:	51                   	push   ecx
c0024fcc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024fd0:	e8 d1 fc ff ff       	call   c0024ca6 <SATA::access(unsigned long long, int, void*, bool)>
c0024fd5:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024fd9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024fdd:	83 c4 20             	add    esp,0x20
c0024fe0:	39 f7                	cmp    edi,esi
c0024fe2:	75 c7                	jne    c0024fab <SATA::write(unsigned long long, int, void*)+0x37>
c0024fe4:	01 2d 24 29 03 c0    	add    DWORD PTR ds:0xc0032924,ebp
c0024fea:	e8 f1 b9 fe ff       	call   c00109e0 <VgaText::updateDiskUsage()>
c0024fef:	31 c0                	xor    eax,eax
c0024ff1:	83 c4 1c             	add    esp,0x1c
c0024ff4:	5b                   	pop    ebx
c0024ff5:	5e                   	pop    esi
c0024ff6:	5f                   	pop    edi
c0024ff7:	5d                   	pop    ebp
c0024ff8:	c3                   	ret    
c0024ff9:	90                   	nop

c0024ffa <SATAPI::write(unsigned long long, int, void*)>:
c0024ffa:	b8 03 00 00 00       	mov    eax,0x3
c0024fff:	c3                   	ret    

c0025000 <SATAPI::close(int, int, void*)>:
c0025000:	83 ec 0c             	sub    esp,0xc
c0025003:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025007:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002500d:	85 c0                	test   eax,eax
c002500f:	74 0c                	je     c002501d <SATAPI::close(int, int, void*)+0x1d>
c0025011:	83 ec 0c             	sub    esp,0xc
c0025014:	8b 10                	mov    edx,DWORD PTR [eax]
c0025016:	50                   	push   eax
c0025017:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002501a:	83 c4 10             	add    esp,0x10
c002501d:	31 c0                	xor    eax,eax
c002501f:	83 c4 0c             	add    esp,0xc
c0025022:	c3                   	ret    
c0025023:	90                   	nop

c0025024 <SATAPI::SATAPI()>:
c0025024:	83 ec 0c             	sub    esp,0xc
c0025027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002502b:	83 ec 04             	sub    esp,0x4
c002502e:	68 00 08 00 00       	push   0x800
c0025033:	68 d0 d0 02 c0       	push   0xc002d0d0
c0025038:	50                   	push   eax
c0025039:	e8 40 f7 fe ff       	call   c001477e <PhysicalDisk::PhysicalDisk(char const*, int)>
c002503e:	83 c4 10             	add    esp,0x10
c0025041:	ba 7c d1 02 c0       	mov    edx,0xc002d17c
c0025046:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002504a:	89 10                	mov    DWORD PTR [eax],edx
c002504c:	90                   	nop
c002504d:	83 c4 0c             	add    esp,0xc
c0025050:	c3                   	ret    
c0025051:	90                   	nop

c0025052 <SATAPI::diskRemoved()>:
c0025052:	83 ec 18             	sub    esp,0x18
c0025055:	68 dc d0 02 c0       	push   0xc002d0dc
c002505a:	e8 d5 de fe ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c002505f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025063:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c002506a:	83 c4 1c             	add    esp,0x1c
c002506d:	c3                   	ret    

c002506e <SATAPI::diskInserted()>:
c002506e:	53                   	push   ebx
c002506f:	83 ec 14             	sub    esp,0x14
c0025072:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025076:	68 f3 d0 02 c0       	push   0xc002d0f3
c002507b:	e8 b4 de fe ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0025080:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0025087:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002508a:	e8 57 f7 fe ff       	call   c00147e6 <PhysicalDisk::startCache()>
c002508f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0025093:	83 c4 18             	add    esp,0x18
c0025096:	5b                   	pop    ebx
c0025097:	e9 c0 18 ff ff       	jmp    c001695c <createPartitionsForDisk(PhysicalDisk*)>

c002509c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c002509c:	55                   	push   ebp
c002509d:	57                   	push   edi
c002509e:	56                   	push   esi
c002509f:	53                   	push   ebx
c00250a0:	83 ec 24             	sub    esp,0x24
c00250a3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00250a7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00250ab:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c00250b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00250b5:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00250b9:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c00250bf:	8d 5f 02             	lea    ebx,[edi+0x2]
c00250c2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00250c8:	c1 e3 07             	shl    ebx,0x7
c00250cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00250cf:	89 f8                	mov    eax,edi
c00250d1:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00250d5:	c1 e0 07             	shl    eax,0x7
c00250d8:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00250dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00250e0:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00250ea:	53                   	push   ebx
c00250eb:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c00250f1:	e8 d6 eb ff ff       	call   c0023ccc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00250f6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00250fa:	83 c4 10             	add    esp,0x10
c00250fd:	b8 01 00 00 00       	mov    eax,0x1
c0025102:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0025107:	0f 84 8a 01 00 00    	je     c0025297 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c002510d:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0025113:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025115:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002511b:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0025121:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0025125:	c1 e1 05             	shl    ecx,0x5
c0025128:	01 c8                	add    eax,ecx
c002512a:	8b 08                	mov    ecx,DWORD PTR [eax]
c002512c:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0025132:	81 c9 25 00 01 00    	or     ecx,0x10025
c0025138:	89 08                	mov    DWORD PTR [eax],ecx
c002513a:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0025140:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0025146:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c002514c:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c002514f:	52                   	push   edx
c0025150:	68 90 00 00 00       	push   0x90
c0025155:	6a 00                	push   0x0
c0025157:	53                   	push   ebx
c0025158:	e8 1b b6 fd ff       	call   c0000778 <memset>
c002515d:	83 c4 0c             	add    esp,0xc
c0025160:	8d 43 40             	lea    eax,[ebx+0x40]
c0025163:	6a 0c                	push   0xc
c0025165:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025169:	50                   	push   eax
c002516a:	e8 d5 b5 fd ff       	call   c0000744 <memcpy>
c002516f:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c0025175:	89 ea                	mov    edx,ebp
c0025177:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c002517d:	c1 ea 18             	shr    edx,0x18
c0025180:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025184:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0025187:	8d 48 ff             	lea    ecx,[eax-0x1]
c002518a:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c002518e:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0025194:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c002519a:	25 00 00 c0 ff       	and    eax,0xffc00000
c002519f:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c00251a3:	09 c8                	or     eax,ecx
c00251a5:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c00251a9:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c00251af:	66 8b 03             	mov    ax,WORD PTR [ebx]
c00251b2:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c00251b9:	66 25 00 7f          	and    ax,0x7f00
c00251bd:	66 0d 27 80          	or     ax,0x8027
c00251c1:	66 89 03             	mov    WORD PTR [ebx],ax
c00251c4:	89 e8                	mov    eax,ebp
c00251c6:	c1 e8 10             	shr    eax,0x10
c00251c9:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00251cc:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00251d0:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c00251d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00251d7:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c00251da:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00251de:	83 c4 10             	add    esp,0x10
c00251e1:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c00251e5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00251e9:	31 c0                	xor    eax,eax
c00251eb:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c00251f1:	80 e1 88             	and    cl,0x88
c00251f4:	74 0a                	je     c0025200 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c00251f6:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00251fb:	74 0a                	je     c0025207 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c00251fd:	40                   	inc    eax
c00251fe:	eb eb                	jmp    c00251eb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c0025200:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025205:	75 0f                	jne    c0025216 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c0025207:	83 ec 0c             	sub    esp,0xc
c002520a:	68 79 d0 02 c0       	push   0xc002d079
c002520f:	e8 c1 53 ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c0025214:	eb 3a                	jmp    c0025250 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c0025216:	b8 01 00 00 00       	mov    eax,0x1
c002521b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002521f:	c1 e7 07             	shl    edi,0x7
c0025222:	d3 e0                	shl    eax,cl
c0025224:	03 3c 24             	add    edi,DWORD PTR [esp]
c0025227:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c002522d:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c0025233:	85 d0                	test   eax,edx
c0025235:	74 23                	je     c002525a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c0025237:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c002523d:	0f ba e2 1e          	bt     edx,0x1e
c0025241:	73 ea                	jae    c002522d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c0025243:	83 ec 0c             	sub    esp,0xc
c0025246:	68 0b d1 02 c0       	push   0xc002d10b
c002524b:	e8 e4 dc fe ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0025250:	83 c4 10             	add    esp,0x10
c0025253:	b8 01 00 00 00       	mov    eax,0x1
c0025258:	eb 3d                	jmp    c0025297 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c002525a:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0025260:	0f ba e0 1e          	bt     eax,0x1e
c0025264:	73 0a                	jae    c0025270 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c0025266:	83 ec 0c             	sub    esp,0xc
c0025269:	68 1e d1 02 c0       	push   0xc002d11e
c002526e:	eb db                	jmp    c002524b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c0025270:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0025275:	74 1e                	je     c0025295 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0025277:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c002527c:	74 17                	je     c0025295 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c002527e:	50                   	push   eax
c002527f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025283:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c0025289:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c002528d:	e8 b2 b4 fd ff       	call   c0000744 <memcpy>
c0025292:	83 c4 10             	add    esp,0x10
c0025295:	31 c0                	xor    eax,eax
c0025297:	83 c4 1c             	add    esp,0x1c
c002529a:	5b                   	pop    ebx
c002529b:	5e                   	pop    esi
c002529c:	5f                   	pop    edi
c002529d:	5d                   	pop    ebp
c002529e:	c3                   	ret    
c002529f:	90                   	nop

c00252a0 <SATAPI::eject()>:
c00252a0:	57                   	push   edi
c00252a1:	b9 03 00 00 00       	mov    ecx,0x3
c00252a6:	53                   	push   ebx
c00252a7:	83 ec 14             	sub    esp,0x14
c00252aa:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00252ae:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00252b2:	fc                   	cld    
c00252b3:	31 c0                	xor    eax,eax
c00252b5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00252b7:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00252bc:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00252c1:	50                   	push   eax
c00252c2:	6a 00                	push   0x0
c00252c4:	6a 00                	push   0x0
c00252c6:	6a 00                	push   0x0
c00252c8:	6a 00                	push   0x0
c00252ca:	6a 02                	push   0x2
c00252cc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00252d0:	50                   	push   eax
c00252d1:	53                   	push   ebx
c00252d2:	e8 c5 fd ff ff       	call   c002509c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00252d7:	83 c4 14             	add    esp,0x14
c00252da:	53                   	push   ebx
c00252db:	e8 72 fd ff ff       	call   c0025052 <SATAPI::diskRemoved()>
c00252e0:	83 c4 24             	add    esp,0x24
c00252e3:	31 c0                	xor    eax,eax
c00252e5:	5b                   	pop    ebx
c00252e6:	5f                   	pop    edi
c00252e7:	c3                   	ret    

c00252e8 <SATAPI::detectMedia()>:
c00252e8:	56                   	push   esi
c00252e9:	53                   	push   ebx
c00252ea:	83 ec 28             	sub    esp,0x28
c00252ed:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00252f1:	6a 0c                	push   0xc
c00252f3:	6a 00                	push   0x0
c00252f5:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00252f9:	56                   	push   esi
c00252fa:	e8 79 b4 fd ff       	call   c0000778 <memset>
c00252ff:	83 c4 0c             	add    esp,0xc
c0025302:	6a 00                	push   0x0
c0025304:	6a 00                	push   0x0
c0025306:	6a 00                	push   0x0
c0025308:	6a 00                	push   0x0
c002530a:	6a 00                	push   0x0
c002530c:	56                   	push   esi
c002530d:	53                   	push   ebx
c002530e:	e8 89 fd ff ff       	call   c002509c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025313:	83 c4 1c             	add    esp,0x1c
c0025316:	6a 0c                	push   0xc
c0025318:	6a 00                	push   0x0
c002531a:	56                   	push   esi
c002531b:	e8 58 b4 fd ff       	call   c0000778 <memset>
c0025320:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025325:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002532a:	83 c4 0c             	add    esp,0xc
c002532d:	6a 01                	push   0x1
c002532f:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025333:	50                   	push   eax
c0025334:	6a 00                	push   0x0
c0025336:	6a 00                	push   0x0
c0025338:	6a 12                	push   0x12
c002533a:	56                   	push   esi
c002533b:	53                   	push   ebx
c002533c:	e8 5b fd ff ff       	call   c002509c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025341:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025345:	83 c4 20             	add    esp,0x20
c0025348:	83 e0 7f             	and    eax,0x7f
c002534b:	3c 70                	cmp    al,0x70
c002534d:	74 15                	je     c0025364 <SATAPI::detectMedia()+0x7c>
c002534f:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025356:	75 0c                	jne    c0025364 <SATAPI::detectMedia()+0x7c>
c0025358:	83 ec 0c             	sub    esp,0xc
c002535b:	53                   	push   ebx
c002535c:	e8 0d fd ff ff       	call   c002506e <SATAPI::diskInserted()>
c0025361:	83 c4 10             	add    esp,0x10
c0025364:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025368:	83 e0 0f             	and    eax,0xf
c002536b:	3c 02                	cmp    al,0x2
c002536d:	75 1b                	jne    c002538a <SATAPI::detectMedia()+0xa2>
c002536f:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025374:	75 2d                	jne    c00253a3 <SATAPI::detectMedia()+0xbb>
c0025376:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002537d:	74 24                	je     c00253a3 <SATAPI::detectMedia()+0xbb>
c002537f:	83 ec 0c             	sub    esp,0xc
c0025382:	53                   	push   ebx
c0025383:	e8 ca fc ff ff       	call   c0025052 <SATAPI::diskRemoved()>
c0025388:	eb 16                	jmp    c00253a0 <SATAPI::detectMedia()+0xb8>
c002538a:	84 c0                	test   al,al
c002538c:	75 15                	jne    c00253a3 <SATAPI::detectMedia()+0xbb>
c002538e:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025395:	75 0c                	jne    c00253a3 <SATAPI::detectMedia()+0xbb>
c0025397:	83 ec 0c             	sub    esp,0xc
c002539a:	53                   	push   ebx
c002539b:	e8 ce fc ff ff       	call   c002506e <SATAPI::diskInserted()>
c00253a0:	83 c4 10             	add    esp,0x10
c00253a3:	83 c4 24             	add    esp,0x24
c00253a6:	5b                   	pop    ebx
c00253a7:	5e                   	pop    esi
c00253a8:	c3                   	ret    
c00253a9:	90                   	nop

c00253aa <SATAPI::open(int, int, void*)>:
c00253aa:	56                   	push   esi
c00253ab:	53                   	push   ebx
c00253ac:	50                   	push   eax
c00253ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00253b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00253b5:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00253bf:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00253c5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00253cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253d3:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00253dd:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00253e3:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00253ea:	e8 f3 aa fe ff       	call   c000fee2 <Phys::allocatePage()>
c00253ef:	89 c6                	mov    esi,eax
c00253f1:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00253f7:	81 c6 00 10 00 00    	add    esi,0x1000
c00253fd:	e8 e0 aa fe ff       	call   c000fee2 <Phys::allocatePage()>
c0025402:	39 c6                	cmp    esi,eax
c0025404:	74 10                	je     c0025416 <SATAPI::open(int, int, void*)+0x6c>
c0025406:	83 ec 0c             	sub    esp,0xc
c0025409:	68 33 d1 02 c0       	push   0xc002d133
c002540e:	e8 c2 51 ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c0025413:	83 c4 10             	add    esp,0x10
c0025416:	83 ec 0c             	sub    esp,0xc
c0025419:	6a 02                	push   0x2
c002541b:	e8 6b c7 fe ff       	call   c0011b8b <Virt::allocateKernelVirtualPages(int)>
c0025420:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025426:	e8 fb c9 fe ff       	call   c0011e26 <Virt::getAKernelVAS()>
c002542b:	6a 03                	push   0x3
c002542d:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0025433:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025439:	50                   	push   eax
c002543a:	e8 23 cf fe ff       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c002543f:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025446:	83 c4 14             	add    esp,0x14
c0025449:	53                   	push   ebx
c002544a:	e8 99 fe ff ff       	call   c00252e8 <SATAPI::detectMedia()>
c002544f:	83 c4 14             	add    esp,0x14
c0025452:	31 c0                	xor    eax,eax
c0025454:	5b                   	pop    ebx
c0025455:	5e                   	pop    esi
c0025456:	c3                   	ret    
c0025457:	90                   	nop

c0025458 <SATAPI::read(unsigned long long, int, void*)>:
c0025458:	55                   	push   ebp
c0025459:	57                   	push   edi
c002545a:	56                   	push   esi
c002545b:	53                   	push   ebx
c002545c:	83 ec 1c             	sub    esp,0x1c
c002545f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025463:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025467:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002546b:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025472:	74 19                	je     c002548d <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025474:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025479:	7e 2e                	jle    c00254a9 <SATAPI::read(unsigned long long, int, void*)+0x51>
c002547b:	83 ec 0c             	sub    esp,0xc
c002547e:	68 49 d1 02 c0       	push   0xc002d149
c0025483:	e8 4d 51 ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c0025488:	83 c4 10             	add    esp,0x10
c002548b:	eb 1c                	jmp    c00254a9 <SATAPI::read(unsigned long long, int, void*)+0x51>
c002548d:	83 ec 0c             	sub    esp,0xc
c0025490:	55                   	push   ebp
c0025491:	e8 52 fe ff ff       	call   c00252e8 <SATAPI::detectMedia()>
c0025496:	83 c4 10             	add    esp,0x10
c0025499:	b8 02 00 00 00       	mov    eax,0x2
c002549e:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00254a5:	75 cd                	jne    c0025474 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c00254a7:	eb 49                	jmp    c00254f2 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c00254a9:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00254ad:	b9 03 00 00 00       	mov    ecx,0x3
c00254b2:	fc                   	cld    
c00254b3:	31 c0                	xor    eax,eax
c00254b5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00254b7:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00254bc:	89 d8                	mov    eax,ebx
c00254be:	86 e0                	xchg   al,ah
c00254c0:	c1 c0 10             	rol    eax,0x10
c00254c3:	86 e0                	xchg   al,ah
c00254c5:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c00254c9:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c00254cd:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00254d1:	50                   	push   eax
c00254d2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00254d6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00254da:	56                   	push   esi
c00254db:	53                   	push   ebx
c00254dc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00254e0:	c1 e0 0b             	shl    eax,0xb
c00254e3:	50                   	push   eax
c00254e4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00254e8:	50                   	push   eax
c00254e9:	55                   	push   ebp
c00254ea:	e8 ad fb ff ff       	call   c002509c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00254ef:	83 c4 20             	add    esp,0x20
c00254f2:	83 c4 1c             	add    esp,0x1c
c00254f5:	5b                   	pop    ebx
c00254f6:	5e                   	pop    esi
c00254f7:	5f                   	pop    edi
c00254f8:	5d                   	pop    ebp
c00254f9:	c3                   	ret    

c00254fa <AVX::open(int, int, void*)>:
c00254fa:	83 ec 0c             	sub    esp,0xc
c00254fd:	e8 46 11 00 00       	call   c0026648 <avxInit>
c0025502:	b8 00 00 00 00       	mov    eax,0x0
c0025507:	83 c4 0c             	add    esp,0xc
c002550a:	c3                   	ret    
c002550b:	90                   	nop

c002550c <AVX::close(int, int, void*)>:
c002550c:	83 ec 0c             	sub    esp,0xc
c002550f:	e8 35 11 00 00       	call   c0026649 <avxClose>
c0025514:	b8 00 00 00 00       	mov    eax,0x0
c0025519:	83 c4 0c             	add    esp,0xc
c002551c:	c3                   	ret    
c002551d:	90                   	nop

c002551e <AVX::available()>:
c002551e:	83 ec 0c             	sub    esp,0xc
c0025521:	e8 1a 11 00 00       	call   c0026640 <avxDetect>
c0025526:	85 c0                	test   eax,eax
c0025528:	0f 95 c0             	setne  al
c002552b:	83 c4 0c             	add    esp,0xc
c002552e:	c3                   	ret    
c002552f:	90                   	nop

c0025530 <AVX::save(void*)>:
c0025530:	83 ec 0c             	sub    esp,0xc
c0025533:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025537:	83 ec 0c             	sub    esp,0xc
c002553a:	50                   	push   eax
c002553b:	e8 06 11 00 00       	call   c0026646 <avxSave>
c0025540:	83 c4 10             	add    esp,0x10
c0025543:	90                   	nop
c0025544:	83 c4 0c             	add    esp,0xc
c0025547:	c3                   	ret    

c0025548 <AVX::load(void*)>:
c0025548:	83 ec 0c             	sub    esp,0xc
c002554b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002554f:	83 ec 0c             	sub    esp,0xc
c0025552:	50                   	push   eax
c0025553:	e8 ef 10 00 00       	call   c0026647 <avxLoad>
c0025558:	83 c4 10             	add    esp,0x10
c002555b:	90                   	nop
c002555c:	83 c4 0c             	add    esp,0xc
c002555f:	c3                   	ret    

c0025560 <AVX::AVX()>:
c0025560:	83 ec 0c             	sub    esp,0xc
c0025563:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025567:	83 ec 08             	sub    esp,0x8
c002556a:	68 ac d1 02 c0       	push   0xc002d1ac
c002556f:	50                   	push   eax
c0025570:	e8 e7 f2 fe ff       	call   c001485c <FPU::FPU(char const*)>
c0025575:	83 c4 10             	add    esp,0x10
c0025578:	ba bc d1 02 c0       	mov    edx,0xc002d1bc
c002557d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025581:	89 10                	mov    DWORD PTR [eax],edx
c0025583:	90                   	nop
c0025584:	83 c4 0c             	add    esp,0xc
c0025587:	c3                   	ret    

c0025588 <MMX::available()>:
c0025588:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c002558d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025593:	83 e0 20             	and    eax,0x20
c0025596:	84 c0                	test   al,al
c0025598:	0f 95 c0             	setne  al
c002559b:	c3                   	ret    

c002559c <MMX::open(int, int, void*)>:
c002559c:	83 ec 0c             	sub    esp,0xc
c002559f:	e8 28 11 00 00       	call   c00266cc <x87Init>
c00255a4:	b8 00 00 00 00       	mov    eax,0x0
c00255a9:	83 c4 0c             	add    esp,0xc
c00255ac:	c3                   	ret    
c00255ad:	90                   	nop

c00255ae <MMX::close(int, int, void*)>:
c00255ae:	83 ec 0c             	sub    esp,0xc
c00255b1:	e8 30 11 00 00       	call   c00266e6 <x87Close>
c00255b6:	b8 00 00 00 00       	mov    eax,0x0
c00255bb:	83 c4 0c             	add    esp,0xc
c00255be:	c3                   	ret    
c00255bf:	90                   	nop

c00255c0 <MMX::save(void*)>:
c00255c0:	83 ec 0c             	sub    esp,0xc
c00255c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255c7:	83 ec 0c             	sub    esp,0xc
c00255ca:	50                   	push   eax
c00255cb:	e8 f1 10 00 00       	call   c00266c1 <x87Save>
c00255d0:	83 c4 10             	add    esp,0x10
c00255d3:	90                   	nop
c00255d4:	83 c4 0c             	add    esp,0xc
c00255d7:	c3                   	ret    

c00255d8 <MMX::load(void*)>:
c00255d8:	83 ec 0c             	sub    esp,0xc
c00255db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255df:	83 ec 0c             	sub    esp,0xc
c00255e2:	50                   	push   eax
c00255e3:	e8 df 10 00 00       	call   c00266c7 <x87Load>
c00255e8:	83 c4 10             	add    esp,0x10
c00255eb:	90                   	nop
c00255ec:	83 c4 0c             	add    esp,0xc
c00255ef:	c3                   	ret    

c00255f0 <MMX::MMX()>:
c00255f0:	83 ec 0c             	sub    esp,0xc
c00255f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255f7:	83 ec 08             	sub    esp,0x8
c00255fa:	68 ec d1 02 c0       	push   0xc002d1ec
c00255ff:	50                   	push   eax
c0025600:	e8 57 f2 fe ff       	call   c001485c <FPU::FPU(char const*)>
c0025605:	83 c4 10             	add    esp,0x10
c0025608:	ba fc d1 02 c0       	mov    edx,0xc002d1fc
c002560d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025611:	89 10                	mov    DWORD PTR [eax],edx
c0025613:	90                   	nop
c0025614:	83 c4 0c             	add    esp,0xc
c0025617:	c3                   	ret    

c0025618 <SSE::open(int, int, void*)>:
c0025618:	83 ec 0c             	sub    esp,0xc
c002561b:	e8 64 10 00 00       	call   c0026684 <sseInit>
c0025620:	b8 00 00 00 00       	mov    eax,0x0
c0025625:	83 c4 0c             	add    esp,0xc
c0025628:	c3                   	ret    
c0025629:	90                   	nop

c002562a <SSE::close(int, int, void*)>:
c002562a:	83 ec 0c             	sub    esp,0xc
c002562d:	e8 62 10 00 00       	call   c0026694 <sseClose>
c0025632:	b8 00 00 00 00       	mov    eax,0x0
c0025637:	83 c4 0c             	add    esp,0xc
c002563a:	c3                   	ret    
c002563b:	90                   	nop

c002563c <SSE::available()>:
c002563c:	83 ec 1c             	sub    esp,0x1c
c002563f:	e8 1c 10 00 00       	call   c0026660 <absolutelyNoChanceInHell>
c0025644:	85 c0                	test   eax,eax
c0025646:	0f 95 c0             	setne  al
c0025649:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002564d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025651:	83 c4 1c             	add    esp,0x1c
c0025654:	c3                   	ret    
c0025655:	90                   	nop

c0025656 <SSE::save(void*)>:
c0025656:	83 ec 0c             	sub    esp,0xc
c0025659:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002565d:	83 ec 0c             	sub    esp,0xc
c0025660:	50                   	push   eax
c0025661:	e8 12 10 00 00       	call   c0026678 <sseSave>
c0025666:	83 c4 10             	add    esp,0x10
c0025669:	90                   	nop
c002566a:	83 c4 0c             	add    esp,0xc
c002566d:	c3                   	ret    

c002566e <SSE::load(void*)>:
c002566e:	83 ec 0c             	sub    esp,0xc
c0025671:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025675:	83 ec 0c             	sub    esp,0xc
c0025678:	50                   	push   eax
c0025679:	e8 00 10 00 00       	call   c002667e <sseLoad>
c002567e:	83 c4 10             	add    esp,0x10
c0025681:	90                   	nop
c0025682:	83 c4 0c             	add    esp,0xc
c0025685:	c3                   	ret    

c0025686 <SSE::SSE()>:
c0025686:	83 ec 0c             	sub    esp,0xc
c0025689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002568d:	83 ec 08             	sub    esp,0x8
c0025690:	68 2c d2 02 c0       	push   0xc002d22c
c0025695:	50                   	push   eax
c0025696:	e8 c1 f1 fe ff       	call   c001485c <FPU::FPU(char const*)>
c002569b:	83 c4 10             	add    esp,0x10
c002569e:	ba 3c d2 02 c0       	mov    edx,0xc002d23c
c00256a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256a7:	89 10                	mov    DWORD PTR [eax],edx
c00256a9:	90                   	nop
c00256aa:	83 c4 0c             	add    esp,0xc
c00256ad:	c3                   	ret    

c00256ae <x87::open(int, int, void*)>:
c00256ae:	83 ec 0c             	sub    esp,0xc
c00256b1:	e8 16 10 00 00       	call   c00266cc <x87Init>
c00256b6:	b8 00 00 00 00       	mov    eax,0x0
c00256bb:	83 c4 0c             	add    esp,0xc
c00256be:	c3                   	ret    
c00256bf:	90                   	nop

c00256c0 <x87::close(int, int, void*)>:
c00256c0:	83 ec 0c             	sub    esp,0xc
c00256c3:	e8 1e 10 00 00       	call   c00266e6 <x87Close>
c00256c8:	b8 00 00 00 00       	mov    eax,0x0
c00256cd:	83 c4 0c             	add    esp,0xc
c00256d0:	c3                   	ret    
c00256d1:	90                   	nop

c00256d2 <x87::available()>:
c00256d2:	83 ec 0c             	sub    esp,0xc
c00256d5:	e8 cc 0f 00 00       	call   c00266a6 <x87Detect>
c00256da:	85 c0                	test   eax,eax
c00256dc:	0f 95 c0             	setne  al
c00256df:	83 c4 0c             	add    esp,0xc
c00256e2:	c3                   	ret    
c00256e3:	90                   	nop

c00256e4 <x87::save(void*)>:
c00256e4:	83 ec 0c             	sub    esp,0xc
c00256e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256eb:	83 ec 0c             	sub    esp,0xc
c00256ee:	50                   	push   eax
c00256ef:	e8 cd 0f 00 00       	call   c00266c1 <x87Save>
c00256f4:	83 c4 10             	add    esp,0x10
c00256f7:	90                   	nop
c00256f8:	83 c4 0c             	add    esp,0xc
c00256fb:	c3                   	ret    

c00256fc <x87::load(void*)>:
c00256fc:	83 ec 0c             	sub    esp,0xc
c00256ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025703:	83 ec 0c             	sub    esp,0xc
c0025706:	50                   	push   eax
c0025707:	e8 bb 0f 00 00       	call   c00266c7 <x87Load>
c002570c:	83 c4 10             	add    esp,0x10
c002570f:	90                   	nop
c0025710:	83 c4 0c             	add    esp,0xc
c0025713:	c3                   	ret    

c0025714 <x87::x87()>:
c0025714:	83 ec 0c             	sub    esp,0xc
c0025717:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002571b:	83 ec 08             	sub    esp,0x8
c002571e:	68 6c d2 02 c0       	push   0xc002d26c
c0025723:	50                   	push   eax
c0025724:	e8 33 f1 fe ff       	call   c001485c <FPU::FPU(char const*)>
c0025729:	83 c4 10             	add    esp,0x10
c002572c:	ba 7c d2 02 c0       	mov    edx,0xc002d27c
c0025731:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025735:	89 10                	mov    DWORD PTR [eax],edx
c0025737:	90                   	nop
c0025738:	83 c4 0c             	add    esp,0xc
c002573b:	c3                   	ret    

c002573c <APIC::disable()>:
c002573c:	90                   	nop
c002573d:	c3                   	ret    

c002573e <APIC::close(int, int, void*)>:
c002573e:	55                   	push   ebp
c002573f:	89 e5                	mov    ebp,esp
c0025741:	83 ec 08             	sub    esp,0x8
c0025744:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025747:	8b 00                	mov    eax,DWORD PTR [eax]
c0025749:	83 c0 3c             	add    eax,0x3c
c002574c:	8b 00                	mov    eax,DWORD PTR [eax]
c002574e:	83 ec 0c             	sub    esp,0xc
c0025751:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025754:	ff d0                	call   eax
c0025756:	83 c4 10             	add    esp,0x10
c0025759:	b8 00 00 00 00       	mov    eax,0x0
c002575e:	c9                   	leave  
c002575f:	c3                   	ret    

c0025760 <IOAPIC::close(int, int, void*)>:
c0025760:	b8 00 00 00 00       	mov    eax,0x0
c0025765:	c3                   	ret    

c0025766 <APIC::io_wait()>:
c0025766:	eb 00                	jmp    c0025768 <APIC::io_wait()+0x2>
c0025768:	eb 00                	jmp    c002576a <APIC::io_wait()+0x4>
c002576a:	90                   	nop
c002576b:	c3                   	ret    

c002576c <APIC::getBase()>:
c002576c:	55                   	push   ebp
c002576d:	89 e5                	mov    ebp,esp
c002576f:	83 ec 18             	sub    esp,0x18
c0025772:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0025777:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002577d:	83 e0 08             	and    eax,0x8
c0025780:	84 c0                	test   al,al
c0025782:	75 07                	jne    c002578b <APIC::getBase()+0x1f>
c0025784:	b8 00 00 00 00       	mov    eax,0x0
c0025789:	eb 21                	jmp    c00257ac <APIC::getBase()+0x40>
c002578b:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0025790:	83 ec 08             	sub    esp,0x8
c0025793:	6a 1b                	push   0x1b
c0025795:	50                   	push   eax
c0025796:	e8 4d 96 fe ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c002579b:	83 c4 10             	add    esp,0x10
c002579e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00257a1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00257a4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00257a7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00257ac:	c9                   	leave  
c00257ad:	c3                   	ret    

c00257ae <APIC::eoi(unsigned char)>:
c00257ae:	55                   	push   ebp
c00257af:	89 e5                	mov    ebp,esp
c00257b1:	83 ec 28             	sub    esp,0x28
c00257b4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00257b7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00257ba:	83 ec 0c             	sub    esp,0xc
c00257bd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257c0:	e8 a7 ff ff ff       	call   c002576c <APIC::getBase()>
c00257c5:	83 c4 10             	add    esp,0x10
c00257c8:	05 b0 00 00 00       	add    eax,0xb0
c00257cd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00257d0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00257d3:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00257d9:	90                   	nop
c00257da:	c9                   	leave  
c00257db:	c3                   	ret    

c00257dc <APIC::open(int, int, void*)>:
c00257dc:	55                   	push   ebp
c00257dd:	89 e5                	mov    ebp,esp
c00257df:	57                   	push   edi
c00257e0:	56                   	push   esi
c00257e1:	53                   	push   ebx
c00257e2:	83 ec 2c             	sub    esp,0x2c
c00257e5:	83 ec 0c             	sub    esp,0xc
c00257e8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257eb:	e8 7c ff ff ff       	call   c002576c <APIC::getBase()>
c00257f0:	83 c4 10             	add    esp,0x10
c00257f3:	89 c2                	mov    edx,eax
c00257f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257f8:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00257fe:	0f b6 f8             	movzx  edi,al
c0025801:	89 d0                	mov    eax,edx
c0025803:	ba 00 00 00 00       	mov    edx,0x0
c0025808:	89 c1                	mov    ecx,eax
c002580a:	80 e5 ff             	and    ch,0xff
c002580d:	89 cb                	mov    ebx,ecx
c002580f:	0f b6 f2             	movzx  esi,dl
c0025812:	89 d8                	mov    eax,ebx
c0025814:	89 f2                	mov    edx,esi
c0025816:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025819:	8d 5f 08             	lea    ebx,[edi+0x8]
c002581c:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025820:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025824:	83 e0 00             	and    eax,0x0
c0025827:	09 d0                	or     eax,edx
c0025829:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002582d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025830:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025836:	8d 50 01             	lea    edx,[eax+0x1]
c0025839:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002583c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025842:	0f b6 d0             	movzx  edx,al
c0025845:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025848:	83 c2 08             	add    edx,0x8
c002584b:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002584f:	0f b6 c9             	movzx  ecx,cl
c0025852:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025858:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002585c:	83 ec 0c             	sub    esp,0xc
c002585f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025862:	e8 05 ff ff ff       	call   c002576c <APIC::getBase()>
c0025867:	83 c4 10             	add    esp,0x10
c002586a:	05 f0 00 00 00       	add    eax,0xf0
c002586f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025872:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025875:	8b 00                	mov    eax,DWORD PTR [eax]
c0025877:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002587a:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0025881:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0025888:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002588b:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002588e:	89 10                	mov    DWORD PTR [eax],edx
c0025890:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0025897:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c002589c:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c002589f:	7d 7c                	jge    c002591d <APIC::open(int, int, void*)+0x141>
c00258a1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00258a4:	8b 04 85 c0 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf140]
c00258ab:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00258ae:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00258b1:	8b 04 85 c0 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf140]
c00258b8:	c1 e8 08             	shr    eax,0x8
c00258bb:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00258bf:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00258c2:	8b 04 85 c0 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf140]
c00258c9:	c1 e8 18             	shr    eax,0x18
c00258cc:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00258cf:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00258d3:	75 40                	jne    c0025915 <APIC::open(int, int, void*)+0x139>
c00258d5:	83 ec 0c             	sub    esp,0xc
c00258d8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258db:	e8 8c fe ff ff       	call   c002576c <APIC::getBase()>
c00258e0:	83 c4 10             	add    esp,0x10
c00258e3:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00258e7:	75 07                	jne    c00258f0 <APIC::open(int, int, void*)+0x114>
c00258e9:	ba 60 03 00 00       	mov    edx,0x360
c00258ee:	eb 05                	jmp    c00258f5 <APIC::open(int, int, void*)+0x119>
c00258f0:	ba 50 03 00 00       	mov    edx,0x350
c00258f5:	01 d0                	add    eax,edx
c00258f7:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00258fa:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00258fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00258ff:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0025902:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0025909:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c002590d:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025910:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025913:	89 10                	mov    DWORD PTR [eax],edx
c0025915:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0025918:	e9 7a ff ff ff       	jmp    c0025897 <APIC::open(int, int, void*)+0xbb>
c002591d:	b8 00 00 00 00       	mov    eax,0x0
c0025922:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025925:	5b                   	pop    ebx
c0025926:	5e                   	pop    esi
c0025927:	5f                   	pop    edi
c0025928:	5d                   	pop    ebp
c0025929:	c3                   	ret    

c002592a <IOAPIC::IOAPIC()>:
c002592a:	83 ec 0c             	sub    esp,0xc
c002592d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025931:	83 ec 08             	sub    esp,0x8
c0025934:	68 ac d2 02 c0       	push   0xc002d2ac
c0025939:	50                   	push   eax
c002593a:	e8 0b ec fe ff       	call   c001454a <Device::Device(char const*)>
c002593f:	83 c4 10             	add    esp,0x10
c0025942:	ba d4 d3 02 c0       	mov    edx,0xc002d3d4
c0025947:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002594b:	89 10                	mov    DWORD PTR [eax],edx
c002594d:	90                   	nop
c002594e:	83 c4 0c             	add    esp,0xc
c0025951:	c3                   	ret    

c0025952 <APIC::APIC()>:
c0025952:	53                   	push   ebx
c0025953:	83 ec 18             	sub    esp,0x18
c0025956:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002595a:	83 ec 08             	sub    esp,0x8
c002595d:	68 b4 d2 02 c0       	push   0xc002d2b4
c0025962:	50                   	push   eax
c0025963:	e8 4e f3 fe ff       	call   c0014cb6 <InterruptController::InterruptController(char const*)>
c0025968:	83 c4 10             	add    esp,0x10
c002596b:	ba 8c d3 02 c0       	mov    edx,0xc002d38c
c0025970:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025974:	89 10                	mov    DWORD PTR [eax],edx
c0025976:	a0 80 29 03 c0       	mov    al,ds:0xc0032980
c002597b:	83 f0 01             	xor    eax,0x1
c002597e:	84 c0                	test   al,al
c0025980:	0f 84 a1 00 00 00    	je     c0025a27 <APIC::APIC()+0xd5>
c0025986:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c002598b:	a0 60 0f 03 c0       	mov    al,ds:0xc0030f60
c0025990:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0025994:	0f 83 86 00 00 00    	jae    c0025a20 <APIC::APIC()+0xce>
c002599a:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00259a2:	83 ec 0c             	sub    esp,0xc
c00259a5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00259a9:	e8 92 9e fe ff       	call   c000f840 <malloc>
c00259ae:	83 c4 10             	add    esp,0x10
c00259b1:	89 c3                	mov    ebx,eax
c00259b3:	83 ec 0c             	sub    esp,0xc
c00259b6:	53                   	push   ebx
c00259b7:	e8 6e ff ff ff       	call   c002592a <IOAPIC::IOAPIC()>
c00259bc:	83 c4 10             	add    esp,0x10
c00259bf:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00259c3:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00259c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00259cc:	89 14 85 60 29 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd6a0],edx
c00259d3:	a1 40 29 03 c0       	mov    eax,ds:0xc0032940
c00259d8:	40                   	inc    eax
c00259d9:	a3 40 29 03 c0       	mov    ds:0xc0032940,eax
c00259de:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c00259e3:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00259e9:	83 ec 08             	sub    esp,0x8
c00259ec:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00259f0:	50                   	push   eax
c00259f1:	e8 64 e9 fe ff       	call   c001435a <Device::addChild(Device*)>
c00259f6:	83 c4 10             	add    esp,0x10
c00259f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00259fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00259ff:	83 c0 08             	add    eax,0x8
c0025a02:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a04:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025a09:	6a 00                	push   0x0
c0025a0b:	6a 00                	push   0x0
c0025a0d:	52                   	push   edx
c0025a0e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025a12:	ff d0                	call   eax
c0025a14:	83 c4 10             	add    esp,0x10
c0025a17:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025a1b:	e9 6b ff ff ff       	jmp    c002598b <APIC::APIC()+0x39>
c0025a20:	c6 05 80 29 03 c0 01 	mov    BYTE PTR ds:0xc0032980,0x1
c0025a27:	90                   	nop
c0025a28:	83 c4 18             	add    esp,0x18
c0025a2b:	5b                   	pop    ebx
c0025a2c:	c3                   	ret    
c0025a2d:	90                   	nop

c0025a2e <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025a2e:	55                   	push   ebp
c0025a2f:	89 e5                	mov    ebp,esp
c0025a31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a34:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025a3a:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025a3d:	72 1d                	jb     c0025a5c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025a3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a42:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025a48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a4b:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025a51:	01 d0                	add    eax,edx
c0025a53:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025a56:	73 04                	jae    c0025a5c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025a58:	b0 01                	mov    al,0x1
c0025a5a:	eb 02                	jmp    c0025a5e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025a5c:	b0 00                	mov    al,0x0
c0025a5e:	5d                   	pop    ebp
c0025a5f:	c3                   	ret    

c0025a60 <IOAPIC::read(int)>:
c0025a60:	55                   	push   ebp
c0025a61:	89 e5                	mov    ebp,esp
c0025a63:	83 ec 10             	sub    esp,0x10
c0025a66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a69:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025a6f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025a72:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a75:	0f b6 d0             	movzx  edx,al
c0025a78:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025a7b:	89 10                	mov    DWORD PTR [eax],edx
c0025a7d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025a80:	83 c0 10             	add    eax,0x10
c0025a83:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a85:	c9                   	leave  
c0025a86:	c3                   	ret    
c0025a87:	90                   	nop

c0025a88 <IOAPIC::open(int, int, void*)>:
c0025a88:	55                   	push   ebp
c0025a89:	89 e5                	mov    ebp,esp
c0025a8b:	57                   	push   edi
c0025a8c:	56                   	push   esi
c0025a8d:	53                   	push   ebx
c0025a8e:	83 ec 0c             	sub    esp,0xc
c0025a91:	83 ec 0c             	sub    esp,0xc
c0025a94:	68 df d2 02 c0       	push   0xc002d2df
c0025a99:	e8 96 d4 fe ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0025a9e:	83 c4 10             	add    esp,0x10
c0025aa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025aa4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025aa7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025aad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ab0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025ab6:	8b 14 85 a0 0f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf060]
c0025abd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ac0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025ac6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ac9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025acf:	8b 14 85 20 10 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcefe0]
c0025ad6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ad9:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025adf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ae2:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025ae8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025aeb:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025af1:	0f b6 f8             	movzx  edi,al
c0025af4:	89 d0                	mov    eax,edx
c0025af6:	ba 00 00 00 00       	mov    edx,0x0
c0025afb:	89 c1                	mov    ecx,eax
c0025afd:	80 e5 ff             	and    ch,0xff
c0025b00:	89 cb                	mov    ebx,ecx
c0025b02:	0f b6 f2             	movzx  esi,dl
c0025b05:	89 d8                	mov    eax,ebx
c0025b07:	89 f2                	mov    edx,esi
c0025b09:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025b0c:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025b0f:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025b13:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025b17:	83 e0 00             	and    eax,0x0
c0025b1a:	09 d0                	or     eax,edx
c0025b1c:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025b20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b23:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025b29:	8d 50 01             	lea    edx,[eax+0x1]
c0025b2c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025b2f:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025b35:	0f b6 d0             	movzx  edx,al
c0025b38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b3b:	83 c2 08             	add    edx,0x8
c0025b3e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025b42:	0f b6 c9             	movzx  ecx,cl
c0025b45:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025b4b:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025b4f:	83 ec 08             	sub    esp,0x8
c0025b52:	6a 01                	push   0x1
c0025b54:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b57:	e8 04 ff ff ff       	call   c0025a60 <IOAPIC::read(int)>
c0025b5c:	83 c4 10             	add    esp,0x10
c0025b5f:	c1 f8 10             	sar    eax,0x10
c0025b62:	0f b6 c0             	movzx  eax,al
c0025b65:	8d 50 01             	lea    edx,[eax+0x1]
c0025b68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b6b:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025b71:	b8 00 00 00 00       	mov    eax,0x0
c0025b76:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025b79:	5b                   	pop    ebx
c0025b7a:	5e                   	pop    esi
c0025b7b:	5f                   	pop    edi
c0025b7c:	5d                   	pop    ebp
c0025b7d:	c3                   	ret    

c0025b7e <IOAPIC::write(int, int)>:
c0025b7e:	55                   	push   ebp
c0025b7f:	89 e5                	mov    ebp,esp
c0025b81:	83 ec 10             	sub    esp,0x10
c0025b84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b87:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025b8d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025b90:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b93:	0f b6 d0             	movzx  edx,al
c0025b96:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b99:	89 10                	mov    DWORD PTR [eax],edx
c0025b9b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b9e:	8d 50 10             	lea    edx,[eax+0x10]
c0025ba1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025ba4:	89 02                	mov    DWORD PTR [edx],eax
c0025ba6:	90                   	nop
c0025ba7:	c9                   	leave  
c0025ba8:	c3                   	ret    
c0025ba9:	90                   	nop

c0025baa <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025baa:	55                   	push   ebp
c0025bab:	89 e5                	mov    ebp,esp
c0025bad:	53                   	push   ebx
c0025bae:	83 ec 2c             	sub    esp,0x2c
c0025bb1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025bb4:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025bb7:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025bba:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025bbd:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025bc0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025bc3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025bc6:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025bc9:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025bcc:	88 d8                	mov    al,bl
c0025bce:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025bd1:	88 c8                	mov    al,cl
c0025bd3:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025bd6:	88 d0                	mov    al,dl
c0025bd8:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025bdb:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025bdf:	83 c0 08             	add    eax,0x8
c0025be2:	01 c0                	add    eax,eax
c0025be4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025be7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025beb:	83 c0 08             	add    eax,0x8
c0025bee:	01 c0                	add    eax,eax
c0025bf0:	40                   	inc    eax
c0025bf1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025bf4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025bf7:	50                   	push   eax
c0025bf8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bfb:	e8 60 fe ff ff       	call   c0025a60 <IOAPIC::read(int)>
c0025c00:	83 c4 08             	add    esp,0x8
c0025c03:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025c06:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025c0d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025c10:	c1 e0 18             	shl    eax,0x18
c0025c13:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025c16:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025c19:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025c1c:	52                   	push   edx
c0025c1d:	50                   	push   eax
c0025c1e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c21:	e8 58 ff ff ff       	call   c0025b7e <IOAPIC::write(int, int)>
c0025c26:	83 c4 0c             	add    esp,0xc
c0025c29:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025c2c:	50                   	push   eax
c0025c2d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c30:	e8 2b fe ff ff       	call   c0025a60 <IOAPIC::read(int)>
c0025c35:	83 c4 08             	add    esp,0x8
c0025c38:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025c3b:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025c42:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025c49:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025c50:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025c54:	74 09                	je     c0025c5f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025c56:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025c5d:	eb 07                	jmp    c0025c66 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025c5f:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025c66:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025c6a:	74 09                	je     c0025c75 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025c6c:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025c73:	eb 07                	jmp    c0025c7c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025c75:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025c7c:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025c83:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025c87:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025c8a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025c8d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025c90:	52                   	push   edx
c0025c91:	50                   	push   eax
c0025c92:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c95:	e8 e4 fe ff ff       	call   c0025b7e <IOAPIC::write(int, int)>
c0025c9a:	83 c4 0c             	add    esp,0xc
c0025c9d:	90                   	nop
c0025c9e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025ca1:	c9                   	leave  
c0025ca2:	c3                   	ret    
c0025ca3:	90                   	nop

c0025ca4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025ca4:	55                   	push   ebp
c0025ca5:	89 e5                	mov    ebp,esp
c0025ca7:	57                   	push   edi
c0025ca8:	56                   	push   esi
c0025ca9:	53                   	push   ebx
c0025caa:	83 ec 2c             	sub    esp,0x2c
c0025cad:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025cb0:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025cb3:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025cb7:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025cbb:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025cbf:	74 5a                	je     c0025d1b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025cc1:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025cc5:	7f 44                	jg     c0025d0b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025cc7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025cca:	05 20 d8 02 c0       	add    eax,0xc002d820
c0025ccf:	8a 00                	mov    al,BYTE PTR [eax]
c0025cd1:	0f b6 c0             	movzx  eax,al
c0025cd4:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025cd7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025cda:	66 8b 84 00 40 0f 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf0c0]
c0025ce2:	0f b7 c0             	movzx  eax,ax
c0025ce5:	83 e0 02             	and    eax,0x2
c0025ce8:	85 c0                	test   eax,eax
c0025cea:	74 04                	je     c0025cf0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025cec:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025cf0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025cf3:	66 8b 84 00 40 0f 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf0c0]
c0025cfb:	0f b7 c0             	movzx  eax,ax
c0025cfe:	83 e0 08             	and    eax,0x8
c0025d01:	85 c0                	test   eax,eax
c0025d03:	74 16                	je     c0025d1b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025d05:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025d09:	eb 10                	jmp    c0025d1b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025d0b:	83 ec 0c             	sub    esp,0xc
c0025d0e:	68 f0 d2 02 c0       	push   0xc002d2f0
c0025d13:	e8 bd 48 ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c0025d18:	83 c4 10             	add    esp,0x10
c0025d1b:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025d1f:	a1 40 29 03 c0       	mov    eax,ds:0xc0032940
c0025d24:	83 ec 08             	sub    esp,0x8
c0025d27:	50                   	push   eax
c0025d28:	68 28 d3 02 c0       	push   0xc002d328
c0025d2d:	e8 02 d2 fe ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0025d32:	83 c4 10             	add    esp,0x10
c0025d35:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025d3c:	a1 40 29 03 c0       	mov    eax,ds:0xc0032940
c0025d41:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025d44:	7d 67                	jge    c0025dad <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025d46:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025d49:	8b 04 85 60 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd6a0]
c0025d50:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025d53:	83 ec 08             	sub    esp,0x8
c0025d56:	52                   	push   edx
c0025d57:	50                   	push   eax
c0025d58:	e8 d1 fc ff ff       	call   c0025a2e <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025d5d:	83 c4 10             	add    esp,0x10
c0025d60:	84 c0                	test   al,al
c0025d62:	74 44                	je     c0025da8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025d64:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025d67:	8b 1c 85 60 29 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcd6a0]
c0025d6e:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025d72:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025d75:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025d79:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d7c:	83 c0 20             	add    eax,0x20
c0025d7f:	0f b6 f0             	movzx  esi,al
c0025d82:	b8 00 00 00 00       	mov    eax,0x0
c0025d87:	99                   	cdq    
c0025d88:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025d8b:	0f b6 c9             	movzx  ecx,cl
c0025d8e:	83 ec 04             	sub    esp,0x4
c0025d91:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025d94:	57                   	push   edi
c0025d95:	56                   	push   esi
c0025d96:	52                   	push   edx
c0025d97:	50                   	push   eax
c0025d98:	51                   	push   ecx
c0025d99:	53                   	push   ebx
c0025d9a:	e8 0b fe ff ff       	call   c0025baa <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025d9f:	83 c4 20             	add    esp,0x20
c0025da2:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025da6:	eb 05                	jmp    c0025dad <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025da8:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025dab:	eb 8f                	jmp    c0025d3c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025dad:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025db0:	83 f0 01             	xor    eax,0x1
c0025db3:	84 c0                	test   al,al
c0025db5:	74 10                	je     c0025dc7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025db7:	83 ec 0c             	sub    esp,0xc
c0025dba:	68 3f d3 02 c0       	push   0xc002d33f
c0025dbf:	e8 11 48 ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c0025dc4:	83 c4 10             	add    esp,0x10
c0025dc7:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025dcb:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025dd2:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025dd6:	7f 65                	jg     c0025e3d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025dd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ddb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025dde:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025de5:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025de8:	01 ca                	add    edx,ecx
c0025dea:	83 c2 54             	add    edx,0x54
c0025ded:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025df1:	85 c0                	test   eax,eax
c0025df3:	75 43                	jne    c0025e38 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025df5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025df8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025dfb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025e02:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025e05:	01 ca                	add    edx,ecx
c0025e07:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025e0a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025e0d:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025e11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e14:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e17:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025e1e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025e21:	01 ca                	add    edx,ecx
c0025e23:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025e29:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025e2c:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025e30:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e33:	83 e8 20             	sub    eax,0x20
c0025e36:	eb 1a                	jmp    c0025e52 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025e38:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025e3b:	eb 95                	jmp    c0025dd2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025e3d:	83 ec 0c             	sub    esp,0xc
c0025e40:	68 4c d3 02 c0       	push   0xc002d34c
c0025e45:	e8 8b 47 ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c0025e4a:	83 c4 10             	add    esp,0x10
c0025e4d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025e52:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025e55:	5b                   	pop    ebx
c0025e56:	5e                   	pop    esi
c0025e57:	5f                   	pop    edi
c0025e58:	5d                   	pop    ebp
c0025e59:	c3                   	ret    

c0025e5a <PIC::disable()>:
c0025e5a:	55                   	push   ebp
c0025e5b:	89 e5                	mov    ebp,esp
c0025e5d:	83 ec 10             	sub    esp,0x10
c0025e60:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025e66:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025e6a:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025e6d:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025e71:	ee                   	out    dx,al
c0025e72:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025e78:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025e7c:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025e7f:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025e83:	ee                   	out    dx,al
c0025e84:	90                   	nop
c0025e85:	c9                   	leave  
c0025e86:	c3                   	ret    
c0025e87:	90                   	nop

c0025e88 <PIC::close(int, int, void*)>:
c0025e88:	55                   	push   ebp
c0025e89:	89 e5                	mov    ebp,esp
c0025e8b:	83 ec 08             	sub    esp,0x8
c0025e8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e91:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e93:	83 c0 3c             	add    eax,0x3c
c0025e96:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e98:	83 ec 0c             	sub    esp,0xc
c0025e9b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e9e:	ff d0                	call   eax
c0025ea0:	83 c4 10             	add    esp,0x10
c0025ea3:	b8 00 00 00 00       	mov    eax,0x0
c0025ea8:	c9                   	leave  
c0025ea9:	c3                   	ret    

c0025eaa <PIC::PIC()>:
c0025eaa:	83 ec 0c             	sub    esp,0xc
c0025ead:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eb1:	83 ec 08             	sub    esp,0x8
c0025eb4:	68 f8 d3 02 c0       	push   0xc002d3f8
c0025eb9:	50                   	push   eax
c0025eba:	e8 f7 ed fe ff       	call   c0014cb6 <InterruptController::InterruptController(char const*)>
c0025ebf:	83 c4 10             	add    esp,0x10
c0025ec2:	ba 24 d4 02 c0       	mov    edx,0xc002d424
c0025ec7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ecb:	89 10                	mov    DWORD PTR [eax],edx
c0025ecd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ed1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ed7:	0f b6 d0             	movzx  edx,al
c0025eda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ede:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025ee5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ee9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025eef:	0f b6 d0             	movzx  edx,al
c0025ef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ef6:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025efb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f05:	8d 50 01             	lea    edx,[eax+0x1]
c0025f08:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025f0c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025f12:	0f b6 d0             	movzx  edx,al
c0025f15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f19:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025f1d:	83 e1 3f             	and    ecx,0x3f
c0025f20:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025f24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f28:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f2e:	0f b6 d0             	movzx  edx,al
c0025f31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f35:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025f3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f40:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f46:	0f b6 d0             	movzx  edx,al
c0025f49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f4d:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025f52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f56:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f5c:	8d 50 01             	lea    edx,[eax+0x1]
c0025f5f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025f63:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025f69:	0f b6 d0             	movzx  edx,al
c0025f6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f70:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025f74:	83 e1 3f             	and    ecx,0x3f
c0025f77:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025f7b:	90                   	nop
c0025f7c:	83 c4 0c             	add    esp,0xc
c0025f7f:	c3                   	ret    

c0025f80 <PIC::ioWait()>:
c0025f80:	eb 00                	jmp    c0025f82 <PIC::ioWait()+0x2>
c0025f82:	eb 00                	jmp    c0025f84 <PIC::ioWait()+0x4>
c0025f84:	90                   	nop
c0025f85:	c3                   	ret    

c0025f86 <PIC::getIRQReg(int)>:
c0025f86:	55                   	push   ebp
c0025f87:	89 e5                	mov    ebp,esp
c0025f89:	83 ec 10             	sub    esp,0x10
c0025f8c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f8f:	0f b6 c0             	movzx  eax,al
c0025f92:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025f98:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025f9b:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025f9e:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025fa2:	ee                   	out    dx,al
c0025fa3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025fa6:	0f b6 c0             	movzx  eax,al
c0025fa9:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025faf:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025fb2:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025fb5:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025fb9:	ee                   	out    dx,al
c0025fba:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025fc0:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025fc4:	89 c2                	mov    edx,eax
c0025fc6:	ec                   	in     al,dx
c0025fc7:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025fca:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025fcd:	0f b6 c0             	movzx  eax,al
c0025fd0:	c1 e0 08             	shl    eax,0x8
c0025fd3:	89 c1                	mov    ecx,eax
c0025fd5:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025fdb:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025fdf:	89 c2                	mov    edx,eax
c0025fe1:	ec                   	in     al,dx
c0025fe2:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025fe5:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025fe8:	0f b6 c0             	movzx  eax,al
c0025feb:	09 c8                	or     eax,ecx
c0025fed:	c9                   	leave  
c0025fee:	c3                   	ret    
c0025fef:	90                   	nop

c0025ff0 <PIC::eoi(unsigned char)>:
c0025ff0:	55                   	push   ebp
c0025ff1:	89 e5                	mov    ebp,esp
c0025ff3:	83 ec 14             	sub    esp,0x14
c0025ff6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ff9:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025ffc:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026000:	75 1e                	jne    c0026020 <PIC::eoi(unsigned char)+0x30>
c0026002:	6a 0b                	push   0xb
c0026004:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026007:	e8 7a ff ff ff       	call   c0025f86 <PIC::getIRQReg(int)>
c002600c:	83 c4 08             	add    esp,0x8
c002600f:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0026013:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0026017:	25 80 00 00 00       	and    eax,0x80
c002601c:	85 c0                	test   eax,eax
c002601e:	74 5f                	je     c002607f <PIC::eoi(unsigned char)+0x8f>
c0026020:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0026024:	75 2d                	jne    c0026053 <PIC::eoi(unsigned char)+0x63>
c0026026:	6a 0b                	push   0xb
c0026028:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002602b:	e8 56 ff ff ff       	call   c0025f86 <PIC::getIRQReg(int)>
c0026030:	83 c4 08             	add    esp,0x8
c0026033:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0026037:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002603a:	66 85 c0             	test   ax,ax
c002603d:	78 14                	js     c0026053 <PIC::eoi(unsigned char)+0x63>
c002603f:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0026045:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0026049:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002604c:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026050:	ee                   	out    dx,al
c0026051:	eb 2d                	jmp    c0026080 <PIC::eoi(unsigned char)+0x90>
c0026053:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026057:	76 12                	jbe    c002606b <PIC::eoi(unsigned char)+0x7b>
c0026059:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c002605f:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0026063:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026066:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002606a:	ee                   	out    dx,al
c002606b:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026071:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0026075:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026078:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002607c:	ee                   	out    dx,al
c002607d:	eb 01                	jmp    c0026080 <PIC::eoi(unsigned char)+0x90>
c002607f:	90                   	nop
c0026080:	c9                   	leave  
c0026081:	c3                   	ret    

c0026082 <PIC::remap()>:
c0026082:	55                   	push   ebp
c0026083:	89 e5                	mov    ebp,esp
c0026085:	83 ec 48             	sub    esp,0x48
c0026088:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c002608f:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0026096:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c002609c:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c002609f:	89 c2                	mov    edx,eax
c00260a1:	ec                   	in     al,dx
c00260a2:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c00260a5:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c00260a8:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00260ab:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c00260b1:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c00260b4:	89 c2                	mov    edx,eax
c00260b6:	ec                   	in     al,dx
c00260b7:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c00260ba:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c00260bd:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c00260c0:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c00260c6:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c00260ca:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c00260cd:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c00260d0:	ee                   	out    dx,al
c00260d1:	83 ec 0c             	sub    esp,0xc
c00260d4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260d7:	e8 a4 fe ff ff       	call   c0025f80 <PIC::ioWait()>
c00260dc:	83 c4 10             	add    esp,0x10
c00260df:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c00260e5:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c00260e9:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c00260ec:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00260ef:	ee                   	out    dx,al
c00260f0:	83 ec 0c             	sub    esp,0xc
c00260f3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260f6:	e8 85 fe ff ff       	call   c0025f80 <PIC::ioWait()>
c00260fb:	83 c4 10             	add    esp,0x10
c00260fe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0026101:	0f b6 c0             	movzx  eax,al
c0026104:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c002610a:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c002610d:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0026110:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0026113:	ee                   	out    dx,al
c0026114:	83 ec 0c             	sub    esp,0xc
c0026117:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002611a:	e8 61 fe ff ff       	call   c0025f80 <PIC::ioWait()>
c002611f:	83 c4 10             	add    esp,0x10
c0026122:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026125:	0f b6 c0             	movzx  eax,al
c0026128:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c002612e:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0026131:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0026134:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026137:	ee                   	out    dx,al
c0026138:	83 ec 0c             	sub    esp,0xc
c002613b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002613e:	e8 3d fe ff ff       	call   c0025f80 <PIC::ioWait()>
c0026143:	83 c4 10             	add    esp,0x10
c0026146:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c002614c:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0026150:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0026153:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0026156:	ee                   	out    dx,al
c0026157:	83 ec 0c             	sub    esp,0xc
c002615a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002615d:	e8 1e fe ff ff       	call   c0025f80 <PIC::ioWait()>
c0026162:	83 c4 10             	add    esp,0x10
c0026165:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c002616b:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c002616f:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0026172:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026175:	ee                   	out    dx,al
c0026176:	83 ec 0c             	sub    esp,0xc
c0026179:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002617c:	e8 ff fd ff ff       	call   c0025f80 <PIC::ioWait()>
c0026181:	83 c4 10             	add    esp,0x10
c0026184:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c002618a:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c002618e:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0026191:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026194:	ee                   	out    dx,al
c0026195:	83 ec 0c             	sub    esp,0xc
c0026198:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002619b:	e8 e0 fd ff ff       	call   c0025f80 <PIC::ioWait()>
c00261a0:	83 c4 10             	add    esp,0x10
c00261a3:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c00261a9:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c00261ad:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c00261b0:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00261b3:	ee                   	out    dx,al
c00261b4:	83 ec 0c             	sub    esp,0xc
c00261b7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261ba:	e8 c1 fd ff ff       	call   c0025f80 <PIC::ioWait()>
c00261bf:	83 c4 10             	add    esp,0x10
c00261c2:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c00261c6:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c00261cc:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c00261cf:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c00261d2:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00261d5:	ee                   	out    dx,al
c00261d6:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c00261da:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c00261e0:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c00261e3:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c00261e6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00261e9:	ee                   	out    dx,al
c00261ea:	90                   	nop
c00261eb:	c9                   	leave  
c00261ec:	c3                   	ret    
c00261ed:	90                   	nop

c00261ee <PIC::open(int, int, void*)>:
c00261ee:	55                   	push   ebp
c00261ef:	89 e5                	mov    ebp,esp
c00261f1:	83 ec 18             	sub    esp,0x18
c00261f4:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c00261fa:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c00261fe:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026201:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026205:	ee                   	out    dx,al
c0026206:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c002620c:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0026210:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026213:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026217:	ee                   	out    dx,al
c0026218:	83 ec 0c             	sub    esp,0xc
c002621b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002621e:	e8 5f fe ff ff       	call   c0026082 <PIC::remap()>
c0026223:	83 c4 10             	add    esp,0x10
c0026226:	b8 00 00 00 00       	mov    eax,0x0
c002622b:	c9                   	leave  
c002622c:	c3                   	ret    
c002622d:	90                   	nop

c002622e <APICTimer::close(int, int, void*)>:
c002622e:	b8 00 00 00 00       	mov    eax,0x0
c0026233:	c3                   	ret    

c0026234 <apicTimerHandler(regs*, void*)>:
c0026234:	83 ec 0c             	sub    esp,0xc
c0026237:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002623b:	8b 00                	mov    eax,DWORD PTR [eax]
c002623d:	99                   	cdq    
c002623e:	52                   	push   edx
c002623f:	50                   	push   eax
c0026240:	6a 00                	push   0x0
c0026242:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026247:	e8 90 07 00 00       	call   c00269dc <__udivdi3>
c002624c:	83 c4 10             	add    esp,0x10
c002624f:	83 ec 08             	sub    esp,0x8
c0026252:	52                   	push   edx
c0026253:	50                   	push   eax
c0026254:	e8 a8 0a ff ff       	call   c0016d01 <timerHandler(unsigned long long)>
c0026259:	83 c4 10             	add    esp,0x10
c002625c:	90                   	nop
c002625d:	83 c4 0c             	add    esp,0xc
c0026260:	c3                   	ret    
c0026261:	90                   	nop

c0026262 <APICTimer::write(int)>:
c0026262:	53                   	push   ebx
c0026263:	83 ec 28             	sub    esp,0x28
c0026266:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002626a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002626e:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026274:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0026279:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002627f:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026285:	83 ec 0c             	sub    esp,0xc
c0026288:	50                   	push   eax
c0026289:	e8 de f4 ff ff       	call   c002576c <APIC::getBase()>
c002628e:	83 c4 10             	add    esp,0x10
c0026291:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026295:	a1 50 ec 02 c0       	mov    eax,ds:0xc002ec50
c002629a:	8b 15 54 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ec54
c00262a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00262a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00262a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262ac:	05 e0 03 00 00       	add    eax,0x3e0
c00262b1:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00262b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262bb:	05 80 03 00 00       	add    eax,0x380
c00262c0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00262c6:	fb                   	sti    
c00262c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00262cf:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c00262d4:	83 d2 00             	adc    edx,0x0
c00262d7:	89 c1                	mov    ecx,eax
c00262d9:	89 d3                	mov    ebx,edx
c00262db:	a1 50 ec 02 c0       	mov    eax,ds:0xc002ec50
c00262e0:	8b 15 54 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ec54
c00262e6:	39 c8                	cmp    eax,ecx
c00262e8:	89 d0                	mov    eax,edx
c00262ea:	19 d8                	sbb    eax,ebx
c00262ec:	73 02                	jae    c00262f0 <APICTimer::write(int)+0x8e>
c00262ee:	eb d7                	jmp    c00262c7 <APICTimer::write(int)+0x65>
c00262f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262f4:	05 20 03 00 00       	add    eax,0x320
c00262f9:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c00262ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026303:	05 90 03 00 00       	add    eax,0x390
c0026308:	8b 00                	mov    eax,DWORD PTR [eax]
c002630a:	f7 d0                	not    eax
c002630c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026310:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026314:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026318:	ba 00 00 00 00       	mov    edx,0x0
c002631d:	f7 f3                	div    ebx
c002631f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026323:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026327:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002632d:	0d 00 00 02 00       	or     eax,0x20000
c0026332:	89 c2                	mov    edx,eax
c0026334:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026338:	05 20 03 00 00       	add    eax,0x320
c002633d:	89 10                	mov    DWORD PTR [eax],edx
c002633f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026343:	05 e0 03 00 00       	add    eax,0x3e0
c0026348:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002634e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026352:	05 80 03 00 00       	add    eax,0x380
c0026357:	89 c2                	mov    edx,eax
c0026359:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002635d:	89 02                	mov    DWORD PTR [edx],eax
c002635f:	90                   	nop
c0026360:	83 c4 28             	add    esp,0x28
c0026363:	5b                   	pop    ebx
c0026364:	c3                   	ret    
c0026365:	90                   	nop

c0026366 <APICTimer::open(int, int, void*)>:
c0026366:	57                   	push   edi
c0026367:	56                   	push   esi
c0026368:	53                   	push   ebx
c0026369:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002636d:	8b 00                	mov    eax,DWORD PTR [eax]
c002636f:	83 c0 24             	add    eax,0x24
c0026372:	8b 00                	mov    eax,DWORD PTR [eax]
c0026374:	83 ec 08             	sub    esp,0x8
c0026377:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002637b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002637f:	ff d0                	call   eax
c0026381:	83 c4 10             	add    esp,0x10
c0026384:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0026389:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002638f:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026395:	83 ec 0c             	sub    esp,0xc
c0026398:	50                   	push   eax
c0026399:	e8 ce f3 ff ff       	call   c002576c <APIC::getBase()>
c002639e:	83 c4 10             	add    esp,0x10
c00263a1:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c00263a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263ab:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00263b1:	0f b6 f8             	movzx  edi,al
c00263b4:	89 d0                	mov    eax,edx
c00263b6:	ba 00 00 00 00       	mov    edx,0x0
c00263bb:	89 c1                	mov    ecx,eax
c00263bd:	80 e5 ff             	and    ch,0xff
c00263c0:	89 cb                	mov    ebx,ecx
c00263c2:	0f b6 f2             	movzx  esi,dl
c00263c5:	89 d8                	mov    eax,ebx
c00263c7:	89 f2                	mov    edx,esi
c00263c9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00263cd:	8d 5f 08             	lea    ebx,[edi+0x8]
c00263d0:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00263d4:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00263d8:	83 e0 00             	and    eax,0x0
c00263db:	09 d0                	or     eax,edx
c00263dd:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00263e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263e5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00263eb:	8d 50 01             	lea    edx,[eax+0x1]
c00263ee:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00263f2:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00263f8:	0f b6 d0             	movzx  edx,al
c00263fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263ff:	83 c2 08             	add    edx,0x8
c0026402:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026406:	0f b6 c9             	movzx  ecx,cl
c0026409:	81 c9 00 00 01 00    	or     ecx,0x10000
c002640f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026413:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026417:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002641b:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026421:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026425:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026429:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002642f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026433:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026439:	83 ec 0c             	sub    esp,0xc
c002643c:	51                   	push   ecx
c002643d:	6a 01                	push   0x1
c002643f:	68 34 62 02 c0       	push   0xc0026234
c0026444:	52                   	push   edx
c0026445:	50                   	push   eax
c0026446:	e8 93 de fe ff       	call   c00142de <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002644b:	83 c4 20             	add    esp,0x20
c002644e:	89 c2                	mov    edx,eax
c0026450:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026454:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002645a:	b8 00 00 00 00       	mov    eax,0x0
c002645f:	5b                   	pop    ebx
c0026460:	5e                   	pop    esi
c0026461:	5f                   	pop    edi
c0026462:	c3                   	ret    
c0026463:	90                   	nop

c0026464 <APICTimer::APICTimer()>:
c0026464:	83 ec 0c             	sub    esp,0xc
c0026467:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002646b:	83 ec 08             	sub    esp,0x8
c002646e:	68 64 d4 02 c0       	push   0xc002d464
c0026473:	50                   	push   eax
c0026474:	e8 f9 07 ff ff       	call   c0016c72 <Timer::Timer(char const*)>
c0026479:	83 c4 10             	add    esp,0x10
c002647c:	ba 78 d4 02 c0       	mov    edx,0xc002d478
c0026481:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026485:	89 10                	mov    DWORD PTR [eax],edx
c0026487:	90                   	nop
c0026488:	83 c4 0c             	add    esp,0xc
c002648b:	c3                   	ret    

c002648c <PIT::write(int)>:
c002648c:	83 ec 10             	sub    esp,0x10
c002648f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026493:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026497:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002649d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00264a1:	a3 84 29 03 c0       	mov    ds:0xc0032984,eax
c00264a6:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00264ab:	99                   	cdq    
c00264ac:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00264b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00264b4:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00264bb:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00264c0:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00264c4:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00264c9:	ee                   	out    dx,al
c00264ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00264ce:	0f b6 c0             	movzx  eax,al
c00264d1:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00264d8:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00264dc:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00264e0:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00264e5:	ee                   	out    dx,al
c00264e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00264ea:	c1 f8 08             	sar    eax,0x8
c00264ed:	0f b6 c0             	movzx  eax,al
c00264f0:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00264f7:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00264fb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00264ff:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026504:	ee                   	out    dx,al
c0026505:	90                   	nop
c0026506:	83 c4 10             	add    esp,0x10
c0026509:	c3                   	ret    

c002650a <pitHandler(regs*, void*)>:
c002650a:	83 ec 0c             	sub    esp,0xc
c002650d:	a1 84 29 03 c0       	mov    eax,ds:0xc0032984
c0026512:	99                   	cdq    
c0026513:	52                   	push   edx
c0026514:	50                   	push   eax
c0026515:	6a 00                	push   0x0
c0026517:	68 00 ca 9a 3b       	push   0x3b9aca00
c002651c:	e8 bb 04 00 00       	call   c00269dc <__udivdi3>
c0026521:	83 c4 10             	add    esp,0x10
c0026524:	83 ec 08             	sub    esp,0x8
c0026527:	52                   	push   edx
c0026528:	50                   	push   eax
c0026529:	e8 d3 07 ff ff       	call   c0016d01 <timerHandler(unsigned long long)>
c002652e:	83 c4 10             	add    esp,0x10
c0026531:	90                   	nop
c0026532:	83 c4 0c             	add    esp,0xc
c0026535:	c3                   	ret    

c0026536 <PIT::open(int, int, void*)>:
c0026536:	83 ec 0c             	sub    esp,0xc
c0026539:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002653d:	8b 00                	mov    eax,DWORD PTR [eax]
c002653f:	83 c0 24             	add    eax,0x24
c0026542:	8b 00                	mov    eax,DWORD PTR [eax]
c0026544:	83 ec 08             	sub    esp,0x8
c0026547:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002654b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002654f:	ff d0                	call   eax
c0026551:	83 c4 10             	add    esp,0x10
c0026554:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026558:	83 ec 0c             	sub    esp,0xc
c002655b:	6a 00                	push   0x0
c002655d:	6a 01                	push   0x1
c002655f:	68 0a 65 02 c0       	push   0xc002650a
c0026564:	6a 00                	push   0x0
c0026566:	50                   	push   eax
c0026567:	e8 72 dd fe ff       	call   c00142de <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002656c:	83 c4 20             	add    esp,0x20
c002656f:	89 c2                	mov    edx,eax
c0026571:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026575:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002657b:	b8 00 00 00 00       	mov    eax,0x0
c0026580:	83 c4 0c             	add    esp,0xc
c0026583:	c3                   	ret    

c0026584 <PIT::close(int, int, void*)>:
c0026584:	83 ec 0c             	sub    esp,0xc
c0026587:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002658b:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0026595:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026599:	6a 01                	push   0x1
c002659b:	68 0a 65 02 c0       	push   0xc002650a
c00265a0:	6a 00                	push   0x0
c00265a2:	50                   	push   eax
c00265a3:	e8 74 dd fe ff       	call   c001431c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00265a8:	83 c4 10             	add    esp,0x10
c00265ab:	b8 00 00 00 00       	mov    eax,0x0
c00265b0:	83 c4 0c             	add    esp,0xc
c00265b3:	c3                   	ret    

c00265b4 <PIT::PIT()>:
c00265b4:	83 ec 0c             	sub    esp,0xc
c00265b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265bb:	83 ec 08             	sub    esp,0x8
c00265be:	68 a0 d4 02 c0       	push   0xc002d4a0
c00265c3:	50                   	push   eax
c00265c4:	e8 a9 06 ff ff       	call   c0016c72 <Timer::Timer(char const*)>
c00265c9:	83 c4 10             	add    esp,0x10
c00265cc:	ba c8 d4 02 c0       	mov    edx,0xc002d4c8
c00265d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265d5:	89 10                	mov    DWORD PTR [eax],edx
c00265d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265db:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00265e1:	0f b6 d0             	movzx  edx,al
c00265e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265e8:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00265ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265f3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00265f9:	0f b6 d0             	movzx  edx,al
c00265fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026600:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0026605:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026609:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002660f:	8d 50 01             	lea    edx,[eax+0x1]
c0026612:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026616:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002661c:	0f b6 d0             	movzx  edx,al
c002661f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026623:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026627:	83 e1 3f             	and    ecx,0x3f
c002662a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002662e:	90                   	nop
c002662f:	83 c4 0c             	add    esp,0xc
c0026632:	c3                   	ret    
c0026633:	66 90                	xchg   ax,ax
c0026635:	66 90                	xchg   ax,ax
c0026637:	66 90                	xchg   ax,ax
c0026639:	66 90                	xchg   ax,ax
c002663b:	66 90                	xchg   ax,ax
c002663d:	66 90                	xchg   ax,ax
c002663f:	90                   	nop

c0026640 <avxDetect>:
c0026640:	b8 00 00 00 00       	mov    eax,0x0
c0026645:	c3                   	ret    

c0026646 <avxSave>:
c0026646:	c3                   	ret    

c0026647 <avxLoad>:
c0026647:	c3                   	ret    

c0026648 <avxInit>:
c0026648:	c3                   	ret    

c0026649 <avxClose>:
c0026649:	c3                   	ret    

c002664a <wouldSheSayYes>:
c002664a:	c3                   	ret    
c002664b:	49                   	dec    ecx
c002664c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026650:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026654:	75 20                	jne    c0026676 <sseDetect.noSSE+0x1>
c0026656:	4e                   	dec    esi
c0026657:	79 61                	jns    c00266ba <x87Detect+0x14>
c0026659:	68 2e 2e 2e 00       	push   0x2e2e2e
c002665e:	66 90                	xchg   ax,ax

c0026660 <absolutelyNoChanceInHell>:
c0026660:	b8 01 00 00 00       	mov    eax,0x1
c0026665:	0f a2                	cpuid  
c0026667:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002666d:	74 06                	je     c0026675 <sseDetect.noSSE>
c002666f:	b8 01 00 00 00       	mov    eax,0x1
c0026674:	c3                   	ret    

c0026675 <sseDetect.noSSE>:
c0026675:	31 c0                	xor    eax,eax
c0026677:	c3                   	ret    

c0026678 <sseSave>:
c0026678:	0f ae 44 24 08       	fxsave [esp+0x8]
c002667d:	c3                   	ret    

c002667e <sseLoad>:
c002667e:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0026683:	c3                   	ret    

c0026684 <sseInit>:
c0026684:	e8 43 00 00 00       	call   c00266cc <x87Init>
c0026689:	0f 20 e0             	mov    eax,cr4
c002668c:	66 0d 00 06          	or     ax,0x600
c0026690:	0f 22 e0             	mov    cr4,eax
c0026693:	c3                   	ret    

c0026694 <sseClose>:
c0026694:	c3                   	ret    
c0026695:	66 90                	xchg   ax,ax
c0026697:	66 90                	xchg   ax,ax
c0026699:	66 90                	xchg   ax,ax
c002669b:	66 90                	xchg   ax,ax
c002669d:	66 90                	xchg   ax,ax
c002669f:	90                   	nop

c00266a0 <value_37F>:
c00266a0:	7f 03                	jg     c00266a5 <value_37A+0x1>

c00266a2 <value_37E>:
c00266a2:	7e 03                	jle    c00266a7 <x87Detect+0x1>

c00266a4 <value_37A>:
c00266a4:	7a 03                	jp     c00266a9 <x87Detect+0x3>

c00266a6 <x87Detect>:
c00266a6:	b8 01 00 00 00       	mov    eax,0x1
c00266ab:	0f a2                	cpuid  
c00266ad:	f7 c2 01 00 00 00    	test   edx,0x1
c00266b3:	74 06                	je     c00266bb <x87Detect.nox87>
c00266b5:	b8 01 00 00 00       	mov    eax,0x1
c00266ba:	c3                   	ret    

c00266bb <x87Detect.nox87>:
c00266bb:	b8 00 00 00 00       	mov    eax,0x0
c00266c0:	c3                   	ret    

c00266c1 <x87Save>:
c00266c1:	9b dd 74 24 08       	fsave  [esp+0x8]
c00266c6:	c3                   	ret    

c00266c7 <x87Load>:
c00266c7:	dd 64 24 08          	frstor [esp+0x8]
c00266cb:	c3                   	ret    

c00266cc <x87Init>:
c00266cc:	9b db e3             	finit  
c00266cf:	0f 20 c0             	mov    eax,cr0
c00266d2:	66 25 fb ff          	and    ax,0xfffb
c00266d6:	66 0d 22 00          	or     ax,0x22
c00266da:	0f 22 c0             	mov    cr0,eax
c00266dd:	0f 06                	clts   
c00266df:	d9 2d a4 66 02 c0    	fldcw  WORD PTR ds:0xc00266a4
c00266e5:	c3                   	ret    

c00266e6 <x87Close>:
c00266e6:	c3                   	ret    
c00266e7:	90                   	nop

c00266e8 <__do_global_ctors_aux>:
c00266e8:	a1 2c 92 02 c0       	mov    eax,ds:0xc002922c
c00266ed:	83 f8 ff             	cmp    eax,0xffffffff
c00266f0:	74 1a                	je     c002670c <__do_global_ctors_aux+0x24>
c00266f2:	55                   	push   ebp
c00266f3:	89 e5                	mov    ebp,esp
c00266f5:	53                   	push   ebx
c00266f6:	52                   	push   edx
c00266f7:	bb 2c 92 02 c0       	mov    ebx,0xc002922c
c00266fc:	ff d0                	call   eax
c00266fe:	83 eb 04             	sub    ebx,0x4
c0026701:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026703:	83 f8 ff             	cmp    eax,0xffffffff
c0026706:	75 f4                	jne    c00266fc <__do_global_ctors_aux+0x14>
c0026708:	58                   	pop    eax
c0026709:	5b                   	pop    ebx
c002670a:	5d                   	pop    ebp
c002670b:	c3                   	ret    
c002670c:	c3                   	ret    
c002670d:	66 90                	xchg   ax,ax
c002670f:	90                   	nop

c0026710 <__divdi3>:
c0026710:	55                   	push   ebp
c0026711:	57                   	push   edi
c0026712:	56                   	push   esi
c0026713:	53                   	push   ebx
c0026714:	83 ec 1c             	sub    esp,0x1c
c0026717:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002671b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002671f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026722:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026726:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002672a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002672e:	85 db                	test   ebx,ebx
c0026730:	0f 88 8e 00 00 00    	js     c00267c4 <__divdi3+0xb4>
c0026736:	89 dd                	mov    ebp,ebx
c0026738:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026740:	89 d3                	mov    ebx,edx
c0026742:	85 d2                	test   edx,edx
c0026744:	79 0d                	jns    c0026753 <__divdi3+0x43>
c0026746:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002674a:	f7 d8                	neg    eax
c002674c:	83 d2 00             	adc    edx,0x0
c002674f:	f7 da                	neg    edx
c0026751:	89 d3                	mov    ebx,edx
c0026753:	89 c7                	mov    edi,eax
c0026755:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026758:	85 db                	test   ebx,ebx
c002675a:	75 48                	jne    c00267a4 <__divdi3+0x94>
c002675c:	39 ef                	cmp    edi,ebp
c002675e:	76 24                	jbe    c0026784 <__divdi3+0x74>
c0026760:	89 ea                	mov    edx,ebp
c0026762:	f7 f7                	div    edi
c0026764:	89 c1                	mov    ecx,eax
c0026766:	31 f6                	xor    esi,esi
c0026768:	89 c8                	mov    eax,ecx
c002676a:	89 f2                	mov    edx,esi
c002676c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026770:	85 c9                	test   ecx,ecx
c0026772:	74 07                	je     c002677b <__divdi3+0x6b>
c0026774:	f7 d8                	neg    eax
c0026776:	83 d2 00             	adc    edx,0x0
c0026779:	f7 da                	neg    edx
c002677b:	83 c4 1c             	add    esp,0x1c
c002677e:	5b                   	pop    ebx
c002677f:	5e                   	pop    esi
c0026780:	5f                   	pop    edi
c0026781:	5d                   	pop    ebp
c0026782:	c3                   	ret    
c0026783:	90                   	nop
c0026784:	85 ff                	test   edi,edi
c0026786:	75 0b                	jne    c0026793 <__divdi3+0x83>
c0026788:	b8 01 00 00 00       	mov    eax,0x1
c002678d:	31 d2                	xor    edx,edx
c002678f:	f7 f3                	div    ebx
c0026791:	89 c7                	mov    edi,eax
c0026793:	31 d2                	xor    edx,edx
c0026795:	89 e8                	mov    eax,ebp
c0026797:	f7 f7                	div    edi
c0026799:	89 c6                	mov    esi,eax
c002679b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002679e:	f7 f7                	div    edi
c00267a0:	89 c1                	mov    ecx,eax
c00267a2:	eb c4                	jmp    c0026768 <__divdi3+0x58>
c00267a4:	39 eb                	cmp    ebx,ebp
c00267a6:	77 3c                	ja     c00267e4 <__divdi3+0xd4>
c00267a8:	0f bd f3             	bsr    esi,ebx
c00267ab:	83 f6 1f             	xor    esi,0x1f
c00267ae:	75 40                	jne    c00267f0 <__divdi3+0xe0>
c00267b0:	39 eb                	cmp    ebx,ebp
c00267b2:	72 09                	jb     c00267bd <__divdi3+0xad>
c00267b4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00267b7:	0f 87 97 00 00 00    	ja     c0026854 <__divdi3+0x144>
c00267bd:	b9 01 00 00 00       	mov    ecx,0x1
c00267c2:	eb a4                	jmp    c0026768 <__divdi3+0x58>
c00267c4:	f7 d9                	neg    ecx
c00267c6:	83 d3 00             	adc    ebx,0x0
c00267c9:	f7 db                	neg    ebx
c00267cb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00267ce:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00267d2:	89 dd                	mov    ebp,ebx
c00267d4:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00267dc:	e9 5f ff ff ff       	jmp    c0026740 <__divdi3+0x30>
c00267e1:	8d 76 00             	lea    esi,[esi+0x0]
c00267e4:	31 f6                	xor    esi,esi
c00267e6:	31 c9                	xor    ecx,ecx
c00267e8:	e9 7b ff ff ff       	jmp    c0026768 <__divdi3+0x58>
c00267ed:	8d 76 00             	lea    esi,[esi+0x0]
c00267f0:	b8 20 00 00 00       	mov    eax,0x20
c00267f5:	29 f0                	sub    eax,esi
c00267f7:	89 f1                	mov    ecx,esi
c00267f9:	d3 e3                	shl    ebx,cl
c00267fb:	89 fa                	mov    edx,edi
c00267fd:	88 c1                	mov    cl,al
c00267ff:	d3 ea                	shr    edx,cl
c0026801:	09 da                	or     edx,ebx
c0026803:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026807:	89 f1                	mov    ecx,esi
c0026809:	d3 e7                	shl    edi,cl
c002680b:	89 eb                	mov    ebx,ebp
c002680d:	88 c1                	mov    cl,al
c002680f:	d3 eb                	shr    ebx,cl
c0026811:	89 f1                	mov    ecx,esi
c0026813:	d3 e5                	shl    ebp,cl
c0026815:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026818:	88 c1                	mov    cl,al
c002681a:	d3 ea                	shr    edx,cl
c002681c:	09 d5                	or     ebp,edx
c002681e:	89 e8                	mov    eax,ebp
c0026820:	89 da                	mov    edx,ebx
c0026822:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0026826:	89 d3                	mov    ebx,edx
c0026828:	89 c5                	mov    ebp,eax
c002682a:	f7 e7                	mul    edi
c002682c:	39 d3                	cmp    ebx,edx
c002682e:	72 18                	jb     c0026848 <__divdi3+0x138>
c0026830:	74 0a                	je     c002683c <__divdi3+0x12c>
c0026832:	89 e9                	mov    ecx,ebp
c0026834:	31 f6                	xor    esi,esi
c0026836:	e9 2d ff ff ff       	jmp    c0026768 <__divdi3+0x58>
c002683b:	90                   	nop
c002683c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002683f:	89 f1                	mov    ecx,esi
c0026841:	d3 e7                	shl    edi,cl
c0026843:	39 c7                	cmp    edi,eax
c0026845:	73 eb                	jae    c0026832 <__divdi3+0x122>
c0026847:	90                   	nop
c0026848:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002684b:	31 f6                	xor    esi,esi
c002684d:	e9 16 ff ff ff       	jmp    c0026768 <__divdi3+0x58>
c0026852:	66 90                	xchg   ax,ax
c0026854:	31 c9                	xor    ecx,ecx
c0026856:	e9 0d ff ff ff       	jmp    c0026768 <__divdi3+0x58>
c002685b:	90                   	nop

c002685c <__moddi3>:
c002685c:	55                   	push   ebp
c002685d:	57                   	push   edi
c002685e:	56                   	push   esi
c002685f:	53                   	push   ebx
c0026860:	83 ec 2c             	sub    esp,0x2c
c0026863:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0026867:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002686b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002686f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0026873:	85 db                	test   ebx,ebx
c0026875:	0f 88 85 00 00 00    	js     c0026900 <__moddi3+0xa4>
c002687b:	89 de                	mov    esi,ebx
c002687d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0026885:	89 d7                	mov    edi,edx
c0026887:	85 d2                	test   edx,edx
c0026889:	79 09                	jns    c0026894 <__moddi3+0x38>
c002688b:	f7 d8                	neg    eax
c002688d:	83 d2 00             	adc    edx,0x0
c0026890:	f7 da                	neg    edx
c0026892:	89 d7                	mov    edi,edx
c0026894:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026898:	89 cd                	mov    ebp,ecx
c002689a:	85 ff                	test   edi,edi
c002689c:	75 52                	jne    c00268f0 <__moddi3+0x94>
c002689e:	89 c3                	mov    ebx,eax
c00268a0:	39 f0                	cmp    eax,esi
c00268a2:	76 24                	jbe    c00268c8 <__moddi3+0x6c>
c00268a4:	89 c8                	mov    eax,ecx
c00268a6:	89 f2                	mov    edx,esi
c00268a8:	f7 f3                	div    ebx
c00268aa:	89 d6                	mov    esi,edx
c00268ac:	89 f0                	mov    eax,esi
c00268ae:	31 d2                	xor    edx,edx
c00268b0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00268b4:	85 c9                	test   ecx,ecx
c00268b6:	74 07                	je     c00268bf <__moddi3+0x63>
c00268b8:	f7 d8                	neg    eax
c00268ba:	83 d2 00             	adc    edx,0x0
c00268bd:	f7 da                	neg    edx
c00268bf:	83 c4 2c             	add    esp,0x2c
c00268c2:	5b                   	pop    ebx
c00268c3:	5e                   	pop    esi
c00268c4:	5f                   	pop    edi
c00268c5:	5d                   	pop    ebp
c00268c6:	c3                   	ret    
c00268c7:	90                   	nop
c00268c8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00268cc:	85 db                	test   ebx,ebx
c00268ce:	75 0d                	jne    c00268dd <__moddi3+0x81>
c00268d0:	b8 01 00 00 00       	mov    eax,0x1
c00268d5:	31 d2                	xor    edx,edx
c00268d7:	f7 f7                	div    edi
c00268d9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00268dd:	89 f0                	mov    eax,esi
c00268df:	31 d2                	xor    edx,edx
c00268e1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00268e5:	f7 f7                	div    edi
c00268e7:	89 e8                	mov    eax,ebp
c00268e9:	f7 f7                	div    edi
c00268eb:	89 d6                	mov    esi,edx
c00268ed:	eb bd                	jmp    c00268ac <__moddi3+0x50>
c00268ef:	90                   	nop
c00268f0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00268f4:	39 f7                	cmp    edi,esi
c00268f6:	76 20                	jbe    c0026918 <__moddi3+0xbc>
c00268f8:	89 c8                	mov    eax,ecx
c00268fa:	89 f2                	mov    edx,esi
c00268fc:	eb b2                	jmp    c00268b0 <__moddi3+0x54>
c00268fe:	66 90                	xchg   ax,ax
c0026900:	f7 d9                	neg    ecx
c0026902:	83 d3 00             	adc    ebx,0x0
c0026905:	f7 db                	neg    ebx
c0026907:	89 de                	mov    esi,ebx
c0026909:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026911:	e9 6f ff ff ff       	jmp    c0026885 <__moddi3+0x29>
c0026916:	66 90                	xchg   ax,ax
c0026918:	0f bd c7             	bsr    eax,edi
c002691b:	83 f0 1f             	xor    eax,0x1f
c002691e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0026922:	75 24                	jne    c0026948 <__moddi3+0xec>
c0026924:	39 f7                	cmp    edi,esi
c0026926:	72 06                	jb     c002692e <__moddi3+0xd2>
c0026928:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002692c:	77 0c                	ja     c002693a <__moddi3+0xde>
c002692e:	89 e9                	mov    ecx,ebp
c0026930:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0026934:	19 fe                	sbb    esi,edi
c0026936:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002693a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002693e:	89 f2                	mov    edx,esi
c0026940:	e9 6b ff ff ff       	jmp    c00268b0 <__moddi3+0x54>
c0026945:	8d 76 00             	lea    esi,[esi+0x0]
c0026948:	b8 20 00 00 00       	mov    eax,0x20
c002694d:	89 c2                	mov    edx,eax
c002694f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026953:	29 da                	sub    edx,ebx
c0026955:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026959:	88 d9                	mov    cl,bl
c002695b:	d3 e7                	shl    edi,cl
c002695d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026961:	88 d1                	mov    cl,dl
c0026963:	d3 e8                	shr    eax,cl
c0026965:	09 c7                	or     edi,eax
c0026967:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002696b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002696f:	89 d8                	mov    eax,ebx
c0026971:	88 d9                	mov    cl,bl
c0026973:	d3 e7                	shl    edi,cl
c0026975:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026979:	89 f3                	mov    ebx,esi
c002697b:	88 d1                	mov    cl,dl
c002697d:	d3 eb                	shr    ebx,cl
c002697f:	89 c7                	mov    edi,eax
c0026981:	88 c1                	mov    cl,al
c0026983:	d3 e6                	shl    esi,cl
c0026985:	89 e8                	mov    eax,ebp
c0026987:	88 d1                	mov    cl,dl
c0026989:	d3 e8                	shr    eax,cl
c002698b:	09 f0                	or     eax,esi
c002698d:	89 f9                	mov    ecx,edi
c002698f:	d3 e5                	shl    ebp,cl
c0026991:	89 da                	mov    edx,ebx
c0026993:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0026997:	89 d3                	mov    ebx,edx
c0026999:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002699d:	89 c6                	mov    esi,eax
c002699f:	89 d1                	mov    ecx,edx
c00269a1:	39 d3                	cmp    ebx,edx
c00269a3:	72 27                	jb     c00269cc <__moddi3+0x170>
c00269a5:	74 21                	je     c00269c8 <__moddi3+0x16c>
c00269a7:	29 f5                	sub    ebp,esi
c00269a9:	19 cb                	sbb    ebx,ecx
c00269ab:	89 de                	mov    esi,ebx
c00269ad:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00269b1:	d3 e6                	shl    esi,cl
c00269b3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00269b7:	89 f9                	mov    ecx,edi
c00269b9:	d3 ed                	shr    ebp,cl
c00269bb:	09 ee                	or     esi,ebp
c00269bd:	89 f0                	mov    eax,esi
c00269bf:	d3 eb                	shr    ebx,cl
c00269c1:	89 da                	mov    edx,ebx
c00269c3:	e9 e8 fe ff ff       	jmp    c00268b0 <__moddi3+0x54>
c00269c8:	39 c5                	cmp    ebp,eax
c00269ca:	73 db                	jae    c00269a7 <__moddi3+0x14b>
c00269cc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00269d0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00269d4:	89 d1                	mov    ecx,edx
c00269d6:	89 c6                	mov    esi,eax
c00269d8:	eb cd                	jmp    c00269a7 <__moddi3+0x14b>
c00269da:	66 90                	xchg   ax,ax

c00269dc <__udivdi3>:
c00269dc:	55                   	push   ebp
c00269dd:	57                   	push   edi
c00269de:	56                   	push   esi
c00269df:	53                   	push   ebx
c00269e0:	83 ec 1c             	sub    esp,0x1c
c00269e3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00269e7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00269eb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00269ef:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00269f3:	85 d2                	test   edx,edx
c00269f5:	75 41                	jne    c0026a38 <__udivdi3+0x5c>
c00269f7:	39 f7                	cmp    edi,esi
c00269f9:	76 15                	jbe    c0026a10 <__udivdi3+0x34>
c00269fb:	89 e8                	mov    eax,ebp
c00269fd:	89 f2                	mov    edx,esi
c00269ff:	f7 f7                	div    edi
c0026a01:	31 db                	xor    ebx,ebx
c0026a03:	89 da                	mov    edx,ebx
c0026a05:	83 c4 1c             	add    esp,0x1c
c0026a08:	5b                   	pop    ebx
c0026a09:	5e                   	pop    esi
c0026a0a:	5f                   	pop    edi
c0026a0b:	5d                   	pop    ebp
c0026a0c:	c3                   	ret    
c0026a0d:	8d 76 00             	lea    esi,[esi+0x0]
c0026a10:	89 f9                	mov    ecx,edi
c0026a12:	85 ff                	test   edi,edi
c0026a14:	75 0b                	jne    c0026a21 <__udivdi3+0x45>
c0026a16:	b8 01 00 00 00       	mov    eax,0x1
c0026a1b:	31 d2                	xor    edx,edx
c0026a1d:	f7 f7                	div    edi
c0026a1f:	89 c1                	mov    ecx,eax
c0026a21:	31 d2                	xor    edx,edx
c0026a23:	89 f0                	mov    eax,esi
c0026a25:	f7 f1                	div    ecx
c0026a27:	89 c3                	mov    ebx,eax
c0026a29:	89 e8                	mov    eax,ebp
c0026a2b:	f7 f1                	div    ecx
c0026a2d:	89 da                	mov    edx,ebx
c0026a2f:	83 c4 1c             	add    esp,0x1c
c0026a32:	5b                   	pop    ebx
c0026a33:	5e                   	pop    esi
c0026a34:	5f                   	pop    edi
c0026a35:	5d                   	pop    ebp
c0026a36:	c3                   	ret    
c0026a37:	90                   	nop
c0026a38:	39 f2                	cmp    edx,esi
c0026a3a:	77 1c                	ja     c0026a58 <__udivdi3+0x7c>
c0026a3c:	0f bd da             	bsr    ebx,edx
c0026a3f:	83 f3 1f             	xor    ebx,0x1f
c0026a42:	75 24                	jne    c0026a68 <__udivdi3+0x8c>
c0026a44:	39 f2                	cmp    edx,esi
c0026a46:	72 08                	jb     c0026a50 <__udivdi3+0x74>
c0026a48:	39 ef                	cmp    edi,ebp
c0026a4a:	0f 87 84 00 00 00    	ja     c0026ad4 <__udivdi3+0xf8>
c0026a50:	b8 01 00 00 00       	mov    eax,0x1
c0026a55:	eb ac                	jmp    c0026a03 <__udivdi3+0x27>
c0026a57:	90                   	nop
c0026a58:	31 db                	xor    ebx,ebx
c0026a5a:	31 c0                	xor    eax,eax
c0026a5c:	89 da                	mov    edx,ebx
c0026a5e:	83 c4 1c             	add    esp,0x1c
c0026a61:	5b                   	pop    ebx
c0026a62:	5e                   	pop    esi
c0026a63:	5f                   	pop    edi
c0026a64:	5d                   	pop    ebp
c0026a65:	c3                   	ret    
c0026a66:	66 90                	xchg   ax,ax
c0026a68:	b8 20 00 00 00       	mov    eax,0x20
c0026a6d:	29 d8                	sub    eax,ebx
c0026a6f:	88 d9                	mov    cl,bl
c0026a71:	d3 e2                	shl    edx,cl
c0026a73:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026a77:	89 fa                	mov    edx,edi
c0026a79:	88 c1                	mov    cl,al
c0026a7b:	d3 ea                	shr    edx,cl
c0026a7d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026a81:	09 d1                	or     ecx,edx
c0026a83:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026a87:	88 d9                	mov    cl,bl
c0026a89:	d3 e7                	shl    edi,cl
c0026a8b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026a8f:	89 f7                	mov    edi,esi
c0026a91:	88 c1                	mov    cl,al
c0026a93:	d3 ef                	shr    edi,cl
c0026a95:	88 d9                	mov    cl,bl
c0026a97:	d3 e6                	shl    esi,cl
c0026a99:	89 ea                	mov    edx,ebp
c0026a9b:	88 c1                	mov    cl,al
c0026a9d:	d3 ea                	shr    edx,cl
c0026a9f:	09 d6                	or     esi,edx
c0026aa1:	89 f0                	mov    eax,esi
c0026aa3:	89 fa                	mov    edx,edi
c0026aa5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026aa9:	89 d7                	mov    edi,edx
c0026aab:	89 c6                	mov    esi,eax
c0026aad:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026ab1:	39 d7                	cmp    edi,edx
c0026ab3:	72 13                	jb     c0026ac8 <__udivdi3+0xec>
c0026ab5:	74 09                	je     c0026ac0 <__udivdi3+0xe4>
c0026ab7:	89 f0                	mov    eax,esi
c0026ab9:	31 db                	xor    ebx,ebx
c0026abb:	e9 43 ff ff ff       	jmp    c0026a03 <__udivdi3+0x27>
c0026ac0:	88 d9                	mov    cl,bl
c0026ac2:	d3 e5                	shl    ebp,cl
c0026ac4:	39 c5                	cmp    ebp,eax
c0026ac6:	73 ef                	jae    c0026ab7 <__udivdi3+0xdb>
c0026ac8:	8d 46 ff             	lea    eax,[esi-0x1]
c0026acb:	31 db                	xor    ebx,ebx
c0026acd:	e9 31 ff ff ff       	jmp    c0026a03 <__udivdi3+0x27>
c0026ad2:	66 90                	xchg   ax,ax
c0026ad4:	31 c0                	xor    eax,eax
c0026ad6:	e9 28 ff ff ff       	jmp    c0026a03 <__udivdi3+0x27>
c0026adb:	90                   	nop

c0026adc <__umoddi3>:
c0026adc:	55                   	push   ebp
c0026add:	57                   	push   edi
c0026ade:	56                   	push   esi
c0026adf:	53                   	push   ebx
c0026ae0:	83 ec 1c             	sub    esp,0x1c
c0026ae3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026ae7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026aeb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026aef:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026af3:	89 da                	mov    edx,ebx
c0026af5:	85 c0                	test   eax,eax
c0026af7:	75 37                	jne    c0026b30 <__umoddi3+0x54>
c0026af9:	39 df                	cmp    edi,ebx
c0026afb:	76 13                	jbe    c0026b10 <__umoddi3+0x34>
c0026afd:	89 f0                	mov    eax,esi
c0026aff:	f7 f7                	div    edi
c0026b01:	89 d0                	mov    eax,edx
c0026b03:	31 d2                	xor    edx,edx
c0026b05:	83 c4 1c             	add    esp,0x1c
c0026b08:	5b                   	pop    ebx
c0026b09:	5e                   	pop    esi
c0026b0a:	5f                   	pop    edi
c0026b0b:	5d                   	pop    ebp
c0026b0c:	c3                   	ret    
c0026b0d:	8d 76 00             	lea    esi,[esi+0x0]
c0026b10:	89 fd                	mov    ebp,edi
c0026b12:	85 ff                	test   edi,edi
c0026b14:	75 0b                	jne    c0026b21 <__umoddi3+0x45>
c0026b16:	b8 01 00 00 00       	mov    eax,0x1
c0026b1b:	31 d2                	xor    edx,edx
c0026b1d:	f7 f7                	div    edi
c0026b1f:	89 c5                	mov    ebp,eax
c0026b21:	89 d8                	mov    eax,ebx
c0026b23:	31 d2                	xor    edx,edx
c0026b25:	f7 f5                	div    ebp
c0026b27:	89 f0                	mov    eax,esi
c0026b29:	f7 f5                	div    ebp
c0026b2b:	89 d0                	mov    eax,edx
c0026b2d:	eb d4                	jmp    c0026b03 <__umoddi3+0x27>
c0026b2f:	90                   	nop
c0026b30:	89 f1                	mov    ecx,esi
c0026b32:	39 d8                	cmp    eax,ebx
c0026b34:	76 0a                	jbe    c0026b40 <__umoddi3+0x64>
c0026b36:	89 f0                	mov    eax,esi
c0026b38:	83 c4 1c             	add    esp,0x1c
c0026b3b:	5b                   	pop    ebx
c0026b3c:	5e                   	pop    esi
c0026b3d:	5f                   	pop    edi
c0026b3e:	5d                   	pop    ebp
c0026b3f:	c3                   	ret    
c0026b40:	0f bd e8             	bsr    ebp,eax
c0026b43:	83 f5 1f             	xor    ebp,0x1f
c0026b46:	75 1c                	jne    c0026b64 <__umoddi3+0x88>
c0026b48:	39 d8                	cmp    eax,ebx
c0026b4a:	72 04                	jb     c0026b50 <__umoddi3+0x74>
c0026b4c:	39 f7                	cmp    edi,esi
c0026b4e:	77 08                	ja     c0026b58 <__umoddi3+0x7c>
c0026b50:	89 da                	mov    edx,ebx
c0026b52:	29 fe                	sub    esi,edi
c0026b54:	19 c2                	sbb    edx,eax
c0026b56:	89 f1                	mov    ecx,esi
c0026b58:	89 c8                	mov    eax,ecx
c0026b5a:	83 c4 1c             	add    esp,0x1c
c0026b5d:	5b                   	pop    ebx
c0026b5e:	5e                   	pop    esi
c0026b5f:	5f                   	pop    edi
c0026b60:	5d                   	pop    ebp
c0026b61:	c3                   	ret    
c0026b62:	66 90                	xchg   ax,ax
c0026b64:	ba 20 00 00 00       	mov    edx,0x20
c0026b69:	29 ea                	sub    edx,ebp
c0026b6b:	89 e9                	mov    ecx,ebp
c0026b6d:	d3 e0                	shl    eax,cl
c0026b6f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026b73:	89 f8                	mov    eax,edi
c0026b75:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026b79:	88 d1                	mov    cl,dl
c0026b7b:	d3 e8                	shr    eax,cl
c0026b7d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026b81:	09 c1                	or     ecx,eax
c0026b83:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026b87:	89 e9                	mov    ecx,ebp
c0026b89:	d3 e7                	shl    edi,cl
c0026b8b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026b8f:	89 d8                	mov    eax,ebx
c0026b91:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026b95:	88 d1                	mov    cl,dl
c0026b97:	d3 e8                	shr    eax,cl
c0026b99:	89 c7                	mov    edi,eax
c0026b9b:	89 e9                	mov    ecx,ebp
c0026b9d:	d3 e3                	shl    ebx,cl
c0026b9f:	89 f0                	mov    eax,esi
c0026ba1:	88 d1                	mov    cl,dl
c0026ba3:	d3 e8                	shr    eax,cl
c0026ba5:	09 d8                	or     eax,ebx
c0026ba7:	89 e9                	mov    ecx,ebp
c0026ba9:	d3 e6                	shl    esi,cl
c0026bab:	89 f3                	mov    ebx,esi
c0026bad:	89 fa                	mov    edx,edi
c0026baf:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026bb3:	89 d1                	mov    ecx,edx
c0026bb5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026bb9:	89 c6                	mov    esi,eax
c0026bbb:	89 d7                	mov    edi,edx
c0026bbd:	39 d1                	cmp    ecx,edx
c0026bbf:	72 27                	jb     c0026be8 <__umoddi3+0x10c>
c0026bc1:	74 21                	je     c0026be4 <__umoddi3+0x108>
c0026bc3:	89 ca                	mov    edx,ecx
c0026bc5:	29 f3                	sub    ebx,esi
c0026bc7:	19 fa                	sbb    edx,edi
c0026bc9:	89 d0                	mov    eax,edx
c0026bcb:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026bcf:	d3 e0                	shl    eax,cl
c0026bd1:	89 e9                	mov    ecx,ebp
c0026bd3:	d3 eb                	shr    ebx,cl
c0026bd5:	09 d8                	or     eax,ebx
c0026bd7:	d3 ea                	shr    edx,cl
c0026bd9:	83 c4 1c             	add    esp,0x1c
c0026bdc:	5b                   	pop    ebx
c0026bdd:	5e                   	pop    esi
c0026bde:	5f                   	pop    edi
c0026bdf:	5d                   	pop    ebp
c0026be0:	c3                   	ret    
c0026be1:	8d 76 00             	lea    esi,[esi+0x0]
c0026be4:	39 c3                	cmp    ebx,eax
c0026be6:	73 db                	jae    c0026bc3 <__umoddi3+0xe7>
c0026be8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026bec:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026bf0:	89 d7                	mov    edi,edx
c0026bf2:	89 c6                	mov    esi,eax
c0026bf4:	eb cd                	jmp    c0026bc3 <__umoddi3+0xe7>

c0026bf6 <__addsf3>:
c0026bf6:	55                   	push   ebp
c0026bf7:	89 e5                	mov    ebp,esp
c0026bf9:	57                   	push   edi
c0026bfa:	56                   	push   esi
c0026bfb:	53                   	push   ebx
c0026bfc:	83 ec 08             	sub    esp,0x8
c0026bff:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026c02:	89 fa                	mov    edx,edi
c0026c04:	89 f8                	mov    eax,edi
c0026c06:	c1 f8 17             	sar    eax,0x17
c0026c09:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026c0c:	c1 e2 08             	shl    edx,0x8
c0026c0f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026c15:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026c18:	89 de                	mov    esi,ebx
c0026c1a:	c1 fe 17             	sar    esi,0x17
c0026c1d:	c1 e3 08             	shl    ebx,0x8
c0026c20:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026c26:	31 f0                	xor    eax,esi
c0026c28:	0f 88 3b 01 00 00    	js     c0026d69 <__addsf3+0x173>
c0026c2e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026c31:	29 f1                	sub    ecx,esi
c0026c33:	85 c9                	test   ecx,ecx
c0026c35:	7e 54                	jle    c0026c8b <__addsf3+0x95>
c0026c37:	89 f0                	mov    eax,esi
c0026c39:	84 c0                	test   al,al
c0026c3b:	75 10                	jne    c0026c4d <__addsf3+0x57>
c0026c3d:	85 db                	test   ebx,ebx
c0026c3f:	0f 84 aa 02 00 00    	je     c0026eef <__addsf3+0x2f9>
c0026c45:	49                   	dec    ecx
c0026c46:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026c49:	74 38                	je     c0026c83 <__addsf3+0x8d>
c0026c4b:	eb 13                	jmp    c0026c60 <__addsf3+0x6a>
c0026c4d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026c50:	f7 d0                	not    eax
c0026c52:	84 c0                	test   al,al
c0026c54:	0f 84 95 02 00 00    	je     c0026eef <__addsf3+0x2f9>
c0026c5a:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026c60:	83 f9 1f             	cmp    ecx,0x1f
c0026c63:	0f 8f 86 02 00 00    	jg     c0026eef <__addsf3+0x2f9>
c0026c69:	89 de                	mov    esi,ebx
c0026c6b:	d3 ee                	shr    esi,cl
c0026c6d:	b8 20 00 00 00       	mov    eax,0x20
c0026c72:	29 c8                	sub    eax,ecx
c0026c74:	89 c1                	mov    ecx,eax
c0026c76:	d3 e3                	shl    ebx,cl
c0026c78:	31 c0                	xor    eax,eax
c0026c7a:	85 db                	test   ebx,ebx
c0026c7c:	0f 95 c0             	setne  al
c0026c7f:	09 f0                	or     eax,esi
c0026c81:	01 d0                	add    eax,edx
c0026c83:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026c86:	e9 b6 00 00 00       	jmp    c0026d41 <__addsf3+0x14b>
c0026c8b:	74 5c                	je     c0026ce9 <__addsf3+0xf3>
c0026c8d:	89 f1                	mov    ecx,esi
c0026c8f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026c92:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026c95:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026c99:	75 14                	jne    c0026caf <__addsf3+0xb9>
c0026c9b:	85 d2                	test   edx,edx
c0026c9d:	0f 84 4c 02 00 00    	je     c0026eef <__addsf3+0x2f9>
c0026ca3:	49                   	dec    ecx
c0026ca4:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026ca7:	0f 84 94 00 00 00    	je     c0026d41 <__addsf3+0x14b>
c0026cad:	eb 12                	jmp    c0026cc1 <__addsf3+0xcb>
c0026caf:	89 f0                	mov    eax,esi
c0026cb1:	f7 d0                	not    eax
c0026cb3:	84 c0                	test   al,al
c0026cb5:	0f 84 34 02 00 00    	je     c0026eef <__addsf3+0x2f9>
c0026cbb:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026cc1:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026cc4:	83 f9 1f             	cmp    ecx,0x1f
c0026cc7:	0f 8f 22 02 00 00    	jg     c0026eef <__addsf3+0x2f9>
c0026ccd:	89 d7                	mov    edi,edx
c0026ccf:	d3 ef                	shr    edi,cl
c0026cd1:	b8 20 00 00 00       	mov    eax,0x20
c0026cd6:	29 c8                	sub    eax,ecx
c0026cd8:	89 c1                	mov    ecx,eax
c0026cda:	d3 e2                	shl    edx,cl
c0026cdc:	31 c0                	xor    eax,eax
c0026cde:	85 d2                	test   edx,edx
c0026ce0:	0f 95 c0             	setne  al
c0026ce3:	09 f8                	or     eax,edi
c0026ce5:	01 d8                	add    eax,ebx
c0026ce7:	eb 58                	jmp    c0026d41 <__addsf3+0x14b>
c0026ce9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026cec:	8d 70 01             	lea    esi,[eax+0x1]
c0026cef:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026cf5:	75 32                	jne    c0026d29 <__addsf3+0x133>
c0026cf7:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026cfb:	75 1f                	jne    c0026d1c <__addsf3+0x126>
c0026cfd:	85 d2                	test   edx,edx
c0026cff:	0f 84 e0 01 00 00    	je     c0026ee5 <__addsf3+0x2ef>
c0026d05:	85 db                	test   ebx,ebx
c0026d07:	0f 84 e2 01 00 00    	je     c0026eef <__addsf3+0x2f9>
c0026d0d:	89 d0                	mov    eax,edx
c0026d0f:	01 d8                	add    eax,ebx
c0026d11:	0f 89 a9 01 00 00    	jns    c0026ec0 <__addsf3+0x2ca>
c0026d17:	e9 9d 01 00 00       	jmp    c0026eb9 <__addsf3+0x2c3>
c0026d1c:	85 d2                	test   edx,edx
c0026d1e:	0f 85 cb 01 00 00    	jne    c0026eef <__addsf3+0x2f9>
c0026d24:	e9 bc 01 00 00       	jmp    c0026ee5 <__addsf3+0x2ef>
c0026d29:	31 c0                	xor    eax,eax
c0026d2b:	89 f1                	mov    ecx,esi
c0026d2d:	f7 d1                	not    ecx
c0026d2f:	84 c9                	test   cl,cl
c0026d31:	0f 84 90 01 00 00    	je     c0026ec7 <__addsf3+0x2d1>
c0026d37:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026d3a:	d1 e8                	shr    eax,1
c0026d3c:	e9 86 01 00 00       	jmp    c0026ec7 <__addsf3+0x2d1>
c0026d41:	85 c0                	test   eax,eax
c0026d43:	0f 89 7e 01 00 00    	jns    c0026ec7 <__addsf3+0x2d1>
c0026d49:	46                   	inc    esi
c0026d4a:	89 f2                	mov    edx,esi
c0026d4c:	f7 d2                	not    edx
c0026d4e:	84 d2                	test   dl,dl
c0026d50:	0f 84 6f 01 00 00    	je     c0026ec5 <__addsf3+0x2cf>
c0026d56:	89 c2                	mov    edx,eax
c0026d58:	83 e2 01             	and    edx,0x1
c0026d5b:	d1 e8                	shr    eax,1
c0026d5d:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026d62:	09 d0                	or     eax,edx
c0026d64:	e9 5e 01 00 00       	jmp    c0026ec7 <__addsf3+0x2d1>
c0026d69:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026d6d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026d70:	89 f0                	mov    eax,esi
c0026d72:	0f b6 c0             	movzx  eax,al
c0026d75:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026d78:	29 c1                	sub    ecx,eax
c0026d7a:	85 c9                	test   ecx,ecx
c0026d7c:	7e 55                	jle    c0026dd3 <__addsf3+0x1dd>
c0026d7e:	85 c0                	test   eax,eax
c0026d80:	75 11                	jne    c0026d93 <__addsf3+0x19d>
c0026d82:	85 db                	test   ebx,ebx
c0026d84:	0f 84 65 01 00 00    	je     c0026eef <__addsf3+0x2f9>
c0026d8a:	49                   	dec    ecx
c0026d8b:	75 19                	jne    c0026da6 <__addsf3+0x1b0>
c0026d8d:	89 d0                	mov    eax,edx
c0026d8f:	29 d8                	sub    eax,ebx
c0026d91:	eb 38                	jmp    c0026dcb <__addsf3+0x1d5>
c0026d93:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026d96:	f7 d0                	not    eax
c0026d98:	84 c0                	test   al,al
c0026d9a:	0f 84 4f 01 00 00    	je     c0026eef <__addsf3+0x2f9>
c0026da0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026da6:	83 f9 1f             	cmp    ecx,0x1f
c0026da9:	0f 8f 40 01 00 00    	jg     c0026eef <__addsf3+0x2f9>
c0026daf:	89 de                	mov    esi,ebx
c0026db1:	d3 ee                	shr    esi,cl
c0026db3:	b8 20 00 00 00       	mov    eax,0x20
c0026db8:	29 c8                	sub    eax,ecx
c0026dba:	89 c1                	mov    ecx,eax
c0026dbc:	d3 e3                	shl    ebx,cl
c0026dbe:	31 c0                	xor    eax,eax
c0026dc0:	85 db                	test   ebx,ebx
c0026dc2:	0f 95 c0             	setne  al
c0026dc5:	09 f0                	or     eax,esi
c0026dc7:	29 c2                	sub    edx,eax
c0026dc9:	89 d0                	mov    eax,edx
c0026dcb:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026dce:	e9 af 00 00 00       	jmp    c0026e82 <__addsf3+0x28c>
c0026dd3:	74 5c                	je     c0026e31 <__addsf3+0x23b>
c0026dd5:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026dd8:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026ddb:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026ddf:	75 14                	jne    c0026df5 <__addsf3+0x1ff>
c0026de1:	85 d2                	test   edx,edx
c0026de3:	0f 84 06 01 00 00    	je     c0026eef <__addsf3+0x2f9>
c0026de9:	48                   	dec    eax
c0026dea:	75 1b                	jne    c0026e07 <__addsf3+0x211>
c0026dec:	89 d8                	mov    eax,ebx
c0026dee:	29 d0                	sub    eax,edx
c0026df0:	e9 8d 00 00 00       	jmp    c0026e82 <__addsf3+0x28c>
c0026df5:	89 f1                	mov    ecx,esi
c0026df7:	f7 d1                	not    ecx
c0026df9:	84 c9                	test   cl,cl
c0026dfb:	0f 84 ee 00 00 00    	je     c0026eef <__addsf3+0x2f9>
c0026e01:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026e07:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e0a:	83 f8 1f             	cmp    eax,0x1f
c0026e0d:	0f 8f dc 00 00 00    	jg     c0026eef <__addsf3+0x2f9>
c0026e13:	89 d7                	mov    edi,edx
c0026e15:	88 c1                	mov    cl,al
c0026e17:	d3 ef                	shr    edi,cl
c0026e19:	b9 20 00 00 00       	mov    ecx,0x20
c0026e1e:	29 c1                	sub    ecx,eax
c0026e20:	d3 e2                	shl    edx,cl
c0026e22:	31 c0                	xor    eax,eax
c0026e24:	85 d2                	test   edx,edx
c0026e26:	0f 95 c0             	setne  al
c0026e29:	09 f8                	or     eax,edi
c0026e2b:	29 c3                	sub    ebx,eax
c0026e2d:	89 d8                	mov    eax,ebx
c0026e2f:	eb 51                	jmp    c0026e82 <__addsf3+0x28c>
c0026e31:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026e34:	40                   	inc    eax
c0026e35:	a8 fe                	test   al,0xfe
c0026e37:	75 3d                	jne    c0026e76 <__addsf3+0x280>
c0026e39:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026e3d:	0f 85 a7 00 00 00    	jne    c0026eea <__addsf3+0x2f4>
c0026e43:	85 d2                	test   edx,edx
c0026e45:	75 12                	jne    c0026e59 <__addsf3+0x263>
c0026e47:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e4a:	85 db                	test   ebx,ebx
c0026e4c:	0f 85 9d 00 00 00    	jne    c0026eef <__addsf3+0x2f9>
c0026e52:	31 ff                	xor    edi,edi
c0026e54:	e9 96 00 00 00       	jmp    c0026eef <__addsf3+0x2f9>
c0026e59:	85 db                	test   ebx,ebx
c0026e5b:	0f 84 8e 00 00 00    	je     c0026eef <__addsf3+0x2f9>
c0026e61:	89 d0                	mov    eax,edx
c0026e63:	29 d8                	sub    eax,ebx
c0026e65:	79 06                	jns    c0026e6d <__addsf3+0x277>
c0026e67:	89 d8                	mov    eax,ebx
c0026e69:	29 d0                	sub    eax,edx
c0026e6b:	eb 5a                	jmp    c0026ec7 <__addsf3+0x2d1>
c0026e6d:	bf 00 00 00 00       	mov    edi,0x0
c0026e72:	74 7b                	je     c0026eef <__addsf3+0x2f9>
c0026e74:	eb 4a                	jmp    c0026ec0 <__addsf3+0x2ca>
c0026e76:	89 d0                	mov    eax,edx
c0026e78:	29 d8                	sub    eax,ebx
c0026e7a:	79 12                	jns    c0026e8e <__addsf3+0x298>
c0026e7c:	89 d8                	mov    eax,ebx
c0026e7e:	29 d0                	sub    eax,edx
c0026e80:	eb 09                	jmp    c0026e8b <__addsf3+0x295>
c0026e82:	85 c0                	test   eax,eax
c0026e84:	79 41                	jns    c0026ec7 <__addsf3+0x2d1>
c0026e86:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026e8b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026e8e:	31 f6                	xor    esi,esi
c0026e90:	85 c0                	test   eax,eax
c0026e92:	74 33                	je     c0026ec7 <__addsf3+0x2d1>
c0026e94:	0f bd c8             	bsr    ecx,eax
c0026e97:	83 f1 1f             	xor    ecx,0x1f
c0026e9a:	d3 e0                	shl    eax,cl
c0026e9c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026ea0:	39 ca                	cmp    edx,ecx
c0026ea2:	7f 10                	jg     c0026eb4 <__addsf3+0x2be>
c0026ea4:	29 d1                	sub    ecx,edx
c0026ea6:	41                   	inc    ecx
c0026ea7:	d3 e8                	shr    eax,cl
c0026ea9:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026eac:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026eb2:	eb 13                	jmp    c0026ec7 <__addsf3+0x2d1>
c0026eb4:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026eb7:	29 ce                	sub    esi,ecx
c0026eb9:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026ebe:	eb 07                	jmp    c0026ec7 <__addsf3+0x2d1>
c0026ec0:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026ec3:	eb 02                	jmp    c0026ec7 <__addsf3+0x2d1>
c0026ec5:	31 c0                	xor    eax,eax
c0026ec7:	89 c2                	mov    edx,eax
c0026ec9:	c1 ea 08             	shr    edx,0x8
c0026ecc:	a8 7f                	test   al,0x7f
c0026ece:	0f 95 c1             	setne  cl
c0026ed1:	09 d1                	or     ecx,edx
c0026ed3:	83 e1 01             	and    ecx,0x1
c0026ed6:	c1 e8 07             	shr    eax,0x7
c0026ed9:	21 c8                	and    eax,ecx
c0026edb:	c1 e6 17             	shl    esi,0x17
c0026ede:	09 d6                	or     esi,edx
c0026ee0:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026ee3:	eb 0a                	jmp    c0026eef <__addsf3+0x2f9>
c0026ee5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026ee8:	eb 05                	jmp    c0026eef <__addsf3+0x2f9>
c0026eea:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026eef:	89 f8                	mov    eax,edi
c0026ef1:	5a                   	pop    edx
c0026ef2:	59                   	pop    ecx
c0026ef3:	5b                   	pop    ebx
c0026ef4:	5e                   	pop    esi
c0026ef5:	5f                   	pop    edi
c0026ef6:	5d                   	pop    ebp
c0026ef7:	c3                   	ret    

c0026ef8 <__subsf3>:
c0026ef8:	55                   	push   ebp
c0026ef9:	89 e5                	mov    ebp,esp
c0026efb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026efe:	05 00 00 00 80       	add    eax,0x80000000
c0026f03:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026f06:	5d                   	pop    ebp
c0026f07:	e9 ea fc ff ff       	jmp    c0026bf6 <__addsf3>

c0026f0c <__negsf2>:
c0026f0c:	55                   	push   ebp
c0026f0d:	89 e5                	mov    ebp,esp
c0026f0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026f12:	05 00 00 00 80       	add    eax,0x80000000
c0026f17:	5d                   	pop    ebp
c0026f18:	c3                   	ret    

c0026f19 <__mulsf3>:
c0026f19:	55                   	push   ebp
c0026f1a:	89 e5                	mov    ebp,esp
c0026f1c:	57                   	push   edi
c0026f1d:	56                   	push   esi
c0026f1e:	53                   	push   ebx
c0026f1f:	83 ec 1c             	sub    esp,0x1c
c0026f22:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026f25:	89 f0                	mov    eax,esi
c0026f27:	89 f1                	mov    ecx,esi
c0026f29:	c1 f9 17             	sar    ecx,0x17
c0026f2c:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026f2f:	c1 e0 08             	shl    eax,0x8
c0026f32:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026f37:	89 c1                	mov    ecx,eax
c0026f39:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026f3c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026f3f:	89 c7                	mov    edi,eax
c0026f41:	c1 ff 17             	sar    edi,0x17
c0026f44:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026f48:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026f4b:	89 f8                	mov    eax,edi
c0026f4d:	0f b6 c0             	movzx  eax,al
c0026f50:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026f53:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026f57:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026f5a:	42                   	inc    edx
c0026f5b:	80 e2 fe             	and    dl,0xfe
c0026f5e:	75 7b                	jne    c0026fdb <__mulsf3+0xc2>
c0026f60:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026f64:	74 54                	je     c0026fba <__mulsf3+0xa1>
c0026f66:	85 c9                	test   ecx,ecx
c0026f68:	0f 85 64 01 00 00    	jne    c00270d2 <__mulsf3+0x1b9>
c0026f6e:	8d 57 01             	lea    edx,[edi+0x1]
c0026f71:	80 e2 fe             	and    dl,0xfe
c0026f74:	75 1f                	jne    c0026f95 <__mulsf3+0x7c>
c0026f76:	85 c0                	test   eax,eax
c0026f78:	b8 00 00 00 00       	mov    eax,0x0
c0026f7d:	74 29                	je     c0026fa8 <__mulsf3+0x8f>
c0026f7f:	53                   	push   ebx
c0026f80:	53                   	push   ebx
c0026f81:	50                   	push   eax
c0026f82:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f85:	e8 96 05 00 00       	call   c0027520 <__nesf2>
c0026f8a:	83 c4 10             	add    esp,0x10
c0026f8d:	85 c0                	test   eax,eax
c0026f8f:	0f 85 3a 01 00 00    	jne    c00270cf <__mulsf3+0x1b6>
c0026f95:	85 ff                	test   edi,edi
c0026f97:	0f 89 35 01 00 00    	jns    c00270d2 <__mulsf3+0x1b9>
c0026f9d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026fa3:	e9 2a 01 00 00       	jmp    c00270d2 <__mulsf3+0x1b9>
c0026fa8:	51                   	push   ecx
c0026fa9:	51                   	push   ecx
c0026faa:	50                   	push   eax
c0026fab:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026fae:	e8 6d 05 00 00       	call   c0027520 <__nesf2>
c0026fb3:	83 c4 10             	add    esp,0x10
c0026fb6:	85 c0                	test   eax,eax
c0026fb8:	eb 15                	jmp    c0026fcf <__mulsf3+0xb6>
c0026fba:	85 c9                	test   ecx,ecx
c0026fbc:	74 0b                	je     c0026fc9 <__mulsf3+0xb0>
c0026fbe:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026fc1:	01 c9                	add    ecx,ecx
c0026fc3:	78 16                	js     c0026fdb <__mulsf3+0xc2>
c0026fc5:	89 d3                	mov    ebx,edx
c0026fc7:	eb f5                	jmp    c0026fbe <__mulsf3+0xa5>
c0026fc9:	89 f8                	mov    eax,edi
c0026fcb:	f7 d0                	not    eax
c0026fcd:	84 c0                	test   al,al
c0026fcf:	75 c4                	jne    c0026f95 <__mulsf3+0x7c>
c0026fd1:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026fd6:	e9 f7 00 00 00       	jmp    c00270d2 <__mulsf3+0x1b9>
c0026fdb:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026fde:	c1 e6 08             	shl    esi,0x8
c0026fe1:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026fe7:	8d 57 01             	lea    edx,[edi+0x1]
c0026fea:	80 e2 fe             	and    dl,0xfe
c0026fed:	75 63                	jne    c0027052 <__mulsf3+0x139>
c0026fef:	85 c0                	test   eax,eax
c0026ff1:	74 2f                	je     c0027022 <__mulsf3+0x109>
c0026ff3:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026ff7:	0f 89 d2 00 00 00    	jns    c00270cf <__mulsf3+0x1b6>
c0026ffd:	52                   	push   edx
c0026ffe:	52                   	push   edx
c0026fff:	6a 00                	push   0x0
c0027001:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027004:	e8 dc 04 00 00       	call   c00274e5 <__eqsf2>
c0027009:	83 c4 10             	add    esp,0x10
c002700c:	85 c0                	test   eax,eax
c002700e:	0f 85 bb 00 00 00    	jne    c00270cf <__mulsf3+0x1b6>
c0027014:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027017:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c002701d:	e9 b0 00 00 00       	jmp    c00270d2 <__mulsf3+0x1b9>
c0027022:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027025:	50                   	push   eax
c0027026:	50                   	push   eax
c0027027:	6a 00                	push   0x0
c0027029:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002702c:	e8 b4 04 00 00       	call   c00274e5 <__eqsf2>
c0027031:	83 c4 10             	add    esp,0x10
c0027034:	85 c0                	test   eax,eax
c0027036:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027039:	75 0c                	jne    c0027047 <__mulsf3+0x12e>
c002703b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c002703f:	0f 89 8a 00 00 00    	jns    c00270cf <__mulsf3+0x1b6>
c0027045:	eb cd                	jmp    c0027014 <__mulsf3+0xfb>
c0027047:	8d 43 ff             	lea    eax,[ebx-0x1]
c002704a:	01 f6                	add    esi,esi
c002704c:	78 04                	js     c0027052 <__mulsf3+0x139>
c002704e:	89 c3                	mov    ebx,eax
c0027050:	eb f5                	jmp    c0027047 <__mulsf3+0x12e>
c0027052:	89 c8                	mov    eax,ecx
c0027054:	0d 00 00 00 80       	or     eax,0x80000000
c0027059:	81 ce 00 00 00 80    	or     esi,0x80000000
c002705f:	f7 e6                	mul    esi
c0027061:	85 c0                	test   eax,eax
c0027063:	0f 95 c0             	setne  al
c0027066:	0f b6 c0             	movzx  eax,al
c0027069:	09 c2                	or     edx,eax
c002706b:	78 03                	js     c0027070 <__mulsf3+0x157>
c002706d:	01 d2                	add    edx,edx
c002706f:	4b                   	dec    ebx
c0027070:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0027076:	7f 22                	jg     c002709a <__mulsf3+0x181>
c0027078:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002707e:	85 db                	test   ebx,ebx
c0027080:	7f 23                	jg     c00270a5 <__mulsf3+0x18c>
c0027082:	83 fb e9             	cmp    ebx,0xffffffe9
c0027085:	7c 1a                	jl     c00270a1 <__mulsf3+0x188>
c0027087:	81 ca 00 00 00 80    	or     edx,0x80000000
c002708d:	b9 01 00 00 00       	mov    ecx,0x1
c0027092:	29 d9                	sub    ecx,ebx
c0027094:	d3 ea                	shr    edx,cl
c0027096:	31 db                	xor    ebx,ebx
c0027098:	eb 0b                	jmp    c00270a5 <__mulsf3+0x18c>
c002709a:	bb ff 00 00 00       	mov    ebx,0xff
c002709f:	eb 02                	jmp    c00270a3 <__mulsf3+0x18a>
c00270a1:	31 db                	xor    ebx,ebx
c00270a3:	31 d2                	xor    edx,edx
c00270a5:	89 d0                	mov    eax,edx
c00270a7:	c1 e8 08             	shr    eax,0x8
c00270aa:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00270ad:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00270b3:	09 fb                	or     ebx,edi
c00270b5:	c1 e3 17             	shl    ebx,0x17
c00270b8:	09 c3                	or     ebx,eax
c00270ba:	f6 c2 7f             	test   dl,0x7f
c00270bd:	0f 95 c1             	setne  cl
c00270c0:	09 c8                	or     eax,ecx
c00270c2:	83 e0 01             	and    eax,0x1
c00270c5:	c1 ea 07             	shr    edx,0x7
c00270c8:	21 c2                	and    edx,eax
c00270ca:	8d 34 13             	lea    esi,[ebx+edx*1]
c00270cd:	eb 03                	jmp    c00270d2 <__mulsf3+0x1b9>
c00270cf:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00270d2:	89 f0                	mov    eax,esi
c00270d4:	8d 65 f4             	lea    esp,[ebp-0xc]
c00270d7:	5b                   	pop    ebx
c00270d8:	5e                   	pop    esi
c00270d9:	5f                   	pop    edi
c00270da:	5d                   	pop    ebp
c00270db:	c3                   	ret    

c00270dc <__divsf3>:
c00270dc:	55                   	push   ebp
c00270dd:	89 e5                	mov    ebp,esp
c00270df:	57                   	push   edi
c00270e0:	56                   	push   esi
c00270e1:	53                   	push   ebx
c00270e2:	83 ec 1c             	sub    esp,0x1c
c00270e5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00270e8:	89 d8                	mov    eax,ebx
c00270ea:	89 d9                	mov    ecx,ebx
c00270ec:	c1 f9 17             	sar    ecx,0x17
c00270ef:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00270f2:	c1 e0 08             	shl    eax,0x8
c00270f5:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00270fa:	89 c1                	mov    ecx,eax
c00270fc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00270ff:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027102:	89 c7                	mov    edi,eax
c0027104:	c1 ff 17             	sar    edi,0x17
c0027107:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002710b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002710e:	89 f8                	mov    eax,edi
c0027110:	0f b6 c0             	movzx  eax,al
c0027113:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027116:	29 c6                	sub    esi,eax
c0027118:	83 c6 7f             	add    esi,0x7f
c002711b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002711e:	42                   	inc    edx
c002711f:	80 e2 fe             	and    dl,0xfe
c0027122:	0f 85 9c 00 00 00    	jne    c00271c4 <__divsf3+0xe8>
c0027128:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002712c:	74 33                	je     c0027161 <__divsf3+0x85>
c002712e:	85 c9                	test   ecx,ecx
c0027130:	0f 85 c7 01 00 00    	jne    c00272fd <__divsf3+0x221>
c0027136:	8d 57 01             	lea    edx,[edi+0x1]
c0027139:	80 e2 fe             	and    dl,0xfe
c002713c:	75 2f                	jne    c002716d <__divsf3+0x91>
c002713e:	85 c0                	test   eax,eax
c0027140:	74 2b                	je     c002716d <__divsf3+0x91>
c0027142:	51                   	push   ecx
c0027143:	51                   	push   ecx
c0027144:	6a 00                	push   0x0
c0027146:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027149:	e8 d2 03 00 00       	call   c0027520 <__nesf2>
c002714e:	83 c4 10             	add    esp,0x10
c0027151:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027154:	85 c0                	test   eax,eax
c0027156:	0f 85 a1 01 00 00    	jne    c00272fd <__divsf3+0x221>
c002715c:	e9 92 01 00 00       	jmp    c00272f3 <__divsf3+0x217>
c0027161:	85 c9                	test   ecx,ecx
c0027163:	75 1b                	jne    c0027180 <__divsf3+0xa4>
c0027165:	8d 57 01             	lea    edx,[edi+0x1]
c0027168:	80 e2 fe             	and    dl,0xfe
c002716b:	74 1e                	je     c002718b <__divsf3+0xaf>
c002716d:	85 ff                	test   edi,edi
c002716f:	0f 89 88 01 00 00    	jns    c00272fd <__divsf3+0x221>
c0027175:	81 c3 00 00 00 80    	add    ebx,0x80000000
c002717b:	e9 7d 01 00 00       	jmp    c00272fd <__divsf3+0x221>
c0027180:	8d 56 ff             	lea    edx,[esi-0x1]
c0027183:	01 c9                	add    ecx,ecx
c0027185:	78 3d                	js     c00271c4 <__divsf3+0xe8>
c0027187:	89 d6                	mov    esi,edx
c0027189:	eb f5                	jmp    c0027180 <__divsf3+0xa4>
c002718b:	85 c0                	test   eax,eax
c002718d:	b8 00 00 00 00       	mov    eax,0x0
c0027192:	74 18                	je     c00271ac <__divsf3+0xd0>
c0027194:	52                   	push   edx
c0027195:	52                   	push   edx
c0027196:	50                   	push   eax
c0027197:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002719a:	e8 81 03 00 00       	call   c0027520 <__nesf2>
c002719f:	83 c4 10             	add    esp,0x10
c00271a2:	85 c0                	test   eax,eax
c00271a4:	0f 85 50 01 00 00    	jne    c00272fa <__divsf3+0x21e>
c00271aa:	eb c1                	jmp    c002716d <__divsf3+0x91>
c00271ac:	56                   	push   esi
c00271ad:	56                   	push   esi
c00271ae:	50                   	push   eax
c00271af:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271b2:	e8 69 03 00 00       	call   c0027520 <__nesf2>
c00271b7:	83 c4 10             	add    esp,0x10
c00271ba:	85 c0                	test   eax,eax
c00271bc:	0f 84 31 01 00 00    	je     c00272f3 <__divsf3+0x217>
c00271c2:	eb a9                	jmp    c002716d <__divsf3+0x91>
c00271c4:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c00271c7:	c1 e3 08             	shl    ebx,0x8
c00271ca:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00271d0:	8d 57 01             	lea    edx,[edi+0x1]
c00271d3:	80 e2 fe             	and    dl,0xfe
c00271d6:	75 71                	jne    c0027249 <__divsf3+0x16d>
c00271d8:	85 c0                	test   eax,eax
c00271da:	ba 00 00 00 00       	mov    edx,0x0
c00271df:	74 2f                	je     c0027210 <__divsf3+0x134>
c00271e1:	51                   	push   ecx
c00271e2:	51                   	push   ecx
c00271e3:	52                   	push   edx
c00271e4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271e7:	e8 f9 02 00 00       	call   c00274e5 <__eqsf2>
c00271ec:	83 c4 10             	add    esp,0x10
c00271ef:	85 c0                	test   eax,eax
c00271f1:	0f 85 03 01 00 00    	jne    c00272fa <__divsf3+0x21e>
c00271f7:	31 d2                	xor    edx,edx
c00271f9:	89 d3                	mov    ebx,edx
c00271fb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00271fe:	31 f8                	xor    eax,edi
c0027200:	0f 89 f7 00 00 00    	jns    c00272fd <__divsf3+0x221>
c0027206:	bb 00 00 00 80       	mov    ebx,0x80000000
c002720b:	e9 ed 00 00 00       	jmp    c00272fd <__divsf3+0x221>
c0027210:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027213:	50                   	push   eax
c0027214:	50                   	push   eax
c0027215:	52                   	push   edx
c0027216:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027219:	e8 c7 02 00 00       	call   c00274e5 <__eqsf2>
c002721e:	83 c4 10             	add    esp,0x10
c0027221:	85 c0                	test   eax,eax
c0027223:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027226:	75 16                	jne    c002723e <__divsf3+0x162>
c0027228:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002722b:	31 fb                	xor    ebx,edi
c002722d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0027233:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027239:	e9 bf 00 00 00       	jmp    c00272fd <__divsf3+0x221>
c002723e:	8d 46 01             	lea    eax,[esi+0x1]
c0027241:	01 db                	add    ebx,ebx
c0027243:	78 04                	js     c0027249 <__divsf3+0x16d>
c0027245:	89 c6                	mov    esi,eax
c0027247:	eb f5                	jmp    c002723e <__divsf3+0x162>
c0027249:	89 c8                	mov    eax,ecx
c002724b:	0d 00 00 00 80       	or     eax,0x80000000
c0027250:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027256:	31 d2                	xor    edx,edx
c0027258:	39 d8                	cmp    eax,ebx
c002725a:	72 07                	jb     c0027263 <__divsf3+0x187>
c002725c:	29 d8                	sub    eax,ebx
c002725e:	ba 01 00 00 00       	mov    edx,0x1
c0027263:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c002726a:	01 d2                	add    edx,edx
c002726c:	89 c1                	mov    ecx,eax
c002726e:	01 c0                	add    eax,eax
c0027270:	85 c9                	test   ecx,ecx
c0027272:	78 04                	js     c0027278 <__divsf3+0x19c>
c0027274:	39 c3                	cmp    ebx,eax
c0027276:	77 05                	ja     c002727d <__divsf3+0x1a1>
c0027278:	29 d8                	sub    eax,ebx
c002727a:	83 ca 01             	or     edx,0x1
c002727d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027280:	75 e8                	jne    c002726a <__divsf3+0x18e>
c0027282:	85 c0                	test   eax,eax
c0027284:	0f 95 c0             	setne  al
c0027287:	0f b6 c0             	movzx  eax,al
c002728a:	c1 e2 06             	shl    edx,0x6
c002728d:	09 c2                	or     edx,eax
c002728f:	78 03                	js     c0027294 <__divsf3+0x1b8>
c0027291:	01 d2                	add    edx,edx
c0027293:	4e                   	dec    esi
c0027294:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002729a:	7f 22                	jg     c00272be <__divsf3+0x1e2>
c002729c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00272a2:	85 f6                	test   esi,esi
c00272a4:	7f 23                	jg     c00272c9 <__divsf3+0x1ed>
c00272a6:	83 fe e9             	cmp    esi,0xffffffe9
c00272a9:	7c 1a                	jl     c00272c5 <__divsf3+0x1e9>
c00272ab:	81 ca 00 00 00 80    	or     edx,0x80000000
c00272b1:	b9 01 00 00 00       	mov    ecx,0x1
c00272b6:	29 f1                	sub    ecx,esi
c00272b8:	d3 ea                	shr    edx,cl
c00272ba:	31 f6                	xor    esi,esi
c00272bc:	eb 0b                	jmp    c00272c9 <__divsf3+0x1ed>
c00272be:	be ff 00 00 00       	mov    esi,0xff
c00272c3:	eb 02                	jmp    c00272c7 <__divsf3+0x1eb>
c00272c5:	31 f6                	xor    esi,esi
c00272c7:	31 d2                	xor    edx,edx
c00272c9:	89 d0                	mov    eax,edx
c00272cb:	c1 e8 08             	shr    eax,0x8
c00272ce:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00272d1:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00272d7:	09 fe                	or     esi,edi
c00272d9:	c1 e6 17             	shl    esi,0x17
c00272dc:	09 c6                	or     esi,eax
c00272de:	f6 c2 7f             	test   dl,0x7f
c00272e1:	0f 95 c1             	setne  cl
c00272e4:	09 c8                	or     eax,ecx
c00272e6:	83 e0 01             	and    eax,0x1
c00272e9:	c1 ea 07             	shr    edx,0x7
c00272ec:	21 c2                	and    edx,eax
c00272ee:	8d 1c 16             	lea    ebx,[esi+edx*1]
c00272f1:	eb 0a                	jmp    c00272fd <__divsf3+0x221>
c00272f3:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c00272f8:	eb 03                	jmp    c00272fd <__divsf3+0x221>
c00272fa:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00272fd:	89 d8                	mov    eax,ebx
c00272ff:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027302:	5b                   	pop    ebx
c0027303:	5e                   	pop    esi
c0027304:	5f                   	pop    edi
c0027305:	5d                   	pop    ebp
c0027306:	c3                   	ret    

c0027307 <__floatsisf>:
c0027307:	55                   	push   ebp
c0027308:	89 e5                	mov    ebp,esp
c002730a:	53                   	push   ebx
c002730b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002730e:	85 d2                	test   edx,edx
c0027310:	7e 2b                	jle    c002733d <__floatsisf+0x36>
c0027312:	0f bd ca             	bsr    ecx,edx
c0027315:	83 f1 1f             	xor    ecx,0x1f
c0027318:	d3 e2                	shl    edx,cl
c002731a:	89 d0                	mov    eax,edx
c002731c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027321:	89 c3                	mov    ebx,eax
c0027323:	c1 eb 08             	shr    ebx,0x8
c0027326:	80 e2 7f             	and    dl,0x7f
c0027329:	0f 95 c2             	setne  dl
c002732c:	09 da                	or     edx,ebx
c002732e:	83 e2 01             	and    edx,0x1
c0027331:	c1 e8 07             	shr    eax,0x7
c0027334:	21 c2                	and    edx,eax
c0027336:	b8 9e 00 00 00       	mov    eax,0x9e
c002733b:	eb 32                	jmp    c002736f <__floatsisf+0x68>
c002733d:	b8 00 00 00 00       	mov    eax,0x0
c0027342:	74 34                	je     c0027378 <__floatsisf+0x71>
c0027344:	f7 da                	neg    edx
c0027346:	0f bd ca             	bsr    ecx,edx
c0027349:	83 f1 1f             	xor    ecx,0x1f
c002734c:	d3 e2                	shl    edx,cl
c002734e:	89 d0                	mov    eax,edx
c0027350:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027355:	89 c3                	mov    ebx,eax
c0027357:	c1 eb 08             	shr    ebx,0x8
c002735a:	80 e2 7f             	and    dl,0x7f
c002735d:	0f 95 c2             	setne  dl
c0027360:	09 da                	or     edx,ebx
c0027362:	83 e2 01             	and    edx,0x1
c0027365:	c1 e8 07             	shr    eax,0x7
c0027368:	21 c2                	and    edx,eax
c002736a:	b8 9e 01 00 00       	mov    eax,0x19e
c002736f:	29 c8                	sub    eax,ecx
c0027371:	c1 e0 17             	shl    eax,0x17
c0027374:	09 d8                	or     eax,ebx
c0027376:	01 d0                	add    eax,edx
c0027378:	5b                   	pop    ebx
c0027379:	5d                   	pop    ebp
c002737a:	c3                   	ret    

c002737b <__floatunsisf>:
c002737b:	55                   	push   ebp
c002737c:	89 e5                	mov    ebp,esp
c002737e:	53                   	push   ebx
c002737f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027382:	31 c0                	xor    eax,eax
c0027384:	85 d2                	test   edx,edx
c0027386:	74 32                	je     c00273ba <__floatunsisf+0x3f>
c0027388:	0f bd ca             	bsr    ecx,edx
c002738b:	83 f1 1f             	xor    ecx,0x1f
c002738e:	d3 e2                	shl    edx,cl
c0027390:	89 d0                	mov    eax,edx
c0027392:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027397:	89 c3                	mov    ebx,eax
c0027399:	c1 eb 08             	shr    ebx,0x8
c002739c:	80 e2 7f             	and    dl,0x7f
c002739f:	0f 95 c2             	setne  dl
c00273a2:	09 da                	or     edx,ebx
c00273a4:	83 e2 01             	and    edx,0x1
c00273a7:	c1 e8 07             	shr    eax,0x7
c00273aa:	21 c2                	and    edx,eax
c00273ac:	b8 9e 00 00 00       	mov    eax,0x9e
c00273b1:	29 c8                	sub    eax,ecx
c00273b3:	c1 e0 17             	shl    eax,0x17
c00273b6:	09 d8                	or     eax,ebx
c00273b8:	01 d0                	add    eax,edx
c00273ba:	5b                   	pop    ebx
c00273bb:	5d                   	pop    ebp
c00273bc:	c3                   	ret    

c00273bd <__fixsfsi>:
c00273bd:	55                   	push   ebp
c00273be:	89 e5                	mov    ebp,esp
c00273c0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00273c3:	89 d1                	mov    ecx,edx
c00273c5:	c1 e1 08             	shl    ecx,0x8
c00273c8:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c00273ce:	c1 fa 17             	sar    edx,0x17
c00273d1:	78 1c                	js     c00273ef <__fixsfsi+0x32>
c00273d3:	83 ea 7f             	sub    edx,0x7f
c00273d6:	31 c0                	xor    eax,eax
c00273d8:	83 fa 1e             	cmp    edx,0x1e
c00273db:	77 40                	ja     c002741d <__fixsfsi+0x60>
c00273dd:	89 c8                	mov    eax,ecx
c00273df:	0d 00 00 00 80       	or     eax,0x80000000
c00273e4:	b9 1f 00 00 00       	mov    ecx,0x1f
c00273e9:	29 d1                	sub    ecx,edx
c00273eb:	d3 e8                	shr    eax,cl
c00273ed:	eb 2e                	jmp    c002741d <__fixsfsi+0x60>
c00273ef:	31 c0                	xor    eax,eax
c00273f1:	81 c2 81 00 00 00    	add    edx,0x81
c00273f7:	78 24                	js     c002741d <__fixsfsi+0x60>
c00273f9:	83 fa 1e             	cmp    edx,0x1e
c00273fc:	7e 09                	jle    c0027407 <__fixsfsi+0x4a>
c00273fe:	83 fa 1f             	cmp    edx,0x1f
c0027401:	75 18                	jne    c002741b <__fixsfsi+0x5e>
c0027403:	85 c9                	test   ecx,ecx
c0027405:	75 14                	jne    c002741b <__fixsfsi+0x5e>
c0027407:	89 c8                	mov    eax,ecx
c0027409:	0d 00 00 00 80       	or     eax,0x80000000
c002740e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027413:	29 d1                	sub    ecx,edx
c0027415:	d3 e8                	shr    eax,cl
c0027417:	f7 d8                	neg    eax
c0027419:	eb 02                	jmp    c002741d <__fixsfsi+0x60>
c002741b:	31 c0                	xor    eax,eax
c002741d:	5d                   	pop    ebp
c002741e:	c3                   	ret    

c002741f <__fixunssfsi>:
c002741f:	55                   	push   ebp
c0027420:	89 e5                	mov    ebp,esp
c0027422:	53                   	push   ebx
c0027423:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027426:	89 d3                	mov    ebx,edx
c0027428:	c1 fb 17             	sar    ebx,0x17
c002742b:	83 eb 7f             	sub    ebx,0x7f
c002742e:	31 c0                	xor    eax,eax
c0027430:	83 fb 1f             	cmp    ebx,0x1f
c0027433:	77 18                	ja     c002744d <__fixunssfsi+0x2e>
c0027435:	89 d0                	mov    eax,edx
c0027437:	c1 e0 08             	shl    eax,0x8
c002743a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002743f:	0d 00 00 00 80       	or     eax,0x80000000
c0027444:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027449:	29 d9                	sub    ecx,ebx
c002744b:	d3 e8                	shr    eax,cl
c002744d:	5b                   	pop    ebx
c002744e:	5d                   	pop    ebp
c002744f:	c3                   	ret    

c0027450 <__cmpsf2>:
c0027450:	55                   	push   ebp
c0027451:	89 e5                	mov    ebp,esp
c0027453:	57                   	push   edi
c0027454:	56                   	push   esi
c0027455:	53                   	push   ebx
c0027456:	83 ec 24             	sub    esp,0x24
c0027459:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002745c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002745f:	e8 4f 10 00 00       	call   c00284b3 <__truncdfsf2>
c0027464:	5a                   	pop    edx
c0027465:	59                   	pop    ecx
c0027466:	89 c3                	mov    ebx,eax
c0027468:	c1 e8 17             	shr    eax,0x17
c002746b:	0f b6 f0             	movzx  esi,al
c002746e:	89 d8                	mov    eax,ebx
c0027470:	c1 e8 1f             	shr    eax,0x1f
c0027473:	31 c6                	xor    esi,eax
c0027475:	c1 e3 08             	shl    ebx,0x8
c0027478:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002747b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002747e:	e8 30 10 00 00       	call   c00284b3 <__truncdfsf2>
c0027483:	83 c4 10             	add    esp,0x10
c0027486:	89 c1                	mov    ecx,eax
c0027488:	c1 e9 17             	shr    ecx,0x17
c002748b:	0f b6 c9             	movzx  ecx,cl
c002748e:	89 c7                	mov    edi,eax
c0027490:	c1 ef 1f             	shr    edi,0x1f
c0027493:	89 ca                	mov    edx,ecx
c0027495:	31 fa                	xor    edx,edi
c0027497:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002749a:	c1 e0 08             	shl    eax,0x8
c002749d:	89 c2                	mov    edx,eax
c002749f:	89 d8                	mov    eax,ebx
c00274a1:	09 d0                	or     eax,edx
c00274a3:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00274a8:	09 f0                	or     eax,esi
c00274aa:	75 08                	jne    c00274b4 <__cmpsf2+0x64>
c00274ac:	31 c0                	xor    eax,eax
c00274ae:	39 f9                	cmp    ecx,edi
c00274b0:	75 0c                	jne    c00274be <__cmpsf2+0x6e>
c00274b2:	eb 29                	jmp    c00274dd <__cmpsf2+0x8d>
c00274b4:	b8 01 00 00 00       	mov    eax,0x1
c00274b9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00274bc:	7f 1f                	jg     c00274dd <__cmpsf2+0x8d>
c00274be:	83 c8 ff             	or     eax,0xffffffff
c00274c1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00274c4:	7c 17                	jl     c00274dd <__cmpsf2+0x8d>
c00274c6:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00274cc:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00274d2:	b8 01 00 00 00       	mov    eax,0x1
c00274d7:	39 d3                	cmp    ebx,edx
c00274d9:	77 02                	ja     c00274dd <__cmpsf2+0x8d>
c00274db:	19 c0                	sbb    eax,eax
c00274dd:	8d 65 f4             	lea    esp,[ebp-0xc]
c00274e0:	5b                   	pop    ebx
c00274e1:	5e                   	pop    esi
c00274e2:	5f                   	pop    edi
c00274e3:	5d                   	pop    ebp
c00274e4:	c3                   	ret    

c00274e5 <__eqsf2>:
c00274e5:	55                   	push   ebp
c00274e6:	89 e5                	mov    ebp,esp
c00274e8:	83 ec 24             	sub    esp,0x24
c00274eb:	6a 01                	push   0x1
c00274ed:	83 ec 0c             	sub    esp,0xc
c00274f0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00274f3:	e8 df 10 00 00       	call   c00285d7 <__extendsfdf2>
c00274f8:	83 c4 10             	add    esp,0x10
c00274fb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00274fe:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027501:	52                   	push   edx
c0027502:	50                   	push   eax
c0027503:	50                   	push   eax
c0027504:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027507:	e8 cb 10 00 00       	call   c00285d7 <__extendsfdf2>
c002750c:	59                   	pop    ecx
c002750d:	59                   	pop    ecx
c002750e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027511:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027514:	52                   	push   edx
c0027515:	50                   	push   eax
c0027516:	e8 35 ff ff ff       	call   c0027450 <__cmpsf2>
c002751b:	83 c4 20             	add    esp,0x20
c002751e:	c9                   	leave  
c002751f:	c3                   	ret    

c0027520 <__nesf2>:
c0027520:	eb c3                	jmp    c00274e5 <__eqsf2>

c0027522 <__gtsf2>:
c0027522:	55                   	push   ebp
c0027523:	89 e5                	mov    ebp,esp
c0027525:	83 ec 24             	sub    esp,0x24
c0027528:	6a ff                	push   0xffffffff
c002752a:	83 ec 0c             	sub    esp,0xc
c002752d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027530:	e8 a2 10 00 00       	call   c00285d7 <__extendsfdf2>
c0027535:	83 c4 10             	add    esp,0x10
c0027538:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002753b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002753e:	52                   	push   edx
c002753f:	50                   	push   eax
c0027540:	50                   	push   eax
c0027541:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027544:	e8 8e 10 00 00       	call   c00285d7 <__extendsfdf2>
c0027549:	59                   	pop    ecx
c002754a:	59                   	pop    ecx
c002754b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002754e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027551:	52                   	push   edx
c0027552:	50                   	push   eax
c0027553:	e8 f8 fe ff ff       	call   c0027450 <__cmpsf2>
c0027558:	83 c4 20             	add    esp,0x20
c002755b:	c9                   	leave  
c002755c:	c3                   	ret    

c002755d <__gesf2>:
c002755d:	eb c3                	jmp    c0027522 <__gtsf2>

c002755f <__ltsf2>:
c002755f:	eb 84                	jmp    c00274e5 <__eqsf2>

c0027561 <__lesf2>:
c0027561:	eb 82                	jmp    c00274e5 <__eqsf2>

c0027563 <__adddf3>:
c0027563:	55                   	push   ebp
c0027564:	89 e5                	mov    ebp,esp
c0027566:	57                   	push   edi
c0027567:	56                   	push   esi
c0027568:	53                   	push   ebx
c0027569:	83 ec 24             	sub    esp,0x24
c002756c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002756f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027572:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027575:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027578:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002757b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002757e:	89 c8                	mov    eax,ecx
c0027580:	89 ce                	mov    esi,ecx
c0027582:	c1 fe 14             	sar    esi,0x14
c0027585:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027588:	89 fb                	mov    ebx,edi
c002758a:	89 fa                	mov    edx,edi
c002758c:	c1 e2 0b             	shl    edx,0xb
c002758f:	c1 e0 0b             	shl    eax,0xb
c0027592:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027597:	c1 eb 15             	shr    ebx,0x15
c002759a:	09 d8                	or     eax,ebx
c002759c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c002759f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00275a2:	c1 fe 14             	sar    esi,0x14
c00275a5:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00275a8:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00275ab:	89 f3                	mov    ebx,esi
c00275ad:	c1 e3 0b             	shl    ebx,0xb
c00275b0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00275b3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00275b6:	c1 e3 0b             	shl    ebx,0xb
c00275b9:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c00275bf:	c1 ee 15             	shr    esi,0x15
c00275c2:	09 f3                	or     ebx,esi
c00275c4:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c00275c7:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00275ca:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c00275cd:	0f 88 5f 02 00 00    	js     c0027832 <__adddf3+0x2cf>
c00275d3:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00275d6:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c00275d9:	85 db                	test   ebx,ebx
c00275db:	0f 8e c7 00 00 00    	jle    c00276a8 <__adddf3+0x145>
c00275e1:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c00275e8:	75 1a                	jne    c0027604 <__adddf3+0xa1>
c00275ea:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00275ed:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00275f0:	0f 84 b2 05 00 00    	je     c0027ba8 <__adddf3+0x645>
c00275f6:	4b                   	dec    ebx
c00275f7:	75 23                	jne    c002761c <__adddf3+0xb9>
c00275f9:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00275fc:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00275ff:	e9 99 00 00 00       	jmp    c002769d <__adddf3+0x13a>
c0027604:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027607:	f7 d6                	not    esi
c0027609:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002760f:	0f 84 93 05 00 00    	je     c0027ba8 <__adddf3+0x645>
c0027615:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002761c:	83 fb 1f             	cmp    ebx,0x1f
c002761f:	7e 42                	jle    c0027663 <__adddf3+0x100>
c0027621:	83 fb 3f             	cmp    ebx,0x3f
c0027624:	0f 8f 7e 05 00 00    	jg     c0027ba8 <__adddf3+0x645>
c002762a:	83 e3 1f             	and    ebx,0x1f
c002762d:	89 d9                	mov    ecx,ebx
c002762f:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027632:	d3 ef                	shr    edi,cl
c0027634:	31 db                	xor    ebx,ebx
c0027636:	85 c9                	test   ecx,ecx
c0027638:	74 15                	je     c002764f <__adddf3+0xec>
c002763a:	be 20 00 00 00       	mov    esi,0x20
c002763f:	29 ce                	sub    esi,ecx
c0027641:	89 f1                	mov    ecx,esi
c0027643:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027646:	d3 e6                	shl    esi,cl
c0027648:	31 db                	xor    ebx,ebx
c002764a:	85 f6                	test   esi,esi
c002764c:	0f 95 c3             	setne  bl
c002764f:	31 c9                	xor    ecx,ecx
c0027651:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027655:	0f 95 c1             	setne  cl
c0027658:	09 cf                	or     edi,ecx
c002765a:	09 fb                	or     ebx,edi
c002765c:	01 da                	add    edx,ebx
c002765e:	83 d0 00             	adc    eax,0x0
c0027661:	eb 3a                	jmp    c002769d <__adddf3+0x13a>
c0027663:	bf 20 00 00 00       	mov    edi,0x20
c0027668:	29 df                	sub    edi,ebx
c002766a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002766d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027670:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027673:	d3 e6                	shl    esi,cl
c0027675:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027678:	88 d9                	mov    cl,bl
c002767a:	d3 ef                	shr    edi,cl
c002767c:	09 fe                	or     esi,edi
c002767e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027681:	88 d9                	mov    cl,bl
c0027683:	d3 ef                	shr    edi,cl
c0027685:	89 fb                	mov    ebx,edi
c0027687:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002768a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002768d:	d3 e7                	shl    edi,cl
c002768f:	85 ff                	test   edi,edi
c0027691:	0f 95 c1             	setne  cl
c0027694:	0f b6 c9             	movzx  ecx,cl
c0027697:	09 ce                	or     esi,ecx
c0027699:	01 f2                	add    edx,esi
c002769b:	11 d8                	adc    eax,ebx
c002769d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00276a0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00276a3:	e9 52 01 00 00       	jmp    c00277fa <__adddf3+0x297>
c00276a8:	0f 84 d5 00 00 00    	je     c0027783 <__adddf3+0x220>
c00276ae:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00276b1:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c00276b4:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00276b7:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00276ba:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00276c1:	75 20                	jne    c00276e3 <__adddf3+0x180>
c00276c3:	89 d6                	mov    esi,edx
c00276c5:	09 c6                	or     esi,eax
c00276c7:	0f 84 db 04 00 00    	je     c0027ba8 <__adddf3+0x645>
c00276cd:	4b                   	dec    ebx
c00276ce:	75 29                	jne    c00276f9 <__adddf3+0x196>
c00276d0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00276d3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00276d6:	01 d1                	add    ecx,edx
c00276d8:	11 c6                	adc    esi,eax
c00276da:	89 f0                	mov    eax,esi
c00276dc:	89 ca                	mov    edx,ecx
c00276de:	e9 17 01 00 00       	jmp    c00277fa <__adddf3+0x297>
c00276e3:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00276e6:	f7 d6                	not    esi
c00276e8:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00276ee:	0f 84 b4 04 00 00    	je     c0027ba8 <__adddf3+0x645>
c00276f4:	0d 00 00 00 80       	or     eax,0x80000000
c00276f9:	83 fb 1f             	cmp    ebx,0x1f
c00276fc:	7e 48                	jle    c0027746 <__adddf3+0x1e3>
c00276fe:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027701:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027704:	83 fb 3f             	cmp    ebx,0x3f
c0027707:	0f 8f 9b 04 00 00    	jg     c0027ba8 <__adddf3+0x645>
c002770d:	83 e3 1f             	and    ebx,0x1f
c0027710:	89 d9                	mov    ecx,ebx
c0027712:	89 c7                	mov    edi,eax
c0027714:	d3 ef                	shr    edi,cl
c0027716:	31 db                	xor    ebx,ebx
c0027718:	85 c9                	test   ecx,ecx
c002771a:	74 12                	je     c002772e <__adddf3+0x1cb>
c002771c:	be 20 00 00 00       	mov    esi,0x20
c0027721:	29 ce                	sub    esi,ecx
c0027723:	89 f1                	mov    ecx,esi
c0027725:	d3 e0                	shl    eax,cl
c0027727:	31 db                	xor    ebx,ebx
c0027729:	85 c0                	test   eax,eax
c002772b:	0f 95 c3             	setne  bl
c002772e:	31 c0                	xor    eax,eax
c0027730:	85 d2                	test   edx,edx
c0027732:	0f 95 c0             	setne  al
c0027735:	09 c7                	or     edi,eax
c0027737:	09 fb                	or     ebx,edi
c0027739:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002773c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002773f:	01 da                	add    edx,ebx
c0027741:	83 d6 00             	adc    esi,0x0
c0027744:	eb 39                	jmp    c002777f <__adddf3+0x21c>
c0027746:	be 20 00 00 00       	mov    esi,0x20
c002774b:	29 de                	sub    esi,ebx
c002774d:	89 c7                	mov    edi,eax
c002774f:	89 f1                	mov    ecx,esi
c0027751:	d3 e7                	shl    edi,cl
c0027753:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027756:	89 d7                	mov    edi,edx
c0027758:	88 d9                	mov    cl,bl
c002775a:	d3 ef                	shr    edi,cl
c002775c:	89 f9                	mov    ecx,edi
c002775e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027761:	09 cf                	or     edi,ecx
c0027763:	88 d9                	mov    cl,bl
c0027765:	d3 e8                	shr    eax,cl
c0027767:	89 f1                	mov    ecx,esi
c0027769:	d3 e2                	shl    edx,cl
c002776b:	85 d2                	test   edx,edx
c002776d:	0f 95 c2             	setne  dl
c0027770:	0f b6 d2             	movzx  edx,dl
c0027773:	09 d7                	or     edi,edx
c0027775:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027778:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002777b:	01 fa                	add    edx,edi
c002777d:	11 c6                	adc    esi,eax
c002777f:	89 f0                	mov    eax,esi
c0027781:	eb 77                	jmp    c00277fa <__adddf3+0x297>
c0027783:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027786:	46                   	inc    esi
c0027787:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002778a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027790:	75 41                	jne    c00277d3 <__adddf3+0x270>
c0027792:	89 d3                	mov    ebx,edx
c0027794:	09 c3                	or     ebx,eax
c0027796:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002779d:	75 27                	jne    c00277c6 <__adddf3+0x263>
c002779f:	85 db                	test   ebx,ebx
c00277a1:	0f 84 fb 03 00 00    	je     c0027ba2 <__adddf3+0x63f>
c00277a7:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00277aa:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00277ad:	0f 84 f5 03 00 00    	je     c0027ba8 <__adddf3+0x645>
c00277b3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00277b6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00277b9:	85 c0                	test   eax,eax
c00277bb:	0f 89 91 03 00 00    	jns    c0027b52 <__adddf3+0x5ef>
c00277c1:	e9 85 03 00 00       	jmp    c0027b4b <__adddf3+0x5e8>
c00277c6:	85 db                	test   ebx,ebx
c00277c8:	0f 85 da 03 00 00    	jne    c0027ba8 <__adddf3+0x645>
c00277ce:	e9 cf 03 00 00       	jmp    c0027ba2 <__adddf3+0x63f>
c00277d3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00277d6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00277d9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00277dc:	f7 d1                	not    ecx
c00277de:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00277e4:	0f 84 70 03 00 00    	je     c0027b5a <__adddf3+0x5f7>
c00277ea:	d1 ea                	shr    edx,1
c00277ec:	89 c1                	mov    ecx,eax
c00277ee:	c1 e1 1f             	shl    ecx,0x1f
c00277f1:	09 ca                	or     edx,ecx
c00277f3:	d1 e8                	shr    eax,1
c00277f5:	e9 6f 03 00 00       	jmp    c0027b69 <__adddf3+0x606>
c00277fa:	85 c0                	test   eax,eax
c00277fc:	0f 89 67 03 00 00    	jns    c0027b69 <__adddf3+0x606>
c0027802:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0027805:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027808:	f7 d1                	not    ecx
c002780a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027810:	0f 84 44 03 00 00    	je     c0027b5a <__adddf3+0x5f7>
c0027816:	89 d1                	mov    ecx,edx
c0027818:	d1 e9                	shr    ecx,1
c002781a:	83 e2 01             	and    edx,0x1
c002781d:	09 ca                	or     edx,ecx
c002781f:	89 c1                	mov    ecx,eax
c0027821:	c1 e1 1f             	shl    ecx,0x1f
c0027824:	09 ca                	or     edx,ecx
c0027826:	d1 e8                	shr    eax,1
c0027828:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002782d:	e9 37 03 00 00       	jmp    c0027b69 <__adddf3+0x606>
c0027832:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027835:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002783b:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c002783e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027841:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027847:	29 de                	sub    esi,ebx
c0027849:	85 f6                	test   esi,esi
c002784b:	0f 8e bd 00 00 00    	jle    c002790e <__adddf3+0x3ab>
c0027851:	85 db                	test   ebx,ebx
c0027853:	75 17                	jne    c002786c <__adddf3+0x309>
c0027855:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027858:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002785b:	0f 84 47 03 00 00    	je     c0027ba8 <__adddf3+0x645>
c0027861:	4e                   	dec    esi
c0027862:	75 20                	jne    c0027884 <__adddf3+0x321>
c0027864:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027867:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002786a:	eb 5b                	jmp    c00278c7 <__adddf3+0x364>
c002786c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002786f:	f7 d3                	not    ebx
c0027871:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027877:	0f 84 2b 03 00 00    	je     c0027ba8 <__adddf3+0x645>
c002787d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027884:	83 fe 1f             	cmp    esi,0x1f
c0027887:	7e 49                	jle    c00278d2 <__adddf3+0x36f>
c0027889:	83 fe 3f             	cmp    esi,0x3f
c002788c:	0f 8f 16 03 00 00    	jg     c0027ba8 <__adddf3+0x645>
c0027892:	83 e6 1f             	and    esi,0x1f
c0027895:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027898:	89 f1                	mov    ecx,esi
c002789a:	d3 ef                	shr    edi,cl
c002789c:	31 db                	xor    ebx,ebx
c002789e:	85 f6                	test   esi,esi
c00278a0:	74 13                	je     c00278b5 <__adddf3+0x352>
c00278a2:	b9 20 00 00 00       	mov    ecx,0x20
c00278a7:	29 f1                	sub    ecx,esi
c00278a9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00278ac:	d3 e6                	shl    esi,cl
c00278ae:	31 db                	xor    ebx,ebx
c00278b0:	85 f6                	test   esi,esi
c00278b2:	0f 95 c3             	setne  bl
c00278b5:	31 c9                	xor    ecx,ecx
c00278b7:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00278bb:	0f 95 c1             	setne  cl
c00278be:	09 cf                	or     edi,ecx
c00278c0:	09 fb                	or     ebx,edi
c00278c2:	29 da                	sub    edx,ebx
c00278c4:	83 d8 00             	sbb    eax,0x0
c00278c7:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00278ca:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00278cd:	e9 aa 01 00 00       	jmp    c0027a7c <__adddf3+0x519>
c00278d2:	bf 20 00 00 00       	mov    edi,0x20
c00278d7:	29 f7                	sub    edi,esi
c00278d9:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00278dc:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00278df:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00278e2:	d3 e3                	shl    ebx,cl
c00278e4:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00278e7:	89 f1                	mov    ecx,esi
c00278e9:	d3 ef                	shr    edi,cl
c00278eb:	09 fb                	or     ebx,edi
c00278ed:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00278f0:	89 f1                	mov    ecx,esi
c00278f2:	d3 ef                	shr    edi,cl
c00278f4:	89 fe                	mov    esi,edi
c00278f6:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00278f9:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00278fc:	d3 e7                	shl    edi,cl
c00278fe:	85 ff                	test   edi,edi
c0027900:	0f 95 c1             	setne  cl
c0027903:	0f b6 c9             	movzx  ecx,cl
c0027906:	09 cb                	or     ebx,ecx
c0027908:	29 da                	sub    edx,ebx
c002790a:	19 f0                	sbb    eax,esi
c002790c:	eb b9                	jmp    c00278c7 <__adddf3+0x364>
c002790e:	0f 84 cd 00 00 00    	je     c00279e1 <__adddf3+0x47e>
c0027914:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0027917:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002791a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002791d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027921:	75 1b                	jne    c002793e <__adddf3+0x3db>
c0027923:	89 d6                	mov    esi,edx
c0027925:	09 c6                	or     esi,eax
c0027927:	0f 84 7b 02 00 00    	je     c0027ba8 <__adddf3+0x645>
c002792d:	4b                   	dec    ebx
c002792e:	75 24                	jne    c0027954 <__adddf3+0x3f1>
c0027930:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027933:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027936:	29 d1                	sub    ecx,edx
c0027938:	19 c6                	sbb    esi,eax
c002793a:	89 ca                	mov    edx,ecx
c002793c:	eb 61                	jmp    c002799f <__adddf3+0x43c>
c002793e:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027941:	f7 d6                	not    esi
c0027943:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027949:	0f 84 59 02 00 00    	je     c0027ba8 <__adddf3+0x645>
c002794f:	0d 00 00 00 80       	or     eax,0x80000000
c0027954:	83 fb 1f             	cmp    ebx,0x1f
c0027957:	7e 4d                	jle    c00279a6 <__adddf3+0x443>
c0027959:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002795c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002795f:	83 fb 3f             	cmp    ebx,0x3f
c0027962:	0f 8f 40 02 00 00    	jg     c0027ba8 <__adddf3+0x645>
c0027968:	83 e3 1f             	and    ebx,0x1f
c002796b:	89 d9                	mov    ecx,ebx
c002796d:	89 c7                	mov    edi,eax
c002796f:	d3 ef                	shr    edi,cl
c0027971:	31 db                	xor    ebx,ebx
c0027973:	85 c9                	test   ecx,ecx
c0027975:	74 12                	je     c0027989 <__adddf3+0x426>
c0027977:	be 20 00 00 00       	mov    esi,0x20
c002797c:	29 ce                	sub    esi,ecx
c002797e:	89 f1                	mov    ecx,esi
c0027980:	d3 e0                	shl    eax,cl
c0027982:	31 db                	xor    ebx,ebx
c0027984:	85 c0                	test   eax,eax
c0027986:	0f 95 c3             	setne  bl
c0027989:	31 c0                	xor    eax,eax
c002798b:	85 d2                	test   edx,edx
c002798d:	0f 95 c0             	setne  al
c0027990:	09 c7                	or     edi,eax
c0027992:	09 fb                	or     ebx,edi
c0027994:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027997:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002799a:	29 da                	sub    edx,ebx
c002799c:	83 de 00             	sbb    esi,0x0
c002799f:	89 f0                	mov    eax,esi
c00279a1:	e9 d6 00 00 00       	jmp    c0027a7c <__adddf3+0x519>
c00279a6:	be 20 00 00 00       	mov    esi,0x20
c00279ab:	29 de                	sub    esi,ebx
c00279ad:	89 c7                	mov    edi,eax
c00279af:	89 f1                	mov    ecx,esi
c00279b1:	d3 e7                	shl    edi,cl
c00279b3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00279b6:	89 d7                	mov    edi,edx
c00279b8:	88 d9                	mov    cl,bl
c00279ba:	d3 ef                	shr    edi,cl
c00279bc:	89 f9                	mov    ecx,edi
c00279be:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00279c1:	09 cf                	or     edi,ecx
c00279c3:	88 d9                	mov    cl,bl
c00279c5:	d3 e8                	shr    eax,cl
c00279c7:	89 f1                	mov    ecx,esi
c00279c9:	d3 e2                	shl    edx,cl
c00279cb:	85 d2                	test   edx,edx
c00279cd:	0f 95 c2             	setne  dl
c00279d0:	0f b6 d2             	movzx  edx,dl
c00279d3:	09 d7                	or     edi,edx
c00279d5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00279d8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00279db:	29 fa                	sub    edx,edi
c00279dd:	19 c6                	sbb    esi,eax
c00279df:	eb be                	jmp    c002799f <__adddf3+0x43c>
c00279e1:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00279e4:	8d 5e 01             	lea    ebx,[esi+0x1]
c00279e7:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c00279ed:	75 6a                	jne    c0027a59 <__adddf3+0x4f6>
c00279ef:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00279f3:	75 58                	jne    c0027a4d <__adddf3+0x4ea>
c00279f5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00279f8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00279fb:	89 d6                	mov    esi,edx
c00279fd:	09 c6                	or     esi,eax
c00279ff:	75 17                	jne    c0027a18 <__adddf3+0x4b5>
c0027a01:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027a04:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027a07:	85 db                	test   ebx,ebx
c0027a09:	0f 85 99 01 00 00    	jne    c0027ba8 <__adddf3+0x645>
c0027a0f:	31 ff                	xor    edi,edi
c0027a11:	31 c9                	xor    ecx,ecx
c0027a13:	e9 90 01 00 00       	jmp    c0027ba8 <__adddf3+0x645>
c0027a18:	85 db                	test   ebx,ebx
c0027a1a:	0f 84 88 01 00 00    	je     c0027ba8 <__adddf3+0x645>
c0027a20:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027a23:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027a26:	85 c0                	test   eax,eax
c0027a28:	79 10                	jns    c0027a3a <__adddf3+0x4d7>
c0027a2a:	31 c9                	xor    ecx,ecx
c0027a2c:	f7 da                	neg    edx
c0027a2e:	0f 95 c1             	setne  cl
c0027a31:	01 c8                	add    eax,ecx
c0027a33:	f7 d8                	neg    eax
c0027a35:	e9 2f 01 00 00       	jmp    c0027b69 <__adddf3+0x606>
c0027a3a:	31 ff                	xor    edi,edi
c0027a3c:	31 c9                	xor    ecx,ecx
c0027a3e:	89 c3                	mov    ebx,eax
c0027a40:	09 d3                	or     ebx,edx
c0027a42:	0f 84 60 01 00 00    	je     c0027ba8 <__adddf3+0x645>
c0027a48:	e9 05 01 00 00       	jmp    c0027b52 <__adddf3+0x5ef>
c0027a4d:	31 ff                	xor    edi,edi
c0027a4f:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027a54:	e9 4f 01 00 00       	jmp    c0027ba8 <__adddf3+0x645>
c0027a59:	89 c1                	mov    ecx,eax
c0027a5b:	89 d0                	mov    eax,edx
c0027a5d:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027a60:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027a63:	89 ca                	mov    edx,ecx
c0027a65:	85 c9                	test   ecx,ecx
c0027a67:	79 2c                	jns    c0027a95 <__adddf3+0x532>
c0027a69:	31 c9                	xor    ecx,ecx
c0027a6b:	f7 d8                	neg    eax
c0027a6d:	0f 95 c1             	setne  cl
c0027a70:	01 ca                	add    edx,ecx
c0027a72:	f7 da                	neg    edx
c0027a74:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027a77:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027a7a:	eb 19                	jmp    c0027a95 <__adddf3+0x532>
c0027a7c:	85 c0                	test   eax,eax
c0027a7e:	0f 89 e5 00 00 00    	jns    c0027b69 <__adddf3+0x606>
c0027a84:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027a89:	89 c1                	mov    ecx,eax
c0027a8b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027a8e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027a91:	89 d0                	mov    eax,edx
c0027a93:	89 ca                	mov    edx,ecx
c0027a95:	85 d2                	test   edx,edx
c0027a97:	74 59                	je     c0027af2 <__adddf3+0x58f>
c0027a99:	0f bd da             	bsr    ebx,edx
c0027a9c:	83 f3 1f             	xor    ebx,0x1f
c0027a9f:	88 d9                	mov    cl,bl
c0027aa1:	d3 e2                	shl    edx,cl
c0027aa3:	bf 20 00 00 00       	mov    edi,0x20
c0027aa8:	89 f9                	mov    ecx,edi
c0027aaa:	29 d9                	sub    ecx,ebx
c0027aac:	89 c6                	mov    esi,eax
c0027aae:	d3 ee                	shr    esi,cl
c0027ab0:	09 d6                	or     esi,edx
c0027ab2:	88 d9                	mov    cl,bl
c0027ab4:	d3 e0                	shl    eax,cl
c0027ab6:	89 c2                	mov    edx,eax
c0027ab8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027abb:	25 ff 07 00 00       	and    eax,0x7ff
c0027ac0:	39 d8                	cmp    eax,ebx
c0027ac2:	7f 22                	jg     c0027ae6 <__adddf3+0x583>
c0027ac4:	29 c3                	sub    ebx,eax
c0027ac6:	43                   	inc    ebx
c0027ac7:	88 d9                	mov    cl,bl
c0027ac9:	d3 ea                	shr    edx,cl
c0027acb:	29 df                	sub    edi,ebx
c0027acd:	89 f9                	mov    ecx,edi
c0027acf:	89 f0                	mov    eax,esi
c0027ad1:	d3 e0                	shl    eax,cl
c0027ad3:	09 c2                	or     edx,eax
c0027ad5:	89 f0                	mov    eax,esi
c0027ad7:	88 d9                	mov    cl,bl
c0027ad9:	d3 e8                	shr    eax,cl
c0027adb:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027ade:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027ae4:	eb 6f                	jmp    c0027b55 <__adddf3+0x5f2>
c0027ae6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ae9:	29 d8                	sub    eax,ebx
c0027aeb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027aee:	89 f0                	mov    eax,esi
c0027af0:	eb 59                	jmp    c0027b4b <__adddf3+0x5e8>
c0027af2:	85 c0                	test   eax,eax
c0027af4:	74 6a                	je     c0027b60 <__adddf3+0x5fd>
c0027af6:	0f bd c8             	bsr    ecx,eax
c0027af9:	83 f1 1f             	xor    ecx,0x1f
c0027afc:	d3 e0                	shl    eax,cl
c0027afe:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027b01:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027b07:	83 c1 20             	add    ecx,0x20
c0027b0a:	39 cb                	cmp    ebx,ecx
c0027b0c:	7f 35                	jg     c0027b43 <__adddf3+0x5e0>
c0027b0e:	29 d9                	sub    ecx,ebx
c0027b10:	8d 71 01             	lea    esi,[ecx+0x1]
c0027b13:	83 fe 1f             	cmp    esi,0x1f
c0027b16:	7e 09                	jle    c0027b21 <__adddf3+0x5be>
c0027b18:	83 e9 1f             	sub    ecx,0x1f
c0027b1b:	d3 e8                	shr    eax,cl
c0027b1d:	89 c3                	mov    ebx,eax
c0027b1f:	eb 11                	jmp    c0027b32 <__adddf3+0x5cf>
c0027b21:	b9 20 00 00 00       	mov    ecx,0x20
c0027b26:	29 f1                	sub    ecx,esi
c0027b28:	89 c3                	mov    ebx,eax
c0027b2a:	d3 e3                	shl    ebx,cl
c0027b2c:	89 f1                	mov    ecx,esi
c0027b2e:	d3 e8                	shr    eax,cl
c0027b30:	89 c2                	mov    edx,eax
c0027b32:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b35:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027b3a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b3d:	89 d0                	mov    eax,edx
c0027b3f:	89 da                	mov    edx,ebx
c0027b41:	eb 26                	jmp    c0027b69 <__adddf3+0x606>
c0027b43:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b46:	29 cf                	sub    edi,ecx
c0027b48:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027b4b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b50:	eb 17                	jmp    c0027b69 <__adddf3+0x606>
c0027b52:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b55:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027b58:	eb 0f                	jmp    c0027b69 <__adddf3+0x606>
c0027b5a:	31 d2                	xor    edx,edx
c0027b5c:	31 c0                	xor    eax,eax
c0027b5e:	eb 09                	jmp    c0027b69 <__adddf3+0x606>
c0027b60:	89 c2                	mov    edx,eax
c0027b62:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027b69:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027b6c:	c1 e1 14             	shl    ecx,0x14
c0027b6f:	89 c3                	mov    ebx,eax
c0027b71:	c1 eb 0b             	shr    ebx,0xb
c0027b74:	09 d9                	or     ecx,ebx
c0027b76:	89 d3                	mov    ebx,edx
c0027b78:	c1 eb 0b             	shr    ebx,0xb
c0027b7b:	c1 e0 15             	shl    eax,0x15
c0027b7e:	09 d8                	or     eax,ebx
c0027b80:	89 c7                	mov    edi,eax
c0027b82:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027b88:	0f 95 c0             	setne  al
c0027b8b:	89 c6                	mov    esi,eax
c0027b8d:	09 f3                	or     ebx,esi
c0027b8f:	83 e3 01             	and    ebx,0x1
c0027b92:	c1 ea 0a             	shr    edx,0xa
c0027b95:	21 da                	and    edx,ebx
c0027b97:	89 f8                	mov    eax,edi
c0027b99:	01 d0                	add    eax,edx
c0027b9b:	83 d1 00             	adc    ecx,0x0
c0027b9e:	89 c7                	mov    edi,eax
c0027ba0:	eb 06                	jmp    c0027ba8 <__adddf3+0x645>
c0027ba2:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027ba5:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027ba8:	89 f8                	mov    eax,edi
c0027baa:	89 ca                	mov    edx,ecx
c0027bac:	83 c4 24             	add    esp,0x24
c0027baf:	5b                   	pop    ebx
c0027bb0:	5e                   	pop    esi
c0027bb1:	5f                   	pop    edi
c0027bb2:	5d                   	pop    ebp
c0027bb3:	c3                   	ret    

c0027bb4 <__subdf3>:
c0027bb4:	55                   	push   ebp
c0027bb5:	89 e5                	mov    ebp,esp
c0027bb7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027bba:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027bbd:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027bc3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027bc6:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027bc9:	5d                   	pop    ebp
c0027bca:	e9 94 f9 ff ff       	jmp    c0027563 <__adddf3>

c0027bcf <__negdf2>:
c0027bcf:	55                   	push   ebp
c0027bd0:	89 e5                	mov    ebp,esp
c0027bd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027bd5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027bd8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027bde:	5d                   	pop    ebp
c0027bdf:	c3                   	ret    

c0027be0 <__muldf3>:
c0027be0:	55                   	push   ebp
c0027be1:	89 e5                	mov    ebp,esp
c0027be3:	57                   	push   edi
c0027be4:	56                   	push   esi
c0027be5:	53                   	push   ebx
c0027be6:	83 ec 24             	sub    esp,0x24
c0027be9:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027bec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027bef:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027bf2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027bf5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027bf8:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027bfb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027bfe:	89 c8                	mov    eax,ecx
c0027c00:	c1 f8 14             	sar    eax,0x14
c0027c03:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027c06:	89 f8                	mov    eax,edi
c0027c08:	89 fb                	mov    ebx,edi
c0027c0a:	c1 e3 0b             	shl    ebx,0xb
c0027c0d:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027c10:	c1 e1 0b             	shl    ecx,0xb
c0027c13:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027c19:	c1 e8 15             	shr    eax,0x15
c0027c1c:	09 c1                	or     ecx,eax
c0027c1e:	89 d6                	mov    esi,edx
c0027c20:	89 d0                	mov    eax,edx
c0027c22:	c1 f8 14             	sar    eax,0x14
c0027c25:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027c28:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027c2b:	89 c3                	mov    ebx,eax
c0027c2d:	c1 e3 0b             	shl    ebx,0xb
c0027c30:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027c33:	c1 e6 0b             	shl    esi,0xb
c0027c36:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027c3c:	c1 e8 15             	shr    eax,0x15
c0027c3f:	09 c6                	or     esi,eax
c0027c41:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c44:	25 ff 07 00 00       	and    eax,0x7ff
c0027c49:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027c4c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c4f:	25 ff 07 00 00       	and    eax,0x7ff
c0027c54:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027c57:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027c5a:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027c5d:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027c64:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c67:	40                   	inc    eax
c0027c68:	a9 fe 07 00 00       	test   eax,0x7fe
c0027c6d:	0f 85 8d 00 00 00    	jne    c0027d00 <__muldf3+0x120>
c0027c73:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027c76:	09 c8                	or     eax,ecx
c0027c78:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027c7c:	74 44                	je     c0027cc2 <__muldf3+0xe2>
c0027c7e:	85 c0                	test   eax,eax
c0027c80:	0f 85 31 02 00 00    	jne    c0027eb7 <__muldf3+0x2d7>
c0027c86:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c89:	40                   	inc    eax
c0027c8a:	a9 fe 07 00 00       	test   eax,0x7fe
c0027c8f:	75 13                	jne    c0027ca4 <__muldf3+0xc4>
c0027c91:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027c94:	09 f1                	or     ecx,esi
c0027c96:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027c9a:	74 22                	je     c0027cbe <__muldf3+0xde>
c0027c9c:	85 c9                	test   ecx,ecx
c0027c9e:	0f 85 0d 02 00 00    	jne    c0027eb1 <__muldf3+0x2d1>
c0027ca4:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027ca8:	0f 89 09 02 00 00    	jns    c0027eb7 <__muldf3+0x2d7>
c0027cae:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027cb1:	05 00 00 00 80       	add    eax,0x80000000
c0027cb6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027cb9:	e9 f9 01 00 00       	jmp    c0027eb7 <__muldf3+0x2d7>
c0027cbe:	85 c9                	test   ecx,ecx
c0027cc0:	eb 2e                	jmp    c0027cf0 <__muldf3+0x110>
c0027cc2:	85 c0                	test   eax,eax
c0027cc4:	74 20                	je     c0027ce6 <__muldf3+0x106>
c0027cc6:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027cc9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027ccc:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027ccf:	c1 ef 1f             	shr    edi,0x1f
c0027cd2:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027cd5:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027cd8:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027cdb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027cde:	09 f9                	or     ecx,edi
c0027ce0:	78 1e                	js     c0027d00 <__muldf3+0x120>
c0027ce2:	89 c3                	mov    ebx,eax
c0027ce4:	eb e0                	jmp    c0027cc6 <__muldf3+0xe6>
c0027ce6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027ce9:	f7 d0                	not    eax
c0027ceb:	a9 ff 07 00 00       	test   eax,0x7ff
c0027cf0:	75 b2                	jne    c0027ca4 <__muldf3+0xc4>
c0027cf2:	31 ff                	xor    edi,edi
c0027cf4:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027cfb:	e9 b7 01 00 00       	jmp    c0027eb7 <__muldf3+0x2d7>
c0027d00:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d03:	40                   	inc    eax
c0027d04:	a9 fe 07 00 00       	test   eax,0x7fe
c0027d09:	75 57                	jne    c0027d62 <__muldf3+0x182>
c0027d0b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027d0e:	09 f0                	or     eax,esi
c0027d10:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027d14:	74 23                	je     c0027d39 <__muldf3+0x159>
c0027d16:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027d1a:	0f 89 91 01 00 00    	jns    c0027eb1 <__muldf3+0x2d1>
c0027d20:	85 c0                	test   eax,eax
c0027d22:	0f 85 89 01 00 00    	jne    c0027eb1 <__muldf3+0x2d1>
c0027d28:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027d2b:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027d31:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d34:	e9 7e 01 00 00       	jmp    c0027eb7 <__muldf3+0x2d7>
c0027d39:	85 c0                	test   eax,eax
c0027d3b:	75 0c                	jne    c0027d49 <__muldf3+0x169>
c0027d3d:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027d41:	0f 89 6a 01 00 00    	jns    c0027eb1 <__muldf3+0x2d1>
c0027d47:	eb df                	jmp    c0027d28 <__muldf3+0x148>
c0027d49:	01 f6                	add    esi,esi
c0027d4b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027d4e:	c1 ea 1f             	shr    edx,0x1f
c0027d51:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027d54:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027d57:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027d5a:	09 d6                	or     esi,edx
c0027d5c:	78 04                	js     c0027d62 <__muldf3+0x182>
c0027d5e:	89 c3                	mov    ebx,eax
c0027d60:	eb e7                	jmp    c0027d49 <__muldf3+0x169>
c0027d62:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027d68:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027d6e:	89 c8                	mov    eax,ecx
c0027d70:	f7 e6                	mul    esi
c0027d72:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027d75:	89 c7                	mov    edi,eax
c0027d77:	89 c8                	mov    eax,ecx
c0027d79:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027d7c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027d7f:	89 c1                	mov    ecx,eax
c0027d81:	89 f0                	mov    eax,esi
c0027d83:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027d86:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027d89:	89 c6                	mov    esi,eax
c0027d8b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027d8e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027d91:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027d94:	31 c0                	xor    eax,eax
c0027d96:	01 f1                	add    ecx,esi
c0027d98:	0f 92 c0             	setb   al
c0027d9b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027d9e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027da1:	83 d6 00             	adc    esi,0x0
c0027da4:	01 c7                	add    edi,eax
c0027da6:	83 d6 00             	adc    esi,0x0
c0027da9:	01 ca                	add    edx,ecx
c0027dab:	0f 92 c1             	setb   cl
c0027dae:	0f b6 c9             	movzx  ecx,cl
c0027db1:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027db4:	83 d6 00             	adc    esi,0x0
c0027db7:	01 cf                	add    edi,ecx
c0027db9:	83 d6 00             	adc    esi,0x0
c0027dbc:	31 c9                	xor    ecx,ecx
c0027dbe:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027dc1:	0f 95 c1             	setne  cl
c0027dc4:	09 cf                	or     edi,ecx
c0027dc6:	85 f6                	test   esi,esi
c0027dc8:	78 0c                	js     c0027dd6 <__muldf3+0x1f6>
c0027dca:	01 f6                	add    esi,esi
c0027dcc:	89 f8                	mov    eax,edi
c0027dce:	c1 e8 1f             	shr    eax,0x1f
c0027dd1:	09 c6                	or     esi,eax
c0027dd3:	01 ff                	add    edi,edi
c0027dd5:	4b                   	dec    ebx
c0027dd6:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027ddc:	0f 8f 85 00 00 00    	jg     c0027e67 <__muldf3+0x287>
c0027de2:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027de8:	85 db                	test   ebx,ebx
c0027dea:	0f 8f 84 00 00 00    	jg     c0027e74 <__muldf3+0x294>
c0027df0:	83 fb cc             	cmp    ebx,0xffffffcc
c0027df3:	7c 79                	jl     c0027e6e <__muldf3+0x28e>
c0027df5:	ba 01 00 00 00       	mov    edx,0x1
c0027dfa:	29 da                	sub    edx,ebx
c0027dfc:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027e02:	83 fa 1f             	cmp    edx,0x1f
c0027e05:	7e 30                	jle    c0027e37 <__muldf3+0x257>
c0027e07:	83 fa 20             	cmp    edx,0x20
c0027e0a:	75 0b                	jne    c0027e17 <__muldf3+0x237>
c0027e0c:	31 c0                	xor    eax,eax
c0027e0e:	85 ff                	test   edi,edi
c0027e10:	0f 95 c0             	setne  al
c0027e13:	89 c7                	mov    edi,eax
c0027e15:	eb 1a                	jmp    c0027e31 <__muldf3+0x251>
c0027e17:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027e1a:	89 f0                	mov    eax,esi
c0027e1c:	d3 e0                	shl    eax,cl
c0027e1e:	09 f8                	or     eax,edi
c0027e20:	0f 95 c0             	setne  al
c0027e23:	0f b6 c0             	movzx  eax,al
c0027e26:	89 c7                	mov    edi,eax
c0027e28:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027e2d:	29 d9                	sub    ecx,ebx
c0027e2f:	d3 ee                	shr    esi,cl
c0027e31:	09 f7                	or     edi,esi
c0027e33:	31 db                	xor    ebx,ebx
c0027e35:	eb 3b                	jmp    c0027e72 <__muldf3+0x292>
c0027e37:	83 c3 1f             	add    ebx,0x1f
c0027e3a:	89 f0                	mov    eax,esi
c0027e3c:	88 d9                	mov    cl,bl
c0027e3e:	d3 e0                	shl    eax,cl
c0027e40:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027e43:	89 f8                	mov    eax,edi
c0027e45:	88 d1                	mov    cl,dl
c0027e47:	d3 e8                	shr    eax,cl
c0027e49:	89 c1                	mov    ecx,eax
c0027e4b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027e4e:	09 c8                	or     eax,ecx
c0027e50:	88 d9                	mov    cl,bl
c0027e52:	d3 e7                	shl    edi,cl
c0027e54:	31 db                	xor    ebx,ebx
c0027e56:	85 ff                	test   edi,edi
c0027e58:	0f 95 c3             	setne  bl
c0027e5b:	89 df                	mov    edi,ebx
c0027e5d:	09 c7                	or     edi,eax
c0027e5f:	88 d1                	mov    cl,dl
c0027e61:	d3 ee                	shr    esi,cl
c0027e63:	31 db                	xor    ebx,ebx
c0027e65:	eb 0d                	jmp    c0027e74 <__muldf3+0x294>
c0027e67:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027e6c:	eb 02                	jmp    c0027e70 <__muldf3+0x290>
c0027e6e:	31 db                	xor    ebx,ebx
c0027e70:	31 ff                	xor    edi,edi
c0027e72:	31 f6                	xor    esi,esi
c0027e74:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027e77:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027e7a:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027e7f:	09 c3                	or     ebx,eax
c0027e81:	c1 e3 14             	shl    ebx,0x14
c0027e84:	89 f0                	mov    eax,esi
c0027e86:	c1 e8 0b             	shr    eax,0xb
c0027e89:	09 c3                	or     ebx,eax
c0027e8b:	89 f8                	mov    eax,edi
c0027e8d:	c1 e8 0b             	shr    eax,0xb
c0027e90:	c1 e6 15             	shl    esi,0x15
c0027e93:	09 c6                	or     esi,eax
c0027e95:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027e9b:	0f 95 c1             	setne  cl
c0027e9e:	09 c8                	or     eax,ecx
c0027ea0:	83 e0 01             	and    eax,0x1
c0027ea3:	c1 ef 0a             	shr    edi,0xa
c0027ea6:	21 c7                	and    edi,eax
c0027ea8:	01 f7                	add    edi,esi
c0027eaa:	83 d3 00             	adc    ebx,0x0
c0027ead:	89 da                	mov    edx,ebx
c0027eaf:	eb 03                	jmp    c0027eb4 <__muldf3+0x2d4>
c0027eb1:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027eb4:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027eb7:	89 f8                	mov    eax,edi
c0027eb9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027ebc:	83 c4 24             	add    esp,0x24
c0027ebf:	5b                   	pop    ebx
c0027ec0:	5e                   	pop    esi
c0027ec1:	5f                   	pop    edi
c0027ec2:	5d                   	pop    ebp
c0027ec3:	c3                   	ret    

c0027ec4 <__divdf3>:
c0027ec4:	55                   	push   ebp
c0027ec5:	89 e5                	mov    ebp,esp
c0027ec7:	57                   	push   edi
c0027ec8:	56                   	push   esi
c0027ec9:	53                   	push   ebx
c0027eca:	83 ec 2c             	sub    esp,0x2c
c0027ecd:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027ed0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027ed3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027ed6:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027ed9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027edc:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027edf:	89 ce                	mov    esi,ecx
c0027ee1:	89 c8                	mov    eax,ecx
c0027ee3:	c1 f8 14             	sar    eax,0x14
c0027ee6:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027ee9:	89 f8                	mov    eax,edi
c0027eeb:	89 fb                	mov    ebx,edi
c0027eed:	c1 e3 0b             	shl    ebx,0xb
c0027ef0:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027ef3:	c1 e6 0b             	shl    esi,0xb
c0027ef6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027efc:	c1 e8 15             	shr    eax,0x15
c0027eff:	09 c6                	or     esi,eax
c0027f01:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027f04:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027f07:	89 c2                	mov    edx,eax
c0027f09:	c1 fa 14             	sar    edx,0x14
c0027f0c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027f0f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027f12:	89 de                	mov    esi,ebx
c0027f14:	c1 e6 0b             	shl    esi,0xb
c0027f17:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027f1a:	c1 e0 0b             	shl    eax,0xb
c0027f1d:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027f22:	c1 eb 15             	shr    ebx,0x15
c0027f25:	09 d8                	or     eax,ebx
c0027f27:	89 c2                	mov    edx,eax
c0027f29:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027f2c:	25 ff 07 00 00       	and    eax,0x7ff
c0027f31:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027f34:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027f37:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027f3d:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027f40:	29 d8                	sub    eax,ebx
c0027f42:	05 ff 03 00 00       	add    eax,0x3ff
c0027f47:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027f4a:	46                   	inc    esi
c0027f4b:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027f51:	0f 85 a5 00 00 00    	jne    c0027ffc <__divdf3+0x138>
c0027f57:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027f5a:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027f5d:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027f61:	74 2a                	je     c0027f8d <__divdf3+0xc9>
c0027f63:	85 f6                	test   esi,esi
c0027f65:	0f 85 cc 02 00 00    	jne    c0028237 <__divdf3+0x373>
c0027f6b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027f6e:	40                   	inc    eax
c0027f6f:	a9 fe 07 00 00       	test   eax,0x7fe
c0027f74:	75 26                	jne    c0027f9c <__divdf3+0xd8>
c0027f76:	85 db                	test   ebx,ebx
c0027f78:	74 22                	je     c0027f9c <__divdf3+0xd8>
c0027f7a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027f7d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027f80:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027f83:	09 d0                	or     eax,edx
c0027f85:	0f 85 ac 02 00 00    	jne    c0028237 <__divdf3+0x373>
c0027f8b:	eb 63                	jmp    c0027ff0 <__divdf3+0x12c>
c0027f8d:	85 f6                	test   esi,esi
c0027f8f:	75 22                	jne    c0027fb3 <__divdf3+0xef>
c0027f91:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027f94:	40                   	inc    eax
c0027f95:	a9 fe 07 00 00       	test   eax,0x7fe
c0027f9a:	74 36                	je     c0027fd2 <__divdf3+0x10e>
c0027f9c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027fa0:	0f 89 91 02 00 00    	jns    c0028237 <__divdf3+0x373>
c0027fa6:	89 f8                	mov    eax,edi
c0027fa8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027fae:	e9 80 02 00 00       	jmp    c0028233 <__divdf3+0x36f>
c0027fb3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027fb6:	01 f6                	add    esi,esi
c0027fb8:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027fbb:	c1 ef 1f             	shr    edi,0x1f
c0027fbe:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027fc1:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027fc4:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027fc7:	09 f7                	or     edi,esi
c0027fc9:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027fcc:	78 2e                	js     c0027ffc <__divdf3+0x138>
c0027fce:	89 c8                	mov    eax,ecx
c0027fd0:	eb e1                	jmp    c0027fb3 <__divdf3+0xef>
c0027fd2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027fd5:	09 d0                	or     eax,edx
c0027fd7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027fdb:	74 0f                	je     c0027fec <__divdf3+0x128>
c0027fdd:	85 c0                	test   eax,eax
c0027fdf:	74 bb                	je     c0027f9c <__divdf3+0xd8>
c0027fe1:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027fe4:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027fe7:	e9 4b 02 00 00       	jmp    c0028237 <__divdf3+0x373>
c0027fec:	85 c0                	test   eax,eax
c0027fee:	75 ac                	jne    c0027f9c <__divdf3+0xd8>
c0027ff0:	31 ff                	xor    edi,edi
c0027ff2:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027ff7:	e9 3b 02 00 00       	jmp    c0028237 <__divdf3+0x373>
c0027ffc:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027fff:	8d 4f 01             	lea    ecx,[edi+0x1]
c0028002:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0028008:	75 6b                	jne    c0028075 <__divdf3+0x1b1>
c002800a:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002800d:	09 d6                	or     esi,edx
c002800f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0028013:	74 28                	je     c002803d <__divdf3+0x179>
c0028015:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028018:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c002801b:	85 f6                	test   esi,esi
c002801d:	0f 85 14 02 00 00    	jne    c0028237 <__divdf3+0x373>
c0028023:	31 ff                	xor    edi,edi
c0028025:	31 c9                	xor    ecx,ecx
c0028027:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002802a:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002802d:	0f 89 04 02 00 00    	jns    c0028237 <__divdf3+0x373>
c0028033:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028038:	e9 fa 01 00 00       	jmp    c0028237 <__divdf3+0x373>
c002803d:	85 f6                	test   esi,esi
c002803f:	75 1b                	jne    c002805c <__divdf3+0x198>
c0028041:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028044:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028047:	25 00 00 00 80       	and    eax,0x80000000
c002804c:	31 c9                	xor    ecx,ecx
c002804e:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0028053:	89 cf                	mov    edi,ecx
c0028055:	89 c1                	mov    ecx,eax
c0028057:	e9 db 01 00 00       	jmp    c0028237 <__divdf3+0x373>
c002805c:	01 d2                	add    edx,edx
c002805e:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028061:	c1 eb 1f             	shr    ebx,0x1f
c0028064:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028067:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c002806a:	8d 48 01             	lea    ecx,[eax+0x1]
c002806d:	09 da                	or     edx,ebx
c002806f:	78 04                	js     c0028075 <__divdf3+0x1b1>
c0028071:	89 c8                	mov    eax,ecx
c0028073:	eb e7                	jmp    c002805c <__divdf3+0x198>
c0028075:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028078:	81 ce 00 00 00 80    	or     esi,0x80000000
c002807e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028084:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0028087:	39 d6                	cmp    esi,edx
c0028089:	77 0d                	ja     c0028098 <__divdf3+0x1d4>
c002808b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002808e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028091:	72 1b                	jb     c00280ae <__divdf3+0x1ea>
c0028093:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0028096:	75 16                	jne    c00280ae <__divdf3+0x1ea>
c0028098:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002809b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002809e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c00280a1:	83 de 00             	sbb    esi,0x0
c00280a4:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c00280a7:	ba 01 00 00 00       	mov    edx,0x1
c00280ac:	eb 02                	jmp    c00280b0 <__divdf3+0x1ec>
c00280ae:	31 d2                	xor    edx,edx
c00280b0:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c00280b7:	31 ff                	xor    edi,edi
c00280b9:	01 ff                	add    edi,edi
c00280bb:	89 d1                	mov    ecx,edx
c00280bd:	c1 e9 1f             	shr    ecx,0x1f
c00280c0:	09 cf                	or     edi,ecx
c00280c2:	8d 1c 12             	lea    ebx,[edx+edx*1]
c00280c5:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c00280c8:	89 da                	mov    edx,ebx
c00280ca:	89 f3                	mov    ebx,esi
c00280cc:	8d 34 36             	lea    esi,[esi+esi*1]
c00280cf:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00280d2:	c1 e9 1f             	shr    ecx,0x1f
c00280d5:	09 ce                	or     esi,ecx
c00280d7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00280da:	01 c9                	add    ecx,ecx
c00280dc:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c00280df:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00280e2:	85 db                	test   ebx,ebx
c00280e4:	78 29                	js     c002810f <__divdf3+0x24b>
c00280e6:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c00280e9:	72 07                	jb     c00280f2 <__divdf3+0x22e>
c00280eb:	75 3c                	jne    c0028129 <__divdf3+0x265>
c00280ed:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00280f0:	77 37                	ja     c0028129 <__divdf3+0x265>
c00280f2:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00280f5:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c00280f8:	31 d2                	xor    edx,edx
c00280fa:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c00280fd:	0f 97 c2             	seta   dl
c0028100:	29 d6                	sub    esi,edx
c0028102:	89 d9                	mov    ecx,ebx
c0028104:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0028107:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c002810a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002810d:	eb 17                	jmp    c0028126 <__divdf3+0x262>
c002810f:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028112:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028115:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028118:	0f 97 c1             	seta   cl
c002811b:	0f b6 c9             	movzx  ecx,cl
c002811e:	29 ce                	sub    esi,ecx
c0028120:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0028123:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0028126:	83 ca 01             	or     edx,0x1
c0028129:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c002812c:	75 8b                	jne    c00280b9 <__divdf3+0x1f5>
c002812e:	c1 e7 09             	shl    edi,0x9
c0028131:	89 d1                	mov    ecx,edx
c0028133:	c1 e9 17             	shr    ecx,0x17
c0028136:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028139:	09 f3                	or     ebx,esi
c002813b:	0f 95 c3             	setne  bl
c002813e:	0f b6 db             	movzx  ebx,bl
c0028141:	c1 e2 09             	shl    edx,0x9
c0028144:	09 d3                	or     ebx,edx
c0028146:	89 ca                	mov    edx,ecx
c0028148:	09 fa                	or     edx,edi
c002814a:	78 0c                	js     c0028158 <__divdf3+0x294>
c002814c:	01 d2                	add    edx,edx
c002814e:	89 d9                	mov    ecx,ebx
c0028150:	c1 e9 1f             	shr    ecx,0x1f
c0028153:	09 ca                	or     edx,ecx
c0028155:	01 db                	add    ebx,ebx
c0028157:	48                   	dec    eax
c0028158:	3d fe 07 00 00       	cmp    eax,0x7fe
c002815d:	0f 8f 83 00 00 00    	jg     c00281e6 <__divdf3+0x322>
c0028163:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028169:	85 c0                	test   eax,eax
c002816b:	0f 8f 82 00 00 00    	jg     c00281f3 <__divdf3+0x32f>
c0028171:	83 f8 cc             	cmp    eax,0xffffffcc
c0028174:	7c 77                	jl     c00281ed <__divdf3+0x329>
c0028176:	be 01 00 00 00       	mov    esi,0x1
c002817b:	29 c6                	sub    esi,eax
c002817d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028183:	83 fe 1f             	cmp    esi,0x1f
c0028186:	7e 2f                	jle    c00281b7 <__divdf3+0x2f3>
c0028188:	83 fe 20             	cmp    esi,0x20
c002818b:	75 0a                	jne    c0028197 <__divdf3+0x2d3>
c002818d:	85 db                	test   ebx,ebx
c002818f:	0f 95 c3             	setne  bl
c0028192:	0f b6 db             	movzx  ebx,bl
c0028195:	eb 1a                	jmp    c00281b1 <__divdf3+0x2ed>
c0028197:	8d 48 3f             	lea    ecx,[eax+0x3f]
c002819a:	89 d7                	mov    edi,edx
c002819c:	d3 e7                	shl    edi,cl
c002819e:	89 f9                	mov    ecx,edi
c00281a0:	09 d9                	or     ecx,ebx
c00281a2:	0f 95 c3             	setne  bl
c00281a5:	0f b6 db             	movzx  ebx,bl
c00281a8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00281ad:	29 c1                	sub    ecx,eax
c00281af:	d3 ea                	shr    edx,cl
c00281b1:	09 d3                	or     ebx,edx
c00281b3:	31 c0                	xor    eax,eax
c00281b5:	eb 3a                	jmp    c00281f1 <__divdf3+0x32d>
c00281b7:	83 c0 1f             	add    eax,0x1f
c00281ba:	89 d7                	mov    edi,edx
c00281bc:	88 c1                	mov    cl,al
c00281be:	d3 e7                	shl    edi,cl
c00281c0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00281c3:	89 df                	mov    edi,ebx
c00281c5:	89 f1                	mov    ecx,esi
c00281c7:	d3 ef                	shr    edi,cl
c00281c9:	89 f9                	mov    ecx,edi
c00281cb:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00281ce:	09 cf                	or     edi,ecx
c00281d0:	88 c1                	mov    cl,al
c00281d2:	d3 e3                	shl    ebx,cl
c00281d4:	85 db                	test   ebx,ebx
c00281d6:	0f 95 c3             	setne  bl
c00281d9:	0f b6 db             	movzx  ebx,bl
c00281dc:	09 fb                	or     ebx,edi
c00281de:	89 f1                	mov    ecx,esi
c00281e0:	d3 ea                	shr    edx,cl
c00281e2:	31 c0                	xor    eax,eax
c00281e4:	eb 0d                	jmp    c00281f3 <__divdf3+0x32f>
c00281e6:	b8 ff 07 00 00       	mov    eax,0x7ff
c00281eb:	eb 02                	jmp    c00281ef <__divdf3+0x32b>
c00281ed:	31 c0                	xor    eax,eax
c00281ef:	31 db                	xor    ebx,ebx
c00281f1:	31 d2                	xor    edx,edx
c00281f3:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c00281f6:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c00281f9:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00281ff:	09 c8                	or     eax,ecx
c0028201:	c1 e0 14             	shl    eax,0x14
c0028204:	89 d1                	mov    ecx,edx
c0028206:	c1 e9 0b             	shr    ecx,0xb
c0028209:	09 c8                	or     eax,ecx
c002820b:	89 c6                	mov    esi,eax
c002820d:	89 d9                	mov    ecx,ebx
c002820f:	c1 e9 0b             	shr    ecx,0xb
c0028212:	c1 e2 15             	shl    edx,0x15
c0028215:	09 ca                	or     edx,ecx
c0028217:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c002821d:	0f 95 c0             	setne  al
c0028220:	09 c1                	or     ecx,eax
c0028222:	83 e1 01             	and    ecx,0x1
c0028225:	c1 eb 0a             	shr    ebx,0xa
c0028228:	21 cb                	and    ebx,ecx
c002822a:	01 d3                	add    ebx,edx
c002822c:	89 d8                	mov    eax,ebx
c002822e:	83 d6 00             	adc    esi,0x0
c0028231:	89 f2                	mov    edx,esi
c0028233:	89 c7                	mov    edi,eax
c0028235:	89 d1                	mov    ecx,edx
c0028237:	89 f8                	mov    eax,edi
c0028239:	89 ca                	mov    edx,ecx
c002823b:	83 c4 2c             	add    esp,0x2c
c002823e:	5b                   	pop    ebx
c002823f:	5e                   	pop    esi
c0028240:	5f                   	pop    edi
c0028241:	5d                   	pop    ebp
c0028242:	c3                   	ret    

c0028243 <__floatsidf>:
c0028243:	55                   	push   ebp
c0028244:	89 e5                	mov    ebp,esp
c0028246:	56                   	push   esi
c0028247:	53                   	push   ebx
c0028248:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002824b:	85 db                	test   ebx,ebx
c002824d:	7e 15                	jle    c0028264 <__floatsidf+0x21>
c002824f:	0f bd cb             	bsr    ecx,ebx
c0028252:	83 f1 1f             	xor    ecx,0x1f
c0028255:	d3 e3                	shl    ebx,cl
c0028257:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c002825d:	b8 1e 04 00 00       	mov    eax,0x41e
c0028262:	eb 21                	jmp    c0028285 <__floatsidf+0x42>
c0028264:	b8 00 00 00 00       	mov    eax,0x0
c0028269:	ba 00 00 00 00       	mov    edx,0x0
c002826e:	74 2a                	je     c002829a <__floatsidf+0x57>
c0028270:	f7 db                	neg    ebx
c0028272:	0f bd cb             	bsr    ecx,ebx
c0028275:	83 f1 1f             	xor    ecx,0x1f
c0028278:	d3 e3                	shl    ebx,cl
c002827a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028280:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028285:	29 c8                	sub    eax,ecx
c0028287:	c1 e0 14             	shl    eax,0x14
c002828a:	89 c1                	mov    ecx,eax
c002828c:	89 de                	mov    esi,ebx
c002828e:	c1 ee 0b             	shr    esi,0xb
c0028291:	09 f1                	or     ecx,esi
c0028293:	89 ca                	mov    edx,ecx
c0028295:	c1 e3 15             	shl    ebx,0x15
c0028298:	89 d8                	mov    eax,ebx
c002829a:	5b                   	pop    ebx
c002829b:	5e                   	pop    esi
c002829c:	5d                   	pop    ebp
c002829d:	c3                   	ret    

c002829e <__floatunsidf>:
c002829e:	55                   	push   ebp
c002829f:	89 e5                	mov    ebp,esp
c00282a1:	56                   	push   esi
c00282a2:	53                   	push   ebx
c00282a3:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00282a6:	85 db                	test   ebx,ebx
c00282a8:	74 2a                	je     c00282d4 <__floatunsidf+0x36>
c00282aa:	0f bd cb             	bsr    ecx,ebx
c00282ad:	83 f1 1f             	xor    ecx,0x1f
c00282b0:	d3 e3                	shl    ebx,cl
c00282b2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00282b8:	b8 1e 04 00 00       	mov    eax,0x41e
c00282bd:	29 c8                	sub    eax,ecx
c00282bf:	c1 e0 14             	shl    eax,0x14
c00282c2:	89 c1                	mov    ecx,eax
c00282c4:	89 de                	mov    esi,ebx
c00282c6:	c1 ee 0b             	shr    esi,0xb
c00282c9:	09 f1                	or     ecx,esi
c00282cb:	89 ca                	mov    edx,ecx
c00282cd:	c1 e3 15             	shl    ebx,0x15
c00282d0:	89 d8                	mov    eax,ebx
c00282d2:	eb 04                	jmp    c00282d8 <__floatunsidf+0x3a>
c00282d4:	31 c0                	xor    eax,eax
c00282d6:	31 d2                	xor    edx,edx
c00282d8:	5b                   	pop    ebx
c00282d9:	5e                   	pop    esi
c00282da:	5d                   	pop    ebp
c00282db:	c3                   	ret    

c00282dc <__fixdfsi>:
c00282dc:	55                   	push   ebp
c00282dd:	89 e5                	mov    ebp,esp
c00282df:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00282e2:	89 d1                	mov    ecx,edx
c00282e4:	c1 e1 0b             	shl    ecx,0xb
c00282e7:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00282ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00282f0:	c1 e8 15             	shr    eax,0x15
c00282f3:	09 c1                	or     ecx,eax
c00282f5:	c1 fa 14             	sar    edx,0x14
c00282f8:	78 1f                	js     c0028319 <__fixdfsi+0x3d>
c00282fa:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028300:	31 c0                	xor    eax,eax
c0028302:	83 fa 1e             	cmp    edx,0x1e
c0028305:	77 40                	ja     c0028347 <__fixdfsi+0x6b>
c0028307:	89 c8                	mov    eax,ecx
c0028309:	0d 00 00 00 80       	or     eax,0x80000000
c002830e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028313:	29 d1                	sub    ecx,edx
c0028315:	d3 e8                	shr    eax,cl
c0028317:	eb 2e                	jmp    c0028347 <__fixdfsi+0x6b>
c0028319:	31 c0                	xor    eax,eax
c002831b:	81 c2 01 04 00 00    	add    edx,0x401
c0028321:	78 24                	js     c0028347 <__fixdfsi+0x6b>
c0028323:	83 fa 1e             	cmp    edx,0x1e
c0028326:	7e 09                	jle    c0028331 <__fixdfsi+0x55>
c0028328:	83 fa 1f             	cmp    edx,0x1f
c002832b:	75 18                	jne    c0028345 <__fixdfsi+0x69>
c002832d:	85 c9                	test   ecx,ecx
c002832f:	75 14                	jne    c0028345 <__fixdfsi+0x69>
c0028331:	89 c8                	mov    eax,ecx
c0028333:	0d 00 00 00 80       	or     eax,0x80000000
c0028338:	b9 1f 00 00 00       	mov    ecx,0x1f
c002833d:	29 d1                	sub    ecx,edx
c002833f:	d3 e8                	shr    eax,cl
c0028341:	f7 d8                	neg    eax
c0028343:	eb 02                	jmp    c0028347 <__fixdfsi+0x6b>
c0028345:	31 c0                	xor    eax,eax
c0028347:	5d                   	pop    ebp
c0028348:	c3                   	ret    

c0028349 <__fixunsdfsi>:
c0028349:	55                   	push   ebp
c002834a:	89 e5                	mov    ebp,esp
c002834c:	53                   	push   ebx
c002834d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028350:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028353:	89 d3                	mov    ebx,edx
c0028355:	c1 fb 14             	sar    ebx,0x14
c0028358:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c002835e:	31 c0                	xor    eax,eax
c0028360:	83 fb 1f             	cmp    ebx,0x1f
c0028363:	77 1d                	ja     c0028382 <__fixunsdfsi+0x39>
c0028365:	89 d0                	mov    eax,edx
c0028367:	c1 e0 0b             	shl    eax,0xb
c002836a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002836f:	c1 e9 15             	shr    ecx,0x15
c0028372:	09 c8                	or     eax,ecx
c0028374:	0d 00 00 00 80       	or     eax,0x80000000
c0028379:	b9 1f 00 00 00       	mov    ecx,0x1f
c002837e:	29 d9                	sub    ecx,ebx
c0028380:	d3 e8                	shr    eax,cl
c0028382:	5b                   	pop    ebx
c0028383:	5d                   	pop    ebp
c0028384:	c3                   	ret    

c0028385 <__cmpdf2>:
c0028385:	55                   	push   ebp
c0028386:	89 e5                	mov    ebp,esp
c0028388:	57                   	push   edi
c0028389:	56                   	push   esi
c002838a:	53                   	push   ebx
c002838b:	83 ec 0c             	sub    esp,0xc
c002838e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028391:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028394:	89 ca                	mov    edx,ecx
c0028396:	c1 ea 14             	shr    edx,0x14
c0028399:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002839f:	89 cb                	mov    ebx,ecx
c00283a1:	c1 fb 1f             	sar    ebx,0x1f
c00283a4:	31 da                	xor    edx,ebx
c00283a6:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00283a9:	89 df                	mov    edi,ebx
c00283ab:	c1 e7 0b             	shl    edi,0xb
c00283ae:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00283b1:	c1 e1 0b             	shl    ecx,0xb
c00283b4:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00283ba:	c1 eb 15             	shr    ebx,0x15
c00283bd:	09 d9                	or     ecx,ebx
c00283bf:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c00283c2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00283c5:	89 ce                	mov    esi,ecx
c00283c7:	c1 ee 14             	shr    esi,0x14
c00283ca:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00283d0:	89 cb                	mov    ebx,ecx
c00283d2:	c1 fb 1f             	sar    ebx,0x1f
c00283d5:	31 de                	xor    esi,ebx
c00283d7:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00283da:	89 df                	mov    edi,ebx
c00283dc:	c1 e7 0b             	shl    edi,0xb
c00283df:	c1 e1 0b             	shl    ecx,0xb
c00283e2:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00283e8:	c1 eb 15             	shr    ebx,0x15
c00283eb:	09 d9                	or     ecx,ebx
c00283ed:	89 d3                	mov    ebx,edx
c00283ef:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00283f5:	43                   	inc    ebx
c00283f6:	83 fb 01             	cmp    ebx,0x1
c00283f9:	77 08                	ja     c0028403 <__cmpdf2+0x7e>
c00283fb:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00283fe:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028401:	75 68                	jne    c002846b <__cmpdf2+0xe6>
c0028403:	89 f3                	mov    ebx,esi
c0028405:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002840b:	43                   	inc    ebx
c002840c:	83 fb 01             	cmp    ebx,0x1
c002840f:	77 06                	ja     c0028417 <__cmpdf2+0x92>
c0028411:	89 fb                	mov    ebx,edi
c0028413:	09 cb                	or     ebx,ecx
c0028415:	75 54                	jne    c002846b <__cmpdf2+0xe6>
c0028417:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002841a:	09 f8                	or     eax,edi
c002841c:	09 c8                	or     eax,ecx
c002841e:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028421:	75 12                	jne    c0028435 <__cmpdf2+0xb0>
c0028423:	8d 42 01             	lea    eax,[edx+0x1]
c0028426:	83 f8 01             	cmp    eax,0x1
c0028429:	77 0a                	ja     c0028435 <__cmpdf2+0xb0>
c002842b:	8d 5e 01             	lea    ebx,[esi+0x1]
c002842e:	31 c0                	xor    eax,eax
c0028430:	83 fb 01             	cmp    ebx,0x1
c0028433:	76 36                	jbe    c002846b <__cmpdf2+0xe6>
c0028435:	b8 01 00 00 00       	mov    eax,0x1
c002843a:	39 f2                	cmp    edx,esi
c002843c:	7f 2d                	jg     c002846b <__cmpdf2+0xe6>
c002843e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028443:	7c 26                	jl     c002846b <__cmpdf2+0xe6>
c0028445:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028448:	77 07                	ja     c0028451 <__cmpdf2+0xcc>
c002844a:	72 16                	jb     c0028462 <__cmpdf2+0xdd>
c002844c:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c002844f:	76 0a                	jbe    c002845b <__cmpdf2+0xd6>
c0028451:	89 d0                	mov    eax,edx
c0028453:	c1 f8 1f             	sar    eax,0x1f
c0028456:	83 c8 01             	or     eax,0x1
c0028459:	eb 10                	jmp    c002846b <__cmpdf2+0xe6>
c002845b:	b8 00 00 00 00       	mov    eax,0x0
c0028460:	73 09                	jae    c002846b <__cmpdf2+0xe6>
c0028462:	89 d0                	mov    eax,edx
c0028464:	c1 f8 1f             	sar    eax,0x1f
c0028467:	83 e0 02             	and    eax,0x2
c002846a:	48                   	dec    eax
c002846b:	83 c4 0c             	add    esp,0xc
c002846e:	5b                   	pop    ebx
c002846f:	5e                   	pop    esi
c0028470:	5f                   	pop    edi
c0028471:	5d                   	pop    ebp
c0028472:	c3                   	ret    

c0028473 <__eqdf2>:
c0028473:	55                   	push   ebp
c0028474:	89 e5                	mov    ebp,esp
c0028476:	50                   	push   eax
c0028477:	6a 01                	push   0x1
c0028479:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002847c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002847f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028482:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028485:	e8 fb fe ff ff       	call   c0028385 <__cmpdf2>
c002848a:	83 c4 18             	add    esp,0x18
c002848d:	c9                   	leave  
c002848e:	c3                   	ret    

c002848f <__nedf2>:
c002848f:	eb e2                	jmp    c0028473 <__eqdf2>

c0028491 <__gtdf2>:
c0028491:	55                   	push   ebp
c0028492:	89 e5                	mov    ebp,esp
c0028494:	50                   	push   eax
c0028495:	6a ff                	push   0xffffffff
c0028497:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002849a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002849d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00284a0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00284a3:	e8 dd fe ff ff       	call   c0028385 <__cmpdf2>
c00284a8:	83 c4 18             	add    esp,0x18
c00284ab:	c9                   	leave  
c00284ac:	c3                   	ret    

c00284ad <__gedf2>:
c00284ad:	eb e2                	jmp    c0028491 <__gtdf2>

c00284af <__ltdf2>:
c00284af:	eb c2                	jmp    c0028473 <__eqdf2>

c00284b1 <__ledf2>:
c00284b1:	eb c0                	jmp    c0028473 <__eqdf2>

c00284b3 <__truncdfsf2>:
c00284b3:	55                   	push   ebp
c00284b4:	89 e5                	mov    ebp,esp
c00284b6:	57                   	push   edi
c00284b7:	56                   	push   esi
c00284b8:	53                   	push   ebx
c00284b9:	83 ec 0c             	sub    esp,0xc
c00284bc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00284bf:	89 d1                	mov    ecx,edx
c00284c1:	c1 f9 14             	sar    ecx,0x14
c00284c4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00284c7:	89 df                	mov    edi,ebx
c00284c9:	c1 e7 0b             	shl    edi,0xb
c00284cc:	89 d0                	mov    eax,edx
c00284ce:	c1 e0 0b             	shl    eax,0xb
c00284d1:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00284d6:	c1 eb 15             	shr    ebx,0x15
c00284d9:	09 d8                	or     eax,ebx
c00284db:	89 cb                	mov    ebx,ecx
c00284dd:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00284e3:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c00284e9:	81 fe fd 00 00 00    	cmp    esi,0xfd
c00284ef:	0f 86 9e 00 00 00    	jbe    c0028593 <__truncdfsf2+0xe0>
c00284f5:	85 db                	test   ebx,ebx
c00284f7:	75 0a                	jne    c0028503 <__truncdfsf2+0x50>
c00284f9:	c1 fa 17             	sar    edx,0x17
c00284fc:	30 d2                	xor    dl,dl
c00284fe:	e9 84 00 00 00       	jmp    c0028587 <__truncdfsf2+0xd4>
c0028503:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028509:	83 fe 83             	cmp    esi,0xffffff83
c002850c:	7d 4b                	jge    c0028559 <__truncdfsf2+0xa6>
c002850e:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0028513:	29 f1                	sub    ecx,esi
c0028515:	83 f9 1f             	cmp    ecx,0x1f
c0028518:	7f 6b                	jg     c0028585 <__truncdfsf2+0xd2>
c002851a:	0d 00 00 00 80       	or     eax,0x80000000
c002851f:	89 c3                	mov    ebx,eax
c0028521:	d3 eb                	shr    ebx,cl
c0028523:	be 01 00 00 00       	mov    esi,0x1
c0028528:	d3 e6                	shl    esi,cl
c002852a:	4e                   	dec    esi
c002852b:	21 f0                	and    eax,esi
c002852d:	09 f8                	or     eax,edi
c002852f:	0f 95 c0             	setne  al
c0028532:	0f b6 c0             	movzx  eax,al
c0028535:	09 c3                	or     ebx,eax
c0028537:	89 d9                	mov    ecx,ebx
c0028539:	c1 e9 08             	shr    ecx,0x8
c002853c:	f6 c3 7f             	test   bl,0x7f
c002853f:	0f 95 c0             	setne  al
c0028542:	09 c8                	or     eax,ecx
c0028544:	83 e0 01             	and    eax,0x1
c0028547:	c1 eb 07             	shr    ebx,0x7
c002854a:	21 c3                	and    ebx,eax
c002854c:	81 e2 00 00 00 80    	and    edx,0x80000000
c0028552:	09 d1                	or     ecx,edx
c0028554:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0028557:	eb 76                	jmp    c00285cf <__truncdfsf2+0x11c>
c0028559:	83 c6 80             	add    esi,0xffffff80
c002855c:	7e 1d                	jle    c002857b <__truncdfsf2+0xc8>
c002855e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028564:	75 0b                	jne    c0028571 <__truncdfsf2+0xbe>
c0028566:	09 f8                	or     eax,edi
c0028568:	74 09                	je     c0028573 <__truncdfsf2+0xc0>
c002856a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c002856f:	eb 02                	jmp    c0028573 <__truncdfsf2+0xc0>
c0028571:	31 c0                	xor    eax,eax
c0028573:	c1 fa 17             	sar    edx,0x17
c0028576:	80 ca ff             	or     dl,0xff
c0028579:	eb 0e                	jmp    c0028589 <__truncdfsf2+0xd6>
c002857b:	c1 fa 1f             	sar    edx,0x1f
c002857e:	c1 e2 08             	shl    edx,0x8
c0028581:	09 ca                	or     edx,ecx
c0028583:	eb 04                	jmp    c0028589 <__truncdfsf2+0xd6>
c0028585:	31 d2                	xor    edx,edx
c0028587:	31 c0                	xor    eax,eax
c0028589:	c1 e2 17             	shl    edx,0x17
c002858c:	c1 e8 08             	shr    eax,0x8
c002858f:	09 d0                	or     eax,edx
c0028591:	eb 3c                	jmp    c00285cf <__truncdfsf2+0x11c>
c0028593:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028599:	89 ca                	mov    edx,ecx
c002859b:	c1 fa 0b             	sar    edx,0xb
c002859e:	c1 e2 08             	shl    edx,0x8
c00285a1:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00285a4:	31 db                	xor    ebx,ebx
c00285a6:	85 ff                	test   edi,edi
c00285a8:	0f 95 c3             	setne  bl
c00285ab:	09 d8                	or     eax,ebx
c00285ad:	89 c3                	mov    ebx,eax
c00285af:	c1 eb 08             	shr    ebx,0x8
c00285b2:	a8 7f                	test   al,0x7f
c00285b4:	0f 95 c2             	setne  dl
c00285b7:	89 d6                	mov    esi,edx
c00285b9:	09 de                	or     esi,ebx
c00285bb:	83 e6 01             	and    esi,0x1
c00285be:	c1 e8 07             	shr    eax,0x7
c00285c1:	21 f0                	and    eax,esi
c00285c3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00285c6:	09 ca                	or     edx,ecx
c00285c8:	c1 e2 17             	shl    edx,0x17
c00285cb:	09 da                	or     edx,ebx
c00285cd:	01 d0                	add    eax,edx
c00285cf:	83 c4 0c             	add    esp,0xc
c00285d2:	5b                   	pop    ebx
c00285d3:	5e                   	pop    esi
c00285d4:	5f                   	pop    edi
c00285d5:	5d                   	pop    ebp
c00285d6:	c3                   	ret    

c00285d7 <__extendsfdf2>:
c00285d7:	55                   	push   ebp
c00285d8:	89 e5                	mov    ebp,esp
c00285da:	57                   	push   edi
c00285db:	56                   	push   esi
c00285dc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00285df:	89 d1                	mov    ecx,edx
c00285e1:	c1 f9 17             	sar    ecx,0x17
c00285e4:	c1 e2 08             	shl    edx,0x8
c00285e7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00285ed:	89 c8                	mov    eax,ecx
c00285ef:	80 e4 f8             	and    ah,0xf8
c00285f2:	8d 71 01             	lea    esi,[ecx+0x1]
c00285f5:	81 e6 fe 00 00 00    	and    esi,0xfe
c00285fb:	75 27                	jne    c0028624 <__extendsfdf2+0x4d>
c00285fd:	81 e1 ff 00 00 00    	and    ecx,0xff
c0028603:	75 18                	jne    c002861d <__extendsfdf2+0x46>
c0028605:	85 d2                	test   edx,edx
c0028607:	74 20                	je     c0028629 <__extendsfdf2+0x52>
c0028609:	41                   	inc    ecx
c002860a:	01 d2                	add    edx,edx
c002860c:	79 fb                	jns    c0028609 <__extendsfdf2+0x32>
c002860e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028614:	29 c8                	sub    eax,ecx
c0028616:	05 81 03 00 00       	add    eax,0x381
c002861b:	eb 0c                	jmp    c0028629 <__extendsfdf2+0x52>
c002861d:	05 00 07 00 00       	add    eax,0x700
c0028622:	eb 05                	jmp    c0028629 <__extendsfdf2+0x52>
c0028624:	05 80 03 00 00       	add    eax,0x380
c0028629:	c1 e0 14             	shl    eax,0x14
c002862c:	89 c1                	mov    ecx,eax
c002862e:	89 d0                	mov    eax,edx
c0028630:	c1 e8 0b             	shr    eax,0xb
c0028633:	09 c1                	or     ecx,eax
c0028635:	c1 e2 15             	shl    edx,0x15
c0028638:	89 d0                	mov    eax,edx
c002863a:	89 ca                	mov    edx,ecx
c002863c:	5e                   	pop    esi
c002863d:	5f                   	pop    edi
c002863e:	5d                   	pop    ebp
c002863f:	c3                   	ret    

c0028640 <fabs>:
c0028640:	83 ec 0c             	sub    esp,0xc
c0028643:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028647:	89 04 24             	mov    DWORD PTR [esp],eax
c002864a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002864e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028653:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028657:	dd 04 24             	fld    QWORD PTR [esp]
c002865a:	83 c4 0c             	add    esp,0xc
c002865d:	c3                   	ret    
c002865e:	66 90                	xchg   ax,ax

c0028660 <lrint>:
c0028660:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028664:	83 ec 04             	sub    esp,0x4
c0028667:	db 1c 24             	fistp  DWORD PTR [esp]
c002866a:	58                   	pop    eax
c002866b:	c3                   	ret    

c002866c <lrintf>:
c002866c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028670:	83 ec 04             	sub    esp,0x4
c0028673:	db 1c 24             	fistp  DWORD PTR [esp]
c0028676:	58                   	pop    eax
c0028677:	c3                   	ret    

Disassembly of section .init:

c0028678 <_init>:
c0028678:	55                   	push   ebp
c0028679:	89 e5                	mov    ebp,esp
c002867b:	e8 98 7a fd ff       	call   c0000118 <frame_dummy>
c0028680:	e8 63 e0 ff ff       	call   c00266e8 <__do_global_ctors_aux>
c0028685:	5d                   	pop    ebp
c0028686:	c3                   	ret    

Disassembly of section .fini:

c0028687 <_fini>:
c0028687:	55                   	push   ebp
c0028688:	89 e5                	mov    ebp,esp
c002868a:	e8 19 7a fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002868f:	5d                   	pop    ebp
c0028690:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028692 <Computer::~Computer()>:
c0028692:	83 ec 0c             	sub    esp,0xc
c0028695:	ba c8 a1 02 c0       	mov    edx,0xc002a1c8
c002869a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002869e:	89 10                	mov    DWORD PTR [eax],edx
c00286a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286a4:	83 ec 0c             	sub    esp,0xc
c00286a7:	50                   	push   eax
c00286a8:	e8 7f bb fe ff       	call   c001422c <Device::~Device()>
c00286ad:	83 c4 10             	add    esp,0x10
c00286b0:	90                   	nop
c00286b1:	83 c4 0c             	add    esp,0xc
c00286b4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00286b6 <Computer::~Computer()>:
c00286b6:	83 ec 0c             	sub    esp,0xc
c00286b9:	83 ec 0c             	sub    esp,0xc
c00286bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00286c0:	e8 cd ff ff ff       	call   c0028692 <Computer::~Computer()>
c00286c5:	83 c4 10             	add    esp,0x10
c00286c8:	83 ec 08             	sub    esp,0x8
c00286cb:	68 ec 01 00 00       	push   0x1ec
c00286d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00286d4:	e8 7b a7 fe ff       	call   c0012e54 <operator delete(void*, unsigned long)>
c00286d9:	83 c4 10             	add    esp,0x10
c00286dc:	83 c4 0c             	add    esp,0xc
c00286df:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00286e0 <idleCommon()>:
c00286e0:	83 ec 0c             	sub    esp,0xc
c00286e3:	e8 12 57 ff ff       	call   c001ddfa <lockScheduler()>
c00286e8:	e8 49 5a ff ff       	call   c001e136 <schedule()>
c00286ed:	83 c4 0c             	add    esp,0xc
c00286f0:	e9 07 57 ff ff       	jmp    c001ddfc <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00286f6 <LinkedList<UnixFile>::~LinkedList()>:
c00286f6:	90                   	nop
c00286f7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00286f8 <LinkedList<UnixFile>::LinkedList()>:
c00286f8:	83 ec 0c             	sub    esp,0xc
c00286fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286ff:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028705:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028709:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028714:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002871b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002871f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028725:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028729:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028730:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028734:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002873b:	83 ec 0c             	sub    esp,0xc
c002873e:	68 9a a4 02 c0       	push   0xc002a49a
c0028743:	e8 ec a7 fe ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0028748:	83 c4 10             	add    esp,0x10
c002874b:	90                   	nop
c002874c:	83 c4 0c             	add    esp,0xc
c002874f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028750 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028750:	83 ec 0c             	sub    esp,0xc
c0028753:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028758:	75 10                	jne    c002876a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002875a:	83 ec 0c             	sub    esp,0xc
c002875d:	68 b4 a4 02 c0       	push   0xc002a4b4
c0028762:	e8 6e 1e ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c0028767:	83 c4 10             	add    esp,0x10
c002876a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002876e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028770:	85 c0                	test   eax,eax
c0028772:	74 34                	je     c00287a8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028774:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028778:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002877b:	85 c0                	test   eax,eax
c002877d:	74 29                	je     c00287a8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002877f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028783:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028786:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002878a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002878d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028791:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028795:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002879c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002879f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00287a6:	eb 65                	jmp    c002880d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00287a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00287ae:	85 c0                	test   eax,eax
c00287b0:	75 4b                	jne    c00287fd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00287b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287b9:	85 c0                	test   eax,eax
c00287bb:	75 40                	jne    c00287fd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00287bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287c1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287c5:	89 10                	mov    DWORD PTR [eax],edx
c00287c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287cf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00287d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287d9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00287e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287e4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287e7:	85 c0                	test   eax,eax
c00287e9:	74 22                	je     c002880d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00287eb:	83 ec 0c             	sub    esp,0xc
c00287ee:	68 d6 a4 02 c0       	push   0xc002a4d6
c00287f3:	e8 dd 1d ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c00287f8:	83 c4 10             	add    esp,0x10
c00287fb:	eb 10                	jmp    c002880d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00287fd:	83 ec 0c             	sub    esp,0xc
c0028800:	68 e0 a4 02 c0       	push   0xc002a4e0
c0028805:	e8 cb 1d ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c002880a:	83 c4 10             	add    esp,0x10
c002880d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028811:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028814:	8d 50 01             	lea    edx,[eax+0x1]
c0028817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002881b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002881e:	90                   	nop
c002881f:	83 c4 0c             	add    esp,0xc
c0028822:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0028824 <LinkedList<UnixFile>::getFirstElement()>:
c0028824:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028828:	8b 00                	mov    eax,DWORD PTR [eax]
c002882a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002882c <LinkedList<UnixFile>::removeFirst()>:
c002882c:	83 ec 0c             	sub    esp,0xc
c002882f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028833:	8b 00                	mov    eax,DWORD PTR [eax]
c0028835:	85 c0                	test   eax,eax
c0028837:	75 12                	jne    c002884b <LinkedList<UnixFile>::removeFirst()+0x1f>
c0028839:	83 ec 0c             	sub    esp,0xc
c002883c:	68 ec a4 02 c0       	push   0xc002a4ec
c0028841:	e8 8f 1d ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c0028846:	83 c4 10             	add    esp,0x10
c0028849:	eb 7e                	jmp    c00288c9 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002884b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002884f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028852:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028855:	85 c0                	test   eax,eax
c0028857:	74 10                	je     c0028869 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0028859:	83 ec 0c             	sub    esp,0xc
c002885c:	68 37 a5 02 c0       	push   0xc002a537
c0028861:	e8 6f 1d ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c0028866:	83 c4 10             	add    esp,0x10
c0028869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002886d:	8b 00                	mov    eax,DWORD PTR [eax]
c002886f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028872:	85 c0                	test   eax,eax
c0028874:	75 33                	jne    c00288a9 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0028876:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002887a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028884:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002888b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002888f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028892:	83 f8 01             	cmp    eax,0x1
c0028895:	74 21                	je     c00288b8 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028897:	83 ec 0c             	sub    esp,0xc
c002889a:	68 10 a5 02 c0       	push   0xc002a510
c002889f:	e8 31 1d ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c00288a4:	83 c4 10             	add    esp,0x10
c00288a7:	eb 0f                	jmp    c00288b8 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00288a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00288af:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00288b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288b6:	89 10                	mov    DWORD PTR [eax],edx
c00288b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288bc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288bf:	8d 50 ff             	lea    edx,[eax-0x1]
c00288c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288c6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00288c9:	83 c4 0c             	add    esp,0xc
c00288cc:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00288ce <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00288ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00288d2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288d5:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00288d6 <DriverlessDevice::~DriverlessDevice()>:
c00288d6:	ba 04 ae 02 c0       	mov    edx,0xc002ae04
c00288db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288df:	89 10                	mov    DWORD PTR [eax],edx
c00288e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288e5:	50                   	push   eax
c00288e6:	e8 41 b9 fe ff       	call   c001422c <Device::~Device()>
c00288eb:	83 c4 04             	add    esp,0x4
c00288ee:	90                   	nop
c00288ef:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00288f0 <DriverlessDevice::~DriverlessDevice()>:
c00288f0:	83 ec 0c             	sub    esp,0xc
c00288f3:	83 ec 0c             	sub    esp,0xc
c00288f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288fa:	e8 d7 ff ff ff       	call   c00288d6 <DriverlessDevice::~DriverlessDevice()>
c00288ff:	83 c4 10             	add    esp,0x10
c0028902:	83 ec 08             	sub    esp,0x8
c0028905:	68 58 01 00 00       	push   0x158
c002890a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002890e:	e8 41 a5 fe ff       	call   c0012e54 <operator delete(void*, unsigned long)>
c0028913:	83 c4 10             	add    esp,0x10
c0028916:	83 c4 0c             	add    esp,0xc
c0028919:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002891a <LinkedList<Device>::addElement(Device*)>:
c002891a:	83 ec 0c             	sub    esp,0xc
c002891d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028922:	75 10                	jne    c0028934 <LinkedList<Device>::addElement(Device*)+0x1a>
c0028924:	83 ec 0c             	sub    esp,0xc
c0028927:	68 b4 a4 02 c0       	push   0xc002a4b4
c002892c:	e8 a4 1c ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c0028931:	83 c4 10             	add    esp,0x10
c0028934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028938:	8b 00                	mov    eax,DWORD PTR [eax]
c002893a:	85 c0                	test   eax,eax
c002893c:	74 3a                	je     c0028978 <LinkedList<Device>::addElement(Device*)+0x5e>
c002893e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028942:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028945:	85 c0                	test   eax,eax
c0028947:	74 2f                	je     c0028978 <LinkedList<Device>::addElement(Device*)+0x5e>
c0028949:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002894d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028950:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028954:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002895a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002895e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028962:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028965:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028969:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002896c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028976:	eb 68                	jmp    c00289e0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028978:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002897c:	8b 00                	mov    eax,DWORD PTR [eax]
c002897e:	85 c0                	test   eax,eax
c0028980:	75 4e                	jne    c00289d0 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028986:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028989:	85 c0                	test   eax,eax
c002898b:	75 43                	jne    c00289d0 <LinkedList<Device>::addElement(Device*)+0xb6>
c002898d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028991:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028995:	89 10                	mov    DWORD PTR [eax],edx
c0028997:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002899b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002899f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00289a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289a9:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00289b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289b7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289ba:	85 c0                	test   eax,eax
c00289bc:	74 22                	je     c00289e0 <LinkedList<Device>::addElement(Device*)+0xc6>
c00289be:	83 ec 0c             	sub    esp,0xc
c00289c1:	68 d6 a4 02 c0       	push   0xc002a4d6
c00289c6:	e8 0a 1c ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c00289cb:	83 c4 10             	add    esp,0x10
c00289ce:	eb 10                	jmp    c00289e0 <LinkedList<Device>::addElement(Device*)+0xc6>
c00289d0:	83 ec 0c             	sub    esp,0xc
c00289d3:	68 e0 a4 02 c0       	push   0xc002a4e0
c00289d8:	e8 f8 1b ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c00289dd:	83 c4 10             	add    esp,0x10
c00289e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289e4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289e7:	8d 50 01             	lea    edx,[eax+0x1]
c00289ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289ee:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00289f1:	90                   	nop
c00289f2:	83 c4 0c             	add    esp,0xc
c00289f5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00289f6 <LinkedList<Device>::LinkedList()>:
c00289f6:	83 ec 0c             	sub    esp,0xc
c00289f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289fd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028a03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a07:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a12:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028a19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a1d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028a23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a27:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a32:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028a39:	83 ec 0c             	sub    esp,0xc
c0028a3c:	68 9a a4 02 c0       	push   0xc002a49a
c0028a41:	e8 ee a4 fe ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0028a46:	83 c4 10             	add    esp,0x10
c0028a49:	90                   	nop
c0028a4a:	83 c4 0c             	add    esp,0xc
c0028a4d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0028a4e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0028a4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a52:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a54:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028a56 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028a56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a5a:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a5c:	85 c0                	test   eax,eax
c0028a5e:	75 0e                	jne    c0028a6e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028a60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a64:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a67:	85 c0                	test   eax,eax
c0028a69:	75 03                	jne    c0028a6e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028a6b:	b0 01                	mov    al,0x1
c0028a6d:	c3                   	ret    
c0028a6e:	b0 00                	mov    al,0x0
c0028a70:	90                   	nop
c0028a71:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028a72 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028a72:	83 ec 0c             	sub    esp,0xc
c0028a75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a79:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a7b:	85 c0                	test   eax,eax
c0028a7d:	75 15                	jne    c0028a94 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0028a7f:	83 ec 0c             	sub    esp,0xc
c0028a82:	68 ec a4 02 c0       	push   0xc002a4ec
c0028a87:	e8 49 1b ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c0028a8c:	83 c4 10             	add    esp,0x10
c0028a8f:	e9 88 00 00 00       	jmp    c0028b1c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028a94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a98:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a9b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028a9e:	85 c0                	test   eax,eax
c0028aa0:	0f 95 c0             	setne  al
c0028aa3:	84 c0                	test   al,al
c0028aa5:	74 10                	je     c0028ab7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028aa7:	83 ec 0c             	sub    esp,0xc
c0028aaa:	68 37 a5 02 c0       	push   0xc002a537
c0028aaf:	e8 21 1b ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c0028ab4:	83 c4 10             	add    esp,0x10
c0028ab7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028abb:	8b 00                	mov    eax,DWORD PTR [eax]
c0028abd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028ac0:	85 c0                	test   eax,eax
c0028ac2:	0f 94 c0             	sete   al
c0028ac5:	84 c0                	test   al,al
c0028ac7:	74 33                	je     c0028afc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028ac9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028acd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028ad3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ad7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028ade:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ae2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ae5:	83 f8 01             	cmp    eax,0x1
c0028ae8:	74 21                	je     c0028b0b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028aea:	83 ec 0c             	sub    esp,0xc
c0028aed:	68 10 a5 02 c0       	push   0xc002a510
c0028af2:	e8 de 1a ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c0028af7:	83 c4 10             	add    esp,0x10
c0028afa:	eb 0f                	jmp    c0028b0b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028afc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b00:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b02:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028b05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b09:	89 10                	mov    DWORD PTR [eax],edx
c0028b0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b0f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b12:	8d 50 ff             	lea    edx,[eax-0x1]
c0028b15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b19:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028b1c:	83 c4 0c             	add    esp,0xc
c0028b1f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028b20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028b20:	83 ec 0c             	sub    esp,0xc
c0028b23:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028b28:	75 10                	jne    c0028b3a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028b2a:	83 ec 0c             	sub    esp,0xc
c0028b2d:	68 b4 a4 02 c0       	push   0xc002a4b4
c0028b32:	e8 9e 1a ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c0028b37:	83 c4 10             	add    esp,0x10
c0028b3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b3e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b40:	85 c0                	test   eax,eax
c0028b42:	74 34                	je     c0028b78 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028b44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b48:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b4b:	85 c0                	test   eax,eax
c0028b4d:	74 29                	je     c0028b78 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028b4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b53:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b56:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b5a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028b5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b61:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b65:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028b68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b6c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b6f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028b76:	eb 65                	jmp    c0028bdd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028b78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b7c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b7e:	85 c0                	test   eax,eax
c0028b80:	75 4b                	jne    c0028bcd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028b82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b89:	85 c0                	test   eax,eax
c0028b8b:	75 40                	jne    c0028bcd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028b8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b95:	89 10                	mov    DWORD PTR [eax],edx
c0028b97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b9b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b9f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028ba2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ba6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028ba9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028bb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bb4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028bb7:	85 c0                	test   eax,eax
c0028bb9:	74 22                	je     c0028bdd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028bbb:	83 ec 0c             	sub    esp,0xc
c0028bbe:	68 d6 a4 02 c0       	push   0xc002a4d6
c0028bc3:	e8 0d 1a ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c0028bc8:	83 c4 10             	add    esp,0x10
c0028bcb:	eb 10                	jmp    c0028bdd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028bcd:	83 ec 0c             	sub    esp,0xc
c0028bd0:	68 e0 a4 02 c0       	push   0xc002a4e0
c0028bd5:	e8 fb 19 ff ff       	call   c001a5d5 <Krnl::panic(char const*)>
c0028bda:	83 c4 10             	add    esp,0x10
c0028bdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028be1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028be4:	8d 50 01             	lea    edx,[eax+0x1]
c0028be7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028beb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028bee:	90                   	nop
c0028bef:	83 c4 0c             	add    esp,0xc
c0028bf2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028bf4 <ACPI::~ACPI()>:
c0028bf4:	83 ec 0c             	sub    esp,0xc
c0028bf7:	ba 4c b7 02 c0       	mov    edx,0xc002b74c
c0028bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c00:	89 10                	mov    DWORD PTR [eax],edx
c0028c02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c06:	83 ec 0c             	sub    esp,0xc
c0028c09:	50                   	push   eax
c0028c0a:	e8 1d b6 fe ff       	call   c001422c <Device::~Device()>
c0028c0f:	83 c4 10             	add    esp,0x10
c0028c12:	90                   	nop
c0028c13:	83 c4 0c             	add    esp,0xc
c0028c16:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028c18 <ACPI::~ACPI()>:
c0028c18:	83 ec 0c             	sub    esp,0xc
c0028c1b:	83 ec 0c             	sub    esp,0xc
c0028c1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c22:	e8 cd ff ff ff       	call   c0028bf4 <ACPI::~ACPI()>
c0028c27:	83 c4 10             	add    esp,0x10
c0028c2a:	83 ec 08             	sub    esp,0x8
c0028c2d:	68 68 12 00 00       	push   0x1268
c0028c32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c36:	e8 19 a2 fe ff       	call   c0012e54 <operator delete(void*, unsigned long)>
c0028c3b:	83 c4 10             	add    esp,0x10
c0028c3e:	83 c4 0c             	add    esp,0xc
c0028c41:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028c42 <CPU::~CPU()>:
c0028c42:	83 ec 0c             	sub    esp,0xc
c0028c45:	ba 3c bb 02 c0       	mov    edx,0xc002bb3c
c0028c4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c4e:	89 10                	mov    DWORD PTR [eax],edx
c0028c50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c54:	83 ec 0c             	sub    esp,0xc
c0028c57:	50                   	push   eax
c0028c58:	e8 cf b5 fe ff       	call   c001422c <Device::~Device()>
c0028c5d:	83 c4 10             	add    esp,0x10
c0028c60:	90                   	nop
c0028c61:	83 c4 0c             	add    esp,0xc
c0028c64:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028c66 <CPU::~CPU()>:
c0028c66:	83 ec 0c             	sub    esp,0xc
c0028c69:	83 ec 0c             	sub    esp,0xc
c0028c6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c70:	e8 cd ff ff ff       	call   c0028c42 <CPU::~CPU()>
c0028c75:	83 c4 10             	add    esp,0x10
c0028c78:	83 ec 08             	sub    esp,0x8
c0028c7b:	68 98 11 00 00       	push   0x1198
c0028c80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c84:	e8 cb a1 fe ff       	call   c0012e54 <operator delete(void*, unsigned long)>
c0028c89:	83 c4 10             	add    esp,0x10
c0028c8c:	83 c4 0c             	add    esp,0xc
c0028c8f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028c90 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028c90:	90                   	nop
c0028c91:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028c92 <ThreadControlBlock::ThreadControlBlock()>:
c0028c92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c96:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028c9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ca1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028ca8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cac:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028cb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cb7:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028cbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cc2:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028cc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cca:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028cce:	90                   	nop
c0028ccf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028cd0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028cd0:	83 ec 0c             	sub    esp,0xc
c0028cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cd7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028cdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ce1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cec:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028cf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cf7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028cfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d01:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028d08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d0c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028d13:	83 ec 0c             	sub    esp,0xc
c0028d16:	68 9a a4 02 c0       	push   0xc002a49a
c0028d1b:	e8 14 a2 fe ff       	call   c0012f34 <Dbg::kprintf(char const*, ...)>
c0028d20:	83 c4 10             	add    esp,0x10
c0028d23:	90                   	nop
c0028d24:	83 c4 0c             	add    esp,0xc
c0028d27:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028d28 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028d28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028d2c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028d2f:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028d30 <Vm::_FPUState::_FPUState()>:
c0028d30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d34:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028d3b:	90                   	nop
c0028d3c:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028d3e <PCI::~PCI()>:
c0028d3e:	83 ec 0c             	sub    esp,0xc
c0028d41:	ba 24 cc 02 c0       	mov    edx,0xc002cc24
c0028d46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d4a:	89 10                	mov    DWORD PTR [eax],edx
c0028d4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d50:	83 ec 0c             	sub    esp,0xc
c0028d53:	50                   	push   eax
c0028d54:	e8 ab ae fe ff       	call   c0013c04 <Bus::~Bus()>
c0028d59:	83 c4 10             	add    esp,0x10
c0028d5c:	90                   	nop
c0028d5d:	83 c4 0c             	add    esp,0xc
c0028d60:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028d62 <PCI::~PCI()>:
c0028d62:	83 ec 0c             	sub    esp,0xc
c0028d65:	83 ec 0c             	sub    esp,0xc
c0028d68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d6c:	e8 cd ff ff ff       	call   c0028d3e <PCI::~PCI()>
c0028d71:	83 c4 10             	add    esp,0x10
c0028d74:	83 ec 08             	sub    esp,0x8
c0028d77:	68 58 01 00 00       	push   0x158
c0028d7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d80:	e8 cf a0 fe ff       	call   c0012e54 <operator delete(void*, unsigned long)>
c0028d85:	83 c4 10             	add    esp,0x10
c0028d88:	83 c4 0c             	add    esp,0xc
c0028d8b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028d8c <IDE::~IDE()>:
c0028d8c:	83 ec 0c             	sub    esp,0xc
c0028d8f:	ba 88 ce 02 c0       	mov    edx,0xc002ce88
c0028d94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d98:	89 10                	mov    DWORD PTR [eax],edx
c0028d9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d9e:	83 ec 0c             	sub    esp,0xc
c0028da1:	50                   	push   eax
c0028da2:	e8 75 b9 fe ff       	call   c001471c <HardDiskController::~HardDiskController()>
c0028da7:	83 c4 10             	add    esp,0x10
c0028daa:	90                   	nop
c0028dab:	83 c4 0c             	add    esp,0xc
c0028dae:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028db0 <IDE::~IDE()>:
c0028db0:	83 ec 0c             	sub    esp,0xc
c0028db3:	83 ec 0c             	sub    esp,0xc
c0028db6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dba:	e8 cd ff ff ff       	call   c0028d8c <IDE::~IDE()>
c0028dbf:	83 c4 10             	add    esp,0x10
c0028dc2:	83 ec 08             	sub    esp,0x8
c0028dc5:	68 70 02 00 00       	push   0x270
c0028dca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dce:	e8 81 a0 fe ff       	call   c0012e54 <operator delete(void*, unsigned long)>
c0028dd3:	83 c4 10             	add    esp,0x10
c0028dd6:	83 c4 0c             	add    esp,0xc
c0028dd9:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028dda <SATABus::~SATABus()>:
c0028dda:	83 ec 0c             	sub    esp,0xc
c0028ddd:	ba 68 cf 02 c0       	mov    edx,0xc002cf68
c0028de2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028de6:	89 10                	mov    DWORD PTR [eax],edx
c0028de8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dec:	83 ec 0c             	sub    esp,0xc
c0028def:	50                   	push   eax
c0028df0:	e8 27 b9 fe ff       	call   c001471c <HardDiskController::~HardDiskController()>
c0028df5:	83 c4 10             	add    esp,0x10
c0028df8:	90                   	nop
c0028df9:	83 c4 0c             	add    esp,0xc
c0028dfc:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028dfe <SATABus::~SATABus()>:
c0028dfe:	83 ec 0c             	sub    esp,0xc
c0028e01:	83 ec 0c             	sub    esp,0xc
c0028e04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e08:	e8 cd ff ff ff       	call   c0028dda <SATABus::~SATABus()>
c0028e0d:	83 c4 10             	add    esp,0x10
c0028e10:	83 ec 08             	sub    esp,0x8
c0028e13:	68 64 01 00 00       	push   0x164
c0028e18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e1c:	e8 33 a0 fe ff       	call   c0012e54 <operator delete(void*, unsigned long)>
c0028e21:	83 c4 10             	add    esp,0x10
c0028e24:	83 c4 0c             	add    esp,0xc
c0028e27:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028e28 <ATA::~ATA()>:
c0028e28:	83 ec 0c             	sub    esp,0xc
c0028e2b:	ba b4 cf 02 c0       	mov    edx,0xc002cfb4
c0028e30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e34:	89 10                	mov    DWORD PTR [eax],edx
c0028e36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e3a:	83 ec 0c             	sub    esp,0xc
c0028e3d:	50                   	push   eax
c0028e3e:	e8 cb b9 fe ff       	call   c001480e <PhysicalDisk::~PhysicalDisk()>
c0028e43:	83 c4 10             	add    esp,0x10
c0028e46:	90                   	nop
c0028e47:	83 c4 0c             	add    esp,0xc
c0028e4a:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028e4c <ATA::~ATA()>:
c0028e4c:	83 ec 0c             	sub    esp,0xc
c0028e4f:	83 ec 0c             	sub    esp,0xc
c0028e52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e56:	e8 cd ff ff ff       	call   c0028e28 <ATA::~ATA()>
c0028e5b:	83 c4 10             	add    esp,0x10
c0028e5e:	83 ec 08             	sub    esp,0x8
c0028e61:	68 7c 01 00 00       	push   0x17c
c0028e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e6a:	e8 e5 9f fe ff       	call   c0012e54 <operator delete(void*, unsigned long)>
c0028e6f:	83 c4 10             	add    esp,0x10
c0028e72:	83 c4 0c             	add    esp,0xc
c0028e75:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028e76 <ATAPI::~ATAPI()>:
c0028e76:	83 ec 0c             	sub    esp,0xc
c0028e79:	ba ec cf 02 c0       	mov    edx,0xc002cfec
c0028e7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e82:	89 10                	mov    DWORD PTR [eax],edx
c0028e84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e88:	83 ec 0c             	sub    esp,0xc
c0028e8b:	50                   	push   eax
c0028e8c:	e8 7d b9 fe ff       	call   c001480e <PhysicalDisk::~PhysicalDisk()>
c0028e91:	83 c4 10             	add    esp,0x10
c0028e94:	90                   	nop
c0028e95:	83 c4 0c             	add    esp,0xc
c0028e98:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028e9a <ATAPI::~ATAPI()>:
c0028e9a:	83 ec 0c             	sub    esp,0xc
c0028e9d:	83 ec 0c             	sub    esp,0xc
c0028ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ea4:	e8 cd ff ff ff       	call   c0028e76 <ATAPI::~ATAPI()>
c0028ea9:	83 c4 10             	add    esp,0x10
c0028eac:	83 ec 08             	sub    esp,0x8
c0028eaf:	68 80 01 00 00       	push   0x180
c0028eb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028eb8:	e8 97 9f fe ff       	call   c0012e54 <operator delete(void*, unsigned long)>
c0028ebd:	83 c4 10             	add    esp,0x10
c0028ec0:	83 c4 0c             	add    esp,0xc
c0028ec3:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028ec4 <SATA::~SATA()>:
c0028ec4:	83 ec 0c             	sub    esp,0xc
c0028ec7:	ba a0 d0 02 c0       	mov    edx,0xc002d0a0
c0028ecc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ed0:	89 10                	mov    DWORD PTR [eax],edx
c0028ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ed6:	83 ec 0c             	sub    esp,0xc
c0028ed9:	50                   	push   eax
c0028eda:	e8 2f b9 fe ff       	call   c001480e <PhysicalDisk::~PhysicalDisk()>
c0028edf:	83 c4 10             	add    esp,0x10
c0028ee2:	90                   	nop
c0028ee3:	83 c4 0c             	add    esp,0xc
c0028ee6:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028ee8 <SATA::~SATA()>:
c0028ee8:	83 ec 0c             	sub    esp,0xc
c0028eeb:	83 ec 0c             	sub    esp,0xc
c0028eee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ef2:	e8 cd ff ff ff       	call   c0028ec4 <SATA::~SATA()>
c0028ef7:	83 c4 10             	add    esp,0x10
c0028efa:	83 ec 08             	sub    esp,0x8
c0028efd:	68 7c 01 00 00       	push   0x17c
c0028f02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f06:	e8 49 9f fe ff       	call   c0012e54 <operator delete(void*, unsigned long)>
c0028f0b:	83 c4 10             	add    esp,0x10
c0028f0e:	83 c4 0c             	add    esp,0xc
c0028f11:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028f12 <SATAPI::~SATAPI()>:
c0028f12:	83 ec 0c             	sub    esp,0xc
c0028f15:	ba 7c d1 02 c0       	mov    edx,0xc002d17c
c0028f1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f1e:	89 10                	mov    DWORD PTR [eax],edx
c0028f20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f24:	83 ec 0c             	sub    esp,0xc
c0028f27:	50                   	push   eax
c0028f28:	e8 e1 b8 fe ff       	call   c001480e <PhysicalDisk::~PhysicalDisk()>
c0028f2d:	83 c4 10             	add    esp,0x10
c0028f30:	90                   	nop
c0028f31:	83 c4 0c             	add    esp,0xc
c0028f34:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028f36 <SATAPI::~SATAPI()>:
c0028f36:	83 ec 0c             	sub    esp,0xc
c0028f39:	83 ec 0c             	sub    esp,0xc
c0028f3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f40:	e8 cd ff ff ff       	call   c0028f12 <SATAPI::~SATAPI()>
c0028f45:	83 c4 10             	add    esp,0x10
c0028f48:	83 ec 08             	sub    esp,0x8
c0028f4b:	68 80 01 00 00       	push   0x180
c0028f50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f54:	e8 fb 9e fe ff       	call   c0012e54 <operator delete(void*, unsigned long)>
c0028f59:	83 c4 10             	add    esp,0x10
c0028f5c:	83 c4 0c             	add    esp,0xc
c0028f5f:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028f60 <AVX::~AVX()>:
c0028f60:	83 ec 0c             	sub    esp,0xc
c0028f63:	ba bc d1 02 c0       	mov    edx,0xc002d1bc
c0028f68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f6c:	89 10                	mov    DWORD PTR [eax],edx
c0028f6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f72:	83 ec 0c             	sub    esp,0xc
c0028f75:	50                   	push   eax
c0028f76:	e8 17 b9 fe ff       	call   c0014892 <FPU::~FPU()>
c0028f7b:	83 c4 10             	add    esp,0x10
c0028f7e:	90                   	nop
c0028f7f:	83 c4 0c             	add    esp,0xc
c0028f82:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028f84 <AVX::~AVX()>:
c0028f84:	83 ec 0c             	sub    esp,0xc
c0028f87:	83 ec 0c             	sub    esp,0xc
c0028f8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f8e:	e8 cd ff ff ff       	call   c0028f60 <AVX::~AVX()>
c0028f93:	83 c4 10             	add    esp,0x10
c0028f96:	83 ec 08             	sub    esp,0x8
c0028f99:	68 58 01 00 00       	push   0x158
c0028f9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fa2:	e8 ad 9e fe ff       	call   c0012e54 <operator delete(void*, unsigned long)>
c0028fa7:	83 c4 10             	add    esp,0x10
c0028faa:	83 c4 0c             	add    esp,0xc
c0028fad:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028fae <MMX::~MMX()>:
c0028fae:	83 ec 0c             	sub    esp,0xc
c0028fb1:	ba fc d1 02 c0       	mov    edx,0xc002d1fc
c0028fb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fba:	89 10                	mov    DWORD PTR [eax],edx
c0028fbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fc0:	83 ec 0c             	sub    esp,0xc
c0028fc3:	50                   	push   eax
c0028fc4:	e8 c9 b8 fe ff       	call   c0014892 <FPU::~FPU()>
c0028fc9:	83 c4 10             	add    esp,0x10
c0028fcc:	90                   	nop
c0028fcd:	83 c4 0c             	add    esp,0xc
c0028fd0:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028fd2 <MMX::~MMX()>:
c0028fd2:	83 ec 0c             	sub    esp,0xc
c0028fd5:	83 ec 0c             	sub    esp,0xc
c0028fd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fdc:	e8 cd ff ff ff       	call   c0028fae <MMX::~MMX()>
c0028fe1:	83 c4 10             	add    esp,0x10
c0028fe4:	83 ec 08             	sub    esp,0x8
c0028fe7:	68 58 01 00 00       	push   0x158
c0028fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ff0:	e8 5f 9e fe ff       	call   c0012e54 <operator delete(void*, unsigned long)>
c0028ff5:	83 c4 10             	add    esp,0x10
c0028ff8:	83 c4 0c             	add    esp,0xc
c0028ffb:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028ffc <SSE::~SSE()>:
c0028ffc:	83 ec 0c             	sub    esp,0xc
c0028fff:	ba 3c d2 02 c0       	mov    edx,0xc002d23c
c0029004:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029008:	89 10                	mov    DWORD PTR [eax],edx
c002900a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002900e:	83 ec 0c             	sub    esp,0xc
c0029011:	50                   	push   eax
c0029012:	e8 7b b8 fe ff       	call   c0014892 <FPU::~FPU()>
c0029017:	83 c4 10             	add    esp,0x10
c002901a:	90                   	nop
c002901b:	83 c4 0c             	add    esp,0xc
c002901e:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0029020 <SSE::~SSE()>:
c0029020:	83 ec 0c             	sub    esp,0xc
c0029023:	83 ec 0c             	sub    esp,0xc
c0029026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002902a:	e8 cd ff ff ff       	call   c0028ffc <SSE::~SSE()>
c002902f:	83 c4 10             	add    esp,0x10
c0029032:	83 ec 08             	sub    esp,0x8
c0029035:	68 58 01 00 00       	push   0x158
c002903a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002903e:	e8 11 9e fe ff       	call   c0012e54 <operator delete(void*, unsigned long)>
c0029043:	83 c4 10             	add    esp,0x10
c0029046:	83 c4 0c             	add    esp,0xc
c0029049:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c002904a <x87::~x87()>:
c002904a:	83 ec 0c             	sub    esp,0xc
c002904d:	ba 7c d2 02 c0       	mov    edx,0xc002d27c
c0029052:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029056:	89 10                	mov    DWORD PTR [eax],edx
c0029058:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002905c:	83 ec 0c             	sub    esp,0xc
c002905f:	50                   	push   eax
c0029060:	e8 2d b8 fe ff       	call   c0014892 <FPU::~FPU()>
c0029065:	83 c4 10             	add    esp,0x10
c0029068:	90                   	nop
c0029069:	83 c4 0c             	add    esp,0xc
c002906c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002906e <x87::~x87()>:
c002906e:	83 ec 0c             	sub    esp,0xc
c0029071:	83 ec 0c             	sub    esp,0xc
c0029074:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029078:	e8 cd ff ff ff       	call   c002904a <x87::~x87()>
c002907d:	83 c4 10             	add    esp,0x10
c0029080:	83 ec 08             	sub    esp,0x8
c0029083:	68 58 01 00 00       	push   0x158
c0029088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002908c:	e8 c3 9d fe ff       	call   c0012e54 <operator delete(void*, unsigned long)>
c0029091:	83 c4 10             	add    esp,0x10
c0029094:	83 c4 0c             	add    esp,0xc
c0029097:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029098 <IOAPIC::~IOAPIC()>:
c0029098:	83 ec 0c             	sub    esp,0xc
c002909b:	ba d4 d3 02 c0       	mov    edx,0xc002d3d4
c00290a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290a4:	89 10                	mov    DWORD PTR [eax],edx
c00290a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290aa:	83 ec 0c             	sub    esp,0xc
c00290ad:	50                   	push   eax
c00290ae:	e8 79 b1 fe ff       	call   c001422c <Device::~Device()>
c00290b3:	83 c4 10             	add    esp,0x10
c00290b6:	90                   	nop
c00290b7:	83 c4 0c             	add    esp,0xc
c00290ba:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00290bc <IOAPIC::~IOAPIC()>:
c00290bc:	83 ec 0c             	sub    esp,0xc
c00290bf:	83 ec 0c             	sub    esp,0xc
c00290c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290c6:	e8 cd ff ff ff       	call   c0029098 <IOAPIC::~IOAPIC()>
c00290cb:	83 c4 10             	add    esp,0x10
c00290ce:	83 ec 08             	sub    esp,0x8
c00290d1:	68 68 01 00 00       	push   0x168
c00290d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290da:	e8 75 9d fe ff       	call   c0012e54 <operator delete(void*, unsigned long)>
c00290df:	83 c4 10             	add    esp,0x10
c00290e2:	83 c4 0c             	add    esp,0xc
c00290e5:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00290e6 <APIC::~APIC()>:
c00290e6:	83 ec 0c             	sub    esp,0xc
c00290e9:	ba 8c d3 02 c0       	mov    edx,0xc002d38c
c00290ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290f2:	89 10                	mov    DWORD PTR [eax],edx
c00290f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290f8:	83 ec 0c             	sub    esp,0xc
c00290fb:	50                   	push   eax
c00290fc:	e8 5b bc fe ff       	call   c0014d5c <InterruptController::~InterruptController()>
c0029101:	83 c4 10             	add    esp,0x10
c0029104:	90                   	nop
c0029105:	83 c4 0c             	add    esp,0xc
c0029108:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c002910a <APIC::~APIC()>:
c002910a:	83 ec 0c             	sub    esp,0xc
c002910d:	83 ec 0c             	sub    esp,0xc
c0029110:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029114:	e8 cd ff ff ff       	call   c00290e6 <APIC::~APIC()>
c0029119:	83 c4 10             	add    esp,0x10
c002911c:	83 ec 08             	sub    esp,0x8
c002911f:	68 58 21 00 00       	push   0x2158
c0029124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029128:	e8 27 9d fe ff       	call   c0012e54 <operator delete(void*, unsigned long)>
c002912d:	83 c4 10             	add    esp,0x10
c0029130:	83 c4 0c             	add    esp,0xc
c0029133:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029134 <PIC::~PIC()>:
c0029134:	83 ec 0c             	sub    esp,0xc
c0029137:	ba 24 d4 02 c0       	mov    edx,0xc002d424
c002913c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029140:	89 10                	mov    DWORD PTR [eax],edx
c0029142:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029146:	83 ec 0c             	sub    esp,0xc
c0029149:	50                   	push   eax
c002914a:	e8 0d bc fe ff       	call   c0014d5c <InterruptController::~InterruptController()>
c002914f:	83 c4 10             	add    esp,0x10
c0029152:	90                   	nop
c0029153:	83 c4 0c             	add    esp,0xc
c0029156:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029158 <PIC::~PIC()>:
c0029158:	83 ec 0c             	sub    esp,0xc
c002915b:	83 ec 0c             	sub    esp,0xc
c002915e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029162:	e8 cd ff ff ff       	call   c0029134 <PIC::~PIC()>
c0029167:	83 c4 10             	add    esp,0x10
c002916a:	83 ec 08             	sub    esp,0x8
c002916d:	68 58 21 00 00       	push   0x2158
c0029172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029176:	e8 d9 9c fe ff       	call   c0012e54 <operator delete(void*, unsigned long)>
c002917b:	83 c4 10             	add    esp,0x10
c002917e:	83 c4 0c             	add    esp,0xc
c0029181:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029182 <APICTimer::~APICTimer()>:
c0029182:	83 ec 0c             	sub    esp,0xc
c0029185:	ba 78 d4 02 c0       	mov    edx,0xc002d478
c002918a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002918e:	89 10                	mov    DWORD PTR [eax],edx
c0029190:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029194:	83 ec 0c             	sub    esp,0xc
c0029197:	50                   	push   eax
c0029198:	e8 0b db fe ff       	call   c0016ca8 <Timer::~Timer()>
c002919d:	83 c4 10             	add    esp,0x10
c00291a0:	90                   	nop
c00291a1:	83 c4 0c             	add    esp,0xc
c00291a4:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00291a6 <APICTimer::~APICTimer()>:
c00291a6:	83 ec 0c             	sub    esp,0xc
c00291a9:	83 ec 0c             	sub    esp,0xc
c00291ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291b0:	e8 cd ff ff ff       	call   c0029182 <APICTimer::~APICTimer()>
c00291b5:	83 c4 10             	add    esp,0x10
c00291b8:	83 ec 08             	sub    esp,0x8
c00291bb:	68 60 01 00 00       	push   0x160
c00291c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291c4:	e8 8b 9c fe ff       	call   c0012e54 <operator delete(void*, unsigned long)>
c00291c9:	83 c4 10             	add    esp,0x10
c00291cc:	83 c4 0c             	add    esp,0xc
c00291cf:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00291d0 <PIT::~PIT()>:
c00291d0:	83 ec 0c             	sub    esp,0xc
c00291d3:	ba c8 d4 02 c0       	mov    edx,0xc002d4c8
c00291d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291dc:	89 10                	mov    DWORD PTR [eax],edx
c00291de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291e2:	83 ec 0c             	sub    esp,0xc
c00291e5:	50                   	push   eax
c00291e6:	e8 bd da fe ff       	call   c0016ca8 <Timer::~Timer()>
c00291eb:	83 c4 10             	add    esp,0x10
c00291ee:	90                   	nop
c00291ef:	83 c4 0c             	add    esp,0xc
c00291f2:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00291f4 <PIT::~PIT()>:
c00291f4:	83 ec 0c             	sub    esp,0xc
c00291f7:	83 ec 0c             	sub    esp,0xc
c00291fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291fe:	e8 cd ff ff ff       	call   c00291d0 <PIT::~PIT()>
c0029203:	83 c4 10             	add    esp,0x10
c0029206:	83 ec 08             	sub    esp,0x8
c0029209:	68 5c 01 00 00       	push   0x15c
c002920e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029212:	e8 3d 9c fe ff       	call   c0012e54 <operator delete(void*, unsigned long)>
c0029217:	83 c4 10             	add    esp,0x10
c002921a:	83 c4 0c             	add    esp,0xc
c002921d:	c3                   	ret    
